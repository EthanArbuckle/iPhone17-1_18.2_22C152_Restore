uint64_t specialized ConversationRequestProcessorTurnState.__allocating_init(startDirectActionRequestMessage:)(void *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v24;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  MEMORY[0x1F4188790](v4 - 8);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for InputOrigin();
  v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for RequestType();
  v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, *a2, v11);
  v15 = a1;
  v16 = RequestMessageBase.requestId.getter();
  v18 = v17;

  v19 = v15;
  StartRequestMessageBase.inputOrigin.getter();

  v20 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v6, 1, 1, v20);
  type metadata accessor for ConversationRequestProcessorTurnState();
  v21 = swift_allocObject();
  *(void *)(v21 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo) = 0;
  *(_DWORD *)(v21 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter) = 0;
  *(_OWORD *)(v21 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState) = xmmword_1BA0537A0;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v21 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType, v14, v11);
  v22 = (uint64_t *)(v21 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  *v22 = v16;
  v22[1] = v18;
  *(unsigned char *)(v21 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v21 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin, v10, v7);
  outlined init with take of NLRoutingDecisionMessage.RoutingDecision?((uint64_t)v6, v21 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_nlRoutingDecision);
  return v21;
}

uint64_t specialized ConversationRequestProcessorTurnState.__allocating_init(startSpeechRequestMessage:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  MEMORY[0x1F4188790](v2 - 8);
  v4 = &v31[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v35 = type metadata accessor for InputOrigin();
  uint64_t v5 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  v7 = &v31[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for RequestType();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  v11 = &v31[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v38 = a1;
  type metadata accessor for StartSpeechRequestMessage();
  id v12 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RoutingDecisionAware);
  if (swift_dynamicCast())
  {
    outlined init with take of ReferenceResolutionClientProtocol(v36, (uint64_t)v39);
    (*(void (**)(unsigned char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E4FA2448], v8);
    id v13 = v12;
    uint64_t v14 = RequestMessageBase.requestId.getter();
    uint64_t v33 = v15;
    uint64_t v34 = v14;

    int started = StartSpeechRequestMessage.asrOnServer.getter();
    id v16 = v13;
    StartRequestMessageBase.inputOrigin.getter();

    __swift_project_boxed_opaque_existential_1(v39, v39[3]);
    dispatch thunk of RoutingDecisionAware.routingDecision.getter();

    uint64_t v17 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v4, 0, 1, v17);
    type metadata accessor for ConversationRequestProcessorTurnState();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo) = 0;
    *(_DWORD *)(v18 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter) = 0;
    *(_OWORD *)(v18 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState) = xmmword_1BA0537A0;
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v9 + 32))(v18 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType, v11, v8);
    v19 = (uint64_t *)(v18 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    uint64_t v20 = v35;
    uint64_t v21 = v33;
    uint64_t *v19 = v34;
    v19[1] = v21;
    *(unsigned char *)(v18 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer) = started & 1;
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v5 + 32))(v18 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin, v7, v20);
    outlined init with take of NLRoutingDecisionMessage.RoutingDecision?((uint64_t)v4, v18 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_nlRoutingDecision);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v39);
  }
  else
  {
    uint64_t v37 = 0;
    memset(v36, 0, sizeof(v36));
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v36, &demangling cache variable for type metadata for RoutingDecisionAware?);
    (*(void (**)(unsigned char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E4FA2448], v8);
    id v22 = v12;
    uint64_t v23 = RequestMessageBase.requestId.getter();
    uint64_t v25 = v24;

    char v26 = StartSpeechRequestMessage.asrOnServer.getter();
    id v27 = v22;
    StartRequestMessageBase.inputOrigin.getter();

    uint64_t v28 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v4, 1, 1, v28);
    type metadata accessor for ConversationRequestProcessorTurnState();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo) = 0;
    *(_DWORD *)(v18 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter) = 0;
    *(_OWORD *)(v18 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState) = xmmword_1BA0537A0;
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v9 + 32))(v18 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType, v11, v8);
    v29 = (uint64_t *)(v18 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    uint64_t *v29 = v23;
    v29[1] = v25;
    *(unsigned char *)(v18 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer) = v26 & 1;
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v5 + 32))(v18 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin, v7, v35);
    outlined init with take of NLRoutingDecisionMessage.RoutingDecision?((uint64_t)v4, v18 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_nlRoutingDecision);
  }
  return v18;
}

uint64_t outlined init with copy of NLRoutingDecisionMessage.RoutingDecision?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B9E64250@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 88))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9E6429C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 96);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t ObjC metadata update function for ConversationRequestProcessorTurnState()
{
  return type metadata accessor for ConversationRequestProcessorTurnState();
}

void type metadata completion function for ConversationRequestProcessorTurnState()
{
  type metadata accessor for RequestType();
  if (v0 <= 0x3F)
  {
    type metadata accessor for InputOrigin();
    if (v1 <= 0x3F)
    {
      type metadata accessor for NLRoutingDecisionMessage.RoutingDecision?();
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t method lookup function for ConversationRequestProcessorTurnState(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationRequestProcessorTurnState);
}

uint64_t dispatch thunk of ConversationRequestProcessorTurnState.__allocating_init(requestType:requestId:asrOnServer:inputOrigin:nlRoutingDecision:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

void type metadata accessor for NLRoutingDecisionMessage.RoutingDecision?()
{
  if (!lazy cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?)
  {
    type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
    }
  }
}

unint64_t *initializeBufferWithCopyOfBuffer for ConversationRequestProcessorTurnState.SpeechState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  uint64_t v4 = (void *)a2[1];
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(*a2, v4);
  *a1 = v3;
  a1[1] = (unint64_t)v4;
  return a1;
}

void destroy for ConversationRequestProcessorTurnState.SpeechState(uint64_t a1)
{
}

unint64_t *assignWithCopy for ConversationRequestProcessorTurnState.SpeechState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  uint64_t v4 = (void *)a2[1];
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(*a2, v4);
  unint64_t v5 = *a1;
  uint64_t v6 = (void *)a1[1];
  *a1 = v3;
  a1[1] = (unint64_t)v4;
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v5, v6);
  return a1;
}

unint64_t *assignWithTake for ConversationRequestProcessorTurnState.SpeechState(unint64_t *a1, _OWORD *a2)
{
  unint64_t v3 = *a1;
  uint64_t v4 = (void *)a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConversationRequestProcessorTurnState.SpeechState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ConversationRequestProcessorTurnState.SpeechState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)uint64_t result = a2 - 126;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(void *)(result + 8) = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for ConversationRequestProcessorTurnState.SpeechState(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 2;
  }
}

void *destructiveProjectEnumData for ConversationRequestProcessorTurnState.SpeechState(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

void *destructiveInjectEnumTag for ConversationRequestProcessorTurnState.SpeechState(void *result, uint64_t a2)
{
  if (a2 < 2)
  {
    *uint64_t result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
  }
  else
  {
    *uint64_t result = (8 * (a2 - 2)) | 0x8000000000000000;
    result[1] = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConversationRequestProcessorTurnState.SpeechState()
{
  return &type metadata for ConversationRequestProcessorTurnState.SpeechState;
}

uint64_t method lookup function for ConversationRequestProcessorTurnState.ResultCandidateStateHolder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationRequestProcessorTurnState.ResultCandidateStateHolder);
}

uint64_t dispatch thunk of ConversationRequestProcessorTurnState.ResultCandidateStateHolder.byRcId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88))();
}

uint64_t dispatch thunk of ConversationRequestProcessorTurnState.ResultCandidateStateHolder.byRcId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of ConversationRequestProcessorTurnState.ResultCandidateStateHolder.byRcId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of ConversationRequestProcessorTurnState.ResultCandidateStateHolder.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t ConversationRuntimeClient.__allocating_init(onConnectionInterrupted:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  ConversationRuntimeClient.init(onConnectionInterrupted:)(a1, a2);
  return v4;
}

unint64_t ConversationRuntimeClient.ConversationRuntimeClientError.rawValue.getter(char a1)
{
  if (!a1) {
    return 0xD000000000000018;
  }
  if (a1 == 1) {
    return 0xD000000000000016;
  }
  return 0xD000000000000019;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConversationRuntimeClient.ConversationRuntimeClientError(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConversationRuntimeClient.ConversationRuntimeClientError()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ConversationRuntimeClient.ConversationRuntimeClientError()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConversationRuntimeClient.ConversationRuntimeClientError()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ConversationRuntimeClient.ConversationRuntimeClientError@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized ConversationRuntimeClient.ConversationRuntimeClientError.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ConversationRuntimeClient.ConversationRuntimeClientError@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = ConversationRuntimeClient.ConversationRuntimeClientError.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t ConversationRuntimeClient.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  ConversationRuntimeClient.init()();
  return v0;
}

void *ConversationRuntimeClient.init()()
{
  uint64_t v1 = v0;
  v0[2] = 0;
  type metadata accessor for ConversationHandlerLocator();
  unint64_t v2 = ConversationHandlerLocator.__allocating_init(onConnectionInterrupted:)((uint64_t)destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions, 0);
  type metadata accessor for ServerFallbackDisablingUtils();
  memset(v11, 0, sizeof(v11));
  uint64_t v12 = 0;
  uint64_t v3 = (void *)swift_allocObject();
  v3[2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  v3[3] = closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:);
  v3[4] = 0;
  type metadata accessor for ConversationService();
  uint64_t v4 = swift_allocObject();
  specialized ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:)((uint64_t)v2, (uint64_t)v11, 0, 0, 1, (uint64_t)closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:), 0, (uint64_t)v3, v4);
  unint64_t v5 = ConversationService.serialFacade.getter();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  swift_release();
  v1[3] = v5;
  v1[4] = v7;
  v1[5] = v9;
  return v1;
}

void *ConversationRuntimeClient.init(onConnectionInterrupted:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v3[2] = 0;
  type metadata accessor for ConversationHandlerLocator();
  swift_retain();
  uint64_t v6 = ConversationHandlerLocator.__allocating_init(onConnectionInterrupted:)(a1, a2);
  type metadata accessor for ServerFallbackDisablingUtils();
  memset(v16, 0, sizeof(v16));
  uint64_t v17 = 0;
  uint64_t v7 = (void *)swift_allocObject();
  id v8 = objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager());
  swift_retain();
  v7[2] = objc_msgSend(v8, sel_init);
  v7[3] = closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:);
  v7[4] = 0;
  type metadata accessor for ConversationService();
  uint64_t v9 = swift_allocObject();
  specialized ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:)((uint64_t)v6, (uint64_t)v16, 0, 0, 1, (uint64_t)closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:), 0, (uint64_t)v7, v9);
  uint64_t v10 = ConversationService.serialFacade.getter();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  swift_release();
  swift_release();
  swift_release();
  v3[3] = v10;
  v3[4] = v12;
  v3[5] = v14;
  return v3;
}

void *ConversationRuntimeClient.__allocating_init(overrideConversationService:)()
{
  uint64_t v0 = (void *)swift_allocObject();
  v0[2] = 0;
  uint64_t v1 = ConversationService.serialFacade.getter();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  swift_release();
  v0[3] = v1;
  v0[4] = v3;
  v0[5] = v5;
  return v0;
}

void *ConversationRuntimeClient.init(overrideConversationService:)()
{
  v0[2] = 0;
  uint64_t v1 = ConversationService.serialFacade.getter();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  swift_release();
  v0[3] = v1;
  v0[4] = v3;
  v0[5] = v5;
  return v0;
}

uint64_t ConversationRuntimeClient.sendClearExecutionContext(_:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = v3[3];
  uint64_t v7 = v3[4];
  uint64_t v9 = v3[5];
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v8;
  v10[3] = v7;
  v10[4] = v9;
  v10[5] = a1;
  v10[6] = a2;
  v10[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v11 = StaticString.description.getter();
  uint64_t v13 = v12;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveClearContext:from:);
  *(void *)(v14 + 24) = v10;
  *(void *)(v14 + 32) = "bridge(didReceiveClearContext:from:)";
  *(void *)(v14 + 40) = 36;
  *(unsigned char *)(v14 + 48) = 2;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v7 + 208);
  swift_retain();
  v15(v11, v13, &closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:)partial apply, v14);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t static ConversationRuntimeClient.ConnectionInterruptedError.== infix(_:_:)()
{
  return 1;
}

void ConversationRuntimeClient.ConnectionInterruptedError.hash(into:)()
{
}

Swift::Int ConversationRuntimeClient.ConnectionInterruptedError.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t ConversationRuntimeClient.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t ConversationRuntimeClient.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for ConversationRuntimeClientProtocol.sendClearExecutionContext(_:withBridgeDelegate:) in conformance ConversationRuntimeClient()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 168))();
}

uint64_t specialized ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:)(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v73 = a7;
  uint64_t v69 = a6;
  int v71 = a5;
  int v70 = a4;
  int v64 = a3;
  uint64_t v65 = a1;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v11 - 8);
  v72 = &v63[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v68 = type metadata accessor for DispatchTimeInterval();
  uint64_t v67 = *(void *)(v68 - 8);
  MEMORY[0x1F4188790](v68);
  v66 = &v63[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = &v63[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = type metadata accessor for ServerFallbackDisablingUtils();
  v78[4] = &protocol witness table for ServerFallbackDisablingUtils;
  v78[3] = v18;
  v78[0] = a8;
  *(void *)(a9 + 104) = MEMORY[0x1E4FBC870];
  *(void *)(a9 + 112) = 1;
  *(unsigned char *)(a9 + 120) = 0;
  *(void *)(a9 + 136) = 0;
  type metadata accessor for CorrectionsPlatformClient();
  swift_allocObject();
  *(void *)(a9 + 184) = CorrectionsPlatformClient.init()();
  type metadata accessor for TaskService();
  v19 = (void *)swift_allocObject();
  v19[2] = closure #1 in default argument 1 of TaskService.init(initialTask:taskIdGenerator:);
  v19[3] = 0;
  uint64_t v20 = MEMORY[0x1E4FBC860];
  v19[4] = MEMORY[0x1E4FBC860];
  *(void *)(a9 + 192) = v19;
  type metadata accessor for ConcurrentTaskPool();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v20;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v22 = swift_allocObject();
  *(_DWORD *)(v22 + 16) = 0;
  *(void *)(v21 + 24) = v22;
  *(void *)(a9 + 200) = v21;
  type metadata accessor for ConversationService.ExecutionTaskContext();
  uint64_t v23 = (void *)swift_allocObject();
  v23[2] = v20;
  v23[3] = v20;
  v23[4] = 0;
  static ConversationService.ExecutionTaskContext.expirationInNanoSeconds = 60000000000;
  *(void *)(a9 + 208) = v23;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v24 = __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v15 + 16))(v17, v24, v14);
  type metadata accessor for AsyncSerialQueue();
  uint64_t v25 = (void *)swift_allocObject();
  v25[2] = v20;
  v25[3] = 0;
  v25[4] = 0;
  v25[5] = 0;
  uint64_t v26 = swift_allocObject();
  *(_DWORD *)(v26 + 16) = 0;
  v25[6] = v26;
  v25[7] = 0xD000000000000021;
  v25[8] = 0x80000001BA0668F0;
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v15 + 32))((uint64_t)v25 + OBJC_IVAR____TtC14SiriKitRuntime16AsyncSerialQueue_logger, v17, v14);
  *(void *)(a9 + 216) = v25;
  *(void *)(a9 + 224) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  *(void *)(a9 + 272) = 0;
  *(void *)(a9 + 280) = 0;
  *(void *)(a9 + 320) = 0;
  *(void *)(a9 + 328) = 0;
  *(void *)(a9 + 312) = 0;
  outlined init with copy of ReferenceResolutionClientProtocol?(a2, (uint64_t)&v75);
  uint64_t v27 = a2;
  if (v76)
  {
    outlined init with take of ReferenceResolutionClientProtocol(&v75, (uint64_t)v77);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v75);
    uint64_t v28 = type metadata accessor for ReferenceResolutionClient();
    uint64_t v29 = ReferenceResolutionClient.__allocating_init()();
    v77[3] = v28;
    v77[4] = MEMORY[0x1E4FA1F98];
    v77[0] = v29;
  }
  uint64_t v30 = (uint64_t)v72;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v77, a9 + 144);
  uint64_t v31 = v65;
  if (v64)
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v32 = static StubCamBridge.shared;
    uint64_t v33 = type metadata accessor for StubCamBridge();
    uint64_t v34 = &protocol witness table for StubCamBridge;
  }
  else
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v32 = static CamBridgeImpl.shared;
    uint64_t v33 = type metadata accessor for CamBridgeImpl();
    uint64_t v34 = &protocol witness table for CamBridgeImpl;
  }
  *(void *)(a9 + 88) = v33;
  *(void *)(a9 + 96) = v34;
  *(void *)(a9 + 64) = v32;
  swift_retain();
  *(void *)(a9 + 56) = v31;
  swift_retain();
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v37 = 0;
    _os_log_impl(&dword_1B9C64000, v35, v36, "[ConversationService] Ambiguity handling Feature Flag is on. Using DecisionEngine", v37, 2u);
    MEMORY[0x1BA9E48C0](v37, -1, -1);
  }

  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v77, (uint64_t)&v75);
  uint64_t v38 = *(void *)(a9 + 184);
  uint64_t v39 = type metadata accessor for LinkMetadataProvider();
  uint64_t v40 = swift_allocObject();
  id v41 = objc_allocWithZone(MEMORY[0x1E4F72CE0]);
  swift_retain();
  swift_retain();
  *(void *)(v40 + 16) = objc_msgSend(v41, sel_init);
  type metadata accessor for LinkExpansionContextBuilder();
  v42 = (void *)swift_allocObject();
  v42[6] = v39;
  v42[7] = &protocol witness table for LinkMetadataProvider;
  v42[11] = &type metadata for LinkViewActionProvider;
  v42[12] = &protocol witness table for LinkViewActionProvider;
  v42[2] = 0;
  v42[3] = v40;
  v42[13] = 0;
  uint64_t v43 = *(void *)(a9 + 200);
  outlined init with copy of ReferenceResolutionClientProtocol(a9 + 64, (uint64_t)v74);
  uint64_t v44 = one-time initialization token for instance;
  swift_retain();
  if (v44 != -1) {
    swift_once();
  }
  uint64_t v45 = static DecisionEngineCurareDonator.instance;
  uint64_t v46 = type metadata accessor for DecisionEngine();
  uint64_t v47 = swift_allocObject();
  swift_retain();
  uint64_t v48 = specialized DecisionEngine.init(conversationHandlerLocator:rrClient:correctionsClient:linkExpansionContextBuilder:preFlowBlockingWork:camBridge:curareDonator:)(v31, (uint64_t)&v75, v38, (uint64_t)v42, v43, v74, v45, v47);
  swift_release();
  swift_release();
  *(void *)(a9 + 40) = v46;
  *(void *)(a9 + 48) = &protocol witness table for DecisionEngine;
  *(void *)(a9 + 16) = v48;
  type metadata accessor for OS_dispatch_queue();
  uint64_t v49 = static OS_dispatch_queue.main.getter();
  if (one-time initialization token for defaultTimeout != -1) {
    swift_once();
  }
  uint64_t v50 = v68;
  uint64_t v51 = __swift_project_value_buffer(v68, (uint64_t)static JetsamHelper.defaultTimeout);
  uint64_t v52 = v67;
  v53 = v66;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v67 + 16))(v66, v51, v50);
  type metadata accessor for JetsamHelper();
  v54 = (void *)swift_allocObject();
  v55 = (void *)((char *)v54 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction);
  void *v55 = 0;
  v55[1] = 0;
  v54[2] = 0xD00000000000002CLL;
  v54[3] = 0x80000001BA066920;
  v54[4] = dispatch_semaphore_create(1);
  v54[5] = v49;
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v52 + 32))((uint64_t)v54 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_timeout, v53, v50);
  *(void *)(a9 + 128) = v54;
  uint64_t v56 = v73;
  *(void *)(a9 + 288) = v69;
  *(void *)(a9 + 296) = v56;
  *(unsigned char *)(a9 + 304) = v70 & 1;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v78, a9 + 232);
  if (v71)
  {
    uint64_t v57 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v30, 1, 1, v57);
    uint64_t v58 = one-time initialization token for shared;
    swift_retain();
    swift_retain();
    if (v58 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v59 = static MessageBusActor.shared;
    unint64_t v60 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
    v61 = (void *)swift_allocObject();
    v61[2] = v59;
    v61[3] = v60;
    v61[4] = a9;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v30, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.warmup(), (uint64_t)v61);
    swift_release();
    swift_release();
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v78);
  outlined destroy of ReferenceResolutionClientProtocol?(v27);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v77);
  return a9;
}

unint64_t specialized ConversationRuntimeClient.ConversationRuntimeClientError.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ConversationRuntimeClient.ConversationRuntimeClientError.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_1B9E65B40()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 49, 7);
}

uint64_t partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveClearContext:from:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationServiceSerialFacade.bridge(didReceiveClearContext:from:)();
}

uint64_t partial apply for closure #1 in ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:)(uint64_t a1)
{
  return closure #1 in ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_1B9E65C60()
{
  swift_release();
  swift_release();
  swift_release();

  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t objectdestroyTm_3()
{
  swift_release();
  swift_release();
  swift_release();

  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

unint64_t lazy protocol witness table accessor for type ConversationRuntimeClient.ConversationRuntimeClientError and conformance ConversationRuntimeClient.ConversationRuntimeClientError()
{
  unint64_t result = lazy protocol witness table cache variable for type ConversationRuntimeClient.ConversationRuntimeClientError and conformance ConversationRuntimeClient.ConversationRuntimeClientError;
  if (!lazy protocol witness table cache variable for type ConversationRuntimeClient.ConversationRuntimeClientError and conformance ConversationRuntimeClient.ConversationRuntimeClientError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationRuntimeClient.ConversationRuntimeClientError and conformance ConversationRuntimeClient.ConversationRuntimeClientError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ConversationRuntimeClient.ConnectionInterruptedError and conformance ConversationRuntimeClient.ConnectionInterruptedError()
{
  unint64_t result = lazy protocol witness table cache variable for type ConversationRuntimeClient.ConnectionInterruptedError and conformance ConversationRuntimeClient.ConnectionInterruptedError;
  if (!lazy protocol witness table cache variable for type ConversationRuntimeClient.ConnectionInterruptedError and conformance ConversationRuntimeClient.ConnectionInterruptedError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationRuntimeClient.ConnectionInterruptedError and conformance ConversationRuntimeClient.ConnectionInterruptedError);
  }
  return result;
}

uint64_t type metadata accessor for ConversationRuntimeClient()
{
  return self;
}

uint64_t method lookup function for ConversationRuntimeClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationRuntimeClient);
}

uint64_t dispatch thunk of ConversationRuntimeClient.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of ConversationRuntimeClient.__allocating_init(onConnectionInterrupted:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of ConversationRuntimeClient.__allocating_init(overrideConversationService:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of ConversationRuntimeClient.sendStartExecutionTurn(_:withBridgeDelegate:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of ConversationRuntimeClient.sendRequestContextData(_:withBridgeDelegate:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of ConversationRuntimeClient.sendConversationUserInput(_:withBridgeDelegate:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of ConversationRuntimeClient.sendClearExecutionContext(_:withBridgeDelegate:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of ConversationRuntimeClient.sendCancelExecutionTurn(_:withBridgeDelegate:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of ConversationRuntimeClient.checkExecutionOverride(rcId:executionOverrideContext:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)v5 + 184)
                                                                            + **(int **)(*(void *)v5 + 184));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *uint64_t v12 = v6;
  v12[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v14(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of ConversationRuntimeClient.sendCommitResultCandidateId(_:withBridgeDelegate:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of ConversationRuntimeClient.sendRunSiriKitExecutor(_:withRequestContextData:withBridgeDelegate:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of ConversationRuntimeClient.sendSiriKitPluginSignal(_:withBridgeDelegate:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

unsigned char *storeEnumTagSinglePayload for ConversationRuntimeClient.ConversationRuntimeClientError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9E6616CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConversationRuntimeClient.ConversationRuntimeClientError()
{
  return &type metadata for ConversationRuntimeClient.ConversationRuntimeClientError;
}

unsigned char *storeEnumTagSinglePayload for ConversationRuntimeClient.ConnectionInterruptedError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B9E66240);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConversationRuntimeClient.ConnectionInterruptedError()
{
  return &type metadata for ConversationRuntimeClient.ConnectionInterruptedError;
}

uint64_t outlined init with copy of ReferenceResolutionClientProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ReferenceResolutionClientProtocol?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor()
{
  unint64_t result = lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor;
  if (!lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor)
  {
    type metadata accessor for MessageBusActor();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor);
  }
  return result;
}

uint64_t sub_1B9E66398()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in ConversationService.warmup()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationService.warmup()(a1, v4, v5, v6);
}

uint64_t dispatch thunk of ConversationRuntimeClientProtocol.sendStartExecutionTurn(_:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of ConversationRuntimeClientProtocol.sendRequestContextData(_:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of ConversationRuntimeClientProtocol.sendConversationUserInput(_:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of ConversationRuntimeClientProtocol.sendClearExecutionContext(_:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of ConversationRuntimeClientProtocol.sendCancelExecutionTurn(_:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t dispatch thunk of ConversationRuntimeClientProtocol.sendCommitResultCandidateId(_:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of ConversationRuntimeClientProtocol.checkExecutionOverride(rcId:executionOverrideContext:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a7 + 56)
                                                                                              + **(int **)(a7 + 56));
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v15;
  *uint64_t v15 = v7;
  v15[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v17(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t dispatch thunk of ConversationRuntimeClientProtocol.sendRunSiriKitExecutor(_:withRequestContextData:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 64))();
}

uint64_t dispatch thunk of ConversationRuntimeClientProtocol.sendSiriKitPluginSignal(_:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 72))();
}

uint64_t static ConversationSearchResult.supported(_:identifierForFoundFlow:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for ConversationSearchResult();
  uint64_t v7 = a3 + *(int *)(v6 + 24);
  uint64_t v8 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  outlined init with copy of ReferenceResolutionClientProtocol?(a2, a3 + *(int *)(v6 + 28), (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(void *)a3 = a1;
  *(unsigned char *)(a3 + 8) = 1;

  return swift_retain();
}

uint64_t static ConversationSearchResult.reformTo(input:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ConversationSearchResult();
  uint64_t v5 = a2 + *(int *)(v4 + 24);
  uint64_t v6 = type metadata accessor for Input();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, a1, v6);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  uint64_t v8 = a2 + *(int *)(v4 + 28);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  return result;
}

uint64_t static ConversationSearchResult.unsupported(exclude:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ConversationSearchResult();
  uint64_t v5 = a2 + *(int *)(v4 + 24);
  uint64_t v6 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = a2 + *(int *)(v4 + 28);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = a1;
  return result;
}

uint64_t ConversationSearchResult.conversation.getter()
{
  return swift_retain();
}

uint64_t ConversationSearchResult.exclude.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t ConversationSearchResult.reformedInput.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ConversationSearchResult();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + *(int *)(v3 + 24), a1, &demangling cache variable for type metadata for Input?);
}

uint64_t ConversationSearchResult.identifierForFoundFlow.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ConversationSearchResult();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + *(int *)(v3 + 28), a1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t initializeBufferWithCopyOfBuffer for ConversationSearchResult(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Input();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48);
    swift_retain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v15 = *(int *)(a3 + 28);
    uint64_t v16 = (void *)(v7 + v15);
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for UUID();
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
  }
  return v7;
}

uint64_t initializeWithCopy for ConversationSearchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Input();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  swift_retain();
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 16))(v14, v15, v16);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t assignWithCopy for ConversationSearchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Input();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 24))(v16, v17, v18);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 16))(v16, v17, v18);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

uint64_t initializeWithTake for ConversationSearchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Input();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = *(int *)(a3 + 28);
  int v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

uint64_t assignWithTake for ConversationSearchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Input();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v19 + 40))(v16, v17, v18);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v19 + 32))(v16, v17, v18);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConversationSearchResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B9E6763C);
}

uint64_t sub_1B9E6763C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    uint64_t v10 = *(void *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == a2)
    {
      uint64_t v11 = v9;
      int v12 = (char *)a1 + *(int *)(a3 + 24);
      int v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
      return v13(v12, a2, v11);
    }
    else
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
      uint64_t v16 = v14;
      uint64_t v17 = (char *)a1 + *(int *)(a3 + 28);
      return v15(v17, a2, v16);
    }
  }
}

uint64_t storeEnumTagSinglePayload for ConversationSearchResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B9E67790);
}

void *sub_1B9E67790(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *uint64_t result = a2;
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 24);
      int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 28);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for ConversationSearchResult()
{
  _s11SiriKitFlow5InputVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for Input?, MEMORY[0x1E4FA1EE0]);
  if (v0 <= 0x3F)
  {
    _s11SiriKitFlow5InputVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

Swift::Void __swiftcall ConversationSELFHelper.emitActionCandidatesGenerated(rcId:actionCandidates:)(Swift::String rcId, Swift::OpaquePointer actionCandidates)
{
  object = rcId._object;
  uint64_t countAndFlagsBits = rcId._countAndFlagsBits;
  uint64_t v6 = *v2;
  uint64_t v56 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v56 - 8);
  MEMORY[0x1F4188790](v56);
  uint64_t v57 = (uint64_t)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ActionCandidate();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v58 = (char *)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  v55 = (char *)v43 - v13;
  unint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v15 = *((void *)actionCandidates._rawValue + 2);
  if (v15)
  {
    uint64_t v44 = v6;
    uint64_t v45 = countAndFlagsBits;
    uint64_t v46 = object;
    uint64_t v47 = v2;
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    uint64_t v16 = v10 + 16;
    uint64_t v18 = (char *)actionCandidates._rawValue
        + ((*(unsigned __int8 *)(v16 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 64));
    uint64_t v19 = *(void *)(v16 + 56);
    uint64_t v49 = (void (**)(unint64_t, char *, uint64_t))(v16 + 16);
    uint64_t v50 = v7 + 16;
    uint64_t v48 = (void (**)(unint64_t, char *, uint64_t))(v16 + 24);
    uint64_t v52 = (void (**)(uint64_t, uint64_t))(v7 + 8);
    v53 = v17;
    uint64_t v54 = v16;
    uint64_t v51 = (void (**)(char *, uint64_t))(v16 - 8);
    v43[1] = actionCandidates._rawValue;
    swift_bridgeObjectRetain();
    uint64_t v20 = v7;
    int v21 = v55;
    uint64_t v22 = v57;
    while (1)
    {
      uint64_t v23 = v53;
      v53(v21, v18, v9);
      UUID.init()();
      v23(v58, v21, v9);
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v59 = (void *)v14;
      unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
      uint64_t v27 = *(void *)(v14 + 16);
      BOOL v28 = (v25 & 1) == 0;
      uint64_t v29 = v27 + v28;
      if (__OFADD__(v27, v28))
      {
        __break(1u);
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
      char v30 = v25;
      if (*(void *)(v14 + 24) >= v29)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v33 = v59;
          if (v25) {
            goto LABEL_3;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          uint64_t v33 = v59;
          if (v30) {
            goto LABEL_3;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29, isUniquelyReferenced_nonNull_native);
        unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v57);
        if ((v30 & 1) != (v32 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return;
        }
        unint64_t v26 = v31;
        uint64_t v33 = v59;
        if (v30)
        {
LABEL_3:
          (*v48)(v33[7] + v26 * v19, v58, v9);
          uint64_t v22 = v57;
          goto LABEL_4;
        }
      }
      v33[(v26 >> 6) + 8] |= 1 << v26;
      uint64_t v22 = v57;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v20 + 16))(v33[6] + *(void *)(v20 + 72) * v26, v57, v56);
      (*v49)(v33[7] + v26 * v19, v58, v9);
      uint64_t v34 = v33[2];
      BOOL v35 = __OFADD__(v34, 1);
      uint64_t v36 = v34 + 1;
      if (v35) {
        goto LABEL_25;
      }
      v33[2] = v36;
LABEL_4:
      unint64_t v14 = (unint64_t)v59;
      swift_bridgeObjectRelease();
      (*v52)(v22, v56);
      int v21 = v55;
      (*v51)(v55, v9);
      v18 += v19;
      if (!--v15)
      {
        swift_bridgeObjectRelease();
        uint64_t v6 = v44;
        break;
      }
    }
  }
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = v14;
  *(void *)(v37 + 24) = v6;
  swift_bridgeObjectRetain_n();
  uint64_t v38 = dispatch thunk of ConversationSELFHelper.makeClientEvent(rcId:_:)();
  swift_bridgeObjectRelease();
  swift_release();
  if (v38)
  {
    dispatch thunk of ConversationSELFHelper.emit(_:)();
    *(void *)(swift_allocObject() + 16) = v14;
    swift_bridgeObjectRetain();
    uint64_t v39 = (void *)dispatch thunk of ConversationSELFHelper.makeClientEvent(rcId:_:)();
    swift_bridgeObjectRelease();
    swift_release();
    if (v39)
    {
      dispatch thunk of ConversationSELFHelper.emit(_:)();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for instrumentation != -1) {
LABEL_26:
    }
      swift_once();
    uint64_t v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.instrumentation);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v42 = 0;
      _os_log_impl(&dword_1B9C64000, v38, v41, "[ConversationSELFHelper] buildActionCandidatesGeneratedMessage failed to be emitted", v42, 2u);
      MEMORY[0x1BA9E48C0](v42, -1, -1);
    }
  }
}

uint64_t ConversationSELFHelper.buildActionCandidatesGeneratedMessage(rcId:actionCandidates:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v3;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = v5;
  swift_bridgeObjectRetain();
  uint64_t v7 = dispatch thunk of ConversationSELFHelper.makeClientEvent(rcId:_:)();
  swift_release();
  return v7;
}

uint64_t ConversationSELFHelper.buildActionCandidatesGeneratedTier1Message(rcId:actionCandidates:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(swift_allocObject() + 16) = a3;
  swift_bridgeObjectRetain();
  uint64_t v3 = dispatch thunk of ConversationSELFHelper.makeClientEvent(rcId:_:)();
  swift_release();
  return v3;
}

uint64_t closure #1 in ConversationSELFHelper.buildActionCandidatesGeneratedMessage(rcId:actionCandidates:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v161 = a3;
  uint64_t v166 = a2;
  uint64_t v158 = type metadata accessor for Siri_Nlu_External_UUID();
  v180 = *(void (**)(char *, uint64_t))(v158 - 8);
  MEMORY[0x1F4188790](v158);
  v157 = (char *)&v132 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v5 = *(void *)(v156 - 8);
  MEMORY[0x1F4188790](v156);
  v155 = (char *)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  v140 = (char *)&v132 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  v154 = (char *)&v132 - v10;
  uint64_t v153 = type metadata accessor for CamUSOParse();
  uint64_t v11 = *(void *)(v153 - 8);
  MEMORY[0x1F4188790](v153);
  v152 = (char *)&v132 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v179 = type metadata accessor for CamParse();
  uint64_t v13 = *(void *)(v179 - 8);
  MEMORY[0x1F4188790](v179);
  uint64_t v15 = (void **)((char *)&v132 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = type metadata accessor for ActionCandidate();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v132 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  v139 = (char *)&v132 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  v143 = (char *)&v132 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  v174 = (char *)&v132 - v27;
  MEMORY[0x1F4188790](v26);
  v181 = (char *)&v132 - v28;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: ActionCandidate)?);
  uint64_t v30 = MEMORY[0x1F4188790](v29 - 8);
  v173 = (char *)&v132 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v172 = (uint64_t)&v132 - v32;
  id v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA02A8]), sel_init);
  if (!v33)
  {
    if (one-time initialization token for instrumentation != -1) {
      goto LABEL_84;
    }
    goto LABEL_71;
  }
  id v136 = v33;
  id v135 = a1;
  uint64_t v186 = MEMORY[0x1E4FBC860];
  uint64_t v34 = *(void *)(v166 + 64);
  uint64_t v142 = v166 + 64;
  uint64_t v35 = 1 << *(unsigned char *)(v166 + 32);
  uint64_t v36 = -1;
  if (v35 < 64) {
    uint64_t v36 = ~(-1 << v35);
  }
  unint64_t v37 = v36 & v34;
  uint64_t v164 = v21 + 16;
  uint64_t v163 = v17 + 16;
  v177 = (void (**)(char *, uint64_t, uint64_t))(v21 + 32);
  v171 = (void (**)(char *, uint64_t, uint64_t))(v17 + 32);
  uint64_t v38 = v5;
  uint64_t v39 = (void (**)(char *, uint64_t))(v21 + 8);
  v168 = (uint64_t (**)(void **, uint64_t))(v13 + 88);
  int v167 = *MEMORY[0x1E4F9FA48];
  int v150 = *MEMORY[0x1E4F9FA40];
  v141 = (void (**)(void **, uint64_t))(v13 + 8);
  v162 = (void (**)(void **, uint64_t))(v13 + 96);
  uint64_t v165 = v21;
  v160 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  v149 = (void (**)(char *, void **, uint64_t))(v11 + 32);
  v148 = (void (**)(char *, uint64_t))(v38 + 8);
  v147 = (void (**)(char *, uint64_t))((char *)v180 + 8);
  v146 = (void (**)(char *, uint64_t))(v11 + 8);
  v170 = (void (**)(char *, uint64_t))(v17 + 8);
  int64_t v145 = (unint64_t)(v35 + 63) >> 6;
  int64_t v133 = v145 - 1;
  swift_bridgeObjectRetain();
  int64_t v176 = 0;
  uint64_t v138 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v137 = 0x80000001BA063BF0;
  uint64_t v40 = v17;
  v159 = (void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v169 = v16;
  uint64_t v151 = v17;
  uint64_t v41 = (uint64_t)v173;
  if (!v37) {
    goto LABEL_7;
  }
LABEL_5:
  uint64_t v178 = (v37 - 1) & v37;
  unint64_t v42 = __clz(__rbit64(v37)) | (v176 << 6);
LABEL_6:
  uint64_t v43 = v166;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v165 + 16))(v41, *(void *)(v166 + 48) + *(void *)(v165 + 72) * v42, v20);
  unint64_t v44 = *(void *)(v43 + 56) + *(void *)(v40 + 72) * v42;
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: ActionCandidate));
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v40 + 16))(v41 + *(int *)(v45 + 48), v44, v16);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v41, 0, 1, v45);
  while (1)
  {
    uint64_t v50 = v172;
    outlined init with take of (key: UUID, value: ActionCandidate)?(v41, v172);
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: ActionCandidate));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 48))(v50, 1, v51) == 1)
    {
      swift_release();
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CNVSchemaCNVActionCandidate);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v124 = v136;
      objc_msgSend(v136, sel_setActionCandidates_, isa);

      id v125 = v135;
      objc_msgSend(v135, sel_setActionCandidatesGenerated_, v124);

      id v126 = v125;
      return (uint64_t)v125;
    }
    uint64_t v52 = v50 + *(int *)(v51 + 48);
    v53 = *v177;
    (*v177)(v181, v50, v20);
    (*v171)(v19, v52, v16);
    id v54 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0298]), sel_init);
    if (!v54)
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for instrumentation != -1) {
        swift_once();
      }
      uint64_t v127 = type metadata accessor for Logger();
      __swift_project_value_buffer(v127, (uint64_t)static Logger.instrumentation);
      v128 = Logger.logObject.getter();
      os_log_type_t v129 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v128, v129))
      {
        v130 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v130 = 0;
        _os_log_impl(&dword_1B9C64000, v128, v129, "[ConversationSELFHelper] Could not create CNVSchemaCNVActionCandidate message for logging ", v130, 2u);
        MEMORY[0x1BA9E48C0](v130, -1, -1);
      }

      (*v170)(v19, v16);
      (*v39)(v181, v20);
      swift_release();
      return 0;
    }
    v55 = v54;
    v175 = v53;
    uint64_t v56 = v174;
    ActionCandidate.loggingId.getter();
    id v57 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
    Class v58 = UUID._bridgeToObjectiveC()().super.isa;
    id v59 = objc_msgSend(v57, sel_initWithNSUUID_, v58);

    v180 = *v39;
    v180(v56, v20);
    objc_msgSend(v55, sel_setActionCandidateId_, v59);

    uint64_t v60 = ActionCandidate.affinityScore.getter();
    unint64_t v61 = v60;
    if (v60 < 0)
    {
      unint64_t v61 = -v60;
      if (__OFSUB__(0, v60)) {
        goto LABEL_83;
      }
      if ((v61 & 0x8000000000000000) != 0) {
        goto LABEL_86;
      }
    }
    if (HIDWORD(v61)) {
      goto LABEL_86;
    }
    objc_msgSend(v55, sel_setAffinityScore_);
    *(void *)&long long v182 = ActionCandidate.flowHandlerId.getter();
    *((void *)&v182 + 1) = v62;
    uint64_t v184 = 46;
    unint64_t v185 = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v63 = StringProtocol.components<A>(separatedBy:)();
    swift_bridgeObjectRelease();
    uint64_t v64 = *(void *)(v63 + 16);
    if (!v64)
    {
      swift_bridgeObjectRelease();
      goto LABEL_55;
    }
    uint64_t v65 = v63 + 16 * v64;
    uint64_t v67 = *(void *)(v65 + 16);
    uint64_t v66 = *(void *)(v65 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)&long long v182 = v67;
    *((void *)&v182 + 1) = v66;
    *(void *)&long long v182 = String.init<A>(_:)();
    *((void *)&v182 + 1) = v68;
    swift_bridgeObjectRetain();
    v69._uint64_t countAndFlagsBits = 0x656C646E75622ELL;
    v69._object = (void *)0xE700000000000000;
    String.append(_:)(v69);
    swift_bridgeObjectRelease();
    uint64_t v70 = static ConversationSELFHelper.convert(fromPlugin:)();
    swift_bridgeObjectRelease();
    objc_msgSend(v55, sel_setPlugin_, v70);
    if (v70 != 23) {
      goto LABEL_55;
    }
    id v71 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA03D8]), sel_init);
    if (!v71) {
      goto LABEL_55;
    }
    id v144 = v71;
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v72 = type metadata accessor for Logger();
    __swift_project_value_buffer(v72, (uint64_t)static Logger.instrumentation);
    uint64_t v73 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v73, v74))
    {
      long long v75 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v75 = 0;
      _os_log_impl(&dword_1B9C64000, v73, v74, "[ConversationSELFHelper] Trying to log link information", v75, 2u);
      MEMORY[0x1BA9E48C0](v75, -1, -1);
    }

    uint64_t v76 = ActionCandidate.userData.getter();
    if (!v76)
    {
      long long v182 = 0u;
      long long v183 = 0u;
LABEL_50:
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v182, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_51:
      v86 = Logger.logObject.getter();
      os_log_type_t v88 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v86, v88))
      {
        v89 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v89 = 0;
        _os_log_impl(&dword_1B9C64000, v86, v88, "[ConversationSELFHelper] Unable to log link action id as it's missing from userData", v89, 2u);
        MEMORY[0x1BA9E48C0](v89, -1, -1);
      }
      id v87 = v144;
      goto LABEL_54;
    }
    uint64_t v77 = v76;
    if (*(void *)(v76 + 16)
      && (unint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000014, v137), (v79 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v77 + 56) + 32 * v78, (uint64_t)&v182);
    }
    else
    {
      long long v182 = 0u;
      long long v183 = 0u;
    }
    swift_bridgeObjectRelease();
    if (!*((void *)&v183 + 1)) {
      goto LABEL_50;
    }
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_51;
    }
    unint64_t v80 = v185;
    uint64_t v134 = v184;
    v81 = Logger.logObject.getter();
    os_log_type_t v82 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v81, v82))
    {
      unint64_t v83 = v80;
      v84 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v84 = 0;
      _os_log_impl(&dword_1B9C64000, v81, v82, "[ConversationSELFHelper] Logging link action", v84, 2u);
      v85 = v84;
      unint64_t v80 = v83;
      MEMORY[0x1BA9E48C0](v85, -1, -1);
    }

    v86 = MEMORY[0x1BA9E2DD0](v134, v80);
    swift_bridgeObjectRelease();
    id v87 = v144;
    objc_msgSend(v144, sel_setLinkActionId_, v86);
LABEL_54:

    id v90 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
    Class v91 = UUID._bridgeToObjectiveC()().super.isa;
    id v92 = objc_msgSend(v90, sel_initWithNSUUID_, v91);

    objc_msgSend(v87, sel_setLinkId_, v92);
    objc_msgSend(v55, sel_setLinkMetadata_, v87);

LABEL_55:
    ActionCandidate.parse.getter();
    int v93 = (*v168)(v15, v179);
    if (v93 == v167)
    {
      (*v162)(v15, v179);
      uint64_t v94 = v20;
      v95 = v152;
      uint64_t v96 = v153;
      (*v149)(v152, v15, v153);
      v97 = v155;
      CamUSOParse.userParse.getter();
      v98 = v157;
      Siri_Nlu_External_UserParse.id.getter();
      (*v148)(v97, v156);
      uint64_t v99 = (uint64_t)v154;
      static ConversionUtils.convertProtoToUuid(protoUuid:)();
      (*v147)(v98, v158);
      if ((*v160)(v99, 1, v94) == 1)
      {
        (*v146)(v95, v96);
        outlined destroy of ReferenceResolutionClientProtocol?(v99, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        uint64_t v20 = v94;
        uint64_t v40 = v151;
        uint64_t v39 = v159;
      }
      else
      {
        v103 = v143;
        v175(v143, v99, v94);
        id v104 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
        Class v105 = UUID._bridgeToObjectiveC()().super.isa;
        id v106 = objc_msgSend(v104, sel_initWithNSUUID_, v105);

        objc_msgSend(v55, sel_setParseHypothesisId_, v106);
        v107 = v159;
        v180(v103, v94);
        (*v146)(v95, v96);
        uint64_t v20 = v94;
        uint64_t v39 = v107;
        uint64_t v40 = v151;
      }
    }
    else if (v93 == v150)
    {
      (*v162)(v15, v179);
      v100 = *v15;
      PommesResponse.requestId.getter();
      if (v101)
      {
        uint64_t v102 = (uint64_t)v140;
        UUID.init(uuidString:)();
        swift_bridgeObjectRelease();
        if ((*v160)(v102, 1, v20) == 1)
        {

          outlined destroy of ReferenceResolutionClientProtocol?(v102, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        }
        else
        {
          v108 = v139;
          v175(v139, v102, v20);
          v109 = self;
          Class v110 = UUID._bridgeToObjectiveC()().super.isa;
          id v111 = objc_msgSend(v109, sel_derivedIdentifierForComponent_fromSourceIdentifier_, 21, v110);

          v112 = v174;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          id v113 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
          Class v114 = UUID._bridgeToObjectiveC()().super.isa;
          id v115 = objc_msgSend(v113, sel_initWithNSUUID_, v114);

          v116 = v112;
          uint64_t v39 = v159;
          v117 = v180;
          v180(v116, v20);
          objc_msgSend(v55, sel_setPommesId_, v115);

          v117(v108, v20);
        }
      }
      else
      {
      }
    }
    else
    {
      (*v141)(v15, v179);
    }
    unint64_t v37 = v178;
    id v118 = v55;
    MEMORY[0x1BA9E3030]();
    if (*(void *)((v186 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v186 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    uint64_t v16 = v169;
    (*v170)(v19, v169);
    v180(v181, v20);
    uint64_t v41 = (uint64_t)v173;
    if (v37) {
      goto LABEL_5;
    }
LABEL_7:
    int64_t v46 = v176 + 1;
    if (__OFADD__(v176, 1)) {
      break;
    }
    if (v46 < v145)
    {
      unint64_t v47 = *(void *)(v142 + 8 * v46);
      if (v47) {
        goto LABEL_10;
      }
      int64_t v48 = v176 + 2;
      ++v176;
      if (v46 + 1 < v145)
      {
        unint64_t v47 = *(void *)(v142 + 8 * v48);
        if (v47) {
          goto LABEL_13;
        }
        int64_t v176 = v46 + 1;
        if (v46 + 2 < v145)
        {
          unint64_t v47 = *(void *)(v142 + 8 * (v46 + 2));
          if (v47)
          {
            v46 += 2;
            goto LABEL_10;
          }
          int64_t v48 = v46 + 3;
          int64_t v176 = v46 + 2;
          if (v46 + 3 < v145)
          {
            unint64_t v47 = *(void *)(v142 + 8 * v48);
            if (!v47)
            {
              while (1)
              {
                int64_t v46 = v48 + 1;
                if (__OFADD__(v48, 1)) {
                  break;
                }
                if (v46 >= v145)
                {
                  int64_t v176 = v133;
                  goto LABEL_24;
                }
                unint64_t v47 = *(void *)(v142 + 8 * v46);
                ++v48;
                if (v47) {
                  goto LABEL_10;
                }
              }
              __break(1u);
LABEL_86:
              uint64_t result = _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
              return result;
            }
LABEL_13:
            int64_t v46 = v48;
LABEL_10:
            uint64_t v178 = (v47 - 1) & v47;
            unint64_t v42 = __clz(__rbit64(v47)) + (v46 << 6);
            int64_t v176 = v46;
            goto LABEL_6;
          }
        }
      }
    }
LABEL_24:
    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: ActionCandidate));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v41, 1, 1, v49);
    uint64_t v178 = 0;
  }
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  swift_once();
LABEL_71:
  uint64_t v119 = type metadata accessor for Logger();
  __swift_project_value_buffer(v119, (uint64_t)static Logger.instrumentation);
  v120 = Logger.logObject.getter();
  os_log_type_t v121 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v120, v121))
  {
    v122 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v122 = 0;
    _os_log_impl(&dword_1B9C64000, v120, v121, "[ConversationSELFHelper] Failed to create CNVSchemaCNVActionCandidatesGenerated SELF objects", v122, 2u);
    MEMORY[0x1BA9E48C0](v122, -1, -1);
  }

  return 0;
}

uint64_t closure #1 in ConversationSELFHelper.buildActionCandidatesGeneratedTier1Message(rcId:actionCandidates:)(void *a1, uint64_t a2)
{
  uint64_t v91 = type metadata accessor for CamUSOParse();
  uint64_t v4 = *(void *)(v91 - 8);
  MEMORY[0x1F4188790](v91);
  uint64_t v6 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = type metadata accessor for CamParse();
  uint64_t v7 = *(void *)(v85 - 8);
  MEMORY[0x1F4188790](v85);
  uint64_t v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v104 = type metadata accessor for ActionCandidate();
  uint64_t v10 = *(void *)(v104 - 8);
  MEMORY[0x1F4188790](v104);
  uint64_t v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v103 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v103 - 8);
  MEMORY[0x1F4188790](v103);
  v86 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: ActionCandidate)?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  v100 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v99 = (uint64_t)&v73 - v18;
  id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA02B0]), sel_init);
  if (!v19)
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v68 = type metadata accessor for Logger();
    __swift_project_value_buffer(v68, (uint64_t)static Logger.instrumentation);
    Swift::String v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v69, v70))
    {
      id v71 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v71 = 0;
      _os_log_impl(&dword_1B9C64000, v69, v70, "[ConversationSELFHelper] Failed to create CNVSchemaCNVActionCandidatesGeneratedTier1 SELF objects", v71, 2u);
      MEMORY[0x1BA9E48C0](v71, -1, -1);
    }

    return 0;
  }
  v84 = v6;
  v98 = v9;
  id v75 = v19;
  uint64_t v76 = a1;
  unint64_t v105 = MEMORY[0x1E4FBC860];
  uint64_t v20 = *(void *)(a2 + 64);
  uint64_t v78 = a2 + 64;
  uint64_t v21 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  uint64_t v23 = v10;
  unint64_t v24 = v22 & v20;
  uint64_t v87 = v23 + 16;
  uint64_t v88 = v13 + 16;
  uint64_t v96 = (void (**)(char *, uint64_t, uint64_t))(v23 + 32);
  v97 = (void (**)(char *, uint64_t, uint64_t))(v13 + 32);
  v95 = (uint64_t (**)(char *, uint64_t))(v7 + 88);
  int v94 = *MEMORY[0x1E4F9FA48];
  uint64_t v89 = v13;
  uint64_t v90 = v23;
  id v92 = (uint64_t (**)(char *, uint64_t))(v13 + 8);
  int v93 = (void (**)(char *, uint64_t))(v23 + 8);
  unint64_t v83 = (uint64_t (**)(char *, uint64_t))(v7 + 8);
  os_log_type_t v82 = (void (**)(char *, uint64_t))(v7 + 96);
  v81 = (void (**)(char *, char *, uint64_t))(v4 + 32);
  unint64_t v80 = (void (**)(char *, uint64_t))(v4 + 8);
  int64_t v79 = (unint64_t)(v21 + 63) >> 6;
  int64_t v74 = v79 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v101 = v12;
  int64_t v102 = 0;
  uint64_t v26 = v103;
  uint64_t v27 = v85;
  uint64_t v28 = v86;
  uint64_t v77 = a2;
  uint64_t v29 = v100;
  if (!v24) {
    goto LABEL_7;
  }
LABEL_5:
  unint64_t v30 = __clz(__rbit64(v24));
  v24 &= v24 - 1;
  unint64_t v31 = v30 | (v102 << 6);
LABEL_6:
  (*(void (**)(char *, unint64_t, uint64_t))(v89 + 16))(v29, *(void *)(a2 + 48) + *(void *)(v89 + 72) * v31, v26);
  uint64_t v32 = v90;
  unint64_t v33 = *(void *)(a2 + 56) + *(void *)(v90 + 72) * v31;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: ActionCandidate));
  (*(void (**)(char *, unint64_t, uint64_t))(v32 + 16))(&v29[*(int *)(v34 + 48)], v33, v104);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v29, 0, 1, v34);
  uint64_t v12 = v101;
  while (1)
  {
    uint64_t v39 = (uint64_t)v29;
    uint64_t v40 = v99;
    outlined init with take of (key: UUID, value: ActionCandidate)?(v39, v99);
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: ActionCandidate));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 48))(v40, 1, v41) == 1)
    {
      swift_release();
      if (v105 >> 62) {
        goto LABEL_47;
      }
      uint64_t v64 = v76;
      if (*(void *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_40;
      }
LABEL_48:

      swift_bridgeObjectRelease();
      return 0;
    }
    uint64_t v42 = a2;
    uint64_t v43 = v40 + *(int *)(v41 + 48);
    unint64_t v44 = v28;
    uint64_t v45 = v28;
    uint64_t v46 = v103;
    (*v97)(v44, v40, v103);
    uint64_t v47 = v104;
    (*v96)(v12, v43, v104);
    int64_t v48 = v98;
    ActionCandidate.parse.getter();
    int v49 = (*v95)(v48, v27);
    if (v49 == v94)
    {
      (*v82)(v48, v27);
      uint64_t v50 = v84;
      uint64_t v51 = v91;
      (*v81)(v84, v48, v91);
      uint64_t v52 = v50;
      uint64_t v53 = CamUSOParse.appBundleId.getter();
      if (v54)
      {
        uint64_t v55 = v53;
        uint64_t v56 = v54;
        id v57 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA03E0]), sel_init);
        if (v57)
        {
          Class v58 = v57;
          id v59 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
          Class isa = UUID._bridgeToObjectiveC()().super.isa;
          id v61 = objc_msgSend(v59, sel_initWithNSUUID_, isa);

          objc_msgSend(v58, sel_setLinkId_, v61);
          uint64_t v62 = (void *)MEMORY[0x1BA9E2DD0](v55, v56);
          swift_bridgeObjectRelease();
          objc_msgSend(v58, sel_setAppBundleId_, v62);

          id v63 = v58;
          MEMORY[0x1BA9E3030]();
          if (*(void *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();

          uint64_t v42 = v77;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        uint64_t v51 = v91;
        uint64_t v12 = v101;
      }
      (*v80)(v52, v51);
      (*v93)(v12, v104);
      uint64_t v28 = v86;
      uint64_t v26 = v103;
      uint64_t result = (*v92)(v86, v103);
      uint64_t v27 = v85;
    }
    else
    {
      (*v93)(v12, v47);
      (*v92)(v45, v46);
      uint64_t result = (*v83)(v48, v27);
      uint64_t v26 = v46;
      uint64_t v28 = v45;
    }
    a2 = v42;
    uint64_t v29 = v100;
    if (v24) {
      goto LABEL_5;
    }
LABEL_7:
    int64_t v35 = v102 + 1;
    if (__OFADD__(v102, 1)) {
      break;
    }
    if (v35 < v79)
    {
      unint64_t v36 = *(void *)(v78 + 8 * v35);
      if (v36) {
        goto LABEL_10;
      }
      int64_t v37 = v102 + 2;
      ++v102;
      if (v35 + 1 < v79)
      {
        unint64_t v36 = *(void *)(v78 + 8 * v37);
        if (v36) {
          goto LABEL_13;
        }
        int64_t v102 = v35 + 1;
        if (v35 + 2 < v79)
        {
          unint64_t v36 = *(void *)(v78 + 8 * (v35 + 2));
          if (v36)
          {
            v35 += 2;
            goto LABEL_10;
          }
          int64_t v37 = v35 + 3;
          int64_t v102 = v35 + 2;
          if (v35 + 3 < v79)
          {
            unint64_t v36 = *(void *)(v78 + 8 * v37);
            if (!v36)
            {
              while (1)
              {
                int64_t v35 = v37 + 1;
                if (__OFADD__(v37, 1)) {
                  break;
                }
                if (v35 >= v79)
                {
                  int64_t v102 = v74;
                  goto LABEL_24;
                }
                unint64_t v36 = *(void *)(v78 + 8 * v35);
                ++v37;
                if (v36) {
                  goto LABEL_10;
                }
              }
              __break(1u);
              return result;
            }
LABEL_13:
            int64_t v35 = v37;
LABEL_10:
            unint64_t v24 = (v36 - 1) & v36;
            unint64_t v31 = __clz(__rbit64(v36)) + (v35 << 6);
            int64_t v102 = v35;
            goto LABEL_6;
          }
        }
      }
    }
LABEL_24:
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: ActionCandidate));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v29, 1, 1, v38);
    unint64_t v24 = 0;
  }
  __break(1u);
LABEL_47:
  swift_bridgeObjectRetain();
  uint64_t v72 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v64 = v76;
  if (!v72) {
    goto LABEL_48;
  }
LABEL_40:
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for CNVSchemaCNVLinkMetadataTier1);
  Class v65 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v66 = v75;
  objc_msgSend(v75, sel_setMetadataTier1s_, v65);

  objc_msgSend(v64, sel_setActionCandidatesGeneratedTier1_, v66);
  id v67 = v64;
  return (uint64_t)v64;
}

uint64_t sub_1B9E6A154()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in ConversationSELFHelper.buildActionCandidatesGeneratedMessage(rcId:actionCandidates:)(void *a1)
{
  return closure #1 in ConversationSELFHelper.buildActionCandidatesGeneratedMessage(rcId:actionCandidates:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1B9E6A194()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in ConversationSELFHelper.buildActionCandidatesGeneratedTier1Message(rcId:actionCandidates:)(void *a1)
{
  return closure #1 in ConversationSELFHelper.buildActionCandidatesGeneratedTier1Message(rcId:actionCandidates:)(a1, *(void *)(v1 + 16));
}

uint64_t outlined init with take of (key: UUID, value: ActionCandidate)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UUID, value: ActionCandidate)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(void), void (*a6)(char *, uint64_t, uint64_t, uint64_t), void (*a7)(uint64_t, uint64_t))
{
  unint64_t v24 = a6;
  uint64_t v11 = v7;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(a4);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a5(0);
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v24 - v20;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(a1, 1, v18) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(a1, a4);
    a7(a2, a3);
    swift_bridgeObjectRelease();
    return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, a4);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))(v21, a1, v18);
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v25 = *v11;
    uint64_t *v11 = 0x8000000000000000;
    v24(v21, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t *v11 = v25;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void (*a5)(char *, uint64_t, uint64_t), void (*a6)(uint64_t))
{
  uint64_t v11 = v6;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(a3);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(a4);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v20 + 48))(a1, 1) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(a1, a3);
    a6(a2);
    uint64_t v21 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(a2, v21);
    return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, a3);
  }
  else
  {
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a1, (uint64_t)v19, a4);
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v26 = *v11;
    uint64_t *v11 = 0x8000000000000000;
    a5(v19, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v11 = v26;
    swift_bridgeObjectRelease();
    uint64_t v24 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(a2, v24);
  }
}

uint64_t ConversationService.__allocating_init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:)(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = a6;
  uint64_t v24 = a7;
  uint64_t v14 = swift_allocObject();
  uint64_t v16 = *(void *)(a8 + 24);
  uint64_t v15 = *(void *)(a8 + 32);
  uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1(a8, v16);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v19);
  uint64_t v21 = specialized ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:)(a1, a2, a3, a4, a5, v23, v24, (uint64_t)v19, v14, v16, v15);
  __swift_destroy_boxed_opaque_existential_1Tm(a8);
  return v21;
}

void *ConversationService.serialFacade.getter()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v0[39];
  uint64_t v5 = v0[40];
  if (v6)
  {
    uint64_t v0 = (void *)v0[39];
  }
  else
  {
    uint64_t v18 = v0[41];
    uint64_t v19 = v5;
    uint64_t v7 = one-time initialization token for executor;
    swift_retain();
    if (v7 != -1) {
      swift_once();
    }
    uint64_t v8 = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
    v17(v4, v8, v1);
    type metadata accessor for AsyncSerialQueue();
    uint64_t v9 = (char *)swift_allocObject();
    *((void *)v9 + 2) = MEMORY[0x1E4FBC860];
    *((void *)v9 + 3) = 0;
    *((void *)v9 + 4) = 0;
    *((void *)v9 + 5) = 0;
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
    uint64_t v10 = swift_allocObject();
    *(_DWORD *)(v10 + 16) = 0;
    *((void *)v9 + 6) = v10;
    *((void *)v9 + 7) = 0xD000000000000022;
    *((void *)v9 + 8) = 0x80000001BA066A00;
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v2 + 32);
    v11(&v9[OBJC_IVAR____TtC14SiriKitRuntime16AsyncSerialQueue_logger], v4, v1);
    v17(v4, v8, v1);
    uint64_t v12 = (char *)swift_allocObject();
    *((void *)v12 + 2) = MEMORY[0x1E4FBC860];
    *((void *)v12 + 3) = 0;
    *((void *)v12 + 4) = 0;
    *((void *)v12 + 5) = 0;
    uint64_t v13 = swift_allocObject();
    *(_DWORD *)(v13 + 16) = 0;
    *((void *)v12 + 6) = v13;
    *((void *)v12 + 7) = 0xD000000000000020;
    *((void *)v12 + 8) = 0x80000001BA066A30;
    v11(&v12[OBJC_IVAR____TtC14SiriKitRuntime16AsyncSerialQueue_logger], v4, v1);
    uint64_t v14 = v0[39];
    v0[39] = v0;
    v0[40] = v9;
    v0[41] = v12;
    swift_retain();
    swift_retain();
    swift_retain();
    outlined consume of ConversationServiceSerialFacade?(v14);
  }
  outlined copy of ConversationServiceSerialFacade?(v6);
  return v0;
}

uint64_t MessageBusActor.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  return v0;
}

uint64_t static MessageBusActor.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_retain();
}

uint64_t static MessageBusActor.shared.setter(uint64_t a1)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  static MessageBusActor.shared = a1;
  return swift_release();
}

uint64_t (*static MessageBusActor.shared.modify())()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t MessageBusActor.deinit()
{
  swift_defaultActor_destroy();
  return v0;
}

uint64_t MessageBusActor.__deallocating_deinit()
{
  swift_defaultActor_destroy();

  return MEMORY[0x1F4188210](v0);
}

uint64_t MessageBusActor.init()()
{
  swift_defaultActor_initialize();
  return v0;
}

uint64_t MessageBusActor.unownedExecutor.getter()
{
  return v0;
}

uint64_t protocol witness for static GlobalActor.shared.getter in conformance MessageBusActor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_retain();
}

uint64_t protocol witness for static GlobalActor.sharedUnownedExecutor.getter in conformance MessageBusActor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for MessageBusActor();

  return MEMORY[0x1F4187F20](v3, a2);
}

void *ConversationService.suggestionsDIIdentifier.unsafeMutableAddressor()
{
  return &static ConversationService.suggestionsDIIdentifier;
}

unint64_t static ConversationService.suggestionsDIIdentifier.getter()
{
  return 0xD00000000000002FLL;
}

void *ConversationService.suggestionsEnabled.unsafeMutableAddressor()
{
  return &static ConversationService.suggestionsEnabled;
}

uint64_t static ConversationService.suggestionsEnabled.getter()
{
  return 0;
}

void *ConversationService.state.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 112);
  outlined copy of ConversationService.State(v1, *(unsigned char *)(v0 + 120));
  return v1;
}

void ConversationService.state.setter(uint64_t a1, char a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void **)(v2 + 112);
  *(void *)(v2 + 112) = a1;
  unsigned __int8 v6 = *(unsigned char *)(v2 + 120);
  *(unsigned char *)(v2 + 120) = a2;
  outlined consume of ConversationService.State(v5, v6);
}

uint64_t (*ConversationService.state.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

void *ConversationService.ExecutionTaskContext.__allocating_init(forceTimeout:)(uint64_t a1)
{
  uint64_t result = (void *)swift_allocObject();
  uint64_t v3 = MEMORY[0x1E4FBC860];
  result[2] = MEMORY[0x1E4FBC860];
  result[3] = v3;
  result[4] = 0;
  static ConversationService.ExecutionTaskContext.expirationInNanoSeconds = a1;
  return result;
}

uint64_t ConversationService.consecutiveEmptyInputs.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 272);
}

uint64_t ConversationService.consecutiveEmptyInputs.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 272) = a1;
  return result;
}

uint64_t (*ConversationService.consecutiveEmptyInputs.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationService.recentlyCompletedCorrectableConversation.getter()
{
  return swift_retain();
}

uint64_t ConversationService.recentlyCompletedCorrectableConversation.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 280) = a1;
  return swift_release();
}

uint64_t (*ConversationService.recentlyCompletedCorrectableConversation.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:)(uint64_t a1)
{
  objc_msgSend(objc_msgSend(self, sel_sharedStream), sel_emitMessage_, a1);

  return swift_unknownObjectRelease();
}

uint64_t ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:)(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = a6;
  uint64_t v24 = a7;
  uint64_t v16 = *(void *)(a8 + 24);
  uint64_t v15 = *(void *)(a8 + 32);
  uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1(a8, v16);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v19);
  uint64_t v21 = specialized ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:)(a1, a2, a3, a4, a5, v23, v24, (uint64_t)v19, v8, v16, v15);
  __swift_destroy_boxed_opaque_existential_1Tm(a8);
  return v21;
}

Swift::Void __swiftcall ConversationService.warmup()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = one-time initialization token for shared;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  uint64_t v8 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v7, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = v6;
  v9[3] = v8;
  v9[4] = v0;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.warmup(), (uint64_t)v9);
  swift_release();
}

uint64_t closure #1 in ConversationService.warmup()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ConversationService.warmup(), v5, 0);
}

uint64_t closure #1 in ConversationService.warmup()()
{
  uint64_t v1 = *(void **)(v0 + 40);
  type metadata accessor for DeviceEnvironmentHelper();
  MEMORY[0x1BA9DD9D0]();
  swift_release();
  uint64_t v2 = v1 + 8;
  uint64_t v3 = v1[11];
  uint64_t v4 = v1[12];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  swift_release();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t key path setter for ConversationService.serialFacade : ConversationService(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(*(void *)a2 + 312);
  v4[39] = *a1;
  v4[40] = v2;
  v4[41] = v3;
  swift_retain();
  swift_retain();
  swift_retain();

  return outlined consume of ConversationServiceSerialFacade?(v5);
}

uint64_t ConversationService.serialFacade.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3[39];
  v3[39] = a1;
  v3[40] = a2;
  v3[41] = a3;
  return outlined consume of ConversationServiceSerialFacade?(v4);
}

uint64_t (*ConversationService.serialFacade.modify(void *a1))(void *a1, char a2)
{
  a1[3] = v1;
  *a1 = ConversationService.serialFacade.getter();
  a1[1] = v3;
  a1[2] = v4;
  return ConversationService.serialFacade.modify;
}

uint64_t ConversationService.serialFacade.modify(void *a1, char a2)
{
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v3 = (void *)a1[3];
  uint64_t v5 = v3[39];
  v3[39] = *a1;
  v3[40] = v2;
  v3[41] = v4;
  if (a2)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    outlined consume of ConversationServiceSerialFacade?(v5);
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    return outlined consume of ConversationServiceSerialFacade?(v5);
  }
}

void ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[85];
  uint64_t v2 = (void *)v0[80];
  uint64_t v3 = v0[48];
  uint64_t v4 = v0[45];
  uint64_t v5 = v0[46];
  uint64_t v7 = v0[43];
  uint64_t v6 = v0[44];
  uint64_t v8 = (void *)v0[29];
  uint64_t v9 = type metadata accessor for NLRoutingDecisionMessage.GenAIFallbackSuppressReason();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  id v10 = v2;
  static ExecutionLocation.unknown.getter();
  Input.parse.getter();
  Parse.nlLocation.getter();
  v1(v3, v5);
  id v11 = objc_allocWithZone((Class)type metadata accessor for RemoteConversationSpeechData());
  v0[90] = RemoteConversationSpeechData.init(rcId:asrOnDevice:userSpecificInfoForRecognizedUser:userSpecificInfoForUserMeetingSessionThreshold:speechPackage:utterance:responseLanguageVariant:requestLanguageVariant:genAIFallbackSuppressReason:asrLocation:nlLocation:)(12589, 0xE200000000000000, 0, 0, 0, (uint64_t)v2, 0, 0, 0, 0, 0, 0, v4, v6, v7);
  uint64_t v12 = v8[6];
  __swift_project_boxed_opaque_existential_1(v8 + 2, v8[5]);
  swift_beginAccess();
  v0[91] = v8[13];
  uint64_t v14 = *(void *)(v12 + 16) + **(int **)(v12 + 16);
  swift_bridgeObjectRetain();
  uint64_t v13 = (void *)swift_task_alloc();
  v0[92] = v13;
  *uint64_t v13 = v0;
  v13[1] = ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
  __asm { BRAA            X9, X16 }
}

uint64_t closure #1 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return MEMORY[0x1F4188298](closure #1 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:), 0, 0);
}

uint64_t closure #1 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)()
{
  *(void *)(v0 + 24) = *(void *)(*(void *)(v0 + 16) + 192);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v1 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:), v1, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  TaskService.onNewTurn()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[5] = a1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  v5[8] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:), v6, 0);
}

uint64_t closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = static MessageBusActor.shared;
  *(void *)(v2 + 72) = static MessageBusActor.shared;
  uint64_t v4 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, a2, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v2 + 80) = v5;
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(v2 + 48);
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 88) = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AFSpeechPackage?);
  *uint64_t v6 = v2;
  v6[1] = closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:);
  uint64_t v8 = *(void *)(v2 + 40);
  return MEMORY[0x1F41880D8](v8, v3, v4, 0xD000000000000033, 0x80000001BA066820, partial apply for closure #1 in closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:), v5, v7);
}

uint64_t closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:), v1, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<AFSpeechPackage?, Never>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](v5);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v9 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  (*(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(a3 + 112))(partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:), v10, ObjectType, a3);
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1)
{
  if (a1) {
    AFSpeechInfo.toAFSpeechPackage()();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<AFSpeechPackage?, Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t ConversationService.setupNewTurn(executionRequestId:rootRequestId:sessionId:contextData:runSiriKitExecutor:scopedRRData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 312) = v17;
  *(void *)(v9 + 320) = v8;
  *(_OWORD *)(v9 + 296) = v16;
  *(void *)(v9 + 280) = a7;
  *(void *)(v9 + 288) = a8;
  *(void *)(v9 + 264) = a5;
  *(void *)(v9 + 272) = a6;
  *(void *)(v9 + 248) = a3;
  *(void *)(v9 + 256) = a4;
  *(void *)(v9 + 232) = a1;
  *(void *)(v9 + 240) = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CorrectionsContext?);
  *(void *)(v9 + 328) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for RemoteConversationTurnData(0);
  *(void *)(v9 + 336) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v9 + 344) = v11;
  *(void *)(v9 + 352) = *(void *)(v11 + 64);
  *(void *)(v9 + 360) = swift_task_alloc();
  *(void *)(v9 + 368) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for UUID();
  *(void *)(v9 + 376) = v12;
  *(void *)(v9 + 384) = *(void *)(v12 - 8);
  *(void *)(v9 + 392) = swift_task_alloc();
  *(void *)(v9 + 400) = swift_task_alloc();
  *(void *)(v9 + 408) = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v13 = static MessageBusActor.shared;
  *(void *)(v9 + 416) = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](ConversationService.setupNewTurn(executionRequestId:rootRequestId:sessionId:contextData:runSiriKitExecutor:scopedRRData:bridge:), v13, 0);
}

uint64_t ConversationService.setupNewTurn(executionRequestId:rootRequestId:sessionId:contextData:runSiriKitExecutor:scopedRRData:bridge:)()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v2 = type metadata accessor for Logger();
  *(void *)(v0 + 424) = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.makeUUID(fromExecutionRequestId:)();
  static ConversationSELFHelper.shared.getter();
  dispatch thunk of ConversationSELFHelper.makeConversationIdAndEmitRequestLink(executionUUID:)();
  swift_release();
  if (v1) {
    char v3 = SAIntentGroupRunSiriKitExecutor.hasExecuteOnRemotePayload.getter();
  }
  else {
    char v3 = 0;
  }
  *(unsigned char *)(v0 + 624) = v3 & 1;
  uint64_t v4 = *(void **)(v0 + 320);
  __swift_project_boxed_opaque_existential_1(v4 + 18, v4[21]);
  dispatch thunk of ReferenceResolutionClientProtocol.inRequest(requestId:)();
  *(void *)(v0 + 432) = v4[24];
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v5 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](ConversationService.setupNewTurn(executionRequestId:rootRequestId:sessionId:contextData:runSiriKitExecutor:scopedRRData:bridge:), v5, 0);
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = v0[54];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 32);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    char v3 = v4;
    if (!v4) {
      goto LABEL_6;
    }
  }
  else
  {
    char v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v4 = swift_bridgeObjectRetain();
    if (!v3) {
      goto LABEL_6;
    }
  }
  if ((v2 & 0xC000000000000001) != 0)
  {
    char v3 = MEMORY[0x1BA9E3990](0, v2);
  }
  else
  {
    if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return MEMORY[0x1F4188298](v4, v5, v6);
    }
    char v3 = *(void *)(v2 + 32);
    swift_retain();
  }
LABEL_6:
  swift_bridgeObjectRelease();
  v0[55] = v3;
  uint64_t v5 = v0[52];
  uint64_t v4 = (uint64_t)ConversationService.setupNewTurn(executionRequestId:rootRequestId:sessionId:contextData:runSiriKitExecutor:scopedRRData:bridge:);
  uint64_t v6 = 0;
  return MEMORY[0x1F4188298](v4, v5, v6);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t *v22;
  id v23;
  id v24;
  uint64_t ObjectType;
  uint64_t v26;
  void *v27;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  char v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  uint64_t v38;

  uint64_t v1 = *(void **)(v0 + 280);
  if (v1)
  {
    uint64_t v2 = v1;
    char v3 = objc_msgSend(v2, sel_siriKitMetrics);
    if (v3
      && (v4 = v3, uint64_t v5 = objc_msgSend(v3, sel_resultCandidateId),
                   v4,
                   v5))
    {
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v8 = v7;
    }
    else
    {
      uint64_t v8 = 0xE200000000000000;
      uint64_t v6 = 12589;
    }
    uint64_t v11 = *(void *)(v0 + 232);
    uint64_t v10 = *(void *)(v0 + 240);
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized ProxiedRequestContext.__allocating_init(rske:executionRequestId:resultCandidateId:)(v2, v11, v10, v6, v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  *(void *)(v0 + 448) = v9;
  unint64_t v33 = *(void *)(v0 + 440);
  uint64_t v34 = v9;
  int64_t v35 = *(unsigned char *)(v0 + 624);
  uint64_t v12 = *(void *)(v0 + 400);
  uint64_t v14 = *(void *)(v0 + 376);
  uint64_t v13 = *(void *)(v0 + 384);
  uint64_t v15 = *(void **)(v0 + 368);
  long long v16 = *(int **)(v0 + 336);
  unint64_t v36 = *(void *)(v0 + 312);
  unint64_t v31 = *(void *)(v0 + 288);
  uint64_t v32 = *(void *)(v0 + 296);
  uint64_t v17 = *(void *)(v0 + 256);
  uint64_t v29 = *(void *)(v0 + 248);
  unint64_t v30 = *(void **)(v0 + 272);
  uint64_t v19 = *(void *)(v0 + 232);
  uint64_t v18 = *(void *)(v0 + 240);
  outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 264), (uint64_t)v15 + v16[6], (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v20 = (char *)v15 + v16[8];
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  *(void *)(v0 + 456) = v21;
  *(void *)(v0 + 464) = (v13 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v21(v20, v12, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v20, 0, 1, v14);
  *uint64_t v15 = v19;
  v15[1] = v18;
  v15[2] = v29;
  v15[3] = v17;
  *(void *)((char *)v15 + v16[7]) = v30;
  *(void *)((char *)v15 + v16[9]) = v33;
  uint64_t v22 = (void *)((char *)v15 + v16[12]);
  *uint64_t v22 = v31;
  v22[1] = v32;
  *((unsigned char *)v15 + v16[10]) = v35;
  *(void *)((char *)v15 + v16[11]) = v34;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v23 = v30;
  outlined copy of Data?(v31, v32);
  uint64_t v24 = v34;
  static SharedContext.internalSharedContext.getter();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v26 = ServiceBridgeDelegate.xpcWrapper.getter(ObjectType, v36);
  type metadata accessor for SharedContextServiceImpl();
  *(void *)(swift_allocObject() + 16) = v26;
  _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3(&lazy protocol witness table cache variable for type SharedContextServiceImpl and conformance SharedContextServiceImpl, 255, (void (*)(uint64_t))type metadata accessor for SharedContextServiceImpl);
  dispatch thunk of RefreshableSharedContext.sharedContext.setter();
  swift_release();
  *(void *)(v0 + 472) = type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  *(void *)(v0 + 480) = SiriEnvironment.callState.getter();
  swift_release();
  int64_t v37 = (uint64_t (*)(void))((int)*MEMORY[0x1E4FA1E50] + MEMORY[0x1E4FA1E50]);
  uint64_t v27 = (void *)swift_task_alloc();
  *(void *)(v0 + 488) = v27;
  *uint64_t v27 = v0;
  v27[1] = ConversationService.setupNewTurn(executionRequestId:rootRequestId:sessionId:contextData:runSiriKitExecutor:scopedRRData:bridge:);
  return v37();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 416);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](ConversationService.setupNewTurn(executionRequestId:rootRequestId:sessionId:contextData:runSiriKitExecutor:scopedRRData:bridge:), v1, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  CurrentDevice.setRestrictedCommands(_:)();
  swift_release();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[62] = v1;
  *uint64_t v1 = v0;
  v1[1] = ConversationService.setupNewTurn(executionRequestId:rootRequestId:sessionId:contextData:runSiriKitExecutor:scopedRRData:bridge:);
  uint64_t v2 = v0[46];
  char v3 = v0[38];
  uint64_t v4 = v0[39];
  return ConversationHandlerLocator.sendStartTurnHint(turnData:bridge:)(v2, v3, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 504) = v0;
  swift_task_dealloc();
  char v3 = *(void *)(v2 + 416);
  if (v0) {
    uint64_t v4 = ConversationService.setupNewTurn(executionRequestId:rootRequestId:sessionId:contextData:runSiriKitExecutor:scopedRRData:bridge:);
  }
  else {
    uint64_t v4 = ConversationService.setupNewTurn(executionRequestId:rootRequestId:sessionId:contextData:runSiriKitExecutor:scopedRRData:bridge:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  unsigned int v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t (*v55)(uint64_t);
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;

  uint64_t v1 = *(void *)(v0 + 320);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 104);
  if ((v2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for RemoteConversationClient();
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3(&lazy protocol witness table cache variable for type RemoteConversationClient and conformance RemoteConversationClient, 255, (void (*)(uint64_t))type metadata accessor for RemoteConversationClient);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = *(void *)(v0 + 16);
    uint64_t v6 = *(void *)(v0 + 24);
    uint64_t v8 = *(void *)(v0 + 32);
    uint64_t v7 = *(void *)(v0 + 40);
    uint64_t v9 = *(void *)(v0 + 48);
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = v2 + 56;
    uint64_t v8 = ~v10;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    uint64_t v9 = v12 & *(void *)(v2 + 56);
    uint64_t v5 = swift_bridgeObjectRetain();
    uint64_t v7 = 0;
  }
  *(void *)(v0 + 528) = v8;
  *(void *)(v0 + 520) = v6;
  *(void *)(v0 + 512) = v5;
  *(void *)(v0 + 544) = v9;
  *(void *)(v0 + 536) = v7;
  if (v5 < 0)
  {
    uint64_t v17 = __CocoaSet.Iterator.next()();
    if (!v17) {
      goto LABEL_31;
    }
    *(void *)(v0 + 224) = v17;
    type metadata accessor for RemoteConversationClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    long long v16 = *(void *)(v0 + 216);
    swift_unknownObjectRelease();
    uint64_t v15 = v7;
    uint64_t v13 = v9;
    goto LABEL_13;
  }
  if (v9)
  {
    uint64_t v13 = (v9 - 1) & v9;
    uint64_t v14 = __clz(__rbit64(v9)) | (v7 << 6);
    uint64_t v15 = v7;
LABEL_10:
    long long v16 = *(void *)(*(void *)(v5 + 48) + 8 * v14);
    swift_retain();
LABEL_13:
    *(void *)(v0 + 568) = v13;
    *(void *)(v0 + 560) = v15;
    *(void *)(v0 + 552) = v16;
    if (v16)
    {
      uint64_t v5 = (uint64_t)ConversationService.setupNewTurn(executionRequestId:rootRequestId:sessionId:contextData:runSiriKitExecutor:scopedRRData:bridge:);
      char v3 = v16;
      uint64_t v4 = 0;
      return MEMORY[0x1F4188298](v5, v3, v4);
    }
    goto LABEL_31;
  }
  uint64_t v18 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    return MEMORY[0x1F4188298](v5, v3, v4);
  }
  uint64_t v19 = (unint64_t)(v8 + 64) >> 6;
  if (v18 < v19)
  {
    uint64_t v20 = *(void *)(v6 + 8 * v18);
    uint64_t v15 = v7 + 1;
    if (!v20)
    {
      uint64_t v15 = v7 + 2;
      if (v7 + 2 >= v19) {
        goto LABEL_31;
      }
      uint64_t v20 = *(void *)(v6 + 8 * v15);
      if (!v20)
      {
        uint64_t v15 = v7 + 3;
        if (v7 + 3 >= v19) {
          goto LABEL_31;
        }
        uint64_t v20 = *(void *)(v6 + 8 * v15);
        if (!v20)
        {
          uint64_t v15 = v7 + 4;
          if (v7 + 4 >= v19) {
            goto LABEL_31;
          }
          uint64_t v20 = *(void *)(v6 + 8 * v15);
          if (!v20)
          {
            uint64_t v21 = v7 + 5;
            while (v19 != v21)
            {
              uint64_t v20 = *(void *)(v6 + 8 * v21++);
              if (v20)
              {
                uint64_t v15 = v21 - 1;
                goto LABEL_20;
              }
            }
            goto LABEL_31;
          }
        }
      }
    }
LABEL_20:
    uint64_t v13 = (v20 - 1) & v20;
    uint64_t v14 = __clz(__rbit64(v20)) + (v15 << 6);
    goto LABEL_10;
  }
LABEL_31:
  uint64_t v22 = *(void *)(v0 + 320);
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  uint64_t v23 = (void *)(v22 + 280);
  swift_beginAccess();
  uint64_t v24 = *(void *)(v22 + 280);
  *(void *)(v0 + 600) = v24;
  if (v24)
  {
    uint64_t v25 = *(void *)(v0 + 328);
    uint64_t v26 = type metadata accessor for CorrectionsContext();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
    swift_retain();
    uint64_t v27 = dispatch thunk of CorrectionsPlatformClient.isCorrectionPossible(context:)();
    outlined destroy of ReferenceResolutionClientProtocol?(v25, &demangling cache variable for type metadata for CorrectionsContext?);
    if (v27)
    {
      uint64_t v28 = Logger.logObject.getter();
      uint64_t v29 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v28, v29))
      {
        unint64_t v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v30 = 0;
        _os_log_impl(&dword_1B9C64000, v28, v29, "[ConversationService] Starting turn for potential corrections invocations", v30, 2u);
        MEMORY[0x1BA9E48C0](v30, -1, -1);
      }

      unint64_t v31 = (void *)swift_task_alloc();
      *(void *)(v0 + 608) = v31;
      *unint64_t v31 = v0;
      v31[1] = ConversationService.setupNewTurn(executionRequestId:rootRequestId:sessionId:contextData:runSiriKitExecutor:scopedRRData:bridge:);
      uint64_t v32 = *(void *)(v0 + 368);
      unint64_t v33 = *(void *)(v0 + 304);
      uint64_t v34 = *(void *)(v0 + 312);
      return RemoteConversationClient.startTurn(turnData:bridge:)(v32, v33, v34);
    }
    swift_release();
    unint64_t v36 = Logger.logObject.getter();
    int64_t v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v38 = 0;
      MEMORY[0x1BA9E48C0](v38, -1, -1);
    }
    swift_release();

    *uint64_t v23 = 0;
  }
  swift_release();
  uint64_t v39 = *(void *)(v0 + 320);
  swift_beginAccess();
  uint64_t v40 = *(unsigned __int8 *)(v39 + 120);
  if (v40 >> 6)
  {
    if (v40 >> 6 != 1 || (v40 & 1) == 0) {
      goto LABEL_46;
    }
  }
  else if ((*(unsigned char *)(v39 + 112) & 1) == 0)
  {
    goto LABEL_46;
  }
  uint64_t v41 = *(void **)(v0 + 320);
  uint64_t v42 = v41[5];
  uint64_t v43 = v41[6];
  __swift_project_boxed_opaque_existential_1(v41 + 2, v42);
  (*(void (**)(uint64_t, uint64_t))(v43 + 56))(v42, v43);
LABEL_46:
  uint64_t v62 = *(void **)(v0 + 448);
  uint64_t v60 = *(void *)(v0 + 432);
  id v61 = *(unsigned __int8 *)(v0 + 624);
  uint64_t v45 = *(void *)(v0 + 400);
  unint64_t v44 = *(void *)(v0 + 408);
  uint64_t v56 = *(void *)(v0 + 392);
  id v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 456);
  uint64_t v46 = *(void *)(v0 + 376);
  id v63 = *(void *)(v0 + 384);
  uint64_t v47 = *(uint64_t **)(v0 + 360);
  int64_t v48 = *(void *)(v0 + 368);
  int v49 = *(void *)(v0 + 320);
  Class v58 = *(void *)(v0 + 304);
  id v59 = *(void *)(v0 + 312);
  uint64_t v50 = *(void *)(v49 + 40);
  uint64_t v51 = *(void *)(v49 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v49 + 16), v50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v44, v50, v51);
  outlined init with copy of DecisionEngineResponse(v48, (uint64_t)v47, type metadata accessor for RemoteConversationTurnData);
  v57(v56, v45, v46);
  outlined init with copy of ReferenceResolutionClientProtocol(v49 + 144, v0 + 56);
  uint64_t v52 = *(unsigned __int8 *)(v49 + 304);
  type metadata accessor for ConversationService.ActiveTurn(0);
  swift_allocObject();
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v53 = specialized ConversationService.ActiveTurn.init(turnData:conversationLoggingId:bridge:taskService:invokedByPeerToPeerEORR:rrClient:useNoopEventSender:)(v47, v56, v58, v59, v60, v61, v0 + 56, v52);
  swift_release();
  swift_unknownObjectRelease();

  swift_release();
  outlined destroy of DecisionEngineResponse(v48, type metadata accessor for RemoteConversationTurnData);
  uint64_t v54 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
  v54(v45, v46);
  v54(v44, v46);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v55 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v55(v53);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t (*v14)(void);
  long long v15;
  uint64_t v16;

  uint64_t v1 = *(void **)(v0 + 552);
  uint64_t v2 = *(void *)(v0 + 360);
  char v3 = *(void *)(v0 + 368);
  uint64_t v5 = *(void *)(v0 + 344);
  uint64_t v4 = *(void *)(v0 + 352);
  uint64_t v6 = v1 + 16;
  uint64_t v15 = *(_OWORD *)(v0 + 304);
  Logger.debugF(file:function:)();
  uint64_t v7 = v1[19];
  uint64_t v8 = v1[20];
  __swift_project_boxed_opaque_existential_1(v6, v7);
  outlined init with copy of DecisionEngineResponse(v3, v2, type metadata accessor for RemoteConversationTurnData);
  uint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  outlined init with take of DecisionEngineResponse(v2, v10 + v9, type metadata accessor for RemoteConversationTurnData);
  *(_OWORD *)(v10 + ((v4 + v9 + 7) & 0xFFFFFFFFFFFFFFF8)) = v15;
  uint64_t v11 = swift_allocObject();
  *(void *)(v0 + 576) = v11;
  *(void *)(v11 + 16) = &async function pointer to partial apply for closure #1 in RemoteConversationClient.startTurn(turnData:bridge:);
  *(void *)(v11 + 24) = v10;
  uint64_t v14 = (uint64_t (*)(void))(*(void *)(v8 + 8) + **(int **)(v8 + 8));
  swift_unknownObjectRetain();
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 584) = v12;
  *uint64_t v12 = v0;
  v12[1] = ConversationService.setupNewTurn(executionRequestId:rootRequestId:sessionId:contextData:runSiriKitExecutor:scopedRRData:bridge:);
  return v14();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 592) = v0;
  swift_task_dealloc();
  if (v0)
  {
    char v3 = *(void *)(v2 + 552);
    uint64_t v4 = ConversationService.setupNewTurn(executionRequestId:rootRequestId:sessionId:contextData:runSiriKitExecutor:scopedRRData:bridge:);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 552);
    swift_release();
    uint64_t v4 = ConversationService.setupNewTurn(executionRequestId:rootRequestId:sessionId:contextData:runSiriKitExecutor:scopedRRData:bridge:);
    char v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;

  return MEMORY[0x1F4188298](ConversationService.setupNewTurn(executionRequestId:rootRequestId:sessionId:contextData:runSiriKitExecutor:scopedRRData:bridge:), *(void *)(v0 + 416), 0);
}

{
  uint64_t v0;
  uint64_t (*v1)();
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  unsigned int v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t (*v50)(uint64_t);
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;

  uint64_t v1 = (uint64_t (*)())swift_release();
  uint64_t v4 = *(void *)(v0 + 568);
  uint64_t v5 = *(void *)(v0 + 560);
  *(void *)(v0 + 544) = v4;
  *(void *)(v0 + 536) = v5;
  uint64_t v6 = *(void *)(v0 + 512);
  if (v6 < 0)
  {
    uint64_t v11 = __CocoaSet.Iterator.next()();
    if (!v11) {
      goto LABEL_25;
    }
    *(void *)(v0 + 224) = v11;
    type metadata accessor for RemoteConversationClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v10 = *(void *)(v0 + 216);
    swift_unknownObjectRelease();
    uint64_t v9 = v5;
    uint64_t v7 = v4;
    goto LABEL_7;
  }
  if (v4)
  {
    uint64_t v7 = (v4 - 1) & v4;
    uint64_t v8 = __clz(__rbit64(v4)) | (v5 << 6);
    uint64_t v9 = v5;
LABEL_4:
    uint64_t v10 = *(void *)(*(void *)(v6 + 48) + 8 * v8);
    swift_retain();
LABEL_7:
    *(void *)(v0 + 568) = v7;
    *(void *)(v0 + 560) = v9;
    *(void *)(v0 + 552) = v10;
    if (v10)
    {
      uint64_t v1 = ConversationService.setupNewTurn(executionRequestId:rootRequestId:sessionId:contextData:runSiriKitExecutor:scopedRRData:bridge:);
      uint64_t v2 = v10;
      char v3 = 0;
      return MEMORY[0x1F4188298](v1, v2, v3);
    }
    goto LABEL_25;
  }
  uint64_t v12 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return MEMORY[0x1F4188298](v1, v2, v3);
  }
  uint64_t v13 = (unint64_t)(*(void *)(v0 + 528) + 64) >> 6;
  if (v12 < v13)
  {
    uint64_t v14 = *(void *)(v0 + 520);
    uint64_t v15 = *(void *)(v14 + 8 * v12);
    uint64_t v9 = v5 + 1;
    if (!v15)
    {
      uint64_t v9 = v5 + 2;
      if (v5 + 2 >= v13) {
        goto LABEL_25;
      }
      uint64_t v15 = *(void *)(v14 + 8 * v9);
      if (!v15)
      {
        uint64_t v9 = v5 + 3;
        if (v5 + 3 >= v13) {
          goto LABEL_25;
        }
        uint64_t v15 = *(void *)(v14 + 8 * v9);
        if (!v15)
        {
          uint64_t v9 = v5 + 4;
          if (v5 + 4 >= v13) {
            goto LABEL_25;
          }
          uint64_t v15 = *(void *)(v14 + 8 * v9);
          if (!v15)
          {
            long long v16 = v5 + 5;
            while (v13 != v16)
            {
              uint64_t v15 = *(void *)(v14 + 8 * v16++);
              if (v15)
              {
                uint64_t v9 = v16 - 1;
                goto LABEL_14;
              }
            }
            goto LABEL_25;
          }
        }
      }
    }
LABEL_14:
    uint64_t v7 = (v15 - 1) & v15;
    uint64_t v8 = __clz(__rbit64(v15)) + (v9 << 6);
    goto LABEL_4;
  }
LABEL_25:
  uint64_t v17 = *(void *)(v0 + 320);
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  uint64_t v18 = (void *)(v17 + 280);
  swift_beginAccess();
  uint64_t v19 = *(void *)(v17 + 280);
  *(void *)(v0 + 600) = v19;
  if (v19)
  {
    uint64_t v20 = *(void *)(v0 + 328);
    uint64_t v21 = type metadata accessor for CorrectionsContext();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
    swift_retain();
    uint64_t v22 = dispatch thunk of CorrectionsPlatformClient.isCorrectionPossible(context:)();
    outlined destroy of ReferenceResolutionClientProtocol?(v20, &demangling cache variable for type metadata for CorrectionsContext?);
    if (v22)
    {
      uint64_t v23 = Logger.logObject.getter();
      uint64_t v24 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl(&dword_1B9C64000, v23, v24, "[ConversationService] Starting turn for potential corrections invocations", v25, 2u);
        MEMORY[0x1BA9E48C0](v25, -1, -1);
      }

      uint64_t v26 = (void *)swift_task_alloc();
      *(void *)(v0 + 608) = v26;
      *uint64_t v26 = v0;
      v26[1] = ConversationService.setupNewTurn(executionRequestId:rootRequestId:sessionId:contextData:runSiriKitExecutor:scopedRRData:bridge:);
      uint64_t v27 = *(void *)(v0 + 368);
      uint64_t v28 = *(void *)(v0 + 304);
      uint64_t v29 = *(void *)(v0 + 312);
      return RemoteConversationClient.startTurn(turnData:bridge:)(v27, v28, v29);
    }
    swift_release();
    unint64_t v31 = Logger.logObject.getter();
    uint64_t v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      unint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v33 = 0;
      MEMORY[0x1BA9E48C0](v33, -1, -1);
    }
    swift_release();

    *uint64_t v18 = 0;
  }
  swift_release();
  uint64_t v34 = *(void *)(v0 + 320);
  swift_beginAccess();
  int64_t v35 = *(unsigned __int8 *)(v34 + 120);
  if (v35 >> 6)
  {
    if (v35 >> 6 != 1 || (v35 & 1) == 0) {
      goto LABEL_40;
    }
  }
  else if ((*(unsigned char *)(v34 + 112) & 1) == 0)
  {
    goto LABEL_40;
  }
  unint64_t v36 = *(void **)(v0 + 320);
  int64_t v37 = v36[5];
  uint64_t v38 = v36[6];
  __swift_project_boxed_opaque_existential_1(v36 + 2, v37);
  (*(void (**)(uint64_t, uint64_t))(v38 + 56))(v37, v38);
LABEL_40:
  id v57 = *(void **)(v0 + 448);
  uint64_t v55 = *(void *)(v0 + 432);
  uint64_t v56 = *(unsigned __int8 *)(v0 + 624);
  uint64_t v40 = *(void *)(v0 + 400);
  uint64_t v39 = *(void *)(v0 + 408);
  uint64_t v51 = *(void *)(v0 + 392);
  uint64_t v52 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 456);
  uint64_t v41 = *(void *)(v0 + 376);
  Class v58 = *(void *)(v0 + 384);
  uint64_t v42 = *(uint64_t **)(v0 + 360);
  uint64_t v43 = *(void *)(v0 + 368);
  unint64_t v44 = *(void *)(v0 + 320);
  uint64_t v53 = *(void *)(v0 + 304);
  uint64_t v54 = *(void *)(v0 + 312);
  uint64_t v45 = *(void *)(v44 + 40);
  uint64_t v46 = *(void *)(v44 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v44 + 16), v45);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v39, v45, v46);
  outlined init with copy of DecisionEngineResponse(v43, (uint64_t)v42, type metadata accessor for RemoteConversationTurnData);
  v52(v51, v40, v41);
  outlined init with copy of ReferenceResolutionClientProtocol(v44 + 144, v0 + 56);
  uint64_t v47 = *(unsigned __int8 *)(v44 + 304);
  type metadata accessor for ConversationService.ActiveTurn(0);
  swift_allocObject();
  swift_unknownObjectRetain();
  swift_retain();
  int64_t v48 = specialized ConversationService.ActiveTurn.init(turnData:conversationLoggingId:bridge:taskService:invokedByPeerToPeerEORR:rrClient:useNoopEventSender:)(v42, v51, v53, v54, v55, v56, v0 + 56, v47);
  swift_release();
  swift_unknownObjectRelease();

  swift_release();
  outlined destroy of DecisionEngineResponse(v43, type metadata accessor for RemoteConversationTurnData);
  int v49 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
  v49(v40, v41);
  v49(v39, v41);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v50 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v50(v48);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 416);
  swift_release();
  return MEMORY[0x1F4188298](ConversationService.setupNewTurn(executionRequestId:rootRequestId:sessionId:contextData:runSiriKitExecutor:scopedRRData:bridge:), v1, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = (void *)v0[56];
  swift_release();
  swift_release();

  swift_release();
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  char v3 = v0[50];
  uint64_t v2 = v0[51];
  uint64_t v4 = v0[48];
  uint64_t v5 = v0[47];
  outlined destroy of DecisionEngineResponse(v0[46], type metadata accessor for RemoteConversationTurnData);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v3, v5);
  v6(v2, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 616) = v0;
  swift_task_dealloc();
  char v3 = *(void *)(v2 + 416);
  if (v0) {
    uint64_t v4 = ConversationService.setupNewTurn(executionRequestId:rootRequestId:sessionId:contextData:runSiriKitExecutor:scopedRRData:bridge:);
  }
  else {
    uint64_t v4 = ConversationService.setupNewTurn(executionRequestId:rootRequestId:sessionId:contextData:runSiriKitExecutor:scopedRRData:bridge:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t (*v17)(uint64_t);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;

  swift_release();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 320);
  swift_beginAccess();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 120);
  if (v2 >> 6)
  {
    if (v2 >> 6 == 1 && (v2 & 1) != 0) {
      goto LABEL_4;
    }
  }
  else if (*(unsigned char *)(v1 + 112))
  {
LABEL_4:
    char v3 = *(void **)(v0 + 320);
    uint64_t v4 = v3[5];
    uint64_t v5 = v3[6];
    __swift_project_boxed_opaque_existential_1(v3 + 2, v4);
    (*(void (**)(uint64_t, uint64_t))(v5 + 56))(v4, v5);
  }
  uint64_t v25 = *(void **)(v0 + 448);
  uint64_t v23 = *(void *)(v0 + 432);
  uint64_t v24 = *(unsigned __int8 *)(v0 + 624);
  uint64_t v7 = *(void *)(v0 + 400);
  uint64_t v6 = *(void *)(v0 + 408);
  uint64_t v19 = *(void *)(v0 + 392);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 456);
  uint64_t v8 = *(void *)(v0 + 376);
  uint64_t v26 = *(void *)(v0 + 384);
  uint64_t v9 = *(uint64_t **)(v0 + 360);
  uint64_t v10 = *(void *)(v0 + 368);
  uint64_t v11 = *(void *)(v0 + 320);
  uint64_t v21 = *(void *)(v0 + 304);
  uint64_t v22 = *(void *)(v0 + 312);
  uint64_t v12 = *(void *)(v11 + 40);
  uint64_t v13 = *(void *)(v11 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v11 + 16), v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v6, v12, v13);
  outlined init with copy of DecisionEngineResponse(v10, (uint64_t)v9, type metadata accessor for RemoteConversationTurnData);
  v20(v19, v7, v8);
  outlined init with copy of ReferenceResolutionClientProtocol(v11 + 144, v0 + 56);
  uint64_t v14 = *(unsigned __int8 *)(v11 + 304);
  type metadata accessor for ConversationService.ActiveTurn(0);
  swift_allocObject();
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v15 = specialized ConversationService.ActiveTurn.init(turnData:conversationLoggingId:bridge:taskService:invokedByPeerToPeerEORR:rrClient:useNoopEventSender:)(v9, v19, v21, v22, v23, v24, v0 + 56, v14);
  swift_release();
  swift_unknownObjectRelease();

  swift_release();
  outlined destroy of DecisionEngineResponse(v10, type metadata accessor for RemoteConversationTurnData);
  long long v16 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
  v16(v7, v8);
  v16(v6, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v17(v15);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = (void *)v0[56];
  swift_release();

  swift_release();
  char v3 = v0[50];
  uint64_t v2 = v0[51];
  uint64_t v4 = v0[48];
  uint64_t v5 = v0[47];
  outlined destroy of DecisionEngineResponse(v0[46], type metadata accessor for RemoteConversationTurnData);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v3, v5);
  v6(v2, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = (void *)v0[56];
  swift_release();
  swift_release();

  swift_release();
  char v3 = v0[50];
  uint64_t v2 = v0[51];
  uint64_t v4 = v0[48];
  uint64_t v5 = v0[47];
  outlined destroy of DecisionEngineResponse(v0[46], type metadata accessor for RemoteConversationTurnData);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v6(v3, v5);
  v6(v2, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 376) = a7;
  *(void *)(v8 + 384) = v7;
  *(void *)(v8 + 360) = a5;
  *(void *)(v8 + 368) = a6;
  *(void *)(v8 + 344) = a3;
  *(void *)(v8 + 352) = a4;
  *(unsigned char *)(v8 + 1261) = a2;
  *(void *)(v8 + 336) = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CorrectionsContext?);
  *(void *)(v8 + 392) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for CorrectionsDirectInvocation();
  *(void *)(v8 + 400) = v9;
  *(void *)(v8 + 408) = *(void *)(v9 - 8);
  *(void *)(v8 + 416) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for CorrectionsContext();
  *(void *)(v8 + 424) = v10;
  *(void *)(v8 + 432) = *(void *)(v10 - 8);
  *(void *)(v8 + 440) = swift_task_alloc();
  uint64_t updated = type metadata accessor for ContextUpdateScope();
  *(void *)(v8 + 448) = updated;
  *(void *)(v8 + 456) = *(void *)(updated - 8);
  *(void *)(v8 + 464) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  *(void *)(v8 + 472) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse.DirectInvocation?);
  *(void *)(v8 + 480) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Parse();
  *(void *)(v8 + 488) = v12;
  *(void *)(v8 + 496) = *(void *)(v12 - 8);
  *(void *)(v8 + 504) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for USOParse();
  *(void *)(v8 + 512) = v13;
  *(void *)(v8 + 520) = *(void *)(v13 - 8);
  *(void *)(v8 + 528) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for Input();
  *(void *)(v8 + 536) = v14;
  *(void *)(v8 + 544) = *(void *)(v14 - 8);
  *(void *)(v8 + 552) = swift_task_alloc();
  uint64_t v15 = type metadata accessor for PluginAction();
  *(void *)(v8 + 560) = v15;
  *(void *)(v8 + 568) = *(void *)(v15 - 8);
  *(void *)(v8 + 576) = swift_task_alloc();
  *(void *)(v8 + 584) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DecisionEngineResponse?);
  *(void *)(v8 + 592) = swift_task_alloc();
  uint64_t v16 = type metadata accessor for DecisionEngineResponse();
  *(void *)(v8 + 600) = v16;
  *(void *)(v8 + 608) = *(void *)(v16 - 8);
  *(void *)(v8 + 616) = swift_task_alloc();
  type metadata accessor for ExecutionLocation();
  *(void *)(v8 + 624) = swift_task_alloc();
  *(void *)(v8 + 632) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  *(void *)(v8 + 640) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  *(void *)(v8 + 648) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  *(void *)(v8 + 656) = swift_task_alloc();
  uint64_t v17 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  *(void *)(v8 + 664) = v17;
  *(void *)(v8 + 672) = *(void *)(v17 - 8);
  *(void *)(v8 + 680) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  *(void *)(v8 + 688) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  *(void *)(v8 + 696) = swift_task_alloc();
  *(void *)(v8 + 704) = swift_task_alloc();
  *(void *)(v8 + 712) = swift_task_alloc();
  uint64_t v18 = type metadata accessor for FlowUnhandledReason();
  *(void *)(v8 + 720) = v18;
  *(void *)(v8 + 728) = *(void *)(v18 - 8);
  *(void *)(v8 + 736) = swift_task_alloc();
  *(void *)(v8 + 744) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PrescribedTool?);
  *(void *)(v8 + 752) = swift_task_alloc();
  *(void *)(v8 + 760) = swift_task_alloc();
  uint64_t v19 = type metadata accessor for CancellationError();
  *(void *)(v8 + 768) = v19;
  *(void *)(v8 + 776) = *(void *)(v19 - 8);
  *(void *)(v8 + 784) = swift_task_alloc();
  *(void *)(v8 + 792) = type metadata accessor for ConversationCommitResult();
  *(void *)(v8 + 800) = swift_task_alloc();
  *(void *)(v8 + 808) = swift_task_alloc();
  *(void *)(v8 + 816) = swift_task_alloc();
  uint64_t v20 = type metadata accessor for RequestSummary.ExecutionSource();
  *(void *)(v8 + 824) = v20;
  *(void *)(v8 + 832) = *(void *)(v20 - 8);
  *(void *)(v8 + 840) = swift_task_alloc();
  *(void *)(v8 + 848) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  *(void *)(v8 + 856) = swift_task_alloc();
  *(void *)(v8 + 864) = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v21 = static MessageBusActor.shared;
  *(void *)(v8 + 872) = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:), v21, 0);
}

uint64_t ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)()
{
  uint64_t v1 = *(void **)(v0 + 384);
  uint64_t v2 = v1[5];
  uint64_t v3 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v2);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 40) + **(int **)(v3 + 40));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 880) = v4;
  void *v4 = v0;
  v4[1] = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:);
  return v6(v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 872);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v14)(uint64_t);
  void (*v15)(uint64_t, uint64_t, uint64_t);
  objc_class *v16;
  id v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t (*v23)();
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  uint64_t v29 = v0;
  uint64_t v1 = *(void *)(v0 + 864);
  uint64_t v2 = *(void *)(v0 + 856);
  uint64_t v3 = *(void *)(v0 + 848);
  uint64_t v4 = *(void *)(v0 + 840);
  uint64_t v5 = *(void **)(v0 + 832);
  uint64_t v6 = *(void *)(v0 + 824);
  uint64_t v7 = *(void *)(v0 + 384);
  uint64_t v8 = *(uint64_t **)(v0 + 352);
  uint64_t v27 = *(void *)(v0 + 344);
  swift_beginAccess();
  *(void *)(v7 + 280) = 0;
  swift_release();
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  uint64_t v26 = v9;
  uint64_t v11 = type metadata accessor for FlowOutputMessage.InAppResponse();
  *(void *)(v0 + 888) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
  *(void *)(v0 + 896) = v13;
  *(void *)(v0 + 904) = (v12 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v13(v1, 1, 1, v11);
  *(_DWORD *)(v0 + 1240) = *MEMORY[0x1E4FA24B8];
  uint64_t v14 = (void (*)(uint64_t))v5[13];
  *(void *)(v0 + 912) = v14;
  *(void *)(v0 + 920) = (unint64_t)(v5 + 13) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v14(v3);
  uint64_t v15 = (void (*)(uint64_t, uint64_t, uint64_t))v5[2];
  *(void *)(v0 + 928) = v15;
  *(void *)(v0 + 936) = (unint64_t)(v5 + 2) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v15(v4, v3, v6);
  outlined init with copy of ReferenceResolutionClientProtocol?(v1, v2, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  uint64_t v16 = (objc_class *)type metadata accessor for ExecutionOutput();
  *(void *)(v0 + 944) = v16;
  uint64_t v17 = objc_allocWithZone(v16);
  swift_retain();
  swift_bridgeObjectRetain();
  *(void *)(v0 + 952) = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v26, v10, v4, v2);
  outlined destroy of ReferenceResolutionClientProtocol?(v1, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  uint64_t v18 = (void (*)(uint64_t, uint64_t))v5[1];
  *(void *)(v0 + 960) = v18;
  *(void *)(v0 + 968) = (unint64_t)(v5 + 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v18(v3, v6);
  uint64_t v19 = v27 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId;
  *(void *)(v0 + 976) = *(void *)(v27 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId);
  *(void *)(v0 + 984) = *(void *)(v19 + 8);
  uint64_t v20 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v21 = (_DWORD *)MEMORY[0x1E4FA18B0];
  *(_DWORD *)(v0 + 1244) = *MEMORY[0x1E4FA1898];
  *(_DWORD *)(v0 + 1248) = *v21;
  *(_DWORD *)(v0 + 1252) = *MEMORY[0x1E4FA18B8];
  *(_DWORD *)(v0 + 1256) = *MEMORY[0x1E4FA18A0];
  LODWORD(v2) = *(unsigned __int8 *)(v0 + 1261);
  uint64_t v22 = *(void *)(v0 + 336);
  *(void *)(v0 + 1008) = 1;
  *(void *)(v0 + 1000) = v22;
  *(void *)(v0 + 992) = v20;
  swift_beginAccess();
  specialized Set._Variant.removeAll(keepingCapacity:)(1);
  swift_retain();
  specialized Set._Variant.insert(_:)(&v28, v22);
  swift_endAccess();
  swift_release();
  if (v2 == 1)
  {
    uint64_t v23 = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:);
    uint64_t v24 = v22;
  }
  else
  {
    uint64_t v24 = *(void *)(v0 + 1000);
    uint64_t v23 = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:);
  }
  return MEMORY[0x1F4188298](v23, v24, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v9)(void);
  long long v10;
  uint64_t v11;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 1000);
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = v1 + 16;
  uint64_t v10 = *(_OWORD *)(v0 + 360);
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v4 = v1[19];
  uint64_t v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 1016) = v6;
  *(_OWORD *)(v6 + 16) = v10;
  uint64_t v9 = (uint64_t (*)(void))(*(void *)(v5 + 8) + **(int **)(v5 + 8));
  swift_unknownObjectRetain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 1024) = v7;
  uint64_t *v7 = v0;
  v7[1] = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:);
  return v9();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1032) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 1000);
    uint64_t v4 = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 1000);
    swift_release();
    uint64_t v4 = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:);
    uint64_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;

  return MEMORY[0x1F4188298](ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:), *(void *)(v0 + 1000), 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 872);
  swift_release();
  return MEMORY[0x1F4188298](ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:), v1, 0);
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t ObjectType;
  id v6;
  Swift::String v7;
  void (*v8)(unint64_t, unint64_t, void *, uint64_t);
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = (void *)v0[129];
  uint64_t v2 = (void *)v0[119];
  uint64_t v3 = v0[48];
  uint64_t v4 = v0[46];
  swift_release();
  uint64_t ObjectType = swift_getObjectType();
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v0[39] = v1;
  uint64_t v6 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  v7._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  (*(void (**)(void *, unint64_t, unint64_t, uint64_t, uint64_t))(v4 + 32))(v2, 0xD00000000000001ELL, 0x80000001BA0670C0, ObjectType, v4);

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(void **)(v3 + 216) + 208);
  swift_retain();
  swift_retain();
  v8(0xD00000000000005BLL, 0x80000001BA066F60, &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)partial apply, v3);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v11)(uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t);
  long long v12;
  uint64_t v13;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 1000);
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = v1 + 16;
  uint64_t v12 = *(_OWORD *)(v0 + 360);
  *(void *)(v0 + 1040) = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v4 = v1[19];
  uint64_t v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 1048) = v6;
  *(_OWORD *)(v6 + 16) = v12;
  uint64_t v11 = (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 8)
                                                                                    + **(int **)(v5 + 8));
  swift_unknownObjectRetain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 1056) = v7;
  uint64_t *v7 = v0;
  v7[1] = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:);
  uint64_t v8 = *(void *)(v0 + 808);
  uint64_t v9 = *(void *)(v0 + 792);
  return v11(v8, &async function pointer to partial apply for closure #1 in RemoteConversationClient.commit(bridge:), v6, v9, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1064) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 1000);
    uint64_t v4 = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 872);
    swift_release();
    uint64_t v4 = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:);
    uint64_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(unint64_t, unint64_t, void *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t);
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t);
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(unint64_t, unint64_t, void *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  Swift::String v85;
  Swift::String v86;
  Swift::String v87;
  unint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v101;
  uint64_t v102;
  int *v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  void (*v116)(unint64_t, unint64_t, void *, uint64_t);
  uint64_t v117;
  void (*v118)(uint64_t);
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  uint8_t *v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t ObjectType;
  void (*v131)(unint64_t, unint64_t, void *, uint64_t);
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  id v149;
  uint64_t v150;
  unint64_t v151;
  int *v152;
  void *v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void (*v160)(unint64_t, unint64_t, void *, uint64_t);
  NSObject *v161;
  os_log_type_t v162;
  uint8_t *v163;
  uint64_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(uint64_t, uint64_t);
  void (*v174)(unint64_t, unint64_t, void *, uint64_t);
  uint64_t (*v175)(void);
  NSObject *v176;
  os_log_type_t v177;
  BOOL v178;
  uint64_t v179;
  uint8_t *v180;
  uint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void (*v200)(unint64_t, unint64_t, void *, uint64_t);
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  NSObject *v213;
  unint64_t v214;
  uint64_t v215;
  os_log_type_t v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t (*v236)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v237;
  void *v238;
  char *v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t *v247;

  v244 = v0;
  v247 = (uint64_t *)(v0 + 232);
  uint64_t v1 = *(void *)(v0 + 816);
  uint64_t v2 = *(void *)(v0 + 800);
  outlined init with take of DecisionEngineResponse(*(void *)(v0 + 808), v1, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
  outlined init with copy of DecisionEngineResponse(v1, v2, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v8 = *(_DWORD *)(v0 + 1244);
      uint64_t v9 = *(void *)(v0 + 744);
      uint64_t v10 = *(void *)(v0 + 736);
      uint64_t v11 = *(void *)(v0 + 728);
      uint64_t v12 = *(void *)(v0 + 720);
      (*(void (**)(uint64_t, void, uint64_t))(v11 + 32))(v9, *(void *)(v0 + 800), v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v9, v12);
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 88))(v10, v12);
      if (v13 != v8)
      {
        if (v13 == *(_DWORD *)(v0 + 1248))
        {
          Class v58 = *(void *)(v0 + 384);
          swift_release();
          id v59 = *(void (**)(uint64_t))(**(void **)(v58 + 208) + 192);
          uint64_t v60 = swift_retain();
          v59(v60);
          swift_release();
          id v61 = Logger.logObject.getter();
          uint64_t v62 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v61, v62))
          {
            id v63 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)id v63 = 0;
            _os_log_impl(&dword_1B9C64000, v61, v62, "[ConversationService] Falling back to server because Flow returned .unhandled(reason: .needsServerExecution)", v63, 2u);
            MEMORY[0x1BA9E48C0](v63, -1, -1);
          }
          v247 = *(uint64_t **)(v0 + 992);
          v210 = *(void *)(v0 + 976);
          v214 = *(void *)(v0 + 984);
          v217 = *(void **)(v0 + 952);
          v229 = *(void *)(v0 + 744);
          v235 = *(void *)(v0 + 816);
          uint64_t v64 = *(void *)(v0 + 728);
          v222 = *(void *)(v0 + 720);
          Class v65 = *(void *)(v0 + 712);
          id v66 = *(void *)(v0 + 688);
          id v67 = *(void *)(v0 + 384);
          uint64_t v68 = *(uint64_t **)(v0 + 352);
          v205 = *(void *)(v0 + 360);
          v208 = *(void *)(v0 + 368);

          Swift::String v69 = *v68;
          os_log_type_t v70 = v68[1];
          v201 = v68[3];
          v203 = v68[2];
          id v71 = type metadata accessor for Siri_Nlu_External_UserParse();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56))(v65, 1, 1, v71);
          uint64_t v72 = *MEMORY[0x1E4FA25F0];
          uint64_t v73 = type metadata accessor for ServerFallbackReason();
          int64_t v74 = *(void *)(v73 - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 104))(v66, v72, v73);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v74 + 56))(v66, 0, 1, v73);
          ConversationService.maybeDoServerFallback(bridge:forResultCandidateId:executionRequestId:rootRequestId:isDomainDirected:topNlParse:serverFallbackReason:)(v205, v208, v210, v214, v69, v70, v203, v201, 1u, v65, v66);

          swift_release();
          outlined destroy of ReferenceResolutionClientProtocol?(v66, &demangling cache variable for type metadata for ServerFallbackReason?);
          outlined destroy of ReferenceResolutionClientProtocol?(v65, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
          (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v229, v222);
          outlined destroy of DecisionEngineResponse(v235, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
          swift_bridgeObjectRelease();
          id v75 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(void **)(v67 + 216)
                                                                                           + 208);
          swift_retain();
          swift_retain();
          v75(0xD00000000000005BLL, 0x80000001BA066F60, &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)partial apply, v67);
          goto LABEL_46;
        }
        if (v13 == *(_DWORD *)(v0 + 1252))
        {
          v117 = *(void *)(v0 + 384);
          swift_release();
          id v118 = *(void (**)(uint64_t))(**(void **)(v117 + 208) + 192);
          uint64_t v119 = swift_retain();
          v118(v119);
          swift_release();
          v120 = Logger.logObject.getter();
          os_log_type_t v121 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v120, v121))
          {
            v122 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v122 = 0;
            _os_log_impl(&dword_1B9C64000, v120, v121, "[ConversationService] Falling back to POMMES because Flow returned .unhandled(reason: .needsInfoDomainFallback)", v122, 2u);
            MEMORY[0x1BA9E48C0](v122, -1, -1);
          }
          v247 = *(uint64_t **)(v0 + 992);
          v123 = *(void *)(v0 + 984);
          id v124 = *(void *)(v0 + 976);
          id v125 = *(void **)(v0 + 952);
          v237 = *(void *)(v0 + 816);
          v223 = *(void *)(v0 + 744);
          id v126 = *(void *)(v0 + 728);
          uint64_t v127 = *(void *)(v0 + 720);
          v128 = *(void *)(v0 + 384);
          os_log_type_t v129 = *(void *)(v0 + 368);

          uint64_t ObjectType = swift_getObjectType();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v129 + 56))(v124, v123, ObjectType, v129);

          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v223, v127);
          outlined destroy of DecisionEngineResponse(v237, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
          swift_bridgeObjectRelease();
          v131 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(void **)(v128 + 216)
                                                                                            + 208);
          swift_retain();
          swift_retain();
          v131(0xD00000000000005BLL, 0x80000001BA066F60, &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)partial apply, v128);
          goto LABEL_46;
        }
        if (v13 != *(_DWORD *)(v0 + 1256))
        {
          swift_release();
          uint64_t v161 = Logger.logObject.getter();
          v162 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v161, v162))
          {
            uint64_t v163 = (uint8_t *)swift_slowAlloc();
            uint64_t v164 = swift_slowAlloc();
            v242 = v164;
            *(_DWORD *)uint64_t v163 = 136315138;
            *(void *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002BLL, 0x80000001BA067040, &v242);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_1B9C64000, v161, v162, "[ConversationService]: %s", v163, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1BA9E48C0](v164, -1, -1);
            MEMORY[0x1BA9E48C0](v163, -1, -1);
          }

          v247 = *(uint64_t **)(v0 + 992);
          uint64_t v165 = *(void **)(v0 + 952);
          uint64_t v166 = *(void *)(v0 + 816);
          int v167 = *(void *)(v0 + 744);
          v240 = *(void *)(v0 + 736);
          v168 = *(void *)(v0 + 728);
          uint64_t v169 = *(void *)(v0 + 720);
          v170 = *(void *)(v0 + 384);
          v171 = *(void *)(v0 + 368);
          uint64_t v172 = swift_getObjectType();
          (*(void (**)(void *, unint64_t, unint64_t, uint64_t, uint64_t))(v171 + 32))(v165, 0xD00000000000002BLL, 0x80000001BA067040, v172, v171);

          swift_release();
          v173 = *(void (**)(uint64_t, uint64_t))(v168 + 8);
          v173(v167, v169);
          outlined destroy of DecisionEngineResponse(v166, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
          v173(v240, v169);
          swift_bridgeObjectRelease();
          v174 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(void **)(v170 + 216)
                                                                                            + 208);
          swift_retain();
          swift_retain();
          v174(0xD00000000000005BLL, 0x80000001BA066F60, &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)partial apply, v170);
          goto LABEL_46;
        }
        uint64_t v132 = *(void **)(v0 + 376);
        if (v132)
        {
          int64_t v133 = *(void *)(v0 + 688);
          v206 = v133;
          uint64_t v134 = *(void *)(v0 + 680);
          id v135 = *(void *)(v0 + 672);
          id v136 = *(void *)(v0 + 664);
          uint64_t v137 = *(void *)(v0 + 656);
          uint64_t v138 = *(void *)(v0 + 648);
          v221 = *(void *)(v0 + 640);
          v224 = *(void *)(v0 + 632);
          v231 = *(void *)(v0 + 624);
          v238 = *(void **)(v0 + 384);
          v247 = v238 + 2;
          v139 = v132[7];
          *(void *)(v0 + 1104) = v139;
          v140 = *(void *)(v139 + 16);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v135 + 16))(v134, v139 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlResponseStatusCode, v136);
          v141 = OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_pommesInfo;
          *(void *)(v0 + 1112) = OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_pommesInfo;
          v218 = *(void *)(v139 + v141);
          outlined init with copy of ReferenceResolutionClientProtocol?(v139 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_languageVariantResult, v137, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
          v211 = *(void *)(v139 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_responseVariantResult);
          v209 = *(void *)(v139 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_responseVariantResult + 8);
          outlined init with copy of ReferenceResolutionClientProtocol?(v139 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_serverFallbackReason, v133, &demangling cache variable for type metadata for ServerFallbackReason?);
          uint64_t v142 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
          v143 = v138;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v142 - 8) + 56))(v138, 1, 1, v142);
          type metadata accessor for NLResponse(0);
          id v144 = swift_allocObject();
          *(void *)(v0 + 1120) = v144;
          *(void *)(v144 + 16) = v140;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v135 + 32))(v144 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlResponseStatusCode, v134, v136);
          outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v137, v144 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_languageVariantResult, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
          int64_t v145 = (void *)(v144 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_responseVariantResult);
          *int64_t v145 = v211;
          v145[1] = v209;
          *(void *)(v144 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_pommesInfo) = v218;
          outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v206, v144 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_serverFallbackReason, &demangling cache variable for type metadata for ServerFallbackReason?);
          outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v143, v144 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlRoutingDecision, (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
          v146 = v132[2];
          v147 = v132[3];
          v148 = (void *)v132[6];
          outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v132 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_mitigationDecision, v221, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
          v149 = v148;
          swift_retain();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          static ExecutionLocation.unknown.getter();
          static ExecutionLocation.unknown.getter();
          type metadata accessor for ConversationUserInput(0);
          swift_allocObject();
          *(void *)(v0 + 1128) = ConversationUserInput.init(resultCandidateId:speechPackage:nlResponse:mitigationDecision:userSpecificInfoForRecognizedUser:userSpecificInfoForUserMeetingSessionThreshold:utterance:asrLocation:nlLocation:)(v146, v147, (uint64_t)v148, v144, v221, 0, 0, 0, 0, v224, v231);
          int v150 = v238[6];
          __swift_project_boxed_opaque_existential_1(v247, v238[5]);
          if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
            uint64_t v151 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
          }
          else {
            uint64_t v151 = MEMORY[0x1E4FBC870];
          }
          *(void *)(v0 + 1136) = v151;
          v152 = *(int **)(v150 + 8);
          v247 = (uint64_t *)(v150 + 8);
          v239 = (char *)v152 + *v152;
          uint64_t v153 = (void *)swift_task_alloc();
          *(void *)(v0 + 1144) = v153;
          *uint64_t v153 = v0;
          v153[1] = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:);
          v246 = v150;
          __asm { BRAA            X9, X16 }
        }
        swift_release();
        swift_retain_n();
        int64_t v176 = Logger.logObject.getter();
        v177 = static os_log_type_t.error.getter();
        uint64_t v178 = os_log_type_enabled(v176, v177);
        uint64_t v179 = *(void *)(v0 + 376);
        if (v178)
        {
          v180 = (uint8_t *)swift_slowAlloc();
          v181 = swift_slowAlloc();
          v242 = v181;
          *(_DWORD *)v180 = 136315138;
          *(void *)(v0 + 248) = v179;
          swift_retain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationUserInput?);
          long long v182 = String.init<A>(describing:)();
          *(void *)(v0 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v182, v183, &v242);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_release_n();
          _os_log_impl(&dword_1B9C64000, v176, v177, "[ConversationService] Conversation wanted to fall back to Siri X, but could not find a plugin to handle it. Will fall back to server. ConversationUserInput: %s", v180, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v181, -1, -1);
          MEMORY[0x1BA9E48C0](v180, -1, -1);
        }
        else
        {

          swift_release_n();
        }
        uint64_t v184 = *(void *)(v0 + 376);
        unint64_t v185 = *(void *)(v0 + 352);
        v247 = *(uint64_t **)v185;
        v232 = *(void *)(v185 + 16);
        v241 = *(void *)(v185 + 8);
        v226 = *(void *)(v185 + 24);
        if (v184)
        {
          uint64_t v186 = *(void *)(*(void *)(v184 + 56) + 16);
          v187 = *(void *)(v186 + 16);
          v188 = type metadata accessor for Siri_Nlu_External_UserParse();
          v189 = *(void *)(v188 - 8);
          if (v187)
          {
            (*(void (**)(void, unint64_t, uint64_t))(*(void *)(v188 - 8) + 16))(*(void *)(v0 + 704), v186+ ((*(unsigned __int8 *)(*(void *)(v188 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v188 - 8) + 80)), v188);
            v190 = 0;
LABEL_57:
            v202 = *(void *)(v0 + 976);
            v204 = *(void *)(v0 + 984);
            v207 = *(void **)(v0 + 952);
            v215 = *(void *)(v0 + 744);
            v219 = *(void *)(v0 + 816);
            v191 = *(void *)(v0 + 728);
            v212 = *(void *)(v0 + 720);
            v192 = *(void *)(v0 + 704);
            v193 = *(void *)(v0 + 688);
            v194 = *(void *)(v0 + 384);
            v196 = *(void *)(v0 + 360);
            v195 = *(void *)(v0 + 368);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v189 + 56))(v192, v190, 1, v188);
            v197 = *MEMORY[0x1E4FA25F0];
            v198 = type metadata accessor for ServerFallbackReason();
            v199 = *(void *)(v198 - 8);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v199 + 104))(v193, v197, v198);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v199 + 56))(v193, 0, 1, v198);
            ConversationService.maybeDoServerFallback(bridge:forResultCandidateId:executionRequestId:rootRequestId:isDomainDirected:topNlParse:serverFallbackReason:)(v196, v195, v202, v204, (uint64_t)v247, v241, v232, v226, 0, v192, v193);

            swift_release();
            outlined destroy of ReferenceResolutionClientProtocol?(v193, &demangling cache variable for type metadata for ServerFallbackReason?);
            outlined destroy of ReferenceResolutionClientProtocol?(v192, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
            (*(void (**)(uint64_t, uint64_t))(v191 + 8))(v215, v212);
            outlined destroy of DecisionEngineResponse(v219, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
            swift_bridgeObjectRelease();
            v200 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(void **)(v194 + 216)
                                                                                              + 208);
            swift_retain();
            swift_retain();
            v200(0xD00000000000005BLL, 0x80000001BA066F60, &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)partial apply, v194);
            goto LABEL_46;
          }
        }
        else
        {
          v188 = type metadata accessor for Siri_Nlu_External_UserParse();
          v189 = *(void *)(v188 - 8);
        }
        v190 = 1;
        goto LABEL_57;
      }
      uint64_t v14 = *(void *)(v0 + 752);
      uint64_t v15 = *(void *)(v0 + 736);
      uint64_t v16 = *(void *)(v0 + 728);
      uint64_t v17 = *(void *)(v0 + 720);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v16 + 96))(v15, v17);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v15, v14, (uint64_t *)&demangling cache variable for type metadata for PrescribedTool?);
      uint64_t v18 = Logger.logObject.getter();
      uint64_t v19 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl(&dword_1B9C64000, v18, v19, "[ConversationService] Falling back to IntelligenceFlow because Flow returned .unhandled(reason: .needsIntelligenceFlowFallback)", v20, 2u);
        MEMORY[0x1BA9E48C0](v20, -1, -1);
      }
      v247 = *(uint64_t **)(v0 + 992);
      uint64_t v21 = *(void **)(v0 + 952);
      uint64_t v22 = *(void *)(v0 + 752);
      v227 = *(void *)(v0 + 744);
      v233 = *(void *)(v0 + 816);
      uint64_t v23 = *(void *)(v0 + 728);
      uint64_t v24 = *(void *)(v0 + 720);
      uint64_t v25 = *(void *)(v0 + 384);
      uint64_t v26 = *(void *)(v0 + 368);

      uint64_t v27 = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 64))(v22, v27, v26);

      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?(v22, (uint64_t *)&demangling cache variable for type metadata for PrescribedTool?);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v227, v24);
      outlined destroy of DecisionEngineResponse(v233, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
      swift_bridgeObjectRelease();
      uint64_t v28 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(void **)(v25 + 216) + 208);
      swift_retain();
      swift_retain();
      v28(0xD00000000000005BLL, 0x80000001BA066F60, &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)partial apply, v25);
LABEL_46:
      swift_release();
      swift_release();
      v247 = *(uint64_t **)(v0 + 392);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v175 = *(uint64_t (**)(void))(v0 + 8);
      return v175();
    case 2u:
      uint64_t v29 = *(void *)(v0 + 584);
      unint64_t v30 = *(void *)(v0 + 576);
      unint64_t v31 = *(void *)(v0 + 568);
      uint64_t v32 = *(void *)(v0 + 560);
      unint64_t v33 = *(void *)(v0 + 384);
      (*(void (**)(uint64_t, void, uint64_t))(v31 + 32))(v29, *(void *)(v0 + 800), v32);
      uint64_t v34 = *(void (**)(uint64_t))(**(void **)(v33 + 208) + 192);
      int64_t v35 = swift_retain();
      v34(v35);
      swift_release();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v30, v29, v32);
      swift_retain();
      unint64_t v36 = Logger.logObject.getter();
      int64_t v37 = static os_log_type_t.debug.getter();
      uint64_t v38 = os_log_type_enabled(v36, v37);
      uint64_t v39 = *(void *)(v0 + 1000);
      uint64_t v40 = *(void *)(v0 + 576);
      uint64_t v41 = *(void *)(v0 + 568);
      uint64_t v42 = *(void *)(v0 + 560);
      if (v38)
      {
        uint64_t v43 = swift_slowAlloc();
        v220 = swift_slowAlloc();
        v242 = v220;
        *(_DWORD *)uint64_t v43 = 136315394;
        v216 = v37;
        v213 = v36;
        unint64_t v44 = *(void *)(v39 + 112);
        uint64_t v45 = *(void *)(v39 + 120);
        swift_bridgeObjectRetain();
        *(void *)(v0 + 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v242);
        uint64_t v46 = v247;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release();
        *(_WORD *)(v43 + 12) = 2080;
        _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type PluginAction and conformance PluginAction, 255, MEMORY[0x1E4FA1B58]);
        uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
        *uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v242);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        int v49 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
        v49(v40, v42);
        _os_log_impl(&dword_1B9C64000, v213, v216, "[ConversationService] Conversation %s wants to redirect to plugin action: %s)", (uint8_t *)v43, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v220, -1, -1);
        MEMORY[0x1BA9E48C0](v43, -1, -1);
      }
      else
      {
        swift_release();
        int v49 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
        v49(v40, v42);
      }
      *(void *)(v0 + 1160) = v49;
      uint64_t v76 = *(void *)(v0 + 992);
      uint64_t v77 = PluginAction.flowHandlerId.getter();
      if (*(void *)(v76 + 16) && (int64_t v79 = specialized __RawDictionaryStorage.find<A>(_:)(v77, v78), (v80 & 1) != 0))
      {
        v81 = *(unsigned __int8 *)(*(void *)(*(void *)(v0 + 992) + 56) + v79);
        swift_bridgeObjectRelease();
        if (v81 == 1)
        {
          v247 = (uint64_t *)v49;
          os_log_type_t v82 = *(void *)(v0 + 1000);
          swift_release();
          v242 = 0;
          v243 = 0xE000000000000000;
          _StringGuts.grow(_:)(39);
          swift_bridgeObjectRelease();
          v242 = 0xD00000000000001ALL;
          v243 = 0x80000001BA067020;
          unint64_t v83 = *(void *)(v82 + 112);
          v84 = *(void **)(v82 + 120);
          swift_bridgeObjectRetain();
          v85._uint64_t countAndFlagsBits = v83;
          v85._object = v84;
          String.append(_:)(v85);
          swift_bridgeObjectRelease();
          v86._uint64_t countAndFlagsBits = 0x6F74206B63616220;
          v86._object = (void *)0xE900000000000020;
          String.append(_:)(v86);
          v87._uint64_t countAndFlagsBits = PluginAction.flowHandlerId.getter();
          String.append(_:)(v87);
          swift_bridgeObjectRelease();
          uint64_t v89 = v242;
          uint64_t v88 = v243;
          swift_bridgeObjectRetain_n();
          uint64_t v90 = Logger.logObject.getter();
          uint64_t v91 = static os_log_type_t.error.getter();
          v230 = v88;
          if (os_log_type_enabled(v90, v91))
          {
            id v92 = (uint8_t *)swift_slowAlloc();
            int v93 = swift_slowAlloc();
            v242 = v93;
            *(_DWORD *)id v92 = 136315138;
            swift_bridgeObjectRetain();
            *(void *)(v0 + 216) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v88, &v242);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1B9C64000, v90, v91, "[ConversationService] %s", v92, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1BA9E48C0](v93, -1, -1);
            MEMORY[0x1BA9E48C0](v92, -1, -1);
          }
          else
          {
            swift_bridgeObjectRelease_n();
          }

          v154 = *(void **)(v0 + 952);
          v225 = *(void *)(v0 + 816);
          v155 = *(void *)(v0 + 584);
          uint64_t v156 = *(void *)(v0 + 560);
          v157 = *(void *)(v0 + 384);
          uint64_t v158 = *(void *)(v0 + 368);
          v159 = swift_getObjectType();
          (*(void (**)(void *, uint64_t, unint64_t, uint64_t, uint64_t))(v158 + 32))(v154, v89, v230, v159, v158);

          swift_bridgeObjectRelease();
          swift_release();
          ((void (*)(uint64_t, uint64_t))v247)(v155, v156);
          outlined destroy of DecisionEngineResponse(v225, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
          swift_bridgeObjectRelease();
          v160 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(void **)(v157 + 216)
                                                                                            + 208);
          swift_retain();
          swift_retain();
          v160(0xD00000000000005BLL, 0x80000001BA066F60, &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)partial apply, v157);
          goto LABEL_46;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      int v94 = *(void *)(v0 + 1000);
      v95 = *(void *)(v0 + 992);
      uint64_t v96 = *(void **)(v0 + 384);
      v97 = *(void *)(v94 + 112);
      v98 = *(void *)(v94 + 120);
      swift_bridgeObjectRetain();
      uint64_t v99 = PluginAction.preventCircularRedirect.getter();
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v242 = v95;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v99 & 1, v97, v98, isUniquelyReferenced_nonNull_native);
      *(void *)(v0 + 1168) = v242;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v101 = v96[5];
      int64_t v102 = v96[6];
      __swift_project_boxed_opaque_existential_1(v96 + 2, v101);
      uint64_t v103 = *(int **)(v102 + 24);
      v247 = (uint64_t *)(v102 + 24);
      v236 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v103 + *v103);
      uint64_t v104 = (void *)swift_task_alloc();
      *(void *)(v0 + 1176) = v104;
      *uint64_t v104 = v0;
      v104[1] = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:);
      unint64_t v105 = *(void *)(v0 + 360);
      id v106 = *(void *)(v0 + 368);
      v107 = *(void *)(v0 + 344);
      v108 = *(void *)(v0 + 352);
      v109 = *(void *)(v0 + 584);
      return v236(v109, v107, v108, v105, v106, v101, v102);
    case 3u:
      uint64_t v50 = *(void *)(v0 + 800);
      swift_release();
      uint64_t v51 = *(void *)(v50 + 8);
      v247 = *(uint64_t **)v50;
      uint64_t v52 = *(void *)(v50 + 16);
      uint64_t v53 = *(void *)(v50 + 24);
      v228 = v52;
      swift_bridgeObjectRetain_n();
      uint64_t v54 = Logger.logObject.getter();
      uint64_t v55 = static os_log_type_t.debug.getter();
      v234 = v53;
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        id v57 = swift_slowAlloc();
        v242 = v57;
        *(_DWORD *)uint64_t v56 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v247, v51, &v242);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B9C64000, v54, v55, "[ConversationService] Retriggering NL for request %s", v56, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v57, -1, -1);
        MEMORY[0x1BA9E48C0](v56, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      Class v110 = *(void **)(v0 + 952);
      id v111 = *(void *)(v0 + 816);
      v112 = *(void *)(v0 + 384);
      id v113 = *(void *)(v0 + 368);
      Class v114 = *(void **)(v0 + 352);
      id v115 = swift_getObjectType();
      (*(void (**)(uint64_t *, unint64_t, uint64_t, uint64_t, void, void, uint64_t (*)(), void, uint64_t, uint64_t))(v113 + 120))(v247, v51, v228, v234, *v114, v114[1], destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions, 0, v115, v113);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of DecisionEngineResponse(v111, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
      swift_bridgeObjectRelease();
      v116 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(void **)(v112 + 216)
                                                                                        + 208);
      swift_retain();
      swift_retain();
      v116(0xD00000000000005BLL, 0x80000001BA066F60, &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)partial apply, v112);
      goto LABEL_46;
    default:
      uint64_t v3 = *(void **)(v0 + 800);
      *(void *)(v0 + 1072) = *v3;
      *(void *)(v0 + 1080) = v3[1];
      uint64_t v4 = swift_getObjectType();
      *(void *)(v0 + 1088) = v4;
      uint64_t v5 = (void *)swift_task_alloc();
      *(void *)(v0 + 1096) = v5;
      *uint64_t v5 = v0;
      v5[1] = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:);
      uint64_t v6 = *(void *)(v0 + 368);
      return ServiceBridgeDelegate.fetchSelfReflectionDecision()(v0 + 1260, v4, v6);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 872);
  swift_release();
  return MEMORY[0x1F4188298](ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:), v1, 0);
}

{
  void *v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  void *v6;
  void *v7;
  uint8_t *v8;
  void *v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  void *v15;
  uint8_t *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(unint64_t, unint64_t, void *, uint64_t);
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  uint64_t ObjectType;
  id v28;
  Swift::String v29;
  uint64_t (*v30)(void);
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;

  uint64_t v34 = v0;
  uint64_t v1 = (void *)v0[133];
  swift_release();
  v0[40] = v1;
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[97] + 8))(v0[98], v0[96]);
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.error.getter();
    uint64_t v5 = os_log_type_enabled(v3, v4);
    uint64_t v6 = (void *)v0[133];
    uint64_t v7 = (void *)v0[119];
    if (v5)
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_1B9C64000, v3, v4, "Conversation was cancelled during commit. Will not call bridge.close()", v8, 2u);
      MEMORY[0x1BA9E48C0](v8, -1, -1);

      swift_release();
    }
    else
    {

      swift_release();
    }
    uint64_t v21 = v0[48];
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(void **)(v21 + 216) + 208);
    swift_retain();
    swift_retain();
    uint64_t v23 = &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)partial apply;
  }
  else
  {
    uint64_t v9 = (void *)v0[133];
    uint64_t v10 = v9;
    uint64_t v11 = v9;
    uint64_t v12 = Logger.logObject.getter();
    uint64_t v13 = static os_log_type_t.error.getter();
    uint64_t v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = (void *)v0[133];
    if (v14)
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v32 = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      v0[33] = v15;
      uint64_t v18 = v15;
      uint64_t v19 = String.init<A>(describing:)();
      v0[25] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v12, v13, "Error commiting conversation: %s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v17, -1, -1);
      MEMORY[0x1BA9E48C0](v16, -1, -1);
    }
    else
    {
    }
    uint64_t v24 = (void *)v0[133];
    uint64_t v25 = (void *)v0[119];
    uint64_t v21 = v0[48];
    uint64_t v26 = v0[46];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v32 = 0;
    unint64_t v33 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    uint64_t v32 = 0xD00000000000001FLL;
    unint64_t v33 = 0x80000001BA066F40;
    v0[34] = v24;
    uint64_t v28 = v24;
    v29._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    (*(void (**)(void *, uint64_t, unint64_t, uint64_t, uint64_t))(v26 + 32))(v25, v32, v33, ObjectType, v26);

    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(void **)(v21 + 216) + 208);
    swift_retain();
    swift_retain();
    uint64_t v23 = &async function pointer to partial apply for closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:);
  }
  v22(0xD00000000000005BLL, 0x80000001BA066F60, v23, v21);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v30 = (uint64_t (*)(void))v0[1];
  return v30();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 872);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(unint64_t, unint64_t, void *, uint64_t);
  uint64_t (*v17)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;

  int64_t v35 = v0;
  uint64_t v1 = *(void *)(v0 + 1080);
  uint64_t v2 = *(void *)(v0 + 1072);
  if (*(unsigned char *)(v0 + 1260) == 6)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      unint64_t v33 = v6;
      *(_DWORD *)uint64_t v5 = 136315138;
      uint64_t v34 = 6;
      uint64_t v7 = SelfReflectionAgentDecision.description.getter();
      *(void *)(v0 + 328) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v3, v4, "[ConversationService] Falling back to IntelligenceFlow because Self Reflection's decision %s", v5, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v6, -1, -1);
      MEMORY[0x1BA9E48C0](v5, -1, -1);
    }

    uint64_t v9 = *(void *)(v0 + 1088);
    uint64_t v10 = *(void **)(v0 + 952);
    uint64_t v11 = *(void *)(v0 + 816);
    uint64_t v12 = *(void *)(v0 + 760);
    uint64_t v13 = *(void *)(v0 + 384);
    uint64_t v14 = *(void *)(v0 + 368);
    uint64_t v15 = type metadata accessor for PrescribedTool();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 64))(v12, v9, v14);

    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v12, (uint64_t *)&demangling cache variable for type metadata for PrescribedTool?);
    outlined destroy of DecisionEngineResponse(v11, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(void **)(v13 + 216) + 208);
    swift_retain();
    swift_retain();
    v16(0xD00000000000005BLL, 0x80000001BA066F60, &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)partial apply, v13);
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }
  else
  {
    uint64_t v19 = *(void *)(v0 + 472);
    uint64_t v20 = *(void *)(v0 + 480);
    uint64_t v22 = *(void *)(v0 + 456);
    uint64_t v21 = *(void *)(v0 + 464);
    uint64_t v23 = *(void *)(v0 + 448);
    uint64_t v24 = *(void *)(v0 + 384);
    uint64_t v25 = type metadata accessor for Parse.DirectInvocation();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v20, 1, 1, v25);
    uint64_t v26 = type metadata accessor for PommesContext();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v19, 1, 1, v26);
    (*(void (**)(uint64_t, void, uint64_t))(v22 + 104))(v21, *MEMORY[0x1E4FA1C98], v23);
    objc_allocWithZone((Class)type metadata accessor for ExecutionContextUpdate());
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(void *)(v0 + 1200) = specialized ExecutionContextUpdate.init(provideContextCommand:nativeFlowContextCommand:nluSystemDialogActs:nluActiveTasks:nluCompletedTasks:undoDirectInvocation:rrEntities:pommesContext:contextUpdateScope:restoreSessionForRequestId:)(0, 0, 0, v2, v1, v20, 0, v19, v21, 0, 0);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(**(void **)(v24 + 208) + 184);
    swift_retain();
    v27(v2, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v28 = *(void *)(v24 + 40);
    uint64_t v29 = *(void *)(v24 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v24 + 16), v28);
    uint64_t v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 + 32) + **(int **)(v29 + 32));
    unint64_t v30 = (void *)swift_task_alloc();
    *(void *)(v0 + 1208) = v30;
    *unint64_t v30 = v0;
    v30[1] = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:);
    unint64_t v31 = *(void *)(v0 + 1000);
    return v32(v31, v28, v29);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1152) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 872);
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v4 = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:);
  }
  else {
    uint64_t v4 = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(unint64_t, unint64_t, void *, uint64_t);
  uint64_t (*v38)(void);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  Swift::String v49;
  Swift::String v50;
  uint64_t v51;
  void *v52;
  Swift::String v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint8_t *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  Swift::String v78;
  uint64_t v79;
  Swift::String v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(unint64_t, unint64_t, void *, uint64_t);
  void *v92;
  uint64_t v93;
  Swift::String v94;
  Swift::String v95;
  Swift::String v96;
  uint64_t v97;
  unint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  void (*v108)(unint64_t, unint64_t, void *, uint64_t);
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t ObjectType;
  os_log_t log;
  NSObject *loga;
  unint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;

  v140 = v0;
  uint64_t v1 = *(void *)(v0 + 592);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 608) + 48))(v1, 1, *(void *)(v0 + 600)) == 1)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v1, &demangling cache variable for type metadata for DecisionEngineResponse?);
    goto LABEL_7;
  }
  uint64_t v2 = *(uint64_t **)(v0 + 616);
  outlined init with take of DecisionEngineResponse(v1, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
  uint64_t v3 = *v2;
  if (!*v2)
  {
    outlined destroy of DecisionEngineResponse(*(void *)(v0 + 616), (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
LABEL_7:
    swift_retain_n();
    uint64_t v13 = Logger.logObject.getter();
    uint64_t v14 = static os_log_type_t.error.getter();
    uint64_t v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = *(void *)(v0 + 376);
    if (v15)
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v138 = v18;
      *(_DWORD *)uint64_t v17 = 136315138;
      *(void *)(v0 + 248) = v16;
      swift_retain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationUserInput?);
      uint64_t v19 = String.init<A>(describing:)();
      *(void *)(v0 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v138);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v13, v14, "[ConversationService] Conversation wanted to fall back to Siri X, but could not find a plugin to handle it. Will fall back to server. ConversationUserInput: %s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v18, -1, -1);
      MEMORY[0x1BA9E48C0](v17, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    uint64_t v21 = *(void *)(v0 + 376);
    uint64_t v22 = *(uint64_t **)(v0 + 352);
    uint64_t v134 = v22[1];
    id v136 = *v22;
    uint64_t v127 = v22[3];
    v130 = v22[2];
    if (v21)
    {
      uint64_t v23 = *(void *)(*(void *)(v21 + 56) + 16);
      uint64_t v24 = *(void *)(v23 + 16);
      uint64_t v25 = type metadata accessor for Siri_Nlu_External_UserParse();
      uint64_t v26 = *(void *)(v25 - 8);
      if (v24)
      {
        (*(void (**)(void, unint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(*(void *)(v0 + 704), v23+ ((*(unsigned __int8 *)(*(void *)(v25 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v25 - 8) + 80)), v25);
        uint64_t v27 = 0;
LABEL_15:
        log = *(os_log_t *)(v0 + 976);
        id v115 = *(void *)(v0 + 984);
        v116 = *(void **)(v0 + 952);
        v120 = *(void *)(v0 + 744);
        v122 = *(void *)(v0 + 816);
        uint64_t v28 = *(void *)(v0 + 728);
        v117 = *(void *)(v0 + 720);
        uint64_t v29 = *(void *)(v0 + 704);
        unint64_t v30 = *(void *)(v0 + 688);
        unint64_t v31 = *(void *)(v0 + 384);
        unint64_t v33 = *(void *)(v0 + 360);
        uint64_t v32 = *(void *)(v0 + 368);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v29, v27, 1, v25);
        uint64_t v34 = *MEMORY[0x1E4FA25F0];
        int64_t v35 = type metadata accessor for ServerFallbackReason();
        unint64_t v36 = *(void *)(v35 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 104))(v30, v34, v35);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v30, 0, 1, v35);
        ConversationService.maybeDoServerFallback(bridge:forResultCandidateId:executionRequestId:rootRequestId:isDomainDirected:topNlParse:serverFallbackReason:)(v33, v32, (uint64_t)log, v115, v136, v134, v130, v127, 0, v29, v30);

        swift_release();
        outlined destroy of ReferenceResolutionClientProtocol?(v30, &demangling cache variable for type metadata for ServerFallbackReason?);
        outlined destroy of ReferenceResolutionClientProtocol?(v29, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v120, v117);
        outlined destroy of DecisionEngineResponse(v122, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
        swift_bridgeObjectRelease();
        int64_t v37 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(void **)(v31 + 216)
                                                                                         + 208);
        swift_retain();
        swift_retain();
        v37(0xD00000000000005BLL, 0x80000001BA066F60, &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)partial apply, v31);
LABEL_16:
        swift_release();
        swift_release();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v38 = *(uint64_t (**)(void))(v0 + 8);
        return v38();
      }
    }
    else
    {
      uint64_t v25 = type metadata accessor for Siri_Nlu_External_UserParse();
      uint64_t v26 = *(void *)(v25 - 8);
    }
    uint64_t v27 = 1;
    goto LABEL_15;
  }
  swift_retain_n();
  swift_retain();
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.debug.getter();
  uint64_t v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 1000);
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    int64_t v133 = swift_slowAlloc();
    uint64_t v138 = v133;
    *(_DWORD *)uint64_t v8 = 136315394;
    uint64_t v9 = *(void *)(v7 + 112);
    uint64_t v10 = *(void *)(v7 + 120);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 296) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v8 + 12) = 2080;
    uint64_t v11 = *(void *)(v3 + 112);
    uint64_t v12 = *(void *)(v3 + 120);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_1B9C64000, v4, v5, "[ConversationService] Attempts to fall back to Siri X because .unhandled(reason: .needsSiriXFallback) from: %s to %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v133, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  else
  {
    swift_release();
    swift_release();
  }

  uint64_t v40 = v3;
  if (*(void *)(*(void *)(v0 + 992) + 16))
  {
    uint64_t v41 = *(void *)(v3 + 112);
    uint64_t v42 = *(void *)(v3 + 120);
    swift_bridgeObjectRetain();
    uint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v41, v42);
    if (v44)
    {
      uint64_t v45 = *(unsigned char *)(*(void *)(*(void *)(v0 + 992) + 56) + v43);
      swift_bridgeObjectRelease();
      if (v45)
      {
        uint64_t v46 = *(void *)(v0 + 1000);
        swift_release();
        uint64_t v138 = 0;
        v139 = 0xE000000000000000;
        _StringGuts.grow(_:)(39);
        swift_bridgeObjectRelease();
        uint64_t v138 = 0xD00000000000001ALL;
        v139 = 0x80000001BA067020;
        uint64_t v47 = *(void *)(v46 + 112);
        int64_t v48 = *(void **)(v46 + 120);
        swift_bridgeObjectRetain();
        v49._uint64_t countAndFlagsBits = v47;
        v49._object = v48;
        String.append(_:)(v49);
        swift_bridgeObjectRelease();
        v50._uint64_t countAndFlagsBits = 0x6F74206B63616220;
        v50._object = (void *)0xE900000000000020;
        String.append(_:)(v50);
        uint64_t v51 = *(void *)(v3 + 112);
        uint64_t v52 = *(void **)(v3 + 120);
        swift_bridgeObjectRetain();
        v53._uint64_t countAndFlagsBits = v51;
        v53._object = v52;
        String.append(_:)(v53);
        swift_bridgeObjectRelease();
        uint64_t v54 = v138;
        v131 = v139;
        swift_bridgeObjectRetain_n();
        uint64_t v55 = Logger.logObject.getter();
        uint64_t v56 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v55, v56))
        {
          id v57 = (uint8_t *)swift_slowAlloc();
          Class v58 = swift_slowAlloc();
          uint64_t v138 = v58;
          *(_DWORD *)id v57 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 288) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v131, &v138);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B9C64000, v55, v56, "[ConversationService] %s", v57, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v58, -1, -1);
          MEMORY[0x1BA9E48C0](v57, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        v109 = *(void **)(v0 + 952);
        id v126 = *(void *)(v0 + 744);
        os_log_type_t v129 = *(void *)(v0 + 816);
        Class v110 = *(void *)(v0 + 728);
        v123 = *(void *)(v0 + 720);
        uint64_t v119 = *(void *)(v0 + 616);
        uint64_t v88 = *(void *)(v0 + 384);
        id v111 = *(void *)(v0 + 368);
        uint64_t ObjectType = swift_getObjectType();
        (*(void (**)(void *, uint64_t, unint64_t, uint64_t, uint64_t))(v111 + 32))(v109, v54, v131, ObjectType, v111);

        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        outlined destroy of DecisionEngineResponse(v119, (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
        (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v126, v123);
        outlined destroy of DecisionEngineResponse(v129, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
        swift_bridgeObjectRelease();
        uint64_t v91 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(void **)(v88 + 216)
                                                                                         + 208);
        swift_retain();
        swift_retain();
        id v92 = &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)partial apply;
LABEL_43:
        v91(0xD00000000000005BLL, 0x80000001BA066F60, v92, v88);
        goto LABEL_16;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  id v59 = *(void *)(v0 + 1112);
  uint64_t v60 = *(void *)(v0 + 1104);
  id v61 = *(void *)(v0 + 1000);
  uint64_t v62 = *(void *)(v0 + 992);
  id v63 = *(void *)(v61 + 112);
  uint64_t v64 = *(void *)(v61 + 120);
  swift_bridgeObjectRetain();
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v138 = v62;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(1, v63, v64, isUniquelyReferenced_nonNull_native);
  id v66 = v138;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v137 = v66;
  if (!*(void *)(v60 + v59))
  {
    swift_release();
    v81 = Logger.logObject.getter();
    os_log_type_t v82 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v81, v82))
    {
      unint64_t v83 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v83 = 0;
      _os_log_impl(&dword_1B9C64000, v81, v82, "Falling back to Siri X because Flow returned .unhandled(reason: .needsSiriXFallback) and PommesInfo is nil", v83, 2u);
      MEMORY[0x1BA9E48C0](v83, -1, -1);
    }
    v84 = *(void *)(v0 + 984);
    uint64_t v85 = *(void *)(v0 + 976);
    v86 = *(void **)(v0 + 952);
    v128 = *(void *)(v0 + 744);
    uint64_t v132 = *(void *)(v0 + 816);
    uint64_t v87 = *(void *)(v0 + 728);
    id v125 = *(void *)(v0 + 720);
    id v118 = *(void *)(v0 + 616);
    uint64_t v88 = *(void *)(v0 + 384);
    uint64_t v89 = *(void *)(v0 + 368);

    uint64_t v90 = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v89 + 72))(v85, v84, v90, v89);

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined destroy of DecisionEngineResponse(v118, (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
    (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v128, v125);
    outlined destroy of DecisionEngineResponse(v132, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
    swift_bridgeObjectRelease();
    uint64_t v91 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(void **)(v88 + 216) + 208);
    swift_retain();
    swift_retain();
    id v92 = &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)partial apply;
    goto LABEL_43;
  }
  swift_retain_n();
  id v67 = Logger.logObject.getter();
  uint64_t v68 = static os_log_type_t.debug.getter();
  Swift::String v69 = os_log_type_enabled(v67, v68);
  os_log_type_t v70 = *(void *)(v0 + 816);
  id v71 = *(void *)(v0 + 744);
  uint64_t v72 = *(void *)(v0 + 720);
  id v135 = *(void *)(v0 + 616);
  if (v69)
  {
    id v124 = *(void *)(v0 + 816);
    loga = v67;
    uint64_t v73 = *(void *)(v0 + 728);
    os_log_type_t v121 = *(void *)(v0 + 744);
    int64_t v74 = (uint8_t *)swift_slowAlloc();
    id v75 = swift_slowAlloc();
    *(_DWORD *)int64_t v74 = 136315138;
    uint64_t v138 = v75;
    *(void *)(v0 + 112) = 0;
    *(void *)(v0 + 120) = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    strcpy((char *)(v0 + 128), "FlowExtension(");
    *(unsigned char *)(v0 + 143) = -18;
    uint64_t v77 = *(void *)(v40 + 112);
    uint64_t v76 = *(void **)(v40 + 120);
    swift_bridgeObjectRetain();
    v78._uint64_t countAndFlagsBits = v77;
    v78._object = v76;
    String.append(_:)(v78);
    int64_t v79 = v137;
    swift_bridgeObjectRelease();
    v80._uint64_t countAndFlagsBits = 41;
    v80._object = (void *)0xE100000000000000;
    String.append(_:)(v80);
    swift_release();
    *(void *)(v0 + 280) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(void *)(v0 + 128), *(void *)(v0 + 136), &v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B9C64000, loga, v68, "[ConversationService] Falling back to Siri X because Flow returned .unhandled(reason: .needsSiriXFallback) Conversation: %s", v74, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v75, -1, -1);
    MEMORY[0x1BA9E48C0](v74, -1, -1);
    swift_release();

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined destroy of DecisionEngineResponse(v135, (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v121, v72);
    outlined destroy of DecisionEngineResponse(v124, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
  }
  else
  {
    int v93 = *(void *)(v0 + 728);
    swift_release();

    swift_release();
    swift_release_n();
    swift_release();
    swift_release();
    swift_release();
    outlined destroy of DecisionEngineResponse(v135, (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
    (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v71, v72);
    outlined destroy of DecisionEngineResponse(v70, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
    int64_t v79 = v66;
  }
  if (*(void *)(v0 + 1008) == 10)
  {
    swift_release();
    uint64_t v138 = 0;
    v139 = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v94._uint64_t countAndFlagsBits = 0xD000000000000030;
    v94._object = (void *)0x80000001BA066FC0;
    String.append(_:)(v94);
    *(void *)(v0 + 176) = 10;
    v95._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v95);
    swift_bridgeObjectRelease();
    v96._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v96._object = (void *)0x80000001BA067000;
    String.append(_:)(v96);
    v97 = v138;
    v98 = v139;
    swift_bridgeObjectRetain_n();
    uint64_t v99 = Logger.logObject.getter();
    v100 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v99, v100))
    {
      uint64_t v101 = (uint8_t *)swift_slowAlloc();
      int64_t v102 = swift_slowAlloc();
      uint64_t v138 = v102;
      *(_DWORD *)uint64_t v101 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v98, &v138);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v99, v100, "[ConversationService] %s", v101, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v102, -1, -1);
      MEMORY[0x1BA9E48C0](v101, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v103 = *(void *)(v0 + 952);
    uint64_t v104 = *(void *)(v0 + 368);
    unint64_t v105 = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v104 + 32))(v103, v97, v98, v105, v104);
    swift_bridgeObjectRelease();
    swift_release();
    id v106 = *(void **)(v0 + 952);
    v107 = *(void *)(v0 + 384);
    swift_bridgeObjectRelease();

    v108 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(void **)(v107 + 216) + 208);
    swift_retain();
    swift_retain();
    v108(0xD00000000000005BLL, 0x80000001BA066F60, &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)partial apply, v107);
    goto LABEL_16;
  }
  ++*(void *)(v0 + 1008);
  *(void *)(v0 + 1000) = v40;
  *(void *)(v0 + 992) = v79;
  swift_beginAccess();
  specialized Set._Variant.removeAll(keepingCapacity:)(1);
  swift_retain();
  specialized Set._Variant.insert(_:)(&v138, v40);
  swift_endAccess();
  swift_release();
  return MEMORY[0x1F4188298](ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:), v40, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  unint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(unint64_t, unint64_t, void *, uint64_t);
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t ObjectType;
  void *v66;
  uint64_t (*v67)(void);
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v86 = v0;
  uint64_t v1 = *(void *)(v0 + 1184);
  if (!v1)
  {
    swift_release();
    uint64_t v16 = Logger.logObject.getter();
    uint64_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, (os_log_type_t)v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_1B9C64000, v16, (os_log_type_t)v17, "[ConversationService] Conversation wanted to redirect via a PluginAction, but could not find a plugin to handle it. Will fall back to server.", v18, 2u);
      MEMORY[0x1BA9E48C0](v18, -1, -1);
    }
    uint64_t v20 = *(void *)(v0 + 496);
    uint64_t v19 = *(void *)(v0 + 504);
    uint64_t v21 = *(void *)(v0 + 488);
    uint64_t v22 = *(uint64_t **)(v0 + 352);

    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    uint64_t v26 = v22[2];
    uint64_t v25 = v22[3];
    PluginAction.input.getter();
    Input.parse.getter();
    unint64_t v80 = v24;
    os_log_type_t v82 = v23;
    uint64_t v78 = v25;
    int64_t v79 = v26;
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v20 + 88))(v19, v21) == *MEMORY[0x1E4FA1F48])
    {
      uint64_t v27 = (uint64_t *)(v0 + 528);
      uint64_t v28 = *(void *)(v0 + 528);
      uint64_t v29 = (uint64_t *)(v0 + 520);
      unint64_t v30 = *(void *)(v0 + 520);
      unint64_t v31 = (uint64_t *)(v0 + 512);
      unint64_t v33 = *(void *)(v0 + 504);
      uint64_t v32 = *(void *)(v0 + 512);
      (*(void (**)(uint64_t, void))(*(void *)(v0 + 496) + 96))(v33, *(void *)(v0 + 488));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v28, v33, v32);
      USOParse.userParse.getter();
      uint64_t v34 = 0;
    }
    else
    {
      uint64_t v27 = (uint64_t *)(v0 + 504);
      uint64_t v29 = (uint64_t *)(v0 + 496);
      unint64_t v31 = (uint64_t *)(v0 + 488);
      uint64_t v34 = 1;
    }
    uint64_t v46 = *v27;
    uint64_t v47 = *v31;
    int64_t v48 = *v29;
    id v75 = *(void (**)(uint64_t, uint64_t))(v0 + 1160);
    Swift::String v69 = *(void *)(v0 + 976);
    os_log_type_t v70 = *(void *)(v0 + 984);
    id v71 = *(void **)(v0 + 952);
    int64_t v74 = *(void *)(v0 + 816);
    int v49 = *(void *)(v0 + 696);
    uint64_t v50 = *(void *)(v0 + 688);
    uint64_t v72 = *(void *)(v0 + 560);
    uint64_t v73 = *(void *)(v0 + 584);
    uint64_t v51 = *(void *)(v0 + 552);
    uint64_t v52 = *(void *)(v0 + 544);
    uint64_t v53 = *(void *)(v0 + 536);
    uint64_t v54 = *(void *)(v0 + 384);
    uint64_t v56 = *(void *)(v0 + 360);
    uint64_t v55 = *(void *)(v0 + 368);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v46, v47);
    id v57 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v49, v34, 1, v57);
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v53);
    Class v58 = *MEMORY[0x1E4FA25F0];
    id v59 = type metadata accessor for ServerFallbackReason();
    uint64_t v60 = *(void *)(v59 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 104))(v50, v58, v59);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v60 + 56))(v50, 0, 1, v59);
    ConversationService.maybeDoServerFallback(bridge:forResultCandidateId:executionRequestId:rootRequestId:isDomainDirected:topNlParse:serverFallbackReason:)(v56, v55, v69, v70, v82, v80, v79, v78, 0, v49, v50);

    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v50, &demangling cache variable for type metadata for ServerFallbackReason?);
    outlined destroy of ReferenceResolutionClientProtocol?(v49, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    v75(v73, v72);
    outlined destroy of DecisionEngineResponse(v74, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
    swift_bridgeObjectRelease();
    id v61 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(void **)(v54 + 216) + 208);
    swift_retain();
    swift_retain();
    uint64_t v62 = &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)partial apply;
    goto LABEL_19;
  }
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  uint64_t v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v0 + 1160);
  uint64_t v6 = *(void *)(v0 + 816);
  uint64_t v7 = *(void *)(v0 + 584);
  uint64_t v8 = *(void *)(v0 + 560);
  if (v4)
  {
    v81 = *(void *)(v0 + 816);
    uint64_t v77 = *(void *)(v0 + 560);
    uint64_t v76 = *(void *)(v0 + 584);
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    v84 = v10;
    *(void *)(v0 + 144) = 0;
    *(void *)(v0 + 152) = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    strcpy((char *)(v0 + 160), "FlowExtension(");
    *(unsigned char *)(v0 + 175) = -18;
    uint64_t v11 = *(void *)(v1 + 112);
    uint64_t v12 = *(void **)(v1 + 120);
    swift_bridgeObjectRetain();
    v13._uint64_t countAndFlagsBits = v11;
    v13._object = v12;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._uint64_t countAndFlagsBits = 41;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    swift_release();
    *(void *)(v0 + 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(void *)(v0 + 160), *(void *)(v0 + 168), &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B9C64000, v2, v3, "[ConversationService] Discovered a Conversation which can handle the redirected PluginAction: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v10, -1, -1);
    MEMORY[0x1BA9E48C0](v9, -1, -1);

    swift_release();
    v5(v76, v77);
    uint64_t v15 = v81;
  }
  else
  {

    swift_release_n();
    swift_release();
    v5(v7, v8);
    uint64_t v15 = v6;
  }
  outlined destroy of DecisionEngineResponse(v15, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
  int64_t v35 = *(void *)(v0 + 1168);
  if (*(void *)(v0 + 1008) == 10)
  {
    swift_release();
    v84 = 0;
    uint64_t v85 = 0xE000000000000000;
    _StringGuts.grow(_:)(77);
    v36._uint64_t countAndFlagsBits = 0xD000000000000030;
    v36._object = (void *)0x80000001BA066FC0;
    String.append(_:)(v36);
    *(void *)(v0 + 176) = 10;
    v37._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    v38._object = (void *)0x80000001BA067000;
    String.append(_:)(v38);
    uint64_t v40 = v84;
    uint64_t v39 = v85;
    swift_bridgeObjectRetain_n();
    uint64_t v41 = Logger.logObject.getter();
    uint64_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      unint64_t v83 = v40;
      v84 = swift_slowAlloc();
      unint64_t v44 = v84;
      *(_DWORD *)uint64_t v43 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v39, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v41, v42, "[ConversationService] %s", v43, 0xCu);
      swift_arrayDestroy();
      uint64_t v45 = v44;
      uint64_t v40 = v83;
      MEMORY[0x1BA9E48C0](v45, -1, -1);
      MEMORY[0x1BA9E48C0](v43, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    id v63 = *(void *)(v0 + 952);
    uint64_t v64 = *(void *)(v0 + 368);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v64 + 32))(v63, v40, v39, ObjectType, v64);
    swift_bridgeObjectRelease();
    swift_release();
    id v66 = *(void **)(v0 + 952);
    uint64_t v54 = *(void *)(v0 + 384);
    swift_bridgeObjectRelease();

    id v61 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(void **)(v54 + 216) + 208);
    swift_retain();
    swift_retain();
    uint64_t v62 = &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)partial apply;
LABEL_19:
    v61(0xD00000000000005BLL, 0x80000001BA066F60, v62, v54);
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v67 = *(uint64_t (**)(void))(v0 + 8);
    return v67();
  }
  ++*(void *)(v0 + 1008);
  *(void *)(v0 + 1000) = v1;
  *(void *)(v0 + 992) = v35;
  swift_beginAccess();
  specialized Set._Variant.removeAll(keepingCapacity:)(1);
  swift_retain();
  specialized Set._Variant.insert(_:)(&v84, v1);
  swift_endAccess();
  swift_release();
  return MEMORY[0x1F4188298](ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 872);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:), v1, 0);
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  objc_class *v17;
  uint64_t v18;
  void *v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;

  uint64_t v19 = *(void **)(v0 + 1200);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v0 + 960);
  uint64_t v17 = *(objc_class **)(v0 + 944);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 928);
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 912);
  uint64_t v2 = *(unsigned int *)(v0 + 1240);
  uint64_t v3 = *(void *)(v0 + 864);
  uint64_t v4 = *(void *)(v0 + 856);
  uint64_t v5 = *(void *)(v0 + 848);
  uint64_t v6 = *(void *)(v0 + 840);
  uint64_t v7 = *(void *)(v0 + 824);
  uint64_t v8 = *(uint64_t **)(v0 + 352);
  uint64_t v9 = v8[1];
  uint64_t v18 = *v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0 + 896))(v3, 1, 1, *(void *)(v0 + 888));
  v1(v5, v2, v7);
  v16(v6, v5, v7);
  outlined init with copy of ReferenceResolutionClientProtocol?(v3, v4, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  uint64_t v10 = objc_allocWithZone(v17);
  uint64_t v11 = v19;
  swift_bridgeObjectRetain();
  uint64_t v12 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)(0, v19, 0, 0, 0, 0, 0, 0, 0, 0, v18, v9, v6, v4);
  *(void *)(v0 + 1216) = v12;

  outlined destroy of ReferenceResolutionClientProtocol?(v3, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  v20(v5, v7);

  uint64_t v13 = v12;
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 1224) = v14;
  *uint64_t v14 = v0;
  v14[1] = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:);
  return RemoteConversationClient.isEmpty()();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  void *v4;
  char v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void (*v11)(unint64_t, unint64_t, void *, uint64_t);
  uint64_t (*v12)(void);
  uint64_t v13;

  if (*(unsigned char *)(v0 + 1262) == 1)
  {
    uint64_t v1 = Logger.logObject.getter();
    uint64_t v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl(&dword_1B9C64000, v1, v2, "[ConversationService] Conversation complete, removing from active conversations", v3, 2u);
      MEMORY[0x1BA9E48C0](v3, -1, -1);
    }

    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 1232) = v4;
    void *v4 = v0;
    v4[1] = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:);
    return RemoteConversationClient.isCorrectable()();
  }
  else
  {
    if ((*(void *)(*(void *)(v0 + 384) + 104) & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.count.getter();
      swift_bridgeObjectRelease();
      uint64_t v6 = *(unsigned char *)(v0 + 1262) ^ 1;
    }
    else
    {
      uint64_t v6 = 1;
    }
    uint64_t v7 = *(void **)(v0 + 1216);
    uint64_t v8 = *(void *)(v0 + 816);
    (*(void (**)(void *, void, void))(*(void *)(v0 + 368) + 16))(v7, v6 & 1, *(void *)(v0 + 1088));
    swift_release();

    outlined destroy of DecisionEngineResponse(v8, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
    swift_release();
    uint64_t v9 = *(void **)(v0 + 952);
    uint64_t v10 = *(void *)(v0 + 384);
    swift_bridgeObjectRelease();

    uint64_t v11 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(void **)(v10 + 216) + 208);
    swift_retain();
    swift_retain();
    v11(0xD00000000000005BLL, 0x80000001BA066F60, &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)partial apply, v10);
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
}

{
  uint64_t v0;
  unsigned char *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void (*v16)(unint64_t, unint64_t, void *, uint64_t);
  uint64_t (*v17)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v1 = (unsigned char *)(v0 + 1262);
  if (*(unsigned char *)(v0 + 1263) == 1)
  {
    uint64_t v2 = Logger.logObject.getter();
    uint64_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1B9C64000, v2, v3, "[ConversationService] Conversation is correctable. Setting up Siri Corrections signals", v4, 2u);
      MEMORY[0x1BA9E48C0](v4, -1, -1);
    }
    uint64_t v5 = *(void *)(v0 + 344);

    static CorrectionsContext.builder.getter();
    if (*(void *)(v5
                   + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForRecognizedUser))
      swift_bridgeObjectRetain();
    uint64_t v22 = *(void *)(v0 + 1000);
    uint64_t v6 = *(void *)(v0 + 432);
    uint64_t v8 = *(void *)(v0 + 416);
    uint64_t v7 = *(void *)(v0 + 424);
    uint64_t v9 = *(void *)(v0 + 408);
    uint64_t v21 = *(void *)(v0 + 400);
    uint64_t v10 = *(void *)(v0 + 392);
    uint64_t v19 = *(void *)(v0 + 440);
    uint64_t v20 = *(void *)(v0 + 384);
    dispatch thunk of CorrectionsContext.Builder.userId(_:)();
    swift_release();
    swift_bridgeObjectRelease();
    dispatch thunk of CorrectionsContext.Builder.executionRequestId(_:)();
    swift_release();
    type metadata accessor for RemoteConversationTurnData(0);
    swift_bridgeObjectRetain();
    dispatch thunk of CorrectionsContext.Builder.assistantId(_:)();
    swift_bridgeObjectRelease();
    swift_release();
    dispatch thunk of CorrectionsContext.Builder.resultCandidateId(_:)();
    swift_release();
    dispatch thunk of CorrectionsContext.Builder.build()();
    swift_release();
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    CorrectionsDirectInvocation.init(identifier:userData:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v10, v19, v7);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, v7);
    dispatch thunk of CorrectionsPlatformClient.setUndoInvocation(directInvocation:context:)();
    outlined destroy of ReferenceResolutionClientProtocol?(v10, &demangling cache variable for type metadata for CorrectionsContext?);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v21);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v19, v7);
    *(void *)(v20 + 280) = v22;
    swift_retain();
    swift_release();
    uint64_t v1 = (unsigned char *)(v0 + 1262);
  }
  uint64_t v11 = *(void *)(v0 + 1000);
  swift_beginAccess();
  specialized Set._Variant.remove(_:)(v11);
  swift_endAccess();
  swift_release();
  if ((*(void *)(*(void *)(v0 + 384) + 104) & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = *(void **)(v0 + 1216);
  uint64_t v13 = *(void *)(v0 + 816);
  (*(void (**)(void *, BOOL, void))(*(void *)(v0 + 368) + 16))(v12, (*v1 & 1) == 0, *(void *)(v0 + 1088));
  swift_release();

  outlined destroy of DecisionEngineResponse(v13, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
  swift_release();
  uint64_t v14 = *(void **)(v0 + 952);
  uint64_t v15 = *(void *)(v0 + 384);
  swift_bridgeObjectRelease();

  uint64_t v16 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(void **)(v15 + 216) + 208);
  swift_retain();
  swift_retain();
  v16(0xD00000000000005BLL, 0x80000001BA066F60, &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)partial apply, v15);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(unint64_t, unint64_t, void *, uint64_t);
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 728);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v2 = *(void *)(v0 + 816);
  uint64_t v3 = *(void *)(v0 + 384);
  (*(void (**)(void, void))(v1 + 8))(*(void *)(v0 + 744), *(void *)(v0 + 720));
  outlined destroy of DecisionEngineResponse(v2, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(void **)(v3 + 216) + 208);
  swift_retain();
  swift_retain();
  v4(0xD00000000000005BLL, 0x80000001BA066F60, &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)partial apply, v3);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(unint64_t, unint64_t, void *, uint64_t);
  uint64_t (*v4)(void);
  uint64_t v6;

  swift_release();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 816);
  uint64_t v2 = *(void *)(v0 + 384);
  (*(void (**)(void))(v0 + 1160))();
  outlined destroy of DecisionEngineResponse(v1, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(**(void **)(v2 + 216) + 208);
  swift_retain();
  swift_retain();
  v3(0xD00000000000005BLL, 0x80000001BA066F60, &closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)partial apply, v2);
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 1184) = a1;
  *(void *)(v4 + 1192) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 872);
  if (v1) {
    uint64_t v6 = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:);
  }
  else {
    uint64_t v6 = ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:);
  }
  return MEMORY[0x1F4188298](v6, v5, 0);
}

uint64_t ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 872);
  *(unsigned char *)(*(void *)v1 + 1262) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:), v2, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v2 = *(void *)(*(void *)v1 + 872);
  *(unsigned char *)(*(void *)v1 + 1263) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:), v2, 0);
}

uint64_t ConversationService.bridge(didReceiveStartExecutionTurn:from:)(uint64_t a1)
{
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized ConversationService.bridge(didReceiveStartExecutionTurn:from:)
                                       + async function pointer to specialized ConversationService.bridge(didReceiveStartExecutionTurn:from:));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v5(a1);
}

uint64_t ConversationService.State.isNewSession.getter(char a1, unsigned __int8 a2)
{
  unsigned int v2 = a2 & 1;
  if (a2 >> 6 != 1) {
    unsigned int v2 = 0;
  }
  if (a2 >> 6) {
    return v2;
  }
  else {
    return a1 & 1;
  }
}

uint64_t closure #1 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 96) = a1;
  *(void *)(v4 + 104) = a4;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:), a4, 0);
}

uint64_t closure #1 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:)()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[13];
  uint64_t v2 = type metadata accessor for Logger();
  v0[14] = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v3 = v1 + 16;
  uint64_t v4 = v1[19];
  uint64_t v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  uint64_t v9 = (uint64_t (*)(void *, void *, void, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 16)
                                                                                   + **(int **)(v5 + 16));
  uint64_t v6 = (void *)swift_task_alloc();
  v0[15] = v6;
  *uint64_t v6 = v0;
  v6[1] = closure #1 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:);
  uint64_t v7 = MEMORY[0x1E4FBC848] + 8;
  return v9(v0 + 23, &async function pointer to closure #1 in RemoteConversationClient.ensureReady(), 0, v7, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 104);
  if (v0) {
    uint64_t v4 = closure #1 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:);
  }
  else {
    uint64_t v4 = closure #1 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v8)(uint64_t, void *, void, uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  uint64_t v1 = *(void **)(v0 + 104);
  uint64_t v2 = v1 + 16;
  Logger.debugF(file:function:)();
  uint64_t v3 = v1[19];
  uint64_t v4 = v1[20];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  uint64_t v8 = (uint64_t (*)(uint64_t, void *, void, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 16)
                                                                                  + **(int **)(v4 + 16));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #1 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:);
  uint64_t v6 = MEMORY[0x1E4FBC848] + 8;
  return v8(v0 + 185, &async function pointer to closure #1 in RemoteConversationClient.reset(), 0, v6, v3, v4);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 104);
  if (v0)
  {

    uint64_t v4 = closure #1 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:);
  }
  else
  {
    uint64_t v4 = closure #1 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  outlined init with copy of ReferenceResolutionClientProtocol(v0[13] + 128, (uint64_t)(v0 + 2));
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  v0[18] = v1;
  v0[19] = v2;
  v0[20] = __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  v0[21] = *(void *)(v2 + 24);
  v0[22] = (v2 + 24) & 0xFFFFFFFFFFFFLL | 0xEB38000000000000;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v3 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:), v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 104);
  (*(void (**)(void, void))(v0 + 168))(*(void *)(v0 + 144), *(void *)(v0 + 152));
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:), 0, 0);
}

{
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:), 0, 0);
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  uint64_t v16 = v0;
  uint64_t v1 = (void *)v0[16];
  uint64_t v2 = v1;
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (void *)v0[16];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v15 = v8;
    v0[10] = v6;
    uint64_t v9 = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v10 = String.init<A>(describing:)();
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v4, v5, "Error ensuring active conversation is ready (will reset the remote conversation state, and reconnect): %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }
  else
  {
    uint64_t v12 = (void *)v0[16];
  }
  uint64_t v13 = v0[13];
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:), v13, 0);
}

uint64_t closure #2 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 96) = a1;
  *(void *)(v4 + 104) = a4;
  return MEMORY[0x1F4188298](closure #2 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:), a4, 0);
}

uint64_t closure #2 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:)()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[13];
  uint64_t v2 = type metadata accessor for Logger();
  v0[14] = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v3 = v1 + 16;
  uint64_t v4 = v1[19];
  uint64_t v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  uint64_t v9 = (uint64_t (*)(void *, void *, void, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 16)
                                                                                   + **(int **)(v5 + 16));
  uint64_t v6 = (void *)swift_task_alloc();
  v0[15] = v6;
  *uint64_t v6 = v0;
  v6[1] = closure #2 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:);
  uint64_t v7 = MEMORY[0x1E4FBC848] + 8;
  return v9(v0 + 23, &async function pointer to closure #1 in RemoteConversationClient.ensureReady(), 0, v7, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 104);
  if (v0) {
    uint64_t v4 = closure #2 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:);
  }
  else {
    uint64_t v4 = closure #2 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  return MEMORY[0x1F4188298](closure #2 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:), 0, 0);
}

{
  uint64_t v0;

  **(void **)(v0 + 96) = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v8)(uint64_t, void *, void, uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  uint64_t v1 = *(void **)(v0 + 104);
  uint64_t v2 = v1 + 16;
  Logger.debugF(file:function:)();
  uint64_t v3 = v1[19];
  uint64_t v4 = v1[20];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  uint64_t v8 = (uint64_t (*)(uint64_t, void *, void, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 16)
                                                                                  + **(int **)(v4 + 16));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #2 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:);
  uint64_t v6 = MEMORY[0x1E4FBC848] + 8;
  return v8(v0 + 185, &async function pointer to closure #1 in RemoteConversationClient.reset(), 0, v6, v3, v4);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 104);
  if (v0)
  {

    uint64_t v4 = closure #2 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:);
  }
  else
  {
    uint64_t v4 = closure #2 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  outlined init with copy of ReferenceResolutionClientProtocol(v0[13] + 128, (uint64_t)(v0 + 2));
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  v0[18] = v1;
  v0[19] = v2;
  v0[20] = __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  v0[21] = *(void *)(v2 + 24);
  v0[22] = (v2 + 24) & 0xFFFFFFFFFFFFLL | 0xEB38000000000000;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v3 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #2 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:), v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 104);
  (*(void (**)(void, void))(v0 + 168))(*(void *)(v0 + 144), *(void *)(v0 + 152));
  return MEMORY[0x1F4188298](closure #2 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  return MEMORY[0x1F4188298](closure #2 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v4)(void);
  uint64_t v5;

  uint64_t v1 = *(void **)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 104);

  *uint64_t v1 = v2;
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  swift_retain();
  return v4();
}

{
  return MEMORY[0x1F4188298](closure #2 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:), 0, 0);
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  void *v16;
  uint64_t v17;

  uint64_t v16 = v0;
  uint64_t v1 = (void *)v0[16];
  uint64_t v2 = v1;
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (void *)v0[16];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v15 = v8;
    v0[10] = v6;
    uint64_t v9 = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v10 = String.init<A>(describing:)();
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v4, v5, "Error ensuring previous completed conversation is ready (will reset the remote conversation state, and reconnect): %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }
  else
  {
    uint64_t v12 = (void *)v0[16];
  }
  uint64_t v13 = v0[13];
  return MEMORY[0x1F4188298](closure #2 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:), v13, 0);
}

uint64_t ConversationService.State.assertTurnStarted(function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result = specialized ConversationService.State.assertTurnStarted(function:)(a1, a2, a3, a4, a5);
  if (!v5) {
    return swift_retain();
  }
  return result;
}

uint64_t closure #1 in ConversationService.bridge(didReceiveInput:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[27] = a7;
  v8[28] = a8;
  v8[25] = a5;
  v8[26] = a6;
  v8[23] = a1;
  v8[24] = a4;
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_Parser();
  v8[29] = v9;
  v8[30] = *(void *)(v9 - 8);
  v8[31] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  v8[32] = swift_task_alloc();
  type metadata accessor for InputContinuationState();
  v8[33] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Parse();
  v8[34] = v10;
  v8[35] = *(void *)(v10 - 8);
  v8[36] = swift_task_alloc();
  v8[37] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Siri_Nlu_External_UserParse();
  v8[38] = v11;
  v8[39] = *(void *)(v11 - 8);
  v8[40] = swift_task_alloc();
  v8[41] = swift_task_alloc();
  v8[42] = swift_task_alloc();
  v8[43] = swift_task_alloc();
  v8[44] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v8[45] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Input();
  v8[46] = v12;
  v8[47] = *(void *)(v12 - 8);
  v8[48] = swift_task_alloc();
  v8[49] = swift_task_alloc();
  v8[50] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DecisionEngineResponse?);
  v8[51] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for DecisionEngineResponse();
  v8[52] = v13;
  v8[53] = *(void *)(v13 - 8);
  v8[54] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  v8[55] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  v8[56] = swift_task_alloc();
  v8[57] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for ServerFallbackReason();
  v8[58] = v14;
  v8[59] = *(void *)(v14 - 8);
  v8[60] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v15 = static MessageBusActor.shared;
  v8[61] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](closure #1 in ConversationService.bridge(didReceiveInput:from:), v15, 0);
}

uint64_t closure #1 in ConversationService.bridge(didReceiveInput:from:)()
{
  uint64_t v1 = *(void *)(v0 + 464);
  uint64_t v2 = *(void *)(v0 + 472);
  uint64_t v3 = *(void *)(v0 + 456);
  uint64_t v4 = *(void *)(*(void *)(v0 + 192) + 56);
  *(void *)(v0 + 496) = v4;
  outlined init with copy of ReferenceResolutionClientProtocol?(v4 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_serverFallbackReason, v3, &demangling cache variable for type metadata for ServerFallbackReason?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v5 = *(void *)(v0 + 200);
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 456), &demangling cache variable for type metadata for ServerFallbackReason?);
    swift_beginAccess();
    uint64_t v7 = *(void *)(v5 + 104);
    if ((v7 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = __CocoaSet.count.getter();
      swift_bridgeObjectRelease();
      if (v8)
      {
LABEL_4:
        uint64_t v9 = static MessageBusActor.shared;
        *(void *)(v0 + 504) = static MessageBusActor.shared;
        uint64_t v10 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v6, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
        uint64_t v11 = (int8x16_t *)swift_task_alloc();
        *(void *)(v0 + 512) = v11;
        v11[1] = vextq_s8(*(int8x16_t *)(v0 + 192), *(int8x16_t *)(v0 + 192), 8uLL);
        swift_retain();
        uint64_t v12 = (void *)swift_task_alloc();
        *(void *)(v0 + 520) = v12;
        *uint64_t v12 = v0;
        v12[1] = closure #1 in ConversationService.bridge(didReceiveInput:from:);
        uint64_t v13 = MEMORY[0x1E4FBB390];
        uint64_t v14 = MEMORY[0x1E4FBB390];
        uint64_t v15 = MEMORY[0x1E4FBB390];
        return MEMORY[0x1F4187F28](v0 + 612, v13, v14, v9, v10, &async function pointer to partial apply for closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:), v11, v15);
      }
    }
    else if (*(void *)(v7 + 16))
    {
      goto LABEL_4;
    }
    int64_t v48 = (void *)(*(void *)(v0 + 200) + 280);
    swift_beginAccess();
    if (!*v48)
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v58 = type metadata accessor for Logger();
      *(void *)(v0 + 528) = __swift_project_value_buffer(v58, (uint64_t)static Logger.executor);
      id v59 = Logger.logObject.getter();
      os_log_type_t v60 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v59, v60))
      {
        id v61 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v61 = 0;
        _os_log_impl(&dword_1B9C64000, v59, v60, "[ConversationService] Eagerly executing...", v61, 2u);
        MEMORY[0x1BA9E48C0](v61, -1, -1);
      }

      swift_retain();
      uint64_t v62 = Logger.logObject.getter();
      os_log_type_t v63 = static os_log_type_t.debug.getter();
      BOOL v64 = os_log_type_enabled(v62, v63);
      uint64_t v65 = *(void *)(v0 + 192);
      if (v64)
      {
        id v66 = (uint8_t *)swift_slowAlloc();
        uint64_t v67 = swift_slowAlloc();
        uint64_t v108 = v67;
        *(_DWORD *)id v66 = 136315138;
        uint64_t v68 = *(void *)(v65 + 16);
        unint64_t v69 = *(void *)(v65 + 24);
        swift_bridgeObjectRetain();
        *(void *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, &v108);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release();
        _os_log_impl(&dword_1B9C64000, v62, v63, "[ConversationService] calling decision engine for rcId: %s", v66, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v67, -1, -1);
        MEMORY[0x1BA9E48C0](v66, -1, -1);
      }
      else
      {
        swift_release();
      }

      v86 = *(void **)(v0 + 200);
      uint64_t v87 = v86[6];
      __swift_project_boxed_opaque_existential_1(v86 + 2, v86[5]);
      *(void *)(v0 + 536) = v86[13];
      *(void *)(v0 + 544) = *v48;
      uint64_t v103 = *(void *)(v87 + 8) + **(int **)(v87 + 8);
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v88 = (void *)swift_task_alloc();
      *(void *)(v0 + 552) = v88;
      *uint64_t v88 = v0;
      v88[1] = closure #1 in ConversationService.bridge(didReceiveInput:from:);
      __asm { BRAA            X9, X16 }
    }
    swift_release();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v49 = type metadata accessor for Logger();
    __swift_project_value_buffer(v49, (uint64_t)static Logger.executor);
    swift_retain_n();
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.debug.getter();
    BOOL v52 = os_log_type_enabled(v50, v51);
    uint64_t v53 = *(void *)(v0 + 192);
    if (v52)
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      uint64_t v55 = swift_slowAlloc();
      uint64_t v108 = v55;
      *(_DWORD *)uint64_t v54 = 136315138;
      *(void *)(v0 + 160) = v53;
      type metadata accessor for ConversationUserInput(0);
      swift_retain();
      uint64_t v56 = String.init<A>(describing:)();
      *(void *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v50, v51, "[ConversationService] Skipping eager for %s", v54, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v55, -1, -1);
      MEMORY[0x1BA9E48C0](v54, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    uint64_t v70 = *(void *)(*(void *)(v0 + 496) + 16);
    if (*(void *)(v70 + 16))
    {
      uint64_t v71 = *(void *)(v0 + 312);
      v100 = *(void (**)(uint64_t, unint64_t, uint64_t))(v71 + 16);
      v100(*(void *)(v0 + 320), v70 + ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80)), *(void *)(v0 + 304));
      uint64_t v72 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v72, v73))
      {
        int64_t v74 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int64_t v74 = 0;
        _os_log_impl(&dword_1B9C64000, v72, v73, "[ConversationService] Storing first parse from ConversationUserInput for execution overrides check", v74, 2u);
        MEMORY[0x1BA9E48C0](v74, -1, -1);
      }
      uint64_t v98 = *(void *)(v0 + 384);
      uint64_t v101 = *(void *)(v0 + 376);
      uint64_t v102 = *(void *)(v0 + 368);
      uint64_t v75 = *(void *)(v0 + 344);
      uint64_t v76 = v72;
      unint64_t v77 = *(void *)(v0 + 320);
      uint64_t v106 = *(void *)(v0 + 312);
      uint64_t v78 = *(void *)(v0 + 304);
      uint64_t v79 = *(void *)(v0 + 280);
      uint64_t v80 = *(void *)(v0 + 248);
      uint64_t v81 = *(void *)(v0 + 256);
      uint64_t v82 = *(void *)(v0 + 240);
      uint64_t v90 = *(void *)(v0 + 232);
      uint64_t v91 = *(void *)(v0 + 296);
      uint64_t v93 = *(void *)(v0 + 272);
      uint64_t v94 = *(void *)(v0 + 208);
      uint64_t v83 = *(void *)(v0 + 192);

      uint64_t v92 = *(void *)(v83 + 16);
      uint64_t v96 = *(void *)(v83 + 24);
      v100(v75, v77, v78);
      Siri_Nlu_External_UserParse.parser.getter();
      Siri_Nlu_External_Parser.parserID.getter();
      (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v80, v90);
      uint64_t v84 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56))(v81, 0, 1, v84);
      USOParse.init(userParse:parserIdentifier:appBundleId:)();
      (*(void (**)(uint64_t, void, uint64_t))(v79 + 104))(v91, *MEMORY[0x1E4FA1F48], v93);
      Input.init(parse:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v94 + 352))(v92, v96, v98);
      (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v98, v102);
      (*(void (**)(unint64_t, uint64_t))(v106 + 8))(v77, v78);
    }
    **(void **)(v0 + 184) = *(void *)(v0 + 192);
    type metadata accessor for ConversationService.EagerResult(0);
    swift_storeEnumTagMultiPayload();
    type metadata accessor for ConversationSELFHelper();
    swift_retain();
    static ConversationSELFHelper.shared.getter();
  }
  else
  {
    uint64_t v16 = *(void *)(v0 + 480);
    uint64_t v17 = *(void *)(v0 + 464);
    uint64_t v18 = *(void **)(v0 + 472);
    uint64_t v19 = *(void *)(v0 + 448);
    uint64_t v20 = *(void *)(v0 + 456);
    uint64_t v21 = *(void *)(v0 + 440);
    uint64_t v22 = *(void *)(v0 + 304);
    uint64_t v23 = *(void *)(v0 + 312);
    uint64_t v24 = *(void **)(v0 + 200);
    uint64_t v104 = *(void *)(v0 + 208);
    swift_release();
    v97 = (void (*)(uint64_t, uint64_t, uint64_t))v18[4];
    v97(v16, v20, v17);
    uint64_t v25 = v24 + 29;
    uint64_t v26 = v24[32];
    uint64_t v27 = v24[33];
    __swift_project_boxed_opaque_existential_1(v25, v26);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v21, 1, 1, v22);
    v95 = (void (*)(uint64_t, uint64_t, uint64_t))v18[2];
    v95(v19, v16, v17);
    uint64_t v28 = (void (*)(uint64_t, void, uint64_t, uint64_t))v18[7];
    v28(v19, 0, 1, v17);
    LOBYTE(v16) = (*(uint64_t (**)(void, uint64_t, uint64_t, void, void, uint64_t, uint64_t))(v27 + 8))(0, v21, v19, *(void *)(v104 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData), *(void *)(v104 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData + 8), v26, v27);
    outlined destroy of ReferenceResolutionClientProtocol?(v19, &demangling cache variable for type metadata for ServerFallbackReason?);
    outlined destroy of ReferenceResolutionClientProtocol?(v21, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    if (v16)
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v29 = type metadata accessor for Logger();
      __swift_project_value_buffer(v29, (uint64_t)static Logger.executor);
      unint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v32 = 0;
        _os_log_impl(&dword_1B9C64000, v30, v31, "[ConversationService] Receiving serverFallbackReason from NLResponse for eager task but shouldDisableServerFallback returns true, we will generate fatal response for request", v32, 2u);
        MEMORY[0x1BA9E48C0](v32, -1, -1);
      }
      uint64_t v33 = *(void *)(v0 + 480);
      uint64_t v34 = *(void *)(v0 + 464);
      uint64_t v35 = *(void *)(v0 + 184);

      v97(v35, v33, v34);
      type metadata accessor for ConversationService.EagerResult(0);
      swift_storeEnumTagMultiPayload();
      type metadata accessor for ConversationSELFHelper();
      static ConversationSELFHelper.shared.getter();
    }
    else
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      unint64_t v105 = v28;
      uint64_t v36 = type metadata accessor for Logger();
      __swift_project_value_buffer(v36, (uint64_t)static Logger.executor);
      int64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v39 = 0;
        _os_log_impl(&dword_1B9C64000, v37, v38, "[ConversationService] Receiving serverFallbackReason from NLResponse for eager task and shouldDisableServerFallback returns false, will fall back to server if this RC is selected.", v39, 2u);
        MEMORY[0x1BA9E48C0](v39, -1, -1);
      }
      uint64_t v40 = *(void *)(v0 + 472);
      uint64_t v41 = *(void *)(v0 + 480);
      uint64_t v42 = *(void *)(v0 + 464);
      uint64_t v43 = *(void *)(v0 + 448);
      uint64_t v44 = *(void *)(v0 + 224);
      uint64_t v45 = *(void *)(v0 + 192);

      uint64_t ObjectType = swift_getObjectType();
      uint64_t v46 = *(void *)(v45 + 16);
      uint64_t v47 = *(void *)(v45 + 24);
      v95(v43, v41, v42);
      v105(v43, 0, 1, v42);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 48))(v46, v47, v43, ObjectType, v44);
      outlined destroy of ReferenceResolutionClientProtocol?(v43, &demangling cache variable for type metadata for ServerFallbackReason?);
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v41, v42);
      type metadata accessor for ConversationService.EagerResult(0);
      swift_storeEnumTagMultiPayload();
      type metadata accessor for ConversationSELFHelper();
      static ConversationSELFHelper.shared.getter();
    }
  }
  dispatch thunk of ConversationSELFHelper.emitExecutionPrepareTimeEnd(rcId:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v85 = *(uint64_t (**)(void))(v0 + 8);
  return v85();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 488);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in ConversationService.bridge(didReceiveInput:from:), v1, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  NSObject *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  NSObject *v32;
  os_log_type_t v33;
  BOOL v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, unint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  if (*(unsigned char *)(v0 + 612) == 1)
  {
    uint64_t v1 = (void *)(*(void *)(v0 + 200) + 280);
    swift_beginAccess();
    if (!*v1)
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      *(void *)(v0 + 528) = __swift_project_value_buffer(v28, (uint64_t)static Logger.executor);
      uint64_t v29 = Logger.logObject.getter();
      unint64_t v30 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v29, v30))
      {
        os_log_type_t v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v31 = 0;
        _os_log_impl(&dword_1B9C64000, v29, v30, "[ConversationService] Eagerly executing...", v31, 2u);
        MEMORY[0x1BA9E48C0](v31, -1, -1);
      }

      swift_retain();
      uint64_t v32 = Logger.logObject.getter();
      uint64_t v33 = static os_log_type_t.debug.getter();
      uint64_t v34 = os_log_type_enabled(v32, v33);
      uint64_t v35 = *(void *)(v0 + 192);
      if (v34)
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        int64_t v37 = swift_slowAlloc();
        uint64_t v56 = v37;
        *(_DWORD *)uint64_t v36 = 136315138;
        os_log_type_t v38 = *(void *)(v35 + 16);
        uint64_t v39 = *(void *)(v35 + 24);
        swift_bridgeObjectRetain();
        *(void *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release();
        _os_log_impl(&dword_1B9C64000, v32, v33, "[ConversationService] calling decision engine for rcId: %s", v36, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v37, -1, -1);
        MEMORY[0x1BA9E48C0](v36, -1, -1);
      }
      else
      {
        swift_release();
      }

      uint64_t v40 = *(void **)(v0 + 200);
      uint64_t v41 = v40[6];
      __swift_project_boxed_opaque_existential_1(v40 + 2, v40[5]);
      *(void *)(v0 + 536) = v40[13];
      *(void *)(v0 + 544) = *v1;
      uint64_t v53 = *(void *)(v41 + 8) + **(int **)(v41 + 8);
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v42 = (void *)swift_task_alloc();
      *(void *)(v0 + 552) = v42;
      uint8_t *v42 = v0;
      v42[1] = closure #1 in ConversationService.bridge(didReceiveInput:from:);
      __asm { BRAA            X9, X16 }
    }
  }
  swift_release();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.debug.getter();
  uint64_t v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void *)(v0 + 192);
  if (v5)
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v56 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    *(void *)(v0 + 160) = v6;
    type metadata accessor for ConversationUserInput(0);
    swift_retain();
    uint64_t v9 = String.init<A>(describing:)();
    *(void *)(v0 + 136) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B9C64000, v3, v4, "[ConversationService] Skipping eager for %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v11 = *(void *)(*(void *)(v0 + 496) + 16);
  if (*(void *)(v11 + 16))
  {
    uint64_t v12 = *(void *)(v0 + 312);
    uint64_t v50 = *(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 16);
    v50(*(void *)(v0 + 320), v11 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)), *(void *)(v0 + 304));
    uint64_t v13 = Logger.logObject.getter();
    uint64_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_1B9C64000, v13, v14, "[ConversationService] Storing first parse from ConversationUserInput for execution overrides check", v15, 2u);
      MEMORY[0x1BA9E48C0](v15, -1, -1);
    }
    uint64_t v49 = *(void *)(v0 + 384);
    os_log_type_t v51 = *(void *)(v0 + 376);
    BOOL v52 = *(void *)(v0 + 368);
    uint64_t v16 = *(void *)(v0 + 344);
    uint64_t v17 = v13;
    uint64_t v18 = *(void *)(v0 + 320);
    uint64_t v54 = *(void *)(v0 + 312);
    uint64_t v19 = *(void *)(v0 + 304);
    uint64_t v20 = *(void *)(v0 + 280);
    uint64_t v21 = *(void *)(v0 + 248);
    uint64_t v22 = *(void *)(v0 + 256);
    uint64_t v23 = *(void *)(v0 + 240);
    uint64_t v43 = *(void *)(v0 + 232);
    uint64_t v44 = *(void *)(v0 + 296);
    uint64_t v46 = *(void *)(v0 + 272);
    uint64_t v47 = *(void *)(v0 + 208);
    uint64_t v24 = *(void *)(v0 + 192);

    uint64_t v45 = *(void *)(v24 + 16);
    int64_t v48 = *(void *)(v24 + 24);
    v50(v16, v18, v19);
    Siri_Nlu_External_UserParse.parser.getter();
    Siri_Nlu_External_Parser.parserID.getter();
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v43);
    uint64_t v25 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v22, 0, 1, v25);
    USOParse.init(userParse:parserIdentifier:appBundleId:)();
    (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))(v44, *MEMORY[0x1E4FA1F48], v46);
    Input.init(parse:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v47 + 352))(v45, v48, v49);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v49, v52);
    (*(void (**)(unint64_t, uint64_t))(v54 + 8))(v18, v19);
  }
  **(void **)(v0 + 184) = *(void *)(v0 + 192);
  type metadata accessor for ConversationService.EagerResult(0);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for ConversationSELFHelper();
  swift_retain();
  static ConversationSELFHelper.shared.getter();
  dispatch thunk of ConversationSELFHelper.emitExecutionPrepareTimeEnd(rcId:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
  return v26();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 560) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 488);
    uint64_t v4 = closure #1 in ConversationService.bridge(didReceiveInput:from:);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 488);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v4 = closure #1 in ConversationService.bridge(didReceiveInput:from:);
    uint64_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  void *v37;
  uint64_t (*v38)(unint64_t, uint64_t, uint64_t);
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(unint64_t, unint64_t, uint64_t);
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  void (**v89)(unint64_t, uint64_t);
  void (**v90)(uint64_t, void, uint64_t);
  unsigned int v91;
  void (**v92)(uint64_t, uint64_t);
  uint64_t v93;
  void (*v94)(unint64_t, unint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (**v99)(unint64_t, uint64_t, uint64_t);
  uint64_t v100;
  int64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  uint64_t v104 = v0;
  uint64_t v1 = *(void *)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 408);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 424) + 48))(v2, 1, v1) == 1)
  {
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v2, &demangling cache variable for type metadata for DecisionEngineResponse?);
    swift_retain();
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.debug.getter();
    uint64_t v5 = os_log_type_enabled(v3, v4);
    uint64_t v6 = *(void *)(v0 + 192);
    if (v5)
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v103 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      uint64_t v10 = *(void *)(v6 + 16);
      uint64_t v9 = *(void *)(v6 + 24);
      swift_bridgeObjectRetain();
      *(void *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl(&dword_1B9C64000, v3, v4, "[ConversationService] No DecisionEngine response found for rcId %s during eager phase. Will redirect to server if this result is selected.", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v8, -1, -1);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }
    else
    {
      swift_release();
    }

    goto LABEL_11;
  }
  uint64_t v11 = *(void *)(v0 + 432);
  uint64_t v13 = *(void *)(v0 + 368);
  uint64_t v12 = *(void *)(v0 + 376);
  uint64_t v14 = *(void *)(v0 + 360);
  outlined init with take of DecisionEngineResponse(v2, v11, (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
  uint64_t v15 = *(int *)(v1 + 24);
  *(_DWORD *)(v0 + 608) = v15;
  outlined init with copy of ReferenceResolutionClientProtocol?(v11 + v15, v14, &demangling cache variable for type metadata for Input?);
  uint64_t v102 = (void *)v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v14, 1, v13) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 360), &demangling cache variable for type metadata for Input?);
    uint64_t v16 = *(uint64_t **)(v0 + 432);
    uint64_t v17 = *v16;
    *(void *)(v0 + 576) = *v16;
    if (!v17)
    {
      swift_release();
      swift_retain_n();
      uint64_t v43 = Logger.logObject.getter();
      uint64_t v44 = static os_log_type_t.debug.getter();
      uint64_t v45 = os_log_type_enabled(v43, v44);
      uint64_t v46 = *(void *)(v0 + 432);
      uint64_t v47 = *(void *)(v0 + 192);
      if (v45)
      {
        v100 = *(void *)(v0 + 432);
        int64_t v48 = (uint8_t *)swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        uint64_t v103 = v49;
        *(_DWORD *)int64_t v48 = 136315138;
        os_log_type_t v51 = *(void *)(v47 + 16);
        uint64_t v50 = *(void *)(v47 + 24);
        swift_bridgeObjectRetain();
        *(void *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v50, &v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1B9C64000, v43, v44, "[ConversationService] No conversation found for rcId %s during eager phase. Will redirect to server if this result is selected.", v48, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v49, -1, -1);
        MEMORY[0x1BA9E48C0](v48, -1, -1);

        outlined destroy of DecisionEngineResponse(v100, (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
      }
      else
      {

        swift_release_n();
        outlined destroy of DecisionEngineResponse(v46, (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
      }
LABEL_11:
      type metadata accessor for ConversationService.EagerResult(0);
      swift_storeEnumTagMultiPayload();
      type metadata accessor for ConversationSELFHelper();
      static ConversationSELFHelper.shared.getter();
      dispatch thunk of ConversationSELFHelper.emitExecutionPrepareTimeEnd(rcId:)();
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
      return v21();
    }
    swift_retain();
    uint64_t v18 = (uint64_t)closure #1 in ConversationService.bridge(didReceiveInput:from:);
    uint64_t v19 = v17;
    uint64_t v20 = 0;
    return MEMORY[0x1F4188298](v18, v19, v20);
  }
  uint64_t v23 = *(void *)(v0 + 496);
  uint64_t v24 = *(void *)(v0 + 392);
  uint64_t v25 = *(void *)(v0 + 400);
  uint64_t v26 = *(void *)(v0 + 368);
  uint64_t v27 = *(void *)(v0 + 376);
  (*(void (**)(uint64_t, void, uint64_t))(v27 + 32))(v25, *(void *)(v0 + 360), v26);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v24, v25, v26);
  uint64_t v28 = *(void *)(v23 + 16);
  uint64_t v29 = MEMORY[0x1E4FBC860];
  uint64_t v103 = MEMORY[0x1E4FBC860];
  unint64_t v30 = *(void *)(v28 + 16);
  uint64_t v18 = swift_bridgeObjectRetain();
  if (v30)
  {
    os_log_type_t v31 = 0;
    uint64_t v32 = *(void *)(v0 + 312);
    v97 = v30;
    uint64_t v99 = (uint64_t (**)(unint64_t, uint64_t, uint64_t))(v32 + 32);
    while (v31 < *(void *)(v28 + 16))
    {
      uint64_t v33 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
      uint64_t v34 = *(void *)(v32 + 72);
      uint64_t v35 = (*(uint64_t (**)(void, unint64_t, void))(v32 + 16))(v102[44], v28 + v33 + v34 * v31, v102[38]);
      MEMORY[0x1BA9DE000](v35);
      uint64_t v36 = Array<A>.hasWantedToPause.getter();
      int64_t v37 = v102;
      swift_bridgeObjectRelease();
      if (v36)
      {
        os_log_type_t v38 = *v99;
        (*v99)(v102[41], v102[44], v102[38]);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v29 + 16) + 1, 1);
          int64_t v37 = v102;
          uint64_t v29 = v103;
        }
        uint64_t v40 = *(void *)(v29 + 16);
        uint64_t v39 = *(void *)(v29 + 24);
        if (v40 >= v39 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
          int64_t v37 = v102;
          uint64_t v29 = v103;
        }
        uint64_t v41 = v37[41];
        uint64_t v42 = v37[38];
        *(void *)(v29 + 16) = v40 + 1;
        uint64_t v18 = v38(v29 + v33 + v40 * v34, v41, v42);
        uint64_t v103 = v29;
        unint64_t v30 = v97;
      }
      else
      {
        uint64_t v18 = (*(uint64_t (**)(void, void))(v32 + 8))(v102[44], v102[38]);
      }
      if (v30 == ++v31) {
        goto LABEL_28;
      }
    }
    __break(1u);
    return MEMORY[0x1F4188298](v18, v19, v20);
  }
  int64_t v37 = (void *)v0;
LABEL_28:
  swift_bridgeObjectRelease();
  BOOL v52 = *(void *)(v29 + 16);
  if (v52)
  {
    uint64_t v53 = v37[39];
    uint64_t v54 = v37[35];
    uint64_t v55 = v37[30];
    uint64_t v103 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v52, 0);
    int64_t v37 = v102;
    uint64_t v56 = *(void (**)(unint64_t, unint64_t, uint64_t))(v53 + 16);
    v53 += 16;
    unint64_t v57 = v29 + ((*(unsigned __int8 *)(v53 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 64));
    uint64_t v93 = *(void *)(v53 + 56);
    uint64_t v94 = v56;
    uint64_t v92 = (void (**)(uint64_t, uint64_t))(v55 + 8);
    uint64_t v91 = *MEMORY[0x1E4FA1F48];
    v95 = v54;
    uint64_t v89 = (void (**)(unint64_t, uint64_t))(v53 - 8);
    uint64_t v90 = (void (**)(uint64_t, void, uint64_t))(v54 + 104);
    uint64_t v58 = v103;
    do
    {
      uint64_t v101 = v52;
      id v59 = v37[42];
      os_log_type_t v60 = v37[43];
      id v61 = v37[38];
      uint64_t v96 = v37[36];
      uint64_t v98 = v37[34];
      uint64_t v62 = v37[31];
      os_log_type_t v63 = v37[32];
      BOOL v64 = v37[29];
      v94(v60, v57, v61);
      v94(v59, v60, v61);
      Siri_Nlu_External_UserParse.parser.getter();
      Siri_Nlu_External_Parser.parserID.getter();
      (*v92)(v62, v64);
      uint64_t v65 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v63, 0, 1, v65);
      USOParse.init(userParse:parserIdentifier:appBundleId:)();
      (*v90)(v96, v91, v98);
      (*v89)(v60, v61);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v58 + 16) + 1, 1);
        uint64_t v58 = v103;
      }
      uint64_t v67 = *(void *)(v58 + 16);
      id v66 = *(void *)(v58 + 24);
      int64_t v37 = v102;
      if (v67 >= v66 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1);
        int64_t v37 = v102;
        uint64_t v58 = v103;
      }
      uint64_t v68 = v37[36];
      unint64_t v69 = v37[34];
      *(void *)(v58 + 16) = v67 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v95 + 32))(v58+ ((*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80))+ *(void *)(v95 + 72) * v67, v68, v69);
      uint64_t v103 = v58;
      v57 += v93;
      BOOL v52 = v101 - 1;
    }
    while (v101 != 1);
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v58 = MEMORY[0x1E4FBC860];
  }
  uint64_t v70 = v37[49];
  uint64_t v71 = v37[47];
  uint64_t v72 = v37[48];
  os_log_type_t v73 = v37[46];
  int64_t v74 = v37;
  Input.parse.getter();
  uint64_t v103 = Input.alternatives.getter();
  specialized Array.append<A>(contentsOf:)(v58);
  Input.continuationState.getter();
  Input.init(parse:alternatives:continuationState:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 40))(v70, v72, v73);
  uint64_t v75 = Logger.logObject.getter();
  uint64_t v76 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v75, v76))
  {
    unint64_t v77 = (uint8_t *)swift_slowAlloc();
    uint64_t v78 = swift_slowAlloc();
    uint64_t v103 = v78;
    *(_DWORD *)unint64_t v77 = 136315138;
    swift_beginAccess();
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3(&lazy protocol witness table cache variable for type Input and conformance Input, 255, MEMORY[0x1E4FA1EE0]);
    uint64_t v79 = dispatch thunk of CustomStringConvertible.description.getter();
    v37[21] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v80, &v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v75, v76, "[ConversationService] input: %s", v77, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v78, -1, -1);
    MEMORY[0x1BA9E48C0](v77, -1, -1);
  }

  uint64_t v81 = v37[49];
  uint64_t v82 = v37[26];
  uint64_t v83 = v74[24];
  uint64_t v84 = *(void *)(v83 + 16);
  uint64_t v85 = *(void *)(v83 + 24);
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v82 + 352))(v84, v85, v81);
  Input.parse.getter();
  v86 = (void *)swift_task_alloc();
  v74[71] = v86;
  void *v86 = v74;
  v86[1] = closure #1 in ConversationService.bridge(didReceiveInput:from:);
  uint64_t v87 = v74[37];
  uint64_t v88 = v74[26];
  return specialized ConversationService.updateRequestHandlingExecutionSystem(activeTurn:rcId:parse:)(v88, v84, v85, v87);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *(void *)(*(void *)v0 + 488);
  uint64_t v2 = *(void *)(*(void *)v0 + 296);
  uint64_t v3 = *(void *)(*(void *)v0 + 280);
  uint64_t v4 = *(void *)(*(void *)v0 + 272);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return MEMORY[0x1F4188298](closure #1 in ConversationService.bridge(didReceiveInput:from:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  uint64_t v20 = v0;
  uint64_t v1 = v0[49];
  uint64_t v2 = v0[46];
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0[47] + 8);
  v3(v0[50], v2);
  v3(v1, v2);
  uint64_t v4 = (uint64_t *)v0[54];
  uint64_t v5 = *v4;
  v0[72] = *v4;
  if (v5)
  {
    swift_retain();
    return MEMORY[0x1F4188298](closure #1 in ConversationService.bridge(didReceiveInput:from:), v5, 0);
  }
  else
  {
    swift_release();
    swift_retain_n();
    uint64_t v6 = Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.debug.getter();
    uint64_t v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = v0[54];
    uint64_t v10 = v0[24];
    if (v8)
    {
      uint64_t v18 = v0[54];
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v19 = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v13 = *(void *)(v10 + 16);
      uint64_t v14 = *(void *)(v10 + 24);
      swift_bridgeObjectRetain();
      v0[19] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v6, v7, "[ConversationService] No conversation found for rcId %s during eager phase. Will redirect to server if this result is selected.", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v12, -1, -1);
      MEMORY[0x1BA9E48C0](v11, -1, -1);

      uint64_t v15 = v18;
    }
    else
    {

      swift_release_n();
      uint64_t v15 = v9;
    }
    outlined destroy of DecisionEngineResponse(v15, (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
    type metadata accessor for ConversationService.EagerResult(0);
    swift_storeEnumTagMultiPayload();
    type metadata accessor for ConversationSELFHelper();
    static ConversationSELFHelper.shared.getter();
    dispatch thunk of ConversationSELFHelper.emitExecutionPrepareTimeEnd(rcId:)();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  long long v8;
  uint64_t (*v9)(void);
  uint64_t v10;

  uint64_t v1 = *(void **)(v0 + 576);
  uint64_t v2 = v1 + 16;
  uint64_t v8 = *(_OWORD *)(v0 + 216);
  Logger.debugF(file:function:)();
  uint64_t v3 = v1[19];
  uint64_t v4 = v1[20];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  uint64_t v5 = swift_allocObject();
  *(void *)(v0 + 584) = v5;
  *(_OWORD *)(v5 + 16) = v8;
  uint64_t v9 = (uint64_t (*)(void))(*(void *)(v4 + 8) + **(int **)(v4 + 8));
  swift_unknownObjectRetain();
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 592) = v6;
  *uint64_t v6 = v0;
  v6[1] = closure #1 in ConversationService.bridge(didReceiveInput:from:);
  return v9();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 600) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 576);
    uint64_t v4 = closure #1 in ConversationService.bridge(didReceiveInput:from:);
  }
  else
  {
    swift_release();
    uint64_t v3 = *(void *)(v2 + 576);
    uint64_t v4 = closure #1 in ConversationService.bridge(didReceiveInput:from:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;

  return MEMORY[0x1F4188298](closure #1 in ConversationService.bridge(didReceiveInput:from:), *(void *)(v0 + 488), 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = *(void *)(v0 + 576);
  uint64_t v2 = *(int *)(v0 + 608);
  uint64_t v3 = *(void *)(v0 + 432);
  uint64_t v5 = *(void **)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 192);
  swift_release();
  uint64_t v6 = (uint64_t)v5
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationUserInput, RemoteConversationClient, Input?))
              + 64);
  *uint64_t v5 = v4;
  v5[1] = v1;
  outlined init with copy of ReferenceResolutionClientProtocol?(v3 + v2, v6, &demangling cache variable for type metadata for Input?);
  swift_retain();
  outlined destroy of DecisionEngineResponse(v3, (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
  type metadata accessor for ConversationService.EagerResult(0);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  dispatch thunk of ConversationSELFHelper.emitExecutionPrepareTimeEnd(rcId:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 488);
  swift_release();
  return MEMORY[0x1F4188298](closure #1 in ConversationService.bridge(didReceiveInput:from:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 432);
  swift_release();
  swift_release();
  outlined destroy of DecisionEngineResponse(v1, (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
  type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  dispatch thunk of ConversationSELFHelper.emitExecutionPrepareTimeEnd(rcId:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  dispatch thunk of ConversationSELFHelper.emitExecutionPrepareTimeEnd(rcId:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[24] = a3;
  v4[25] = a4;
  v4[22] = a1;
  v4[23] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskGroup<Bool>.Iterator);
  v4[26] = v5;
  v4[27] = *(void *)(v5 - 8);
  v4[28] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v4[29] = swift_task_alloc();
  v4[30] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  v4[31] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:), v6, 0);
}

uint64_t closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:)()
{
  uint64_t v58 = v0;
  uint64_t v1 = *(void *)(v0 + 192);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 104);
  if ((v2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for RemoteConversationClient();
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3(&lazy protocol witness table cache variable for type RemoteConversationClient and conformance RemoteConversationClient, 255, (void (*)(uint64_t))type metadata accessor for RemoteConversationClient);
    Set.Iterator.init(_cocoa:)();
    uint64_t v2 = *(void *)(v0 + 16);
    uint64_t v53 = *(void *)(v0 + 24);
    uint64_t v3 = *(void *)(v0 + 32);
    uint64_t v4 = *(void *)(v0 + 40);
    unint64_t v5 = *(void *)(v0 + 48);
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(v2 + 32);
    uint64_t v53 = v2 + 56;
    uint64_t v7 = ~v6;
    uint64_t v8 = -v6;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & *(void *)(v2 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = v7;
    uint64_t v4 = 0;
  }
  int64_t v52 = (unint64_t)(v3 + 64) >> 6;
  uint64_t v54 = v2;
  while (v2 < 0)
  {
    uint64_t v14 = __CocoaSet.Iterator.next()();
    if (!v14) {
      goto LABEL_42;
    }
    *(void *)(v0 + 168) = v14;
    type metadata accessor for RemoteConversationClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v15 = *(void *)(v0 + 160);
    swift_unknownObjectRelease();
    uint64_t v13 = v4;
    uint64_t v11 = v5;
    if (!v15) {
      goto LABEL_42;
    }
LABEL_30:
    uint64_t v55 = v13;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.executor);
    swift_retain_n();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v56 = v23;
      v57[0] = 0;
      *(_DWORD *)uint64_t v22 = 136315138;
      v57[1] = 0xE000000000000000;
      swift_retain();
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      strcpy((char *)v57, "FlowExtension(");
      HIBYTE(v57[1]) = -18;
      uint64_t v24 = *(void *)(v15 + 112);
      uint64_t v25 = *(void **)(v15 + 120);
      swift_bridgeObjectRetain();
      v26._uint64_t countAndFlagsBits = v24;
      v26._object = v25;
      String.append(_:)(v26);
      swift_bridgeObjectRelease();
      v27._uint64_t countAndFlagsBits = 41;
      v27._object = (void *)0xE100000000000000;
      String.append(_:)(v27);
      swift_release();
      *(void *)(v22 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57[0], v57[1], &v56);
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v20, v21, "[ConversationService] check for inputContinuation support for conversation: %s", (uint8_t *)v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v23, -1, -1);
      MEMORY[0x1BA9E48C0](v22, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    uint64_t v28 = *(void *)(v0 + 232);
    uint64_t v29 = *(void *)(v0 + 240);
    uint64_t v30 = *(void *)(v0 + 200);
    uint64_t v31 = type metadata accessor for TaskPriority();
    uint64_t v32 = *(void *)(v31 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v29, 1, 1, v31);
    uint64_t v33 = (void *)swift_allocObject();
    v33[2] = 0;
    uint64_t v34 = v33 + 2;
    v33[3] = 0;
    v33[4] = v15;
    v33[5] = v30;
    outlined init with copy of ReferenceResolutionClientProtocol?(v29, v28, &demangling cache variable for type metadata for TaskPriority?);
    LODWORD(v28) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v28, 1, v31);
    swift_retain();
    swift_retain();
    uint64_t v35 = *(void *)(v0 + 232);
    if (v28 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 232), &demangling cache variable for type metadata for TaskPriority?);
      if (*v34) {
        goto LABEL_37;
      }
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v35, v31);
      if (*v34)
      {
LABEL_37:
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v36 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v38 = v37;
        swift_unknownObjectRelease();
        goto LABEL_40;
      }
    }
    uint64_t v36 = 0;
    uint64_t v38 = 0;
LABEL_40:
    uint64_t v39 = **(void **)(v0 + 184);
    uint64_t v40 = swift_allocObject();
    *(void *)(v40 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:);
    *(void *)(v40 + 24) = v33;
    uint64_t v41 = v38 | v36;
    if (v38 | v36)
    {
      uint64_t v41 = v0 + 56;
      *(void *)(v0 + 56) = 0;
      *(void *)(v0 + 64) = 0;
      *(void *)(v0 + 72) = v36;
      *(void *)(v0 + 80) = v38;
    }
    uint64_t v10 = *(void *)(v0 + 240);
    *(void *)(v0 + 136) = 1;
    *(void *)(v0 + 144) = v41;
    *(void *)(v0 + 152) = v39;
    swift_task_create();
    swift_release();
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v10, &demangling cache variable for type metadata for TaskPriority?);
    uint64_t v4 = v55;
    unint64_t v5 = v11;
    uint64_t v2 = v54;
  }
  if (v5)
  {
    uint64_t v11 = (v5 - 1) & v5;
    unint64_t v12 = __clz(__rbit64(v5)) | (v4 << 6);
    uint64_t v13 = v4;
    goto LABEL_29;
  }
  int64_t v16 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_49;
  }
  if (v16 >= v52) {
    goto LABEL_42;
  }
  unint64_t v17 = *(void *)(v53 + 8 * v16);
  uint64_t v13 = v4 + 1;
  if (v17) {
    goto LABEL_28;
  }
  uint64_t v13 = v4 + 2;
  if (v4 + 2 >= v52) {
    goto LABEL_42;
  }
  unint64_t v17 = *(void *)(v53 + 8 * v13);
  if (v17) {
    goto LABEL_28;
  }
  uint64_t v13 = v4 + 3;
  if (v4 + 3 >= v52) {
    goto LABEL_42;
  }
  unint64_t v17 = *(void *)(v53 + 8 * v13);
  if (v17) {
    goto LABEL_28;
  }
  uint64_t v13 = v4 + 4;
  if (v4 + 4 >= v52) {
    goto LABEL_42;
  }
  unint64_t v17 = *(void *)(v53 + 8 * v13);
  if (v17)
  {
LABEL_28:
    uint64_t v11 = (v17 - 1) & v17;
    unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
LABEL_29:
    uint64_t v15 = *(void *)(*(void *)(v2 + 48) + 8 * v12);
    swift_retain();
    if (!v15) {
      goto LABEL_42;
    }
    goto LABEL_30;
  }
  uint64_t v18 = v4 + 5;
  while (v52 != v18)
  {
    unint64_t v17 = *(void *)(v53 + 8 * v18++);
    if (v17)
    {
      uint64_t v13 = v18 - 1;
      goto LABEL_28;
    }
  }
LABEL_42:
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  if (one-time initialization token for executor == -1) {
    goto LABEL_43;
  }
LABEL_49:
  swift_once();
LABEL_43:
  uint64_t v42 = type metadata accessor for Logger();
  __swift_project_value_buffer(v42, (uint64_t)static Logger.executor);
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v45 = 0;
    _os_log_impl(&dword_1B9C64000, v43, v44, "[ConversationService] checking if conversation group satisifies input continuation check", v45, 2u);
    MEMORY[0x1BA9E48C0](v45, -1, -1);
  }

  TaskGroup.makeAsyncIterator()();
  uint64_t v46 = static MessageBusActor.shared;
  *(void *)(v0 + 256) = static MessageBusActor.shared;
  uint64_t v48 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v47, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  swift_retain();
  uint64_t v49 = (void *)swift_task_alloc();
  *(void *)(v0 + 264) = v49;
  *uint64_t v49 = v0;
  v49[1] = closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:);
  uint64_t v50 = *(void *)(v0 + 208);
  return MEMORY[0x1F4187C58](v0 + 272, v46, v48, v50);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 248);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:), v1, 0);
}

uint64_t closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:)(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(v2 + 272);
  if (v3 == 2)
  {
    char v4 = 1;
LABEL_5:
    unint64_t v5 = *(char **)(v2 + 176);
    (*(void (**)(void, void))(*(void *)(v2 + 216) + 8))(*(void *)(v2 + 224), *(void *)(v2 + 208));
    swift_release();
    *unint64_t v5 = v4;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v2 + 8);
    return v6();
  }
  if ((v3 & 1) == 0)
  {
    char v4 = 0;
    goto LABEL_5;
  }
  uint64_t v8 = static MessageBusActor.shared;
  *(void *)(v2 + 256) = static MessageBusActor.shared;
  uint64_t v9 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, a2, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 264) = v10;
  *uint64_t v10 = v2;
  v10[1] = closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:);
  uint64_t v11 = *(void *)(v2 + 208);
  return MEMORY[0x1F4187C58](v2 + 272, v8, v9, v11);
}

uint64_t closure #1 in closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[5] = a1;
  uint64_t v6 = type metadata accessor for FlexibleExecutionSupportOptions();
  v5[8] = v6;
  v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  v5[11] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
  v5[12] = swift_task_alloc();
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  uint64_t v7 = swift_task_alloc();
  v5[15] = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  v5[16] = v8;
  *uint64_t v8 = v5;
  v8[1] = closure #1 in closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:);
  return RemoteConversationClient.flexibleExecutionSupportOptions()(v7);
}

uint64_t closure #1 in closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:)()
{
  swift_task_dealloc();
  if (v0)
  {

    uint64_t v1 = closure #1 in closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:);
  }
  else
  {
    uint64_t v1 = closure #1 in closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:);
  }
  return MEMORY[0x1F4188298](v1, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t (*v31)(void);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[2];
  uint64_t v38;
  uint64_t v39;

  uint64_t v38 = v0;
  (*(void (**)(void, void, uint64_t, void))(*(void *)(v0 + 72) + 56))(*(void *)(v0 + 120), 0, 1, *(void *)(v0 + 64));
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol?(v2, v1, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
  swift_retain_n();
  swift_retain_n();
  char v4 = Logger.logObject.getter();
  unint64_t v5 = static os_log_type_t.debug.getter();
  uint64_t v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 112);
  if (v6)
  {
    uint64_t v34 = *(void *)(v0 + 104);
    uint64_t v9 = *(void *)(v0 + 48);
    uint64_t v8 = *(void *)(v0 + 56);
    uint64_t v10 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v36 = v35;
    *(_DWORD *)uint64_t v10 = 136315650;
    uint64_t v33 = v7;
    uint64_t v12 = *(void *)(v8 + 16);
    uint64_t v11 = *(void *)(v8 + 24);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v10 + 12) = 2080;
    v37[0] = 0;
    v37[1] = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    strcpy((char *)v37, "FlowExtension(");
    HIBYTE(v37[1]) = -18;
    uint64_t v13 = *(void *)(v9 + 112);
    uint64_t v14 = *(void **)(v9 + 120);
    swift_bridgeObjectRetain();
    v15._uint64_t countAndFlagsBits = v13;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = 41;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    swift_release();
    *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37[0], v37[1], &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v10 + 22) = 2080;
    outlined init with copy of ReferenceResolutionClientProtocol?(v33, v34, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
    unint64_t v17 = String.init<A>(describing:)();
    *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v33, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
    _os_log_impl(&dword_1B9C64000, v4, v5, "[ConversationService] flexible execution options for rcId: %s, active conversation:  %s are  %s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v35, -1, -1);
    MEMORY[0x1BA9E48C0](v10, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_release_n();
    outlined destroy of ReferenceResolutionClientProtocol?(v7, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
  }

  uint64_t v19 = *(void *)(v0 + 96);
  uint64_t v20 = *(void *)(v0 + 64);
  os_log_type_t v21 = *(void *)(v0 + 72);
  outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 120), v19, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20);
  uint64_t v23 = *(void *)(v0 + 120);
  uint64_t v24 = *(void *)(v0 + 96);
  if (v22 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 120), &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
    outlined destroy of ReferenceResolutionClientProtocol?(v24, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
    uint64_t v25 = 0;
  }
  else
  {
    Swift::String v27 = *(void *)(v0 + 72);
    Swift::String v26 = *(void *)(v0 + 80);
    uint64_t v28 = *(void *)(v0 + 64);
    static FlexibleExecutionSupportOptions.inputContinuation.getter();
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type FlexibleExecutionSupportOptions and conformance FlexibleExecutionSupportOptions, 255, MEMORY[0x1E4FA1E88]);
    uint64_t v29 = dispatch thunk of SetAlgebra.isSuperset(of:)();
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v30(v26, v28);
    outlined destroy of ReferenceResolutionClientProtocol?(v23, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
    v30(v24, v28);
    uint64_t v25 = v29 & 1;
  }
  **(unsigned char **)(v0 + 40) = v25;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
  return v31();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t (*v31)(void);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[2];
  uint64_t v38;
  uint64_t v39;

  uint64_t v38 = v0;
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 72) + 56))(*(void *)(v0 + 120), 1, 1, *(void *)(v0 + 64));
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol?(v2, v1, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
  swift_retain_n();
  swift_retain_n();
  char v4 = Logger.logObject.getter();
  unint64_t v5 = static os_log_type_t.debug.getter();
  uint64_t v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 112);
  if (v6)
  {
    uint64_t v34 = *(void *)(v0 + 104);
    uint64_t v9 = *(void *)(v0 + 48);
    uint64_t v8 = *(void *)(v0 + 56);
    uint64_t v10 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v36 = v35;
    *(_DWORD *)uint64_t v10 = 136315650;
    uint64_t v33 = v7;
    uint64_t v12 = *(void *)(v8 + 16);
    uint64_t v11 = *(void *)(v8 + 24);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v10 + 12) = 2080;
    v37[0] = 0;
    v37[1] = 0xE000000000000000;
    swift_retain();
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    strcpy((char *)v37, "FlowExtension(");
    HIBYTE(v37[1]) = -18;
    uint64_t v13 = *(void *)(v9 + 112);
    uint64_t v14 = *(void **)(v9 + 120);
    swift_bridgeObjectRetain();
    v15._uint64_t countAndFlagsBits = v13;
    v15._object = v14;
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = 41;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    swift_release();
    *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37[0], v37[1], &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v10 + 22) = 2080;
    outlined init with copy of ReferenceResolutionClientProtocol?(v33, v34, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
    unint64_t v17 = String.init<A>(describing:)();
    *(void *)(v0 + 32) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v33, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
    _os_log_impl(&dword_1B9C64000, v4, v5, "[ConversationService] flexible execution options for rcId: %s, active conversation:  %s are  %s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v35, -1, -1);
    MEMORY[0x1BA9E48C0](v10, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_release_n();
    outlined destroy of ReferenceResolutionClientProtocol?(v7, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
  }

  uint64_t v19 = *(void *)(v0 + 96);
  uint64_t v20 = *(void *)(v0 + 64);
  os_log_type_t v21 = *(void *)(v0 + 72);
  outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 120), v19, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20);
  uint64_t v23 = *(void *)(v0 + 120);
  uint64_t v24 = *(void *)(v0 + 96);
  if (v22 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 120), &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
    outlined destroy of ReferenceResolutionClientProtocol?(v24, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
    uint64_t v25 = 0;
  }
  else
  {
    Swift::String v27 = *(void *)(v0 + 72);
    Swift::String v26 = *(void *)(v0 + 80);
    uint64_t v28 = *(void *)(v0 + 64);
    static FlexibleExecutionSupportOptions.inputContinuation.getter();
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type FlexibleExecutionSupportOptions and conformance FlexibleExecutionSupportOptions, 255, MEMORY[0x1E4FA1E88]);
    uint64_t v29 = dispatch thunk of SetAlgebra.isSuperset(of:)();
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v30(v26, v28);
    outlined destroy of ReferenceResolutionClientProtocol?(v23, &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
    v30(v24, v28);
    uint64_t v25 = v29 & 1;
  }
  **(unsigned char **)(v0 + 40) = v25;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
  return v31();
}

uint64_t ConversationService.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v15 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v15 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v16 = static MessageBusActor.shared;
  uint64_t v18 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v17, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = v16;
  v19[3] = v18;
  v19[4] = a4;
  v19[5] = a5;
  v19[6] = v5;
  v19[7] = a1;
  v19[8] = a2;
  v19[9] = a3;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v13, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:), (uint64_t)v19);
  return swift_release();
}

uint64_t closure #1 in ConversationService.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[5] = a4;
  v8[6] = a5;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  v8[7] = static MessageBusActor.shared;
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  v8[8] = v11;
  void *v11 = v8;
  v11[1] = closure #1 in ConversationService.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:);
  return ConversationService.checkExecutionOverrides(context:resultCandidateId:)(a7, a8, v14);
}

uint64_t closure #1 in ConversationService.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56);
  *(void *)(*(void *)v1 + 72) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in ConversationService.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:), v2, 0);
}

uint64_t closure #1 in ConversationService.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:)()
{
  uint64_t v1 = (void *)v0[9];
  uint64_t v2 = (void (*)(void *))v0[5];
  swift_release();
  v2(v1);

  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t ConversationService.checkExecutionOverrides(context:resultCandidateId:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 216);
  *(void *)(*(void *)v1 + 280) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return MEMORY[0x1F4188298](ConversationService.checkExecutionOverrides(context:resultCandidateId:), v2, 0);
}

uint64_t static ConversationService.skipEmptyAsr(_:)(uint64_t a1)
{
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static ConversationService.skipEmptyAsr(_:)
                                       + async function pointer to specialized static ConversationService.skipEmptyAsr(_:));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v5(a1);
}

void closure #1 in ConversationService.bridge(didReceiveCommitResultCandidateId:from:)(int a1, id a2)
{
  if (a2)
  {
    id v3 = a2;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
    id v5 = a2;
    id v6 = a2;
    oslog = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v17 = v9;
      *(_DWORD *)uint64_t v8 = 136315138;
      id v10 = a2;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v11 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, oslog, v7, "UIRevealRecognizedSpeech error: %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v9, -1, -1);
      MEMORY[0x1BA9E48C0](v8, -1, -1);

      return;
    }
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
    oslog = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_1B9C64000, oslog, v14, "UIRevealRecognizedSpeech handled", v15, 2u);
      MEMORY[0x1BA9E48C0](v15, -1, -1);
    }
  }
}

uint64_t $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
  uint64_t v11 = (void *)swift_allocObject();
  _OWORD v11[2] = 0;
  v11[3] = 0;
  v11[4] = a1;
  int v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  swift_retain();
  if (v12 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for TaskPriority?);
    uint64_t v13 = 0;
    uint64_t v14 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (v11[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v14 = v15;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
    }
  }
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a4;
  *(void *)(v16 + 24) = v11;
  if (v14 | v13)
  {
    v18[0] = 0;
    v18[1] = 0;
    v18[2] = v13;
    v18[3] = v14;
  }
  swift_task_create();
  return swift_release();
}

uint64_t ConversationService.maybeDoServerFallback(bridge:forResultCandidateId:executionRequestId:rootRequestId:isDomainDirected:topNlParse:serverFallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, uint64_t a11)
{
  uint64_t v60 = a7;
  uint64_t v61 = a8;
  unint64_t v67 = a4;
  uint64_t v68 = a3;
  uint64_t v65 = a1;
  uint64_t v66 = a2;
  uint64_t v14 = a11;
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  uint64_t v15 = MEMORY[0x1F4188790](v59);
  uint64_t v58 = (uint64_t)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v52 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v57 = (uint64_t)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v52 - v22;
  uint64_t v24 = v11[32];
  uint64_t v25 = v11[33];
  uint64_t v62 = v11;
  __swift_project_boxed_opaque_existential_1(v11 + 29, v24);
  Swift::String v26 = *(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v25 + 8);
  int v63 = a9;
  uint64_t v64 = a5;
  uint64_t v27 = a5;
  unint64_t v28 = a6;
  char v29 = v26(a9, a10, a11, v27, a6, v24, v25);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol?(a10, (uint64_t)v23, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  outlined init with copy of ReferenceResolutionClientProtocol?(a11, (uint64_t)v18, &demangling cache variable for type metadata for ServerFallbackReason?);
  swift_bridgeObjectRetain_n();
  unint64_t v31 = v67;
  swift_bridgeObjectRetain_n();
  uint64_t v32 = Logger.logObject.getter();
  int v33 = static os_log_type_t.debug.getter();
  uint64_t v34 = (uint64_t)v18;
  unint64_t v35 = v31;
  if (os_log_type_enabled(v32, (os_log_type_t)v33))
  {
    uint64_t v54 = a11;
    int v55 = v33;
    os_log_t v56 = v32;
    uint64_t v36 = (uint64_t)v23;
    uint64_t v37 = swift_slowAlloc();
    uint64_t v53 = swift_slowAlloc();
    v70[0] = v53;
    *(_DWORD *)uint64_t v37 = 67110402;
    LODWORD(v69) = v29 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v37 + 8) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v28, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v37 + 18) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v35, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v37 + 28) = 1024;
    LODWORD(v69) = v63 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v37 + 34) = 1024;
    uint64_t v38 = v57;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v23, v57, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    uint64_t v39 = type metadata accessor for Siri_Nlu_External_UserParse();
    uint64_t v40 = *(void *)(v39 - 8);
    uint64_t v41 = v34;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v38, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
      int v42 = 0;
    }
    else
    {
      uint64_t v46 = v38;
      char v47 = Siri_Nlu_External_UserParse.isNlv3FallbackException.getter();
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v46, v39);
      int v42 = v47 & 1;
    }
    outlined destroy of ReferenceResolutionClientProtocol?(v36, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    LODWORD(v69) = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v37 + 40) = 2080;
    outlined init with copy of ReferenceResolutionClientProtocol?(v41, v58, &demangling cache variable for type metadata for ServerFallbackReason?);
    uint64_t v48 = String.init<A>(describing:)();
    uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v41, &demangling cache variable for type metadata for ServerFallbackReason?);
    os_log_t v50 = v56;
    _os_log_impl(&dword_1B9C64000, v56, (os_log_type_t)v55, "[ConversationService] shouldDisableServerFallbackWithABExperiment = %{BOOL}d) for executionRequestId: %s, rcId: %s, isDomainDirected: %{BOOL}d, nlExceptionParse: %{BOOL}d, serverFallbackReason: %s", (uint8_t *)v37, 0x32u);
    uint64_t v51 = v53;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v51, -1, -1);
    MEMORY[0x1BA9E48C0](v37, -1, -1);

    uint64_t v43 = v66;
    unint64_t v35 = v67;
    uint64_t v14 = v54;
    if (v29) {
      return ConversationService.closeRequestForDisabledServerFallback(bridge:forResultCandidateId:executionRequestId:rootRequestId:isDomainDirected:serverFallbackReason:)(v65, v43, v68, v35, v64, v28, v60, v61, v63 & 1, v14);
    }
LABEL_7:
    uint64_t ObjectType = swift_getObjectType();
    return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v43 + 48))(v68, v35, v14, ObjectType, v43);
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v23, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  outlined destroy of ReferenceResolutionClientProtocol?(v34, &demangling cache variable for type metadata for ServerFallbackReason?);

  uint64_t v43 = v66;
  if ((v29 & 1) == 0) {
    goto LABEL_7;
  }
  return ConversationService.closeRequestForDisabledServerFallback(bridge:forResultCandidateId:executionRequestId:rootRequestId:isDomainDirected:serverFallbackReason:)(v65, v43, v68, v35, v64, v28, v60, v61, v63 & 1, v14);
}

uint64_t ConversationService.closeRequestForDisabledServerFallback(bridge:forResultCandidateId:executionRequestId:rootRequestId:isDomainDirected:serverFallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v47 = a2;
  uint64_t v52 = a7;
  uint64_t v53 = a8;
  uint64_t v54 = a4;
  uint64_t v51 = a3;
  uint64_t v46 = a1;
  uint64_t v12 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v44 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v44 - v23;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v49 = a5;
  uint64_t v50 = a6;
  uint64_t v45 = a10;
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.executor);
  Swift::String v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v26, v27))
  {
    unint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v28 = 67109120;
    LODWORD(v55[0]) = a9 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v26, v27, "[ConversationService] ServerFallback needed with domainDirected=%{BOOL}d but shouldDisableServerFallback returns true; initiating a fatal response and returning an error instead of performing fallback.",
      v28,
      8u);
    MEMORY[0x1BA9E48C0](v28, -1, -1);
  }

  unint64_t v29 = 0xD000000000000028;
  if (a9) {
    unint64_t v29 = 0xD00000000000002CLL;
  }
  unint64_t v44 = v29;
  if (a9) {
    unint64_t v30 = 0x80000001BA067110;
  }
  else {
    unint64_t v30 = 0x80000001BA0670E0;
  }
  uint64_t v31 = type metadata accessor for FlowOutputMessage.InAppResponse();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v24, 1, 1, v31);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v18, *MEMORY[0x1E4FA24B8], v12);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v24, (uint64_t)v22, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  id v32 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
  uint64_t v33 = v50;
  swift_bridgeObjectRetain();
  uint64_t v43 = (uint64_t)v16;
  uint64_t v34 = v49;
  id v35 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v49, v33, v43, (uint64_t)v22);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v24, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(id, unint64_t, unint64_t, uint64_t, uint64_t))(v47 + 40))(v35, v44, v30, 1, ObjectType);
  swift_bridgeObjectRelease();
  outlined init with copy of ReferenceResolutionClientProtocol(v48 + 232, (uint64_t)v55);
  uint64_t v37 = v56;
  uint64_t v38 = v57;
  __swift_project_boxed_opaque_existential_1(v55, v56);
  uint64_t v39 = v52;
  uint64_t v40 = v53;
  if (!v53)
  {
    swift_bridgeObjectRetain();
    uint64_t v39 = v34;
    uint64_t v40 = v33;
  }
  uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 24);
  swift_bridgeObjectRetain();
  v41(v51, v54, v39, v40, v45, v37, v38);
  swift_bridgeObjectRelease();

  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v55);
}

uint64_t closure #2 in ConversationService.bridge(didReceiveCommitResultCandidateId:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(void *)(v8 + 56) = a7;
  *(void *)(v8 + 64) = v10;
  *(unsigned char *)(v8 + 128) = a8;
  *(void *)(v8 + 40) = a5;
  *(void *)(v8 + 48) = a6;
  *(void *)(v8 + 24) = a3;
  *(void *)(v8 + 32) = a4;
  *(void *)(v8 + 16) = a2;
  return MEMORY[0x1F4188298](closure #2 in ConversationService.bridge(didReceiveCommitResultCandidateId:from:), 0, 0);
}

uint64_t closure #2 in ConversationService.bridge(didReceiveCommitResultCandidateId:from:)()
{
  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v1[11];
  uint64_t v4 = v1[12];
  __swift_project_boxed_opaque_existential_1(v1 + 8, v3);
  uint64_t v5 = *(void *)(v2 + 16);
  v0[9] = v5;
  uint64_t v6 = *(void *)(v2 + 24);
  v0[10] = v6;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 40) + **(int **)(v4 + 40));
  uint64_t v7 = (void *)swift_task_alloc();
  v0[11] = v7;
  void *v7 = v0;
  v7[1] = closure #2 in ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
  return v9(v5, v6, v3, v4);
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = (void *)*v0;
  uint64_t v2 = (void *)*v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  v1[12] = v3;
  *uint64_t v3 = v2;
  v3[1] = closure #2 in ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
  uint64_t v4 = v1[10];
  uint64_t v5 = v1[9];
  uint64_t v6 = v1[4];
  return specialized ConversationService.maybeSubmitRequestHandlingUpdate(activeTurn:rcId:bridge:)(v6, v5, v4);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #2 in ConversationService.bridge(didReceiveCommitResultCandidateId:from:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = ConversationUserInput.asSpeechData.getter();
  *(void *)(v0 + 104) = v3;
  uint64_t v4 = v2 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v5;
  *uint64_t v5 = v0;
  v5[1] = closure #2 in ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
  uint64_t v6 = *(unsigned char *)(v0 + 128);
  uint64_t v7 = *(void *)(v0 + 48);
  uint64_t v8 = *(void *)(v0 + 56);
  uint64_t v9 = *(void *)(v0 + 40);
  return ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)(v8, v6, (uint64_t)v3, v4, v9, v7, v1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #2 in ConversationService.bridge(didReceiveCommitResultCandidateId:from:), 0, 0);
  }
  else
  {

    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ConversationService.bridge(didReceiveClearContext:from:)()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized ConversationService.bridge(didReceiveClearContext:from:)
                             + async function pointer to specialized ConversationService.bridge(didReceiveClearContext:from:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v3();
}

uint64_t closure #1 in ConversationService.bridge(didReceiveClearContext:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[22] = a2;
  v3[23] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[24] = swift_task_alloc();
  v3[25] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static MessageBusActor.shared;
  v3[26] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](closure #1 in ConversationService.bridge(didReceiveClearContext:from:), v4, 0);
}

uint64_t closure #1 in ConversationService.bridge(didReceiveClearContext:from:)()
{
  uint64_t v1 = *(void *)(v0 + 184);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 104);
  if ((v2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for RemoteConversationClient();
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3(&lazy protocol witness table cache variable for type RemoteConversationClient and conformance RemoteConversationClient, 255, (void (*)(uint64_t))type metadata accessor for RemoteConversationClient);
    uint64_t v3 = Set.Iterator.init(_cocoa:)();
    uint64_t v2 = *(void *)(v0 + 16);
    uint64_t v41 = *(void *)(v0 + 24);
    uint64_t v6 = *(void *)(v0 + 32);
    uint64_t v7 = *(void *)(v0 + 40);
    unint64_t v8 = *(void *)(v0 + 48);
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
    uint64_t v41 = v2 + 56;
    uint64_t v6 = ~v9;
    uint64_t v10 = -v9;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v8 = v11 & *(void *)(v2 + 56);
    uint64_t v3 = swift_bridgeObjectRetain();
    uint64_t v7 = 0;
  }
  int64_t v40 = (unint64_t)(v6 + 64) >> 6;
  while (v2 < 0)
  {
    uint64_t v16 = __CocoaSet.Iterator.next()();
    if (!v16) {
      goto LABEL_37;
    }
    *(void *)(v0 + 168) = v16;
    type metadata accessor for RemoteConversationClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v17 = *(void *)(v0 + 160);
    swift_unknownObjectRelease();
    uint64_t v15 = v7;
    uint64_t v13 = v8;
    if (!v17) {
      goto LABEL_37;
    }
LABEL_30:
    unint64_t v42 = v13;
    uint64_t v43 = v15;
    uint64_t v21 = v2;
    uint64_t v23 = *(void *)(v0 + 192);
    uint64_t v22 = *(void *)(v0 + 200);
    uint64_t v24 = type metadata accessor for TaskPriority();
    uint64_t v25 = *(void *)(v24 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v22, 1, 1, v24);
    Swift::String v26 = (void *)swift_allocObject();
    v26[2] = 0;
    os_log_type_t v27 = v26 + 2;
    v26[3] = 0;
    v26[4] = v17;
    outlined init with copy of ReferenceResolutionClientProtocol?(v22, v23, &demangling cache variable for type metadata for TaskPriority?);
    LODWORD(v23) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24);
    swift_retain();
    uint64_t v28 = *(void *)(v0 + 192);
    if (v23 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 192), &demangling cache variable for type metadata for TaskPriority?);
      if (*v27) {
        goto LABEL_32;
      }
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v28, v24);
      if (*v27)
      {
LABEL_32:
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v29 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v31 = v30;
        swift_unknownObjectRelease();
        goto LABEL_35;
      }
    }
    uint64_t v29 = 0;
    uint64_t v31 = 0;
LABEL_35:
    uint64_t v32 = **(void **)(v0 + 176);
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in ConversationService.bridge(didReceiveClearContext:from:);
    *(void *)(v33 + 24) = v26;
    uint64_t v34 = v31 | v29;
    if (v31 | v29)
    {
      uint64_t v34 = v0 + 56;
      *(void *)(v0 + 56) = 0;
      *(void *)(v0 + 64) = 0;
      *(void *)(v0 + 72) = v29;
      *(void *)(v0 + 80) = v31;
    }
    uint64_t v2 = v21;
    uint64_t v12 = *(void *)(v0 + 200);
    *(void *)(v0 + 136) = 1;
    *(void *)(v0 + 144) = v34;
    *(void *)(v0 + 152) = v32;
    swift_task_create();
    swift_release();
    swift_release();
    uint64_t v3 = outlined destroy of ReferenceResolutionClientProtocol?(v12, &demangling cache variable for type metadata for TaskPriority?);
    uint64_t v7 = v43;
    unint64_t v8 = v42;
  }
  if (v8)
  {
    uint64_t v13 = (v8 - 1) & v8;
    unint64_t v14 = __clz(__rbit64(v8)) | (v7 << 6);
    uint64_t v15 = v7;
    goto LABEL_29;
  }
  int64_t v18 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    return MEMORY[0x1F4187C40](v3, v4, v5);
  }
  if (v18 >= v40) {
    goto LABEL_37;
  }
  unint64_t v19 = *(void *)(v41 + 8 * v18);
  uint64_t v15 = v7 + 1;
  if (v19) {
    goto LABEL_28;
  }
  uint64_t v15 = v7 + 2;
  if (v7 + 2 >= v40) {
    goto LABEL_37;
  }
  unint64_t v19 = *(void *)(v41 + 8 * v15);
  if (v19) {
    goto LABEL_28;
  }
  uint64_t v15 = v7 + 3;
  if (v7 + 3 >= v40) {
    goto LABEL_37;
  }
  unint64_t v19 = *(void *)(v41 + 8 * v15);
  if (v19) {
    goto LABEL_28;
  }
  uint64_t v15 = v7 + 4;
  if (v7 + 4 >= v40) {
    goto LABEL_37;
  }
  unint64_t v19 = *(void *)(v41 + 8 * v15);
  if (v19)
  {
LABEL_28:
    uint64_t v13 = (v19 - 1) & v19;
    unint64_t v14 = __clz(__rbit64(v19)) + (v15 << 6);
LABEL_29:
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    swift_retain();
    if (!v17) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
  uint64_t v20 = v7 + 5;
  while (v40 != v20)
  {
    unint64_t v19 = *(void *)(v41 + 8 * v20++);
    if (v19)
    {
      uint64_t v15 = v20 - 1;
      goto LABEL_28;
    }
  }
LABEL_37:
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  uint64_t v35 = static MessageBusActor.shared;
  *(void *)(v0 + 216) = static MessageBusActor.shared;
  uint64_t v37 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v36, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  swift_retain();
  uint64_t v38 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v38;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskGroup<()>);
  void *v38 = v0;
  v38[1] = closure #1 in ConversationService.bridge(didReceiveClearContext:from:);
  uint64_t v3 = v35;
  uint64_t v4 = v37;
  return MEMORY[0x1F4187C40](v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 208);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](closure #1 in ConversationService.bridge(didReceiveClearContext:from:), v1, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in closure #1 in ConversationService.bridge(didReceiveClearContext:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ConversationService.bridge(didReceiveClearContext:from:), a4, 0);
}

uint64_t closure #1 in closure #1 in ConversationService.bridge(didReceiveClearContext:from:)()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v3 = v1 + 16;
  uint64_t v4 = v1[19];
  uint64_t v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  uint64_t v9 = (uint64_t (*)(uint64_t, void *, void, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 16)
                                                                                  + **(int **)(v5 + 16));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v6;
  *uint64_t v6 = v0;
  v6[1] = closure #1 in closure #1 in ConversationService.bridge(didReceiveClearContext:from:);
  uint64_t v7 = MEMORY[0x1E4FBC848] + 8;
  return v9(v0 + 32, &async function pointer to closure #1 in RemoteConversationClient.reset(), 0, v7, v4, v5);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v0) {

  }
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ConversationService.bridge(didReceiveClearContext:from:), v3, 0);
}

uint64_t ConversationService.bridge(didReceiveCancelRequest:from:)(uint64_t a1)
{
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized ConversationService.bridge(didReceiveCancelRequest:from:)
                                       + async function pointer to specialized ConversationService.bridge(didReceiveCancelRequest:from:));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v5(a1);
}

uint64_t closure #1 in closure #1 in ConversationService.bridge(didReceiveCancelRequest:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ConversationService.bridge(didReceiveCancelRequest:from:), a4, 0);
}

uint64_t closure #1 in closure #1 in ConversationService.bridge(didReceiveCancelRequest:from:)()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v3 = v1 + 16;
  uint64_t v4 = v1[19];
  uint64_t v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  uint64_t v9 = (uint64_t (*)(uint64_t, void *, void, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 16)
                                                                                  + **(int **)(v5 + 16));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v6;
  *uint64_t v6 = v0;
  v6[1] = closure #1 in closure #1 in ConversationService.bridge(didReceiveClearContext:from:);
  uint64_t v7 = MEMORY[0x1E4FBC848] + 8;
  return v9(v0 + 32, &async function pointer to closure #1 in RemoteConversationClient.cancel(), 0, v7, v4, v5);
}

uint64_t ConversationService.bridge(didReceiveSiriKitPluginSignal:from:)(uint64_t a1)
{
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized ConversationService.bridge(didReceiveSiriKitPluginSignal:from:)
                                       + async function pointer to specialized ConversationService.bridge(didReceiveSiriKitPluginSignal:from:));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v5(a1);
}

uint64_t ConversationService.drainAsyncWork()()
{
  *(void *)(v1 + 40) = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = static MessageBusActor.shared;
  *(void *)(v1 + 48) = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](ConversationService.drainAsyncWork(), v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](ConversationService.drainAsyncWork(), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v4)(void);
  uint64_t v5;

  uint64_t v1 = *(void *)(v0[5] + 216);
  v0[9] = v1;
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v1 + 216) + **(int **)(*(void *)v1 + 216));
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[10] = v2;
  *uint64_t v2 = v0;
  v2[1] = ConversationService.drainAsyncWork();
  return v4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](ConversationService.drainAsyncWork(), v1, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ConversationService.drainAsyncWork()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 56) = static MessageBusActor.shared;
  _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, a2, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 64) = v3;
  *uint64_t v3 = v2;
  v3[1] = ConversationService.drainAsyncWork();
  return MEMORY[0x1F4187F28]();
}

uint64_t closure #1 in ConversationService.drainAsyncWork()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[25] = a2;
  v3[26] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[27] = swift_task_alloc();
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ConversationService.drainAsyncWork(), v4, 0);
}

uint64_t closure #1 in ConversationService.drainAsyncWork()()
{
  uint64_t v1 = *(void *)(v0 + 208);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 104);
  if ((v2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for RemoteConversationClient();
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3(&lazy protocol witness table cache variable for type RemoteConversationClient and conformance RemoteConversationClient, 255, (void (*)(uint64_t))type metadata accessor for RemoteConversationClient);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v2 = *(void *)(v0 + 16);
    uint64_t v40 = *(void *)(v0 + 24);
    uint64_t v5 = *(void *)(v0 + 32);
    uint64_t v4 = *(void *)(v0 + 40);
    unint64_t v6 = *(void *)(v0 + 48);
  }
  else
  {
    uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
    uint64_t v40 = v2 + 56;
    uint64_t v5 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v6 = v9 & *(void *)(v2 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0;
  }
  int64_t v39 = (unint64_t)(v5 + 64) >> 6;
  while (v2 < 0)
  {
    uint64_t v14 = __CocoaSet.Iterator.next()();
    if (!v14) {
      goto LABEL_37;
    }
    *(void *)(v0 + 192) = v14;
    type metadata accessor for RemoteConversationClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v15 = *(void *)(v0 + 184);
    swift_unknownObjectRelease();
    uint64_t v13 = v4;
    uint64_t v11 = v6;
    if (!v15) {
      goto LABEL_37;
    }
LABEL_30:
    unint64_t v41 = v11;
    uint64_t v42 = v13;
    uint64_t v19 = v2;
    uint64_t v21 = *(void *)(v0 + 224);
    uint64_t v20 = *(void *)(v0 + 232);
    uint64_t v22 = type metadata accessor for TaskPriority();
    uint64_t v23 = *(void *)(v22 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v20, 1, 1, v22);
    uint64_t v24 = (void *)swift_allocObject();
    v24[2] = 0;
    uint64_t v25 = v24 + 2;
    v24[3] = 0;
    v24[4] = v15;
    outlined init with copy of ReferenceResolutionClientProtocol?(v20, v21, &demangling cache variable for type metadata for TaskPriority?);
    LODWORD(v21) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22);
    swift_retain();
    uint64_t v26 = *(void *)(v0 + 224);
    if (v21 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 224), &demangling cache variable for type metadata for TaskPriority?);
      if (*v25) {
        goto LABEL_32;
      }
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v26, v22);
      if (*v25)
      {
LABEL_32:
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v27 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v29 = v28;
        swift_unknownObjectRelease();
        goto LABEL_35;
      }
    }
    uint64_t v27 = 0;
    uint64_t v29 = 0;
LABEL_35:
    uint64_t v30 = **(void **)(v0 + 200);
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in ConversationService.drainAsyncWork();
    *(void *)(v31 + 24) = v24;
    uint64_t v32 = v29 | v27;
    if (v29 | v27)
    {
      uint64_t v32 = v0 + 56;
      *(void *)(v0 + 56) = 0;
      *(void *)(v0 + 64) = 0;
      *(void *)(v0 + 72) = v27;
      *(void *)(v0 + 80) = v29;
    }
    uint64_t v2 = v19;
    unint64_t v6 = v41;
    uint64_t v10 = *(void *)(v0 + 232);
    *(void *)(v0 + 160) = 1;
    *(void *)(v0 + 168) = v32;
    *(void *)(v0 + 176) = v30;
    swift_task_create();
    swift_release();
    swift_release();
    uint64_t result = outlined destroy of ReferenceResolutionClientProtocol?(v10, &demangling cache variable for type metadata for TaskPriority?);
    uint64_t v4 = v42;
  }
  if (v6)
  {
    uint64_t v11 = (v6 - 1) & v6;
    unint64_t v12 = __clz(__rbit64(v6)) | (v4 << 6);
    uint64_t v13 = v4;
    goto LABEL_29;
  }
  int64_t v16 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    return result;
  }
  if (v16 >= v39) {
    goto LABEL_37;
  }
  unint64_t v17 = *(void *)(v40 + 8 * v16);
  uint64_t v13 = v4 + 1;
  if (v17) {
    goto LABEL_28;
  }
  uint64_t v13 = v4 + 2;
  if (v4 + 2 >= v39) {
    goto LABEL_37;
  }
  unint64_t v17 = *(void *)(v40 + 8 * v13);
  if (v17) {
    goto LABEL_28;
  }
  uint64_t v13 = v4 + 3;
  if (v4 + 3 >= v39) {
    goto LABEL_37;
  }
  unint64_t v17 = *(void *)(v40 + 8 * v13);
  if (v17) {
    goto LABEL_28;
  }
  uint64_t v13 = v4 + 4;
  if (v4 + 4 >= v39) {
    goto LABEL_37;
  }
  unint64_t v17 = *(void *)(v40 + 8 * v13);
  if (v17)
  {
LABEL_28:
    uint64_t v11 = (v17 - 1) & v17;
    unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
LABEL_29:
    uint64_t v15 = *(void *)(*(void *)(v2 + 48) + 8 * v12);
    swift_retain();
    if (!v15) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
  uint64_t v18 = v4 + 5;
  while (v39 != v18)
  {
    unint64_t v17 = *(void *)(v40 + 8 * v18++);
    if (v17)
    {
      uint64_t v13 = v18 - 1;
      goto LABEL_28;
    }
  }
LABEL_37:
  uint64_t v33 = *(void *)(v0 + 208);
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  swift_beginAccess();
  uint64_t v34 = *(void *)(v33 + 280);
  if (v34)
  {
    uint64_t v35 = *(void *)(v0 + 216);
    uint64_t v36 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 1, 1, v36);
    uint64_t v37 = (void *)swift_allocObject();
    v37[2] = 0;
    v37[3] = 0;
    v37[4] = v34;
    swift_retain();
    _sScG7addTask8priority9operationyScPSg_xyYaYAcntFyt_Tg5(v35, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in ConversationService.drainAsyncWork(), (uint64_t)v37);
    outlined destroy of ReferenceResolutionClientProtocol?(v35, &demangling cache variable for type metadata for TaskPriority?);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v38 = *(uint64_t (**)(void))(v0 + 8);
  return v38();
}

uint64_t closure #1 in closure #1 in ConversationService.drainAsyncWork()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ConversationService.drainAsyncWork(), a4, 0);
}

uint64_t closure #1 in closure #1 in ConversationService.drainAsyncWork()()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v3 = v1 + 16;
  uint64_t v4 = v1[19];
  uint64_t v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  uint64_t v9 = (uint64_t (*)(uint64_t, void *, void, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 16)
                                                                                  + **(int **)(v5 + 16));
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v6;
  *unint64_t v6 = v0;
  v6[1] = closure #1 in closure #1 in ConversationService.bridge(didReceiveClearContext:from:);
  uint64_t v7 = MEMORY[0x1E4FBC848] + 8;
  return v9(v0 + 32, &async function pointer to closure #1 in RemoteConversationClient.drainAsyncWork(), 0, v7, v4, v5);
}

uint64_t closure #2 in closure #1 in ConversationService.drainAsyncWork()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x1F4188298](closure #2 in closure #1 in ConversationService.drainAsyncWork(), a4, 0);
}

uint64_t closure #2 in closure #1 in ConversationService.drainAsyncWork()()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v3 = v1 + 16;
  uint64_t v4 = v1[19];
  uint64_t v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  uint64_t v9 = (uint64_t (*)(uint64_t, void *, void, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 16)
                                                                                  + **(int **)(v5 + 16));
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v6;
  *unint64_t v6 = v0;
  v6[1] = closure #2 in closure #1 in ConversationService.drainAsyncWork();
  uint64_t v7 = MEMORY[0x1E4FBC848] + 8;
  return v9(v0 + 32, &async function pointer to closure #1 in RemoteConversationClient.drainAsyncWork(), 0, v7, v4, v5);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v0)
  {

    uint64_t v4 = closure #1 in closure #1 in ConversationService.bridge(didReceiveClearContext:from:);
  }
  else
  {
    uint64_t v4 = AceServiceInvokerImpl.prepareForAudioHandoffFailed();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

uint64_t closure #1 in ConversationService.markNotBusyAsync()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a4;
  return MEMORY[0x1F4188298](closure #1 in ConversationService.markNotBusyAsync(), 0, 0);
}

uint64_t closure #1 in ConversationService.markNotBusyAsync()()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ConversationService.markNotBusyAsync(), v0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  unint64_t v6 = v0;
  uint64_t v1 = *(void *)(v0 + 40);
  *(void *)(v1 + 136) = 0;
  swift_release();
  uint64_t v2 = *(void *)(v1 + 128);
  OS_dispatch_semaphore.wait()();
  closure #1 in JetsamHelper.releaseJetsamTransaction()(v2, &v5);
  OS_dispatch_semaphore.signal()();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t ConversationService.ActiveTurn.__allocating_init(turnData:conversationLoggingId:bridge:taskService:invokedByPeerToPeerEORR:rrClient:useNoopEventSender:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  swift_allocObject();
  uint64_t v16 = specialized ConversationService.ActiveTurn.init(turnData:conversationLoggingId:bridge:taskService:invokedByPeerToPeerEORR:rrClient:useNoopEventSender:)(a1, a2, a3, a4, a5, a6, a7, a8);
  swift_unknownObjectRelease();
  swift_release();
  return v16;
}

uint64_t ServiceBridgeDelegate.fetchSelfReflectionDecision()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = static MessageBusActor.shared;
  v4[9] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](ServiceBridgeDelegate.fetchSelfReflectionDecision(), v5, 0);
}

uint64_t ServiceBridgeDelegate.fetchSelfReflectionDecision()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = static MessageBusActor.shared;
  *(void *)(v2 + 80) = static MessageBusActor.shared;
  uint64_t v5 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, a2, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  uint64_t v6 = swift_task_alloc();
  *(void *)(v2 + 88) = v6;
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(v2 + 48);
  *(void *)(v6 + 32) = v3;
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 96) = v7;
  void *v7 = v2;
  v7[1] = ServiceBridgeDelegate.fetchSelfReflectionDecision();
  uint64_t v8 = *(void *)(v2 + 40);
  return MEMORY[0x1F41880D8](v8, v4, v5, 0xD00000000000001DLL, 0x80000001BA066BB0, partial apply for closure #1 in ServiceBridgeDelegate.fetchSelfReflectionDecision(), v6, &type metadata for SelfReflectionAgentDecision);
}

uint64_t ServiceBridgeDelegate.fetchSelfReflectionDecision()()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](ServiceBridgeDelegate.fetchSelfReflectionDecision(), v1, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ConversationService.ActiveTurn.turnData.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of DecisionEngineResponse(v1 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData, a1, type metadata accessor for RemoteConversationTurnData);
}

uint64_t ConversationService.ActiveTurn.bridge.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ConversationService.ActiveTurn.eventSender.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_eventSender, a1);
}

uint64_t ConversationService.ActiveTurn.aceServiceInvoker.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_aceServiceInvoker, a1);
}

uint64_t ConversationService.ActiveTurn.conversationLoggingId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_conversationLoggingId;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t ConversationService.ActiveTurn.init(turnData:conversationLoggingId:bridge:taskService:invokedByPeerToPeerEORR:rrClient:useNoopEventSender:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  uint64_t v8 = specialized ConversationService.ActiveTurn.init(turnData:conversationLoggingId:bridge:taskService:invokedByPeerToPeerEORR:rrClient:useNoopEventSender:)(a1, a2, a3, a4, a5, a6, a7, a8);
  swift_unknownObjectRelease();
  swift_release();
  return v8;
}

uint64_t ConversationService.ActiveTurn.getEagerTask(conversationUserInputId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_eagerTasks);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(v6 + 16)) {
    return 0;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if (v8)
  {
    uint64_t v9 = *(void *)(*(void *)(v6 + 56) + 8 * v7);
    swift_retain();
  }
  else
  {
    uint64_t v9 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

void ConversationService.ActiveTurn.registerNeedsASRReveal(rcId:recognition:)(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    unint64_t v7 = (uint64_t *)(v3 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_needsASRReveal);
    swift_beginAccess();
    id v8 = a3;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *v7;
    uint64_t *v7 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v8, a1, a2, isUniquelyReferenced_nonNull_native);
    uint64_t *v7 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
    oslog = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      unint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v12 = 0;
      _os_log_impl(&dword_1B9C64000, oslog, v11, "[ConversationService] nil SASRecognition found, cannot reveal ASR", v12, 2u);
      MEMORY[0x1BA9E48C0](v12, -1, -1);
    }
  }
}

void *ConversationService.ExecutionTaskContext.init(forceTimeout:)(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBC860];
  v1[2] = MEMORY[0x1E4FBC860];
  v1[3] = v2;
  v1[4] = 0;
  static ConversationService.ExecutionTaskContext.expirationInNanoSeconds = a1;
  return v1;
}

uint64_t closure #1 in ConversationService.ExecutionTaskContext.registerTasks(activeTasks:completedTasks:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = static MessageBusActor.shared;
  *(void *)(v4 + 48) = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](closure #1 in ConversationService.ExecutionTaskContext.registerTasks(activeTasks:completedTasks:), v5, 0);
}

uint64_t closure #1 in ConversationService.ExecutionTaskContext.registerTasks(activeTasks:completedTasks:)()
{
  uint64_t v1 = static ConversationService.ExecutionTaskContext.expirationInNanoSeconds;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in ConversationService.ExecutionTaskContext.registerTasks(activeTasks:completedTasks:);
  return MEMORY[0x1F4187DE0](v1);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  if (v0)
  {

    uint64_t v4 = closure #1 in ConversationService.ExecutionTaskContext.registerTasks(activeTasks:completedTasks:);
  }
  else
  {
    uint64_t v4 = closure #1 in ConversationService.ExecutionTaskContext.registerTasks(activeTasks:completedTasks:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  swift_release();
  if ((static Task<>.isCancelled.getter() & 1) == 0)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
    uint64_t v2 = Logger.logObject.getter();
    uint64_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1B9C64000, v2, v3, "[ConversationService]: ExecutionTaskContext expired. Clearing it.", v4, 2u);
      MEMORY[0x1BA9E48C0](v4, -1, -1);
    }
    uint64_t v5 = *(void *)(v0 + 40);

    (*(void (**)(void))(*(void *)v5 + 192))();
  }
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t ConversationService.ExecutionTaskContext.getActiveTasks()()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConversationService.ExecutionTaskContext.getCompletedTasks()()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConversationService.ExecutionTaskContext.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t ConversationService.ExecutionTaskContext.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t ConversationService.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 64);
  swift_bridgeObjectRelease();
  outlined consume of ConversationService.State(*(id *)(v0 + 112), *(unsigned char *)(v0 + 120));
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 144);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 232);
  swift_release();
  swift_release();
  outlined consume of ConversationServiceSerialFacade?(*(void *)(v0 + 312));
  return v0;
}

uint64_t ConversationService.__deallocating_deinit()
{
  ConversationService.deinit();

  return swift_deallocClassInstance();
}

uint64_t closure #1 in ServiceBridgeDelegate.fetchSelfReflectionDecision()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<SelfReflectionAgentDecision, Never>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v11 + v10, (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  (*(void (**)(uint64_t (*)(), uint64_t, uint64_t, uint64_t))(a4 + 160))(partial apply for closure #1 in closure #1 in ServiceBridgeDelegate.fetchSelfReflectionDecision(), v11, a3, a4);
  return swift_release();
}

uint64_t closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return ConversationService.cleanupEmptyActiveConversations()();
}

uint64_t specialized Set._Variant.remove(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  Task.hash(into:)();
  Swift::Int v3 = Hasher._finalize()();
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = v3 & ~v4;
  uint64_t v6 = v2 + 56;
  if (((*(void *)(v2 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
    goto LABEL_6;
  }
  swift_retain();
  char v7 = static Task.== infix(_:_:)();
  swift_release();
  if ((v7 & 1) == 0)
  {
    uint64_t v8 = ~v4;
    unint64_t v5 = (v5 + 1) & v8;
    if ((*(void *)(v6 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
    {
      while (1)
      {
        swift_retain();
        char v9 = static Task.== infix(_:_:)();
        swift_release();
        if (v9) {
          break;
        }
        unint64_t v5 = (v5 + 1) & v8;
        if (((*(void *)(v6 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
          goto LABEL_6;
        }
      }
      uint64_t v1 = v0;
      goto LABEL_8;
    }
LABEL_6:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_8:
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *v1;
  uint64_t v14 = *v1;
  *uint64_t v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    uint64_t v12 = v14;
  }
  uint64_t v10 = *(void *)(*(void *)(v12 + 48) + 8 * v5);
  specialized _NativeSet._delete(at:)(v5);
  *uint64_t v1 = v14;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for ConversationSessionKey();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3(&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, 255, MEMORY[0x1E4FA2670]);
  swift_bridgeObjectRetain();
  uint64_t v31 = a1;
  uint64_t v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  uint64_t v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v26 = v2;
    uint64_t v27 = v6;
    uint64_t v28 = a2;
    uint64_t v29 = ~v11;
    uint64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    uint64_t v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      uint64_t v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, 255, MEMORY[0x1E4FA2670]);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        uint64_t v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v21;
    uint64_t v32 = *v21;
    *uint64_t v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      uint64_t v23 = v32;
    }
    uint64_t v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    specialized _NativeSet._delete(at:)(v12);
    *uint64_t v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
  {
    Hasher.init(_seed:)();
    uint64_t v8 = *(void *)(a1 + 112);
    uint64_t v9 = *(void *)(a1 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    Swift::Int v10 = Hasher._finalize()();
    uint64_t v11 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v12 = v10 & ~v11;
    if ((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
    {
      uint64_t v13 = *(void *)(v4 + 48);
      uint64_t v14 = *(void *)(v13 + 8 * v12);
      BOOL v15 = *(void *)(v14 + 112) == v8 && *(void *)(v14 + 120) == v9;
      if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_13:
        swift_bridgeObjectRelease();
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v17 = *v2;
        uint64_t v22 = *v2;
        *uint64_t v2 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized _NativeSet.copy()();
          uint64_t v17 = v22;
        }
        uint64_t v7 = *(void *)(*(void *)(v17 + 48) + 8 * v12);
        specialized _NativeSet._delete(at:)(v12);
        *uint64_t v2 = v22;
        goto LABEL_16;
      }
      uint64_t v18 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v18;
        if (((*(void *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
          break;
        }
        uint64_t v19 = *(void *)(v13 + 8 * v12);
        BOOL v20 = *(void *)(v19 + 112) == v8 && *(void *)(v19 + 120) == v9;
        if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
LABEL_25:
    swift_bridgeObjectRelease();
    return 0;
  }
  if (v4 < 0) {
    uint64_t v5 = *v2;
  }
  else {
    uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  char v6 = __CocoaSet.contains(_:)();
  swift_release();
  if ((v6 & 1) == 0) {
    goto LABEL_25;
  }
  uint64_t v7 = specialized Set._Variant._migrateToNative(_:removing:)(v5, a1);
LABEL_16:
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized Set._Variant._migrateToNative(_:removing:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v3 = v2;
  swift_bridgeObjectRelease();
  uint64_t v5 = __CocoaSet.count.getter();
  uint64_t v6 = swift_unknownObjectRetain();
  Swift::Int v7 = specialized _NativeSet.init(_:capacity:)(v6, v5);
  Swift::Int v22 = v7;
  Hasher.init(_seed:)();
  uint64_t v8 = *(void *)(a2 + 112);
  uint64_t v9 = *(void *)(a2 + 120);
  swift_retain();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v12 = v10 & ~v11;
  if ((*(void *)(v7 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    uint64_t v13 = *(void *)(v7 + 48);
    uint64_t v14 = *(void *)(v13 + 8 * v12);
    BOOL v15 = *(void *)(v14 + 112) == v8 && *(void *)(v14 + 120) == v9;
    if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_14:
      swift_release();
      uint64_t v19 = *(void *)(*(void *)(v7 + 48) + 8 * v12);
      specialized _NativeSet._delete(at:)(v12);
      BOOL v20 = v8 == *(void *)(v19 + 112) && v9 == *(void *)(v19 + 120);
      if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        *Swift::Int v3 = v22;
        return v19;
      }
      __break(1u);
    }
    else
    {
      uint64_t v16 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v16;
        if (((*(void *)(v7 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
          break;
        }
        uint64_t v17 = *(void *)(v13 + 8 * v12);
        BOOL v18 = *(void *)(v17 + 112) == v8 && *(void *)(v17 + 120) == v9;
        if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_14;
        }
      }
    }
    swift_release();
    __break(1u);
  }
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
        Task.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_release();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (void *)(v12 + 8 * v2);
          uint64_t v14 = (void *)(v12 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *uint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_retain();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        Swift::Int v10 = Hasher._finalize()();
        swift_release();
        unint64_t v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(v3 + 48);
          uint64_t v13 = (void *)(v12 + 8 * v2);
          uint64_t v14 = (void *)(v12 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v13 >= v14 + 1))
          {
            *uint64_t v13 = *v14;
            int64_t v2 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v15 = *(void *)(v3 + 16);
  BOOL v16 = __OFSUB__(v15, 1);
  uint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t specialized _NativeSet._delete(at:)(int64_t a1)
{
  uint64_t v3 = type metadata accessor for ConversationSessionKey();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = *v1;
  uint64_t v8 = *v1 + 56;
  uint64_t v9 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    uint64_t v31 = v1;
    uint64_t v11 = ~v9;
    uint64_t v35 = result;
    swift_retain();
    uint64_t v12 = _HashTable.previousHole(before:)();
    if ((*(void *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      unint64_t v33 = (v12 + 1) & v11;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
      uint64_t v13 = v4 + 16;
      uint64_t v32 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v34 = v13;
      BOOL v16 = (void (**)(char *, uint64_t))(v13 - 8);
      uint64_t v17 = v35;
      do
      {
        uint64_t v18 = v8;
        uint64_t v19 = v15;
        int64_t v20 = v15 * v10;
        v32(v6, *(void *)(v17 + 48) + v15 * v10, v3);
        _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3(&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, 255, MEMORY[0x1E4FA2670]);
        uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v16)(v6, v3);
        unint64_t v22 = v21 & v11;
        if (a1 >= (uint64_t)v33)
        {
          if (v22 < v33 || a1 < (uint64_t)v22)
          {
LABEL_4:
            uint64_t v8 = v18;
            uint64_t v15 = v19;
            uint64_t v17 = v35;
            goto LABEL_5;
          }
        }
        else if (v22 < v33 && a1 < (uint64_t)v22)
        {
          goto LABEL_4;
        }
        uint64_t v17 = v35;
        int64_t v25 = v19 * a1;
        uint64_t v8 = v18;
        if (v19 * a1 < v20
          || (uint64_t v15 = v19, *(void *)(v35 + 48) + v19 * a1 >= (unint64_t)(*(void *)(v35 + 48) + v20 + v19)))
        {
          swift_arrayInitWithTakeFrontToBack();
          goto LABEL_21;
        }
        a1 = v10;
        if (v25 != v20)
        {
          swift_arrayInitWithTakeBackToFront();
LABEL_21:
          uint64_t v17 = v35;
          uint64_t v15 = v19;
          a1 = v10;
        }
LABEL_5:
        unint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    uint64_t result = swift_release();
    uint64_t v1 = v31;
  }
  else
  {
    *(void *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  uint64_t v26 = *v1;
  uint64_t v27 = *(void *)(*v1 + 16);
  BOOL v28 = __OFSUB__(v27, 1);
  uint64_t v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v26 + 16) = v29;
    ++*(_DWORD *)(v26 + 36);
  }
  return result;
}

uint64_t specialized Set._Variant.removeAll(keepingCapacity:)(char a1)
{
  uint64_t v3 = *v1;
  if ((a1 & 1) == 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = MEMORY[0x1E4FBC870];
    return result;
  }
  if ((v3 & 0xC000000000000001) != 0)
  {
    uint64_t result = __CocoaSet.count.getter();
    if (result < 1) {
      return result;
    }
  }
  else
  {
    uint64_t result = *(void *)(v3 + 16);
    if (result < 1) {
      return result;
    }
  }
  if ((*v1 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
    if (v5)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RemoteConversationClient>);
      uint64_t result = static _SetStorage.allocate(capacity:)();
    }
    else
    {
      uint64_t result = MEMORY[0x1E4FBC870];
    }
    *uint64_t v1 = result;
  }
  else
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v7 = *v1;
    *uint64_t v1 = 0x8000000000000000;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeSet<RemoteConversationClient>);
    _NativeSet.removeAll(isUnique:)(isUniquelyReferenced_nonNull_native);
    *uint64_t v1 = v7;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:)(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v75 = a7;
  uint64_t v71 = a6;
  int v73 = a5;
  int v72 = a4;
  int v67 = a3;
  uint64_t v66 = a2;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v13 - 8);
  int64_t v74 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for DispatchTimeInterval();
  uint64_t v69 = *(void *)(v70 - 8);
  MEMORY[0x1F4188790](v70);
  uint64_t v68 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80[3] = a10;
  v80[4] = a11;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v80);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32))(boxed_opaque_existential_0, a8, a10);
  *(void *)(a9 + 104) = MEMORY[0x1E4FBC870];
  *(void *)(a9 + 112) = 1;
  *(unsigned char *)(a9 + 120) = 0;
  *(void *)(a9 + 136) = 0;
  type metadata accessor for CorrectionsPlatformClient();
  swift_allocObject();
  *(void *)(a9 + 184) = CorrectionsPlatformClient.init()();
  type metadata accessor for TaskService();
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = closure #1 in default argument 1 of TaskService.init(initialTask:taskIdGenerator:);
  v21[3] = 0;
  uint64_t v22 = MEMORY[0x1E4FBC860];
  v21[4] = MEMORY[0x1E4FBC860];
  *(void *)(a9 + 192) = v21;
  type metadata accessor for ConcurrentTaskPool();
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v22;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v24 = swift_allocObject();
  *(_DWORD *)(v24 + 16) = 0;
  *(void *)(v23 + 24) = v24;
  *(void *)(a9 + 200) = v23;
  type metadata accessor for ConversationService.ExecutionTaskContext();
  int64_t v25 = (void *)swift_allocObject();
  v25[2] = v22;
  v25[3] = v22;
  v25[4] = 0;
  static ConversationService.ExecutionTaskContext.expirationInNanoSeconds = 60000000000;
  *(void *)(a9 + 208) = v25;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v26 = __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v26, v16);
  type metadata accessor for AsyncSerialQueue();
  uint64_t v27 = (void *)swift_allocObject();
  v27[2] = v22;
  v27[3] = 0;
  v27[4] = 0;
  v27[5] = 0;
  uint64_t v28 = swift_allocObject();
  *(_DWORD *)(v28 + 16) = 0;
  v27[6] = v28;
  v27[7] = 0xD000000000000021;
  v27[8] = 0x80000001BA0668F0;
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))((uint64_t)v27 + OBJC_IVAR____TtC14SiriKitRuntime16AsyncSerialQueue_logger, v19, v16);
  *(void *)(a9 + 216) = v27;
  *(void *)(a9 + 224) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  *(void *)(a9 + 272) = 0;
  *(void *)(a9 + 280) = 0;
  *(void *)(a9 + 320) = 0;
  *(void *)(a9 + 328) = 0;
  *(void *)(a9 + 312) = 0;
  uint64_t v29 = v66;
  outlined init with copy of ReferenceResolutionClientProtocol?(v66, (uint64_t)&v77, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  if (v78)
  {
    outlined init with take of ReferenceResolutionClientProtocol(&v77, (uint64_t)v79);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v77, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
    uint64_t v30 = type metadata accessor for ReferenceResolutionClient();
    uint64_t v31 = ReferenceResolutionClient.__allocating_init()();
    v79[3] = v30;
    v79[4] = MEMORY[0x1E4FA1F98];
    v79[0] = v31;
  }
  uint64_t v32 = (uint64_t)v74;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v79, a9 + 144);
  if (v67)
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v33 = static StubCamBridge.shared;
    uint64_t v34 = type metadata accessor for StubCamBridge();
    uint64_t v35 = &protocol witness table for StubCamBridge;
  }
  else
  {
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v33 = static CamBridgeImpl.shared;
    uint64_t v34 = type metadata accessor for CamBridgeImpl();
    uint64_t v35 = &protocol witness table for CamBridgeImpl;
  }
  *(void *)(a9 + 88) = v34;
  *(void *)(a9 + 96) = v35;
  *(void *)(a9 + 64) = v33;
  swift_retain();
  *(void *)(a9 + 56) = a1;
  swift_retain();
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v38 = 0;
    _os_log_impl(&dword_1B9C64000, v36, v37, "[ConversationService] Ambiguity handling Feature Flag is on. Using DecisionEngine", v38, 2u);
    MEMORY[0x1BA9E48C0](v38, -1, -1);
  }

  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v79, (uint64_t)&v77);
  uint64_t v39 = *(void *)(a9 + 184);
  uint64_t v40 = type metadata accessor for LinkMetadataProvider();
  uint64_t v41 = swift_allocObject();
  id v42 = objc_allocWithZone(MEMORY[0x1E4F72CE0]);
  swift_retain();
  swift_retain();
  *(void *)(v41 + 16) = objc_msgSend(v42, sel_init);
  type metadata accessor for LinkExpansionContextBuilder();
  uint64_t v43 = (void *)swift_allocObject();
  v43[6] = v40;
  v43[7] = &protocol witness table for LinkMetadataProvider;
  v43[11] = &type metadata for LinkViewActionProvider;
  v43[12] = &protocol witness table for LinkViewActionProvider;
  void v43[2] = 0;
  v43[3] = v41;
  v43[13] = 0;
  uint64_t v44 = *(void *)(a9 + 200);
  outlined init with copy of ReferenceResolutionClientProtocol(a9 + 64, (uint64_t)v76);
  uint64_t v45 = one-time initialization token for instance;
  swift_retain();
  if (v45 != -1) {
    swift_once();
  }
  uint64_t v46 = static DecisionEngineCurareDonator.instance;
  uint64_t v47 = type metadata accessor for DecisionEngine();
  uint64_t v48 = swift_allocObject();
  swift_retain();
  uint64_t v49 = specialized DecisionEngine.init(conversationHandlerLocator:rrClient:correctionsClient:linkExpansionContextBuilder:preFlowBlockingWork:camBridge:curareDonator:)(a1, (uint64_t)&v77, v39, (uint64_t)v43, v44, v76, v46, v48);
  swift_release();
  swift_release();
  *(void *)(a9 + 40) = v47;
  *(void *)(a9 + 48) = &protocol witness table for DecisionEngine;
  *(void *)(a9 + 16) = v49;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v50 = static OS_dispatch_queue.main.getter();
  if (one-time initialization token for defaultTimeout != -1) {
    swift_once();
  }
  uint64_t v51 = v70;
  uint64_t v52 = __swift_project_value_buffer(v70, (uint64_t)static JetsamHelper.defaultTimeout);
  uint64_t v53 = v69;
  uint64_t v54 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v68, v52, v51);
  type metadata accessor for JetsamHelper();
  int v55 = (void *)swift_allocObject();
  uint64_t v56 = (void *)((char *)v55 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction);
  *uint64_t v56 = 0;
  v56[1] = 0;
  v55[2] = 0xD00000000000002CLL;
  void v55[3] = 0x80000001BA066920;
  v55[4] = dispatch_semaphore_create(1);
  v55[5] = v50;
  (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))((uint64_t)v55 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_timeout, v54, v51);
  *(void *)(a9 + 128) = v55;
  uint64_t v57 = v75;
  *(void *)(a9 + 288) = v71;
  *(void *)(a9 + 296) = v57;
  *(unsigned char *)(a9 + 304) = v72 & 1;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v80, a9 + 232);
  if (v73)
  {
    uint64_t v58 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v32, 1, 1, v58);
    uint64_t v59 = one-time initialization token for shared;
    swift_retain();
    swift_retain();
    if (v59 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v60 = static MessageBusActor.shared;
    uint64_t v62 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v61, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
    int v63 = (void *)swift_allocObject();
    v63[2] = v60;
    v63[3] = v62;
    v63[4] = a9;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v32, (uint64_t)&closure #1 in ConversationService.warmup()partial apply, (uint64_t)v63);
    swift_release();
    swift_release();
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v80);
  outlined destroy of ReferenceResolutionClientProtocol?(v29, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v79);
  return a9;
}

uint64_t outlined consume of ConversationServiceSerialFacade?(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined copy of ConversationServiceSerialFacade?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t type metadata accessor for MessageBusActor()
{
  return self;
}

uint64_t sub_1B9E8421C()
{
  return objectdestroyTm_4(MEMORY[0x1E4FBC8D0], 40);
}

uint64_t specialized DecisionEngine.init(conversationHandlerLocator:rrClient:correctionsClient:linkExpansionContextBuilder:preFlowBlockingWork:camBridge:curareDonator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, uint64_t a7, uint64_t a8)
{
  v32[3] = type metadata accessor for CorrectionsPlatformClient();
  v32[4] = &protocol witness table for CorrectionsPlatformClient;
  v32[0] = a3;
  v31[3] = type metadata accessor for ConcurrentTaskPool();
  unsigned char v31[4] = &protocol witness table for ConcurrentTaskPool;
  v31[0] = a5;
  type metadata accessor for ServerFallbackDisablingUtils();
  *(void *)(a8 + 176) = 0;
  *(void *)(a8 + 184) = 0;
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  v15[3] = closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:);
  v15[4] = 0;
  *(void *)(a8 + 192) = v15;
  *(_OWORD *)(a8 + 200) = 0u;
  *(_OWORD *)(a8 + 216) = 0u;
  *(void *)(a8 + 232) = 0;
  *(void *)(a8 + 24) = a1;
  outlined init with copy of ReferenceResolutionClientProtocol(a2, a8 + 48);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v31, (uint64_t)&v28);
  type metadata accessor for ConversationHelper();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  outlined init with take of ReferenceResolutionClientProtocol(&v28, v16 + 24);
  *(void *)(a8 + 32) = v16;
  uint64_t v17 = type metadata accessor for LinkMetadataProvider();
  uint64_t v18 = swift_allocObject();
  id v19 = objc_allocWithZone(MEMORY[0x1E4F72CE0]);
  swift_retain_n();
  swift_retain();
  *(void *)(v18 + 16) = objc_msgSend(v19, sel_init);
  uint64_t v20 = type metadata accessor for AppShortcutStateProvider();
  uint64_t v21 = swift_allocObject();
  type metadata accessor for AppShortcutExpansionContextBuilder();
  uint64_t v22 = (void *)swift_allocObject();
  v22[9] = v17;
  v22[10] = &protocol witness table for LinkMetadataProvider;
  v22[6] = v18;
  v22[14] = v20;
  v22[15] = &protocol witness table for AppShortcutStateProvider;
  v22[11] = v21;
  type metadata accessor for ConditionalIntentMetadataStore();
  v22[4] = 0;
  v22[5] = 0;
  v22[3] = 0;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = MEMORY[0x1E4FBC868];
  v22[2] = v23;
  type metadata accessor for ActionGenerator();
  uint64_t v24 = (void *)swift_allocObject();
  v24[3] = v22;
  v24[4] = a1;
  v24[2] = a4;
  *(void *)(a8 + 16) = v24;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v32, (uint64_t)&v28);
  type metadata accessor for CorrectionsService();
  uint64_t v25 = swift_allocObject();
  outlined init with take of ReferenceResolutionClientProtocol(&v28, v25 + 16);
  *(void *)(v25 + 56) = a1;
  *(void *)(a8 + 40) = v25;
  *(void *)(a8 + 88) = a7;
  uint64_t v29 = type metadata accessor for AppShortcutProvider();
  uint64_t v30 = MEMORY[0x1E4FA1D50];
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v28);
  swift_retain();
  AppShortcutProvider.init()();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v32);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  outlined init with take of ReferenceResolutionClientProtocol(&v28, a8 + 96);
  outlined init with take of ReferenceResolutionClientProtocol(a6, a8 + 136);
  return a8;
}

uint64_t specialized ConversationService.ActiveTurn.init(turnData:conversationLoggingId:bridge:taskService:invokedByPeerToPeerEORR:rrClient:useNoopEventSender:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  uint64_t v9 = v8;
  int v90 = a6;
  int v91 = a8;
  uint64_t v88 = a5;
  uint64_t v15 = type metadata accessor for RemoteConversationTurnData(0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for InvocationStateImpl();
  uint64_t v19 = MEMORY[0x1F4188790](v18 - 8);
  uint64_t v87 = (uint64_t)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (uint64_t *)((char *)&v82 - v21);
  uint64_t v23 = MEMORY[0x1E4FBC868];
  *(void *)(v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_eagerTasks) = MEMORY[0x1E4FBC868];
  *(void *)(v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_needsASRReveal) = v23;
  *(void *)(v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_topNlParse) = v23;
  *(void *)(v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnInput) = v23;
  *(void *)(v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_nlResponseCode) = v23;
  *(void *)(v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_executionInputSystem) = v23;
  outlined init with copy of DecisionEngineResponse((uint64_t)a1, v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData, type metadata accessor for RemoteConversationTurnData);
  uint64_t v24 = (void *)(v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_bridge);
  *uint64_t v24 = a3;
  v24[1] = a4;
  uint64_t v25 = *(char **)((char *)a1 + *(int *)(v15 + 44));
  uint64_t v92 = a2;
  uint64_t v93 = a7;
  if (v25)
  {
    uint64_t v85 = v22;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v27 = ServiceBridgeDelegate.xpcWrapper.getter(ObjectType, a4);
    uint64_t v83 = *a1;
    uint64_t v84 = v27;
    uint64_t v89 = a1[1];
    uint64_t v28 = *(void *)&v25[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_refId + 8];
    uint64_t v86 = *(void *)&v25[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_refId];
    outlined init with copy of DecisionEngineResponse((uint64_t)a1, (uint64_t)v17, type metadata accessor for RemoteConversationTurnData);
    if (v28)
    {
      uint64_t v82 = v28;
    }
    else
    {
      uint64_t v48 = *((void *)v17 + 3);
      uint64_t v86 = *((void *)v17 + 2);
      uint64_t v82 = v48;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v49 = v25;
    outlined destroy of DecisionEngineResponse((uint64_t)v17, type metadata accessor for RemoteConversationTurnData);
    uint64_t v50 = *(void **)((char *)a1 + *(int *)(v15 + 28));
    uint64_t v51 = OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceRemoteExecution;
    uint64_t v52 = *(void **)&v49[OBJC_IVAR____TtC14SiriKitRuntime21ProxiedRequestContext_aceRemoteExecution];
    if (v52)
    {
      id v53 = v50;
      id v54 = objc_msgSend(v52, sel_runLocation);
      if (v54)
      {
        int v55 = v54;
        uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v52 = v57;
      }
      else
      {
        uint64_t v56 = 0;
        uint64_t v52 = 0;
      }
    }
    else
    {
      id v58 = v50;
      uint64_t v56 = 0;
    }
    char v59 = specialized static RunLocation.convert(aceRunLocation:)(v56, v52) & 1;
    swift_bridgeObjectRelease();
    uint64_t v60 = *(void **)&v49[v51];
    if (v60)
    {
      id v61 = objc_msgSend(v60, sel_invocationDeviceAssistantId);
      if (v61)
      {
        uint64_t v62 = v61;
        uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v65 = v64;

        uint64_t v66 = *(void **)&v49[v51];
        if (!v66) {
          goto LABEL_20;
        }
      }
      else
      {
        uint64_t v63 = 0;
        uint64_t v65 = 0;
        uint64_t v66 = *(void **)&v49[v51];
        if (!v66) {
          goto LABEL_20;
        }
      }
      id v67 = objc_msgSend(v66, sel_executionDeviceAssistantId, v82);
      if (v67)
      {
        uint64_t v68 = v67;
        uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v71 = v70;

        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v65 = 0;
      uint64_t v63 = 0;
    }
LABEL_20:
    uint64_t v69 = 0;
    uint64_t v71 = 0;
LABEL_21:
    outlined init with copy of ReferenceResolutionClientProtocol(v93, (uint64_t)&v95);
    type metadata accessor for AceServiceInvokerImpl();
    swift_allocObject();
    *((void *)&v81 + 1) = v69;
    *(void *)&long long v81 = v65;
    uint64_t v36 = AceServiceInvokerImpl.init(bridge:executionRequestId:rootRequestId:requestContextData:runLocation:invocationDeviceAssistantId:executionDeviceAssistantId:invokedByPeerToPeerEORR:rrClient:)(v84, v83, v89, v86, v82, v50, v59, v63, v81, v71, v90 & 1, (uint64_t)&v95);
    uint64_t v72 = *a1;
    unint64_t v73 = a1[1];
    int64_t v74 = v50;
    swift_bridgeObjectRetain();
    uint64_t v22 = v85;
    InvocationStateImpl.init(proxiedRequestContext:localRequestContextData:executionRequestId:)(v49, v74, v72, v73, v85);
    if (v91) {
      goto LABEL_22;
    }
    goto LABEL_5;
  }
  uint64_t v29 = swift_getObjectType();
  uint64_t v89 = ServiceBridgeDelegate.xpcWrapper.getter(v29, a4);
  uint64_t v30 = *a1;
  uint64_t v31 = a1[1];
  uint64_t v32 = a1[3];
  uint64_t v85 = (void *)a1[2];
  uint64_t v86 = v30;
  uint64_t v33 = *(int *)(v15 + 28);
  uint64_t v34 = *(void **)((char *)a1 + v33);
  outlined init with copy of ReferenceResolutionClientProtocol(a7, (uint64_t)&v95);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v95, (uint64_t)v94, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  type metadata accessor for AceServiceInvokerImpl();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v35 = v34;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v36 = AceServiceInvokerImpl.init(bridge:executionRequestId:rootRequestId:requestContextData:runLocation:invocationDeviceAssistantId:executionDeviceAssistantId:invokedByPeerToPeerEORR:rrClient:)(v89, v86, v31, (uint64_t)v85, v32, v35, 0, 0, 0, 0, v90 & 1, (uint64_t)v94);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v95, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  uint64_t v37 = *a1;
  uint64_t v38 = a1[1];
  uint64_t v39 = *(void **)((char *)a1 + v33);
  uint64_t v97 = 0;
  long long v95 = 0u;
  long long v96 = 0u;
  swift_bridgeObjectRetain();
  InvocationStateImpl.init(executionRequestId:requestContextData:previousInvocationState:)(v37, v38, v39, (uint64_t)&v95, v22);
  if (v91)
  {
LABEL_22:
    uint64_t v75 = type metadata accessor for NoopSiriKitEventSender();
    uint64_t v44 = swift_allocObject();
    uint64_t v45 = (uint64_t *)(v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_eventSender);
    *(void *)(v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_eventSender + 24) = v75;
    uint64_t v46 = (unint64_t *)&lazy protocol witness table cache variable for type NoopSiriKitEventSender and conformance NoopSiriKitEventSender;
    uint64_t v47 = type metadata accessor for NoopSiriKitEventSender;
    goto LABEL_23;
  }
LABEL_5:
  uint64_t v40 = type metadata accessor for InvocationScopedSiriKitEventSender();
  uint64_t v41 = swift_allocObject();
  uint64_t v42 = v87;
  outlined init with copy of DecisionEngineResponse((uint64_t)v22, v87, (uint64_t (*)(void))type metadata accessor for InvocationStateImpl);
  swift_retain();
  uint64_t v43 = v88;
  swift_retain();
  uint64_t v44 = specialized InvocationScopedSiriKitEventSender.init(aceServiceInvoker:taskService:invocationState:)(v36, v43, v42, v41);
  uint64_t v45 = (uint64_t *)(v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_eventSender);
  *(void *)(v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_eventSender + 24) = v40;
  uint64_t v46 = (unint64_t *)&lazy protocol witness table cache variable for type InvocationScopedSiriKitEventSender and conformance InvocationScopedSiriKitEventSender;
  uint64_t v47 = type metadata accessor for InvocationScopedSiriKitEventSender;
LABEL_23:
  v45[4] = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3(v46, 255, (void (*)(uint64_t))v47);
  *uint64_t v45 = v44;
  uint64_t v76 = v92;
  uint64_t v77 = v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_conversationLoggingId;
  uint64_t v78 = type metadata accessor for UUID();
  uint64_t v79 = *(void *)(v78 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16))(v77, v76, v78);
  *((void *)&v96 + 1) = type metadata accessor for AceServiceInvokerImpl();
  uint64_t v97 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3(&lazy protocol witness table cache variable for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl, 255, (void (*)(uint64_t))type metadata accessor for AceServiceInvokerImpl);
  *(void *)&long long v95 = v36;
  __swift_destroy_boxed_opaque_existential_1Tm(v93);
  (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v76, v78);
  outlined destroy of DecisionEngineResponse((uint64_t)a1, type metadata accessor for RemoteConversationTurnData);
  outlined destroy of DecisionEngineResponse((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for InvocationStateImpl);
  outlined init with take of ReferenceResolutionClientProtocol(&v95, v9 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_aceServiceInvoker);
  return v9;
}

uint64_t sub_1B9E84C94()
{
  swift_release();
  swift_release();

  swift_release();
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t sub_1B9E84D4C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t partial apply for closure #1 in ConversationService.bridge(didReceiveInput:from:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationService.bridge(didReceiveInput:from:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1B9E84E80()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t partial apply for closure #1 in ConversationService.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationService.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t specialized static ConversationService.skipEmptyAsr(_:)(uint64_t a1)
{
  *(void *)(v1 + 144) = a1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = static MessageBusActor.shared;
  *(void *)(v1 + 152) = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](specialized static ConversationService.skipEmptyAsr(_:), v2, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v2 = *(void *)(*(void *)v1 + 152);
  *(void *)(*(void *)v1 + 168) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](specialized static ConversationService.skipEmptyAsr(_:), v2, 0);
}

uint64_t specialized static ConversationService.skipEmptyAsr(_:)()
{
  uint64_t v1 = *(void **)(v0 + 144);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v4;
  void *v4 = v0;
  v4[1] = specialized static ConversationService.skipEmptyAsr(_:);
  return MEMORY[0x1F4152570](v2, v3);
}

id specialized static ConversationService.skipEmptyAsr(_:)()
{
  unint64_t v1 = v0[21];
  swift_release();
  uint64_t v44 = v0;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    id result = (id)_CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = (uint64_t)result;
    if (result) {
      goto LABEL_3;
    }
LABEL_20:
    uint64_t v7 = (void *)MEMORY[0x1E4FBC860];
LABEL_21:
    swift_bridgeObjectRelease_n();
    uint64_t v18 = v7[2];
    unint64_t v19 = MEMORY[0x1E4FBC860];
    if (v18)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = 0;
      uint64_t v21 = MEMORY[0x1E4FBC860];
      do
      {
        uint64_t v22 = v7[v20++ + 4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v22);
        swift_bridgeObjectRelease();
      }
      while (v18 != v20);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v21 = MEMORY[0x1E4FBC860];
    }
    swift_bridgeObjectRelease();
    unint64_t v45 = v19;
    uint64_t v23 = *(void *)(v21 + 16);
    if (v23)
    {
      uint64_t v24 = (uint64_t)(v44 + 2);
      uint64_t v25 = v44 + 17;
      uint64_t v26 = v21 + 32;
      swift_bridgeObjectRetain();
      do
      {
        outlined init with copy of Any(v26, v24);
        outlined init with copy of Any(v24, (uint64_t)(v44 + 6));
        type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAUIAssistantUtteranceView);
        if ((swift_dynamicCast() & 1) == 0) {
          *uint64_t v25 = 0;
        }
        uint64_t v27 = __swift_destroy_boxed_opaque_existential_1Tm(v24);
        if (*v25)
        {
          MEMORY[0x1BA9E3030](v27);
          if (*(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        v26 += 32;
        --v23;
      }
      while (v23);
      swift_bridgeObjectRelease();
      unint64_t v19 = v45;
    }
    swift_bridgeObjectRelease();
    if (v19 >> 62) {
      goto LABEL_50;
    }
    uint64_t v28 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v28; uint64_t v28 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v29 = 0;
      unint64_t v43 = v19 & 0xC000000000000001;
      uint64_t v30 = &off_1E61F1000;
      while (1)
      {
        id v31 = v43 ? (id)MEMORY[0x1BA9E3990](v29, v19) : *(id *)(v19 + 8 * v29 + 32);
        uint64_t v32 = v31;
        uint64_t v33 = v29 + 1;
        if (__OFADD__(v29, 1)) {
          break;
        }
        id v34 = [v31 (SEL)v30[369]];
        if (v34)
        {
          unint64_t v35 = v19;

          uint64_t v36 = v30;
          id result = [v32 (SEL)v30[369]];
          if (!result) {
            goto LABEL_56;
          }
          uint64_t v37 = result;
          uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v40 = v39;

          v44[13] = v38;
          v44[14] = v40;
          v44[15] = 0xD000000000000019;
          v44[16] = 0x80000001BA067140;
          lazy protocol witness table accessor for type String and conformance String();
          lazy protocol witness table accessor for type String and conformance String();
          LOBYTE(v37) = BidirectionalCollection<>.starts<A>(with:)();
          swift_bridgeObjectRelease();

          uint64_t v30 = v36;
          unint64_t v19 = v35;
          if (v37)
          {
            uint64_t v41 = 1;
            goto LABEL_52;
          }
        }
        else
        {
        }
        ++v29;
        if (v33 == v28) {
          goto LABEL_51;
        }
      }
      __break(1u);
LABEL_50:
      swift_bridgeObjectRetain();
    }
LABEL_51:
    uint64_t v41 = 0;
LABEL_52:
    swift_bridgeObjectRelease_n();
    uint64_t v42 = (uint64_t (*)(uint64_t))v44[1];
    return (id)v42(v41);
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  id result = (id)swift_bridgeObjectRetain();
  if (!v2) {
    goto LABEL_20;
  }
LABEL_3:
  if (v2 >= 1)
  {
    uint64_t v4 = 0;
    unint64_t v5 = v1 & 0xC000000000000001;
    uint64_t v6 = v0[21] + 32;
    uint64_t v7 = (void *)MEMORY[0x1E4FBC860];
    while (1)
    {
      id v8 = v5 ? (id)MEMORY[0x1BA9E3990](v4, v44[21]) : *(id *)(v6 + 8 * v4);
      uint64_t v9 = v8;
      uint64_t v10 = (void *)RecentDialog.addViews.getter();
      id v11 = objc_msgSend(v10, sel_views);

      if (!v11) {
        break;
      }

      uint64_t v12 = (void *)RecentDialog.addViews.getter();
      id v13 = objc_msgSend(v12, sel_views);

      if (v13)
      {
        type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
        unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v15 = specialized _arrayForceCast<A, B>(_:)(v14);
        swift_bridgeObjectRelease();
LABEL_14:

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
        }
        unint64_t v17 = v7[2];
        unint64_t v16 = v7[3];
        if (v17 >= v16 >> 1) {
          uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v7);
        }
        v7[2] = v17 + 1;
        v7[v17 + 4] = v15;
        goto LABEL_6;
      }

LABEL_6:
      if (v2 == ++v4) {
        goto LABEL_21;
      }
    }
    uint64_t v15 = MEMORY[0x1E4FBC860];
    goto LABEL_14;
  }
  __break(1u);
LABEL_56:
  __break(1u);
  return result;
}

uint64_t sub_1B9E857AC()
{
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t specialized ConversationService.bridge(didReceiveClearContext:from:)()
{
  *(void *)(v1 + 112) = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = static MessageBusActor.shared;
  *(void *)(v1 + 120) = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](specialized ConversationService.bridge(didReceiveClearContext:from:), v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  *(void *)(v0 + 128) = static MessageBusActor.shared;
  _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v2, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v3;
  *uint64_t v3 = v0;
  v3[1] = specialized ConversationService.bridge(didReceiveClearContext:from:);
  return MEMORY[0x1F4187F28]();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 120);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](specialized ConversationService.bridge(didReceiveClearContext:from:), v1, 0);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  if ((MEMORY[0x1E4FBC860] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
    uint64_t v1 = specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x1E4FBC860]);
  }
  else {
    uint64_t v1 = MEMORY[0x1E4FBC870];
  }
  uint64_t v2 = *(void *)(v0 + 112);
  swift_beginAccess();
  *(void *)(v2 + 104) = v1;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 144) = *(void *)(v2 + 192);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v3 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](specialized ConversationService.bridge(didReceiveClearContext:from:), v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 120);
  TaskService.onTurnInvalidated()();
  return MEMORY[0x1F4188298](specialized ConversationService.bridge(didReceiveClearContext:from:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  unsigned __int8 v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 112);
  swift_release();
  swift_beginAccess();
  *(void *)(v1 + 272) = 0;
  swift_beginAccess();
  uint64_t v2 = *(void **)(v1 + 112);
  *(void *)(v1 + 112) = 1;
  uint64_t v3 = *(unsigned char *)(v1 + 120);
  *(unsigned char *)(v1 + 120) = 0;
  outlined consume of ConversationService.State(v2, v3);
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t partial apply for closure #1 in ConversationService.drainAsyncWork()(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationService.drainAsyncWork()(a1, a2, v2);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegate.fetchSelfReflectionDecision()(uint64_t a1)
{
  return closure #1 in ServiceBridgeDelegate.fetchSelfReflectionDecision()(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_1B9E85F40()
{
  return objectdestroyTm_4(MEMORY[0x1E4FBC8D0], 40);
}

uint64_t partial apply for closure #1 in ConversationService.ExecutionTaskContext.registerTasks(activeTasks:completedTasks:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationService.ExecutionTaskContext.registerTasks(activeTasks:completedTasks:)(a1, v4, v5, v6);
}

uint64_t associated type witness table accessor for GlobalActor.ActorType : Actor in MessageBusActor(uint64_t a1, uint64_t a2)
{
  return _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, a2, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
}

void *sub_1B9E86058@<X0>(void *a1@<X8>)
{
  id result = ConversationService.serialFacade.getter();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t method lookup function for MessageBusActor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for MessageBusActor);
}

uint64_t dispatch thunk of MessageBusActor.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t type metadata accessor for ConversationService()
{
  return self;
}

uint64_t method lookup function for ConversationService(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationService);
}

uint64_t dispatch thunk of ConversationService.__allocating_init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:)()
{
  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t initializeBufferWithCopyOfBuffer for ConversationService.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  outlined copy of ConversationService.State(*(id *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

void destroy for ConversationService.State(uint64_t a1)
{
}

uint64_t assignWithCopy for ConversationService.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 8);
  outlined copy of ConversationService.State(*(id *)a2, v4);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of ConversationService.State(v5, v6);
  return a1;
}

uint64_t assignWithTake for ConversationService.State(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  unsigned __int8 v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  outlined consume of ConversationService.State(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConversationService.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >> 1 >= 0xFFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 8190);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 8) >> 6) | (4
                                             * ((*(void *)a1 >> 58) & 0x3C | (*(void *)a1 >> 1) & 3 | (((*(unsigned __int8 *)(a1 + 8) >> 1) & 0x1F) << 6)))) ^ 0x1FFF;
  if (v3 >= 0x1FFD) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ConversationService.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >> 1 > 0xFFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)id result = a2 - 8190;
    if (a3 >> 1 >= 0xFFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >> 1 >= 0xFFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x7FF | ((-a2 & 0x1FFF) << 11);
      *(void *)id result = ((v3 << 58) | (2 * v3)) & 0xF000000000000007;
      *(unsigned char *)(result + 8) = (v3 >> 5) & 0xFE;
    }
  }
  return result;
}

uint64_t getEnumTag for ConversationService.State(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8) >> 6;
}

uint64_t destructiveProjectEnumData for ConversationService.State(uint64_t result)
{
  *(unsigned char *)(result + 8) &= 0x3Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for ConversationService.State(uint64_t result, char a2)
{
  char v2 = *(unsigned char *)(result + 8) & 1 | (a2 << 6);
  *(void *)result &= 0xFFFFFFFFFFFFFF9uLL;
  *(unsigned char *)(result + 8) = v2;
  return result;
}

ValueMetadata *type metadata accessor for ConversationService.State()
{
  return &type metadata for ConversationService.State;
}

uint64_t *initializeBufferWithCopyOfBuffer for ConversationService.EagerResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v17 = type metadata accessor for ServerFallbackReason();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v17 - 8) + 16))(a1, a2, v17);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_retain();
      swift_retain();
      uint64_t v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationUserInput, RemoteConversationClient, Input?))
                  + 64);
      uint64_t v10 = (char *)a1 + v9;
      id v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for Input();
      uint64_t v13 = *(void *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
        memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *assignWithCopy for ConversationService.EagerResult(void *a1, void *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  outlined destroy of DecisionEngineResponse((uint64_t)a1, type metadata accessor for ConversationService.EagerResult);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v13 = type metadata accessor for ServerFallbackReason();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
LABEL_11:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 1:
      *a1 = *a2;
      swift_retain();
      goto LABEL_11;
    case 0:
      *a1 = *a2;
      a1[1] = a2[1];
      swift_retain();
      swift_retain();
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationUserInput, RemoteConversationClient, Input?))
                  + 64);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for Input();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      goto LABEL_11;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

_OWORD *initializeWithTake for ConversationService.EagerResult(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v13 = type metadata accessor for ServerFallbackReason();
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
LABEL_8:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationUserInput, RemoteConversationClient, Input?))
                + 64);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Input();
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    goto LABEL_8;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

_OWORD *assignWithTake for ConversationService.EagerResult(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of DecisionEngineResponse((uint64_t)a1, type metadata accessor for ConversationService.EagerResult);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v13 = type metadata accessor for ServerFallbackReason();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
LABEL_9:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      *a1 = *a2;
      uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationUserInput, RemoteConversationClient, Input?))
                  + 64);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for Input();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      goto LABEL_9;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void type metadata completion function for ConversationService.EagerResult()
{
  type metadata accessor for Input?();
  if (v0 <= 0x3F)
  {
    uint64_t v1 = MEMORY[0x1E4FBADB0] + 64;
    swift_getTupleTypeLayout3();
    int v5 = &v4;
    uint64_t v6 = v1;
    uint64_t v2 = type metadata accessor for ServerFallbackReason();
    if (v3 <= 0x3F)
    {
      uint64_t v7 = *(void *)(v2 - 8) + 64;
      swift_initEnumMetadataMultiPayload();
    }
  }
}

void type metadata accessor for Input?()
{
  if (!lazy cache variable for type metadata for Input?)
  {
    type metadata accessor for Input();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Input?);
    }
  }
}

uint64_t ObjC metadata update function for ConversationService.ActiveTurn()
{
  return type metadata accessor for ConversationService.ActiveTurn(0);
}

uint64_t type metadata completion function for ConversationService.ActiveTurn()
{
  uint64_t result = type metadata accessor for RemoteConversationTurnData(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t method lookup function for ConversationService.ActiveTurn(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationService.ActiveTurn);
}

uint64_t dispatch thunk of ConversationService.ActiveTurn.__allocating_init(turnData:conversationLoggingId:bridge:taskService:invokedByPeerToPeerEORR:rrClient:useNoopEventSender:)()
{
  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t dispatch thunk of ConversationService.ActiveTurn.registerEagerTask(forInput:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of ConversationService.ActiveTurn.getEagerTask(conversationUserInputId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of ConversationService.ActiveTurn.registerNeedsASRReveal(rcId:recognition:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of ConversationService.ActiveTurn.getNeedsASRReveal(rcId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of ConversationService.ActiveTurn.registerInput(rcId:input:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of ConversationService.ActiveTurn.getInput(rcId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of ConversationService.ActiveTurn.registerNlResponseCode(rcId:responseCode:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of ConversationService.ActiveTurn.getNlResponseCode(rcId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of ConversationService.ActiveTurn.registerExecutionInputSystem(rcId:system:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of ConversationService.ActiveTurn.getExecutionInputSystem(rcId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t type metadata accessor for ConversationService.ExecutionTaskContext()
{
  return self;
}

uint64_t method lookup function for ConversationService.ExecutionTaskContext(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationService.ExecutionTaskContext);
}

uint64_t dispatch thunk of ConversationService.ExecutionTaskContext.__allocating_init(forceTimeout:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of ConversationService.ExecutionTaskContext.registerTasks(activeTasks:completedTasks:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of ConversationService.ExecutionTaskContext.clear()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of ConversationService.ExecutionTaskContext.getActiveTasks()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of ConversationService.ExecutionTaskContext.getCompletedTasks()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t sub_1B9E87030()
{
  return objectdestroy_156Tm((uint64_t *)&demangling cache variable for type metadata for CheckedContinuation<SelfReflectionAgentDecision, Never>);
}

uint64_t partial apply for closure #1 in closure #1 in ServiceBridgeDelegate.fetchSelfReflectionDecision()()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t sub_1B9E870CC()
{
  return objectdestroyTm_4(MEMORY[0x1E4FBC8D0], 40);
}

uint64_t partial apply for closure #2 in closure #1 in ConversationService.drainAsyncWork()()
{
  uint64_t v2 = *(void *)(v0 + 32);
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  v3[2] = v2;
  return MEMORY[0x1F4188298](closure #2 in closure #1 in ConversationService.drainAsyncWork(), v2, 0);
}

uint64_t sub_1B9E87190()
{
  return objectdestroyTm_4(MEMORY[0x1E4FBC8D0], 40);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationService.drainAsyncWork()()
{
  uint64_t v2 = *(void *)(v0 + 32);
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  v3[2] = v2;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ConversationService.drainAsyncWork(), v2, 0);
}

uint64_t sub_1B9E87254()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRyt_Tg5TA(uint64_t a1)
{
  char v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRyt_Tg5Tu);
  return v6(a1, v4);
}

uint64_t partial apply for closure #1 in ConversationService.bridge(didReceiveCancelRequest:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationService.bridge(didReceiveCancelRequest:from:)(a1, a2, v2);
}

uint64_t sub_1B9E873F0()
{
  return objectdestroyTm_4(MEMORY[0x1E4FBC8D0], 40);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationService.bridge(didReceiveCancelRequest:from:)()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  v3[2] = v2;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ConversationService.bridge(didReceiveCancelRequest:from:), v2, 0);
}

uint64_t partial apply for closure #1 in ConversationService.bridge(didReceiveClearContext:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationService.bridge(didReceiveClearContext:from:)(a1, a2, v2);
}

uint64_t sub_1B9E87560()
{
  return objectdestroyTm_4(MEMORY[0x1E4FBC8D0], 40);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationService.bridge(didReceiveClearContext:from:)()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  v3[2] = v2;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ConversationService.bridge(didReceiveClearContext:from:), v2, 0);
}

uint64_t sub_1B9E87624()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)();
}

uint64_t closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)partial apply()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in $defer #1 () in ConversationService.handleConversationOrSendErrorToBridge(_:needsPrepare:speechData:turnData:bridge:userInput:)();
}

uint64_t sub_1B9E8777C()
{
  return objectdestroyTm_4(MEMORY[0x1E4FBC8D0], 40);
}

uint64_t partial apply for closure #1 in ConversationService.markNotBusyAsync()()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  v3[5] = v2;
  return MEMORY[0x1F4188298](closure #1 in ConversationService.markNotBusyAsync(), 0, 0);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:)(a1, a2, v7, v6);
}

uint64_t sub_1B9E878F8()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in closure #1 in ConversationService.bridge(didReceiveInput:from:)(a1, v4, v5, v7, v6);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSb_TG5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSb_TG5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTRSb_TG5Tu);
  return v6(a1, v4);
}

uint64_t partial apply for closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:)(a1, a2, v2);
}

uint64_t outlined consume of RemoteConversationClient??(uint64_t result)
{
  if (result != 1) {
    return swift_release();
  }
  return result;
}

uint64_t sub_1B9E87B74()
{
  return objectdestroyTm_4(MEMORY[0x1E4FBC8D0], 40);
}

uint64_t partial apply for closure #2 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  v5[12] = a1;
  v5[13] = v4;
  return MEMORY[0x1F4188298](closure #2 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:), v4, 0);
}

uint64_t sub_1B9E87C40()
{
  return objectdestroyTm_4(MEMORY[0x1E4FBC8D0], 40);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  v5[12] = a1;
  v5[13] = v4;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:), v4, 0);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTR14SiriKitRuntime24RemoteConversationClientCSg_TG5TA(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTR14SiriKitRuntime24RemoteConversationClientCSg_TG5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzlTR14SiriKitRuntime24RemoteConversationClientCSg_TG5Tu);
  return v6(a1, v4);
}

uint64_t sub_1B9E87DC4()
{
  return objectdestroyTm_4(MEMORY[0x1E4FBC8D0], 40);
}

uint64_t sub_1B9E87DE0()
{
  uint64_t v1 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v13 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + v1[6];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }

  uint64_t v9 = v4 + v1[8];
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_release();

  uint64_t v10 = (uint64_t *)(v4 + v1[12]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    outlined consume of Data._Representation(*v10, v11);
  }
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, ((v13 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable @async (@guaranteed RemoteConversationXPC) -> (@error @owned Error)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(int **)(v3 + 16);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async (@guaranteed RemoteConversationXPC) -> (@error @owned Error)
                                                                 + async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async (@guaranteed RemoteConversationXPC) -> (@error @owned Error));
  return v10(a1, a2, a3, v8);
}

uint64_t sub_1B9E880A4()
{
  return objectdestroyTm_4(MEMORY[0x1E4FBC8F8], 48);
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(a1, v4, v5, v7, v6);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1B9E88188()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<AFSpeechPackage?, Never>);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<AFSpeechPackage?, Never>);

  return closure #1 in closure #1 in closure #1 in closure #1 in closure #2 in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(a1);
}

uint64_t sub_1B9E88208()
{
  return objectdestroyTm_4(MEMORY[0x1E4FBC8D0], 40);
}

uint64_t objectdestroyTm_4(void (*a1)(void), uint64_t a2)
{
  swift_unknownObjectRelease();
  a1(*(void *)(v2 + 32));

  return MEMORY[0x1F4186498](v2, a2, 7);
}

uint64_t closure #1 in ConversationService.warmup()partial apply(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationService.warmup()(a1, v4, v5, v6);
}

uint64_t _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ConversationServiceSerialFacade.bridge(didReceiveStartExecutionTurn:from:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a4;
  v12[3] = a5;
  v12[4] = a6;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  id v13 = a1;
  swift_unknownObjectRetain();
  uint64_t v14 = StaticString.description.getter();
  uint64_t v16 = v15;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveStartExecutionTurn:from:);
  *(void *)(v17 + 24) = v12;
  *(void *)(v17 + 32) = "bridge(didReceiveStartExecutionTurn:from:)";
  *(void *)(v17 + 40) = 42;
  *(unsigned char *)(v17 + 48) = 2;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)a5 + 208);
  swift_retain();
  v18(v14, v16, &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:), v17);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t ConversationServiceSerialFacade.bridge(didReceiveRequestContextData:from:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a4;
  v12[3] = a5;
  v12[4] = a6;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  id v13 = a1;
  swift_unknownObjectRetain();
  uint64_t v14 = StaticString.description.getter();
  uint64_t v16 = v15;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveRequestContextData:from:);
  *(void *)(v17 + 24) = v12;
  *(void *)(v17 + 32) = "bridge(didReceiveRequestContextData:from:)";
  *(void *)(v17 + 40) = 42;
  *(unsigned char *)(v17 + 48) = 2;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)a5 + 208);
  swift_retain();
  v18(v14, v16, &closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:)partial apply, v17);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t ConversationServiceSerialFacade.bridge(didReceiveInput:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a4;
  v12[3] = a5;
  v12[4] = a6;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v13 = StaticString.description.getter();
  uint64_t v15 = v14;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a4;
  *(void *)(v16 + 24) = a5;
  *(void *)(v16 + 32) = a6;
  *(void *)(v16 + 40) = "bridge(didReceiveInput:from:)";
  *(void *)(v16 + 48) = 29;
  *(unsigned char *)(v16 + 56) = 2;
  *(void *)(v16 + 64) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveInput:from:);
  *(void *)(v16 + 72) = v12;
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)a5 + 208);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v17(v13, v15, &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:), v16);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t ConversationServiceSerialFacade.bridge(didReceiveClearContext:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a4;
  v12[3] = a5;
  v12[4] = a6;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v13 = StaticString.description.getter();
  uint64_t v15 = v14;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveClearContext:from:);
  *(void *)(v16 + 24) = v12;
  *(void *)(v16 + 32) = "bridge(didReceiveClearContext:from:)";
  *(void *)(v16 + 40) = 36;
  *(unsigned char *)(v16 + 48) = 2;
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)a5 + 208);
  swift_retain();
  v17(v13, v15, &closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:)partial apply, v16);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t ConversationServiceSerialFacade.bridge(didReceiveCancelRequest:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a4;
  v12[3] = a5;
  v12[4] = a6;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v13 = StaticString.description.getter();
  uint64_t v15 = v14;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCancelRequest:from:);
  *(void *)(v16 + 24) = v12;
  *(void *)(v16 + 32) = "bridge(didReceiveCancelRequest:from:)";
  *(void *)(v16 + 40) = 37;
  *(unsigned char *)(v16 + 48) = 2;
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)a5 + 208);
  swift_retain();
  v17(v13, v15, &closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:)partial apply, v16);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t ConversationServiceSerialFacade.bridge(didReceiveCommitResultCandidateId:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a4;
  v12[3] = a5;
  v12[4] = a6;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v13 = StaticString.description.getter();
  uint64_t v15 = v14;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a4;
  *(void *)(v16 + 24) = a5;
  *(void *)(v16 + 32) = a6;
  *(void *)(v16 + 40) = "bridge(didReceiveCommitResultCandidateId:from:)";
  *(void *)(v16 + 48) = 47;
  *(unsigned char *)(v16 + 56) = 2;
  *(void *)(v16 + 64) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCommitResultCandidateId:from:);
  *(void *)(v16 + 72) = v12;
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)a5 + 208);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v17(v13, v15, &closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)partial apply, v16);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t ConversationServiceSerialFacade.bridge(didReceiveRSKE:withRequestContextData:from:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = a5;
  v14[3] = a6;
  v14[4] = a7;
  v14[5] = a1;
  v14[6] = a2;
  v14[7] = a3;
  v14[8] = a4;
  swift_retain();
  swift_retain();
  swift_retain();
  id v15 = a1;
  id v16 = a2;
  swift_unknownObjectRetain();
  uint64_t v17 = StaticString.description.getter();
  uint64_t v19 = v18;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a5;
  *(void *)(v20 + 24) = a6;
  *(void *)(v20 + 32) = a7;
  *(void *)(v20 + 40) = "bridge(didReceiveRSKE:withRequestContextData:from:)";
  *(void *)(v20 + 48) = 51;
  *(unsigned char *)(v20 + 56) = 2;
  *(void *)(v20 + 64) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveRSKE:withRequestContextData:from:);
  *(void *)(v20 + 72) = v14;
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)a6 + 208);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v21(v17, v19, &closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)partial apply, v20);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t ConversationServiceSerialFacade.bridge(didReceiveSiriKitPluginSignal:from:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a4;
  v12[3] = a5;
  v12[4] = a6;
  v12[5] = a1;
  v12[6] = a2;
  v12[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  id v13 = a1;
  swift_unknownObjectRetain();
  uint64_t v14 = StaticString.description.getter();
  uint64_t v16 = v15;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a4;
  *(void *)(v17 + 24) = a5;
  *(void *)(v17 + 32) = a6;
  *(void *)(v17 + 40) = "bridge(didReceiveSiriKitPluginSignal:from:)";
  *(void *)(v17 + 48) = 43;
  *(unsigned char *)(v17 + 56) = 2;
  *(void *)(v17 + 64) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveSiriKitPluginSignal:from:);
  *(void *)(v17 + 72) = v12;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)a5 + 208);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v18(v14, v16, &closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)partial apply, v17);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ConversationServiceSerialFacade.init(wrapping:)()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v4 = __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
  v5(v3, v4, v0);
  type metadata accessor for AsyncSerialQueue();
  uint64_t v6 = (char *)swift_allocObject();
  *((void *)v6 + 2) = MEMORY[0x1E4FBC860];
  *((void *)v6 + 3) = 0;
  *((void *)v6 + 4) = 0;
  *((void *)v6 + 5) = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 16) = 0;
  *((void *)v6 + 6) = v7;
  *((void *)v6 + 7) = 0xD000000000000022;
  *((void *)v6 + 8) = 0x80000001BA066A00;
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(v1 + 32);
  v8(&v6[OBJC_IVAR____TtC14SiriKitRuntime16AsyncSerialQueue_logger], v3, v0);
  v5(v3, v4, v0);
  uint64_t v9 = (char *)swift_allocObject();
  *((void *)v9 + 2) = MEMORY[0x1E4FBC860];
  *((void *)v9 + 3) = 0;
  *((void *)v9 + 4) = 0;
  *((void *)v9 + 5) = 0;
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 16) = 0;
  *((void *)v9 + 6) = v10;
  *((void *)v9 + 7) = 0xD000000000000020;
  *((void *)v9 + 8) = 0x80000001BA066A30;
  v8(&v9[OBJC_IVAR____TtC14SiriKitRuntime16AsyncSerialQueue_logger], v3, v0);
}

uint64_t ConversationServiceSerialFacade.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = (void *)swift_allocObject();
  _OWORD v16[2] = a6;
  v16[3] = a7;
  v16[4] = a8;
  v16[5] = a1;
  v16[6] = a2;
  v16[7] = a3;
  v16[8] = a4;
  v16[9] = a5;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v17 = StaticString.description.getter();
  uint64_t v19 = v18;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a6;
  *(void *)(v20 + 24) = a7;
  *(void *)(v20 + 32) = a8;
  *(void *)(v20 + 40) = "bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:)";
  *(void *)(v20 + 48) = 71;
  *(unsigned char *)(v20 + 56) = 2;
  *(void *)(v20 + 64) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:);
  *(void *)(v20 + 72) = v16;
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)a7 + 208);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v21(v17, v19, &closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)partial apply, v20);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[9] = a7;
  v8[10] = a8;
  v8[7] = a5;
  v8[8] = a6;
  v8[5] = a1;
  v8[6] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v8[11] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:), 0, 0);
}

uint64_t closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:)()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:), v0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;

  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[9];
  uint64_t v5 = v0[6];
  id v13 = v0[7];
  uint64_t v6 = v0[5];
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v1, 1, 1, v7);
  uint64_t v8 = static MessageBusActor.shared;
  uint64_t v9 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v8;
  v10[3] = v9;
  v10[4] = v4;
  v10[5] = v2;
  v10[6] = v6;
  v10[7] = v5;
  v10[8] = v13;
  v10[9] = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:), (uint64_t)v10);
  swift_release();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t closure #1 in ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v31 = a6;
  uint64_t v32 = a7;
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ExecutionOverrideResult?, Never>);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1F4188790](v10);
  id v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v15 = (v12 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v17 + v14, v13, v10);
  uint64_t v18 = (void *)(v17 + v15);
  *uint64_t v18 = a2;
  v18[1] = a3;
  uint64_t v20 = v29;
  uint64_t v19 = v30;
  v18[2] = v29;
  *(void *)(v17 + v16) = v19;
  uint64_t v21 = (void *)(v17 + ((v16 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v22 = v32;
  *uint64_t v21 = v31;
  v21[1] = v22;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v23 = StaticString.description.getter();
  uint64_t v25 = v24;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = a2;
  *(void *)(v26 + 24) = a3;
  *(void *)(v26 + 32) = v20;
  *(void *)(v26 + 40) = "checkExecutionOverrides(context:resultCandidateId:)";
  *(void *)(v26 + 48) = 51;
  *(unsigned char *)(v26 + 56) = 2;
  *(void *)(v26 + 64) = &async function pointer to partial apply for closure #1 in closure #1 in ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:);
  *(void *)(v26 + 72) = v17;
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)a3 + 208);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v27(v23, v25, &closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)partial apply, v26);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t closure #1 in closure #1 in ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 24) = a1;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v7 + 32) = v11;
  void *v11 = v7;
  v11[1] = closure #1 in closure #1 in ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:);
  return ConversationService.checkExecutionOverrides(context:resultCandidateId:)(a5, a6, a7);
}

uint64_t closure #1 in closure #1 in ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 40) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:), 0, 0);
}

uint64_t closure #1 in closure #1 in ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:)()
{
  v0[2] = v0[5];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ExecutionOverrideResult?, Never>);
  CheckedContinuation.resume(returning:)();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t closure #1 in ConversationServiceSerialFacade.bridge(didReceiveClearContext:from:)()
{
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized ConversationService.bridge(didReceiveClearContext:from:)
                             + async function pointer to specialized ConversationService.bridge(didReceiveClearContext:from:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v3();
}

uint64_t sub_1B9E89B90()
{
  swift_release();
  swift_release();
  swift_release();

  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t closure #1 in closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v5 + 72) = a5;
  *(void *)(v5 + 40) = a3;
  *(void *)(v5 + 48) = a4;
  uint64_t v8 = (uint64_t (*)(void))((char *)a1 + *a1);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v5 + 56) = v6;
  *uint64_t v6 = v5;
  v6[1] = closure #1 in closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:);
  return v8();
}

uint64_t closure #1 in closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:), 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;

  uint64_t v19 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[8];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  uint64_t v3 = v1;
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[8];
  if (v7)
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    uint64_t v18 = v17;
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v10 = StaticString.description.getter();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2080;
    v0[3] = v8;
    uint64_t v12 = v8;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v13 = String.init<A>(describing:)();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v5, v6, "Error performing %s: %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v17, -1, -1);
    MEMORY[0x1BA9E48C0](v9, -1, -1);
  }
  else
  {
  }
  unint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_1B9E8A084()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[7];
  uint64_t v9 = v0[8];
  uint64_t v8 = v0[9];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v10;
  *uint64_t v10 = v1;
  v10[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCheckExecutionOverrides:resultCandidateId:completion:)(v2, v3, v4, v5, v6, v7, v9, v8);
}

uint64_t destroy for ConversationServiceSerialFacade()
{
  swift_release();
  swift_release();

  return swift_release();
}

void *initializeBufferWithCopyOfBuffer for ConversationServiceSerialFacade(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for ConversationServiceSerialFacade(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ConversationServiceSerialFacade(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ConversationServiceSerialFacade()
{
  return &type metadata for ConversationServiceSerialFacade;
}

uint64_t sub_1B9E8A32C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t sub_1B9E8A384()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ExecutionOverrideResult?, Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, v6 + 16, v5);
}

uint64_t sub_1B9E8A470()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 49, 7);
}

uint64_t ConversationTurnState.makeCurrentRequestForSiriEnvironment(speechData:positionInSession:)(char *a1, char *a2, char *a3, uint64_t a4)
{
  void (*v27)(long long *__return_ptr, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  int v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  void *v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  BOOL v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  char v73;
  char *v74;
  void (*v75)(char *, char *, char *);
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t, uint64_t);
  uint64_t v82;
  char v83;
  char *v84;
  NSObject *v85;
  os_log_type_t v86;
  int v87;
  uint8_t *v88;
  uint64_t v89;
  void (*v90)(uint64_t *__return_ptr, char *, uint64_t);
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  char *v100;
  char v101;
  uint64_t v102;
  void (*v103)(char *, uint64_t);
  char v104;
  NSObject *v105;
  os_log_type_t v106;
  uint8_t *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint8_t *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  NSObject *v118;
  os_log_type_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  char *v128;
  char *v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(char *, char *, char *);
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  void (*v141)(long long *__return_ptr, char *, uint64_t);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150[2];
  long long v151;
  uint64_t v152;
  uint64_t v153;
  long long v154;
  long long v155;
  uint64_t v156;

  uint64_t v132 = a2;
  uint64_t v137 = a1;
  uint64_t v7 = type metadata accessor for ResponseMode();
  uint64_t v134 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  v128 = (char *)&v128 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  v140 = (char *)&v128 - v11;
  uint64_t v142 = *((void *)a3 - 1);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  os_log_type_t v129 = (char *)&v128 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  unint64_t v16 = (char *)&v128 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v138 = (char *)&v128 - v17;
  uint64_t v18 = type metadata accessor for MultiUserContext();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v128 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for MultiUserState();
  uint64_t v23 = MEMORY[0x1F4188790](v22 - 8);
  uint64_t v25 = (char *)&v128 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  v143 = (uint64_t)&v128 - v26;
  uint64_t v27 = *(void (**)(long long *__return_ptr, char *, uint64_t))(a4 + 40);
  int64_t v145 = v4;
  v146 = a4;
  v147 = a3;
  id v144 = a4 + 40;
  v141 = v27;
  v27(&v154, a3, a4);
  uint64_t v28 = *((void *)&v155 + 1);
  uint64_t v29 = v156;
  __swift_project_boxed_opaque_existential_1(&v154, *((uint64_t *)&v155 + 1));
  (*(void (**)(uint64_t, uint64_t))(v29 + 64))(v28, v29);
  uint64_t v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v25, 1, v18);
  outlined destroy of MultiUserState((uint64_t)v25);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v154);
  if (v30 == 1
    && (uint64_t v31 = *(void **)&v137[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForRecognizedUser]) != 0)
  {
    uint64_t v32 = one-time initialization token for executor;
    uint64_t v33 = v31;
    if (v32 != -1) {
      swift_once();
    }
    id v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.executor);
    unint64_t v35 = Logger.logObject.getter();
    uint64_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl(&dword_1B9C64000, v35, v36, "Getting multi-user state from UserSpecificInfo", v37, 2u);
      MEMORY[0x1BA9E48C0](v37, -1, -1);
    }

    LODWORD(v139) = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v33) + 0x128))();
    uint64_t v38 = *(void **)((char *)v33 + OBJC_IVAR___SKEUserSpecificInfo_meCard);
    if (v38)
    {
      uint64_t v39 = v38;
      uint64_t v40 = SAPerson.contact.getter();
      uint64_t v41 = type metadata accessor for DefaultMeCardProxy();
      uint64_t v42 = swift_allocObject();
      *(void *)(v42 + 16) = v40;
      *((void *)&v155 + 1) = v41;
      uint64_t v156 = _s14SiriKitRuntime16PeerInfoProviderCAC0aB4Flow0dE9ProvidingAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DefaultMeCardProxy and conformance DefaultMeCardProxy, (void (*)(uint64_t))type metadata accessor for DefaultMeCardProxy);
      *(void *)&v154 = v42;
    }
    else
    {
      uint64_t v156 = 0;
      v154 = 0u;
      v155 = 0u;
    }
    unint64_t v45 = v146;
    swift_bridgeObjectRetain();
    MultiUserContext.init(requiresUserGrounding:meCardProxy:handoffTargetDeviceID:)();

    uint64_t v48 = v143;
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v143, v21, v18);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v48, 0, 1, v18);
    unint64_t v43 = v145;
    uint64_t v44 = v147;
  }
  else
  {
    unint64_t v43 = v145;
    unint64_t v45 = v146;
    uint64_t v44 = v147;
    v141(&v154, v147, v146);
    uint64_t v46 = *((void *)&v155 + 1);
    uint64_t v47 = v156;
    __swift_project_boxed_opaque_existential_1(&v154, *((uint64_t *)&v155 + 1));
    (*(void (**)(uint64_t, uint64_t))(v47 + 64))(v46, v47);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v154);
  }
  uint64_t v49 = *(void **)(*(void *)((*(uint64_t (**)(char *, uint64_t))(v45 + 56))(v44, v45) + 32)
                 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_peerInfo);
  uint64_t v50 = type metadata accessor for PeerInfoProvider();
  uint64_t v51 = swift_allocObject();
  *(void *)(v51 + 16) = v49;
  *((void *)&v155 + 1) = v50;
  uint64_t v156 = _s14SiriKitRuntime16PeerInfoProviderCAC0aB4Flow0dE9ProvidingAAWlTm_0(&lazy protocol witness table cache variable for type PeerInfoProvider and conformance PeerInfoProvider, (void (*)(uint64_t))type metadata accessor for PeerInfoProvider);
  *(void *)&v154 = v51;
  uint64_t v52 = v49;
  swift_release();
  id v136 = static ConversationTurnState.computeCompanionName(_:)(&v154);
  id v54 = v53;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  int v55 = type metadata accessor for Logger();
  uint64_t v56 = __swift_project_value_buffer(v55, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  uint64_t v57 = Logger.logObject.getter();
  id v58 = static os_log_type_t.debug.getter();
  char v59 = os_log_type_enabled(v57, v58);
  v139 = v56;
  v131 = (char *)v54;
  v130 = v16;
  if (v59)
  {
    uint64_t v60 = (uint8_t *)swift_slowAlloc();
    id v61 = swift_slowAlloc();
    *(void *)&uint64_t v151 = v61;
    *(_DWORD *)uint64_t v60 = 136315138;
    if (v54) {
      uint64_t v62 = v136;
    }
    else {
      uint64_t v62 = 7104878;
    }
    if (v54) {
      uint64_t v63 = v54;
    }
    else {
      uint64_t v63 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    v148 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, (uint64_t *)&v151);
    uint64_t v44 = v147;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    unint64_t v43 = v145;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v57, v58, "CurrentRequest companionName resolved to: %s", v60, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v61, -1, -1);
    MEMORY[0x1BA9E48C0](v60, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v64 = v138;
  int64_t v133 = v7;
  uint64_t v65 = v142;
  id v135 = *(void (**)(char *, char *, char *))(v142 + 16);
  v135(v138, v43, v44);
  uint64_t v66 = Logger.logObject.getter();
  id v67 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v66, v67))
  {
    uint64_t v68 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v68 = 67109120;
    v141(&v151, v44, v146);
    uint64_t v69 = v152;
    uint64_t v70 = v153;
    __swift_project_boxed_opaque_existential_1(&v151, v152);
    uint64_t v71 = *(uint64_t (**)(uint64_t, uint64_t))(v70 + 232);
    uint64_t v72 = v70;
    uint64_t v44 = v147;
    unint64_t v73 = v71(v69, v72);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v151);
    uint64_t v138 = *(char **)(v65 + 8);
    ((void (*)(char *, char *))v138)(v64, v44);
    LODWORD(v151) = v73 & 1;
    unint64_t v43 = v145;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v66, v67, "CurrentRequestForSiriEnvironment isSystemApertureEnabled: %{BOOL}d", v68, 8u);
    MEMORY[0x1BA9E48C0](v68, -1, -1);
  }
  else
  {
    uint64_t v138 = *(char **)(v65 + 8);
    ((void (*)(char *, char *))v138)(v64, v44);
  }

  int64_t v74 = v130;
  uint64_t v75 = v135;
  v135(v130, v43, v44);
  uint64_t v76 = Logger.logObject.getter();
  uint64_t v77 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v76, v77))
  {
    uint64_t v78 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v78 = 67109120;
    v141(&v151, v44, v146);
    uint64_t v79 = v152;
    uint64_t v80 = v153;
    __swift_project_boxed_opaque_existential_1(&v151, v152);
    long long v81 = *(uint64_t (**)(uint64_t, uint64_t))(v80 + 240);
    uint64_t v82 = v80;
    uint64_t v44 = v147;
    uint64_t v83 = v81(v79, v82);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v151);
    ((void (*)(char *, char *))v138)(v74, v44);
    LODWORD(v151) = v83 & 1;
    unint64_t v43 = v145;
    uint64_t v75 = v135;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v76, v77, "CurrentRequestForSiriEnvironment isLiveActivitiesSupported: %{BOOL}d", v78, 8u);
    MEMORY[0x1BA9E48C0](v78, -1, -1);
  }
  else
  {
    ((void (*)(char *, char *))v138)(v74, v44);
  }
  uint64_t v84 = v129;

  v75(v84, v43, v44);
  uint64_t v85 = Logger.logObject.getter();
  uint64_t v86 = static os_log_type_t.debug.getter();
  uint64_t v87 = v86;
  if (os_log_type_enabled(v85, v86))
  {
    uint64_t v88 = (uint8_t *)swift_slowAlloc();
    LODWORD(v135) = v87;
    *(_DWORD *)uint64_t v88 = 67109120;
    uint64_t v89 = v146;
    int v90 = (void (*)(uint64_t *__return_ptr, char *, uint64_t))v141;
    v141(&v151, v44, v146);
    int v91 = v44;
    uint64_t v92 = v152;
    uint64_t v93 = v153;
    __swift_project_boxed_opaque_existential_1(&v151, v152);
    uint64_t v94 = (*(uint64_t (**)(uint64_t, uint64_t))(v93 + 248))(v92, v93);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v151);
    ((void (*)(char *, char *))v138)(v84, v91);
    LODWORD(v151) = v94 & 1;
    unint64_t v43 = v145;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v85, (os_log_type_t)v135, "CurrentRequestForSiriEnvironment isInAmbient: %{BOOL}d", v88, 8u);
    MEMORY[0x1BA9E48C0](v88, -1, -1);
    long long v95 = v140;
  }
  else
  {
    ((void (*)(char *, char *))v138)(v84, v44);
    int v91 = v44;
    long long v95 = v140;
    uint64_t v89 = v146;
    int v90 = (void (*)(uint64_t *__return_ptr, char *, uint64_t))v141;
  }

  v90((uint64_t *)&v151, v91, v89);
  long long v96 = v152;
  uint64_t v97 = v153;
  __swift_project_boxed_opaque_existential_1(&v151, v152);
  (*(void (**)(uint64_t, uint64_t))(v97 + 56))(v96, v97);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v151);
  (*(void (**)(long long *__return_ptr, char *, uint64_t))(v89 + 48))(&v151, v91, v89);
  __swift_project_boxed_opaque_existential_1(&v151, v152);
  uint64_t v98 = dispatch thunk of DeviceState.isHomePod.getter();
  uint64_t v99 = v133;
  if ((v98 & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v151);
    uint64_t v102 = v134;
    goto LABEL_40;
  }
  v100 = v128;
  static ResponseMode.displayForward.getter();
  uint64_t v101 = static ResponseMode.== infix(_:_:)();
  uint64_t v102 = v134;
  uint64_t v103 = *(void (**)(char *, uint64_t))(v134 + 8);
  v103(v100, v99);
  if (v101)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v151);
  }
  else
  {
    static ResponseMode.displayOnly.getter();
    uint64_t v104 = static ResponseMode.== infix(_:_:)();
    v103(v100, v99);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v151);
    if ((v104 & 1) == 0) {
      goto LABEL_40;
    }
  }
  unint64_t v105 = Logger.logObject.getter();
  uint64_t v106 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v105, v106))
  {
    uint64_t v107 = (uint8_t *)swift_slowAlloc();
    uint64_t v108 = swift_slowAlloc();
    *(void *)&uint64_t v151 = v108;
    *(_DWORD *)uint64_t v107 = 136315138;
    swift_beginAccess();
    _s14SiriKitRuntime16PeerInfoProviderCAC0aB4Flow0dE9ProvidingAAWlTm_0(&lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode, MEMORY[0x1E4FA51C0]);
    v109 = dispatch thunk of CustomStringConvertible.description.getter();
    v148 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v110, (uint64_t *)&v151);
    unint64_t v43 = v145;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v105, v106, "HomePod has wrong interface idiom in response mode: %s. Reverting to voiceOnly.", v107, 0xCu);
    swift_arrayDestroy();
    id v111 = v108;
    uint64_t v102 = v134;
    MEMORY[0x1BA9E48C0](v111, -1, -1);
    v112 = v107;
    v100 = v128;
    MEMORY[0x1BA9E48C0](v112, -1, -1);
  }

  static ResponseMode.voiceOnly.getter();
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v102 + 40))(v95, v100, v99);
  uint64_t v89 = v146;
LABEL_40:
  id v113 = type metadata accessor for CurrentRequest();
  MEMORY[0x1F4188790](v113);
  *(&v128 - 10) = v147;
  *(&v128 - 9) = (char *)v89;
  *(&v128 - 8) = v43;
  *(&v128 - 7) = (char *)&v154;
  Class v114 = v143;
  *(&v128 - 6) = v95;
  *(&v128 - 5) = (char *)v114;
  id v115 = (char *)v136;
  *(&v128 - 4) = v137;
  *(&v128 - 3) = v115;
  v116 = v132;
  *(&v128 - 2) = v131;
  *(&v128 - 1) = v116;
  _s14SiriKitRuntime16PeerInfoProviderCAC0aB4Flow0dE9ProvidingAAWlTm_0(&lazy protocol witness table cache variable for type CurrentRequest and conformance CurrentRequest, MEMORY[0x1E4F9FD30]);
  static Buildable.withBuilder(_:)();
  swift_bridgeObjectRelease();
  v117 = v151;
  swift_retain_n();
  id v118 = Logger.logObject.getter();
  uint64_t v119 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v118, v119))
  {
    v120 = swift_slowAlloc();
    os_log_type_t v121 = swift_slowAlloc();
    v150[0] = v121;
    *(_DWORD *)v120 = 136315394;
    v122 = ObjectIdentifier.debugDescription.getter();
    *(void *)&uint64_t v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v122, v123, v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v120 + 12) = 2080;
    swift_beginAccess();
    _s14SiriKitRuntime16PeerInfoProviderCAC0aB4Flow0dE9ProvidingAAWlTm_0(&lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode, MEMORY[0x1E4FA51C0]);
    id v124 = dispatch thunk of CustomStringConvertible.description.getter();
    v149 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v124, v125, v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v118, v119, "Created CurrentRequest %s with responseMode %s", (uint8_t *)v120, 0x16u);
    swift_arrayDestroy();
    id v126 = v121;
    long long v95 = v140;
    MEMORY[0x1BA9E48C0](v126, -1, -1);
    MEMORY[0x1BA9E48C0](v120, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v154);
  outlined destroy of MultiUserState(v143);
  (*(void (**)(char *, uint64_t))(v102 + 8))(v95, v99);
  return v117;
}

uint64_t static ConversationTurnState.computeCompanionName(_:)(void *a1)
{
  uint64_t v2 = type metadata accessor for DeviceIdiom();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  unint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v19 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of PeerInfoProviding.getDeviceIdiom()();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v6, *MEMORY[0x1E4FA5110], v2);
  LOBYTE(a1) = static DeviceIdiom.== infix(_:_:)();
  uint64_t v9 = *(void (**)(char *, uint64_t))(v3 + 8);
  v9(v6, v2);
  v9(v8, v2);
  if ((a1 & 1) == 0)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v11, v12)) {
      goto LABEL_12;
    }
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    uint64_t v14 = "Request is not interacting with a HomePod, companion name is nil.";
    goto LABEL_11;
  }
  if (MGGetSInt32Answer() == 7)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v11, v12)) {
      goto LABEL_12;
    }
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    uint64_t v14 = "Request is executing on a HomePod and not in companion mode. Companion name not known, setting as nil.";
LABEL_11:
    _os_log_impl(&dword_1B9C64000, v11, v12, v14, v13, 2u);
    MEMORY[0x1BA9E48C0](v13, -1, -1);
LABEL_12:

    return 0;
  }
  uint64_t result = MGGetStringAnswer();
  if (result)
  {
    uint64_t v18 = (void *)result;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    return v16;
  }
  __break(1u);
  return result;
}

uint64_t closure #2 in ConversationTurnState.makeCurrentRequestForSiriEnvironment(speechData:positionInSession:)(char **a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, char *a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void (*v37)(id *__return_ptr, uint64_t, uint64_t);
  ValueMetadata *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  ValueMetadata *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  ValueMetadata *v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  char **v51;
  void (*v52)(id *__return_ptr, uint64_t, uint64_t);
  uint64_t v53;
  ValueMetadata *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  char **v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  ValueMetadata *v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  void (*v66)(id *__return_ptr, uint64_t, uint64_t);
  ValueMetadata *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  ValueMetadata *v71;
  unint64_t v72;
  ValueMetadata *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(id *__return_ptr, uint64_t, uint64_t);
  uint64_t v82;
  ValueMetadata *v83;
  unint64_t v84;
  char **v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  ValueMetadata *v89;
  unint64_t v90;
  uint64_t v91;
  id v92;
  char *v93;
  void (*v94)(id *__return_ptr, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  ValueMetadata *v98;
  unint64_t v99;
  uint64_t v100;
  ValueMetadata *v101;
  unint64_t v102;
  ValueMetadata *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  ValueMetadata *v107;
  unint64_t v108;
  char *v109;
  void (*v110)(id *__return_ptr, uint64_t, uint64_t);
  ValueMetadata *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  ValueMetadata *v116;
  unint64_t v117;
  ValueMetadata *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(char *, uint64_t, uint64_t);
  char *v130;
  void (*v131)(char *, void, uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  char *v139;
  char *v140;
  uint64_t v142;
  char *KeyPath;
  char *v144;
  char *v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  void *v156;
  char *v157;
  char *v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char **v165;
  void (*v166)(id *__return_ptr, uint64_t, uint64_t);
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  id v172;
  char *v173;
  ValueMetadata *v174;
  unint64_t v175;
  uint64_t v176;

  v157 = a8;
  uint64_t v156 = a7;
  v162 = a6;
  uint64_t v153 = a5;
  v152 = a4;
  v146 = a3;
  v159 = a9;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v161 = (char *)&v142 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExecutionLocation?);
  MEMORY[0x1F4188790](v15 - 8);
  v160 = (char *)&v142 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestPositionInSession?);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v158 = (char *)&v142 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowTaskMetadata?);
  MEMORY[0x1F4188790](v19 - 8);
  v155 = (char *)&v142 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomeInfo?);
  MEMORY[0x1F4188790](v21 - 8);
  v154 = (char *)&v142 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BargeInContext?);
  MEMORY[0x1F4188790](v23 - 8);
  uint64_t v151 = (char *)&v142 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MultiUserState?);
  MEMORY[0x1F4188790](v25 - 8);
  int v150 = (uint64_t)&v142 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseMode?);
  MEMORY[0x1F4188790](v27 - 8);
  v149 = (char *)&v142 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  MEMORY[0x1F4188790](v29 - 8);
  v148 = (char *)&v142 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  MEMORY[0x1F4188790](v31 - 8);
  v147 = (char *)&v142 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InteractionType?);
  MEMORY[0x1F4188790](v33 - 8);
  int64_t v145 = (char *)&v142 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  MEMORY[0x1F4188790](v35 - 8);
  id v144 = (char *)&v142 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = *a1;
  swift_getKeyPath();
  int64_t v176 = a11;
  uint64_t v37 = *(void (**)(id *__return_ptr, uint64_t, uint64_t))(a11 + 40);
  int v167 = a2;
  uint64_t v164 = a10;
  v37(&v172, a10, a11);
  uint64_t v38 = v174;
  uint64_t v39 = v175;
  __swift_project_boxed_opaque_existential_1(&v172, (uint64_t)v174);
  v170 = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v39 + 8))(v38, v39);
  v171 = v40;
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v172);
  KeyPath = *a1;
  swift_getKeyPath();
  uint64_t v41 = v176;
  v37(&v172, a10, v176);
  uint64_t v166 = (void (*)(void *__return_ptr, void, void))v37;
  uint64_t v42 = v174;
  unint64_t v43 = v175;
  __swift_project_boxed_opaque_existential_1(&v172, (uint64_t)v174);
  v170 = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v43 + 16))(v42, v43);
  v171 = v44;
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v172);
  swift_getKeyPath();
  unint64_t v45 = v164;
  uint64_t v172 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v164, v41);
  v173 = v46;
  Builder.subscript.setter();
  swift_getKeyPath();
  v37(&v172, v45, v41);
  uint64_t v47 = v174;
  uint64_t v48 = v175;
  __swift_project_boxed_opaque_existential_1(&v172, (uint64_t)v174);
  v170 = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v48 + 72))(v47, v48);
  v171 = v49;
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v172);
  swift_getKeyPath();
  __swift_project_boxed_opaque_existential_1(v146, *((void *)v146 + 3));
  uint64_t v172 = (id)dispatch thunk of PeerInfoProviding.getPeerName()();
  v173 = v50;
  Builder.subscript.setter();
  v146 = *a1;
  uint64_t v51 = a1;
  KeyPath = (char *)swift_getKeyPath();
  uint64_t v52 = (void (*)(id *__return_ptr, uint64_t, uint64_t))v166;
  id v53 = v164;
  v166(&v172, v164, v176);
  id v54 = v174;
  int v55 = v175;
  __swift_project_boxed_opaque_existential_1(&v172, (uint64_t)v174);
  uint64_t v56 = v144;
  (*(void (**)(ValueMetadata *, unint64_t))(v55 + 24))(v54, v55);
  uint64_t v57 = type metadata accessor for InputOrigin();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v56, 0, 1, v57);
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v172);
  id v58 = v51;
  v146 = *v51;
  id v144 = (char *)swift_getKeyPath();
  char v59 = v53;
  uint64_t v60 = v53;
  id v61 = v176;
  v52(&v172, v59, v176);
  uint64_t v62 = v174;
  uint64_t v63 = v175;
  __swift_project_boxed_opaque_existential_1(&v172, (uint64_t)v174);
  uint64_t v64 = v145;
  (*(void (**)(ValueMetadata *, unint64_t))(v63 + 32))(v62, v63);
  uint64_t v65 = type metadata accessor for InteractionType();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v64, 0, 1, v65);
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v172);
  uint64_t v165 = v58;
  v146 = *v58;
  swift_getKeyPath();
  uint64_t v66 = (void (*)(id *__return_ptr, uint64_t, uint64_t))v166;
  v166(&v172, v60, v61);
  id v67 = v174;
  uint64_t v68 = v175;
  __swift_project_boxed_opaque_existential_1(&v172, (uint64_t)v174);
  v170 = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v68 + 152))(v67, v68);
  v171 = v69;
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v172);
  v146 = *v58;
  int64_t v145 = (char *)swift_getKeyPath();
  uint64_t v70 = v164;
  v66(&v172, v164, v61);
  uint64_t v71 = v174;
  uint64_t v72 = v175;
  __swift_project_boxed_opaque_existential_1(&v172, (uint64_t)v174);
  (*(void (**)(ValueMetadata *, unint64_t))(v72 + 40))(v71, v72);
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v172);
  v147 = *v165;
  v146 = (char *)swift_getKeyPath();
  v66(&v172, v70, v61);
  uint64_t v163 = a11 + 40;
  unint64_t v73 = v174;
  int64_t v74 = v175;
  __swift_project_boxed_opaque_existential_1(&v172, (uint64_t)v174);
  (*(void (**)(ValueMetadata *, unint64_t))(v74 + 48))(v73, v74);
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v172);
  swift_getKeyPath();
  uint64_t v75 = v152;
  swift_beginAccess();
  uint64_t v76 = type metadata accessor for ResponseMode();
  uint64_t v77 = *(void *)(v76 - 8);
  uint64_t v78 = v149;
  (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v149, v75, v76);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v77 + 56))(v78, 0, 1, v76);
  Builder.subscript.setter();
  swift_getKeyPath();
  uint64_t v79 = v150;
  outlined init with copy of MultiUserState(v153, v150);
  uint64_t v80 = type metadata accessor for MultiUserState();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56))(v79, 0, 1, v80);
  Builder.subscript.setter();
  swift_getKeyPath();
  long long v81 = (void (*)(id *__return_ptr, uint64_t, uint64_t))v166;
  uint64_t v82 = v176;
  v166(&v172, v164, v176);
  uint64_t v83 = v174;
  uint64_t v84 = v175;
  __swift_project_boxed_opaque_existential_1(&v172, (uint64_t)v174);
  (*(void (**)(ValueMetadata *, unint64_t))(v84 + 176))(v83, v84);
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v172);
  uint64_t v85 = v165;
  swift_getKeyPath();
  uint64_t v86 = v82;
  uint64_t v87 = v164;
  (*(void (**)(id *__return_ptr, uint64_t, uint64_t))(v82 + 64))(&v172, v164, v82);
  Builder.subscript.setter();
  swift_getKeyPath();
  uint64_t v88 = v87;
  v81(&v172, v87, v86);
  uint64_t v89 = v174;
  int v90 = v175;
  __swift_project_boxed_opaque_existential_1(&v172, (uint64_t)v174);
  (*(void (**)(ValueMetadata *, unint64_t))(v90 + 200))(v89, v90);
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v172);
  swift_getKeyPath();
  int v91 = v162;
  uint64_t v172 = *(id *)(v162 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_speechPackage);
  uint64_t v92 = v172;
  Builder.subscript.setter();
  swift_getKeyPath();
  uint64_t v93 = *(char **)(v91 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId + 8);
  uint64_t v172 = *(id *)(v91 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId);
  v173 = v93;
  swift_bridgeObjectRetain();
  Builder.subscript.setter();
  swift_getKeyPath();
  LOBYTE(v172) = *(unsigned char *)(v91 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_asrOnDevice);
  Builder.subscript.setter();
  v154 = *v85;
  uint64_t v153 = swift_getKeyPath();
  uint64_t v94 = (void (*)(id *__return_ptr, uint64_t, uint64_t))v166;
  long long v95 = v88;
  long long v96 = v88;
  uint64_t v97 = v176;
  v166(&v172, v96, v176);
  uint64_t v98 = v174;
  uint64_t v99 = v175;
  __swift_project_boxed_opaque_existential_1(&v172, (uint64_t)v174);
  v168 = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v99 + 208))(v98, v99);
  uint64_t v169 = v100;
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v172);
  v154 = *v85;
  swift_getKeyPath();
  v94(&v172, v95, v97);
  uint64_t v101 = v174;
  uint64_t v102 = v175;
  __swift_project_boxed_opaque_existential_1(&v172, (uint64_t)v174);
  v168 = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v102 + 216))(v101, v102);
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v172);
  swift_getKeyPath();
  uint64_t v172 = v156;
  v173 = v157;
  swift_bridgeObjectRetain();
  Builder.subscript.setter();
  swift_getKeyPath();
  v94(&v172, v95, v176);
  uint64_t v103 = v174;
  uint64_t v104 = v175;
  __swift_project_boxed_opaque_existential_1(&v172, (uint64_t)v174);
  LOBYTE(v168) = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v104 + 104))(v103, v104) & 1;
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v172);
  swift_getKeyPath();
  unint64_t v105 = type metadata accessor for FlowTaskMetadata();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v105 - 8) + 56))(v155, 1, 1, v105);
  Builder.subscript.setter();
  swift_getKeyPath();
  uint64_t v106 = v176;
  v166(&v172, v95, v176);
  uint64_t v107 = v174;
  uint64_t v108 = v175;
  __swift_project_boxed_opaque_existential_1(&v172, (uint64_t)v174);
  LODWORD(v168) = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v108 + 224))(v107, v108);
  BYTE4(v168) = 0;
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v172);
  swift_getKeyPath();
  v109 = *(char **)(v162 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_utterance + 8);
  uint64_t v172 = *(id *)(v162 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_utterance);
  v173 = v109;
  swift_bridgeObjectRetain();
  Builder.subscript.setter();
  swift_getKeyPath();
  Class v110 = (void (*)(id *__return_ptr, uint64_t, uint64_t))v166;
  v166(&v172, v95, v106);
  id v111 = v174;
  v112 = v175;
  __swift_project_boxed_opaque_existential_1(&v172, (uint64_t)v174);
  LOBYTE(v168) = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v112 + 232))(v111, v112) & 1;
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v172);
  v157 = *v165;
  uint64_t v156 = (void *)swift_getKeyPath();
  id v113 = v95;
  Class v114 = v95;
  id v115 = v176;
  v110(&v172, v113, v176);
  v116 = v174;
  v117 = v175;
  __swift_project_boxed_opaque_existential_1(&v172, (uint64_t)v174);
  LOBYTE(v168) = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v117 + 240))(v116, v117) & 1;
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v172);
  swift_getKeyPath();
  v166(&v172, v114, v115);
  id v118 = v174;
  uint64_t v119 = v175;
  __swift_project_boxed_opaque_existential_1(&v172, (uint64_t)v174);
  LOBYTE(v168) = (*(uint64_t (**)(ValueMetadata *, unint64_t))(v119 + 248))(v118, v119) & 1;
  Builder.subscript.setter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v172);
  swift_getKeyPath();
  v120 = type metadata accessor for RequestPositionInSession();
  os_log_type_t v121 = *(void *)(v120 - 8);
  v122 = v158;
  (*(void (**)(char *, uint64_t, uint64_t))(v121 + 16))(v158, v159, v120);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v121 + 56))(v122, 0, 1, v120);
  Builder.subscript.setter();
  swift_getKeyPath();
  v174 = &type metadata for SiriAceLocationProvider;
  v175 = lazy protocol witness table accessor for type SiriAceLocationProvider and conformance SiriAceLocationProvider();
  Builder.subscript.setter();
  swift_getKeyPath();
  v123 = v162;
  id v124 = *(char **)(v162 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_responseLanguageVariant + 8);
  uint64_t v172 = *(id *)(v162 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_responseLanguageVariant);
  v173 = v124;
  swift_bridgeObjectRetain();
  Builder.subscript.setter();
  swift_getKeyPath();
  id v125 = *(char **)(v123 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_requestLanguageVariant + 8);
  uint64_t v172 = *(id *)(v123 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_requestLanguageVariant);
  v173 = v125;
  swift_bridgeObjectRetain();
  Builder.subscript.setter();
  swift_getKeyPath();
  id v126 = v123 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_asrLocation;
  uint64_t v127 = type metadata accessor for ExecutionLocation();
  v128 = *(void *)(v127 - 8);
  os_log_type_t v129 = *(void (**)(char *, uint64_t, uint64_t))(v128 + 16);
  v130 = v160;
  v129(v160, v126, v127);
  v131 = *(void (**)(char *, void, uint64_t, uint64_t))(v128 + 56);
  v131(v130, 0, 1, v127);
  Builder.subscript.setter();
  swift_getKeyPath();
  v129(v130, v162 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_nlLocation, v127);
  v131(v130, 0, 1, v127);
  Builder.subscript.setter();
  swift_getKeyPath();
  uint64_t v132 = v176;
  int64_t v133 = v164;
  uint64_t v172 = (id)(*(uint64_t (**)(uint64_t, uint64_t))(v176 + 16))(v164, v176);
  v173 = v134;
  Builder.subscript.setter();
  id v135 = (uint64_t)v161;
  swift_getKeyPath();
  (*(void (**)(uint64_t, uint64_t))(v132 + 24))(v133, v132);
  id v136 = type metadata accessor for UUID();
  uint64_t v137 = *(void *)(v136 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v137 + 48))(v135, 1, v136) == 1)
  {
    outlined destroy of UUID?(v135);
    uint64_t v138 = 0;
    v139 = 0;
  }
  else
  {
    uint64_t v138 = (void *)UUID.uuidString.getter();
    v139 = v140;
    (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v135, v136);
  }
  uint64_t v172 = v138;
  v173 = v139;
  return Builder.subscript.setter();
}

uint64_t key path setter for CurrentRequest.flowTaskMetadata : CurrentRequest(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowTaskMetadata?);
  MEMORY[0x1F4188790](v2 - 8);
  outlined init with copy of FlowTaskMetadata?(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  return CurrentRequest.flowTaskMetadata.setter();
}

uint64_t outlined destroy of MultiUserState(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MultiUserState();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #2 in ConversationTurnState.makeCurrentRequestForSiriEnvironment(speechData:positionInSession:)(char **a1)
{
  return closure #2 in ConversationTurnState.makeCurrentRequestForSiriEnvironment(speechData:positionInSession:)(a1, *(void *)(v1 + 32), *(char **)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void **)(v1 + 72), *(char **)(v1 + 80), *(void *)(v1 + 88), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t dispatch thunk of ConversationTurnState.executionRequestId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ConversationTurnState.rootRequestId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ConversationTurnState.sessionId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ConversationTurnState.conversationLoggingId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ConversationTurnState.invocationState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of ConversationTurnState.deviceState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of ConversationTurnState.aceServiceInvoker.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of ConversationTurnState.sharedContextService.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of ConversationTurnState.eventSender.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of ConversationTurnState.requestContextData.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of ConversationTurnState.scopedRRData.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of ConversationTurnState.bridge.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t sub_1B9E8D384@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CurrentRequest.interactionId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t outlined init with copy of MultiUserState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MultiUserState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B9E8D428()
{
  return CurrentRequest.sharedContextService.getter();
}

uint64_t sub_1B9E8D45C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CurrentRequest.currentDeviceAssistantId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B9E8D488@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CurrentRequest.voiceTriggerEventInfo.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1B9E8D4B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CurrentRequest.companionName.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B9E8D4E0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CurrentRequest.isRecognizeMyVoiceEnabled.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1B9E8D50C()
{
  return CurrentRequest.flowTaskMetadata.getter();
}

uint64_t sub_1B9E8D534@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = CurrentRequest.voiceAudioSessionId.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1B9E8D560@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CurrentRequest.utterance.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B9E8D58C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CurrentRequest.isSystemApertureEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1B9E8D5BC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CurrentRequest.isLiveActivitiesSupported.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1B9E8D5EC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CurrentRequest.isInAmbient.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1B9E8D620()
{
  return CurrentRequest.locationProvider.getter();
}

uint64_t sub_1B9E8D644(uint64_t a1)
{
  outlined init with copy of ReferenceResolutionClientProtocol(a1, (uint64_t)v2);
  return CurrentRequest.locationProvider.setter();
}

unint64_t lazy protocol witness table accessor for type SiriAceLocationProvider and conformance SiriAceLocationProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriAceLocationProvider and conformance SiriAceLocationProvider;
  if (!lazy protocol witness table cache variable for type SiriAceLocationProvider and conformance SiriAceLocationProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriAceLocationProvider and conformance SiriAceLocationProvider);
  }
  return result;
}

uint64_t sub_1B9E8D6D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CurrentRequest.responseLanguageVariant.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B9E8D700(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_91Tm(a1, a2, a3, a4, MEMORY[0x1E4F9FCE0]);
}

uint64_t sub_1B9E8D718@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CurrentRequest.requestLanguageVariant.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B9E8D744(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_91Tm(a1, a2, a3, a4, MEMORY[0x1E4F9FCC8]);
}

uint64_t keypath_set_91Tm(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  swift_bridgeObjectRetain();
  return a5(v7, v6);
}

uint64_t sub_1B9E8D7A4()
{
  return CurrentRequest.asrExecutionLocation.getter();
}

uint64_t sub_1B9E8D7C8()
{
  return CurrentRequest.nlExecutionLocation.getter();
}

uint64_t sub_1B9E8D7EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CurrentRequest.rootRequestId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B9E8D818@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CurrentRequest.sessionId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t outlined init with copy of FlowTaskMetadata?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowTaskMetadata?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t PommesInfo.__allocating_init(pommesResponse:pommesError:pommesSearchReason:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a2, v6 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesError, &demangling cache variable for type metadata for PommesError?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a3, v6 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesSearchReason, &demangling cache variable for type metadata for PommesSearchReason?);
  return v6;
}

uint64_t NLResponse.__allocating_init(nlParses:nlResponseStatusCode:pommesInfo:languageVariantResult:responseVariantResult:serverFallbackReason:nlRoutingDecision:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  uint64_t v17 = v16 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlResponseStatusCode;
  uint64_t v18 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v17, a2, v18);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a4, v16 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_languageVariantResult, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  uint64_t v19 = (void *)(v16 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_responseVariantResult);
  void *v19 = a5;
  v19[1] = a6;
  *(void *)(v16 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_pommesInfo) = a3;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a7, v16 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_serverFallbackReason, &demangling cache variable for type metadata for ServerFallbackReason?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a8, v16 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlRoutingDecision, (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  return v16;
}

uint64_t ConversationUserInput.__allocating_init(resultCandidateId:speechPackage:nlResponse:mitigationDecision:userSpecificInfoForRecognizedUser:userSpecificInfoForUserMeetingSessionThreshold:utterance:asrLocation:nlLocation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v19 = swift_allocObject();
  ConversationUserInput.init(resultCandidateId:speechPackage:nlResponse:mitigationDecision:userSpecificInfoForRecognizedUser:userSpecificInfoForUserMeetingSessionThreshold:utterance:asrLocation:nlLocation:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return v19;
}

uint64_t NLResponse.nlParses.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NLResponse.nlResponseStatusCode.getter@<X0>(uint64_t a1@<X8>)
{
  return NLResponse.nlResponseStatusCode.getter(&OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlResponseStatusCode, MEMORY[0x1E4FA2880], a1);
}

uint64_t NLResponse.languageVariantResult.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_languageVariantResult, a1, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
}

uint64_t NLResponse.responseVariantResult.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_responseVariantResult);
}

uint64_t NLResponse.pommesInfo.getter()
{
  return swift_retain();
}

uint64_t NLResponse.serverFallbackReason.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_serverFallbackReason, a1, &demangling cache variable for type metadata for ServerFallbackReason?);
}

uint64_t NLResponse.nlRoutingDecision.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlRoutingDecision, a1, (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
}

unint64_t NLResponse.CodingKeys.rawValue.getter(char a1)
{
  unint64_t result = 0x7365737261506C6ELL;
  switch(a1)
  {
    case 1:
    case 5:
      unint64_t result = 0xD000000000000014;
      break;
    case 2:
      unint64_t result = 0x6E4973656D6D6F70;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0xD000000000000015;
      break;
    case 6:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NLResponse.CodingKeys(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance NLResponse.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NLResponse.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance NLResponse.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance NLResponse.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized NLResponse.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NLResponse.CodingKeys@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = NLResponse.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t NLResponse.init(nlParses:nlResponseStatusCode:pommesInfo:languageVariantResult:responseVariantResult:serverFallbackReason:nlRoutingDecision:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 16) = a1;
  uint64_t v16 = v8 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlResponseStatusCode;
  uint64_t v17 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(v16, a2, v17);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a4, v8 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_languageVariantResult, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  uint64_t v18 = (void *)(v8 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_responseVariantResult);
  *uint64_t v18 = a5;
  v18[1] = a6;
  *(void *)(v8 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_pommesInfo) = a3;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a7, v8 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_serverFallbackReason, &demangling cache variable for type metadata for ServerFallbackReason?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a8, v8 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlRoutingDecision, (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  return v8;
}

uint64_t NLResponse.requestLanguageVariant.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_MultilingualVariant?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_languageVariantResult, (uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_LanguageVariantResult();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v3, 1, v7) == 1)
  {
    uint64_t v9 = (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?;
    uint64_t v10 = (uint64_t)v3;
  }
  else
  {
    uint64_t v11 = Siri_Nlu_External_LanguageVariantResult.multilingualVariant.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v3, v7);
    uint64_t v12 = *(void *)(v11 + 16);
    uint64_t v13 = type metadata accessor for Siri_Nlu_External_MultilingualVariant();
    uint64_t v14 = *(void *)(v13 - 8);
    if (v12)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v6, v11+ ((*(unsigned __int8 *)(*(void *)(v13 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v13 - 8) + 80)), v13);
      uint64_t v15 = 0;
    }
    else
    {
      uint64_t v15 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v6, v15, 1, v13);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v6, 1, v13) != 1)
    {
      uint64_t v16 = Siri_Nlu_External_MultilingualVariant.languageVariantName.getter();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v13);
      return v16;
    }
    uint64_t v9 = &demangling cache variable for type metadata for Siri_Nlu_External_MultilingualVariant?;
    uint64_t v10 = (uint64_t)v6;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v10, v9);
  return 0;
}

uint64_t NLResponse.deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlResponseStatusCode;
  uint64_t v2 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_languageVariantResult, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_serverFallbackReason, &demangling cache variable for type metadata for ServerFallbackReason?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlRoutingDecision, (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  return v0;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance NLResponse()
{
  return NLResponse.debugDescription.getter();
}

uint64_t ConversationUserInput.resultCandidateId.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ConversationUserInput.conversationUserInputId.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

void *ConversationUserInput.speechPackage.getter()
{
  uint64_t v1 = *(void **)(v0 + 48);
  id v2 = v1;
  return v1;
}

uint64_t ConversationUserInput.nlResponse.getter()
{
  return swift_retain();
}

uint64_t ConversationUserInput.mitigationDecision.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_mitigationDecision, a1, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
}

void *ConversationUserInput.userSpecificInfoForRecognizedUser.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_userSpecificInfoForRecognizedUser);
  id v2 = v1;
  return v1;
}

void *ConversationUserInput.userSpecificInfoForUserMeetingSessionThreshold.getter()
{
  uint64_t v1 = *(void **)(v0
                + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_userSpecificInfoForUserMeetingSessionThreshold);
  id v2 = v1;
  return v1;
}

uint64_t ConversationUserInput.executionOverrideContext.getter()
{
  return swift_retain();
}

uint64_t ConversationUserInput.utterance.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_utterance);
}

uint64_t ConversationUserInput.asrLocation.getter@<X0>(uint64_t a1@<X8>)
{
  return NLResponse.nlResponseStatusCode.getter(&OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_asrLocation, MEMORY[0x1E4FA5260], a1);
}

uint64_t ConversationUserInput.nlLocation.getter@<X0>(uint64_t a1@<X8>)
{
  return NLResponse.nlResponseStatusCode.getter(&OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_nlLocation, MEMORY[0x1E4FA5260], a1);
}

uint64_t NLResponse.nlResponseStatusCode.getter@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3 + *a1;
  uint64_t v6 = a2(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);

  return v7(a3, v5, v6);
}

char *ConversationUserInput.init(resultCandidateId:speechPackage:nlResponse:mitigationDecision:userSpecificInfoForRecognizedUser:userSpecificInfoForUserMeetingSessionThreshold:utterance:asrLocation:nlLocation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = v11;
  uint64_t v34 = a7;
  uint64_t v35 = a8;
  uint64_t v36 = a10;
  uint64_t v37 = a11;
  uint64_t v33 = a9;
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((void *)v12 + 2) = a1;
  *((void *)v12 + 3) = a2;
  UUID.init()();
  uint64_t v23 = UUID.uuidString.getter();
  uint64_t v25 = v24;
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  *((void *)v12 + 4) = v23;
  *((void *)v12 + 5) = v25;
  *((void *)v12 + 6) = a3;
  *((void *)v12 + 7) = a4;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a5, (uint64_t)&v12[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_mitigationDecision], &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  *(void *)&v12[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_userSpecificInfoForRecognizedUser] = a6;
  *(void *)&v12[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_userSpecificInfoForUserMeetingSessionThreshold] = v34;
  *(void *)&v12[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_executionOverrideContext] = 0;
  uint64_t v26 = &v12[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_utterance];
  uint64_t v27 = v33;
  *(void *)uint64_t v26 = v35;
  *((void *)v26 + 1) = v27;
  uint64_t v28 = &v12[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_asrLocation];
  uint64_t v29 = type metadata accessor for ExecutionLocation();
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 32);
  v30(v28, v36, v29);
  v30(&v12[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_nlLocation], v37, v29);
  return v12;
}

uint64_t static PommesInfo.supportsSecureCoding.getter()
{
  return static PommesInfo.supportsSecureCoding;
}

uint64_t static PommesInfo.supportsSecureCoding.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static PommesInfo.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static PommesInfo.supportsSecureCoding.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

void *PommesInfo.pommesResponse.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

uint64_t PommesInfo.pommesError.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesError, a1, &demangling cache variable for type metadata for PommesError?);
}

uint64_t PommesInfo.pommesSearchReason.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesSearchReason, a1, &demangling cache variable for type metadata for PommesSearchReason?);
}

uint64_t PommesInfo.init(pommesResponse:pommesError:pommesSearchReason:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a1;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a2, v3 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesError, &demangling cache variable for type metadata for PommesError?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a3, v3 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesSearchReason, &demangling cache variable for type metadata for PommesSearchReason?);
  return v3;
}

uint64_t PommesInfo.deinit()
{
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesError, &demangling cache variable for type metadata for PommesError?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesSearchReason, &demangling cache variable for type metadata for PommesSearchReason?);
  return v0;
}

uint64_t ObjC metadata update function for NLResponse()
{
  return type metadata accessor for NLResponse(0);
}

void type metadata completion function for NLResponse()
{
  type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Siri_Nlu_External_LanguageVariantResult?(319, (unint64_t *)&lazy cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?, MEMORY[0x1E4FA2980]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Siri_Nlu_External_LanguageVariantResult?(319, (unint64_t *)&lazy cache variable for type metadata for ServerFallbackReason?, MEMORY[0x1E4FA2600]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Siri_Nlu_External_LanguageVariantResult?(319, (unint64_t *)&lazy cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?, MEMORY[0x1E4FA20E8]);
        if (v3 <= 0x3F) {
          swift_updateClassMetadata2();
        }
      }
    }
  }
}

uint64_t method lookup function for NLResponse(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NLResponse);
}

uint64_t dispatch thunk of NLResponse.__allocating_init(nlParses:nlResponseStatusCode:pommesInfo:languageVariantResult:responseVariantResult:serverFallbackReason:nlRoutingDecision:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t ObjC metadata update function for ConversationUserInput()
{
  return type metadata accessor for ConversationUserInput(0);
}

void type metadata completion function for ConversationUserInput()
{
  type metadata accessor for Siri_Nlu_External_LanguageVariantResult?(319, (unint64_t *)&lazy cache variable for type metadata for TTResponseMessage.MitigationDecision?, MEMORY[0x1E4FA2088]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for ExecutionLocation();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for ConversationUserInput(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationUserInput);
}

uint64_t dispatch thunk of ConversationUserInput.__allocating_init(resultCandidateId:speechPackage:nlResponse:mitigationDecision:userSpecificInfoForRecognizedUser:userSpecificInfoForUserMeetingSessionThreshold:utterance:asrLocation:nlLocation:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t ObjC metadata update function for PommesInfo()
{
  return type metadata accessor for PommesInfo(0);
}

void type metadata completion function for PommesInfo()
{
  type metadata accessor for Siri_Nlu_External_LanguageVariantResult?(319, &lazy cache variable for type metadata for PommesError?, MEMORY[0x1E4FA23F8]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Siri_Nlu_External_LanguageVariantResult?(319, &lazy cache variable for type metadata for PommesSearchReason?, MEMORY[0x1E4F9FEA0]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for PommesInfo(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for PommesInfo);
}

uint64_t dispatch thunk of PommesInfo.__allocating_init(pommesResponse:pommesError:pommesSearchReason:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

void type metadata accessor for Siri_Nlu_External_LanguageVariantResult?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for NLResponse.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for NLResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9E8EE34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

void *type metadata accessor for NLResponse.CodingKeys()
{
  return &unk_1F137BD58;
}

unint64_t lazy protocol witness table accessor for type NLResponse.CodingKeys and conformance NLResponse.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type NLResponse.CodingKeys and conformance NLResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type NLResponse.CodingKeys and conformance NLResponse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NLResponse.CodingKeys and conformance NLResponse.CodingKeys);
  }
  return result;
}

unint64_t specialized NLResponse.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of NLResponse.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

uint64_t CorrectionsEngine.getCorrectionFlow(pluginId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for SiriCorrectionsFlow();
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v11 = ResponseFactory.init()();
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  static SiriKitEventSender.current.getter();
  *(void *)&long long v14 = specialized SiriCorrectionsFlow.__allocating_init(pluginId:responseFactory:outputPublisher:correctionsEngine:eventSender:)(a1, a2, v11, &v14, v5, &v13, v10, a3, a4);
  lazy protocol witness table accessor for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow();
  Flow.toActingFlow()();
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow;
  if (!lazy protocol witness table cache variable for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow)
  {
    type metadata accessor for SiriCorrectionsFlow();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow);
  }
  return result;
}

uint64_t sub_1B9E8F050()
{
  return get_witness_table_14SiriKitRuntime17CorrectionsEngineRzlqd__0aB4Flow06ActingF0HD2_AC0F0PACE02togF0QryFQOyAA0adF0C_Qo_HOTm();
}

uint64_t sub_1B9E8F058()
{
  return get_witness_table_14SiriKitRuntime17CorrectionsEngineRzlqd__0aB4Flow06ActingF0HD2_AC0F0PACE02togF0QryFQOyAA0adF0C_Qo_HOTm();
}

uint64_t get_witness_table_14SiriKitRuntime17CorrectionsEngineRzlqd__0aB4Flow06ActingF0HD2_AC0F0PACE02togF0QryFQOyAA0adF0C_Qo_HOTm()
{
  return swift_getOpaqueTypeConformance2();
}

void *SiriCorrectionsFlow.__allocating_init(pluginId:responseFactory:outputPublisher:correctionsEngine:eventSender:)(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, long long *a6)
{
  uint64_t v13 = *(void *)(a5 + 24);
  uint64_t v14 = *(void *)(a5 + 32);
  uint64_t v15 = __swift_mutable_project_boxed_opaque_existential_1(a5, v13);
  uint64_t v16 = specialized SiriCorrectionsFlow.__allocating_init(pluginId:responseFactory:outputPublisher:correctionsEngine:eventSender:)(a1, a2, a3, a4, v15, a6, v6, v13, v14);
  __swift_destroy_boxed_opaque_existential_1Tm(a5);
  return v16;
}

void *SiriCorrectionsConstants.correctionsInvocation.unsafeMutableAddressor()
{
  return &static SiriCorrectionsConstants.correctionsInvocation;
}

uint64_t static SiriCorrectionsFlow.State.== infix(_:_:)(long long *a1, long long *a2)
{
  outlined init with copy of SiriCorrectionsFlow.State(a1, (uint64_t)v4);
  outlined init with copy of SiriCorrectionsFlow.State(a2, (uint64_t)v5);
  if (!v4[3])
  {
    if (!v6) {
      goto LABEL_6;
    }
LABEL_5:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for (SiriCorrectionsFlow.State, SiriCorrectionsFlow.State));
    return 0;
  }
  if (!v6) {
    goto LABEL_5;
  }
  outlined destroy of SiriCorrectionsFlow.State((uint64_t)v5);
LABEL_6:
  outlined destroy of SiriCorrectionsFlow.State((uint64_t)v4);
  return 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SiriCorrectionsFlow.State(long long *a1, long long *a2)
{
  outlined init with copy of SiriCorrectionsFlow.State(a1, (uint64_t)v4);
  outlined init with copy of SiriCorrectionsFlow.State(a2, (uint64_t)v5);
  if (!v4[3])
  {
    if (!v6) {
      goto LABEL_6;
    }
LABEL_5:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for (SiriCorrectionsFlow.State, SiriCorrectionsFlow.State));
    return 0;
  }
  if (!v6) {
    goto LABEL_5;
  }
  outlined destroy of SiriCorrectionsFlow.State((uint64_t)v5);
LABEL_6:
  outlined destroy of SiriCorrectionsFlow.State((uint64_t)v4);
  return 1;
}

uint64_t SiriCorrectionsFlow.hostPluginId.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriCorrectionsFlow.hostPluginId.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SiriCorrectionsFlow.hostPluginId.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

void *SiriCorrectionsFlow.taskType.unsafeMutableAddressor()
{
  return &static SiriCorrectionsFlow.taskType;
}

uint64_t static SiriCorrectionsFlow.taskType.getter()
{
  return 0x6974636572726F43;
}

void *SiriCorrectionsFlow.eventLogAttribute.unsafeMutableAddressor()
{
  return &static SiriCorrectionsFlow.eventLogAttribute;
}

uint64_t static SiriCorrectionsFlow.eventLogAttribute.getter()
{
  return 0x72726F4369726953;
}

uint64_t SiriCorrectionsFlow.state.getter@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3 = (long long *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_state);
  swift_beginAccess();
  return outlined init with copy of SiriCorrectionsFlow.State(v3, a1);
}

uint64_t SiriCorrectionsFlow.state.setter(long long *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_state;
  swift_beginAccess();
  outlined assign with take of SiriCorrectionsFlow.State(a1, v3);
  return swift_endAccess();
}

uint64_t (*SiriCorrectionsFlow.state.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

void *SiriCorrectionsFlow.init(pluginId:responseFactory:outputPublisher:correctionsEngine:eventSender:)(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, long long *a6)
{
  uint64_t v13 = *(void *)(a5 + 24);
  uint64_t v14 = *(void *)(a5 + 32);
  uint64_t v15 = __swift_mutable_project_boxed_opaque_existential_1(a5, v13);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v17);
  uint64_t v19 = specialized SiriCorrectionsFlow.init(pluginId:responseFactory:outputPublisher:correctionsEngine:eventSender:)(a1, a2, a3, a4, (uint64_t)v17, a6, v6, v13, v14);
  __swift_destroy_boxed_opaque_existential_1Tm(a5);
  return v19;
}

uint64_t SiriCorrectionsFlow.execute(completion:)()
{
  return Flow.deferToExecuteAsync(_:)();
}

uint64_t SiriCorrectionsFlow.execute()(uint64_t a1)
{
  v2[41] = a1;
  v2[42] = v1;
  v2[43] = *v1;
  uint64_t v3 = type metadata accessor for PluginAction();
  v2[44] = v3;
  v2[45] = *(void *)(v3 - 8);
  v2[46] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for CorrectionsExitValue();
  v2[47] = v4;
  v2[48] = *(void *)(v4 - 8);
  v2[49] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAction?);
  v2[50] = swift_task_alloc();
  v2[51] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v2[52] = swift_task_alloc();
  v2[53] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ActivityType();
  v2[54] = v5;
  v2[55] = *(void *)(v5 - 8);
  v2[56] = swift_task_alloc();
  v2[57] = swift_task_alloc();
  return MEMORY[0x1F4188298](SiriCorrectionsFlow.execute(), 0, 0);
}

uint64_t SiriCorrectionsFlow.execute()()
{
  uint64_t v84 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v2 = type metadata accessor for Logger();
  *(void *)(v0 + 464) = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  (*(void (**)(void))(*(void *)v1 + 216))();
  if (*(void *)(v0 + 136))
  {
    uint64_t v4 = *(void *)(v0 + 384);
    uint64_t v3 = *(void *)(v0 + 392);
    uint64_t v5 = *(void *)(v0 + 376);
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 112), v0 + 152);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 152), *(void *)(v0 + 176));
    dispatch thunk of CorrectingFlow.correctionsExitValue.getter();
    SiriCorrectionsFlow.logExecutedCorrectionsFlow(exitValue:)(v3);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 152);
LABEL_16:
    uint64_t v34 = *(void *)(v0 + 400);
    uint64_t v35 = *(void *)(v0 + 352);
    uint64_t v36 = *(void *)(v0 + 360);
    uint64_t v37 = *(void *)(v0 + 336);
    uint64_t v83 = 0;
    memset(v82, 0, sizeof(v82));
    (*(void (**)(_OWORD *))(*(void *)v37 + 224))(v82);
    uint64_t v38 = v37 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_followupPluginAction;
    swift_beginAccess();
    outlined init with copy of ReferenceResolutionClientProtocol?(v38, v34, &demangling cache variable for type metadata for PluginAction?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 400), &demangling cache variable for type metadata for PluginAction?);
      static ExecuteResponse.complete()();
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 360) + 32))(*(void *)(v0 + 368), *(void *)(v0 + 400), *(void *)(v0 + 352));
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v41 = 0;
        _os_log_impl(&dword_1B9C64000, v39, v40, "[CorrectionsFlow] sending followup action", v41, 2u);
        MEMORY[0x1BA9E48C0](v41, -1, -1);
      }
      uint64_t v43 = *(void *)(v0 + 360);
      uint64_t v42 = *(void *)(v0 + 368);
      uint64_t v44 = *(void *)(v0 + 352);

      static ExecuteResponse.redirect(nextPluginAction:)();
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
    }
LABEL_21:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v45 = *(uint64_t (**)(void))(v0 + 8);
    return v45();
  }
  uint64_t v7 = *(void *)(v0 + 448);
  uint64_t v6 = *(void *)(v0 + 456);
  uint64_t v9 = *(void *)(v0 + 432);
  int v8 = *(void **)(v0 + 440);
  uint64_t v10 = *(void *)(v0 + 416);
  uint64_t v11 = *(void *)(v0 + 424);
  uint64_t v12 = *(void **)(v0 + 336);
  uint64_t v81 = *(void *)(v0 + 344);
  uint64_t v76 = v12;
  uint64_t v70 = (void (*)(uint64_t, void, uint64_t))v8[13];
  v70(v6, *MEMORY[0x1E4FA1AD8], v9);
  uint64_t v13 = type metadata accessor for SiriKitReliabilityCodes();
  uint64_t v71 = *(void *)(v13 - 8);
  uint64_t v75 = v13;
  int64_t v74 = *(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 56);
  v74(v11, 1, 1);
  uint64_t v72 = (void *)((char *)v12 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender);
  __swift_project_boxed_opaque_existential_1((void *)((char *)v12 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender), *(void *)((char *)v12 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender + 24));
  type metadata accessor for SiriKitEvent();
  unint64_t v73 = (void (*)(uint64_t, uint64_t, uint64_t))v8[2];
  v73(v7, v6, v9);
  outlined init with copy of ReferenceResolutionClientProtocol?(v11, v10, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v81;
  SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
  dispatch thunk of SiriKitEventSending.send(_:)();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v11, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  uint64_t v15 = (void (*)(uint64_t, uint64_t))v8[1];
  v15(v6, v9);
  uint64_t v16 = v12[13];
  uint64_t v17 = v12[14];
  __swift_project_boxed_opaque_existential_1(v12 + 10, v16);
  LOBYTE(v17) = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  if ((v17 & 1) == 0)
  {
    uint64_t v79 = v15;
    if (v20)
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_1B9C64000, v18, v19, "[CorrectionsFlow] nothing to undo in correctionsManager in flow", v27, 2u);
      MEMORY[0x1BA9E48C0](v27, -1, -1);
    }
    uint64_t v29 = *(void *)(v0 + 448);
    uint64_t v28 = *(void *)(v0 + 456);
    uint64_t v31 = *(void *)(v0 + 424);
    uint64_t v30 = *(void *)(v0 + 432);
    uint64_t v32 = *(void *)(v0 + 416);
    uint64_t v77 = *(void *)(v0 + 344);

    v70(v28, *MEMORY[0x1E4FA1B20], v30);
    (*(void (**)(uint64_t, void, uint64_t))(v71 + 104))(v31, *MEMORY[0x1E4FA19B0], v75);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v74)(v31, 0, 1, v75);
    __swift_project_boxed_opaque_existential_1(v72, v72[3]);
    v73(v29, v28, v30);
    outlined init with copy of ReferenceResolutionClientProtocol?(v31, v32, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    uint64_t v33 = (void *)swift_allocObject();
    v33[2] = 0xD000000000000027;
    v33[3] = 0x80000001BA067560;
    v33[4] = v77;
    SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
    dispatch thunk of SiriKitEventSending.send(_:)();
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v31, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    v79(v28, v30);
    goto LABEL_16;
  }
  if (v20)
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl(&dword_1B9C64000, v18, v19, "[CorrectionsFlow] undoing using correctionsManager", v21, 2u);
    MEMORY[0x1BA9E48C0](v21, -1, -1);
  }

  uint64_t v22 = v76[13];
  uint64_t v23 = v76[14];
  __swift_project_boxed_opaque_existential_1(v76 + 10, v22);
  (*(void (**)(uint64_t, uint64_t))(v23 + 24))(v22, v23);
  outlined init with copy of UndoResult(v0 + 64, v0 + 16);
  if (*(unsigned char *)(v0 + 56))
  {
    if (*(unsigned char *)(v0 + 56) != 1)
    {
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 16), v0 + 192);
      int v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v55, v56))
      {
        uint64_t v57 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v57 = 0;
        _os_log_impl(&dword_1B9C64000, v55, v56, "[CorrectionsFlow] Handling registered correcting flow", v57, 2u);
        MEMORY[0x1BA9E48C0](v57, -1, -1);
      }

      if (SiriCorrectionsFlow.isSteeringInputAcceptedBy(correctingFlow:)((void *)(v0 + 192)))
      {
        uint64_t v58 = *(void *)(v0 + 408);
        uint64_t v59 = *(void *)(v0 + 336);
        (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 360) + 56))(v58, 1, 1, *(void *)(v0 + 352));
        uint64_t v60 = v59 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_followupPluginAction;
        swift_beginAccess();
        outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v58, v60, &demangling cache variable for type metadata for PluginAction?);
        swift_endAccess();
      }
      uint64_t v61 = *(void *)(v0 + 336);
      outlined init with copy of ReferenceResolutionClientProtocol(v0 + 192, v0 + 232);
      (*(void (**)(uint64_t))(*(void *)v61 + 224))(v0 + 232);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 192), *(void *)(v0 + 216));
      static ExecuteResponse.ongoing<A>(next:)();
      outlined destroy of UndoResult(v0 + 64);
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 192);
      goto LABEL_21;
    }
    uint64_t v24 = *(void *)(v0 + 16);
    *(void *)(v0 + 472) = v24;
    uint64_t v25 = (void *)swift_task_alloc();
    *(void *)(v0 + 480) = v25;
    *uint64_t v25 = v0;
    v25[1] = SiriCorrectionsFlow.execute();
    return SiriCorrectionsFlow.execute(undoCommands:)(v24);
  }
  else
  {
    uint64_t v80 = v15;
    uint64_t v46 = *(void **)(v0 + 16);
    *(void *)(v0 + 488) = v46;
    id v47 = v46;
    id v48 = v46;
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      uint64_t v52 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v51 = 138412290;
      id v53 = v46;
      uint64_t v54 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 320) = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v52 = v54;

      _os_log_impl(&dword_1B9C64000, v49, v50, "[CorrectionsFlow] corrections manager returned failure: %@", v51, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v52, -1, -1);
      MEMORY[0x1BA9E48C0](v51, -1, -1);
    }
    else
    {
    }
    uint64_t v63 = *(void *)(v0 + 448);
    uint64_t v62 = *(void *)(v0 + 456);
    uint64_t v65 = *(void *)(v0 + 424);
    uint64_t v64 = *(void *)(v0 + 432);
    uint64_t v66 = *(void *)(v0 + 416);
    uint64_t v78 = *(void *)(v0 + 344);

    v70(v62, *MEMORY[0x1E4FA1B20], v64);
    (*(void (**)(uint64_t, void, uint64_t))(v71 + 104))(v65, *MEMORY[0x1E4FA19B0], v75);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v74)(v65, 0, 1, v75);
    __swift_project_boxed_opaque_existential_1(v72, v72[3]);
    v73(v63, v62, v64);
    outlined init with copy of ReferenceResolutionClientProtocol?(v65, v66, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    id v67 = (void *)swift_allocObject();
    v67[2] = 0xD000000000000035;
    v67[3] = 0x80000001BA067590;
    v67[4] = v78;
    SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
    dispatch thunk of SiriKitEventSending.send(_:)();
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v65, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    v80(v62, v64);
    uint64_t v68 = (void *)swift_task_alloc();
    *(void *)(v0 + 496) = v68;
    *uint64_t v68 = v0;
    v68[1] = SiriCorrectionsFlow.execute();
    uint64_t v69 = MEMORY[0x1E4FBC860];
    return SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:)(v69, 1);
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](SiriCorrectionsFlow.execute(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  _OWORD v14[2];
  uint64_t v15;
  void *v16;
  uint64_t v17;

  uint64_t v16 = v0;
  outlined destroy of UndoResult((uint64_t)(v0 + 8));
  uint64_t v1 = v0[50];
  uint64_t v2 = v0[44];
  uint64_t v3 = v0[45];
  uint64_t v4 = v0[42];
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  (*(void (**)(_OWORD *))(*(void *)v4 + 224))(v14);
  uint64_t v5 = v4 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_followupPluginAction;
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v5, v1, &demangling cache variable for type metadata for PluginAction?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0[50], &demangling cache variable for type metadata for PluginAction?);
    static ExecuteResponse.complete()();
  }
  else
  {
    (*(void (**)(void, void, void))(v0[45] + 32))(v0[46], v0[50], v0[44]);
    uint64_t v6 = Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      int v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v8 = 0;
      _os_log_impl(&dword_1B9C64000, v6, v7, "[CorrectionsFlow] sending followup action", v8, 2u);
      MEMORY[0x1BA9E48C0](v8, -1, -1);
    }
    uint64_t v10 = v0[45];
    uint64_t v9 = v0[46];
    uint64_t v11 = v0[44];

    static ExecuteResponse.redirect(nextPluginAction:)();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](SiriCorrectionsFlow.execute(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  _OWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v16 = v0;

  outlined destroy of UndoResult(v0 + 64);
  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v2 = *(void *)(v0 + 352);
  uint64_t v3 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 336);
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  (*(void (**)(_OWORD *))(*(void *)v4 + 224))(v14);
  uint64_t v5 = v4 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_followupPluginAction;
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v5, v1, &demangling cache variable for type metadata for PluginAction?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 400), &demangling cache variable for type metadata for PluginAction?);
    static ExecuteResponse.complete()();
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 360) + 32))(*(void *)(v0 + 368), *(void *)(v0 + 400), *(void *)(v0 + 352));
    uint64_t v6 = Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      int v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v8 = 0;
      _os_log_impl(&dword_1B9C64000, v6, v7, "[CorrectionsFlow] sending followup action", v8, 2u);
      MEMORY[0x1BA9E48C0](v8, -1, -1);
    }
    uint64_t v10 = *(void *)(v0 + 360);
    uint64_t v9 = *(void *)(v0 + 368);
    uint64_t v11 = *(void *)(v0 + 352);

    static ExecuteResponse.redirect(nextPluginAction:)();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t SiriCorrectionsFlow.on(input:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Input();
  uint64_t v95 = *(void *)(v2 - 8);
  uint64_t v96 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v91 = (uint64_t)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  unint64_t v93 = (unint64_t)&v88 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAction?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v90 = (uint64_t)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v94 = (char *)&v88 - v12;
  uint64_t v13 = type metadata accessor for Parse();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v88 - v22;
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v14 + 88))(v16, v13) != *MEMORY[0x1E4FA1F38])
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Logger.executor);
    uint64_t v46 = v95;
    uint64_t v45 = v96;
    (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v4, a1, v96);
    id v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      *(void *)&long long v97 = v50;
      *(_DWORD *)uint64_t v49 = 136315138;
      lazy protocol witness table accessor for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow(&lazy protocol witness table cache variable for type Input and conformance Input, MEMORY[0x1E4FA1EE0]);
      uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, (uint64_t *)&v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v4, v45);
      _os_log_impl(&dword_1B9C64000, v47, v48, "[CorrectionsFlow] declining input %s", v49, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v50, -1, -1);
      MEMORY[0x1BA9E48C0](v49, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v46 + 8))(v4, v45);
    }

    return 0;
  }
  (*(void (**)(char *, uint64_t))(v14 + 96))(v16, v13);
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v16, v17);
  uint64_t v24 = v23;
  *(void *)&long long v97 = Parse.DirectInvocation.identifier.getter();
  *((void *)&v97 + 1) = v25;
  uint64_t v99 = 0xD000000000000024;
  unint64_t v100 = 0x80000001BA067070;
  lazy protocol witness table accessor for type String and conformance String();
  lazy protocol witness table accessor for type String and conformance String();
  char v26 = BidirectionalCollection<>.starts<A>(with:)();
  swift_bridgeObjectRelease();
  uint64_t v27 = v17;
  uint64_t v28 = v18;
  if ((v26 & 1) == 0)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    __swift_project_value_buffer(v53, (uint64_t)static Logger.executor);
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v24, v17);
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v96 = (uint64_t)v24;
      os_log_type_t v56 = (uint8_t *)swift_slowAlloc();
      uint64_t v57 = swift_slowAlloc();
      *(void *)&long long v97 = v57;
      uint64_t v95 = v17;
      *(_DWORD *)os_log_type_t v56 = 136315138;
      uint64_t v58 = Parse.DirectInvocation.identifier.getter();
      uint64_t v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, (uint64_t *)&v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v60 = *(void (**)(char *, uint64_t))(v28 + 8);
      uint64_t v61 = v95;
      v60(v21, v95);
      _os_log_impl(&dword_1B9C64000, v54, v55, "[CorrectionsFlow] CorrectionsFlow declining input. wrong direct invocation identifier %s", v56, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v57, -1, -1);
      MEMORY[0x1BA9E48C0](v56, -1, -1);

      v60((char *)v96, v61);
    }
    else
    {

      uint64_t v66 = *(void (**)(char *, uint64_t))(v28 + 8);
      v66(v21, v17);
      v66(v24, v17);
    }
    return 0;
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Logger.executor);
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  BOOL v32 = os_log_type_enabled(v30, v31);
  uint64_t v33 = v24;
  uint64_t v34 = v94;
  if (v32)
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v35 = 0;
    _os_log_impl(&dword_1B9C64000, v30, v31, "[CorrectionsFlow] CorrectionsFlow accepting input", v35, 2u);
    MEMORY[0x1BA9E48C0](v35, -1, -1);
  }

  uint64_t v36 = Parse.DirectInvocation.userData.getter();
  if (!v36) {
    goto LABEL_38;
  }
  uint64_t v37 = v36;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  uint64_t v38 = PropertyListDecoder.init()();
  if (*(void *)(v37 + 16)
    && (unint64_t v39 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000030, 0x80000001BA0674C0), (v40 & 1) != 0)
    && (outlined init with copy of Any(*(void *)(v37 + 56) + 32 * v39, (uint64_t)&v97), (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v42 = v99;
    unint64_t v41 = v100;
    uint64_t v43 = type metadata accessor for PluginAction();
    lazy protocol witness table accessor for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow(&lazy protocol witness table cache variable for type PluginAction and conformance PluginAction, MEMORY[0x1E4FA1B58]);
    uint64_t v88 = v42;
    unint64_t v89 = v41;
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v34, 0, 1, v43);
    uint64_t v81 = (uint64_t)v34;
    uint64_t v82 = v90;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v81, v90, &demangling cache variable for type metadata for PluginAction?);
    uint64_t v83 = v92 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_followupPluginAction;
    swift_beginAccess();
    outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v82, v83, &demangling cache variable for type metadata for PluginAction?);
    swift_endAccess();
    uint64_t v84 = Logger.logObject.getter();
    os_log_type_t v85 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v84, v85))
    {
      uint64_t v87 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v87 = 0;
      _os_log_impl(&dword_1B9C64000, v84, v85, "[CorrectionsFlow] Followup PluginAction available.", v87, 2u);
      MEMORY[0x1BA9E48C0](v87, -1, -1);
    }
    outlined consume of Data._Representation(v88, v89);
  }
  else
  {
    uint64_t v84 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v84, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v63 = 0;
      _os_log_impl(&dword_1B9C64000, v84, v62, "[CorrectionsFlow] No followup plugin action.", v63, 2u);
      MEMORY[0x1BA9E48C0](v63, -1, -1);
    }
  }

  if (*(void *)(v37 + 16)
    && (unint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000002BLL, 0x80000001BA067500), (v65 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v37 + 56) + 32 * v64, (uint64_t)&v97);
  }
  else
  {
    long long v97 = 0u;
    long long v98 = 0u;
  }
  uint64_t v68 = v93;
  swift_bridgeObjectRelease();
  if (!*((void *)&v98 + 1))
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v97, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_34;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_34:
    uint64_t v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v72, v73))
    {
      int64_t v74 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v74 = 0;
      _os_log_impl(&dword_1B9C64000, v72, v73, "[CorrectionsFlow] No steering input in user data.", v74, 2u);
      MEMORY[0x1BA9E48C0](v74, -1, -1);
    }

    goto LABEL_37;
  }
  uint64_t v70 = v99;
  unint64_t v69 = v100;
  lazy protocol witness table accessor for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow(&lazy protocol witness table cache variable for type Input and conformance Input, MEMORY[0x1E4FA1EE0]);
  uint64_t v71 = v96;
  unint64_t v93 = v69;
  uint64_t v94 = (char *)v38;
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v95 + 56))(v68, 0, 1, v71);
  uint64_t v75 = v91;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v68, v91, &demangling cache variable for type metadata for Input?);
  uint64_t v76 = v92 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_steeringInput;
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v75, v76, &demangling cache variable for type metadata for Input?);
  swift_endAccess();
  uint64_t v77 = Logger.logObject.getter();
  os_log_type_t v78 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v77, v78))
  {
    uint64_t v80 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v80 = 0;
    _os_log_impl(&dword_1B9C64000, v77, v78, "[CorrectionsFlow] Steering input available.", v80, 2u);
    MEMORY[0x1BA9E48C0](v80, -1, -1);
  }
  outlined consume of Data._Representation(v70, v93);

LABEL_37:
  swift_release();
LABEL_38:
  (*(void (**)(char *, uint64_t))(v28 + 8))(v33, v27);
  return 1;
}

void *SiriCorrectionsConstants.correctionsPluginKey.unsafeMutableAddressor()
{
  return &static SiriCorrectionsConstants.correctionsPluginKey;
}

void *SiriCorrectionsConstants.steeringInput.unsafeMutableAddressor()
{
  return &static SiriCorrectionsConstants.steeringInput;
}

uint64_t SiriCorrectionsFlow.isSteeringInputAcceptedBy(correctingFlow:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v51 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Input();
  uint64_t v52 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v50 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v50 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAction?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for PluginAction();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = v2 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_followupPluginAction;
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v18, (uint64_t)v13, &demangling cache variable for type metadata for PluginAction?);
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  uint64_t v53 = v14;
  if (v19(v13, 1, v14) != 1)
  {
    uint64_t v22 = v52;
    uint64_t v50 = (char *)v6;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v53);
    uint64_t v23 = PluginAction.flowHandlerId.getter();
    uint64_t v25 = v24;
    if (v23 == (*(uint64_t (**)(void))(*(void *)v2 + 144))() && v25 == v26)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v28 & 1) == 0)
      {
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v29 = type metadata accessor for Logger();
        __swift_project_value_buffer(v29, (uint64_t)static Logger.executor);
        uint64_t v30 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v30, v31)) {
          goto LABEL_31;
        }
        BOOL v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)BOOL v32 = 0;
        uint64_t v33 = "[CorrectionsFlow] Will not pass steering input because we have cross plugin followup.";
        goto LABEL_30;
      }
    }
    __swift_project_boxed_opaque_existential_1(v51, v51[3]);
    PluginAction.input.getter();
    char v40 = dispatch thunk of CorrectingFlow.on(correction:)();
    (*(void (**)(char *, char *))(v22 + 8))(v10, v50);
    if (v40)
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      __swift_project_value_buffer(v41, (uint64_t)static Logger.executor);
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v44 = 0;
        _os_log_impl(&dword_1B9C64000, v42, v43, "[CorrectionsFlow] flow handles steering, no need to redirect", v44, 2u);
        MEMORY[0x1BA9E48C0](v44, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v53);
      return 1;
    }
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)static Logger.executor);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v30, v31))
    {
LABEL_31:

      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v53);
      return 0;
    }
    BOOL v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v32 = 0;
    uint64_t v33 = "[CorrectionsFlow] The correcting flow will not handle the followup.";
LABEL_30:
    _os_log_impl(&dword_1B9C64000, v30, v31, v33, v32, 2u);
    MEMORY[0x1BA9E48C0](v32, -1, -1);
    goto LABEL_31;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for PluginAction?);
  uint64_t v20 = v2 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_steeringInput;
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v20, (uint64_t)v5, &demangling cache variable for type metadata for Input?);
  uint64_t v21 = v52;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, &demangling cache variable for type metadata for Input?);
LABEL_33:
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    __swift_project_value_buffer(v46, (uint64_t)static Logger.executor);
    id v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl(&dword_1B9C64000, v47, v48, "[CorrectionsFlow] No steering input.", v49, 2u);
      MEMORY[0x1BA9E48C0](v49, -1, -1);
    }

    return 0;
  }
  uint64_t v34 = v50;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v50, v5, v6);
  __swift_project_boxed_opaque_existential_1(v51, v51[3]);
  if ((dispatch thunk of CorrectingFlow.on(correction:)() & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v34, v6);
    goto LABEL_33;
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  __swift_project_value_buffer(v35, (uint64_t)static Logger.executor);
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v38 = 0;
    _os_log_impl(&dword_1B9C64000, v36, v37, "[CorrectionsFlow] flow handles steering with original input.", v38, 2u);
    MEMORY[0x1BA9E48C0](v38, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v21 + 8))(v34, v6);
  return 1;
}

uint64_t SiriCorrectionsFlow.execute(undoCommands:)(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for CorrectionsActionOutcome();
  v2[5] = v3;
  v2[6] = *(void *)(v3 - 8);
  v2[7] = swift_task_alloc();
  return MEMORY[0x1F4188298](SiriCorrectionsFlow.execute(undoCommands:), 0, 0);
}

uint64_t SiriCorrectionsFlow.execute(undoCommands:)()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[3];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134217984;
    v0[2] = *(void *)(v5 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v2, v3, "[CorrectionsFlow] corrections undo action returned, count == %ld", v6, 0xCu);
    MEMORY[0x1BA9E48C0](v6, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v7 = (void *)v0[3];
  uint64_t v8 = v7[2];
  v0[8] = v8;
  if (v8)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    v0[9] = 0;
    v0[10] = v9;
    uint64_t v10 = v7 + 4;
    uint64_t v11 = v7[7];
    uint64_t v12 = v7[8];
    swift_bridgeObjectRetain();
    __swift_project_boxed_opaque_existential_1(v10, v11);
    uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 + 8) + **(int **)(v12 + 8));
    uint64_t v13 = (void *)swift_task_alloc();
    v0[11] = v13;
    *uint64_t v13 = v0;
    v13[1] = SiriCorrectionsFlow.execute(undoCommands:);
    uint64_t v14 = v0[7];
    return v19(v14, v11, v12);
  }
  else
  {
    uint64_t v16 = MEMORY[0x1E4FBC860];
    v0[12] = MEMORY[0x1E4FBC860];
    uint64_t v17 = swift_bridgeObjectRetain();
    SiriCorrectionsFlow.logExecutedCorrectionsActions(outcomes:)(v17);
    swift_bridgeObjectRelease();
    uint64_t v18 = (void *)swift_task_alloc();
    v0[13] = v18;
    *uint64_t v18 = v0;
    v18[1] = SiriCorrectionsFlow.execute(undoCommands:);
    return SiriCorrectionsFlow.produceOutput(from:)(v16);
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](SiriCorrectionsFlow.execute(undoCommands:), 0, 0);
}

{
  void *v0;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;

  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v2 = v0[10];
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, v0[10]);
  }
  BOOL v4 = *(void *)(v2 + 16);
  os_log_type_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, v2);
  }
  uint64_t v5 = v0[8];
  uint64_t v7 = v0[6];
  uint64_t v6 = v0[7];
  uint64_t v8 = v0[5];
  uint64_t v9 = v0[9] + 1;
  *(void *)(v2 + 16) = v4 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(v2+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v4, v6, v8);
  if (v9 == v5)
  {
    swift_bridgeObjectRelease();
    v0[12] = v2;
    uint64_t v10 = swift_bridgeObjectRetain();
    SiriCorrectionsFlow.logExecutedCorrectionsActions(outcomes:)(v10);
    swift_bridgeObjectRelease();
    uint64_t v11 = (void *)swift_task_alloc();
    v0[13] = v11;
    char *v11 = v0;
    v11[1] = SiriCorrectionsFlow.execute(undoCommands:);
    return SiriCorrectionsFlow.produceOutput(from:)(v2);
  }
  else
  {
    uint64_t v13 = v0[9] + 1;
    v0[9] = v13;
    v0[10] = v2;
    uint64_t v14 = (void *)(v0[3] + 40 * v13);
    uint64_t v15 = v14[7];
    uint64_t v16 = v14[8];
    __swift_project_boxed_opaque_existential_1(v14 + 4, v15);
    uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 + 8) + **(int **)(v16 + 8));
    uint64_t v17 = (void *)swift_task_alloc();
    v0[11] = v17;
    *uint64_t v17 = v0;
    v17[1] = SiriCorrectionsFlow.execute(undoCommands:);
    uint64_t v18 = v0[7];
    return v19(v18, v15, v16);
  }
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  os_log_type_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t closure #1 in SiriCorrectionsFlow.sendSiriKitEvent(activityType:statusReason:statusReasonDescription:)()
{
  return dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter();
}

uint64_t SiriCorrectionsFlow.logExecutedCorrectionsFlow(exitValue:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v68 = *v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  id v67 = (char *)v62 - v8;
  uint64_t v9 = type metadata accessor for ActivityType();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)v62 - v14;
  uint64_t v16 = type metadata accessor for CorrectionsExitValue();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (void *)((char *)v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void *, uint64_t, uint64_t))(v17 + 16))(v19, a1, v16);
  int v20 = (*(uint64_t (**)(void *, uint64_t))(v17 + 88))(v19, v16);
  if (v20 == *MEMORY[0x1E4FA1DA8])
  {
    (*(void (**)(void *, uint64_t))(v17 + 96))(v19, v16);
    uint64_t v21 = (void *)*v19;
    unint64_t v64 = (char *)v19[1];
    char v65 = v21;
    uint64_t v22 = v9;
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v15, *MEMORY[0x1E4FA1B20], v9);
    uint64_t v23 = *MEMORY[0x1E4FA19B0];
    uint64_t v24 = (uint64_t)v7;
    uint64_t v25 = type metadata accessor for SiriKitReliabilityCodes();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = (uint64_t)v67;
    char v28 = v15;
    uint64_t v66 = v15;
    uint64_t v29 = v26;
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 104))(v67, v23, v25);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(v27, 0, 1, v25);
    uint64_t v30 = (void *)((char *)v2 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender);
    uint64_t v31 = *(void *)((char *)v2 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender + 24);
    uint64_t v63 = (char *)v30[4];
    __swift_project_boxed_opaque_existential_1(v30, v31);
    type metadata accessor for SiriKitEvent();
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v28, v22);
    outlined init with copy of ReferenceResolutionClientProtocol?(v27, v24, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    BOOL v32 = (void *)swift_allocObject();
    uint64_t v33 = (uint64_t)v64;
    v32[2] = v65;
    v32[3] = v33;
    v32[4] = v68;
    swift_bridgeObjectRetain();
    SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
    dispatch thunk of SiriKitEventSending.send(_:)();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v27, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v66, v22);
  }
  else
  {
    unint64_t v64 = v7;
    char v65 = v2;
    uint64_t v63 = v13;
    if (v20 == *MEMORY[0x1E4FA1DB0])
    {
      uint64_t v35 = v10;
      (*(void (**)(char *, void, uint64_t))(v10 + 104))(v15, *MEMORY[0x1E4FA1B30], v9);
      uint64_t v36 = type metadata accessor for SiriKitReliabilityCodes();
      uint64_t v37 = (uint64_t)v67;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v67, 1, 1, v36);
      __swift_project_boxed_opaque_existential_1((void *)((char *)v65 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender), *(void *)((char *)v65 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender + 24));
      type metadata accessor for SiriKitEvent();
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v63, v15, v9);
      outlined init with copy of ReferenceResolutionClientProtocol?(v37, (uint64_t)v64, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      uint64_t v38 = (void *)swift_allocObject();
      v38[2] = 0;
      v38[3] = 0;
      v38[4] = v68;
      SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
      dispatch thunk of SiriKitEventSending.send(_:)();
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?(v37, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v15, v9);
    }
    else
    {
      unint64_t v39 = v65;
      if (v20 == *MEMORY[0x1E4FA1DA0])
      {
        (*(void (**)(char *, void, uint64_t))(v10 + 104))(v15, *MEMORY[0x1E4FA1B30], v9);
        uint64_t v40 = type metadata accessor for SiriKitReliabilityCodes();
        uint64_t v41 = (uint64_t)v67;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v67, 1, 1, v40);
        uint64_t v42 = *(void *)((char *)v39 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender + 24);
        char v65 = *(void **)((char *)v39 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender + 32);
        __swift_project_boxed_opaque_existential_1((void *)((char *)v39 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender), v42);
        type metadata accessor for SiriKitEvent();
        (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v63, v15, v9);
        outlined init with copy of ReferenceResolutionClientProtocol?(v41, (uint64_t)v64, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
        os_log_type_t v43 = (void *)swift_allocObject();
        void v43[2] = 0xD000000000000011;
        v43[3] = 0x80000001BA0676F0;
        v43[4] = v68;
        SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
        dispatch thunk of SiriKitEventSending.send(_:)();
        swift_release();
        outlined destroy of ReferenceResolutionClientProtocol?(v41, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
        return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
      }
      else
      {
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v44 = type metadata accessor for Logger();
        __swift_project_value_buffer(v44, (uint64_t)static Logger.executor);
        uint64_t v45 = Logger.logObject.getter();
        os_log_type_t v46 = static os_log_type_t.error.getter();
        BOOL v47 = os_log_type_enabled(v45, v46);
        uint64_t v66 = v15;
        if (v47)
        {
          os_log_type_t v48 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v48 = 0;
          _os_log_impl(&dword_1B9C64000, v45, v46, "[CorrectionsFlow] unexpected correctionsExitValue.", v48, 2u);
          uint64_t v49 = v48;
          uint64_t v15 = v66;
          MEMORY[0x1BA9E48C0](v49, -1, -1);
        }

        uint64_t v50 = *MEMORY[0x1E4FA1B20];
        uint64_t v51 = v10;
        uint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
        v62[0] = v9;
        v52(v15, v50, v9);
        uint64_t v53 = *MEMORY[0x1E4FA19B0];
        uint64_t v54 = type metadata accessor for SiriKitReliabilityCodes();
        uint64_t v55 = *(void *)(v54 - 8);
        uint64_t v56 = (uint64_t)v67;
        (*(void (**)(char *, uint64_t, uint64_t))(v55 + 104))(v67, v53, v54);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v55 + 56))(v56, 0, 1, v54);
        uint64_t v57 = (void *)((char *)v65 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender);
        uint64_t v58 = *(void *)((char *)v65 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender + 24);
        char v65 = *(void **)((char *)v65 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender + 32);
        v62[1] = __swift_project_boxed_opaque_existential_1(v57, v58);
        type metadata accessor for SiriKitEvent();
        unint64_t v59 = v15;
        uint64_t v60 = v62[0];
        (*(void (**)(char *, char *, void))(v51 + 16))(v63, v59, v62[0]);
        outlined init with copy of ReferenceResolutionClientProtocol?(v56, (uint64_t)v64, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
        uint64_t v61 = (void *)swift_allocObject();
        v61[2] = 0xD00000000000002BLL;
        v61[3] = 0x80000001BA0676C0;
        v61[4] = v68;
        SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
        dispatch thunk of SiriKitEventSending.send(_:)();
        swift_release();
        outlined destroy of ReferenceResolutionClientProtocol?(v56, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
        (*(void (**)(char *, uint64_t))(v51 + 8))(v66, v60);
        return (*(uint64_t (**)(void *, uint64_t))(v17 + 8))(v19, v16);
      }
    }
  }
}

uint64_t SiriCorrectionsFlow.logExecutedCorrectionsActions(outcomes:)(uint64_t a1)
{
  uint64_t v61 = *v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v60 = (uint64_t)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v55 - v6;
  uint64_t v8 = type metadata accessor for ActivityType();
  uint64_t v63 = *(void *)(v8 - 8);
  uint64_t v64 = v8;
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  unint64_t v59 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  os_log_type_t v62 = (char *)&v55 - v11;
  uint64_t v12 = type metadata accessor for CorrectionsActionOutcome();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v19 = (char *)&v55 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v55 - v20;
  uint64_t v22 = MEMORY[0x1E4FBC860];
  uint64_t v76 = MEMORY[0x1E4FBC860];
  uint64_t v23 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v57 = v23;
  if (v23)
  {
    uint64_t v55 = a1;
    uint64_t v56 = v7;
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    uint64_t v25 = v13 + 16;
    uint64_t v24 = v26;
    uint64_t v27 = *(void *)(v25 + 56);
    unint64_t v67 = (*(unsigned __int8 *)(v25 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 64);
    char v28 = (char *)(a1 + v67);
    uint64_t v75 = (uint64_t (**)(char *, uint64_t))(v25 + 72);
    int v74 = *MEMORY[0x1E4FA1E18];
    int v73 = *MEMORY[0x1E4FA1E08];
    char v65 = (void (**)(char *, uint64_t))(v25 + 80);
    uint64_t v66 = (void (**)(char *, uint64_t))(v25 - 8);
    uint64_t v71 = v27;
    uint64_t v72 = (void (**)(char *, char *, uint64_t))(v25 + 16);
    unint64_t v69 = v16;
    uint64_t v70 = v25;
    uint64_t v68 = v26;
    v26(v21, (char *)(a1 + v67), v12);
    while (1)
    {
      v24(v19, v21, v12);
      int v31 = (*v75)(v19, v12);
      if (v31 == v74 || v31 == v73)
      {
        (*v65)(v19, v12);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v19, &demangling cache variable for type metadata for Output?);
        uint64_t v33 = *v72;
        (*v72)(v16, v21, v12);
        uint64_t v34 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v34 + 16) + 1, 1);
          uint64_t v34 = v76;
        }
        unint64_t v36 = *(void *)(v34 + 16);
        unint64_t v35 = *(void *)(v34 + 24);
        if (v36 >= v35 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
          uint64_t v34 = v76;
        }
        *(void *)(v34 + 16) = v36 + 1;
        uint64_t v30 = v71;
        unint64_t v37 = v34 + v67 + v36 * v71;
        uint64_t v16 = v69;
        v33((char *)v37, v69, v12);
        uint64_t v76 = v34;
        uint64_t v24 = v68;
      }
      else
      {
        uint64_t v29 = *v66;
        (*v66)(v19, v12);
        v29(v21, v12);
        uint64_t v30 = v71;
      }
      v28 += v30;
      if (!--v23) {
        break;
      }
      v24(v21, v28, v12);
    }
    uint64_t v22 = v76;
    uint64_t v7 = v56;
  }
  swift_bridgeObjectRelease();
  uint64_t v38 = *(void *)(v22 + 16);
  swift_release();
  uint64_t v39 = v63;
  uint64_t v40 = v64;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v41 = type metadata accessor for Logger();
  __swift_project_value_buffer(v41, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain();
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 134218240;
    uint64_t v76 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v44 + 12) = 2048;
    uint64_t v45 = v57;
    uint64_t v76 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v42, v43, "[CorrectionsFlow] %ld out of %ld corrections actions report success.", (uint8_t *)v44, 0x16u);
    MEMORY[0x1BA9E48C0](v44, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v45 = v57;
  }

  os_log_type_t v46 = *(void (**)(void))(v39 + 104);
  if (v38 == v45)
  {
    uint64_t v47 = v40;
    os_log_type_t v48 = v62;
    v46();
    uint64_t v49 = type metadata accessor for SiriKitReliabilityCodes();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v7, 1, 1, v49);
    __swift_project_boxed_opaque_existential_1((void *)(v58 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender), *(void *)(v58 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender + 24));
    type metadata accessor for SiriKitEvent();
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v59, v48, v47);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v7, v60, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    uint64_t v50 = (void *)swift_allocObject();
    v50[2] = 0;
    v50[3] = 0;
  }
  else
  {
    uint64_t v47 = v40;
    os_log_type_t v48 = v62;
    v46();
    uint64_t v51 = *MEMORY[0x1E4FA19B0];
    uint64_t v52 = type metadata accessor for SiriKitReliabilityCodes();
    uint64_t v53 = *(void *)(v52 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 104))(v7, v51, v52);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v7, 0, 1, v52);
    __swift_project_boxed_opaque_existential_1((void *)(v58 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender), *(void *)(v58 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender + 24));
    type metadata accessor for SiriKitEvent();
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v59, v48, v47);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v7, v60, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    uint64_t v50 = (void *)swift_allocObject();
    v50[2] = 0xD000000000000022;
    v50[3] = 0x80000001BA067690;
  }
  v50[4] = v61;
  SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)();
  dispatch thunk of SiriKitEventSending.send(_:)();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v48, v47);
}

uint64_t SiriCorrectionsFlow.produceOutput(from:)(uint64_t a1)
{
  v2[62] = a1;
  v2[63] = v1;
  uint64_t v3 = type metadata accessor for CorrectionsActionOutcome();
  v2[64] = v3;
  v2[65] = *(void *)(v3 - 8);
  v2[66] = swift_task_alloc();
  v2[67] = swift_task_alloc();
  v2[68] = swift_task_alloc();
  v2[69] = swift_task_alloc();
  return MEMORY[0x1F4188298](SiriCorrectionsFlow.produceOutput(from:), 0, 0);
}

void SiriCorrectionsFlow.produceOutput(from:)()
{
  uint64_t v92 = v0;
  uint64_t v1 = *((void *)v0 + 62);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = (uint64_t)(v0 + 1);
    uint64_t v68 = (long long *)((char *)v0 + 136);
    uint64_t v69 = (uint64_t)v0 + 56;
    uint64_t v70 = v0 + 6;
    uint64_t v71 = v0 + 16;
    uint64_t v75 = (long long *)((char *)v0 + 296);
    uint64_t v76 = (uint64_t)v0 + 216;
    uint64_t v4 = (uint64_t)(v0 + 21);
    uint64_t v81 = (uint64_t)v0 + 376;
    uint64_t v82 = (uint64_t)(v0 + 11);
    os_log_type_t v78 = v0 + 26;
    uint64_t v80 = (long long *)((char *)v0 + 456);
    uint64_t v5 = *((void *)v0 + 65);
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v5 += 16;
    uint64_t v88 = v6;
    uint64_t v73 = *((void *)v0 + 68);
    uint64_t v7 = v1 + ((*(unsigned __int8 *)(v5 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 64));
    uint64_t v85 = *(void *)(v5 + 56);
    uint64_t v87 = (uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
    int v86 = *MEMORY[0x1E4FA1E18];
    int v77 = *MEMORY[0x1E4FA1E10];
    int v72 = *MEMORY[0x1E4FA1E08];
    uint64_t v83 = (void (**)(uint64_t, void))(v5 + 80);
    uint64_t v84 = (void (**)(uint64_t, uint64_t))(v5 - 8);
    swift_bridgeObjectRetain();
    uint64_t v74 = 0;
    uint64_t v79 = 0;
    unint64_t v89 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v8 = &demangling cache variable for type metadata for Output?;
    while (1)
    {
      uint64_t v90 = v2;
      uint64_t v13 = v8;
      uint64_t v14 = *((void *)v0 + 69);
      uint64_t v15 = *((void *)v0 + 68);
      uint64_t v16 = *((void *)v0 + 64);
      v88(v14, v7, v16);
      v88(v15, v14, v16);
      int v17 = (*v87)(v15, v16);
      if (v17 == v86) {
        break;
      }
      if (v17 == v77)
      {
        uint64_t v25 = *((void *)v0 + 68);
        (*v83)(v25, *((void *)v0 + 64));
        uint64_t v27 = *(void *)(v73 + 40);
        unint64_t v26 = *(void *)(v73 + 48);
        outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v25, v82, v8);
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v28 = type metadata accessor for Logger();
        __swift_project_value_buffer(v28, (uint64_t)static Logger.executor);
        swift_bridgeObjectRetain();
        uint64_t v29 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v29, v30))
        {
          uint64_t v31 = swift_slowAlloc();
          uint64_t v32 = swift_slowAlloc();
          v91[0] = v32;
          *(_DWORD *)uint64_t v31 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v31 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v26, v91);
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B9C64000, v29, v30, "[CorrectionsFlow] failure reason: %s", (uint8_t *)v31, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v32, -1, -1);
          uint64_t v33 = v31;
          uint64_t v4 = (uint64_t)(v0 + 21);
          MEMORY[0x1BA9E48C0](v33, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

        uint64_t v19 = v0 + 16;
        if (__OFADD__(v79, 1))
        {
          __break(1u);
LABEL_57:
          __break(1u);
          return;
        }
        ++v79;
        outlined init with copy of ReferenceResolutionClientProtocol?(v82, (uint64_t)v71, v8);
        if (!*((void *)v0 + 35))
        {
          uint64_t v40 = (uint64_t)(v0 + 11);
          uint64_t v38 = *((void *)v0 + 69);
          uint64_t v39 = *((void *)v0 + 64);
LABEL_40:
          outlined destroy of ReferenceResolutionClientProtocol?(v40, v8);
          (*v84)(v38, v39);
          uint64_t v58 = (uint64_t)v19;
LABEL_41:
          outlined destroy of ReferenceResolutionClientProtocol?(v58, v8);
          goto LABEL_5;
        }
        outlined init with take of ReferenceResolutionClientProtocol(v71, v76);
        outlined init with copy of ReferenceResolutionClientProtocol(v76, (uint64_t)v75);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          uint64_t v41 = v89;
        }
        else {
          uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v89[2] + 1, 1, v89);
        }
        unint64_t v43 = v41[2];
        unint64_t v42 = v41[3];
        if (v43 >= v42 >> 1) {
          uint64_t v41 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v42 > 1), v43 + 1, 1, v41);
        }
        uint64_t v9 = *((void *)v0 + 69);
        uint64_t v10 = *((void *)v0 + 64);
        v41[2] = v43 + 1;
        unint64_t v89 = v41;
        outlined init with take of ReferenceResolutionClientProtocol(v75, (uint64_t)&v41[5 * v43 + 4]);
        __swift_destroy_boxed_opaque_existential_1Tm(v76);
        uint64_t v11 = (uint64_t)(v0 + 11);
      }
      else
      {
        if (v17 != v72)
        {
          if (one-time initialization token for executor != -1) {
            swift_once();
          }
          uint64_t v44 = *((void *)v0 + 69);
          uint64_t v45 = *((void *)v0 + 67);
          uint64_t v46 = *((void *)v0 + 64);
          uint64_t v47 = type metadata accessor for Logger();
          __swift_project_value_buffer(v47, (uint64_t)static Logger.executor);
          v88(v45, v44, v46);
          os_log_type_t v48 = Logger.logObject.getter();
          os_log_type_t v49 = static os_log_type_t.debug.getter();
          BOOL v50 = os_log_type_enabled(v48, v49);
          uint64_t v51 = *((void *)v0 + 67);
          if (v50)
          {
            uint64_t v52 = *((void *)v0 + 66);
            uint64_t v53 = *((void *)v0 + 64);
            uint64_t v67 = *((void *)v0 + 69);
            uint64_t v54 = swift_slowAlloc();
            uint64_t v66 = swift_slowAlloc();
            v91[0] = v66;
            *(_DWORD *)uint64_t v54 = 136315138;
            v88(v52, v51, v53);
            uint64_t v55 = String.init<A>(describing:)();
            *(void *)(v54 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, v91);
            swift_bridgeObjectRelease();
            uint64_t v57 = *v84;
            (*v84)(v51, v53);
            _os_log_impl(&dword_1B9C64000, v48, v49, "[CorrectionsFlow] unknown outcome %s", (uint8_t *)v54, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1BA9E48C0](v66, -1, -1);
            MEMORY[0x1BA9E48C0](v54, -1, -1);

            v57(v67, v53);
          }
          else
          {
            uint64_t v59 = *((void *)v0 + 64);
            uint64_t v60 = *((void *)v0 + 69);

            uint64_t v57 = *v84;
            (*v84)(v51, v59);
            v57(v60, v59);
          }
          uint64_t v4 = (uint64_t)(v0 + 21);
          uint64_t v12 = v90;
          v57(*((void *)v0 + 68), *((void *)v0 + 64));
          uint64_t v3 = (uint64_t)(v0 + 1);
          uint64_t v8 = v13;
          goto LABEL_6;
        }
        uint64_t v34 = *((void *)v0 + 68);
        (*v83)(v34, *((void *)v0 + 64));
        outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v34, v3, v8);
        if (__OFADD__(v74, 1)) {
          goto LABEL_57;
        }
        ++v74;
        outlined init with copy of ReferenceResolutionClientProtocol?(v3, (uint64_t)v70, v8);
        if (!*((void *)v0 + 15))
        {
          uint64_t v61 = *((void *)v0 + 69);
          uint64_t v62 = *((void *)v0 + 64);
          outlined destroy of ReferenceResolutionClientProtocol?(v3, v8);
          (*v84)(v61, v62);
          uint64_t v58 = (uint64_t)(v0 + 6);
          goto LABEL_41;
        }
        outlined init with take of ReferenceResolutionClientProtocol(v70, v69);
        outlined init with copy of ReferenceResolutionClientProtocol(v69, (uint64_t)v68);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          unint64_t v35 = v89;
        }
        else {
          unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v89[2] + 1, 1, v89);
        }
        unint64_t v37 = v35[2];
        unint64_t v36 = v35[3];
        if (v37 >= v36 >> 1) {
          unint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v36 > 1), v37 + 1, 1, v35);
        }
        uint64_t v9 = *((void *)v0 + 69);
        uint64_t v10 = *((void *)v0 + 64);
        v35[2] = v37 + 1;
        unint64_t v89 = v35;
        outlined init with take of ReferenceResolutionClientProtocol(v68, (uint64_t)&v35[5 * v37 + 4]);
        __swift_destroy_boxed_opaque_existential_1Tm(v69);
        uint64_t v11 = v3;
      }
      outlined destroy of ReferenceResolutionClientProtocol?(v11, v8);
      (*v84)(v9, v10);
      uint64_t v4 = (uint64_t)(v0 + 21);
LABEL_5:
      uint64_t v12 = v90;
LABEL_6:
      v7 += v85;
      uint64_t v2 = v12 - 1;
      if (!v2)
      {
        swift_bridgeObjectRelease();
        if (v79 <= 0) {
          char v63 = 2 * (v74 > 0);
        }
        else {
          char v63 = 1;
        }
        uint64_t v64 = (uint64_t)v89;
        goto LABEL_53;
      }
    }
    uint64_t v18 = *((void *)v0 + 68);
    (*v83)(v18, *((void *)v0 + 64));
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v18, v4, v8);
    uint64_t v19 = v0 + 26;
    outlined init with copy of ReferenceResolutionClientProtocol?(v4, (uint64_t)v78, v8);
    if (*((void *)v0 + 55))
    {
      outlined init with take of ReferenceResolutionClientProtocol(v78, v81);
      outlined init with copy of ReferenceResolutionClientProtocol(v81, (uint64_t)v80);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        uint64_t v20 = v89;
      }
      else {
        uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v89[2] + 1, 1, v89);
      }
      unint64_t v22 = v20[2];
      unint64_t v21 = v20[3];
      if (v22 >= v21 >> 1) {
        uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v20);
      }
      uint64_t v23 = *((void *)v0 + 69);
      uint64_t v24 = *((void *)v0 + 64);
      v20[2] = v22 + 1;
      unint64_t v89 = v20;
      outlined init with take of ReferenceResolutionClientProtocol(v80, (uint64_t)&v20[5 * v22 + 4]);
      __swift_destroy_boxed_opaque_existential_1Tm(v81);
      uint64_t v4 = (uint64_t)(v0 + 21);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v0 + 21), v8);
      (*v84)(v23, v24);
      goto LABEL_5;
    }
    uint64_t v38 = *((void *)v0 + 69);
    uint64_t v39 = *((void *)v0 + 64);
    uint64_t v40 = v4;
    goto LABEL_40;
  }
  char v63 = 0;
  uint64_t v64 = MEMORY[0x1E4FBC860];
LABEL_53:
  *((void *)v0 + 70) = v64;
  char v65 = (void *)swift_task_alloc();
  *((void *)v0 + 71) = v65;
  *char v65 = v0;
  v65[1] = SiriCorrectionsFlow.produceOutput(from:);
  SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:)(v64, v63);
}

uint64_t SiriCorrectionsFlow.produceOutput(from:)()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:)(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 280) = a2;
  *(void *)(v3 + 104) = a1;
  *(void *)(v3 + 112) = v2;
  type metadata accessor for DialogPhase();
  *(void *)(v3 + 120) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OutputGenerationManifest();
  *(void *)(v3 + 128) = v4;
  *(void *)(v3 + 136) = *(void *)(v4 - 8);
  *(void *)(v3 + 144) = swift_task_alloc();
  return MEMORY[0x1F4188298](SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:), 0, 0);
}

uint64_t SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:)()
{
  uint64_t v1 = v0[13];
  uint64_t v2 = *(void *)(v1 + 16);
  v0[19] = v2;
  if (v2)
  {
    uint64_t v3 = (void *)v0[14];
    v0[32] = 0;
    uint64_t v4 = v3 + 5;
    uint64_t v5 = v1 + 32;
    uint64_t v6 = v3[8];
    uint64_t v7 = v3[9];
    swift_bridgeObjectRetain();
    __swift_project_boxed_opaque_existential_1(v4, v6);
    uint64_t v8 = (void *)swift_task_alloc();
    v0[33] = v8;
    *uint64_t v8 = v0;
    v8[1] = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
    return MEMORY[0x1F41524E0](v5, v6, v7);
  }
  else
  {
    uint64_t v9 = (void *)swift_task_alloc();
    v0[20] = v9;
    *uint64_t v9 = v0;
    v9[1] = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
    return MEMORY[0x1F41522E8]();
  }
}

{
  uint64_t v0;
  int v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;

  uint64_t v1 = *(unsigned __int8 *)(v0 + 280);
  if (v1 == 1)
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v3;
    *uint64_t v3 = v0;
    v3[1] = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
    return MEMORY[0x1F41522F0]();
  }
  else if (v1 == 2)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 200) = v2;
    *uint64_t v2 = v0;
    v2[1] = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
    return MEMORY[0x1F4152480]();
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 168);
    *(void *)(v0 + 216) = v4;
    static DialogPhase.completion.getter();
    OutputGenerationManifest.init(dialogPhase:_:)();
    uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((int)*MEMORY[0x1E4FA1C10] + MEMORY[0x1E4FA1C10]);
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 224) = v5;
    *uint64_t v5 = v0;
    v5[1] = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
    uint64_t v6 = *(void *)(v0 + 144);
    return v8(v0 + 16, v4, v6);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 64);

  *(void *)(v0 + 216) = v1;
  static DialogPhase.completion.getter();
  OutputGenerationManifest.init(dialogPhase:_:)();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((int)*MEMORY[0x1E4FA1C10] + MEMORY[0x1E4FA1C10]);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v2;
  *uint64_t v2 = v0;
  v2[1] = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
  uint64_t v3 = *(void *)(v0 + 144);
  return v5(v0 + 16, v1, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 88);

  *(void *)(v0 + 216) = v1;
  static DialogPhase.completion.getter();
  OutputGenerationManifest.init(dialogPhase:_:)();
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((int)*MEMORY[0x1E4FA1C10] + MEMORY[0x1E4FA1C10]);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v2;
  *uint64_t v2 = v0;
  v2[1] = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
  uint64_t v3 = *(void *)(v0 + 144);
  return v5(v0 + 16, v1, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
  }
  else {
    uint64_t v2 = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;

  uint64_t v1 = *(void **)(v0 + 112);
  uint64_t v2 = v1[8];
  uint64_t v3 = v1[9];
  __swift_project_boxed_opaque_existential_1(v1 + 5, v2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 240) = v4;
  void *v4 = v0;
  v4[1] = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
  return MEMORY[0x1F41524E0](v0 + 16, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 248) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
  }
  else {
    uint64_t v2 = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 272) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
  }
  else
  {
    uint64_t v2 = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  uint64_t v1 = v0[32] + 1;
  if (v1 == v0[19])
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    v0[32] = v1;
    uint64_t v4 = (void *)v0[14];
    uint64_t v5 = v0[13] + 40 * v1 + 32;
    uint64_t v6 = v4[8];
    uint64_t v7 = v4[9];
    __swift_project_boxed_opaque_existential_1(v4 + 5, v6);
    uint64_t v8 = (void *)swift_task_alloc();
    v0[33] = v8;
    *uint64_t v8 = v0;
    v8[1] = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
    return MEMORY[0x1F41524E0](v5, v6, v7);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = *(void **)(v0 + 176);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "[CorrectionsFlow] CorrectionsFlow failed to produce output", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = *(void **)(v0 + 192);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "[CorrectionsFlow] CorrectionsFlow failed to produce output", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = *(void **)(v0 + 208);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "[CorrectionsFlow] CorrectionsFlow failed to produce output", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = *(void **)(v0 + 232);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
  uint64_t v6 = Logger.logObject.getter();
  uint64_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_1B9C64000, v6, v7, "[CorrectionsFlow] CorrectionsFlow failed to produce output", v8, 2u);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 128);

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = *(void **)(v0 + 248);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
  uint64_t v6 = Logger.logObject.getter();
  uint64_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_1B9C64000, v6, v7, "[CorrectionsFlow] CorrectionsFlow failed to produce output", v8, 2u);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = *(void **)(v0 + 272);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "[CorrectionsFlow] CorrectionsFlow failed to produce output", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 168) = a1;
  *(void *)(v3 + 176) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
  }
  else {
    uint64_t v4 = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
  }
  return MEMORY[0x1F4188298](v4, 0, 0);
}

{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v3 = (void *)*v2;
  v3[7] = v2;
  v3[8] = a1;
  v3[9] = v1;
  v3[24] = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
  }
  else {
    uint64_t v4 = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
  }
  return MEMORY[0x1F4188298](v4, 0, 0);
}

{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v3 = (void *)*v2;
  v3[10] = v2;
  v3[11] = a1;
  v3[12] = v1;
  v3[26] = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
  }
  else {
    uint64_t v4 = SiriCorrectionsFlow.produceOutput(outputs:overallOutputType:);
  }
  return MEMORY[0x1F4188298](v4, 0, 0);
}

uint64_t SiriCorrectionsFlow.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 40);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 80);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_followupPluginAction, &demangling cache variable for type metadata for PluginAction?);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_steeringInput, &demangling cache variable for type metadata for Input?);
  outlined destroy of SiriCorrectionsFlow.State(v0 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_state);
  return v0;
}

uint64_t SiriCorrectionsFlow.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 40);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 80);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_followupPluginAction, &demangling cache variable for type metadata for PluginAction?);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_steeringInput, &demangling cache variable for type metadata for Input?);
  outlined destroy of SiriCorrectionsFlow.State(v0 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_state);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for SiriEnvironmentLocating.siriEnvironment.getter in conformance SiriCorrectionsFlow()
{
  return SiriEnvironmentLocating<>.siriEnvironment.getter();
}

uint64_t protocol witness for SiriEnvironmentLocating.siriEnvironment.setter in conformance SiriCorrectionsFlow()
{
  return SiriEnvironmentLocating<>.siriEnvironment.setter();
}

void (*protocol witness for SiriEnvironmentLocating.siriEnvironment.modify in conformance SiriCorrectionsFlow(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = SiriEnvironmentLocating<>.siriEnvironment.modify();
  return protocol witness for SiriEnvironmentLocating.siriEnvironment.modify in conformance SiriCorrectionsFlow;
}

void protocol witness for SiriEnvironmentLocating.siriEnvironment.modify in conformance SiriCorrectionsFlow(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t protocol witness for Flow.on(input:) in conformance SiriCorrectionsFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 264))() & 1;
}

uint64_t protocol witness for Flow.onAsync(input:) in conformance SiriCorrectionsFlow(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return MEMORY[0x1F4151AB0](a1, a2, a3);
}

uint64_t protocol witness for Flow.execute(completion:) in conformance SiriCorrectionsFlow()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 248))();
}

uint64_t protocol witness for Flow.execute() in conformance SiriCorrectionsFlow(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 256) + **(int **)(**(void **)v1 + 256));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v6(a1);
}

uint64_t protocol witness for Flow.exitValue.getter in conformance SiriCorrectionsFlow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for SiriCorrectionsFlow();

  return MEMORY[0x1F4151AB8](v3, a2);
}

uint64_t protocol witness for Flow.flexibleExecutionSupport.getter in conformance SiriCorrectionsFlow()
{
  return MEMORY[0x1F4151A98]();
}

unint64_t static SiriCorrectionsConstants.correctionsInvocation.getter()
{
  return 0xD000000000000024;
}

unint64_t static SiriCorrectionsConstants.correctionsPluginKey.getter()
{
  return 0xD000000000000030;
}

unint64_t static SiriCorrectionsConstants.steeringInput.getter()
{
  return 0xD00000000000002BLL;
}

void *specialized SiriCorrectionsFlow.init(pluginId:responseFactory:outputPublisher:correctionsEngine:eventSender:)(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, long long *a6, void *a7, uint64_t a8, uint64_t a9)
{
  a7[13] = a8;
  a7[14] = a9;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(a7 + 10);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32))(boxed_opaque_existential_0, a5, a8);
  uint64_t v18 = (char *)a7 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_followupPluginAction;
  uint64_t v19 = type metadata accessor for PluginAction();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
  uint64_t v20 = (char *)a7 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_steeringInput;
  uint64_t v21 = type metadata accessor for Input();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  unint64_t v22 = (char *)a7 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_state;
  *(_OWORD *)unint64_t v22 = 0u;
  *((_OWORD *)v22 + 1) = 0u;
  *((void *)v22 + 4) = 0;
  a7[2] = a1;
  a7[3] = a2;
  a7[4] = a3;
  outlined init with take of ReferenceResolutionClientProtocol(a4, (uint64_t)(a7 + 5));
  outlined init with take of ReferenceResolutionClientProtocol(a6, (uint64_t)a7 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender);
  return a7;
}

void *specialized SiriCorrectionsFlow.__allocating_init(pluginId:responseFactory:outputPublisher:correctionsEngine:eventSender:)(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, long long *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v21 = a6;
  uint64_t v15 = *(void *)(a8 - 8);
  MEMORY[0x1F4188790](a1);
  int v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SiriCorrectionsFlow();
  uint64_t v18 = (void *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a5, a8);
  return specialized SiriCorrectionsFlow.init(pluginId:responseFactory:outputPublisher:correctionsEngine:eventSender:)(a1, a2, a3, a4, (uint64_t)v17, v21, v18, a8, a9);
}

uint64_t outlined init with copy of SiriCorrectionsFlow.State(long long *a1, uint64_t a2)
{
  unint64_t v3 = *((void *)a1 + 3);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *a1;
    long long v6 = a1[1];
    *(void *)(a2 + 32) = *((void *)a1 + 4);
    *(_OWORD *)a2 = v5;
    *(_OWORD *)(a2 + 16) = v6;
  }
  else
  {
    uint64_t v4 = *((void *)a1 + 4);
    *(void *)(a2 + 24) = v3;
    *(void *)(a2 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a2);
  }
  return a2;
}

uint64_t outlined destroy of SiriCorrectionsFlow.State(uint64_t a1)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  return a1;
}

uint64_t outlined assign with take of SiriCorrectionsFlow.State(long long *a1, uint64_t a2)
{
  if (*(void *)(a2 + 24) >= 0xFFFFFFFFuLL) {
    __swift_destroy_boxed_opaque_existential_1Tm(a2);
  }
  long long v4 = *a1;
  long long v5 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  return a2;
}

uint64_t type metadata accessor for SiriCorrectionsFlow()
{
  uint64_t result = type metadata singleton initialization cache for SiriCorrectionsFlow;
  if (!type metadata singleton initialization cache for SiriCorrectionsFlow) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1B9E96B10()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in SiriCorrectionsFlow.sendSiriKitEvent(activityType:statusReason:statusReasonDescription:)()
{
  return closure #1 in SiriCorrectionsFlow.sendSiriKitEvent(activityType:statusReason:statusReasonDescription:)();
}

uint64_t outlined init with copy of UndoResult(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of UndoResult(uint64_t a1)
{
  return a1;
}

uint64_t base witness table accessor for Flow in SiriCorrectionsFlow()
{
  return lazy protocol witness table accessor for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow((unint64_t *)&lazy protocol witness table cache variable for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow, (void (*)(uint64_t))type metadata accessor for SiriCorrectionsFlow);
}

uint64_t base witness table accessor for SiriEnvironmentLocating in SiriCorrectionsFlow()
{
  return lazy protocol witness table accessor for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow(&lazy protocol witness table cache variable for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow, (void (*)(uint64_t))type metadata accessor for SiriCorrectionsFlow);
}

uint64_t lazy protocol witness table accessor for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B9E96CDC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 144))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B9E96D28(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 152);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1B9E96D90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 216))();
}

uint64_t sub_1B9E96DD4(long long *a1, uint64_t a2)
{
  outlined init with copy of SiriCorrectionsFlow.State(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))(**(void **)a2 + 224))(v4);
}

uint64_t ObjC metadata update function for SiriCorrectionsFlow()
{
  return type metadata accessor for SiriCorrectionsFlow();
}

void type metadata completion function for SiriCorrectionsFlow()
{
  type metadata accessor for PluginAction?(319, &lazy cache variable for type metadata for PluginAction?, MEMORY[0x1E4FA1B58]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PluginAction?(319, (unint64_t *)&lazy cache variable for type metadata for Input?, MEMORY[0x1E4FA1EE0]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for SiriCorrectionsFlow(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SiriCorrectionsFlow);
}

uint64_t dispatch thunk of SiriCorrectionsFlow.hostPluginId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of SiriCorrectionsFlow.hostPluginId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of SiriCorrectionsFlow.hostPluginId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of SiriCorrectionsFlow.state.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of SiriCorrectionsFlow.state.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of SiriCorrectionsFlow.state.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of SiriCorrectionsFlow.__allocating_init(pluginId:responseFactory:outputPublisher:correctionsEngine:eventSender:)()
{
  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t dispatch thunk of SiriCorrectionsFlow.execute(completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of SiriCorrectionsFlow.execute()(uint64_t a1)
{
  long long v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 256) + **(int **)(*(void *)v1 + 256));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v6(a1);
}

uint64_t dispatch thunk of SiriCorrectionsFlow.on(input:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

void type metadata accessor for PluginAction?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t destroy for SiriCorrectionsFlow.State(uint64_t a1)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    return __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for SiriCorrectionsFlow.State(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  return a1;
}

uint64_t assignWithCopy for SiriCorrectionsFlow.State(uint64_t a1, long long *a2)
{
  unint64_t v4 = *((void *)a2 + 3);
  if (*(void *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    long long v5 = *a2;
    long long v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t assignWithTake for SiriCorrectionsFlow.State(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriCorrectionsFlow.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SiriCorrectionsFlow.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

uint64_t getEnumTag for SiriCorrectionsFlow.State(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

double destructiveInjectEnumTag for SiriCorrectionsFlow.State(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(void *)(a1 + 24) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriCorrectionsFlow.State()
{
  return &type metadata for SiriCorrectionsFlow.State;
}

ValueMetadata *type metadata accessor for SiriCorrectionsConstants()
{
  return &type metadata for SiriCorrectionsConstants;
}

uint64_t CorrectionsService.setupNewTurn(executionUUID:)(uint64_t a1)
{
  uint64_t v3 = v1[5];
  uint64_t v4 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(a1, v3, v4);
}

uint64_t protocol witness for CorrectionsHandling.undoFollowUpPluginActionUserDataKey.getter in conformance CorrectionsPlatformClient()
{
  return CorrectionsPlatformClient.undoFollowUpPluginActionUserDataKey.getter();
}

uint64_t CorrectionsService.__allocating_init(correctionsClient:conversationHandlerLocator:)(long long *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  outlined init with take of ReferenceResolutionClientProtocol(a1, v4 + 16);
  *(void *)(v4 + 56) = a2;
  return v4;
}

uint64_t CorrectionsService.init(correctionsClient:conversationHandlerLocator:)(long long *a1, uint64_t a2)
{
  outlined init with take of ReferenceResolutionClientProtocol(a1, v2 + 16);
  *(void *)(v2 + 56) = a2;
  return v2;
}

uint64_t CorrectionsService.generateNewInput(from:originalInput:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v48 = a1;
  uint64_t v46 = a3;
  uint64_t v3 = type metadata accessor for Parse();
  uint64_t v44 = *(void *)(v3 - 8);
  uint64_t v45 = v3;
  MEMORY[0x1F4188790](v3);
  unint64_t v43 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Input();
  uint64_t v41 = *(void *)(v8 - 8);
  uint64_t v42 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v47 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CorrectionsDirectInvocation();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  int v17 = (char *)&v40 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v40 - v18;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl(&dword_1B9C64000, v21, v22, "[CorrectionsService] Generating new input for undo without followup action", v23, 2u);
    MEMORY[0x1BA9E48C0](v23, -1, -1);
  }

  UndoAction.directInvocation.getter();
  unint64_t v24 = CorrectionsDirectInvocation.userData.getter();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v11 + 8);
  v25(v19, v10);
  if (!v24) {
    unint64_t v24 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  }
  UndoAction.directInvocation.getter();
  uint64_t v26 = CorrectionsDirectInvocation.identifier.getter();
  uint64_t v28 = v27;
  v25(v17, v10);
  if (v26 == 0xD000000000000024 && v28 == 0x80000001BA067070)
  {
    swift_bridgeObjectRelease();
    uint64_t v29 = v47;
  }
  else
  {
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v29 = v47;
    if ((v30 & 1) == 0) {
      goto LABEL_14;
    }
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(v40, (uint64_t)v7, &demangling cache variable for type metadata for Input?);
  uint64_t v31 = v41;
  uint64_t v32 = v42;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v7, 1, v42) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for Input?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v29, v7, v32);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    lazy protocol witness table accessor for type Input and conformance Input();
    uint64_t v33 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v35 = v34;
    uint64_t v36 = v33;
    swift_release();
    uint64_t v52 = MEMORY[0x1E4F277C0];
    *(void *)&long long v51 = v36;
    *((void *)&v51 + 1) = v35;
    outlined init with take of Any(&v51, v50);
    outlined copy of Data._Representation(v36, v35);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v49 = v24;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v50, 0xD00000000000002BLL, 0x80000001BA067500, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    outlined consume of Data._Representation(v36, v35);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v47, v32);
  }
LABEL_14:
  UndoAction.directInvocation.getter();
  CorrectionsDirectInvocation.identifier.getter();
  v25(v14, v10);
  uint64_t v38 = v43;
  Parse.DirectInvocation.init(identifier:userData:)();
  (*(void (**)(char *, void, uint64_t))(v44 + 104))(v38, *MEMORY[0x1E4FA1F38], v45);
  return Input.init(parse:)();
}

uint64_t CorrectionsService.getCorrectionsAndFollowupAction(input:conversationUserInput:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[15] = a3;
  v4[16] = v3;
  v4[13] = a1;
  v4[14] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v4[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAction?);
  v4[18] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for PluginAction();
  v4[19] = v5;
  v4[20] = *(void *)(v5 - 8);
  v4[21] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Input();
  v4[22] = v6;
  v4[23] = *(void *)(v6 - 8);
  v4[24] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  v4[25] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Parse();
  v4[26] = v7;
  v4[27] = *(void *)(v7 - 8);
  v4[28] = swift_task_alloc();
  v4[29] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_Parser();
  v4[30] = v8;
  v4[31] = *(void *)(v8 - 8);
  v4[32] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v4[33] = v9;
  v4[34] = *(void *)(v9 - 8);
  v4[35] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  v4[36] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_UserParse();
  v4[37] = v10;
  v4[38] = *(void *)(v10 - 8);
  v4[39] = swift_task_alloc();
  unsigned char v4[40] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UndoAction?);
  v4[41] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for UndoAction();
  v4[42] = v11;
  v4[43] = *(void *)(v11 - 8);
  v4[44] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v12 = static MessageBusActor.shared;
  v4[45] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](CorrectionsService.getCorrectionsAndFollowupAction(input:conversationUserInput:), v12, 0);
}

uint64_t CorrectionsService.getCorrectionsAndFollowupAction(input:conversationUserInput:)()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 368) = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "[CorrectionsService] Checking for corrections with maybe a possible followup", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }
  uint64_t v5 = *(void *)(v0 + 328);
  uint64_t v6 = *(void *)(v0 + 120);

  CorrectionsService.getUndoAction(_:conversationUserInput:)(v6, v5);
  *(void *)(v0 + 376) = 0;
  uint64_t v7 = *(void *)(v0 + 336);
  uint64_t v8 = *(void *)(v0 + 344);
  uint64_t v9 = *(void *)(v0 + 328);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) == 1)
  {
    uint64_t v10 = *(void *)(v0 + 184);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v9, &demangling cache variable for type metadata for UndoAction?);
    uint64_t v11 = *(void (**)(void, uint64_t, uint64_t, void))(v10 + 56);
    uint64_t v12 = 1;
LABEL_7:
    v11(*(void *)(v0 + 104), v12, 1, *(void *)(v0 + 176));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
  (*(void (**)(void, uint64_t, uint64_t))(v8 + 32))(*(void *)(v0 + 352), v9, v7);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    int v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v17 = 0;
    _os_log_impl(&dword_1B9C64000, v15, v16, "[CorrectionsService] Detected user requested undo", v17, 2u);
    MEMORY[0x1BA9E48C0](v17, -1, -1);
  }

  if (UndoAction.isExclusive.getter()) {
    goto LABEL_18;
  }
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v18 = static SydneyConversationFeatureFlags.forceEnabled;
  if (*(void *)(static SydneyConversationFeatureFlags.forceEnabled + 16)
    && (uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(2), (v20 & 1) != 0))
  {
    if (*(unsigned char *)(*(void *)(v18 + 56) + v19) != 1)
    {
LABEL_18:
      swift_release();
LABEL_19:
      uint64_t v22 = *(void *)(v0 + 344);
      uint64_t v21 = *(void *)(v0 + 352);
      uint64_t v54 = *(void *)(v0 + 336);
      uint64_t v23 = *(void *)(v0 + 176);
      uint64_t v24 = *(void *)(v0 + 184);
      uint64_t v25 = *(void *)(v0 + 136);
      uint64_t v26 = *(void *)(v0 + 104);
      (*(void (**)(uint64_t, void, uint64_t))(v24 + 16))(v25, *(void *)(v0 + 112), v23);
      uint64_t v27 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56);
      v27(v25, 0, 1, v23);
      CorrectionsService.generateNewInput(from:originalInput:)(v21, v25, v26);
      outlined destroy of ReferenceResolutionClientProtocol?(v25, &demangling cache variable for type metadata for Input?);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v54);
      uint64_t v11 = v27;
      uint64_t v12 = 0;
      goto LABEL_7;
    }
  }
  else
  {
    *(void *)(v0 + 40) = &type metadata for SydneyConversationFeatureFlags;
    *(void *)(v0 + 48) = lazy protocol witness table accessor for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags();
    *(unsigned char *)(v0 + 16) = 2;
    char v28 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    if ((v28 & 1) == 0) {
      goto LABEL_18;
    }
  }
  uint64_t v29 = *(void *)(v0 + 296);
  uint64_t v30 = *(void *)(v0 + 304);
  uint64_t v31 = *(void *)(v0 + 288);
  UndoAction.parseExludingUndoUserDialogActs.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v31, 1, v29) == 1)
  {
    uint64_t v32 = *(void *)(v0 + 288);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v32, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    goto LABEL_19;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 304) + 32))(*(void *)(v0 + 320), *(void *)(v0 + 288), *(void *)(v0 + 296));
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    unint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v35 = 0;
    _os_log_impl(&dword_1B9C64000, v33, v34, "[CorrectionsService] Undo is not exclusive, and we need to try and find followup actions.", v35, 2u);
    MEMORY[0x1BA9E48C0](v35, -1, -1);
  }
  uint64_t v36 = *(void *)(v0 + 320);
  uint64_t v37 = *(void *)(v0 + 304);
  uint64_t v48 = *(void *)(v0 + 312);
  uint64_t v49 = *(void *)(v0 + 296);
  uint64_t v38 = *(void *)(v0 + 272);
  uint64_t v39 = *(void *)(v0 + 280);
  uint64_t v40 = *(void *)(v0 + 256);
  uint64_t v41 = *(void *)(v0 + 248);
  uint64_t v47 = *(void *)(v0 + 240);
  uint64_t v50 = *(void *)(v0 + 264);
  uint64_t v51 = *(void *)(v0 + 232);
  uint64_t v42 = *(void *)(v0 + 216);
  uint64_t v43 = *(void *)(v0 + 200);
  uint64_t v52 = *(void *)(v0 + 208);
  uint64_t v53 = *(void *)(v0 + 224);

  Siri_Nlu_External_UserParse.parser.getter();
  Siri_Nlu_External_Parser.parserID.getter();
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v47);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v48, v36, v49);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v43, v39, v50);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v43, 0, 1, v50);
  USOParse.init(userParse:parserIdentifier:appBundleId:groupIndex:)();
  (*(void (**)(uint64_t, void, uint64_t))(v42 + 104))(v51, *MEMORY[0x1E4FA1F48], v52);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v53, v51, v52);
  Input.init(parse:)();
  uint64_t v44 = (void *)swift_task_alloc();
  *(void *)(v0 + 384) = v44;
  *uint64_t v44 = v0;
  v44[1] = CorrectionsService.getCorrectionsAndFollowupAction(input:conversationUserInput:);
  uint64_t v45 = *(void *)(v0 + 192);
  uint64_t v46 = *(void *)(v0 + 144);
  return CorrectionsService.findFollowUpPluginAction(for:)(v46, v45);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 360);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](CorrectionsService.getCorrectionsAndFollowupAction(input:conversationUserInput:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, void, uint64_t, uint64_t);
  void (*v22)(void, uint64_t, uint64_t, void);
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(void);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  uint64_t v1 = v0[19];
  uint64_t v2 = v0[20];
  os_log_type_t v3 = v0[18];
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0[18], &demangling cache variable for type metadata for PluginAction?);
    uint64_t v4 = Logger.logObject.getter();
    uint64_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_1B9C64000, v4, v5, "[CorrectionsService] No followup plugin action found, returning exclusive undo action", v6, 2u);
      MEMORY[0x1BA9E48C0](v6, -1, -1);
    }
    uint64_t v7 = v0[38];
    uint64_t v52 = v0[37];
    uint64_t v54 = v0[40];
    uint64_t v8 = v0[34];
    uint64_t v48 = v0[33];
    uint64_t v50 = v0[35];
    uint64_t v9 = v0[29];
    uint64_t v11 = v0[26];
    uint64_t v10 = v0[27];
    uint64_t v12 = v0[23];
    uint64_t v13 = v0[24];
    uint64_t v14 = v0[22];

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v50, v48);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v54, v52);
    os_log_type_t v16 = v0[43];
    uint64_t v15 = v0[44];
    uint64_t v55 = v0[42];
    int v17 = v0[22];
    uint64_t v18 = v0[23];
    uint64_t v19 = v0[17];
    char v20 = v0[13];
    (*(void (**)(uint64_t, void, uint64_t))(v18 + 16))(v19, v0[14], v17);
    uint64_t v21 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56);
    v21(v19, 0, 1, v17);
    CorrectionsService.generateNewInput(from:originalInput:)(v15, v19, v20);
    outlined destroy of ReferenceResolutionClientProtocol?(v19, &demangling cache variable for type metadata for Input?);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v55);
    uint64_t v22 = v21;
    uint64_t v23 = 0;
  }
  else
  {
    (*(void (**)(void, void, void))(v0[20] + 32))(v0[21], v0[18], v0[19]);
    uint64_t v24 = Logger.logObject.getter();
    uint64_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_1B9C64000, v24, v25, "[CorrectionsService] New followup plugin action found", v26, 2u);
      MEMORY[0x1BA9E48C0](v26, -1, -1);
    }
    uint64_t v27 = (void *)v0[47];
    char v28 = v0[44];
    uint64_t v29 = v0[21];
    uint64_t v30 = v0[13];

    CorrectionsService.generateNewInputWithFollowupFrom(undoAction:pluginAction:)(v28, v29, v30);
    uint64_t v31 = v27;
    uint64_t v53 = v0[44];
    unint64_t v56 = v0[43];
    uint64_t v49 = v0[40];
    uint64_t v51 = v0[42];
    uint64_t v32 = v0[38];
    uint64_t v33 = v0[34];
    uint64_t v46 = v0[35];
    uint64_t v47 = v0[37];
    uint64_t v44 = v0[29];
    uint64_t v45 = v0[33];
    os_log_type_t v34 = v0[27];
    uint64_t v43 = v0[26];
    unint64_t v35 = v0[23];
    uint64_t v36 = v0[24];
    uint64_t v37 = v0[21];
    uint64_t v38 = v0[22];
    uint64_t v39 = v0[19];
    uint64_t v40 = v0[20];
    if (v31)
    {

      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v37, v39);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v38);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v44, v43);
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v46, v45);
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v49, v47);
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v53, v51);
      uint64_t v22 = *(void (**)(void, uint64_t, uint64_t, void))(v35 + 56);
      uint64_t v23 = 1;
    }
    else
    {
      (*(void (**)(void, void))(v40 + 8))(v0[21], v0[19]);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v36, v38);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v44, v43);
      (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v46, v45);
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v49, v47);
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v53, v51);
      uint64_t v23 = 0;
      uint64_t v22 = *(void (**)(void, uint64_t, uint64_t, void))(v35 + 56);
    }
  }
  v22(v0[13], v23, 1, v0[22]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v41 = (uint64_t (*)(void))v0[1];
  return v41();
}

uint64_t CorrectionsService.findFollowUpPluginAction(for:)(uint64_t a1, uint64_t a2)
{
  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  uint64_t v4 = type metadata accessor for Input();
  v3[20] = v4;
  v3[21] = *(void *)(v4 - 8);
  v3[22] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler)?);
  v3[23] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  v3[24] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[25] = v5;
  v3[26] = *(void *)(v5 - 8);
  v3[27] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  v3[28] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](CorrectionsService.findFollowUpPluginAction(for:), v6, 0);
}

uint64_t CorrectionsService.findFollowUpPluginAction(for:)()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[24];
  v0[15] = MEMORY[0x1E4FBC868];
  v0[16] = MEMORY[0x1E4FBC860];
  UUID.init()();
  Input.parse.getter();
  uint64_t v3 = type metadata accessor for Parse();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 0, 1, v3);
  specialized SimpleOrderedDictionary.subscript.setter(v2, v1);
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[16];
  v0[29] = v4;
  v0[30] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[31] = v6;
  *uint64_t v6 = v0;
  v6[1] = CorrectionsService.findFollowUpPluginAction(for:);
  return ConversationHandlerLocator.allHandlers(for:)(v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  uint64_t v28;

  uint64_t v1 = *(void *)(v0 + 256);
  swift_release();
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  uint64_t v4 = *(void *)(v3 - 8);
  if (v2)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 256)+ ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80)), *(void *)(v0 + 184), &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  uint64_t v6 = *(void *)(v0 + 184);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, v5, 1, v3);
  swift_bridgeObjectRelease();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 184), &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler)?);
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    *(void *)(v0 + 88) = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 200);
    uint64_t v9 = *(void *)(v0 + 208);
    uint64_t v10 = *(void *)(v0 + 184);
    uint64_t v11 = v10 + *(int *)(v7 + 48);
    outlined init with copy of ReferenceResolutionClientProtocol(v11 + 8, v0 + 56);
    outlined destroy of ConversationHandlerLocator.ScoredHandler(v11);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v8);
    if (*(void *)(v0 + 80))
    {
      uint64_t v13 = *(void *)(v0 + 168);
      uint64_t v12 = *(void *)(v0 + 176);
      uint64_t v14 = *(void *)(v0 + 160);
      os_log_type_t v16 = *(void *)(v0 + 136);
      uint64_t v15 = *(void *)(v0 + 144);
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 56), v0 + 16);
      int v17 = *(void *)(v0 + 40);
      uint64_t v18 = *(void *)(v0 + 48);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v17);
      (*(void (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v15, v14);
      PluginAction.init(flowHandlerId:input:)();
      uint64_t v19 = type metadata accessor for PluginAction();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v16, 0, 1, v19);
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
      goto LABEL_13;
    }
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for ConversationHandler?);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  char v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
  uint64_t v21 = Logger.logObject.getter();
  uint64_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl(&dword_1B9C64000, v21, v22, "[CorrectionsService] No conversation handler found for followup input, returning nil", v23, 2u);
    MEMORY[0x1BA9E48C0](v23, -1, -1);
  }
  uint64_t v24 = *(void *)(v0 + 136);

  uint64_t v25 = type metadata accessor for PluginAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
  return v26();
}

uint64_t CorrectionsService.findFollowUpPluginAction(for:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 224);
  *(void *)(*(void *)v1 + 256) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](CorrectionsService.findFollowUpPluginAction(for:), v2, 0);
}

uint64_t CorrectionsService.generateNewInputWithFollowupFrom(undoAction:pluginAction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v123 = a2;
  uint64_t v127 = a1;
  uint64_t v110 = a3;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v102 = (char *)v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v103 = (char *)v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v104 = (char *)v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v106 = (char *)v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v112 = *(void *)(v114 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v114);
  uint64_t v13 = (char *)v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  id v115 = (char *)v95 - v14;
  uint64_t v15 = type metadata accessor for Parse();
  uint64_t v125 = *(void *)(v15 - 8);
  uint64_t v126 = v15;
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  id v113 = (char *)v95 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v119 = (char *)v95 - v18;
  uint64_t v122 = type metadata accessor for Input();
  uint64_t v19 = *(void *)(v122 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v122);
  uint64_t v22 = (char *)v95 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v20);
  uint64_t v25 = (char *)v95 - v24;
  MEMORY[0x1F4188790](v23);
  id v118 = (char *)v95 - v26;
  uint64_t v27 = type metadata accessor for USOParse();
  uint64_t v116 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  v117 = (char *)v95 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for PluginAction();
  uint64_t v128 = *(void *)(v29 - 8);
  uint64_t v129 = v29;
  uint64_t v30 = MEMORY[0x1F4188790](v29);
  uint64_t v101 = (char *)v95 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  v130 = (char *)v95 - v32;
  uint64_t v124 = type metadata accessor for CorrectionsDirectInvocation();
  uint64_t v33 = *(void *)(v124 - 8);
  uint64_t v34 = MEMORY[0x1F4188790](v124);
  uint64_t v108 = (char *)v95 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v34);
  uint64_t v37 = (char *)v95 - v36;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v38 = type metadata accessor for Logger();
  __swift_project_value_buffer(v38, (uint64_t)static Logger.executor);
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.debug.getter();
  BOOL v41 = os_log_type_enabled(v39, v40);
  unint64_t v105 = v22;
  if (v41)
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc();
    uint64_t v111 = v27;
    uint64_t v43 = v25;
    uint64_t v44 = v13;
    uint64_t v45 = v33;
    uint64_t v46 = v42;
    *(_WORD *)uint64_t v42 = 0;
    _os_log_impl(&dword_1B9C64000, v39, v40, "[CorrectionsService] Generating new input for undo with followup action", v42, 2u);
    uint64_t v47 = v46;
    uint64_t v33 = v45;
    uint64_t v13 = v44;
    uint64_t v25 = v43;
    uint64_t v27 = v111;
    MEMORY[0x1BA9E48C0](v47, -1, -1);
  }

  UndoAction.directInvocation.getter();
  unint64_t v48 = CorrectionsDirectInvocation.userData.getter();
  uint64_t v107 = *(void (**)(char *, uint64_t))(v33 + 8);
  v107(v37, v124);
  uint64_t v109 = v33 + 8;
  if (!v48) {
    unint64_t v48 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  }
  uint64_t v49 = v126;
  uint64_t v50 = v119;
  (*(void (**)(char *, uint64_t, uint64_t))(v128 + 16))(v130, v123, v129);
  uint64_t v51 = v118;
  PluginAction.input.getter();
  Input.parse.getter();
  id v118 = *(char **)(v19 + 8);
  uint64_t v119 = (char *)(v19 + 8);
  ((void (*)(char *, uint64_t))v118)(v51, v122);
  uint64_t v52 = v125;
  uint64_t v53 = (*(uint64_t (**)(char *, uint64_t))(v125 + 88))(v50, v49);
  if (v53 != *MEMORY[0x1E4FA1F48])
  {
    (*(void (**)(char *, uint64_t))(v52 + 8))(v50, v49);
    goto LABEL_19;
  }
  uint64_t v54 = v53;
  uint64_t v97 = v19;
  unint64_t v100 = v48;
  long long v98 = v25;
  uint64_t v99 = v13;
  (*(void (**)(char *, uint64_t))(v52 + 96))(v50, v49);
  uint64_t v55 = v116;
  unint64_t v56 = v117;
  (*(void (**)(char *, char *, uint64_t))(v116 + 32))(v117, v50, v27);
  uint64_t v57 = v115;
  uint64_t v58 = USOParse.userParse.getter();
  uint64_t v59 = MEMORY[0x1BA9DE000](v58);
  uint64_t v60 = v112;
  uint64_t v61 = v112 + 8;
  uint64_t v62 = v57;
  uint64_t v63 = v114;
  uint64_t v96 = *(void (**)(char *, uint64_t))(v112 + 8);
  v96(v62, v114);
  unint64_t v64 = *(void *)(v59 + 16);
  swift_bridgeObjectRelease();
  if (v64 < 2)
  {
    (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v27);
  }
  else
  {
    uint64_t v111 = v27;
    id v65 = v106;
    UndoAction.parseExludingUndoUserDialogActs.getter();
    if ((*(unsigned int (**)(id, uint64_t, uint64_t))(v60 + 48))(v65, 1, v63) != 1)
    {
      uint64_t v66 = v63;
      v95[1] = v61;
      uint64_t v67 = v99;
      (*(void (**)(char *, id, uint64_t))(v60 + 32))(v99, v65, v66);
      (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v115, v67, v66);
      USOParse.parserIdentifier.getter();
      USOParse.appBundleId.getter();
      uint64_t v68 = v113;
      USOParse.init(userParse:parserIdentifier:appBundleId:)();
      uint64_t v49 = v126;
      (*(void (**)(char *, uint64_t, uint64_t))(v125 + 104))(v68, v54, v126);
      uint64_t v69 = v98;
      Input.init(parse:)();
      uint64_t v70 = PluginAction.speechPackage.getter();
      uint64_t v71 = v122;
      int v72 = (void *)v70;
      uint64_t v112 = PluginAction.flowHandlerId.getter();
      id v115 = v73;
      (*(void (**)(char *, char *, uint64_t))(v97 + 16))(v105, v69, v71);
      uint64_t v74 = v116;
      if (v72)
      {
        uint64_t v106 = v72;
        uint64_t v123 = PluginAction.utterance.getter();
        uint64_t v75 = type metadata accessor for ActionParaphrase();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56))(v103, 1, 1, v75);
        uint64_t v76 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56))(v102, 1, 1, v76);
        int v77 = v101;
        PluginAction.init(flowHandlerId:input:speechPackage:utterance:actionParaphrase:userData:loggingId:)();
      }
      else
      {
        PluginAction.utterance.getter();
        uint64_t v78 = type metadata accessor for ActionParaphrase();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56))(v103, 1, 1, v78);
        uint64_t v79 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56))(v102, 1, 1, v79);
        int v77 = v101;
        PluginAction.init(flowHandlerId:input:speechPackage:utterance:actionParaphrase:userData:loggingId:)();
      }
      ((void (*)(char *, uint64_t))v118)(v69, v71);
      v96(v99, v114);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v117, v111);
      uint64_t v81 = v128;
      uint64_t v80 = v129;
      uint64_t v82 = v130;
      (*(void (**)(char *, uint64_t))(v128 + 8))(v130, v129);
      (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v82, v77, v80);
      goto LABEL_18;
    }
    (*(void (**)(char *, uint64_t))(v116 + 8))(v117, v111);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v65, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  }
  uint64_t v49 = v126;
LABEL_18:
  unint64_t v48 = v100;
LABEL_19:
  uint64_t v83 = v120[5];
  uint64_t v84 = v120[6];
  __swift_project_boxed_opaque_existential_1(v120 + 2, v83);
  uint64_t v85 = (*(uint64_t (**)(uint64_t, uint64_t))(v84 + 16))(v83, v84);
  uint64_t v87 = v86;
  uint64_t v88 = v121;
  uint64_t v89 = PluginAction.serialize()();
  if (v88)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v128 + 8))(v130, v129);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v133 = MEMORY[0x1E4F277C0];
    *(void *)&long long v132 = v89;
    *((void *)&v132 + 1) = v90;
    outlined init with take of Any(&v132, &v131);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v134 = v48;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v131, v85, v87, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v93 = v108;
    UndoAction.directInvocation.getter();
    CorrectionsDirectInvocation.identifier.getter();
    v107(v93, v124);
    uint64_t v94 = v113;
    Parse.DirectInvocation.init(identifier:userData:)();
    (*(void (**)(char *, void, uint64_t))(v125 + 104))(v94, *MEMORY[0x1E4FA1F38], v49);
    Input.init(parse:)();
    return (*(uint64_t (**)(char *, uint64_t))(v128 + 8))(v130, v129);
  }
}

uint64_t CorrectionsService.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_release();
  return v0;
}

uint64_t CorrectionsService.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t dispatch thunk of CorrectionsHandling.setupNewTurn(executionUUID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of CorrectionsHandling.undoFollowUpPluginActionUserDataKey.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CorrectionsHandling.checkUndo(input:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of CorrectionsHandling.commit()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CorrectionsHandling.setUndoInvocation(directInvocation:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t type metadata accessor for CorrectionsService()
{
  return self;
}

uint64_t method lookup function for CorrectionsService(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CorrectionsService);
}

uint64_t dispatch thunk of CorrectionsService.__allocating_init(correctionsClient:conversationHandlerLocator:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t CorrectionsUndoManager.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 40) = 0u;
  *(void *)(v0 + 56) = 0;
  *(_OWORD *)(v0 + 24) = 0u;
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v3 = 0;
  memset(v2, 0, sizeof(v2));
  swift_beginAccess();
  outlined assign with take of CorrectingFlow?((uint64_t)v2, v0 + 24);
  swift_endAccess();
  return v0;
}

uint64_t static UndoError.== infix(_:_:)()
{
  return 1;
}

void UndoError.hash(into:)()
{
}

Swift::Int UndoError.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t one-time initialization function for forceCanUndoOutput()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<Bool?, os_unfair_lock_s>);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(unsigned char *)(result + 16) = 2;
  static CorrectionsUndoManager.forceCanUndoOutput = result;
  return result;
}

uint64_t *CorrectionsUndoManager.forceCanUndoOutput.unsafeMutableAddressor()
{
  if (one-time initialization token for forceCanUndoOutput != -1) {
    swift_once();
  }
  return &static CorrectionsUndoManager.forceCanUndoOutput;
}

uint64_t static CorrectionsUndoManager.forceCanUndoOutput.getter()
{
  if (one-time initialization token for forceCanUndoOutput != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t CorrectionsUndoManager.init()()
{
  *(void *)(v0 + 56) = 0;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 24) = 0u;
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v3 = 0;
  memset(v2, 0, sizeof(v2));
  swift_beginAccess();
  outlined assign with take of CorrectingFlow?((uint64_t)v2, v0 + 24);
  swift_endAccess();
  return v0;
}

Swift::Bool __swiftcall CorrectionsUndoManager.canUndo()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for forceCanUndoOutput != -1) {
    swift_once();
  }
  uint64_t v2 = (unsigned char *)(static CorrectionsUndoManager.forceCanUndoOutput + 16);
  uint64_t v3 = (os_unfair_lock_s *)(static CorrectionsUndoManager.forceCanUndoOutput + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static CorrectionsUndoManager.forceCanUndoOutput + 20));
  closure #1 in AceServiceInvokerImpl.performSubmit(_:bargeInResult:executionSource:)(v2, &v11);
  os_unfair_lock_unlock(v3);
  if (v11 == 2)
  {
    swift_beginAccess();
    uint64_t v4 = *(void *)(v1 + 16);
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5)
    {
      outlined init with copy of ReferenceResolutionClientProtocol(v4 + 40 * v5 - 8, (uint64_t)&v11);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v11, &demangling cache variable for type metadata for UndoingCommand?);
      LOBYTE(v1) = 1;
    }
    else
    {
      uint64_t v13 = 0;
      long long v11 = 0u;
      long long v12 = 0u;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v11, &demangling cache variable for type metadata for UndoingCommand?);
      swift_beginAccess();
      outlined init with copy of CorrectingFlow?(v1 + 24, (uint64_t)&v11);
      LOBYTE(v1) = *((void *)&v12 + 1) != 0;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v11, &demangling cache variable for type metadata for CorrectingFlow?);
    }
  }
  else
  {
    LODWORD(v1) = v11 & 1;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 67109120;
      LODWORD(v11) = v1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v7, v8, "[CorrectionsUndoManager] returning test value for canUndo %{BOOL}d", v9, 8u);
      MEMORY[0x1BA9E48C0](v9, -1, -1);
    }
  }
  return v1;
}

uint64_t CorrectionsUndoManager.undo()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (uint64_t *)(v1 + 16);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    outlined init with copy of ReferenceResolutionClientProtocol(v4 + 40 * v5 - 8, (uint64_t)&v38);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v38, &demangling cache variable for type metadata for UndoingCommand?);
    if (one-time initialization token for executor != -1) {
      goto LABEL_31;
    }
    while (1)
    {
      uint64_t v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl(&dword_1B9C64000, v7, v8, "[CorrectionsUndoManager] running undo stack", v9, 2u);
        MEMORY[0x1BA9E48C0](v9, -1, -1);
      }

      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v37 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(*v3 + 16);
      if (!v12) {
        break;
      }
      while (1)
      {
        outlined init with copy of ReferenceResolutionClientProtocol(v11 + 40 * v12 - 8, (uint64_t)&v38);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v38, &demangling cache variable for type metadata for UndoingCommand?);
        swift_beginAccess();
        uint64_t v13 = (void *)*v3;
        if (!*(void *)(*v3 + 16)) {
          break;
        }
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v3 = (uint64_t)v13;
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v15 = v13[2];
          if (!v15) {
            goto LABEL_30;
          }
        }
        else
        {
          uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew()(v13);
          *uint64_t v3 = (uint64_t)v13;
          uint64_t v15 = v13[2];
          if (!v15) {
            goto LABEL_30;
          }
        }
        uint64_t v16 = v15 - 1;
        outlined init with take of ReferenceResolutionClientProtocol((long long *)&v13[5 * v15 - 1], (uint64_t)&v35);
        v13[2] = v16;
        *uint64_t v3 = (uint64_t)v13;
        outlined init with take of ReferenceResolutionClientProtocol(&v35, (uint64_t)&v38);
        swift_endAccess();
        uint64_t v17 = v37;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
          uint64_t v37 = v17;
        }
        unint64_t v19 = v17[2];
        unint64_t v18 = v17[3];
        if (v19 >= v18 >> 1) {
          uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v17);
        }
        uint64_t v20 = *((void *)&v39 + 1);
        uint64_t v21 = v40;
        uint64_t v22 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v38, *((uint64_t *)&v39 + 1));
        MEMORY[0x1F4188790](v22);
        uint64_t v24 = (char *)&v35 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v25 + 16))(v24);
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, (uint64_t)v24, (uint64_t *)&v37, v20, v21);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v38);
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(*v3 + 16);
        if (!v12)
        {
          uint64_t v10 = v37;
          goto LABEL_17;
        }
      }
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      swift_once();
    }
LABEL_17:
    uint64_t v40 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    uint64_t result = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v38, &demangling cache variable for type metadata for UndoingCommand?);
    *(void *)a1 = v10;
    *(unsigned char *)(a1 + 40) = 1;
  }
  else
  {
    uint64_t v40 = 0;
    long long v38 = 0u;
    long long v39 = 0u;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v38, &demangling cache variable for type metadata for UndoingCommand?);
    swift_beginAccess();
    outlined init with copy of CorrectingFlow?(v1 + 24, (uint64_t)&v35);
    if (v36)
    {
      outlined init with take of ReferenceResolutionClientProtocol(&v35, (uint64_t)&v38);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)static Logger.executor);
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v30 = 0;
        _os_log_impl(&dword_1B9C64000, v28, v29, "[CorrectionsUndoManager] return undo flow", v30, 2u);
        MEMORY[0x1BA9E48C0](v30, -1, -1);
      }

      CorrectionsUndoManager.clearUndoFlow()();
      uint64_t result = outlined init with take of ReferenceResolutionClientProtocol(&v38, a1);
      *(unsigned char *)(a1 + 40) = 2;
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v35, &demangling cache variable for type metadata for CorrectingFlow?);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      __swift_project_value_buffer(v31, (uint64_t)static Logger.executor);
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl(&dword_1B9C64000, v32, v33, "[CorrectionsUndoManager] nothing to undo", v34, 2u);
        MEMORY[0x1BA9E48C0](v34, -1, -1);
      }

      lazy protocol witness table accessor for type UndoError and conformance UndoError();
      uint64_t result = swift_allocError();
      *(void *)a1 = result;
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return result;
}

uint64_t CorrectionsUndoManager.register(action:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_1B9C64000, v7, v8, "[CorrectionsUndoManager] registering undo action", v9, 2u);
    MEMORY[0x1BA9E48C0](v9, -1, -1);
  }

  CorrectionsUndoManager.clearUndoFlow()();
  uint64_t v10 = type metadata accessor for UndoCommand();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  uint64_t v12 = (void *)(v3 + 16);
  swift_beginAccess();
  uint64_t v13 = *(void **)(v3 + 16);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v3 + 16) = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
    *uint64_t v12 = v13;
  }
  unint64_t v16 = v13[2];
  unint64_t v15 = v13[3];
  if (v16 >= v15 >> 1)
  {
    uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v13);
    *uint64_t v12 = v13;
  }
  uint64_t v19 = v10;
  uint64_t v20 = &protocol witness table for UndoCommand;
  *(void *)&long long v18 = v11;
  v13[2] = v16 + 1;
  outlined init with take of ReferenceResolutionClientProtocol(&v18, (uint64_t)&v13[5 * v16 + 4]);
  return swift_endAccess();
}

uint64_t UndoCommand.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t CorrectionsUndoManager.register(flow:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_1B9C64000, v5, v6, "[CorrectionsUndoManager] registering undo flow", v7, 2u);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }

  os_log_type_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_1B9C64000, v8, v9, "[CorrectionsUndoManager] clearing undo stack", v10, 2u);
    MEMORY[0x1BA9E48C0](v10, -1, -1);
  }

  swift_beginAccess();
  *(void *)(v2 + 16) = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRelease();
  outlined init with copy of ReferenceResolutionClientProtocol(a1, (uint64_t)v13);
  outlined init with take of CorrectingFlow?((uint64_t)v13, (uint64_t)v12);
  swift_beginAccess();
  outlined assign with take of CorrectingFlow?((uint64_t)v12, v2 + 24);
  return swift_endAccess();
}

Swift::Void __swiftcall CorrectionsUndoManager.clear()()
{
  uint64_t v1 = v0;
  CorrectionsUndoManager.clearUndoFlow()();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "[CorrectionsUndoManager] clearing undo stack", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  swift_beginAccess();
  *(void *)(v1 + 16) = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRelease();
}

uint64_t CorrectionsUndoManager.clearUndoFlow()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "[CorrectionsUndoManager] clearing undo flow", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  swift_beginAccess();
  outlined assign with take of CorrectingFlow?((uint64_t)v7, v1 + 24);
  return swift_endAccess();
}

uint64_t CorrectionsUndoManager.deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 24, &demangling cache variable for type metadata for CorrectingFlow?);
  return v0;
}

uint64_t CorrectionsUndoManager.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 24, &demangling cache variable for type metadata for CorrectingFlow?);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for CorrectionsEngine.canUndo() in conformance CorrectionsUndoManager()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))() & 1;
}

uint64_t protocol witness for CorrectionsEngine.undo() in conformance CorrectionsUndoManager()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

uint64_t protocol witness for CorrectionsEngine.clear() in conformance CorrectionsUndoManager()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 200))();
}

uint64_t protocol witness for SiriCorrectionsClient.register(action:) in conformance CorrectionsUndoManager()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 184))();
}

uint64_t protocol witness for SiriCorrectionsClient.register(flow:) in conformance CorrectionsUndoManager()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))();
}

uint64_t UndoCommand.init(_:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t UndoCommand.execute()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x1F4188298](UndoCommand.execute(), 0, 0);
}

uint64_t UndoCommand.execute()()
{
  os_log_type_t v4 = (uint64_t (*)(uint64_t))(*(void *)(v0[3] + 16) + **(int **)(v0[3] + 16));
  uint64_t v1 = (void *)swift_task_alloc();
  v0[4] = v1;
  *uint64_t v1 = v0;
  v1[1] = UndoCommand.execute();
  uint64_t v2 = v0[2];
  return v4(v2);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t UndoCommand.deinit()
{
  swift_release();
  return v0;
}

uint64_t UndoCommand.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for UndoingCommand.execute() in conformance UndoCommand(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  return MEMORY[0x1F4188298](UndoCommand.execute(), 0, 0);
}

uint64_t outlined init with copy of CorrectingFlow?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CorrectingFlow?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

void *specialized _ArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

void specialized _ArrayBuffer._consumeAndCreateNew()(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }

  JUMPOUT(0x1BA9E39A0);
}

unint64_t lazy protocol witness table accessor for type UndoError and conformance UndoError()
{
  unint64_t result = lazy protocol witness table cache variable for type UndoError and conformance UndoError;
  if (!lazy protocol witness table cache variable for type UndoError and conformance UndoError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UndoError and conformance UndoError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UndoError and conformance UndoError;
  if (!lazy protocol witness table cache variable for type UndoError and conformance UndoError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UndoError and conformance UndoError);
  }
  return result;
}

uint64_t type metadata accessor for UndoCommand()
{
  return self;
}

uint64_t outlined init with take of CorrectingFlow?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CorrectingFlow?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t instantiation function for generic protocol witness table for CorrectionsUndoManager(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type CorrectionsUndoManager and conformance CorrectionsUndoManager()
{
  unint64_t result = lazy protocol witness table cache variable for type CorrectionsUndoManager and conformance CorrectionsUndoManager;
  if (!lazy protocol witness table cache variable for type CorrectionsUndoManager and conformance CorrectionsUndoManager)
  {
    type metadata accessor for CorrectionsUndoManager();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CorrectionsUndoManager and conformance CorrectionsUndoManager);
  }
  return result;
}

uint64_t type metadata accessor for CorrectionsUndoManager()
{
  return self;
}

uint64_t dispatch thunk of CorrectionsEngine.canUndo()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of CorrectionsEngine.undo()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CorrectionsEngine.clear()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

void destroy for UndoResult(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 3) {
    unsigned int v1 = *(_DWORD *)a1 + 3;
  }
  if (v1 == 2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1);
  }
  else if (v1 == 1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
  }
}

uint64_t initializeWithCopy for UndoResult(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = *((unsigned __int8 *)a2 + 40);
  if (v3 >= 3) {
    unsigned int v3 = *(_DWORD *)a2 + 3;
  }
  if (v3 == 2)
  {
    long long v4 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 2;
  }
  else if (v3 == 1)
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 40) = 1;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v5 = *a2;
    id v6 = (id)*a2;
    *(void *)a1 = v5;
    *(unsigned char *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for UndoResult(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (v4 == 2)
    {
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
    }
    else if (v4 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 2;
    }
    else if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 40) = 1;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v7 = *(void **)a2;
      id v8 = v7;
      *(void *)a1 = v7;
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for UndoResult(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    if (v4 == 2)
    {
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
    }
    else if (v4 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      char v6 = 2;
    }
    else if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v6 = 1;
    }
    else
    {
      char v6 = 0;
      *(void *)a1 = *(void *)a2;
    }
    *(unsigned char *)(a1 + 40) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for UndoResult(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for UndoResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UndoResult()
{
  return &type metadata for UndoResult;
}

unsigned char *storeEnumTagSinglePayload for UndoError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B9E9C07CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for UndoError()
{
  return &type metadata for UndoError;
}

uint64_t method lookup function for CorrectionsUndoManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CorrectionsUndoManager);
}

uint64_t dispatch thunk of CorrectionsUndoManager.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of CorrectionsUndoManager.canUndo()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of CorrectionsUndoManager.undo()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of CorrectionsUndoManager.register(action:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of CorrectionsUndoManager.register(flow:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of CorrectionsUndoManager.clear()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of UndoingCommand.execute()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_log_type_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + **(int **)(a3 + 8));
  long long v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v9(a1, a2, a3);
}

uint64_t method lookup function for UndoCommand(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UndoCommand);
}

uint64_t dispatch thunk of UndoCommand.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t type metadata instantiation function for CorrectionsUndoManager.Stack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 16);
}

uint64_t type metadata accessor for CorrectionsUndoManager.Stack()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t DecisionEngine.__allocating_init(conversationHandlerLocator:rrClient:correctionsClient:linkExpansionContextBuilder:preFlowBlockingWork:camBridge:curareDonator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v12 = *(void *)(a3 + 32);
  uint64_t v14 = __swift_mutable_project_boxed_opaque_existential_1(a3, v13);
  uint64_t v15 = *(void *)(a5 + 24);
  uint64_t v16 = *(void *)(a5 + 32);
  uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1(a5, v15);
  uint64_t v18 = specialized DecisionEngine.__allocating_init(conversationHandlerLocator:rrClient:correctionsClient:linkExpansionContextBuilder:preFlowBlockingWork:camBridge:curareDonator:)(a1, a2, v14, a4, v17, a6, a7, v22, v15, v13, v16, v12);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a5);
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  return v18;
}

uint64_t DecisionEngine.previousConversation.getter()
{
  return swift_retain();
}

uint64_t DecisionEngine.previousConversation.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 184) = a1;
  return swift_release();
}

uint64_t (*DecisionEngine.previousConversation.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t DecisionEngine.init(conversationHandlerLocator:rrClient:correctionsClient:linkExpansionContextBuilder:preFlowBlockingWork:camBridge:curareDonator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, uint64_t a7)
{
  uint64_t v27 = a7;
  uint64_t v25 = a2;
  uint64_t v26 = a6;
  uint64_t v12 = *(void *)(a3 + 24);
  uint64_t v11 = *(void *)(a3 + 32);
  uint64_t v13 = __swift_mutable_project_boxed_opaque_existential_1(a3, v12);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  uint64_t v17 = *(void *)(a5 + 24);
  uint64_t v18 = *(void *)(a5 + 32);
  uint64_t v19 = __swift_mutable_project_boxed_opaque_existential_1(a5, v17);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v22 + 16))(v21);
  uint64_t v23 = specialized DecisionEngine.init(conversationHandlerLocator:rrClient:correctionsClient:linkExpansionContextBuilder:preFlowBlockingWork:camBridge:curareDonator:)(a1, v25, (uint64_t)v15, a4, (uint64_t)v21, v26, v27, v28, v17, v12, v18, v11);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a5);
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  return v23;
}

uint64_t key path setter for DecisionEngine.ambiguityService : DecisionEngine(uint64_t a1, uint64_t *a2)
{
  outlined init with copy of ReferenceResolutionClientProtocol(a1, (uint64_t)v6);
  uint64_t v3 = *a2;
  outlined init with take of ReferenceResolutionClientProtocol(v6, (uint64_t)v5);
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)((uint64_t)v5, v3 + 200, &demangling cache variable for type metadata for AmbiguityServiceProviding?);
  return swift_endAccess();
}

uint64_t DecisionEngine.ambiguityService.setter(long long *a1)
{
  outlined init with take of ReferenceResolutionClientProtocol(a1, (uint64_t)v3);
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)((uint64_t)v3, v1 + 200, &demangling cache variable for type metadata for AmbiguityServiceProviding?);
  return swift_endAccess();
}

void (*DecisionEngine.ambiguityService.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  DecisionEngine.ambiguityService.getter((uint64_t)v3);
  return DecisionEngine.ambiguityService.modify;
}

void DecisionEngine.ambiguityService.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = (long long *)(*a1 + 40);
  uint64_t v4 = *a1 + 80;
  if (a2)
  {
    uint64_t v5 = v2[18];
    outlined init with copy of ReferenceResolutionClientProtocol(*a1, (uint64_t)v3);
    outlined init with take of ReferenceResolutionClientProtocol(v3, v4);
    swift_beginAccess();
    outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v4, v5 + 200, &demangling cache variable for type metadata for AmbiguityServiceProviding?);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
  }
  else
  {
    uint64_t v6 = v2[18];
    outlined init with take of ReferenceResolutionClientProtocol((long long *)*a1, (uint64_t)v3);
    swift_beginAccess();
    outlined assign with take of (Input, AnyFlow, SiriEnvironment)((uint64_t)v3, v6 + 200, &demangling cache variable for type metadata for AmbiguityServiceProviding?);
    swift_endAccess();
  }

  free(v2);
}

Swift::Void __swiftcall DecisionEngine.newSessionStarted()()
{
  ActionGenerator.newSessionStarted()();
  DecisionEngine.ambiguityService.getter((uint64_t)v3);
  uint64_t v1 = v4;
  uint64_t v2 = v5;
  __swift_project_boxed_opaque_existential_1(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v3);
  swift_beginAccess();
  *(void *)(v0 + 184) = 0;
  swift_release();
}

uint64_t DecisionEngine.commitConversation(_:)(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 184) = a1;
  swift_release();
  return swift_retain();
}

Swift::Void __swiftcall DecisionEngine.commitCorrections()()
{
  uint64_t v1 = *(void **)(v0 + 40);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "[CorrectionsService] Commit to clear context inside CorrectionsEngine", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  __swift_project_boxed_opaque_existential_1(v1 + 2, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
}

uint64_t Input.parseHypothesisId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v18 = a1;
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  os_log_type_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Parse();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  id v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for USOParse();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v6 + 88))(v8, v5) == *MEMORY[0x1E4FA1F48])
  {
    (*(void (**)(char *, uint64_t))(v6 + 96))(v8, v5);
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    USOParse.userParse.getter();
    uint64_t v13 = v18;
    Siri_Nlu_External_UserParse.id.getter();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v14 = type metadata accessor for Siri_Nlu_External_UUID();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 0, 1, v14);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v16 = type metadata accessor for Siri_Nlu_External_UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v18, 1, 1, v16);
  }
}

uint64_t DecisionEngine.loadConversationFromPluginAction(_:speechData:turnData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[9] = a5;
  v6[10] = v5;
  v6[7] = a3;
  v6[8] = a4;
  v6[5] = a1;
  v6[6] = a2;
  v6[11] = type metadata accessor for ConversationHelperInput(0);
  v6[12] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v7 = static MessageBusActor.shared;
  v6[13] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](DecisionEngine.loadConversationFromPluginAction(_:speechData:turnData:bridge:), v7, 0);
}

uint64_t DecisionEngine.loadConversationFromPluginAction(_:speechData:turnData:bridge:)()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void **)(v0 + 96);
  uint64_t v3 = *(void **)(v0 + 48);
  long long v9 = *(_OWORD *)(v0 + 64);
  _s14SiriKitRuntime26RemoteConversationTurnDataVWOcTm_0(*(void *)(v0 + 56), (uint64_t)v2 + *(int *)(v1 + 20), type metadata accessor for RemoteConversationTurnData);
  *uint64_t v2 = v3;
  *(_OWORD *)((char *)v2 + *(int *)(v1 + 24)) = v9;
  id v4 = v3;
  swift_unknownObjectRetain();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v5;
  *uint64_t v5 = v0;
  v5[1] = DecisionEngine.loadConversationFromPluginAction(_:speechData:turnData:bridge:);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 40);
  return ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:)(v7, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = v0[12];
  swift_release();
  outlined destroy of RemoteConversationTurnData(v1, type metadata accessor for ConversationHelperInput);
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v3 = v0[16];
  return v2(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 96);
  swift_release();
  outlined destroy of RemoteConversationTurnData(v1, type metadata accessor for ConversationHelperInput);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t DecisionEngine.loadConversationFromPluginAction(_:speechData:turnData:bridge:)(uint64_t a1)
{
  id v4 = (void *)*v2;
  v4[15] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[13];
  if (v1)
  {
    uint64_t v6 = DecisionEngine.loadConversationFromPluginAction(_:speechData:turnData:bridge:);
  }
  else
  {
    v4[16] = a1;
    uint64_t v6 = DecisionEngine.loadConversationFromPluginAction(_:speechData:turnData:bridge:);
  }
  return MEMORY[0x1F4188298](v6, v5, 0);
}

uint64_t DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[47] = v25;
  v9[48] = v8;
  v9[45] = a7;
  v9[46] = a8;
  v9[43] = a5;
  v9[44] = a6;
  v9[41] = a3;
  v9[42] = a4;
  v9[39] = a1;
  v9[40] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  v9[49] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v9[50] = v10;
  v9[51] = *(void *)(v10 - 8);
  v9[52] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v9[53] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v9[54] = v11;
  v9[55] = *(void *)(v11 - 8);
  v9[56] = swift_task_alloc();
  v9[57] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_Parser();
  v9[58] = v12;
  v9[59] = *(void *)(v12 - 8);
  v9[60] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  v9[61] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AmbiguityServiceResponse?);
  v9[62] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for AmbiguityServiceResponse(0);
  v9[63] = v13;
  v9[64] = *(void *)(v13 - 8);
  v9[65] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for ExecutionLocation();
  v9[66] = v14;
  v9[67] = *(void *)(v14 - 8);
  v9[68] = swift_task_alloc();
  v9[69] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
  v9[70] = v15;
  v9[71] = *(void *)(v15 - 8);
  v9[72] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision.SiriXRoute();
  v9[73] = v16;
  v9[74] = *(void *)(v16 - 8);
  v9[75] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  v9[76] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLRoutingDecisionMessage.GenAIFallbackSuppressReason?);
  v9[77] = swift_task_alloc();
  v9[78] = type metadata accessor for UserInputResult();
  v9[79] = swift_task_alloc();
  v9[80] = swift_task_alloc();
  type metadata accessor for UUID();
  v9[81] = swift_task_alloc();
  uint64_t v17 = type metadata accessor for Parse();
  v9[82] = v17;
  v9[83] = *(void *)(v17 - 8);
  v9[84] = swift_task_alloc();
  type metadata accessor for CamParse();
  v9[85] = swift_task_alloc();
  uint64_t v18 = type metadata accessor for ActionCandidate();
  v9[86] = v18;
  v9[87] = *(void *)(v18 - 8);
  v9[88] = swift_task_alloc();
  v9[89] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v9[90] = swift_task_alloc();
  v9[91] = swift_task_alloc();
  v9[92] = swift_task_alloc();
  v9[93] = swift_task_alloc();
  v9[94] = swift_task_alloc();
  uint64_t v19 = type metadata accessor for Input();
  v9[95] = v19;
  v9[96] = *(void *)(v19 - 8);
  v9[97] = swift_task_alloc();
  v9[98] = swift_task_alloc();
  v9[99] = swift_task_alloc();
  v9[100] = swift_task_alloc();
  v9[101] = swift_task_alloc();
  uint64_t v20 = type metadata accessor for Siri_Nlu_External_UserParse();
  v9[102] = v20;
  v9[103] = *(void *)(v20 - 8);
  v9[104] = swift_task_alloc();
  v9[105] = swift_task_alloc();
  v9[106] = swift_task_alloc();
  v9[107] = swift_task_alloc();
  v9[108] = swift_task_alloc();
  uint64_t v21 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  v9[109] = v21;
  v9[110] = *(void *)(v21 - 8);
  v9[111] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesError?);
  v9[112] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  v9[113] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v22 = static MessageBusActor.shared;
  v9[114] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:), v22, 0);
}

uint64_t DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:)()
{
  v175 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = v0[40];
  uint64_t v2 = type metadata accessor for Logger();
  v0[115] = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v3 = *(void *)(v1 + 56);
  v0[116] = v3;
  uint64_t v4 = OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_pommesInfo;
  uint64_t v5 = *(void *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_pommesInfo);
  v170 = v0 + 13;
  if (!v5)
  {
    uint64_t v11 = 0;
    uint64_t v160 = 0;
    goto LABEL_11;
  }
  uint64_t v6 = v0[113];
  outlined init with copy of ReferenceResolutionClientProtocol?(v5 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesSearchReason, v6, &demangling cache variable for type metadata for PommesSearchReason?);
  uint64_t v7 = type metadata accessor for PommesSearchReason();
  uint64_t v8 = *(void *)(v7 - 8);
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  uint64_t v10 = v0[113];
  if (v9 != 1)
  {
    uint64_t v160 = PommesSearchReason.rawValue.getter();
    uint64_t v11 = v13;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v12 = *(void *)(v3 + v4);
    if (v12) {
      goto LABEL_9;
    }
LABEL_11:
    uint64_t v159 = 0;
    uint64_t v19 = 0;
    goto LABEL_12;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v0[113], &demangling cache variable for type metadata for PommesSearchReason?);
  uint64_t v160 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = *(void *)(v3 + v4);
  if (!v12) {
    goto LABEL_11;
  }
LABEL_9:
  uint64_t v14 = v0[112];
  outlined init with copy of ReferenceResolutionClientProtocol?(v12 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesError, v14, &demangling cache variable for type metadata for PommesError?);
  uint64_t v15 = type metadata accessor for PommesError();
  uint64_t v16 = *(void *)(v15 - 8);
  int v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
  uint64_t v18 = v0[112];
  if (v17 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0[112], &demangling cache variable for type metadata for PommesError?);
    goto LABEL_11;
  }
  uint64_t v159 = PommesError.rawValue.getter();
  uint64_t v19 = v95;
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v15);
LABEL_12:
  uint64_t v148 = v19;
  v0[118] = v19;
  v0[117] = v11;
  uint64_t v20 = v0[111];
  uint64_t v21 = v0[110];
  uint64_t v22 = v0[109];
  (*(void (**)(uint64_t, void, uint64_t))(v21 + 104))(v20, *MEMORY[0x1E4FA2868], v22);
  lazy protocol witness table accessor for type Siri_Nlu_External_ResponseStatus.StatusCode and conformance Siri_Nlu_External_ResponseStatus.StatusCode((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_ResponseStatus.StatusCode and conformance Siri_Nlu_External_ResponseStatus.StatusCode, MEMORY[0x1E4FA2880]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v163 = v0[34];
  uint64_t v166 = v0[35];
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  uint64_t v157 = v3;
  uint64_t v23 = *(void *)(v3 + 16);
  uint64_t v24 = *(void *)(v23 + 16);
  v173 = v0;
  uint64_t v146 = v11;
  if (v24)
  {
    uint64_t v25 = v0[103];
    uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 16);
    uint64_t v26 = v25 + 16;
    uint64_t v27 = v28;
    uint64_t v29 = v23 + ((*(unsigned __int8 *)(v26 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 64));
    uint64_t v30 = *(void *)(v26 + 56);
    swift_bridgeObjectRetain_n();
    uint64_t v31 = v24 - 1;
    do
    {
      uint64_t v32 = v31;
      uint64_t v33 = v173[108];
      uint64_t v34 = v173[102];
      uint64_t v35 = v27(v33, v29, v34);
      MEMORY[0x1BA9DE000](v35);
      char v36 = Array<A>.hasWantedToUndo.getter();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v26 - 8))(v33, v34);
      if (v36) {
        break;
      }
      uint64_t v31 = v32 - 1;
      v29 += v30;
    }
    while (v32);
    swift_bridgeObjectRelease_n();
    uint64_t v0 = v173;
    uint64_t v11 = v146;
  }
  else
  {
    char v36 = 0;
  }
  char v144 = v36;
  char v37 = v36 & 1;
  *((unsigned char *)v0 + 1296) = v36 & 1;
  uint64_t v38 = v0[96];
  uint64_t v39 = v0[95];
  uint64_t v40 = v0[94];
  uint64_t v41 = v0[43];
  uint64_t v42 = v0[40];
  uint64_t v43 = *(int *)(type metadata accessor for ConversationHelperInput(0) + 20);
  *((_DWORD *)v0 + 322) = v43;
  uint64_t v143 = v41 + v43;
  uint64_t v44 = *(void **)(*(void *)(v41 + v43 + *(int *)(type metadata accessor for RemoteConversationTurnData(0) + 28))
                 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_conjunctionInfo);
  v0[119] = v44;
  v0[2] = v160;
  v0[3] = v11;
  v0[4] = v159;
  v0[5] = v148;
  *((unsigned char *)v0 + 48) = v166 == v163;
  *((unsigned char *)v0 + 49) = v37;
  v0[7] = v44;
  uint64_t v167 = *(void *)(v42 + 16);
  v0[120] = v167;
  unint64_t v45 = *(void *)(v42 + 24);
  v0[121] = v45;
  int64_t v145 = v44;
  swift_bridgeObjectRetain();
  DecisionEngine.ambiguityService.getter((uint64_t)v170);
  uint64_t v46 = v0[16];
  uint64_t v47 = v173[17];
  __swift_project_boxed_opaque_existential_1(v170, v46);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 24))(v42, v46, v47);
  unint64_t v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
  v173[122] = v48;
  v173[123] = (v38 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v48(v40, 1, v39) != 1)
  {
    uint64_t v53 = v173[101];
    uint64_t v54 = v173[96];
    uint64_t v55 = v173[95];
    uint64_t v56 = v173[94];
    uint64_t v57 = v173[41];
    uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 32);
    v173[124] = v58;
    v173[125] = (v54 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v58(v53, v56, v55);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v170);
    Input.stripSetIdentity()();
    if ((v57 & 0xC000000000000001) != 0)
    {
      if (__CocoaSet.count.getter())
      {
LABEL_23:
        swift_bridgeObjectRetain();
        uint64_t v59 = Logger.logObject.getter();
        os_log_type_t v60 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v59, v60))
        {
          uint64_t v61 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v61 = 134217984;
          if ((v57 & 0xC000000000000001) != 0) {
            uint64_t v62 = __CocoaSet.count.getter();
          }
          else {
            uint64_t v62 = *(void *)(v173[41] + 16);
          }
          v173[38] = v62;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v59, v60, "[DecisionEngine] %ld active conversations are present. Trying to find an existing flow", v61, 0xCu);
          MEMORY[0x1BA9E48C0](v61, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        v173[126] = *(void *)(v173[48] + 32);
        uint64_t v103 = (void *)swift_task_alloc();
        v173[127] = v103;
        void *v103 = v173;
        v103[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
        uint64_t v104 = v173[43];
        uint64_t v105 = v173[41];
        uint64_t v106 = v173[101];
        return ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:)(v106, v105, v104);
      }
    }
    else if (*(void *)(v173[41] + 16))
    {
      goto LABEL_23;
    }
    uint64_t v96 = v173[48];
    uint64_t v97 = *(void *)(v96 + 176);
    if (!v97)
    {
      long long v98 = DecisionEngine.getRREntities()();
      type metadata accessor for SiriEnvironment();
      static SiriEnvironment.default.getter();
      SiriEnvironment.salientEntitiesProvider.getter();
      swift_release();
      swift_bridgeObjectRetain();
      dispatch thunk of SalientEntitiesDataProvider.salientEntities.setter();
      swift_release();
      *(void *)(v96 + 176) = v98;
      swift_bridgeObjectRelease();
      uint64_t v97 = *(void *)(v96 + 176);
      uint64_t v96 = v173[48];
    }
    v173[136] = v97;
    if (v97) {
      uint64_t v99 = v97;
    }
    else {
      uint64_t v99 = MEMORY[0x1E4FBC860];
    }
    swift_bridgeObjectRetain();
    unint64_t v100 = (void *)swift_task_alloc();
    v173[137] = v100;
    void *v100 = v173;
    v100[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
    uint64_t v101 = v173[40];
    return ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:)(v101, v99, v96 + 96);
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v173[94], &demangling cache variable for type metadata for Input?);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v170);
  swift_bridgeObjectRetain();
  uint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v51 = (uint8_t *)swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    uint64_t v174 = v52;
    *(_DWORD *)uint64_t v51 = 136315138;
    swift_bridgeObjectRetain();
    v173[30] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v167, v45, &v174);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v49, v50, "[DecisionEngine]: Could not extract ranked input from ConversationUserInput for rcId: %s", v51, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v52, -1, -1);
    MEMORY[0x1BA9E48C0](v51, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v63 = *(void *)(v157 + 16);
  uint64_t v64 = *(void *)(v63 + 16);
  if (!v64)
  {
    swift_bridgeObjectRetain();
    uint64_t v94 = 1;
    id v65 = v173;
    goto LABEL_58;
  }
  id v65 = v173;
  uint64_t v66 = v173[103];
  uint64_t v67 = v173[55];
  uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v66 + 16);
  v66 += 16;
  v154 = v68;
  uint64_t v69 = v63 + ((*(unsigned __int8 *)(v66 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 64));
  uint64_t v153 = (void (**)(uint64_t, uint64_t))(v173[59] + 8);
  unsigned int v152 = *MEMORY[0x1E4FA27A8];
  int v150 = (void (**)(uint64_t, uint64_t))(v67 + 8);
  uint64_t v151 = (void (**)(uint64_t, void, uint64_t))(v67 + 104);
  uint64_t v70 = (void (**)(uint64_t, uint64_t))(v66 - 8);
  v147 = (void (**)(uint64_t, uint64_t))(v173[51] + 8);
  uint64_t v149 = *(void *)(v66 + 56);
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v72 = v65[106];
    uint64_t v171 = v65[105];
    uint64_t v164 = v64;
    uint64_t v168 = v173[102];
    uint64_t v73 = v173[60];
    uint64_t v74 = v173[58];
    uint64_t v75 = v173[57];
    uint64_t v76 = v173[56];
    uint64_t v77 = v173[54];
    uint64_t v161 = v69;
    v154(v72, v69);
    Siri_Nlu_External_UserParse.parser.getter();
    Siri_Nlu_External_Parser.parserID.getter();
    (*v153)(v73, v74);
    (*v151)(v76, v152, v77);
    lazy protocol witness table accessor for type Siri_Nlu_External_ResponseStatus.StatusCode and conformance Siri_Nlu_External_ResponseStatus.StatusCode((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, MEMORY[0x1E4FA27B0]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v78 = v173[33];
    uint64_t v79 = v173[32];
    uint64_t v80 = *v150;
    (*v150)(v76, v77);
    v80(v75, v77);
    id v65 = v173;
    ((void (*)(uint64_t, uint64_t, uint64_t))v154)(v171, v72, v168);
    if (v78 != v79) {
      goto LABEL_30;
    }
    uint64_t v81 = (char *)v173[53];
    Siri_Nlu_External_UserParse.preferredUserDialogAct.getter(v81);
    uint64_t v82 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
    uint64_t v83 = *(void *)(v82 - 8);
    int v84 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82);
    uint64_t v85 = v173[53];
    if (v84 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v173[53], &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_30:
      uint64_t v71 = *v70;
      (*v70)(v173[105], v173[102]);
      goto LABEL_31;
    }
    uint64_t v86 = v173[52];
    uint64_t v87 = v173[50];
    Siri_Nlu_External_UserDialogAct.delegated.getter();
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v85, v82);
    uint64_t v88 = Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter();
    uint64_t v90 = v89;
    (*v147)(v86, v87);
    uint64_t v91 = v173[105];
    uint64_t v92 = v173[102];
    if (v88 == 0xD000000000000026 && v90 == 0x80000001BA067A60) {
      break;
    }
    char v93 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v71 = *v70;
    (*v70)(v91, v92);
    swift_bridgeObjectRelease();
    if (v93) {
      goto LABEL_57;
    }
LABEL_31:
    v71(v173[106], v173[102]);
    uint64_t v69 = v161 + v149;
    uint64_t v64 = v164 - 1;
    if (v164 == 1)
    {
      uint64_t v94 = 1;
      goto LABEL_58;
    }
  }
  (*v70)(v173[105], v173[102]);
  swift_bridgeObjectRelease();
LABEL_57:
  (*(void (**)(void, void, void))(v173[103] + 32))(v173[61], v173[106], v173[102]);
  uint64_t v94 = 0;
LABEL_58:
  uint64_t v107 = v65[103];
  uint64_t v108 = v65[102];
  uint64_t v109 = v65[61];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v107 + 56))(v109, v94, 1, v108);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v107 + 48))(v109, 1, v108) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v65[61], &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    if (DecisionEngine.shouldGenerateCAMFallback(executionRequestId:userWantedToUndo:)(*(void *)v143, *(void *)(v143 + 8), v144 & 1))
    {
      uint64_t v110 = Logger.logObject.getter();
      os_log_type_t v111 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v110, v111))
      {
        uint64_t v112 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v112 = 0;
        _os_log_impl(&dword_1B9C64000, v110, v111, "[DecisionEngine] Returning fallback response", v112, 2u);
        MEMORY[0x1BA9E48C0](v112, -1, -1);
      }

      id v113 = (void *)swift_task_alloc();
      v65[160] = v113;
      *id v113 = v65;
      v113[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
      uint64_t v114 = v65[43];
      uint64_t v115 = v65[39];
      return DecisionEngine.getCAMFallback(conversationHelperInput:info:)(v115, v114, (uint64_t)(v65 + 2));
    }
    swift_release();
    id v136 = Logger.logObject.getter();
    os_log_type_t v137 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v136, v137))
    {
      uint64_t v138 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v138 = 0;
      _os_log_impl(&dword_1B9C64000, v136, v137, "[DecisionEngine] Returning no response to enforce server fallback", v138, 2u);
      MEMORY[0x1BA9E48C0](v138, -1, -1);
      v139 = v145;
    }
    else
    {
      v139 = v136;
      id v136 = v145;
    }
    uint64_t v140 = v65[39];

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v141 = type metadata accessor for DecisionEngineResponse();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v141 - 8) + 56))(v140, 1, 1, v141);
  }
  else
  {
    uint64_t v116 = v65[107];
    uint64_t v117 = v65[103];
    uint64_t v118 = v65[102];
    uint64_t v119 = v65[61];
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v117 + 32))(v116, v119, v118);
    v120 = Logger.logObject.getter();
    os_log_type_t v121 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v120, v121))
    {
      uint64_t v122 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v122 = 0;
      _os_log_impl(&dword_1B9C64000, v120, v121, "[DecisionEngine] Returning response with NLv3 fallback exception parse.", v122, 2u);
      MEMORY[0x1BA9E48C0](v122, -1, -1);
    }
    uint64_t v123 = v120;
    uint64_t v124 = v65[107];
    uint64_t v125 = v65[104];
    uint64_t v126 = v65[103];
    uint64_t v127 = v65[102];
    uint64_t v162 = v65[97];
    uint64_t v169 = v65[96];
    uint64_t v172 = v65[95];
    uint64_t v128 = v173[84];
    uint64_t v129 = v173[83];
    uint64_t v158 = v173[82];
    uint64_t v130 = v173[60];
    uint64_t v131 = v173[59];
    uint64_t v155 = v173[58];
    uint64_t v132 = v173[55];
    uint64_t v156 = v173[54];
    uint64_t v133 = v173[49];
    uint64_t v165 = v173[39];

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v126 + 16))(v125, v124, v127);
    Siri_Nlu_External_UserParse.parser.getter();
    Siri_Nlu_External_Parser.parserID.getter();
    (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v130, v155);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v132 + 56))(v133, 0, 1, v156);
    USOParse.init(userParse:parserIdentifier:appBundleId:)();
    (*(void (**)(uint64_t, void, uint64_t))(v129 + 104))(v128, *MEMORY[0x1E4FA1F48], v158);
    id v65 = v173;
    Input.init(parse:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v124, v127);
    uint64_t v134 = type metadata accessor for DecisionEngineResponse();
    uint64_t v135 = v165 + *(int *)(v134 + 24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v169 + 32))(v135, v162, v172);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v169 + 56))(v135, 0, 1, v172);
    *(void *)uint64_t v165 = 0;
    *(unsigned char *)(v165 + 8) = 0;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v134 - 8) + 56))(v165, 0, 1, v134);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v142 = (uint64_t (*)(void))v65[1];
  return v142();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(void, unint64_t, void);
  int v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;

  if (*(void *)(v0 + 1024))
  {
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v1 = Logger.logObject.getter();
    uint64_t v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl(&dword_1B9C64000, v1, v2, "[DecisionEngine] found an existing flow that can handle top NL parse this turn.", v3, 2u);
      MEMORY[0x1BA9E48C0](v3, -1, -1);
    }
    uint64_t v4 = *(void *)(v0 + 1024);
    uint64_t v5 = *(void **)(v0 + 952);
    uint64_t v6 = *(void *)(v0 + 808);
    uint64_t v7 = *(void *)(v0 + 768);
    uint64_t v8 = *(void *)(v0 + 760);
    int v9 = *(void *)(v0 + 312);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = type metadata accessor for DecisionEngineResponse();
    uint64_t v11 = v9 + *(int *)(v10 + 24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v11, v6, v8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v8);
    *(void *)int v9 = v4;
    *(unsigned char *)(v9 + 8) = 1;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 0, 1, v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 808);
    uint64_t v15 = Input.alternatives.getter();
    uint64_t v16 = swift_task_alloc();
    *(void *)(v16 + 16) = v14;
    int v17 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay11SiriKitFlow5ParseOGG_AH5InputVs5NeverOTg506_sSi11fg5Flow5i4OAA5j32VIgynr_Si6offset_AC7elementtAEs5K11OIegnrzr_TRSiAjNIgynr_Tf1cn_nTf4ng_n(v15, (void (*)(void, char *))partial apply for closure #3 in DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:), v16);
    *(void *)(v0 + 1032) = v17;
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v18 = *(void *)(v17 + 16);
    *(void *)(v0 + 1040) = v18;
    if (v18)
    {
      uint64_t v19 = *(void *)(v0 + 768);
      uint64_t v20 = *(void (**)(void, unint64_t, void))(v19 + 16);
      v19 += 16;
      uint64_t v21 = *(_DWORD *)(v19 + 64);
      *(_DWORD *)(v0 + 1292) = v21;
      *(void *)(v0 + 1048) = *(void *)(v19 + 56);
      *(void *)(v0 + 1056) = v20;
      *(void *)(v0 + 1064) = 0;
      v20(*(void *)(v0 + 800), *(void *)(v0 + 1032) + ((v21 + 32) & ~(unint64_t)v21), *(void *)(v0 + 760));
      uint64_t v22 = (void *)swift_task_alloc();
      *(void *)(v0 + 1072) = v22;
      *uint64_t v22 = v0;
      v22[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
      uint64_t v23 = *(void *)(v0 + 800);
      uint64_t v24 = *(void *)(v0 + 344);
      uint64_t v25 = *(void *)(v0 + 328);
      return ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:)(v23, v25, v24);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v26 = *(void *)(v0 + 384);
      uint64_t v27 = *(void *)(v26 + 176);
      if (!v27)
      {
        uint64_t v28 = DecisionEngine.getRREntities()();
        type metadata accessor for SiriEnvironment();
        static SiriEnvironment.default.getter();
        SiriEnvironment.salientEntitiesProvider.getter();
        swift_release();
        swift_bridgeObjectRetain();
        dispatch thunk of SalientEntitiesDataProvider.salientEntities.setter();
        swift_release();
        *(void *)(v26 + 176) = v28;
        swift_bridgeObjectRelease();
        uint64_t v27 = *(void *)(v26 + 176);
        uint64_t v26 = *(void *)(v0 + 384);
      }
      *(void *)(v0 + 1088) = v27;
      if (v27) {
        uint64_t v29 = v27;
      }
      else {
        uint64_t v29 = MEMORY[0x1E4FBC860];
      }
      swift_bridgeObjectRetain();
      uint64_t v30 = (void *)swift_task_alloc();
      *(void *)(v0 + 1096) = v30;
      *uint64_t v30 = v0;
      v30[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
      uint64_t v31 = *(void *)(v0 + 320);
      return ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:)(v31, v29, v26 + 96);
    }
  }
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (*(void *)(v0 + 1080))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v1 = Logger.logObject.getter();
    uint64_t v2 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl(&dword_1B9C64000, v1, v2, "[DecisionEngine] found an existing flow that can handle alternative NL parse this turn.", v3, 2u);
      MEMORY[0x1BA9E48C0](v3, -1, -1);
    }
    uint64_t v26 = *(void *)(v0 + 1080);
    uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 992);
    uint64_t v5 = *(void **)(v0 + 952);
    uint64_t v27 = *(void *)(v0 + 808);
    uint64_t v6 = *(void *)(v0 + 800);
    uint64_t v7 = *(void *)(v0 + 768);
    uint64_t v8 = *(void *)(v0 + 760);
    int v9 = *(void *)(v0 + 312);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = type metadata accessor for DecisionEngineResponse();
    uint64_t v11 = v9 + *(int *)(v10 + 24);
    v4(v11, v6, v8);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v8);
    *(void *)int v9 = v26;
    *(unsigned char *)(v9 + 8) = 1;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 0, 1, v10);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v27, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 1040);
    uint64_t v15 = *(void *)(v0 + 1064) + 1;
    (*(void (**)(void, void))(*(void *)(v0 + 768) + 8))(*(void *)(v0 + 800), *(void *)(v0 + 760));
    if (v15 == v14)
    {
      swift_bridgeObjectRelease();
      uint64_t v16 = *(void *)(v0 + 384);
      int v17 = *(void *)(v16 + 176);
      if (!v17)
      {
        uint64_t v18 = DecisionEngine.getRREntities()();
        type metadata accessor for SiriEnvironment();
        static SiriEnvironment.default.getter();
        SiriEnvironment.salientEntitiesProvider.getter();
        swift_release();
        swift_bridgeObjectRetain();
        dispatch thunk of SalientEntitiesDataProvider.salientEntities.setter();
        swift_release();
        *(void *)(v16 + 176) = v18;
        swift_bridgeObjectRelease();
        int v17 = *(void *)(v16 + 176);
        uint64_t v16 = *(void *)(v0 + 384);
      }
      *(void *)(v0 + 1088) = v17;
      if (v17) {
        uint64_t v19 = v17;
      }
      else {
        uint64_t v19 = MEMORY[0x1E4FBC860];
      }
      swift_bridgeObjectRetain();
      uint64_t v20 = (void *)swift_task_alloc();
      *(void *)(v0 + 1096) = v20;
      *uint64_t v20 = v0;
      v20[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
      uint64_t v21 = *(void *)(v0 + 320);
      return ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:)(v21, v19, v16 + 96);
    }
    else
    {
      *(void *)(v0 + 1064) = v15;
      (*(void (**)(void, unint64_t, void))(v0 + 1056))(*(void *)(v0 + 800), *(void *)(v0 + 1032)+ ((*(unsigned __int8 *)(v0 + 1292) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1292))+ *(void *)(v0 + 1048) * v15, *(void *)(v0 + 760));
      uint64_t v22 = (void *)swift_task_alloc();
      *(void *)(v0 + 1072) = v22;
      *uint64_t v22 = v0;
      v22[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
      uint64_t v23 = *(void *)(v0 + 800);
      uint64_t v24 = *(void *)(v0 + 344);
      uint64_t v25 = *(void *)(v0 + 328);
      return ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:)(v23, v25, v24);
    }
  }
}

{
  uint64_t v0;
  Swift::OpaquePointer v1;
  void *v2;
  uint64_t v3;
  Swift::String v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint8_t *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t ObjectType;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(void, void);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t, uint64_t);
  id v78;
  id v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;

  uint64_t v102 = v0;
  v1._rawValue = *(void **)(v0 + 1104);
  uint64_t v2 = *(void **)(v0 + 968);
  uint64_t v3 = *(void *)(v0 + 960);
  type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  v4._uint64_t countAndFlagsBits = v3;
  v4._object = v2;
  ConversationSELFHelper.emitActionCandidatesGenerated(rcId:actionCandidates:)(v4, v1);
  swift_release();
  swift_bridgeObjectRetain();
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void *)(v0 + 1104);
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 134217984;
    *(void *)(v0 + 296) = *(void *)(v7 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v5, v6, "[DecisionEngine] Generated %ld action candidates", v8, 0xCu);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  CorrectionsService.getCorrectionsAction(input:conversationUserInput:)(*(void *)(v0 + 808), *(void *)(v0 + 320), *(void *)(v0 + 744));
  int v9 = Logger.logObject.getter();
  uint64_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = *(void *)(v0 + 744);
    uint64_t v12 = *(void *)(v0 + 736);
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v101 = swift_slowAlloc();
    uint64_t v14 = v101;
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_beginAccess();
    outlined init with copy of ReferenceResolutionClientProtocol?(v11, v12, &demangling cache variable for type metadata for Input?);
    uint64_t v15 = String.init<A>(describing:)();
    *(void *)(v0 + 288) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v9, v10, "[DecisionEngine] Corrections Input: %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v14, -1, -1);
    MEMORY[0x1BA9E48C0](v13, -1, -1);
  }

  int v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 976);
  uint64_t v18 = *(void *)(v0 + 760);
  uint64_t v19 = *(void *)(v0 + 744);
  uint64_t v20 = *(void *)(v0 + 728);
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v19, v20, &demangling cache variable for type metadata for Input?);
  if (v17(v20, 1, v18) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 728), &demangling cache variable for type metadata for Input?);
LABEL_12:
    uint64_t v39 = *(void *)(v0 + 1104);
    uint64_t v40 = *(void *)(v0 + 968);
    uint64_t v41 = *(void *)(v0 + 960);
    uint64_t v42 = *(void *)(v0 + 376);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 144))(v39, v41, v40, ObjectType, v42);
    swift_bridgeObjectRelease();
    if (*(void *)(v39 + 16))
    {
      uint64_t v44 = *(void *)(v0 + 384);
      DecisionEngine.ambiguityService.getter(v0 + 64);
      unint64_t v45 = *(void *)(v0 + 88);
      uint64_t v46 = *(void *)(v0 + 96);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 64), v45);
      *(void *)(v0 + 1208) = *(void *)(v44 + 32);
      swift_beginAccess();
      *(void *)(v0 + 1216) = *(void *)(v44 + 184);
      unint64_t v100 = *(void *)(v46 + 32) + **(int **)(v46 + 32);
      swift_retain();
      uint64_t v47 = (void *)swift_task_alloc();
      *(void *)(v0 + 1224) = v47;
      *uint64_t v47 = v0;
      v47[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
      uint64_t v49 = *(void *)(v0 + 352);
      unint64_t v48 = *(void *)(v0 + 360);
      uint64_t v106 = v45;
      uint64_t v107 = v46;
      uint64_t v104 = v49;
      uint64_t v105 = v48;
      __asm { BRAA            X9, X16 }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    os_log_type_t v50 = Logger.logObject.getter();
    uint64_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v52 = 0;
      _os_log_impl(&dword_1B9C64000, v50, v51, "[DecisionEngine] Skipping ambiguity handling as there are no actions from action generator", v52, 2u);
      MEMORY[0x1BA9E48C0](v52, -1, -1);
    }

    uint64_t v53 = (void *)swift_task_alloc();
    *(void *)(v0 + 1168) = v53;
    unsigned char *v53 = v0;
    v53[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
    uint64_t v54 = *(void *)(v0 + 808);
    uint64_t v55 = *(void *)(v0 + 736);
    uint64_t v56 = *(void *)(v0 + 320);
    return CorrectionsService.getCorrectionsAndFollowupAction(input:conversationUserInput:)(v55, v54, v56);
  }
  uint64_t v21 = *(void *)(v0 + 336);
  (*(void (**)(void, void, void))(v0 + 992))(*(void *)(v0 + 792), *(void *)(v0 + 728), *(void *)(v0 + 760));
  if (!v21)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 768) + 8))(*(void *)(v0 + 792), *(void *)(v0 + 760));
    goto LABEL_12;
  }
  uint64_t v97 = *(void *)(v0 + 960);
  uint64_t v99 = *(void *)(v0 + 968);
  uint64_t v22 = *(void *)(v0 + 696);
  char v93 = *(void *)(v0 + 688);
  uint64_t v23 = *(void **)(v0 + 680);
  uint64_t v24 = *(void *)(v0 + 672);
  uint64_t v25 = *(void *)(v0 + 664);
  uint64_t v83 = *(void *)(v0 + 656);
  int v84 = *(void *)(v0 + 928);
  uint64_t v85 = *(void *)(v0 + 608);
  uint64_t v86 = *(void *)(v0 + 568);
  uint64_t v89 = *(void *)(v0 + 704);
  uint64_t v91 = *(void *)(v0 + 376);
  uint64_t v87 = *(void *)(v0 + 560);
  uint64_t v95 = *(void *)(v0 + 320);
  swift_retain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  Input.parse.getter();
  Parse.asCamParse()(v23);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v83);
  UUID.init()();
  ActionCandidate.init(flowHandlerId:parse:affinityScore:loggingId:userData:)();
  uint64_t v26 = swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ActionCandidate>);
  uint64_t v27 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1BA04FD90;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v22 + 16))(v28 + v27, v89, v93);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 144))(v28, v97, v99, v26);
  swift_bridgeObjectRelease();
  uint64_t v29 = *(void **)(v95 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_userSpecificInfoForRecognizedUser);
  uint64_t v30 = *(void **)(v95
                 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_userSpecificInfoForUserMeetingSessionThreshold);
  uint64_t v31 = *(void **)(v95 + 48);
  uint64_t v92 = *(void *)(v84 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_responseVariantResult + 8);
  uint64_t v94 = *(void *)(v84 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_responseVariantResult);
  swift_bridgeObjectRetain();
  uint64_t v32 = v29;
  long long v98 = (uint64_t)v30;
  uint64_t v33 = v30;
  uint64_t v96 = (uint64_t)v31;
  uint64_t v34 = v31;
  uint64_t v35 = NLResponse.requestLanguageVariant.getter();
  uint64_t v88 = v36;
  uint64_t v90 = v35;
  outlined init with copy of ReferenceResolutionClientProtocol?(v84 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlRoutingDecision, v85, (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48))(v85, 1, v87) == 1)
  {
    char v37 = *(void *)(v0 + 616);
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 608), (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
    uint64_t v38 = type metadata accessor for NLRoutingDecisionMessage.GenAIFallbackSuppressReason();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
  }
  else
  {
    uint64_t v58 = *(void *)(v0 + 576);
    uint64_t v59 = *(void *)(v0 + 568);
    os_log_type_t v60 = *(void *)(v0 + 560);
    (*(void (**)(uint64_t, void, uint64_t))(v59 + 16))(v58, *(void *)(v0 + 608), v60);
    uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 88))(v58, v60);
    uint64_t v62 = *(void *)(v0 + 616);
    if (v61 == *MEMORY[0x1E4FA20D0])
    {
      uint64_t v63 = *(void *)(v0 + 600);
      uint64_t v64 = *(void *)(v0 + 592);
      id v65 = *(void *)(v0 + 584);
      uint64_t v66 = *(void *)(v0 + 576);
      uint64_t v67 = *(void *)(v0 + 568);
      (*(void (**)(uint64_t, void))(v67 + 96))(v66, *(void *)(v0 + 560));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 32))(v63, v66, v65);
      NLRoutingDecisionMessage.RoutingDecision.SiriXRoute.genAIFallbackSuppressReason.getter();
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v63, v65);
      (*(void (**)(void, void))(v67 + 8))(*(void *)(v0 + 608), *(void *)(v0 + 560));
    }
    else
    {
      uint64_t v68 = *(void (**)(void, void))(*(void *)(v0 + 568) + 8);
      v68(*(void *)(v0 + 576), *(void *)(v0 + 560));
      uint64_t v69 = type metadata accessor for NLRoutingDecisionMessage.GenAIFallbackSuppressReason();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v62, 1, 1, v69);
      v68(*(void *)(v0 + 608), *(void *)(v0 + 560));
    }
  }
  uint64_t v70 = *(void *)(v0 + 968);
  uint64_t v71 = *(void *)(v0 + 960);
  uint64_t v72 = *(void *)(v0 + 616);
  uint64_t v73 = *(void *)(v0 + 552);
  uint64_t v74 = *(void *)(v0 + 544);
  uint64_t v75 = *(void *)(v0 + 528);
  uint64_t v76 = *(void *)(v0 + 320);
  uint64_t v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 536) + 16);
  v77(v73, v76 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_asrLocation, v75);
  v77(v74, v76 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_nlLocation, v75);
  uint64_t v78 = objc_allocWithZone((Class)type metadata accessor for RemoteConversationSpeechData());
  uint64_t v79 = RemoteConversationSpeechData.init(rcId:asrOnDevice:userSpecificInfoForRecognizedUser:userSpecificInfoForUserMeetingSessionThreshold:speechPackage:utterance:responseLanguageVariant:requestLanguageVariant:genAIFallbackSuppressReason:asrLocation:nlLocation:)(v71, v70, 1, (uint64_t)v29, v98, v96, 0, 0, v94, v92, v90, v88, v72, v73, v74);
  *(void *)(v0 + 1112) = v79;
  uint64_t v80 = (void *)swift_task_alloc();
  *(void *)(v0 + 1120) = v80;
  *uint64_t v80 = v0;
  v80[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
  uint64_t v81 = *(void *)(v0 + 792);
  uint64_t v82 = *(void *)(v0 + 640);
  return RemoteConversationClient.accept(input:speechData:)(v82, v81, (uint64_t)v79);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1128) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void **)(v2 + 1112);
  uint64_t v4 = *(void *)(v2 + 912);

  if (v0) {
    uint64_t v5 = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
  }
  else {
    uint64_t v5 = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
  }
  return MEMORY[0x1F4188298](v5, v4, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  _s14SiriKitRuntime26RemoteConversationTurnDataVWOcTm_0(v0[80], v0[79], (uint64_t (*)(void))type metadata accessor for UserInputResult);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v16 = (void (*)(uint64_t, uint64_t, uint64_t))v0[124];
    uint64_t v1 = (void *)v0[119];
    uint64_t v2 = v0[96];
    uint64_t v3 = v0[95];
    int v17 = v0[93];
    uint64_t v18 = v0[101];
    uint64_t v13 = v0[88];
    uint64_t v14 = v0[99];
    uint64_t v4 = v0[87];
    uint64_t v5 = v0[86];
    uint64_t v6 = v0[80];
    uint64_t v15 = v0[42];
    uint64_t v7 = v0[39];
    swift_release();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of RemoteConversationTurnData(v6, (uint64_t (*)(void))type metadata accessor for UserInputResult);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v13, v5);
    uint64_t v8 = type metadata accessor for DecisionEngineResponse();
    int v9 = v7 + *(int *)(v8 + 24);
    v16(v9, v14, v3);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(v9, 0, 1, v3);
    *(void *)uint64_t v7 = v15;
    *(unsigned char *)(v7 + 8) = 0;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 0, 1, v8);
    outlined destroy of ReferenceResolutionClientProtocol?(v17, &demangling cache variable for type metadata for Input?);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v18, v3);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  else
  {
    uint64_t v12 = static MessageBusActor.shared;
    v0[142] = static MessageBusActor.shared;
    swift_retain();
    return MEMORY[0x1F4188298](DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:), v12, 0);
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = (void *)swift_task_alloc();
  v0[143] = v1;
  *uint64_t v1 = v0;
  v1[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
  uint64_t v2 = v0[99];
  uint64_t v3 = v0[43];
  return ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)(v2, v3, 0, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v1 = *(void *)(v0 + 1152);
  uint64_t v2 = *(void *)(v0 + 344) + *(int *)(v0 + 1288);
  if ((DecisionEngine.shouldGenerateCAMFallback(executionRequestId:userWantedToUndo:)(*(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v0 + 1296)) & 1) == 0|| v1)
  {
    uint64_t v7 = *(void *)(v0 + 1152);
    uint64_t v8 = *(void *)(v0 + 792);
    int v9 = *(void *)(v0 + 768);
    uint64_t v10 = *(void *)(v0 + 760);
    uint64_t v11 = *(void *)(v0 + 312);
    swift_release();
    uint64_t v12 = v11 + *(int *)(type metadata accessor for DecisionEngineResponse() + 24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v12, v8, v10);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v12, 0, 1, v10);
    *(void *)uint64_t v11 = v7;
    *(unsigned char *)(v11 + 8) = 0;
    uint64_t v13 = *(void *)(v0 + 912);
    return MEMORY[0x1F4188298](DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:), v13, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 1160) = v3;
    *uint64_t v3 = v0;
    v3[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
    uint64_t v4 = *(void *)(v0 + 344);
    uint64_t v5 = *(void *)(v0 + 312);
    return DecisionEngine.getCAMFallback(conversationHelperInput:info:)(v5, v4, v0 + 16);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 1136);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 912);
  return MEMORY[0x1F4188298](DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:), v1, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = (void *)v0[119];
  uint64_t v2 = v0[96];
  uint64_t v11 = v0[95];
  uint64_t v12 = v0[99];
  uint64_t v15 = v0[93];
  uint64_t v16 = v0[101];
  uint64_t v3 = v0[88];
  uint64_t v4 = v0[87];
  uint64_t v5 = v0[86];
  uint64_t v6 = v0[80];
  uint64_t v13 = v0[39];
  uint64_t v14 = v0[79];
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of RemoteConversationTurnData(v6, (uint64_t (*)(void))type metadata accessor for UserInputResult);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v7(v12, v11);
  uint64_t v8 = type metadata accessor for DecisionEngineResponse();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v13, 0, 1, v8);
  outlined destroy of RemoteConversationTurnData(v14, (uint64_t (*)(void))type metadata accessor for UserInputResult);
  outlined destroy of ReferenceResolutionClientProtocol?(v15, &demangling cache variable for type metadata for Input?);
  v7(v16, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 912);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:), v1, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 976);
  uint64_t v2 = *(void *)(v0 + 760);
  uint64_t v3 = *(void *)(v0 + 744);
  uint64_t v4 = *(void *)(v0 + 720);
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)(*(void *)(v0 + 736), v3, &demangling cache variable for type metadata for Input?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v3, v4, &demangling cache variable for type metadata for Input?);
  uint64_t v5 = v1(v4, 1, v2);
  uint64_t v6 = *(void *)(v0 + 760);
  uint64_t v7 = *(void *)(v0 + 720);
  if (v5 == 1)
  {
    (*(void (**)(void, void, uint64_t))(*(void *)(v0 + 768) + 16))(*(void *)(v0 + 784), *(void *)(v0 + 808), v6);
    outlined destroy of ReferenceResolutionClientProtocol?(v7, &demangling cache variable for type metadata for Input?);
  }
  else
  {
    (*(void (**)(void, void, uint64_t))(v0 + 992))(*(void *)(v0 + 784), *(void *)(v0 + 720), v6);
  }
  uint64_t v8 = static MessageBusActor.shared;
  *(void *)(v0 + 1176) = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:), v8, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = (void *)swift_task_alloc();
  v0[148] = v1;
  *uint64_t v1 = v0;
  v1[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
  uint64_t v2 = v0[98];
  uint64_t v3 = v0[43];
  return ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)(v2, v3, 0, 1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v1 = *(void *)(v0 + 1192);
  uint64_t v2 = *(void *)(v0 + 344) + *(int *)(v0 + 1288);
  if ((DecisionEngine.shouldGenerateCAMFallback(executionRequestId:userWantedToUndo:)(*(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v0 + 1296)) & 1) == 0|| v1)
  {
    uint64_t v7 = *(void *)(v0 + 1192);
    uint64_t v8 = *(void *)(v0 + 784);
    int v9 = *(void *)(v0 + 768);
    uint64_t v10 = *(void *)(v0 + 760);
    uint64_t v11 = *(void *)(v0 + 312);
    swift_release();
    uint64_t v12 = v11 + *(int *)(type metadata accessor for DecisionEngineResponse() + 24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v12, v8, v10);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v12, 0, 1, v10);
    *(void *)uint64_t v11 = v7;
    *(unsigned char *)(v11 + 8) = 0;
    uint64_t v13 = *(void *)(v0 + 912);
    return MEMORY[0x1F4188298](DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:), v13, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 1200) = v3;
    *uint64_t v3 = v0;
    v3[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
    uint64_t v4 = *(void *)(v0 + 344);
    uint64_t v5 = *(void *)(v0 + 312);
    return DecisionEngine.getCAMFallback(conversationHelperInput:info:)(v5, v4, v0 + 16);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 1176);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 912);
  return MEMORY[0x1F4188298](DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:), v1, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  uint64_t v1 = (void *)v0[119];
  uint64_t v2 = v0[101];
  uint64_t v3 = v0[98];
  uint64_t v4 = v0[96];
  uint64_t v5 = v0[95];
  uint64_t v6 = v0[93];
  uint64_t v7 = v0[39];
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v8(v3, v5);
  int v9 = type metadata accessor for DecisionEngineResponse();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 0, 1, v9);
  outlined destroy of ReferenceResolutionClientProtocol?(v6, &demangling cache variable for type metadata for Input?);
  v8(v2, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 912);
  if (v0)
  {

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v4 = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = v0[63];
  uint64_t v2 = v0[64];
  uint64_t v3 = v0[62];
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 8));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0[62], &demangling cache variable for type metadata for AmbiguityServiceResponse?);
    uint64_t v4 = Logger.logObject.getter();
    uint64_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_1B9C64000, v4, v5, "[DecisionEngine] AmbiguityService couldn't find best action. Falling back to default input", v6, 2u);
      MEMORY[0x1BA9E48C0](v6, -1, -1);
    }

    v0[156] = static MessageBusActor.shared;
    swift_retain();
    uint64_t v7 = (void *)swift_task_alloc();
    v0[157] = v7;
    void *v7 = v0;
    v7[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
    uint64_t v8 = v0[101];
    int v9 = v0[43];
    return ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)(v8, v9, 0, 1);
  }
  else
  {
    _s14SiriKitRuntime22DecisionEngineResponseVWObTm_0(v0[62], v0[65], type metadata accessor for AmbiguityServiceResponse);
    uint64_t v11 = (void *)swift_task_alloc();
    v0[154] = v11;
    char *v11 = v0;
    v11[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
    uint64_t v12 = v0[65];
    uint64_t v13 = v0[44];
    uint64_t v14 = v0[45];
    uint64_t v15 = v0[43];
    uint64_t v16 = v0[39];
    return DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:)(v16, v12, v15, v13, v14, (uint64_t)(v0 + 2));
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1240) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 912);
  if (v0) {
    uint64_t v4 = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
  }
  else {
    uint64_t v4 = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = (void *)v0[119];
  uint64_t v2 = v0[101];
  uint64_t v3 = v0[96];
  uint64_t v4 = v0[95];
  uint64_t v5 = v0[93];
  uint64_t v6 = v0[65];
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  outlined destroy of RemoteConversationTurnData(v6, type metadata accessor for AmbiguityServiceResponse);
  outlined destroy of ReferenceResolutionClientProtocol?(v5, &demangling cache variable for type metadata for Input?);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v1 = *(void *)(v0 + 1264);
  uint64_t v2 = *(void *)(v0 + 344) + *(int *)(v0 + 1288);
  if ((DecisionEngine.shouldGenerateCAMFallback(executionRequestId:userWantedToUndo:)(*(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v0 + 1296)) & 1) == 0|| v1)
  {
    uint64_t v7 = *(void *)(v0 + 1264);
    uint64_t v8 = *(void *)(v0 + 808);
    int v9 = *(void *)(v0 + 768);
    uint64_t v10 = *(void *)(v0 + 760);
    uint64_t v11 = *(void *)(v0 + 312);
    swift_release();
    uint64_t v12 = v11 + *(int *)(type metadata accessor for DecisionEngineResponse() + 24);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v12, v8, v10);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v12, 0, 1, v10);
    *(void *)uint64_t v11 = v7;
    *(unsigned char *)(v11 + 8) = 0;
    uint64_t v13 = *(void *)(v0 + 912);
    return MEMORY[0x1F4188298](DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:), v13, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 1272) = v3;
    *uint64_t v3 = v0;
    v3[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
    uint64_t v4 = *(void *)(v0 + 344);
    uint64_t v5 = *(void *)(v0 + 312);
    return DecisionEngine.getCAMFallback(conversationHelperInput:info:)(v5, v4, v0 + 16);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 1248);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 912);
  return MEMORY[0x1F4188298](DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:), v1, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = (void *)v0[119];
  uint64_t v2 = v0[101];
  uint64_t v3 = v0[96];
  uint64_t v4 = v0[95];
  uint64_t v5 = v0[93];
  uint64_t v6 = v0[39];
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for DecisionEngineResponse();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 0, 1, v7);
  outlined destroy of ReferenceResolutionClientProtocol?(v5, &demangling cache variable for type metadata for Input?);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 912);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:), v1, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (void *)v0[119];
  uint64_t v2 = v0[39];
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = type metadata accessor for DecisionEngineResponse();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 0, 1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v1 = (void *)v0[119];
  uint64_t v2 = v0[96];
  uint64_t v3 = v0[95];
  uint64_t v10 = v0[99];
  uint64_t v11 = v0[93];
  uint64_t v4 = v0[88];
  uint64_t v5 = v0[87];
  uint64_t v6 = v0[86];
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v7(v10, v3);
  outlined destroy of ReferenceResolutionClientProtocol?(v11, &demangling cache variable for type metadata for Input?);
  v7(v0[101], v0[95]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t v1 = v0[63];
  uint64_t v2 = v0[64];
  uint64_t v3 = v0[62];
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 8));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56))(v3, 1, 1, v1);
  outlined destroy of ReferenceResolutionClientProtocol?(v0[62], &demangling cache variable for type metadata for AmbiguityServiceResponse?);
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1B9C64000, v4, v5, "[DecisionEngine] AmbiguityService couldn't find best action. Falling back to default input", v6, 2u);
    MEMORY[0x1BA9E48C0](v6, -1, -1);
  }

  v0[156] = static MessageBusActor.shared;
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[157] = v7;
  void *v7 = v0;
  v7[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:);
  uint64_t v8 = v0[101];
  int v9 = v0[43];
  return ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)(v8, v9, 0, 1);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = (void *)v0[119];
  uint64_t v2 = v0[96];
  uint64_t v3 = v0[93];
  uint64_t v4 = v0[65];
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  outlined destroy of RemoteConversationTurnData(v4, type metadata accessor for AmbiguityServiceResponse);
  outlined destroy of ReferenceResolutionClientProtocol?(v3, &demangling cache variable for type metadata for Input?);
  (*(void (**)(void, void))(v2 + 8))(v0[101], v0[95]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 912);
  *(void *)(*(void *)v1 + 1024) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:), v2, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v2 = *(void *)(*(void *)v1 + 912);
  *(void *)(*(void *)v1 + 1080) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:), v2, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v2 = *(void *)(*(void *)v1 + 912);
  *(void *)(*(void *)v1 + 1104) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:), v2, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v2 = *(void *)(*(void *)v1 + 1136);
  *(void *)(*(void *)v1 + 1152) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:), v2, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v2 = *(void *)(*(void *)v1 + 1176);
  *(void *)(*(void *)v1 + 1192) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:), v2, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v2 = *(void *)(*(void *)v1 + 1248);
  *(void *)(*(void *)v1 + 1264) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:), v2, 0);
}

uint64_t DecisionEngine.CAMFallbackInfo.init(pommesSearchReason:pommesError:emptyNLInput:hasUndoRequest:conjunctionInfo:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(void *)a8 = result;
  *(void *)(a8 + 8) = a2;
  *(void *)(a8 + 16) = a3;
  *(void *)(a8 + 24) = a4;
  *(unsigned char *)(a8 + 32) = a5;
  *(unsigned char *)(a8 + 33) = a6;
  *(void *)(a8 + 40) = a7;
  return result;
}

uint64_t DecisionEngine.shouldGenerateCAMFallback(executionRequestId:userWantedToUndo:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v7 - 8);
  int v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
    int v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_1B9C64000, v17, v18, "[DecisionEngine] userWantedToUndo present, so we need to generate CAM fallback flow to produce undo fallback behavior.", v19, 2u);
      MEMORY[0x1BA9E48C0](v19, -1, -1);
    }

    return 1;
  }
  else
  {
    uint64_t v21 = *(void *)(v3 + 192);
    uint64_t v22 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v15, 1, 1, v22);
    uint64_t v23 = type metadata accessor for ServerFallbackReason();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v12, 1, 1, v23);
    if (specialized ServerFallbackDisablingUtils.shouldDisableServerFallback(isDomainDirected:topNlParse:serverFallbackReason:)(1, (uint64_t)v15, (uint64_t)v12))
    {
      uint64_t v24 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v9, 1, 1, v24);
      uint64_t v25 = (void *)swift_allocObject();
      v25[2] = 0;
      v25[3] = 0;
      v25[4] = v21;
      v25[5] = a1;
      v25[6] = a2;
      swift_retain();
      swift_bridgeObjectRetain();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in ServerFallbackDisablingUtils.shouldDisableServerFallbackWithTriggerLoggingAndABDecision(isDomainDirected:topNlParse:serverFallbackReason:executionRequestId:), (uint64_t)v25);
      swift_release();
      id v26 = objc_msgSend(self, sel_sharedPreferences);
      id v20 = objc_msgSend(v26, sel_shouldDisableServerFallbackDomain);
    }
    else
    {
      id v20 = 0;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for ServerFallbackReason?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      uint64_t v34 = v31;
      *(_DWORD *)uint64_t v30 = 67109378;
      LODWORD(v33) = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v30 + 8) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v28, v29, "[DecisionEngine] empty nlParses and shouldDisableServerfallbackWithABExperiment = %{BOOL}d for executionRequestId: %s", (uint8_t *)v30, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v31, -1, -1);
      MEMORY[0x1BA9E48C0](v30, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  return (uint64_t)v20;
}

uint64_t DecisionEngine.getCAMFallback(conversationHelperInput:info:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[49] = a3;
  v4[50] = v3;
  v4[47] = a1;
  v4[48] = a2;
  uint64_t v5 = type metadata accessor for Parse();
  v4[51] = v5;
  v4[52] = *(void *)(v5 - 8);
  v4[53] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Input();
  v4[54] = v6;
  v4[55] = *(void *)(v6 - 8);
  v4[56] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Parse.DirectInvocation();
  v4[57] = v7;
  v4[58] = *(void *)(v7 - 8);
  v4[59] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v8 = static MessageBusActor.shared;
  v4[60] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](DecisionEngine.getCAMFallback(conversationHelperInput:info:), v8, 0);
}

uint64_t DecisionEngine.getCAMFallback(conversationHelperInput:info:)()
{
  uint64_t v1 = *(void *)(v0 + 392);
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = MEMORY[0x1E4FBB1A0];
  if (v2)
  {
    *(void *)(v0 + 208) = *(void *)v1;
    *(void *)(v0 + 232) = v3;
    *(void *)(v0 + 216) = v2;
    outlined init with take of Any((_OWORD *)(v0 + 208), (_OWORD *)(v0 + 16));
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((_OWORD *)(v0 + 16), 0xD000000000000012, 0x80000001BA0674A0, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    uint64_t v1 = *(void *)(v0 + 392);
  }
  uint64_t v5 = *(void *)(v1 + 24);
  if (v5)
  {
    uint64_t v6 = *(void *)(v1 + 16);
    *(void *)(v0 + 328) = v3;
    *(void *)(v0 + 304) = v6;
    *(void *)(v0 + 312) = v5;
    outlined init with take of Any((_OWORD *)(v0 + 304), (_OWORD *)(v0 + 48));
    swift_bridgeObjectRetain();
    char v7 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((_OWORD *)(v0 + 48), 0x724573656D6D6F70, 0xEB00000000726F72, v7);
    swift_bridgeObjectRelease();
    uint64_t v1 = *(void *)(v0 + 392);
  }
  char v8 = *(unsigned char *)(v1 + 32);
  uint64_t v9 = MEMORY[0x1E4FBB390];
  *(void *)(v0 + 104) = MEMORY[0x1E4FBB390];
  *(unsigned char *)(v0 + 80) = v8;
  outlined init with take of Any((_OWORD *)(v0 + 80), (_OWORD *)(v0 + 112));
  char v10 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((_OWORD *)(v0 + 112), 0x494C4E7974706D65, 0xEC0000007475706ELL, v10);
  swift_bridgeObjectRelease();
  char v11 = *(unsigned char *)(v1 + 33);
  *(void *)(v0 + 168) = v9;
  *(unsigned char *)(v0 + 144) = v11;
  outlined init with take of Any((_OWORD *)(v0 + 144), (_OWORD *)(v0 + 176));
  char v12 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((_OWORD *)(v0 + 176), 0x526F646E55736168, 0xEE00747365757165, v12);
  swift_bridgeObjectRelease();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v1 + 40, v0 + 360, (uint64_t *)&demangling cache variable for type metadata for RequestConjunctionInfo?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v0 + 360, v0 + 368, (uint64_t *)&demangling cache variable for type metadata for RequestConjunctionInfo?);
  outlined retain of RequestConjunctionInfo?((id *)(v0 + 360));
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RequestConjunctionInfo?);
  lazy protocol witness table accessor for type RequestConjunctionInfo? and conformance <A> A?();
  uint64_t v13 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v15 = v14;
  outlined release of RequestConjunctionInfo?((id *)(v0 + 360));
  swift_release();
  *(void *)(v0 + 264) = MEMORY[0x1E4F277C0];
  *(void *)(v0 + 240) = v13;
  *(void *)(v0 + 248) = v15;
  outlined init with take of Any((_OWORD *)(v0 + 240), (_OWORD *)(v0 + 272));
  outlined copy of Data._Representation(v13, v15);
  char v16 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((_OWORD *)(v0 + 272), 0x74636E756A6E6F63, 0xEF6F666E496E6F69, v16);
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v13, v15);
  uint64_t v18 = *(void *)(v0 + 464);
  uint64_t v17 = *(void *)(v0 + 472);
  uint64_t v19 = *(void *)(v0 + 456);
  uint64_t v21 = *(void *)(v0 + 416);
  uint64_t v20 = *(void *)(v0 + 424);
  uint64_t v22 = *(void *)(v0 + 408);
  static CamDirectInvocationIdentifiers.fallback.getter();
  Parse.DirectInvocation.init(identifier:userData:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v20, v17, v19);
  (*(void (**)(uint64_t, void, uint64_t))(v21 + 104))(v20, *MEMORY[0x1E4FA1F38], v22);
  Input.init(parse:)();
  uint64_t v23 = (void *)swift_task_alloc();
  *(void *)(v0 + 488) = v23;
  *uint64_t v23 = v0;
  v23[1] = DecisionEngine.getCAMFallback(conversationHelperInput:info:);
  uint64_t v24 = *(void *)(v0 + 448);
  uint64_t v25 = *(void *)(v0 + 384);
  return ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)(v24, v25, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  uint64_t v1 = v0[62];
  uint64_t v2 = v0[59];
  uint64_t v3 = v0[57];
  uint64_t v4 = v0[58];
  uint64_t v6 = v0[55];
  uint64_t v5 = v0[56];
  char v7 = v0[54];
  char v8 = v0[47];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  uint64_t v9 = v8 + *(int *)(type metadata accessor for DecisionEngineResponse() + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v9, v5, v7);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v9, 0, 1, v7);
  *(void *)char v8 = v1;
  *(unsigned char *)(v8 + 8) = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t DecisionEngine.getCAMFallback(conversationHelperInput:info:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 480);
  *(void *)(*(void *)v1 + 496) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](DecisionEngine.getCAMFallback(conversationHelperInput:info:), v2, 0);
}

uint64_t closure #3 in DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = a3;
  uint64_t v20 = a2;
  uint64_t v21 = a4;
  uint64_t v6 = type metadata accessor for Parse();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Input();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v18(v13, a3, v10);
  uint64_t v14 = Input.alternatives.getter();
  unint64_t v15 = *(void (**)(char *, uint64_t))(v11 + 8);
  v15(v13, v10);
  uint64_t v23 = v14;
  specialized Array.remove(at:)(a1, (uint64_t)v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v20, v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Parse>);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1BA04FD90;
  v18(v13, v19, v10);
  Input.parse.getter();
  v15(v13, v10);
  uint64_t v22 = v16;
  specialized Array.append<A>(contentsOf:)(v23);
  return Input.init(parse:alternatives:)();
}

uint64_t DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[10] = a6;
  v7[11] = v6;
  v7[8] = a2;
  v7[9] = a3;
  v7[7] = a1;
  uint64_t v8 = type metadata accessor for PluginAction();
  v7[12] = v8;
  v7[13] = *(void *)(v8 - 8);
  v7[14] = swift_task_alloc();
  v7[15] = swift_task_alloc();
  v7[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AmbiguityOutput?);
  v7[17] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for AmbiguityOutput(0);
  v7[18] = v9;
  v7[19] = *(void *)(v9 - 8);
  v7[20] = swift_task_alloc();
  v7[21] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v7[22] = swift_task_alloc();
  v7[23] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Input();
  v7[24] = v10;
  v7[25] = *(void *)(v10 - 8);
  v7[26] = swift_task_alloc();
  v7[27] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v11 = static MessageBusActor.shared;
  v7[28] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:), v11, 0);
}

uint64_t DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:)()
{
  uint64_t v85 = v0;
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 184);
  outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 64), v3, &demangling cache variable for type metadata for Input?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) != 1)
  {
    uint64_t v21 = *(void *)(v0 + 216);
    uint64_t v22 = *(void *)(v0 + 192);
    uint64_t v23 = *(void *)(v0 + 200);
    uint64_t v24 = *(void *)(v0 + 184);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32);
    *(void *)(v0 + 232) = v25;
    *(void *)(v0 + 240) = (v23 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v25(v21, v24, v22);
    id v26 = (void *)swift_task_alloc();
    *(void *)(v0 + 248) = v26;
    *id v26 = v0;
    v26[1] = DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:);
    uint64_t v27 = *(void *)(v0 + 216);
LABEL_19:
    uint64_t v40 = *(void *)(v0 + 72);
    return ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)(v27, v40, 0, 0);
  }
  outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 184), &demangling cache variable for type metadata for Input?);
  uint64_t v4 = *(void *)(v0 + 144);
  uint64_t v5 = *(void *)(v0 + 152);
  uint64_t v6 = *(void *)(v0 + 136);
  uint64_t v7 = *(void *)(v0 + 64);
  uint64_t v8 = type metadata accessor for AmbiguityServiceResponse(0);
  outlined init with copy of ReferenceResolutionClientProtocol?(v7 + *(int *)(v8 + 20), v6, &demangling cache variable for type metadata for AmbiguityOutput?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 136), &demangling cache variable for type metadata for AmbiguityOutput?);
LABEL_4:
    uint64_t v9 = *(void *)(v0 + 80);
    uint64_t v10 = *(void *)(v0 + 72);
    uint64_t v11 = type metadata accessor for ConversationHelperInput(0);
    if (DecisionEngine.shouldGenerateCAMFallback(executionRequestId:userWantedToUndo:)(*(void *)(v10 + *(int *)(v11 + 20)), *(void *)(v10 + *(int *)(v11 + 20) + 8), *(unsigned char *)(v9 + 33)))
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v13, v14))
      {
        unint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v15 = 0;
        _os_log_impl(&dword_1B9C64000, v13, v14, "[DecisionEngine]: Generating CAM Fallback", v15, 2u);
        MEMORY[0x1BA9E48C0](v15, -1, -1);
      }

      uint64_t v16 = (void *)swift_task_alloc();
      *(void *)(v0 + 384) = v16;
      *uint64_t v16 = v0;
      v16[1] = DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:);
      uint64_t v17 = *(void *)(v0 + 80);
      uint64_t v18 = *(void *)(v0 + 72);
      uint64_t v19 = *(void *)(v0 + 56);
      return DecisionEngine.getCAMFallback(conversationHelperInput:info:)(v19, v18, v17);
    }
    uint64_t v41 = *(void *)(v0 + 56);
    swift_release();
    uint64_t v42 = type metadata accessor for DecisionEngineResponse();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v41, 1, 1, v42);
    goto LABEL_36;
  }
  uint64_t v28 = *(void *)(v0 + 160);
  uint64_t v29 = *(void *)(v0 + 168);
  _s14SiriKitRuntime22DecisionEngineResponseVWObTm_0(*(void *)(v0 + 136), v29, type metadata accessor for AmbiguityOutput);
  _s14SiriKitRuntime26RemoteConversationTurnDataVWOcTm_0(v29, v28, type metadata accessor for AmbiguityOutput);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v31 = *(void *)(v0 + 200);
    uint64_t v30 = *(void *)(v0 + 208);
    uint64_t v32 = *(void *)(v0 + 192);
    uint64_t v33 = *(void *)(v0 + 160);
    uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32);
    *(void *)(v0 + 352) = v34;
    *(void *)(v0 + 360) = (v31 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v34(v30, v33, v32);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.executor);
    char v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl(&dword_1B9C64000, v36, v37, "[AmbiguityService]: Received an ambiguity flow", v38, 2u);
      MEMORY[0x1BA9E48C0](v38, -1, -1);
    }

    uint64_t v39 = (void *)swift_task_alloc();
    *(void *)(v0 + 368) = v39;
    *uint64_t v39 = v0;
    v39[1] = DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:);
    uint64_t v27 = *(void *)(v0 + 208);
    goto LABEL_19;
  }
  uint64_t v43 = **(void **)(v0 + 160);
  *(void *)(v0 + 264) = v43;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v44 = type metadata accessor for Logger();
  *(void *)(v0 + 272) = __swift_project_value_buffer(v44, (uint64_t)static Logger.executor);
  unint64_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v47 = 0;
    _os_log_impl(&dword_1B9C64000, v45, v46, "[DecisionEngine]: Received actions to execute", v47, 2u);
    MEMORY[0x1BA9E48C0](v47, -1, -1);
  }

  uint64_t v48 = *(void *)(v43 + 16);
  *(void *)(v0 + 280) = v48;
  if (!v48)
  {
    swift_bridgeObjectRelease();
    outlined destroy of RemoteConversationTurnData(*(void *)(v0 + 168), type metadata accessor for AmbiguityOutput);
    goto LABEL_4;
  }
  uint64_t v49 = *(void *)(v0 + 96);
  uint64_t v50 = *(void *)(v0 + 104);
  uint64_t v51 = *(void (**)(uint64_t, unint64_t, uint64_t))(v50 + 16);
  v50 += 16;
  int v52 = *(_DWORD *)(v50 + 64);
  *(_DWORD *)(v0 + 392) = v52;
  *(void *)(v0 + 288) = *(void *)(v50 + 56);
  *(void *)(v0 + 296) = v51;
  uint64_t v53 = *(void *)(v0 + 128);
  unint64_t v54 = *(void *)(v0 + 264) + ((v52 + 32) & ~(unint64_t)v52);
  *(void *)(v0 + 304) = 0;
  *(void *)(v0 + 312) = v50 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v51(v53, v54, v49);
  if (PluginAction.flowHandlerId.getter() == 0xD000000000000013 && v55 == 0x80000001BA062320)
  {
    swift_bridgeObjectRelease();
LABEL_33:
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v59 = 0;
      _os_log_impl(&dword_1B9C64000, v57, v58, "[DecisionEngine]: Found SNLC handler. Returning corresponding response", v59, 2u);
      MEMORY[0x1BA9E48C0](v59, -1, -1);
    }
    uint64_t v60 = *(void *)(v0 + 192);
    uint64_t v61 = *(void *)(v0 + 200);
    uint64_t v63 = *(void *)(v0 + 168);
    uint64_t v62 = *(void *)(v0 + 176);
    uint64_t v64 = *(void *)(v0 + 128);
    uint64_t v65 = *(void *)(v0 + 96);
    uint64_t v66 = *(void *)(v0 + 104);
    uint64_t v67 = *(void *)(v0 + 56);

    PluginAction.input.getter();
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v64, v65);
    outlined destroy of RemoteConversationTurnData(v63, type metadata accessor for AmbiguityOutput);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v61 + 56))(v62, 0, 1, v60);
    *(void *)uint64_t v67 = 0;
    *(unsigned char *)(v67 + 8) = 0;
    uint64_t v68 = type metadata accessor for DecisionEngineResponse();
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v62, v67 + *(int *)(v68 + 24), &demangling cache variable for type metadata for Input?);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v67, 0, 1, v68);
LABEL_36:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v69 = *(uint64_t (**)(void))(v0 + 8);
    return v69();
  }
  char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v56) {
    goto LABEL_33;
  }
  (*(void (**)(void, void, void))(v0 + 296))(*(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 96));
  uint64_t v70 = Logger.logObject.getter();
  os_log_type_t v71 = static os_log_type_t.debug.getter();
  BOOL v72 = os_log_type_enabled(v70, v71);
  uint64_t v73 = *(void *)(v0 + 120);
  uint64_t v74 = *(void *)(v0 + 96);
  uint64_t v75 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 104) + 8);
  if (v72)
  {
    uint64_t v76 = swift_slowAlloc();
    uint64_t v77 = swift_slowAlloc();
    uint64_t v84 = v77;
    *(_DWORD *)uint64_t v76 = 136315138;
    uint64_t v78 = PluginAction.flowHandlerId.getter();
    *(void *)(v76 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, &v84);
    swift_bridgeObjectRelease();
    uint64_t v80 = *v75;
    (*v75)(v73, v74);
    _os_log_impl(&dword_1B9C64000, v70, v71, "[DecisionEngine]: Trying to load new conversation for %s", (uint8_t *)v76, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v77, -1, -1);
    MEMORY[0x1BA9E48C0](v76, -1, -1);
  }
  else
  {
    uint64_t v80 = *v75;
    (*v75)(*(void *)(v0 + 120), *(void *)(v0 + 96));
  }

  *(void *)(v0 + 320) = v80;
  uint64_t v81 = (void *)swift_task_alloc();
  *(void *)(v0 + 328) = v81;
  void *v81 = v0;
  v81[1] = DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:);
  uint64_t v82 = *(void *)(v0 + 128);
  uint64_t v83 = *(void *)(v0 + 72);
  return ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:)(v82, v83);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, unint64_t, uint64_t);
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  void (**v74)(uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  uint64_t v84 = v0;
  uint64_t v1 = *(void *)(v0 + 256);
  if (v1)
  {
    uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 232);
    uint64_t v3 = *(void *)(v0 + 216);
    uint64_t v4 = *(void *)(v0 + 192);
    uint64_t v5 = *(void *)(v0 + 200);
    uint64_t v6 = *(void *)(v0 + 56);
    swift_release();
    uint64_t v7 = type metadata accessor for DecisionEngineResponse();
    uint64_t v8 = v6 + *(int *)(v7 + 24);
    v2(v8, v3, v4);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
    *(void *)uint64_t v6 = v1;
    *(unsigned char *)(v6 + 8) = 0;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 0, 1, v7);
LABEL_3:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  (*(void (**)(void, void))(*(void *)(v0 + 200) + 8))(*(void *)(v0 + 216), *(void *)(v0 + 192));
  uint64_t v11 = *(void *)(v0 + 144);
  uint64_t v12 = *(void *)(v0 + 152);
  uint64_t v13 = *(void *)(v0 + 136);
  os_log_type_t v14 = *(void *)(v0 + 64);
  unint64_t v15 = type metadata accessor for AmbiguityServiceResponse(0);
  outlined init with copy of ReferenceResolutionClientProtocol?(v14 + *(int *)(v15 + 20), v13, &demangling cache variable for type metadata for AmbiguityOutput?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v13, 1, v11) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 136), &demangling cache variable for type metadata for AmbiguityOutput?);
  }
  else
  {
    uint64_t v27 = *(void *)(v0 + 160);
    uint64_t v28 = *(void *)(v0 + 168);
    _s14SiriKitRuntime22DecisionEngineResponseVWObTm_0(*(void *)(v0 + 136), v28, type metadata accessor for AmbiguityOutput);
    _s14SiriKitRuntime26RemoteConversationTurnDataVWOcTm_0(v28, v27, type metadata accessor for AmbiguityOutput);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v30 = *(void *)(v0 + 200);
      uint64_t v29 = *(void *)(v0 + 208);
      uint64_t v31 = *(void *)(v0 + 192);
      uint64_t v32 = *(void *)(v0 + 160);
      uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32);
      *(void *)(v0 + 352) = v33;
      *(void *)(v0 + 360) = (v30 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
      v33(v29, v32, v31);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      __swift_project_value_buffer(v34, (uint64_t)static Logger.executor);
      uint64_t v35 = Logger.logObject.getter();
      char v36 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v35, v36))
      {
        os_log_type_t v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v37 = 0;
        _os_log_impl(&dword_1B9C64000, v35, v36, "[AmbiguityService]: Received an ambiguity flow", v37, 2u);
        MEMORY[0x1BA9E48C0](v37, -1, -1);
      }

      uint64_t v38 = (void *)swift_task_alloc();
      *(void *)(v0 + 368) = v38;
      uint8_t *v38 = v0;
      v38[1] = DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:);
      uint64_t v39 = *(void *)(v0 + 208);
      uint64_t v40 = *(void *)(v0 + 72);
      return ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)(v39, v40, 0, 0);
    }
    uint64_t v43 = **(void **)(v0 + 160);
    *(void *)(v0 + 264) = v43;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    *(void *)(v0 + 272) = __swift_project_value_buffer(v44, (uint64_t)static Logger.executor);
    unint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v47 = 0;
      _os_log_impl(&dword_1B9C64000, v45, v46, "[DecisionEngine]: Received actions to execute", v47, 2u);
      MEMORY[0x1BA9E48C0](v47, -1, -1);
    }

    uint64_t v48 = *(void *)(v43 + 16);
    *(void *)(v0 + 280) = v48;
    if (v48)
    {
      uint64_t v49 = *(void *)(v0 + 96);
      uint64_t v50 = *(void *)(v0 + 104);
      uint64_t v51 = *(void (**)(uint64_t, unint64_t, uint64_t))(v50 + 16);
      v50 += 16;
      int v52 = *(_DWORD *)(v50 + 64);
      *(_DWORD *)(v0 + 392) = v52;
      *(void *)(v0 + 288) = *(void *)(v50 + 56);
      *(void *)(v0 + 296) = v51;
      uint64_t v53 = *(void *)(v0 + 128);
      unint64_t v54 = *(void *)(v0 + 264) + ((v52 + 32) & ~(unint64_t)v52);
      *(void *)(v0 + 304) = 0;
      *(void *)(v0 + 312) = v50 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v51(v53, v54, v49);
      if (PluginAction.flowHandlerId.getter() == 0xD000000000000013 && v55 == 0x80000001BA062320)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v56 & 1) == 0)
        {
          (*(void (**)(void, void, void))(v0 + 296))(*(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 96));
          uint64_t v69 = Logger.logObject.getter();
          uint64_t v70 = static os_log_type_t.debug.getter();
          os_log_type_t v71 = os_log_type_enabled(v69, v70);
          BOOL v72 = *(void *)(v0 + 120);
          uint64_t v73 = *(void *)(v0 + 96);
          uint64_t v74 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 104) + 8);
          if (v71)
          {
            uint64_t v75 = swift_slowAlloc();
            uint64_t v76 = swift_slowAlloc();
            uint64_t v83 = v76;
            *(_DWORD *)uint64_t v75 = 136315138;
            uint64_t v77 = PluginAction.flowHandlerId.getter();
            *(void *)(v75 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, &v83);
            swift_bridgeObjectRelease();
            unint64_t v79 = *v74;
            (*v74)(v72, v73);
            _os_log_impl(&dword_1B9C64000, v69, v70, "[DecisionEngine]: Trying to load new conversation for %s", (uint8_t *)v75, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1BA9E48C0](v76, -1, -1);
            MEMORY[0x1BA9E48C0](v75, -1, -1);
          }
          else
          {
            unint64_t v79 = *v74;
            (*v74)(*(void *)(v0 + 120), *(void *)(v0 + 96));
          }

          *(void *)(v0 + 320) = v79;
          uint64_t v80 = (void *)swift_task_alloc();
          *(void *)(v0 + 328) = v80;
          *uint64_t v80 = v0;
          v80[1] = DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:);
          uint64_t v81 = *(void *)(v0 + 128);
          uint64_t v82 = *(void *)(v0 + 72);
          return ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:)(v81, v82);
        }
      }
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v59 = 0;
        _os_log_impl(&dword_1B9C64000, v57, v58, "[DecisionEngine]: Found SNLC handler. Returning corresponding response", v59, 2u);
        MEMORY[0x1BA9E48C0](v59, -1, -1);
      }
      uint64_t v60 = *(void *)(v0 + 192);
      uint64_t v61 = *(void *)(v0 + 200);
      uint64_t v63 = *(void *)(v0 + 168);
      uint64_t v62 = *(void *)(v0 + 176);
      uint64_t v64 = *(void *)(v0 + 128);
      uint64_t v65 = *(void *)(v0 + 96);
      uint64_t v66 = *(void *)(v0 + 104);
      uint64_t v67 = *(void *)(v0 + 56);

      PluginAction.input.getter();
      (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v64, v65);
      outlined destroy of RemoteConversationTurnData(v63, type metadata accessor for AmbiguityOutput);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v61 + 56))(v62, 0, 1, v60);
      *(void *)uint64_t v67 = 0;
      *(unsigned char *)(v67 + 8) = 0;
      uint64_t v68 = type metadata accessor for DecisionEngineResponse();
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v62, v67 + *(int *)(v68 + 24), &demangling cache variable for type metadata for Input?);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v67, 0, 1, v68);
      goto LABEL_3;
    }
    swift_bridgeObjectRelease();
    outlined destroy of RemoteConversationTurnData(*(void *)(v0 + 168), type metadata accessor for AmbiguityOutput);
  }
  uint64_t v16 = *(void *)(v0 + 80);
  uint64_t v17 = *(void *)(v0 + 72);
  uint64_t v18 = type metadata accessor for ConversationHelperInput(0);
  if ((DecisionEngine.shouldGenerateCAMFallback(executionRequestId:userWantedToUndo:)(*(void *)(v17 + *(int *)(v18 + 20)), *(void *)(v17 + *(int *)(v18 + 20) + 8), *(unsigned char *)(v16 + 33)) & 1) == 0)
  {
    uint64_t v41 = *(void *)(v0 + 56);
    swift_release();
    uint64_t v42 = type metadata accessor for DecisionEngineResponse();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v41, 1, 1, v42);
    goto LABEL_3;
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.executor);
  uint64_t v20 = Logger.logObject.getter();
  uint64_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl(&dword_1B9C64000, v20, v21, "[DecisionEngine]: Generating CAM Fallback", v22, 2u);
    MEMORY[0x1BA9E48C0](v22, -1, -1);
  }

  uint64_t v23 = (void *)swift_task_alloc();
  *(void *)(v0 + 384) = v23;
  *uint64_t v23 = v0;
  v23[1] = DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:);
  uint64_t v24 = *(void *)(v0 + 80);
  uint64_t v25 = *(void *)(v0 + 72);
  id v26 = *(void *)(v0 + 56);
  return DecisionEngine.getCAMFallback(conversationHelperInput:info:)(v26, v25, v24);
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(void);
  void (*v37)(uint64_t, unint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  void (**v63)(uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  void *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  uint64_t v75 = v0;
  if (*(void *)(v0 + 344))
  {
    uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 296);
    uint64_t v2 = *(void *)(v0 + 128);
    uint64_t v3 = *(void *)(v0 + 112);
    uint64_t v4 = *(void *)(v0 + 96);
    swift_bridgeObjectRelease();
    swift_release();
    v1(v3, v2, v4);
    uint64_t v5 = Logger.logObject.getter();
    uint64_t v6 = static os_log_type_t.debug.getter();
    uint64_t v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = *(void *)(v0 + 112);
    uint64_t v9 = *(void *)(v0 + 96);
    if (v7)
    {
      BOOL v72 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v74 = v11;
      *(_DWORD *)uint64_t v10 = 136315138;
      uint64_t v12 = PluginAction.flowHandlerId.getter();
      *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v72(v8, v9);
      _os_log_impl(&dword_1B9C64000, v5, v6, "[DecisionEngine]: Found new conversation for %s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v11, -1, -1);
      MEMORY[0x1BA9E48C0](v10, -1, -1);
    }
    else
    {
      (*(void (**)(void, void))(v0 + 320))(*(void *)(v0 + 112), *(void *)(v0 + 96));
    }

    uint64_t v73 = *(void *)(v0 + 344);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
    uint64_t v28 = *(void *)(v0 + 192);
    uint64_t v29 = *(void *)(v0 + 200);
    uint64_t v31 = *(void *)(v0 + 168);
    uint64_t v30 = *(void *)(v0 + 176);
    uint64_t v32 = *(void *)(v0 + 128);
    uint64_t v33 = *(void *)(v0 + 96);
    uint64_t v34 = *(void *)(v0 + 56);
    PluginAction.input.getter();
    v27(v32, v33);
    outlined destroy of RemoteConversationTurnData(v31, type metadata accessor for AmbiguityOutput);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56))(v30, 0, 1, v28);
    *(void *)uint64_t v34 = v73;
    *(unsigned char *)(v34 + 8) = 0;
    uint64_t v35 = type metadata accessor for DecisionEngineResponse();
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v30, v34 + *(int *)(v35 + 24), &demangling cache variable for type metadata for Input?);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v34, 0, 1, v35);
    goto LABEL_15;
  }
  (*(void (**)(void, void))(v0 + 320))(*(void *)(v0 + 128), *(void *)(v0 + 96));
  os_log_type_t v14 = *(void *)(v0 + 304) + 1;
  if (v14 != *(void *)(v0 + 280))
  {
    os_log_type_t v37 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 296);
    uint64_t v38 = *(void *)(v0 + 128);
    uint64_t v39 = *(void *)(v0 + 96);
    uint64_t v40 = *(void *)(v0 + 264)
        + ((*(unsigned __int8 *)(v0 + 392) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 392))
        + *(void *)(v0 + 288) * v14;
    uint64_t v41 = (*(void *)(v0 + 104) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    *(void *)(v0 + 304) = v14;
    *(void *)(v0 + 312) = v41;
    v37(v38, v40, v39);
    if (PluginAction.flowHandlerId.getter() == 0xD000000000000013 && v42 == 0x80000001BA062320)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v45 & 1) == 0)
      {
        (*(void (**)(void, void, void))(v0 + 296))(*(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 96));
        os_log_type_t v58 = Logger.logObject.getter();
        uint64_t v59 = static os_log_type_t.debug.getter();
        uint64_t v60 = os_log_type_enabled(v58, v59);
        uint64_t v61 = *(void *)(v0 + 120);
        uint64_t v62 = *(void *)(v0 + 96);
        uint64_t v63 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 104) + 8);
        if (v60)
        {
          uint64_t v64 = swift_slowAlloc();
          uint64_t v65 = swift_slowAlloc();
          uint64_t v74 = v65;
          *(_DWORD *)uint64_t v64 = 136315138;
          uint64_t v66 = PluginAction.flowHandlerId.getter();
          *(void *)(v64 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, &v74);
          swift_bridgeObjectRelease();
          uint64_t v68 = *v63;
          (*v63)(v61, v62);
          _os_log_impl(&dword_1B9C64000, v58, v59, "[DecisionEngine]: Trying to load new conversation for %s", (uint8_t *)v64, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v65, -1, -1);
          MEMORY[0x1BA9E48C0](v64, -1, -1);
        }
        else
        {
          uint64_t v68 = *v63;
          (*v63)(*(void *)(v0 + 120), *(void *)(v0 + 96));
        }

        *(void *)(v0 + 320) = v68;
        uint64_t v69 = (void *)swift_task_alloc();
        *(void *)(v0 + 328) = v69;
        *uint64_t v69 = v0;
        v69[1] = DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:);
        uint64_t v70 = *(void *)(v0 + 128);
        os_log_type_t v71 = *(void *)(v0 + 72);
        return ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:)(v70, v71);
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    os_log_type_t v46 = Logger.logObject.getter();
    uint64_t v47 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v48 = 0;
      _os_log_impl(&dword_1B9C64000, v46, v47, "[DecisionEngine]: Found SNLC handler. Returning corresponding response", v48, 2u);
      MEMORY[0x1BA9E48C0](v48, -1, -1);
    }
    uint64_t v49 = *(void *)(v0 + 192);
    uint64_t v50 = *(void *)(v0 + 200);
    int v52 = *(void *)(v0 + 168);
    uint64_t v51 = *(void *)(v0 + 176);
    uint64_t v53 = *(void *)(v0 + 128);
    unint64_t v54 = *(void *)(v0 + 96);
    uint64_t v55 = *(void *)(v0 + 104);
    char v56 = *(void *)(v0 + 56);

    PluginAction.input.getter();
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v53, v54);
    outlined destroy of RemoteConversationTurnData(v52, type metadata accessor for AmbiguityOutput);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v50 + 56))(v51, 0, 1, v49);
    *(void *)char v56 = 0;
    *(unsigned char *)(v56 + 8) = 0;
    uint64_t v57 = type metadata accessor for DecisionEngineResponse();
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v51, v56 + *(int *)(v57 + 24), &demangling cache variable for type metadata for Input?);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v56, 0, 1, v57);
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
  outlined destroy of RemoteConversationTurnData(*(void *)(v0 + 168), type metadata accessor for AmbiguityOutput);
  unint64_t v15 = *(void *)(v0 + 80);
  uint64_t v16 = *(void *)(v0 + 72);
  uint64_t v17 = type metadata accessor for ConversationHelperInput(0);
  if ((DecisionEngine.shouldGenerateCAMFallback(executionRequestId:userWantedToUndo:)(*(void *)(v16 + *(int *)(v17 + 20)), *(void *)(v16 + *(int *)(v17 + 20) + 8), *(unsigned char *)(v15 + 33)) & 1) == 0)
  {
    uint64_t v43 = *(void *)(v0 + 56);
    swift_release();
    uint64_t v44 = type metadata accessor for DecisionEngineResponse();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v43, 1, 1, v44);
LABEL_15:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v36 = *(uint64_t (**)(void))(v0 + 8);
    return v36();
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.executor);
  uint64_t v19 = Logger.logObject.getter();
  uint64_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl(&dword_1B9C64000, v19, v20, "[DecisionEngine]: Generating CAM Fallback", v21, 2u);
    MEMORY[0x1BA9E48C0](v21, -1, -1);
  }

  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 384) = v22;
  *uint64_t v22 = v0;
  v22[1] = DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:);
  uint64_t v23 = *(void *)(v0 + 80);
  uint64_t v24 = *(void *)(v0 + 72);
  uint64_t v25 = *(void *)(v0 + 56);
  return DecisionEngine.getCAMFallback(conversationHelperInput:info:)(v25, v24, v23);
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  uint64_t v1 = v0[47];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[44];
  uint64_t v4 = v0[25];
  uint64_t v3 = v0[26];
  uint64_t v5 = v0[24];
  uint64_t v6 = v0[21];
  uint64_t v7 = v0[7];
  swift_release();
  outlined destroy of RemoteConversationTurnData(v6, type metadata accessor for AmbiguityOutput);
  uint64_t v8 = type metadata accessor for DecisionEngineResponse();
  uint64_t v9 = v7 + *(int *)(v8 + 24);
  v2(v9, v3, v5);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v9, 0, 1, v5);
  *(void *)uint64_t v7 = v1;
  *(unsigned char *)(v7 + 8) = 0;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 0, 1, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 224);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *(void *)(v0 + 56);
  swift_release();
  uint64_t v2 = type metadata accessor for DecisionEngineResponse();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v31)(uint64_t, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(void);
  NSObject *v53;
  os_log_type_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  void (**v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  void *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  uint64_t v69 = v0;
  uint64_t v1 = *(void **)(v0 + 336);
  uint64_t v2 = v1;
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 336);
    uint64_t v67 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
    uint64_t v7 = *(void *)(v0 + 128);
    uint64_t v8 = *(void *)(v0 + 96);
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v68 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    *(void *)(v0 + 40) = v6;
    uint64_t v11 = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(describing:)();
    *(void *)(v9 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v68);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v4, v5, "[AmbiguityService]: Error when loading a new conversation from a plugin action: %s. Will try the next pluginAction", (uint8_t *)v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v10, -1, -1);
    MEMORY[0x1BA9E48C0](v9, -1, -1);

    v67(v7, v8);
  }
  else
  {
    os_log_type_t v14 = *(void **)(v0 + 336);
    unint64_t v15 = *(void (**)(uint64_t, uint64_t))(v0 + 320);
    uint64_t v16 = *(void *)(v0 + 128);
    uint64_t v17 = *(void *)(v0 + 96);

    v15(v16, v17);
  }
  uint64_t v18 = *(void *)(v0 + 304) + 1;
  if (v18 == *(void *)(v0 + 280))
  {
    swift_bridgeObjectRelease();
    outlined destroy of RemoteConversationTurnData(*(void *)(v0 + 168), type metadata accessor for AmbiguityOutput);
    uint64_t v19 = *(void *)(v0 + 80);
    uint64_t v20 = *(void *)(v0 + 72);
    uint64_t v21 = type metadata accessor for ConversationHelperInput(0);
    if (DecisionEngine.shouldGenerateCAMFallback(executionRequestId:userWantedToUndo:)(*(void *)(v20 + *(int *)(v21 + 20)), *(void *)(v20 + *(int *)(v21 + 20) + 8), *(unsigned char *)(v19 + 33)))
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      __swift_project_value_buffer(v22, (uint64_t)static Logger.executor);
      uint64_t v23 = Logger.logObject.getter();
      uint64_t v24 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl(&dword_1B9C64000, v23, v24, "[DecisionEngine]: Generating CAM Fallback", v25, 2u);
        MEMORY[0x1BA9E48C0](v25, -1, -1);
      }

      id v26 = (void *)swift_task_alloc();
      *(void *)(v0 + 384) = v26;
      *id v26 = v0;
      v26[1] = DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:);
      uint64_t v27 = *(void *)(v0 + 80);
      uint64_t v28 = *(void *)(v0 + 72);
      uint64_t v29 = *(void *)(v0 + 56);
      return DecisionEngine.getCAMFallback(conversationHelperInput:info:)(v29, v28, v27);
    }
    os_log_type_t v37 = *(void *)(v0 + 56);
    swift_release();
    uint64_t v38 = type metadata accessor for DecisionEngineResponse();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
    goto LABEL_21;
  }
  uint64_t v31 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 296);
  uint64_t v32 = *(void *)(v0 + 128);
  uint64_t v33 = *(void *)(v0 + 96);
  uint64_t v34 = *(void *)(v0 + 264)
      + ((*(unsigned __int8 *)(v0 + 392) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 392))
      + *(void *)(v0 + 288) * v18;
  uint64_t v35 = (*(void *)(v0 + 104) + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  *(void *)(v0 + 304) = v18;
  *(void *)(v0 + 312) = v35;
  v31(v32, v34, v33);
  if (PluginAction.flowHandlerId.getter() == 0xD000000000000013 && v36 == 0x80000001BA062320)
  {
    swift_bridgeObjectRelease();
LABEL_18:
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v40 = Logger.logObject.getter();
    uint64_t v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl(&dword_1B9C64000, v40, v41, "[DecisionEngine]: Found SNLC handler. Returning corresponding response", v42, 2u);
      MEMORY[0x1BA9E48C0](v42, -1, -1);
    }
    uint64_t v43 = *(void *)(v0 + 192);
    uint64_t v44 = *(void *)(v0 + 200);
    os_log_type_t v46 = *(void *)(v0 + 168);
    unint64_t v45 = *(void *)(v0 + 176);
    uint64_t v47 = *(void *)(v0 + 128);
    uint64_t v48 = *(void *)(v0 + 96);
    uint64_t v49 = *(void *)(v0 + 104);
    uint64_t v50 = *(void *)(v0 + 56);

    PluginAction.input.getter();
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v47, v48);
    outlined destroy of RemoteConversationTurnData(v46, type metadata accessor for AmbiguityOutput);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v45, 0, 1, v43);
    *(void *)uint64_t v50 = 0;
    *(unsigned char *)(v50 + 8) = 0;
    uint64_t v51 = type metadata accessor for DecisionEngineResponse();
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v45, v50 + *(int *)(v51 + 24), &demangling cache variable for type metadata for Input?);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v50, 0, 1, v51);
LABEL_21:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int v52 = *(uint64_t (**)(void))(v0 + 8);
    return v52();
  }
  uint64_t v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v39) {
    goto LABEL_18;
  }
  (*(void (**)(void, void, void))(v0 + 296))(*(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 96));
  uint64_t v53 = Logger.logObject.getter();
  unint64_t v54 = static os_log_type_t.debug.getter();
  uint64_t v55 = os_log_type_enabled(v53, v54);
  char v56 = *(void *)(v0 + 120);
  uint64_t v57 = *(void *)(v0 + 96);
  os_log_type_t v58 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 104) + 8);
  if (v55)
  {
    uint64_t v59 = swift_slowAlloc();
    uint64_t v60 = swift_slowAlloc();
    uint64_t v68 = v60;
    *(_DWORD *)uint64_t v59 = 136315138;
    uint64_t v61 = PluginAction.flowHandlerId.getter();
    *(void *)(v59 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, &v68);
    swift_bridgeObjectRelease();
    uint64_t v63 = *v58;
    (*v58)(v56, v57);
    _os_log_impl(&dword_1B9C64000, v53, v54, "[DecisionEngine]: Trying to load new conversation for %s", (uint8_t *)v59, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v60, -1, -1);
    MEMORY[0x1BA9E48C0](v59, -1, -1);
  }
  else
  {
    uint64_t v63 = *v58;
    (*v58)(*(void *)(v0 + 120), *(void *)(v0 + 96));
  }

  *(void *)(v0 + 320) = v63;
  uint64_t v64 = (void *)swift_task_alloc();
  *(void *)(v0 + 328) = v64;
  *uint64_t v64 = v0;
  v64[1] = DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:);
  uint64_t v65 = *(void *)(v0 + 128);
  uint64_t v66 = *(void *)(v0 + 72);
  return ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:)(v65, v66);
}

uint64_t DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 224);
  *(void *)(*(void *)v1 + 256) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:), v2, 0);
}

{
  uint64_t v1;
  void *v2;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v8;

  uint64_t v4 = (void *)*v2;
  v4[42] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[28];
  if (v1)
  {
    uint64_t v6 = DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:);
  }
  else
  {
    v4[43] = a1;
    uint64_t v6 = DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:);
  }
  return MEMORY[0x1F4188298](v6, v5, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v2 = *(void *)(*(void *)v1 + 224);
  *(void *)(*(void *)v1 + 376) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](DecisionEngine.selectConversationFrom(ambiguityServiceResponse:conversationHelperInput:inputOrigin:camFallbackInfo:), v2, 0);
}

uint64_t DecisionEngine.CAMFallbackInfo.pommesSearchReason.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DecisionEngine.CAMFallbackInfo.pommesSearchReason.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*DecisionEngine.CAMFallbackInfo.pommesSearchReason.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t DecisionEngine.CAMFallbackInfo.pommesError.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DecisionEngine.CAMFallbackInfo.pommesError.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*DecisionEngine.CAMFallbackInfo.pommesError.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t DecisionEngine.CAMFallbackInfo.emptyNLInput.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t DecisionEngine.CAMFallbackInfo.emptyNLInput.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 32) = result;
  return result;
}

uint64_t (*DecisionEngine.CAMFallbackInfo.emptyNLInput.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t DecisionEngine.CAMFallbackInfo.hasUndoRequest.getter()
{
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t DecisionEngine.CAMFallbackInfo.hasUndoRequest.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 33) = result;
  return result;
}

uint64_t (*DecisionEngine.CAMFallbackInfo.hasUndoRequest.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

void *DecisionEngine.CAMFallbackInfo.conjunctionInfo.getter()
{
  uint64_t v1 = *(void **)(v0 + 40);
  id v2 = v1;
  return v1;
}

void DecisionEngine.CAMFallbackInfo.conjunctionInfo.setter(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
}

uint64_t (*DecisionEngine.CAMFallbackInfo.conjunctionInfo.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

double DecisionEngine.CAMFallbackInfo.init()@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 40) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)(a1 + 32) = 0;
  return result;
}

uint64_t default argument 2 of DecisionEngine.CAMFallbackInfo.init(pommesSearchReason:pommesError:emptyNLInput:hasUndoRequest:conjunctionInfo:)()
{
  return 0;
}

uint64_t default argument 3 of DecisionEngine.CAMFallbackInfo.init(pommesSearchReason:pommesError:emptyNLInput:hasUndoRequest:conjunctionInfo:)()
{
  return 0;
}

uint64_t DecisionEngine.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 48);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 136);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 200, &demangling cache variable for type metadata for AmbiguityServiceProviding?);
  return v0;
}

uint64_t DecisionEngine.__deallocating_deinit()
{
  DecisionEngine.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for DecisionMaking.loadConversationFromPluginAction(_:speechData:turnData:bridge:) in conformance DecisionEngine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  void *v11 = v5;
  v11[1] = protocol witness for AceServiceInvokerAsync.submitToRemote<A>(_:_:setRefId:) in conformance AceServiceInvokerImpl;
  return DecisionEngine.loadConversationFromPluginAction(_:speechData:turnData:bridge:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for DecisionMaking.commitConversation(_:) in conformance DecisionEngine()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = **(void **)(v0 + 72);
  swift_beginAccess();
  *(void *)(v2 + 184) = v1;
  swift_release();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  swift_retain();
  return v4();
}

uint64_t protocol witness for DecisionMaking.newSessionStarted() in conformance DecisionEngine()
{
  uint64_t v1 = *v0;
  ActionGenerator.newSessionStarted()();
  DecisionEngine.ambiguityService.getter((uint64_t)v5);
  uint64_t v2 = v6;
  uint64_t v3 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v5);
  swift_beginAccess();
  *(void *)(v1 + 184) = 0;
  return swift_release();
}

uint64_t Siri_Nlu_External_UserDialogAct.isSetIdentity.getter()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter())
  {
    Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
    Siri_Nlu_External_UserStatedTask.task.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v8 = static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    unint64_t v9 = MEMORY[0x1BA9DE8C0](v8);
    unint64_t v10 = v9;
    if (v9 >> 62) {
      goto LABEL_16;
    }
    for (uint64_t i = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v12 = 4;
      while (1)
      {
        uint64_t v13 = v12 - 4;
        if ((v10 & 0xC000000000000001) == 0) {
          break;
        }
        MEMORY[0x1BA9E3990](v12 - 4, v10);
        BOOL v14 = __OFADD__(v13, 1);
        uint64_t v15 = v12 - 3;
        if (v14) {
          goto LABEL_15;
        }
LABEL_12:
        static UsoTask_CodegenConverter.convert(task:)();
        swift_release();
        if (v19)
        {
          outlined init with take of Any(&v18, v20);
          outlined init with take of Any(v20, &v18);
          type metadata accessor for UsoTask_setIdentity_common_Person();
          if (swift_dynamicCast())
          {
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            return 1;
          }
        }
        else
        {
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v18, (uint64_t *)&demangling cache variable for type metadata for Any?);
        }
        ++v12;
        if (v15 == i) {
          goto LABEL_17;
        }
      }
      swift_retain();
      BOOL v14 = __OFADD__(v13, 1);
      uint64_t v15 = v12 - 3;
      if (!v14) {
        goto LABEL_12;
      }
LABEL_15:
      __break(1u);
LABEL_16:
      ;
    }
LABEL_17:
    swift_release();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = a4;
    uint64_t v9 = a3;
    uint64_t v5 = a2;
    uint64_t v7 = a1;
    unint64_t v8 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v25 < v5) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v11 = v5 - v7;
  if (__OFSUB__(v5, v7))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v10 = 1 - v11;
  if (__OFSUB__(1, v11))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v13 = v12 + v10;
    if (!__OFADD__(v12, v10)) {
      goto LABEL_8;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  unint64_t v8 = *v4;
  if (*v4 >> 62) {
    goto LABEL_36;
  }
  uint64_t v12 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v13 = v12 + v10;
  if (__OFADD__(v12, v10)) {
    goto LABEL_38;
  }
LABEL_8:
  unint64_t v8 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v4 = v8;
  uint64_t v28 = v9;
  uint64_t v12 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
  {
    uint64_t v15 = v8 & 0xFFFFFFFFFFFFFF8;
    if (v13 <= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v12 = 1;
  }
  if (v8 >> 62) {
    goto LABEL_39;
  }
  uint64_t v16 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v16 <= v13) {
    uint64_t v16 = v13;
  }
  swift_bridgeObjectRetain();
  unint64_t v8 = MEMORY[0x1BA9E39A0](v12, v16, 1, v8);
  swift_bridgeObjectRelease();
  unint64_t *v4 = v8;
  uint64_t v15 = v8 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  uint64_t v17 = (void *)(v15 + 32 + 8 * v7);
  v6(0);
  swift_arrayDestroy();
  if (v10)
  {
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v19 = v26 - v5;
      if (!__OFSUB__(v26, v5))
      {
LABEL_21:
        if (v19 < 0)
        {
LABEL_46:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v20 = (char *)(v17 + 1);
        uint64_t v21 = (char *)(v15 + 32 + 8 * v5);
        if (v17 + 1 != (void *)v21 || v20 >= &v21[8 * v19]) {
          memmove(v20, v21, 8 * v19);
        }
        if (!(v8 >> 62))
        {
          uint64_t v22 = *(void *)(v15 + 16);
          uint64_t v23 = v22 + v10;
          if (!__OFADD__(v22, v10))
          {
LABEL_27:
            *(void *)(v15 + 16) = v23;
            goto LABEL_28;
          }
          goto LABEL_45;
        }
LABEL_43:
        swift_bridgeObjectRetain();
        uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v23 = v27 + v10;
        if (!__OFADD__(v27, v10)) {
          goto LABEL_27;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v18 = *(void *)(v15 + 16);
      uint64_t v19 = v18 - v5;
      if (!__OFSUB__(v18, v5)) {
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_43;
  }
LABEL_28:
  *uint64_t v17 = v28;

  return specialized Array._endMutation()();
}

uint64_t specialized DecisionEngine.init(conversationHandlerLocator:rrClient:correctionsClient:linkExpansionContextBuilder:preFlowBlockingWork:camBridge:curareDonator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v38[3] = a10;
  v38[4] = a12;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v38);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32))(boxed_opaque_existential_0, a3, a10);
  v37[3] = a9;
  v37[4] = a11;
  uint64_t v20 = __swift_allocate_boxed_opaque_existential_0(v37);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a9 - 8) + 32))(v20, a5, a9);
  type metadata accessor for ServerFallbackDisablingUtils();
  *(void *)(a8 + 176) = 0;
  *(void *)(a8 + 184) = 0;
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  v21[3] = closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:);
  v21[4] = 0;
  *(void *)(a8 + 192) = v21;
  *(_OWORD *)(a8 + 200) = 0u;
  *(_OWORD *)(a8 + 216) = 0u;
  *(void *)(a8 + 232) = 0;
  *(void *)(a8 + 24) = a1;
  outlined init with copy of ReferenceResolutionClientProtocol(a2, a8 + 48);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v37, (uint64_t)&v34);
  type metadata accessor for ConversationHelper();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a1;
  outlined init with take of ReferenceResolutionClientProtocol(&v34, v22 + 24);
  *(void *)(a8 + 32) = v22;
  uint64_t v23 = type metadata accessor for LinkMetadataProvider();
  uint64_t v24 = swift_allocObject();
  id v25 = objc_allocWithZone(MEMORY[0x1E4F72CE0]);
  swift_retain_n();
  swift_retain();
  *(void *)(v24 + 16) = objc_msgSend(v25, sel_init);
  uint64_t v26 = type metadata accessor for AppShortcutStateProvider();
  uint64_t v27 = swift_allocObject();
  type metadata accessor for AppShortcutExpansionContextBuilder();
  uint64_t v28 = (void *)swift_allocObject();
  v28[9] = v23;
  v28[10] = &protocol witness table for LinkMetadataProvider;
  v28[6] = v24;
  v28[14] = v26;
  v28[15] = &protocol witness table for AppShortcutStateProvider;
  v28[11] = v27;
  type metadata accessor for ConditionalIntentMetadataStore();
  v28[4] = 0;
  v28[5] = 0;
  v28[3] = 0;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = MEMORY[0x1E4FBC868];
  v28[2] = v29;
  type metadata accessor for ActionGenerator();
  uint64_t v30 = (void *)swift_allocObject();
  v30[3] = v28;
  v30[4] = a1;
  v30[2] = a4;
  *(void *)(a8 + 16) = v30;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v38, (uint64_t)&v34);
  type metadata accessor for CorrectionsService();
  uint64_t v31 = swift_allocObject();
  outlined init with take of ReferenceResolutionClientProtocol(&v34, v31 + 16);
  *(void *)(v31 + 56) = a1;
  *(void *)(a8 + 40) = v31;
  *(void *)(a8 + 88) = a7;
  uint64_t v35 = type metadata accessor for AppShortcutProvider();
  uint64_t v36 = MEMORY[0x1E4FA1D50];
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v34);
  swift_retain();
  AppShortcutProvider.init()();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v38);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  outlined init with take of ReferenceResolutionClientProtocol(&v34, a8 + 96);
  outlined init with take of ReferenceResolutionClientProtocol(a6, a8 + 136);
  return a8;
}

uint64_t specialized DecisionEngine.__allocating_init(conversationHandlerLocator:rrClient:correctionsClient:linkExpansionContextBuilder:preFlowBlockingWork:camBridge:curareDonator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v26 = a6;
  uint64_t v27 = a7;
  uint64_t v22 = a5;
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v25 = a4;
  uint64_t v13 = *(void *)(a9 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a10 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v19 = (char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a3, a10);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v22, a9);
  return specialized DecisionEngine.init(conversationHandlerLocator:rrClient:correctionsClient:linkExpansionContextBuilder:preFlowBlockingWork:camBridge:curareDonator:)(v23, v24, (uint64_t)v19, v25, (uint64_t)v16, v26, v27, v20, a9, a10, a11, a12);
}

uint64_t sub_1B9EA8E34@<X0>(uint64_t a1@<X8>)
{
  return DecisionEngine.ambiguityService.getter(a1);
}

uint64_t type metadata accessor for DecisionEngine()
{
  return self;
}

uint64_t method lookup function for DecisionEngine(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DecisionEngine);
}

uint64_t dispatch thunk of DecisionEngine.__allocating_init(conversationHandlerLocator:rrClient:correctionsClient:linkExpansionContextBuilder:preFlowBlockingWork:camBridge:curareDonator:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

void destroy for DecisionEngine.CAMFallbackInfo(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 40);
}

uint64_t initializeWithCopy for DecisionEngine.CAMFallbackInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v5 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v5;
  return a1;
}

uint64_t assignWithCopy for DecisionEngine.CAMFallbackInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v5 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  id v6 = v5;

  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DecisionEngine.CAMFallbackInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  id v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);

  return a1;
}

uint64_t getEnumTagSinglePayload for DecisionEngine.CAMFallbackInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DecisionEngine.CAMFallbackInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DecisionEngine.CAMFallbackInfo()
{
  return &type metadata for DecisionEngine.CAMFallbackInfo;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay11SiriKitFlow5ParseOGG_AH5InputVs5NeverOTg506_sSi11fg5Flow5i4OAA5j32VIgynr_Si6offset_AC7elementtAEs5K11OIegnrzr_TRSiAjNIgynr_Tf1cn_nTf4ng_n(uint64_t a1, void (*a2)(void, char *), uint64_t a3)
{
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t v38 = type metadata accessor for Input();
  uint64_t v4 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  id v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Parse));
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  os_log_type_t v37 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (void *)((char *)v29 - v11);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v29 - v13;
  uint64_t v41 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v15 = v41;
  uint64_t v16 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v36 = v16;
  v29[0] = a1;
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v33 = type metadata accessor for Parse();
    uint64_t v18 = *(void *)(v33 - 8);
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
    uint64_t v31 = v18 + 16;
    uint64_t v32 = v19;
    uint64_t v20 = a1 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
    uint64_t v21 = *(void *)(v18 + 72);
    uint64_t v22 = (void (**)(char *, char *, uint64_t))(v18 + 32);
    v29[2] = v4 + 32;
    uint64_t v30 = v21;
    long long v34 = v6;
    uint64_t v35 = v4;
    do
    {
      uint64_t v23 = &v37[*(int *)(v7 + 48)];
      uint64_t v24 = v33;
      v32(v23, v20, v33);
      uint64_t v25 = (char *)v12 + *(int *)(v7 + 48);
      *uint64_t v12 = v17;
      (*v22)(v25, v23, v24);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v12, (uint64_t)v14, &demangling cache variable for type metadata for (offset: Int, element: Parse));
      v39(*(void *)v14, &v14[*(int *)(v7 + 48)]);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for (offset: Int, element: Parse));
      uint64_t v15 = v41;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1);
        uint64_t v15 = v41;
      }
      unint64_t v27 = *(void *)(v15 + 16);
      unint64_t v26 = *(void *)(v15 + 24);
      if (v27 >= v26 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
        uint64_t v15 = v41;
      }
      ++v17;
      *(void *)(v15 + 16) = v27 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v35 + 32))(v15+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v35 + 72) * v27, v34, v38);
      uint64_t v41 = v15;
      v20 += v30;
    }
    while (v36 != v17);
  }
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t partial apply for closure #3 in DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #3 in DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:)(a1, a2, *(void *)(v3 + 16), a3);
}

uint64_t outlined destroy of RemoteConversationTurnData(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

id *outlined retain of RequestConjunctionInfo?(id *a1)
{
  id v2 = *a1;
  return a1;
}

unint64_t lazy protocol witness table accessor for type RequestConjunctionInfo? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type RequestConjunctionInfo? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type RequestConjunctionInfo? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for RequestConjunctionInfo?);
    lazy protocol witness table accessor for type Siri_Nlu_External_ResponseStatus.StatusCode and conformance Siri_Nlu_External_ResponseStatus.StatusCode(&lazy protocol witness table cache variable for type RequestConjunctionInfo and conformance RequestConjunctionInfo, MEMORY[0x1E4FA2688]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestConjunctionInfo? and conformance <A> A?);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Siri_Nlu_External_ResponseStatus.StatusCode and conformance Siri_Nlu_External_ResponseStatus.StatusCode(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id *outlined release of RequestConjunctionInfo?(id *a1)
{
  return a1;
}

uint64_t sub_1B9EA961C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #1 in ServerFallbackDisablingUtils.shouldDisableServerFallbackWithTriggerLoggingAndABDecision(isDomainDirected:topNlParse:serverFallbackReason:executionRequestId:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in ServerFallbackDisablingUtils.shouldDisableServerFallbackWithTriggerLoggingAndABDecision(isDomainDirected:topNlParse:serverFallbackReason:executionRequestId:)(a1, v4, v5, v6, v7, v8);
}

uint64_t *DecisionEngineCurareDonator.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  return &static DecisionEngineCurareDonator.instance;
}

uint64_t (*AnyEncodable.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v5 = implicit closure #1 in AnyEncodable.init<A>(_:)(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v5;
}

uint64_t (*implicit closure #1 in AnyEncodable.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, v7, a2);
  return partial apply for implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
}

uint64_t AnyEncodable.encode(to:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t DecisionEngineCurareStream.streamId.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DecisionEngineCurareStream.__allocating_init(streamId:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t DecisionEngineCurareStream.init(streamId:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

uint64_t DecisionEngineCurareStream.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DecisionEngineCurareStream.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t one-time initialization function for instance()
{
  uint64_t result = specialized DecisionEngineCurareDonator.__allocating_init()();
  static DecisionEngineCurareDonator.instance = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for NoopSiriKitEventSender();
  uint64_t result = swift_initStaticObject();
  static NoopSiriKitEventSender.instance = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for IntentLoggingEventSink();
  uint64_t result = swift_initStaticObject();
  static IntentLoggingEventSink.instance = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = specialized SelfReflectionCurareDonator.__allocating_init()();
  static SelfReflectionCurareDonator.instance = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for SiriKitCurareDonator();
  swift_allocObject();
  uint64_t result = SiriKitCurareDonator.().init()();
  static SiriKitCurareDonator.instance = result;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t vars8;

  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v0 = static TaskLoggingService.instance;
  type metadata accessor for TaskLoggingEventSink();
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = v0;
  static TaskLoggingEventSink.instance = v1;

  return swift_retain();
}

{
  uint64_t v0;
  unsigned char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t result;
  long long v9;
  uint64_t v10;
  _UNKNOWN **v11;
  long long v12;
  uint64_t v13;
  _UNKNOWN **v14;

  uint64_t v0 = type metadata accessor for FeatureChecker();
  swift_allocObject();
  uint64_t v1 = FeatureChecker.init()();
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v2 = static SiriKitBiomeDonator.instance;
  uint64_t v13 = type metadata accessor for SiriKitBiomeDonator();
  uint64_t v14 = &protocol witness table for SiriKitBiomeDonator;
  *(void *)&uint64_t v12 = v2;
  uint64_t v3 = one-time initialization token for instance;
  swift_retain();
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v4 = static SiriKitCurareDonator.instance;
  uint64_t v10 = type metadata accessor for SiriKitCurareDonator();
  uint64_t v11 = &protocol witness table for SiriKitCurareDonator;
  uint64_t v5 = self;
  swift_retain();
  uint64_t v6 = objc_msgSend(v5, sel_shared, v4);
  type metadata accessor for TaskLoggingService();
  uint64_t v7 = (void *)swift_allocObject();
  v7[24] = v0;
  v7[25] = &protocol witness table for FeatureChecker;
  v7[21] = v1;
  outlined init with take of ReferenceResolutionClientProtocol(&v12, (uint64_t)(v7 + 2));
  uint64_t result = outlined init with take of ReferenceResolutionClientProtocol(&v9, (uint64_t)(v7 + 7));
  v7[12] = closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:);
  v7[13] = 0;
  v7[14] = closure #1 in default argument 3 of TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:);
  v7[15] = 0;
  v7[16] = closure #1 in default argument 4 of TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:);
  v7[17] = 0;
  v7[18] = closure #1 in default argument 5 of TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:);
  v7[19] = 0;
  v7[20] = v6;
  static TaskLoggingService.instance = (uint64_t)v7;
  return result;
}

uint64_t static DecisionEngineCurareDonator.instance.getter()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t DecisionEngineCurareDonator.__allocating_init(decisionEngineStream:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, v2 + 16, &demangling cache variable for type metadata for DecisionEngineStream?);
  if (!*(void *)(a1 + 24))
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.instrumentation);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_1B9C64000, v4, v5, "Failed to create stream for DecisionEngine - donations will be disabled.", v6, 2u);
      MEMORY[0x1BA9E48C0](v6, -1, -1);
    }
  }
  outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for DecisionEngineStream?);
  return v2;
}

uint64_t DecisionEngineCurareDonator.init(decisionEngineStream:)(uint64_t a1)
{
  uint64_t v2 = v1;
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, v1 + 16, &demangling cache variable for type metadata for DecisionEngineStream?);
  if (!*(void *)(a1 + 24))
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.instrumentation);
    os_log_type_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1B9C64000, v5, v6, "Failed to create stream for DecisionEngine - donations will be disabled.", v7, 2u);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }
  }
  outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for DecisionEngineStream?);
  return v2;
}

uint64_t closure #1 in DecisionEngineCurareDonator.donateDecisionEngineResponse(decisionEngineResponse:requestId:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 232) = v14;
  *(_OWORD *)(v8 + 216) = v13;
  *(void *)(v8 + 200) = a7;
  *(void *)(v8 + 208) = a8;
  *(void *)(v8 + 184) = a5;
  *(void *)(v8 + 192) = a6;
  *(void *)(v8 + 176) = a4;
  type metadata accessor for String.Encoding();
  *(void *)(v8 + 240) = swift_task_alloc();
  uint64_t v9 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CamParse?)
                 - 8);
  *(void *)(v8 + 248) = v9;
  *(void *)(v8 + 256) = *(void *)(v9 + 64);
  *(void *)(v8 + 264) = swift_task_alloc();
  *(void *)(v8 + 272) = swift_task_alloc();
  uint64_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?)
                  - 8);
  *(void *)(v8 + 280) = v10;
  *(void *)(v8 + 288) = *(void *)(v10 + 64);
  *(void *)(v8 + 296) = swift_task_alloc();
  *(void *)(v8 + 304) = swift_task_alloc();
  *(void *)(v8 + 312) = swift_task_alloc();
  *(void *)(v8 + 320) = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in DecisionEngineCurareDonator.donateDecisionEngineResponse(decisionEngineResponse:requestId:rcId:), 0, 0);
}

uint64_t closure #1 in DecisionEngineCurareDonator.donateDecisionEngineResponse(decisionEngineResponse:requestId:rcId:)()
{
  uint64_t v69 = v0;
  uint64_t v1 = (uint64_t)(v0 + 13);
  uint64_t v3 = v0[24];
  uint64_t v2 = (void *)v0[25];
  unint64_t v4 = v0[23];
  uint64_t v67 = v0[22];
  unint64_t v68 = v4;
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = 58;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = v3;
  v6._object = v2;
  String.append(_:)(v6);
  unint64_t v7 = v68;
  uint64_t v66 = v67;
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.instrumentation);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v67 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_bridgeObjectRetain();
    v0[21] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v7, &v67);
    uint64_t v1 = (uint64_t)(v0 + 13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v9, v10, "Creating DecisionEngineResponse donation to Curare for interactionId: %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v12, -1, -1);
    MEMORY[0x1BA9E48C0](v11, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v13 = v0[40];
  uint64_t v14 = v0[27];
  uint64_t v15 = v0[28];
  uint64_t v16 = v0[26];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, AnyEncodable)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BA04FD90;
  strcpy((char *)(inited + 32), "flowHandlerId");
  *(_WORD *)(inited + 46) = -4864;
  v0[13] = v16;
  v0[14] = v14;
  uint64_t v18 = swift_allocObject();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v1, v18 + 16, (uint64_t *)&demangling cache variable for type metadata for String?);
  *(void *)(inited + 48) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
  *(void *)(inited + 56) = v18;
  swift_bridgeObjectRetain();
  unint64_t v19 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  outlined init with copy of ReferenceResolutionClientProtocol?(v15, v13, &demangling cache variable for type metadata for Parse?);
  uint64_t v20 = type metadata accessor for Parse();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  int v23 = v22(v13, 1, v20);
  uint64_t v24 = v0[40];
  unint64_t v65 = v7;
  if (v23 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v24, &demangling cache variable for type metadata for Parse?);
  }
  else
  {
    int v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 88))(v24, v20);
    int v26 = *MEMORY[0x1E4FA1F38];
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v24, v20);
    if (v25 == v26)
    {
      uint64_t v28 = v0[38];
      uint64_t v27 = v0[39];
      uint64_t v29 = v0[35];
      outlined init with copy of ReferenceResolutionClientProtocol?(v0[28], v27, &demangling cache variable for type metadata for Parse?);
      outlined init with copy of ReferenceResolutionClientProtocol?(v27, v28, &demangling cache variable for type metadata for Parse?);
      unint64_t v30 = (*(unsigned __int8 *)(v29 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
      uint64_t v31 = swift_allocObject();
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v28, v31 + v30, &demangling cache variable for type metadata for Parse?);
      outlined destroy of ReferenceResolutionClientProtocol?(v27, &demangling cache variable for type metadata for Parse?);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v67 = v19;
      uint64_t v33 = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
      goto LABEL_14;
    }
  }
  uint64_t v34 = v0[37];
  outlined init with copy of ReferenceResolutionClientProtocol?(v0[28], v34, &demangling cache variable for type metadata for Parse?);
  int v35 = v22(v34, 1, v20);
  uint64_t v36 = v0[37];
  uint64_t v37 = v0[34];
  if (v35 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0[37], &demangling cache variable for type metadata for Parse?);
    uint64_t v38 = type metadata accessor for CamParse();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
  }
  else
  {
    Parse.asCamParse()((void *)v0[34]);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v36, v20);
    uint64_t v39 = type metadata accessor for CamParse();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v37, 0, 1, v39);
  }
  uint64_t v41 = v0[33];
  uint64_t v40 = v0[34];
  uint64_t v42 = v0[31];
  outlined init with copy of ReferenceResolutionClientProtocol?(v40, v41, &demangling cache variable for type metadata for CamParse?);
  unint64_t v43 = (*(unsigned __int8 *)(v42 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
  uint64_t v31 = swift_allocObject();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v41, v31 + v43, &demangling cache variable for type metadata for CamParse?);
  outlined destroy of ReferenceResolutionClientProtocol?(v40, &demangling cache variable for type metadata for CamParse?);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v67 = v19;
  uint64_t v33 = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
LABEL_14:
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v33, v31, 0x6573726170, 0xE500000000000000, isUniquelyReferenced_nonNull_native);
  uint64_t v44 = v67;
  swift_bridgeObjectRelease();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  v0[18] = v44;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : AnyEncodable]);
  lazy protocol witness table accessor for type [String : AnyEncodable] and conformance <> [A : B]();
  uint64_t v49 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v51 = v50;
  swift_bridgeObjectRelease();
  swift_release();
  static String.Encoding.utf8.getter();
  uint64_t v52 = String.init(data:encoding:)();
  if (v53)
  {
    uint64_t v54 = v52;
    uint64_t v55 = v53;
    char v56 = (void *)v0[29];
    uint64_t v57 = v56[3];
    uint64_t v58 = v56[4];
    __swift_project_boxed_opaque_existential_1(v56, v57);
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v58 + 8))(v54, v55, v66, v65, v57, v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    unint64_t v45 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v45, v59))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc();
      uint64_t v62 = swift_slowAlloc();
      uint64_t v67 = v62;
      *(_DWORD *)uint64_t v61 = 136315138;
      swift_bridgeObjectRetain();
      v0[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v65, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v45, v59, "Donated DecisionEngineResponse to Curare for interactionId:%s", v61, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v62, -1, -1);
      MEMORY[0x1BA9E48C0](v61, -1, -1);
      outlined consume of Data._Representation(v49, v51);
      goto LABEL_24;
    }
    outlined consume of Data._Representation(v49, v51);
  }
  else
  {
    outlined consume of Data._Representation(v49, v51);
    swift_bridgeObjectRetain();
    unint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      uint64_t v67 = v48;
      *(_DWORD *)uint64_t v47 = 136315138;
      swift_bridgeObjectRetain();
      v0[15] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v65, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v45, v46, "Failed to convert DecisionEngineResponse donation to JSON for interactionId:%s", v47, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v48, -1, -1);
      MEMORY[0x1BA9E48C0](v47, -1, -1);
      goto LABEL_24;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_24:

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v63 = (uint64_t (*)(void))v0[1];
  return v63();
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v8, &demangling cache variable for type metadata for TaskPriority?);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for TaskPriority?);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v11 = 0;
  uint64_t v13 = 0;
LABEL_6:
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    _OWORD v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t DecisionEngineCurareDonator.deinit()
{
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for DecisionEngineStream?);
  return v0;
}

uint64_t DecisionEngineCurareDonator.__deallocating_deinit()
{
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for DecisionEngineStream?);

  return swift_deallocClassInstance();
}

uint64_t sub_1B9EAAC34()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 80) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for Parse();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }
  unint64_t v7 = (v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = v7 + 40;
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + v7);

  return MEMORY[0x1F4186498](v0, v8, v2 | 7);
}

uint64_t partial apply for closure #1 in DecisionEngineCurareDonator.donateDecisionEngineResponse(decisionEngineResponse:requestId:rcId:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  uint64_t v3 = v1[3];
  uint64_t v11 = v1[2];
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  uint64_t v7 = v1[7];
  uint64_t v8 = v1[8];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in DecisionEngineCurareDonator.donateDecisionEngineResponse(decisionEngineResponse:requestId:rcId:)(a1, v11, v3, v4, v5, v6, v7, v8);
}

uint64_t specialized DecisionEngineCurareDonator.__allocating_init()()
{
  uint64_t v0 = self;
  if (objc_msgSend(v0, sel_isSupportedUser) && objc_msgSend(v0, sel_isSupportedPlatform))
  {
    uint64_t v1 = type metadata accessor for DecisionEngineCurareStream();
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 16) = 0xD000000000000016;
    *(void *)(v2 + 24) = 0x80000001BA067B50;
    *((void *)&v13 + 1) = v1;
    uint64_t v14 = &protocol witness table for DecisionEngineCurareStream;
    *(void *)&long long v12 = v2;
    type metadata accessor for DecisionEngineCurareDonator();
    uint64_t v3 = swift_allocObject();
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v12, v3 + 16, &demangling cache variable for type metadata for DecisionEngineStream?);
  }
  else
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.instrumentation);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1B9C64000, v5, v6, "Unsupported User/Platform for feature store - donations will be disabled.", v7, 2u);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }

    type metadata accessor for DecisionEngineCurareDonator();
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t v14 = 0;
    uint64_t v3 = swift_allocObject();
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v12, v3 + 16, &demangling cache variable for type metadata for DecisionEngineStream?);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_1B9C64000, v8, v9, "Failed to create stream for DecisionEngine - donations will be disabled.", v10, 2u);
      MEMORY[0x1BA9E48C0](v10, -1, -1);
    }

    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v12, &demangling cache variable for type metadata for DecisionEngineStream?);
  }
  return v3;
}

void *assignWithCopy for AnyEncodable(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for AnyEncodable(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for AnyEncodable()
{
  return &type metadata for AnyEncodable;
}

uint64_t dispatch thunk of DecisionEngineStream.insert(jsonStr:interactionId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t type metadata accessor for DecisionEngineCurareStream()
{
  return self;
}

uint64_t method lookup function for DecisionEngineCurareStream(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DecisionEngineCurareStream);
}

uint64_t dispatch thunk of DecisionEngineCurareStream.__allocating_init(streamId:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t type metadata accessor for DecisionEngineCurareDonator()
{
  return self;
}

uint64_t method lookup function for DecisionEngineCurareDonator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DecisionEngineCurareDonator);
}

uint64_t dispatch thunk of DecisionEngineCurareDonator.__allocating_init(decisionEngineStream:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_1B9EAB26C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  (*(void (**)(uint64_t))(v1 + 8))(v0 + v3);

  return MEMORY[0x1F4186498](v0, v4, v5);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)()
{
  return dispatch thunk of Encodable.encode(to:)();
}

uint64_t sub_1B9EAB350()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B9EAB388()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B9EAB3C0()
{
  return objectdestroy_20Tm_0(&demangling cache variable for type metadata for CamParse?, MEMORY[0x1E4F9FA58]);
}

unint64_t lazy protocol witness table accessor for type AnyEncodable and conformance AnyEncodable()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyEncodable and conformance AnyEncodable;
  if (!lazy protocol witness table cache variable for type AnyEncodable and conformance AnyEncodable)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyEncodable and conformance AnyEncodable);
  }
  return result;
}

uint64_t sub_1B9EAB434()
{
  return objectdestroy_20Tm_0(&demangling cache variable for type metadata for Parse?, MEMORY[0x1E4FA1F68]);
}

uint64_t DecisionEngineResponse.topNlParse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Parse();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  os_log_type_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for USOParse();
  uint64_t v22 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  os_log_type_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  MEMORY[0x1F4188790](v10 - 8);
  long long v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DecisionEngineResponse();
  outlined init with copy of Input?(v1 + *(int *)(v13 + 24), (uint64_t)v12);
  uint64_t v14 = type metadata accessor for Input();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v12, 1, v14) == 1)
  {
    outlined destroy of Input?((uint64_t)v12);
    uint64_t v16 = type metadata accessor for Siri_Nlu_External_UserParse();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a1, 1, 1, v16);
  }
  else
  {
    Input.parse.getter();
    if ((*(unsigned int (**)(char *, uint64_t))(v4 + 88))(v6, v3) == *MEMORY[0x1E4FA1F48])
    {
      (*(void (**)(char *, uint64_t))(v4 + 96))(v6, v3);
      uint64_t v18 = v22;
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v9, v6, v7);
      USOParse.userParse.getter();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v9, v7);
      uint64_t v19 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(a1, 0, 1, v19);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      uint64_t v20 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(a1, 1, 1, v20);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v12, v14);
  }
}

uint64_t Input.topNlParse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Parse();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for USOParse();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  os_log_type_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v3 + 88))(v5, v2) == *MEMORY[0x1E4FA1F48])
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    USOParse.userParse.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v10 = type metadata accessor for Siri_Nlu_External_UserParse();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a1, 0, 1, v10);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v12 = type metadata accessor for Siri_Nlu_External_UserParse();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
}

uint64_t outlined init with copy of Input?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Input?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t DecisionEngineResponse.init(conversation:existingFlowSelected:inputGivenToFlow:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = a1;
  *(unsigned char *)(a4 + 8) = a2;
  uint64_t v5 = a4 + *(int *)(type metadata accessor for DecisionEngineResponse() + 24);

  return outlined init with take of Input?(a3, v5);
}

uint64_t DecisionEngineResponse.conversation.getter()
{
  return swift_retain();
}

uint64_t DecisionEngineResponse.existingFlowSelected.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t DecisionEngineResponse.inputGivenToFlow.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for DecisionEngineResponse() + 24);

  return outlined init with copy of Input?(v3, a1);
}

uint64_t DecisionMaking.getNlParse(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for LinkParse();
  uint64_t v21 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for USOParse();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Parse();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  int v15 = (*(uint64_t (**)(char *, uint64_t))(v12 + 88))(v14, v11);
  if (v15 == *MEMORY[0x1E4FA1F48])
  {
    (*(void (**)(char *, uint64_t))(v12 + 96))(v14, v11);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v14, v7);
    USOParse.userParse.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
LABEL_5:
    uint64_t v17 = type metadata accessor for Siri_Nlu_External_UserParse();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a2, 0, 1, v17);
  }
  if (v15 == *MEMORY[0x1E4FA1F50])
  {
    (*(void (**)(char *, uint64_t))(v12 + 96))(v14, v11);
    uint64_t v16 = v21;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v6, v14, v4);
    LinkParse.usoParse.getter();
    USOParse.userParse.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v4);
    goto LABEL_5;
  }
  uint64_t v19 = type metadata accessor for Siri_Nlu_External_UserParse();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(a2, 1, 1, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t initializeBufferWithCopyOfBuffer for DecisionEngineResponse(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for Input();
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
    swift_retain();
    if (v11(v8, 1, v9))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
      memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
    }
  }
  return v5;
}

uint64_t assignWithCopy for DecisionEngineResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Input();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t initializeWithTake for DecisionEngineResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = type metadata accessor for Input();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t assignWithTake for DecisionEngineResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Input();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t sub_1B9EAC4E4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    int v12 = (char *)a1 + *(int *)(a3 + 24);
    return v10(v12, a2, v11);
  }
}

void *sub_1B9EAC5A4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *unint64_t result = a2;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for DecisionEngineResponse()
{
  type metadata accessor for Input?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t dispatch thunk of DecisionMaking.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:turnData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a9 + 8) + **(int **)(a9 + 8));
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v9 + 16) = v17;
  *uint64_t v17 = v9;
  v17[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v19(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t dispatch thunk of DecisionMaking.findBestConversationForUnambiguousInput(_:speechData:activeConversations:turnData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a9 + 16) + **(int **)(a9 + 16));
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v9 + 16) = v17;
  *uint64_t v17 = v9;
  v17[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v19(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t dispatch thunk of DecisionMaking.loadConversationFromPluginAction(_:speechData:turnData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a7 + 24)
                                                                                              + **(int **)(a7 + 24));
  int v15 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v15;
  *int v15 = v7;
  v15[1] = dispatch thunk of CaarRankingProviding.getCaarRanking(requestId:caarId:rcId:actions:rankerContext:);
  return v17(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t dispatch thunk of DecisionMaking.commitConversation(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 32) + **(int **)(a3 + 32));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of DecisionMaking.commitCorrections()(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 40) + **(int **)(a2 + 40));
  int v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *int v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v7(a1, a2);
}

uint64_t dispatch thunk of DecisionMaking.newTurnStarted(executionUUID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of DecisionMaking.newSessionStarted()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t DefaultDeviceState.inputOrigin.getter@<X0>(uint64_t a1@<X8>)
{
  return DefaultDeviceState.inputOrigin.getter(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_inputOrigin, MEMORY[0x1E4FA51A0], a1);
}

uint64_t DefaultDeviceState.interactionType.getter@<X0>(uint64_t a1@<X8>)
{
  return DefaultDeviceState.inputOrigin.getter(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_interactionType, MEMORY[0x1E4FA5250], a1);
}

uint64_t DefaultDeviceState.multiUserState.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of MultiUserState(v1 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_multiUserState, a1);
}

uint64_t DefaultDeviceState.siriLocale.getter@<X0>(uint64_t a1@<X8>)
{
  return DefaultDeviceState.inputOrigin.getter(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_siriLocale, MEMORY[0x1E4F27A78], a1);
}

uint64_t DefaultDeviceState.siriVoiceGender.getter@<X0>(uint64_t a1@<X8>)
{
  return DefaultDeviceState.inputOrigin.getter(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_siriVoiceGender, MEMORY[0x1E4FA5060], a1);
}

uint64_t DefaultDeviceState.isEyesFree.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isEyesFree);
}

uint64_t DefaultDeviceState.isVoiceTriggerEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isVoiceTriggerEnabled);
}

uint64_t DefaultDeviceState.isTextToSpeechEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isTextToSpeechEnabled);
}

uint64_t DefaultDeviceState.isCarPlay.getter()
{
  return DefaultDeviceState.isCarPlay.getter(MEMORY[0x1E4FA5290]);
}

uint64_t DefaultDeviceState.restrictions.getter()
{
  return Restrictions.deviceRestrictions.getter();
}

unint64_t lazy protocol witness table accessor for type DeviceRestrictions and conformance DeviceRestrictions()
{
  unint64_t result = lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions;
  if (!lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions)
  {
    type metadata accessor for DeviceRestrictions();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions);
  }
  return result;
}

uint64_t DefaultDeviceState.isCarDNDMode.getter()
{
  return DefaultDeviceState.isCarPlay.getter(MEMORY[0x1E4FA5280]);
}

uint64_t DefaultDeviceState.isHeadGestureRecognitionAvailable.getter()
{
  return DefaultDeviceState.isCarPlay.getter(MEMORY[0x1E4FA5288]);
}

uint64_t DefaultDeviceState.isCarPlay.getter(void (*a1)(uint64_t))
{
  uint64_t v2 = type metadata accessor for DeviceRestrictions();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v12 - v7;
  uint64_t v9 = Restrictions.deviceRestrictions.getter();
  a1(v9);
  lazy protocol witness table accessor for type DeviceRestrictions and conformance DeviceRestrictions();
  LOBYTE(a1) = dispatch thunk of SetAlgebra.isSuperset(of:)();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v6, v2);
  v10(v8, v2);
  return a1 & 1;
}

uint64_t DefaultDeviceState.isDirectAction.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isDirectAction);
}

uint64_t DefaultDeviceState.renderDeviceIdiom.getter@<X0>(uint64_t a1@<X8>)
{
  return DefaultDeviceState.inputOrigin.getter(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_renderDeviceIdiom, MEMORY[0x1E4FA5128], a1);
}

uint64_t DefaultDeviceState.sessionHandOffContinuityID.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_sessionHandOffContinuityID);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DefaultDeviceState.preferencesLanguageCode.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_preferencesLanguageCode);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DefaultDeviceState.personalDomainsAuthenticationMode.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_personalDomainsAuthenticationMode, a1, &demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
}

uint64_t DefaultDeviceState.bargeInContext.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_bargeInContext, a1, &demangling cache variable for type metadata for BargeInContext?);
}

uint64_t DefaultDeviceState.endpointId.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_endpointId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DefaultDeviceState.restrictedCommands.getter@<X0>(uint64_t a1@<X8>)
{
  return DefaultDeviceState.inputOrigin.getter(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_restrictedCommands, MEMORY[0x1E4FA51E0], a1);
}

uint64_t DefaultDeviceState.inputOrigin.getter@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3 + *a1;
  uint64_t v6 = a2(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);

  return v7(a3, v5, v6);
}

uint64_t DefaultDeviceState.authenticationState.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_authenticationState, a1);
}

uint64_t DefaultDeviceState.isDeviceShowingLockScreen.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isDeviceShowingLockScreen);
}

uint64_t DefaultDeviceState.__allocating_init(inputOrigin:interactionType:renderDeviceIdiom:multiUserState:siriLocale:siriVoiceGender:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isDirectAction:isLockedWithPasscodeClosure:sessionHandOffContinuityID:preferencesLanguageCode:personalDomainsAuthenticationMode:bargeInContext:peerName:endpointId:restrictedCommands:authenticationState:isDeviceShowingLockScreen:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, unsigned __int8 a9, unsigned __int8 a10, uint64_t (*a11)(), uint64_t (*a12)(), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,long long *a24,unsigned __int8 a25)
{
  uint64_t v29 = swift_allocObject();
  DefaultDeviceState.init(inputOrigin:interactionType:renderDeviceIdiom:multiUserState:siriLocale:siriVoiceGender:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isDirectAction:isLockedWithPasscodeClosure:sessionHandOffContinuityID:preferencesLanguageCode:personalDomainsAuthenticationMode:bargeInContext:peerName:endpointId:restrictedCommands:authenticationState:isDeviceShowingLockScreen:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21,
    a22,
    a23,
    a24,
    a25);
  return v29;
}

uint64_t DefaultDeviceState.init(inputOrigin:interactionType:renderDeviceIdiom:multiUserState:siriLocale:siriVoiceGender:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isDirectAction:isLockedWithPasscodeClosure:sessionHandOffContinuityID:preferencesLanguageCode:personalDomainsAuthenticationMode:bargeInContext:peerName:endpointId:restrictedCommands:authenticationState:isDeviceShowingLockScreen:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8, unsigned __int8 a9, unsigned __int8 a10, uint64_t (*a11)(), uint64_t (*a12)(), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,long long *a24,unsigned __int8 a25)
{
  uint64_t v26 = v25;
  int v86 = a8;
  LODWORD(v104) = a7;
  uint64_t v109 = a6;
  int v108 = a25;
  uint64_t v106 = a22;
  uint64_t v107 = a24;
  uint64_t v105 = a21;
  uint64_t v102 = a19;
  uint64_t v103 = a20;
  uint64_t v100 = a17;
  uint64_t v101 = a18;
  uint64_t v98 = a15;
  uint64_t v99 = a16;
  uint64_t v95 = a13;
  uint64_t v96 = a14;
  uint64_t v92 = a12;
  int v82 = a10;
  int v81 = a9;
  uint64_t v84 = type metadata accessor for DeviceRestrictions();
  uint64_t v87 = *(void *)(v84 - 8);
  uint64_t v32 = MEMORY[0x1F4188790](v84);
  uint64_t v34 = (char *)&v76 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  uint64_t v78 = (char *)&v76 - v35;
  uint64_t v36 = OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isHomePodGestalt;
  *(unsigned char *)(v26 + v36) = MGGetSInt32Answer() == 7;
  *(unsigned char *)(v26 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isAppleTVGestalt) = 0;
  uint64_t v37 = OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isPhoneGestalt;
  *(unsigned char *)(v26 + v37) = MGGetSInt32Answer() == 1;
  uint64_t v38 = OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isPadGestalt;
  *(unsigned char *)(v26 + v38) = MGGetSInt32Answer() == 3;
  uint64_t v39 = OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isPodGestalt;
  *(unsigned char *)(v26 + v39) = MGGetSInt32Answer() == 2;
  *(unsigned char *)(v26 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isXRGestalt) = 0;
  uint64_t v40 = v26 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_inputOrigin;
  uint64_t v41 = type metadata accessor for InputOrigin();
  uint64_t v88 = *(void *)(v41 - 8);
  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v88 + 16);
  uint64_t v97 = a1;
  uint64_t v89 = v41;
  v42(v40, a1);
  uint64_t v43 = v26 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_interactionType;
  uint64_t v44 = type metadata accessor for InteractionType();
  uint64_t v83 = *(void *)(v44 - 8);
  unint64_t v45 = *(void (**)(uint64_t, uint64_t))(v83 + 16);
  uint64_t v94 = a2;
  uint64_t v85 = v44;
  v45(v43, a2);
  uint64_t v46 = v26 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_renderDeviceIdiom;
  uint64_t v47 = type metadata accessor for DeviceIdiom();
  uint64_t v79 = *(void *)(v47 - 8);
  uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v79 + 16);
  uint64_t v93 = a3;
  uint64_t v80 = v47;
  v48(v46, a3);
  uint64_t v91 = a4;
  outlined init with copy of MultiUserState(a4, v26 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_multiUserState);
  uint64_t v49 = v26 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_siriLocale;
  uint64_t v50 = type metadata accessor for Locale();
  uint64_t v51 = *(void *)(v50 - 8);
  uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v51 + 16);
  uint64_t v90 = a5;
  uint64_t v77 = v50;
  v52(v49, a5);
  uint64_t v53 = v26 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_siriVoiceGender;
  uint64_t v54 = type metadata accessor for SiriVoiceGender();
  uint64_t v55 = *(void *)(v54 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v53, v109, v54);
  *(unsigned char *)(v26 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isEyesFree) = v104;
  *(unsigned char *)(v26 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isVoiceTriggerEnabled) = v86;
  *(unsigned char *)(v26 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isTextToSpeechEnabled) = v81;
  *(unsigned char *)(v26 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isDirectAction) = v82;
  char v56 = v78;
  uint64_t v104 = a23;
  Restrictions.deviceRestrictions.getter();
  static DeviceRestrictions.starkMode.getter();
  lazy protocol witness table accessor for type DeviceRestrictions and conformance DeviceRestrictions();
  uint64_t v57 = v34;
  uint64_t v58 = v84;
  LOBYTE(a5) = dispatch thunk of SetAlgebra.isSuperset(of:)();
  os_log_type_t v59 = *(void (**)(char *, uint64_t))(v87 + 8);
  v59(v57, v58);
  v59(v56, v58);
  if (a5)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_release();
    uint64_t v60 = 0;
    uint64_t v61 = getEnumTag for CamFeatureFlag;
  }
  else
  {
    uint64_t v61 = a11;
    uint64_t v60 = v92;
  }
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v109, v54);
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v90, v77);
  outlined destroy of MultiUserState(v91);
  (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v93, v80);
  (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v94, v85);
  (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v97, v89);
  uint64_t v62 = (uint64_t (**)())(v26 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isLockedWithPasscodeClosure);
  *uint64_t v62 = v61;
  v62[1] = v60;
  uint64_t v63 = (void *)(v26 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_sessionHandOffContinuityID);
  uint64_t v64 = v96;
  *uint64_t v63 = v95;
  v63[1] = v64;
  unint64_t v65 = (void *)(v26 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_preferencesLanguageCode);
  uint64_t v67 = v99;
  uint64_t v66 = v100;
  *unint64_t v65 = v98;
  v65[1] = v67;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v66, v26 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_personalDomainsAuthenticationMode, &demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v101, v26 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_bargeInContext, &demangling cache variable for type metadata for BargeInContext?);
  unint64_t v68 = (void *)(v26 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_peerName);
  uint64_t v69 = v103;
  *unint64_t v68 = v102;
  v68[1] = v69;
  uint64_t v70 = v26 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_restrictedCommands;
  uint64_t v71 = type metadata accessor for Restrictions();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 32))(v70, v104, v71);
  BOOL v72 = (void *)(v26 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_endpointId);
  uint64_t v74 = v106;
  uint64_t v73 = v107;
  void *v72 = v105;
  v72[1] = v74;
  outlined init with take of ReferenceResolutionClientProtocol(v73, v26 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_authenticationState);
  *(unsigned char *)(v26 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isDeviceShowingLockScreen) = v108 & 1;
  return v26;
}

uint64_t DefaultDeviceState.isHomePod.getter()
{
  return DefaultDeviceState.isHomePod.getter(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isHomePodGestalt, MEMORY[0x1E4FA5110]);
}

uint64_t DefaultDeviceState.isWatch.getter()
{
  return DefaultDeviceState.isWatch.getter(MEMORY[0x1E4FA5108]);
}

uint64_t DefaultDeviceState.isMac.getter()
{
  return DefaultDeviceState.isWatch.getter(MEMORY[0x1E4FA50E8]);
}

uint64_t DefaultDeviceState.isAppleTV.getter()
{
  return DefaultDeviceState.isWatch.getter(MEMORY[0x1E4FA50D8]);
}

uint64_t DefaultDeviceState.isWatch.getter(unsigned int *a1)
{
  uint64_t v2 = type metadata accessor for DeviceIdiom();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void (**)(char *, void, uint64_t))(v3 + 104);
  v6(v5, *MEMORY[0x1E4FA5120], v2);
  char v7 = static DeviceIdiom.== infix(_:_:)();
  uint64_t v8 = *(void (**)(char *, uint64_t))(v3 + 8);
  v8(v5, v2);
  if (v7)
  {
    char v9 = 0;
  }
  else
  {
    v6(v5, *a1, v2);
    char v9 = static DeviceIdiom.== infix(_:_:)();
    v8(v5, v2);
  }
  return v9 & 1;
}

uint64_t DefaultDeviceState.isPhone.getter()
{
  return DefaultDeviceState.isHomePod.getter(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isPhoneGestalt, MEMORY[0x1E4FA5100]);
}

uint64_t DefaultDeviceState.isPad.getter()
{
  return DefaultDeviceState.isHomePod.getter(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isPadGestalt, MEMORY[0x1E4FA50F0]);
}

uint64_t DefaultDeviceState.isPod.getter()
{
  return DefaultDeviceState.isHomePod.getter(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isPodGestalt, MEMORY[0x1E4FA50F8]);
}

uint64_t DefaultDeviceState.isHomePod.getter(void *a1, unsigned int *a2)
{
  uint64_t v14 = a2;
  uint64_t v4 = type metadata accessor for DeviceIdiom();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void (**)(char *, void, uint64_t))(v5 + 104);
  v8(v7, *MEMORY[0x1E4FA5120], v4);
  char v9 = static DeviceIdiom.== infix(_:_:)();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v5 + 8);
  v10(v7, v4);
  if (v9)
  {
    char v11 = *(unsigned char *)(v2 + *a1);
  }
  else
  {
    v8(v7, *v14, v4);
    char v11 = static DeviceIdiom.== infix(_:_:)();
    v10(v7, v4);
  }
  return v11 & 1;
}

uint64_t DefaultDeviceState.isLockedWithPasscode.getter()
{
  return (*(uint64_t (**)(void))(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isLockedWithPasscodeClosure))() & 1;
}

uint64_t DefaultDeviceState.peerDeviceName.getter()
{
  uint64_t v1 = type metadata accessor for DeviceIdiom();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void (**)(char *, void, uint64_t))(v2 + 104);
  v5(v4, *MEMORY[0x1E4FA5120], v1);
  char v6 = static DeviceIdiom.== infix(_:_:)();
  char v7 = *(void (**)(char *, uint64_t))(v2 + 8);
  v7(v4, v1);
  if ((v6 & 1) == 0)
  {
    v5(v4, *MEMORY[0x1E4FA5110], v1);
    char v9 = static DeviceIdiom.== infix(_:_:)();
    v7(v4, v1);
    if ((v9 & 1) == 0) {
      return 0;
    }
LABEL_5:
    uint64_t v8 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_peerName);
    swift_bridgeObjectRetain();
    return v8;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isHomePodGestalt) == 1) {
    goto LABEL_5;
  }
  return 0;
}

BOOL DefaultDeviceState.isSidekick.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_endpointId + 8) != 0;
}

uint64_t DefaultDeviceState.isXRDevice.getter()
{
  return 0;
}

uint64_t DefaultDeviceState.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_inputOrigin;
  uint64_t v2 = type metadata accessor for InputOrigin();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_interactionType;
  uint64_t v4 = type metadata accessor for InteractionType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  outlined destroy of MultiUserState(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_multiUserState);
  uint64_t v5 = v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_siriLocale;
  uint64_t v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_siriVoiceGender;
  uint64_t v8 = type metadata accessor for SiriVoiceGender();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_renderDeviceIdiom;
  uint64_t v10 = type metadata accessor for DeviceIdiom();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_personalDomainsAuthenticationMode, &demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_bargeInContext, &demangling cache variable for type metadata for BargeInContext?);
  swift_bridgeObjectRelease();
  uint64_t v11 = v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_restrictedCommands;
  uint64_t v12 = type metadata accessor for Restrictions();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_authenticationState);
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t DefaultDeviceState.__deallocating_deinit()
{
  DefaultDeviceState.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for DeviceState.isHomePod.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2)
{
  return protocol witness for DeviceState.isHomePod.getter in conformance DefaultDeviceState(a1, a2, &OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isHomePodGestalt, MEMORY[0x1E4FA5110]);
}

uint64_t protocol witness for DeviceState.isWatch.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2)
{
  return protocol witness for DeviceState.isWatch.getter in conformance DefaultDeviceState(a1, a2, MEMORY[0x1E4FA5108]);
}

uint64_t protocol witness for DeviceState.isMac.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2)
{
  return protocol witness for DeviceState.isWatch.getter in conformance DefaultDeviceState(a1, a2, MEMORY[0x1E4FA50E8]);
}

uint64_t protocol witness for DeviceState.isCarPlay.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2)
{
  return protocol witness for DeviceState.isCarPlay.getter in conformance DefaultDeviceState(a1, a2, MEMORY[0x1E4FA5290]);
}

uint64_t protocol witness for DeviceState.isAppleTV.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2)
{
  return protocol witness for DeviceState.isWatch.getter in conformance DefaultDeviceState(a1, a2, MEMORY[0x1E4FA50D8]);
}

uint64_t protocol witness for DeviceState.isWatch.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v4 = type metadata accessor for DeviceIdiom();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void (**)(char *, void, uint64_t))(v5 + 104);
  v8(v7, *MEMORY[0x1E4FA5120], v4);
  char v9 = static DeviceIdiom.== infix(_:_:)();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v5 + 8);
  v10(v7, v4);
  if (v9)
  {
    char v11 = 0;
  }
  else
  {
    v8(v7, *a3, v4);
    char v11 = static DeviceIdiom.== infix(_:_:)();
    v10(v7, v4);
  }
  return v11 & 1;
}

uint64_t protocol witness for DeviceState.isPhone.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2)
{
  return protocol witness for DeviceState.isHomePod.getter in conformance DefaultDeviceState(a1, a2, &OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isPhoneGestalt, MEMORY[0x1E4FA5100]);
}

uint64_t protocol witness for DeviceState.isPad.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2)
{
  return protocol witness for DeviceState.isHomePod.getter in conformance DefaultDeviceState(a1, a2, &OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isPadGestalt, MEMORY[0x1E4FA50F0]);
}

uint64_t protocol witness for DeviceState.isPod.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2)
{
  return protocol witness for DeviceState.isHomePod.getter in conformance DefaultDeviceState(a1, a2, &OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isPodGestalt, MEMORY[0x1E4FA50F8]);
}

uint64_t protocol witness for DeviceState.isHomePod.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2, void *a3, unsigned int *a4)
{
  uint64_t v17 = a4;
  uint64_t v6 = type metadata accessor for DeviceIdiom();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  char v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v4;
  char v11 = *(void (**)(char *, void, uint64_t))(v7 + 104);
  v11(v9, *MEMORY[0x1E4FA5120], v6);
  char v12 = static DeviceIdiom.== infix(_:_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v7 + 8);
  v13(v9, v6);
  if (v12)
  {
    char v14 = *(unsigned char *)(v10 + *a3);
  }
  else
  {
    v11(v9, *v17, v6);
    char v14 = static DeviceIdiom.== infix(_:_:)();
    v13(v9, v6);
  }
  return v14 & 1;
}

uint64_t protocol witness for DeviceState.isCarDNDMode.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2)
{
  return protocol witness for DeviceState.isCarPlay.getter in conformance DefaultDeviceState(a1, a2, MEMORY[0x1E4FA5280]);
}

uint64_t protocol witness for DeviceState.isHeadGestureRecognitionAvailable.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2)
{
  return protocol witness for DeviceState.isCarPlay.getter in conformance DefaultDeviceState(a1, a2, MEMORY[0x1E4FA5288]);
}

uint64_t protocol witness for DeviceState.isCarPlay.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4 = type metadata accessor for DeviceRestrictions();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v14 - v9;
  uint64_t v11 = Restrictions.deviceRestrictions.getter();
  a3(v11);
  lazy protocol witness table accessor for type DeviceRestrictions and conformance DeviceRestrictions();
  LOBYTE(a3) = dispatch thunk of SetAlgebra.isSuperset(of:)();
  char v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  v12(v10, v4);
  return a3 & 1;
}

uint64_t protocol witness for DeviceState.isDirectAction.getter in conformance DefaultDeviceState()
{
  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isDirectAction);
}

uint64_t protocol witness for DeviceState.isTextToSpeechEnabled.getter in conformance DefaultDeviceState()
{
  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isTextToSpeechEnabled);
}

uint64_t protocol witness for DeviceState.isLockedWithPasscode.getter in conformance DefaultDeviceState()
{
  return (*(uint64_t (**)(void))(*v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isLockedWithPasscodeClosure))() & 1;
}

uint64_t protocol witness for DeviceState.isEyesFree.getter in conformance DefaultDeviceState()
{
  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isEyesFree);
}

uint64_t protocol witness for DeviceState.isVoiceTriggerEnabled.getter in conformance DefaultDeviceState()
{
  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isVoiceTriggerEnabled);
}

uint64_t protocol witness for DeviceState.interactionType.getter in conformance DefaultDeviceState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for DeviceState.interactionType.getter in conformance DefaultDeviceState(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_interactionType, MEMORY[0x1E4FA5250], a1);
}

uint64_t protocol witness for DeviceState.inputOrigin.getter in conformance DefaultDeviceState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for DeviceState.interactionType.getter in conformance DefaultDeviceState(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_inputOrigin, MEMORY[0x1E4FA51A0], a1);
}

uint64_t protocol witness for DeviceState.multiUserState.getter in conformance DefaultDeviceState@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of MultiUserState(*v1 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_multiUserState, a1);
}

uint64_t protocol witness for DeviceState.siriLocale.getter in conformance DefaultDeviceState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for DeviceState.interactionType.getter in conformance DefaultDeviceState(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_siriLocale, MEMORY[0x1E4F27A78], a1);
}

uint64_t protocol witness for DeviceState.sessionHandOffContinuityID.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2)
{
  return protocol witness for DeviceState.sessionHandOffContinuityID.getter in conformance DefaultDeviceState(a1, a2, &OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_sessionHandOffContinuityID);
}

uint64_t protocol witness for DeviceState.siriVoiceGender.getter in conformance DefaultDeviceState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for DeviceState.interactionType.getter in conformance DefaultDeviceState(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_siriVoiceGender, MEMORY[0x1E4FA5060], a1);
}

uint64_t protocol witness for DeviceState.preferencesLanguageCode.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2)
{
  return protocol witness for DeviceState.sessionHandOffContinuityID.getter in conformance DefaultDeviceState(a1, a2, &OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_preferencesLanguageCode);
}

uint64_t protocol witness for DeviceState.sessionHandOffContinuityID.getter in conformance DefaultDeviceState(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(*v3 + *a3);
  swift_bridgeObjectRetain();
  return v4;
}

uint64_t protocol witness for DeviceState.personalDomainsAuthenticationMode.getter in conformance DefaultDeviceState@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(*v1 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_personalDomainsAuthenticationMode, a1, &demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
}

uint64_t protocol witness for DeviceState.bargeInContext.getter in conformance DefaultDeviceState@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(*v1 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_bargeInContext, a1, &demangling cache variable for type metadata for BargeInContext?);
}

uint64_t protocol witness for DeviceState.peerDeviceName.getter in conformance DefaultDeviceState()
{
  return DefaultDeviceState.peerDeviceName.getter();
}

uint64_t protocol witness for DeviceState.restrictions.getter in conformance DefaultDeviceState()
{
  return Restrictions.deviceRestrictions.getter();
}

uint64_t protocol witness for DeviceState.restrictedCommands.getter in conformance DefaultDeviceState@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for DeviceState.interactionType.getter in conformance DefaultDeviceState(&OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_restrictedCommands, MEMORY[0x1E4FA51E0], a1);
}

uint64_t protocol witness for DeviceState.interactionType.getter in conformance DefaultDeviceState@<X0>(void *a1@<X2>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5 = *v3 + *a1;
  uint64_t v6 = a2(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);

  return v7(a3, v5, v6);
}

BOOL protocol witness for DeviceState.isSidekick.getter in conformance DefaultDeviceState()
{
  return *(void *)(*v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_endpointId + 8) != 0;
}

uint64_t protocol witness for DeviceState.authenticationState.getter in conformance DefaultDeviceState@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(*v1 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_authenticationState, a1);
}

uint64_t protocol witness for DeviceState.isAuthenticated(for:) in conformance DefaultDeviceState()
{
  return MEMORY[0x1F4151DE0]();
}

uint64_t protocol witness for DeviceState.isDeviceShowingLockScreen.getter in conformance DefaultDeviceState()
{
  return *(unsigned __int8 *)(*v0 + OBJC_IVAR____TtC14SiriKitRuntime18DefaultDeviceState_isDeviceShowingLockScreen);
}

uint64_t AuthenticationStateImpl.isAuthenticatedByWatch.getter(char a1)
{
  return a1 & 1;
}

uint64_t AuthenticationStateImpl.isAuthenticatedByHeadphones.getter(unsigned int a1)
{
  return (a1 >> 8) & 1;
}

unint64_t static AuthenticationStateImpl.from(invocationState:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v3 = type metadata accessor for DeviceRestrictions();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v28 - v8;
  uint64_t v11 = a1[3];
  uint64_t v10 = a1[4];
  char v12 = __swift_project_boxed_opaque_existential_1(a1, v11);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v10 + 184);
  v28[1] = v12;
  uint64_t v29 = v13;
  v13(v11, v10);
  static DeviceRestrictions.unauthenticatedByWatchProximity.getter();
  lazy protocol witness table accessor for type DeviceRestrictions and conformance DeviceRestrictions();
  int v30 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  uint64_t v14 = *(void (**)(char *, uint64_t))(v4 + 8);
  v14(v7, v3);
  v14(v9, v3);
  v29(v11, v10);
  static DeviceRestrictions.unauthenticatedByHeadphonesState.getter();
  unsigned __int8 v15 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  v14(v7, v3);
  v14(v9, v3);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  char v20 = v30;
  if (v19)
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 67109120;
    BOOL v32 = (v20 & 1) == 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v17, v18, "Is watch authenticated? %{BOOL}d", v21, 8u);
    MEMORY[0x1BA9E48C0](v21, -1, -1);
  }

  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 67109120;
    char v25 = v15 ^ 1;
    int v33 = (v15 ^ 1) & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v22, v23, "Is headphones authenticated? %{BOOL}d", v24, 8u);
    MEMORY[0x1BA9E48C0](v24, -1, -1);
  }
  else
  {

    char v25 = v15 ^ 1;
  }
  uint64_t v26 = v31;
  *(void *)(v31 + 24) = &type metadata for AuthenticationStateImpl;
  unint64_t result = lazy protocol witness table accessor for type AuthenticationStateImpl and conformance AuthenticationStateImpl();
  *(void *)(v26 + 32) = result;
  *(unsigned char *)uint64_t v26 = (v20 & 1) == 0;
  *(unsigned char *)(v26 + 1) = v25 & 1;
  return result;
}

SiriKitRuntime::AuthenticationStateImpl __swiftcall AuthenticationStateImpl.init(isAuthenticatedByWatch:isAuthenticatedByHeadphones:)(Swift::Bool isAuthenticatedByWatch, Swift::Bool isAuthenticatedByHeadphones)
{
  if (isAuthenticatedByHeadphones) {
    __int16 v2 = 256;
  }
  else {
    __int16 v2 = 0;
  }
  return (SiriKitRuntime::AuthenticationStateImpl)(v2 & 0xFFFE | isAuthenticatedByWatch);
}

uint64_t protocol witness for AuthenticationState.isAuthenticatedByWatch.getter in conformance AuthenticationStateImpl()
{
  return *v0;
}

uint64_t protocol witness for AuthenticationState.isAuthenticatedByHeadphones.getter in conformance AuthenticationStateImpl()
{
  return *(unsigned __int8 *)(v0 + 1);
}

unint64_t lazy protocol witness table accessor for type AuthenticationStateImpl and conformance AuthenticationStateImpl()
{
  unint64_t result = lazy protocol witness table cache variable for type AuthenticationStateImpl and conformance AuthenticationStateImpl;
  if (!lazy protocol witness table cache variable for type AuthenticationStateImpl and conformance AuthenticationStateImpl)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AuthenticationStateImpl and conformance AuthenticationStateImpl);
  }
  return result;
}

uint64_t ObjC metadata update function for DefaultDeviceState()
{
  return type metadata accessor for DefaultDeviceState();
}

uint64_t type metadata accessor for DefaultDeviceState()
{
  uint64_t result = type metadata singleton initialization cache for DefaultDeviceState;
  if (!type metadata singleton initialization cache for DefaultDeviceState) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for DefaultDeviceState()
{
  type metadata accessor for InputOrigin();
  if (v0 <= 0x3F)
  {
    type metadata accessor for InteractionType();
    if (v1 <= 0x3F)
    {
      type metadata accessor for MultiUserState();
      if (v2 <= 0x3F)
      {
        type metadata accessor for Locale();
        if (v3 <= 0x3F)
        {
          type metadata accessor for SiriVoiceGender();
          if (v4 <= 0x3F)
          {
            type metadata accessor for DeviceIdiom();
            if (v5 <= 0x3F)
            {
              type metadata accessor for PersonalDomainsAuthenticationMode?(319, &lazy cache variable for type metadata for PersonalDomainsAuthenticationMode?, MEMORY[0x1E4FA52F0]);
              if (v6 <= 0x3F)
              {
                type metadata accessor for PersonalDomainsAuthenticationMode?(319, &lazy cache variable for type metadata for BargeInContext?, MEMORY[0x1E4FA5208]);
                if (v7 <= 0x3F)
                {
                  type metadata accessor for Restrictions();
                  if (v8 <= 0x3F) {
                    swift_updateClassMetadata2();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t method lookup function for DefaultDeviceState(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DefaultDeviceState);
}

uint64_t dispatch thunk of DefaultDeviceState.__allocating_init(inputOrigin:interactionType:renderDeviceIdiom:multiUserState:siriLocale:siriVoiceGender:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isDirectAction:isLockedWithPasscodeClosure:sessionHandOffContinuityID:preferencesLanguageCode:personalDomainsAuthenticationMode:bargeInContext:peerName:endpointId:restrictedCommands:authenticationState:isDeviceShowingLockScreen:)()
{
  return (*(uint64_t (**)(void))(v0 + 288))();
}

void type metadata accessor for PersonalDomainsAuthenticationMode?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AuthenticationStateImpl(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AuthenticationStateImpl(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9EAF3C0);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthenticationStateImpl()
{
  return &type metadata for AuthenticationStateImpl;
}

uint64_t DefaultMeCardProxy.__allocating_init(remoteMeCard:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t DefaultMeCardProxy.init(remoteMeCard:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

void *DefaultMeCardProxy.fetchMeCard(options:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MeCardOptions();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static MeCardOptions.ignoreLocalMeCard.getter();
  lazy protocol witness table accessor for type MeCardOptions and conformance MeCardOptions();
  char v6 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  BOOL v7 = *(void (**)(char *, uint64_t))(v3 + 8);
  v7(v5, v2);
  if (v6) {
    goto LABEL_5;
  }
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v8 = static MeCardService.instance;
  static MeCardOptions.ignoreCachedMeCard.getter();
  char v9 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  v7(v5, v2);
  uint64_t v10 = (void *)(*(uint64_t (**)(BOOL))(*(void *)v8 + 168))((v9 & 1) == 0);
  if (!v10)
  {
LABEL_5:
    uint64_t v10 = *(void **)(v1 + 16);
    id v11 = v10;
  }
  return v10;
}

unint64_t lazy protocol witness table accessor for type MeCardOptions and conformance MeCardOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type MeCardOptions and conformance MeCardOptions;
  if (!lazy protocol witness table cache variable for type MeCardOptions and conformance MeCardOptions)
  {
    type metadata accessor for MeCardOptions();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MeCardOptions and conformance MeCardOptions);
  }
  return result;
}

uint64_t DefaultMeCardProxy.deinit()
{
  return v0;
}

uint64_t DefaultMeCardProxy.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for MeCardProxy.fetchMeCard(options:) in conformance DefaultMeCardProxy()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t type metadata accessor for DefaultMeCardProxy()
{
  return self;
}

uint64_t method lookup function for DefaultMeCardProxy(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DefaultMeCardProxy);
}

uint64_t dispatch thunk of DefaultMeCardProxy.__allocating_init(remoteMeCard:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of DefaultMeCardProxy.fetchMeCard(options:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t *DeviceContextHelper.sharedInstance.unsafeMutableAddressor()
{
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }
  return &static DeviceContextHelper.sharedInstance;
}

uint64_t one-time initialization function for legacyNLContextKey()
{
  uint64_t result = MEMORY[0x1BA9E2DD0](0x4C4E79636167656CLL, 0xEF747865746E6F43);
  static DeviceContextHelper.legacyNLContextKey = result;
  return result;
}

uint64_t *DeviceContextHelper.legacyNLContextKey.unsafeMutableAddressor()
{
  if (one-time initialization token for legacyNLContextKey != -1) {
    swift_once();
  }
  return &static DeviceContextHelper.legacyNLContextKey;
}

id static DeviceContextHelper.legacyNLContextKey.getter()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for legacyNLContextKey, (void **)&static DeviceContextHelper.legacyNLContextKey);
}

uint64_t one-time initialization function for onDeviceConversationKey()
{
  uint64_t result = MEMORY[0x1BA9E2DD0](0xD000000000000019, 0x80000001BA060300);
  static DeviceContextHelper.onDeviceConversationKey = result;
  return result;
}

uint64_t *DeviceContextHelper.onDeviceConversationKey.unsafeMutableAddressor()
{
  if (one-time initialization token for onDeviceConversationKey != -1) {
    swift_once();
  }
  return &static DeviceContextHelper.onDeviceConversationKey;
}

id static DeviceContextHelper.onDeviceConversationKey.getter()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for onDeviceConversationKey, (void **)&static DeviceContextHelper.onDeviceConversationKey);
}

uint64_t one-time initialization function for serverBoundContextUpdate()
{
  uint64_t result = MEMORY[0x1BA9E2DD0](0xD00000000000001ALL, 0x80000001BA060330);
  static DeviceContextHelper.serverBoundContextUpdate = result;
  return result;
}

uint64_t *DeviceContextHelper.serverBoundContextUpdate.unsafeMutableAddressor()
{
  if (one-time initialization token for serverBoundContextUpdate != -1) {
    swift_once();
  }
  return &static DeviceContextHelper.serverBoundContextUpdate;
}

id static DeviceContextHelper.serverBoundContextUpdate.getter()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for serverBoundContextUpdate, (void **)&static DeviceContextHelper.serverBoundContextUpdate);
}

id static DeviceContextHelper.legacyNLContextKey.getter(void *a1, void **a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;

  return v3;
}

void one-time initialization function for sharedInstance()
{
  type metadata accessor for DeviceContextHelper();
  uint64_t inited = swift_initStaticObject();
  specialized DeviceContextHelper.registerTransfomers()();
  static DeviceContextHelper.sharedInstance = inited;
}

uint64_t DeviceContextHelper.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  specialized DeviceContextHelper.registerTransfomers()();
  return v0;
}

uint64_t static DeviceContextHelper.sharedInstance.getter()
{
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t DeviceContextHelper.init()()
{
  specialized DeviceContextHelper.registerTransfomers()();
  return v0;
}

uint64_t DeviceContextHelper.donateContextToCollector(_:_:)(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v7 - 8);
  char v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v17 = &type metadata for HALFeatureFlags;
  unint64_t v18 = lazy protocol witness table accessor for type HALFeatureFlags and conformance HALFeatureFlags();
  char v10 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
  if ((v10 & 1) == 0) {
    return a2(0);
  }
  id v11 = objc_msgSend(self, sel_defaultService);
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v9, 1, 1, v12);
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v3;
  v13[5] = v11;
  v13[6] = a1;
  v13[7] = a2;
  v13[8] = a3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in DeviceContextHelper.donateContextToCollector(_:_:), (uint64_t)v13);
  return swift_release();
}

id DeviceContextHelper.getContextDonationService()()
{
  id v0 = objc_msgSend(self, sel_defaultService);

  return v0;
}

uint64_t closure #1 in DeviceContextHelper.donateContextToCollector(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[4] = a7;
  v8[5] = a8;
  v8[2] = a5;
  v8[3] = a6;
  return MEMORY[0x1F4188298](closure #1 in DeviceContextHelper.donateContextToCollector(_:_:), 0, 0);
}

uint64_t closure #1 in DeviceContextHelper.donateContextToCollector(_:_:)()
{
  specialized DeviceContextHelper.donateDataWithContext(_:_:_:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32), *(void *)(v0 + 40));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id closure #2 in DeviceContextHelper.fetchContextFromCollector(from:_:_:)(unint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v6 = (uint64_t *)(a4 + 16);
  if (!a1)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationBridge);
    BOOL v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v19, v20)) {
      goto LABEL_38;
    }
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    uint64_t v22 = "Nil contexts returned from ContextCollector";
    goto LABEL_37;
  }
  if (!(a1 >> 62))
  {
    uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_4;
    }
LABEL_28:
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationBridge);
    BOOL v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v19, v20)) {
      goto LABEL_38;
    }
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    uint64_t v22 = "Empty contexts returned from ContextCollector";
    goto LABEL_37;
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  if (!v9) {
    goto LABEL_28;
  }
LABEL_4:
  *(void *)&v77[0] = MEMORY[0x1E4FBC860];
  if (v9 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v71 = a2;
    for (uint64_t i = 0; i != v9; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v11 = (id)MEMORY[0x1BA9E3990](i, a1);
      }
      else {
        id v11 = *(id *)(a1 + 8 * i + 32);
      }
      uint64_t v12 = v11;
      if (objc_msgSend(v11, sel_proximity) == (id)4000)
      {
      }
      else
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v78 = *(void *)&v77[0];
    a2 = v71;
    if ((*(void *)&v77[0] & 0x8000000000000000) == 0 && (*(void *)&v77[0] & 0x4000000000000000) == 0)
    {
      if (*(void *)(*(void *)&v77[0] + 16)) {
        goto LABEL_16;
      }
LABEL_34:
      swift_release();
      if (one-time initialization token for conversationBridge == -1)
      {
LABEL_35:
        uint64_t v25 = type metadata accessor for Logger();
        __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationBridge);
        BOOL v19 = Logger.logObject.getter();
        os_log_type_t v20 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v19, v20))
        {
LABEL_38:

          swift_beginAccess();
          uint64_t v26 = swift_bridgeObjectRetain();
          a2(v26);
          return (id)swift_bridgeObjectRelease();
        }
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v21 = 0;
        uint64_t v22 = "Filtered context is empty";
LABEL_37:
        _os_log_impl(&dword_1B9C64000, v19, v20, v22, v21, 2u);
        MEMORY[0x1BA9E48C0](v21, -1, -1);
        goto LABEL_38;
      }
LABEL_105:
      swift_once();
      goto LABEL_35;
    }
  }
  swift_retain();
  uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_release();
  if (!v24) {
    goto LABEL_34;
  }
LABEL_16:
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v78);
  uint64_t v13 = v78;
  if (!(v78 >> 62))
  {
    uint64_t v14 = *(void *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_18;
    }
LABEL_40:
    swift_bridgeObjectRelease();
    uint64_t v16 = 0;
    uint64_t v17 = *(void *)(a5 + 16);
    if (!v17)
    {
LABEL_101:
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v70 = swift_bridgeObjectRetain();
      v71(v70);

      return (id)swift_bridgeObjectRelease();
    }
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_40;
  }
LABEL_18:
  if ((v13 & 0xC000000000000001) == 0)
  {
    if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v15 = *(id *)(v13 + 32);
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_105;
  }
  id v15 = (id)MEMORY[0x1BA9E3990](0, v13);
LABEL_21:
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(a5 + 16);
  if (!v17) {
    goto LABEL_101;
  }
LABEL_41:
  swift_bridgeObjectRetain();
  uint64_t v27 = 0;
  uint64_t v73 = a5;
  uint64_t v72 = v17;
  while (1)
  {
    int v28 = *(unsigned __int8 *)(a5 + v27 + 32);
    if (!v16)
    {
      long long v75 = 0u;
      long long v76 = 0u;
LABEL_75:
      outlined destroy of Any?((uint64_t)&v75);
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v47 = type metadata accessor for Logger();
      __swift_project_value_buffer(v47, (uint64_t)static Logger.conversationBridge);
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = swift_slowAlloc();
        uint64_t v51 = swift_slowAlloc();
        *(void *)&v77[0] = v51;
        *(_DWORD *)uint64_t v50 = 136315138;
        unint64_t v52 = 0x4C4E79636167656CLL;
        if (v28 != 1) {
          unint64_t v52 = 0xD00000000000001ALL;
        }
        unint64_t v53 = 0xEF747865746E6F43;
        if (v28 != 1) {
          unint64_t v53 = 0x80000001BA060330;
        }
        if (v28) {
          uint64_t v54 = v52;
        }
        else {
          uint64_t v54 = 0xD000000000000019;
        }
        if (v28) {
          unint64_t v55 = v53;
        }
        else {
          unint64_t v55 = 0x80000001BA060300;
        }
        *(void *)(v50 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, (uint64_t *)v77);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v48, v49, "Missing context data for key=%s", (uint8_t *)v50, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v51, -1, -1);
        MEMORY[0x1BA9E48C0](v50, -1, -1);

        uint64_t v17 = v72;
        a5 = v73;
      }
      else
      {
      }
      swift_beginAccess();
      swift_bridgeObjectRetain();
      unint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(v28);
      char v58 = v57;
      swift_bridgeObjectRelease();
      if (v58)
      {
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v60 = *v6;
        *(void *)&long long v75 = *v6;
        *char v6 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v60 = v75;
        }
        specialized _NativeDictionary._delete(at:)(v56, v60);
        *char v6 = v60;
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
      }
      swift_endAccess();
      goto LABEL_44;
    }
    id result = objc_msgSend(v16, sel_serializedContextByKey);
    if (!result) {
      break;
    }
    int v30 = result;
    uint64_t v31 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v32 = 0x80000001BA060330;
    unint64_t v33 = 0x4C4E79636167656CLL;
    if (v28 == 1) {
      unint64_t v32 = 0xEF747865746E6F43;
    }
    else {
      unint64_t v33 = 0xD00000000000001ALL;
    }
    if (v28) {
      uint64_t v34 = v33;
    }
    else {
      uint64_t v34 = 0xD000000000000019;
    }
    if (v28) {
      uint64_t v35 = v32;
    }
    else {
      uint64_t v35 = 0x80000001BA060300;
    }
    if (*(void *)(v31 + 16) && (unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v35), (v37 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v31 + 56) + 32 * v36, (uint64_t)&v75);
    }
    else
    {
      long long v75 = 0u;
      long long v76 = 0u;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!*((void *)&v76 + 1)) {
      goto LABEL_75;
    }
    outlined init with take of Any(&v75, v77);
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.conversationBridge);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      *(void *)&long long v75 = v42;
      *(_DWORD *)uint64_t v41 = 136315138;
      unint64_t v43 = 0x80000001BA060330;
      unint64_t v44 = 0x4C4E79636167656CLL;
      if (v28 == 1) {
        unint64_t v43 = 0xEF747865746E6F43;
      }
      else {
        unint64_t v44 = 0xD00000000000001ALL;
      }
      if (v28) {
        uint64_t v45 = v44;
      }
      else {
        uint64_t v45 = 0xD000000000000019;
      }
      if (v28) {
        unint64_t v46 = v43;
      }
      else {
        unint64_t v46 = 0x80000001BA060300;
      }
      *(void *)(v41 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, (uint64_t *)&v75);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v39, v40, "Found data for key=%s", (uint8_t *)v41, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v42, -1, -1);
      MEMORY[0x1BA9E48C0](v41, -1, -1);

      uint64_t v17 = v72;
      a5 = v73;
    }
    else
    {
    }
    if (v28)
    {
      outlined init with copy of Any((uint64_t)v77, (uint64_t)&v75);
      if (v28 == 1)
      {
        id v61 = objc_allocWithZone((Class)type metadata accessor for ServerPromptData());
        id v62 = ServerPromptData.init(serializedBackingStore:)((uint64_t)&v75);
        swift_beginAccess();
        char v63 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v74 = *v6;
        *char v6 = 0x8000000000000000;
        uint64_t v64 = (uint64_t)v62;
        char v65 = 1;
      }
      else
      {
        id v68 = objc_allocWithZone((Class)type metadata accessor for ServerBoundContextUpdateContainer());
        id v69 = ServerBoundContextUpdateContainer.init(serializedBackingStore:)((uint64_t)&v75);
        swift_beginAccess();
        char v63 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v74 = *v6;
        *char v6 = 0x8000000000000000;
        uint64_t v64 = (uint64_t)v69;
        char v65 = 2;
      }
    }
    else
    {
      outlined init with copy of Any((uint64_t)v77, (uint64_t)&v75);
      id v66 = objc_allocWithZone((Class)type metadata accessor for ConversationalContextContainer());
      id v67 = ConversationalContextContainer.init(serializedBackingStore:)((uint64_t)&v75);
      swift_beginAccess();
      char v63 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v74 = *v6;
      *char v6 = 0x8000000000000000;
      uint64_t v64 = (uint64_t)v67;
      char v65 = 0;
    }
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v64, v65, v63);
    *char v6 = v74;
    swift_bridgeObjectRelease();
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v77);
LABEL_44:
    if (v17 == ++v27)
    {
      swift_bridgeObjectRelease();
      goto LABEL_101;
    }
  }
  __break(1u);
  return result;
}

uint64_t DeviceContextHelper.deinit()
{
  return v0;
}

uint64_t DeviceContextHelper.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for DeviceContextDonation.donateContextToCollector(_:_:) in conformance DeviceContextHelper(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  return DeviceContextHelper.donateContextToCollector(_:_:)(a1, a2, a3);
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(id *__src, id *a2, unint64_t a3, void **a4)
{
  uint64_t v4 = a2;
  uint64_t v5 = __src;
  int64_t v6 = (char *)a2 - (char *)__src;
  int64_t v7 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v7 = (char *)a2 - (char *)__src;
  }
  uint64_t v8 = v7 >> 3;
  uint64_t v9 = a3 - (void)a2;
  uint64_t v10 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v10 = a3 - (void)a2;
  }
  uint64_t v11 = v10 >> 3;
  uint64_t v38 = __src;
  char v37 = a4;
  if (v8 >= v10 >> 3)
  {
    if (v9 >= -7)
    {
      if (a4 != a2 || &a2[v11] <= a4) {
        memmove(a4, a2, 8 * v11);
      }
      uint64_t v22 = &a4[v11];
      unint64_t v36 = (char *)v22;
      uint64_t v38 = v4;
      if (v5 < v4 && v9 >= 8)
      {
        uint64_t v23 = (id *)(a3 - 8);
        uint64_t v24 = v4;
        unint64_t v32 = v5;
        do
        {
          uint64_t v35 = v4;
          uint64_t v25 = v23 + 1;
          uint64_t v26 = *--v24;
          id v27 = *(v22 - 1);
          id v28 = v26;
          id v29 = objc_msgSend(v27, sel_proximity);
          id v30 = objc_msgSend(v28, sel_proximity);

          if ((uint64_t)v30 >= (uint64_t)v29)
          {
            unint64_t v36 = (char *)(v22 - 1);
            if (v25 < v22 || v23 >= v22 || v25 != v22) {
              *uint64_t v23 = *(v22 - 1);
            }
            uint64_t v24 = v35;
            --v22;
          }
          else
          {
            if (v25 != v35 || v23 >= v35) {
              *uint64_t v23 = *v24;
            }
            uint64_t v38 = v24;
          }
          if (v24 <= v32) {
            break;
          }
          --v23;
          uint64_t v4 = v24;
        }
        while (v22 > a4);
      }
      goto LABEL_43;
    }
  }
  else if (v6 >= -7)
  {
    if (a4 != __src || &__src[v8] <= a4) {
      memmove(a4, __src, 8 * v8);
    }
    uint64_t v12 = &a4[v8];
    unint64_t v36 = (char *)v12;
    if ((unint64_t)v4 < a3 && v6 >= 8)
    {
      uint64_t v13 = a4;
      do
      {
        uint64_t v14 = v5;
        id v15 = *v13;
        id v16 = *v4;
        id v17 = v15;
        id v18 = objc_msgSend(v16, sel_proximity);
        id v19 = objc_msgSend(v17, sel_proximity);

        if ((uint64_t)v19 >= (uint64_t)v18)
        {
          uint64_t v21 = v14;
          if (v14 != v13) {
            *uint64_t v14 = *v13;
          }
          char v37 = ++v13;
          os_log_type_t v20 = v4;
        }
        else
        {
          os_log_type_t v20 = v4 + 1;
          uint64_t v21 = v14;
          if (v14 < v4 || v14 >= v20 || v14 != v4) {
            *uint64_t v14 = *v4;
          }
        }
        uint64_t v5 = v21 + 1;
        if (v13 >= v12) {
          break;
        }
        uint64_t v4 = v20;
      }
      while ((unint64_t)v20 < a3);
      uint64_t v38 = v5;
    }
LABEL_43:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v38, (const void **)&v37, &v36);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized DeviceContextHelper.registerTransfomers()()
{
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }
  uint64_t v0 = static GenericContextTransformer.sharedInstance;
  id v1 = objc_msgSend(self, sel_defaultService);
  id v2 = v1;
  if (one-time initialization token for legacyNLContextKey != -1)
  {
    swift_once();
    id v1 = v2;
  }
  objc_msgSend(v1, sel_registerContextTransformer_forType_, v0, static DeviceContextHelper.legacyNLContextKey);
  if (one-time initialization token for onDeviceConversationKey != -1) {
    swift_once();
  }
  objc_msgSend(v2, sel_registerContextTransformer_forType_, v0, static DeviceContextHelper.onDeviceConversationKey);
  if (one-time initialization token for serverBoundContextUpdate != -1) {
    swift_once();
  }
  objc_msgSend(v2, sel_registerContextTransformer_forType_, v0, static DeviceContextHelper.serverBoundContextUpdate);
}

unint64_t lazy protocol witness table accessor for type HALFeatureFlags and conformance HALFeatureFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type HALFeatureFlags and conformance HALFeatureFlags;
  if (!lazy protocol witness table cache variable for type HALFeatureFlags and conformance HALFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HALFeatureFlags and conformance HALFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HALFeatureFlags and conformance HALFeatureFlags;
  if (!lazy protocol witness table cache variable for type HALFeatureFlags and conformance HALFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HALFeatureFlags and conformance HALFeatureFlags);
  }
  return result;
}

uint64_t sub_1B9EB0CEC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t partial apply for closure #1 in DeviceContextHelper.donateContextToCollector(_:_:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 40);
  long long v4 = *(_OWORD *)(v0 + 56);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return MEMORY[0x1F4188298](closure #1 in DeviceContextHelper.donateContextToCollector(_:_:), 0, 0);
}

void specialized DeviceContextHelper.donateDataWithContext(_:_:_:)(void *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v47 = a4;
  uint64_t v48 = a3;
  id v57 = a1;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v45 = *(void *)(v5 - 8);
  uint64_t v46 = v5;
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v44 - v9;
  Date.init()();
  char v58 = v10;
  os_log_type_t v59 = v8;
  Date.addingTimeInterval(_:)();
  uint64_t v11 = *(void *)(a2 + 64);
  uint64_t v53 = a2 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v54 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v60 = a2;
  swift_bridgeObjectRetain();
  int64_t v15 = 0;
  unint64_t v52 = (unint64_t)"rsion";
  unint64_t v51 = (unint64_t)"tionState";
  unint64_t v55 = 0x80000001BA060330;
  unint64_t v56 = 0x80000001BA060300;
  *(void *)&long long v16 = 136315138;
  long long v50 = v16;
  uint64_t v49 = MEMORY[0x1E4FBC840] + 8;
  while (1)
  {
    if (v14)
    {
      unint64_t v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v18 = v17 | (v15 << 6);
      goto LABEL_21;
    }
    int64_t v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v19 >= v54) {
      goto LABEL_44;
    }
    unint64_t v20 = *(void *)(v53 + 8 * v19);
    ++v15;
    if (!v20)
    {
      int64_t v15 = v19 + 1;
      if (v19 + 1 >= v54) {
        goto LABEL_44;
      }
      unint64_t v20 = *(void *)(v53 + 8 * v15);
      if (!v20)
      {
        int64_t v15 = v19 + 2;
        if (v19 + 2 >= v54) {
          goto LABEL_44;
        }
        unint64_t v20 = *(void *)(v53 + 8 * v15);
        if (!v20) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_21:
    int v22 = *(unsigned __int8 *)(*(void *)(v60 + 48) + v18);
    uint64_t v23 = *(void *)(*(void *)(v60 + 56) + 8 * v18);
    unint64_t v24 = 0x4C4E79636167656CLL;
    if (v22 != 1) {
      unint64_t v24 = 0xD00000000000001ALL;
    }
    unint64_t v25 = 0xEF747865746E6F43;
    if (v22 != 1) {
      unint64_t v25 = v55;
    }
    if (v22) {
      unint64_t v26 = v24;
    }
    else {
      unint64_t v26 = 0xD000000000000019;
    }
    if (v22) {
      unint64_t v27 = v25;
    }
    else {
      unint64_t v27 = v56;
    }
    swift_unknownObjectRetain();
    id v28 = (void *)MEMORY[0x1BA9E2DD0](v26, v27);
    swift_bridgeObjectRelease();
    id v29 = objc_allocWithZone(MEMORY[0x1E4F4E438]);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    Class v31 = Date._bridgeToObjectiveC()().super.isa;
    id v32 = objc_msgSend(v29, sel_initWithType_deliveryDate_expirationDate_redactedKeyPaths_historyConfiguration_, v28, isa, v31, 0, 0);

    objc_msgSend(v57, sel_donateContext_withMetadata_pushToRemote_, v23, v32, 1);
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.conversationBridge);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      uint64_t v61 = v37;
      *(_DWORD *)uint64_t v36 = v50;
      unint64_t v38 = v51 | 0x8000000000000000;
      unint64_t v39 = 0x4C4E79636167656CLL;
      if (v22 == 1) {
        unint64_t v38 = 0xEF747865746E6F43;
      }
      else {
        unint64_t v39 = 0xD00000000000001ALL;
      }
      if (v22) {
        uint64_t v40 = v39;
      }
      else {
        uint64_t v40 = 0xD000000000000019;
      }
      if (v22) {
        unint64_t v41 = v38;
      }
      else {
        unint64_t v41 = v52 | 0x8000000000000000;
      }
      *(void *)(v36 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, &v61);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v34, v35, "Syncing the contextType=%s to ContextCollector", (uint8_t *)v36, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v37, -1, -1);
      MEMORY[0x1BA9E48C0](v36, -1, -1);
    }

    swift_unknownObjectRelease();
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v54)
  {
LABEL_44:
    swift_release();
    v48(1);
    uint64_t v42 = v46;
    unint64_t v43 = *(void (**)(char *, uint64_t))(v45 + 8);
    v43(v59, v46);
    v43(v58, v42);
    return;
  }
  unint64_t v20 = *(void *)(v53 + 8 * v21);
  if (v20)
  {
    int64_t v15 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v15 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v15 >= v54) {
      goto LABEL_44;
    }
    unint64_t v20 = *(void *)(v53 + 8 * v15);
    ++v21;
    if (v20) {
      goto LABEL_20;
    }
  }
LABEL_46:
  __break(1u);
}

uint64_t specialized DeviceContextHelper.fetchContextFromCollector(from:_:_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v8;
  *(void *)(v8 + 16) = MEMORY[0x1E4FBC868];
  int64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = MEMORY[0x1E4FBC860];
  if (v10)
  {
    uint64_t v28 = a3;
    uint64_t v29 = a4;
    uint64_t v30 = v8;
    aBlock[0] = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    uint64_t v11 = aBlock[0];
    uint64_t v12 = (unsigned __int8 *)(a2 + 32);
    do
    {
      int v14 = *v12++;
      int v13 = v14;
      BOOL v15 = v14 == 1;
      if (v14 == 1) {
        unint64_t v16 = 0x4C4E79636167656CLL;
      }
      else {
        unint64_t v16 = 0xD00000000000001ALL;
      }
      if (v15) {
        unint64_t v17 = 0xEF747865746E6F43;
      }
      else {
        unint64_t v17 = 0x80000001BA060330;
      }
      if (v13) {
        unint64_t v18 = v16;
      }
      else {
        unint64_t v18 = 0xD000000000000019;
      }
      if (v13) {
        unint64_t v19 = v17;
      }
      else {
        unint64_t v19 = 0x80000001BA060300;
      }
      aBlock[0] = v11;
      unint64_t v21 = *(void *)(v11 + 16);
      unint64_t v20 = *(void *)(v11 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        uint64_t v11 = aBlock[0];
      }
      *(void *)(v11 + 16) = v21 + 1;
      uint64_t v22 = v11 + 16 * v21;
      *(void *)(v22 + 32) = v18;
      *(void *)(v22 + 40) = v19;
      --v10;
    }
    while (v10);
    uint64_t v9 = v30;
    a4 = v29;
    a3 = v28;
  }
  specialized Set.init<A>(_:)(v11);
  swift_bridgeObjectRelease();
  uint64_t v23 = (void *)swift_allocObject();
  v23[2] = a3;
  v23[3] = a4;
  v23[4] = v9;
  v23[5] = a2;
  unsigned __int8 v24 = objc_msgSend(a1, sel_respondsToSelector_, sel_fetchContextsForKeys_includesNearbyDevices_completion_);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v24)
  {
    swift_unknownObjectRetain();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    aBlock[4] = partial apply for closure #2 in DeviceContextHelper.fetchContextFromCollector(from:_:_:);
    aBlock[5] = v23;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [AFServiceDeviceContext]?) -> ();
    aBlock[3] = &block_descriptor_11;
    unint64_t v26 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(a1, sel_fetchContextsForKeys_includesNearbyDevices_completion_, isa, 1, v26);
    _Block_release(v26);
    swift_bridgeObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  return swift_release();
}

uint64_t dispatch thunk of DeviceContextDonation.donateContextToCollector(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of DeviceContextRetriever.fetchContextFromCollector(from:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t method lookup function for DeviceContextHelper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DeviceContextHelper);
}

uint64_t dispatch thunk of DeviceContextHelper.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t sub_1B9EB164C()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B9EB1684()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

id partial apply for closure #2 in DeviceContextHelper.fetchContextFromCollector(from:_:_:)(unint64_t a1)
{
  return closure #2 in DeviceContextHelper.fetchContextFromCollector(from:_:_:)(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

id specialized static DialogMetricsLogger.getSparseDialog(_:)(void *a1)
{
  if (!a1) {
    return 0;
  }
  id v2 = objc_allocWithZone(MEMORY[0x1E4F965F0]);
  id v3 = a1;
  id v4 = objc_msgSend(v2, sel_init);
  objc_msgSend(v4, sel_setCanUseServerTTS_, objc_msgSend(v3, sel_canUseServerTTS));
  id v5 = objc_msgSend(v3, sel_caption);
  if (v5)
  {
    id v6 = objc_allocWithZone(MEMORY[0x1E4F96600]);
    id v7 = v5;
    id v5 = objc_msgSend(v6, sel_init);
    id v8 = objc_msgSend(v7, sel_speakableTextOverride);
    objc_msgSend(v5, sel_setSpeakableTextOverride_, v8);

    id v9 = objc_msgSend(v7, sel_text);
    objc_msgSend(v5, sel_setText_, v9);
  }
  objc_msgSend(v4, sel_setCaption_, v5);

  id v10 = objc_msgSend(v3, sel_configuration);
  if (v10)
  {
    id v11 = objc_allocWithZone(MEMORY[0x1E4F965F8]);
    id v12 = v10;
    id v10 = objc_msgSend(v11, sel_init);
    id v13 = objc_msgSend(v12, sel_gender);
    objc_msgSend(v10, sel_setGender_, v13);

    id v14 = objc_msgSend(v12, sel_languageCode);
    objc_msgSend(v10, sel_setLanguageCode_, v14);
  }
  objc_msgSend(v4, sel_setConfiguration_, v10);

  id v15 = objc_msgSend(v3, sel_content);
  if (v15)
  {
    id v16 = objc_allocWithZone(MEMORY[0x1E4F96600]);
    id v17 = v15;
    id v15 = objc_msgSend(v16, sel_init);
    id v18 = objc_msgSend(v17, sel_speakableTextOverride);
    objc_msgSend(v15, (SEL)&selRef_callbacks + 4, v18);

    id v19 = objc_msgSend(v17, (SEL)&selRef_attributes);
    objc_msgSend(v15, (SEL)&selRef_fetchRecentDialogsWithReply_, v19);
  }
  objc_msgSend(v4, sel_setContent_, v15);

  id v20 = objc_msgSend(v3, sel_dialogIdentifier);
  objc_msgSend(v4, sel_setDialogIdentifier_, v20);

  objc_msgSend(v4, sel_setPrintedOnly_, objc_msgSend(v3, sel_printedOnly));
  objc_msgSend(v4, sel_setSpokenOnly_, objc_msgSend(v3, sel_spokenOnly));

  return v4;
}

id specialized static DialogMetricsLogger.getSparseAddDialog(addDialog:)(void *a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96AB8]), sel_init);
  id result = objc_msgSend(a1, sel_dialogs);
  if (!result) {
    goto LABEL_16;
  }
  id v4 = result;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SADialog);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_4;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v2, sel_setDialogs_, isa);

    id v11 = objc_msgSend(a1, sel_listenAfterSpeaking);
    objc_msgSend(v2, sel_setListenAfterSpeaking_, v11);

    id v12 = objc_msgSend(a1, sel_listenAfterSpeakingBehavior);
    objc_msgSend(v2, sel_setListenAfterSpeakingBehavior_, v12);

    return v2;
  }
  uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v6) {
    goto LABEL_14;
  }
LABEL_4:
  id result = (id)specialized ContiguousArray.reserveCapacity(_:)();
  if ((v6 & 0x8000000000000000) == 0)
  {
    uint64_t v7 = 0;
    do
    {
      if ((v5 & 0xC000000000000001) != 0) {
        id v8 = (id)MEMORY[0x1BA9E3990](v7, v5);
      }
      else {
        id v8 = *(id *)(v5 + 8 * v7 + 32);
      }
      id v9 = v8;
      if (!specialized static DialogMetricsLogger.getSparseDialog(_:)(v8)) {
        objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F965F0]), sel_init);
      }

      ++v7;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v6 != v7);
    goto LABEL_14;
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t specialized static DialogMetricsLogger.logAnalytics(dialog:)(void *a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  id v6 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.instrumentation);
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    id v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v10 = 0;
    _os_log_impl(&dword_1B9C64000, v8, v9, "Logging Dialog to AFAnalytics", v10, 2u);
    MEMORY[0x1BA9E48C0](v10, -1, -1);
  }

  unint64_t v11 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v25 = v11;
  id v12 = specialized static DialogMetricsLogger.getSparseAddDialog(addDialog:)(a1);
  id v13 = objc_msgSend(v12, sel_dictionary);
  if (v13)
  {
    id v14 = v13;
    uint64_t v24 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableDictionary);
    *(void *)&long long v23 = v14;
    outlined init with take of Any(&v23, v22);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v21 = v11;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v22, 0x6C46746E65696C43, 0xEE0077656956776FLL, isUniquelyReferenced_nonNull_native);
    uint64_t v16 = v21;
    unint64_t v25 = v21;
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)(0x6C46746E65696C43, 0xEE0077656956776FLL, &v23);
    outlined destroy of Any?((uint64_t)&v23);
    uint64_t v16 = v25;
  }
  id v17 = objc_msgSend(self, sel_sharedAnalytics);
  if (v17)
  {
    id v18 = v17;
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v16);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v18, sel_logEventWithType_context_, 3700, isa);

    swift_bridgeObjectRelease();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

ValueMetadata *type metadata accessor for DialogMetricsLogger()
{
  return &type metadata for DialogMetricsLogger;
}

double DispatchTimeInterval.seconds.getter()
{
  uint64_t v1 = type metadata accessor for DispatchTimeInterval();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 16))(v4, v0, v1);
  int v5 = (*(uint64_t (**)(uint64_t *, uint64_t))(v2 + 88))(v4, v1);
  if (v5 == *MEMORY[0x1E4FBCAE8])
  {
    (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v4, v1);
    return (double)*v4;
  }
  if (v5 == *MEMORY[0x1E4FBCAC8])
  {
    (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v4, v1);
    double v7 = (double)*v4;
    double v8 = 1000.0;
    return v7 / v8;
  }
  if (v5 == *MEMORY[0x1E4FBCAB0])
  {
    (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v4, v1);
    double v7 = (double)*v4;
    double v8 = 1000000.0;
    return v7 / v8;
  }
  if (v5 == *MEMORY[0x1E4FBCAA8])
  {
    (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v4, v1);
    double v7 = (double)*v4;
    double v8 = 1000000000.0;
    return v7 / v8;
  }
  if (v5 != *MEMORY[0x1E4FBCAD0])
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v10, v11))
    {
      id v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v12 = 0;
      _os_log_impl(&dword_1B9C64000, v10, v11, "Cannot convert unknown DispatchTimeInterval to seconds, returning Double.infinity", v12, 2u);
      MEMORY[0x1BA9E48C0](v12, -1, -1);
    }

    (*(void (**)(uint64_t *, uint64_t))(v2 + 8))(v4, v1);
  }
  return INFINITY;
}

SiriKitRuntime::EmergencyAffinityScorer __swiftcall EmergencyAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA062910;
  uint64_t v1 = 0xD000000000000022;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

void *EmergencyAffinityScorer.sirenIdentifierNamespace.unsafeMutableAddressor()
{
  return &static EmergencyAffinityScorer.sirenIdentifierNamespace;
}

unint64_t static EmergencyAffinityScorer.sirenIdentifierNamespace.getter()
{
  return 0xD000000000000012;
}

void *EmergencyAffinityScorer.organizationIdentifierNamespace.unsafeMutableAddressor()
{
  return &static EmergencyAffinityScorer.organizationIdentifierNamespace;
}

unint64_t static EmergencyAffinityScorer.organizationIdentifierNamespace.getter()
{
  return 0xD000000000000015;
}

uint64_t EmergencyAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for EmergencyAffinityScorer()
{
  return &type metadata for EmergencyAffinityScorer;
}

uint64_t EmergencyCallMitigatorOverride.overrideType.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 16) = v2;
  return result;
}

uint64_t (*EmergencyCallMitigatorOverride.overrideType.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t EmergencyCallMitigatorOverride.topRankedParse.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Siri_Nlu_External_UserParse?(v1 + OBJC_IVAR____TtC14SiriKitRuntime30EmergencyCallMitigatorOverride_topRankedParse, a1);
}

uint64_t EmergencyCallMitigatorOverride.__allocating_init(topRankedParse:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(unsigned char *)(v2 + 16) = 1;
  outlined init with take of Siri_Nlu_External_UserParse?(a1, v2 + OBJC_IVAR____TtC14SiriKitRuntime30EmergencyCallMitigatorOverride_topRankedParse);
  return v2;
}

uint64_t EmergencyCallMitigatorOverride.init(topRankedParse:)(uint64_t a1)
{
  *(unsigned char *)(v1 + 16) = 1;
  outlined init with take of Siri_Nlu_External_UserParse?(a1, v1 + OBJC_IVAR____TtC14SiriKitRuntime30EmergencyCallMitigatorOverride_topRankedParse);
  return v1;
}

uint64_t EmergencyCallMitigatorOverride.deinit()
{
  outlined destroy of Siri_Nlu_External_UserParse?(v0 + OBJC_IVAR____TtC14SiriKitRuntime30EmergencyCallMitigatorOverride_topRankedParse);
  return v0;
}

void specialized static EmergencyCallMitigatorOverride.isEmergencyRequest(userParse:)()
{
  uint64_t v0 = (void *)static ConversionUtils.toLegacyUserParse(from:)();
  uint64_t v1 = v0;
  if (!v0) {
    return;
  }
  id v2 = objc_msgSend(v0, sel_userDialogActs);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserDialogAct);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62) {
    goto LABEL_59;
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
  {
LABEL_60:

    goto LABEL_61;
  }
LABEL_4:
  unint64_t v41 = v1;
  unint64_t v5 = 0;
  unint64_t v6 = v3 & 0xC000000000000001;
  unint64_t v44 = v3 + 32;
  uint64_t v45 = v3 & 0xFFFFFFFFFFFFFF8;
  unint64_t v46 = v3;
  unint64_t v42 = v3 & 0xC000000000000001;
  uint64_t v43 = v4;
  while (1)
  {
    while (1)
    {
      if (v6)
      {
        uint64_t v1 = (void *)MEMORY[0x1BA9E3990](v5, v3);
        BOOL v7 = __OFADD__(v5++, 1);
        if (v7)
        {
LABEL_58:
          __break(1u);
LABEL_59:
          swift_bridgeObjectRetain();
          uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v4) {
            goto LABEL_60;
          }
          goto LABEL_4;
        }
      }
      else
      {
        if (v5 >= *(void *)(v45 + 16))
        {
          __break(1u);
          return;
        }
        uint64_t v1 = *(void **)(v44 + 8 * v5);
        swift_unknownObjectRetain();
        BOOL v7 = __OFADD__(v5++, 1);
        if (v7) {
          goto LABEL_58;
        }
      }
      self;
      uint64_t v8 = swift_dynamicCastObjCClass();
      if (v8) {
        break;
      }
      swift_unknownObjectRelease();
      if (v5 == v4) {
        goto LABEL_55;
      }
    }
    uint64_t v9 = (void *)v8;
    swift_unknownObjectRetain();
    id v10 = objc_msgSend(v9, sel_task);
    id v11 = objc_msgSend(v10, sel_identifiers);

    type metadata accessor for USOSerializedIdentifier();
    unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v3 >> 62) {
      break;
    }
    uint64_t v12 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v12) {
      goto LABEL_15;
    }
LABEL_46:
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease_n();
    unint64_t v3 = v46;
    unint64_t v6 = v42;
    uint64_t v4 = v43;
    if (v5 == v43)
    {
LABEL_55:

      goto LABEL_61;
    }
  }
  swift_bridgeObjectRetain_n();
  uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v12) {
    goto LABEL_46;
  }
LABEL_15:
  uint64_t v1 = (void *)(v3 & 0xC000000000000001);
  if ((v3 & 0xC000000000000001) != 0) {
    id v13 = (id)MEMORY[0x1BA9E3990](0, v3);
  }
  else {
    id v13 = *(id *)(v3 + 32);
  }
  id v14 = v13;
  if (USOSerializedIdentifier.isEmergencyNumber.getter())
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();

    goto LABEL_54;
  }
  uint64_t v15 = 0;
  uint64_t v16 = v12 - 1;
  while (2)
  {
    id v18 = objc_msgSend(v14, sel_namespaceString, v41);
    if (!v18)
    {

      if (v16 == v15) {
        goto LABEL_46;
      }
LABEL_28:
      if (v1) {
        id v24 = (id)MEMORY[0x1BA9E3990](v15 + 1, v3);
      }
      else {
        id v24 = *(id *)(v3 + 8 * v15 + 40);
      }
      id v14 = v24;
      if (__OFADD__(v15 + 1, 1))
      {
        __break(1u);
        goto LABEL_58;
      }
      id v25 = objc_msgSend(v24, sel_namespaceString);
      if (v25)
      {
        unint64_t v26 = v25;
        uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v29 = v28;

        if (v27 == 0xD000000000000014 && v29 == 0x80000001BA0607E0)
        {
LABEL_39:
          swift_bridgeObjectRelease();
LABEL_40:
          id v36 = objc_msgSend(v14, sel_value);
          uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v39 = v38;

          if (v37 == 0x636E656772656D65 && v39 == 0xEF7265626D754E79)
          {
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
LABEL_50:
            swift_unknownObjectRelease();
            goto LABEL_54;
          }
          char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v17)
          {
            swift_bridgeObjectRelease();

            goto LABEL_50;
          }
LABEL_20:
          ++v15;
          continue;
        }
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v30) {
          goto LABEL_40;
        }
      }
      id v31 = objc_msgSend(v14, sel_namespaceString);
      if (!v31) {
        goto LABEL_20;
      }
      id v32 = v31;
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v35 = v34;

      if (v33 != 0x6D754E656E6F6870 || v35 != 0xEB00000000726562)
      {
        char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v40 & 1) == 0) {
          goto LABEL_20;
        }
        goto LABEL_40;
      }
      goto LABEL_39;
    }
    break;
  }
  id v19 = v18;
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  if (v20 == 0xD000000000000015 && v22 == 0x80000001BA060810)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();

    goto LABEL_53;
  }
  char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  if ((v23 & 1) == 0)
  {
    if (v16 == v15) {
      goto LABEL_46;
    }
    goto LABEL_28;
  }
  swift_unknownObjectRelease();
LABEL_53:
  swift_bridgeObjectRelease();
LABEL_54:

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
LABEL_61:
  swift_bridgeObjectRelease();
}

void *sub_1B9EB2BA8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 96))(&v4);
  *a2 = v4;
  return result;
}

uint64_t sub_1B9EB2C04(char *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v4 = *a1;
  return (*(uint64_t (**)(char *))(*(void *)v2 + 104))(&v4);
}

uint64_t ObjC metadata update function for EmergencyCallMitigatorOverride()
{
  return type metadata accessor for EmergencyCallMitigatorOverride();
}

void type metadata completion function for EmergencyCallMitigatorOverride()
{
  type metadata accessor for Siri_Nlu_External_UserParse?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for EmergencyCallMitigatorOverride(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for EmergencyCallMitigatorOverride);
}

uint64_t dispatch thunk of EmergencyCallMitigatorOverride.overrideType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of EmergencyCallMitigatorOverride.overrideType.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of EmergencyCallMitigatorOverride.overrideType.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of EmergencyCallMitigatorOverride.__allocating_init(topRankedParse:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of EmergencyCallMitigatorOverride.evaluate()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t static EmergencyRequestUtils.isEmergencyRequest(userDialogAct:)()
{
  self;
  uint64_t v0 = swift_dynamicCastObjCClass();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = (void *)v0;
  swift_unknownObjectRetain();
  id v2 = objc_msgSend(v1, sel_task);
  id v3 = objc_msgSend(v2, sel_identifiers);

  type metadata accessor for USOSerializedIdentifier();
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62) {
    goto LABEL_42;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v5)
  {
LABEL_43:
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v8 = 0;
    goto LABEL_44;
  }
LABEL_4:
  if ((v4 & 0xC000000000000001) != 0) {
    id v6 = (id)MEMORY[0x1BA9E3990](0, v4);
  }
  else {
    id v6 = *(id *)(v4 + 32);
  }
  BOOL v7 = v6;
  if (USOSerializedIdentifier.isEmergencyNumber.getter())
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v8 = 1;
    goto LABEL_44;
  }
  uint64_t v9 = 0;
  uint64_t v10 = v5 - 1;
  while (1)
  {
    id v12 = objc_msgSend(v7, sel_namespaceString);
    if (v12) {
      break;
    }

    if (v10 == v9) {
      goto LABEL_43;
    }
LABEL_19:
    if ((v4 & 0xC000000000000001) != 0) {
      id v18 = (id)MEMORY[0x1BA9E3990](v9 + 1, v4);
    }
    else {
      id v18 = *(id *)(v4 + 8 * v9 + 40);
    }
    BOOL v7 = v18;
    if (__OFADD__(v9 + 1, 1))
    {
      __break(1u);
LABEL_42:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      if (!v5) {
        goto LABEL_43;
      }
      goto LABEL_4;
    }
    id v19 = objc_msgSend(v18, sel_namespaceString);
    if (!v19) {
      goto LABEL_27;
    }
    uint64_t v20 = v19;
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    if (v21 != 0xD000000000000014 || v23 != 0x80000001BA0607E0)
    {
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v24) {
        goto LABEL_31;
      }
LABEL_27:
      id v25 = objc_msgSend(v7, sel_namespaceString);
      if (!v25) {
        goto LABEL_11;
      }
      unint64_t v26 = v25;
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v29 = v28;

      if (v27 != 0x6D754E656E6F6870 || v29 != 0xEB00000000726562)
      {
        char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v34 & 1) == 0) {
          goto LABEL_11;
        }
        goto LABEL_31;
      }
    }
    swift_bridgeObjectRelease();
LABEL_31:
    id v30 = objc_msgSend(v7, sel_value);
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = v32;

    if (v31 == 0x636E656772656D65 && v33 == 0xEF7265626D754E79)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
LABEL_37:
      swift_unknownObjectRelease();
      uint64_t v8 = 1;
      goto LABEL_44;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v11)
    {
      swift_bridgeObjectRelease();

      goto LABEL_37;
    }
LABEL_11:
    ++v9;
  }
  id v13 = v12;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  if (v14 == 0xD000000000000015 && v16 == 0x80000001BA060810)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();

    goto LABEL_40;
  }
  char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  if ((v17 & 1) == 0)
  {
    if (v10 == v9) {
      goto LABEL_43;
    }
    goto LABEL_19;
  }
  swift_unknownObjectRelease();
LABEL_40:
  swift_bridgeObjectRelease();
  uint64_t v8 = 1;
LABEL_44:
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t USOSerializedIdentifier.isEmergencyRequest.getter()
{
  if (USOSerializedIdentifier.isEmergencyNumber.getter()) {
    return 1;
  }
  uint64_t result = (uint64_t)objc_msgSend(v0, sel_namespaceString);
  if (result)
  {
    id v2 = (void *)result;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;

    if (v3 == 0xD000000000000015 && v5 == 0x80000001BA060810)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      return v6 & 1;
    }
  }
  return result;
}

uint64_t USOSerializedIdentifier.isEmergencyOrganization.getter()
{
  uint64_t result = (uint64_t)objc_msgSend(v0, sel_namespaceString);
  if (result)
  {
    id v2 = (void *)result;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;

    if (v3 == 0xD000000000000015 && v5 == 0x80000001BA060810)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      return v6 & 1;
    }
  }
  return result;
}

uint64_t USOSerializedIdentifier.KnownEmergencyNamespaces.rawValue.getter(char a1)
{
  uint64_t result = 0xD000000000000014;
  if (a1)
  {
    if (a1 == 1) {
      return 0x6D754E656E6F6870;
    }
    else {
      return 0xD000000000000015;
    }
  }
  return result;
}

uint64_t USOSerializedIdentifier.KnownEmergencyIdentifiers.rawValue.getter()
{
  return 0x636E656772656D65;
}

BOOL USOSerializedIdentifier.KnownEmergencyIdentifiers.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of USOSerializedIdentifier.KnownEmergencyIdentifiers.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance USOSerializedIdentifier.KnownEmergencyIdentifiers()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance USOSerializedIdentifier.KnownEmergencyIdentifiers()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance USOSerializedIdentifier.KnownEmergencyIdentifiers()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance USOSerializedIdentifier.KnownEmergencyIdentifiers@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance USOSerializedIdentifier.KnownEmergencyIdentifiers, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance USOSerializedIdentifier.KnownEmergencyIdentifiers(void *a1@<X8>)
{
  *a1 = 0x636E656772656D65;
  a1[1] = 0xEF7265626D754E79;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance USOSerializedIdentifier.KnownEmergencyNamespaces(unsigned char *a1, unsigned char *a2)
{
  int v2 = *a1;
  unint64_t v3 = 0x6D754E656E6F6870;
  unint64_t v4 = 0xEB00000000726562;
  unint64_t v5 = 0x80000001BA060810;
  if (v2 != 1)
  {
    unint64_t v3 = 0xD000000000000015;
    unint64_t v4 = 0x80000001BA060810;
  }
  if (*a1) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = 0xD000000000000014;
  }
  if (v2) {
    unint64_t v7 = v4;
  }
  else {
    unint64_t v7 = 0x80000001BA0607E0;
  }
  unint64_t v8 = 0x6D754E656E6F6870;
  if (*a2 == 1) {
    unint64_t v5 = 0xEB00000000726562;
  }
  else {
    unint64_t v8 = 0xD000000000000015;
  }
  if (*a2) {
    unint64_t v9 = v8;
  }
  else {
    unint64_t v9 = 0xD000000000000014;
  }
  if (*a2) {
    unint64_t v10 = v5;
  }
  else {
    unint64_t v10 = 0x80000001BA0607E0;
  }
  if (v6 == v9 && v7 == v10) {
    char v11 = 1;
  }
  else {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance USOSerializedIdentifier.KnownEmergencyNamespaces()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance USOSerializedIdentifier.KnownEmergencyNamespaces()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance USOSerializedIdentifier.KnownEmergencyNamespaces()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance USOSerializedIdentifier.KnownEmergencyNamespaces@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized USOSerializedIdentifier.KnownEmergencyNamespaces.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance USOSerializedIdentifier.KnownEmergencyNamespaces(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xD000000000000014;
  unint64_t v3 = 0xEB00000000726562;
  unint64_t v4 = 0x6D754E656E6F6870;
  if (*v1 != 1)
  {
    unint64_t v4 = 0xD000000000000015;
    unint64_t v3 = 0x80000001BA060810;
  }
  if (*v1)
  {
    unint64_t v2 = v4;
    unint64_t v5 = v3;
  }
  else
  {
    unint64_t v5 = 0x80000001BA0607E0;
  }
  *a1 = v2;
  a1[1] = v5;
}

unint64_t specialized USOSerializedIdentifier.KnownEmergencyNamespaces.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of USOSerializedIdentifier.KnownEmergencyNamespaces.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type USOSerializedIdentifier.KnownEmergencyIdentifiers and conformance USOSerializedIdentifier.KnownEmergencyIdentifiers()
{
  unint64_t result = lazy protocol witness table cache variable for type USOSerializedIdentifier.KnownEmergencyIdentifiers and conformance USOSerializedIdentifier.KnownEmergencyIdentifiers;
  if (!lazy protocol witness table cache variable for type USOSerializedIdentifier.KnownEmergencyIdentifiers and conformance USOSerializedIdentifier.KnownEmergencyIdentifiers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type USOSerializedIdentifier.KnownEmergencyIdentifiers and conformance USOSerializedIdentifier.KnownEmergencyIdentifiers);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type USOSerializedIdentifier.KnownEmergencyNamespaces and conformance USOSerializedIdentifier.KnownEmergencyNamespaces()
{
  unint64_t result = lazy protocol witness table cache variable for type USOSerializedIdentifier.KnownEmergencyNamespaces and conformance USOSerializedIdentifier.KnownEmergencyNamespaces;
  if (!lazy protocol witness table cache variable for type USOSerializedIdentifier.KnownEmergencyNamespaces and conformance USOSerializedIdentifier.KnownEmergencyNamespaces)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type USOSerializedIdentifier.KnownEmergencyNamespaces and conformance USOSerializedIdentifier.KnownEmergencyNamespaces);
  }
  return result;
}

ValueMetadata *type metadata accessor for EmergencyRequestUtils()
{
  return &type metadata for EmergencyRequestUtils;
}

unsigned char *storeEnumTagSinglePayload for USOSerializedIdentifier.KnownEmergencyIdentifiers(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B9EB3B40);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for USOSerializedIdentifier.KnownEmergencyIdentifiers()
{
  return &type metadata for USOSerializedIdentifier.KnownEmergencyIdentifiers;
}

unsigned char *storeEnumTagSinglePayload for USOSerializedIdentifier.KnownEmergencyNamespaces(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9EB3C44);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for USOSerializedIdentifier.KnownEmergencyNamespaces()
{
  return &type metadata for USOSerializedIdentifier.KnownEmergencyNamespaces;
}

uint64_t EmptyAsrOverride.overrideType.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 16) = v2;
  return result;
}

uint64_t (*EmptyAsrOverride.overrideType.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t EmptyAsrOverride.endpointMode.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t EmptyAsrOverride.consecutiveEmptyInputs.getter()
{
  return *(void *)(v0 + 32);
}

uint64_t EmptyAsrOverride.isFirstRequestInSession.getter()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t EmptyAsrOverride.isFlowAwaitingInput.getter()
{
  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t EmptyAsrOverride.didPreviouslyFallbackToServer.getter()
{
  return *(unsigned __int8 *)(v0 + 42);
}

uint64_t EmptyAsrOverride.isSpeechRequest.getter()
{
  return *(unsigned __int8 *)(v0 + 43);
}

uint64_t EmptyAsrOverride.isNlEmpty.getter()
{
  return *(unsigned __int8 *)(v0 + 44);
}

uint64_t EmptyAsrOverride.aceInputOrigin.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t EmptyAsrOverride.__allocating_init(endpointMode:aceInputOrigin:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:didPreviouslyFallbackToServer:isSpeechRequest:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6, uint64_t a7, char a8, char a9)
{
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 6;
  *(unsigned char *)(result + 40) = a5;
  *(unsigned char *)(result + 41) = a6;
  *(void *)(result + 24) = a1;
  *(void *)(result + 32) = a7;
  *(unsigned char *)(result + 42) = a8;
  *(unsigned char *)(result + 44) = a4;
  *(unsigned char *)(result + 43) = a9;
  *(void *)(result + 48) = a2;
  *(void *)(result + 56) = a3;
  return result;
}

uint64_t EmptyAsrOverride.init(endpointMode:aceInputOrigin:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:didPreviouslyFallbackToServer:isSpeechRequest:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6, uint64_t a7, char a8, char a9)
{
  *(unsigned char *)(v9 + 16) = 6;
  *(unsigned char *)(v9 + 40) = a5;
  *(unsigned char *)(v9 + 41) = a6;
  *(void *)(v9 + 24) = a1;
  *(void *)(v9 + 32) = a7;
  *(unsigned char *)(v9 + 42) = a8;
  *(unsigned char *)(v9 + 44) = a4;
  *(unsigned char *)(v9 + 43) = a9;
  *(void *)(v9 + 48) = a2;
  *(void *)(v9 + 56) = a3;
  return v9;
}

uint64_t EmptyAsrOverride.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t outlined destroy of InputOrigin?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *sub_1B9EB3EBC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 152))(&v4);
  *a2 = v4;
  return result;
}

uint64_t sub_1B9EB3F18(char *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v4 = *a1;
  return (*(uint64_t (**)(char *))(*(void *)v2 + 160))(&v4);
}

uint64_t method lookup function for EmptyAsrOverride(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for EmptyAsrOverride);
}

uint64_t dispatch thunk of EmptyAsrOverride.overrideType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of EmptyAsrOverride.overrideType.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of EmptyAsrOverride.overrideType.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of EmptyAsrOverride.__allocating_init(endpointMode:aceInputOrigin:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:didPreviouslyFallbackToServer:isSpeechRequest:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of EmptyAsrOverride.evaluate()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t EmptyASRRule.ruleType.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t EmptyASRRule.ruleType.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 16) = a1;
  return result;
}

uint64_t (*EmptyASRRule.ruleType.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t EmptyASRRule.endpointMode.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t EmptyASRRule.isFirstRequestInSession.getter()
{
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t EmptyASRRule.isSystemPrompted.getter()
{
  return *(unsigned __int8 *)(v0 + 34);
}

uint64_t EmptyASRRule.didPreviouslyFallbackToServer.getter()
{
  return *(unsigned __int8 *)(v0 + 35);
}

uint64_t EmptyASRRule.__allocating_init(endpointMode:isFirstRequestInSession:isSystemPrompted:didPreviouslyFallbackToServer:)(uint64_t a1, char a2, char a3, char a4, char a5)
{
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 6;
  *(void *)(result + 24) = a1;
  *(unsigned char *)(result + 32) = a2 & 1;
  *(unsigned char *)(result + 33) = a3;
  *(unsigned char *)(result + 34) = a4;
  *(unsigned char *)(result + 35) = a5;
  return result;
}

uint64_t EmptyASRRule.init(endpointMode:isFirstRequestInSession:isSystemPrompted:didPreviouslyFallbackToServer:)(uint64_t a1, char a2, char a3, char a4, char a5)
{
  *(unsigned char *)(v5 + 16) = 6;
  *(void *)(v5 + 24) = a1;
  *(unsigned char *)(v5 + 32) = a2 & 1;
  *(unsigned char *)(v5 + 33) = a3;
  *(unsigned char *)(v5 + 34) = a4;
  *(unsigned char *)(v5 + 35) = a5;
  return v5;
}

SiriKitRuntime::PreExecutionDecision __swiftcall EmptyASRRule.evaluate()()
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v9 = v5;
    *(_DWORD *)uint64_t v4 = 136315906;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AFEndpointMode?);
    uint64_t v6 = Optional.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 1024;
    swift_release();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v4 + 18) = 1024;
    swift_release();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v4 + 24) = 1024;
    swift_release();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1B9C64000, v2, v3, "endpointMode:%s, isFirstRequestInSession:%{BOOL}d, isSystemPrompted:%{BOOL}d, didPreviouslyFallbackToServer:%{BOOL}d", (uint8_t *)v4, 0x1Eu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v5, -1, -1);
    MEMORY[0x1BA9E48C0](v4, -1, -1);

    if ((*(unsigned char *)(v0 + 33) & 1) == 0) {
      goto LABEL_5;
    }
    return 8;
  }

  swift_release_n();
  if (*(unsigned char *)(v0 + 33)) {
    return 8;
  }
LABEL_5:
  if (*(unsigned char *)(v0 + 32))
  {
    if (*(unsigned char *)(v0 + 34) != 1) {
      return 9;
    }
  }
  else if (*(unsigned char *)(v0 + 34) != 1 || *(void *)(v0 + 24) == 2)
  {
    return 9;
  }
  if (*(unsigned char *)(v0 + 35) == 1) {
    return 9;
  }
  return 12;
}

uint64_t EmptyASRRule.deinit()
{
  return v0;
}

uint64_t EmptyASRRule.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for PreExecutionRule.ruleType.getter in conformance EmptyASRRule()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 120))();
}

uint64_t protocol witness for PreExecutionRule.evaluate() in conformance EmptyASRRule()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t sub_1B9EB4508@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9EB4554(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 128))(*a1);
}

uint64_t type metadata accessor for EmptyASRRule()
{
  return self;
}

uint64_t method lookup function for EmptyASRRule(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for EmptyASRRule);
}

uint64_t dispatch thunk of EmptyASRRule.ruleType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of EmptyASRRule.ruleType.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of EmptyASRRule.ruleType.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of EmptyASRRule.__allocating_init(endpointMode:isFirstRequestInSession:isSystemPrompted:didPreviouslyFallbackToServer:)(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))(v2 + 144))(a1, a2 & 1);
}

uint64_t dispatch thunk of EmptyASRRule.evaluate()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t SiriRequestContext.publisher.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1, a1);
}

uint64_t SiriRequestContext.aceService.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 40, a1);
}

uint64_t SiriRequestContext.init(publisher:aceService:)@<X0>(long long *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  outlined init with take of ReferenceResolutionClientProtocol(a1, a3);

  return outlined init with take of ReferenceResolutionClientProtocol(a2, a3 + 40);
}

uint64_t EncoreConversation.encoreEventsHandled.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_encoreEventsHandled;
  swift_beginAccess();
  return *(void *)v1;
}

uint64_t EncoreConversation.encoreRegistered.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_encoreRegistered);
  swift_beginAccess();
  return *v1;
}

uint64_t EncoreConversation.State.description.getter()
{
  uint64_t v1 = type metadata accessor for EncoreConversation.State(0);
  MEMORY[0x1F4188790](v1);
  os_log_type_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of EncoreEngineEvent(v0, (uint64_t)v3, type metadata accessor for EncoreConversation.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation));
      outlined destroy of EncoreConversation.State((uint64_t)&v3[*(int *)(v5 + 48)], type metadata accessor for RequestContinuation);
      outlined destroy of EncoreConversation.State((uint64_t)v3, type metadata accessor for SiriRequest);
      uint64_t result = 0x6465747065636361;
      break;
    case 2u:
      uint64_t v6 = (uint64_t)&v3[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation, task: Task<(), Error>))
                               + 48)];
      swift_release();
      outlined destroy of EncoreConversation.State(v6, type metadata accessor for RequestContinuation);
      outlined destroy of EncoreConversation.State((uint64_t)v3, type metadata accessor for SiriRequest);
      uint64_t result = 0x6E69726170657270;
      break;
    case 3u:
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation));
      outlined destroy of EncoreConversation.State((uint64_t)&v3[*(int *)(v7 + 48)], type metadata accessor for RequestContinuation);
      outlined destroy of EncoreConversation.State((uint64_t)v3, type metadata accessor for SiriRequest);
      uint64_t result = 0x726F467964616572;
      break;
    case 4u:
      outlined destroy of EncoreConversation.State((uint64_t)v3, type metadata accessor for EncoreConversation.State);
      uint64_t result = 0x697474696D6D6F63;
      break;
    default:
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v3, &demangling cache variable for type metadata for ActingFlow?);
      uint64_t result = 0x7964616572;
      break;
  }
  return result;
}

void *EncoreConversation.__allocating_init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14 = specialized EncoreConversation.__allocating_init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  swift_release();
  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a11 - 8) + 8))(a1, a11);
  return v14;
}

void *EncoreConversation.init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14 = specialized EncoreConversation.init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);

  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a11 - 8) + 8))(a1, a11);
  return v14;
}

uint64_t closure #1 in EncoreConversation.init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return EncoreConversation.setupEncoreEventHandling()();
}

uint64_t EncoreConversation.setupEncoreEventHandling()()
{
  *(void *)(v1 + 40) = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v2 = static ConversationActor.shared;
  *(void *)(v1 + 48) = static ConversationActor.shared;
  return MEMORY[0x1F4188298](EncoreConversation.setupEncoreEventHandling(), v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v7;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 56) = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "[EncoreConversation] Register Encore Handler.", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v5 = static ReactiveUIEventActor.shared;
  *(void *)(v0 + 64) = static ReactiveUIEventActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](EncoreConversation.setupEncoreEventHandling(), v5, 0);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1B9C64000, v1, v2, "[ReactiveEventActor] setting new handler", v3, 2u);
    MEMORY[0x1BA9E48C0](v3, -1, -1);
  }
  uint64_t v4 = v0[8];
  uint64_t v6 = v0[5];
  uint64_t v5 = v0[6];

  uint64_t v7 = *(void *)(v4 + 112);
  *(void *)(v4 + 112) = partial apply for closure #1 in EncoreConversation.setupEncoreEventHandling();
  *(void *)(v4 + 120) = v6;
  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(v7);
  return MEMORY[0x1F4188298](EncoreConversation.setupEncoreEventHandling(), v5, 0);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  unsigned char *v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1B9C64000, v1, v2, "[EncoreConversation] Registered Encore Handler.", v3, 2u);
    MEMORY[0x1BA9E48C0](v3, -1, -1);
  }
  uint64_t v4 = *(void *)(v0 + 40);

  uint64_t v5 = (unsigned char *)(v4 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_encoreRegistered);
  swift_beginAccess();
  *uint64_t v5 = 1;
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t EncoreConversation.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_1B9C64000, v6, v7, "[EncoreConversation] deinit.", v8, 2u);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }

  uint64_t v9 = *(void *)(v1 + 16);
  OS_dispatch_semaphore.wait()();
  closure #1 in JetsamHelper.releaseJetsamTransaction()(v9, &v15);
  OS_dispatch_semaphore.signal()();
  uint64_t v10 = *(void *)(v1 + 24);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v4, 1, 1, v11);
  id v12 = (void *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = v10;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in EncoreConversation.deinit, (uint64_t)v12);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_siriRequest, &demangling cache variable for type metadata for SiriRequest?);
  outlined destroy of EncoreConversation.State(v1 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_state, type metadata accessor for EncoreConversation.State);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v1 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_correctionsEngine);
  return v1;
}

uint64_t closure #1 in EncoreConversation.deinit()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return EncoreEngine.stop()();
}

uint64_t EncoreEngine.stop()()
{
  v1[2] = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation.YieldResult);
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  v1[6] = type metadata accessor for EncoreEngine.EngineEvent(0);
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  v1[9] = type metadata accessor for EncoreEngineEvent(0);
  v1[10] = swift_task_alloc();
  return MEMORY[0x1F4188298](EncoreEngine.stop(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  swift_storeEnumTagMultiPayload();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v0 = static FlowActor.shared;
  return MEMORY[0x1F4188298](EncoreEngine.stop(), v0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = v0[10];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  outlined init with copy of EncoreEngineEvent(v1, v3, type metadata accessor for EncoreEngineEvent);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of EncoreEngineEvent(v3, v2, type metadata accessor for EncoreEngine.EngineEvent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  outlined destroy of EncoreConversation.State(v3, type metadata accessor for EncoreEngine.EngineEvent);
  outlined destroy of EncoreConversation.State(v1, type metadata accessor for EncoreEngineEvent);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t EncoreConversation.__deallocating_deinit()
{
  EncoreConversation.deinit();

  return swift_deallocClassInstance();
}

uint64_t closure #1 in EncoreConversation.setupEncoreEventHandling()(void *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = one-time initialization token for shared;
  swift_retain();
  id v9 = a1;
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v10 = static ConversationActor.shared;
  uint64_t v11 = lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, (void (*)(uint64_t))type metadata accessor for ConversationActor);
  id v12 = (void *)swift_allocObject();
  v12[2] = v10;
  v12[3] = v11;
  v12[4] = a2;
  v12[5] = v9;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in EncoreConversation.setupEncoreEventHandling(), (uint64_t)v12);
  return swift_release();
}

uint64_t closure #1 in closure #1 in EncoreConversation.setupEncoreEventHandling()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v6 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in EncoreConversation.setupEncoreEventHandling(), v6, 0);
}

uint64_t closure #1 in closure #1 in EncoreConversation.setupEncoreEventHandling()()
{
  EncoreConversation.handleEncoreEvent(event:)(*(void **)(v0 + 24));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void EncoreConversation.handleEncoreEvent(event:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequest?);
  MEMORY[0x1F4188790](v7 - 8);
  id v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for EncoreConversation.State(0);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v52 = (uint64_t)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v48 - v13;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  id v16 = (id)__swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  id v17 = a1;
  id v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    unint64_t v51 = v9;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v53 = v14;
    uint64_t v21 = (uint8_t *)v20;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v48 = v10;
    id v49 = v16;
    uint64_t v23 = (void *)v22;
    uint64_t v50 = v2;
    *(_DWORD *)uint64_t v21 = 138412290;
    v54[7] = (uint64_t)v17;
    id v24 = v17;
    uint64_t v2 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v23 = v17;

    id v9 = v51;
    _os_log_impl(&dword_1B9C64000, v18, v19, "[EncoreConversation] handleEncoreEvent %@", v21, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    id v16 = v49;
    MEMORY[0x1BA9E48C0](v23, -1, -1);
    id v25 = v21;
    uint64_t v14 = v53;
    MEMORY[0x1BA9E48C0](v25, -1, -1);
  }
  else
  {
  }
  unint64_t v26 = (void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_encoreEventsHandled);
  swift_beginAccess();
  if (__OFADD__(*v26, 1))
  {
    __break(1u);
    goto LABEL_22;
  }
  ++*v26;
  uint64_t v27 = v2 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_state;
  swift_beginAccess();
  outlined init with copy of EncoreEngineEvent(v27, (uint64_t)v14, type metadata accessor for EncoreConversation.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 4)
  {
    swift_release();
LABEL_11:
    uint64_t v29 = v2 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_siriRequest;
    swift_beginAccess();
    outlined init with copy of ReferenceResolutionClientProtocol?(v29, (uint64_t)v9, &demangling cache variable for type metadata for SiriRequest?);
    uint64_t v30 = type metadata accessor for SiriRequest(0);
    LODWORD(v29) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v9, 1, v30);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, &demangling cache variable for type metadata for SiriRequest?);
    if (v29 == 1)
    {
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl(&dword_1B9C64000, v31, v32, "[EncoreConversation] handleEncoreEvent failed. Missing siriRequest)", v33, 2u);
        MEMORY[0x1BA9E48C0](v33, -1, -1);
      }

      return;
    }
    uint64_t v43 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v6, 1, 1, v43);
    uint64_t v44 = one-time initialization token for shared;
    id v16 = v17;
    swift_retain();
    if (v44 == -1)
    {
LABEL_18:
      uint64_t v45 = static ConversationActor.shared;
      uint64_t v46 = lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, (void (*)(uint64_t))type metadata accessor for ConversationActor);
      uint64_t v47 = (void *)swift_allocObject();
      v47[2] = v45;
      v47[3] = v46;
      v47[4] = v2;
      v47[5] = v16;
      swift_retain();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in EncoreConversation.handleEncoreEvent(event:), (uint64_t)v47);
      swift_release();
      return;
    }
LABEL_22:
    swift_once();
    goto LABEL_18;
  }
  if (!EnumCaseMultiPayload)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for ActingFlow?);
    goto LABEL_11;
  }
  swift_retain_n();
  char v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    id v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    uint64_t v53 = v14;
    v54[0] = v37;
    *(_DWORD *)id v36 = 136315138;
    uint64_t v38 = v27;
    uint64_t v39 = v52;
    outlined init with copy of EncoreEngineEvent(v38, v52, type metadata accessor for EncoreConversation.State);
    uint64_t v40 = EncoreConversation.State.description.getter();
    unint64_t v42 = v41;
    outlined destroy of EncoreConversation.State(v39, type metadata accessor for EncoreConversation.State);
    v54[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, v54);
    uint64_t v14 = v53;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B9C64000, v34, v35, "[EncoreConversation] handleEncoreEvent failed. Invalid state %s.", v36, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v37, -1, -1);
    MEMORY[0x1BA9E48C0](v36, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  outlined destroy of EncoreConversation.State((uint64_t)v14, type metadata accessor for EncoreConversation.State);
}

Swift::Void __swiftcall EncoreConversation.setEncoreRegistered(registered:)(Swift::Bool registered)
{
  uint64_t v3 = (Swift::Bool *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_encoreRegistered);
  swift_beginAccess();
  *uint64_t v3 = registered;
}

uint64_t closure #1 in EncoreConversation.handleEncoreEvent(event:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  void v5[3] = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation.YieldResult);
  v5[4] = v6;
  v5[5] = *(void *)(v6 - 8);
  v5[6] = swift_task_alloc();
  v5[7] = type metadata accessor for EncoreEngine.EngineEvent(0);
  v5[8] = swift_task_alloc();
  v5[9] = swift_task_alloc();
  v5[10] = type metadata accessor for EncoreEngineEvent(0);
  v5[11] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v7 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in EncoreConversation.handleEncoreEvent(event:), v7, 0);
}

uint64_t closure #1 in EncoreConversation.handleEncoreEvent(event:)()
{
  uint64_t v1 = (void *)v0[11];
  uint64_t v2 = (void *)v0[3];
  v0[12] = *(void *)(v0[2] + 24);
  *uint64_t v1 = v2;
  swift_storeEnumTagMultiPayload();
  uint64_t v3 = one-time initialization token for shared;
  id v4 = v2;
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v5 = static FlowActor.shared;
  return MEMORY[0x1F4188298](closure #1 in EncoreConversation.handleEncoreEvent(event:), v5, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  id v4 = v0[6];
  uint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  outlined init with copy of EncoreEngineEvent(v1, v3, type metadata accessor for EncoreEngineEvent);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of EncoreEngineEvent(v3, v2, type metadata accessor for EncoreEngine.EngineEvent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  outlined destroy of EncoreConversation.State(v3, type metadata accessor for EncoreEngine.EngineEvent);
  outlined destroy of EncoreConversation.State(v1, type metadata accessor for EncoreEngineEvent);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t EncoreConversation.cancel()()
{
  v1[2] = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation.YieldResult);
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  v1[6] = type metadata accessor for EncoreEngine.EngineEvent(0);
  v1[7] = swift_task_alloc();
  v1[8] = swift_task_alloc();
  v1[9] = type metadata accessor for EncoreEngineEvent(0);
  v1[10] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v3 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](EncoreConversation.cancel(), v3, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void (**v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "[EncoreConversation] Cancel. Sending ensureReady event to interrupt any running request.", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }
  uint64_t v5 = (void (**)())v0[10];
  uint64_t v6 = v0[2];

  v0[11] = *(void *)(v6 + 24);
  *uint64_t v5 = closure #1 in EncoreConversation.cancel();
  v5[1] = 0;
  swift_storeEnumTagMultiPayload();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v7 = static FlowActor.shared;
  return MEMORY[0x1F4188298](EncoreConversation.cancel(), v7, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = v0[10];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  id v4 = v0[5];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  outlined init with copy of EncoreEngineEvent(v1, v3, type metadata accessor for EncoreEngineEvent);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of EncoreEngineEvent(v3, v2, type metadata accessor for EncoreEngine.EngineEvent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  outlined destroy of EncoreConversation.State(v3, type metadata accessor for EncoreEngine.EngineEvent);
  outlined destroy of EncoreConversation.State(v1, type metadata accessor for EncoreEngineEvent);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

void closure #1 in EncoreConversation.cancel()()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1B9C64000, oslog, v1, "[EncoreConversation] Ensured ready due to cancellation.", v2, 2u);
    MEMORY[0x1BA9E48C0](v2, -1, -1);
  }
}

uint64_t EncoreConversation.ensureReady(timeout:)(uint64_t a1)
{
  v2[11] = a1;
  v2[12] = v1;
  uint64_t v3 = type metadata accessor for TimeoutError();
  v2[13] = v3;
  v2[14] = *(void *)(v3 - 8);
  v2[15] = swift_task_alloc();
  v2[16] = type metadata accessor for ConversationCommitResult();
  v2[17] = swift_task_alloc();
  v2[18] = type metadata accessor for EncoreConversation.State(0);
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v4 = static ConversationActor.shared;
  v2[21] = static ConversationActor.shared;
  return MEMORY[0x1F4188298](EncoreConversation.ensureReady(timeout:), v4, 0);
}

uint64_t EncoreConversation.ensureReady(timeout:)()
{
  uint64_t v56 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 176) = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  uint64_t v4 = &async function pointer to specialized ConversationService.maybeSubmitRequestHandlingUpdate(activeTurn:rcId:bridge:);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v5 = *(void *)(v0 + 160);
    uint64_t v6 = *(void *)(v0 + 96);
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    v55[0] = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v9 = v6 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_state;
    swift_beginAccess();
    outlined init with copy of EncoreEngineEvent(v9, v5, type metadata accessor for EncoreConversation.State);
    uint64_t v10 = EncoreConversation.State.description.getter();
    unint64_t v12 = v11;
    outlined destroy of EncoreConversation.State(v5, type metadata accessor for EncoreConversation.State);
    *(void *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, v55);
    uint64_t v4 = (void *)&async function pointer to specialized ConversationService.maybeSubmitRequestHandlingUpdate(activeTurn:rcId:bridge:);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B9C64000, v2, v3, "[EncoreConversation] Ensuring ready. state: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v13 = *(void *)(v0 + 152);
  uint64_t v14 = *(void *)(v0 + 96) + v4[226];
  swift_beginAccess();
  outlined init with copy of EncoreEngineEvent(v14, v13, type metadata accessor for EncoreConversation.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 4:
      id v17 = *(uint64_t **)(v0 + 152);
      uint64_t v18 = *v17;
      *(void *)(v0 + 208) = *v17;
      os_log_type_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v21 = 0;
        _os_log_impl(&dword_1B9C64000, v19, v20, "[EncoreConversation] ensureReady waiting for commit to complete.", v21, 2u);
        MEMORY[0x1BA9E48C0](v21, -1, -1);
      }

      double v22 = DispatchTimeInterval.seconds.getter();
      swift_retain();
      uint64_t v23 = (void *)swift_task_alloc();
      *(void *)(v0 + 216) = v23;
      *uint64_t v23 = v0;
      v23[1] = EncoreConversation.ensureReady(timeout:);
      uint64_t v26 = *(void *)(v0 + 128);
      id v25 = *(void **)(v0 + 136);
      uint64_t v27 = &async function pointer to partial apply for closure #2 in EncoreConversation.ensureReady(timeout:);
      goto LABEL_16;
    case 2:
      uint64_t v28 = *(void *)(v0 + 152);
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation, task: Task<(), Error>));
      uint64_t v18 = *(void *)(v28 + *(int *)(v29 + 64));
      *(void *)(v0 + 184) = v18;
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v30, v31))
      {
        os_log_type_t v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v32 = 0;
        _os_log_impl(&dword_1B9C64000, v30, v31, "[EncoreConversation] ensureReady waiting for prepare to complete.", v32, 2u);
        MEMORY[0x1BA9E48C0](v32, -1, -1);
      }

      *(_DWORD *)(v0 + 248) = *(_DWORD *)(v29 + 48);
      double v22 = DispatchTimeInterval.seconds.getter();
      swift_retain();
      id v25 = (void *)swift_task_alloc();
      *(void *)(v0 + 192) = v25;
      *id v25 = v0;
      v25[1] = EncoreConversation.ensureReady(timeout:);
      uint64_t v26 = MEMORY[0x1E4FBC848] + 8;
      uint64_t v27 = &async function pointer to partial apply for closure #1 in EncoreConversation.ensureReady(timeout:);
LABEL_16:
      v24.n128_f64[0] = v22;
      return MEMORY[0x1F415AC08](v25, v27, v18, v26, v24);
    case 0:
      outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 152), &demangling cache variable for type metadata for ActingFlow?);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      id v16 = *(uint64_t (**)(void))(v0 + 8);
LABEL_29:
      return v16();
  }
  swift_retain_n();
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = *(void *)(v0 + 160);
    id v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    v55[0] = v37;
    *(_DWORD *)id v36 = 136315138;
    outlined init with copy of EncoreEngineEvent(v14, v35, type metadata accessor for EncoreConversation.State);
    uint64_t v38 = EncoreConversation.State.description.getter();
    unint64_t v40 = v39;
    outlined destroy of EncoreConversation.State(v35, type metadata accessor for EncoreConversation.State);
    *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B9C64000, v33, v34, "[EncoreConversation] ensureReady can only be called for committed conversation. Invalid state %s.", v36, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v37, -1, -1);
    MEMORY[0x1BA9E48C0](v36, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v41 = *(void *)(v0 + 152);
  uint64_t v42 = *(void *)(v0 + 160);
  v55[0] = 0;
  v55[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  strcpy((char *)v55, "Invalid state ");
  HIBYTE(v55[1]) = -18;
  outlined init with copy of EncoreEngineEvent(v14, v42, type metadata accessor for EncoreConversation.State);
  v43._uint64_t countAndFlagsBits = EncoreConversation.State.description.getter();
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  outlined destroy of EncoreConversation.State(v42, type metadata accessor for EncoreConversation.State);
  v44._object = (void *)0x80000001BA068000;
  v44._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v44);
  uint64_t v45 = v55[0];
  uint64_t v46 = v55[1];
  lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
  uint64_t v47 = (void *)swift_allocError();
  *uint64_t v48 = v45;
  v48[1] = v46;
  swift_willThrow();
  outlined destroy of EncoreConversation.State(v41, type metadata accessor for EncoreConversation.State);
  *(void *)(v0 + 64) = v47;
  id v49 = v47;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if (!swift_dynamicCast())
  {

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v16 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_29;
  }

  uint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v52 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v52 = 0;
    _os_log_impl(&dword_1B9C64000, v50, v51, "[EncoreConversation] Grace period expired. Sending ensureReady event.", v52, 2u);
    MEMORY[0x1BA9E48C0](v52, -1, -1);
  }
  uint64_t v53 = *(void *)(v0 + 96);

  *(void *)(v0 + 232) = *(void *)(v53 + 24);
  return MEMORY[0x1F4188298](EncoreConversation.ensureReady(timeout:), 0, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v3 = *(void *)(v2 + 168);
    uint64_t v4 = EncoreConversation.ensureReady(timeout:);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 168);
    swift_release();
    uint64_t v4 = EncoreConversation.ensureReady(timeout:);
    os_log_type_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = *(int *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 152);
  swift_release();
  outlined destroy of EncoreConversation.State(v2 + v1, type metadata accessor for RequestContinuation);
  outlined destroy of EncoreConversation.State(v2, type metadata accessor for SiriRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 224) = v0;
  swift_task_dealloc();
  if (v0)
  {
    os_log_type_t v3 = *(void *)(v2 + 168);
    uint64_t v4 = EncoreConversation.ensureReady(timeout:);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 168);
    outlined destroy of EncoreConversation.State(*(void *)(v2 + 136), (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
    swift_release();
    uint64_t v4 = EncoreConversation.ensureReady(timeout:);
    os_log_type_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 240) = v1;
  *uint64_t v1 = v0;
  v1[1] = EncoreConversation.ensureReady(timeout:);
  uint64_t v2 = *(void *)(v0 + 232);
  os_log_type_t v3 = MEMORY[0x1E4FBC848] + 8;
  return MEMORY[0x1F41880D8](v1, 0, 0, 0xD000000000000017, 0x80000001BA068020, partial apply for closure #1 in EncoreEngine.asyncEnsureReadyEvent(), v2, v3);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](EncoreConversation.ensureReady(timeout:), 0, 0);
}

{
  uint64_t v0;

  return MEMORY[0x1F4188298](EncoreConversation.ensureReady(timeout:), *(void *)(v0 + 168), 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(*(void *)(v0 + 112) + 8))(*(void *)(v0 + 120), *(void *)(v0 + 104));

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = *(int *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 152);
  swift_release_n();
  outlined destroy of EncoreConversation.State(v2 + v1, type metadata accessor for RequestContinuation);
  outlined destroy of EncoreConversation.State(v2, type metadata accessor for SiriRequest);
  os_log_type_t v3 = *(void **)(v0 + 200);
  *(void *)(v0 + 64) = v3;
  uint64_t v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {

    uint64_t v5 = Logger.logObject.getter();
    uint64_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1B9C64000, v5, v6, "[EncoreConversation] Grace period expired. Sending ensureReady event.", v7, 2u);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }
    uint64_t v8 = *(void *)(v0 + 96);

    *(void *)(v0 + 232) = *(void *)(v8 + 24);
    return MEMORY[0x1F4188298](EncoreConversation.ensureReady(timeout:), 0, 0);
  }
  else
  {

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
}

{
  uint64_t v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  swift_release_n();
  uint64_t v1 = *(void **)(v0 + 224);
  *(void *)(v0 + 64) = v1;
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {

    os_log_type_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1B9C64000, v3, v4, "[EncoreConversation] Grace period expired. Sending ensureReady event.", v5, 2u);
      MEMORY[0x1BA9E48C0](v5, -1, -1);
    }
    uint64_t v6 = *(void *)(v0 + 96);

    *(void *)(v0 + 232) = *(void *)(v6 + 24);
    return MEMORY[0x1F4188298](EncoreConversation.ensureReady(timeout:), 0, 0);
  }
  else
  {

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t closure #1 in EncoreConversation.ensureReady(timeout:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v7 = MEMORY[0x1E4FBC848] + 8;
  uint64_t v8 = MEMORY[0x1E4FBC0F0];
  return MEMORY[0x1F4187D90](a1, a2, v7, v6, v8);
}

uint64_t EncoreEngine.asyncEnsureReadyEvent()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](EncoreEngine.asyncEnsureReadyEvent(), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v1;
  *uint64_t v1 = v0;
  v1[1] = AceServiceInvokerImpl.prepareForAudioHandoffFailed();
  uint64_t v2 = *(void *)(v0 + 16);
  os_log_type_t v3 = MEMORY[0x1E4FBC848] + 8;
  return MEMORY[0x1F41880D8](v1, 0, 0, 0xD000000000000017, 0x80000001BA068020, partial apply for closure #1 in EncoreEngine.asyncEnsureReadyEvent(), v2, v3);
}

uint64_t EncoreConversation.accept(request:)(uint64_t a1, uint64_t a2)
{
  v3[70] = v2;
  v3[69] = a2;
  v3[68] = a1;
  v3[71] = type metadata accessor for UserInputResult();
  v3[72] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Parse();
  v3[73] = v4;
  v3[74] = *(void *)(v4 - 8);
  v3[75] = swift_task_alloc();
  v3[76] = type metadata accessor for RequestContinuation(0);
  v3[77] = swift_task_alloc();
  v3[78] = swift_task_alloc();
  v3[79] = swift_task_alloc();
  v3[80] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ExecutionContext();
  v3[81] = v5;
  v3[82] = *(void *)(v5 - 8);
  v3[83] = swift_task_alloc();
  v3[84] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ConversationContext();
  v3[85] = v6;
  v3[86] = *(void *)(v6 - 8);
  v3[87] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowTaskMetadata?);
  v3[88] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  v3[89] = v7;
  v3[90] = *(void *)(v7 - 8);
  v3[91] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
  v3[92] = swift_task_alloc();
  v3[93] = swift_task_alloc();
  v3[94] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
  v3[95] = swift_task_alloc();
  v3[96] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ResponseMode();
  v3[97] = v8;
  v3[98] = *(void *)(v8 - 8);
  v3[99] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequest?);
  v3[100] = swift_task_alloc();
  v3[101] = type metadata accessor for EncoreConversation.State(0);
  v3[102] = swift_task_alloc();
  v3[103] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for SiriRequest(0);
  v3[104] = v9;
  v3[105] = *(void *)(v9 - 8);
  v3[106] = swift_task_alloc();
  v3[107] = swift_task_alloc();
  v3[108] = swift_task_alloc();
  v3[109] = swift_task_alloc();
  v3[110] = swift_task_alloc();
  v3[111] = swift_task_alloc();
  v3[112] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v10 = static ConversationActor.shared;
  v3[113] = static ConversationActor.shared;
  return MEMORY[0x1F4188298](EncoreConversation.accept(request:), v10, 0);
}

uint64_t EncoreConversation.accept(request:)()
{
  uint64_t v129 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 896);
  uint64_t v2 = *(void *)(v0 + 888);
  uint64_t v3 = *(void *)(v0 + 552);
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  outlined init with copy of EncoreEngineEvent(v3, v1, type metadata accessor for SiriRequest);
  outlined init with copy of EncoreEngineEvent(v3, v2, type metadata accessor for SiriRequest);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(uint64_t **)(v0 + 896);
  uint64_t v9 = *(void *)(v0 + 888);
  if (v7)
  {
    uint64_t v10 = swift_slowAlloc();
    v128[0] = swift_slowAlloc();
    uint64_t v119 = v128[0];
    *(_DWORD *)uint64_t v10 = 136315394;
    os_log_type_t type = v6;
    uint64_t v11 = *v8;
    unint64_t v12 = v8[1];
    swift_bridgeObjectRetain();
    *(void *)(v0 + 528) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of EncoreConversation.State((uint64_t)v8, type metadata accessor for SiriRequest);
    *(_WORD *)(v10 + 12) = 2080;
    type metadata accessor for Input();
    lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor(&lazy protocol witness table cache variable for type Input and conformance Input, MEMORY[0x1E4FA1EE0]);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 536) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of EncoreConversation.State(v9, type metadata accessor for SiriRequest);
    _os_log_impl(&dword_1B9C64000, v5, type, "[EncoreConversation] Accept. request id: %s %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v119, -1, -1);
    MEMORY[0x1BA9E48C0](v10, -1, -1);
  }
  else
  {
    outlined destroy of EncoreConversation.State(*(void *)(v0 + 896), type metadata accessor for SiriRequest);
    outlined destroy of EncoreConversation.State(v9, type metadata accessor for SiriRequest);
  }

  uint64_t v15 = *(void *)(v0 + 824);
  uint64_t v16 = *(void *)(v0 + 560);
  uint64_t v17 = OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_state;
  *(void *)(v0 + 912) = OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_state;
  uint64_t v18 = v16 + v17;
  swift_beginAccess();
  outlined init with copy of EncoreEngineEvent(v18, v15, type metadata accessor for EncoreConversation.State);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of EncoreConversation.State(*(void *)(v0 + 824), type metadata accessor for EncoreConversation.State);
    swift_retain_n();
    os_log_type_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = *(void *)(v0 + 816);
      double v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      v128[0] = v23;
      *(_DWORD *)double v22 = 136315138;
      outlined init with copy of EncoreEngineEvent(v18, v21, type metadata accessor for EncoreConversation.State);
      uint64_t v24 = EncoreConversation.State.description.getter();
      unint64_t v26 = v25;
      outlined destroy of EncoreConversation.State(v21, type metadata accessor for EncoreConversation.State);
      *(void *)(v0 + 472) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v19, v20, "[EncoreConversation] Accept failed. Invalid state %s.", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v23, -1, -1);
      MEMORY[0x1BA9E48C0](v22, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    uint64_t v48 = *(void *)(v0 + 816);
    v128[0] = 0;
    v128[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    strcpy((char *)v128, "Invalid state ");
    HIBYTE(v128[1]) = -18;
    outlined init with copy of EncoreEngineEvent(v18, v48, type metadata accessor for EncoreConversation.State);
    v49._uint64_t countAndFlagsBits = EncoreConversation.State.description.getter();
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    outlined destroy of EncoreConversation.State(v48, type metadata accessor for EncoreConversation.State);
    v50._object = (void *)0x80000001BA068040;
    v50._uint64_t countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v50);
    type metadata accessor for Input();
    lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor(&lazy protocol witness table cache variable for type Input and conformance Input, MEMORY[0x1E4FA1EE0]);
    v51._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v51);
    swift_bridgeObjectRelease();
    uint64_t v53 = v128[0];
    uint64_t v52 = v128[1];
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
    swift_allocError();
    uint64_t *v54 = v53;
    v54[1] = v52;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v55 = *(uint64_t (**)(void))(v0 + 8);
    return v55();
  }
  uint64_t v27 = *(void *)(v0 + 880);
  uint64_t v120 = *(void *)(v0 + 872);
  uint64_t v28 = *(void *)(v0 + 840);
  uint64_t v29 = *(void *)(v0 + 832);
  uint64_t v30 = *(void *)(v0 + 800);
  uint64_t v31 = *(void *)(v0 + 560);
  uint64_t v32 = *(void *)(v0 + 552);
  outlined init with take of ActingFlow?(*(void *)(v0 + 824), v0 + 256);
  outlined init with copy of EncoreEngineEvent(v32, v30, type metadata accessor for SiriRequest);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v28 + 56))(v30, 0, 1, v29);
  uint64_t v33 = v31 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_siriRequest;
  swift_beginAccess();
  outlined assign with take of SiriRequest?(v30, v33);
  swift_endAccess();
  outlined init with copy of EncoreEngineEvent(v32, v27, type metadata accessor for SiriRequest);
  outlined init with copy of EncoreEngineEvent(v32, v120, type metadata accessor for SiriRequest);
  swift_retain_n();
  os_log_type_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  uint64_t v37 = *(void *)(v0 + 880);
  uint64_t v38 = *(void *)(v0 + 872);
  if (v36)
  {
    uint64_t v115 = *(void *)(v0 + 872);
    uint64_t v39 = *(void *)(v0 + 792);
    uint64_t v116 = *(void *)(v0 + 784);
    uint64_t v114 = *(void *)(v0 + 776);
    os_log_type_t v117 = v35;
    uint64_t v40 = swift_slowAlloc();
    uint64_t v121 = swift_slowAlloc();
    v128[0] = v121;
    *(_DWORD *)uint64_t v40 = 136315650;
    uint64_t v41 = ObjectIdentifier.debugDescription.getter();
    *(void *)(v0 + 504) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v40 + 12) = 2080;
    uint64_t v43 = ObjectIdentifier.debugDescription.getter();
    *(void *)(v0 + 512) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of EncoreConversation.State(v37, type metadata accessor for SiriRequest);
    *(_WORD *)(v40 + 22) = 2080;
    CurrentRequest.responseMode.getter();
    lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor(&lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode, MEMORY[0x1E4FA51C0]);
    uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v47 = v46;
    (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v39, v114);
    *(void *)(v0 + 520) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of EncoreConversation.State(v115, type metadata accessor for SiriRequest);
    _os_log_impl(&dword_1B9C64000, v34, v117, "Setting environment %s currentRequest to %s with responseMode %s", (uint8_t *)v40, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v121, -1, -1);
    MEMORY[0x1BA9E48C0](v40, -1, -1);
  }
  else
  {
    swift_release_n();
    outlined destroy of EncoreConversation.State(v37, type metadata accessor for SiriRequest);
    outlined destroy of EncoreConversation.State(v38, type metadata accessor for SiriRequest);
  }

  uint64_t v57 = *(void *)(v0 + 856);
  uint64_t v58 = *(void *)(v0 + 848);
  uint64_t v59 = *(void *)(v0 + 552);
  outlined init with copy of EncoreEngineEvent(v59, *(void *)(v0 + 864), type metadata accessor for SiriRequest);
  outlined init with copy of EncoreEngineEvent(v59, v57, type metadata accessor for SiriRequest);
  outlined init with copy of EncoreEngineEvent(v59, v58, type metadata accessor for SiriRequest);
  uint64_t v60 = Logger.logObject.getter();
  os_log_type_t v61 = static os_log_type_t.debug.getter();
  BOOL v62 = os_log_type_enabled(v60, v61);
  uint64_t v63 = *(void *)(v0 + 864);
  uint64_t v64 = *(void *)(v0 + 856);
  uint64_t v65 = *(void *)(v0 + 848);
  if (v62)
  {
    uint64_t v122 = *(void *)(v0 + 848);
    uint64_t v66 = swift_slowAlloc();
    uint64_t v126 = swift_slowAlloc();
    v128[0] = v126;
    *(_DWORD *)uint64_t v66 = 136315650;
    os_log_type_t v124 = v61;
    uint64_t v67 = CurrentRequest.executionRequestId.getter();
    if (v68)
    {
      unint64_t v69 = v68;
    }
    else
    {
      uint64_t v67 = 7104878;
      unint64_t v69 = 0xE300000000000000;
    }
    *(void *)(v0 + 480) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v69, v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of EncoreConversation.State(v63, type metadata accessor for SiriRequest);
    *(_WORD *)(v66 + 12) = 2080;
    uint64_t v70 = CurrentRequest.rootRequestId.getter();
    if (v71)
    {
      unint64_t v72 = v71;
    }
    else
    {
      uint64_t v70 = 7104878;
      unint64_t v72 = 0xE300000000000000;
    }
    *(void *)(v0 + 488) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v72, v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of EncoreConversation.State(v64, type metadata accessor for SiriRequest);
    *(_WORD *)(v66 + 22) = 2080;
    uint64_t v73 = CurrentRequest.sessionId.getter();
    if (v74)
    {
      unint64_t v75 = v74;
    }
    else
    {
      uint64_t v73 = 7104878;
      unint64_t v75 = 0xE300000000000000;
    }
    *(void *)(v0 + 496) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v75, v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of EncoreConversation.State(v122, type metadata accessor for SiriRequest);
    _os_log_impl(&dword_1B9C64000, v60, v124, "updating root environment with SiriRequest having executionRequestId - %s, rootRequestId - %s, sessionId - %s", (uint8_t *)v66, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v126, -1, -1);
    MEMORY[0x1BA9E48C0](v66, -1, -1);
  }
  else
  {
    outlined destroy of EncoreConversation.State(*(void *)(v0 + 864), type metadata accessor for SiriRequest);
    outlined destroy of EncoreConversation.State(v64, type metadata accessor for SiriRequest);
    outlined destroy of EncoreConversation.State(v65, type metadata accessor for SiriRequest);
  }

  uint64_t v76 = *(void *)(v0 + 832);
  uint64_t v77 = *(void *)(v0 + 752);
  uint64_t v78 = *(void *)(v0 + 552);
  swift_retain();
  SiriEnvironment.currentRequest.setter();
  SiriEnvironment.userIdentity.getter();
  uint64_t v79 = v78 + *(int *)(v76 + 40);
  outlined init with copy of ReferenceResolutionClientProtocol?(v79, v77, &demangling cache variable for type metadata for SiriRequestIdentities?);
  uint64_t v80 = type metadata accessor for SiriRequestIdentities(0);
  int v81 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 48);
  int v82 = v81(v77, 1, v80);
  uint64_t v83 = *(void *)(v0 + 768);
  uint64_t v84 = *(void *)(v0 + 752);
  if (v82 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 752), &demangling cache variable for type metadata for SiriRequestIdentities?);
    uint64_t v85 = type metadata accessor for IdentifiedUser();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56))(v83, 1, 1, v85);
  }
  else
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 752), *(void *)(v0 + 768), &demangling cache variable for type metadata for IdentifiedUser?);
    outlined destroy of EncoreConversation.State(v84, type metadata accessor for SiriRequestIdentities);
  }
  uint64_t v86 = *(void *)(v0 + 744);
  dispatch thunk of UserIdentityProvider.identityForCurrentRequest.setter();
  swift_release();
  SiriEnvironment.userIdentity.getter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v79, v86, &demangling cache variable for type metadata for SiriRequestIdentities?);
  int v87 = v81(v86, 1, v80);
  uint64_t v88 = *(void *)(v0 + 760);
  uint64_t v89 = *(void *)(v0 + 744);
  if (v87 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 744), &demangling cache variable for type metadata for SiriRequestIdentities?);
    uint64_t v90 = type metadata accessor for IdentifiedUser();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v90 - 8) + 56))(v88, 1, 1, v90);
  }
  else
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v89 + *(int *)(v80 + 20), *(void *)(v0 + 760), &demangling cache variable for type metadata for IdentifiedUser?);
    outlined destroy of EncoreConversation.State(v89, type metadata accessor for SiriRequestIdentities);
  }
  uint64_t v91 = *(void *)(v0 + 736);
  dispatch thunk of UserIdentityProvider.identityMeetingUserSessionThreshold.setter();
  swift_release();
  SiriEnvironment.userIdentity.getter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v79, v91, &demangling cache variable for type metadata for SiriRequestIdentities?);
  int v92 = v81(v91, 1, v80);
  uint64_t v93 = *(void *)(v0 + 736);
  if (v92 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 736), &demangling cache variable for type metadata for SiriRequestIdentities?);
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined destroy of EncoreConversation.State(v93, type metadata accessor for SiriRequestIdentities);
  }
  uint64_t v94 = *(void *)(v0 + 560);
  dispatch thunk of UserIdentityProvider.knownHomeMembers.setter();
  swift_release();
  uint64_t v95 = *(void *)(v94 + 48);
  swift_beginAccess();
  unint64_t v96 = *(void *)(v95 + 32);
  if (v96 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v98 = _CocoaArrayWrapper.endIndex.getter();
    if (v98) {
      goto LABEL_39;
    }
LABEL_44:
    swift_bridgeObjectRelease();
    goto LABEL_45;
  }
  uint64_t v97 = *(void *)((v96 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v98 = swift_bridgeObjectRetain();
  if (!v97) {
    goto LABEL_44;
  }
LABEL_39:
  if ((v96 & 0xC000000000000001) != 0)
  {
    uint64_t v101 = MEMORY[0x1BA9E3990](0, v96);
  }
  else
  {
    if (!*(void *)((v96 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return MEMORY[0x1F4188298](v98, v99, v100);
    }
    uint64_t v101 = *(void *)(v96 + 32);
    swift_retain();
  }
  uint64_t v102 = *(void *)(v0 + 728);
  uint64_t v103 = *(void *)(v0 + 720);
  uint64_t v104 = *(void *)(v0 + 712);
  uint64_t v127 = *(void *)(v0 + 704);
  swift_bridgeObjectRelease();
  type metadata accessor for FlowTaskProvider();
  uint64_t v105 = v101 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime;
  uint64_t v106 = *(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 16);
  v106(v102, v101 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime, v104);
  swift_retain();
  swift_bridgeObjectRetain();
  dispatch thunk of FlowTaskProvider.__allocating_init(id:isClientInitiated:creationTime:)();
  SiriEnvironment.flowTask.setter();
  SiriEnvironment.currentRequest.getter();
  v106(v102, v105, v104);
  swift_bridgeObjectRetain();
  FlowTaskMetadata.init(id:isClientInitiated:creationTime:)();
  uint64_t v107 = type metadata accessor for FlowTaskMetadata();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v107 - 8) + 56))(v127, 0, 1, v107);
  CurrentRequest.flowTaskMetadata.setter();
  swift_release();
  swift_release_n();
LABEL_45:
  uint64_t v108 = *(void *)(v0 + 832);
  uint64_t v109 = *(void *)(v0 + 672);
  uint64_t v123 = *(void *)(v0 + 664);
  uint64_t v110 = *(void *)(v0 + 656);
  uint64_t v125 = *(void *)(v0 + 648);
  uint64_t v111 = *(void *)(v0 + 552);
  SiriEnvironment.scopedReferenceResolutionData.getter();
  outlined copy of Data?(*(void *)(v111 + *(int *)(v108 + 28)), *(void *)(v111 + *(int *)(v108 + 28) + 8));
  dispatch thunk of ScopedReferenceResolutionDataProvider.dataForCurrentRequest.setter();
  swift_release();
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  static AceService.currentAsync.getter();
  outlined init with copy of ReferenceResolutionClientProtocol(v0 + 16, v0 + 296);
  outlined init with copy of ReferenceResolutionClientProtocol(v0 + 56, v0 + 336);
  ExecutionContext.init(outputPublisher:aceServiceInvoker:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v110 + 16))(v123, v109, v125);
  ConversationContext.init(executionContext:)();
  (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v109, v125);
  outlined destroy of SiriRequestContext(v0 + 16);
  outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 256, v0 + 176, &demangling cache variable for type metadata for ActingFlow?);
  if (*(void *)(v0 + 200))
  {
    uint64_t v112 = *(void *)(v0 + 560);
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 176), v0 + 216);
    *(void *)(v0 + 920) = *(void *)(v112 + 24);
    uint64_t v98 = (uint64_t)EncoreConversation.accept(request:);
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    return MEMORY[0x1F4188298](v98, v99, v100);
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 176, &demangling cache variable for type metadata for ActingFlow?);
  id v113 = (void *)swift_task_alloc();
  *(void *)(v0 + 960) = v113;
  *id v113 = v0;
  v113[1] = EncoreConversation.accept(request:);
  return EncoreConversation.isEmpty()();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = v0[115];
  uint64_t v2 = swift_task_alloc();
  v0[116] = v2;
  *(void *)(v2 + 16) = v0 + 27;
  *(void *)(v2 + 24) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[117] = v3;
  *uint64_t v3 = v0;
  v3[1] = EncoreConversation.accept(request:);
  uint64_t v4 = v0[79];
  uint64_t v5 = v0[76];
  return MEMORY[0x1F4188160](v4, 0, 0, 0xD000000000000015, 0x80000001BA068060, closure #1 in EncoreEngine.asyncPushEvent(flow:)partial apply, v2, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 944) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = EncoreConversation.accept(request:);
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 904);
    swift_task_dealloc();
    uint64_t v3 = EncoreConversation.accept(request:);
    uint64_t v4 = v5;
  }
  return MEMORY[0x1F4188298](v3, v4, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v21;

  outlined init with take of RequestContinuation(v0[79], v0[80], type metadata accessor for RequestContinuation);
  __swift_project_boxed_opaque_existential_1(v0 + 27, v0[30]);
  if (ActingFlow.isAdaptedFlow.getter())
  {
    uint64_t v1 = (void *)swift_task_alloc();
    v0[119] = v1;
    *uint64_t v1 = v0;
    v1[1] = EncoreConversation.accept(request:);
    uint64_t v2 = v0[87];
    uint64_t v3 = v0[78];
    uint64_t v4 = v0[69];
    return EncoreEngine.asyncAcceptEvent(request:context:)(v3, v4, v2);
  }
  else
  {
    os_log_type_t v6 = v0[75];
    BOOL v7 = v0[74];
    uint64_t v8 = v0[73];
    uint64_t v9 = v0[70];
    Input.parse.getter();
    uint64_t v10 = Parse.usoTasks.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    *(void *)(v9 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_tasks) = v10;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 27));
    outlined init with copy of EncoreEngineEvent(v0[80], v0[72], (uint64_t (*)(void))type metadata accessor for UserInputResult);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v11 = v0[102];
      unint64_t v12 = v0[80];
      uint64_t v13 = v0[69];
      unint64_t v14 = v0[70] + v0[114];
      (*(void (**)(void, void))(v0[86] + 8))(v0[87], v0[85]);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v0 + 32), &demangling cache variable for type metadata for ActingFlow?);
      uint64_t v15 = v11
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
                   + 48);
      outlined init with copy of EncoreEngineEvent(v13, v11, type metadata accessor for SiriRequest);
      outlined init with copy of EncoreEngineEvent(v12, v15, type metadata accessor for RequestContinuation);
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      outlined assign with take of EncoreConversation.State(v11, v14);
      swift_endAccess();
    }
    else
    {
      uint64_t v16 = v0[87];
      uint64_t v17 = v0[86];
      uint64_t v18 = v0[85];
      outlined destroy of EncoreConversation.State(v0[72], (uint64_t (*)(void))type metadata accessor for UserInputResult);
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v0 + 32), &demangling cache variable for type metadata for ActingFlow?);
    }
    os_log_type_t v19 = v0[80];
    outlined init with copy of EncoreEngineEvent(v19, v0[68], (uint64_t (*)(void))type metadata accessor for UserInputResult);
    outlined destroy of EncoreConversation.State(v19, type metadata accessor for RequestContinuation);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v20 = (uint64_t (*)(void))v0[1];
    return v20();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 904);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](EncoreConversation.accept(request:), v1, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[86] + 8))(v0[87], v0[85]);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v0 + 32), &demangling cache variable for type metadata for ActingFlow?);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 27));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 904);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](EncoreConversation.accept(request:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v19;

  uint64_t v1 = v0[80];
  uint64_t v2 = v0[78];
  outlined destroy of EncoreConversation.State(v1, type metadata accessor for RequestContinuation);
  outlined init with take of RequestContinuation(v2, v1, type metadata accessor for RequestContinuation);
  uint64_t v3 = v0[75];
  uint64_t v4 = v0[74];
  uint64_t v5 = v0[73];
  os_log_type_t v6 = v0[70];
  Input.parse.getter();
  BOOL v7 = Parse.usoTasks.getter();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  *(void *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_tasks) = v7;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 27));
  outlined init with copy of EncoreEngineEvent(v0[80], v0[72], (uint64_t (*)(void))type metadata accessor for UserInputResult);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v8 = v0[102];
    uint64_t v9 = v0[80];
    uint64_t v10 = v0[69];
    uint64_t v11 = v0[70] + v0[114];
    (*(void (**)(void, void))(v0[86] + 8))(v0[87], v0[85]);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v0 + 32), &demangling cache variable for type metadata for ActingFlow?);
    unint64_t v12 = v8
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
                 + 48);
    outlined init with copy of EncoreEngineEvent(v10, v8, type metadata accessor for SiriRequest);
    outlined init with copy of EncoreEngineEvent(v9, v12, type metadata accessor for RequestContinuation);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    outlined assign with take of EncoreConversation.State(v8, v11);
    swift_endAccess();
  }
  else
  {
    uint64_t v13 = v0[87];
    unint64_t v14 = v0[86];
    uint64_t v15 = v0[85];
    outlined destroy of EncoreConversation.State(v0[72], (uint64_t (*)(void))type metadata accessor for UserInputResult);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v0 + 32), &demangling cache variable for type metadata for ActingFlow?);
  }
  uint64_t v16 = v0[80];
  outlined init with copy of EncoreEngineEvent(v16, v0[68], (uint64_t (*)(void))type metadata accessor for UserInputResult);
  outlined destroy of EncoreConversation.State(v16, type metadata accessor for RequestContinuation);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(unsigned char *)(v0 + 1016) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 968) = v1;
    *uint64_t v1 = v0;
    v1[1] = EncoreConversation.accept(request:);
    uint64_t v2 = *(void *)(v0 + 552);
    return EncoreConversation.attemptCorrection(on:)(v0 + 96, v2);
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 1008) = v4;
    void *v4 = v0;
    v4[1] = EncoreConversation.accept(request:);
    uint64_t v5 = *(void *)(v0 + 696);
    os_log_type_t v6 = *(void *)(v0 + 624);
    BOOL v7 = *(void *)(v0 + 552);
    return EncoreEngine.asyncAcceptEvent(request:context:)(v6, v7, v5);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 904);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](EncoreConversation.accept(request:), v1, 0);
}

{
  void *v0;
  long long *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = (long long *)(v0 + 12);
  if (v0[15])
  {
    uint64_t v2 = v0[70];
    outlined init with take of ReferenceResolutionClientProtocol(v1, (uint64_t)(v0 + 17));
    v0[122] = *(void *)(v2 + 24);
    return MEMORY[0x1F4188298](EncoreConversation.accept(request:), 0, 0);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v1, &demangling cache variable for type metadata for ActingFlow?);
    uint64_t v3 = (void *)swift_task_alloc();
    v0[126] = v3;
    *uint64_t v3 = v0;
    v3[1] = EncoreConversation.accept(request:);
    uint64_t v4 = v0[87];
    uint64_t v5 = v0[78];
    os_log_type_t v6 = v0[69];
    return EncoreEngine.asyncAcceptEvent(request:context:)(v5, v6, v4);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = v0[122];
  uint64_t v2 = swift_task_alloc();
  v0[123] = v2;
  *(void *)(v2 + 16) = v0 + 17;
  *(void *)(v2 + 24) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[124] = v3;
  *uint64_t v3 = v0;
  v3[1] = EncoreConversation.accept(request:);
  uint64_t v4 = v0[77];
  uint64_t v5 = v0[76];
  return MEMORY[0x1F4188160](v4, 0, 0, 0xD000000000000015, 0x80000001BA068060, partial apply for closure #1 in EncoreEngine.asyncPushEvent(flow:), v2, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 1000) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = EncoreConversation.accept(request:);
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 904);
    swift_task_dealloc();
    uint64_t v3 = EncoreConversation.accept(request:);
    uint64_t v4 = v5;
  }
  return MEMORY[0x1F4188298](v3, v4, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;

  uint64_t v1 = v0[80];
  uint64_t v2 = v0[77];
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 17));
  outlined init with take of RequestContinuation(v2, v1, type metadata accessor for RequestContinuation);
  outlined init with copy of EncoreEngineEvent(v0[80], v0[72], (uint64_t (*)(void))type metadata accessor for UserInputResult);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v3 = v0[102];
    uint64_t v4 = v0[80];
    uint64_t v5 = v0[69];
    os_log_type_t v6 = v0[70] + v0[114];
    (*(void (**)(void, void))(v0[86] + 8))(v0[87], v0[85]);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v0 + 32), &demangling cache variable for type metadata for ActingFlow?);
    BOOL v7 = v3
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
                + 48);
    outlined init with copy of EncoreEngineEvent(v5, v3, type metadata accessor for SiriRequest);
    outlined init with copy of EncoreEngineEvent(v4, v7, type metadata accessor for RequestContinuation);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    outlined assign with take of EncoreConversation.State(v3, v6);
    swift_endAccess();
  }
  else
  {
    uint64_t v8 = v0[87];
    uint64_t v9 = v0[86];
    uint64_t v10 = v0[85];
    outlined destroy of EncoreConversation.State(v0[72], (uint64_t (*)(void))type metadata accessor for UserInputResult);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v0 + 32), &demangling cache variable for type metadata for ActingFlow?);
  }
  uint64_t v11 = v0[80];
  outlined init with copy of EncoreEngineEvent(v11, v0[68], (uint64_t (*)(void))type metadata accessor for UserInputResult);
  outlined destroy of EncoreConversation.State(v11, type metadata accessor for RequestContinuation);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 904);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](EncoreConversation.accept(request:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[87];
  uint64_t v2 = v0[86];
  uint64_t v3 = v0[85];
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 17));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v0 + 32), &demangling cache variable for type metadata for ActingFlow?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 904);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](EncoreConversation.accept(request:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  outlined init with take of RequestContinuation(v0[78], v0[80], type metadata accessor for RequestContinuation);
  outlined init with copy of EncoreEngineEvent(v0[80], v0[72], (uint64_t (*)(void))type metadata accessor for UserInputResult);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v1 = v0[102];
    uint64_t v2 = v0[80];
    uint64_t v3 = v0[69];
    uint64_t v4 = v0[70] + v0[114];
    (*(void (**)(void, void))(v0[86] + 8))(v0[87], v0[85]);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v0 + 32), &demangling cache variable for type metadata for ActingFlow?);
    uint64_t v5 = v1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
                + 48);
    outlined init with copy of EncoreEngineEvent(v3, v1, type metadata accessor for SiriRequest);
    outlined init with copy of EncoreEngineEvent(v2, v5, type metadata accessor for RequestContinuation);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    outlined assign with take of EncoreConversation.State(v1, v4);
    swift_endAccess();
  }
  else
  {
    os_log_type_t v6 = v0[87];
    BOOL v7 = v0[86];
    uint64_t v8 = v0[85];
    outlined destroy of EncoreConversation.State(v0[72], (uint64_t (*)(void))type metadata accessor for UserInputResult);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v0 + 32), &demangling cache variable for type metadata for ActingFlow?);
  }
  uint64_t v9 = v0[80];
  outlined init with copy of EncoreEngineEvent(v9, v0[68], (uint64_t (*)(void))type metadata accessor for UserInputResult);
  outlined destroy of EncoreConversation.State(v9, type metadata accessor for RequestContinuation);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t EncoreConversation.accept(request:)(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 904);
  *(unsigned char *)(*(void *)v1 + 1016) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](EncoreConversation.accept(request:), v2, 0);
}

uint64_t EncoreEngine.asyncPushEvent(flow:)(uint64_t a1, uint64_t a2)
{
  void v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x1F4188298](EncoreEngine.asyncPushEvent(flow:), 0, 0);
}

uint64_t EncoreEngine.asyncPushEvent(flow:)()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  uint64_t v3 = type metadata accessor for RequestContinuation(0);
  *uint64_t v2 = v0;
  v2[1] = EncoreEngine.asyncPushEvent(flow:);
  uint64_t v4 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188160](v4, 0, 0, 0xD000000000000015, 0x80000001BA068060, closure #1 in EncoreEngine.asyncPushEvent(flow:)partial apply, v1, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](EncoreEngine.asyncPushEvent(flow:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t EncoreEngine.asyncAcceptEvent(request:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v4[7] = type metadata accessor for SiriRequest(0);
  v4[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Parse();
  v4[9] = v5;
  v4[10] = *(void *)(v5 - 8);
  v4[11] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Parse.DirectInvocation();
  v4[12] = v6;
  v4[13] = *(void *)(v6 - 8);
  v4[14] = swift_task_alloc();
  return MEMORY[0x1F4188298](EncoreEngine.asyncAcceptEvent(request:context:), 0, 0);
}

uint64_t EncoreEngine.asyncAcceptEvent(request:context:)()
{
  uint64_t v40 = v0;
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  Input.parse.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3) == *MEMORY[0x1E4FA1F38])
  {
    uint64_t v5 = v0[13];
    uint64_t v4 = v0[14];
    uint64_t v7 = v0[11];
    uint64_t v6 = v0[12];
    (*(void (**)(uint64_t, void))(v0[10] + 96))(v7, v0[9]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v4, v7, v6);
    uint64_t v8 = Parse.DirectInvocation.toSnippetEvent.getter();
    v0[15] = v8;
    if (v8)
    {
      uint64_t v9 = v8;
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl(&dword_1B9C64000, v11, v12, "[EncoreConversation] asyncAcceptEvent DirectInvocation", v13, 2u);
        MEMORY[0x1BA9E48C0](v13, -1, -1);
      }
      uint64_t v15 = v0[5];
      uint64_t v14 = v0[6];

      uint64_t v16 = (void *)swift_task_alloc();
      v0[16] = v16;
      _OWORD v16[2] = v14;
      v16[3] = v9;
      void v16[4] = v15;
      uint64_t v17 = (void *)swift_task_alloc();
      v0[17] = v17;
      uint64_t v18 = type metadata accessor for RequestContinuation(0);
      *uint64_t v17 = v0;
      v17[1] = EncoreEngine.asyncAcceptEvent(request:context:);
      uint64_t v19 = v0[3];
      os_log_type_t v20 = partial apply for closure #1 in EncoreEngine.asyncAcceptEvent(request:context:);
      goto LABEL_16;
    }
    uint64_t v22 = v0[13];
    uint64_t v21 = v0[14];
    uint64_t v23 = v0[12];
  }
  else
  {
    uint64_t v22 = v0[10];
    uint64_t v21 = v0[11];
    uint64_t v23 = v0[9];
  }
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v24 = v0[8];
  uint64_t v25 = v0[4];
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.executor);
  outlined init with copy of EncoreEngineEvent(v25, v24, type metadata accessor for SiriRequest);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  uint64_t v30 = v0[8];
  if (v29)
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v39 = v32;
    *(_DWORD *)uint64_t v31 = 136315138;
    type metadata accessor for Input();
    lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor(&lazy protocol witness table cache variable for type Input and conformance Input, MEMORY[0x1E4FA1EE0]);
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of EncoreConversation.State(v30, type metadata accessor for SiriRequest);
    _os_log_impl(&dword_1B9C64000, v27, v28, "[EncoreConversation] default asyncAcceptEvent %s", v31, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v32, -1, -1);
    MEMORY[0x1BA9E48C0](v31, -1, -1);
  }
  else
  {
    outlined destroy of EncoreConversation.State(v0[8], type metadata accessor for SiriRequest);
  }

  uint64_t v35 = v0[6];
  uint64_t v16 = (void *)swift_task_alloc();
  v0[18] = v16;
  long long v36 = *((_OWORD *)v0 + 2);
  _OWORD v16[2] = v35;
  *(_OWORD *)(v16 + 3) = v36;
  uint64_t v37 = (void *)swift_task_alloc();
  v0[19] = v37;
  uint64_t v18 = type metadata accessor for RequestContinuation(0);
  *uint64_t v37 = v0;
  v37[1] = EncoreEngine.asyncAcceptEvent(request:context:);
  uint64_t v19 = v0[3];
  os_log_type_t v20 = partial apply for closure #2 in EncoreEngine.asyncAcceptEvent(request:context:);
LABEL_16:
  return MEMORY[0x1F41880D8](v19, 0, 0, 0xD000000000000022, 0x80000001BA068080, v20, v16, v18);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](EncoreEngine.asyncAcceptEvent(request:context:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t EncoreConversation.isEmpty()()
{
  *(void *)(v1 + 16) = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v2 = static ConversationActor.shared;
  *(void *)(v1 + 24) = static ConversationActor.shared;
  return MEMORY[0x1F4188298](EncoreConversation.isEmpty(), v2, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v3;

  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = EncoreConversation.isEmpty();
  return EncoreEngine.isEmpty()();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  int v4;
  uint8_t *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v9;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(unsigned __int8 *)(v0 + 44);
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    *(_DWORD *)(v0 + 40) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v2, v3, "[EncoreConversation] Is empty %{BOOL}d", v5, 8u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  uint64_t v6 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v7 = *(unsigned __int8 *)(v0 + 44);
  return v6(v7);
}

uint64_t EncoreConversation.isEmpty()(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *(unsigned char *)(*(void *)v1 + 44) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](EncoreConversation.isEmpty(), v2, 0);
}

uint64_t EncoreConversation.attemptCorrection(on:)(uint64_t a1, uint64_t a2)
{
  v3[23] = a2;
  v3[24] = v2;
  v3[22] = a1;
  uint64_t v4 = type metadata accessor for AcceptanceType();
  v3[25] = v4;
  v3[26] = *(void *)(v4 - 8);
  v3[27] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Acceptance();
  v3[28] = v5;
  v3[29] = *(void *)(v5 - 8);
  v3[30] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v6 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](EncoreConversation.attemptCorrection(on:), v6, 0);
}

uint64_t EncoreConversation.attemptCorrection(on:)()
{
  uint64_t v1 = v0[24] + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_correctionsEngine;
  outlined init with copy of ReferenceResolutionClientProtocol(v1, (uint64_t)(v0 + 8));
  uint64_t v2 = v0[11];
  uint64_t v3 = v0[12];
  __swift_project_boxed_opaque_existential_1(v0 + 8, v2);
  char v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 8));
  if (v4)
  {
    uint64_t v5 = v0[26];
    uint64_t v6 = v0[24];
    uint64_t v31 = v0[27];
    uint64_t v32 = v0[25];
    uint64_t v30 = v0[23];
    outlined init with copy of ReferenceResolutionClientProtocol(v1, (uint64_t)(v0 + 13));
    uint64_t v7 = v0[16];
    uint64_t v29 = v0[17];
    __swift_project_boxed_opaque_existential_1(v0 + 13, v7);
    uint64_t v8 = *(void *)(v6 + 40);
    uint64_t v28 = *(void *)(v6 + 32);
    v0[5] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of Flow.toActingFlow()>>.0);
    uint64_t v9 = type metadata accessor for SiriCorrectionsFlow();
    uint64_t v10 = lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor((unint64_t *)&lazy protocol witness table cache variable for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow, (void (*)(uint64_t))type metadata accessor for SiriCorrectionsFlow);
    v0[18] = v9;
    v0[19] = v10;
    uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v0[20] = v9;
    v0[6] = OpaqueTypeConformance2;
    v0[21] = v10;
    os_log_type_t v12 = v0 + 2;
    v0[7] = swift_getOpaqueTypeConformance2();
    __swift_allocate_boxed_opaque_existential_0(v0 + 2);
    CorrectionsEngine.getCorrectionFlow(pluginId:)(v28, v8, v7, v29);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 13));
    type metadata accessor for SiriEnvironment();
    uint64_t v13 = swift_task_alloc();
    *(void *)(v13 + 16) = v0 + 2;
    *(void *)(v13 + 24) = v30;
    static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
    swift_task_dealloc();
    Acceptance.type.getter();
    int v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 88))(v31, v32);
    uint64_t v15 = v0[30];
    uint64_t v16 = v0[29];
    uint64_t v18 = v0[27];
    uint64_t v17 = v0[28];
    uint64_t v19 = v0[25];
    uint64_t v20 = v0[26];
    uint64_t v21 = v0[22];
    if (v14 == *MEMORY[0x1E4FA1BA0])
    {
      (*(void (**)(void, void))(v16 + 8))(v0[30], v0[28]);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
      *(void *)(v21 + 32) = 0;
      *(_OWORD *)uint64_t v21 = 0u;
      *(_OWORD *)(v21 + 16) = 0u;
    }
    else
    {
      (*(void (**)(void, void))(v20 + 8))(v0[27], v0[25]);
      long long v33 = *(_OWORD *)(v0 + 5);
      uint64_t v23 = v0[5];
      uint64_t v24 = __swift_project_boxed_opaque_existential_1(v12, v23);
      *(_OWORD *)(v21 + 24) = v33;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)v21);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v23 - 8) + 16))(boxed_opaque_existential_0, v24, v23);
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  }
  else
  {
    uint64_t v22 = v0[22];
    *(void *)(v22 + 32) = 0;
    *(_OWORD *)uint64_t v22 = 0u;
    *(_OWORD *)(v22 + 16) = 0u;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = (uint64_t (*)(void))v0[1];
  return v26();
}

uint64_t EncoreConversation.prepare()()
{
  v1[9] = v0;
  v1[10] = type metadata accessor for EncoreConversation.State(0);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  type metadata accessor for RequestContinuation(0);
  v1[13] = swift_task_alloc();
  type metadata accessor for SiriRequest(0);
  v1[14] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v2 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](EncoreConversation.prepare(), v2, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v33;
  uint64_t v34[3];
  void *v35;
  uint64_t v36;

  uint64_t v35 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "[EncoreConversation] Prepare", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[12];

  uint64_t v7 = v5 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_state;
  swift_beginAccess();
  outlined init with copy of EncoreEngineEvent(v7, v6, type metadata accessor for EncoreConversation.State);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = v0[13];
    uint64_t v9 = v0[14];
    uint64_t v10 = v0[11];
    uint64_t v11 = v0[12];
    os_log_type_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation));
    uint64_t v13 = v7;
    int v14 = v11 + *(int *)(v12 + 48);
    outlined init with take of RequestContinuation(v11, v9, type metadata accessor for SiriRequest);
    outlined init with take of RequestContinuation(v14, v8, type metadata accessor for RequestContinuation);
    uint64_t v15 = v10 + *(int *)(v12 + 48);
    outlined init with take of RequestContinuation(v9, v10, type metadata accessor for SiriRequest);
    outlined init with take of RequestContinuation(v8, v15, type metadata accessor for RequestContinuation);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    outlined assign with take of EncoreConversation.State(v10, v13);
    swift_endAccess();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    outlined destroy of EncoreConversation.State(v0[12], type metadata accessor for EncoreConversation.State);
    swift_retain_n();
    uint64_t v17 = Logger.logObject.getter();
    uint64_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = v0[11];
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      long long v33 = swift_slowAlloc();
      v34[0] = v33;
      *(_DWORD *)uint64_t v20 = 136315138;
      outlined init with copy of EncoreEngineEvent(v7, v19, type metadata accessor for EncoreConversation.State);
      uint64_t v21 = v7;
      uint64_t v22 = EncoreConversation.State.description.getter();
      uint64_t v24 = v23;
      outlined destroy of EncoreConversation.State(v19, type metadata accessor for EncoreConversation.State);
      uint64_t v25 = v22;
      uint64_t v7 = v21;
      v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v24, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v17, v18, "[EncoreConversation] Prepare failed. Invalid state %s.", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v33, -1, -1);
      MEMORY[0x1BA9E48C0](v20, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    uint64_t v26 = v0[11];
    v34[0] = 0;
    v34[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    strcpy((char *)v34, "Invalid state ");
    HIBYTE(v34[1]) = -18;
    outlined init with copy of EncoreEngineEvent(v7, v26, type metadata accessor for EncoreConversation.State);
    v27._uint64_t countAndFlagsBits = EncoreConversation.State.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    outlined destroy of EncoreConversation.State(v26, type metadata accessor for EncoreConversation.State);
    v28._object = (void *)0x80000001BA0680B0;
    v28._uint64_t countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v28);
    uint64_t v29 = v34[0];
    uint64_t v30 = v34[1];
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
    swift_allocError();
    *uint64_t v31 = v29;
    v31[1] = v30;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(void))v0[1];
  }
  return v16();
}

uint64_t EncoreConversation.commit()(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[11] = swift_task_alloc();
  v2[12] = type metadata accessor for EncoreConversation.State(0);
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  uint64_t v3 = *(void *)(type metadata accessor for RequestContinuation(0) - 8);
  v2[15] = v3;
  v2[16] = *(void *)(v3 + 64);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  uint64_t v4 = *(void *)(type metadata accessor for SiriRequest(0) - 8);
  v2[19] = v4;
  v2[20] = *(void *)(v4 + 64);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v5 = static ConversationActor.shared;
  v2[23] = static ConversationActor.shared;
  return MEMORY[0x1F4188298](EncoreConversation.commit(), v5, 0);
}

uint64_t EncoreConversation.commit()()
{
  int64_t v54 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "[EncoreConversation] Commit", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }
  uint64_t v5 = v0[10];

  uint64_t v6 = *(void *)(v5 + 16);
  OS_dispatch_semaphore.wait()();
  closure #1 in JetsamHelper.ensureJetsamTransaction()(v6);
  OS_dispatch_semaphore.signal()();
  uint64_t v7 = v0[14];
  uint64_t v8 = v0[10] + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_state;
  swift_beginAccess();
  outlined init with copy of EncoreEngineEvent(v8, v7, type metadata accessor for EncoreConversation.State);
  if (swift_getEnumCaseMultiPayload() == 3)
  {
    uint64_t v9 = v0[21];
    uint64_t v10 = v0[22];
    uint64_t v11 = v0[18];
    uint64_t v12 = v0[17];
    uint64_t v49 = v0[20];
    uint64_t v13 = v0[14];
    uint64_t v46 = v0[15];
    uint64_t v47 = v0[19];
    uint64_t v14 = v0[11];
    uint64_t v48 = v14;
    uint64_t v51 = v0[10];
    uint64_t v52 = (uint64_t *)v0[13];
    uint64_t v15 = v13
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
                 + 48);
    outlined init with take of RequestContinuation(v13, v10, type metadata accessor for SiriRequest);
    outlined init with take of RequestContinuation(v15, v11, type metadata accessor for RequestContinuation);
    uint64_t v16 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v14, 1, 1, v16);
    uint64_t v50 = v8;
    uint64_t v17 = v9;
    outlined init with copy of EncoreEngineEvent(v10, v9, type metadata accessor for SiriRequest);
    uint64_t v18 = v12;
    outlined init with copy of EncoreEngineEvent(v11, v12, type metadata accessor for RequestContinuation);
    uint64_t v19 = static ConversationActor.shared;
    uint64_t v20 = lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, (void (*)(uint64_t))type metadata accessor for ConversationActor);
    unint64_t v21 = (*(unsigned __int8 *)(v47 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
    unint64_t v22 = (v49 + *(unsigned __int8 *)(v46 + 80) + v21) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
    uint64_t v23 = (void *)swift_allocObject();
    v23[2] = v19;
    v23[3] = v20;
    v23[4] = v51;
    outlined init with take of RequestContinuation(v17, (uint64_t)v23 + v21, type metadata accessor for SiriRequest);
    outlined init with take of RequestContinuation(v18, (uint64_t)v23 + v22, type metadata accessor for RequestContinuation);
    swift_retain();
    swift_retain();
    uint64_t v24 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime24ConversationCommitResultO_Tgm5(v48, (uint64_t)&async function pointer to partial apply for closure #1 in EncoreConversation.commit(), (uint64_t)v23);
    v0[24] = v24;
    *uint64_t v52 = v24;
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    swift_retain();
    outlined assign with take of EncoreConversation.State((uint64_t)v52, v50);
    swift_endAccess();
    uint64_t v25 = (void *)swift_task_alloc();
    v0[25] = v25;
    uint64_t v26 = type metadata accessor for ConversationCommitResult();
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    *uint64_t v25 = v0;
    v25[1] = EncoreConversation.commit();
    uint64_t v28 = v0[9];
    uint64_t v29 = MEMORY[0x1E4FBC0F0];
    return MEMORY[0x1F4187D90](v28, v24, v26, v27, v29);
  }
  else
  {
    outlined destroy of EncoreConversation.State(v0[14], type metadata accessor for EncoreConversation.State);
    swift_retain_n();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = v0[13];
      long long v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      v53[0] = v34;
      *(_DWORD *)long long v33 = 136315138;
      outlined init with copy of EncoreEngineEvent(v8, v32, type metadata accessor for EncoreConversation.State);
      uint64_t v35 = EncoreConversation.State.description.getter();
      unint64_t v37 = v36;
      outlined destroy of EncoreConversation.State(v32, type metadata accessor for EncoreConversation.State);
      v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v30, v31, "[EncoreConversation] Commit failed. Invalid state %s.", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v34, -1, -1);
      MEMORY[0x1BA9E48C0](v33, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    uint64_t v38 = v0[13];
    v53[0] = 0;
    v53[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    strcpy((char *)v53, "Invalid state ");
    HIBYTE(v53[1]) = -18;
    outlined init with copy of EncoreEngineEvent(v8, v38, type metadata accessor for EncoreConversation.State);
    v39._uint64_t countAndFlagsBits = EncoreConversation.State.description.getter();
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    outlined destroy of EncoreConversation.State(v38, type metadata accessor for EncoreConversation.State);
    v40._object = (void *)0x80000001BA0680D0;
    v40._uint64_t countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v40);
    uint64_t v41 = v53[0];
    uint64_t v42 = v53[1];
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
    swift_allocError();
    *uint64_t v43 = v41;
    v43[1] = v42;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v44 = (uint64_t (*)(void))v0[1];
    return v44();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 208) = v0;
  swift_task_dealloc();
  os_log_type_t v3 = *(void *)(v2 + 184);
  if (v0) {
    uint64_t v4 = EncoreConversation.commit();
  }
  else {
    uint64_t v4 = EncoreConversation.commit();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[22];
  uint64_t v2 = v0[18];
  swift_release();
  outlined destroy of EncoreConversation.State(v2, type metadata accessor for RequestContinuation);
  outlined destroy of EncoreConversation.State(v1, type metadata accessor for SiriRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[22];
  uint64_t v2 = v0[18];
  swift_release();
  outlined destroy of EncoreConversation.State(v2, type metadata accessor for RequestContinuation);
  outlined destroy of EncoreConversation.State(v1, type metadata accessor for SiriRequest);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t closure #1 in EncoreConversation.commit()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[27] = a5;
  v6[28] = a6;
  v6[25] = a1;
  v6[26] = a4;
  v6[29] = type metadata accessor for EncoreConversation.State(0);
  v6[30] = swift_task_alloc();
  v6[31] = type metadata accessor for ConversationCommitResult();
  v6[32] = swift_task_alloc();
  v6[33] = swift_task_alloc();
  uint64_t v7 = *(void *)(type metadata accessor for RequestContinuation(0) - 8);
  v6[34] = v7;
  v6[35] = *(void *)(v7 + 64);
  v6[36] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for ExecutionContext();
  v6[37] = v8;
  v6[38] = *(void *)(v8 - 8);
  v6[39] = swift_task_alloc();
  v6[40] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ConversationContext();
  v6[41] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v6[42] = v10;
  v6[43] = *(void *)(v10 + 64);
  v6[44] = swift_task_alloc();
  v6[45] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v11 = static ConversationActor.shared;
  v6[46] = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in EncoreConversation.commit(), v11, 0);
}

uint64_t closure #1 in EncoreConversation.commit()()
{
  uint64_t v2 = v0[39];
  uint64_t v1 = v0[40];
  uint64_t v3 = v0[37];
  uint64_t v4 = v0[38];
  uint64_t v5 = v0[26];
  uint64_t v18 = (uint64_t *)v0[27];
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  static AceService.currentAsync.getter();
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v0 + 2), (uint64_t)(v0 + 12));
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v0 + 7), (uint64_t)(v0 + 17));
  ExecutionContext.init(outputPublisher:aceServiceInvoker:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  ConversationContext.init(executionContext:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1, v3);
  outlined destroy of SiriRequestContext((uint64_t)(v0 + 2));
  uint64_t v6 = OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_taskObserver;
  v0[47] = OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_taskObserver;
  uint64_t v7 = (void *)(v5 + v6);
  v0[48] = *v7;
  uint64_t v8 = v7[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v10 = *(void *)(v5 + 56);
  uint64_t v11 = OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_tasks;
  v0[49] = OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_tasks;
  uint64_t v12 = *(void *)(v5 + v11);
  v0[50] = v12;
  uint64_t v13 = *v18;
  uint64_t v14 = v18[1];
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 + 8)
                                                                                     + **(int **)(v8 + 8));
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = (void *)swift_task_alloc();
  v0[51] = v15;
  *uint64_t v15 = v0;
  v15[1] = closure #1 in EncoreConversation.commit();
  return v17(v10, v12, v13, v14, ObjectType, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 368);
  swift_task_dealloc();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](closure #1 in EncoreConversation.commit(), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v1 = v0[44];
  uint64_t v2 = v0[45];
  uint64_t v3 = v0[42];
  uint64_t v4 = v0[41];
  uint64_t v6 = v0[35];
  uint64_t v5 = v0[36];
  uint64_t v7 = v0[34];
  uint64_t v8 = v0[26];
  outlined init with copy of EncoreEngineEvent(v0[28], v5, type metadata accessor for RequestContinuation);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v4);
  uint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v6 + *(unsigned __int8 *)(v3 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v11 = swift_allocObject();
  v0[52] = v11;
  *(void *)(v11 + 16) = v8;
  outlined init with take of RequestContinuation(v5, v11 + v9, type metadata accessor for RequestContinuation);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v11 + v10, v1, v4);
  swift_retain();
  uint64_t v12 = (void *)swift_task_alloc();
  v0[53] = v12;
  *uint64_t v12 = v0;
  v12[1] = closure #1 in EncoreConversation.commit();
  uint64_t v13 = v0[27];
  uint64_t v14 = v0[25];
  return EncoreConversation.runAndLogIntentFinalExecutionContext(request:finalExecution:)(v14, v13, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in EncoreConversation.commit(), v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 432) = v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 368);
  if (v0) {
    uint64_t v4 = closure #1 in EncoreConversation.commit();
  }
  else {
    uint64_t v4 = closure #1 in EncoreConversation.commit();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  void *v7;
  uint64_t v8;

  outlined init with copy of EncoreEngineEvent(v0[25], v0[33], (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
  if (swift_getEnumCaseMultiPayload())
  {
    uint64_t v1 = v0[33];
    (*(void (**)(void, void))(v0[42] + 8))(v0[45], v0[41]);
    outlined destroy of EncoreConversation.State(v1, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
    uint64_t v2 = v0[30];
    uint64_t v3 = v0[26];
    *(void *)(v2 + 32) = 0;
    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    swift_storeEnumTagMultiPayload();
    uint64_t v4 = v3 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_state;
    swift_beginAccess();
    outlined assign with take of EncoreConversation.State(v2, v4);
    swift_endAccess();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = (void *)swift_task_alloc();
    v0[55] = v7;
    void *v7 = v0;
    v7[1] = closure #1 in EncoreConversation.commit();
    return EncoreConversation.isEmpty()();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t ObjectType;
  void *v9;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  uint64_t v1 = *(void *)(v0 + 200);
  if (*(unsigned char *)(v0 + 464) == 1)
  {
    outlined destroy of EncoreConversation.State(*(void *)(v0 + 200), (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
    uint64_t v2 = swift_bridgeObjectRetain();
    uint64_t v3 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v3 = *(void *)(*(void *)(v0 + 208) + *(void *)(v0 + 392));
    swift_bridgeObjectRetain();
    outlined destroy of EncoreConversation.State(v1, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
    uint64_t v2 = MEMORY[0x1E4FBC860];
  }
  uint64_t v4 = *(void **)(v0 + 256);
  uint64_t v5 = *(void *)(v0 + 200);
  uint64_t v6 = (void *)(*(void *)(v0 + 208) + *(void *)(v0 + 376));
  uint8_t *v4 = v3;
  v4[1] = v2;
  swift_storeEnumTagMultiPayload();
  outlined init with take of RequestContinuation((uint64_t)v4, v5, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
  *(void *)(v0 + 448) = *v6;
  uint64_t v7 = v6[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v7 + 16) + **(int **)(v7 + 16));
  swift_unknownObjectRetain();
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 456) = v9;
  *uint64_t v9 = v0;
  v9[1] = closure #1 in EncoreConversation.commit();
  return v11(ObjectType, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 368);
  swift_task_dealloc();
  swift_unknownObjectRelease();
  return MEMORY[0x1F4188298](closure #1 in EncoreConversation.commit(), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  (*(void (**)(void, void))(v0[42] + 8))(v0[45], v0[41]);
  uint64_t v1 = v0[30];
  uint64_t v2 = v0[26];
  *(void *)(v1 + 32) = 0;
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  swift_storeEnumTagMultiPayload();
  uint64_t v3 = v2 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_state;
  swift_beginAccess();
  outlined assign with take of EncoreConversation.State(v1, v3);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void))(v0[42] + 8))(v0[45], v0[41]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t closure #1 in EncoreConversation.commit()(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 368);
  *(unsigned char *)(*(void *)v1 + 464) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in EncoreConversation.commit(), v2, 0);
}

uint64_t closure #1 in closure #1 in EncoreConversation.commit()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  void v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v5 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in EncoreConversation.commit(), v5, 0);
}

uint64_t closure #1 in closure #1 in EncoreConversation.commit()()
{
  *(void *)(v0 + 48) = *(void *)(*(void *)(v0 + 24) + 24);
  return MEMORY[0x1F4188298](closure #1 in closure #1 in EncoreConversation.commit(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  long long v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  uint64_t v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  uint64_t v5 = type metadata accessor for ConversationCommitResult();
  void *v4 = v0;
  v4[1] = closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:);
  uint64_t v6 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188160](v6, 0, 0, 0xD000000000000027, 0x80000001BA0680F0, closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:)partial apply, v2, v5);
}

uint64_t EncoreEngine.asyncCommitEvent(continuation:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  void v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x1F4188298](EncoreEngine.asyncCommitEvent(continuation:context:), 0, 0);
}

uint64_t EncoreEngine.asyncCommitEvent(continuation:context:)()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  long long v3 = *(_OWORD *)(v0 + 24);
  *(void *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v4;
  uint64_t v5 = type metadata accessor for ConversationCommitResult();
  void *v4 = v0;
  v4[1] = static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:);
  uint64_t v6 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188160](v6, 0, 0, 0xD000000000000027, 0x80000001BA0680F0, partial apply for closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:), v2, v5);
}

uint64_t EncoreConversation.runAndLogIntentFinalExecutionContext(request:finalExecution:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  void v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v5[7] = type metadata accessor for ConversationCommitResult();
  v5[8] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v5[9] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v5[10] = v6;
  v5[11] = *(void *)(v6 - 8);
  v5[12] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v7 = static ConversationActor.shared;
  v5[13] = static ConversationActor.shared;
  return MEMORY[0x1F4188298](EncoreConversation.runAndLogIntentFinalExecutionContext(request:finalExecution:), v7, 0);
}

uint64_t EncoreConversation.runAndLogIntentFinalExecutionContext(request:finalExecution:)()
{
  uint64_t v1 = (void *)v0[3];
  v0[14] = *v1;
  v0[15] = v1[1];
  type metadata accessor for SiriRequest(0);
  Input.identifier.getter();
  uint64_t v2 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](EncoreConversation.runAndLogIntentFinalExecutionContext(request:finalExecution:), v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  *(void *)(v0 + 128) = *(void *)(*(void *)(v0 + 48) + 24);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v1 = static FlowActor.shared;
  return MEMORY[0x1F4188298](EncoreConversation.runAndLogIntentFinalExecutionContext(request:finalExecution:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = v0[13];
  v0[17] = (*(uint64_t (**)(void))(**(void **)(v0[16] + 24) + 160))();
  return MEMORY[0x1F4188298](EncoreConversation.runAndLogIntentFinalExecutionContext(request:finalExecution:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t);
  void (*v6)(uint64_t, void, uint64_t, uint64_t);
  void *v7;
  uint64_t v8;
  int *v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;

  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  long long v3 = v0[9];
  uint64_t v4 = v0[10];
  uint64_t v10 = (int *)v0[4];
  v0[18] = type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v0[19] = v5;
  v0[20] = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v3, v1, v4);
  uint64_t v6 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56);
  v0[21] = v6;
  v0[22] = (v2 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v6(v3, 0, 1, v4);
  dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextStarted(rcId:hypothesisId:fromPlugin:stackDepth:)();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v3, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v11 = (uint64_t (*)(uint64_t))((char *)v10 + *v10);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[23] = v7;
  void *v7 = v0;
  v7[1] = EncoreConversation.runAndLogIntentFinalExecutionContext(request:finalExecution:);
  uint64_t v8 = v0[2];
  return v11(v8);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc();
  long long v3 = *(void *)(v2 + 104);
  if (v0) {
    uint64_t v4 = EncoreConversation.runAndLogIntentFinalExecutionContext(request:finalExecution:);
  }
  else {
    uint64_t v4 = EncoreConversation.runAndLogIntentFinalExecutionContext(request:finalExecution:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  void (**v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  void (*v15)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v16;

  uint64_t v15 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[21];
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[19];
  long long v3 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v5 = v0[9];
  uint64_t v4 = v0[10];
  outlined init with copy of EncoreEngineEvent(v0[2], v0[8], (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  static ConversationSELFHelper.shared.getter();
  v1(v5, v2, v4);
  v15(v5, 0, 1, v4);
  uint64_t v7 = (void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v8 = v0[12];
  uint64_t v10 = v0[9];
  uint64_t v9 = v0[10];
  uint64_t v11 = v0[8];
  if (EnumCaseMultiPayload == 1)
  {
    dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextFailed(rcId:hypothesisId:reason:)();
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    (*v7)(v8, v9);
    uint64_t v12 = type metadata accessor for FlowUnhandledReason();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  }
  else
  {
    dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextEnded(rcId:hypothesisId:)();
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    (*v7)(v8, v9);
    outlined destroy of EncoreConversation.State(v11, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  void (*v8)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v9;

  uint64_t v8 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[21];
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[19];
  uint64_t v2 = v0[11];
  long long v3 = v0[12];
  uint64_t v5 = v0[9];
  uint64_t v4 = v0[10];
  static ConversationSELFHelper.shared.getter();
  v1(v5, v3, v4);
  v8(v5, 0, 1, v4);
  dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextFailed(rcId:hypothesisId:reason:)();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t EncoreConversation.stackCount.getter()
{
  *(void *)(v1 + 16) = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v2 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](EncoreConversation.stackCount.getter, v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  *(void *)(v0 + 24) = *(void *)(*(void *)(v0 + 16) + 24);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v1 = static FlowActor.shared;
  return MEMORY[0x1F4188298](EncoreConversation.stackCount.getter, v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v0 + 24) + 24) + 160))();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t EncoreConversation.isCorrectable()()
{
  *(void *)(v1 + 56) = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v2 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](EncoreConversation.isCorrectable(), v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  outlined init with copy of ReferenceResolutionClientProtocol(v0[7] + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_correctionsEngine, (uint64_t)(v0 + 2));
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  long long v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4(v3 & 1);
}

uint64_t closure #1 in EncoreConversation.attemptCorrection(on:)(void *a1)
{
  return dispatch thunk of InputAccepting.accept(input:)();
}

uint64_t EncoreConversation.paraphrase()(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v2 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](EncoreConversation.paraphrase(), v2, 0);
}

uint64_t EncoreConversation.paraphrase()()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "[EncoreConversation] Paraphrase", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }

  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_1B9C64000, v5, v6, "[EncoreConversation] Paraphrasing not implemented yet, will return an empty paraphrase.", v7, 2u);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }

  static ActionParaphrase.noParaphrase()();
  type metadata accessor for ConversationParaphraseResult(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t EncoreConversation.flexibleExecutionSupport()(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v2 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](EncoreConversation.flexibleExecutionSupport(), v2, 0);
}

uint64_t EncoreConversation.flexibleExecutionSupport()()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "[EncoreConversation] flexibleExecutionSupport unimplemented", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }

  type metadata accessor for FlexibleExecutionSupportOptions();
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor((unint64_t *)&lazy protocol witness table cache variable for type FlexibleExecutionSupportOptions and conformance FlexibleExecutionSupportOptions, MEMORY[0x1E4FA1E88]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [FlexibleExecutionSupportOptions]);
  lazy protocol witness table accessor for type [FlexibleExecutionSupportOptions] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t protocol witness for Conversational.cancel() in conformance EncoreConversation()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return EncoreConversation.cancel()();
}

uint64_t protocol witness for Conversational.ensureReady(timeout:) in conformance EncoreConversation(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return EncoreConversation.ensureReady(timeout:)(a1);
}

uint64_t protocol witness for Conversational.accept(request:) in conformance EncoreConversation(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return EncoreConversation.accept(request:)(a1, a2);
}

uint64_t protocol witness for Conversational.paraphrase() in conformance EncoreConversation(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return EncoreConversation.paraphrase()(a1);
}

uint64_t protocol witness for Conversational.prepare() in conformance EncoreConversation()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return EncoreConversation.prepare()();
}

uint64_t protocol witness for Conversational.commit() in conformance EncoreConversation(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return EncoreConversation.commit()(a1);
}

uint64_t protocol witness for Conversational.isEmpty() in conformance EncoreConversation()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return EncoreConversation.isEmpty()();
}

uint64_t protocol witness for Conversational.isCorrectable() in conformance EncoreConversation()
{
  *(void *)(v1 + 56) = *v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v2 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](EncoreConversation.isCorrectable(), v2, 0);
}

uint64_t protocol witness for Conversational.flexibleExecutionSupport() in conformance EncoreConversation(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return EncoreConversation.flexibleExecutionSupport()(a1);
}

uint64_t closure #1 in EncoreEngine.asyncPushEvent(flow:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  outlined init with copy of ReferenceResolutionClientProtocol(a2, (uint64_t)v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 24) = 0;
  outlined init with take of ReferenceResolutionClientProtocol(v17, v14 + 32);
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v14 + v13, (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  *(void *)(v14 + ((v8 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) = a3;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in EncoreEngine.asyncPushEvent(flow:), v14);
  return swift_release();
}

uint64_t closure #1 in closure #1 in EncoreEngine.asyncPushEvent(flow:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  long long v6[2] = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation.YieldResult);
  v6[5] = v7;
  v6[6] = *(void *)(v7 - 8);
  v6[7] = swift_task_alloc();
  v6[8] = type metadata accessor for EncoreEngine.EngineEvent(0);
  v6[9] = swift_task_alloc();
  v6[10] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Error>);
  v6[11] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v6[12] = v9;
  v6[13] = *(void *)(v9 + 64);
  v6[14] = swift_task_alloc();
  v6[15] = type metadata accessor for EncoreEngineEvent(0);
  v6[16] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in EncoreEngine.asyncPushEvent(flow:), 0, 0);
}

uint64_t closure #1 in closure #1 in EncoreEngine.asyncPushEvent(flow:)()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[3];
  outlined init with copy of ReferenceResolutionClientProtocol(v0[2], v1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v7 + v6, v2, v3);
  *(void *)(v1 + 40) = partial apply for closure #1 in closure #1 in closure #1 in EncoreEngine.asyncPushEvent(flow:);
  *(void *)(v1 + 48) = v7;
  swift_storeEnumTagMultiPayload();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v8 = static FlowActor.shared;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in EncoreEngine.asyncPushEvent(flow:), v8, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[6];
  outlined init with copy of EncoreEngineEvent(v0[16], v1, type metadata accessor for EncoreEngineEvent);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of EncoreEngineEvent(v1, v2, type metadata accessor for EncoreEngine.EngineEvent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  outlined destroy of EncoreConversation.State(v1, type metadata accessor for EncoreEngine.EngineEvent);
  return MEMORY[0x1F4188298](closure #1 in closure #1 in EncoreEngine.asyncPushEvent(flow:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of EncoreConversation.State(*(void *)(v0 + 128), type metadata accessor for EncoreEngineEvent);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in closure #1 in closure #1 in EncoreEngine.asyncPushEvent(flow:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RequestContinuation(0);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v12 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RequestContinuation, Error>);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (void *)((char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v10, &demangling cache variable for type metadata for Result<RequestContinuation, Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v12[1] = *v10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    outlined init with take of RequestContinuation((uint64_t)v10, (uint64_t)v7, type metadata accessor for RequestContinuation);
    outlined init with copy of EncoreEngineEvent((uint64_t)v7, (uint64_t)v5, type metadata accessor for RequestContinuation);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Error>);
    CheckedContinuation.resume(returning:)();
    return outlined destroy of EncoreConversation.State((uint64_t)v7, type metadata accessor for RequestContinuation);
  }
}

uint64_t closure #1 in EncoreEngine.asyncEnsureReadyEvent()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = (char *)swift_allocObject();
  *((void *)v12 + 2) = 0;
  *((void *)v12 + 3) = 0;
  *((void *)v12 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v12[v11], (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in EncoreEngine.asyncEnsureReadyEvent(), (uint64_t)v12);
  return swift_release();
}

uint64_t closure #1 in closure #1 in EncoreEngine.asyncEnsureReadyEvent()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  void v5[3] = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation.YieldResult);
  v5[4] = v6;
  v5[5] = *(void *)(v6 - 8);
  v5[6] = swift_task_alloc();
  v5[7] = type metadata accessor for EncoreEngine.EngineEvent(0);
  v5[8] = swift_task_alloc();
  v5[9] = swift_task_alloc();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v5[10] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[11] = v8;
  v5[12] = *(void *)(v8 + 64);
  v5[13] = swift_task_alloc();
  v5[14] = type metadata accessor for EncoreEngineEvent(0);
  v5[15] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in EncoreEngine.asyncEnsureReadyEvent(), 0, 0);
}

uint64_t closure #1 in closure #1 in EncoreEngine.asyncEnsureReadyEvent()()
{
  uint64_t v1 = (uint64_t (**)())v0[15];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[11];
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v2, v0[3], v3);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v6 + v5, v2, v3);
  *uint64_t v1 = partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.prepareForAudioHandoffFailed();
  v1[1] = (uint64_t (*)())v6;
  swift_storeEnumTagMultiPayload();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v7 = static FlowActor.shared;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in EncoreEngine.asyncEnsureReadyEvent(), v7, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = v0[15];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[6];
  unint64_t v5 = v0[4];
  uint64_t v6 = v0[5];
  outlined init with copy of EncoreEngineEvent(v1, v3, type metadata accessor for EncoreEngineEvent);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of EncoreEngineEvent(v3, v2, type metadata accessor for EncoreEngine.EngineEvent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  outlined destroy of EncoreConversation.State(v3, type metadata accessor for EncoreEngine.EngineEvent);
  outlined destroy of EncoreConversation.State(v1, type metadata accessor for EncoreEngineEvent);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t Parse.DirectInvocation.toSnippetEvent.getter()
{
  uint64_t v0 = Parse.DirectInvocation.identifier.getter();
  uint64_t v2 = v1;
  type metadata accessor for SnippetService();
  if (v0 == static SnippetService.DirectInvocationIdentifier.getter() && v2 == v3)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v4 & 1) == 0) {
      return 0;
    }
  }
  uint64_t v5 = Parse.DirectInvocation.userData.getter();
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  uint64_t v7 = static SnippetService.EventDataKey.getter();
  if (!*(void *)(v6 + 16) || (unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8), (v10 & 1) == 0))
  {
    long long v19 = 0u;
    long long v20 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(void *)(v6 + 56) + 32 * v9, (uint64_t)&v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v20 + 1))
  {
LABEL_12:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v19, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_13;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_1B9C64000, v12, v13, "[EncoreConversation] DirectInvocation failed to find Snippet Event Key", v14, 2u);
      MEMORY[0x1BA9E48C0](v14, -1, -1);
    }

    return 0;
  }
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSKeyedUnarchiver);
  type metadata accessor for EncoreEvent();
  uint64_t v16 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)();
  outlined consume of Data._Representation(v17, v18);
  return v16;
}

uint64_t closure #1 in EncoreEngine.asyncAcceptEvent(request:context:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v25 = a4;
  uint64_t v26 = a1;
  uint64_t v27 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Never>);
  uint64_t v23 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](v5);
  uint64_t v24 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ConversationContext();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v25, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v26, v5);
  unint64_t v16 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v17 = (v10 + *(unsigned __int8 *)(v6 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v18 = (char *)swift_allocObject();
  *((void *)v18 + 2) = 0;
  *((void *)v18 + 3) = 0;
  long long v19 = v27;
  *((void *)v18 + 4) = a2;
  *((void *)v18 + 5) = v19;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v18[v16], v11, v8);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v18[v17], v24, v23);
  swift_retain();
  id v20 = v19;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in EncoreEngine.asyncAcceptEvent(request:context:), (uint64_t)v18);
  return swift_release();
}

uint64_t closure #1 in closure #1 in EncoreEngine.asyncAcceptEvent(request:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  _OWORD v7[2] = a4;
  v7[3] = a5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation.YieldResult);
  v7[6] = v8;
  v7[7] = *(void *)(v8 - 8);
  v7[8] = swift_task_alloc();
  v7[9] = type metadata accessor for EncoreEngine.EngineEvent(0);
  v7[10] = swift_task_alloc();
  v7[11] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Never>);
  v7[12] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v7[13] = v10;
  v7[14] = *(void *)(v10 + 64);
  v7[15] = swift_task_alloc();
  v7[16] = type metadata accessor for EncoreEngineEvent(0);
  v7[17] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in EncoreEngine.asyncAcceptEvent(request:context:), 0, 0);
}

uint64_t closure #1 in closure #1 in EncoreEngine.asyncAcceptEvent(request:context:)()
{
  uint64_t v1 = (void *)v0[17];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[13];
  uint64_t v6 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v7 = (void *)v0[3];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ()));
  uint64_t v9 = (char *)v1 + *(int *)(v8 + 48);
  uint64_t v10 = (void *)((char *)v1 + *(int *)(v8 + 64));
  *uint64_t v1 = v7;
  uint64_t v11 = type metadata accessor for ConversationContext();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v6, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
  unint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v13 + v12, v2, v3);
  *uint64_t v10 = partial apply for closure #1 in closure #1 in closure #1 in EncoreEngine.asyncAcceptEvent(request:context:);
  v10[1] = v13;
  swift_storeEnumTagMultiPayload();
  uint64_t v14 = one-time initialization token for shared;
  id v15 = v7;
  if (v14 != -1) {
    swift_once();
  }
  uint64_t v16 = static FlowActor.shared;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in EncoreEngine.asyncAcceptEvent(request:context:), v16, 0);
}

uint64_t closure #2 in EncoreEngine.asyncAcceptEvent(request:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Never>);
  uint64_t v24 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v25 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for ConversationContext();
  uint64_t v7 = *(void *)(v27 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v27);
  uint64_t v23 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SiriRequest(0);
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v26 + 64);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  outlined init with copy of EncoreEngineEvent(v28, (uint64_t)v11, type metadata accessor for SiriRequest);
  uint64_t v16 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v29, v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v30, v4);
  unint64_t v17 = (*(unsigned __int8 *)(v26 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  unint64_t v18 = (v10 + *(unsigned __int8 *)(v7 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v19 = (v8 + *(unsigned __int8 *)(v5 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  id v20 = (char *)swift_allocObject();
  *((void *)v20 + 2) = 0;
  *((void *)v20 + 3) = 0;
  *((void *)v20 + 4) = v31;
  outlined init with take of RequestContinuation((uint64_t)v11, (uint64_t)&v20[v17], type metadata accessor for SiriRequest);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v20[v18], v23, v16);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v20[v19], v25, v24);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in closure #2 in EncoreEngine.asyncAcceptEvent(request:context:), (uint64_t)v20);
  return swift_release();
}

uint64_t closure #1 in closure #2 in EncoreEngine.asyncAcceptEvent(request:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  _OWORD v7[2] = a4;
  v7[3] = a5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation.YieldResult);
  v7[6] = v8;
  v7[7] = *(void *)(v8 - 8);
  v7[8] = swift_task_alloc();
  v7[9] = type metadata accessor for EncoreEngine.EngineEvent(0);
  v7[10] = swift_task_alloc();
  v7[11] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Never>);
  v7[12] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v7[13] = v10;
  v7[14] = *(void *)(v10 + 64);
  v7[15] = swift_task_alloc();
  v7[16] = type metadata accessor for EncoreEngineEvent(0);
  v7[17] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #2 in EncoreEngine.asyncAcceptEvent(request:context:), 0, 0);
}

uint64_t closure #1 in closure #2 in EncoreEngine.asyncAcceptEvent(request:context:)()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[13];
  uint64_t v6 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v7 = v0[3];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ()));
  uint64_t v9 = v1 + *(int *)(v8 + 48);
  uint64_t v10 = (void *)(v1 + *(int *)(v8 + 64));
  outlined init with copy of EncoreEngineEvent(v7, v1, type metadata accessor for SiriRequest);
  uint64_t v11 = type metadata accessor for ConversationContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v6, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
  unint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v13 + v12, v2, v3);
  *uint64_t v10 = partial apply for closure #1 in closure #1 in closure #1 in EncoreEngine.asyncAcceptEvent(request:context:);
  v10[1] = v13;
  swift_storeEnumTagMultiPayload();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v14 = static FlowActor.shared;
  return MEMORY[0x1F4188298](closure #1 in closure #2 in EncoreEngine.asyncAcceptEvent(request:context:), v14, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  uint64_t v1 = v0[17];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[8];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[7];
  outlined init with copy of EncoreEngineEvent(v1, v3, type metadata accessor for EncoreEngineEvent);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of EncoreEngineEvent(v3, v2, type metadata accessor for EncoreEngine.EngineEvent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  outlined destroy of EncoreConversation.State(v3, type metadata accessor for EncoreEngine.EngineEvent);
  outlined destroy of EncoreConversation.State(v1, type metadata accessor for EncoreEngineEvent);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t closure #1 in closure #1 in closure #1 in EncoreEngine.asyncAcceptEvent(request:context:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RequestContinuation(0);
  MEMORY[0x1F4188790](v2 - 8);
  outlined init with copy of EncoreEngineEvent(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for RequestContinuation);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ConversationCommitResult, Error>);
  uint64_t v24 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v25 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for ConversationContext();
  uint64_t v7 = *(void *)(v27 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v27);
  uint64_t v23 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RequestContinuation(0);
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v26 + 64);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  outlined init with copy of EncoreEngineEvent(v28, (uint64_t)v11, type metadata accessor for RequestContinuation);
  uint64_t v16 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v29, v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v30, v4);
  unint64_t v17 = (*(unsigned __int8 *)(v26 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  unint64_t v18 = (v10 + *(unsigned __int8 *)(v7 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v19 = (v8 + *(unsigned __int8 *)(v5 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  id v20 = (char *)swift_allocObject();
  *((void *)v20 + 2) = 0;
  *((void *)v20 + 3) = 0;
  *((void *)v20 + 4) = v31;
  outlined init with take of RequestContinuation((uint64_t)v11, (uint64_t)&v20[v17], type metadata accessor for RequestContinuation);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v20[v18], v23, v16);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v20[v19], v25, v24);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:), (uint64_t)v20);
  return swift_release();
}

uint64_t closure #1 in closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  _OWORD v7[2] = a4;
  v7[3] = a5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation.YieldResult);
  v7[6] = v8;
  v7[7] = *(void *)(v8 - 8);
  v7[8] = swift_task_alloc();
  v7[9] = type metadata accessor for EncoreEngine.EngineEvent(0);
  v7[10] = swift_task_alloc();
  v7[11] = swift_task_alloc();
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ConversationCommitResult, Error>);
  v7[12] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v7[13] = v10;
  v7[14] = *(void *)(v10 + 64);
  v7[15] = swift_task_alloc();
  v7[16] = type metadata accessor for EncoreEngineEvent(0);
  v7[17] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:), 0, 0);
}

uint64_t closure #1 in closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:)()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[13];
  uint64_t v6 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v7 = v0[3];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ()));
  uint64_t v9 = v1 + *(int *)(v8 + 48);
  uint64_t v10 = (uint64_t (**)(uint64_t))(v1 + *(int *)(v8 + 64));
  outlined init with copy of EncoreEngineEvent(v7, v1, type metadata accessor for RequestContinuation);
  uint64_t v11 = type metadata accessor for ConversationContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v6, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
  unint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v13 + v12, v2, v3);
  *uint64_t v10 = partial apply for closure #1 in closure #1 in closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:);
  v10[1] = (uint64_t (*)(uint64_t))v13;
  swift_storeEnumTagMultiPayload();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v14 = static FlowActor.shared;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in EncoreEngine.asyncAcceptEvent(request:context:), v14, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ConversationCommitResult();
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v12 - v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<ConversationCommitResult, Error>);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (void *)((char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v10, &demangling cache variable for type metadata for Result<ConversationCommitResult, Error>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v12[1] = *v10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ConversationCommitResult, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    outlined init with take of RequestContinuation((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
    outlined init with copy of EncoreEngineEvent((uint64_t)v7, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ConversationCommitResult, Error>);
    CheckedContinuation.resume(returning:)();
    return outlined destroy of EncoreConversation.State((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
  }
}

void *specialized EncoreConversation.init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = v12;
  uint64_t v68 = a3;
  uint64_t v69 = a7;
  uint64_t v72 = a1;
  uint64_t v73 = a5;
  uint64_t v67 = a2;
  uint64_t v71 = a11;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v17 - 8);
  unint64_t v19 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchTimeInterval();
  uint64_t v75 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  unint64_t v74 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = (char *)v13 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_siriRequest;
  uint64_t v23 = type metadata accessor for SiriRequest(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  *(void *)((char *)v13 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_tasks) = MEMORY[0x1E4FBC860];
  *(void *)((char *)v13 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_encoreEventsHandled) = 0;
  *((unsigned char *)v13 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_encoreRegistered) = 0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v66 = a12;
  uint64_t v70 = a9;
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.executor);
  id v25 = a4;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v64 = a6;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v65 = v19;
    uint64_t v29 = (uint8_t *)v28;
    os_log_type_t v61 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 138412290;
    os_log_t v62 = v26;
    uint64_t v63 = a8;
    v76[0] = (uint64_t)v25;
    id v30 = v25;
    a8 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v31 = v61;
    void *v61 = v25;

    a6 = v64;
    uint64_t v26 = v62;
    os_log_type_t v32 = v27;
    long long v33 = v25;
    _os_log_impl(&dword_1B9C64000, v62, v32, "[EncoreConversation] init %@", v29, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v31, -1, -1);
    uint64_t v34 = v29;
    unint64_t v19 = v65;
    MEMORY[0x1BA9E48C0](v34, -1, -1);
  }
  else
  {
    long long v33 = v25;
  }
  uint64_t v35 = v73;
  uint64_t v36 = v68;
  v13[4] = v67;
  v13[5] = v36;
  v13[6] = v35;
  v13[7] = v33;
  unint64_t v37 = (void *)((char *)v13 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_taskObserver);
  uint64_t v38 = v69;
  *unint64_t v37 = a6;
  v37[1] = v38;
  Swift::String v39 = (void *)((char *)v13 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_state);
  uint64_t v40 = v71;
  uint64_t v41 = v66;
  v39[3] = v71;
  void v39[4] = v41;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v39);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16))(boxed_opaque_existential_0, v72, v40);
  type metadata accessor for EncoreConversation.State(0);
  swift_storeEnumTagMultiPayload();
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a10, (uint64_t)v13 + OBJC_IVAR____TtC14SiriKitRuntime18EncoreConversation_correctionsEngine);
  if (v70)
  {
    id v43 = v33;
    swift_retain();
    swift_unknownObjectRetain();
  }
  else
  {
    type metadata accessor for SiriEnvironment();
    id v44 = v33;
    swift_retain();
    swift_unknownObjectRetain();
    static SiriEnvironment.default.getter();
  }
  type metadata accessor for SiriEnvironment();
  swift_allocObject();
  swift_retain();
  v13[8] = SiriEnvironment.init(parent:)();
  type metadata accessor for SiriCorrectionsClientProvider();
  swift_allocObject();
  swift_retain();
  SiriCorrectionsClientProvider.init()();
  SiriEnvironment.correctionsClientProvider.setter();
  swift_release();
  SiriEnvironment.correctionsClientProvider.getter();
  uint64_t v45 = a10[3];
  uint64_t v46 = a10[4];
  uint64_t v47 = __swift_project_boxed_opaque_existential_1(a10, v45);
  v76[3] = v45;
  v76[4] = *(void *)(v46 + 8);
  uint64_t v48 = __swift_allocate_boxed_opaque_existential_0(v76);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v45 - 8) + 16))(v48, v47, v45);
  dispatch thunk of SiriCorrectionsClientProvider.correctionsClient.setter();
  swift_release();
  type metadata accessor for UserIdentityProvider();
  lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor(&lazy protocol witness table cache variable for type UserIdentityProvider and conformance UserIdentityProvider, MEMORY[0x1E4FA1DD0]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for FlowTaskProvider();
  lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor(&lazy protocol witness table cache variable for type FlowTaskProvider and conformance FlowTaskProvider, MEMORY[0x1E4FA1890]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for CallStateEnvironmentProvider();
  lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor(&lazy protocol witness table cache variable for type CallStateEnvironmentProvider and conformance CallStateEnvironmentProvider, MEMORY[0x1E4FA1E60]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for ScopedReferenceResolutionDataProvider();
  lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor((unint64_t *)&lazy protocol witness table cache variable for type ScopedReferenceResolutionDataProvider and conformance ScopedReferenceResolutionDataProvider, MEMORY[0x1E4FA3D90]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for MetricsEnvironmentProvider();
  lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor(&lazy protocol witness table cache variable for type MetricsEnvironmentProvider and conformance MetricsEnvironmentProvider, MEMORY[0x1E4FA1E40]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for AceServiceContextProvider();
  lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor(&lazy protocol witness table cache variable for type AceServiceContextProvider and conformance AceServiceContextProvider, MEMORY[0x1E4FA1E30]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  v13[9] = a8;
  uint64_t v49 = one-time initialization token for defaultTimeout;
  swift_retain();
  if (v49 != -1) {
    swift_once();
  }
  uint64_t v50 = __swift_project_value_buffer(v20, (uint64_t)static JetsamHelper.defaultTimeout);
  uint64_t v52 = v74;
  uint64_t v51 = v75;
  (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v74, v50, v20);
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  uint64_t v53 = static OS_dispatch_queue.main.getter();
  type metadata accessor for JetsamHelper();
  int64_t v54 = (void *)swift_allocObject();
  uint64_t v55 = (void *)((char *)v54 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction);
  void *v55 = 0;
  v55[1] = 0;
  v54[2] = 0xD00000000000002ALL;
  v54[3] = 0x80000001BA0681E0;
  v54[4] = dispatch_semaphore_create(1);
  v54[5] = v53;
  (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))((uint64_t)v54 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_timeout, v52, v20);
  v13[2] = v54;
  type metadata accessor for EncoreEngine();
  swift_allocObject();
  swift_retain();
  uint64_t v56 = swift_retain();
  v13[3] = EncoreEngine.init(rootEnvironment:snippetManager:)(v56, a8);
  uint64_t v57 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v19, 1, 1, v57);
  uint64_t v58 = (void *)swift_allocObject();
  v58[2] = 0;
  v58[3] = 0;
  v58[4] = v13;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v19, (uint64_t)&async function pointer to partial apply for closure #1 in EncoreConversation.init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:), (uint64_t)v58);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a10);
  return v13;
}

void *specialized EncoreConversation.__allocating_init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12)
{
  return specialized EncoreConversation.init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t partial apply for closure #1 in EncoreConversation.setupEncoreEventHandling()(void *a1)
{
  return closure #1 in EncoreConversation.setupEncoreEventHandling()(a1, v1);
}

uint64_t partial apply for closure #1 in EncoreConversation.deinit()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v2 = (void *)swift_task_alloc();
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return EncoreEngine.stop()();
}

uint64_t type metadata accessor for EncoreConversation.State(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for EncoreConversation.State);
}

uint64_t outlined init with copy of EncoreEngineEvent(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of EncoreConversation.State(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in EncoreConversation.handleEncoreEvent(event:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in EncoreConversation.handleEncoreEvent(event:)(a1, v4, v5, v7, v6);
}

uint64_t partial apply for closure #1 in EncoreEngine.asyncEnsureReadyEvent()(uint64_t a1)
{
  return closure #1 in EncoreEngine.asyncEnsureReadyEvent()(a1, v1);
}

uint64_t partial apply for closure #2 in EncoreConversation.ensureReady(timeout:)(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in Conversation.ensureReady(timeout:)(a1, v1);
}

uint64_t partial apply for closure #1 in EncoreConversation.ensureReady(timeout:)(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in EncoreConversation.ensureReady(timeout:)(a1, v1);
}

uint64_t outlined init with take of ActingFlow?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of SiriRequest?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequest?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SiriRequestContext(uint64_t a1)
{
  return a1;
}

uint64_t outlined assign with take of EncoreConversation.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for EncoreConversation.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in EncoreEngine.asyncPushEvent(flow:)(uint64_t a1)
{
  return closure #1 in EncoreEngine.asyncPushEvent(flow:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #2 in EncoreEngine.asyncAcceptEvent(request:context:)(uint64_t a1)
{
  return closure #2 in EncoreEngine.asyncAcceptEvent(request:context:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t partial apply for closure #1 in EncoreEngine.asyncAcceptEvent(request:context:)(uint64_t a1)
{
  return closure #1 in EncoreEngine.asyncAcceptEvent(request:context:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1B9EC4520()
{
  uint64_t v1 = (int *)type metadata accessor for SiriRequest(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = *(void *)(type metadata accessor for RequestContinuation(0) - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v3 + v4 + v6;
  uint64_t v24 = *(void *)(v5 + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v8 = v0 + v3;
  swift_bridgeObjectRelease();
  uint64_t v9 = v0 + v3 + v1[5];
  uint64_t v10 = type metadata accessor for Input();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
  v11(v9, v10);
  swift_release();
  unint64_t v12 = (uint64_t *)(v8 + v1[7]);
  unint64_t v13 = v12[1];
  if (v13 >> 60 != 15) {
    outlined consume of Data._Representation(*v12, v13);
  }
  uint64_t v14 = v7 & ~v6;
  swift_release();
  swift_release();
  uint64_t v15 = v8 + v1[10];
  uint64_t v16 = type metadata accessor for SiriRequestIdentities(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16))
  {
    uint64_t v23 = v11;
    uint64_t v17 = type metadata accessor for IdentifiedUser();
    uint64_t v18 = *(void *)(v17 - 8);
    unint64_t v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
    if (!v19(v15, 1, v17)) {
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v15, v17);
    }
    uint64_t v22 = v18;
    uint64_t v20 = v15 + *(int *)(v16 + 20);
    if (!v19(v20, 1, v17)) {
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v17);
    }
    swift_bridgeObjectRelease();
    uint64_t v11 = v23;
  }
  type metadata accessor for UserInputResult();
  if (swift_getEnumCaseMultiPayload() == 1) {
    v11(v0 + v14, v10);
  }
  swift_release();

  return MEMORY[0x1F4186498](v0, v14 + v24, v2 | v6 | 7);
}

uint64_t partial apply for closure #1 in EncoreConversation.commit()(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for SiriRequest(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(type metadata accessor for RequestContinuation(0) - 8) + 80);
  unint64_t v9 = v6 + v7 + v8;
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  uint64_t v13 = (uint64_t)v1 + v6;
  uint64_t v14 = (uint64_t)v1 + (v9 & ~v8);
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v15;
  *uint64_t v15 = v3;
  v15[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in EncoreConversation.commit()(a1, v10, v11, v12, v13, v14);
}

uint64_t partial apply for closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:)(uint64_t a1)
{
  return closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t destroy for SiriRequestContext(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1Tm(a1 + 40);
}

uint64_t initializeWithCopy for SiriRequestContext(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  return a1;
}

uint64_t *assignWithCopy for SiriRequestContext(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for SiriRequestContext(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriRequestContext(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriRequestContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriRequestContext()
{
  return &type metadata for SiriRequestContext;
}

uint64_t ObjC metadata update function for EncoreConversation()
{
  return type metadata accessor for EncoreConversation(0);
}

uint64_t type metadata accessor for EncoreConversation(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for EncoreConversation);
}

void type metadata completion function for EncoreConversation()
{
  type metadata accessor for SiriRequest?();
  if (v0 <= 0x3F)
  {
    type metadata accessor for EncoreConversation.State(319);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for EncoreConversation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for EncoreConversation);
}

uint64_t dispatch thunk of EncoreConversation.__allocating_init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)()
{
  return (*(uint64_t (**)(void))(v0 + 192))();
}

void type metadata accessor for SiriRequest?()
{
  if (!lazy cache variable for type metadata for SiriRequest?)
  {
    type metadata accessor for SiriRequest(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SiriRequest?);
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for EncoreConversation.State(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)a1 = *a2;
    a1 = v8 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v9 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v9;
        uint64_t v10 = (int *)type metadata accessor for SiriRequest(0);
        uint64_t v11 = v10[5];
        uint64_t v12 = (char *)(a1 + v11);
        uint64_t v13 = (char *)a2 + v11;
        uint64_t v14 = type metadata accessor for Input();
        uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
        swift_bridgeObjectRetain();
        uint64_t v115 = v15;
        uint64_t v117 = v14;
        v15(v12, v13, v14);
        *(void *)(a1 + v10[6]) = *(uint64_t *)((char *)a2 + v10[6]);
        uint64_t v16 = v10[7];
        uint64_t v17 = a1 + v16;
        uint64_t v18 = (_OWORD *)((char *)a2 + v16);
        unint64_t v19 = *(uint64_t *)((char *)a2 + v16 + 8);
        swift_retain();
        if (v19 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v17 = *v18;
        }
        else
        {
          uint64_t v42 = *(void *)v18;
          outlined copy of Data._Representation(v42, v19);
          *(void *)uint64_t v17 = v42;
          *(void *)(v17 + 8) = v19;
        }
        *(void *)(a1 + v10[8]) = *(uint64_t *)((char *)a2 + v10[8]);
        *(void *)(a1 + v10[9]) = *(uint64_t *)((char *)a2 + v10[9]);
        uint64_t v43 = v10[10];
        __dsta = (char *)(a1 + v43);
        id v44 = (char *)a2 + v43;
        uint64_t v45 = type metadata accessor for SiriRequestIdentities(0);
        uint64_t v46 = *(void *)(v45 - 8);
        uint64_t v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
        swift_retain();
        swift_retain();
        if (v47(v44, 1, v45))
        {
          uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(__dsta, v44, *(void *)(*(void *)(v48 - 8) + 64));
        }
        else
        {
          uint64_t v111 = v46;
          uint64_t v65 = type metadata accessor for IdentifiedUser();
          uint64_t v66 = *(void *)(v65 - 8);
          uint64_t v67 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48);
          uint64_t v109 = v66;
          if (v67(v44, 1, v65))
          {
            uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(__dsta, v44, *(void *)(*(void *)(v68 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v66 + 16))(__dsta, v44, v65);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v66 + 56))(__dsta, 0, 1, v65);
          }
          uint64_t v101 = *(int *)(v45 + 20);
          uint64_t v102 = &__dsta[v101];
          uint64_t v103 = &v44[v101];
          if (v67(&v44[v101], 1, v65))
          {
            uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v102, v103, *(void *)(*(void *)(v104 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v102, v103, v65);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v102, 0, 1, v65);
          }
          *(void *)&__dsta[*(int *)(v45 + 24)] = *(void *)&v44[*(int *)(v45 + 24)];
          uint64_t v105 = *(void (**)(char *, void, uint64_t, uint64_t))(v111 + 56);
          swift_bridgeObjectRetain();
          v105(__dsta, 0, 1, v45);
        }
        uint64_t v106 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
                      + 48);
        uint64_t v98 = (char *)(a1 + v106);
        uint64_t v99 = (char *)a2 + v106;
        uint64_t v100 = type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() != 1) {
          goto LABEL_53;
        }
        v115(v98, v99, v117);
        swift_storeEnumTagMultiPayload();
        goto LABEL_54;
      case 2u:
        uint64_t v20 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v20;
        uint64_t v21 = (int *)type metadata accessor for SiriRequest(0);
        uint64_t v22 = v21[5];
        uint64_t v23 = (char *)(a1 + v22);
        uint64_t v24 = (char *)a2 + v22;
        uint64_t v25 = type metadata accessor for Input();
        uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16);
        swift_bridgeObjectRetain();
        uint64_t v116 = v26;
        uint64_t v118 = v25;
        v26(v23, v24, v25);
        *(void *)(a1 + v21[6]) = *(uint64_t *)((char *)a2 + v21[6]);
        uint64_t v27 = v21[7];
        uint64_t v28 = a1 + v27;
        uint64_t v29 = (_OWORD *)((char *)a2 + v27);
        unint64_t v30 = *(uint64_t *)((char *)a2 + v27 + 8);
        swift_retain();
        if (v30 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v28 = *v29;
        }
        else
        {
          uint64_t v49 = *(void *)v29;
          outlined copy of Data._Representation(v49, v30);
          *(void *)uint64_t v28 = v49;
          *(void *)(v28 + 8) = v30;
        }
        *(void *)(a1 + v21[8]) = *(uint64_t *)((char *)a2 + v21[8]);
        *(void *)(a1 + v21[9]) = *(uint64_t *)((char *)a2 + v21[9]);
        uint64_t v50 = v21[10];
        __dstb = (char *)(a1 + v50);
        uint64_t v51 = (char *)a2 + v50;
        uint64_t v52 = type metadata accessor for SiriRequestIdentities(0);
        uint64_t v53 = *(void *)(v52 - 8);
        int64_t v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48);
        swift_retain();
        swift_retain();
        if (v54(v51, 1, v52))
        {
          uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(__dstb, v51, *(void *)(*(void *)(v55 - 8) + 64));
        }
        else
        {
          uint64_t v112 = v53;
          uint64_t v69 = type metadata accessor for IdentifiedUser();
          uint64_t v70 = *(void *)(v69 - 8);
          uint64_t v110 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48);
          uint64_t v71 = v51;
          if (v110(v51, 1, v69))
          {
            uint64_t v72 = v70;
            uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(__dstb, v71, *(void *)(*(void *)(v73 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v70 + 16))(__dstb, v51, v69);
            uint64_t v72 = v70;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(__dstb, 0, 1, v69);
          }
          uint64_t v80 = *(int *)(v52 + 20);
          int v81 = &__dstb[v80];
          int v82 = &v71[v80];
          if (v110(&v71[v80], 1, v69))
          {
            uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v81, v82, *(void *)(*(void *)(v83 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v81, v82, v69);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(v81, 0, 1, v69);
          }
          *(void *)&__dstb[*(int *)(v52 + 24)] = *(void *)&v71[*(int *)(v52 + 24)];
          uint64_t v88 = *(void (**)(char *, void, uint64_t, uint64_t))(v112 + 56);
          swift_bridgeObjectRetain();
          v88(__dstb, 0, 1, v52);
        }
        uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation, task: Task<(), Error>));
        uint64_t v90 = *(int *)(v89 + 48);
        uint64_t v91 = (char *)(a1 + v90);
        int v92 = (char *)a2 + v90;
        uint64_t v93 = type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v116(v91, v92, v118);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v91, v92, *(void *)(*(void *)(v93 - 8) + 64));
        }
        uint64_t v94 = type metadata accessor for RequestContinuation(0);
        *(void *)&v91[*(int *)(v94 + 20)] = *(void *)&v92[*(int *)(v94 + 20)];
        *(void *)(a1 + *(int *)(v89 + 64)) = *(uint64_t *)((char *)a2 + *(int *)(v89 + 64));
        swift_retain();
        swift_retain();
        break;
      case 3u:
        uint64_t v31 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v31;
        os_log_type_t v32 = (int *)type metadata accessor for SiriRequest(0);
        uint64_t v33 = v32[5];
        uint64_t v34 = (char *)(a1 + v33);
        uint64_t v35 = (char *)a2 + v33;
        uint64_t v36 = type metadata accessor for Input();
        unint64_t v37 = *(void (**)(char *, char *, void *))(*(void *)(v36 - 8) + 16);
        swift_bridgeObjectRetain();
        uint64_t v119 = v37;
        __dst = (void *)v36;
        v37(v34, v35, (void *)v36);
        *(void *)(a1 + v32[6]) = *(uint64_t *)((char *)a2 + v32[6]);
        uint64_t v38 = v32[7];
        uint64_t v39 = a1 + v38;
        uint64_t v40 = (_OWORD *)((char *)a2 + v38);
        unint64_t v41 = *(uint64_t *)((char *)a2 + v38 + 8);
        swift_retain();
        if (v41 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v39 = *v40;
        }
        else
        {
          uint64_t v56 = *(void *)v40;
          outlined copy of Data._Representation(v56, v41);
          *(void *)uint64_t v39 = v56;
          *(void *)(v39 + 8) = v41;
        }
        *(void *)(a1 + v32[8]) = *(uint64_t *)((char *)a2 + v32[8]);
        *(void *)(a1 + v32[9]) = *(uint64_t *)((char *)a2 + v32[9]);
        uint64_t v57 = v32[10];
        uint64_t v58 = (char *)(a1 + v57);
        uint64_t v59 = (char *)a2 + v57;
        uint64_t v60 = type metadata accessor for SiriRequestIdentities(0);
        uint64_t v61 = *(void *)(v60 - 8);
        os_log_t v62 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48);
        swift_retain();
        swift_retain();
        if (v62(v59, 1, v60))
        {
          uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(v58, v59, *(void *)(*(void *)(v63 - 8) + 64));
        }
        else
        {
          uint64_t v114 = v61;
          unint64_t v74 = v58;
          uint64_t v75 = type metadata accessor for IdentifiedUser();
          uint64_t v76 = *(void *)(v75 - 8);
          id v113 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v76 + 48);
          uint64_t v77 = v59;
          if (v113(v59, 1, v75))
          {
            uint64_t v78 = v76;
            uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v74, v77, *(void *)(*(void *)(v79 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v76 + 16))(v74, v59, v75);
            uint64_t v78 = v76;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v74, 0, 1, v75);
          }
          uint64_t v84 = *(int *)(v60 + 20);
          uint64_t v85 = &v74[v84];
          uint64_t v86 = &v77[v84];
          if (v113(&v77[v84], 1, v75))
          {
            uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v85, v86, *(void *)(*(void *)(v87 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v85, v86, v75);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(v85, 0, 1, v75);
          }
          *(void *)&v74[*(int *)(v60 + 24)] = *(void *)&v77[*(int *)(v60 + 24)];
          uint64_t v95 = v74;
          unint64_t v96 = *(void (**)(char *, void, uint64_t, uint64_t))(v114 + 56);
          swift_bridgeObjectRetain();
          v96(v95, 0, 1, v60);
        }
        uint64_t v97 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
                     + 48);
        uint64_t v98 = (char *)(a1 + v97);
        uint64_t v99 = (char *)a2 + v97;
        uint64_t v100 = type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v119(v98, v99, __dst);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
LABEL_53:
          memcpy(v98, v99, *(void *)(*(void *)(v100 - 8) + 64));
        }
LABEL_54:
        uint64_t v107 = type metadata accessor for RequestContinuation(0);
        *(void *)&v98[*(int *)(v107 + 20)] = *(void *)&v99[*(int *)(v107 + 20)];
        swift_retain();
        break;
      case 4u:
        *(void *)a1 = *a2;
        swift_retain();
        break;
      default:
        uint64_t v6 = a2[3];
        if (v6)
        {
          uint64_t v7 = a2[4];
          *(void *)(a1 + 24) = v6;
          *(void *)(a1 + 32) = v7;
          (**(void (***)(uint64_t, uint64_t *))(v6 - 8))(a1, a2);
        }
        else
        {
          long long v64 = *((_OWORD *)a2 + 1);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v64;
          *(void *)(a1 + 32) = a2[4];
        }
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for EncoreConversation.State(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      if (*(void *)(a1 + 24)) {
        return __swift_destroy_boxed_opaque_existential_1Tm(a1);
      }
      return result;
    case 1:
    case 3:
      swift_bridgeObjectRelease();
      long long v3 = (int *)type metadata accessor for SiriRequest(0);
      uint64_t v4 = a1 + v3[5];
      uint64_t v5 = type metadata accessor for Input();
      uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
      v6(v4, v5);
      swift_release();
      uint64_t v7 = (uint64_t *)(a1 + v3[7]);
      unint64_t v8 = v7[1];
      if (v8 >> 60 != 15) {
        outlined consume of Data._Representation(*v7, v8);
      }
      swift_release();
      swift_release();
      uint64_t v9 = a1 + v3[10];
      uint64_t v10 = type metadata accessor for SiriRequestIdentities(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
      {
        uint64_t v29 = v6;
        uint64_t v11 = type metadata accessor for IdentifiedUser();
        uint64_t v12 = *(void *)(v11 - 8);
        uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
        if (!v13(v9, 1, v11)) {
          (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v9, v11);
        }
        uint64_t v14 = v9 + *(int *)(v10 + 20);
        if (!v13(v14, 1, v11)) {
          (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v14, v11);
        }
        swift_bridgeObjectRelease();
        uint64_t v6 = v29;
      }
      uint64_t v15 = a1
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
                   + 48);
      type metadata accessor for UserInputResult();
      if (swift_getEnumCaseMultiPayload() == 1) {
        v6(v15, v5);
      }
      type metadata accessor for RequestContinuation(0);
      goto LABEL_27;
    case 2:
      swift_bridgeObjectRelease();
      uint64_t v16 = (int *)type metadata accessor for SiriRequest(0);
      uint64_t v17 = a1 + v16[5];
      uint64_t v18 = type metadata accessor for Input();
      unint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8);
      v19(v17, v18);
      swift_release();
      uint64_t v20 = (uint64_t *)(a1 + v16[7]);
      unint64_t v21 = v20[1];
      if (v21 >> 60 != 15) {
        outlined consume of Data._Representation(*v20, v21);
      }
      swift_release();
      swift_release();
      uint64_t v22 = a1 + v16[10];
      uint64_t v23 = type metadata accessor for SiriRequestIdentities(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v22, 1, v23))
      {
        unint64_t v30 = v19;
        uint64_t v24 = type metadata accessor for IdentifiedUser();
        uint64_t v25 = *(void *)(v24 - 8);
        uint64_t v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
        if (!v26(v22, 1, v24)) {
          (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v22, v24);
        }
        uint64_t v27 = v22 + *(int *)(v23 + 20);
        if (!v26(v27, 1, v24)) {
          (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v27, v24);
        }
        swift_bridgeObjectRelease();
        unint64_t v19 = v30;
      }
      uint64_t v28 = a1
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation, task: Task<(), Error>))
                   + 48);
      type metadata accessor for UserInputResult();
      if (swift_getEnumCaseMultiPayload() == 1) {
        v19(v28, v18);
      }
      type metadata accessor for RequestContinuation(0);
      swift_release();
      goto LABEL_27;
    case 4:
LABEL_27:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for EncoreConversation.State(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v6 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v6;
      uint64_t v7 = (int *)type metadata accessor for SiriRequest(0);
      uint64_t v8 = v7[5];
      uint64_t v9 = (char *)(a1 + v8);
      uint64_t v10 = (char *)(a2 + v8);
      uint64_t v11 = type metadata accessor for Input();
      uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
      swift_bridgeObjectRetain();
      uint64_t v89 = v12;
      uint64_t v91 = v11;
      v12(v9, v10, v11);
      *(void *)(a1 + v7[6]) = *(void *)(a2 + v7[6]);
      uint64_t v13 = v7[7];
      uint64_t v14 = a1 + v13;
      uint64_t v15 = (_OWORD *)(a2 + v13);
      unint64_t v16 = *(void *)(a2 + v13 + 8);
      swift_retain();
      if (v16 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v14 = *v15;
      }
      else
      {
        uint64_t v39 = *(void *)v15;
        outlined copy of Data._Representation(v39, v16);
        *(void *)uint64_t v14 = v39;
        *(void *)(v14 + 8) = v16;
      }
      *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
      *(void *)(a1 + v7[9]) = *(void *)(a2 + v7[9]);
      uint64_t v40 = v7[10];
      unint64_t v41 = (char *)(a1 + v40);
      uint64_t v42 = (char *)(a2 + v40);
      uint64_t v43 = type metadata accessor for SiriRequestIdentities(0);
      uint64_t v44 = *(void *)(v43 - 8);
      uint64_t v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
      swift_retain();
      swift_retain();
      if (v45(v42, 1, v43)) {
        goto LABEL_20;
      }
      goto LABEL_13;
    case 2u:
      uint64_t v17 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v17;
      uint64_t v18 = (int *)type metadata accessor for SiriRequest(0);
      uint64_t v19 = v18[5];
      uint64_t v20 = (char *)(a1 + v19);
      unint64_t v21 = (char *)(a2 + v19);
      uint64_t v22 = type metadata accessor for Input();
      uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
      swift_bridgeObjectRetain();
      uint64_t v90 = v23;
      uint64_t v92 = v22;
      v23(v20, v21, v22);
      *(void *)(a1 + v18[6]) = *(void *)(a2 + v18[6]);
      uint64_t v24 = v18[7];
      uint64_t v25 = a1 + v24;
      uint64_t v26 = (_OWORD *)(a2 + v24);
      unint64_t v27 = *(void *)(a2 + v24 + 8);
      swift_retain();
      if (v27 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v25 = *v26;
      }
      else
      {
        uint64_t v49 = *(void *)v26;
        outlined copy of Data._Representation(v49, v27);
        *(void *)uint64_t v25 = v49;
        *(void *)(v25 + 8) = v27;
      }
      *(void *)(a1 + v18[8]) = *(void *)(a2 + v18[8]);
      *(void *)(a1 + v18[9]) = *(void *)(a2 + v18[9]);
      uint64_t v50 = v18[10];
      uint64_t v51 = (char *)(a1 + v50);
      uint64_t v52 = (char *)(a2 + v50);
      uint64_t v53 = type metadata accessor for SiriRequestIdentities(0);
      uint64_t v54 = *(void *)(v53 - 8);
      uint64_t v55 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
      swift_retain();
      swift_retain();
      if (v55(v52, 1, v53))
      {
        uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
        memcpy(v51, v52, *(void *)(*(void *)(v56 - 8) + 64));
      }
      else
      {
        uint64_t v62 = type metadata accessor for IdentifiedUser();
        uint64_t v63 = *(void *)(v62 - 8);
        uint64_t v88 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48);
        if (v88(v52, 1, v62))
        {
          uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(v51, v52, *(void *)(*(void *)(v64 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v51, v52, v62);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v51, 0, 1, v62);
        }
        uint64_t v75 = *(int *)(v53 + 20);
        uint64_t v76 = &v51[v75];
        uint64_t v77 = &v52[v75];
        if (v88(&v52[v75], 1, v62))
        {
          uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(v76, v77, *(void *)(*(void *)(v78 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v76, v77, v62);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v76, 0, 1, v62);
        }
        *(void *)&v51[*(int *)(v53 + 24)] = *(void *)&v52[*(int *)(v53 + 24)];
        uint64_t v79 = *(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56);
        swift_bridgeObjectRetain();
        v79(v51, 0, 1, v53);
      }
      uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation, task: Task<(), Error>));
      uint64_t v81 = *(int *)(v80 + 48);
      int v82 = (char *)(a1 + v81);
      uint64_t v83 = (char *)(a2 + v81);
      uint64_t v84 = type metadata accessor for UserInputResult();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v90(v82, v83, v92);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v82, v83, *(void *)(*(void *)(v84 - 8) + 64));
      }
      uint64_t v85 = type metadata accessor for RequestContinuation(0);
      *(void *)&v82[*(int *)(v85 + 20)] = *(void *)&v83[*(int *)(v85 + 20)];
      *(void *)(a1 + *(int *)(v80 + 64)) = *(void *)(a2 + *(int *)(v80 + 64));
      swift_retain();
      goto LABEL_42;
    case 3u:
      uint64_t v28 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v28;
      uint64_t v29 = (int *)type metadata accessor for SiriRequest(0);
      uint64_t v30 = v29[5];
      uint64_t v31 = (char *)(a1 + v30);
      os_log_type_t v32 = (char *)(a2 + v30);
      uint64_t v33 = type metadata accessor for Input();
      uint64_t v34 = *(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16);
      swift_bridgeObjectRetain();
      uint64_t v89 = v34;
      uint64_t v91 = v33;
      v34(v31, v32, v33);
      *(void *)(a1 + v29[6]) = *(void *)(a2 + v29[6]);
      uint64_t v35 = v29[7];
      uint64_t v36 = a1 + v35;
      unint64_t v37 = (_OWORD *)(a2 + v35);
      unint64_t v38 = *(void *)(a2 + v35 + 8);
      swift_retain();
      if (v38 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v36 = *v37;
      }
      else
      {
        uint64_t v57 = *(void *)v37;
        outlined copy of Data._Representation(v57, v38);
        *(void *)uint64_t v36 = v57;
        *(void *)(v36 + 8) = v38;
      }
      *(void *)(a1 + v29[8]) = *(void *)(a2 + v29[8]);
      *(void *)(a1 + v29[9]) = *(void *)(a2 + v29[9]);
      uint64_t v58 = v29[10];
      unint64_t v41 = (char *)(a1 + v58);
      uint64_t v42 = (char *)(a2 + v58);
      uint64_t v43 = type metadata accessor for SiriRequestIdentities(0);
      uint64_t v44 = *(void *)(v43 - 8);
      uint64_t v59 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
      swift_retain();
      swift_retain();
      if (v59(v42, 1, v43))
      {
LABEL_20:
        uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
        memcpy(v41, v42, *(void *)(*(void *)(v60 - 8) + 64));
      }
      else
      {
LABEL_13:
        uint64_t v46 = type metadata accessor for IdentifiedUser();
        uint64_t v47 = *(void *)(v46 - 8);
        uint64_t v87 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
        if (v87(v42, 1, v46))
        {
          uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(v41, v42, *(void *)(*(void *)(v48 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v41, v42, v46);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v41, 0, 1, v46);
        }
        uint64_t v65 = *(int *)(v43 + 20);
        uint64_t v66 = &v41[v65];
        uint64_t v67 = &v42[v65];
        if (v87(&v42[v65], 1, v46))
        {
          uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(v66, v67, *(void *)(*(void *)(v68 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v66, v67, v46);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v66, 0, 1, v46);
        }
        *(void *)&v41[*(int *)(v43 + 24)] = *(void *)&v42[*(int *)(v43 + 24)];
        uint64_t v69 = *(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56);
        swift_bridgeObjectRetain();
        v69(v41, 0, 1, v43);
      }
      uint64_t v70 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
                   + 48);
      uint64_t v71 = (char *)(a1 + v70);
      uint64_t v72 = (char *)(a2 + v70);
      uint64_t v73 = type metadata accessor for UserInputResult();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v89(v71, v72, v91);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v71, v72, *(void *)(*(void *)(v73 - 8) + 64));
      }
      uint64_t v74 = type metadata accessor for RequestContinuation(0);
      *(void *)&v71[*(int *)(v74 + 20)] = *(void *)&v72[*(int *)(v74 + 20)];
      goto LABEL_42;
    case 4u:
      *(void *)a1 = *(void *)a2;
LABEL_42:
      swift_retain();
      break;
    default:
      uint64_t v4 = *(void *)(a2 + 24);
      if (v4)
      {
        uint64_t v5 = *(void *)(a2 + 32);
        *(void *)(a1 + 24) = v4;
        *(void *)(a1 + 32) = v5;
        (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      }
      else
      {
        long long v61 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v61;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
      }
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for EncoreConversation.State(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    outlined destroy of EncoreConversation.State(a1, type metadata accessor for EncoreConversation.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        uint64_t v5 = (int *)type metadata accessor for SiriRequest(0);
        uint64_t v6 = v5[5];
        uint64_t v7 = (char *)(a1 + v6);
        uint64_t v8 = (char *)a2 + v6;
        uint64_t v9 = type metadata accessor for Input();
        uint64_t v10 = *(void (**)(char *, char *, void *))(*(void *)(v9 - 8) + 16);
        swift_bridgeObjectRetain();
        uint64_t v106 = v10;
        __dst = (void *)v9;
        v10(v7, v8, (void *)v9);
        *(void *)(a1 + v5[6]) = *(void *)((char *)a2 + v5[6]);
        uint64_t v11 = v5[7];
        uint64_t v12 = a1 + v11;
        uint64_t v13 = (long long *)((char *)a2 + v11);
        unint64_t v14 = *(void *)((char *)a2 + v11 + 8);
        swift_retain();
        if (v14 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v12 = *v13;
        }
        else
        {
          uint64_t v35 = *(void *)v13;
          outlined copy of Data._Representation(v35, v14);
          *(void *)uint64_t v12 = v35;
          *(void *)(v12 + 8) = v14;
        }
        *(void *)(a1 + v5[8]) = *(void *)((char *)a2 + v5[8]);
        *(void *)(a1 + v5[9]) = *(void *)((char *)a2 + v5[9]);
        uint64_t v36 = v5[10];
        unint64_t v37 = (char *)(a1 + v36);
        unint64_t v38 = (char *)a2 + v36;
        uint64_t v39 = type metadata accessor for SiriRequestIdentities(0);
        uint64_t v40 = *(void *)(v39 - 8);
        unint64_t v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
        swift_retain();
        swift_retain();
        if (v41(v38, 1, v39))
        {
          uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(v37, v38, *(void *)(*(void *)(v42 - 8) + 64));
        }
        else
        {
          uint64_t v60 = v37;
          uint64_t v61 = type metadata accessor for IdentifiedUser();
          uint64_t v62 = *(void *)(v61 - 8);
          uint64_t v104 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48);
          if (v104(v38, 1, v61))
          {
            uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v60, v38, *(void *)(*(void *)(v63 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v60, v38, v61);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v60, 0, 1, v61);
          }
          uint64_t v72 = *(int *)(v39 + 20);
          uint64_t v73 = &v60[v72];
          uint64_t v74 = &v38[v72];
          if (v104(&v38[v72], 1, v61))
          {
            uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v73, v74, *(void *)(*(void *)(v75 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v73, v74, v61);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v73, 0, 1, v61);
          }
          *(void *)&v60[*(int *)(v39 + 24)] = *(void *)&v38[*(int *)(v39 + 24)];
          uint64_t v84 = *(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56);
          swift_bridgeObjectRetain();
          v84(v60, 0, 1, v39);
        }
        uint64_t v85 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
                     + 48);
        uint64_t v86 = (char *)(a1 + v85);
        uint64_t v87 = (char *)a2 + v85;
        uint64_t v88 = type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() == 1) {
          goto LABEL_50;
        }
        goto LABEL_51;
      case 2u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        uint64_t v15 = (int *)type metadata accessor for SiriRequest(0);
        uint64_t v16 = v15[5];
        uint64_t v17 = (char *)(a1 + v16);
        uint64_t v18 = (char *)a2 + v16;
        uint64_t v19 = type metadata accessor for Input();
        uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
        swift_bridgeObjectRetain();
        uint64_t v105 = v20;
        uint64_t v107 = v19;
        v20(v17, v18, v19);
        *(void *)(a1 + v15[6]) = *(void *)((char *)a2 + v15[6]);
        uint64_t v21 = v15[7];
        uint64_t v22 = a1 + v21;
        uint64_t v23 = (long long *)((char *)a2 + v21);
        unint64_t v24 = *(void *)((char *)a2 + v21 + 8);
        swift_retain();
        if (v24 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v22 = *v23;
        }
        else
        {
          uint64_t v43 = *(void *)v23;
          outlined copy of Data._Representation(v43, v24);
          *(void *)uint64_t v22 = v43;
          *(void *)(v22 + 8) = v24;
        }
        *(void *)(a1 + v15[8]) = *(void *)((char *)a2 + v15[8]);
        *(void *)(a1 + v15[9]) = *(void *)((char *)a2 + v15[9]);
        uint64_t v44 = v15[10];
        __dsta = (char *)(a1 + v44);
        uint64_t v45 = (char *)a2 + v44;
        uint64_t v46 = type metadata accessor for SiriRequestIdentities(0);
        uint64_t v47 = *(void *)(v46 - 8);
        uint64_t v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
        swift_retain();
        swift_retain();
        if (v48(v45, 1, v46))
        {
          uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(__dsta, v45, *(void *)(*(void *)(v49 - 8) + 64));
        }
        else
        {
          uint64_t v102 = v47;
          uint64_t v64 = type metadata accessor for IdentifiedUser();
          uint64_t v65 = *(void *)(v64 - 8);
          uint64_t v100 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48);
          uint64_t v66 = v45;
          if (v100(v45, 1, v64))
          {
            uint64_t v67 = v65;
            uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(__dsta, v66, *(void *)(*(void *)(v68 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v65 + 16))(__dsta, v45, v64);
            uint64_t v67 = v65;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(__dsta, 0, 1, v64);
          }
          uint64_t v76 = *(int *)(v46 + 20);
          uint64_t v77 = &__dsta[v76];
          uint64_t v78 = &v66[v76];
          if (v100(&v66[v76], 1, v64))
          {
            uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v77, v78, *(void *)(*(void *)(v79 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v77, v78, v64);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v77, 0, 1, v64);
          }
          *(void *)&__dsta[*(int *)(v46 + 24)] = *(void *)&v66[*(int *)(v46 + 24)];
          uint64_t v89 = *(void (**)(char *, void, uint64_t, uint64_t))(v102 + 56);
          swift_bridgeObjectRetain();
          v89(__dsta, 0, 1, v46);
        }
        uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation, task: Task<(), Error>));
        uint64_t v91 = *(int *)(v90 + 48);
        uint64_t v92 = (char *)(a1 + v91);
        uint64_t v93 = (char *)a2 + v91;
        uint64_t v94 = type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v105(v92, v93, v107);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v92, v93, *(void *)(*(void *)(v94 - 8) + 64));
        }
        uint64_t v95 = type metadata accessor for RequestContinuation(0);
        *(void *)&v92[*(int *)(v95 + 20)] = *(void *)&v93[*(int *)(v95 + 20)];
        *(void *)(a1 + *(int *)(v90 + 64)) = *(void *)((char *)a2 + *(int *)(v90 + 64));
        swift_retain();
        swift_retain();
        break;
      case 3u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *((void *)a2 + 1);
        uint64_t v25 = (int *)type metadata accessor for SiriRequest(0);
        uint64_t v26 = v25[5];
        unint64_t v27 = (char *)(a1 + v26);
        uint64_t v28 = (char *)a2 + v26;
        uint64_t v29 = type metadata accessor for Input();
        uint64_t v30 = *(void (**)(char *, char *, void *))(*(void *)(v29 - 8) + 16);
        swift_bridgeObjectRetain();
        uint64_t v106 = v30;
        __dst = (void *)v29;
        v30(v27, v28, (void *)v29);
        *(void *)(a1 + v25[6]) = *(void *)((char *)a2 + v25[6]);
        uint64_t v31 = v25[7];
        uint64_t v32 = a1 + v31;
        uint64_t v33 = (long long *)((char *)a2 + v31);
        unint64_t v34 = *(void *)((char *)a2 + v31 + 8);
        swift_retain();
        if (v34 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v32 = *v33;
        }
        else
        {
          uint64_t v50 = *(void *)v33;
          outlined copy of Data._Representation(v50, v34);
          *(void *)uint64_t v32 = v50;
          *(void *)(v32 + 8) = v34;
        }
        *(void *)(a1 + v25[8]) = *(void *)((char *)a2 + v25[8]);
        *(void *)(a1 + v25[9]) = *(void *)((char *)a2 + v25[9]);
        uint64_t v51 = v25[10];
        uint64_t v52 = (char *)(a1 + v51);
        uint64_t v53 = (char *)a2 + v51;
        uint64_t v54 = type metadata accessor for SiriRequestIdentities(0);
        uint64_t v55 = *(void *)(v54 - 8);
        uint64_t v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
        swift_retain();
        swift_retain();
        if (v56(v53, 1, v54))
        {
          uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(v52, v53, *(void *)(*(void *)(v57 - 8) + 64));
        }
        else
        {
          uint64_t v69 = type metadata accessor for IdentifiedUser();
          uint64_t v70 = *(void *)(v69 - 8);
          uint64_t v103 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48);
          uint64_t v101 = v70;
          if (v103(v53, 1, v69))
          {
            uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v52, v53, *(void *)(*(void *)(v71 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v52, v53, v69);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(v52, 0, 1, v69);
          }
          uint64_t v80 = *(int *)(v54 + 20);
          uint64_t v81 = &v52[v80];
          int v82 = &v53[v80];
          if (v103(&v53[v80], 1, v69))
          {
            uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v81, v82, *(void *)(*(void *)(v83 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v81, v82, v69);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v101 + 56))(v81, 0, 1, v69);
          }
          *(void *)&v52[*(int *)(v54 + 24)] = *(void *)&v53[*(int *)(v54 + 24)];
          unint64_t v96 = *(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56);
          swift_bridgeObjectRetain();
          v96(v52, 0, 1, v54);
        }
        uint64_t v97 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
                     + 48);
        uint64_t v86 = (char *)(a1 + v97);
        uint64_t v87 = (char *)a2 + v97;
        uint64_t v88 = type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
LABEL_50:
          v106(v86, v87, __dst);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
LABEL_51:
          memcpy(v86, v87, *(void *)(*(void *)(v88 - 8) + 64));
        }
        uint64_t v98 = type metadata accessor for RequestContinuation(0);
        *(void *)&v86[*(int *)(v98 + 20)] = *(void *)&v87[*(int *)(v98 + 20)];
        swift_retain();
        break;
      case 4u:
        *(void *)a1 = *(void *)a2;
        swift_retain();
        break;
      default:
        uint64_t v4 = *((void *)a2 + 3);
        if (v4)
        {
          *(void *)(a1 + 24) = v4;
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
        }
        else
        {
          long long v58 = *a2;
          long long v59 = a2[1];
          *(void *)(a1 + 32) = *((void *)a2 + 4);
          *(_OWORD *)a1 = v58;
          *(_OWORD *)(a1 + 16) = v59;
        }
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for EncoreConversation.State(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 3:
      *a1 = *a2;
      uint64_t v19 = (int *)type metadata accessor for SiriRequest(0);
      uint64_t v20 = v19[5];
      uint64_t v21 = (char *)a1 + v20;
      uint64_t v22 = (char *)a2 + v20;
      uint64_t v11 = type metadata accessor for Input();
      uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
      v12(v21, v22, v11);
      *(void *)((char *)a1 + v19[6]) = *(void *)((char *)a2 + v19[6]);
      *(_OWORD *)((char *)a1 + v19[7]) = *(_OWORD *)((char *)a2 + v19[7]);
      *(void *)((char *)a1 + v19[8]) = *(void *)((char *)a2 + v19[8]);
      *(void *)((char *)a1 + v19[9]) = *(void *)((char *)a2 + v19[9]);
      uint64_t v23 = v19[10];
      unint64_t v24 = (char *)a1 + v23;
      uint64_t v25 = (char *)a2 + v23;
      uint64_t v26 = type metadata accessor for SiriRequestIdentities(0);
      uint64_t v27 = *(void *)(v26 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
        memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        uint64_t v91 = v11;
        uint64_t v45 = type metadata accessor for IdentifiedUser();
        uint64_t v46 = *(void *)(v45 - 8);
        int v82 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
        uint64_t v88 = v12;
        if (v82(v25, 1, v45))
        {
          uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(v24, v25, *(void *)(*(void *)(v47 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v24, v25, v45);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v24, 0, 1, v45);
        }
        uint64_t v57 = *(int *)(v26 + 20);
        long long v58 = &v24[v57];
        long long v59 = &v25[v57];
        if (v82(&v25[v57], 1, v45))
        {
          uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(v58, v59, *(void *)(*(void *)(v60 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v58, v59, v45);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v58, 0, 1, v45);
        }
        uint64_t v11 = v91;
        *(void *)&v24[*(int *)(v26 + 24)] = *(void *)&v25[*(int *)(v26 + 24)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
        uint64_t v12 = v88;
      }
      uint64_t v71 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
                   + 48);
      uint64_t v67 = (char *)a1 + v71;
      uint64_t v68 = (char *)a2 + v71;
      uint64_t v69 = type metadata accessor for UserInputResult();
      if (swift_getEnumCaseMultiPayload() == 1) {
        goto LABEL_29;
      }
      goto LABEL_30;
    case 2:
      *a1 = *a2;
      uint64_t v29 = (int *)type metadata accessor for SiriRequest(0);
      uint64_t v30 = v29[5];
      uint64_t v31 = (char *)a1 + v30;
      uint64_t v32 = (char *)a2 + v30;
      uint64_t v33 = type metadata accessor for Input();
      unint64_t v34 = *(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32);
      v34(v31, v32, v33);
      *(void *)((char *)a1 + v29[6]) = *(void *)((char *)a2 + v29[6]);
      *(_OWORD *)((char *)a1 + v29[7]) = *(_OWORD *)((char *)a2 + v29[7]);
      *(void *)((char *)a1 + v29[8]) = *(void *)((char *)a2 + v29[8]);
      *(void *)((char *)a1 + v29[9]) = *(void *)((char *)a2 + v29[9]);
      uint64_t v35 = v29[10];
      uint64_t v36 = (char *)a1 + v35;
      unint64_t v37 = (char *)a2 + v35;
      uint64_t v38 = type metadata accessor for SiriRequestIdentities(0);
      uint64_t v39 = *(void *)(v38 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
      {
        uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
        memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
      }
      else
      {
        __dsta = v36;
        uint64_t v48 = type metadata accessor for IdentifiedUser();
        uint64_t v49 = *(void *)(v48 - 8);
        uint64_t v83 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48);
        uint64_t v86 = v34;
        uint64_t v89 = v33;
        uint64_t v80 = v49;
        if (v83(v37, 1, v48))
        {
          uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          uint64_t v51 = __dsta;
          memcpy(__dsta, v37, *(void *)(*(void *)(v50 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v49 + 32))(__dsta, v37, v48);
          uint64_t v61 = v49;
          uint64_t v51 = __dsta;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(__dsta, 0, 1, v48);
        }
        uint64_t v62 = *(int *)(v38 + 20);
        uint64_t v63 = &v51[v62];
        uint64_t v64 = &v37[v62];
        if (v83(&v37[v62], 1, v48))
        {
          uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(v63, v64, *(void *)(*(void *)(v65 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v80 + 32))(v63, v64, v48);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v63, 0, 1, v48);
        }
        *(void *)&v51[*(int *)(v38 + 24)] = *(void *)&v37[*(int *)(v38 + 24)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v51, 0, 1, v38);
        unint64_t v34 = v86;
        uint64_t v33 = v89;
      }
      uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation, task: Task<(), Error>));
      uint64_t v73 = *(int *)(v72 + 48);
      uint64_t v74 = (char *)a1 + v73;
      uint64_t v75 = (char *)a2 + v73;
      uint64_t v76 = type metadata accessor for UserInputResult();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        v34(v74, v75, v33);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v74, v75, *(void *)(*(void *)(v76 - 8) + 64));
      }
      uint64_t v77 = type metadata accessor for RequestContinuation(0);
      *(void *)&v74[*(int *)(v77 + 20)] = *(void *)&v75[*(int *)(v77 + 20)];
      *(void *)((char *)a1 + *(int *)(v72 + 64)) = *(void *)((char *)a2 + *(int *)(v72 + 64));
      goto LABEL_42;
    case 1:
      *a1 = *a2;
      uint64_t v7 = (int *)type metadata accessor for SiriRequest(0);
      uint64_t v8 = v7[5];
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for Input();
      uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
      v12(v9, v10, v11);
      *(void *)((char *)a1 + v7[6]) = *(void *)((char *)a2 + v7[6]);
      *(_OWORD *)((char *)a1 + v7[7]) = *(_OWORD *)((char *)a2 + v7[7]);
      *(void *)((char *)a1 + v7[8]) = *(void *)((char *)a2 + v7[8]);
      *(void *)((char *)a1 + v7[9]) = *(void *)((char *)a2 + v7[9]);
      uint64_t v13 = v7[10];
      unint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = type metadata accessor for SiriRequestIdentities(0);
      uint64_t v17 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
        memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        __dst = v14;
        uint64_t v90 = v11;
        uint64_t v41 = type metadata accessor for IdentifiedUser();
        uint64_t v42 = *(void *)(v41 - 8);
        uint64_t v81 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
        uint64_t v87 = v12;
        uint64_t v79 = v42;
        if (v81(v15, 1, v41))
        {
          uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          uint64_t v44 = __dst;
          memcpy(__dst, v15, *(void *)(*(void *)(v43 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v42 + 32))(__dst, v15, v41);
          uint64_t v52 = v42;
          uint64_t v44 = __dst;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(__dst, 0, 1, v41);
        }
        uint64_t v53 = *(int *)(v16 + 20);
        uint64_t v54 = &v44[v53];
        uint64_t v55 = &v15[v53];
        if (v81(&v15[v53], 1, v41))
        {
          uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(v54, v55, *(void *)(*(void *)(v56 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v79 + 32))(v54, v55, v41);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(v54, 0, 1, v41);
        }
        uint64_t v11 = v90;
        *(void *)&v44[*(int *)(v16 + 24)] = *(void *)&v15[*(int *)(v16 + 24)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v44, 0, 1, v16);
        uint64_t v12 = v87;
      }
      uint64_t v66 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
                   + 48);
      uint64_t v67 = (char *)a1 + v66;
      uint64_t v68 = (char *)a2 + v66;
      uint64_t v69 = type metadata accessor for UserInputResult();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
LABEL_29:
        v12(v67, v68, v11);
        swift_storeEnumTagMultiPayload();
LABEL_31:
        uint64_t v70 = type metadata accessor for RequestContinuation(0);
        *(void *)&v67[*(int *)(v70 + 20)] = *(void *)&v68[*(int *)(v70 + 20)];
LABEL_42:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
LABEL_30:
      memcpy(v67, v68, *(void *)(*(void *)(v69 - 8) + 64));
      goto LABEL_31;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

_OWORD *assignWithTake for EncoreConversation.State(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of EncoreConversation.State((uint64_t)a1, type metadata accessor for EncoreConversation.State);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 3:
        *a1 = *a2;
        uint64_t v19 = (int *)type metadata accessor for SiriRequest(0);
        uint64_t v20 = v19[5];
        uint64_t v21 = (char *)a1 + v20;
        uint64_t v22 = (char *)a2 + v20;
        uint64_t v11 = type metadata accessor for Input();
        uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
        v12(v21, v22, v11);
        *(void *)((char *)a1 + v19[6]) = *(void *)((char *)a2 + v19[6]);
        *(_OWORD *)((char *)a1 + v19[7]) = *(_OWORD *)((char *)a2 + v19[7]);
        *(void *)((char *)a1 + v19[8]) = *(void *)((char *)a2 + v19[8]);
        *(void *)((char *)a1 + v19[9]) = *(void *)((char *)a2 + v19[9]);
        uint64_t v23 = v19[10];
        unint64_t v24 = (char *)a1 + v23;
        uint64_t v25 = (char *)a2 + v23;
        uint64_t v26 = type metadata accessor for SiriRequestIdentities(0);
        uint64_t v27 = *(void *)(v26 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
        {
          uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          __dsta = v24;
          uint64_t v95 = v11;
          uint64_t v45 = type metadata accessor for IdentifiedUser();
          uint64_t v46 = *(void *)(v45 - 8);
          uint64_t v85 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48);
          uint64_t v89 = v12;
          uint64_t v82 = v46;
          if (v85(v25, 1, v45))
          {
            uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            uint64_t v48 = __dsta;
            memcpy(__dsta, v25, *(void *)(*(void *)(v47 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v46 + 32))(__dsta, v25, v45);
            uint64_t v58 = v46;
            uint64_t v48 = __dsta;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(__dsta, 0, 1, v45);
          }
          uint64_t v59 = *(int *)(v26 + 20);
          uint64_t v60 = &v48[v59];
          uint64_t v61 = &v25[v59];
          if (v85(&v25[v59], 1, v45))
          {
            uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v82 + 32))(v60, v61, v45);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v82 + 56))(v60, 0, 1, v45);
          }
          uint64_t v11 = v95;
          *(void *)&v48[*(int *)(v26 + 24)] = *(void *)&v25[*(int *)(v26 + 24)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v48, 0, 1, v26);
          uint64_t v12 = v89;
        }
        uint64_t v73 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
                     + 48);
        uint64_t v69 = (char *)a1 + v73;
        uint64_t v70 = (char *)a2 + v73;
        uint64_t v71 = type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() == 1) {
          goto LABEL_30;
        }
        goto LABEL_31;
      case 2:
        *a1 = *a2;
        uint64_t v29 = (int *)type metadata accessor for SiriRequest(0);
        uint64_t v30 = v29[5];
        uint64_t v31 = (char *)a1 + v30;
        uint64_t v32 = (char *)a2 + v30;
        uint64_t v33 = type metadata accessor for Input();
        unint64_t v34 = *(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32);
        v34(v31, v32, v33);
        *(void *)((char *)a1 + v29[6]) = *(void *)((char *)a2 + v29[6]);
        *(_OWORD *)((char *)a1 + v29[7]) = *(_OWORD *)((char *)a2 + v29[7]);
        *(void *)((char *)a1 + v29[8]) = *(void *)((char *)a2 + v29[8]);
        *(void *)((char *)a1 + v29[9]) = *(void *)((char *)a2 + v29[9]);
        uint64_t v35 = v29[10];
        uint64_t v36 = (char *)a1 + v35;
        unint64_t v37 = (char *)a2 + v35;
        uint64_t v38 = type metadata accessor for SiriRequestIdentities(0);
        uint64_t v39 = *(void *)(v38 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
        {
          uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
        }
        else
        {
          __dstb = v36;
          uint64_t v49 = type metadata accessor for IdentifiedUser();
          uint64_t v50 = *(void *)(v49 - 8);
          uint64_t v86 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
          uint64_t v87 = v34;
          uint64_t v90 = v33;
          uint64_t v83 = v50;
          if (v86(v37, 1, v49))
          {
            uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            uint64_t v52 = __dstb;
            memcpy(__dstb, v37, *(void *)(*(void *)(v51 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v50 + 32))(__dstb, v37, v49);
            uint64_t v63 = v50;
            uint64_t v52 = __dstb;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(__dstb, 0, 1, v49);
          }
          uint64_t v64 = *(int *)(v38 + 20);
          uint64_t v65 = &v52[v64];
          uint64_t v66 = &v37[v64];
          if (v86(&v37[v64], 1, v49))
          {
            uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v83 + 32))(v65, v66, v49);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v83 + 56))(v65, 0, 1, v49);
          }
          *(void *)&v52[*(int *)(v38 + 24)] = *(void *)&v37[*(int *)(v38 + 24)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v52, 0, 1, v38);
          unint64_t v34 = v87;
          uint64_t v33 = v90;
        }
        uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation, task: Task<(), Error>));
        uint64_t v75 = *(int *)(v74 + 48);
        uint64_t v76 = (char *)a1 + v75;
        uint64_t v77 = (char *)a2 + v75;
        uint64_t v78 = type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          v34(v76, v77, v33);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v76, v77, *(void *)(*(void *)(v78 - 8) + 64));
        }
        uint64_t v79 = type metadata accessor for RequestContinuation(0);
        *(void *)&v76[*(int *)(v79 + 20)] = *(void *)&v77[*(int *)(v79 + 20)];
        *(void *)((char *)a1 + *(int *)(v74 + 64)) = *(void *)((char *)a2 + *(int *)(v74 + 64));
        goto LABEL_43;
      case 1:
        *a1 = *a2;
        uint64_t v7 = (int *)type metadata accessor for SiriRequest(0);
        uint64_t v8 = v7[5];
        uint64_t v9 = (char *)a1 + v8;
        uint64_t v10 = (char *)a2 + v8;
        uint64_t v11 = type metadata accessor for Input();
        uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
        v12(v9, v10, v11);
        *(void *)((char *)a1 + v7[6]) = *(void *)((char *)a2 + v7[6]);
        *(_OWORD *)((char *)a1 + v7[7]) = *(_OWORD *)((char *)a2 + v7[7]);
        *(void *)((char *)a1 + v7[8]) = *(void *)((char *)a2 + v7[8]);
        *(void *)((char *)a1 + v7[9]) = *(void *)((char *)a2 + v7[9]);
        uint64_t v13 = v7[10];
        unint64_t v14 = (char *)a1 + v13;
        uint64_t v15 = (char *)a2 + v13;
        uint64_t v16 = type metadata accessor for SiriRequestIdentities(0);
        uint64_t v17 = *(void *)(v16 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
        {
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
        }
        else
        {
          __dst = v14;
          uint64_t v94 = v11;
          uint64_t v41 = type metadata accessor for IdentifiedUser();
          uint64_t v42 = *(void *)(v41 - 8);
          uint64_t v84 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
          uint64_t v88 = v12;
          uint64_t v81 = v42;
          if (v84(v15, 1, v41))
          {
            uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            uint64_t v44 = __dst;
            memcpy(__dst, v15, *(void *)(*(void *)(v43 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v42 + 32))(__dst, v15, v41);
            uint64_t v53 = v42;
            uint64_t v44 = __dst;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(__dst, 0, 1, v41);
          }
          uint64_t v54 = *(int *)(v16 + 20);
          uint64_t v55 = &v44[v54];
          uint64_t v56 = &v15[v54];
          if (v84(&v15[v54], 1, v41))
          {
            uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v81 + 32))(v55, v56, v41);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v81 + 56))(v55, 0, 1, v41);
          }
          uint64_t v11 = v94;
          *(void *)&v44[*(int *)(v16 + 24)] = *(void *)&v15[*(int *)(v16 + 24)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v44, 0, 1, v16);
          uint64_t v12 = v88;
        }
        uint64_t v68 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, continuation: RequestContinuation))
                     + 48);
        uint64_t v69 = (char *)a1 + v68;
        uint64_t v70 = (char *)a2 + v68;
        uint64_t v71 = type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
LABEL_30:
          v12(v69, v70, v11);
          swift_storeEnumTagMultiPayload();
LABEL_32:
          uint64_t v72 = type metadata accessor for RequestContinuation(0);
          *(void *)&v69[*(int *)(v72 + 20)] = *(void *)&v70[*(int *)(v72 + 20)];
LABEL_43:
          swift_storeEnumTagMultiPayload();
          return a1;
        }
LABEL_31:
        memcpy(v69, v70, *(void *)(*(void *)(v71 - 8) + 64));
        goto LABEL_32;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata completion function for EncoreConversation.State()
{
  uint64_t v7 = "(";
  uint64_t result = type metadata accessor for SiriRequest(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for RequestContinuation(319);
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v8 = &v6;
      uint64_t v3 = MEMORY[0x1E4FBADB0] + 64;
      swift_getTupleTypeLayout3();
      uint64_t v9 = &v5;
      swift_getTupleTypeLayout2();
      uint64_t v10 = &v4;
      uint64_t v11 = v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B9EC90FC()
{
  uint64_t v1 = *(void *)(type metadata accessor for RequestContinuation(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v17 = *(void *)(v1 + 64);
  uint64_t v4 = type metadata accessor for ConversationContext();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v16 = *(void *)(v5 + 64);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ConversationCommitResult, Error>);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = *(void *)(v8 + 64);
  swift_unknownObjectRelease();
  swift_release();
  type metadata accessor for UserInputResult();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = type metadata accessor for Input();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v0 + v3, v10);
  }
  uint64_t v11 = v2 | v6 | v9 | 7;
  uint64_t v12 = (v3 + v17 + v6) & ~v6;
  uint64_t v13 = (v12 + v16 + v9) & ~v9;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v12, v4);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v13, v7);

  return MEMORY[0x1F4186498](v0, v13 + v15, v11);
}

uint64_t partial apply for closure #1 in closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for RequestContinuation(0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for ConversationContext() - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ConversationCommitResult, Error>)
                                       - 8)
                           + 80);
  unint64_t v11 = v8 + v9 + v10;
  uint64_t v12 = v1[2];
  uint64_t v13 = v1[3];
  uint64_t v14 = v1[4];
  uint64_t v15 = (uint64_t)v1 + v5;
  uint64_t v16 = (uint64_t)v1 + v8;
  uint64_t v17 = (uint64_t)v1 + (v11 & ~v10);
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v18;
  *uint64_t v18 = v2;
  v18[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:)(a1, v12, v13, v14, v15, v16, v17);
}

uint64_t sub_1B9EC9514()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<ConversationCommitResult, Error>);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:)(a1, &demangling cache variable for type metadata for CheckedContinuation<ConversationCommitResult, Error>, (uint64_t (*)(uint64_t, uint64_t))closure #1 in closure #1 in closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:));
}

uint64_t outlined init with take of RequestContinuation(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1B9EC95A8()
{
  uint64_t v1 = *(void *)(type metadata accessor for RequestContinuation(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = type metadata accessor for ConversationContext();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  swift_release();
  type metadata accessor for UserInputResult();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for Input();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v0 + v3, v9);
  }
  uint64_t v10 = (v3 + v4 + v7) & ~v7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v10, v5);

  return MEMORY[0x1F4186498](v0, v10 + v8, v2 | v7 | 7);
}

uint64_t partial apply for closure #1 in closure #1 in EncoreConversation.commit()(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for RequestContinuation(0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(type metadata accessor for ConversationContext() - 8) + 80);
  unint64_t v8 = v5 + v6 + v7;
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = v1 + v5;
  uint64_t v11 = v1 + (v8 & ~v7);
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in EncoreConversation.commit()(a1, v9, v10, v11);
}

uint64_t sub_1B9EC9894()
{
  uint64_t v1 = type metadata accessor for ConversationContext();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Never>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_unknownObjectRelease();
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return MEMORY[0x1F4186498](v0, v10, v11);
}

uint64_t partial apply for closure #1 in closure #1 in EncoreEngine.asyncAcceptEvent(request:context:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for ConversationContext() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = v6 + *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Never>)
                 - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  uint64_t v13 = v1[5];
  uint64_t v14 = (uint64_t)v1 + v6;
  uint64_t v15 = (uint64_t)v1 + v9;
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v16;
  *uint64_t v16 = v3;
  v16[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in EncoreEngine.asyncAcceptEvent(request:context:)(a1, v10, v11, v12, v13, v14, v15);
}

uint64_t sub_1B9EC9B70()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Never>);
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in EncoreEngine.asyncAcceptEvent(request:context:)(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in EncoreEngine.asyncAcceptEvent(request:context:)(a1);
}

uint64_t sub_1B9EC9BE8()
{
  uint64_t v1 = (int *)type metadata accessor for SiriRequest(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v29 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = type metadata accessor for ConversationContext();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v28 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v27 = *(void *)(v5 + 64);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Never>);
  uint64_t v6 = *(void *)(v30 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v26 = *(void *)(v6 + 64);
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v8 = v0 + v3 + v1[5];
  uint64_t v9 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_release();
  uint64_t v10 = (uint64_t *)(v0 + v3 + v1[7]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    outlined consume of Data._Representation(*v10, v11);
  }
  swift_release();
  swift_release();
  uint64_t v12 = v0 + v3 + v1[10];
  uint64_t v13 = type metadata accessor for SiriRequestIdentities(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    uint64_t v23 = (v2 + 40) & ~v2;
    uint64_t v24 = v2;
    uint64_t v25 = v4;
    uint64_t v14 = type metadata accessor for IdentifiedUser();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
    if (!v16(v12, 1, v14)) {
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v12, v14);
    }
    uint64_t v22 = v15;
    uint64_t v17 = v12 + *(int *)(v13 + 20);
    if (!v16(v17, 1, v14)) {
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v17, v14);
    }
    swift_bridgeObjectRelease();
    uint64_t v2 = v24;
    uint64_t v4 = v25;
    uint64_t v3 = v23;
  }
  uint64_t v18 = v2 | v28 | v7 | 7;
  uint64_t v19 = (v3 + v29 + v28) & ~v28;
  uint64_t v20 = (v19 + v27 + v7) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v19, v4);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v20, v30);

  return MEMORY[0x1F4186498](v0, v20 + v26, v18);
}

uint64_t partial apply for closure #1 in closure #2 in EncoreEngine.asyncAcceptEvent(request:context:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for SiriRequest(0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for ConversationContext() - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Never>)
                                       - 8)
                           + 80);
  unint64_t v11 = v8 + v9 + v10;
  uint64_t v12 = v1[2];
  uint64_t v13 = v1[3];
  uint64_t v14 = v1[4];
  uint64_t v15 = (uint64_t)v1 + v5;
  uint64_t v16 = (uint64_t)v1 + v8;
  uint64_t v17 = (uint64_t)v1 + (v11 & ~v10);
  uint64_t v18 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v18;
  *uint64_t v18 = v2;
  v18[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #2 in EncoreEngine.asyncAcceptEvent(request:context:)(a1, v12, v13, v14, v15, v16, v17);
}

uint64_t sub_1B9ECA168()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Never>);
}

uint64_t sub_1B9ECA174()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Error>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 72) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x1F4186498](v0, v6, v5);
}

uint64_t partial apply for closure #1 in closure #1 in EncoreEngine.asyncPushEvent(flow:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Error>)
                 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + 32;
  uint64_t v9 = v1 + v5;
  uint64_t v10 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in EncoreEngine.asyncPushEvent(flow:)(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_1B9ECA398()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Error>);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in EncoreEngine.asyncPushEvent(flow:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:)(a1, &demangling cache variable for type metadata for CheckedContinuation<RequestContinuation, Error>, (uint64_t (*)(uint64_t, uint64_t))closure #1 in closure #1 in closure #1 in EncoreEngine.asyncPushEvent(flow:));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in EncoreEngine.asyncCommitEvent(continuation:context:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a2) - 8);
  uint64_t v6 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return a3(a1, v6);
}

uint64_t partial apply for closure #1 in EncoreConversation.attemptCorrection(on:)()
{
  return closure #1 in EncoreConversation.attemptCorrection(on:)(*(void **)(v0 + 16));
}

uint64_t sub_1B9ECA464()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in EncoreEngine.asyncEnsureReadyEvent()(uint64_t a1)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>)
                 - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in EncoreEngine.asyncEnsureReadyEvent()(a1, v5, v6, v7, v8);
}

uint64_t sub_1B9ECA63C()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
}

uint64_t objectdestroy_3Tm_0()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in closure #1 in EncoreConversation.setupEncoreEventHandling()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in EncoreConversation.setupEncoreEventHandling()(a1, v4, v5, v7, v6);
}

uint64_t lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in EncoreConversation.init<A>(initialFlow:pluginId:pluginInfo:taskService:taskObserver:snippetManager:rootEnvironment:correctionsEngine:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v2 = (void *)swift_task_alloc();
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return EncoreConversation.setupEncoreEventHandling()();
}

uint64_t specialized Array.remove(at:)(unint64_t a1)
{
  uint64_t v3 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    *uint64_t v1 = v3;
  }
  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8;
  unint64_t v6 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      uint64_t v9 = v5 + 8 * a1;
      uint64_t v10 = *(void *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
      specialized Array._endMutation()();
      return v10;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  uint64_t v3 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    *uint64_t v1 = v3;
  }
  uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8;
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v7 = v6 - 1;
    uint64_t v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      uint64_t v9 = v5 + 8 * a1;
      uint64_t v10 = *(void *)(v9 + 32);
      memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(void *)(v5 + 16) = v7;
      specialized Array._endMutation()();
      return v10;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.remove(at:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v7 = v6 - 1;
  uint64_t v8 = type metadata accessor for Parse();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 72);
  unint64_t v11 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)) + v10 * a1;
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v9 + 32))(a2, v11, v8);
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v10 > 0 || v11 >= v11 + v10 + v10 * (v7 - a1))
  {
    uint64_t result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (v10)
  {
    uint64_t result = swift_arrayInitWithTakeBackToFront();
  }
  *(void *)(v5 + 16) = v7;
  *uint64_t v2 = v5;
  return result;
}

uint64_t EncoreEngine.__allocating_init(rootEnvironment:snippetManager:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  EncoreEngine.init(rootEnvironment:snippetManager:)(a1, a2);
  return v4;
}

uint64_t EncoreEngine.send(event:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation.YieldResult);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for EncoreEngine.EngineEvent(0);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  unint64_t v11 = (char *)&v13 - v10;
  _s14SiriKitRuntime17EncoreEngineEventOWOcTm_0(a1, (uint64_t)&v13 - v10, type metadata accessor for EncoreEngineEvent);
  swift_storeEnumTagMultiPayload();
  _s14SiriKitRuntime17EncoreEngineEventOWOcTm_0((uint64_t)v11, (uint64_t)v9, type metadata accessor for EncoreEngine.EngineEvent);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return outlined destroy of EncoreEngine.EngineEvent((uint64_t)v11, type metadata accessor for EncoreEngine.EngineEvent);
}

uint64_t *FlowActor.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static FlowActor.shared;
}

uint64_t EncoreEngine.isEmpty()()
{
  *(void *)(v1 + 24) = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v2 = static FlowActor.shared;
  return MEMORY[0x1F4188298](EncoreEngine.isEmpty(), v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v13;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  uint64_t v4 = os_log_type_enabled(v2, v3);
  unint64_t v5 = *(void *)(v0 + 24);
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 67109376;
    uint64_t v7 = *(void *)(v5 + 24);
    *(_DWORD *)(v0 + 16) = (*(uint64_t (**)(void))(*(void *)v7 + 184))() & 1;
    uint64_t v8 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 8) = 2048;
    *(void *)(v0 + 16) = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 160))(v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1B9C64000, v2, v3, "[EncoreEngine] Is empty: %{BOOL}d count: %ld.", (uint8_t *)v6, 0x12u);
    MEMORY[0x1BA9E48C0](v6, -1, -1);
  }
  else
  {
    swift_release();
  }

  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v0 + 24) + 24) + 184))();
  uint64_t v10 = *(uint64_t (**)(uint64_t))(v0 + 8);
  unint64_t v11 = v9 & 1;
  return v10(v11);
}

uint64_t EncoreEngine.stackCount.getter()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + 24) + 160))();
}

uint64_t FlowActor.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  return v0;
}

uint64_t static FlowActor.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t FlowActor.deinit()
{
  swift_defaultActor_destroy();
  return v0;
}

uint64_t FlowActor.__deallocating_deinit()
{
  swift_defaultActor_destroy();

  return MEMORY[0x1F4188210](v0);
}

uint64_t FlowActor.init()()
{
  swift_defaultActor_initialize();
  return v0;
}

uint64_t FlowActor.unownedExecutor.getter()
{
  return v0;
}

uint64_t protocol witness for static GlobalActor.shared.getter in conformance FlowActor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t protocol witness for static GlobalActor.sharedUnownedExecutor.getter in conformance FlowActor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for FlowActor();

  return MEMORY[0x1F4187F20](v3, a2);
}

uint64_t RequestContinuation.userInputResult.getter@<X0>(uint64_t a1@<X8>)
{
  return _s14SiriKitRuntime17EncoreEngineEventOWOcTm_0(v1, a1, (uint64_t (*)(void))type metadata accessor for UserInputResult);
}

uint64_t RequestContinuation.agent.getter()
{
  type metadata accessor for RequestContinuation(0);

  return swift_retain();
}

uint64_t RequestContinuation.init(userInputResult:agent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  outlined init with take of UserInputResult(a1, a3, (uint64_t (*)(void))type metadata accessor for UserInputResult);
  uint64_t result = type metadata accessor for RequestContinuation(0);
  *(void *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t ActingFlowAgent.flow.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 16, a1);
}

uint64_t ActingFlowAgent.unwrappedFlow.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 56, a1);
}

uint64_t ActingFlowAgent.lifeCycleModifier.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + 96, a1, &demangling cache variable for type metadata for LifeCycleModifier?);
}

uint64_t ActingFlowAgent.inputAccepting.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + 136, a1, &demangling cache variable for type metadata for InputAccepting?);
}

uint64_t ActingFlowAgent.executable.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + 176, a1, &demangling cache variable for type metadata for Executable?);
}

uint64_t ActingFlowAgent.snippetEventHandling.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ActingFlowAgent.environment.getter()
{
  outlined init with copy of ReferenceResolutionClientProtocol(v0 + 56, (uint64_t)v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriEnvironmentLocating);
  if (swift_dynamicCast())
  {
    outlined init with take of ReferenceResolutionClientProtocol(v3, (uint64_t)v6);
    __swift_project_boxed_opaque_existential_1(v6, v6[3]);
    uint64_t v1 = dispatch thunk of SiriEnvironmentLocating.siriEnvironment.getter();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v6);
  }
  else
  {
    uint64_t v4 = 0;
    memset(v3, 0, sizeof(v3));
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v3, &demangling cache variable for type metadata for SiriEnvironmentLocating?);
    uint64_t v1 = *(void *)(v0 + 232);
    if (v1)
    {
      swift_retain();
    }
    else
    {
      type metadata accessor for SiriEnvironment();
      return static SiriEnvironment.default.getter();
    }
  }
  return v1;
}

uint64_t ActingFlowAgent.environment.setter(uint64_t a1)
{
  outlined init with copy of ReferenceResolutionClientProtocol(v1 + 56, (uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriEnvironmentLocating);
  if (swift_dynamicCast())
  {
    outlined init with take of ReferenceResolutionClientProtocol(v4, (uint64_t)v7);
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    dispatch thunk of SiriEnvironmentLocating.siriEnvironment.setter();
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
  }
  else
  {
    uint64_t v5 = 0;
    memset(v4, 0, sizeof(v4));
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for SiriEnvironmentLocating?);
    *(void *)(v1 + 232) = a1;
    return swift_release();
  }
}

uint64_t (*ActingFlowAgent.environment.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  *a1 = ActingFlowAgent.environment.getter();
  return ActingFlowAgent.environment.modify;
}

uint64_t ActingFlowAgent.environment.modify(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return ActingFlowAgent.environment.setter(*a1);
  }
  uint64_t v2 = swift_retain();
  ActingFlowAgent.environment.setter(v2);

  return swift_release();
}

uint64_t ActingFlowAgent.__allocating_init(flow:environment:)(void *a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  ActingFlowAgent.init(flow:environment:)(a1, a2);
  return v4;
}

void *ActingFlowAgent.init(flow:environment:)(void *a1, uint64_t a2)
{
  v2[29] = 0;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a1, (uint64_t)(v2 + 2));
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  ActingFlow.unwrap.getter();
  outlined init with take of ReferenceResolutionClientProtocol(v12, (uint64_t)(v2 + 7));
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a1, (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LifeCycleModifier);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v11 = 0;
    long long v9 = 0u;
    long long v10 = 0u;
  }
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v9, (uint64_t)(v2 + 12), &demangling cache variable for type metadata for LifeCycleModifier?);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v2 + 7), (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputAccepting);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v11 = 0;
    long long v9 = 0u;
    long long v10 = 0u;
  }
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v9, (uint64_t)(v2 + 17), &demangling cache variable for type metadata for InputAccepting?);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v2 + 7), (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Executable);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v11 = 0;
    long long v9 = 0u;
    long long v10 = 0u;
  }
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v9, (uint64_t)(v2 + 22), &demangling cache variable for type metadata for Executable?);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v2 + 7), (uint64_t)v12);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetEventHandling);
  int v5 = swift_dynamicCast();
  uint64_t v7 = *((void *)&v9 + 1);
  uint64_t v6 = v9;
  if (!v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  v2[27] = v6;
  v2[28] = v7;
  ActingFlowAgent.environment.setter(a2);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v2;
}

uint64_t ActingFlowAgent.snippetIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  if (*(void *)(v1 + 216))
  {
    swift_getObjectType();
    dispatch thunk of Identifiable.id.getter();
    uint64_t v3 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(a1, 0, 1, v3);
  }
  else
  {
    uint64_t v5 = type metadata accessor for UUID();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    return v6(a1, 1, 1, v5);
  }
}

uint64_t ActingFlowAgent.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 96, &demangling cache variable for type metadata for LifeCycleModifier?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 136, &demangling cache variable for type metadata for InputAccepting?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 176, &demangling cache variable for type metadata for Executable?);
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t ActingFlowAgent.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 96, &demangling cache variable for type metadata for LifeCycleModifier?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 136, &demangling cache variable for type metadata for InputAccepting?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 176, &demangling cache variable for type metadata for Executable?);
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t OrderedForest<A>.debugDescription()()
{
  return (*(uint64_t (**)(uint64_t (*)(void *), void))(*(void *)v0 + 304))(closure #1 in OrderedForest<A>.debugDescription(), 0);
}

uint64_t closure #1 in OrderedForest<A>.debugDescription()(void *a1)
{
  outlined init with copy of ReferenceResolutionClientProtocol(*a1 + 56, (uint64_t)v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
  return String.init<A>(describing:)();
}

uint64_t ExecutableTask.executingNode.getter()
{
  return swift_retain();
}

uint64_t ExecutableTask.context.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_context;
  uint64_t v4 = type metadata accessor for ConversationContext();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t ExecutableTask.runningTask.getter()
{
  return swift_retain();
}

uint64_t key path getter for ExecutableTask.actionCompletion : ExecutableTask@<X0>(void *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = (uint64_t *)(*a1 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_actionCompletion);
  swift_beginAccess();
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed EncoreEngine.ActionOutcome) -> ();
  a2[1] = (uint64_t (*)())v6;
  return swift_retain();
}

uint64_t key path setter for ExecutableTask.actionCompletion : ExecutableTask(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  uint64_t v6 = (uint64_t (**)())(*a2 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_actionCompletion);
  swift_beginAccess();
  *uint64_t v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed EncoreEngine.ActionOutcome) -> (@out ());
  v6[1] = (uint64_t (*)())v5;
  swift_retain();
  return swift_release();
}

uint64_t ExecutableTask.actionCompletion.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_actionCompletion);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_retain();
  return v2;
}

uint64_t ExecutableTask.actionCompletion.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_actionCompletion);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_release();
}

uint64_t (*ExecutableTask.actionCompletion.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t ExecutableTask.__allocating_init(executingNode:context:runningTask:actionCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  uint64_t v11 = v10 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_context;
  uint64_t v12 = type metadata accessor for ConversationContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v11, a2, v12);
  *(void *)(v10 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_runningTask) = a3;
  uint64_t v13 = (void *)(v10 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_actionCompletion);
  *uint64_t v13 = a4;
  v13[1] = a5;
  return v10;
}

uint64_t ExecutableTask.init(executingNode:context:runningTask:actionCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a1;
  uint64_t v10 = v5 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_context;
  uint64_t v11 = type metadata accessor for ConversationContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10, a2, v11);
  *(void *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_runningTask) = a3;
  uint64_t v12 = (void *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_actionCompletion);
  *uint64_t v12 = a4;
  v12[1] = a5;
  return v5;
}

uint64_t ExecutableTask.deinit()
{
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_context;
  uint64_t v2 = type metadata accessor for ConversationContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  return v0;
}

uint64_t ExecutableTask.__deallocating_deinit()
{
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_context;
  uint64_t v2 = type metadata accessor for ConversationContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t OrderedForest<A>.find(value:)(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 192);
  uint64_t v4 = swift_retain();
  uint64_t v5 = v3(v4);
  swift_release();
  if (!v5) {
    return 0;
  }
  while (1)
  {
    uint64_t Strong = swift_weakLoadStrong();
    if (*(void *)(v5 + 16) == a1) {
      break;
    }
    swift_release();
    uint64_t v5 = Strong;
    if (!Strong) {
      return Strong;
    }
  }
  swift_release();
  return v5;
}

uint64_t one-time initialization function for TaskPriority()
{
  uint64_t v0 = type metadata accessor for TaskPriority();
  __swift_allocate_value_buffer(v0, static EncoreEngine.TaskPriority);
  __swift_project_value_buffer(v0, (uint64_t)static EncoreEngine.TaskPriority);
  return static TaskPriority.userInitiated.getter();
}

uint64_t EncoreEngine.TaskPriority.unsafeMutableAddressor()
{
  if (one-time initialization token for TaskPriority != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for TaskPriority();

  return __swift_project_value_buffer(v0, (uint64_t)static EncoreEngine.TaskPriority);
}

uint64_t static EncoreEngine.TaskPriority.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for TaskPriority != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for TaskPriority();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static EncoreEngine.TaskPriority);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

void *EncoreEngine.init(rootEnvironment:snippetManager:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[7] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EventQueue<EncoreEngine.EngineEvent>);
  swift_allocObject();
  _OWORD v2[2] = specialized EventQueue.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OrderedForest<ActingFlowAgent>);
  long long v9 = (void *)swift_allocObject();
  v9[3] = 0;
  v9[4] = 0;
  v9[2] = 0;
  v2[3] = v9;
  v2[4] = a1;
  uint64_t v10 = MEMORY[0x1E4FBC860];
  v2[5] = a2;
  v2[6] = v10;
  swift_retain_n();
  swift_retain();
  swift_retain();
  dispatch thunk of SnippetManager.positionLookup.setter();
  swift_release();
  if (one-time initialization token for TaskPriority != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for TaskPriority();
  uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)static EncoreEngine.TaskPriority);
  uint64_t v13 = *(void *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v8, v12, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v11);
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = v14;
  uint64_t v16 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #2 in EncoreEngine.init(rootEnvironment:snippetManager:), (uint64_t)v15);
  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for TaskPriority?);
  v3[7] = v16;
  swift_release();
  return v3;
}

uint64_t type metadata accessor for EncoreEngine.EngineEvent(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for EncoreEngine.EngineEvent);
}

uint64_t type metadata accessor for EncoreEngineEvent(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for EncoreEngineEvent);
}

uint64_t _s14SiriKitRuntime17EncoreEngineEventOWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t EventQueue.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  EventQueue.init()();
  return v0;
}

uint64_t closure #1 in EncoreEngine.init(rootEnvironment:snippetManager:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v26 - v13;
  swift_getObjectType();
  uint64_t v28 = v14;
  uint64_t v29 = a1;
  uint64_t v15 = dispatch thunk of Identifiable.id.getter();
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(**(void **)(a3 + 24) + 192))(v15);
  uint64_t v17 = 0;
  uint64_t v18 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  uint64_t v19 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  uint64_t v26 = (void (**)(char *, char *, uint64_t))(v9 + 32);
  uint64_t v27 = (void (**)(char *, uint64_t))(v9 + 8);
  do
  {
    if (!v16)
    {
      (*v27)(v28, v8);
      return 0;
    }
    uint64_t Strong = swift_weakLoadStrong();
    uint64_t v23 = *(void *)(*(void *)(v16 + 16) + 216);
    if (!v23)
    {
      (*v18)(v7, 1, 1, v8);
LABEL_3:
      swift_release();
      uint64_t result = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      goto LABEL_4;
    }
    swift_getObjectType();
    uint64_t v29 = v23;
    dispatch thunk of Identifiable.id.getter();
    (*v18)(v7, 0, 1, v8);
    if ((*v19)(v7, 1, v8) == 1) {
      goto LABEL_3;
    }
    (*v26)(v12, v7, v8);
    char v24 = static UUID.== infix(_:_:)();
    swift_release();
    uint64_t v25 = (uint64_t (*)(char *, uint64_t))*v27;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v27)(v12, v8);
    if (v24)
    {
      swift_release();
      v25(v28, v8);
      return v17;
    }
LABEL_4:
    uint64_t v16 = Strong;
  }
  while (!__OFADD__(v17++, 1));
  __break(1u);
  return result;
}

uint64_t EncoreEngine.position(of:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v24 - v11;
  swift_getObjectType();
  uint64_t v26 = v12;
  uint64_t v27 = a1;
  uint64_t v13 = dispatch thunk of Identifiable.id.getter();
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(**(void **)(v1 + 24) + 192))(v13);
  uint64_t v15 = 0;
  uint64_t v16 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
  uint64_t v17 = (unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  char v24 = (void (**)(char *, char *, uint64_t))(v7 + 32);
  uint64_t v25 = (void (**)(char *, uint64_t))(v7 + 8);
  do
  {
    if (!v14)
    {
      (*v25)(v26, v6);
      return 0;
    }
    uint64_t Strong = swift_weakLoadStrong();
    uint64_t v21 = *(void *)(*(void *)(v14 + 16) + 216);
    if (!v21)
    {
      (*v16)(v5, 1, 1, v6);
LABEL_3:
      swift_release();
      uint64_t result = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      goto LABEL_4;
    }
    swift_getObjectType();
    uint64_t v27 = v21;
    dispatch thunk of Identifiable.id.getter();
    (*v16)(v5, 0, 1, v6);
    if ((*v17)(v5, 1, v6) == 1) {
      goto LABEL_3;
    }
    (*v24)(v10, v5, v6);
    char v22 = static UUID.== infix(_:_:)();
    swift_release();
    uint64_t v23 = (uint64_t (*)(char *, uint64_t))*v25;
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v25)(v10, v6);
    if (v22)
    {
      swift_release();
      v23(v26, v6);
      return v15;
    }
LABEL_4:
    uint64_t v14 = Strong;
  }
  while (!__OFADD__(v15++, 1));
  __break(1u);
  return result;
}

uint64_t closure #2 in EncoreEngine.init(rootEnvironment:snippetManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a4;
  return MEMORY[0x1F4188298](closure #2 in EncoreEngine.init(rootEnvironment:snippetManager:), 0, 0);
}

uint64_t closure #2 in EncoreEngine.init(rootEnvironment:snippetManager:)()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[6] = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[7] = v2;
    *uint64_t v2 = v0;
    v2[1] = closure #2 in EncoreEngine.init(rootEnvironment:snippetManager:);
    return EncoreEngine.startEventLoop()();
  }
  else
  {
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t EncoreEngine.startEventLoop()()
{
  v1[2] = v0;
  type metadata accessor for EncoreEngineEvent(0);
  v1[3] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for EncoreEngine.EngineEvent(0);
  v1[4] = v2;
  v1[5] = *(void *)(v2 - 8);
  v1[6] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EncoreEngine.EngineEvent?);
  v1[7] = swift_task_alloc();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Iterator);
  v1[8] = v3;
  v1[9] = *(void *)(v3 - 8);
  v1[10] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v4 = static FlowActor.shared;
  v1[11] = static FlowActor.shared;
  return MEMORY[0x1F4188298](EncoreEngine.startEventLoop(), v4, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[12] = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "[EncoreEngine] Event process loop started.", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>);
  AsyncStream.makeAsyncIterator()();
  uint64_t v5 = static FlowActor.shared;
  uint64_t v7 = lazy protocol witness table accessor for type FlowActor and conformance FlowActor(&lazy protocol witness table cache variable for type FlowActor and conformance FlowActor, v6, (void (*)(uint64_t))type metadata accessor for FlowActor);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[13] = v8;
  *uint64_t v8 = v0;
  v8[1] = EncoreEngine.startEventLoop();
  uint64_t v9 = v0[7];
  uint64_t v10 = v0[8];
  return MEMORY[0x1F4187D58](v9, v5, v7, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](EncoreEngine.startEventLoop(), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t (*v6)(void);
  int EnumCaseMultiPayload;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = v0[7];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[5] + 48))(v1, 1, v0[4]) == 1)
  {
    uint64_t v2 = v0[2];
    (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
    *(void *)(v2 + 56) = 0;
    swift_release();
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1B9C64000, v3, v4, "[EncoreEngine] Event process loop ends.", v5, 2u);
      MEMORY[0x1BA9E48C0](v5, -1, -1);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  else
  {
    outlined init with take of UserInputResult(v1, v0[6], type metadata accessor for EncoreEngine.EngineEvent);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v9 = (uint64_t *)v0[6];
    if (EnumCaseMultiPayload == 1)
    {
      EncoreEngine.handleInternal(event:)(*v9);
      swift_release();
    }
    else
    {
      uint64_t v11 = v0[3];
      outlined init with take of UserInputResult((uint64_t)v9, v11, type metadata accessor for EncoreEngineEvent);
      EncoreEngine.handleExternal(event:)(v11);
      outlined destroy of EncoreEngine.EngineEvent(v11, type metadata accessor for EncoreEngineEvent);
    }
    uint64_t v12 = static FlowActor.shared;
    uint64_t v13 = lazy protocol witness table accessor for type FlowActor and conformance FlowActor(&lazy protocol witness table cache variable for type FlowActor and conformance FlowActor, v10, (void (*)(uint64_t))type metadata accessor for FlowActor);
    uint64_t v14 = (void *)swift_task_alloc();
    v0[13] = v14;
    *uint64_t v14 = v0;
    v14[1] = EncoreEngine.startEventLoop();
    uint64_t v15 = v0[7];
    uint64_t v16 = v0[8];
    return MEMORY[0x1F4187D58](v15, v12, v13, v16);
  }
}

uint64_t EncoreEngine.deinit()
{
  uint64_t v1 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "[EncoreEngine] deinit.", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v1;
}

uint64_t EncoreEngine.__deallocating_deinit()
{
  EncoreEngine.deinit();

  return swift_deallocClassInstance();
}

uint64_t EventQueue.send(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v12 - v5;
  uint64_t v7 = type metadata accessor for AsyncStream.Continuation.YieldResult();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v12 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  type metadata accessor for AsyncStream.Continuation();
  AsyncStream.Continuation.yield(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void EncoreEngine.handleExternal(event:)(uint64_t a1)
{
  v227 = 0;
  uint64_t v222 = type metadata accessor for ConversationContext();
  uint64_t v223 = *(void *)(v222 - 8);
  MEMORY[0x1F4188790](v222);
  v212 = (char *)&v201 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v202 = type metadata accessor for SiriRequest(0);
  uint64_t v213 = *(void *)(v202 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v202);
  uint64_t v214 = (uint64_t)&v201 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  v220 = (char **)((char *)&v201 - v6);
  uint64_t v209 = v7;
  MEMORY[0x1F4188790](v5);
  v225 = (void (*)(void))((char *)&v201 - v8);
  uint64_t v221 = type metadata accessor for UserInputResult();
  uint64_t v9 = MEMORY[0x1F4188790](v221);
  uint64_t v11 = (char *)&v201 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v204 = (uint64_t)&v201 - v12;
  uint64_t v205 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RequestContinuation, Error>);
  uint64_t v211 = *(void *)(v205 - 8);
  uint64_t v13 = *(void *)(v211 + 64);
  uint64_t v14 = MEMORY[0x1F4188790](v205);
  v206 = (uint64_t *)((char *)&v201 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v203 = (uint64_t)&v201 - v16;
  MEMORY[0x1F4188790](v15);
  v207 = (char *)&v201 - v17;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v18 - 8);
  v224 = (uint8_t *)&v201 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v218 = type metadata accessor for RequestContinuation(0);
  uint64_t v219 = *(void *)(v218 - 8);
  uint64_t v20 = *(void *)(v219 + 64);
  uint64_t v21 = MEMORY[0x1F4188790](v218);
  uint64_t v216 = (uint64_t)&v201 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v21);
  v208 = (char *)&v201 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v201 - v25;
  MEMORY[0x1F4188790](v24);
  v217 = (char *)&v201 - v27;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SystemEvents?);
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v201 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v210 = type metadata accessor for SystemEvents();
  v215 = *(char **)(v210 - 8);
  uint64_t v31 = MEMORY[0x1F4188790](v210);
  uint64_t v33 = (char *)&v201 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31);
  v201 = (char *)&v201 - v34;
  uint64_t v35 = type metadata accessor for EncoreEngineEvent(0);
  MEMORY[0x1F4188790](v35);
  unint64_t v37 = (char *)&v201 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s14SiriKitRuntime17EncoreEngineEventOWOcTm_0(a1, (uint64_t)v37, type metadata accessor for EncoreEngineEvent);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v83 = *(void **)v37;
      uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ()));
      uint64_t v85 = &v37[*(int *)(v84 + 48)];
      uint64_t v86 = &v37[*(int *)(v84 + 64)];
      uint64_t v88 = *(void *)v86;
      uint64_t v87 = *((void *)v86 + 1);
      EncoreEngine.ensureReady()();
      uint64_t v89 = v217;
      EncoreEngine.continuation(for:)(v83, v217);
      if (one-time initialization token for TaskPriority != -1) {
        swift_once();
      }
      uint64_t v90 = type metadata accessor for TaskPriority();
      uint64_t v91 = __swift_project_value_buffer(v90, (uint64_t)static EncoreEngine.TaskPriority);
      uint64_t v92 = *(void *)(v90 - 8);
      uint64_t v93 = v224;
      (*(void (**)(uint8_t *, uint64_t, uint64_t))(v92 + 16))(v224, v91, v90);
      (*(void (**)(uint8_t *, void, uint64_t, uint64_t))(v92 + 56))(v93, 0, 1, v90);
      _s14SiriKitRuntime17EncoreEngineEventOWOcTm_0((uint64_t)v89, (uint64_t)v26, type metadata accessor for RequestContinuation);
      unint64_t v94 = (*(unsigned __int8 *)(v219 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v219 + 80);
      uint64_t v95 = (void *)swift_allocObject();
      void v95[2] = 0;
      v95[3] = 0;
      v95[4] = v83;
      v95[5] = v88;
      v95[6] = v87;
      outlined init with take of UserInputResult((uint64_t)v26, (uint64_t)v95 + v94, type metadata accessor for RequestContinuation);
      id v96 = v83;
      swift_retain();
      _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v93, (uint64_t)&async function pointer to partial apply for closure #1 in EncoreEngine.handleExternal(event:), (uint64_t)v95);
      swift_release();
      swift_release();

      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v93, &demangling cache variable for type metadata for TaskPriority?);
      outlined destroy of EncoreEngine.EngineEvent((uint64_t)v89, type metadata accessor for RequestContinuation);
      (*(void (**)(char *, uint64_t))(v223 + 8))(v85, v222);
      return;
    case 2u:
      uint64_t v63 = *((void *)v37 + 5);
      uint64_t v64 = *((void *)v37 + 6);
      outlined init with take of ReferenceResolutionClientProtocol((long long *)v37, (uint64_t)&v233);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v65 = type metadata accessor for Logger();
      __swift_project_value_buffer(v65, (uint64_t)static Logger.executor);
      outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v233, (uint64_t)&v231);
      uint64_t v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v66, v67))
      {
        uint64_t v68 = (uint8_t *)swift_slowAlloc();
        uint64_t v69 = swift_slowAlloc();
        *(void *)&v228[0] = v69;
        *(_DWORD *)uint64_t v68 = 136315138;
        outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v231, (uint64_t)&v230);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
        uint64_t v70 = String.init<A>(describing:)();
        uint64_t v230 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, (uint64_t *)v228);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v231);
        _os_log_impl(&dword_1B9C64000, v66, v67, "[EncoreEngine] Handling push event flow: %s.", v68, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v69, -1, -1);
        MEMORY[0x1BA9E48C0](v68, -1, -1);
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v231);
      }

      uint64_t v146 = v226;
      uint64_t v147 = (uint64_t)v207;
      uint64_t v148 = v206;
      EncoreEngine.ensureReady()();
      if ((*(uint64_t (**)(void))(**(void **)(v146 + 24) + 184))())
      {
        outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v233, (uint64_t)&v231);
        uint64_t v149 = EncoreEngine.push(parentNode:flow:insideEncoreEnvironment:)(0, (uint64_t)&v231, 0);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v231, &demangling cache variable for type metadata for ActingFlow?);
        swift_storeEnumTagMultiPayload();
        if (v149)
        {
          uint64_t v150 = *(void *)(v149 + 16);
          swift_retain();
          swift_release();
        }
        else
        {
          uint64_t v150 = 0;
        }
        uint64_t v153 = v203;
        outlined init with take of UserInputResult(v204, v203, (uint64_t (*)(void))type metadata accessor for UserInputResult);
        *(void *)(v153 + *(int *)(v218 + 20)) = v150;
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
        uint64_t v151 = swift_allocError();
        void *v152 = 0xD000000000000046;
        v152[1] = 0x80000001BA068430;
        *uint64_t v148 = v151;
        swift_storeEnumTagMultiPayload();
        uint64_t v153 = (uint64_t)v148;
      }
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v153, v147, &demangling cache variable for type metadata for Result<RequestContinuation, Error>);
      if (one-time initialization token for TaskPriority != -1) {
        swift_once();
      }
      uint64_t v183 = type metadata accessor for TaskPriority();
      uint64_t v184 = __swift_project_value_buffer(v183, (uint64_t)static EncoreEngine.TaskPriority);
      uint64_t v185 = *(void *)(v183 - 8);
      uint64_t v186 = v224;
      (*(void (**)(uint8_t *, uint64_t, uint64_t))(v185 + 16))(v224, v184, v183);
      (*(void (**)(uint8_t *, void, uint64_t, uint64_t))(v185 + 56))(v186, 0, 1, v183);
      outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v233, (uint64_t)&v231);
      outlined init with copy of ReferenceResolutionClientProtocol?(v147, (uint64_t)v148, &demangling cache variable for type metadata for Result<RequestContinuation, Error>);
      unint64_t v187 = (*(unsigned __int8 *)(v211 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v211 + 80);
      v188 = (void *)swift_allocObject();
      v188[2] = 0;
      v188[3] = 0;
      outlined init with take of ReferenceResolutionClientProtocol(&v231, (uint64_t)(v188 + 4));
      v188[9] = v63;
      v188[10] = v64;
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v148, (uint64_t)v188 + v187, &demangling cache variable for type metadata for Result<RequestContinuation, Error>);
      swift_retain();
      _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v186, (uint64_t)&async function pointer to partial apply for closure #2 in EncoreEngine.handleExternal(event:), (uint64_t)v188);
      swift_release();
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v186, &demangling cache variable for type metadata for TaskPriority?);
      outlined destroy of ReferenceResolutionClientProtocol?(v147, &demangling cache variable for type metadata for Result<RequestContinuation, Error>);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v233);
      return;
    case 3u:
      uint64_t v73 = *(void *)v37;
      uint64_t v72 = *((void *)v37 + 1);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v74 = type metadata accessor for Logger();
      __swift_project_value_buffer(v74, (uint64_t)static Logger.executor);
      uint64_t v75 = Logger.logObject.getter();
      os_log_type_t v76 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v75, v76))
      {
        uint64_t v77 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v77 = 0;
        _os_log_impl(&dword_1B9C64000, v75, v76, "[EncoreEngine] Handling ensureReady event.", v77, 2u);
        MEMORY[0x1BA9E48C0](v77, -1, -1);
      }

      EncoreEngine.ensureReady()();
      if (one-time initialization token for TaskPriority != -1) {
        swift_once();
      }
      uint64_t v78 = type metadata accessor for TaskPriority();
      uint64_t v79 = __swift_project_value_buffer(v78, (uint64_t)static EncoreEngine.TaskPriority);
      uint64_t v80 = *(void *)(v78 - 8);
      uint64_t v81 = v224;
      (*(void (**)(uint8_t *, uint64_t, uint64_t))(v80 + 16))(v224, v79, v78);
      (*(void (**)(uint8_t *, void, uint64_t, uint64_t))(v80 + 56))(v81, 0, 1, v78);
      uint64_t v82 = (void *)swift_allocObject();
      _OWORD v82[2] = 0;
      v82[3] = 0;
      v82[4] = v73;
      v82[5] = v72;
      swift_retain();
      _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v81, (uint64_t)&async function pointer to partial apply for closure #3 in EncoreEngine.handleExternal(event:), (uint64_t)v82);
      swift_release();
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v81, &demangling cache variable for type metadata for TaskPriority?);
      return;
    case 4u:
      uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ()));
      uint64_t v49 = &v37[*(int *)(v48 + 64)];
      uint64_t v51 = *(char **)v49;
      uint64_t v50 = (char *)*((void *)v49 + 1);
      v212 = v51;
      v215 = v50;
      uint64_t v52 = (uint64_t)v225;
      outlined init with take of UserInputResult((uint64_t)v37, (uint64_t)v225, type metadata accessor for SiriRequest);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v53 = type metadata accessor for Logger();
      __swift_project_value_buffer(v53, (uint64_t)static Logger.executor);
      uint64_t v54 = (uint64_t)v220;
      _s14SiriKitRuntime17EncoreEngineEventOWOcTm_0(v52, (uint64_t)v220, type metadata accessor for SiriRequest);
      uint64_t v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.debug.getter();
      BOOL v57 = os_log_type_enabled(v55, v56);
      uint64_t v211 = v48;
      if (v57)
      {
        uint64_t v58 = (uint8_t *)swift_slowAlloc();
        uint64_t v59 = swift_slowAlloc();
        v233 = v59;
        *(_DWORD *)uint64_t v58 = 136315138;
        type metadata accessor for Input();
        lazy protocol witness table accessor for type FlowActor and conformance FlowActor(&lazy protocol witness table cache variable for type Input and conformance Input, 255, MEMORY[0x1E4FA1EE0]);
        uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)&long long v231 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, (uint64_t *)&v233);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of EncoreEngine.EngineEvent((uint64_t)v220, type metadata accessor for SiriRequest);
        _os_log_impl(&dword_1B9C64000, v55, v56, "[EncoreEngine] Handling accept event request: %s.", v58, 0xCu);
        swift_arrayDestroy();
        uint64_t v62 = v59;
        uint64_t v52 = (uint64_t)v225;
        MEMORY[0x1BA9E48C0](v62, -1, -1);
        MEMORY[0x1BA9E48C0](v58, -1, -1);
      }
      else
      {
        outlined destroy of EncoreEngine.EngineEvent(v54, type metadata accessor for SiriRequest);
      }

      uint64_t v120 = v226;
      EncoreEngine.ensureReady()();
      uint64_t v234 = 0;
      uint64_t v121 = (*(uint64_t (**)(void))(**(void **)(v120 + 24) + 192))();
      if (!v121) {
        goto LABEL_58;
      }
      uint64_t v122 = v121;
      uint64_t v216 = MEMORY[0x1E4FBC848] + 8;
      do
      {
LABEL_44:
        uint64_t Strong = swift_weakLoadStrong();
        if (v234)
        {
          swift_release();
          goto LABEL_46;
        }
        outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v122 + 16) + 136, (uint64_t)&v231, &demangling cache variable for type metadata for InputAccepting?);
        if (!v232)
        {
          swift_release();
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v231, &demangling cache variable for type metadata for InputAccepting?);
LABEL_46:
          uint64_t v122 = Strong;
          if (!Strong) {
            break;
          }
          goto LABEL_44;
        }
        uint64_t v125 = outlined init with take of ReferenceResolutionClientProtocol(&v231, (uint64_t)&v233);
        v220 = &v201;
        uint64_t v126 = *(void *)(v122 + 16);
        MEMORY[0x1F4188790](v125);
        *(&v201 - 6) = (char *)&v233;
        *(&v201 - 5) = (char *)v52;
        *(&v201 - 4) = (char *)&v234;
        *(&v201 - 3) = (char *)v122;
        *(&v201 - 2) = (char *)v120;
        uint64_t v127 = one-time initialization token for $conversationContext;
        swift_retain();
        if (v127 != -1) {
          swift_once();
        }
        *(void *)&long long v231 = v126;
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EncoreConversationContext?);
        swift_task_localValuePush();
        type metadata accessor for SiriEnvironment();
        outlined init with copy of ReferenceResolutionClientProtocol(v126 + 56, (uint64_t)&v230);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriEnvironmentLocating);
        if (swift_dynamicCast())
        {
          outlined init with take of ReferenceResolutionClientProtocol(v228, (uint64_t)&v231);
          __swift_project_boxed_opaque_existential_1(&v231, v232);
          uint64_t v120 = v226;
          dispatch thunk of SiriEnvironmentLocating.siriEnvironment.getter();
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v231);
        }
        else
        {
          uint64_t v229 = 0;
          memset(v228, 0, sizeof(v228));
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v228, &demangling cache variable for type metadata for SiriEnvironmentLocating?);
          if (*(void *)(v126 + 232)) {
            swift_retain();
          }
          else {
            static SiriEnvironment.default.getter();
          }
        }
        uint64_t v123 = v227;
        static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
        v227 = v123;
        swift_release();
        swift_task_localValuePop();
        swift_release();
        swift_release();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v233);
        uint64_t v122 = Strong;
        uint64_t v52 = (uint64_t)v225;
      }
      while (Strong);
      uint64_t v128 = v234;
      if (v234)
      {
        uint64_t v129 = (uint64_t)v208;
        swift_storeEnumTagMultiPayload();
        uint64_t v130 = *(void *)(v128 + 16);
        swift_retain();
        swift_release();
        goto LABEL_59;
      }
LABEL_58:
      uint64_t v129 = (uint64_t)v208;
      unsigned char *v208 = 0;
      swift_storeEnumTagMultiPayload();
      uint64_t v130 = 0;
LABEL_59:
      uint64_t v131 = v217;
      uint64_t v132 = v209;
      uint64_t v133 = v211;
      *(void *)(v129 + *(int *)(v218 + 20)) = v130;
      uint64_t v134 = &v37[*(int *)(v133 + 48)];
      if (one-time initialization token for TaskPriority != -1) {
        swift_once();
      }
      uint64_t v135 = type metadata accessor for TaskPriority();
      uint64_t v136 = __swift_project_value_buffer(v135, (uint64_t)static EncoreEngine.TaskPriority);
      uint64_t v137 = *(void *)(v135 - 8);
      uint64_t v138 = v224;
      (*(void (**)(uint8_t *, uint64_t, uint64_t))(v137 + 16))(v224, v136, v135);
      (*(void (**)(uint8_t *, void, uint64_t, uint64_t))(v137 + 56))(v138, 0, 1, v135);
      uint64_t v139 = v214;
      _s14SiriKitRuntime17EncoreEngineEventOWOcTm_0(v52, v214, type metadata accessor for SiriRequest);
      _s14SiriKitRuntime17EncoreEngineEventOWOcTm_0(v129, (uint64_t)v131, type metadata accessor for RequestContinuation);
      unint64_t v140 = (*(unsigned __int8 *)(v213 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v213 + 80);
      unint64_t v141 = (v132 + v140 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v142 = (*(unsigned __int8 *)(v219 + 80) + v141 + 16) & ~(unint64_t)*(unsigned __int8 *)(v219 + 80);
      uint64_t v143 = swift_allocObject();
      *(void *)(v143 + 16) = 0;
      *(void *)(v143 + 24) = 0;
      outlined init with take of UserInputResult(v139, v143 + v140, type metadata accessor for SiriRequest);
      char v144 = (char **)(v143 + v141);
      int64_t v145 = v215;
      *char v144 = v212;
      v144[1] = v145;
      outlined init with take of UserInputResult((uint64_t)v131, v143 + v142, type metadata accessor for RequestContinuation);
      swift_retain();
      _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v138, (uint64_t)&async function pointer to partial apply for closure #4 in EncoreEngine.handleExternal(event:), v143);
      swift_release();
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v138, &demangling cache variable for type metadata for TaskPriority?);
      outlined destroy of EncoreEngine.EngineEvent(v129, type metadata accessor for RequestContinuation);
      outlined destroy of EncoreEngine.EngineEvent(v52, type metadata accessor for SiriRequest);
      (*(void (**)(char *, uint64_t))(v223 + 8))(v134, v222);
      return;
    case 5u:
      uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ()));
      uint64_t v98 = &v37[*(int *)(v97 + 48)];
      uint64_t v99 = &v37[*(int *)(v97 + 64)];
      uint64_t v101 = *(void *)v99;
      uint64_t v100 = *((void *)v99 + 1);
      uint64_t v102 = v216;
      outlined init with take of UserInputResult((uint64_t)v37, v216, type metadata accessor for RequestContinuation);
      uint64_t v103 = v223;
      uint64_t v104 = v212;
      uint64_t v105 = v222;
      (*(void (**)(char *, char *, uint64_t))(v223 + 32))(v212, v98, v222);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v106 = type metadata accessor for Logger();
      __swift_project_value_buffer(v106, (uint64_t)static Logger.executor);
      uint64_t v107 = Logger.logObject.getter();
      os_log_type_t v108 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v107, v108))
      {
        uint64_t v109 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v109 = 0;
        _os_log_impl(&dword_1B9C64000, v107, v108, "[EncoreEngine] Handling commit event.", v109, 2u);
        MEMORY[0x1BA9E48C0](v109, -1, -1);
      }

      dispatch thunk of SnippetManager.canSendAddViews.setter();
      EncoreEngine.ensureReady()();
      _s14SiriKitRuntime17EncoreEngineEventOWOcTm_0(v102, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for UserInputResult);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v110 = *(void *)(v102 + *(int *)(v218 + 20));
        if (v110)
        {
          uint64_t v111 = *(uint64_t (**)(uint64_t))(**(void **)(v226 + 24) + 192);
          swift_retain();
          uint64_t v112 = swift_retain();
          uint64_t v113 = v111(v112);
          uint64_t v102 = v216;
          uint64_t v103 = v223;
          uint64_t v114 = v113;
          swift_release();
          if (v114)
          {
            while (1)
            {
              uint64_t v115 = swift_weakLoadStrong();
              if (*(void *)(v114 + 16) == v110) {
                break;
              }
              swift_release();
              uint64_t v114 = v115;
              if (!v115) {
                goto LABEL_33;
              }
            }
            swift_release();
            uint64_t v197 = v226;
            swift_retain();
            swift_retain();
            swift_retain();
            specialized EncoreEngine.action(mode:starting:context:completion:)(0, v114, v104, v197, v197, v101, v100);
            swift_release_n();
            swift_release();
            swift_release();
            swift_release_n();
LABEL_74:
            (*(void (**)(char *, uint64_t))(v103 + 8))(v104, v105);
            outlined destroy of EncoreEngine.EngineEvent(v102, type metadata accessor for RequestContinuation);
            return;
          }
LABEL_33:
          swift_release();
        }
      }
      else
      {
        outlined destroy of EncoreEngine.EngineEvent((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for UserInputResult);
      }
      dispatch thunk of SnippetManager.canSendAddViews.setter();
      if (one-time initialization token for TaskPriority != -1) {
        swift_once();
      }
      uint64_t v156 = type metadata accessor for TaskPriority();
      uint64_t v157 = __swift_project_value_buffer(v156, (uint64_t)static EncoreEngine.TaskPriority);
      uint64_t v158 = *(void *)(v156 - 8);
      uint64_t v159 = v224;
      (*(void (**)(uint8_t *, uint64_t, uint64_t))(v158 + 16))(v224, v157, v156);
      (*(void (**)(uint8_t *, void, uint64_t, uint64_t))(v158 + 56))(v159, 0, 1, v156);
      uint64_t v160 = (void *)swift_allocObject();
      v160[2] = 0;
      v160[3] = 0;
      v160[4] = v101;
      v160[5] = v100;
      swift_retain();
      _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v159, (uint64_t)&async function pointer to partial apply for closure #6 in EncoreEngine.handleExternal(event:), (uint64_t)v160);
      swift_release();
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v159, &demangling cache variable for type metadata for TaskPriority?);
      goto LABEL_74;
    case 6u:
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v116 = type metadata accessor for Logger();
      __swift_project_value_buffer(v116, (uint64_t)static Logger.executor);
      uint64_t v117 = Logger.logObject.getter();
      os_log_type_t v118 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v117, v118))
      {
        uint64_t v119 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v119 = 0;
        _os_log_impl(&dword_1B9C64000, v117, v118, "[EncoreEngine] Handling stop event.", v119, 2u);
        MEMORY[0x1BA9E48C0](v119, -1, -1);
      }

      EncoreEngine.ensureReady()();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation);
      AsyncStream.Continuation.finish()();
      return;
    default:
      uint64_t v38 = *(void **)v37;
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v39 = type metadata accessor for Logger();
      uint64_t v40 = __swift_project_value_buffer(v39, (uint64_t)static Logger.executor);
      uint64_t v41 = v38;
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        uint64_t v223 = swift_slowAlloc();
        v225 = (void (*)(void))v40;
        v224 = v44;
        *(_DWORD *)uint64_t v44 = 138412290;
        v233 = v41;
        uint64_t v45 = v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v46 = v223;
        *(void *)uint64_t v223 = v41;

        uint64_t v47 = v224;
        _os_log_impl(&dword_1B9C64000, v42, v43, "[EncoreEngine] Handling snippet event request: %@.", v224, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v46, -1, -1);
        MEMORY[0x1BA9E48C0](v47, -1, -1);
      }
      else
      {

        uint64_t v42 = v41;
      }
      v154 = v215;

      lazy protocol witness table accessor for type SystemEvents? and conformance <A> A?();
      uint64_t v155 = v227;
      dispatch thunk of EncoreEvent.getValue<A>()();
      if (v155)
      {

        (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v154 + 7))(v30, 1, 1, v210);
      }
      else
      {
        uint64_t v161 = v210;
        if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v154 + 6))(v30, 1, v210) != 1)
        {
          v189 = v201;
          (*((void (**)(char *, char *, uint64_t))v154 + 4))(v201, v30, v161);
          (*((void (**)(char *, char *, uint64_t))v154 + 2))(v33, v189, v161);
          int v190 = (*((uint64_t (**)(char *, uint64_t))v154 + 11))(v33, v161);
          if (v190 == *MEMORY[0x1E4F610C8])
          {
            v191 = v41;
            v192 = Logger.logObject.getter();
            os_log_type_t v193 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v192, v193))
            {
              v194 = (uint8_t *)swift_slowAlloc();
              v195 = (void *)swift_slowAlloc();
              *(_DWORD *)v194 = 138412290;
              v233 = v191;
              v196 = v191;
              v154 = v215;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              void *v195 = v191;

              _os_log_impl(&dword_1B9C64000, v192, v193, "[EncoreEngine] Snippet Disappeared: Remove it?: %@.", v194, 0xCu);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
              swift_arrayDestroy();
              MEMORY[0x1BA9E48C0](v195, -1, -1);
              MEMORY[0x1BA9E48C0](v194, -1, -1);
            }
            else
            {

              v192 = v191;
            }

            dispatch thunk of SnippetManager.snippetDisappeared()();
          }
          else
          {
            if (v190 != *MEMORY[0x1E4F610D0])
            {
              specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000027, 0x80000001BA068210, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Encore/EncoreEngine.swift", 94, 2, 239);
              __break(1u);
              JUMPOUT(0x1B9ECFC60);
            }
            v198 = Logger.logObject.getter();
            os_log_type_t v199 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v198, v199))
            {
              v200 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v200 = 0;
              _os_log_impl(&dword_1B9C64000, v198, v199, "Ignoring .returnedToVoiceMode event since it was sent over XPC. This is not supported.", v200, 2u);
              MEMORY[0x1BA9E48C0](v200, -1, -1);
            }
          }
          (*((void (**)(char *, uint64_t))v154 + 1))(v201, v161);
          return;
        }
      }
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v30, &demangling cache variable for type metadata for SystemEvents?);
      if (EncoreEngine.discover(event:)(v41))
      {
        uint64_t v164 = v162;
        uint64_t v165 = v163;
        swift_release();
        uint64_t v166 = v41;
        uint64_t v167 = Logger.logObject.getter();
        os_log_type_t v168 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v167, v168))
        {
          uint64_t v169 = swift_slowAlloc();
          v225 = v164;
          v170 = (uint8_t *)v169;
          uint64_t v171 = (void *)swift_slowAlloc();
          v227 = v165;
          *(_DWORD *)v170 = 138412290;
          v233 = v166;
          uint64_t v172 = v166;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v171 = v166;

          _os_log_impl(&dword_1B9C64000, v167, v168, "[EncoreEngine] Invoking event handler for event: %@", v170, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v171, -1, -1);
          v173 = v170;
          uint64_t v164 = v225;
          MEMORY[0x1BA9E48C0](v173, -1, -1);
        }
        else
        {

          uint64_t v167 = v166;
        }

        dispatch thunk of SnippetManager.canSendXPCUpdates.setter();
        v164(v166);
        dispatch thunk of SnippetManager.canSendXPCUpdates.setter();
        v180 = Logger.logObject.getter();
        os_log_type_t v181 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v180, v181))
        {
          long long v182 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)long long v182 = 0;
          _os_log_impl(&dword_1B9C64000, v180, v181, "Finished handling encore XPC event.", v182, 2u);
          MEMORY[0x1BA9E48C0](v182, -1, -1);
          swift_release();
        }
        else
        {

          swift_release();
        }
      }
      else
      {
        uint64_t v174 = v41;
        v175 = Logger.logObject.getter();
        os_log_type_t v176 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v175, v176))
        {
          v177 = (uint8_t *)swift_slowAlloc();
          uint64_t v178 = (void *)swift_slowAlloc();
          *(_DWORD *)v177 = 138412290;
          v233 = v174;
          uint64_t v179 = v174;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v178 = v174;

          _os_log_impl(&dword_1B9C64000, v175, v176, "[EncoreEngine] None of flow registers to handle snippet event: %@.", v177, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v178, -1, -1);
          MEMORY[0x1BA9E48C0](v177, -1, -1);
        }
        else
        {
        }
      }
      return;
  }
}

void EncoreEngine.handleInternal(event:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v52 = type metadata accessor for EncoreEngine.ActionOutcome(0);
  MEMORY[0x1F4188790](v52);
  uint64_t v53 = (uint64_t *)((char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = one-time initialization token for executor;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
  swift_retain_n();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    v56[0] = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol(a1 + 56, (uint64_t)v54);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
    uint64_t v11 = String.init<A>(describing:)();
    v54[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B9C64000, v7, v8, "[EncoreEngine] Handling executable flow %s completion event.", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v10, -1, -1);
    MEMORY[0x1BA9E48C0](v9, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  swift_beginAccess();
  swift_retain();
  unint64_t v13 = swift_bridgeObjectRetain();
  unint64_t v14 = specialized Collection.firstIndex(where:)(v13, a1);
  char v16 = v15;
  swift_release();
  swift_bridgeObjectRelease();
  if (v16)
  {
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v30, v31))
    {
      swift_release();

      return;
    }
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl(&dword_1B9C64000, v30, v31, "[EncoreEngine] Expired execution task.", v32, 2u);
    MEMORY[0x1BA9E48C0](v32, -1, -1);

    goto LABEL_24;
  }
  swift_beginAccess();
  uint64_t v17 = specialized Array.remove(at:)(v14);
  swift_endAccess();
  uint64_t v18 = *(void *)(v17 + 16);
  uint64_t v51 = v2;
  uint64_t v19 = *(uint64_t (**)(uint64_t))(**(void **)(v2 + 24) + 192);
  swift_retain();
  uint64_t v20 = swift_retain();
  uint64_t Strong = v19(v20);
  while (1)
  {
    uint64_t v22 = Strong;
    if (!Strong) {
      break;
    }
    uint64_t Strong = swift_weakLoadStrong();
    swift_release();
    if (v18 == v22)
    {
      swift_release();
      break;
    }
  }
  swift_release();
  swift_release();
  swift_retain_n();
  swift_retain_n();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    HIDWORD(v50) = v22 == 0;
    uint64_t v25 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    v55[0] = v26;
    *(_DWORD *)uint64_t v25 = 136315650;
    outlined init with copy of ReferenceResolutionClientProtocol(a1 + 56, (uint64_t)v54);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
    uint64_t v27 = String.init<A>(describing:)();
    v54[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v25 + 12) = 1024;
    char isCancelled = swift_task_isCancelled();
    swift_release();
    LODWORD(v54[0]) = isCancelled & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v25 + 18) = 1024;
    LODWORD(v54[0]) = HIDWORD(v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v23, v24, "[EncoreEngine] Found executable task %s cancelled: %{BOOL}d detached: %{BOOL}d.", (uint8_t *)v25, 0x18u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v26, -1, -1);
    MEMORY[0x1BA9E48C0](v25, -1, -1);

    if (!v22) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  swift_release_n();
  swift_release_n();

  if (v22)
  {
LABEL_17:
    swift_retain();
    char v33 = swift_task_isCancelled();
    swift_release();
    if (v33) {
      goto LABEL_18;
    }
    uint64_t v45 = *(void *)(v17 + 16);
    uint64_t v46 = v17 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_context;
    uint64_t v47 = (uint64_t *)(v17 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_actionCompletion);
    swift_beginAccess();
    uint64_t v49 = *v47;
    uint64_t v48 = v47[1];
    swift_retain();
    swift_retain();
    EncoreEngine.action(mode:starting:context:completion:)(1, v45, v46, v49, v48);
    swift_release();
    swift_release();
    swift_release();
LABEL_24:
    swift_release();
    return;
  }
LABEL_18:
  swift_retain_n();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    v55[0] = v37;
    *(_DWORD *)uint64_t v36 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol(a1 + 56, (uint64_t)v54);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
    uint64_t v38 = String.init<A>(describing:)();
    v54[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B9C64000, v34, v35, "[EncoreEngine] Expired execution agent %s.", v36, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v37, -1, -1);
    MEMORY[0x1BA9E48C0](v36, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v40 = (void (**)(uint64_t))(v17 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_actionCompletion);
  swift_beginAccess();
  uint64_t v41 = *v40;
  lazy protocol witness table accessor for type CancelledError and conformance CancelledError();
  uint64_t v42 = swift_allocError();
  *os_log_type_t v43 = 0xD000000000000025;
  v43[1] = 0x80000001BA068610;
  uint64_t v44 = (uint64_t)v53;
  uint64_t *v53 = v42;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  v41(v44);
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of EncoreEngine.EngineEvent(v44, type metadata accessor for EncoreEngine.ActionOutcome);
}

uint64_t EncoreEngine.discover(event:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceName?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  EncoreEvent.serviceName.getter();
  uint64_t v6 = type metadata accessor for ServiceName();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
  {
    MEMORY[0x1BA9E0360]();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
    uint64_t v15 = swift_bridgeObjectRelease();
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(**(void **)(v1 + 24) + 192))(v15);
    if (!v16) {
      return v16;
    }
    uint64_t v18 = (void *)&unk_1EB9D8000;
    *(void *)&long long v17 = 136315138;
    long long v51 = v17;
    v50[1] = MEMORY[0x1E4FBC840] + 8;
    *(void *)&long long v17 = 136315394;
    long long v52 = v17;
    while (1)
    {
      while (1)
      {
        uint64_t Strong = swift_weakLoadStrong();
        uint64_t v31 = *(void *)(v16 + 16);
        uint64_t v32 = *(void *)(v31 + 216);
        if (v32) {
          break;
        }
        if (v18[24] != -1) {
          swift_once();
        }
        uint64_t v40 = type metadata accessor for Logger();
        __swift_project_value_buffer(v40, (uint64_t)static Logger.executor);
        swift_retain_n();
        uint64_t v38 = Logger.logObject.getter();
        os_log_type_t v41 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v38, v41))
        {

          goto LABEL_8;
        }
        uint64_t v42 = swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        uint64_t v56 = v43;
        *(_DWORD *)uint64_t v42 = v51;
        outlined init with copy of ReferenceResolutionClientProtocol(*(void *)(v16 + 16) + 56, (uint64_t)v55);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
        uint64_t v44 = String.init<A>(describing:)();
        *(void *)(v42 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v56);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v38, v41, "[EncoreEngine] Node (%s) does not implement snippetEventHandling", (uint8_t *)v42, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v43, -1, -1);
        MEMORY[0x1BA9E48C0](v42, -1, -1);
        swift_release();
LABEL_11:

        uint64_t v16 = Strong;
        if (!Strong) {
          return v16;
        }
      }
      uint64_t v33 = *(void *)(v31 + 224);
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v34 = SnippetEventHandling.handler(for:)();
      if (v34)
      {
        uint64_t v47 = v34;
        uint64_t v48 = v35;
        swift_release();
        uint64_t v49 = (void *)swift_allocObject();
        v49[2] = v16;
        v49[3] = v32;
        v49[4] = v33;
        v49[5] = v47;
        v49[6] = v48;
        swift_retain();
        return v16;
      }
      if (v18[24] != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      __swift_project_value_buffer(v36, (uint64_t)static Logger.executor);
      swift_retain_n();
      id v37 = a1;
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v19 = swift_slowAlloc();
        uint64_t v53 = swift_slowAlloc();
        uint64_t v56 = v53;
        *(_DWORD *)uint64_t v19 = v52;
        outlined init with copy of ReferenceResolutionClientProtocol(*(void *)(v16 + 16) + 56, (uint64_t)v55);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
        uint64_t v20 = String.init<A>(describing:)();
        uint64_t v54 = Strong;
        *(void *)(v19 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v56);
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v19 + 12) = 2080;
        id v22 = v37;
        id v23 = objc_msgSend(v22, sel_description);
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v25 = a1;
        unint64_t v27 = v26;

        *(void *)(v19 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v27, &v56);
        uint64_t Strong = v54;
        a1 = v25;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v38, v39, "[EncoreEngine] Node (%s) implements snippetEventHandling, but doesn't handle events of type '%s'", (uint8_t *)v19, 0x16u);
        uint64_t v29 = v53;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v29, -1, -1);
        uint64_t v30 = v19;
        uint64_t v18 = &unk_1EB9D8000;
        MEMORY[0x1BA9E48C0](v30, -1, -1);
        swift_release();
        swift_unknownObjectRelease();
        goto LABEL_11;
      }

      swift_unknownObjectRelease();
LABEL_8:
      swift_release_n();
      uint64_t v16 = Strong;
      if (!Strong) {
        return v16;
      }
    }
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, &demangling cache variable for type metadata for ServiceName?);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
  id v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc();
    unint64_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v12 = 138412290;
    v55[0] = v9;
    id v14 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v13 = v9;

    _os_log_impl(&dword_1B9C64000, v10, v11, "[EncoreEngine] Snippet event does not have an event name. %@", v12, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v13, -1, -1);
    MEMORY[0x1BA9E48C0](v12, -1, -1);
  }
  else
  {
  }
  return 0;
}

void EncoreEngine.ensureReady()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "[EncoreEngine] Ensuring engine is ready.", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  swift_beginAccess();
  swift_retain();
  int64_t v6 = specialized MutableCollection._halfStablePartition(isSuffixElement:)((uint64_t *)(v1 + 48), (uint8_t *)v1);
  uint64_t v7 = v6;
  unint64_t v8 = *(void *)(v1 + 48);
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9 >= v7) {
      goto LABEL_7;
    }
LABEL_11:
    __break(1u);
    return;
  }
  uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 < v6) {
    goto LABEL_11;
  }
LABEL_7:
  specialized Array.replaceSubrange<A>(_:with:)(v7, v9);
  swift_endAccess();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v12 = 0;
    _os_log_impl(&dword_1B9C64000, v10, v11, "[EncoreEngine] Engine is ready.", v12, 2u);
    MEMORY[0x1BA9E48C0](v12, -1, -1);
  }
}

uint64_t EncoreEngine.continuation(for:)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v137 = a2;
  uint64_t v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x1F4188790](v134);
  uint64_t v136 = (uint8_t *)v115 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v131 = (uint64_t)v115 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v130 = (char *)v115 - v8;
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v132 = (uint64_t)v115 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v133 = (char *)v115 - v11;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v128 = v12;
  uint64_t v129 = v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v115 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)v115 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SystemEvents?);
  MEMORY[0x1F4188790](v19);
  unint64_t v21 = (char *)v115 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for SystemEvents();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  unint64_t v26 = (char *)v115 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  unint64_t v28 = (char *)v115 - v27;
  lazy protocol witness table accessor for type SystemEvents? and conformance <A> A?();
  uint64_t v29 = a1;
  dispatch thunk of EncoreEvent.getValue<A>()();
  uint64_t v30 = (uint64_t)v133;
  uint64_t v122 = v16;
  uint64_t v126 = v28;
  uint64_t v127 = v18;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, &demangling cache variable for type metadata for SystemEvents?);
    uint64_t v31 = EncoreEngine.discover(event:)(v29);
    if (v31)
    {
      uint64_t v33 = v31;
      uint64_t v34 = v32;
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v35 = type metadata accessor for Logger();
      __swift_project_value_buffer(v35, (uint64_t)static Logger.executor);
      uint64_t v36 = v29;
      id v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = swift_slowAlloc();
        uint64_t v136 = v34;
        uint64_t v40 = (uint8_t *)v39;
        uint64_t Strong = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v40 = 138412290;
        uint64_t v139 = v36;
        os_log_type_t v41 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v42 = Strong;
        *uint64_t Strong = v36;

        _os_log_impl(&dword_1B9C64000, v37, v38, "[EncoreEngine] Invoking event handler for event: %@", v40, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v42, -1, -1);
        uint64_t v43 = v40;
        uint64_t v34 = v136;
        MEMORY[0x1BA9E48C0](v43, -1, -1);
      }
      else
      {

        id v37 = v36;
      }
      long long v51 = v137;

      ((void (*))v34)(v36);
      swift_release();
      type metadata accessor for UserInputResult();
      swift_storeEnumTagMultiPayload();
      uint64_t v52 = *(void *)(v33 + 16);
      swift_retain();
      swift_release();
      uint64_t result = type metadata accessor for RequestContinuation(0);
      *(void *)&v51[*(int *)(result + 20)] = v52;
    }
    else
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v44 = type metadata accessor for Logger();
      __swift_project_value_buffer(v44, (uint64_t)static Logger.executor);
      unint64_t v45 = v29;
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = (uint8_t *)swift_slowAlloc();
        uint64_t v49 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v48 = 138412290;
        uint64_t v139 = v45;
        uint64_t v50 = v45;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v49 = v45;

        _os_log_impl(&dword_1B9C64000, v46, v47, "[EncoreEngine] None of flow registers to handle snippet event: %@.", v48, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v49, -1, -1);
        MEMORY[0x1BA9E48C0](v48, -1, -1);
      }
      else
      {

        uint64_t v46 = v45;
      }
      uint64_t v62 = v137;

      *uint64_t v62 = 0;
      type metadata accessor for UserInputResult();
      swift_storeEnumTagMultiPayload();
      uint64_t result = type metadata accessor for RequestContinuation(0);
      *(void *)&v62[*(int *)(result + 20)] = 0;
    }
    return result;
  }
  uint64_t v54 = v126;
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v126, v21, v22);
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v26, v54, v22);
  int v55 = (*(uint64_t (**)(char *, uint64_t))(v23 + 88))(v26, v22);
  if (v55 == *MEMORY[0x1E4F610C8])
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v56 = type metadata accessor for Logger();
    __swift_project_value_buffer(v56, (uint64_t)static Logger.executor);
    BOOL v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    BOOL v59 = os_log_type_enabled(v57, v58);
    uint64_t v60 = v137;
    if (v59)
    {
      unint64_t v61 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v61 = 0;
      _os_log_impl(&dword_1B9C64000, v57, v58, "Rejecting .snippetDisappeared event since it was sent over DI. This is not supported and will likely cause a user facing error.", v61, 2u);
      uint64_t v54 = v126;
      MEMORY[0x1BA9E48C0](v61, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v23 + 8))(v54, v22);
LABEL_28:
    *uint64_t v60 = 0;
    type metadata accessor for UserInputResult();
    swift_storeEnumTagMultiPayload();
    uint64_t result = type metadata accessor for RequestContinuation(0);
    *(void *)&v60[*(int *)(result + 20)] = 0;
    return result;
  }
  if (v55 != *MEMORY[0x1E4F610D0])
  {
    uint64_t result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000027, 0x80000001BA068210, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Encore/EncoreEngine.swift", 94, 2, 363);
    __break(1u);
    return result;
  }
  uint64_t v63 = Strong;
  dispatch thunk of SnippetManager.flowIdentifierOfCurrentSnippet.getter();
  uint64_t v65 = v128;
  uint64_t v64 = v129;
  uint64_t v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v129 + 48);
  uint64_t v120 = v129 + 48;
  unsigned int v67 = v66(v30, 1, v128);
  uint64_t v68 = (uint64_t)v130;
  uint64_t v69 = v132;
  if (v67 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v30, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v70 = type metadata accessor for Logger();
    __swift_project_value_buffer(v70, (uint64_t)static Logger.executor);
    unint64_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.error.getter();
    BOOL v73 = os_log_type_enabled(v71, v72);
    uint64_t v60 = v137;
    uint64_t v74 = v126;
    if (v73)
    {
      uint64_t v75 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v75 = 0;
      _os_log_impl(&dword_1B9C64000, v71, v72, "Got a .returnedToVoiceMode event but SnippetManager isn't aware of any snippets on screen. Rejecting input which will likely cause a user facing error.", v75, 2u);
      os_log_type_t v76 = v75;
      uint64_t v74 = v126;
      MEMORY[0x1BA9E48C0](v76, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v23 + 8))(v74, v22);
    goto LABEL_28;
  }
  uint64_t v125 = v66;
  uint64_t v117 = v22;
  uint64_t v116 = v23;
  uint64_t v77 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 32);
  uint64_t v78 = v127;
  uint64_t v119 = v64 + 32;
  os_log_type_t v118 = v77;
  v77(v127, v30, v65);
  uint64_t v79 = *(uint64_t (**)(void))(*(void *)v63[3] + 192);
  v115[1] = swift_retain();
  uint64_t v80 = v79();
  uint64_t v81 = v65;
  if (!v80)
  {
LABEL_42:
    uint64_t v96 = v81;
    swift_release();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v97 = type metadata accessor for Logger();
    __swift_project_value_buffer(v97, (uint64_t)static Logger.executor);
    uint64_t v98 = Logger.logObject.getter();
    os_log_type_t v99 = static os_log_type_t.default.getter();
    BOOL v100 = os_log_type_enabled(v98, v99);
    uint64_t v101 = v137;
    uint64_t v102 = v126;
    if (v100)
    {
      uint64_t v103 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v103 = 0;
      _os_log_impl(&dword_1B9C64000, v98, v99, "Failed to find flow agent to handle .returnToVoiceMode event. Rejecting input which will likely cause a user facing error.", v103, 2u);
      MEMORY[0x1BA9E48C0](v103, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v116 + 8))(v102, v117);
    *uint64_t v101 = 0;
    type metadata accessor for UserInputResult();
    swift_storeEnumTagMultiPayload();
    *(void *)&v101[*(int *)(type metadata accessor for RequestContinuation(0) + 20)] = 0;
    return (*(uint64_t (**)(char *, uint64_t))(v129 + 8))(v127, v96);
  }
  uint64_t v82 = v78;
  uint64_t v83 = v80;
  uint64_t v121 = (void (**)(uint64_t, uint64_t))(v129 + 8);
  uint64_t v133 = (char *)(v129 + 56);
  unint64_t v123 = (v129 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  os_log_type_t v124 = (void (**)(uint64_t, char *, uint64_t))(v129 + 16);
  while (1)
  {
    uint64_t Strong = (void *)swift_weakLoadStrong();
    uint64_t v85 = *(void *)(*(void *)(v83 + 16) + 216);
    if (v85)
    {
      swift_getObjectType();
      uint64_t v139 = v85;
      dispatch thunk of Identifiable.id.getter();
      uint64_t v82 = v127;
      uint64_t v86 = *(void (**)(uint64_t, void, uint64_t, uint64_t))v133;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))v133)(v69, 0, 1, v81);
    }
    else
    {
      uint64_t v86 = *(void (**)(uint64_t, void, uint64_t, uint64_t))v133;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v133)(v69, 1, 1, v81);
    }
    uint64_t v87 = v82;
    (*v124)(v68, v82, v81);
    v86(v68, 0, 1, v81);
    uint64_t v88 = v81;
    uint64_t v89 = (uint64_t)v136;
    uint64_t v90 = (uint64_t)&v136[*(int *)(v134 + 48)];
    outlined init with copy of ReferenceResolutionClientProtocol?(v69, (uint64_t)v136, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined init with copy of ReferenceResolutionClientProtocol?(v68, v90, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v91 = v125;
    if (v125(v89, 1, v88) == 1) {
      break;
    }
    uint64_t v92 = v131;
    outlined init with copy of ReferenceResolutionClientProtocol?(v89, v131, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (v91(v90, 1, v88) == 1)
    {
      (*v121)(v92, v88);
      uint64_t v69 = v132;
      uint64_t v81 = v88;
      goto LABEL_32;
    }
    uint64_t v93 = v122;
    v118(v122, v90, v88);
    lazy protocol witness table accessor for type FlowActor and conformance FlowActor((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
    char v94 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v95 = *v121;
    (*v121)(v92, v88);
    v95((uint64_t)v93, v88);
    uint64_t v68 = (uint64_t)v130;
    uint64_t v82 = v127;
    outlined destroy of ReferenceResolutionClientProtocol?(v89, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of ReferenceResolutionClientProtocol?(v68, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v69 = v132;
    outlined destroy of ReferenceResolutionClientProtocol?(v132, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v81 = v88;
    uint64_t v84 = Strong;
    if (v94) {
      goto LABEL_48;
    }
LABEL_33:
    swift_release();
    uint64_t v83 = (uint64_t)v84;
    if (!v84) {
      goto LABEL_42;
    }
  }
  uint64_t v81 = v88;
  if (v91(v90, 1, v88) != 1)
  {
LABEL_32:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v136, &demangling cache variable for type metadata for (UUID?, UUID?));
    outlined destroy of ReferenceResolutionClientProtocol?(v68, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of ReferenceResolutionClientProtocol?(v69, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v82 = v87;
    uint64_t v84 = Strong;
    goto LABEL_33;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v136, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?(v68, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?(v69, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_48:
  swift_release();
  swift_release();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v104 = type metadata accessor for Logger();
  __swift_project_value_buffer(v104, (uint64_t)static Logger.executor);
  swift_retain_n();
  uint64_t v105 = Logger.logObject.getter();
  os_log_type_t v106 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v105, v106))
  {
    uint64_t v107 = (uint8_t *)swift_slowAlloc();
    uint64_t v108 = swift_slowAlloc();
    *(_DWORD *)uint64_t v107 = 136315138;
    uint64_t v136 = v107 + 4;
    uint64_t v138 = *(void *)(v83 + 16);
    uint64_t v139 = v108;
    type metadata accessor for ActingFlowAgent();
    swift_retain();
    uint64_t v109 = v128;
    uint64_t v110 = String.init<A>(describing:)();
    uint64_t v138 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, v111, (uint64_t *)&v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v105, v106, "Found flow agent to handle .returnToVoiceMode event: %s", v107, 0xCu);
    swift_arrayDestroy();
    uint64_t v112 = v108;
    uint64_t v81 = v109;
    MEMORY[0x1BA9E48C0](v112, -1, -1);
    MEMORY[0x1BA9E48C0](v107, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  (*(void (**)(char *, uint64_t))(v116 + 8))(v126, v117);
  uint64_t v113 = v137;
  type metadata accessor for UserInputResult();
  swift_storeEnumTagMultiPayload();
  uint64_t v114 = *(void *)(v83 + 16);
  swift_retain();
  swift_release();
  *(void *)&v113[*(int *)(type metadata accessor for RequestContinuation(0) + 20)] = v114;
  return ((uint64_t (*)(char *, uint64_t))*v121)(v127, v81);
}

uint64_t closure #1 in EncoreEngine.handleExternal(event:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  void v7[4] = a5;
  return MEMORY[0x1F4188298](closure #1 in EncoreEngine.handleExternal(event:), 0, 0);
}

uint64_t closure #1 in EncoreEngine.handleExternal(event:)()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 24);
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void **)(v0 + 24);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    *(void *)(v0 + 16) = v7;
    id v9 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v7;

    _os_log_impl(&dword_1B9C64000, v4, v5, "[EncoreEngine] SnippetEvent: %@ completed.", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v12, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  else
  {
  }
  (*(void (**)(void))(v0 + 32))(*(void *)(v0 + 48));
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t EncoreEngine.push(parentNode:flow:insideEncoreEnvironment:)(void *a1, uint64_t a2, char a3)
{
  outlined init with copy of ReferenceResolutionClientProtocol?(a2, (uint64_t)&v10, &demangling cache variable for type metadata for ActingFlow?);
  if (v11)
  {
    outlined init with take of ReferenceResolutionClientProtocol(&v10, (uint64_t)v12);
    if (a1) {
      ActingFlowAgent.environment.getter();
    }
    else {
      swift_retain();
    }
    type metadata accessor for SiriEnvironment();
    swift_allocObject();
    swift_retain();
    uint64_t v6 = SiriEnvironment.init(parent:)();
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v12, (uint64_t)&v10);
    type metadata accessor for ActingFlowAgent();
    uint64_t v7 = (long long *)swift_allocObject();
    swift_retain();
    ActingFlowAgent.init(flow:environment:)(&v10, v6);
    if (a3)
    {
      uint64_t v5 = EncoreEngine.push(parentNode:flowAgent:)(a1, v7);
      swift_release();
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
    }
    else
    {
      uint64_t v8 = ActingFlowAgent.environment.getter();
      MEMORY[0x1F4188790](v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Node<ActingFlowAgent>?);
      static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
      return v10;
    }
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v10, &demangling cache variable for type metadata for ActingFlow?);
    return 0;
  }
  return v5;
}

uint64_t closure #2 in EncoreEngine.handleExternal(event:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[14] = a6;
  v7[15] = a7;
  v7[12] = a4;
  v7[13] = a5;
  return MEMORY[0x1F4188298](closure #2 in EncoreEngine.handleExternal(event:), 0, 0);
}

uint64_t closure #2 in EncoreEngine.handleExternal(event:)()
{
  uint64_t v12 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol(v1, v0 + 16);
  id v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v11 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol(v0 + 16, v0 + 56);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    _os_log_impl(&dword_1B9C64000, v3, v4, "[EncoreEngine] Push flow: %s completed.", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v6, -1, -1);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  }

  (*(void (**)(void))(v0 + 104))(*(void *)(v0 + 120));
  id v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t closure #3 in EncoreEngine.handleExternal(event:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return MEMORY[0x1F4188298](closure #3 in EncoreEngine.handleExternal(event:), 0, 0);
}

uint64_t closure #3 in EncoreEngine.handleExternal(event:)()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "[EncoreEngine] EnsureReady completed.", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }
  uint64_t v5 = *(void (**)(void))(v0 + 16);

  v5();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t closure #4 in EncoreEngine.handleExternal(event:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  void v7[4] = a5;
  v7[7] = type metadata accessor for SiriRequest(0);
  v7[8] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #4 in EncoreEngine.handleExternal(event:), 0, 0);
}

uint64_t closure #4 in EncoreEngine.handleExternal(event:)()
{
  uint64_t v15 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  _s14SiriKitRuntime17EncoreEngineEventOWOcTm_0(v1, v2, type metadata accessor for SiriRequest);
  os_log_type_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 64);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v14 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    type metadata accessor for Input();
    lazy protocol witness table accessor for type FlowActor and conformance FlowActor(&lazy protocol witness table cache variable for type Input and conformance Input, 255, MEMORY[0x1E4FA1EE0]);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of EncoreEngine.EngineEvent(v7, type metadata accessor for SiriRequest);
    _os_log_impl(&dword_1B9C64000, v4, v5, "[EncoreEngine] Accept request: %s completed.", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v9, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  else
  {
    outlined destroy of EncoreEngine.EngineEvent(*(void *)(v0 + 64), type metadata accessor for SiriRequest);
  }

  (*(void (**)(void))(v0 + 32))(*(void *)(v0 + 48));
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t closure #5 in EncoreEngine.handleExternal(event:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  v36[1] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for EncoreEngine.ActionOutcome(0);
  uint64_t v37 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v37 + 64);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  unint64_t v11 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v36 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<ConversationCommitResult, Error>);
  uint64_t v38 = *(void *)(v14 - 8);
  uint64_t v15 = *(void *)(v38 + 64);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)v36 - v18;
  _s14SiriKitRuntime17EncoreEngineEventOWOcTm_0(a1, (uint64_t)v13, type metadata accessor for EncoreEngine.ActionOutcome);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v20 = type metadata accessor for FlowUnhandledReason();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v19, v13, v20);
      type metadata accessor for ConversationCommitResult();
      goto LABEL_6;
    case 1u:
      uint64_t v22 = type metadata accessor for PluginAction();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v19, v13, v22);
      type metadata accessor for ConversationCommitResult();
      goto LABEL_6;
    case 2u:
      uint64_t v23 = *((void *)v13 + 2);
      uint64_t v24 = *((void *)v13 + 3);
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v13;
      *((void *)v19 + 2) = v23;
      *((void *)v19 + 3) = v24;
      type metadata accessor for ConversationCommitResult();
LABEL_6:
      swift_storeEnumTagMultiPayload();
      goto LABEL_8;
    case 3u:
      *(void *)uint64_t v19 = *(void *)v13;
LABEL_8:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      uint64_t v21 = MEMORY[0x1E4FBC860];
      *(void *)uint64_t v19 = MEMORY[0x1E4FBC860];
      *((void *)v19 + 1) = v21;
      type metadata accessor for ConversationCommitResult();
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      outlined destroy of EncoreEngine.EngineEvent((uint64_t)v13, type metadata accessor for EncoreEngine.ActionOutcome);
      break;
  }
  uint64_t v25 = v37;
  dispatch thunk of SnippetManager.canSendAddViews.setter();
  if (one-time initialization token for TaskPriority != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for TaskPriority();
  uint64_t v27 = __swift_project_value_buffer(v26, (uint64_t)static EncoreEngine.TaskPriority);
  uint64_t v28 = *(void *)(v26 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v7, v27, v26);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v7, 0, 1, v26);
  _s14SiriKitRuntime17EncoreEngineEventOWOcTm_0(a1, (uint64_t)v11, type metadata accessor for EncoreEngine.ActionOutcome);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v19, (uint64_t)v17, &demangling cache variable for type metadata for Result<ConversationCommitResult, Error>);
  unint64_t v29 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  unint64_t v30 = (v9 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = (*(unsigned __int8 *)(v38 + 80) + v30 + 16) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = 0;
  *(void *)(v32 + 24) = 0;
  outlined init with take of UserInputResult((uint64_t)v11, v32 + v29, type metadata accessor for EncoreEngine.ActionOutcome);
  uint64_t v33 = (void *)(v32 + v30);
  uint64_t v34 = v40;
  *uint64_t v33 = v39;
  v33[1] = v34;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v17, v32 + v31, &demangling cache variable for type metadata for Result<ConversationCommitResult, Error>);
  swift_retain();
  _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in closure #5 in EncoreEngine.handleExternal(event:), v32);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for TaskPriority?);
  return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v19, &demangling cache variable for type metadata for Result<ConversationCommitResult, Error>);
}

uint64_t closure #1 in closure #5 in EncoreEngine.handleExternal(event:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  void v7[4] = a5;
  type metadata accessor for EncoreEngine.ActionOutcome(0);
  v7[7] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #5 in EncoreEngine.handleExternal(event:), 0, 0);
}

uint64_t closure #1 in closure #5 in EncoreEngine.handleExternal(event:)()
{
  uint64_t v15 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  _s14SiriKitRuntime17EncoreEngineEventOWOcTm_0(v1, v2, type metadata accessor for EncoreEngine.ActionOutcome);
  os_log_type_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 56);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v14 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v10 = EncoreEngine.ActionOutcome.description.getter();
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of EncoreEngine.EngineEvent(v7, type metadata accessor for EncoreEngine.ActionOutcome);
    _os_log_impl(&dword_1B9C64000, v4, v5, "[EncoreEngine] Commit completed. outcome: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v9, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  else
  {
    outlined destroy of EncoreEngine.EngineEvent(*(void *)(v0 + 56), type metadata accessor for EncoreEngine.ActionOutcome);
  }

  (*(void (**)(void))(v0 + 32))(*(void *)(v0 + 48));
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

#error "1B9ED396C: switch analysis failed: failed to propagate the switch expression (funcsize=1412)"

uint64_t closure #6 in EncoreEngine.handleExternal(event:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  void v5[3] = a5;
  v5[4] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<ConversationCommitResult, Error>);
  v5[5] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #6 in EncoreEngine.handleExternal(event:), 0, 0);
}

uint64_t closure #6 in EncoreEngine.handleExternal(event:)()
{
  uint64_t v1 = (uint64_t *)v0[5];
  uint64_t v2 = (void (*)(uint64_t *))v0[2];
  lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
  uint64_t v3 = swift_allocError();
  void *v4 = 0xD00000000000001DLL;
  v4[1] = 0x80000001BA0685D0;
  *uint64_t v1 = v3;
  swift_storeEnumTagMultiPayload();
  v2(v1);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v1, &demangling cache variable for type metadata for Result<ConversationCommitResult, Error>);
  swift_task_dealloc();
  os_log_type_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

Swift::Void __swiftcall EventQueue.finish()()
{
}

uint64_t closure #1 in EncoreEngine.ensureReady()(uint64_t *a1, uint8_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v85 = a2;
  uint64_t v79 = type metadata accessor for EncoreEngine.ActionOutcome(0);
  MEMORY[0x1F4188790](v79);
  uint64_t v80 = (uint64_t *)((char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for InterruptionPolicy();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v83 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  unint64_t v11 = (char *)&v78 - v10;
  uint64_t v12 = *a1;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
  swift_retain_n();
  uint64_t v82 = v14;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v81 = v6;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v84 = v7;
    uint64_t v20 = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    *(void *)&long long v87 = v19;
    uint64_t v21 = *(void *)(*(void *)(v12 + 16) + 16) + 176;
    uint64_t v78 = v12;
    outlined init with copy of ReferenceResolutionClientProtocol?(v21, (uint64_t)v89, &demangling cache variable for type metadata for Executable?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Executable?);
    uint64_t v22 = String.init<A>(describing:)();
    v89[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, (uint64_t *)&v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v3 = v2;
    uint64_t v12 = v78;
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B9C64000, v15, v16, "[EncoreEngine] Checking executable %s.", v18, 0xCu);
    swift_arrayDestroy();
    uint64_t v24 = v20;
    uint64_t v7 = v84;
    MEMORY[0x1BA9E48C0](v24, -1, -1);
    uint64_t v25 = v18;
    uint64_t v6 = v81;
    MEMORY[0x1BA9E48C0](v25, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(*(void *)(v12 + 16) + 16) + 176, (uint64_t)&v87, &demangling cache variable for type metadata for Executable?);
  if (v88)
  {
    outlined init with take of ReferenceResolutionClientProtocol(&v87, (uint64_t)v89);
    uint64_t v26 = *(void *)(v12 + 16);
    uint64_t v27 = *((void *)v85 + 3);
    uint64_t v28 = *(uint64_t (**)(uint64_t))(*(void *)v27 + 192);
    uint64_t v29 = swift_retain();
    uint64_t v30 = v28(v29);
    do
    {
      if (!v30)
      {
        swift_release();
LABEL_16:
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v89);
        return 1;
      }
      uint64_t Strong = swift_weakLoadStrong();
      swift_release();
      BOOL v32 = v26 == v30;
      uint64_t v30 = Strong;
    }
    while (!v32);
    swift_release();
    swift_release();
    __swift_project_boxed_opaque_existential_1(v89, v89[3]);
    dispatch thunk of Executable.interruptionPolicy.getter();
    uint64_t v33 = v83;
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v83, v11, v6);
    int v34 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v33, v6);
    if (v34 == *MEMORY[0x1E4FA1CE0])
    {
      uint64_t v83 = v11;
      uint64_t v84 = v7;
      swift_retain_n();
      uint64_t v35 = v12;
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        uint64_t v39 = swift_slowAlloc();
        *(_DWORD *)uint64_t v38 = 136315138;
        uint64_t v85 = v3;
        v86[0] = v39;
        uint64_t v81 = v6;
        outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(*(void *)(v35 + 16) + 16) + 176, (uint64_t)&v87, &demangling cache variable for type metadata for Executable?);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Executable?);
        uint64_t v40 = String.init<A>(describing:)();
        *(void *)&long long v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v86);
        uint64_t v6 = v81;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1B9C64000, v36, v37, "[EncoreEngine] Interruption: %s interrupted with .clear policy.", v38, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v39, -1, -1);
        MEMORY[0x1BA9E48C0](v38, -1, -1);
      }
      else
      {
        swift_release_n();
      }

      MEMORY[0x1BA9E3300](*(void *)(v35 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_runningTask), MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
      (*(void (**)(void))(*(void *)v27 + 248))(*(void *)(v35 + 16));
      swift_release();
      uint64_t v54 = v35 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_actionCompletion;
      uint64_t v42 = 1;
      swift_beginAccess();
      int v55 = *(void (**)(uint64_t))v54;
      *(void *)&long long v87 = 0;
      *((void *)&v87 + 1) = 0xE000000000000000;
      swift_retain();
      _StringGuts.grow(_:)(33);
      outlined init with copy of ReferenceResolutionClientProtocol(*(void *)(*(void *)(v35 + 16) + 16) + 56, (uint64_t)&v87);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
      uint64_t v56 = String.init<A>(describing:)();
      uint64_t v58 = v57;
      swift_bridgeObjectRelease();
      *(void *)&long long v87 = v56;
      *((void *)&v87 + 1) = v58;
      v59._object = (void *)0x80000001BA0685F0;
      v59._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
      String.append(_:)(v59);
      long long v60 = v87;
      type metadata accessor for FlowAbort();
      lazy protocol witness table accessor for type FlowActor and conformance FlowActor(&lazy protocol witness table cache variable for type FlowAbort and conformance FlowAbort, 255, MEMORY[0x1E4FA18D8]);
      uint64_t v61 = swift_allocError();
      MEMORY[0x1BA9DC930](v60, *((void *)&v60 + 1));
      uint64_t v62 = (uint64_t)v80;
      *uint64_t v80 = v61;
      swift_storeEnumTagMultiPayload();
      v55(v62);
      swift_release();
      outlined destroy of EncoreEngine.EngineEvent(v62, type metadata accessor for EncoreEngine.ActionOutcome);
      (*(void (**)(char *, uint64_t))(v84 + 8))(v83, v6);
      *(void *)uint64_t v54 = destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
      *(void *)(v54 + 8) = 0;
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v89);
      return v42;
    }
    if (v34 == *MEMORY[0x1E4FA1CD8])
    {
      uint64_t v44 = v12;
      uint64_t v45 = v12 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_actionCompletion;
      swift_beginAccess();
      uint64_t v46 = *(void (**)(uint64_t))v45;
      uint64_t v47 = (uint64_t)v80;
      swift_storeEnumTagMultiPayload();
      swift_retain();
      v46(v47);
      swift_release();
      outlined destroy of EncoreEngine.EngineEvent(v47, type metadata accessor for EncoreEngine.ActionOutcome);
      *(void *)uint64_t v45 = destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
      *(void *)(v45 + 8) = 0;
      swift_release();
      swift_retain_n();
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v83 = v11;
        uint64_t v50 = (uint8_t *)swift_slowAlloc();
        uint64_t v51 = swift_slowAlloc();
        *(_DWORD *)uint64_t v50 = 136315138;
        uint64_t v90 = v51;
        uint64_t v81 = v6;
        uint64_t v85 = v50 + 4;
        outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(*(void *)(v44 + 16) + 16) + 176, (uint64_t)&v87, &demangling cache variable for type metadata for Executable?);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Executable?);
        uint64_t v52 = String.init<A>(describing:)();
        *(void *)&long long v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, &v90);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1B9C64000, v48, v49, "[EncoreEngine] Interruption: %s continues to run.", v50, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v51, -1, -1);
        MEMORY[0x1BA9E48C0](v50, -1, -1);

        (*(void (**)(char *, uint64_t))(v7 + 8))(v83, v81);
      }
      else
      {

        swift_release_n();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v89);
      return 0;
    }
    if (v34 == *MEMORY[0x1E4FA1CE8])
    {
      swift_retain_n();
      uint64_t v63 = v12;
      uint64_t v64 = Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v64, v65))
      {
        uint64_t v83 = v11;
        uint64_t v66 = (uint8_t *)swift_slowAlloc();
        uint64_t v67 = swift_slowAlloc();
        uint64_t v82 = v67;
        *(_DWORD *)uint64_t v66 = 136315138;
        v86[0] = v67;
        uint64_t v68 = *(void *)(*(void *)(v63 + 16) + 16) + 176;
        uint64_t v84 = v7;
        outlined init with copy of ReferenceResolutionClientProtocol?(v68, (uint64_t)&v87, &demangling cache variable for type metadata for Executable?);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Executable?);
        uint64_t v69 = String.init<A>(describing:)();
        *(void *)&long long v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, v86);
        unint64_t v11 = v83;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v7 = v84;
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1B9C64000, v64, v65, "[EncoreEngine] Interruption: %s interrupted with .notify policy.", v66, 0xCu);
        uint64_t v71 = v82;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v71, -1, -1);
        MEMORY[0x1BA9E48C0](v66, -1, -1);
      }
      else
      {
        swift_release_n();
      }

      uint64_t v72 = *(void *)(v63 + 16);
      uint64_t v73 = v63 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_context;
      uint64_t v74 = (uint64_t *)(v63 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_actionCompletion);
      swift_beginAccess();
      uint64_t v75 = *v74;
      uint64_t v76 = v74[1];
      swift_retain();
      EncoreEngine.action(mode:starting:context:completion:)(2, v72, v73, v75, v76);
      swift_release();
      MEMORY[0x1BA9E3300](*(void *)(v63 + OBJC_IVAR____TtC14SiriKitRuntime14ExecutableTask_runningTask), MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
      goto LABEL_16;
    }
    *(void *)&long long v87 = 0;
    *((void *)&v87 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v77._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    v77._object = (void *)0x80000001BA0684E0;
    String.append(_:)(v77);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(v87, *((unint64_t *)&v87 + 1), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Encore/EncoreEngine.swift", 94, 2, 435);
    __break(1u);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v87, &demangling cache variable for type metadata for Executable?);
    return 1;
  }
  return result;
}

uint64_t closure #1 in EncoreEngine.discover(request:)(void *a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5)
{
  unint64_t v41 = a4;
  uint64_t v42 = a5;
  uint64_t v43 = a3;
  uint64_t v40 = type metadata accessor for AcceptanceType();
  uint64_t v37 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40);
  uint64_t v38 = (long long *)((char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v39 = type metadata accessor for FlowTraceEvent();
  uint64_t v8 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for Acceptance();
  uint64_t v11 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v14 = a2 + *(int *)(type metadata accessor for SiriRequest(0) + 20);
  uint64_t v15 = v11;
  uint64_t v16 = v37;
  dispatch thunk of InputAccepting.accept(input:)();
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (flow: InputAccepting, input: Input, result: Acceptance));
  uint64_t v18 = &v10[*(int *)(v17 + 48)];
  uint64_t v19 = &v10[*(int *)(v17 + 64)];
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a1, (uint64_t)v10);
  uint64_t v20 = type metadata accessor for Input();
  uint64_t v21 = v14;
  uint64_t v22 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v21, v20);
  unint64_t v23 = v19;
  uint64_t v24 = v36;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v23, v13, v36);
  uint64_t v25 = v39;
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4FA1828], v39);
  static FlowTrace.trace(event:)();
  uint64_t v26 = v10;
  uint64_t v27 = v40;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v26, v25);
  Acceptance.type.getter();
  int v28 = (*(uint64_t (**)(long long *, uint64_t))(v16 + 88))(v22, v27);
  if (v28 == *MEMORY[0x1E4FA1BB0])
  {
    (*(void (**)(long long *, uint64_t))(v16 + 96))(v22, v27);
    outlined init with take of ReferenceResolutionClientProtocol(v22, (uint64_t)&v45);
    uint64_t v29 = v41;
    (*(void (**)(void *))(**(void **)(v42 + 24) + 232))(v41);
    swift_release();
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v45, (uint64_t)v44);
    uint64_t v30 = EncoreEngine.push(parentNode:flow:insideEncoreEnvironment:)(v29, (uint64_t)v44, 1);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v44, &demangling cache variable for type metadata for ActingFlow?);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v45);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v24);
    *uint64_t v43 = v30;
    return swift_release();
  }
  unint64_t v31 = v41;
  BOOL v32 = v43;
  if (v28 == *MEMORY[0x1E4FA1BB8])
  {
    (*(void (**)(long long *, uint64_t))(v16 + 96))(v22, v27);
    outlined init with take of ReferenceResolutionClientProtocol(v22, (uint64_t)&v45);
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v45, (uint64_t)v44);
    uint64_t v33 = EncoreEngine.push(parentNode:flow:insideEncoreEnvironment:)(v31, (uint64_t)v44, 1);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v44, &demangling cache variable for type metadata for ActingFlow?);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v45);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v24);
    *BOOL v32 = v33;
    return swift_release();
  }
  if (v28 == *MEMORY[0x1E4FA1BA8])
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v24);
    *BOOL v32 = (uint64_t)v31;
    swift_retain();
    return swift_release();
  }
  if (v28 == *MEMORY[0x1E4FA1BA0]) {
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v13, v24);
  }
  uint64_t v45 = 0;
  unint64_t v46 = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  v35._object = (void *)0x80000001BA0684B0;
  v35._uint64_t countAndFlagsBits = 0xD000000000000028;
  String.append(_:)(v35);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(v45, v46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Encore/EncoreEngine.swift", 94, 2, 463);
  __break(1u);
  return result;
}

uint64_t closure #1 in EncoreEngine.discover(event:)()
{
  uint64_t v0 = one-time initialization token for $conversationContext;
  swift_retain();
  if (v0 != -1) {
    swift_once();
  }
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EncoreConversationContext?);
  swift_task_localValuePush();
  type metadata accessor for SiriEnvironment();
  ActingFlowAgent.environment.getter();
  static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
  swift_release();
  swift_task_localValuePop();
  return swift_release();
}

uint64_t closure #1 in closure #1 in EncoreEngine.discover(event:)(uint64_t a1, uint64_t a2, void *a3, uint64_t (*a4)(void))
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
  swift_unknownObjectRetain_n();
  id v7 = a3;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v19 = a4;
    uint64_t v10 = swift_slowAlloc();
    uint64_t v11 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v20 = v18;
    *(_DWORD *)uint64_t v10 = 136315394;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SnippetEventHandling);
    uint64_t v12 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2112;
    id v14 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v11 = v7;

    _os_log_impl(&dword_1B9C64000, v8, v9, "[EncoreEngine] Passing snippet event to %s. event: %@", (uint8_t *)v10, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v11, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v18, -1, -1);
    uint64_t v15 = v10;
    a4 = v19;
    MEMORY[0x1BA9E48C0](v15, -1, -1);
  }
  else
  {

    uint64_t v16 = swift_unknownObjectRelease_n();
  }
  return a4(v16);
}

uint64_t closure #1 in EncoreEngine.action(mode:starting:context:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[27] = a6;
  v7[28] = a7;
  v7[25] = a4;
  v7[26] = a5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation.YieldResult);
  v7[29] = v8;
  v7[30] = *(void *)(v8 - 8);
  v7[31] = swift_task_alloc();
  v7[32] = type metadata accessor for EncoreEngine.EngineEvent(0);
  v7[33] = swift_task_alloc();
  v7[34] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for FlowTraceEvent();
  v7[35] = v9;
  v7[36] = *(void *)(v9 - 8);
  v7[37] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in EncoreEngine.action(mode:starting:context:completion:), 0, 0);
}

uint64_t closure #1 in EncoreEngine.action(mode:starting:context:completion:)()
{
  uint64_t v18 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = v0[25];
  uint64_t v2 = type metadata accessor for Logger();
  v0[38] = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol(v1, (uint64_t)(v0 + 2));
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v17 = v6;
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v0 + 2), (uint64_t)(v0 + 7));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Executable);
    uint64_t v7 = String.init<A>(describing:)();
    v0[24] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
    _os_log_impl(&dword_1B9C64000, v3, v4, "[EncoreEngine] Executing flow: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v6, -1, -1);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  }

  uint64_t v9 = v0[27];
  uint64_t v10 = v0[25];
  uint64_t v11 = *(void *)(v0[26] + 16);
  v0[39] = v11;
  uint64_t v12 = swift_task_alloc();
  v0[40] = v12;
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v9;
  uint64_t v13 = one-time initialization token for $conversationContext;
  swift_retain();
  if (v13 != -1) {
    swift_once();
  }
  v0[23] = v11;
  id v14 = (void *)swift_task_alloc();
  v0[41] = v14;
  v14[2] = v11;
  v14[3] = &async function pointer to partial apply for closure #1 in closure #1 in EncoreEngine.action(mode:starting:context:completion:);
  v14[4] = v12;
  swift_retain();
  uint64_t v15 = (void *)swift_task_alloc();
  v0[42] = v15;
  *uint64_t v15 = v0;
  v15[1] = closure #1 in EncoreEngine.action(mode:starting:context:completion:);
  uint64_t v20 = 32;
  uint64_t v21 = MEMORY[0x1E4FBC848] + 8;
  return MEMORY[0x1F41881B8]();
}

{
  uint64_t v0;
  uint64_t (*v1)();
  uint64_t v3;

  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  if (v0) {
    uint64_t v1 = closure #1 in EncoreEngine.action(mode:starting:context:completion:);
  }
  else {
    uint64_t v1 = closure #1 in EncoreEngine.action(mode:starting:context:completion:);
  }
  return MEMORY[0x1F4188298](v1, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  uint64_t v15 = v0;
  uint64_t v1 = v0[39];
  uint64_t v3 = v0[36];
  uint64_t v2 = v0[37];
  os_log_type_t v4 = v0[35];
  swift_release();
  swift_task_dealloc();
  outlined init with copy of ReferenceResolutionClientProtocol(v1 + 56, v2);
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, *MEMORY[0x1E4FA1848], v4);
  static FlowTrace.trace(event:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (static Task<>.isCancelled.getter())
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
  else
  {
    outlined init with copy of ReferenceResolutionClientProtocol(v0[25], (uint64_t)(v0 + 12));
    uint64_t v7 = Logger.logObject.getter();
    unint64_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      id v14 = v10;
      *(_DWORD *)uint64_t v9 = 136315138;
      outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v0 + 12), (uint64_t)(v0 + 17));
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Executable);
      uint64_t v11 = String.init<A>(describing:)();
      v0[22] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 12));
      _os_log_impl(&dword_1B9C64000, v7, v8, "[EncoreEngine] Executing flow: %s completed.", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v10, -1, -1);
      MEMORY[0x1BA9E48C0](v9, -1, -1);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 12));
    }

    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v13 = static FlowActor.shared;
    return MEMORY[0x1F4188298](closure #1 in EncoreEngine.action(mode:starting:context:completion:), v13, 0);
  }
}

{
  return swift_release();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = v0[33];
  uint64_t v1 = (void *)v0[34];
  uint64_t v3 = v0[31];
  os_log_type_t v4 = v0[29];
  uint64_t v5 = v0[30];
  *uint64_t v1 = v0[39];
  swift_storeEnumTagMultiPayload();
  _s14SiriKitRuntime17EncoreEngineEventOWOcTm_0((uint64_t)v1, v2, type metadata accessor for EncoreEngine.EngineEvent);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  outlined destroy of EncoreEngine.EngineEvent((uint64_t)v1, type metadata accessor for EncoreEngine.EngineEvent);
  return MEMORY[0x1F4188298](closure #1 in EncoreEngine.action(mode:starting:context:completion:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in closure #1 in EncoreEngine.action(mode:starting:context:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3[2] = a2;
  void v3[3] = a3;
  uint64_t v4 = type metadata accessor for ExecutionContext();
  v3[4] = v4;
  v3[5] = *(void *)(v4 - 8);
  v3[6] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in EncoreEngine.action(mode:starting:context:completion:), 0, 0);
}

uint64_t closure #1 in closure #1 in EncoreEngine.action(mode:starting:context:completion:)()
{
  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  ConversationContext.executionContext.getter();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[7] = v4;
  void *v4 = v0;
  v4[1] = closure #1 in closure #1 in EncoreEngine.action(mode:starting:context:completion:);
  uint64_t v5 = v0[6];
  return MEMORY[0x1F4151D20](v5, v2, v3);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t v7;

  uint64_t v1 = *(void *)(*v0 + 48);
  uint64_t v2 = *(void *)(*v0 + 40);
  uint64_t v3 = *(void *)(*v0 + 32);
  uint64_t v6 = *v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v6 + 8);
  return v4();
}

uint64_t closure #3 in EncoreEngine.action(mode:starting:context:completion:)(void *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v167 = a4;
  os_log_type_t v168 = a3;
  uint64_t v6 = type metadata accessor for PluginAction();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v153 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v156 = (char *)&v153 - v11;
  uint64_t v161 = type metadata accessor for FlowUnhandledReason();
  uint64_t v160 = *(void *)(v161 - 8);
  MEMORY[0x1F4188790](v161);
  uint64_t v159 = (char *)&v153 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = type metadata accessor for EncoreEngine.ActionOutcome(0);
  MEMORY[0x1F4188790](v165);
  uint64_t v166 = (uint64_t *)((char *)&v153 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v170 = type metadata accessor for FlowActionType();
  uint64_t v171 = *(uint64_t (***)(char *, uint64_t))(v170 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v170);
  v154 = (char *)&v153 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v172 = (uint64_t *)((char *)&v153 - v16);
  uint64_t v175 = type metadata accessor for FlowTraceEvent();
  uint64_t v17 = *(void *)(v175 - 8);
  MEMORY[0x1F4188790](v175);
  uint64_t v174 = (uint64_t)&v153 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v20 = __swift_project_value_buffer(v19, (uint64_t)static Logger.executor);
  swift_retain_n();
  uint64_t v178 = (void (*)(void))v20;
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v176 = a2;
  uint64_t v157 = v6;
  uint64_t v158 = v7;
  uint64_t v155 = v10;
  if (v23)
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v183 = v25;
    *(_DWORD *)uint64_t v24 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol(a1[2] + 56, (uint64_t)&v186);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
    uint64_t v26 = String.init<A>(describing:)();
    uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v183);
    a2 = v176;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B9C64000, v21, v22, "[EncoreEngine] Calling action on node %s", v24, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v25, -1, -1);
    MEMORY[0x1BA9E48C0](v24, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v177 = v17;
  swift_retain_n();
  int v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v186 = v31;
    *(_DWORD *)uint64_t v30 = 136315138;
    uint64_t v32 = (*(uint64_t (**)(uint64_t (*)(void *), void))(**(void **)(a2 + 24) + 304))(closure #1 in OrderedForest<A>.debugDescription(), 0);
    uint64_t v183 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, &v186);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B9C64000, v28, v29, "[EncoreEngine] Current Flow Tree:\n%s", v30, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v31, -1, -1);
    MEMORY[0x1BA9E48C0](v30, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  int v34 = *(uint64_t (**)(void))(*a1 + 128);
  uint64_t v173 = v34();
  uint64_t v35 = a1[2];
  __swift_project_boxed_opaque_existential_1((void *)(v35 + 56), *(void *)(v35 + 80));
  dispatch thunk of ActingFlow.action.getter();
  uint64_t v36 = v174;
  uint64_t v37 = v174 + 40;
  uint64_t v169 = v35 + 56;
  outlined init with copy of ReferenceResolutionClientProtocol(v35 + 56, v174);
  uint64_t v162 = v37;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v186, v36 + 40);
  uint64_t v38 = *MEMORY[0x1E4FA1830];
  uint64_t v39 = v177;
  uint64_t v40 = v175;
  uint64_t v163 = *(void (**)(uint64_t, uint64_t, uint64_t))(v177 + 104);
  v163(v36, v38, v175);
  static FlowTrace.trace(event:)();
  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
  uint64_t v41 = v39 + 8;
  uint64_t v164 = v42;
  v42(v36, v40);
  __swift_project_boxed_opaque_existential_1(&v186, v187);
  uint64_t v43 = (char *)v172;
  dispatch thunk of FlowAction.type.getter();
  uint64_t v44 = v171;
  uint64_t v45 = v170;
  int v46 = v171[11](v43, v170);
  if (v46 == *MEMORY[0x1E4FA1808])
  {
    v44[12](v43, v45);
    outlined init with take of ReferenceResolutionClientProtocol((long long *)v43, (uint64_t)&v183);
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v183, (uint64_t)&v180);
    swift_retain_n();
    uint64_t v47 = a1;
    uint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      uint64_t v188 = v51;
      *(_DWORD *)uint64_t v50 = 136315394;
      outlined init with copy of ReferenceResolutionClientProtocol(v169, (uint64_t)v179);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
      uint64_t v52 = String.init<A>(describing:)();
      *(void *)&v179[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, &v188);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v50 + 12) = 2080;
      outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v180, (uint64_t)v179);
      uint64_t v54 = String.init<A>(describing:)();
      *(void *)&v179[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v188);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v180);
      _os_log_impl(&dword_1B9C64000, v48, v49, "[EncoreEngine] Delegate to %s child: %s", (uint8_t *)v50, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v51, -1, -1);
      MEMORY[0x1BA9E48C0](v50, -1, -1);
    }
    else
    {
      swift_release_n();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v180);
    }

    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v183, (uint64_t)&v180);
    EncoreEngine.push(parentNode:flow:insideEncoreEnvironment:)(v47, (uint64_t)&v180, 1);
    swift_release();
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v180, &demangling cache variable for type metadata for ActingFlow?);
    uint64_t v66 = &v183;
LABEL_45:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v66);
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v186);
  }
  if (v46 == *MEMORY[0x1E4FA1800])
  {
    uint64_t v177 = v41;
    v44[12](v43, v45);
    LODWORD(v171) = v43[72];
    outlined init with take of Any(v43, v179);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)(v43 + 32), (uint64_t)&v183, &demangling cache variable for type metadata for ActingFlow?);
    swift_retain_n();
    uint64_t v56 = Logger.logObject.getter();
    uint64_t v57 = a1;
    int v58 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v56, (os_log_type_t)v58))
    {
      LODWORD(v172) = v58;
      uint64_t v59 = swift_slowAlloc();
      uint64_t v170 = swift_slowAlloc();
      uint64_t v188 = v170;
      *(_DWORD *)uint64_t v59 = 136315394;
      outlined init with copy of ReferenceResolutionClientProtocol(v169, (uint64_t)&v180);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
      uint64_t v60 = String.init<A>(describing:)();
      *(void *)&long long v180 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, &v188);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v62 = swift_release_n();
      *(_WORD *)(v59 + 12) = 2080;
      uint64_t v63 = v57;
      uint64_t v64 = ((uint64_t (*)(uint64_t))v34)(v62);
      if (v64)
      {
        uint64_t v65 = *(void *)(v64 + 16);
        swift_retain();
        swift_release();
        outlined init with copy of ReferenceResolutionClientProtocol(v65 + 56, (uint64_t)&v180);
        swift_release();
      }
      else
      {
        uint64_t v182 = 0;
        long long v180 = 0u;
        long long v181 = 0u;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow?);
      uint64_t v96 = String.init<A>(describing:)();
      *(void *)&long long v180 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v97, &v188);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v80 = v63;
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v56, (os_log_type_t)v172, "[EncoreEngine] Conclude %s parent: %s", (uint8_t *)v59, 0x16u);
      uint64_t v98 = v170;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v98, -1, -1);
      MEMORY[0x1BA9E48C0](v59, -1, -1);
    }
    else
    {
      swift_release_n();

      uint64_t v80 = v57;
    }
    uint64_t v99 = v173;
    (*(void (**)(void *))(**(void **)(v176 + 24) + 240))(v80);
    swift_release();
    outlined init with copy of ReferenceResolutionClientProtocol?(v35 + 96, (uint64_t)&v180, &demangling cache variable for type metadata for LifeCycleModifier?);
    if (*((void *)&v181 + 1))
    {
      __swift_project_boxed_opaque_existential_1(&v180, *((uint64_t *)&v181 + 1));
      if (v99)
      {
        uint64_t v100 = *(void *)(v99 + 16);
        swift_retain();
      }
      else
      {
        uint64_t v100 = 0;
      }
      LifeCycleModifier.onDetached(value:parentFlowContext:)((uint64_t)v179, v100);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v180);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v180, &demangling cache variable for type metadata for LifeCycleModifier?);
    }
    uint64_t v101 = v174;
    outlined init with copy of ReferenceResolutionClientProtocol(v169, v174);
    outlined init with copy of Any((uint64_t)v179, v162);
    uint64_t v102 = v175;
    v163(v101, *MEMORY[0x1E4FA1840], v175);
    static FlowTrace.trace(event:)();
    v164(v101, v102);
    EncoreEngine.push(parentNode:flow:insideEncoreEnvironment:)(0, (uint64_t)&v183, 1);
    swift_release();
    if (v171)
    {
      swift_retain_n();
      uint64_t v103 = Logger.logObject.getter();
      os_log_type_t v104 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v103, v104))
      {
        uint64_t v105 = (uint8_t *)swift_slowAlloc();
        uint64_t v106 = swift_slowAlloc();
        uint64_t v188 = v106;
        *(_DWORD *)uint64_t v105 = 136315138;
        outlined init with copy of ReferenceResolutionClientProtocol(v169, (uint64_t)&v180);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
        uint64_t v107 = String.init<A>(describing:)();
        *(void *)&long long v180 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v108, &v188);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1B9C64000, v103, v104, "[EncoreEngine] Conclude and yield %s", v105, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v106, -1, -1);
        MEMORY[0x1BA9E48C0](v105, -1, -1);
      }
      else
      {
        swift_release_n();
      }

      uint64_t v109 = (uint64_t)v166;
      swift_storeEnumTagMultiPayload();
      v168(v109);
      swift_release();
      outlined destroy of EncoreEngine.EngineEvent(v109, type metadata accessor for EncoreEngine.ActionOutcome);
    }
    else
    {
      swift_release();
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v183, &demangling cache variable for type metadata for ActingFlow?);
    uint64_t v66 = (uint64_t *)v179;
    goto LABEL_45;
  }
  if (v46 == *MEMORY[0x1E4FA17E8])
  {
    v44[12](v43, v45);
    uint64_t v67 = a1;
    uint64_t v68 = *(void (**)(void))v43;
    swift_retain();
    uint64_t v69 = v68;
    swift_retain();
    unint64_t v70 = v68;
    uint64_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = swift_slowAlloc();
      uint64_t v74 = (void *)swift_slowAlloc();
      uint64_t v178 = (void (*)(void))swift_slowAlloc();
      *(void *)&long long v180 = v178;
      *(_DWORD *)uint64_t v73 = 136315394;
      outlined init with copy of ReferenceResolutionClientProtocol(v169, (uint64_t)&v183);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
      uint64_t v75 = String.init<A>(describing:)();
      uint64_t v183 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, (uint64_t *)&v180);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v73 + 12) = 2112;
      Swift::String v77 = v68;
      uint64_t v78 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v183 = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v74 = v78;

      _os_log_impl(&dword_1B9C64000, v71, v72, "[EncoreEngine] Abort flow: %s reason: %@", (uint8_t *)v73, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v74, -1, -1);
      uint64_t v79 = (uint64_t)v178;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v79, -1, -1);
      MEMORY[0x1BA9E48C0](v73, -1, -1);
    }
    else
    {
      swift_release_n();
    }
    (*(void (**)(void *))(**(void **)(v176 + 24) + 248))(v67);
    swift_release();
    uint64_t v88 = v166;
    *uint64_t v166 = (uint64_t)v68;
    swift_storeEnumTagMultiPayload();
    uint64_t v89 = v68;
    v168((uint64_t)v88);

LABEL_48:
    swift_release();
    outlined destroy of EncoreEngine.EngineEvent((uint64_t)v88, type metadata accessor for EncoreEngine.ActionOutcome);
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v186);
  }
  if (v46 == *MEMORY[0x1E4FA17F0])
  {
    v44[12](v43, v45);
    uint64_t v81 = *(void (**)(void))v43;
    swift_retain_n();
    uint64_t v82 = Logger.logObject.getter();
    os_log_type_t v83 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v82, v83))
    {
      uint64_t v178 = v81;
      uint64_t v84 = (uint8_t *)swift_slowAlloc();
      uint64_t v85 = swift_slowAlloc();
      *(void *)&long long v180 = v85;
      *(_DWORD *)uint64_t v84 = 136315138;
      outlined init with copy of ReferenceResolutionClientProtocol(v169, (uint64_t)&v183);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
      uint64_t v86 = String.init<A>(describing:)();
      uint64_t v183 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, (uint64_t *)&v180);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v81 = v178;
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v82, v83, "[EncoreEngine] Yield %s", v84, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v85, -1, -1);
      MEMORY[0x1BA9E48C0](v84, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    v81();
    uint64_t v88 = v166;
    swift_storeEnumTagMultiPayload();
    v168((uint64_t)v88);
    swift_release();
    goto LABEL_48;
  }
  if (v46 == *MEMORY[0x1E4FA1818])
  {
    v44[12](v43, v45);
    (*(void (**)(char *, char *, uint64_t))(v160 + 32))(v159, v43, v161);
    swift_retain_n();
    uint64_t v90 = Logger.logObject.getter();
    os_log_type_t v91 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v90, v91))
    {
      uint64_t v92 = (uint8_t *)swift_slowAlloc();
      uint64_t v93 = swift_slowAlloc();
      *(void *)&long long v180 = v93;
      *(_DWORD *)uint64_t v92 = 136315138;
      outlined init with copy of ReferenceResolutionClientProtocol(v169, (uint64_t)&v183);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
      uint64_t v94 = String.init<A>(describing:)();
      uint64_t v183 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v95, (uint64_t *)&v180);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v90, v91, "[EncoreEngine] Unhandled flow: %s", v92, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v93, -1, -1);
      MEMORY[0x1BA9E48C0](v92, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    uint64_t v128 = v160;
    uint64_t v129 = (uint64_t)v166;
    uint64_t v130 = v159;
    uint64_t v131 = v161;
    (*(void (**)(uint64_t *, char *, uint64_t))(v160 + 16))(v166, v159, v161);
    swift_storeEnumTagMultiPayload();
    v168(v129);
    swift_release();
    outlined destroy of EncoreEngine.EngineEvent(v129, type metadata accessor for EncoreEngine.ActionOutcome);
    (*(void (**)(char *, uint64_t))(v128 + 8))(v130, v131);
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v186);
  }
  if (v46 == *MEMORY[0x1E4FA1810])
  {
    uint64_t v177 = v41;
    v44[12](v43, v45);
    unint64_t v111 = &v43[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (exitValue: Any, nextPluginAction: PluginAction))
                       + 48)];
    outlined init with take of Any(v43, &v180);
    uint64_t v112 = v158;
    uint64_t v113 = v156;
    uint64_t v114 = v157;
    (*(void (**)(char *, char *, uint64_t))(v158 + 32))(v156, v111, v157);
    uint64_t v115 = *(uint64_t (***)(char *, uint64_t))(v112 + 16);
    uint64_t v116 = v155;
    uint64_t v172 = (uint64_t *)(v112 + 16);
    uint64_t v171 = v115;
    ((void (*)(char *, char *, uint64_t))v115)(v155, v113, v114);
    swift_retain_n();
    uint64_t v117 = Logger.logObject.getter();
    os_log_type_t v118 = static os_log_type_t.debug.getter();
    int v119 = v118;
    if (os_log_type_enabled(v117, v118))
    {
      uint64_t v120 = swift_slowAlloc();
      uint64_t v178 = (void (*)(void))swift_slowAlloc();
      *(void *)&v179[0] = v178;
      *(_DWORD *)uint64_t v120 = 136315394;
      lazy protocol witness table accessor for type FlowActor and conformance FlowActor((unint64_t *)&lazy protocol witness table cache variable for type PluginAction and conformance PluginAction, 255, MEMORY[0x1E4FA1B58]);
      LODWORD(v170) = v119;
      uint64_t v121 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v183 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v121, v122, (uint64_t *)v179);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v123 = v116;
      os_log_type_t v124 = *(void (**)(char *, uint64_t))(v158 + 8);
      v124(v123, v114);
      *(_WORD *)(v120 + 12) = 2080;
      outlined init with copy of ReferenceResolutionClientProtocol(v169, (uint64_t)&v183);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
      uint64_t v125 = String.init<A>(describing:)();
      uint64_t v183 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v125, v126, (uint64_t *)v179);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v117, (os_log_type_t)v170, "[EncoreEngine] Redirect nextPluginAction: %s flow: %s", (uint8_t *)v120, 0x16u);
      uint64_t v127 = (uint64_t)v178;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v127, -1, -1);
      MEMORY[0x1BA9E48C0](v120, -1, -1);
    }
    else
    {
      uint64_t v143 = v116;
      os_log_type_t v124 = *(void (**)(char *, uint64_t))(v112 + 8);
      v124(v143, v114);
      swift_release_n();
    }

    uint64_t v144 = v173;
    (*(void (**)(void *))(**(void **)(v176 + 24) + 240))(a1);
    swift_release();
    outlined init with copy of ReferenceResolutionClientProtocol?(v35 + 96, (uint64_t)&v183, &demangling cache variable for type metadata for LifeCycleModifier?);
    if (v185)
    {
      __swift_project_boxed_opaque_existential_1(&v183, v185);
      if (v144)
      {
        uint64_t v145 = *(void *)(v144 + 16);
        swift_retain();
      }
      else
      {
        uint64_t v145 = 0;
      }
      LifeCycleModifier.onDetached(value:parentFlowContext:)((uint64_t)&v180, v145);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v183);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v183, &demangling cache variable for type metadata for LifeCycleModifier?);
    }
    uint64_t v146 = v174;
    outlined init with copy of ReferenceResolutionClientProtocol(v169, v174);
    outlined init with copy of Any((uint64_t)&v180, v162);
    uint64_t v147 = v175;
    v163(v146, *MEMORY[0x1E4FA1840], v175);
    static FlowTrace.trace(event:)();
    v164(v146, v147);
    uint64_t v148 = (uint64_t)v166;
    uint64_t v149 = v156;
    uint64_t v150 = v157;
    ((void (*)(uint64_t *, char *, uint64_t))v171)(v166, v156, v157);
    swift_storeEnumTagMultiPayload();
    v168(v148);
    swift_release();
    outlined destroy of EncoreEngine.EngineEvent(v148, type metadata accessor for EncoreEngine.ActionOutcome);
    v124(v149, v150);
    uint64_t v66 = (uint64_t *)&v180;
    goto LABEL_45;
  }
  if (v46 == *MEMORY[0x1E4FA17F8])
  {
    uint64_t v132 = v172;
    v44[12]((char *)v172, v45);
    uint64_t v134 = *v132;
    unint64_t v133 = v132[1];
    uint64_t v136 = v132[2];
    unint64_t v135 = v132[3];
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v137 = Logger.logObject.getter();
    os_log_type_t v138 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v137, v138))
    {
      uint64_t v139 = swift_slowAlloc();
      uint64_t v176 = swift_slowAlloc();
      *(void *)&long long v180 = v176;
      *(_DWORD *)uint64_t v139 = 136315650;
      uint64_t v178 = (void (*)(void))v136;
      swift_bridgeObjectRetain();
      uint64_t v183 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v134, v133, (uint64_t *)&v180);
      uint64_t v177 = v134;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v139 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v183 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v178, v135, (uint64_t *)&v180);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v139 + 22) = 2080;
      outlined init with copy of ReferenceResolutionClientProtocol(v169, (uint64_t)&v183);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
      uint64_t v140 = String.init<A>(describing:)();
      uint64_t v183 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v140, v141, (uint64_t *)&v180);
      uint64_t v136 = (uint64_t)v178;
      uint64_t v134 = v177;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v137, v138, "[EncoreEngine] Reparse requestID: %s userID: %s flow: %s", (uint8_t *)v139, 0x20u);
      uint64_t v142 = v176;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v142, -1, -1);
      MEMORY[0x1BA9E48C0](v139, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
    }

    uint64_t v88 = v166;
    *uint64_t v166 = v134;
    v88[1] = v133;
    v88[2] = v136;
    v88[3] = v135;
    swift_storeEnumTagMultiPayload();
    v168((uint64_t)v88);
    goto LABEL_48;
  }
  uint64_t v183 = 0;
  unint64_t v184 = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  v151._object = (void *)0x80000001BA0685A0;
  v151._uint64_t countAndFlagsBits = 0xD000000000000029;
  String.append(_:)(v151);
  __swift_project_boxed_opaque_existential_1(&v186, v187);
  unsigned int v152 = v154;
  dispatch thunk of FlowAction.type.getter();
  _print_unlocked<A, B>(_:_:)();
  v44[1](v152, v45);
  uint64_t result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(v183, v184, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Encore/EncoreEngine.swift", 94, 2, 608);
  __break(1u);
  return result;
}

uint64_t LifeCycleModifier.onDetached(value:parentFlowContext:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    MEMORY[0x1F4188790](a1);
    uint64_t v2 = one-time initialization token for $conversationContext;
    swift_retain_n();
    if (v2 != -1) {
      swift_once();
    }
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for EncoreConversationContext?);
    swift_task_localValuePush();
    type metadata accessor for SiriEnvironment();
    ActingFlowAgent.environment.getter();
    static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
    swift_release();
    swift_task_localValuePop();
    return swift_release_n();
  }
  else
  {
    return dispatch thunk of LifeCycleModifier.onDetached(value:)();
  }
}

uint64_t EncoreEngine.push(parentNode:flowAgent:)(void *a1, long long *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = (void (*)(void))type metadata accessor for FlowTraceEvent();
  uint64_t v7 = *((void *)v6 - 1);
  MEMORY[0x1F4188790](v6);
  uint64_t v86 = &v77[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AttachmentOption?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = &v77[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for AttachmentOption();
  uint64_t v87 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (uint64_t *)&v77[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (void *)&unk_1EB9D8000;
  uint64_t v85 = v7;
  if (!a1) {
    goto LABEL_37;
  }
  uint64_t v84 = &v77[-v16];
  uint64_t v82 = v3;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)(a2 + 6), (uint64_t)&v89, &demangling cache variable for type metadata for LifeCycleModifier?);
  if (*((void *)&v90 + 1))
  {
    __swift_project_boxed_opaque_existential_1(&v89, *((uint64_t *)&v90 + 1));
    swift_retain();
    dispatch thunk of LifeCycleModifier.attachmentOption.getter();
    uint64_t v18 = v87;
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v87 + 56))(v11, 0, 1, v12);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v89);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v18 + 48))(v11, 1, v12) != 1)
    {
      uint64_t v19 = v84;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v18 + 32))(v84, v11, v12);
      goto LABEL_7;
    }
  }
  else
  {
    swift_retain();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v89, &demangling cache variable for type metadata for LifeCycleModifier?);
    uint64_t v18 = v87;
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v87 + 56))(v11, 1, 1, v12);
  }
  uint64_t v19 = v84;
  static AttachmentOption.Default.getter();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, &demangling cache variable for type metadata for AttachmentOption?);
LABEL_7:
  (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v18 + 16))(v15, v19, v12);
  int v20 = (*(uint64_t (**)(uint64_t *, uint64_t))(v18 + 88))(v15, v12);
  int v21 = *MEMORY[0x1E4FA1C50];
  uint64_t v81 = v12;
  if (v20 != v21)
  {
    if (v20 != *MEMORY[0x1E4FA1C48])
    {
      if (v20 != *MEMORY[0x1E4FA1C40])
      {
        *(void *)&long long v89 = 0;
        *((void *)&v89 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(44);
        v76._object = (void *)0x80000001BA068480;
        v76._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
        String.append(_:)(v76);
        _print_unlocked<A, B>(_:_:)();
        uint64_t result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(v89, *((unint64_t *)&v89 + 1), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Encore/EncoreEngine.swift", 94, 2, 659);
        __break(1u);
        return result;
      }
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v55 = type metadata accessor for Logger();
      __swift_project_value_buffer(v55, (uint64_t)static Logger.executor);
      swift_retain_n();
      swift_retain_n();
      uint64_t v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v58 = swift_slowAlloc();
        uint64_t v80 = swift_slowAlloc();
        uint64_t v88 = v80;
        *(_DWORD *)uint64_t v58 = 136315394;
        outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(a2 + 1), (uint64_t)&v89);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
        uint64_t v59 = String.init<A>(describing:)();
        *(void *)&long long v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v58 + 12) = 2080;
        outlined init with copy of ReferenceResolutionClientProtocol(a1[2] + 56, (uint64_t)&v89);
        uint64_t v61 = String.init<A>(describing:)();
        *(void *)&long long v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, &v88);
        uint64_t v7 = v85;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v56, v57, "[EncoreEngine] Attachment option: detachNone flow: %s parent: %s", (uint8_t *)v58, 0x16u);
        uint64_t v63 = v80;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v63, -1, -1);
        MEMORY[0x1BA9E48C0](v58, -1, -1);
        swift_release();

        (*(void (**)(unsigned char *, uint64_t))(v87 + 8))(v84, v81);
      }
      else
      {
        swift_release_n();
        swift_release_n();

        (*(void (**)(unsigned char *, uint64_t))(v18 + 8))(v19, v81);
      }
      uint64_t v3 = v82;
      goto LABEL_36;
    }
    if (one-time initialization token for executor == -1) {
      goto LABEL_14;
    }
    goto LABEL_50;
  }
  (*(void (**)(uint64_t *, uint64_t))(v18 + 96))(v15, v12);
  uint64_t v22 = *v15;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.executor);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  int v26 = v25;
  BOOL v27 = os_log_type_enabled(v24, v25);
  uint64_t v80 = (uint64_t)a2;
  if (v27)
  {
    uint64_t v28 = swift_slowAlloc();
    int v78 = v26;
    uint64_t v29 = v28;
    uint64_t v79 = swift_slowAlloc();
    uint64_t v88 = v79;
    *(_DWORD *)uint64_t v29 = 136315650;
    swift_bridgeObjectRetain();
    uint64_t v30 = Set.description.getter();
    unint64_t v32 = v31;
    swift_bridgeObjectRelease();
    *(void *)&long long v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2080;
    uint64_t v33 = (uint64_t)(a2 + 1);
    a2 = &v89;
    outlined init with copy of ReferenceResolutionClientProtocol(v33, (uint64_t)&v89);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
    uint64_t v34 = String.init<A>(describing:)();
    *(void *)&long long v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 22) = 2080;
    outlined init with copy of ReferenceResolutionClientProtocol(a1[2] + 56, (uint64_t)&v89);
    uint64_t v36 = String.init<A>(describing:)();
    uint64_t v19 = (unsigned char *)v37;
    *(void *)&long long v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v24, (os_log_type_t)v78, "[EncoreEngine] Attachment option: detach(%s) flow: %s parent: %s", (uint8_t *)v29, 0x20u);
    uint64_t v7 = v79;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v7, -1, -1);
    MEMORY[0x1BA9E48C0](v29, -1, -1);
  }
  else
  {

    swift_release_n();
    swift_release_n();
    uint64_t v38 = swift_bridgeObjectRelease_n();
  }
  unint64_t v50 = (*(uint64_t (**)(uint64_t))(*a1 + 152))(v38);
  unint64_t v51 = specialized _ArrayProtocol.filter(_:)(v50, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  os_log_type_t v83 = v6;
  if (v51 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v52 = _CocoaArrayWrapper.endIndex.getter();
    if (v52) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v52 = *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v52)
    {
LABEL_19:
      uint64_t v6 = *(void (**)(void))(**(void **)(v82 + 24) + 240);
      if (v52 >= 1)
      {
        uint64_t v53 = 0;
        do
        {
          if ((v51 & 0xC000000000000001) != 0)
          {
            uint64_t v54 = MEMORY[0x1BA9E3990](v53, v51);
          }
          else
          {
            uint64_t v54 = *(void *)(v51 + 8 * v53 + 32);
            swift_retain();
          }
          ++v53;
          v6(v54);
          swift_release();
          swift_release();
        }
        while (v52 != v53);
        goto LABEL_35;
      }
      __break(1u);
LABEL_50:
      swift_once();
LABEL_14:
      uint64_t v39 = type metadata accessor for Logger();
      __swift_project_value_buffer(v39, (uint64_t)static Logger.executor);
      swift_retain_n();
      swift_retain_n();
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.debug.getter();
      int v42 = v41;
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v43 = swift_slowAlloc();
        LODWORD(v80) = v42;
        uint64_t v44 = v43;
        uint64_t v45 = swift_slowAlloc();
        uint64_t v88 = v45;
        *(_DWORD *)uint64_t v44 = 136315394;
        outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(a2 + 1), (uint64_t)&v89);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
        uint64_t v46 = String.init<A>(describing:)();
        *(void *)&long long v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v44 + 12) = 2080;
        outlined init with copy of ReferenceResolutionClientProtocol(a1[2] + 56, (uint64_t)&v89);
        uint64_t v48 = String.init<A>(describing:)();
        *(void *)&long long v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, &v88);
        uint64_t v7 = v85;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        uint64_t v19 = v84;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v40, (os_log_type_t)v80, "[EncoreEngine] Attachment option: detachSiblings flow: %s parent: %s", (uint8_t *)v44, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v45, -1, -1);
        MEMORY[0x1BA9E48C0](v44, -1, -1);
      }
      else
      {

        swift_release_n();
        swift_release_n();
      }
      uint64_t v3 = v82;
      (*(void (**)(void *))(**(void **)(v82 + 24) + 232))(a1);
      swift_release();
      swift_release();
      (*(void (**)(unsigned char *, uint64_t))(v87 + 8))(v19, v81);
      goto LABEL_36;
    }
  }
LABEL_35:
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v87 + 8))(v84, v81);
  swift_bridgeObjectRelease();
  a2 = (long long *)v80;
  uint64_t v3 = v82;
  uint64_t v6 = v83;
  uint64_t v7 = v85;
LABEL_36:
  uint64_t v17 = &unk_1EB9D8000;
LABEL_37:
  if (v17[24] != -1) {
    swift_once();
  }
  uint64_t v64 = type metadata accessor for Logger();
  __swift_project_value_buffer(v64, (uint64_t)static Logger.executor);
  swift_retain_n();
  swift_retain_n();
  uint64_t v65 = Logger.logObject.getter();
  os_log_type_t v66 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v65, v66))
  {
    os_log_type_t v83 = v6;
    uint64_t v67 = swift_slowAlloc();
    uint64_t v68 = swift_slowAlloc();
    uint64_t v88 = v68;
    *(_DWORD *)uint64_t v67 = 136315394;
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(a2 + 1), (uint64_t)&v89);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow);
    uint64_t v69 = String.init<A>(describing:)();
    *(void *)&long long v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v67 + 12) = 2080;
    if (a1)
    {
      outlined init with copy of ReferenceResolutionClientProtocol(a1[2] + 56, (uint64_t)&v89);
    }
    else
    {
      uint64_t v91 = 0;
      long long v89 = 0u;
      long long v90 = 0u;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActingFlow?);
    uint64_t v71 = String.init<A>(describing:)();
    *(void *)&long long v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, &v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v65, v66, "[EncoreEngine] Pushing %s parent: %s", (uint8_t *)v67, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v68, -1, -1);
    MEMORY[0x1BA9E48C0](v67, -1, -1);

    uint64_t v6 = v83;
    uint64_t v7 = v85;
  }
  else
  {

    swift_release_n();
    swift_release_n();
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)(a2 + 6), (uint64_t)&v89, &demangling cache variable for type metadata for LifeCycleModifier?);
  if (*((void *)&v90 + 1))
  {
    __swift_project_boxed_opaque_existential_1(&v89, *((uint64_t *)&v90 + 1));
    dispatch thunk of LifeCycleModifier.onAttached()();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v89);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v89, &demangling cache variable for type metadata for LifeCycleModifier?);
  }
  uint64_t v73 = v86;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a2 + 56, (uint64_t)v86);
  (*(void (**)(unsigned char *, void, void (*)(void)))(v7 + 104))(v73, *MEMORY[0x1E4FA1838], v6);
  static FlowTrace.trace(event:)();
  (*(void (**)(unsigned char *, void (*)(void)))(v7 + 8))(v73, v6);
  uint64_t v74 = *(void *)(v3 + 24);
  *(void *)&long long v89 = a2;
  return (*(uint64_t (**)(long long *, void *))(*(void *)v74 + 208))(&v89, a1);
}

uint64_t EncoreEngine.ActionMode.description.getter(char a1)
{
  unint64_t v2 = 0xE600000000000000;
  uint64_t v3 = 0x6C616D726F6ELL;
  switch(a1)
  {
    case 1:
      uint64_t v3 = 0x656D75736572;
      break;
    case 2:
      unint64_t v2 = 0xE900000000000074;
      uint64_t v3 = 0x7075727265746E69;
      break;
    case 3:
      uint64_t v3 = 0x705570617277;
      break;
    default:
      break;
  }
  unint64_t v4 = v2;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t EncoreEngine.ActionMode.rawValue.getter(char a1)
{
  uint64_t result = 0x6C616D726F6ELL;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x656D75736572;
      break;
    case 2:
      uint64_t result = 0x7075727265746E69;
      break;
    case 3:
      uint64_t result = 0x705570617277;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EncoreEngine.ActionMode(unsigned __int8 *a1, unsigned char *a2)
{
  uint64_t v2 = 0x6C616D726F6ELL;
  uint64_t v3 = *a1;
  unint64_t v4 = 0xE600000000000000;
  uint64_t v5 = 0x6C616D726F6ELL;
  switch(v3)
  {
    case 1:
      uint64_t v5 = 0x656D75736572;
      break;
    case 2:
      uint64_t v5 = 0x7075727265746E69;
      unint64_t v4 = 0xE900000000000074;
      break;
    case 3:
      uint64_t v5 = 0x705570617277;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE600000000000000;
  switch(*a2)
  {
    case 1:
      if (v5 == 0x656D75736572) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v2 = 0x7075727265746E69;
      unint64_t v6 = 0xE900000000000074;
      goto LABEL_9;
    case 3:
      if (v5 == 0x705570617277) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v4 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance EncoreEngine.ActionMode()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance EncoreEngine.ActionMode()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EncoreEngine.ActionMode()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance EncoreEngine.ActionMode@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized EncoreEngine.ActionMode.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance EncoreEngine.ActionMode(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6C616D726F6ELL;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 0x656D75736572;
      goto LABEL_3;
    case 2:
      *a1 = 0x7075727265746E69;
      a1[1] = 0xE900000000000074;
      break;
    case 3:
      *a1 = 0x705570617277;
      a1[1] = 0xE600000000000000;
      break;
    default:
LABEL_3:
      *a1 = v2;
      a1[1] = 0xE600000000000000;
      break;
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance EncoreEngine.ActionMode()
{
  unint64_t v1 = 0xE600000000000000;
  uint64_t v2 = 0x6C616D726F6ELL;
  switch(*v0)
  {
    case 1:
      uint64_t v2 = 0x656D75736572;
      break;
    case 2:
      unint64_t v1 = 0xE900000000000074;
      uint64_t v2 = 0x7075727265746E69;
      break;
    case 3:
      uint64_t v2 = 0x705570617277;
      break;
    default:
      break;
  }
  unint64_t v3 = v1;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t EncoreEngine.ActionOutcome.description.getter()
{
  uint64_t v1 = type metadata accessor for PluginAction();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  unint64_t v4 = (char *)v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for FlowUnhandledReason();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for EncoreEngine.ActionOutcome(0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (void *)((char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  _s14SiriKitRuntime17EncoreEngineEventOWOcTm_0(v0, (uint64_t)v11, type metadata accessor for EncoreEngine.ActionOutcome);
  uint64_t v12 = 0x6174537974706D65;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(char *, uint64_t *, uint64_t))(v2 + 32))(v4, v11, v1);
      uint64_t v29 = 0x7463657269646572;
      unint64_t v30 = 0xE900000000000028;
      lazy protocol witness table accessor for type FlowActor and conformance FlowActor((unint64_t *)&lazy protocol witness table cache variable for type PluginAction and conformance PluginAction, 255, MEMORY[0x1E4FA1B58]);
      v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v16._uint64_t countAndFlagsBits = 41;
      v16._object = (void *)0xE100000000000000;
      String.append(_:)(v16);
      uint64_t v12 = v29;
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      break;
    case 2u:
      v17._uint64_t countAndFlagsBits = *v11;
      uint64_t v18 = (void *)v11[1];
      uint64_t v19 = v11[2];
      int v20 = (void *)v11[3];
      uint64_t v29 = 0x2865737261706572;
      unint64_t v30 = 0xE800000000000000;
      v17._object = v18;
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v21._uint64_t countAndFlagsBits = 8236;
      v21._object = (void *)0xE200000000000000;
      String.append(_:)(v21);
      v22._uint64_t countAndFlagsBits = v19;
      v22._object = v20;
      String.append(_:)(v22);
      swift_bridgeObjectRelease();
      v23._uint64_t countAndFlagsBits = 41;
      v23._object = (void *)0xE100000000000000;
      String.append(_:)(v23);
      goto LABEL_6;
    case 3u:
      uint64_t v24 = (void *)*v11;
      uint64_t v29 = 0;
      unint64_t v30 = 0xE000000000000000;
      v25._uint64_t countAndFlagsBits = 0x2874726F6261;
      v25._object = (void *)0xE600000000000000;
      String.append(_:)(v25);
      v28[1] = v24;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      _print_unlocked<A, B>(_:_:)();
      v26._uint64_t countAndFlagsBits = 41;
      v26._object = (void *)0xE100000000000000;
      String.append(_:)(v26);

LABEL_6:
      uint64_t v12 = v29;
      break;
    case 4u:
      return v12;
    case 5u:
      uint64_t v12 = 0x7365726975716572;
      break;
    case 6u:
      uint64_t v12 = 0x646C656979;
      break;
    default:
      (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 32))(v8, v11, v5);
      uint64_t v29 = 0;
      unint64_t v30 = 0xE000000000000000;
      v13._uint64_t countAndFlagsBits = 0x656C646E61686E75;
      v13._object = (void *)0xEA00000000002864;
      String.append(_:)(v13);
      _print_unlocked<A, B>(_:_:)();
      v14._uint64_t countAndFlagsBits = 41;
      v14._object = (void *)0xE100000000000000;
      String.append(_:)(v14);
      uint64_t v12 = v29;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      break;
  }
  return v12;
}

uint64_t EventQueue.events.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 88);
  uint64_t v4 = type metadata accessor for AsyncStream();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t EventQueue.continuation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 96);
  uint64_t v4 = type metadata accessor for AsyncStream.Continuation();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t specialized EventQueue.init()()
{
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation.BufferingPolicy);
  uint64_t v1 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>);
  uint64_t v4 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v16 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation);
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  uint64_t v18 = v12;
  type metadata accessor for EncoreEngine.EngineEvent(0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4FBD028], v16);
  AsyncStream.init(_:bufferingPolicy:_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v0 + *(void *)(*(void *)v0 + 88), v6, v17);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t)v10, &demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation?);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1, v13);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v0 + *(void *)(*(void *)v0 + 96), v10, v13);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation?);
    return v0;
  }
  return result;
}

uint64_t EventQueue.init()()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80);
  uint64_t v18 = type metadata accessor for AsyncStream.Continuation.BufferingPolicy();
  uint64_t v2 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v16 = (char *)&v16 - v3;
  uint64_t v19 = type metadata accessor for AsyncStream();
  uint64_t v17 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v5 = (char *)&v16 - v4;
  uint64_t v6 = type metadata accessor for AsyncStream.Continuation();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v16 - v12;
  uint64_t v14 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))((char *)&v16 - v12, 1, 1, v6);
  uint64_t v20 = v1;
  Swift::String v21 = v13;
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v16, *MEMORY[0x1E4FBD028], v18);
  AsyncStream.init(_:bufferingPolicy:_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v0 + *(void *)(*(void *)v0 + 88), v5, v19);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, v13, v7);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v6);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v0 + *(void *)(*(void *)v0 + 96), v11, v6);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return v0;
  }
  return result;
}

uint64_t specialized closure #1 in EventQueue.init()(uint64_t a1, uint64_t a2)
{
  outlined destroy of ReferenceResolutionClientProtocol?(a2, &demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation?);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<EncoreEngine.EngineEvent>.Continuation);
  uint64_t v7 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, a1, v4);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);

  return v5(a2, 0, 1, v4);
}

uint64_t closure #1 in EventQueue.init()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AsyncStream.Continuation();
  uint64_t v5 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a2, v5);
  uint64_t v8 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a2, a1, v4);
  uint64_t v6 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56);

  return v6(a2, 0, 1, v4);
}

uint64_t EventQueue.deinit()
{
  uint64_t v1 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "[EncoreEngine] EventQueue deinit.", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  uint64_t v6 = v1 + *(void *)(*(void *)v1 + 88);
  uint64_t v7 = type metadata accessor for AsyncStream();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = v1 + *(void *)(*(void *)v1 + 96);
  uint64_t v9 = type metadata accessor for AsyncStream.Continuation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  return v1;
}

uint64_t EventQueue.__deallocating_deinit()
{
  EventQueue.deinit();

  return swift_deallocClassInstance();
}

uint64_t specialized closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  void v4[5] = a4;
  long long v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x1F4188298](specialized closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:), 0, 0);
}

uint64_t specialized closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:)()
{
  type metadata accessor for SiriEnvironment();
  uint64_t v1 = ActingFlowAgent.environment.getter();
  v0[6] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[7] = v2;
  *uint64_t v2 = v0;
  v2[1] = specialized closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:);
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[2];
  uint64_t v6 = MEMORY[0x1E4FBC848] + 8;
  return MEMORY[0x1F415AAA8](v5, v1, v3, v4, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](specialized closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:), 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t type metadata accessor for RequestContinuation(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for RequestContinuation);
}

uint64_t partial apply for closure #1 in EncoreEngine.init(rootEnvironment:snippetManager:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in EncoreEngine.init(rootEnvironment:snippetManager:)(a1, a2, v2);
}

uint64_t sub_1B9EDB680()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B9EDB6B8()
{
  return objectdestroy_2Tm_0(MEMORY[0x1E4FBC8F8]);
}

uint64_t partial apply for closure #2 in EncoreEngine.init(rootEnvironment:snippetManager:)()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  v3[5] = v2;
  return MEMORY[0x1F4188298](closure #2 in EncoreEngine.init(rootEnvironment:snippetManager:), 0, 0);
}

uint64_t type metadata accessor for FlowActor()
{
  return self;
}

uint64_t outlined init with take of UserInputResult(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of EncoreEngine.EngineEvent(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type SystemEvents? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemEvents? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type SystemEvents? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for SystemEvents?);
    lazy protocol witness table accessor for type FlowActor and conformance FlowActor(&lazy protocol witness table cache variable for type SystemEvents and conformance SystemEvents, 255, MEMORY[0x1E4F610D8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemEvents? and conformance <A> A?);
  }
  return result;
}

unint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t *a1, uint8_t *a2)
{
  unint64_t v5 = swift_bridgeObjectRetain();
  unint64_t v6 = specialized Collection.firstIndex(where:)(v5, a2);
  char v8 = v7;
  swift_bridgeObjectRelease();
  if (!v2)
  {
    if (v8)
    {
      unint64_t v20 = *a1;
      if (v20 >> 62)
      {
        swift_bridgeObjectRetain();
        unint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v6 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
    }
    else
    {
      uint64_t v9 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        goto LABEL_54;
      }
      if ((unint64_t)*a1 >> 62)
      {
LABEL_55:
        swift_bridgeObjectRetain();
        uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v9 != v22) {
          goto LABEL_6;
        }
      }
      else if (v9 != *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_6:
        unint64_t v10 = v6 + 5;
        while (1)
        {
          unint64_t v11 = v10 - 4;
          uint64_t v12 = *a1;
          if ((*a1 & 0xC000000000000001) != 0)
          {
            uint64_t v13 = MEMORY[0x1BA9E3990](v10 - 4);
          }
          else
          {
            if ((v11 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_45:
              __break(1u);
LABEL_46:
              __break(1u);
LABEL_47:
              __break(1u);
LABEL_48:
              __break(1u);
LABEL_49:
              __break(1u);
LABEL_50:
              __break(1u);
LABEL_51:
              __break(1u);
LABEL_52:
              __break(1u);
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
              goto LABEL_55;
            }
            if (v11 >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_45;
            }
            uint64_t v13 = *(void *)(v12 + 8 * v10);
            swift_retain();
          }
          uint64_t v23 = v13;
          uint64_t v9 = closure #1 in EncoreEngine.ensureReady()(&v23, a2);
          swift_release();
          if ((v9 & 1) == 0) {
            break;
          }
LABEL_32:
          uint64_t v9 = v10 - 3;
          if (__OFADD__(v11, 1)) {
            goto LABEL_46;
          }
          if ((unint64_t)*a1 >> 62)
          {
            swift_bridgeObjectRetain();
            uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v19 = *(void *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          ++v10;
          if (v9 == v19) {
            goto LABEL_43;
          }
        }
        if (v11 == v6)
        {
LABEL_31:
          if (__OFADD__(v6++, 1)) {
            goto LABEL_47;
          }
          goto LABEL_32;
        }
        uint64_t v9 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          uint64_t v14 = MEMORY[0x1BA9E3990](v6, *a1);
          uint64_t v9 = *a1;
          if ((*a1 & 0xC000000000000001) == 0)
          {
LABEL_17:
            if ((v11 & 0x8000000000000000) != 0) {
              goto LABEL_50;
            }
            if (v11 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
              goto LABEL_51;
            }
            uint64_t v15 = *(void *)(v9 + 8 * v10);
            swift_retain();
            goto LABEL_20;
          }
        }
        else
        {
          if ((v6 & 0x8000000000000000) != 0) {
            goto LABEL_48;
          }
          if (v6 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_49;
          }
          uint64_t v14 = *(void *)(v9 + 8 * v6 + 32);
          swift_retain();
          if ((v9 & 0xC000000000000001) == 0) {
            goto LABEL_17;
          }
        }
        uint64_t v15 = MEMORY[0x1BA9E3990](v10 - 4, v9);
        uint64_t v9 = *a1;
LABEL_20:
        int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v9;
        if (!isUniquelyReferenced_nonNull_bridgeObject || v9 < 0 || (v9 & 0x4000000000000000) != 0)
        {
          uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
          *a1 = v9;
        }
        *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v6 + 0x20) = v15;
        swift_release();
        specialized Array._endMutation()();
        uint64_t v9 = *a1;
        int v17 = swift_isUniquelyReferenced_nonNull_bridgeObject();
        *a1 = v9;
        if (!v17 || v9 < 0 || (v9 & 0x4000000000000000) != 0)
        {
          uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew()(v9);
          *a1 = v9;
        }
        if ((v11 & 0x8000000000000000) != 0) {
          goto LABEL_52;
        }
        if (v11 >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_53;
        }
        *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 8 * v10) = v14;
        swift_release();
        specialized Array._endMutation()();
        goto LABEL_31;
      }
    }
  }
LABEL_43:
  swift_release();
  return v6;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v28 = MEMORY[0x1E4FBC860];
  if (a1 >> 62)
  {
LABEL_28:
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    if (v17) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v17 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v17)
    {
LABEL_3:
      uint64_t v16 = v3;
      unint64_t v4 = 0;
      uint64_t v19 = v3 & 0xFFFFFFFFFFFFFF8;
      unint64_t v20 = v3 & 0xC000000000000001;
      uint64_t v18 = v3 + 32;
      unint64_t v5 = &demangling cache variable for type metadata for LifeCycleModifier?;
      uint64_t v6 = a2 + 56;
      uint64_t v3 = v17;
      while (1)
      {
        if (v20)
        {
          uint64_t v7 = MEMORY[0x1BA9E3990](v4, v16);
          BOOL v8 = __OFADD__(v4++, 1);
          if (v8)
          {
LABEL_25:
            __break(1u);
            return v28;
          }
        }
        else
        {
          if (v4 >= *(void *)(v19 + 16))
          {
            __break(1u);
            goto LABEL_28;
          }
          uint64_t v7 = *(void *)(v18 + 8 * v4);
          swift_retain();
          BOOL v8 = __OFADD__(v4++, 1);
          if (v8) {
            goto LABEL_25;
          }
        }
        outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v7 + 16) + 96, (uint64_t)v21, v5);
        if (!v22) {
          break;
        }
        uint64_t v9 = v5;
        __swift_project_boxed_opaque_existential_1(v21, v22);
        dispatch thunk of LifeCycleModifier.id.getter();
        uint64_t v3 = v17;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);
        if (!*((void *)&v24 + 1)) {
          goto LABEL_19;
        }
        v26[0] = v23;
        v26[1] = v24;
        uint64_t v27 = v25;
        if (*(void *)(a2 + 16))
        {
          Swift::Int v10 = AnyHashable._rawHashValue(seed:)(*(void *)(a2 + 40));
          uint64_t v11 = -1 << *(unsigned char *)(a2 + 32);
          unint64_t v12 = v10 & ~v11;
          if ((*(void *)(v6 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
          {
            uint64_t v13 = ~v11;
            while (1)
            {
              outlined init with copy of AnyHashable(*(void *)(a2 + 48) + 40 * v12, (uint64_t)&v23);
              char v14 = MEMORY[0x1BA9E38C0](&v23, v26);
              outlined destroy of AnyHashable((uint64_t)&v23);
              if (v14) {
                break;
              }
              unint64_t v12 = (v12 + 1) & v13;
              if (((*(void *)(v6 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
              {
                outlined destroy of AnyHashable((uint64_t)v26);
                swift_release();
                unint64_t v5 = v9;
                goto LABEL_5;
              }
            }
            outlined destroy of AnyHashable((uint64_t)v26);
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            unint64_t v5 = v9;
          }
          else
          {
            outlined destroy of AnyHashable((uint64_t)v26);
            swift_release();
          }
LABEL_5:
          uint64_t v3 = v17;
          goto LABEL_6;
        }
        outlined destroy of AnyHashable((uint64_t)v26);
LABEL_20:
        swift_release();
LABEL_6:
        if (v4 == v3) {
          return v28;
        }
      }
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, v5);
      long long v23 = 0u;
      long long v24 = 0u;
      uint64_t v25 = 0;
LABEL_19:
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v23, &demangling cache variable for type metadata for AnyHashable?);
      goto LABEL_20;
    }
  }
  return MEMORY[0x1E4FBC860];
}

{
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;

  uint64_t v9 = MEMORY[0x1E4FBC860];
  if (a1 >> 62)
  {
LABEL_16:
    unint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    unint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
LABEL_3:
      for (uint64_t i = 0; ; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v6 = MEMORY[0x1BA9E3990](i, a1);
          uint64_t v7 = i + 1;
          if (__OFADD__(i, 1))
          {
LABEL_13:
            __break(1u);
            return v9;
          }
        }
        else
        {
          if (i >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_16;
          }
          uint64_t v6 = *(void *)(a1 + 8 * i + 32);
          swift_retain();
          uint64_t v7 = i + 1;
          if (__OFADD__(i, 1)) {
            goto LABEL_13;
          }
        }
        if (v6 == a2)
        {
          swift_release();
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        if (v7 == v4) {
          return v9;
        }
      }
    }
  }
  return MEMORY[0x1E4FBC860];
}

uint64_t type metadata accessor for ActingFlowAgent()
{
  return self;
}

uint64_t partial apply for closure #1 in LifeCycleModifier.onDetached(value:parentFlowContext:)()
{
  return dispatch thunk of LifeCycleModifier.onDetached(value:)();
}

uint64_t specialized Collection.firstIndex(where:)(unint64_t a1, uint8_t *a2)
{
  if (a1 >> 62) {
    goto LABEL_14;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = 0;
  if (v5)
  {
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = MEMORY[0x1BA9E3990](v6, a1);
      }
      else
      {
        uint64_t v7 = *(void *)(a1 + 8 * v6 + 32);
        swift_retain();
      }
      uint64_t v11 = v7;
      char v8 = closure #1 in EncoreEngine.ensureReady()(&v11, a2);
      swift_release();
      if (v2 || (v8 & 1) != 0) {
        break;
      }
      uint64_t v9 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
        __break(1u);
LABEL_14:
        swift_bridgeObjectRetain();
        uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v6 = 0;
        if (!v5) {
          return v6;
        }
      }
      else
      {
        ++v6;
        if (v9 == v5) {
          return 0;
        }
      }
    }
  }
  return v6;
}

#error "1B9EDC8D8: switch analysis failed: failed to propagate the switch expression (funcsize=1456)"

uint64_t specialized Collection.firstIndex(where:)(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62) {
    goto LABEL_11;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v5 = 0;
  if (v4)
  {
    while (1)
    {
      uint64_t v6 = (a1 & 0xC000000000000001) != 0 ? MEMORY[0x1BA9E3990](v5, a1) : swift_retain();
      uint64_t v7 = *(void *)(*(void *)(v6 + 16) + 16);
      swift_release();
      if (v7 == a2) {
        break;
      }
      uint64_t v8 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
LABEL_11:
        swift_bridgeObjectRetain();
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v5 = 0;
        if (!v4) {
          return v5;
        }
      }
      else
      {
        ++v5;
        if (v8 == v4) {
          return 0;
        }
      }
    }
  }
  return v5;
}

{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;

  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  for (uint64_t i = 0; v4; uint64_t i = 0)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    a2 = *(void *)(a2 + 24);
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v7 = MEMORY[0x1BA9E3990](i, a1);
      }
      else
      {
        uint64_t v7 = *(void *)(a1 + 8 * i + 32);
        swift_retain();
      }
      if (*(void *)(v7 + 16) == v6 && *(void *)(v7 + 24) == a2)
      {
        swift_release();
        return i;
      }
      uint64_t v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_release();
      if (v9) {
        return i;
      }
      Swift::Int v10 = i + 1;
      if (__OFADD__(i, 1)) {
        break;
      }
      ++i;
      if (v10 == v4) {
        return 0;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return i;
}

unint64_t specialized EncoreEngine.ActionMode.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of EncoreEngine.ActionMode.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t type metadata accessor for EncoreEngine.ActionOutcome(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for EncoreEngine.ActionOutcome);
}

uint64_t partial apply for closure #1 in EventQueue.init()(uint64_t a1)
{
  return closure #1 in EventQueue.init()(a1, *(void *)(v1 + 24));
}

uint64_t associated type witness table accessor for GlobalActor.ActorType : Actor in FlowActor(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type FlowActor and conformance FlowActor(&lazy protocol witness table cache variable for type FlowActor and conformance FlowActor, a2, (void (*)(uint64_t))type metadata accessor for FlowActor);
}

unint64_t lazy protocol witness table accessor for type EncoreEngine.ActionMode and conformance EncoreEngine.ActionMode()
{
  unint64_t result = lazy protocol witness table cache variable for type EncoreEngine.ActionMode and conformance EncoreEngine.ActionMode;
  if (!lazy protocol witness table cache variable for type EncoreEngine.ActionMode and conformance EncoreEngine.ActionMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncoreEngine.ActionMode and conformance EncoreEngine.ActionMode);
  }
  return result;
}

uint64_t sub_1B9EDDABC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ActingFlowAgent.environment.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1B9EDDAE8()
{
  uint64_t v0 = swift_retain();
  return ActingFlowAgent.environment.setter(v0);
}

uint64_t method lookup function for FlowActor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for FlowActor);
}

uint64_t dispatch thunk of FlowActor.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t *initializeBufferWithCopyOfBuffer for RequestContinuation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UserInputResult();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = type metadata accessor for Input();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for RequestContinuation(uint64_t a1)
{
  type metadata accessor for UserInputResult();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for Input();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  }

  return swift_release();
}

char *initializeWithCopy for RequestContinuation(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UserInputResult();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for Input();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  swift_retain();
  return a1;
}

char *assignWithCopy for RequestContinuation(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of EncoreEngine.EngineEvent((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for UserInputResult);
    uint64_t v6 = type metadata accessor for UserInputResult();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for Input();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  swift_retain();
  swift_release();
  return a1;
}

char *initializeWithTake for RequestContinuation(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UserInputResult();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for Input();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *assignWithTake for RequestContinuation(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of EncoreEngine.EngineEvent((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for UserInputResult);
    uint64_t v6 = type metadata accessor for UserInputResult();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for Input();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for RequestContinuation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B9EDE0B0);
}

uint64_t sub_1B9EDE0B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UserInputResult();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for RequestContinuation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B9EDE190);
}

uint64_t sub_1B9EDE190(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UserInputResult();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

uint64_t type metadata completion function for RequestContinuation()
{
  uint64_t result = type metadata accessor for UserInputResult();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for EncoreEngineEvent(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *(char **)a2;
    *(void *)a1 = *(void *)a2;
    a1 = &v9[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = *(char **)a2;
        *(void *)a1 = *(void *)a2;
        uint64_t v8 = v7;
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        int v11 = *(char **)a2;
        *(void *)a1 = *(void *)a2;
        unint64_t v12 = v11;
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ()));
        uint64_t v14 = *(int *)(v13 + 48);
        uint64_t v15 = &a1[v14];
        uint64_t v16 = &a2[v14];
        uint64_t v17 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
        uint64_t v18 = *(int *)(v13 + 64);
        uint64_t v19 = &a1[v18];
        unint64_t v20 = &a2[v18];
        uint64_t v21 = *((void *)v20 + 1);
        *(void *)uint64_t v19 = *(void *)v20;
        *((void *)v19 + 1) = v21;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        long long v22 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v22;
        (**(void (***)(void *, const void *))(v22 - 8))(a1, a2);
        uint64_t v23 = *((void *)a2 + 6);
        *((void *)a1 + 5) = *((void *)a2 + 5);
        *((void *)a1 + 6) = v23;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v24 = *((void *)a2 + 1);
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = v24;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        uint64_t v25 = *((void *)a2 + 1);
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = v25;
        Swift::String v26 = (int *)type metadata accessor for SiriRequest(0);
        uint64_t v27 = v26[5];
        uint64_t v28 = &a1[v27];
        uint64_t v29 = &a2[v27];
        uint64_t v30 = type metadata accessor for Input();
        unint64_t v31 = *(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16);
        swift_bridgeObjectRetain();
        v31(v28, v29, v30);
        *(void *)&a1[v26[6]] = *(void *)&a2[v26[6]];
        uint64_t v32 = v26[7];
        uint64_t v33 = &a1[v32];
        uint64_t v34 = &a2[v32];
        unint64_t v35 = *(void *)&a2[v32 + 8];
        swift_retain();
        if (v35 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
        }
        else
        {
          uint64_t v38 = *(void *)v34;
          outlined copy of Data._Representation(v38, v35);
          *(void *)uint64_t v33 = v38;
          *((void *)v33 + 1) = v35;
        }
        *(void *)&a1[v26[8]] = *(void *)&a2[v26[8]];
        *(void *)&a1[v26[9]] = *(void *)&a2[v26[9]];
        uint64_t v39 = v26[10];
        __dst = &a1[v39];
        uint64_t v40 = &a2[v39];
        uint64_t v41 = type metadata accessor for SiriRequestIdentities(0);
        uint64_t v42 = *(void *)(v41 - 8);
        uint64_t v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
        swift_retain();
        swift_retain();
        if (v43(v40, 1, v41))
        {
          uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(__dst, v40, *(void *)(*(void *)(v44 - 8) + 64));
        }
        else
        {
          uint64_t v55 = type metadata accessor for IdentifiedUser();
          uint64_t v56 = *(void *)(v55 - 8);
          uint64_t v73 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48);
          uint64_t v72 = v56;
          if (v73(v40, 1, v55))
          {
            uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(__dst, v40, *(void *)(*(void *)(v57 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v56 + 16))(__dst, v40, v55);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(__dst, 0, 1, v55);
          }
          uint64_t v58 = *(int *)(v41 + 20);
          uint64_t v59 = &__dst[v58];
          unint64_t v60 = &v40[v58];
          if (v73(&v40[v58], 1, v55))
          {
            uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v59, v60, v55);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(v59, 0, 1, v55);
          }
          *(void *)&__dst[*(int *)(v41 + 24)] = *(void *)&v40[*(int *)(v41 + 24)];
          unint64_t v62 = *(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56);
          swift_bridgeObjectRetain();
          v62(__dst, 0, 1, v41);
        }
        uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ()));
        uint64_t v64 = *(int *)(v63 + 48);
        uint64_t v65 = &a1[v64];
        os_log_type_t v66 = &a2[v64];
        uint64_t v67 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16))(v65, v66, v67);
        uint64_t v68 = *(int *)(v63 + 64);
        uint64_t v69 = &a1[v68];
        unint64_t v70 = &a2[v68];
        uint64_t v71 = *((void *)v70 + 1);
        *(void *)uint64_t v69 = *(void *)v70;
        *((void *)v69 + 1) = v71;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        uint64_t v36 = type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v37 = type metadata accessor for Input();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(a1, a2, v37);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(void *)(*(void *)(v36 - 8) + 64));
        }
        uint64_t v45 = type metadata accessor for RequestContinuation(0);
        *(void *)&a1[*(int *)(v45 + 20)] = *(void *)&a2[*(int *)(v45 + 20)];
        swift_retain();
        uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ()));
        uint64_t v47 = *(int *)(v46 + 48);
        uint64_t v48 = &a1[v47];
        unint64_t v49 = &a2[v47];
        uint64_t v50 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16))(v48, v49, v50);
        uint64_t v51 = *(int *)(v46 + 64);
        uint64_t v52 = &a1[v51];
        uint64_t v53 = &a2[v51];
        uint64_t v54 = *((void *)v53 + 1);
        *(void *)uint64_t v52 = *(void *)v53;
        *((void *)v52 + 1) = v54;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

void destroy for EncoreEngineEvent(id *a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      id v2 = *a1;

      return;
    case 1u:

      unint64_t v3 = &demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ());
      goto LABEL_19;
    case 2u:
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
      goto LABEL_20;
    case 3u:
      goto LABEL_20;
    case 4u:
      swift_bridgeObjectRelease();
      uint64_t v4 = (int *)type metadata accessor for SiriRequest(0);
      int v5 = (char *)a1 + v4[5];
      uint64_t v6 = type metadata accessor for Input();
      (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
      swift_release();
      uint64_t v7 = (uint64_t *)((char *)a1 + v4[7]);
      unint64_t v8 = v7[1];
      if (v8 >> 60 != 15) {
        outlined consume of Data._Representation(*v7, v8);
      }
      swift_release();
      swift_release();
      uint64_t v9 = (char *)a1 + v4[10];
      uint64_t v10 = type metadata accessor for SiriRequestIdentities(0);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
      {
        uint64_t v11 = type metadata accessor for IdentifiedUser();
        uint64_t v12 = *(void *)(v11 - 8);
        uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
        if (!v13(v9, 1, v11)) {
          (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
        }
        uint64_t v14 = &v9[*(int *)(v10 + 20)];
        if (!v13(v14, 1, v11)) {
          (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
        }
        swift_bridgeObjectRelease();
      }
      unint64_t v3 = &demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ());
      goto LABEL_19;
    case 5u:
      type metadata accessor for UserInputResult();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v15 = type metadata accessor for Input();
        (*(void (**)(id *, uint64_t))(*(void *)(v15 - 8) + 8))(a1, v15);
      }
      type metadata accessor for RequestContinuation(0);
      swift_release();
      unint64_t v3 = &demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ());
LABEL_19:
      uint64_t v16 = (char *)a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(v3) + 48);
      uint64_t v17 = type metadata accessor for ConversationContext();
      (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
LABEL_20:
      swift_release();
      break;
    default:
      return;
  }
}

char *initializeWithCopy for EncoreEngineEvent(char *a1, char *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      id v7 = v6;
      goto LABEL_24;
    case 1u:
      unint64_t v8 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      id v9 = v8;
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ()));
      uint64_t v11 = *(int *)(v10 + 48);
      uint64_t v12 = &a1[v11];
      uint64_t v13 = &a2[v11];
      uint64_t v14 = type metadata accessor for ConversationContext();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      uint64_t v15 = *(int *)(v10 + 64);
      uint64_t v16 = &a1[v15];
      uint64_t v17 = &a2[v15];
      uint64_t v18 = *((void *)v17 + 1);
      *(void *)uint64_t v16 = *(void *)v17;
      *((void *)v16 + 1) = v18;
      swift_retain();
      goto LABEL_24;
    case 2u:
      long long v19 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v19;
      (**(void (***)(void *, const void *))(v19 - 8))(a1, a2);
      uint64_t v20 = *((void *)a2 + 6);
      *((void *)a1 + 5) = *((void *)a2 + 5);
      *((void *)a1 + 6) = v20;
      swift_retain();
      goto LABEL_24;
    case 3u:
      uint64_t v21 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v21;
      swift_retain();
      goto LABEL_24;
    case 4u:
      uint64_t v22 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v22;
      uint64_t v23 = (int *)type metadata accessor for SiriRequest(0);
      uint64_t v24 = v23[5];
      uint64_t v25 = &a1[v24];
      Swift::String v26 = &a2[v24];
      uint64_t v27 = type metadata accessor for Input();
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16);
      swift_bridgeObjectRetain();
      v28(v25, v26, v27);
      *(void *)&a1[v23[6]] = *(void *)&a2[v23[6]];
      uint64_t v29 = v23[7];
      uint64_t v30 = &a1[v29];
      unint64_t v31 = &a2[v29];
      unint64_t v32 = *(void *)&a2[v29 + 8];
      swift_retain();
      if (v32 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
      }
      else
      {
        uint64_t v35 = *(void *)v31;
        outlined copy of Data._Representation(v35, v32);
        *(void *)uint64_t v30 = v35;
        *((void *)v30 + 1) = v32;
      }
      *(void *)&a1[v23[8]] = *(void *)&a2[v23[8]];
      *(void *)&a1[v23[9]] = *(void *)&a2[v23[9]];
      uint64_t v36 = v23[10];
      __dst = &a1[v36];
      uint64_t v37 = &a2[v36];
      uint64_t v38 = type metadata accessor for SiriRequestIdentities(0);
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
      swift_retain();
      swift_retain();
      if (v40(v37, 1, v38))
      {
        uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
        memcpy(__dst, v37, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        uint64_t v52 = type metadata accessor for IdentifiedUser();
        uint64_t v53 = *(void *)(v52 - 8);
        uint64_t v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48);
        uint64_t v70 = v53;
        if (v71(v37, 1, v52))
        {
          uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(__dst, v37, *(void *)(*(void *)(v54 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v53 + 16))(__dst, v37, v52);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(__dst, 0, 1, v52);
        }
        uint64_t v55 = *(int *)(v38 + 20);
        uint64_t v56 = &__dst[v55];
        uint64_t v57 = &v37[v55];
        if (v71(&v37[v55], 1, v52))
        {
          uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v56, v57, v52);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(v56, 0, 1, v52);
        }
        *(void *)&__dst[*(int *)(v38 + 24)] = *(void *)&v37[*(int *)(v38 + 24)];
        uint64_t v59 = *(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56);
        swift_bridgeObjectRetain();
        v59(__dst, 0, 1, v38);
      }
      uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ()));
      uint64_t v61 = *(int *)(v60 + 48);
      unint64_t v62 = &a1[v61];
      uint64_t v63 = &a2[v61];
      uint64_t v64 = type metadata accessor for ConversationContext();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16))(v62, v63, v64);
      uint64_t v65 = *(int *)(v60 + 64);
      os_log_type_t v66 = &a1[v65];
      uint64_t v67 = &a2[v65];
      uint64_t v68 = *((void *)v67 + 1);
      *(void *)os_log_type_t v66 = *(void *)v67;
      *((void *)v66 + 1) = v68;
      swift_retain();
      goto LABEL_24;
    case 5u:
      uint64_t v33 = type metadata accessor for UserInputResult();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v34 = type metadata accessor for Input();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(a1, a2, v34);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v33 - 8) + 64));
      }
      uint64_t v42 = type metadata accessor for RequestContinuation(0);
      *(void *)&a1[*(int *)(v42 + 20)] = *(void *)&a2[*(int *)(v42 + 20)];
      swift_retain();
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ()));
      uint64_t v44 = *(int *)(v43 + 48);
      uint64_t v45 = &a1[v44];
      uint64_t v46 = &a2[v44];
      uint64_t v47 = type metadata accessor for ConversationContext();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 16))(v45, v46, v47);
      uint64_t v48 = *(int *)(v43 + 64);
      unint64_t v49 = &a1[v48];
      uint64_t v50 = &a2[v48];
      uint64_t v51 = *((void *)v50 + 1);
      *(void *)unint64_t v49 = *(void *)v50;
      *((void *)v49 + 1) = v51;
      swift_retain();
LABEL_24:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void **assignWithCopy for EncoreEngineEvent(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of EncoreEngine.EngineEvent((uint64_t)a1, type metadata accessor for EncoreEngineEvent);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = *a2;
        *a1 = *a2;
        id v7 = v6;
        goto LABEL_25;
      case 1u:
        unint64_t v8 = *a2;
        *a1 = *a2;
        id v9 = v8;
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ()));
        uint64_t v11 = *(int *)(v10 + 48);
        uint64_t v12 = (char *)a1 + v11;
        uint64_t v13 = (char *)a2 + v11;
        uint64_t v14 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
        uint64_t v15 = *(int *)(v10 + 64);
        uint64_t v16 = (void **)((char *)a1 + v15);
        uint64_t v17 = (void **)((char *)a2 + v15);
        uint64_t v18 = v17[1];
        *uint64_t v16 = *v17;
        v16[1] = v18;
        swift_retain();
        goto LABEL_25;
      case 2u:
        long long v19 = a2[3];
        a1[3] = v19;
        a1[4] = a2[4];
        (**((void (***)(void **, const void *))v19 - 1))(a1, a2);
        uint64_t v20 = a2[6];
        a1[5] = a2[5];
        a1[6] = v20;
        swift_retain();
        goto LABEL_25;
      case 3u:
        uint64_t v21 = a2[1];
        *a1 = *a2;
        a1[1] = v21;
        swift_retain();
        goto LABEL_25;
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v22 = (int *)type metadata accessor for SiriRequest(0);
        uint64_t v23 = v22[5];
        uint64_t v24 = (char *)a1 + v23;
        uint64_t v25 = (char *)a2 + v23;
        uint64_t v26 = type metadata accessor for Input();
        uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16);
        swift_bridgeObjectRetain();
        v27(v24, v25, v26);
        *(void **)((char *)a1 + v22[6]) = *(void **)((char *)a2 + v22[6]);
        uint64_t v28 = v22[7];
        uint64_t v29 = (char *)a1 + v28;
        uint64_t v30 = (_OWORD *)((char *)a2 + v28);
        unint64_t v31 = *(unint64_t *)((char *)a2 + v28 + 8);
        swift_retain();
        if (v31 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v29 = *v30;
        }
        else
        {
          uint64_t v34 = *(void *)v30;
          outlined copy of Data._Representation(v34, v31);
          *(void *)uint64_t v29 = v34;
          *((void *)v29 + 1) = v31;
        }
        *(void **)((char *)a1 + v22[8]) = *(void **)((char *)a2 + v22[8]);
        *(void **)((char *)a1 + v22[9]) = *(void **)((char *)a2 + v22[9]);
        uint64_t v35 = v22[10];
        __dst = (char *)a1 + v35;
        uint64_t v36 = (char *)a2 + v35;
        uint64_t v37 = type metadata accessor for SiriRequestIdentities(0);
        uint64_t v38 = *(void *)(v37 - 8);
        uint64_t v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
        swift_retain();
        swift_retain();
        if (v39(v36, 1, v37))
        {
          uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(__dst, v36, *(void *)(*(void *)(v40 - 8) + 64));
        }
        else
        {
          uint64_t v51 = type metadata accessor for IdentifiedUser();
          uint64_t v52 = *(void *)(v51 - 8);
          uint64_t v70 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
          uint64_t v69 = v52;
          if (v70(v36, 1, v51))
          {
            uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(__dst, v36, *(void *)(*(void *)(v53 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v52 + 16))(__dst, v36, v51);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(__dst, 0, 1, v51);
          }
          uint64_t v54 = *(int *)(v37 + 20);
          uint64_t v55 = &__dst[v54];
          uint64_t v56 = &v36[v54];
          if (v70(&v36[v54], 1, v51))
          {
            uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v55, v56, v51);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56))(v55, 0, 1, v51);
          }
          *(void *)&__dst[*(int *)(v37 + 24)] = *(void *)&v36[*(int *)(v37 + 24)];
          uint64_t v58 = *(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56);
          swift_bridgeObjectRetain();
          v58(__dst, 0, 1, v37);
        }
        uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ()));
        uint64_t v60 = *(int *)(v59 + 48);
        uint64_t v61 = (char *)a1 + v60;
        unint64_t v62 = (char *)a2 + v60;
        uint64_t v63 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 16))(v61, v62, v63);
        uint64_t v64 = *(int *)(v59 + 64);
        uint64_t v65 = (void **)((char *)a1 + v64);
        os_log_type_t v66 = (void **)((char *)a2 + v64);
        uint64_t v67 = v66[1];
        *uint64_t v65 = *v66;
        v65[1] = v67;
        swift_retain();
        goto LABEL_25;
      case 5u:
        uint64_t v32 = type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v33 = type metadata accessor for Input();
          (*(void (**)(void **, void **, uint64_t))(*(void *)(v33 - 8) + 16))(a1, a2, v33);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(void *)(*(void *)(v32 - 8) + 64));
        }
        uint64_t v41 = type metadata accessor for RequestContinuation(0);
        *(void **)((char *)a1 + *(int *)(v41 + 20)) = *(void **)((char *)a2 + *(int *)(v41 + 20));
        swift_retain();
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ()));
        uint64_t v43 = *(int *)(v42 + 48);
        uint64_t v44 = (char *)a1 + v43;
        uint64_t v45 = (char *)a2 + v43;
        uint64_t v46 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16))(v44, v45, v46);
        uint64_t v47 = *(int *)(v42 + 64);
        uint64_t v48 = (void **)((char *)a1 + v47);
        unint64_t v49 = (void **)((char *)a2 + v47);
        uint64_t v50 = v49[1];
        *uint64_t v48 = *v49;
        v48[1] = v50;
        swift_retain();
LABEL_25:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_OWORD *initializeWithTake for EncoreEngineEvent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 5:
      uint64_t v12 = type metadata accessor for UserInputResult();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v13 = type metadata accessor for Input();
        (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
      }
      uint64_t v25 = type metadata accessor for RequestContinuation(0);
      *(void *)((char *)a1 + *(int *)(v25 + 20)) = *(void *)((char *)a2 + *(int *)(v25 + 20));
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ()));
      uint64_t v27 = *(int *)(v26 + 48);
      uint64_t v28 = (char *)a1 + v27;
      uint64_t v29 = (char *)a2 + v27;
      uint64_t v30 = type metadata accessor for ConversationContext();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v28, v29, v30);
      *(_OWORD *)((char *)a1 + *(int *)(v26 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v26 + 64));
      goto LABEL_20;
    case 4:
      *a1 = *a2;
      uint64_t v14 = (int *)type metadata accessor for SiriRequest(0);
      uint64_t v15 = v14[5];
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = type metadata accessor for Input();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
      *(void *)((char *)a1 + v14[6]) = *(void *)((char *)a2 + v14[6]);
      *(_OWORD *)((char *)a1 + v14[7]) = *(_OWORD *)((char *)a2 + v14[7]);
      *(void *)((char *)a1 + v14[8]) = *(void *)((char *)a2 + v14[8]);
      *(void *)((char *)a1 + v14[9]) = *(void *)((char *)a2 + v14[9]);
      uint64_t v19 = v14[10];
      uint64_t v20 = (char *)a1 + v19;
      uint64_t v21 = (char *)a2 + v19;
      uint64_t v22 = type metadata accessor for SiriRequestIdentities(0);
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
        memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        uint64_t v31 = type metadata accessor for IdentifiedUser();
        uint64_t v32 = *(void *)(v31 - 8);
        uint64_t v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
        uint64_t v43 = v32;
        if (v44(v21, 1, v31))
        {
          uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(v20, v21, *(void *)(*(void *)(v33 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v20, v21, v31);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v20, 0, 1, v31);
        }
        uint64_t v34 = *(int *)(v22 + 20);
        __dst = &v20[v34];
        uint64_t v35 = &v21[v34];
        if (v44(&v21[v34], 1, v31))
        {
          uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(__dst, v35, *(void *)(*(void *)(v36 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v43 + 32))(__dst, v35, v31);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(__dst, 0, 1, v31);
        }
        *(void *)&v20[*(int *)(v22 + 24)] = *(void *)&v21[*(int *)(v22 + 24)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ()));
      uint64_t v38 = *(int *)(v37 + 48);
      uint64_t v39 = (char *)a1 + v38;
      uint64_t v40 = (char *)a2 + v38;
      uint64_t v41 = type metadata accessor for ConversationContext();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32))(v39, v40, v41);
      *(_OWORD *)((char *)a1 + *(int *)(v37 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v37 + 64));
      goto LABEL_20;
    case 1:
      *(void *)a1 = *(void *)a2;
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ()));
      uint64_t v8 = *(int *)(v7 + 48);
      id v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for ConversationContext();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      *(_OWORD *)((char *)a1 + *(int *)(v7 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 64));
LABEL_20:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

_OWORD *assignWithTake for EncoreEngineEvent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of EncoreEngine.EngineEvent((uint64_t)a1, type metadata accessor for EncoreEngineEvent);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 5:
        uint64_t v12 = type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v13 = type metadata accessor for Input();
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v13 - 8) + 32))(a1, a2, v13);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
        }
        uint64_t v25 = type metadata accessor for RequestContinuation(0);
        *(void *)((char *)a1 + *(int *)(v25 + 20)) = *(void *)((char *)a2 + *(int *)(v25 + 20));
        uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ()));
        uint64_t v27 = *(int *)(v26 + 48);
        uint64_t v28 = (char *)a1 + v27;
        uint64_t v29 = (char *)a2 + v27;
        uint64_t v30 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v28, v29, v30);
        *(_OWORD *)((char *)a1 + *(int *)(v26 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v26 + 64));
        goto LABEL_21;
      case 4:
        *a1 = *a2;
        uint64_t v14 = (int *)type metadata accessor for SiriRequest(0);
        uint64_t v15 = v14[5];
        uint64_t v16 = (char *)a1 + v15;
        uint64_t v17 = (char *)a2 + v15;
        uint64_t v18 = type metadata accessor for Input();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
        *(void *)((char *)a1 + v14[6]) = *(void *)((char *)a2 + v14[6]);
        *(_OWORD *)((char *)a1 + v14[7]) = *(_OWORD *)((char *)a2 + v14[7]);
        *(void *)((char *)a1 + v14[8]) = *(void *)((char *)a2 + v14[8]);
        *(void *)((char *)a1 + v14[9]) = *(void *)((char *)a2 + v14[9]);
        uint64_t v19 = v14[10];
        uint64_t v20 = (char *)a1 + v19;
        uint64_t v21 = (char *)a2 + v19;
        uint64_t v22 = type metadata accessor for SiriRequestIdentities(0);
        uint64_t v23 = *(void *)(v22 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
        {
          uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
        }
        else
        {
          uint64_t v31 = type metadata accessor for IdentifiedUser();
          uint64_t v32 = *(void *)(v31 - 8);
          uint64_t v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
          uint64_t v43 = v32;
          if (v44(v21, 1, v31))
          {
            uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v20, v21, *(void *)(*(void *)(v33 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v20, v21, v31);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v20, 0, 1, v31);
          }
          uint64_t v34 = *(int *)(v22 + 20);
          __dst = &v20[v34];
          uint64_t v35 = &v21[v34];
          if (v44(&v21[v34], 1, v31))
          {
            uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(__dst, v35, *(void *)(*(void *)(v36 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v43 + 32))(__dst, v35, v31);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(__dst, 0, 1, v31);
          }
          *(void *)&v20[*(int *)(v22 + 24)] = *(void *)&v21[*(int *)(v22 + 24)];
          (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
        }
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ()));
        uint64_t v38 = *(int *)(v37 + 48);
        uint64_t v39 = (char *)a1 + v38;
        uint64_t v40 = (char *)a2 + v38;
        uint64_t v41 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 32))(v39, v40, v41);
        *(_OWORD *)((char *)a1 + *(int *)(v37 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v37 + 64));
        goto LABEL_21;
      case 1:
        *(void *)a1 = *(void *)a2;
        uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ()));
        uint64_t v8 = *(int *)(v7 + 48);
        id v9 = (char *)a1 + v8;
        uint64_t v10 = (char *)a2 + v8;
        uint64_t v11 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
        *(_OWORD *)((char *)a1 + *(int *)(v7 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 64));
LABEL_21:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t type metadata completion function for EncoreEngineEvent()
{
  uint64_t v8 = MEMORY[0x1E4FBAD78] + 64;
  uint64_t result = type metadata accessor for ConversationContext();
  if (v1 <= 0x3F)
  {
    uint64_t v2 = MEMORY[0x1E4FBC858] + 64;
    swift_getTupleTypeLayout3();
    id v9 = &v7;
    uint64_t v10 = "8";
    uint64_t v11 = v2;
    uint64_t result = type metadata accessor for SiriRequest(319);
    if (v3 <= 0x3F)
    {
      swift_getTupleTypeLayout3();
      uint64_t v12 = &v6;
      uint64_t result = type metadata accessor for RequestContinuation(319);
      if (v4 <= 0x3F)
      {
        swift_getTupleTypeLayout3();
        uint64_t v13 = &v5;
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t method lookup function for ActingFlowAgent(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ActingFlowAgent);
}

uint64_t dispatch thunk of ActingFlowAgent.__allocating_init(flow:environment:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t ObjC metadata update function for ExecutableTask()
{
  return type metadata accessor for ExecutableTask(0);
}

uint64_t type metadata accessor for ExecutableTask(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for ExecutableTask);
}

uint64_t type metadata completion function for ExecutableTask()
{
  uint64_t result = type metadata accessor for ConversationContext();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ExecutableTask(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ExecutableTask);
}

uint64_t dispatch thunk of ExecutableTask.__allocating_init(executingNode:context:runningTask:actionCompletion:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t type metadata accessor for EncoreEngine()
{
  return self;
}

uint64_t method lookup function for EncoreEngine(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for EncoreEngine);
}

uint64_t dispatch thunk of EncoreEngine.__allocating_init(rootEnvironment:snippetManager:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

void *initializeBufferWithCopyOfBuffer for EncoreEngine.InternalEvent(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

void *assignWithCopy for EncoreEngine.InternalEvent(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for EncoreEngine.InternalEvent(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for EncoreEngine.InternalEvent(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 8)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EncoreEngine.InternalEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EncoreEngine.InternalEvent()
{
  return &type metadata for EncoreEngine.InternalEvent;
}

char *initializeBufferWithCopyOfBuffer for EncoreEngine.EngineEvent(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    char v6 = *(char **)a2;
    *(void *)a1 = *(void *)a2;
    a1 = &v6[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(void *)a1 = *(void *)a2;
      swift_retain();
    }
    else
    {
      uint64_t v7 = type metadata accessor for EncoreEngineEvent(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v8 = *(char **)a2;
          *(void *)a1 = *(void *)a2;
          id v9 = v8;
          goto LABEL_28;
        case 1u:
          uint64_t v10 = *(char **)a2;
          *(void *)a1 = *(void *)a2;
          uint64_t v11 = v10;
          uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ()));
          uint64_t v13 = *(int *)(v12 + 48);
          uint64_t v14 = &a1[v13];
          uint64_t v15 = &a2[v13];
          uint64_t v16 = type metadata accessor for ConversationContext();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
          uint64_t v17 = *(int *)(v12 + 64);
          uint64_t v18 = &a1[v17];
          uint64_t v19 = &a2[v17];
          uint64_t v20 = *((void *)v19 + 1);
          *(void *)uint64_t v18 = *(void *)v19;
          *((void *)v18 + 1) = v20;
          swift_retain();
          goto LABEL_28;
        case 2u:
          long long v21 = *(_OWORD *)(a2 + 24);
          *(_OWORD *)(a1 + 24) = v21;
          (**(void (***)(void *, const void *))(v21 - 8))(a1, a2);
          uint64_t v22 = *((void *)a2 + 6);
          *((void *)a1 + 5) = *((void *)a2 + 5);
          *((void *)a1 + 6) = v22;
          swift_retain();
          goto LABEL_28;
        case 3u:
          uint64_t v23 = *((void *)a2 + 1);
          *(void *)a1 = *(void *)a2;
          *((void *)a1 + 1) = v23;
          swift_retain();
          goto LABEL_28;
        case 4u:
          uint64_t v24 = *((void *)a2 + 1);
          *(void *)a1 = *(void *)a2;
          *((void *)a1 + 1) = v24;
          uint64_t v25 = (int *)type metadata accessor for SiriRequest(0);
          uint64_t v26 = v25[5];
          uint64_t v27 = &a1[v26];
          uint64_t v28 = &a2[v26];
          uint64_t v29 = type metadata accessor for Input();
          uint64_t v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16);
          swift_bridgeObjectRetain();
          v30(v27, v28, v29);
          *(void *)&a1[v25[6]] = *(void *)&a2[v25[6]];
          uint64_t v31 = v25[7];
          uint64_t v32 = &a1[v31];
          uint64_t v33 = &a2[v31];
          unint64_t v34 = *(void *)&a2[v31 + 8];
          swift_retain();
          if (v34 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
          }
          else
          {
            uint64_t v37 = *(void *)v33;
            outlined copy of Data._Representation(v37, v34);
            *(void *)uint64_t v32 = v37;
            *((void *)v32 + 1) = v34;
          }
          *(void *)&a1[v25[8]] = *(void *)&a2[v25[8]];
          *(void *)&a1[v25[9]] = *(void *)&a2[v25[9]];
          uint64_t v38 = v25[10];
          __dst = &a1[v38];
          uint64_t v39 = &a2[v38];
          uint64_t v40 = type metadata accessor for SiriRequestIdentities(0);
          uint64_t v41 = *(void *)(v40 - 8);
          uint64_t v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
          swift_retain();
          swift_retain();
          if (v42(v39, 1, v40))
          {
            uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
            memcpy(__dst, v39, *(void *)(*(void *)(v43 - 8) + 64));
          }
          else
          {
            uint64_t v75 = v41;
            uint64_t v54 = type metadata accessor for IdentifiedUser();
            uint64_t v55 = *(void *)(v54 - 8);
            uint64_t v74 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
            uint64_t v56 = v39;
            if (v74(v39, 1, v54))
            {
              uint64_t v57 = v55;
              uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
              memcpy(__dst, v56, *(void *)(*(void *)(v58 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v55 + 16))(__dst, v39, v54);
              uint64_t v57 = v55;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(__dst, 0, 1, v54);
            }
            uint64_t v59 = *(int *)(v40 + 20);
            uint64_t v60 = &__dst[v59];
            uint64_t v61 = &v56[v59];
            if (v74(&v56[v59], 1, v54))
            {
              uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
              memcpy(v60, v61, *(void *)(*(void *)(v62 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v60, v61, v54);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v60, 0, 1, v54);
            }
            *(void *)&__dst[*(int *)(v40 + 24)] = *(void *)&v56[*(int *)(v40 + 24)];
            uint64_t v63 = *(void (**)(char *, void, uint64_t, uint64_t))(v75 + 56);
            swift_bridgeObjectRetain();
            v63(__dst, 0, 1, v40);
          }
          uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ()));
          uint64_t v65 = *(int *)(v64 + 48);
          os_log_type_t v66 = &a1[v65];
          uint64_t v67 = &a2[v65];
          uint64_t v68 = type metadata accessor for ConversationContext();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 16))(v66, v67, v68);
          uint64_t v69 = *(int *)(v64 + 64);
          uint64_t v70 = &a1[v69];
          uint64_t v71 = &a2[v69];
          uint64_t v72 = *((void *)v71 + 1);
          *(void *)uint64_t v70 = *(void *)v71;
          *((void *)v70 + 1) = v72;
          swift_retain();
          goto LABEL_28;
        case 5u:
          uint64_t v35 = type metadata accessor for UserInputResult();
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            uint64_t v36 = type metadata accessor for Input();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(a1, a2, v36);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(a1, a2, *(void *)(*(void *)(v35 - 8) + 64));
          }
          uint64_t v44 = type metadata accessor for RequestContinuation(0);
          *(void *)&a1[*(int *)(v44 + 20)] = *(void *)&a2[*(int *)(v44 + 20)];
          swift_retain();
          uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ()));
          uint64_t v46 = *(int *)(v45 + 48);
          uint64_t v47 = &a1[v46];
          uint64_t v48 = &a2[v46];
          uint64_t v49 = type metadata accessor for ConversationContext();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16))(v47, v48, v49);
          uint64_t v50 = *(int *)(v45 + 64);
          uint64_t v51 = &a1[v50];
          uint64_t v52 = &a2[v50];
          uint64_t v53 = *((void *)v52 + 1);
          *(void *)uint64_t v51 = *(void *)v52;
          *((void *)v51 + 1) = v53;
          swift_retain();
LABEL_28:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
          break;
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for EncoreEngine.EngineEvent(id *a1)
{
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    type metadata accessor for EncoreEngineEvent(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        id v2 = *a1;

        return;
      case 1u:

        unint64_t v3 = &demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ());
        goto LABEL_20;
      case 2u:
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
        break;
      case 3u:
        break;
      case 4u:
        swift_bridgeObjectRelease();
        unint64_t v4 = (int *)type metadata accessor for SiriRequest(0);
        int v5 = (char *)a1 + v4[5];
        uint64_t v6 = type metadata accessor for Input();
        (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
        swift_release();
        uint64_t v7 = (uint64_t *)((char *)a1 + v4[7]);
        unint64_t v8 = v7[1];
        if (v8 >> 60 != 15) {
          outlined consume of Data._Representation(*v7, v8);
        }
        swift_release();
        swift_release();
        id v9 = (char *)a1 + v4[10];
        uint64_t v10 = type metadata accessor for SiriRequestIdentities(0);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
        {
          uint64_t v11 = type metadata accessor for IdentifiedUser();
          uint64_t v12 = *(void *)(v11 - 8);
          uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
          if (!v13(v9, 1, v11)) {
            (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
          }
          uint64_t v14 = &v9[*(int *)(v10 + 20)];
          if (!v13(v14, 1, v11)) {
            (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
          }
          swift_bridgeObjectRelease();
        }
        unint64_t v3 = &demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ());
        goto LABEL_20;
      case 5u:
        type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v15 = type metadata accessor for Input();
          (*(void (**)(id *, uint64_t))(*(void *)(v15 - 8) + 8))(a1, v15);
        }
        type metadata accessor for RequestContinuation(0);
        swift_release();
        unint64_t v3 = &demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ());
LABEL_20:
        uint64_t v16 = (char *)a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(v3) + 48);
        uint64_t v17 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
        break;
      default:
        return;
    }
  }

  swift_release();
}

char *initializeWithCopy for EncoreEngine.EngineEvent(char *a1, char *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(void *)a1 = *(void *)a2;
    swift_retain();
  }
  else
  {
    uint64_t v4 = type metadata accessor for EncoreEngineEvent(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        int v5 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        id v6 = v5;
        goto LABEL_26;
      case 1u:
        uint64_t v7 = *(void **)a2;
        *(void *)a1 = *(void *)a2;
        id v8 = v7;
        uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ()));
        uint64_t v10 = *(int *)(v9 + 48);
        uint64_t v11 = &a1[v10];
        uint64_t v12 = &a2[v10];
        uint64_t v13 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
        uint64_t v14 = *(int *)(v9 + 64);
        uint64_t v15 = &a1[v14];
        uint64_t v16 = &a2[v14];
        uint64_t v17 = *((void *)v16 + 1);
        *(void *)uint64_t v15 = *(void *)v16;
        *((void *)v15 + 1) = v17;
        swift_retain();
        goto LABEL_26;
      case 2u:
        long long v18 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v18;
        (**(void (***)(void *, const void *))(v18 - 8))(a1, a2);
        uint64_t v19 = *((void *)a2 + 6);
        *((void *)a1 + 5) = *((void *)a2 + 5);
        *((void *)a1 + 6) = v19;
        swift_retain();
        goto LABEL_26;
      case 3u:
        uint64_t v20 = *((void *)a2 + 1);
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = v20;
        swift_retain();
        goto LABEL_26;
      case 4u:
        uint64_t v21 = *((void *)a2 + 1);
        *(void *)a1 = *(void *)a2;
        *((void *)a1 + 1) = v21;
        uint64_t v22 = (int *)type metadata accessor for SiriRequest(0);
        uint64_t v23 = v22[5];
        uint64_t v24 = &a1[v23];
        uint64_t v25 = &a2[v23];
        uint64_t v26 = type metadata accessor for Input();
        uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16);
        swift_bridgeObjectRetain();
        v27(v24, v25, v26);
        *(void *)&a1[v22[6]] = *(void *)&a2[v22[6]];
        uint64_t v28 = v22[7];
        uint64_t v29 = &a1[v28];
        uint64_t v30 = &a2[v28];
        unint64_t v31 = *(void *)&a2[v28 + 8];
        swift_retain();
        if (v31 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
        }
        else
        {
          uint64_t v34 = *(void *)v30;
          outlined copy of Data._Representation(v34, v31);
          *(void *)uint64_t v29 = v34;
          *((void *)v29 + 1) = v31;
        }
        *(void *)&a1[v22[8]] = *(void *)&a2[v22[8]];
        *(void *)&a1[v22[9]] = *(void *)&a2[v22[9]];
        uint64_t v35 = v22[10];
        __dst = &a1[v35];
        uint64_t v36 = &a2[v35];
        uint64_t v37 = type metadata accessor for SiriRequestIdentities(0);
        uint64_t v38 = *(void *)(v37 - 8);
        uint64_t v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
        swift_retain();
        swift_retain();
        if (v39(v36, 1, v37))
        {
          uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(__dst, v36, *(void *)(*(void *)(v40 - 8) + 64));
        }
        else
        {
          uint64_t v72 = v38;
          uint64_t v51 = type metadata accessor for IdentifiedUser();
          uint64_t v52 = *(void *)(v51 - 8);
          uint64_t v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
          uint64_t v53 = v36;
          if (v71(v36, 1, v51))
          {
            uint64_t v54 = v52;
            uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(__dst, v53, *(void *)(*(void *)(v55 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v52 + 16))(__dst, v36, v51);
            uint64_t v54 = v52;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(__dst, 0, 1, v51);
          }
          uint64_t v56 = *(int *)(v37 + 20);
          uint64_t v57 = &__dst[v56];
          uint64_t v58 = &v53[v56];
          if (v71(&v53[v56], 1, v51))
          {
            uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v57, v58, v51);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v57, 0, 1, v51);
          }
          *(void *)&__dst[*(int *)(v37 + 24)] = *(void *)&v53[*(int *)(v37 + 24)];
          uint64_t v60 = *(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56);
          swift_bridgeObjectRetain();
          v60(__dst, 0, 1, v37);
        }
        uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ()));
        uint64_t v62 = *(int *)(v61 + 48);
        uint64_t v63 = &a1[v62];
        uint64_t v64 = &a2[v62];
        uint64_t v65 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 16))(v63, v64, v65);
        uint64_t v66 = *(int *)(v61 + 64);
        uint64_t v67 = &a1[v66];
        uint64_t v68 = &a2[v66];
        uint64_t v69 = *((void *)v68 + 1);
        *(void *)uint64_t v67 = *(void *)v68;
        *((void *)v67 + 1) = v69;
        swift_retain();
        goto LABEL_26;
      case 5u:
        uint64_t v32 = type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v33 = type metadata accessor for Input();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16))(a1, a2, v33);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(void *)(*(void *)(v32 - 8) + 64));
        }
        uint64_t v41 = type metadata accessor for RequestContinuation(0);
        *(void *)&a1[*(int *)(v41 + 20)] = *(void *)&a2[*(int *)(v41 + 20)];
        swift_retain();
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ()));
        uint64_t v43 = *(int *)(v42 + 48);
        uint64_t v44 = &a1[v43];
        uint64_t v45 = &a2[v43];
        uint64_t v46 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16))(v44, v45, v46);
        uint64_t v47 = *(int *)(v42 + 64);
        uint64_t v48 = &a1[v47];
        uint64_t v49 = &a2[v47];
        uint64_t v50 = *((void *)v49 + 1);
        *(void *)uint64_t v48 = *(void *)v49;
        *((void *)v48 + 1) = v50;
        swift_retain();
LABEL_26:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
        break;
    }
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for EncoreEngine.EngineEvent(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of EncoreEngine.EngineEvent((uint64_t)a1, type metadata accessor for EncoreEngine.EngineEvent);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_retain();
    }
    else
    {
      uint64_t v4 = type metadata accessor for EncoreEngineEvent(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          int v5 = (void *)*a2;
          *a1 = *a2;
          id v6 = v5;
          goto LABEL_27;
        case 1u:
          uint64_t v7 = (void *)*a2;
          *a1 = *a2;
          id v8 = v7;
          uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ()));
          uint64_t v10 = *(int *)(v9 + 48);
          uint64_t v11 = (char *)a1 + v10;
          uint64_t v12 = (char *)a2 + v10;
          uint64_t v13 = type metadata accessor for ConversationContext();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
          uint64_t v14 = *(int *)(v9 + 64);
          uint64_t v15 = (void *)((char *)a1 + v14);
          uint64_t v16 = (void *)((char *)a2 + v14);
          uint64_t v17 = v16[1];
          *uint64_t v15 = *v16;
          v15[1] = v17;
          swift_retain();
          goto LABEL_27;
        case 2u:
          uint64_t v18 = a2[3];
          a1[3] = v18;
          a1[4] = a2[4];
          (**(void (***)(void *, void *))(v18 - 8))(a1, a2);
          uint64_t v19 = a2[6];
          a1[5] = a2[5];
          a1[6] = v19;
          swift_retain();
          goto LABEL_27;
        case 3u:
          uint64_t v20 = a2[1];
          *a1 = *a2;
          a1[1] = v20;
          swift_retain();
          goto LABEL_27;
        case 4u:
          *a1 = *a2;
          a1[1] = a2[1];
          uint64_t v21 = (int *)type metadata accessor for SiriRequest(0);
          uint64_t v22 = v21[5];
          uint64_t v23 = (char *)a1 + v22;
          uint64_t v24 = (char *)a2 + v22;
          uint64_t v25 = type metadata accessor for Input();
          uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16);
          swift_bridgeObjectRetain();
          v26(v23, v24, v25);
          *(void *)((char *)a1 + v21[6]) = *(void *)((char *)a2 + v21[6]);
          uint64_t v27 = v21[7];
          uint64_t v28 = (char *)a1 + v27;
          uint64_t v29 = (_OWORD *)((char *)a2 + v27);
          unint64_t v30 = *(void *)((char *)a2 + v27 + 8);
          swift_retain();
          if (v30 >> 60 == 15)
          {
            *(_OWORD *)uint64_t v28 = *v29;
          }
          else
          {
            uint64_t v33 = *(void *)v29;
            outlined copy of Data._Representation(v33, v30);
            *(void *)uint64_t v28 = v33;
            *((void *)v28 + 1) = v30;
          }
          *(void *)((char *)a1 + v21[8]) = *(void *)((char *)a2 + v21[8]);
          *(void *)((char *)a1 + v21[9]) = *(void *)((char *)a2 + v21[9]);
          uint64_t v34 = v21[10];
          __dst = (char *)a1 + v34;
          uint64_t v35 = (char *)a2 + v34;
          uint64_t v36 = type metadata accessor for SiriRequestIdentities(0);
          uint64_t v37 = *(void *)(v36 - 8);
          uint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
          swift_retain();
          swift_retain();
          if (v38(v35, 1, v36))
          {
            uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
            memcpy(__dst, v35, *(void *)(*(void *)(v39 - 8) + 64));
          }
          else
          {
            uint64_t v71 = v37;
            uint64_t v50 = type metadata accessor for IdentifiedUser();
            uint64_t v51 = *(void *)(v50 - 8);
            uint64_t v70 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48);
            uint64_t v52 = v35;
            if (v70(v35, 1, v50))
            {
              uint64_t v53 = v51;
              uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
              memcpy(__dst, v52, *(void *)(*(void *)(v54 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v51 + 16))(__dst, v35, v50);
              uint64_t v53 = v51;
              (*(void (**)(char *, void, uint64_t, uint64_t))(v51 + 56))(__dst, 0, 1, v50);
            }
            uint64_t v55 = *(int *)(v36 + 20);
            uint64_t v56 = &__dst[v55];
            uint64_t v57 = &v52[v55];
            if (v70(&v52[v55], 1, v50))
            {
              uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
              memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64));
            }
            else
            {
              (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v56, v57, v50);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v56, 0, 1, v50);
            }
            *(void *)&__dst[*(int *)(v36 + 24)] = *(void *)&v52[*(int *)(v36 + 24)];
            uint64_t v59 = *(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56);
            swift_bridgeObjectRetain();
            v59(__dst, 0, 1, v36);
          }
          uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ()));
          uint64_t v61 = *(int *)(v60 + 48);
          uint64_t v62 = (char *)a1 + v61;
          uint64_t v63 = (char *)a2 + v61;
          uint64_t v64 = type metadata accessor for ConversationContext();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v64 - 8) + 16))(v62, v63, v64);
          uint64_t v65 = *(int *)(v60 + 64);
          uint64_t v66 = (void *)((char *)a1 + v65);
          uint64_t v67 = (void *)((char *)a2 + v65);
          uint64_t v68 = v67[1];
          void *v66 = *v67;
          v66[1] = v68;
          swift_retain();
          goto LABEL_27;
        case 5u:
          uint64_t v31 = type metadata accessor for UserInputResult();
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            uint64_t v32 = type metadata accessor for Input();
            (*(void (**)(void *, void *, uint64_t))(*(void *)(v32 - 8) + 16))(a1, a2, v32);
            swift_storeEnumTagMultiPayload();
          }
          else
          {
            memcpy(a1, a2, *(void *)(*(void *)(v31 - 8) + 64));
          }
          uint64_t v40 = type metadata accessor for RequestContinuation(0);
          *(void *)((char *)a1 + *(int *)(v40 + 20)) = *(void *)((char *)a2 + *(int *)(v40 + 20));
          swift_retain();
          uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ()));
          uint64_t v42 = *(int *)(v41 + 48);
          uint64_t v43 = (char *)a1 + v42;
          uint64_t v44 = (char *)a2 + v42;
          uint64_t v45 = type metadata accessor for ConversationContext();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16))(v43, v44, v45);
          uint64_t v46 = *(int *)(v41 + 64);
          uint64_t v47 = (void *)((char *)a1 + v46);
          uint64_t v48 = (void *)((char *)a2 + v46);
          uint64_t v49 = v48[1];
          *uint64_t v47 = *v48;
          v47[1] = v49;
          swift_retain();
LABEL_27:
          swift_storeEnumTagMultiPayload();
          break;
        default:
          memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
          break;
      }
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for EncoreEngine.EngineEvent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (!swift_getEnumCaseMultiPayload())
  {
    uint64_t v6 = type metadata accessor for EncoreEngineEvent(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 5:
        uint64_t v13 = type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v14 = type metadata accessor for Input();
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
        }
        uint64_t v26 = type metadata accessor for RequestContinuation(0);
        *(void *)((char *)a1 + *(int *)(v26 + 20)) = *(void *)((char *)a2 + *(int *)(v26 + 20));
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ()));
        uint64_t v28 = *(int *)(v27 + 48);
        uint64_t v29 = (char *)a1 + v28;
        unint64_t v30 = (char *)a2 + v28;
        uint64_t v31 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 32))(v29, v30, v31);
        *(_OWORD *)((char *)a1 + *(int *)(v27 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v27 + 64));
        break;
      case 4:
        *a1 = *a2;
        uint64_t v15 = (int *)type metadata accessor for SiriRequest(0);
        uint64_t v16 = v15[5];
        uint64_t v17 = (char *)a1 + v16;
        uint64_t v18 = (char *)a2 + v16;
        uint64_t v19 = type metadata accessor for Input();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
        *(void *)((char *)a1 + v15[6]) = *(void *)((char *)a2 + v15[6]);
        *(_OWORD *)((char *)a1 + v15[7]) = *(_OWORD *)((char *)a2 + v15[7]);
        *(void *)((char *)a1 + v15[8]) = *(void *)((char *)a2 + v15[8]);
        *(void *)((char *)a1 + v15[9]) = *(void *)((char *)a2 + v15[9]);
        uint64_t v20 = v15[10];
        uint64_t v21 = (char *)a1 + v20;
        uint64_t v22 = (char *)a2 + v20;
        uint64_t v23 = type metadata accessor for SiriRequestIdentities(0);
        uint64_t v24 = *(void *)(v23 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
        {
          uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
        }
        else
        {
          __dst = v21;
          uint64_t v32 = type metadata accessor for IdentifiedUser();
          uint64_t v33 = *(void *)(v32 - 8);
          uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
          uint64_t v47 = v33;
          if (v34(v22, 1, v32))
          {
            uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            uint64_t v36 = __dst;
            memcpy(__dst, v22, *(void *)(*(void *)(v35 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v33 + 32))(__dst, v22, v32);
            uint64_t v37 = v33;
            uint64_t v36 = __dst;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(__dst, 0, 1, v32);
          }
          uint64_t v38 = *(int *)(v23 + 20);
          uint64_t v48 = &v36[v38];
          uint64_t v39 = &v22[v38];
          if (v34(&v22[v38], 1, v32))
          {
            uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v48, v39, *(void *)(*(void *)(v40 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v48, v39, v32);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v48, 0, 1, v32);
          }
          *(void *)&__dst[*(int *)(v23 + 24)] = *(void *)&v22[*(int *)(v23 + 24)];
          (*(void (**)(void))(v24 + 56))();
        }
        uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ()));
        uint64_t v42 = *(int *)(v41 + 48);
        uint64_t v43 = (char *)a1 + v42;
        uint64_t v44 = (char *)a2 + v42;
        uint64_t v45 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 32))(v43, v44, v45);
        *(_OWORD *)((char *)a1 + *(int *)(v41 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v41 + 64));
        break;
      case 1:
        *(void *)a1 = *(void *)a2;
        uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ()));
        uint64_t v9 = *(int *)(v8 + 48);
        uint64_t v10 = (char *)a1 + v9;
        uint64_t v11 = (char *)a2 + v9;
        uint64_t v12 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
        *(_OWORD *)((char *)a1 + *(int *)(v8 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v8 + 64));
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
LABEL_23:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_23;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

_OWORD *assignWithTake for EncoreEngine.EngineEvent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of EncoreEngine.EngineEvent((uint64_t)a1, type metadata accessor for EncoreEngine.EngineEvent);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      return a1;
    }
    uint64_t v6 = type metadata accessor for EncoreEngineEvent(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 5:
        uint64_t v13 = type metadata accessor for UserInputResult();
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v14 = type metadata accessor for Input();
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v14 - 8) + 32))(a1, a2, v14);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
        }
        uint64_t v26 = type metadata accessor for RequestContinuation(0);
        *(void *)((char *)a1 + *(int *)(v26 + 20)) = *(void *)((char *)a2 + *(int *)(v26 + 20));
        uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (continuation: RequestContinuation, context: ConversationContext, completion: ()));
        uint64_t v28 = *(int *)(v27 + 48);
        uint64_t v29 = (char *)a1 + v28;
        unint64_t v30 = (char *)a2 + v28;
        uint64_t v31 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 32))(v29, v30, v31);
        *(_OWORD *)((char *)a1 + *(int *)(v27 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v27 + 64));
        break;
      case 4:
        *a1 = *a2;
        uint64_t v15 = (int *)type metadata accessor for SiriRequest(0);
        uint64_t v16 = v15[5];
        uint64_t v17 = (char *)a1 + v16;
        uint64_t v18 = (char *)a2 + v16;
        uint64_t v19 = type metadata accessor for Input();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
        *(void *)((char *)a1 + v15[6]) = *(void *)((char *)a2 + v15[6]);
        *(_OWORD *)((char *)a1 + v15[7]) = *(_OWORD *)((char *)a2 + v15[7]);
        *(void *)((char *)a1 + v15[8]) = *(void *)((char *)a2 + v15[8]);
        *(void *)((char *)a1 + v15[9]) = *(void *)((char *)a2 + v15[9]);
        uint64_t v20 = v15[10];
        uint64_t v21 = (char *)a1 + v20;
        uint64_t v22 = (char *)a2 + v20;
        uint64_t v23 = type metadata accessor for SiriRequestIdentities(0);
        uint64_t v24 = *(void *)(v23 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
        {
          uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
        }
        else
        {
          __dst = v21;
          uint64_t v32 = type metadata accessor for IdentifiedUser();
          uint64_t v33 = *(void *)(v32 - 8);
          uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
          uint64_t v47 = v33;
          if (v34(v22, 1, v32))
          {
            uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            uint64_t v36 = __dst;
            memcpy(__dst, v22, *(void *)(*(void *)(v35 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v33 + 32))(__dst, v22, v32);
            uint64_t v37 = v33;
            uint64_t v36 = __dst;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(__dst, 0, 1, v32);
          }
          uint64_t v38 = *(int *)(v23 + 20);
          uint64_t v48 = &v36[v38];
          uint64_t v39 = &v22[v38];
          if (v34(&v22[v38], 1, v32))
          {
            uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v48, v39, *(void *)(*(void *)(v40 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v48, v39, v32);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v48, 0, 1, v32);
          }
          *(void *)&__dst[*(int *)(v23 + 24)] = *(void *)&v22[*(int *)(v23 + 24)];
          (*(void (**)(void))(v24 + 56))();
        }
        uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, context: ConversationContext, completion: ()));
        uint64_t v42 = *(int *)(v41 + 48);
        uint64_t v43 = (char *)a1 + v42;
        uint64_t v44 = (char *)a2 + v42;
        uint64_t v45 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 32))(v43, v44, v45);
        *(_OWORD *)((char *)a1 + *(int *)(v41 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v41 + 64));
        break;
      case 1:
        *(void *)a1 = *(void *)a2;
        uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (event: EncoreEvent, context: ConversationContext, completion: ()));
        uint64_t v9 = *(int *)(v8 + 48);
        uint64_t v10 = (char *)a1 + v9;
        uint64_t v11 = (char *)a2 + v9;
        uint64_t v12 = type metadata accessor for ConversationContext();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
        *(_OWORD *)((char *)a1 + *(int *)(v8 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v8 + 64));
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
LABEL_24:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_24;
  }
  return a1;
}

uint64_t type metadata completion function for EncoreEngine.EngineEvent()
{
  uint64_t result = type metadata accessor for EncoreEngineEvent(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for EncoreEngine.ActionMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9EE31F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EncoreEngine.ActionMode()
{
  return &type metadata for EncoreEngine.ActionMode;
}

char *initializeBufferWithCopyOfBuffer for EncoreEngine.ActionOutcome(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)a1 = *a2;
    a1 = &v8[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = type metadata accessor for FlowUnhandledReason();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        uint64_t v10 = type metadata accessor for PluginAction();
        (*(void (**)(char *, char **, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
        uint64_t v11 = a2[1];
        *(void *)a1 = *a2;
        *((void *)a1 + 1) = v11;
        uint64_t v12 = a2[2];
        uint64_t v13 = a2[3];
        *((void *)a1 + 2) = v12;
        *((void *)a1 + 3) = v13;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        uint64_t v14 = *a2;
        uint64_t v15 = v14;
        *(void *)a1 = v14;
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

void destroy for EncoreEngine.ActionOutcome(void **a1)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v2 = type metadata accessor for FlowUnhandledReason();
      goto LABEL_4;
    case 1u:
      uint64_t v2 = type metadata accessor for PluginAction();
LABEL_4:
      int v3 = *(void (**)(void **, uint64_t))(*(void *)(v2 - 8) + 8);
      v3(a1, v2);
      break;
    case 2u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 3u:
      unsigned int v4 = *a1;

      break;
    default:
      return;
  }
}

void *initializeWithCopy for EncoreEngine.ActionOutcome(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = type metadata accessor for FlowUnhandledReason();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      goto LABEL_7;
    case 1u:
      uint64_t v7 = type metadata accessor for PluginAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      goto LABEL_7;
    case 2u:
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      uint64_t v9 = a2[2];
      uint64_t v10 = a2[3];
      a1[2] = v9;
      a1[3] = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_7;
    case 3u:
      uint64_t v11 = (void *)*a2;
      id v12 = v11;
      *a1 = v11;
LABEL_7:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for EncoreEngine.ActionOutcome(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of EncoreEngine.EngineEvent((uint64_t)a1, type metadata accessor for EncoreEngine.ActionOutcome);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v6 = type metadata accessor for FlowUnhandledReason();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        goto LABEL_8;
      case 1u:
        uint64_t v7 = type metadata accessor for PluginAction();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        goto LABEL_8;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 3u:
        uint64_t v8 = (void *)*a2;
        id v9 = v8;
        *a1 = v8;
LABEL_8:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for EncoreEngine.ActionOutcome(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = type metadata accessor for PluginAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for FlowUnhandledReason();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for EncoreEngine.ActionOutcome(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of EncoreEngine.EngineEvent((uint64_t)a1, type metadata accessor for EncoreEngine.ActionOutcome);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for PluginAction();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for FlowUnhandledReason();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for EncoreEngine.ActionOutcome()
{
  uint64_t result = type metadata accessor for FlowUnhandledReason();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for PluginAction();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for EventQueue()
{
  uint64_t result = type metadata accessor for AsyncStream();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AsyncStream.Continuation();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_initClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for EventQueue()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for EventQueue(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for EventQueue);
}

uint64_t dispatch thunk of EventQueue.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_1B9EE3C6C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed EncoreEngine.ActionOutcome) -> (@out ())()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed EncoreEngine.ActionOutcome) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1B9EE3CF4()
{
  swift_release();
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #1 in EncoreEngine.discover(event:)()
{
  return closure #1 in EncoreEngine.discover(event:)();
}

uint64_t partial apply for closure #1 in closure #1 in EncoreEngine.discover(event:)()
{
  return closure #1 in closure #1 in EncoreEngine.discover(event:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(uint64_t (**)(void))(v0 + 40));
}

uint64_t partial apply for closure #6 in EncoreEngine.handleExternal(event:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #6 in EncoreEngine.handleExternal(event:)(a1, v4, v5, v7, v6);
}

uint64_t sub_1B9EE3E34()
{
  unint64_t v1 = (int *)type metadata accessor for SiriRequest(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  unint64_t v4 = (*(void *)(*((void *)v1 - 1) + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = type metadata accessor for RequestContinuation(0);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v7 = v4 + v6 + 16;
  uint64_t v8 = *(void *)(*(void *)(v5 - 8) + 64);
  swift_unknownObjectRelease();
  uint64_t v9 = v0 + v3;
  swift_bridgeObjectRelease();
  uint64_t v10 = v0 + v3 + v1[5];
  uint64_t v11 = type metadata accessor for Input();
  uint64_t v25 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
  v25(v10, v11);
  swift_release();
  id v12 = (uint64_t *)(v9 + v1[7]);
  unint64_t v13 = v12[1];
  if (v13 >> 60 != 15) {
    outlined consume of Data._Representation(*v12, v13);
  }
  uint64_t v14 = v7 & ~v6;
  swift_release();
  swift_release();
  uint64_t v15 = v9 + v1[10];
  uint64_t v16 = type metadata accessor for SiriRequestIdentities(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16))
  {
    uint64_t v23 = v8;
    uint64_t v24 = v2;
    uint64_t v17 = type metadata accessor for IdentifiedUser();
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
    if (!v19(v15, 1, v17)) {
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v15, v17);
    }
    uint64_t v22 = v18;
    uint64_t v20 = v15 + *(int *)(v16 + 20);
    if (!v19(v20, 1, v17)) {
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v17);
    }
    swift_bridgeObjectRelease();
    uint64_t v2 = v24;
    uint64_t v8 = v23;
  }
  swift_release();
  type metadata accessor for UserInputResult();
  if (swift_getEnumCaseMultiPayload() == 1) {
    v25(v0 + v14, v11);
  }
  swift_release();

  return MEMORY[0x1F4186498](v0, v14 + v8, v2 | v6 | 7);
}

uint64_t partial apply for closure #4 in EncoreEngine.handleExternal(event:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for SiriRequest(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(type metadata accessor for RequestContinuation(0) - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v12 = v1 + v6;
  uint64_t v13 = v1 + v7;
  uint64_t v14 = *(void *)(v1 + v7);
  uint64_t v15 = *(void *)(v13 + 8);
  uint64_t v16 = v1 + v9;
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v17;
  *uint64_t v17 = v3;
  v17[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #4 in EncoreEngine.handleExternal(event:)(a1, v10, v11, v12, v14, v15, v16);
}

uint64_t partial apply for closure #1 in EncoreEngine.discover(request:)()
{
  return closure #1 in EncoreEngine.discover(request:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(uint64_t **)(v0 + 32), *(void **)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t objectdestroy_44Tm_0()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #3 in EncoreEngine.handleExternal(event:)()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  *(_OWORD *)(v2 + 16) = v3;
  return MEMORY[0x1F4188298](closure #3 in EncoreEngine.handleExternal(event:), 0, 0);
}

uint64_t sub_1B9EE4428()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RequestContinuation, Error>)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 88) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  swift_release();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
  }
  else
  {
    type metadata accessor for UserInputResult();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = type metadata accessor for Input();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
    }
    type metadata accessor for RequestContinuation(0);
    swift_release();
  }

  return MEMORY[0x1F4186498](v0, v3 + v4, v2 | 7);
}

uint64_t partial apply for closure #2 in EncoreEngine.handleExternal(event:)()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RequestContinuation, Error>)
                 - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 72);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  *(void *)(v4 + 120) = v3;
  *(_OWORD *)(v4 + 104) = v5;
  *(void *)(v4 + 96) = v0 + 32;
  return MEMORY[0x1F4188298](closure #2 in EncoreEngine.handleExternal(event:), 0, 0);
}

uint64_t sub_1B9EE4674()
{
  uint64_t v1 = *(void *)(type metadata accessor for RequestContinuation(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 56) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();

  swift_release();
  type metadata accessor for UserInputResult();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for Input();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  }
  swift_release();

  return MEMORY[0x1F4186498](v0, v3 + v4, v2 | 7);
}

uint64_t partial apply for closure #1 in EncoreEngine.handleExternal(event:)()
{
  uint64_t v2 = *(void *)(type metadata accessor for RequestContinuation(0) - 8);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v5;
  *(void *)uint64_t v5 = v1;
  *(void *)(v5 + 8) = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  *(void *)(v5 + 40) = v3;
  *(void *)(v5 + 48) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  return MEMORY[0x1F4188298](closure #1 in EncoreEngine.handleExternal(event:), 0, 0);
}

uint64_t partial apply for closure #1 in EncoreEngine.push(parentNode:flow:insideEncoreEnvironment:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EncoreEngine.push(parentNode:flowAgent:)(*(void **)(v1 + 24), *(long long **)(v1 + 32));
  *a1 = result;
  return result;
}

uint64_t sub_1B9EE48D8()
{
  return objectdestroy_2Tm_0(MEMORY[0x1E4FBC8D0]);
}

uint64_t partial apply for closure #5 in EncoreEngine.handleExternal(event:)(uint64_t a1)
{
  return closure #5 in EncoreEngine.handleExternal(event:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1B9EE48FC()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

uint64_t sub_1B9EE490C()
{
  return objectdestroy_2Tm_0(MEMORY[0x1E4FBC8D0]);
}

uint64_t partial apply for closure #3 in EncoreEngine.action(mode:starting:context:completion:)()
{
  return closure #3 in EncoreEngine.action(mode:starting:context:completion:)(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32), *(void *)(v0 + 40));
}

uint64_t partial apply for closure #1 in EncoreEngine.action(mode:starting:context:completion:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for ConversationContext() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = (uint64_t)(v1 + 4);
  uint64_t v9 = v1[9];
  uint64_t v10 = (uint64_t)v1 + v5;
  uint64_t v11 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in EncoreEngine.action(mode:starting:context:completion:)(a1, v6, v7, v8, v9, v10, v11);
}

uint64_t partial apply for closure #1 in closure #1 in EncoreEngine.action(mode:starting:context:completion:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in EncoreEngine.action(mode:starting:context:completion:)(a1, v5, v4);
}

uint64_t partial apply for specialized closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  *(void *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(void *)(v5 + 16) = a1;
  return MEMORY[0x1F4188298](specialized closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:), 0, 0);
}

uint64_t sub_1B9EE4BF8()
{
  uint64_t v1 = *(void *)(type metadata accessor for EncoreEngine.ActionOutcome(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  unint64_t v4 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<ConversationCommitResult, Error>)
                 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v4 + v6 + 16) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  swift_unknownObjectRelease();
  uint64_t v9 = (id *)(v0 + v3);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v10 = type metadata accessor for FlowUnhandledReason();
      goto LABEL_6;
    case 1u:
      uint64_t v10 = type metadata accessor for PluginAction();
LABEL_6:
      (*(void (**)(id *, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
      break;
    case 2u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 3u:

      break;
    default:
      break;
  }
  swift_release();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
  }
  else
  {
    type metadata accessor for ConversationCommitResult();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 3u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        break;
      case 1u:
        uint64_t v11 = type metadata accessor for FlowUnhandledReason();
        goto LABEL_12;
      case 2u:
        uint64_t v11 = type metadata accessor for PluginAction();
LABEL_12:
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v0 + v7, v11);
        break;
      default:
        break;
    }
  }

  return MEMORY[0x1F4186498](v0, v7 + v8, v2 | v6 | 7);
}

uint64_t partial apply for closure #1 in closure #5 in EncoreEngine.handleExternal(event:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for EncoreEngine.ActionOutcome(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<ConversationCommitResult, Error>)
                 - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v12 = v1 + v6;
  uint64_t v13 = v1 + v7;
  uint64_t v14 = *(void *)(v1 + v7);
  uint64_t v15 = *(void *)(v13 + 8);
  uint64_t v16 = v1 + v9;
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v17;
  *uint64_t v17 = v3;
  v17[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #5 in EncoreEngine.handleExternal(event:)(a1, v10, v11, v12, v14, v15, v16);
}

uint64_t sub_1B9EE5040()
{
  return objectdestroy_2Tm_0(MEMORY[0x1E4FBC8D0]);
}

uint64_t partial apply for closure #2 in EncoreEngine.action(mode:starting:context:completion:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  unint64_t v4 = *(uint64_t (**)(uint64_t))(v1 + 24);
  swift_beginAccess();
  *(unsigned char *)(v3 + 16) = 1;
  return v4(a1);
}

uint64_t objectdestroy_73Tm()
{
  uint64_t v1 = type metadata accessor for ConversationContext();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 80) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x1F4186498](v0, v6, v5);
}

uint64_t lazy protocol witness table accessor for type FlowActor and conformance FlowActor(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in EventQueue.init()(uint64_t a1)
{
  return specialized closure #1 in EventQueue.init()(a1, *(void *)(v1 + 16));
}

uint64_t closure #3 in EncoreEngine.action(mode:starting:context:completion:)partial apply()
{
  return partial apply for closure #3 in EncoreEngine.action(mode:starting:context:completion:)();
}

uint64_t static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:)()
{
  uint64_t v0 = one-time initialization token for $conversationContext;
  uint64_t v1 = swift_retain();
  if (v0 != -1) {
    uint64_t v1 = swift_once();
  }
  MEMORY[0x1F4188790](v1);
  swift_retain();
  TaskLocal.withValue<A>(_:operation:file:line:)();
  swift_release();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  long long v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = one-time initialization token for $conversationContext;
  swift_retain();
  if (v2 != -1)
  {
    swift_once();
    uint64_t v1 = *(void *)(v0 + 32);
  }
  uint64_t v3 = *(void *)(v0 + 56);
  *(void *)(v0 + 16) = v1;
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  uint64_t v5 = *(_OWORD *)(v0 + 40);
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v1;
  *(_OWORD *)(v4 + 32) = v5;
  swift_retain();
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v6;
  *unint64_t v6 = v0;
  v6[1] = static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:);
  unint64_t v7 = *(void *)(v0 + 24);
  return MEMORY[0x1F41881B8](v7, v0 + 16, &async function pointer to partial apply for closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:), v4, 0, 0, 0xD000000000000026, 0x80000001BA068570);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:);
  }
  else {
    uint64_t v2 = static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  void v5[3] = a1;
  return MEMORY[0x1F4188298](static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:), 0, 0);
}

uint64_t one-time initialization function for $conversationContext()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskLocal<EncoreConversationContext?>);
  swift_allocObject();
  uint64_t result = TaskLocal.init(wrappedValue:)();
  static EncoreEnvironment.$conversationContext = result;
  return result;
}

uint64_t *EncoreEnvironment.$conversationContext.unsafeMutableAddressor()
{
  if (one-time initialization token for $conversationContext != -1) {
    swift_once();
  }
  return &static EncoreEnvironment.$conversationContext;
}

uint64_t static EncoreEnvironment.$conversationContext.getter()
{
  if (one-time initialization token for $conversationContext != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t static EncoreEnvironment.conversationContext.getter()
{
  if (one-time initialization token for $conversationContext != -1) {
    swift_once();
  }
  TaskLocal.get()();
  return v1;
}

uint64_t closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:)()
{
  return swift_release();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  type metadata accessor for SiriEnvironment();
  uint64_t v1 = ActingFlowAgent.environment.getter();
  v0[7] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[8] = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:);
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[4];
  unint64_t v6 = v0[2];
  return MEMORY[0x1F415AAA8](v6, v1, v5, v3, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](AceServiceInvokerImpl.submitToRemote<A>(_:_:setRefId:), 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t partial apply for closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:)()
{
  return closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:)();
}

uint64_t closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  void v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:), 0, 0);
}

uint64_t partial apply for closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v1 + 24);
  *(void *)(v2 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  *(void *)(v6 + 40) = v5;
  *(void *)(v6 + 48) = v4;
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)(v6 + 16) = a1;
  return MEMORY[0x1F4188298](closure #1 in static EncoreEnvironment.withTaskLocalEnvironment<A>(flowContext:_:), 0, 0);
}

ValueMetadata *type metadata accessor for EncoreConversationContext()
{
  return &type metadata for EncoreConversationContext;
}

ValueMetadata *type metadata accessor for EncoreEnvironment()
{
  return &type metadata for EncoreEnvironment;
}

const char *EncoreFeatureFlag.domain.getter()
{
  return "Siri";
}

const char *EncoreFeatureFlag.feature.getter()
{
  return "encore";
}

uint64_t EncoreFeatureFlag.isEnabled.getter()
{
  uint64_t v3 = &type metadata for EncoreFeatureFlag;
  unint64_t v4 = lazy protocol witness table accessor for type EncoreFeatureFlag and conformance EncoreFeatureFlag();
  char v0 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
  return v0 & 1;
}

unint64_t lazy protocol witness table accessor for type EncoreFeatureFlag and conformance EncoreFeatureFlag()
{
  unint64_t result = lazy protocol witness table cache variable for type EncoreFeatureFlag and conformance EncoreFeatureFlag;
  if (!lazy protocol witness table cache variable for type EncoreFeatureFlag and conformance EncoreFeatureFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncoreFeatureFlag and conformance EncoreFeatureFlag);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EncoreFeatureFlag and conformance EncoreFeatureFlag;
  if (!lazy protocol witness table cache variable for type EncoreFeatureFlag and conformance EncoreFeatureFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EncoreFeatureFlag and conformance EncoreFeatureFlag);
  }
  return result;
}

uint64_t static EncoreFeatureFlag.== infix(_:_:)()
{
  return 1;
}

void EncoreFeatureFlag.hash(into:)()
{
}

Swift::Int EncoreFeatureFlag.hashValue.getter()
{
  return Hasher._finalize()();
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance EncoreFeatureFlag()
{
  return "encore";
}

unsigned char *storeEnumTagSinglePayload for EncoreFeatureFlag(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B9EE5E6CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for EncoreFeatureFlag()
{
  return &type metadata for EncoreFeatureFlag;
}

uint64_t EndpointInfoProvider.__allocating_init(endpointInfo:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

void *EndpointInfoProvider.endpointInfo.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

uint64_t EndpointInfoProvider.init(endpointInfo:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

Swift::String_optional __swiftcall EndpointInfoProvider.getIdentifier()()
{
  uint64_t v0 = EndpointInfoProvider.getIdentifier()((SEL *)&selRef_identifier);
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

Swift::String_optional __swiftcall EndpointInfoProvider.getMediaRouteIdentifier()()
{
  uint64_t v0 = EndpointInfoProvider.getIdentifier()((SEL *)&selRef_mediaRouteIdentifier);
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t EndpointInfoProvider.getIdentifier()(SEL *a1)
{
  if (!*(void *)(v1 + 16)) {
    return 0;
  }
  id v2 = [*(id *)(v1 + 16) *a1];
  if (!v2) {
    return 0;
  }
  int v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t EndpointInfoProvider.deinit()
{
  return v0;
}

uint64_t protocol witness for EndpointInfoProviding.getIdentifier() in conformance EndpointInfoProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t protocol witness for EndpointInfoProviding.getMediaRouteIdentifier() in conformance EndpointInfoProvider()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t method lookup function for EndpointInfoProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for EndpointInfoProvider);
}

uint64_t dispatch thunk of EndpointInfoProvider.__allocating_init(endpointInfo:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of EndpointInfoProvider.getIdentifier()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of EndpointInfoProvider.getMediaRouteIdentifier()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

id ExecuteNLOnServerMessage.toSARDExecuteNLOnServer(rcState:requestType:refId:)(void *a1, void (**a2)(char *, uint64_t), void (**a3)(char *, uint64_t, uint64_t), int64_t a4)
{
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96910]), sel_init);
  uint64_t v10 = v8;
  specialized ExecuteNLOnServerMessage.populateExecuteNLOnServer<A>(executeNLOnServer:rcState:requestType:refId:)(&v10, a1, a2, a3, a4);
  return v8;
}

void specialized ExecuteNLOnServerMessage.populateExecuteNLOnServer<A>(executeNLOnServer:rcState:requestType:refId:)(void **a1, void *a2, void (**a3)(char *, uint64_t), void (**a4)(char *, uint64_t, uint64_t), int64_t a5)
{
  int64_t v160 = a5;
  uint64_t v156 = a3;
  uint64_t v157 = a4;
  id v155 = a2;
  uint64_t v6 = type metadata accessor for UserID();
  uint64_t v154 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v158 = (char *)&v142 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  Swift::String v151 = (char *)&v142 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: AFSpeechPackage)?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  unsigned int v152 = (char *)&v142 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v159 = (char *)&v142 - v13;
  uint64_t v14 = type metadata accessor for RequestType();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v153 = (char *)&v142 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  *(void *)&long long v150 = (char *)&v142 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v161 = (void (**)(char *, char *, uint64_t))((char *)&v142 - v20);
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v142 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *a1;
  UUID.init()();
  uint64_t v26 = UUID.uuidString.getter();
  uint64_t v28 = v27;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  uint64_t v29 = v14;
  unint64_t v30 = v156;
  uint64_t v31 = (void *)MEMORY[0x1BA9E2DD0](v26, v28);
  uint64_t v32 = v15;
  swift_bridgeObjectRelease();
  objc_msgSend(v25, sel_setAceId_, v31);

  uint64_t v146 = a1;
  uint64_t v33 = *a1;
  uint64_t v34 = (void *)MEMORY[0x1BA9E2DD0](v157, v160);
  objc_msgSend(v33, sel_setRefId_, v34);

  uint64_t v35 = v162;
  uint64_t v36 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  uint64_t v37 = (void *)MEMORY[0x1BA9E2DD0](v36);
  swift_bridgeObjectRelease();
  objc_msgSend(v33, sel_setResultCandidateId_, v37);

  uint64_t v38 = ExecuteNLOnServerMessageBase.delegatedUserDialogActs.getter();
  id v39 = v35;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D36_Nlu_External_DelegatedUserDialogActVG_So07SARDAcehijK0Cs5NeverOTg504_s16d215MessageTypes017ExecuteNLOnServerB0C0A10KitRuntimeE08populatedeF0012_5D0D35F2EC9L19E34FFD49FF2EFDE053307executeeF07rcState11requestType5refIdyxz_AD015ResultCandidateT0CAA07RequestV0OSStSo011SARDExecuteeF0CRbzlFSo29lhijku15A8NLUTypes0A36_f1_g1_hijK6VXEfU_0dO5Types0qrsO0CTf1cn_nTf4ng_n(v38);
  swift_bridgeObjectRelease();

  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SARDAceDelegatedUserDialogAct);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v33, sel_setAceDelegatedUserDialogActList_, isa);

  uint64_t v41 = (char *)v161;
  uint64_t v42 = *(void (**)(char *, void (**)(char *, uint64_t), uint64_t))(v15 + 16);
  v42((char *)v161, v30, v29);
  int v43 = (*(uint64_t (**)(char *, uint64_t))(v15 + 88))(v41, v29);
  if (v43 != *MEMORY[0x1E4FA2448])
  {
    if (v43 == *MEMORY[0x1E4FA2430])
    {
LABEL_58:
      uint64_t v112 = (*(uint64_t (**)(void))(*(void *)v155 + 856))();
      if (v113)
      {
        uint64_t v114 = (void *)MEMORY[0x1BA9E2DD0](v112);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v114 = 0;
      }
      objc_msgSend(v33, sel_setUtterance_, v114);

      uint64_t v130 = (void *)MEMORY[0x1E4F97560];
LABEL_81:
      objc_msgSend(v33, sel_setRequestType_, *v130, v142);
      return;
    }
    uint64_t v115 = v153;
    if (v43 != *MEMORY[0x1E4FA2410])
    {
      if (v43 == *MEMORY[0x1E4FA2408])
      {
        id v131 = objc_msgSend(v33, sel_setRequestType_, *MEMORY[0x1E4F97550]);
        uint64_t v132 = (*(uint64_t (**)(id))(*(void *)v155 + 880))(v131);
        if (v133 != 1)
        {
          uint64_t v138 = v132;
          uint64_t v139 = v133;
          if (v134)
          {
            swift_bridgeObjectRetain();
            v140.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
          }
          else
          {
            v140.super.Class isa = 0;
          }
          objc_msgSend(v33, sel_setRequestExecutionParameters_, v140.super.isa);

          if (v139)
          {
            swift_bridgeObjectRetain();
            unint64_t v141 = (void *)MEMORY[0x1BA9E2DD0](v138, v139);
            swift_bridgeObjectRelease_n();
          }
          else
          {
            unint64_t v141 = 0;
          }
          swift_bridgeObjectRelease();
          objc_msgSend(v33, sel_setDirectAction_, v141);

          return;
        }
        if (one-time initialization token for conversationBridge != -1) {
          swift_once();
        }
        uint64_t v135 = type metadata accessor for Logger();
        __swift_project_value_buffer(v135, (uint64_t)static Logger.conversationBridge);
        uint64_t v115 = (char *)v150;
        v42((char *)v150, v30, v29);
        uint64_t v117 = Logger.logObject.getter();
        os_log_type_t v118 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v117, v118))
        {
          int v119 = (uint8_t *)swift_slowAlloc();
          uint64_t v120 = swift_slowAlloc();
          uint64_t v164 = v120;
          *(_DWORD *)int v119 = 136315138;
          uint64_t v136 = RequestType.rawValue.getter();
          uint64_t v163 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v136, v137, &v164);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v32 + 8))(v115, v29);
          unint64_t v123 = "Could not cast ResultCandidateState to DirectActionResultCandidateState even though requestType: %s";
          goto LABEL_66;
        }
LABEL_78:
        (*(void (**)(char *, uint64_t))(v15 + 8))(v115, v29);

        return;
      }
      if (v43 != *MEMORY[0x1E4FA2438] && v43 != *MEMORY[0x1E4FA2428])
      {
        if (v43 == *MEMORY[0x1E4FA2450]) {
          goto LABEL_58;
        }
        uint64_t v115 = v153;
        if (v43 != *MEMORY[0x1E4FA2440] && v43 != *MEMORY[0x1E4FA2458] && v43 != *MEMORY[0x1E4FA2418]) {
          (*(void (**)(char *, uint64_t))(v15 + 8))(v41, v29);
        }
      }
    }
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v116 = type metadata accessor for Logger();
    __swift_project_value_buffer(v116, (uint64_t)static Logger.conversationBridge);
    v42(v115, v30, v29);
    uint64_t v117 = Logger.logObject.getter();
    os_log_type_t v118 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v117, v118))
    {
      int v119 = (uint8_t *)swift_slowAlloc();
      uint64_t v120 = swift_slowAlloc();
      uint64_t v164 = v120;
      *(_DWORD *)int v119 = 136315138;
      uint64_t v121 = RequestType.rawValue.getter();
      uint64_t v163 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v121, v122, &v164);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v115, v29);
      unint64_t v123 = "Should not have received requestType: %s for server fallback";
LABEL_66:
      _os_log_impl(&dword_1B9C64000, v117, v118, v123, v119, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v120, -1, -1);
      MEMORY[0x1BA9E48C0](v119, -1, -1);

      return;
    }
    goto LABEL_78;
  }
  uint64_t v44 = MEMORY[0x1E4FBC860];
  unint64_t v45 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v46 = specialized Dictionary.init(dictionaryLiteral:)(v44);
  uint64_t v47 = *(void *)(ExecuteNLOnServerMessage.sharedUserIdToSpeechPackage.getter() + 16);
  swift_bridgeObjectRelease();
  if (!v47)
  {
    if (one-time initialization token for conversationBridge != -1) {
LABEL_97:
    }
      swift_once();
    uint64_t v124 = type metadata accessor for Logger();
    __swift_project_value_buffer(v124, (uint64_t)static Logger.conversationBridge);
    uint64_t v125 = Logger.logObject.getter();
    os_log_type_t v126 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v125, v126))
    {
      uint64_t v127 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v127 = 0;
      _os_log_impl(&dword_1B9C64000, v125, v126, "SharedUserIdToSpeechPackage property on ENOSMessage is empty for a speech request. Sending empty dictionary to server.", v127, 2u);
      MEMORY[0x1BA9E48C0](v127, -1, -1);
    }

LABEL_71:
    uint64_t v33 = *v146;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SASRecognition);
    Class v128 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v33, sel_setRecognitionSausageMap_, v128);

    Class v129 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v33, sel_setPreITNRecognitionSausageMap_, v129);

    uint64_t v130 = (void *)MEMORY[0x1E4F97558];
    goto LABEL_81;
  }
  uint64_t v144 = v45;
  uint64_t v145 = v46;
  id v155 = v39;
  uint64_t v48 = ExecuteNLOnServerMessage.sharedUserIdToSpeechPackage.getter();
  int64_t v160 = 0;
  uint64_t v50 = *(void *)(v48 + 64);
  uint64_t v147 = v48 + 64;
  uint64_t v153 = (char *)v48;
  uint64_t v51 = 1 << *(unsigned char *)(v48 + 32);
  uint64_t v52 = -1;
  if (v51 < 64) {
    uint64_t v52 = ~(-1 << v51);
  }
  unint64_t v53 = v52 & v50;
  uint64_t v161 = (void (**)(char *, char *, uint64_t))(v154 + 16);
  uint64_t v156 = (void (**)(char *, uint64_t))(v154 + 8);
  uint64_t v157 = (void (**)(char *, uint64_t, uint64_t))(v154 + 32);
  int64_t v148 = (unint64_t)(v51 + 63) >> 6;
  int64_t v142 = v148 - 1;
  *(void *)&long long v49 = 136315394;
  long long v150 = v49;
  uint64_t v149 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v55 = v158;
  uint64_t v54 = (uint64_t)v159;
  uint64_t v57 = v151;
  uint64_t v56 = (uint64_t)v152;
  while (1)
  {
    if (v53)
    {
      unint64_t v67 = __clz(__rbit64(v53));
      uint64_t v68 = (v53 - 1) & v53;
      unint64_t v69 = v67 | (v160 << 6);
LABEL_10:
      uint64_t v70 = v153;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v154 + 16))(v56, *((void *)v153 + 6) + *(void *)(v154 + 72) * v69, v6);
      uint64_t v71 = *((void *)v70 + 7);
      uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: AFSpeechPackage));
      uint64_t v73 = *(void **)(v71 + 8 * v69);
      *(void *)(v56 + *(int *)(v72 + 48)) = v73;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v72 - 8) + 56))(v56, 0, 1, v72);
      id v74 = v73;
      goto LABEL_32;
    }
    int64_t v75 = v160 + 1;
    if (__OFADD__(v160, 1))
    {
      __break(1u);
      goto LABEL_97;
    }
    if (v75 < v148)
    {
      unint64_t v76 = *(void *)(v147 + 8 * v75);
      if (v76) {
        goto LABEL_14;
      }
      int64_t v77 = v160 + 2;
      ++v160;
      if (v75 + 1 < v148)
      {
        unint64_t v76 = *(void *)(v147 + 8 * v77);
        if (v76) {
          goto LABEL_17;
        }
        int64_t v160 = v75 + 1;
        if (v75 + 2 < v148)
        {
          unint64_t v76 = *(void *)(v147 + 8 * (v75 + 2));
          if (v76)
          {
            v75 += 2;
            goto LABEL_14;
          }
          int64_t v160 = v75 + 2;
          if (v75 + 3 < v148)
          {
            unint64_t v76 = *(void *)(v147 + 8 * (v75 + 3));
            if (v76)
            {
              v75 += 3;
              goto LABEL_14;
            }
            int64_t v77 = v75 + 4;
            int64_t v160 = v75 + 3;
            if (v75 + 4 < v148) {
              break;
            }
          }
        }
      }
    }
LABEL_31:
    uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: AFSpeechPackage));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56))(v56, 1, 1, v78);
    uint64_t v68 = 0;
LABEL_32:
    outlined init with take of (key: UserID, value: AFSpeechPackage)?(v56, v54);
    uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: AFSpeechPackage));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 48))(v54, 1, v79) == 1)
    {
      swift_release();
      goto LABEL_71;
    }
    uint64_t v80 = *(void **)(v54 + *(int *)(v79 + 48));
    (*v157)(v57, v54, v6);
    id v81 = objc_msgSend(v80, sel_recognition);
    uint64_t v162 = (void *)v68;
    if (v81)
    {
      uint64_t v82 = v81;
      id v83 = objc_msgSend(v80, sel_rawRecognition);
      if (v83)
      {
        long long v89 = v83;
        id v143 = v80;
        UserID.sharedUserId.getter();
        Swift::String v90 = String.lowercased()();
        swift_bridgeObjectRelease();
        id v91 = objc_msgSend(v82, sel_aceRecognition);
        if (v91)
        {
          uint64_t v92 = (uint64_t)v91;
          uint64_t v93 = v144;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v164 = v93;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v92, v90._countAndFlagsBits, (uint64_t)v90._object, isUniquelyReferenced_nonNull_native);
          uint64_t v144 = v164;
          goto LABEL_46;
        }
        uint64_t v95 = v144;
        swift_bridgeObjectRetain();
        unint64_t v96 = specialized __RawDictionaryStorage.find<A>(_:)(v90._countAndFlagsBits, (uint64_t)v90._object);
        char v98 = v97;
        swift_bridgeObjectRelease();
        if (v98)
        {
          char v99 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v164 = v95;
          if ((v99 & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            uint64_t v95 = v164;
          }
          swift_bridgeObjectRelease();
          uint64_t v100 = *(void **)(*(void *)(v95 + 56) + 8 * v96);
          uint64_t v144 = v95;
          specialized _NativeDictionary._delete(at:)(v96, v95);

LABEL_46:
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        UserID.sharedUserId.getter();
        Swift::String v101 = String.lowercased()();
        swift_bridgeObjectRelease();
        id v102 = objc_msgSend(v89, sel_aceRecognition);
        if (v102)
        {
          uint64_t v103 = (uint64_t)v102;
          uint64_t v104 = v145;
          char v105 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v164 = v104;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v103, v101._countAndFlagsBits, (uint64_t)v101._object, v105);
          uint64_t v145 = v164;

          goto LABEL_53;
        }
        uint64_t v106 = v145;
        swift_bridgeObjectRetain();
        unint64_t v107 = specialized __RawDictionaryStorage.find<A>(_:)(v101._countAndFlagsBits, (uint64_t)v101._object);
        char v109 = v108;
        swift_bridgeObjectRelease();
        if (v109)
        {
          char v110 = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v164 = v106;
          if ((v110 & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            uint64_t v106 = v164;
          }
          swift_bridgeObjectRelease();
          unint64_t v111 = *(void **)(*(void *)(v106 + 56) + 8 * v107);
          uint64_t v145 = v106;
          specialized _NativeDictionary._delete(at:)(v107, v106);

LABEL_53:
          swift_bridgeObjectRelease();
        }
        else
        {
        }
        swift_bridgeObjectRelease();
        (*v156)(v57, v6);
        uint64_t v56 = (uint64_t)v152;
        goto LABEL_7;
      }
    }
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v84 = type metadata accessor for Logger();
    __swift_project_value_buffer(v84, (uint64_t)static Logger.conversationBridge);
    (*v161)(v55, v57, v6);
    id v85 = v155;
    uint64_t v86 = Logger.logObject.getter();
    os_log_type_t v87 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v86, v87))
    {
      uint64_t v58 = swift_slowAlloc();
      uint64_t v59 = swift_slowAlloc();
      uint64_t v164 = v59;
      *(_DWORD *)uint64_t v58 = v150;
      lazy protocol witness table accessor for type UserID and conformance UserID();
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v58 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, &v164);
      swift_bridgeObjectRelease();
      uint64_t v62 = *v156;
      (*v156)(v158, v6);
      *(_WORD *)(v58 + 12) = 2080;
      uint64_t v63 = RequestMessageBase.requestId.getter();
      *(void *)(v58 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, &v164);

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v86, v87, "Since MultiUserAFSpeechPackage does not contain a pre-itn and post-itn recognitions for user : %s, hence SARDExecuteNLOnServer will not contain them either for requestId : %s", (uint8_t *)v58, 0x16u);
      swift_arrayDestroy();
      uint64_t v65 = v59;
      uint64_t v57 = v151;
      MEMORY[0x1BA9E48C0](v65, -1, -1);
      uint64_t v66 = v58;
      uint64_t v56 = (uint64_t)v152;
      MEMORY[0x1BA9E48C0](v66, -1, -1);

      v62(v57, v6);
      uint64_t v55 = v158;
    }
    else
    {

      uint64_t v88 = *v156;
      (*v156)(v55, v6);
      v88(v57, v6);
    }
LABEL_7:
    uint64_t v54 = (uint64_t)v159;
    unint64_t v53 = (unint64_t)v162;
  }
  unint64_t v76 = *(void *)(v147 + 8 * v77);
  if (v76)
  {
LABEL_17:
    int64_t v75 = v77;
LABEL_14:
    uint64_t v68 = (v76 - 1) & v76;
    unint64_t v69 = __clz(__rbit64(v76)) + (v75 << 6);
    int64_t v160 = v75;
    goto LABEL_10;
  }
  while (1)
  {
    int64_t v75 = v77 + 1;
    if (__OFADD__(v77, 1)) {
      break;
    }
    if (v75 >= v148)
    {
      int64_t v160 = v142;
      goto LABEL_31;
    }
    unint64_t v76 = *(void *)(v147 + 8 * v75);
    ++v77;
    if (v76) {
      goto LABEL_14;
    }
  }
  __break(1u);
}

void *ExecuteNLOnServerMessage.toSARDMUXExecuteNLOnServer(rcState:requestType:refId:)(void *a1, void (**a2)(char *, uint64_t), void (**a3)(char *, uint64_t, uint64_t), int64_t a4)
{
  uint64_t v8 = type metadata accessor for SelectedUserAttributes();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SelectedUserAttributes?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96920]), sel_init);
  unint64_t v30 = v15;
  specialized ExecuteNLOnServerMessage.populateExecuteNLOnServer<A>(executeNLOnServer:rcState:requestType:refId:)(&v30, a1, a2, a3, a4);
  id v16 = v15;
  objc_msgSend(v16, sel_setMuxStateRollback_, ExecuteNLOnServerMessage.isMuxStateRollback.getter() & 1);

  id v17 = v16;
  uint64_t v18 = ExecuteNLOnServerMessage.mostRecentVoiceIdScoreCard.getter();
  if (v18)
  {
    uint64_t v19 = (void *)v18;
    id v20 = AFVoiceIdScoreCard.toSAConfidenceScores()();
  }
  else
  {
    id v20 = 0;
  }
  objc_msgSend(v17, sel_setVoiceIDConfidenceScores_, v20);

  objc_msgSend(v17, sel_setMarkedForHandOff_, 0);
  id v21 = v17;
  uint64_t v22 = UserID.sharedUserId.getter();
  uint64_t v23 = (void *)MEMORY[0x1BA9E2DD0](v22);
  swift_bridgeObjectRelease();
  objc_msgSend(v21, sel_setSelectedUserId_, v23);

  uint64_t v24 = *(void (**)(void))(*(void *)a1 + 760);
  id v25 = v21;
  v24();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8))
  {
    outlined destroy of SelectedUserAttributes?((uint64_t)v14);
    uint64_t v26 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v14, v8);
    outlined destroy of SelectedUserAttributes?((uint64_t)v14);
    SelectedUserAttributes.classification.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t countAndFlagsBits = AFUserIdentityClassfication.toAceUserIdentityClassification()()._countAndFlagsBits;
    uint64_t v26 = (void *)MEMORY[0x1BA9E2DD0](countAndFlagsBits);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v25, sel_setSelectedUserIdentityClassification_, v26);

  return v30;
}

uint64_t outlined destroy of SelectedUserAttributes?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SelectedUserAttributes?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void closure #1 in ExecuteNLOnServerMessage.populateExecuteNLOnServer<A>(executeNLOnServer:rcState:requestType:refId:)(void *a1@<X8>)
{
  uint64_t v19 = a1;
  uint64_t v1 = type metadata accessor for Siri_Nlu_External_RewriteMessage();
  uint64_t v18 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  int v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Google_Protobuf_StringValue();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96900]), sel_init);
  objc_msgSend(v8, sel_setAsrHypothesisIndex_, Siri_Nlu_External_DelegatedUserDialogAct.asrHypothesisIndex.getter());
  uint64_t v9 = Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter();
  uint64_t v10 = (void *)MEMORY[0x1BA9E2DD0](v9);
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setExternalParserId_, v10);

  Siri_Nlu_External_DelegatedUserDialogAct.rewrittenUtterance.getter();
  uint64_t v11 = Google_Protobuf_StringValue.value.getter();
  unint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0) {
    uint64_t v14 = v11 & 0xFFFFFFFFFFFFLL;
  }
  if (v14) {
    id v15 = (void *)MEMORY[0x1BA9E2DD0](v11, v13);
  }
  else {
    id v15 = 0;
  }
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setRewrittenUtterance_, v15);

  if (Siri_Nlu_External_DelegatedUserDialogAct.hasRewrite.getter())
  {
    Siri_Nlu_External_DelegatedUserDialogAct.rewrite.getter();
    id v16 = specialized ExecuteNLOnServerMessage.convert(rewriteMessage:)();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v3, v1);
  }
  else
  {
    id v16 = 0;
  }
  id v17 = v19;
  objc_msgSend(v8, sel_setRewriteMessage_, v16, v18);

  *id v17 = v8;
}

id specialized ExecuteNLOnServerMessage.convert(rewriteMessage:)()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_RewriteMessage.RewriteType();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  int v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = Siri_Nlu_External_RewriteMessage.rewrittenUtterance.getter();
  unint64_t v6 = v5;
  uint64_t v7 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    uint64_t v7 = v4 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
    uint64_t v8 = v4;
    id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96908]), sel_init);
    uint64_t v10 = (void *)MEMORY[0x1BA9E2DD0](v8, v6);
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setRewrittenUtterance_, v10);

    Siri_Nlu_External_RewriteMessage.rewriteType.getter();
    int v11 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v3, v0);
    if (v11 == *MEMORY[0x1E4FA2898])
    {
      objc_msgSend(v9, sel_setRewriteType_, *MEMORY[0x1E4F97538]);
    }
    else if (v11 == *MEMORY[0x1E4FA28A0])
    {
      objc_msgSend(v9, sel_setRewriteType_, *MEMORY[0x1E4F97540]);
    }
    else
    {
      objc_msgSend(v9, sel_setRewriteType_, *MEMORY[0x1E4F97548]);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationBridge);
    unint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v15 = 0;
      _os_log_impl(&dword_1B9C64000, v13, v14, "Recevied empty rewrittenUtterance inside RewriteMessage", v15, 2u);
      MEMORY[0x1BA9E48C0](v15, -1, -1);
    }

    return 0;
  }
  return v9;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D36_Nlu_External_DelegatedUserDialogActVG_So07SARDAcehijK0Cs5NeverOTg504_s16d215MessageTypes017ExecuteNLOnServerB0C0A10KitRuntimeE08populatedeF0012_5D0D35F2EC9L19E34FFD49FF2EFDE0533LL07executeeF07rcState11requestType5refIdyxz_AD015ResultCandidateT0CAA07RequestV0OSStSo011SARDExecuteeF0CRbzlFSo29lhijku15A8NLUTypes0A36_f1_g1_hijK6VXEfU_0dO5Types0qrsO0CTf1cn_nTf4ng_n(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v4)
  {
    uint64_t v10 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v6 = *(void *)(type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct() - 8);
    uint64_t v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v8 = *(void *)(v6 + 72);
    while (1)
    {
      closure #1 in ExecuteNLOnServerMessage.populateExecuteNLOnServer<A>(executeNLOnServer:rcState:requestType:refId:)(&v9);
      if (v2) {
        break;
      }
      uint64_t v2 = 0;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v7 += v8;
      if (!--v4) {
        return v10;
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t outlined init with take of (key: UserID, value: AFSpeechPackage)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: AFSpeechPackage)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

BOOL static ExecuteOnRemoteCmds.includes(_:)(void *a1)
{
  uint64_t v1 = qword_1F1372AC8;
  if (qword_1F1372AC8)
  {
    int v3 = &byte_1F1372AD8;
    while (1)
    {
      int v5 = *v3++;
      int v4 = v5;
      switch(v5)
      {
        case 1:
          uint64_t v6 = &lazy cache variable for type metadata for SACFProvideContext;
          break;
        case 2:
          uint64_t v6 = (unint64_t *)&lazy cache variable for type metadata for SAInitiateHandoffOnCompanion;
          break;
        case 3:
          uint64_t v6 = (unint64_t *)&lazy cache variable for type metadata for SAPhoneClientCoordinationPhoneCall;
          break;
        case 4:
          uint64_t v6 = (unint64_t *)&lazy cache variable for type metadata for SASendCommands;
          break;
        case 5:
          uint64_t v6 = (unint64_t *)&lazy cache variable for type metadata for SAUIAddViews;
          break;
        case 6:
          uint64_t v6 = (unint64_t *)&lazy cache variable for type metadata for SAUISayIt;
          break;
        case 7:
          uint64_t v6 = (unint64_t *)&lazy cache variable for type metadata for SAUpdateReadingState;
          break;
        case 8:
          uint64_t v6 = (unint64_t *)&lazy cache variable for type metadata for SALogStringEvent;
          break;
        case 9:
          uint64_t v6 = &lazy cache variable for type metadata for SARDRemoteExecutionContextUpdate;
          break;
        case 10:
          uint64_t v6 = (unint64_t *)&lazy cache variable for type metadata for SAUIShowRequestHandlingStatus;
          break;
        case 11:
          uint64_t v6 = (unint64_t *)&lazy cache variable for type metadata for SAUIUpdateVisualResponseSnippet;
          break;
        default:
          uint64_t v6 = (unint64_t *)&lazy cache variable for type metadata for SAAceView;
          break;
      }
      type metadata accessor for OS_dispatch_queue(0, v6);
      if (objc_msgSend(a1, sel_isKindOfClass_, swift_getObjCClassFromMetadata())) {
        break;
      }
      if (!--v1) {
        goto LABEL_18;
      }
    }
  }
  else
  {
LABEL_18:
    int v4 = 12;
  }
  return v4 != 12;
}

uint64_t ExecuteOnRemoteCmds.cmdType.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v1 = &lazy cache variable for type metadata for SACFProvideContext;
      break;
    case 2:
      uint64_t v1 = (unint64_t *)&lazy cache variable for type metadata for SAInitiateHandoffOnCompanion;
      break;
    case 3:
      uint64_t v1 = (unint64_t *)&lazy cache variable for type metadata for SAPhoneClientCoordinationPhoneCall;
      break;
    case 4:
      uint64_t v1 = (unint64_t *)&lazy cache variable for type metadata for SASendCommands;
      break;
    case 5:
      uint64_t v1 = (unint64_t *)&lazy cache variable for type metadata for SAUIAddViews;
      break;
    case 6:
      uint64_t v1 = (unint64_t *)&lazy cache variable for type metadata for SAUISayIt;
      break;
    case 7:
      uint64_t v1 = (unint64_t *)&lazy cache variable for type metadata for SAUpdateReadingState;
      break;
    case 8:
      uint64_t v1 = (unint64_t *)&lazy cache variable for type metadata for SALogStringEvent;
      break;
    case 9:
      uint64_t v1 = &lazy cache variable for type metadata for SARDRemoteExecutionContextUpdate;
      break;
    case 10:
      uint64_t v1 = (unint64_t *)&lazy cache variable for type metadata for SAUIShowRequestHandlingStatus;
      break;
    case 11:
      uint64_t v1 = (unint64_t *)&lazy cache variable for type metadata for SAUIUpdateVisualResponseSnippet;
      break;
    default:
      uint64_t v1 = (unint64_t *)&lazy cache variable for type metadata for SAAceView;
      break;
  }
  return type metadata accessor for OS_dispatch_queue(0, v1);
}

id ExecuteOnRemoteCmds.isSameType(_:)(void *a1, char a2)
{
  switch(a2)
  {
    case 1:
      int v3 = &lazy cache variable for type metadata for SACFProvideContext;
      break;
    case 2:
      int v3 = (unint64_t *)&lazy cache variable for type metadata for SAInitiateHandoffOnCompanion;
      break;
    case 3:
      int v3 = (unint64_t *)&lazy cache variable for type metadata for SAPhoneClientCoordinationPhoneCall;
      break;
    case 4:
      int v3 = (unint64_t *)&lazy cache variable for type metadata for SASendCommands;
      break;
    case 5:
      int v3 = (unint64_t *)&lazy cache variable for type metadata for SAUIAddViews;
      break;
    case 6:
      int v3 = (unint64_t *)&lazy cache variable for type metadata for SAUISayIt;
      break;
    case 7:
      int v3 = (unint64_t *)&lazy cache variable for type metadata for SAUpdateReadingState;
      break;
    case 8:
      int v3 = (unint64_t *)&lazy cache variable for type metadata for SALogStringEvent;
      break;
    case 9:
      int v3 = &lazy cache variable for type metadata for SARDRemoteExecutionContextUpdate;
      break;
    case 10:
      int v3 = (unint64_t *)&lazy cache variable for type metadata for SAUIShowRequestHandlingStatus;
      break;
    case 11:
      int v3 = (unint64_t *)&lazy cache variable for type metadata for SAUIUpdateVisualResponseSnippet;
      break;
    default:
      int v3 = (unint64_t *)&lazy cache variable for type metadata for SAAceView;
      break;
  }
  type metadata accessor for OS_dispatch_queue(0, v3);
  return objc_msgSend(a1, sel_isKindOfClass_, swift_getObjCClassFromMetadata());
}

void *static ExecuteOnRemoteCmds.allCases.getter()
{
  return &outlined read-only object #0 of static ExecuteOnRemoteCmds.allCases.getter;
}

unint64_t ExecuteOnRemoteCmds.rawValue.getter(char a1)
{
  unint64_t result = 0x6569566563414153;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000022;
      break;
    case 4:
      unint64_t result = 0x6F43646E65534153;
      break;
    case 5:
      unint64_t result = 0x5664644149554153;
      break;
    case 6:
      unint64_t result = 0x4979615349554153;
      break;
    case 7:
      unint64_t result = 0xD000000000000014;
      break;
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    case 9:
      unint64_t result = 0xD000000000000020;
      break;
    case 10:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 11:
      unint64_t result = 0xD00000000000001FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ExecuteOnRemoteCmds(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = ExecuteOnRemoteCmds.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == ExecuteOnRemoteCmds.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ExecuteOnRemoteCmds()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  ExecuteOnRemoteCmds.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ExecuteOnRemoteCmds()
{
  ExecuteOnRemoteCmds.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExecuteOnRemoteCmds()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  ExecuteOnRemoteCmds.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ExecuteOnRemoteCmds@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized ExecuteOnRemoteCmds.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ExecuteOnRemoteCmds@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = ExecuteOnRemoteCmds.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void protocol witness for static CaseIterable.allCases.getter in conformance ExecuteOnRemoteCmds(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of static ExecuteOnRemoteCmds.allCases.getter;
}

unint64_t specialized ExecuteOnRemoteCmds.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ExecuteOnRemoteCmds.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xC) {
    return 12;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type ExecuteOnRemoteCmds and conformance ExecuteOnRemoteCmds()
{
  unint64_t result = lazy protocol witness table cache variable for type ExecuteOnRemoteCmds and conformance ExecuteOnRemoteCmds;
  if (!lazy protocol witness table cache variable for type ExecuteOnRemoteCmds and conformance ExecuteOnRemoteCmds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExecuteOnRemoteCmds and conformance ExecuteOnRemoteCmds);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ExecuteOnRemoteCmds] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [ExecuteOnRemoteCmds] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ExecuteOnRemoteCmds] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [ExecuteOnRemoteCmds]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ExecuteOnRemoteCmds] and conformance [A]);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ExecuteOnRemoteCmds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *unint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9EE8954);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExecuteOnRemoteCmds()
{
  return &type metadata for ExecuteOnRemoteCmds;
}

uint64_t static ServiceBridgeDelegate.defaultSubmitExternalActivationRequest(withRequestInfo:serviceHelper:completion:)(uint64_t a1, id a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (uint64_t)objc_msgSend(a2, sel_respondsToSelector_, sel_submitExternalActivationRequest_completion_);
  if (result)
  {
    v10[4] = a3;
    v10[5] = a4;
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 1107296256;
    v10[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
    v10[3] = &block_descriptor_12;
    uint64_t v9 = _Block_copy(v10);
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    objc_msgSend(a2, sel_submitExternalActivationRequest_completion_, a1, v9);
    _Block_release(v9);
    return swift_unknownObjectRelease();
  }
  return result;
}

void static ServiceBridgeDelegate.prepareForAudioHandoffFailedDefault(_:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  v5[4] = a2;
  v5[5] = a3;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 1107296256;
  v5[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  void v5[3] = &block_descriptor_6_0;
  unsigned int v4 = _Block_copy(v5);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_prepareForAudioHandoffFailedWithCompletion_, v4);
  _Block_release(v4);
}

id ExecutionContextUpdate.__allocating_init(provideContextCommand:nativeFlowContextCommand:nluSystemDialogActs:nluActiveTasks:nluCompletedTasks:undoDirectInvocation:rrEntities:pommesContext:contextUpdateScope:restoreSessionForRequestId:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10)
{
  id v19 = objc_allocWithZone(v10);
  id v20 = specialized ExecutionContextUpdate.init(provideContextCommand:nativeFlowContextCommand:nluSystemDialogActs:nluActiveTasks:nluCompletedTasks:undoDirectInvocation:rrEntities:pommesContext:contextUpdateScope:restoreSessionForRequestId:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, *((uint64_t *)&a9 + 1), a10);

  return v20;
}

uint64_t static ExecutionContextUpdate.supportsSecureCoding.getter()
{
  return static ExecutionContextUpdate.supportsSecureCoding;
}

uint64_t static ExecutionContextUpdate.supportsSecureCoding.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static ExecutionContextUpdate.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static ExecutionContextUpdate.supportsSecureCoding.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

void *ExecutionContextUpdate.provideContextCommand.getter()
{
  char v1 = *(void **)(v0 + OBJC_IVAR___SKRExecutionContextUpdate_provideContextCommand);
  id v2 = v1;
  return v1;
}

void *ExecutionContextUpdate.nativeFlowContextCommand.getter()
{
  char v1 = *(void **)(v0 + OBJC_IVAR___SKRExecutionContextUpdate_nativeFlowContextCommand);
  id v2 = v1;
  return v1;
}

uint64_t ExecutionContextUpdate.nluSystemDialogActs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ExecutionContextUpdate.nluActiveTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ExecutionContextUpdate.nluCompletedTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ExecutionContextUpdate.undoDirectInvocation.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR___SKRExecutionContextUpdate_undoDirectInvocation, a1, &demangling cache variable for type metadata for Parse.DirectInvocation?);
}

uint64_t ExecutionContextUpdate.rrEntities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ExecutionContextUpdate.pommesContext.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR___SKRExecutionContextUpdate_pommesContext, a1, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
}

uint64_t ExecutionContextUpdate.contextUpdateScope.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR___SKRExecutionContextUpdate_contextUpdateScope;
  uint64_t updated = type metadata accessor for ContextUpdateScope();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(updated - 8) + 16);

  return v5(a1, v3, updated);
}

uint64_t ExecutionContextUpdate.restoreSessionForRequestId.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___SKRExecutionContextUpdate_restoreSessionForRequestId);
  swift_bridgeObjectRetain();
  return v1;
}

id ExecutionContextUpdate.init(provideContextCommand:nativeFlowContextCommand:nluSystemDialogActs:nluActiveTasks:nluCompletedTasks:undoDirectInvocation:rrEntities:pommesContext:contextUpdateScope:restoreSessionForRequestId:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  id v13 = specialized ExecutionContextUpdate.init(provideContextCommand:nativeFlowContextCommand:nluSystemDialogActs:nluActiveTasks:nluCompletedTasks:undoDirectInvocation:rrEntities:pommesContext:contextUpdateScope:restoreSessionForRequestId:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);

  return v13;
}

unint64_t ExecutionContextUpdate.CodingKeys.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000015;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0xD000000000000018;
      break;
    case 3:
      unint64_t result = 0x697469746E457272;
      break;
    case 4:
      unint64_t result = 0x6154657669746361;
      break;
    case 5:
      unint64_t result = 0x6574656C706D6F63;
      break;
    case 6:
      unint64_t result = 0x6F4373656D6D6F70;
      break;
    case 7:
      unint64_t result = 0xD000000000000013;
      break;
    case 8:
      unint64_t result = 0x7669746341756C6ELL;
      break;
    case 9:
      unint64_t result = 0xD000000000000011;
      break;
    case 10:
      unint64_t result = 0xD000000000000014;
      break;
    case 11:
      unint64_t result = 0xD000000000000012;
      break;
    case 12:
      unint64_t result = 0xD00000000000001ALL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ExecutionContextUpdate.CodingKeys(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = ExecutionContextUpdate.CodingKeys.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == ExecutionContextUpdate.CodingKeys.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ExecutionContextUpdate.CodingKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  ExecutionContextUpdate.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ExecutionContextUpdate.CodingKeys()
{
  ExecutionContextUpdate.CodingKeys.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExecutionContextUpdate.CodingKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  ExecutionContextUpdate.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ExecutionContextUpdate.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized ExecutionContextUpdate.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ExecutionContextUpdate.CodingKeys@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = ExecutionContextUpdate.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t ExecutionContextUpdate.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return ExecutionContextUpdate.init(coder:)(a1);
}

Swift::Void __swiftcall ExecutionContextUpdate.encode(with:)(NSCoder with)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_Task();
  uint64_t v93 = *(void *)(v4 - 8);
  uint64_t v94 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  char v97 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v92 = (char *)&v88 - v7;
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  int v11 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v2 + OBJC_IVAR___SKRExecutionContextUpdate_provideContextCommand);
  id v13 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000015, 0x80000001BA060990);
  os_log_type_t v14 = &off_1E61F1000;
  [(objc_class *)with.super.isa encodeObject:v12 forKey:v13];

  uint64_t v15 = *(void *)(v2 + OBJC_IVAR___SKRExecutionContextUpdate_nluSystemDialogActs);
  Class isa = with.super.isa;
  uint64_t v90 = v2;
  if (v15)
  {
    uint64_t v16 = *(void *)(v15 + 16);
    if (v16)
    {
      uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
      uint64_t v17 = v9 + 16;
      uint64_t v19 = v15 + ((*(unsigned __int8 *)(v17 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 64));
      uint64_t v95 = *(void *)(v17 + 56);
      unint64_t v96 = v18;
      id v20 = (void (**)(char *, uint64_t))(v17 - 8);
      uint64_t v88 = v15;
      swift_bridgeObjectRetain();
      id v21 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v91 = v17;
      do
      {
        v96(v11, v19, v8);
        lazy protocol witness table accessor for type Parse.DirectInvocation and conformance Parse.DirectInvocation((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_SystemDialogAct and conformance Siri_Nlu_External_SystemDialogAct, MEMORY[0x1E4FA2910]);
        uint64_t v22 = Message.serializedData(partial:)();
        unint64_t v24 = v23;
        outlined copy of Data._Representation(v22, v23);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          id v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
        }
        unint64_t v26 = v21[2];
        unint64_t v25 = v21[3];
        uint64_t v27 = v21;
        if (v26 >= v25 >> 1) {
          uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v21);
        }
        v27[2] = v26 + 1;
        id v21 = v27;
        uint64_t v28 = &v27[2 * v26];
        v28[4] = v22;
        v28[5] = v24;
        outlined consume of Data._Representation(v22, v24);
        (*v20)(v11, v8);
        v19 += v95;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease();
      with.super.Class isa = isa;
      os_log_type_t v14 = &off_1E61F1000;
    }
    Class v29 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    unint64_t v30 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000013, 0x80000001BA060A10);
    objc_msgSend(with.super.isa, (SEL)v14[225], v29, v30);

    uint64_t v2 = v90;
  }
  uint64_t v31 = v94;
  uint64_t v32 = *(void *)(v2 + OBJC_IVAR___SKRExecutionContextUpdate_nativeFlowContextCommand);
  uint64_t v33 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000018, 0x80000001BA0609D0);
  objc_msgSend(with.super.isa, (SEL)v14[225], v32, v33);

  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v34 = JSONEncoder.init()();
  uint64_t v98 = *(void *)(v2 + OBJC_IVAR___SKRExecutionContextUpdate_rrEntities);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RREntity]?);
  lazy protocol witness table accessor for type [RREntity]? and conformance <A> A?();
  uint64_t v35 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v37 = v36;
  swift_bridgeObjectRelease();
  Class v38 = Data._bridgeToObjectiveC()().super.isa;
  id v39 = (void *)MEMORY[0x1BA9E2DD0](0x697469746E457272, 0xEA00000000007365);
  [(objc_class *)with.super.isa encodeObject:v38 forKey:v39];

  outlined consume of Data._Representation(v35, v37);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  lazy protocol witness table accessor for type PommesContext? and conformance <A> A?();
  uint64_t v40 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v42 = v41;
  Class v43 = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v44 = (void *)MEMORY[0x1BA9E2DD0](0x6F4373656D6D6F70, 0xED0000747865746ELL);
  objc_msgSend(with.super.isa, (SEL)0x1F62CD9C5, v43, v44);

  outlined consume of Data._Representation(v40, v42);
  unint64_t v45 = v92;
  uint64_t v46 = *(void *)(v2 + OBJC_IVAR___SKRExecutionContextUpdate_nluActiveTasks);
  uint64_t v91 = v34;
  if (v46)
  {
    uint64_t v47 = *(void *)(v46 + 16);
    if (v47)
    {
      uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v93 + 16);
      uint64_t v49 = v46 + ((*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80));
      uint64_t v95 = *(void *)(v93 + 72);
      unint64_t v96 = v48;
      uint64_t v50 = (void (**)(char *, uint64_t))(v93 + 8);
      uint64_t v88 = v46;
      swift_bridgeObjectRetain();
      uint64_t v51 = (void *)MEMORY[0x1E4FBC860];
      do
      {
        v96(v45, v49, v31);
        lazy protocol witness table accessor for type Parse.DirectInvocation and conformance Parse.DirectInvocation(lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task, MEMORY[0x1E4FA2760]);
        uint64_t v52 = Message.serializedData(partial:)();
        unint64_t v54 = v53;
        outlined copy of Data._Representation(v52, v53);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v51[2] + 1, 1, v51);
        }
        unint64_t v56 = v51[2];
        unint64_t v55 = v51[3];
        if (v56 >= v55 >> 1) {
          uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v55 > 1), v56 + 1, 1, v51);
        }
        v51[2] = v56 + 1;
        uint64_t v57 = &v51[2 * v56];
        v57[4] = v52;
        v57[5] = v54;
        outlined consume of Data._Representation(v52, v54);
        uint64_t v31 = v94;
        unint64_t v45 = v92;
        (*v50)(v92, v94);
        v49 += v95;
        --v47;
      }
      while (v47);
      swift_bridgeObjectRelease();
      with.super.Class isa = isa;
    }
    Class v59 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v60 = (void *)MEMORY[0x1BA9E2DD0](0x7669746341756C6ELL, 0xEE00736B73615465);
    uint64_t v58 = &off_1E61F1000;
    [(objc_class *)with.super.isa encodeObject:v59 forKey:v60];

    uint64_t v2 = v90;
  }
  else
  {
    uint64_t v58 = &off_1E61F1000;
  }
  uint64_t v61 = *(void *)(v2 + OBJC_IVAR___SKRExecutionContextUpdate_nluCompletedTasks);
  if (v61)
  {
    uint64_t v62 = *(void *)(v61 + 16);
    if (v62)
    {
      unint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))(v93 + 16);
      uint64_t v63 = v93 + 16;
      uint64_t v95 = *(void *)(v2 + OBJC_IVAR___SKRExecutionContextUpdate_nluCompletedTasks);
      unint64_t v96 = v64;
      uint64_t v65 = v61 + ((*(unsigned __int8 *)(v93 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80));
      uint64_t v66 = *(void *)(v93 + 72);
      unint64_t v67 = (void (**)(char *, uint64_t))(v93 + 8);
      swift_bridgeObjectRetain();
      uint64_t v68 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v93 = v63;
      unint64_t v69 = v97;
      do
      {
        v96(v69, v65, v31);
        lazy protocol witness table accessor for type Parse.DirectInvocation and conformance Parse.DirectInvocation(lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task, MEMORY[0x1E4FA2760]);
        uint64_t v70 = Message.serializedData(partial:)();
        unint64_t v72 = v71;
        outlined copy of Data._Representation(v70, v71);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v68[2] + 1, 1, v68);
        }
        unint64_t v74 = v68[2];
        unint64_t v73 = v68[3];
        if (v74 >= v73 >> 1) {
          uint64_t v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v73 > 1), v74 + 1, 1, v68);
        }
        v68[2] = v74 + 1;
        int64_t v75 = &v68[2 * v74];
        v75[4] = v70;
        v75[5] = v72;
        outlined consume of Data._Representation(v70, v72);
        uint64_t v31 = v94;
        unint64_t v69 = v97;
        (*v67)(v97, v94);
        v65 += v66;
        --v62;
      }
      while (v62);
      swift_bridgeObjectRelease();
      uint64_t v2 = v90;
      uint64_t v58 = &off_1E61F1000;
    }
    Class v76 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    int64_t v77 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000011, 0x80000001BA060A40);
    with.super.Class isa = isa;
    objc_msgSend(isa, (SEL)v58[225], v76, v77);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse.DirectInvocation?);
  lazy protocol witness table accessor for type Parse.DirectInvocation? and conformance <A> A?();
  uint64_t v78 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v80 = v79;
  Class v81 = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v82 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000014, 0x80000001BA060A60);
  objc_msgSend(with.super.isa, (SEL)v58[225], v81, v82);

  outlined consume of Data._Representation(v78, v80);
  uint64_t updated = ContextUpdateScope.rawValue.getter();
  uint64_t v84 = (void *)MEMORY[0x1BA9E2DD0](updated);
  swift_bridgeObjectRelease();
  id v85 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000012, 0x80000001BA060A80);
  objc_msgSend(with.super.isa, (SEL)v58[225], v84, v85);

  if (*(void *)(v2 + OBJC_IVAR___SKRExecutionContextUpdate_restoreSessionForRequestId + 8)) {
    uint64_t v86 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v2 + OBJC_IVAR___SKRExecutionContextUpdate_restoreSessionForRequestId));
  }
  else {
    uint64_t v86 = 0;
  }
  os_log_type_t v87 = (void *)MEMORY[0x1BA9E2DD0](0xD00000000000001ALL, 0x80000001BA060AA0);
  objc_msgSend(with.super.isa, (SEL)v58[225], v86, v87);
  swift_release();
}

id ExecutionContextUpdate.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void ExecutionContextUpdate.init()()
{
}

id ExecutionContextUpdate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ExecutionContextUpdate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id specialized ExecutionContextUpdate.init(provideContextCommand:nativeFlowContextCommand:nluSystemDialogActs:nluActiveTasks:nluCompletedTasks:undoDirectInvocation:rrEntities:pommesContext:contextUpdateScope:restoreSessionForRequestId:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = v11;
  uint64_t v39 = a11;
  uint64_t v40 = a8;
  uint64_t v38 = a10;
  uint64_t v36 = a7;
  uint64_t v37 = a9;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a8, (uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  unint64_t v23 = v12;
  specialized static ExecutionContextUpdate.synchronizePromptContexts(pommesContext:nativeFlowContextCommand:)((uint64_t)v22, a2);
  *(void *)&v23[OBJC_IVAR___SKRExecutionContextUpdate_provideContextCommand] = a1;
  *(void *)&v23[OBJC_IVAR___SKRExecutionContextUpdate_nativeFlowContextCommand] = a2;
  *(void *)&v23[OBJC_IVAR___SKRExecutionContextUpdate_nluSystemDialogActs] = a3;
  *(void *)&v23[OBJC_IVAR___SKRExecutionContextUpdate_nluActiveTasks] = a4;
  *(void *)&v23[OBJC_IVAR___SKRExecutionContextUpdate_nluCompletedTasks] = a5;
  outlined init with copy of ReferenceResolutionClientProtocol?(a6, (uint64_t)&v23[OBJC_IVAR___SKRExecutionContextUpdate_undoDirectInvocation], &demangling cache variable for type metadata for Parse.DirectInvocation?);
  *(void *)&v23[OBJC_IVAR___SKRExecutionContextUpdate_rrEntities] = v36;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v22, (uint64_t)&v23[OBJC_IVAR___SKRExecutionContextUpdate_pommesContext], (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  unint64_t v24 = &v23[OBJC_IVAR___SKRExecutionContextUpdate_contextUpdateScope];
  uint64_t updated = type metadata accessor for ContextUpdateScope();
  uint64_t v26 = *(void *)(updated - 8);
  uint64_t v27 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v24, v37, updated);
  uint64_t v28 = &v23[OBJC_IVAR___SKRExecutionContextUpdate_restoreSessionForRequestId];
  uint64_t v29 = v39;
  *(void *)uint64_t v28 = v38;
  *((void *)v28 + 1) = v29;
  id v30 = a2;
  id v31 = a1;

  uint64_t v32 = (objc_class *)type metadata accessor for ExecutionContextUpdate();
  v41.receiver = v23;
  v41.super_class = v32;
  id v33 = objc_msgSendSuper2(&v41, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v27, updated);
  outlined destroy of ReferenceResolutionClientProtocol?(v40, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  outlined destroy of ReferenceResolutionClientProtocol?(a6, &demangling cache variable for type metadata for Parse.DirectInvocation?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  return v33;
}

id specialized static ExecutionContextUpdate.convertFromFlowContextUpdate(_:nluActiveTasks:nluCompletedTasks:populateLegacyProvideContext:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(v87) = a4;
  uint64_t v94 = a2;
  uint64_t v95 = a3;
  uint64_t updated = type metadata accessor for ContextUpdateScope();
  uint64_t v91 = *(void *)(updated - 8);
  uint64_t v92 = updated;
  uint64_t v6 = MEMORY[0x1F4188790](updated);
  uint64_t v86 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v93 = (char *)&v80 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v100 = (uint64_t)&v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse.DirectInvocation?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v99 = (uint64_t)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for NLContextUpdateSerializationOptions();
  uint64_t v83 = *(void *)(v13 - 8);
  uint64_t v84 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v82 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for NLContextUpdate();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  id v85 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  uint64_t v19 = MEMORY[0x1F4188790](v18 - 8);
  uint64_t v90 = (uint64_t)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  char v97 = (char *)&v80 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v88 = (char *)&v80 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  unint64_t v96 = (char *)&v80 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v29 = (char *)&v80 - v28;
  uint64_t v30 = MEMORY[0x1F4188790](v27);
  uint64_t v32 = (char *)&v80 - v31;
  uint64_t v33 = MEMORY[0x1F4188790](v30);
  uint64_t v35 = (char *)&v80 - v34;
  uint64_t v36 = MEMORY[0x1F4188790](v33);
  uint64_t v38 = (char *)&v80 - v37;
  MEMORY[0x1F4188790](v36);
  uint64_t v40 = (char *)&v80 - v39;
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)&v80 - v39, &demangling cache variable for type metadata for NLContextUpdate?);
  Swift::String v101 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  unsigned int v41 = v101(v40, 1, v15);
  uint64_t v98 = v16;
  if (v41 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v40, &demangling cache variable for type metadata for NLContextUpdate?);
  }
  else
  {
    char v42 = NLContextUpdate.isClientOnly.getter();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v40, v15);
    if (v42)
    {
      long long v89 = 0;
      uint64_t v45 = (uint64_t)v97;
      Class v43 = v101;
      goto LABEL_8;
    }
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v38, &demangling cache variable for type metadata for NLContextUpdate?);
  Class v43 = v101;
  unsigned int v44 = v101(v38, 1, v15);
  uint64_t v45 = (uint64_t)v97;
  if (v44 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v38, &demangling cache variable for type metadata for NLContextUpdate?);
    long long v89 = 0;
  }
  else
  {
    uint64_t v46 = (void *)NLContextUpdate.doConvertToServerContextUpdate()();
    Class v43 = v101;
    long long v89 = v46;
    (*(void (**)(char *, uint64_t))(v98 + 8))(v38, v15);
  }
LABEL_8:
  uint64_t v47 = (uint64_t)v96;
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v35, &demangling cache variable for type metadata for NLContextUpdate?);
  if (v43(v35, 1, v15) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v35, &demangling cache variable for type metadata for NLContextUpdate?);
    os_log_type_t v87 = 0;
    uint64_t v48 = v98;
  }
  else
  {
    Class v81 = v29;
    uint64_t v49 = v98;
    uint64_t v50 = v85;
    (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v85, v35, v15);
    if (v87)
    {
      uint64_t v102 = MEMORY[0x1E4FBC860];
      lazy protocol witness table accessor for type Parse.DirectInvocation and conformance Parse.DirectInvocation(&lazy protocol witness table cache variable for type NLContextUpdateSerializationOptions and conformance NLContextUpdateSerializationOptions, MEMORY[0x1E4FA1ED0]);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NLContextUpdateSerializationOptions]);
      lazy protocol witness table accessor for type [NLContextUpdateSerializationOptions] and conformance [A]();
      uint64_t v51 = v82;
      uint64_t v52 = v84;
      uint64_t v47 = (uint64_t)v96;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      unint64_t v53 = (void *)NLContextUpdate.doConvertToAceContextUpdate(options:)();
      Class v43 = v101;
      os_log_type_t v87 = v53;
      unint64_t v54 = v51;
      uint64_t v45 = (uint64_t)v97;
      (*(void (**)(char *, uint64_t))(v83 + 8))(v54, v52);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v15);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v15);
      os_log_type_t v87 = 0;
    }
    uint64_t v48 = v49;
    uint64_t v29 = v81;
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v32, &demangling cache variable for type metadata for NLContextUpdate?);
  if (v43(v32, 1, v15) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v32, &demangling cache variable for type metadata for NLContextUpdate?);
    uint64_t v55 = 0;
  }
  else
  {
    uint64_t v56 = NLContextUpdate.nluSystemDialogActs.getter();
    Class v43 = v101;
    uint64_t v55 = v56;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v32, v15);
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v29, &demangling cache variable for type metadata for NLContextUpdate?);
  unsigned int v57 = v43(v29, 1, v15);
  uint64_t v58 = v93;
  if (v57 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v29, &demangling cache variable for type metadata for NLContextUpdate?);
    uint64_t v59 = type metadata accessor for Parse.DirectInvocation();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v99, 1, 1, v59);
  }
  else
  {
    NLContextUpdate.undoDirectInvocation.getter();
    Class v43 = v101;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v29, v15);
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, v47, &demangling cache variable for type metadata for NLContextUpdate?);
  unsigned int v60 = v43((char *)v47, 1, v15);
  uint64_t v61 = (uint64_t)v88;
  if (v60 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v47, &demangling cache variable for type metadata for NLContextUpdate?);
    uint64_t v62 = 0;
  }
  else
  {
    uint64_t v63 = NLContextUpdate.rrEntities.getter();
    Class v43 = v101;
    uint64_t v64 = v47;
    uint64_t v62 = v63;
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v64, v15);
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, v61, &demangling cache variable for type metadata for NLContextUpdate?);
  if (v43((char *)v61, 1, v15) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v61, &demangling cache variable for type metadata for NLContextUpdate?);
    uint64_t v65 = type metadata accessor for PommesContext();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v100, 1, 1, v65);
  }
  else
  {
    NLContextUpdate.pommesContext.getter();
    Class v43 = v101;
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v61, v15);
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, v45, &demangling cache variable for type metadata for NLContextUpdate?);
  if (v43((char *)v45, 1, v15) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v45, &demangling cache variable for type metadata for NLContextUpdate?);
    (*(void (**)(char *, void, uint64_t))(v91 + 104))(v58, *MEMORY[0x1E4FA1C98], v92);
  }
  else
  {
    uint64_t v66 = v48;
    unint64_t v67 = v86;
    NLContextUpdate.contextUpdateScope.getter();
    Class v43 = v101;
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v45, v15);
    (*(void (**)(char *, char *, uint64_t))(v91 + 32))(v58, v67, v92);
  }
  uint64_t v68 = v90;
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, v90, &demangling cache variable for type metadata for NLContextUpdate?);
  if (v43((char *)v68, 1, v15) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v68, &demangling cache variable for type metadata for NLContextUpdate?);
    uint64_t v69 = 0;
    uint64_t v70 = 0;
  }
  else
  {
    uint64_t v69 = NLContextUpdate.restoreSessionForRequestId.getter();
    uint64_t v70 = v71;
    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v68, v15);
  }
  objc_allocWithZone((Class)type metadata accessor for ExecutionContextUpdate());
  uint64_t v72 = v94;
  swift_bridgeObjectRetain();
  uint64_t v73 = v95;
  swift_bridgeObjectRetain();
  uint64_t v79 = v70;
  uint64_t v78 = (uint64_t)v58;
  unint64_t v74 = v87;
  int64_t v75 = v89;
  id v76 = specialized ExecutionContextUpdate.init(provideContextCommand:nativeFlowContextCommand:nluSystemDialogActs:nluActiveTasks:nluCompletedTasks:undoDirectInvocation:rrEntities:pommesContext:contextUpdateScope:restoreSessionForRequestId:)(v87, v89, v55, v72, v73, v99, v62, v100, v78, v69, v79);

  return v76;
}

unint64_t lazy protocol witness table accessor for type [RREntity]? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type [RREntity]? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type [RREntity]? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [RREntity]?);
    lazy protocol witness table accessor for type [RREntity] and conformance <A> [A]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [RREntity]? and conformance <A> A?);
  }
  return result;
}

uint64_t ObjC metadata update function for ExecutionContextUpdate()
{
  return type metadata accessor for ExecutionContextUpdate();
}

void type metadata completion function for ExecutionContextUpdate()
{
  type metadata accessor for Parse.DirectInvocation?(319, &lazy cache variable for type metadata for Parse.DirectInvocation?, MEMORY[0x1E4FA1F20]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Parse.DirectInvocation?(319, &lazy cache variable for type metadata for PommesContext?, MEMORY[0x1E4F9FED8]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for ContextUpdateScope();
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t method lookup function for ExecutionContextUpdate(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ExecutionContextUpdate);
}

uint64_t dispatch thunk of ExecutionContextUpdate.__allocating_init(provideContextCommand:nativeFlowContextCommand:nluSystemDialogActs:nluActiveTasks:nluCompletedTasks:undoDirectInvocation:rrEntities:pommesContext:contextUpdateScope:restoreSessionForRequestId:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of ExecutionContextUpdate.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of ExecutionContextUpdate.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

void type metadata accessor for Parse.DirectInvocation?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t getEnumTagSinglePayload for ExecutionContextUpdate.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ExecutionContextUpdate.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *unint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9EEB288);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ExecutionContextUpdate.CodingKeys()
{
  return &unk_1F137D158;
}

unint64_t lazy protocol witness table accessor for type ExecutionContextUpdate.CodingKeys and conformance ExecutionContextUpdate.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ExecutionContextUpdate.CodingKeys and conformance ExecutionContextUpdate.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExecutionContextUpdate.CodingKeys and conformance ExecutionContextUpdate.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExecutionContextUpdate.CodingKeys and conformance ExecutionContextUpdate.CodingKeys);
  }
  return result;
}

unint64_t specialized ExecutionContextUpdate.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ExecutionContextUpdate.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xD) {
    return 13;
  }
  else {
    return v3;
  }
}

uint64_t lazy protocol witness table accessor for type Parse.DirectInvocation and conformance Parse.DirectInvocation(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [NLContextUpdateSerializationOptions] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [NLContextUpdateSerializationOptions] and conformance [A];
  if (!lazy protocol witness table cache variable for type [NLContextUpdateSerializationOptions] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [NLContextUpdateSerializationOptions]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [NLContextUpdateSerializationOptions] and conformance [A]);
  }
  return result;
}

id ExecutionInputInfo.__allocating_init(parseId:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return ExecutionInputInfo.init(parseId:)(a1);
}

id ExecutionInputInfo.__allocating_init(executePommes:)(char a1)
{
  id v3 = objc_allocWithZone(v1);
  unsigned int v4 = &v3[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId];
  void *v4 = 0;
  v4[1] = 0;
  v3[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes] = a1;
  v6.receiver = v3;
  v6.super_class = v1;
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t static ExecutionInputInfo.supportsSecureCoding.getter()
{
  return static ExecutionInputInfo.supportsSecureCoding;
}

uint64_t static ExecutionInputInfo.supportsSecureCoding.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static ExecutionInputInfo.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static ExecutionInputInfo.supportsSecureCoding.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t ExecutionInputInfo.parseId.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ExecutionInputInfo.executePommes.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes);
}

unint64_t ExecutionInputInfo.description.getter()
{
  _StringGuts.grow(_:)(48);
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId + 8))
  {
    uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId);
    Swift::String v2 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId + 8);
  }
  else
  {
    Swift::String v2 = (void *)0xE300000000000000;
    uint64_t v1 = 7104878;
  }
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x80000001BA068740;
  v4._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v4);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes)) {
    uint64_t v5 = 1702195828;
  }
  else {
    uint64_t v5 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes)) {
    unint64_t v6 = 0xE400000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  unint64_t v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 41;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 0xD00000000000001BLL;
}

id ExecutionInputInfo.init(parseId:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = v1;
  static ConversionUtils.convertProtoToUuid(protoUuid:)();
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) == 1)
  {
    outlined destroy of UUID?((uint64_t)v5);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v9 = UUID.uuidString.getter();
    uint64_t v10 = v11;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v5, v7);
  }
  uint64_t v12 = (uint64_t *)&v6[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId];
  *uint64_t v12 = v9;
  v12[1] = v10;
  v6[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes] = 0;

  uint64_t v13 = (objc_class *)type metadata accessor for ExecutionInputInfo();
  v17.receiver = v6;
  v17.super_class = v13;
  id v14 = objc_msgSendSuper2(&v17, sel_init);
  uint64_t v15 = type metadata accessor for Siri_Nlu_External_UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a1, v15);
  return v14;
}

id ExecutionInputInfo.init(executePommes:)(char a1)
{
  Swift::String v2 = &v1[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId];
  *Swift::String v2 = 0;
  v2[1] = 0;
  v1[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes] = a1;
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for ExecutionInputInfo();
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t type metadata accessor for ExecutionInputInfo()
{
  return self;
}

id ExecutionInputInfo.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = specialized ExecutionInputInfo.init(coder:)(a1);

  return v4;
}

id ExecutionInputInfo.init(coder:)(void *a1)
{
  id v2 = specialized ExecutionInputInfo.init(coder:)(a1);

  return v2;
}

Swift::Void __swiftcall ExecutionInputInfo.encode(with:)(NSCoder with)
{
  if (*(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId + 8))
  {
    id v3 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId));
    id v4 = (void *)MEMORY[0x1BA9E2DD0](0x64496573726170, 0xE700000000000000);
    [(objc_class *)with.super.isa encodeObject:v3 forKey:v4];
  }
  uint64_t v5 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes);
  id v6 = (id)MEMORY[0x1BA9E2DD0](0x5065747563657865, 0xED000073656D6D6FLL);
  [(objc_class *)with.super.isa encodeBool:v5 forKey:v6];
}

id ExecutionInputInfo.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void ExecutionInputInfo.init()()
{
}

id ExecutionInputInfo.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ExecutionInputInfo();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id specialized ExecutionInputInfo.init(coder:)(void *a1)
{
  id v3 = v1;
  id v4 = (void *)MEMORY[0x1BA9E2DD0](0x64496573726170, 0xE700000000000000);
  unsigned int v5 = objc_msgSend(a1, sel_containsValueForKey_, v4);

  if (v5)
  {
    type metadata accessor for NSString();
    uint64_t v6 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v6)
    {
      uint64_t v7 = (void *)v6;
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v10 = v9;
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v10 = 0;
    }
    uint64_t v12 = (uint64_t *)&v3[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId];
    *uint64_t v12 = v8;
    v12[1] = v10;
  }
  else
  {
    uint64_t v11 = &v3[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId];
    void *v11 = 0;
    v11[1] = 0;
  }
  uint64_t v13 = (void *)MEMORY[0x1BA9E2DD0](0x5065747563657865, 0xED000073656D6D6FLL);
  unsigned __int8 v14 = objc_msgSend(a1, sel_decodeBoolForKey_, v13);

  v3[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes] = v14;
  v16.receiver = v3;
  v16.super_class = (Class)type metadata accessor for ExecutionInputInfo();
  return objc_msgSendSuper2(&v16, sel_init);
}

uint64_t method lookup function for ExecutionInputInfo(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ExecutionInputInfo);
}

uint64_t dispatch thunk of ExecutionInputInfo.__allocating_init(parseId:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of ExecutionInputInfo.__allocating_init(executePommes:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of ExecutionInputInfo.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of ExecutionInputInfo.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t ExecutionOutput.__allocating_init(command:contextUpdate:fullPrint:fullSpeak:executionRequestId:executionSource:inAppResponse:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v24 = a8;
  uint64_t v25 = a7;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v26 = a4;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  MEMORY[0x1F4188790](v14 - 8);
  objc_super v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a9, v17);
  outlined init with copy of FlowOutputMessage.InAppResponse?(a10, (uint64_t)v16);
  uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t, char *, char *))(v10 + 152))(a1, a2, a3, v26, v27, v28, 0, 0, 0, 0, v25, v24, v20, v16);
  outlined destroy of ReferenceResolutionClientProtocol?(a10, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a9, v17);
  return v21;
}

uint64_t outlined init with copy of FlowOutputMessage.InAppResponse?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id ExecutionOutput.__allocating_init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, void *a7, uint64_t a8, long long a9, long long a10, uint64_t a11, uint64_t a12)
{
  id v20 = objc_allocWithZone(v12);
  id v21 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, *((void **)&a9 + 1), a10, *((uint64_t *)&a10 + 1), a11, a12);

  return v21;
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t static ExecutionOutput.supportsSecureCoding.getter()
{
  return static ExecutionOutput.supportsSecureCoding;
}

uint64_t static ExecutionOutput.supportsSecureCoding.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static ExecutionOutput.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static ExecutionOutput.supportsSecureCoding.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t ExecutionOutput.executionRequestId.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___SKRExecutionOutput_executionRequestId);
  swift_bridgeObjectRetain();
  return v1;
}

void *ExecutionOutput.command.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___SKRExecutionOutput_command);
  id v2 = v1;
  return v1;
}

void *ExecutionOutput.contextUpdate.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___SKRExecutionOutput_contextUpdate);
  id v2 = v1;
  return v1;
}

uint64_t ExecutionOutput.executionSource.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR___SKRExecutionOutput_executionSource;
  uint64_t v4 = type metadata accessor for RequestSummary.ExecutionSource();
  unsigned int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t ExecutionOutput.inAppResponse.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of FlowOutputMessage.InAppResponse?(v1 + OBJC_IVAR___SKRExecutionOutput_inAppResponse, a1);
}

uint64_t ExecutionOutput.fullPrint.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR___SKRExecutionOutput_fullPrint);
}

uint64_t ExecutionOutput.fullSpeak.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR___SKRExecutionOutput_fullSpeak);
}

uint64_t ExecutionOutput.redactedFullPrint.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR___SKRExecutionOutput_redactedFullPrint);
}

uint64_t ExecutionOutput.redactedFullSpeak.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR___SKRExecutionOutput_redactedFullSpeak);
}

id ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, void *a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  id v16 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);

  return v16;
}

unint64_t ExecutionOutput.CodingKeys.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000012;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x646E616D6D6F63;
      break;
    case 2:
      unint64_t result = 0x55747865746E6F63;
      break;
    case 3:
      unint64_t result = 0x6E6972506C6C7566;
      break;
    case 4:
      unint64_t result = 0x616570536C6C7566;
      break;
    case 5:
    case 6:
      unint64_t result = 0xD000000000000011;
      break;
    case 7:
      unint64_t result = 0x6F69747563657865;
      break;
    case 8:
      unint64_t result = 0x7365527070416E69;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ExecutionOutput.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ExecutionOutput.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ExecutionOutput.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExecutionOutput.CodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ExecutionOutput.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized ExecutionOutput.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ExecutionOutput.CodingKeys@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = ExecutionOutput.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t ExecutionOutput.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return ExecutionOutput.init(coder:)(a1);
}

Swift::Void __swiftcall ExecutionOutput.encode(with:)(NSCoder with)
{
  uint64_t v2 = v1;
  unint64_t v4 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v1 + OBJC_IVAR___SKRExecutionOutput_executionRequestId), *(void *)(v1 + OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8));
  unsigned int v5 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000012, 0x80000001BA060AC0);
  [(objc_class *)with.super.isa encodeObject:v4 forKey:v5];

  uint64_t v6 = *(void **)(v2 + OBJC_IVAR___SKRExecutionOutput_command);
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = (void *)MEMORY[0x1BA9E2DD0](0x646E616D6D6F63, 0xE700000000000000);
    [(objc_class *)with.super.isa encodeObject:v7 forKey:v8];
  }
  uint64_t v9 = *(void **)(v2 + OBJC_IVAR___SKRExecutionOutput_contextUpdate);
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = (void *)MEMORY[0x1BA9E2DD0](0x55747865746E6F63, 0xED00006574616470);
    [(objc_class *)with.super.isa encodeObject:v10 forKey:v11];
  }
  if (*(void *)(v2 + OBJC_IVAR___SKRExecutionOutput_fullPrint + 8))
  {
    uint64_t v12 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v2 + OBJC_IVAR___SKRExecutionOutput_fullPrint));
    uint64_t v13 = (void *)MEMORY[0x1BA9E2DD0](0x6E6972506C6C7566, 0xE900000000000074);
    [(objc_class *)with.super.isa encodeObject:v12 forKey:v13];
  }
  if (*(void *)(v2 + OBJC_IVAR___SKRExecutionOutput_fullSpeak + 8))
  {
    uint64_t v14 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v2 + OBJC_IVAR___SKRExecutionOutput_fullSpeak));
    uint64_t v15 = (void *)MEMORY[0x1BA9E2DD0](0x616570536C6C7566, 0xE90000000000006BLL);
    [(objc_class *)with.super.isa encodeObject:v14 forKey:v15];
  }
  if (*(void *)(v2 + OBJC_IVAR___SKRExecutionOutput_redactedFullPrint + 8))
  {
    id v16 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v2 + OBJC_IVAR___SKRExecutionOutput_redactedFullPrint));
    uint64_t v17 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000011, 0x80000001BA060AF0);
    [(objc_class *)with.super.isa encodeObject:v16 forKey:v17];
  }
  if (*(void *)(v2 + OBJC_IVAR___SKRExecutionOutput_redactedFullSpeak + 8))
  {
    uint64_t v18 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v2 + OBJC_IVAR___SKRExecutionOutput_redactedFullSpeak));
    uint64_t v19 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000011, 0x80000001BA060B10);
    [(objc_class *)with.super.isa encodeObject:v18 forKey:v19];
  }
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  type metadata accessor for RequestSummary.ExecutionSource();
  lazy protocol witness table accessor for type RequestSummary.ExecutionSource and conformance RequestSummary.ExecutionSource(&lazy protocol witness table cache variable for type RequestSummary.ExecutionSource and conformance RequestSummary.ExecutionSource, MEMORY[0x1E4FA24D0]);
  uint64_t v20 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v22 = v21;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v24 = (void *)MEMORY[0x1BA9E2DD0](0x6F69747563657865, 0xEF656372756F536ELL);
  [(objc_class *)with.super.isa encodeObject:isa forKey:v24];

  outlined consume of Data._Representation(v20, v22);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  lazy protocol witness table accessor for type FlowOutputMessage.InAppResponse? and conformance <A> A?();
  uint64_t v25 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v27 = v26;
  Class v28 = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v29 = (void *)MEMORY[0x1BA9E2DD0](0x7365527070416E69, 0xED000065736E6F70);
  [(objc_class *)with.super.isa encodeObject:v28 forKey:v29];

  swift_release();

  outlined consume of Data._Representation(v25, v27);
}

id ExecutionOutput.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void ExecutionOutput.init()()
{
}

id ExecutionOutput.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ExecutionOutput();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, void *a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v132 = a7;
  uint64_t v133 = a8;
  uint64_t v134 = a2;
  uint64_t v19 = a14;
  id v130 = a10;
  id v131 = a6;
  uint64_t v139 = *MEMORY[0x1E4F143B8];
  uint64_t updated = type metadata accessor for ContextUpdateScope();
  uint64_t v123 = *(void *)(updated - 8);
  MEMORY[0x1F4188790](updated);
  uint64_t v125 = (char *)&v115 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1F4188790](v21 - 8);
  unint64_t v122 = (char *)&v115 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse.DirectInvocation?);
  MEMORY[0x1F4188790](v23 - 8);
  uint64_t v127 = (char *)&v115 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1F4188790](v25 - 8);
  unint64_t v120 = (unint64_t)&v115 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  MEMORY[0x1F4188790](v27 - 8);
  os_log_type_t v126 = (char *)&v115 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  uint64_t v121 = *(void *)(v128 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v128);
  os_log_type_t v118 = (char *)&v115 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  int v119 = (char *)&v115 - v31;
  uint64_t v32 = &v14[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
  *(void *)uint64_t v32 = a11;
  *((void *)v32 + 1) = a12;
  uint64_t v33 = &v14[OBJC_IVAR___SKRExecutionOutput_fullPrint];
  *(void *)uint64_t v33 = a3;
  *((void *)v33 + 1) = a4;
  uint64_t v34 = a1;
  uint64_t v35 = &v14[OBJC_IVAR___SKRExecutionOutput_fullSpeak];
  *(void *)uint64_t v35 = a5;
  uint64_t v36 = v14;
  *((void *)v35 + 1) = v131;
  uint64_t v37 = &v14[OBJC_IVAR___SKRExecutionOutput_redactedFullPrint];
  uint64_t v38 = v133;
  *(void *)uint64_t v37 = v132;
  *((void *)v37 + 1) = v38;
  uint64_t v39 = &v14[OBJC_IVAR___SKRExecutionOutput_redactedFullSpeak];
  id v40 = v130;
  *(void *)uint64_t v39 = a9;
  *((void *)v39 + 1) = v40;
  unsigned int v41 = &v14[OBJC_IVAR___SKRExecutionOutput_executionSource];
  char v42 = (void *)type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v43 = *(v42 - 1);
  (*(void (**)(char *, uint64_t, void *))(v43 + 16))(v41, a13, v42);
  outlined init with copy of FlowOutputMessage.InAppResponse?(a14, (uint64_t)v36 + OBJC_IVAR___SKRExecutionOutput_inAppResponse);
  uint64_t v129 = a13;
  if (v34 && (self, (uint64_t v44 = swift_dynamicCastObjCClass()) != 0) && !v134)
  {
    uint64_t v45 = (void *)v44;
    uint64_t v46 = one-time initialization token for executor;
    uint64_t v47 = v36;
    id v48 = v34;
    if (v46 != -1) {
      swift_once();
    }
    uint64_t v49 = type metadata accessor for Logger();
    uint64_t v50 = __swift_project_value_buffer(v49, (uint64_t)static Logger.executor);
    id v51 = v48;
    uint64_t v117 = v50;
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.debug.getter();
    BOOL v54 = os_log_type_enabled(v52, v53);
    uint64_t v133 = v43;
    uint64_t v134 = v45;
    id v130 = v51;
    id v131 = v47;
    if (v54)
    {
      uint64_t v55 = swift_slowAlloc();
      uint64_t v56 = swift_slowAlloc();
      uint64_t v132 = v36;
      unsigned int v57 = (void *)v56;
      uint64_t v116 = swift_slowAlloc();
      *(void *)&v137[0] = v116;
      *(_DWORD *)uint64_t v55 = 136315394;
      uint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000085, 0x80000001BA068820, (uint64_t *)v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v55 + 12) = 2112;
      uint64_t v135 = (uint64_t)v134;
      id v58 = v51;
      uint64_t v45 = v134;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unsigned int v57 = v45;

      uint64_t v19 = a14;
      _os_log_impl(&dword_1B9C64000, v52, v53, "ExecutionOutput: %s: converting SARDNativeFlowContextUpdate=%@ to ExecutionOutput", (uint8_t *)v55, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      uint64_t v59 = v57;
      uint64_t v36 = v132;
      MEMORY[0x1BA9E48C0](v59, -1, -1);
      uint64_t v60 = v116;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v60, -1, -1);
      MEMORY[0x1BA9E48C0](v55, -1, -1);
    }
    else
    {
    }
    id v70 = objc_msgSend(v45, sel_promptContextProto);
    uint64_t v71 = v128;
    uint64_t v72 = v126;
    if (v70)
    {
      uint64_t v73 = v70;
      uint64_t v74 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v76 = v75;

      uint64_t v138 = 0;
      memset(v137, 0, sizeof(v137));
      outlined copy of Data._Representation(v74, v76);
      BinaryDecodingOptions.init()();
      uint64_t v77 = lazy protocol witness table accessor for type RequestSummary.ExecutionSource and conformance RequestSummary.ExecutionSource(lazy protocol witness table cache variable for type Com_Apple_Siri_Product_Proto_PromptContext and conformance Com_Apple_Siri_Product_Proto_PromptContext, MEMORY[0x1E4FA2B58]);
      Message.init(serializedData:extensions:partial:options:)();
      uint64_t v115 = v77;
      uint64_t v116 = v74;
      unint64_t v120 = v76;
      uint64_t v100 = v121;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v121 + 56))(v72, 0, 1, v71);
      Swift::String v101 = v119;
      (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v119, v72, v71);
      uint64_t v102 = v118;
      (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v118, v101, v71);
      uint64_t v103 = v102;
      uint64_t v104 = Logger.logObject.getter();
      os_log_type_t v105 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v104, v105))
      {
        uint64_t v107 = swift_slowAlloc();
        uint64_t v108 = swift_slowAlloc();
        uint64_t v132 = v36;
        os_log_type_t v126 = (char *)v108;
        *(void *)&v137[0] = v108;
        *(_DWORD *)uint64_t v107 = 136315394;
        uint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000085, 0x80000001BA068820, (uint64_t *)v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v107 + 12) = 2080;
        char v109 = v103;
        Swift::String v110 = Message.textFormatString()();
        uint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110._countAndFlagsBits, (unint64_t)v110._object, (uint64_t *)v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        unint64_t v111 = *(void (**)(char *, uint64_t))(v121 + 8);
        uint64_t v112 = v128;
        v111(v109, v128);
        _os_log_impl(&dword_1B9C64000, v104, v105, "ExecutionOutput: %s: NFCU has prompt context %s", (uint8_t *)v107, 0x16u);
        uint64_t v113 = v126;
        swift_arrayDestroy();
        uint64_t v36 = v132;
        MEMORY[0x1BA9E48C0](v113, -1, -1);
        MEMORY[0x1BA9E48C0](v107, -1, -1);

        outlined consume of Data._Representation(v116, v120);
        v111(v119, v112);
      }
      else
      {

        uint64_t v114 = *(void (**)(char *, uint64_t))(v100 + 8);
        v114(v103, v71);
        outlined consume of Data._Representation(v116, v120);
        v114(v101, v71);
      }
    }
    else
    {
      uint64_t v78 = Logger.logObject.getter();
      os_log_type_t v79 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v78, v79))
      {
        uint64_t v80 = (uint8_t *)swift_slowAlloc();
        uint64_t v81 = swift_slowAlloc();
        *(void *)&v137[0] = v81;
        *(_DWORD *)uint64_t v80 = 136315138;
        uint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000085, 0x80000001BA068820, (uint64_t *)v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B9C64000, v78, v79, "ExecutionOutput: %s: NFCU has no (or invalid) prompt context", v80, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v81, -1, -1);
        MEMORY[0x1BA9E48C0](v80, -1, -1);
      }
    }
    uint64_t v82 = v129;
    uint64_t v43 = v133;
    uint64_t v83 = (uint64_t)v125;
    uint64_t v84 = updated;
    uint64_t v85 = v123;
    uint64_t v86 = (uint64_t)v122;
    uint64_t v87 = type metadata accessor for Parse.DirectInvocation();
    uint64_t v88 = (uint64_t)v127;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 56))(v127, 1, 1, v87);
    uint64_t v89 = type metadata accessor for PommesContext();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v89 - 8) + 56))(v86, 1, 1, v89);
    (*(void (**)(uint64_t, void, uint64_t))(v85 + 104))(v83, *MEMORY[0x1E4FA1C98], v84);
    id v90 = objc_allocWithZone((Class)type metadata accessor for ExecutionContextUpdate());
    id v91 = specialized ExecutionContextUpdate.init(provideContextCommand:nativeFlowContextCommand:nluSystemDialogActs:nluActiveTasks:nluCompletedTasks:undoDirectInvocation:rrEntities:pommesContext:contextUpdateScope:restoreSessionForRequestId:)(0, v134, 0, 0, 0, v88, 0, v86, v83, 0, 0);

    uint64_t v92 = v131;
    *(void *)&v131[OBJC_IVAR___SKRExecutionOutput_contextUpdate] = v91;
    *(void *)&v92[OBJC_IVAR___SKRExecutionOutput_command] = 0;
  }
  else
  {
    uint64_t v61 = one-time initialization token for executor;
    uint64_t v62 = v36;
    if (v61 != -1) {
      swift_once();
    }
    uint64_t v63 = type metadata accessor for Logger();
    __swift_project_value_buffer(v63, (uint64_t)static Logger.executor);
    id v64 = v34;
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v128 = (uint64_t)v62;
      uint64_t v132 = v36;
      uint64_t v133 = v43;
      id v130 = v42;
      id v131 = (char *)a14;
      uint64_t v67 = swift_slowAlloc();
      uint64_t v68 = (void *)swift_slowAlloc();
      uint64_t v127 = (char *)swift_slowAlloc();
      *(void *)&v137[0] = v127;
      *(_DWORD *)uint64_t v67 = 136315394;
      uint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000085, 0x80000001BA068820, (uint64_t *)v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v67 + 12) = 2112;
      if (v34)
      {
        uint64_t v135 = (uint64_t)v64;
        id v69 = v64;
      }
      else
      {
        uint64_t v135 = 0;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v68 = v34;

      _os_log_impl(&dword_1B9C64000, v65, v66, "ExecutionOutput: %s: converting non-context ACE command=%@ to ExecutionOutput", (uint8_t *)v67, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v68, -1, -1);
      uint64_t v93 = v127;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v93, -1, -1);
      MEMORY[0x1BA9E48C0](v67, -1, -1);

      uint64_t v19 = (uint64_t)v131;
      uint64_t v36 = v132;
      char v42 = v130;
      uint64_t v43 = v133;
      uint64_t v62 = (char *)v128;
    }
    else
    {
    }
    *(void *)&v62[OBJC_IVAR___SKRExecutionOutput_command] = v34;
    uint64_t v94 = v134;
    *(void *)&v62[OBJC_IVAR___SKRExecutionOutput_contextUpdate] = v134;
    id v95 = v94;
    id v96 = v64;
    uint64_t v82 = v129;
  }

  char v97 = (objc_class *)type metadata accessor for ExecutionOutput();
  v136.receiver = v36;
  v136.super_class = v97;
  id v98 = objc_msgSendSuper2(&v136, sel_init);
  outlined destroy of ReferenceResolutionClientProtocol?(v19, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  (*(void (**)(uint64_t, void *))(v43 + 8))(v82, v42);
  return v98;
}

uint64_t outlined init with take of FlowOutputMessage.InAppResponse?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type FlowOutputMessage.InAppResponse? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type FlowOutputMessage.InAppResponse? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type FlowOutputMessage.InAppResponse? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
    lazy protocol witness table accessor for type RequestSummary.ExecutionSource and conformance RequestSummary.ExecutionSource(&lazy protocol witness table cache variable for type FlowOutputMessage.InAppResponse and conformance FlowOutputMessage.InAppResponse, MEMORY[0x1E4FA2050]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlowOutputMessage.InAppResponse? and conformance <A> A?);
  }
  return result;
}

uint64_t ObjC metadata update function for ExecutionOutput()
{
  return type metadata accessor for ExecutionOutput();
}

void type metadata completion function for ExecutionOutput()
{
  type metadata accessor for RequestSummary.ExecutionSource();
  if (v0 <= 0x3F)
  {
    type metadata accessor for FlowOutputMessage.InAppResponse?();
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for ExecutionOutput(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ExecutionOutput);
}

uint64_t dispatch thunk of ExecutionOutput.__allocating_init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of ExecutionOutput.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t dispatch thunk of ExecutionOutput.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of ExecutionOutput.hasEmptyNativeFlowContextUpdate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0))();
}

void type metadata accessor for FlowOutputMessage.InAppResponse?()
{
  if (!lazy cache variable for type metadata for FlowOutputMessage.InAppResponse?)
  {
    type metadata accessor for FlowOutputMessage.InAppResponse();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FlowOutputMessage.InAppResponse?);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for ExecutionOutput.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9EEE5B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ExecutionOutput.CodingKeys()
{
  return &unk_1F137D1E8;
}

unint64_t lazy protocol witness table accessor for type ExecutionOutput.CodingKeys and conformance ExecutionOutput.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ExecutionOutput.CodingKeys and conformance ExecutionOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type ExecutionOutput.CodingKeys and conformance ExecutionOutput.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExecutionOutput.CodingKeys and conformance ExecutionOutput.CodingKeys);
  }
  return result;
}

unint64_t specialized ExecutionOutput.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ExecutionOutput.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return 9;
  }
  else {
    return v3;
  }
}

uint64_t lazy protocol witness table accessor for type RequestSummary.ExecutionSource and conformance RequestSummary.ExecutionSource(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t dispatch thunk of ExecutionOverride.overrideType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ExecutionOverride.evaluate()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 16) + **(int **)(a3 + 16));
  id v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v9(a1, a2, a3);
}

uint64_t ExecutionOverrideContext.__allocating_init(activeTasks:executedTasks:isTriggerlessFollowup:isMitigated:endpointMode:isMedocSupported:conversationUserInput:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  *(unsigned char *)(result + 32) = a3;
  *(unsigned char *)(result + 33) = a4;
  *(void *)(result + 40) = a5;
  *(unsigned char *)(result + 48) = a6;
  *(void *)(result + 56) = a7;
  return result;
}

uint64_t ExecutionOverrideContext.activeTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ExecutionOverrideContext.executedTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ExecutionOverrideContext.isTriggerlessFollowup.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t ExecutionOverrideContext.isMitigated.getter()
{
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t ExecutionOverrideContext.endpointMode.getter()
{
  return *(void *)(v0 + 40);
}

uint64_t ExecutionOverrideContext.isMedocSupported.getter()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t ExecutionOverrideContext.conversationUserInput.getter()
{
  return swift_retain();
}

uint64_t ExecutionOverrideContext.init(activeTasks:executedTasks:isTriggerlessFollowup:isMitigated:endpointMode:isMedocSupported:conversationUserInput:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, char a6, uint64_t a7)
{
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  *(unsigned char *)(v7 + 32) = a3;
  *(unsigned char *)(v7 + 33) = a4;
  *(void *)(v7 + 40) = a5;
  *(unsigned char *)(v7 + 48) = a6;
  *(void *)(v7 + 56) = a7;
  return v7;
}

uint64_t ExecutionOverrideContext.debugDescription.getter()
{
  _StringGuts.grow(_:)(114);
  v1._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._uint64_t countAndFlagsBits = 0x6576697463617B20;
  v2._object = (void *)0xEF203A736B736154;
  String.append(_:)(v2);
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_Task();
  uint64_t v4 = swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = MEMORY[0x1BA9E3080](v4, v3);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6._object = (void *)0x80000001BA0688B0;
  v6._uint64_t countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v6);
  uint64_t v7 = swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = MEMORY[0x1BA9E3080](v7, v3);
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0xD000000000000019;
  v9._object = (void *)0x80000001BA0688D0;
  String.append(_:)(v9);
  if (*(unsigned char *)(v0 + 32)) {
    uint64_t v10 = 1702195828;
  }
  else {
    uint64_t v10 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 32)) {
    unint64_t v11 = 0xE400000000000000;
  }
  else {
    unint64_t v11 = 0xE500000000000000;
  }
  unint64_t v12 = v11;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 0xD000000000000014;
  v13._object = (void *)0x80000001BA0688F0;
  String.append(_:)(v13);
  if (*(unsigned char *)(v0 + 48)) {
    uint64_t v14 = 1702195828;
  }
  else {
    uint64_t v14 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 48)) {
    unint64_t v15 = 0xE400000000000000;
  }
  else {
    unint64_t v15 = 0xE500000000000000;
  }
  unint64_t v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = 0xD000000000000018;
  v17._object = (void *)0x80000001BA068910;
  String.append(_:)(v17);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationUserInput?);
  v18._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._uint64_t countAndFlagsBits = 125;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  return 0;
}

uint64_t ExecutionOverrideContext.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ExecutionOverrideContext()
{
  return ExecutionOverrideContext.debugDescription.getter();
}

uint64_t method lookup function for ExecutionOverrideContext(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ExecutionOverrideContext);
}

uint64_t dispatch thunk of ExecutionOverrideContext.__allocating_init(activeTasks:executedTasks:isTriggerlessFollowup:isMitigated:endpointMode:isMedocSupported:conversationUserInput:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

SiriKitRuntime::ExecutionOverrideDecision_optional __swiftcall ExecutionOverrideDecision.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ExecutionOverrideDecision.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 13;
  if (v5 < 0xD) {
    char v7 = v5;
  }
  char *v4 = v7;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ExecutionOverrideDecision(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type ExecutionOverrideDecision and conformance ExecutionOverrideDecision()
{
  unint64_t result = lazy protocol witness table cache variable for type ExecutionOverrideDecision and conformance ExecutionOverrideDecision;
  if (!lazy protocol witness table cache variable for type ExecutionOverrideDecision and conformance ExecutionOverrideDecision)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExecutionOverrideDecision and conformance ExecutionOverrideDecision);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ExecutionOverrideDecision()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ExecutionOverrideDecision()
{
  ExecutionOverrideDecision.rawValue.getter();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExecutionOverrideDecision()
{
  return Hasher._finalize()();
}

SiriKitRuntime::ExecutionOverrideDecision_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ExecutionOverrideDecision(Swift::String *a1)
{
  return ExecutionOverrideDecision.init(rawValue:)(*a1);
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ExecutionOverrideDecision@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = ExecutionOverrideDecision.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unsigned char *storeEnumTagSinglePayload for ExecutionOverrideDecision(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *unint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9EEEEC4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExecutionOverrideDecision()
{
  return &type metadata for ExecutionOverrideDecision;
}

uint64_t ExecutionOverrideDecisionMaker.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t ExecutionOverrideDecisionMaker.init()()
{
  return v0;
}

uint64_t ExecutionOverrideDecisionMaker.deinit()
{
  return v0;
}

uint64_t ExecutionOverrideDecisionMaker.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ExecutionOverrideDecisionMaker()
{
  return self;
}

uint64_t method lookup function for ExecutionOverrideDecisionMaker(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ExecutionOverrideDecisionMaker);
}

uint64_t dispatch thunk of ExecutionOverrideDecisionMaker.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of ExecutionOverrideDecisionMaker.evaluate(rules:)(uint64_t a1)
{
  unsigned int v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 88) + **(int **)(*(void *)v1 + 88));
  unsigned int v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v6(a1);
}

uint64_t static ExecutionOverrideHandler.runExecutionOverridesAfterRCSelection(rcId:aceInputOrigin:input:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:endpointMode:executionOverrideContext:didPreviouslyFallbackToServer:isSpeechRequest:bridge:skipEmptyAsr:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8)
{
  unint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, char, char))((char *)&async function pointer to specialized static ExecutionOverrideHandler.runExecutionOverridesAfterRCSelection(rcId:aceInputOrigin:input:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:endpointMode:executionOverrideContext:didPreviouslyFallbackToServer:isSpeechRequest:bridge:skipEmptyAsr:)
                                                                                              + async function pointer to specialized static ExecutionOverrideHandler.runExecutionOverridesAfterRCSelection(rcId:aceInputOrigin:input:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:endpointMode:executionOverrideContext:didPreviouslyFallbackToServer:isSpeechRequest:bridge:skipEmptyAsr:));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v10;
  *uint64_t v10 = v8;
  v10[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v12(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t specialized static ExecutionOverrideHandler.runExecutionOverridesAfterRCSelection(rcId:aceInputOrigin:input:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:endpointMode:executionOverrideContext:didPreviouslyFallbackToServer:isSpeechRequest:bridge:skipEmptyAsr:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8)
{
  *(unsigned char *)(v8 + 485) = v19;
  *(void *)(v8 + 352) = v17;
  *(void *)(v8 + 360) = v18;
  *(unsigned char *)(v8 + 484) = v16;
  *(unsigned char *)(v8 + 483) = v15;
  *(void *)(v8 + 344) = v14;
  *(_OWORD *)(v8 + 328) = v13;
  *(unsigned char *)(v8 + 482) = a8;
  *(unsigned char *)(v8 + 481) = a7;
  *(unsigned char *)(v8 + 480) = a6;
  *(void *)(v8 + 312) = a4;
  *(void *)(v8 + 320) = a5;
  *(void *)(v8 + 296) = a2;
  *(void *)(v8 + 304) = a3;
  *(void *)(v8 + 288) = a1;
  uint64_t v9 = type metadata accessor for Parse();
  *(void *)(v8 + 368) = v9;
  *(void *)(v8 + 376) = *(void *)(v9 - 8);
  *(void *)(v8 + 384) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for USOParse();
  *(void *)(v8 + 392) = v10;
  *(void *)(v8 + 400) = *(void *)(v10 - 8);
  *(void *)(v8 + 408) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  *(void *)(v8 + 416) = swift_task_alloc();
  *(void *)(v8 + 424) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  *(void *)(v8 + 432) = swift_task_alloc();
  *(void *)(v8 + 440) = swift_task_alloc();
  return MEMORY[0x1F4188298](specialized static ExecutionOverrideHandler.runExecutionOverridesAfterRCSelection(rcId:aceInputOrigin:input:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:endpointMode:executionOverrideContext:didPreviouslyFallbackToServer:isSpeechRequest:bridge:skipEmptyAsr:), 0, 0);
}

uint64_t specialized static ExecutionOverrideHandler.runExecutionOverridesAfterRCSelection(rcId:aceInputOrigin:input:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:endpointMode:executionOverrideContext:didPreviouslyFallbackToServer:isSpeechRequest:bridge:skipEmptyAsr:)()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 320);
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  *(void *)(v0 + 448) = v4;
  specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/ExecutionOverrideHandler.swift", 45, 2, (uint64_t)"runExecutionOverridesAfterRCSelection(rcId:aceInputOrigin:input:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:endpointMode:executionOverrideContext:didPreviouslyFallbackToServer:isSpeechRequest:bridge:skipEmptyAsr:)", 246, 2, v4);
  outlined init with copy of ReferenceResolutionClientProtocol?(v2, v1, &demangling cache variable for type metadata for Input?);
  uint64_t v5 = type metadata accessor for Input();
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v1, 1, v5) == 1)
  {
    uint64_t v7 = *(void *)(v0 + 440);
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 424), &demangling cache variable for type metadata for Input?);
    uint64_t v8 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 376);
    uint64_t v9 = *(void *)(v0 + 384);
    uint64_t v11 = *(void *)(v0 + 368);
    Input.parse.getter();
    int v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 88))(v9, v11);
    uint64_t v13 = *(void *)(v0 + 440);
    if (v12 == *MEMORY[0x1E4FA1F48])
    {
      uint64_t v15 = *(void *)(v0 + 400);
      uint64_t v14 = *(void *)(v0 + 408);
      uint64_t v17 = *(void *)(v0 + 384);
      uint64_t v16 = *(void *)(v0 + 392);
      (*(void (**)(uint64_t, void))(*(void *)(v0 + 376) + 96))(v17, *(void *)(v0 + 368));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v14, v17, v16);
      USOParse.userParse.getter();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      uint64_t v18 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v13, 0, 1, v18);
    }
    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 376) + 8))(*(void *)(v0 + 384), *(void *)(v0 + 368));
      uint64_t v19 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v13, 1, 1, v19);
    }
    (*(void (**)(void, uint64_t))(v6 + 8))(*(void *)(v0 + 424), v5);
  }
  uint64_t v21 = *(void *)(v0 + 432);
  uint64_t v20 = *(void *)(v0 + 440);
  uint64_t v23 = *(void *)(v0 + 352);
  uint64_t v22 = *(void *)(v0 + 360);
  char v24 = *(unsigned char *)(v0 + 484);
  char v25 = *(unsigned char *)(v0 + 480);
  *(void *)(v0 + 280) = MEMORY[0x1E4FBC860];
  outlined init with copy of ReferenceResolutionClientProtocol?(v20, v21, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  uint64_t v26 = type metadata accessor for HangUpOverride();
  swift_allocObject();
  swift_unknownObjectRetain();
  uint64_t v27 = HangUpOverride.init(topRankedParse:bridge:isSpeechRequest:isNlEmpty:)(v21, v23, v22, v24, v25);
  swift_beginAccess();
  uint64_t v28 = *(void **)(v0 + 280);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
  }
  unint64_t v30 = v28[2];
  unint64_t v29 = v28[3];
  if (v30 >= v29 >> 1) {
    uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v29 > 1), v30 + 1, 1, v28);
  }
  uint64_t v31 = *(void *)(v0 + 416);
  char v32 = *(unsigned char *)(v0 + 481);
  uint64_t v33 = *(void *)(v0 + 320);
  uint64_t v76 = *(void *)(v0 + 312);
  uint64_t v75 = *(void *)(v0 + 304);
  *(void *)(v0 + 120) = v26;
  *(void *)(v0 + 128) = &protocol witness table for HangUpOverride;
  *(void *)(v0 + 96) = v27;
  void v28[2] = v30 + 1;
  outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 96), (uint64_t)&v28[5 * v30 + 4]);
  *(void *)(v0 + 280) = v28;
  outlined init with copy of ReferenceResolutionClientProtocol?(v33, v31, &demangling cache variable for type metadata for Input?);
  uint64_t v34 = type metadata accessor for WaitUniversalActionOverride();
  uint64_t v35 = swift_allocObject();
  *(unsigned char *)(v35 + 16) = 7;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v31, v35 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_input, &demangling cache variable for type metadata for Input?);
  char v74 = v32;
  *(unsigned char *)(v35 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_isFirstRequestInSession) = v32;
  uint64_t v36 = (void *)(v35 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_aceInputOrigin);
  *uint64_t v36 = v75;
  v36[1] = v76;
  uint64_t v37 = *(void **)(v0 + 280);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37[2] + 1, 1, v37);
  }
  unint64_t v39 = v37[2];
  unint64_t v38 = v37[3];
  if (v39 >= v38 >> 1) {
    uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v37);
  }
  uint64_t v41 = *(void *)(v0 + 432);
  uint64_t v40 = *(void *)(v0 + 440);
  *(void *)(v0 + 160) = v34;
  *(void *)(v0 + 168) = &protocol witness table for WaitUniversalActionOverride;
  *(void *)(v0 + 136) = v35;
  v37[2] = v39 + 1;
  outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 136), (uint64_t)&v37[5 * v39 + 4]);
  *(void *)(v0 + 280) = v37;
  outlined init with copy of ReferenceResolutionClientProtocol?(v40, v41, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  uint64_t v42 = type metadata accessor for EmergencyCallMitigatorOverride();
  uint64_t v43 = swift_allocObject();
  *(unsigned char *)(v43 + 16) = 1;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v41, v43 + OBJC_IVAR____TtC14SiriKitRuntime30EmergencyCallMitigatorOverride_topRankedParse, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  uint64_t v44 = *(void **)(v0 + 280);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44[2] + 1, 1, v44);
  }
  unint64_t v46 = v44[2];
  unint64_t v45 = v44[3];
  if (v46 >= v45 >> 1) {
    uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v45 > 1), v46 + 1, 1, v44);
  }
  uint64_t v48 = *(void *)(v0 + 432);
  uint64_t v47 = *(void *)(v0 + 440);
  uint64_t v49 = *(void *)(v0 + 344);
  *(void *)(v0 + 40) = v42;
  *(void *)(v0 + 48) = &protocol witness table for EmergencyCallMitigatorOverride;
  *(void *)(v0 + 16) = v43;
  v44[2] = v46 + 1;
  outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 16), (uint64_t)&v44[5 * v46 + 4]);
  *(void *)(v0 + 280) = v44;
  uint64_t v50 = *(void *)(v49 + 16);
  uint64_t v51 = *(void *)(v49 + 24);
  outlined init with copy of ReferenceResolutionClientProtocol?(v47, v48, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  LOBYTE(v47) = *(unsigned char *)(v49 + 32);
  *(unsigned char *)(v0 + 486) = v47;
  char v52 = *(unsigned char *)(v49 + 33);
  LOBYTE(v49) = *(unsigned char *)(v49 + 48);
  uint64_t v53 = type metadata accessor for AnnounceExecutionOverride();
  uint64_t v54 = swift_allocObject();
  *(_WORD *)(v54 + 16) = 1028;
  *(void *)(v54 + 24) = v50;
  *(void *)(v54 + 32) = v51;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v48, v54 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_topNlParse, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  *(unsigned char *)(v54 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isTriggerlessFollowup) = v47;
  *(unsigned char *)(v54 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isMitigated) = v52;
  *(unsigned char *)(v54 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isMedocSupported) = v49;
  uint64_t v55 = *(void **)(v0 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v55[2] + 1, 1, v55);
  }
  unint64_t v57 = v55[2];
  unint64_t v56 = v55[3];
  if (v57 >= v56 >> 1) {
    uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v56 > 1), v57 + 1, 1, v55);
  }
  char v58 = *(unsigned char *)(v0 + 485);
  *(void *)(v0 + 80) = v53;
  *(void *)(v0 + 88) = &protocol witness table for AnnounceExecutionOverride;
  *(void *)(v0 + 56) = v54;
  uint64_t v55[2] = v57 + 1;
  outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 56), (uint64_t)&v55[5 * v57 + 4]);
  *(void *)(v0 + 280) = v55;
  swift_endAccess();
  if ((v58 & 1) == 0)
  {
    char v59 = *(unsigned char *)(v0 + 484);
    char v60 = *(unsigned char *)(v0 + 483);
    uint64_t v62 = *(void *)(v0 + 328);
    uint64_t v61 = *(void *)(v0 + 336);
    char v63 = *(unsigned char *)(v0 + 482);
    char v64 = *(unsigned char *)(v0 + 480);
    uint64_t v66 = *(void *)(v0 + 304);
    uint64_t v65 = *(void *)(v0 + 312);
    uint64_t v78 = type metadata accessor for EmptyAsrOverride();
    uint64_t v67 = swift_allocObject();
    *(unsigned char *)(v67 + 16) = 6;
    *(unsigned char *)(v67 + 40) = v74;
    *(unsigned char *)(v67 + 41) = v63;
    *(void *)(v67 + 24) = v61;
    *(void *)(v67 + 32) = v62;
    *(unsigned char *)(v67 + 42) = v60;
    *(unsigned char *)(v67 + 44) = v64;
    *(unsigned char *)(v67 + 43) = v59;
    *(void *)(v67 + 48) = v66;
    *(void *)(v67 + 56) = v65;
    swift_beginAccess();
    uint64_t v55 = *(void **)(v0 + 280);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v55[2] + 1, 1, v55);
    }
    unint64_t v69 = v55[2];
    unint64_t v68 = v55[3];
    if (v69 >= v68 >> 1) {
      uint64_t v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v68 > 1), v69 + 1, 1, v55);
    }
    *(void *)(v0 + 200) = v78;
    *(void *)(v0 + 208) = &protocol witness table for EmptyAsrOverride;
    *(void *)(v0 + 176) = v67;
    uint64_t v55[2] = v69 + 1;
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 176), (uint64_t)&v55[5 * v69 + 4]);
    *(void *)(v0 + 280) = v55;
    swift_endAccess();
  }
  type metadata accessor for ExecutionOverrideDecisionMaker();
  uint64_t inited = swift_initStaticObject();
  type metadata accessor for CompositeExecutionOverrides();
  uint64_t v71 = swift_allocObject();
  *(void *)(v0 + 456) = v71;
  *(void *)(v71 + 16) = v55;
  uint64_t v77 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)inited + 88) + **(int **)(*(void *)inited + 88));
  swift_bridgeObjectRetain();
  uint64_t v72 = (void *)swift_task_alloc();
  *(void *)(v0 + 464) = v72;
  void *v72 = v0;
  v72[1] = specialized static ExecutionOverrideHandler.runExecutionOverridesAfterRCSelection(rcId:aceInputOrigin:input:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:endpointMode:executionOverrideContext:didPreviouslyFallbackToServer:isSpeechRequest:bridge:skipEmptyAsr:);
  return v77(v71);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  id v8;
  uint64_t v9;

  uint64_t v1 = (void *)v0[59];
  uint64_t v2 = v0[56];
  uint64_t v3 = v0[43];
  swift_retain();
  uint64_t v8 = v1;
  specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/ExecutionOverrideHandler.swift", 45, 2, (uint64_t)"runExecutionOverridesAfterRCSelection(rcId:aceInputOrigin:input:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:endpointMode:executionOverrideContext:didPreviouslyFallbackToServer:isSpeechRequest:bridge:skipEmptyAsr:)", 246, 2, v2, v3);

  swift_release();
  uint64_t v4 = v0[55];
  specialized Logger.debugF(_:_:_:_:)();
  type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  dispatch thunk of ConversationSELFHelper.emitExecutionOverrideInfo(rcId:executionOverrideDecision:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v4, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v6 = v0[59];
  return v5(v6);
}

uint64_t specialized static ExecutionOverrideHandler.runExecutionOverridesAfterRCSelection(rcId:aceInputOrigin:input:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:endpointMode:executionOverrideContext:didPreviouslyFallbackToServer:isSpeechRequest:bridge:skipEmptyAsr:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 472) = a1;
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](specialized static ExecutionOverrideHandler.runExecutionOverridesAfterRCSelection(rcId:aceInputOrigin:input:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:endpointMode:executionOverrideContext:didPreviouslyFallbackToServer:isSpeechRequest:bridge:skipEmptyAsr:), 0, 0);
}

ValueMetadata *type metadata accessor for ExecutionOverrideHandler()
{
  return &type metadata for ExecutionOverrideHandler;
}

id ExecutionOverrideResult.__allocating_init(type:decision:)(unsigned char *a1, char *a2)
{
  uint64_t v5 = objc_allocWithZone(v2);
  char v6 = *a2;
  v5[OBJC_IVAR____TtC14SiriKitRuntime23ExecutionOverrideResult_type] = *a1;
  v5[OBJC_IVAR____TtC14SiriKitRuntime23ExecutionOverrideResult_decision] = v6;
  v8.receiver = v5;
  v8.super_class = v2;
  return objc_msgSendSuper2(&v8, sel_init);
}

void ExecutionOverrideResult.type.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime23ExecutionOverrideResult_type);
}

void ExecutionOverrideResult.decision.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime23ExecutionOverrideResult_decision);
}

id ExecutionOverrideResult.init(type:decision:)(unsigned char *a1, char *a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  char v6 = *a2;
  v2[OBJC_IVAR____TtC14SiriKitRuntime23ExecutionOverrideResult_type] = *a1;
  v2[OBJC_IVAR____TtC14SiriKitRuntime23ExecutionOverrideResult_decision] = v6;
  v8.receiver = v2;
  v8.super_class = ObjectType;
  return objc_msgSendSuper2(&v8, sel_init);
}

id ExecutionOverrideResult.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void ExecutionOverrideResult.init()()
{
}

id ExecutionOverrideResult.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for ExecutionOverrideResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ExecutionOverrideResult);
}

uint64_t dispatch thunk of ExecutionOverrideResult.__allocating_init(type:decision:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

unint64_t ExecutionOverrideType.rawValue.getter()
{
  unint64_t result = 0xD000000000000016;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000021;
      break;
    case 2:
      unint64_t result = 0xD000000000000023;
      break;
    case 3:
    case 4:
      unint64_t result = 0xD000000000000022;
      break;
    case 5:
      unint64_t result = 0xD000000000000017;
      break;
    case 6:
      unint64_t result = 0x5253417974706D65;
      break;
    case 7:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 8:
      unint64_t result = 1701736302;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ExecutionOverrideType.asCNVSchemaType(isTriggerlessFollowUp:)(char a1)
{
  uint64_t result = 5;
  switch(*v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 4;
      break;
    case 2:
      uint64_t result = 7;
      break;
    case 4:
      uint64_t result = 1;
      break;
    case 6:
      uint64_t result = 6;
      break;
    case 8:
      if (a1) {
        uint64_t result = 3;
      }
      else {
        uint64_t result = 2;
      }
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

SiriKitRuntime::ExecutionOverrideType_optional __swiftcall ExecutionOverrideType.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ExecutionOverrideType.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 9;
  if (v5 < 9) {
    char v7 = v5;
  }
  char *v4 = v7;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ExecutionOverrideType(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type ExecutionOverrideType and conformance ExecutionOverrideType()
{
  unint64_t result = lazy protocol witness table cache variable for type ExecutionOverrideType and conformance ExecutionOverrideType;
  if (!lazy protocol witness table cache variable for type ExecutionOverrideType and conformance ExecutionOverrideType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExecutionOverrideType and conformance ExecutionOverrideType);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ExecutionOverrideType()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ExecutionOverrideType()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExecutionOverrideType()
{
  return Hasher._finalize()();
}

SiriKitRuntime::ExecutionOverrideType_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ExecutionOverrideType(Swift::String *a1)
{
  return ExecutionOverrideType.init(rawValue:)(*a1);
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ExecutionOverrideType@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = ExecutionOverrideType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

unsigned char *storeEnumTagSinglePayload for ExecutionOverrideType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9EF06ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExecutionOverrideType()
{
  return &type metadata for ExecutionOverrideType;
}

uint64_t FeatureChecker.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  FeatureChecker.init()();
  return v0;
}

uint64_t FeatureChecker.isSystemAssistantExperienceSupported.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t FeatureChecker.isIntelligenceFlowFeatureEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t FeatureChecker.isSystemAssistantExperienceEnabled.getter()
{
  return AFDeviceSupportsSAE();
}

uint64_t FeatureChecker.isReuseEagerChildRequestForIFEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 18);
}

uint64_t FeatureChecker.deinit()
{
  return v0;
}

uint64_t FeatureChecker.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

unsigned char *FeatureChecker.init()()
{
  v0[16] = AFDeviceSupportsSAEByDeviceCapabilityAndFeatureFlags();
  uint64_t v5 = &type metadata for IntelligenceFlowFeatureFlag;
  unint64_t v6 = lazy protocol witness table accessor for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag();
  char v1 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
  v0[17] = v1 & 1;
  uint64_t v5 = &type metadata for ReuseEagerChildRequestForIFFeatureFlag;
  unint64_t v6 = lazy protocol witness table accessor for type ReuseEagerChildRequestForIFFeatureFlag and conformance ReuseEagerChildRequestForIFFeatureFlag();
  char v2 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
  v0[18] = v2 & 1;
  return v0;
}

unint64_t lazy protocol witness table accessor for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag()
{
  unint64_t result = lazy protocol witness table cache variable for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag;
  if (!lazy protocol witness table cache variable for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag;
  if (!lazy protocol witness table cache variable for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IntelligenceFlowFeatureFlag and conformance IntelligenceFlowFeatureFlag);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ReuseEagerChildRequestForIFFeatureFlag and conformance ReuseEagerChildRequestForIFFeatureFlag()
{
  unint64_t result = lazy protocol witness table cache variable for type ReuseEagerChildRequestForIFFeatureFlag and conformance ReuseEagerChildRequestForIFFeatureFlag;
  if (!lazy protocol witness table cache variable for type ReuseEagerChildRequestForIFFeatureFlag and conformance ReuseEagerChildRequestForIFFeatureFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReuseEagerChildRequestForIFFeatureFlag and conformance ReuseEagerChildRequestForIFFeatureFlag);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReuseEagerChildRequestForIFFeatureFlag and conformance ReuseEagerChildRequestForIFFeatureFlag;
  if (!lazy protocol witness table cache variable for type ReuseEagerChildRequestForIFFeatureFlag and conformance ReuseEagerChildRequestForIFFeatureFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReuseEagerChildRequestForIFFeatureFlag and conformance ReuseEagerChildRequestForIFFeatureFlag);
  }
  return result;
}

uint64_t protocol witness for FeatureChecking.isSystemAssistantExperienceSupported.getter in conformance FeatureChecker()
{
  return *(unsigned __int8 *)(*(void *)v0 + 16);
}

uint64_t protocol witness for FeatureChecking.isSystemAssistantExperienceEnabled.getter in conformance FeatureChecker()
{
  return AFDeviceSupportsSAE();
}

uint64_t protocol witness for FeatureChecking.isIntelligenceFlowFeatureEnabled.getter in conformance FeatureChecker()
{
  return *(unsigned __int8 *)(*(void *)v0 + 17);
}

uint64_t protocol witness for FeatureChecking.isReuseEagerChildRequestForIFEnabled.getter in conformance FeatureChecker()
{
  return *(unsigned __int8 *)(*(void *)v0 + 18);
}

uint64_t dispatch thunk of FeatureChecking.isSystemAssistantExperienceSupported.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of FeatureChecking.isSystemAssistantExperienceEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of FeatureChecking.isIntelligenceFlowFeatureEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of FeatureChecking.isReuseEagerChildRequestForIFEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t type metadata accessor for FeatureChecker()
{
  return self;
}

uint64_t method lookup function for FeatureChecker(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for FeatureChecker);
}

uint64_t dispatch thunk of FeatureChecker.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

SiriKitRuntime::FindMyAffinityScorer __swiftcall FindMyAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA062940;
  uint64_t v1 = 0xD000000000000026;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t FindMyAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t specialized FindMyAffinityScorer.findMyDeviceNameIdentifiers(from:)(uint64_t a1)
{
  if (!a1)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
    unsigned int v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      unint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v6 = 0;
      _os_log_impl(&dword_1B9C64000, v4, v5, "FindMyAffinityScorer findMyDeviceNameIdentifiers | missing reference", v6, 2u);
      MEMORY[0x1BA9E48C0](v6, -1, -1);
    }

    return MEMORY[0x1E4FBC860];
  }
  swift_retain();
  uint64_t v1 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  if (!v1)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
    objc_super v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_1B9C64000, v8, v9, "FindMyAffinityScorer findMyDeviceNameIdentifiers | unable to obtain device name identifiers", v10, 2u);
      MEMORY[0x1BA9E48C0](v10, -1, -1);
    }

    swift_release();
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v2 = v1;
  swift_release();
  return v2;
}

uint64_t specialized FindMyAffinityScorer.containsDeviceNameIdentifier(reference:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoIdentifier();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  unint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  objc_super v8 = (char *)&v30 - v7;
  uint64_t v9 = specialized FindMyAffinityScorer.findMyDeviceNameIdentifiers(from:)(a1);
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    uint64_t v12 = v3 + 16;
    uint64_t v11 = v13;
    unint64_t v14 = v9 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    uint64_t v15 = (void (**)(char *, uint64_t))(v12 - 8);
    uint64_t v16 = *(void *)(v12 + 56);
    uint64_t v30 = v9;
    uint64_t v31 = v16;
    swift_bridgeObjectRetain();
    while (1)
    {
      v11(v8, v14, v2);
      uint64_t v19 = UsoIdentifier.namespace.getter();
      if (v20)
      {
        if (v19 == 0x6369746E616D6573 && v20 == 0xEE0065756C61765FLL)
        {
          swift_bridgeObjectRelease();
          v11(v6, (unint64_t)v8, v2);
LABEL_11:
          if (UsoIdentifier.appBundleId.getter() == 0x794D646E6946 && v22 == 0xE600000000000000)
          {
            swift_bridgeObjectRelease();
            unint64_t v29 = *v15;
            (*v15)(v6, v2);
            v29(v8, v2);
LABEL_22:
            swift_bridgeObjectRelease_n();
            return 1;
          }
          char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v18 = *v15;
          (*v15)(v6, v2);
          v18(v8, v2);
          if (v17) {
            goto LABEL_22;
          }
          goto LABEL_4;
        }
        char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v11(v6, (unint64_t)v8, v2);
        if (v21) {
          goto LABEL_11;
        }
      }
      else
      {
        v11(v6, (unint64_t)v8, v2);
      }
      uint64_t v23 = *v15;
      (*v15)(v6, v2);
      v23(v8, v2);
LABEL_4:
      v14 += v31;
      if (!--v10)
      {
        swift_bridgeObjectRelease_n();
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v24 = type metadata accessor for Logger();
        __swift_project_value_buffer(v24, (uint64_t)static Logger.executor);
        char v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v27 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v27 = 0;
          _os_log_impl(&dword_1B9C64000, v25, v26, "FindMyAffinityScorer containsDeviceNameIdentifier | unable to obtain identifier", v27, 2u);
          MEMORY[0x1BA9E48C0](v27, -1, -1);
        }

        return 0;
      }
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized FindMyAffinityScorer.containsDeviceTypeIdentifier(reference:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoIdentifier();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = specialized FindMyAffinityScorer.findMyDeviceNameIdentifiers(from:)(a1);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v10 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    uint64_t v8 = v3 + 16;
    uint64_t v9 = v10;
    unint64_t v11 = v6 + ((*(unsigned __int8 *)(v8 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 64));
    uint64_t v12 = (void (**)(char *, uint64_t))(v8 - 8);
    uint64_t v13 = *(void *)(v8 + 56);
    v22[1] = v6;
    swift_bridgeObjectRetain();
    uint64_t v24 = "dRequestForIFEnabled";
    unint64_t v23 = 0x80000001BA068C60;
    do
    {
      v9(v5, v11, v2);
      uint64_t v15 = UsoIdentifier.namespace.getter();
      if (v16)
      {
        if (v15 == 0xD000000000000010 && v16 == v23)
        {
          swift_bridgeObjectRelease();
          (*v12)(v5, v2);
LABEL_17:
          swift_bridgeObjectRelease_n();
          return 1;
        }
        char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        (*v12)(v5, v2);
        if (v14) {
          goto LABEL_17;
        }
      }
      else
      {
        (*v12)(v5, v2);
      }
      v11 += v13;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease_n();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_1B9C64000, v18, v19, "FindMyAffinityScorer containsDeviceTypeIdentifier | No findMyDeviceType", v20, 2u);
      MEMORY[0x1BA9E48C0](v20, -1, -1);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t specialized FindMyAffinityScorer.isSupported(usoTask:)()
{
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v6) {
    goto LABEL_12;
  }
  outlined init with copy of Any?((uint64_t)v5, (uint64_t)v4);
  type metadata accessor for UsoTask_getLocation_common_UserEntity();
  if (!swift_dynamicCast())
  {
    type metadata accessor for UsoTask_ping_common_UserEntity();
    if (!swift_dynamicCast())
    {
      type metadata accessor for UsoTask_request_common_UserEntity();
      if (swift_dynamicCast())
      {
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
        swift_release();
        goto LABEL_9;
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
LABEL_12:
      char v1 = 0;
      goto LABEL_13;
    }
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
  swift_release();
  char v0 = specialized FindMyAffinityScorer.containsDeviceNameIdentifier(reference:)(v3);
  swift_release();
  if ((v0 & 1) == 0)
  {
    dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
LABEL_9:
    char v1 = specialized FindMyAffinityScorer.containsDeviceTypeIdentifier(reference:)(v3);
    swift_release();
    swift_release();
    goto LABEL_10;
  }
  swift_release();
  char v1 = 1;
LABEL_10:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
LABEL_13:
  outlined destroy of Any?((uint64_t)v5);
  return v1 & 1;
}

uint64_t specialized FindMyAffinityScorer.score(input:environment:)()
{
  uint64_t v0 = type metadata accessor for Parse();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for USOParse();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v1 + 88))(v3, v0) != *MEMORY[0x1E4FA1F48])
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v8 = 2;
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_1B9C64000, v10, v11, "FindMyAffinityScorer score | unexpected parse", v12, 2u);
      MEMORY[0x1BA9E48C0](v12, -1, -1);

      return v8;
    }

    return 2;
  }
  (*(void (**)(char *, uint64_t))(v1 + 96))(v3, v0);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  if (!specialized static AffinityScorerUtils.getTask(_:)())
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
    char v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_1B9C64000, v14, v15, "FindMyAffinityScorer score | unable to obtain task from parse", v16, 2u);
      MEMORY[0x1BA9E48C0](v16, -1, -1);
    }

    goto LABEL_20;
  }
  if ((specialized FindMyAffinityScorer.isSupported(usoTask:)() & 1) == 0)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_1B9C64000, v18, v19, "FindMyAffinityScorer score | task is unsupported by FMD or doesn't contain device name identifier", v20, 2u);
      MEMORY[0x1BA9E48C0](v20, -1, -1);
    }

    swift_release();
LABEL_20:
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 2;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_release();
  return 3;
}

ValueMetadata *type metadata accessor for FindMyAffinityScorer()
{
  return &type metadata for FindMyAffinityScorer;
}

uint64_t FlexibleAnnounceFeatureFlag.isEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  uint64_t v0 = (unsigned __int8 *)(static FlexibleAnnounceFeatureFlag.forceEnabled + 16);
  uint64_t v1 = (os_unfair_lock_s *)(static FlexibleAnnounceFeatureFlag.forceEnabled + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static FlexibleAnnounceFeatureFlag.forceEnabled + 20));
  partial apply for closure #1 in FlexibleAnnounceFeatureFlag.isEnabled.getter(v0, &v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

const char *FlexibleAnnounceFeatureFlag.domain.getter()
{
  return "Siri";
}

const char *FlexibleAnnounceFeatureFlag.feature.getter()
{
  return "intuitive_conversation_announce";
}

uint64_t *FlexibleAnnounceFeatureFlag.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  return &static FlexibleAnnounceFeatureFlag.forceEnabled;
}

uint64_t static FlexibleAnnounceFeatureFlag.forceEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }

  return swift_retain();
}

unsigned __int8 *closure #1 in FlexibleAnnounceFeatureFlag.isEnabled.getter@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  if (v3 == 2)
  {
    uint64_t v7 = &type metadata for FlexibleAnnounceFeatureFlag;
    unint64_t v8 = lazy protocol witness table accessor for type FlexibleAnnounceFeatureFlag and conformance FlexibleAnnounceFeatureFlag();
    char v4 = isFeatureEnabled(_:)();
    SiriKitRuntime::FindMyAffinityScorer result = (unsigned __int8 *)__swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v6);
    char v5 = v4 & 1;
  }
  else
  {
    char v5 = v3 & 1;
  }
  *a2 = v5;
  return result;
}

uint64_t static FlexibleAnnounceFeatureFlag.== infix(_:_:)()
{
  return 1;
}

void FlexibleAnnounceFeatureFlag.hash(into:)()
{
}

Swift::Int FlexibleAnnounceFeatureFlag.hashValue.getter()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type FlexibleAnnounceFeatureFlag and conformance FlexibleAnnounceFeatureFlag()
{
  unint64_t result = lazy protocol witness table cache variable for type FlexibleAnnounceFeatureFlag and conformance FlexibleAnnounceFeatureFlag;
  if (!lazy protocol witness table cache variable for type FlexibleAnnounceFeatureFlag and conformance FlexibleAnnounceFeatureFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlexibleAnnounceFeatureFlag and conformance FlexibleAnnounceFeatureFlag);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FlexibleAnnounceFeatureFlag and conformance FlexibleAnnounceFeatureFlag;
  if (!lazy protocol witness table cache variable for type FlexibleAnnounceFeatureFlag and conformance FlexibleAnnounceFeatureFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlexibleAnnounceFeatureFlag and conformance FlexibleAnnounceFeatureFlag);
  }
  return result;
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance FlexibleAnnounceFeatureFlag()
{
  return "intuitive_conversation_announce";
}

unsigned char *storeEnumTagSinglePayload for FlexibleAnnounceFeatureFlag(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B9EF1BF8);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for FlexibleAnnounceFeatureFlag()
{
  return &type metadata for FlexibleAnnounceFeatureFlag;
}

uint64_t FlowAgent.__allocating_init(flow:tasks:pluginInfo:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  FlowAgent.init(flow:tasks:pluginInfo:completion:)(a1, a2, a3, a4);
  return v8;
}

uint64_t FlowAgent.flow.getter()
{
  return swift_retain();
}

uint64_t FlowAgent.completion.getter()
{
  return swift_retain();
}

uint64_t FlowAgent.isPreparableFlow.getter()
{
  return *(unsigned __int8 *)(v0 + 128);
}

uint64_t FlowAgent.couldPrepareBeCalled.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 129);
}

uint64_t FlowAgent.couldPrepareBeCalled.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 129) = a1;
  return result;
}

uint64_t (*FlowAgent.couldPrepareBeCalled.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t FlowAgent.isCancelled.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 130);
}

uint64_t FlowAgent.isCancelled.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 130) = a1;
  return result;
}

uint64_t (*FlowAgent.isCancelled.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t FlowAgent.tasks.getter()
{
  return swift_bridgeObjectRetain();
}

id FlowAgent.pluginInfo.getter()
{
  return *(id *)(v0 + 160);
}

uint64_t FlowAgent.init(flow:tasks:pluginInfo:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  swift_defaultActor_initialize();
  *(unsigned char *)(v5 + 130) = 0;
  *(void *)(v5 + 136) = 0;
  *(void *)(v5 + 144) = 0;
  *(void *)(v5 + 112) = a1;
  *(void *)(v5 + 120) = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreparableFlow);
  swift_retain();
  swift_retain();
  dispatch thunk of AnyFlow.unbox<A>(as:)();
  swift_release();
  swift_release();
  LOBYTE(a1) = v12 != 0;
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, &demangling cache variable for type metadata for PreparableFlow?);
  *(unsigned char *)(v5 + 128) = a1;
  *(unsigned char *)(v5 + 129) = a1;
  *(void *)(v5 + 152) = a2;
  *(void *)(v5 + 160) = a3;
  return v5;
}

uint64_t FlowAgent.__allocating_init(loadedFlow:completion:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for FlowPluginInfo();
  LoadedFlowInfo.fromBundle.getter();
  uint64_t v4 = FlowPluginInfo.__allocating_init(pluginBundle:)(v11);
  uint64_t v5 = LoadedFlowInfo.flow.getter();
  uint64_t v6 = LoadedFlowInfo.activeTasks.getter();
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = MEMORY[0x1E4FBC860];
  }
  type metadata accessor for FlowAgent();
  uint64_t v8 = swift_allocObject();
  FlowAgent.init(flow:tasks:pluginInfo:completion:)(v5, v7, v4, a2);
  uint64_t v9 = type metadata accessor for LoadedFlowInfo();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
  return v8;
}

uint64_t type metadata accessor for FlowAgent()
{
  return self;
}

Swift::Void __swiftcall FlowAgent.cancel()()
{
  uint64_t v1 = type metadata accessor for FlowTraceEvent();
  uint64_t v34 = *(void *)(v1 - 8);
  uint64_t v35 = v1;
  MEMORY[0x1F4188790](v1);
  uint64_t v33 = (uint64_t *)((char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  swift_retain_n();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v37 = *(void *)(v0 + 112);
    v38[0] = v7;
    type metadata accessor for AnyFlow();
    lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, MEMORY[0x1E4FA1748]);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v4, v5, "[Conversation] Cancel flow %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v7, -1, -1);
    MEMORY[0x1BA9E48C0](v6, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  swift_beginAccess();
  *(unsigned char *)(v0 + 130) = 1;
  uint64_t v10 = *(void *)(v0 + 144);
  if (v10)
  {
    swift_retain_n();
    swift_retain();
    os_log_type_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      char v32 = v13 + 4;
      uint64_t v36 = *(void *)(v0 + 112);
      uint64_t v37 = v14;
      type metadata accessor for AnyFlow();
      lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, MEMORY[0x1E4FA1748]);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v11, v12, "%s cancelling prepare() task.", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v14, -1, -1);
      MEMORY[0x1BA9E48C0](v13, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    uint64_t v17 = type metadata accessor for PrepareResponse();
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    MEMORY[0x1BA9E3300](v10, v17, v18, MEMORY[0x1E4FBC0F0]);
    swift_release();
  }
  uint64_t v19 = *(void *)(v0 + 136);
  if (v19)
  {
    swift_retain_n();
    swift_retain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      char v32 = v22 + 4;
      uint64_t v36 = *(void *)(v0 + 112);
      uint64_t v37 = v23;
      type metadata accessor for AnyFlow();
      lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, MEMORY[0x1E4FA1748]);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v20, v21, "%s cancelling execute() task.", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v23, -1, -1);
      MEMORY[0x1BA9E48C0](v22, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    uint64_t v26 = type metadata accessor for ExecuteResponse();
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    MEMORY[0x1BA9E3300](v19, v26, v27, MEMORY[0x1E4FBC0F0]);
    swift_release();
  }
  unint64_t v29 = v33;
  uint64_t v28 = v34;
  *uint64_t v33 = *(void *)(v0 + 112);
  uint64_t v30 = v35;
  (*(void (**)(void *, void, uint64_t))(v28 + 104))(v29, *MEMORY[0x1E4FA1878], v35);
  swift_retain();
  static FlowTrace.trace(event:)();
  (*(void (**)(void *, uint64_t))(v28 + 8))(v29, v30);
}

uint64_t FlowAgent.on(input:)(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  uint64_t v3 = type metadata accessor for FlowTraceEvent();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  return MEMORY[0x1F4188298](FlowAgent.on(input:), v1, 0);
}

uint64_t FlowAgent.on(input:)()
{
  uint64_t v20 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[9];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v19 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    v0[6] = *(void *)(v5 + 112);
    type metadata accessor for AnyFlow();
    lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, MEMORY[0x1E4FA1748]);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B9C64000, v2, v3, "%s on input.", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v7, -1, -1);
    MEMORY[0x1BA9E48C0](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v11 = v0[8];
  uint64_t v10 = v0[9];
  type metadata accessor for SiriEnvironment();
  uint64_t v12 = *(void *)(v10 + 112);
  v0[13] = v12;
  v0[5] = v12;
  uint64_t v13 = swift_task_alloc();
  v0[14] = v13;
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = v10;
  swift_retain();
  uint64_t v14 = (void *)swift_task_alloc();
  v0[15] = v14;
  uint64_t v15 = type metadata accessor for AnyFlow();
  uint64_t v16 = lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, MEMORY[0x1E4FA1748]);
  *uint64_t v14 = v0;
  v14[1] = FlowAgent.on(input:);
  uint64_t v17 = MEMORY[0x1E4FBB390];
  return MEMORY[0x1F415AA98](v0 + 16, v0 + 5, &async function pointer to partial apply for closure #1 in FlowAgent.on(input:), v13, v15, v17, v16);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](FlowAgent.on(input:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v15;

  uint64_t v1 = *(unsigned __int8 *)(v0 + 128);
  if (v1 == 1)
  {
    uint64_t v2 = *(void *)(v0 + 72);
    os_log_type_t v3 = *(unsigned char *)(v2 + 128);
    swift_beginAccess();
    *(unsigned char *)(v2 + 129) = v3;
  }
  uint64_t v5 = *(void **)(v0 + 96);
  BOOL v4 = *(void *)(v0 + 104);
  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v7 = *(void *)(v0 + 88);
  uint64_t v8 = *(void *)(v0 + 64);
  unint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (flow: AnyFlow, input: Input, result: Bool));
  uint64_t v10 = (char *)v5 + *(int *)(v9 + 48);
  uint64_t v11 = *(int *)(v9 + 64);
  *uint64_t v5 = v4;
  uint64_t v12 = type metadata accessor for Input();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v8, v12);
  *((unsigned char *)v5 + v11) = v1;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v5, *MEMORY[0x1E4FA1860], v6);
  swift_retain();
  static FlowTrace.trace(event:)();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v5, v6);
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v13(v1);
}

uint64_t closure #1 in FlowAgent.on(input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v3[3] = a2;
  v3[4] = a3;
  long long v3[2] = a1;
  uint64_t v4 = type metadata accessor for OSSignpostID();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[8] = v5;
  v3[9] = *(void *)(v5 - 8);
  v3[10] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in FlowAgent.on(input:), 0, 0);
}

uint64_t closure #1 in FlowAgent.on(input:)()
{
  *(unsigned char *)(v0 + 152) = static os_signpost_type_t.begin.getter();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 32);
  *(void *)(v0 + 88) = static Log.executor;
  *(void *)(v0 + 96) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v5 = swift_allocObject();
  *(void *)(v0 + 104) = v5;
  *(_OWORD *)(v5 + 16) = xmmword_1BA0563A0;
  Input.identifier.getter();
  uint64_t v6 = UUID.uuidString.getter();
  uint64_t v8 = v7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  *(void *)(v5 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v9 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v0 + 112) = v9;
  *(void *)(v5 + 64) = v9;
  *(void *)(v5 + 32) = v6;
  *(void *)(v5 + 40) = v8;
  return MEMORY[0x1F4188298](closure #1 in FlowAgent.on(input:), v4, 0);
}

{
  uint64_t v0;

  *(void *)(v0 + 120) = *(void *)(*(void *)(v0 + 32) + 112);
  return MEMORY[0x1F4188298](closure #1 in FlowAgent.on(input:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void **)(v0 + 104);
  uint64_t v3 = AnyFlow.description.getter();
  v2[12] = MEMORY[0x1E4FBB1A0];
  v2[13] = v1;
  v2[9] = v3;
  v2[10] = v4;
  return MEMORY[0x1F4188298](closure #1 in FlowAgent.on(input:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void **)(v0 + 104);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1BA04FD90;
  uint64_t v4 = ObjectIdentifier.hashValue.getter();
  uint64_t v5 = MEMORY[0x1E4FBB5C8];
  *(void *)(v3 + 56) = MEMORY[0x1E4FBB550];
  *(void *)(v3 + 64) = v5;
  *(void *)(v3 + 32) = v4;
  uint64_t v6 = String.init(format:_:)();
  v2[17] = MEMORY[0x1E4FBB1A0];
  v2[18] = v1;
  v2[14] = v6;
  v2[15] = v7;
  return MEMORY[0x1F4188298](closure #1 in FlowAgent.on(input:), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  void *v8;
  uint64_t v9;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;

  uint64_t v1 = (void *)v0[13];
  uint64_t v3 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v4 = v0[5];
  AnyFlow.description.getter();
  uint64_t v5 = String.hashValue.getter();
  swift_bridgeObjectRelease();
  uint64_t v6 = MEMORY[0x1E4FBB5C8];
  v1[22] = MEMORY[0x1E4FBB550];
  v1[23] = v6;
  v1[19] = v5;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[16] = v7;
  v0[17] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v7(v2, v4);
  uint64_t v11 = (uint64_t (*)(uint64_t))((int)*MEMORY[0x1E4FA1738] + MEMORY[0x1E4FA1738]);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[18] = v8;
  *uint64_t v8 = v0;
  v8[1] = closure #1 in FlowAgent.on(input:);
  unint64_t v9 = v0[3];
  return v11(v9);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  unsigned char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = *(unsigned __int8 *)(v0 + 153);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(unsigned char **)(v0 + 16);
  static os_signpost_type_t.end.getter();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = MEMORY[0x1E4FBB550];
  *(_OWORD *)(v6 + 16) = xmmword_1BA04FD90;
  uint64_t v8 = MEMORY[0x1E4FBB5C8];
  *(void *)(v6 + 56) = v7;
  *(void *)(v6 + 64) = v8;
  *(void *)(v6 + 32) = v1;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_bridgeObjectRelease();
  v2(v3, v4);
  *uint64_t v5 = v1;
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t closure #1 in FlowAgent.on(input:)(char a1)
{
  *(unsigned char *)(*(void *)v1 + 153) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in FlowAgent.on(input:), 0, 0);
}

uint64_t FlowAgent.paraphrase()(uint64_t a1)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = v1;
  return MEMORY[0x1F4188298](FlowAgent.paraphrase(), v1, 0);
}

uint64_t FlowAgent.paraphrase()()
{
  uint64_t v19 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[6];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v18 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    v0[3] = *(void *)(v5 + 112);
    type metadata accessor for AnyFlow();
    lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, MEMORY[0x1E4FA1748]);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B9C64000, v2, v3, "%s paraphrase.", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v7, -1, -1);
    MEMORY[0x1BA9E48C0](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v10 = v0[6];
  type metadata accessor for SiriEnvironment();
  v0[2] = *(void *)(v10 + 112);
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[7] = v11;
  uint64_t v12 = type metadata accessor for AnyFlow();
  uint64_t v13 = type metadata accessor for ActionParaphrase();
  uint64_t v14 = lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, MEMORY[0x1E4FA1748]);
  void *v11 = v0;
  v11[1] = FlowAgent.paraphrase();
  uint64_t v15 = v0[5];
  uint64_t v16 = v0[6];
  return MEMORY[0x1F415AA98](v15, v0 + 2, &async function pointer to partial apply for closure #1 in FlowAgent.paraphrase(), v16, v12, v13, v14);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  os_log_type_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t closure #1 in FlowAgent.paraphrase()(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 112) = a1;
  *(void *)(v2 + 120) = a2;
  return MEMORY[0x1F4188298](closure #1 in FlowAgent.paraphrase(), a2, 0);
}

uint64_t closure #1 in FlowAgent.paraphrase()()
{
  *(void *)(v0 + 128) = *(void *)(*(void *)(v0 + 120) + 112);
  return MEMORY[0x1F4188298](closure #1 in FlowAgent.paraphrase(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v16 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ParaphrasableFlow);
  dispatch thunk of AnyFlow.unbox<A>(as:)();
  if (*(void *)(v0 + 80))
  {
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 56), v0 + 16);
    uint64_t v1 = *(void *)(v0 + 40);
    uint64_t v2 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v1);
    os_log_type_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v3;
    *os_log_type_t v3 = v0;
    v3[1] = closure #1 in FlowAgent.paraphrase();
    BOOL v4 = *(void *)(v0 + 112);
    return MEMORY[0x1F41517E8](v4, v1, v2);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for ParaphrasableFlow?);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
    swift_retain_n();
    uint64_t v6 = Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = *(void *)(v0 + 128);
      unint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v15 = v10;
      *(_DWORD *)unint64_t v9 = 136315138;
      *(void *)(v0 + 96) = v8;
      type metadata accessor for AnyFlow();
      lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, MEMORY[0x1E4FA1748]);
      uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v6, v7, "[Conversation] %s paraphrase called on non input paraphrasing flow", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v10, -1, -1);
      MEMORY[0x1BA9E48C0](v9, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    static ActionParaphrase.noParaphrase()();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in FlowAgent.paraphrase(), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t FlowAgent.execute(timeout:)(uint64_t a1, uint64_t a2)
{
  v3[20] = a2;
  v3[21] = v2;
  v3[19] = a1;
  uint64_t v4 = type metadata accessor for CancellationError();
  v3[22] = v4;
  v3[23] = *(void *)(v4 - 8);
  v3[24] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for TimeoutError();
  v3[25] = v5;
  v3[26] = *(void *)(v5 - 8);
  v3[27] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for FlowTraceEvent();
  v3[28] = v6;
  v3[29] = *(void *)(v6 - 8);
  v3[30] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ExecuteResponse();
  v3[31] = v7;
  v3[32] = *(void *)(v7 - 8);
  v3[33] = swift_task_alloc();
  v3[34] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DispatchTimeInterval();
  v3[35] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[36] = v9;
  v3[37] = *(void *)(v9 + 64);
  v3[38] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[39] = swift_task_alloc();
  return MEMORY[0x1F4188298](FlowAgent.execute(timeout:), v2, 0);
}

uint64_t FlowAgent.execute(timeout:)()
{
  uint64_t v40 = v0;
  uint64_t v1 = v0[21];
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 130) == 1)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
    swift_retain_n();
    os_log_type_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    uint64_t v6 = v0[21];
    if (v5)
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v39 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      v0[17] = *(void *)(v6 + 112);
      type metadata accessor for AnyFlow();
      lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, MEMORY[0x1E4FA1748]);
      uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v3, v4, "[Conversation] %s execute cancelled before call.", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v8, -1, -1);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    static ExecuteResponse.complete()();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = (uint64_t (*)(void))v0[1];
    return v20();
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    v0[40] = __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    swift_retain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = v0[21];
    if (v14)
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v39 = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      v0[15] = *(void *)(v15 + 112);
      type metadata accessor for AnyFlow();
      lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, MEMORY[0x1E4FA1748]);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[16] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v12, v13, "[Conversation] %s execute.", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v17, -1, -1);
      MEMORY[0x1BA9E48C0](v16, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    uint64_t v23 = v0[38];
    uint64_t v22 = v0[39];
    uint64_t v24 = v0[36];
    uint64_t v25 = v0[35];
    uint64_t v27 = v0[20];
    uint64_t v26 = v0[21];
    uint64_t v28 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v22, 1, 1, v28);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v23, v27, v25);
    uint64_t v30 = lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(&lazy protocol witness table cache variable for type FlowAgent and conformance FlowAgent, v29, (void (*)(uint64_t))type metadata accessor for FlowAgent);
    unint64_t v31 = (*(unsigned __int8 *)(v24 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
    char v32 = (char *)swift_allocObject();
    *((void *)v32 + 2) = v26;
    *((void *)v32 + 3) = v30;
    *((void *)v32 + 4) = v26;
    (*(void (**)(char *, uint64_t, uint64_t))(v24 + 32))(&v32[v31], v23, v25);
    swift_retain_n();
    uint64_t v33 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC11SiriKitFlow15ExecuteResponseV_Tgm5(v22, (uint64_t)&async function pointer to partial apply for closure #1 in FlowAgent.execute(timeout:), (uint64_t)v32);
    v0[41] = v33;
    *(void *)(v26 + 136) = v33;
    swift_retain();
    swift_release();
    uint64_t v34 = (void *)swift_task_alloc();
    v0[42] = v34;
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v0[43] = v35;
    *uint64_t v34 = v0;
    v34[1] = FlowAgent.execute(timeout:);
    uint64_t v36 = v0[33];
    uint64_t v37 = v0[31];
    uint64_t v38 = MEMORY[0x1E4FBC0F0];
    return MEMORY[0x1F4187D90](v36, v33, v37, v35, v38);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 352) = v0;
  swift_task_dealloc();
  os_log_type_t v3 = *(void *)(v2 + 168);
  if (v0) {
    os_log_type_t v4 = FlowAgent.execute(timeout:);
  }
  else {
    os_log_type_t v4 = FlowAgent.execute(timeout:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;

  uint64_t v30 = v0;
  uint64_t v1 = v0[21];
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[32] + 32);
  v2(v0[34], v0[33], v0[31]);
  if (*(unsigned char *)(v1 + 130) == 1)
  {
    swift_retain_n();
    os_log_type_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    uint64_t v6 = v0[21];
    if (v5)
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v29 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      v0[13] = *(void *)(v6 + 112);
      type metadata accessor for AnyFlow();
      lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, MEMORY[0x1E4FA1748]);
      uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v3, v4, "[Conversation] %s execute cancelled.", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v8, -1, -1);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    uint64_t v28 = v0[34];
    unint64_t v19 = v0[31];
    uint64_t v20 = v0[32];
    uint64_t v22 = v0[29];
    uint64_t v21 = (void *)v0[30];
    uint64_t v23 = v0[28];
    uint64_t v24 = v0[21];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (flow: AnyFlow, response: ExecuteResponse));
    *uint64_t v21 = *(void *)(v24 + 112);
    swift_retain();
    static ExecuteResponse.complete()();
    (*(void (**)(void *, void, uint64_t))(v22 + 104))(v21, *MEMORY[0x1E4FA1868], v23);
    static FlowTrace.trace(event:)();
    (*(void (**)(void *, uint64_t))(v22 + 8))(v21, v23);
    static ExecuteResponse.complete()();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v28, v19);
  }
  else
  {
    uint64_t v11 = v0[34];
    uint64_t v12 = v0[31];
    os_log_type_t v13 = v0[32];
    BOOL v14 = v0[29];
    uint64_t v15 = (void *)v0[30];
    uint64_t v16 = v0[28];
    uint64_t v17 = v0[21];
    uint64_t v27 = v0[19];
    uint64_t v18 = (char *)v15
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (flow: AnyFlow, response: ExecuteResponse))
                 + 48);
    *uint64_t v15 = *(void *)(v17 + 112);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, v11, v12);
    (*(void (**)(void *, void, uint64_t))(v14 + 104))(v15, *MEMORY[0x1E4FA1868], v16);
    swift_retain();
    static FlowTrace.trace(event:)();
    swift_release();
    (*(void (**)(void *, uint64_t))(v14 + 8))(v15, v16);
    v2(v27, v11, v12);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

{
  void *v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  Swift::String v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  void *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  Swift::String v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t (*v43)(void);
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;

  uint64_t v47 = v0;
  uint64_t v1 = (void *)v0[44];
  v0[5] = v1;
  uint64_t v2 = v1;
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[26] + 8))(v0[27], v0[25]);
    swift_retain_n();
    os_log_type_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.fault.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    uint64_t v6 = v0[21];
    if (v5)
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      unint64_t v45 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      v0[11] = *(void *)(v6 + 112);
      type metadata accessor for AnyFlow();
      lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, MEMORY[0x1E4FA1748]);
      uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v3, v4, "[Conversation] %s timed out during execution", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v8, -1, -1);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    uint64_t v21 = (void *)v0[44];
    uint64_t v22 = v0[21];
    unint64_t v45 = 0;
    unint64_t v46 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    v0[10] = *(void *)(v22 + 112);
    type metadata accessor for AnyFlow();
    lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, MEMORY[0x1E4FA1748]);
    swift_retain();
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v25 = v24;
    swift_bridgeObjectRelease();
    swift_release();
    unint64_t v45 = v23;
    unint64_t v46 = v25;
    v26._object = (void *)0x80000001BA068CC0;
    v26._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v26);
    uint64_t v27 = v45;
    uint64_t v28 = v46;
    lazy protocol witness table accessor for type TimedOutError and conformance TimedOutError();
    swift_allocError();
    void *v29 = v27;
    v29[1] = v28;
    swift_willThrow();
    swift_release();
    uint64_t v30 = v21;
LABEL_14:

    goto LABEL_15;
  }
  uint64_t v11 = (void *)v0[44];
  v0[6] = v11;
  uint64_t v12 = v11;
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[23] + 8))(v0[24], v0[22]);
    swift_retain_n();
    os_log_type_t v13 = Logger.logObject.getter();
    BOOL v14 = static os_log_type_t.debug.getter();
    uint64_t v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = v0[21];
    if (v15)
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      unint64_t v45 = v18;
      *(_DWORD *)uint64_t v17 = 136315138;
      v0[8] = *(void *)(v16 + 112);
      type metadata accessor for AnyFlow();
      lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, MEMORY[0x1E4FA1748]);
      unint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v13, v14, "[Conversation] %s cancelled during execution", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v18, -1, -1);
      MEMORY[0x1BA9E48C0](v17, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    uint64_t v34 = (void *)v0[44];
    uint64_t v35 = v0[21];
    unint64_t v45 = 0;
    unint64_t v46 = 0xE000000000000000;
    _StringGuts.grow(_:)(29);
    v0[7] = *(void *)(v35 + 112);
    type metadata accessor for AnyFlow();
    lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, MEMORY[0x1E4FA1748]);
    swift_retain();
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v38 = v37;
    swift_bridgeObjectRelease();
    swift_release();
    unint64_t v45 = v36;
    unint64_t v46 = v38;
    v39._object = (void *)0x80000001BA068CA0;
    v39._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v39);
    uint64_t v40 = v45;
    uint64_t v41 = v46;
    lazy protocol witness table accessor for type CancelledError and conformance CancelledError();
    swift_allocError();
    void *v42 = v40;
    v42[1] = v41;
    swift_willThrow();
    swift_release();
    uint64_t v30 = v34;
    goto LABEL_14;
  }
  unint64_t v31 = Logger.logObject.getter();
  char v32 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v33 = 0;
    _os_log_impl(&dword_1B9C64000, v31, v32, "Unknown result from withTimeout, assuming timed out", v33, 2u);
    MEMORY[0x1BA9E48C0](v33, -1, -1);
  }

  swift_willThrow();
  swift_release();
LABEL_15:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v43 = (uint64_t (*)(void))v0[1];
  return v43();
}

uint64_t closure #1 in FlowAgent.execute(timeout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in FlowAgent.execute(timeout:), a4, 0);
}

uint64_t closure #1 in FlowAgent.execute(timeout:)()
{
  double v1 = DispatchTimeInterval.seconds.getter();
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[5] = v2;
  uint64_t v3 = type metadata accessor for ExecuteResponse();
  *uint64_t v2 = v0;
  v2[1] = closure #1 in FlowAgent.execute(timeout:);
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  v6.n128_f64[0] = v1;
  return MEMORY[0x1F415AC08](v4, &async function pointer to partial apply for closure #1 in closure #1 in FlowAgent.execute(timeout:), v5, v3, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 48) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 24);
  if (v0)
  {
    uint64_t v4 = closure #1 in FlowAgent.execute(timeout:);
  }
  else
  {
    swift_release();
    uint64_t v4 = closure #1 in FlowAgent.execute(timeout:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(*(void *)(v0 + 24) + 136) = 0;
  swift_release();
  double v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  double v1 = *(void *)(v0 + 24);
  swift_release();
  *(void *)(v1 + 136) = 0;
  swift_release();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t closure #1 in closure #1 in FlowAgent.execute(timeout:)(uint64_t a1, uint64_t a2)
{
  v2[3] = a1;
  v2[4] = a2;
  v2[5] = type metadata accessor for SiriEnvironment();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in FlowAgent.execute(timeout:), a2, 0);
}

uint64_t closure #1 in closure #1 in FlowAgent.execute(timeout:)()
{
  *(void *)(v0 + 48) = *(void *)(*(void *)(v0 + 32) + 112);
  swift_retain();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in FlowAgent.execute(timeout:), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0[2] = v0[6];
  double v1 = (void *)swift_task_alloc();
  v0[7] = v1;
  uint64_t v2 = type metadata accessor for AnyFlow();
  uint64_t v3 = type metadata accessor for ExecuteResponse();
  uint64_t v4 = lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, MEMORY[0x1E4FA1748]);
  *double v1 = v0;
  v1[1] = closure #1 in closure #1 in FlowAgent.execute(timeout:);
  uint64_t v5 = v0[4];
  __n128 v6 = v0[3];
  return MEMORY[0x1F415AA98](v6, v0 + 2, &async function pointer to partial apply for closure #1 in closure #1 in closure #1 in FlowAgent.execute(timeout:), v5, v2, v3, v4);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  double v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t closure #1 in closure #1 in closure #1 in FlowAgent.execute(timeout:)(uint64_t a1, uint64_t a2)
{
  v2[5] = a1;
  v2[6] = a2;
  v2[7] = type metadata accessor for ExecuteResponseType();
  v2[8] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for ExecuteResponse();
  v2[9] = v4;
  v2[10] = *(void *)(v4 - 8);
  v2[11] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in closure #1 in FlowAgent.execute(timeout:), a2, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in FlowAgent.execute(timeout:)()
{
  v0[12] = *(void *)(v0[6] + 112);
  uint64_t v4 = (uint64_t (*)(uint64_t))((int)*MEMORY[0x1E4FA1730] + MEMORY[0x1E4FA1730]);
  double v1 = (void *)swift_task_alloc();
  v0[13] = v1;
  *double v1 = v0;
  v1[1] = closure #1 in closure #1 in closure #1 in FlowAgent.execute(timeout:);
  uint64_t v2 = v0[5];
  return v4(v2);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in closure #1 in FlowAgent.execute(timeout:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  uint64_t v24 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  double v1 = v0[5];
  uint64_t v3 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v4 = v0[9];
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  uint64_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = v0[12];
    unint64_t v19 = v0[11];
    uint64_t v22 = v0[9];
    uint64_t v20 = v0[10];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v23 = v21;
    *(_DWORD *)uint64_t v9 = 136315394;
    v0[2] = v8;
    type metadata accessor for AnyFlow();
    lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, MEMORY[0x1E4FA1748]);
    unint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v9 + 12) = 2080;
    ExecuteResponse.type.getter();
    uint64_t v12 = String.init<A>(describing:)();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v22);
    _os_log_impl(&dword_1B9C64000, v6, v7, "[Conversation] %s execute returned with response type %s.", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v21, -1, -1);
    MEMORY[0x1BA9E48C0](v9, -1, -1);
  }
  else
  {
    uint64_t v15 = v0[10];
    BOOL v14 = v0[11];
    uint64_t v16 = v0[9];
    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t FlowAgent.prepare()(uint64_t a1)
{
  v2[29] = a1;
  v2[30] = v1;
  uint64_t v3 = type metadata accessor for CancellationError();
  v2[31] = v3;
  v2[32] = *(void *)(v3 - 8);
  v2[33] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for FlowTraceEvent();
  v2[34] = v4;
  v2[35] = *(void *)(v4 - 8);
  v2[36] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for PrepareResponse();
  v2[37] = v5;
  v2[38] = *(void *)(v5 - 8);
  v2[39] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OSSignpostID();
  unsigned char v2[40] = v6;
  v2[41] = *(void *)(v6 - 8);
  v2[42] = swift_task_alloc();
  return MEMORY[0x1F4188298](FlowAgent.prepare(), v1, 0);
}

uint64_t FlowAgent.prepare()()
{
  uint64_t v44 = v0;
  uint64_t v1 = *(void *)(v0 + 240);
  swift_beginAccess();
  if (*(unsigned char *)(v1 + 130) == 1)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
    swift_retain_n();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    uint64_t v6 = *(void *)(v0 + 240);
    if (v5)
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      v43[0] = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      *(void *)(v0 + 216) = *(void *)(v6 + 112);
      type metadata accessor for AnyFlow();
      lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, MEMORY[0x1E4FA1748]);
      uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v3, v4, "[Conversation] %s prepare cancelled before call.", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v8, -1, -1);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    static PrepareResponse.complete()();
    goto LABEL_17;
  }
  uint64_t v11 = *(void *)(v0 + 240);
  swift_beginAccess();
  if ((*(unsigned char *)(v11 + 129) & 1) == 0)
  {
LABEL_16:
    static PrepareResponse.ongoing(needsExecute:)();
LABEL_17:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
  uint64_t v12 = *(void *)(*(void *)(v0 + 240) + 112);
  *(void *)(v0 + 344) = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreparableFlow);
  dispatch thunk of AnyFlow.unbox<A>(as:)();
  if (!*(void *)(v0 + 80))
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for PreparableFlow?);
    goto LABEL_16;
  }
  outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 56), v0 + 16);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  *(void *)(v0 + 352) = __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
  swift_retain_n();
  BOOL v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    v43[0] = v17;
    *(_DWORD *)uint64_t v16 = 136315138;
    *(void *)(v0 + 200) = v12;
    type metadata accessor for AnyFlow();
    lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, MEMORY[0x1E4FA1748]);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v14, v15, "[Conversation] %s prepare.", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v17, -1, -1);
    MEMORY[0x1BA9E48C0](v16, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v42 = *(void *)(v0 + 240);
  id v22 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_1BA050760;
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_1BA04FD90;
  uint64_t v25 = ObjectIdentifier.hashValue.getter();
  uint64_t v26 = MEMORY[0x1E4FBB5C8];
  *(void *)(v24 + 56) = MEMORY[0x1E4FBB550];
  *(void *)(v24 + 64) = v26;
  *(void *)(v24 + 32) = v25;
  uint64_t v27 = String.init(format:_:)();
  uint64_t v29 = v28;
  uint64_t v30 = MEMORY[0x1E4FBB1A0];
  *(void *)(v23 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v31 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v23 + 64) = v31;
  *(void *)(v23 + 32) = v27;
  *(void *)(v23 + 40) = v29;
  uint64_t v32 = AnyFlow.description.getter();
  *(void *)(v23 + 96) = v30;
  *(void *)(v23 + 104) = v31;
  *(void *)(v23 + 72) = v32;
  *(void *)(v23 + 80) = v33;
  AnyFlow.description.getter();
  uint64_t v34 = String.hashValue.getter();
  swift_bridgeObjectRelease();
  *(void *)(v23 + 136) = MEMORY[0x1E4FBB550];
  *(void *)(v23 + 144) = v26;
  *(void *)(v23 + 112) = v34;
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_bridgeObjectRelease();
  type metadata accessor for SiriEnvironment();
  *(void *)(v0 + 152) = v12;
  uint64_t v35 = swift_task_alloc();
  *(void *)(v35 + 16) = v42;
  *(void *)(v35 + 24) = v0 + 16;
  *(void *)(v0 + 360) = type metadata accessor for AnyFlow();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Task<PrepareResponse, Error>);
  lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, MEMORY[0x1E4FA1748]);
  static SiriEnvironment.withTaskLocalEnvironment<A, B>(for:_:)();
  swift_task_dealloc();
  swift_release();
  uint64_t v36 = *(void *)(v0 + 144);
  *(void *)(v0 + 368) = v36;
  *(void *)(v42 + 144) = v36;
  swift_retain();
  swift_release();
  uint64_t v37 = (void *)swift_task_alloc();
  *(void *)(v0 + 376) = v37;
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  *(void *)(v0 + 384) = v38;
  *uint64_t v37 = v0;
  v37[1] = FlowAgent.prepare();
  uint64_t v39 = *(void *)(v0 + 312);
  uint64_t v40 = *(void *)(v0 + 296);
  uint64_t v41 = MEMORY[0x1E4FBC0F0];
  return MEMORY[0x1F4187D90](v39, v36, v40, v38, v41);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 392) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 240);
  if (v0) {
    os_log_type_t v4 = FlowAgent.prepare();
  }
  else {
    os_log_type_t v4 = FlowAgent.prepare();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v1 = v0[43];
  uint64_t v13 = v0[42];
  uint64_t v2 = v0[41];
  BOOL v14 = v0[40];
  uint64_t v3 = v0[38];
  BOOL v5 = (void *)v0[36];
  os_log_type_t v4 = v0[37];
  uint64_t v7 = v0[34];
  uint64_t v6 = v0[35];
  uint64_t v8 = v0[29];
  uint64_t v9 = v0[30];
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 32))(v8, v0[39], v4);
  *(unsigned char *)(v9 + 129) = (PrepareResponse.needsExecute.getter() & 1) == 0;
  unint64_t v10 = (char *)v5
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (flow: AnyFlow, response: PrepareResponse))
               + 48);
  *BOOL v5 = v1;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v10, v8, v4);
  (*(void (**)(void *, void, uint64_t))(v6 + 104))(v5, *MEMORY[0x1E4FA1870], v7);
  swift_retain();
  static FlowTrace.trace(event:)();
  swift_release();
  (*(void (**)(void *, uint64_t))(v6 + 8))(v5, v7);
  $defer #1 () in FlowAgent.prepare()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v13, v14);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

{
  void *v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  void *v16;
  uint8_t *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(void);
  id v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;

  uint64_t v33 = v0;
  uint64_t v1 = (void *)v0[49];
  v0[20] = v1;
  uint64_t v2 = v1;
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[32] + 8))(v0[33], v0[31]);
    swift_retain_n();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      BOOL v5 = v0[43];
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      uint64_t v32 = v7;
      *(_DWORD *)uint64_t v6 = 136315138;
      v0[23] = v5;
      lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, MEMORY[0x1E4FA1748]);
      uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[24] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v3, v4, "[Conversation] %s prepare cancelled.", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v7, -1, -1);
      MEMORY[0x1BA9E48C0](v6, -1, -1);
    }
    else
    {
      swift_release_n();
    }
  }
  else
  {
    unint64_t v10 = (void *)v0[49];
    uint64_t v11 = v10;
    uint64_t v12 = v10;
    uint64_t v13 = Logger.logObject.getter();
    BOOL v14 = static os_log_type_t.error.getter();
    os_log_type_t v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = (void *)v0[49];
    if (v15)
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v32 = v18;
      *(_DWORD *)uint64_t v17 = 136315138;
      v0[21] = v16;
      unint64_t v19 = v16;
      uint64_t v20 = String.init<A>(describing:)();
      v0[22] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v13, v14, "[Conversation] Error preparing flow: %s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v18, -1, -1);
      MEMORY[0x1BA9E48C0](v17, -1, -1);
    }
    else
    {
    }
  }
  id v22 = v0[42];
  uint64_t v23 = v0[43];
  uint64_t v24 = v0[41];
  unint64_t v31 = v0[40];
  uint64_t v26 = v0[35];
  uint64_t v25 = (void *)v0[36];
  uint64_t v27 = v0[34];
  uint64_t v30 = (id)v0[49];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (flow: AnyFlow, response: PrepareResponse));
  *uint64_t v25 = v23;
  swift_retain();
  static PrepareResponse.complete()();
  (*(void (**)(void *, void, uint64_t))(v26 + 104))(v25, *MEMORY[0x1E4FA1870], v27);
  static FlowTrace.trace(event:)();
  (*(void (**)(void *, uint64_t))(v26 + 8))(v25, v27);
  static PrepareResponse.complete()();
  swift_release();

  $defer #1 () in FlowAgent.prepare()();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v31);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = (uint64_t (*)(void))v0[1];
  return v28();
}

void $defer #1 () in FlowAgent.prepare()()
{
  static os_signpost_type_t.end.getter();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  os_signpost(_:dso:log:name:signpostID:)();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    uint64_t v7 = v4;
    type metadata accessor for AnyFlow();
    lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, MEMORY[0x1E4FA1748]);
    uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v1, v2, "%s prepare completed.", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v4, -1, -1);
    MEMORY[0x1BA9E48C0](v3, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

uint64_t closure #1 in FlowAgent.prepare()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  outlined init with copy of ReferenceResolutionClientProtocol(a2, (uint64_t)v15);
  uint64_t v11 = lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(&lazy protocol witness table cache variable for type FlowAgent and conformance FlowAgent, v10, (void (*)(uint64_t))type metadata accessor for FlowAgent);
  uint64_t v12 = (void *)swift_allocObject();
  long long v12[2] = a1;
  v12[3] = v11;
  v12[4] = a1;
  outlined init with take of ReferenceResolutionClientProtocol(v15, (uint64_t)(v12 + 5));
  swift_retain_n();
  uint64_t result = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC11SiriKitFlow15PrepareResponseV_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in FlowAgent.prepare(), (uint64_t)v12);
  *a3 = result;
  return result;
}

uint64_t closure #1 in closure #1 in FlowAgent.prepare()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[8] = a4;
  v5[9] = a5;
  v5[7] = a1;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in FlowAgent.prepare(), a4, 0);
}

uint64_t closure #1 in closure #1 in FlowAgent.prepare()()
{
  outlined init with copy of ReferenceResolutionClientProtocol(*(void *)(v0 + 72), v0 + 16);
  uint64_t v1 = swift_allocObject();
  *(void *)(v0 + 80) = v1;
  outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 16), v1 + 16);
  os_log_type_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v2;
  uint64_t v3 = type metadata accessor for PrepareResponse();
  *os_log_type_t v2 = v0;
  v2[1] = closure #1 in closure #1 in FlowAgent.prepare();
  uint64_t v4 = *(void *)(v0 + 56);
  return MEMORY[0x1F415AED8](v4, partial apply for closure #1 in closure #1 in closure #1 in FlowAgent.prepare(), v1, v3);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  os_log_type_t v2 = *v1;
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 64);
    uint64_t v4 = closure #1 in closure #1 in FlowAgent.prepare();
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 64);
    swift_release();
    uint64_t v4 = closure #1 in closure #1 in FlowAgent.prepare();
    uint64_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  *(void *)(*(void *)(v0 + 64) + 144) = 0;
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 64);
  swift_release();
  *(void *)(v1 + 144) = 0;
  swift_release();
  os_log_type_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t closure #1 in closure #1 in closure #1 in FlowAgent.prepare()(uint64_t a1, void *a2)
{
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  swift_retain();
  dispatch thunk of PreparableFlow.prepare(completion:)();

  return swift_release();
}

Swift::Void __swiftcall FlowAgent.complete()()
{
  uint64_t v1 = type metadata accessor for FlowTraceEvent();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (void *)((char *)&v7[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for SiriEnvironment();
  uint64_t v5 = *(void *)(v0 + 112);
  v7[0] = v5;
  type metadata accessor for AnyFlow();
  lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(&lazy protocol witness table cache variable for type AnyFlow and conformance AnyFlow, 255, MEMORY[0x1E4FA1748]);
  swift_retain();
  static SiriEnvironment.withTaskLocalEnvironment<A, B>(for:_:)();
  swift_release();
  if (*(void *)(v0 + 120))
  {
    outlined init with copy of Any((uint64_t)v8, (uint64_t)v7);
    swift_retain();
    dispatch thunk of AnyChildCompletion.completion(exitValue:)();
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  void *v4 = v5;
  outlined init with copy of Any((uint64_t)v8, (uint64_t)(v4 + 1));
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FA1880], v1);
  swift_retain();
  static FlowTrace.trace(event:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
}

uint64_t FlowAgent.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_defaultActor_destroy();
  return v0;
}

uint64_t FlowAgent.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_defaultActor_destroy();

  return MEMORY[0x1F4188210](v0);
}

uint64_t FlowAgent.unownedExecutor.getter()
{
  return v0;
}

uint64_t partial apply for closure #1 in FlowAgent.on(input:)(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in FlowAgent.on(input:)(a1, v5, v4);
}

uint64_t partial apply for closure #1 in FlowAgent.paraphrase()(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  v4[14] = a1;
  v4[15] = v1;
  return MEMORY[0x1F4188298](closure #1 in FlowAgent.paraphrase(), v1, 0);
}

uint64_t lazy protocol witness table accessor for type AnyFlow and conformance AnyFlow(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B9EF7CD4()
{
  uint64_t v1 = type metadata accessor for DispatchTimeInterval();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in FlowAgent.execute(timeout:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for DispatchTimeInterval() - 8);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[3] = v5;
  void v7[4] = v6;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  _OWORD v7[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in FlowAgent.execute(timeout:), v5, 0);
}

uint64_t partial apply for closure #1 in FlowAgent.prepare()@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in FlowAgent.prepare()(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in FlowAgent.complete()()
{
  return dispatch thunk of AnyFlow.exitValue.getter();
}

uint64_t sub_1B9EF7EE4@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 129);
  return result;
}

uint64_t sub_1B9EF7F2C(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 129) = v2;
  return result;
}

uint64_t sub_1B9EF7F70@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 130);
  return result;
}

uint64_t sub_1B9EF7FB8(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 130) = v2;
  return result;
}

uint64_t method lookup function for FlowAgent(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for FlowAgent);
}

uint64_t dispatch thunk of FlowAgent.couldPrepareBeCalled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of FlowAgent.couldPrepareBeCalled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of FlowAgent.couldPrepareBeCalled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of FlowAgent.isCancelled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of FlowAgent.isCancelled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of FlowAgent.isCancelled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of FlowAgent.__allocating_init(flow:tasks:pluginInfo:completion:)()
{
  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t dispatch thunk of FlowAgent.cancel()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of FlowAgent.on(input:)(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 272) + **(int **)(*(void *)v1 + 272));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v6(a1);
}

uint64_t dispatch thunk of FlowAgent.paraphrase()(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 280) + **(int **)(*(void *)v1 + 280));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v6(a1);
}

uint64_t dispatch thunk of FlowAgent.execute(timeout:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 288) + **(int **)(*(void *)v2 + 288));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of FlowAgent.prepare()(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 296) + **(int **)(*(void *)v1 + 296));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v6(a1);
}

uint64_t dispatch thunk of FlowAgent.complete()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t sub_1B9EF859C()
{
  swift_unknownObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 40);

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t partial apply for closure #1 in closure #1 in FlowAgent.prepare()(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  v5[8] = v4;
  v5[9] = v1 + 40;
  v5[7] = a1;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in FlowAgent.prepare(), v4, 0);
}

uint64_t sub_1B9EF86A4()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in FlowAgent.prepare()(uint64_t a1)
{
  return closure #1 in closure #1 in closure #1 in FlowAgent.prepare()(a1, (void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in FlowAgent.execute(timeout:)(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  v4[3] = a1;
  v4[4] = v1;
  void v4[5] = type metadata accessor for SiriEnvironment();
  return MEMORY[0x1F4188298](closure #1 in closure #1 in FlowAgent.execute(timeout:), v1, 0);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in FlowAgent.execute(timeout:)(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in closure #1 in FlowAgent.execute(timeout:)(a1, v1);
}

uint64_t dispatch thunk of FlowBundle.warmup(refId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of FlowBundle.findFlow(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t FlowExtensionConnection.__allocating_init(nsExtension:onConnectionInterrupted:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  FlowExtensionConnection.init(nsExtension:onConnectionInterrupted:)(a1, a2, a3);
  return v6;
}

void *FlowExtensionConnection.init(nsExtension:onConnectionInterrupted:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v3 + 152) = 0;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a1, v3 + 32);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  uint64_t v26 = v14;
  v15._uint64_t countAndFlagsBits = 60;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  UUID.init()();
  uint64_t v16 = UUID.uuidString.getter();
  uint64_t v18 = v17;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v19._uint64_t countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 62;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  uint64_t v22 = v25;
  uint64_t v21 = v26;
  long long v4[2] = v25;
  v4[3] = v21;
  v4[9] = a2;
  v4[10] = a3;
  type metadata accessor for InterruptibleTaskManager();
  uint64_t v23 = (void *)swift_allocObject();
  v23[4] = MEMORY[0x1E4FBC868];
  v23[5] = 0;
  v23[2] = v22;
  v23[3] = v21;
  v4[20] = v23;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v4;
}

uint64_t FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[9] = a4;
  v5[10] = v4;
  v5[7] = a2;
  v5[8] = a3;
  void v5[6] = a1;
  uint64_t v6 = type metadata accessor for OSSignpostID();
  v5[11] = v6;
  v5[12] = *(void *)(v6 - 8);
  v5[13] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OSSignposter();
  v5[14] = v7;
  v5[15] = *(void *)(v7 - 8);
  v5[16] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for InterruptibleTaskResult();
  v5[17] = v8;
  v5[18] = *(void *)(v8 - 8);
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v9 = static MessageBusActor.shared;
  v5[21] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](FlowExtensionConnection.withRemoteConversationConnection<A>(execute:), v9, 0);
}

uint64_t FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)()
{
  uint64_t v47 = v0;
  uint64_t v1 = v0[10];
  uint64_t v2 = *(void *)(v1 + 88);
  v0[22] = v2;
  if (v2)
  {
    uint64_t v3 = v0[8];
    uint64_t v4 = v0[9];
    uint64_t v5 = v0[7];
    uint64_t v6 = *(void *)(v1 + 96);
    uint64_t v7 = (void *)swift_allocObject();
    v0[23] = v7;
    _OWORD v7[2] = v4;
    v7[3] = v5;
    void v7[4] = v3;
    void v7[5] = v2;
    v7[6] = v6;
    swift_unknownObjectRetain_n();
    swift_retain();
    uint64_t v8 = (void *)swift_task_alloc();
    v0[24] = v8;
    *uint64_t v8 = v0;
    v8[1] = FlowExtensionConnection.withRemoteConversationConnection<A>(execute:);
    uint64_t v9 = v0[20];
    uint64_t v10 = v0[9];
    uint64_t v11 = &async function pointer to partial apply for closure #1 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:);
    uint64_t v12 = (uint64_t)v7;
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
    swift_retain();
    Swift::String v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    uint64_t v18 = v0[10];
    if (v17)
    {
      Swift::String v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      v46[0] = v20;
      *(_DWORD *)Swift::String v19 = 136315138;
      uint64_t v22 = *(void *)(v18 + 16);
      unint64_t v21 = *(void *)(v18 + 24);
      swift_bridgeObjectRetain();
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v21, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl(&dword_1B9C64000, v15, v16, "Flow Extension %s is not active, beginning new request.", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v20, -1, -1);
      MEMORY[0x1BA9E48C0](v19, -1, -1);
    }
    else
    {
      swift_release();
    }

    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v24 = v0[15];
    uint64_t v23 = v0[16];
    uint64_t v25 = v0[14];
    uint64_t v26 = (void *)v0[10];
    uint64_t v27 = __swift_project_value_buffer(v25, (uint64_t)static Signposter.executor);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v23, v27, v25);
    static OSSignpostID.exclusive.getter();
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v28 = 0;
    uint64_t v29 = OSSignposter.logHandle.getter();
    os_signpost_type_t v30 = static os_signpost_type_t.begin.getter();
    os_signpost_id_t v31 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1B9C64000, v29, v30, v31, "FlowExtensionBringup", "", v28, 2u);
    closure #2 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(v26, v46);
    uint64_t v32 = v0[15];
    uint64_t v33 = v0[13];
    uint64_t v42 = v0[14];
    uint64_t v43 = v0[16];
    uint64_t v35 = v0[11];
    uint64_t v34 = v0[12];
    uint64_t v36 = v0[8];
    uint64_t v44 = v0[7];
    uint64_t v45 = v0[9];
    os_signpost_type_t v37 = static os_signpost_type_t.end.getter();
    os_signpost_id_t v38 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1B9C64000, v29, v37, v38, "FlowExtensionBringup", "", v28, 2u);

    long long v41 = *(_OWORD *)v46;
    v0[26] = v46[0];
    MEMORY[0x1BA9E48C0](v28, -1, -1);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v43, v42);
    uint64_t v39 = swift_allocObject();
    v0[27] = v39;
    *(void *)(v39 + 16) = v45;
    *(void *)(v39 + 24) = v44;
    *(void *)(v39 + 32) = v36;
    *(_OWORD *)(v39 + 40) = v41;
    swift_retain();
    swift_unknownObjectRetain();
    uint64_t v40 = (void *)swift_task_alloc();
    v0[28] = v40;
    *uint64_t v40 = v0;
    v40[1] = FlowExtensionConnection.withRemoteConversationConnection<A>(execute:);
    uint64_t v9 = v0[19];
    uint64_t v10 = v0[9];
    uint64_t v11 = &async function pointer to partial apply for closure #3 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:);
    uint64_t v12 = v39;
  }
  return InterruptibleTaskManager.perform<A>(_:)(v9, (uint64_t)v11, v12, v10);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 168);
    uint64_t v4 = FlowExtensionConnection.withRemoteConversationConnection<A>(execute:);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 168);
    swift_release();
    uint64_t v4 = FlowExtensionConnection.withRemoteConversationConnection<A>(execute:);
    uint64_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[17];
  uint64_t v2 = v0[6];
  swift_release();
  InterruptibleTaskResult.get()(v1, v2);
  (*(void (**)(void, void))(v0[18] + 8))(v0[20], v0[17]);
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 232) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 168);
    uint64_t v4 = FlowExtensionConnection.withRemoteConversationConnection<A>(execute:);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 168);
    swift_release();
    uint64_t v4 = FlowExtensionConnection.withRemoteConversationConnection<A>(execute:);
    uint64_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[17];
  uint64_t v2 = v0[6];
  swift_release();
  InterruptibleTaskResult.get()(v1, v2);
  (*(void (**)(void, void))(v0[18] + 8))(v0[19], v0[17]);
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)a2 + *a2);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v9;
  *uint64_t v9 = v5;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v11(a1, a4, a5);
}

void closure #2 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)v50 - v9;
  uint64_t v11 = a1[7];
  uint64_t v12 = a1[8];
  __swift_project_boxed_opaque_existential_1(a1 + 4, v11);
  uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(v12 + 24))(0, 0, v11, v12);
  if (v2)
  {
    *(void *)&long long aBlock = 0;
    *((void *)&aBlock + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(53);
    v14._uint64_t countAndFlagsBits = 0xD000000000000033;
    v14._object = (void *)0x80000001BA068F80;
    String.append(_:)(v14);
    v57[0] = v2;
    id v15 = v2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v16._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    long long v17 = aBlock;
    lazy protocol witness table accessor for type FlowExtensionConnection.ExtensionError and conformance FlowExtensionConnection.ExtensionError();
    swift_allocError();
    *uint64_t v18 = v17;
    swift_willThrow();

    return;
  }
  *(void *)&long long aBlock = v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSCopying);
  uint64_t v19 = type metadata accessor for UUID();
  int v20 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v8, v20 ^ 1u, 1, v19);
  outlined init with take of UUID?((uint64_t)v8, (uint64_t)v10);
  uint64_t v21 = a1[7];
  uint64_t v22 = a1[8];
  __swift_project_boxed_opaque_existential_1(a1 + 4, v21);
  (*(void (**)(long long *__return_ptr, char *, uint64_t, uint64_t))(v22 + 32))(&aBlock, v10, v21, v22);
  if (!v53)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&aBlock, &demangling cache variable for type metadata for NSExtensionContextProtocol?);
    *(void *)&long long aBlock = 0;
    *((void *)&aBlock + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    swift_bridgeObjectRelease();
    *(void *)&long long aBlock = 0xD000000000000024;
    *((void *)&aBlock + 1) = 0x80000001BA068FC0;
    uint64_t v32 = a1[2];
    uint64_t v33 = (void *)a1[3];
    swift_bridgeObjectRetain();
    v34._uint64_t countAndFlagsBits = v32;
    v34._object = v33;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    long long v35 = aBlock;
    lazy protocol witness table accessor for type FlowExtensionConnection.ExtensionError and conformance FlowExtensionConnection.ExtensionError();
    swift_allocError();
    *uint64_t v36 = v35;
    swift_willThrow();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    return;
  }
  outlined init with take of ReferenceResolutionClientProtocol(&aBlock, (uint64_t)v57);
  uint64_t v23 = v58;
  uint64_t v24 = v59;
  __swift_project_boxed_opaque_existential_1(v57, v58);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
  if (!v25)
  {
    *(void *)&long long aBlock = 0;
    *((void *)&aBlock + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    *(void *)&long long aBlock = 0xD000000000000026;
    *((void *)&aBlock + 1) = 0x80000001BA068FF0;
    uint64_t v37 = a1[2];
    os_signpost_id_t v38 = (void *)a1[3];
    swift_bridgeObjectRetain();
    v39._uint64_t countAndFlagsBits = v37;
    v39._object = v38;
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    long long v40 = aBlock;
    lazy protocol witness table accessor for type FlowExtensionConnection.ExtensionError and conformance FlowExtensionConnection.ExtensionError();
    swift_allocError();
    *long long v41 = v40;
    swift_willThrow();
LABEL_10:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    goto LABEL_11;
  }
  uint64_t v26 = (void *)v25;
  uint64_t v54 = partial apply for closure #1 in closure #2 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:);
  uint64_t v55 = a1;
  *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
  *((void *)&aBlock + 1) = 1107296256;
  char v52 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  uint64_t v53 = &block_descriptor_13;
  uint64_t v27 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  id v28 = objc_msgSend(v26, sel_remoteObjectProxyWithErrorHandler_, v27);
  _Block_release(v27);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v56, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteConversationXPC);
  if ((swift_dynamicCast() & 1) == 0)
  {
    *(void *)&long long aBlock = 0;
    *((void *)&aBlock + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(82);
    v42._object = (void *)0x80000001BA069020;
    v42._uint64_t countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v42);
    uint64_t v43 = a1[2];
    uint64_t v44 = (void *)a1[3];
    swift_bridgeObjectRetain();
    v45._uint64_t countAndFlagsBits = v43;
    v45._object = v44;
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    v46._uint64_t countAndFlagsBits = 0xD00000000000002ELL;
    v46._object = (void *)0x80000001BA069050;
    String.append(_:)(v46);
    __swift_project_boxed_opaque_existential_1(v56, v56[3]);
    v50[0] = swift_getDynamicType();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any.Type);
    v47._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    long long v48 = aBlock;
    lazy protocol witness table accessor for type FlowExtensionConnection.ExtensionError and conformance FlowExtensionConnection.ExtensionError();
    swift_allocError();
    *uint64_t v49 = v48;
    swift_willThrow();

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v56);
    goto LABEL_10;
  }

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v56);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_getObjectType();
  uint64_t v29 = RemoteConversationXPC.sendableWrapper.getter();
  uint64_t v31 = v30;
  swift_unknownObjectRelease();
  a1[11] = v29;
  a1[12] = v31;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v57, (uint64_t)&aBlock);
  swift_beginAccess();
  outlined assign with take of NSExtensionContextProtocol?((uint64_t)&aBlock, (uint64_t)(a1 + 13));
  swift_endAccess();
  *a2 = v29;
  a2[1] = v31;
LABEL_11:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v57);
}

uint64_t closure #1 in closure #2 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(void *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v26[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
  swift_retain();
  id v8 = a1;
  swift_retain();
  id v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    v26[0] = v13;
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v14 = *(void *)(a2 + 16);
    unint64_t v15 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    uint64_t v25 = (uint64_t)a1;
    id v16 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v17 = String.init<A>(describing:)();
    uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v10, v11, "Error communicating with Siri Flow Extension %s: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v13, -1, -1);
    MEMORY[0x1BA9E48C0](v12, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  uint64_t v19 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v6, 1, 1, v19);
  swift_retain();
  id v20 = a1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v21 = static MessageBusActor.shared;
  unint64_t v22 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  uint64_t v23 = (void *)swift_allocObject();
  v23[2] = v21;
  v23[3] = v22;
  v23[4] = a2;
  v23[5] = a1;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #2 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:), (uint64_t)v23);
  return swift_release();
}

uint64_t closure #1 in closure #1 in closure #2 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 40) = a4;
  *(void *)(v5 + 48) = a5;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in closure #2 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:), v6, 0);
}

uint64_t closure #1 in closure #1 in closure #2 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)()
{
  (*(void (**)(void))(v0[5] + 72))(v0[6]);
  FlowExtensionConnection.invalidate()();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

SiriKitRuntime::RemoteConversationConnectionInvalidationResult __swiftcall FlowExtensionConnection.invalidate()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v3 = *(void *)(v0 + 160);
  swift_beginAccess();
  SiriKitRuntime::RemoteConversationConnectionInvalidationResult v4 = *(void *)(*(void *)(v3 + 32) + 16) == 0;
  *(void *)(v1 + 88) = 0;
  *(void *)(v1 + 96) = 0;
  swift_unknownObjectRelease();
  uint64_t v7 = 0;
  memset(v6, 0, sizeof(v6));
  swift_beginAccess();
  outlined assign with take of NSExtensionContextProtocol?((uint64_t)v6, v1 + 104);
  swift_endAccess();
  InterruptibleTaskManager.invalidate()();
  return v4;
}

uint64_t closure #3 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  os_log_type_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)a2 + *a2);
  id v9 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v9;
  *id v9 = v5;
  v9[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v11(a1, a4, a5);
}

uint64_t FlowExtensionConnection.withRemoteConversationConnectionIfValid<A>(execute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[8] = a4;
  v5[9] = v4;
  void v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  uint64_t v6 = type metadata accessor for InterruptibleTaskResult();
  v5[10] = v6;
  v5[11] = *(void *)(v6 - 8);
  v5[12] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v7 = static MessageBusActor.shared;
  v5[13] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](FlowExtensionConnection.withRemoteConversationConnectionIfValid<A>(execute:), v7, 0);
}

uint64_t closure #1 in FlowExtensionConnection.withRemoteConversationConnectionIfValid<A>(execute:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  os_log_type_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)a2 + *a2);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v9;
  *uint64_t v9 = v5;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v11(a1, a4, a5);
}

uint64_t FlowExtensionConnection.kill()()
{
  *(void *)(v1 + 48) = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](FlowExtensionConnection.kill(), v2, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  void *v16;
  uint64_t v17;

  id v16 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.info.getter();
  uint64_t v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[6];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    unint64_t v15 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v8 = *(void *)(v5 + 16);
    uint64_t v9 = *(void *)(v5 + 24);
    swift_bridgeObjectRetain();
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_1B9C64000, v2, v3, "Killing process for %s with SIGKILL", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v7, -1, -1);
    MEMORY[0x1BA9E48C0](v6, -1, -1);
  }
  else
  {
    swift_release();
  }

  uint64_t v10 = (void *)v0[6];
  os_log_type_t v11 = v10[7];
  uint64_t v12 = v10[8];
  __swift_project_boxed_opaque_existential_1(v10 + 4, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40))(9, v11, v12);
  FlowExtensionConnection.invalidate()();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

unint64_t FlowExtensionConnection.ExtensionError.errorDescription.getter(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  return 0xD000000000000019;
}

unint64_t protocol witness for LocalizedError.errorDescription.getter in conformance FlowExtensionConnection.ExtensionError()
{
  return FlowExtensionConnection.ExtensionError.errorDescription.getter(*(void *)v0, *(void **)(v0 + 8));
}

uint64_t protocol witness for LocalizedError.failureReason.getter in conformance FlowExtensionConnection.ExtensionError()
{
  return MEMORY[0x1F40E3A98]();
}

uint64_t protocol witness for LocalizedError.recoverySuggestion.getter in conformance FlowExtensionConnection.ExtensionError()
{
  return MEMORY[0x1F40E3AC0]();
}

uint64_t protocol witness for LocalizedError.helpAnchor.getter in conformance FlowExtensionConnection.ExtensionError()
{
  return MEMORY[0x1F40E3A90]();
}

uint64_t FlowExtensionConnection.deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  swift_release();
  swift_unknownObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 104, &demangling cache variable for type metadata for NSExtensionContextProtocol?);
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t FlowExtensionConnection.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  swift_release();
  swift_unknownObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 104, &demangling cache variable for type metadata for NSExtensionContextProtocol?);
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for RemoteConversationConnectionProviding.withRemoteConversationConnection<A>(execute:) in conformance FlowExtensionConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(a1, a2, a3, a4);
}

uint64_t protocol witness for RemoteConversationConnectionProviding.withRemoteConversationConnectionIfValid<A>(execute:) in conformance FlowExtensionConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return FlowExtensionConnection.withRemoteConversationConnectionIfValid<A>(execute:)(a1, a2, a3, a4);
}

uint64_t protocol witness for RemoteConversationConnectionProviding.invalidate() in conformance FlowExtensionConnection()
{
  return FlowExtensionConnection.invalidate()();
}

uint64_t partial apply for closure #3 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1)
{
  uint64_t v4 = (int *)v1[3];
  uint64_t v6 = v1[5];
  uint64_t v5 = v1[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  uint64_t v8 = (void *)swift_task_alloc();
  _OWORD v7[2] = v8;
  *uint64_t v8 = v7;
  v8[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v10(a1, v6, v5);
}

uint64_t partial apply for closure #1 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1)
{
  uint64_t v4 = (int *)v1[3];
  uint64_t v6 = v1[5];
  uint64_t v5 = v1[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  uint64_t v8 = (void *)swift_task_alloc();
  _OWORD v7[2] = v8;
  *uint64_t v8 = v7;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v10(a1, v6, v5);
}

uint64_t outlined assign with take of NSExtensionContextProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSExtensionContextProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in FlowExtensionConnection.withRemoteConversationConnectionIfValid<A>(execute:)(uint64_t a1)
{
  uint64_t v4 = (int *)v1[3];
  uint64_t v6 = v1[5];
  uint64_t v5 = v1[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  uint64_t v8 = (void *)swift_task_alloc();
  _OWORD v7[2] = v8;
  *uint64_t v8 = v7;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v10(a1, v6, v5);
}

unint64_t lazy protocol witness table accessor for type FlowExtensionConnection.ExtensionError and conformance FlowExtensionConnection.ExtensionError()
{
  unint64_t result = lazy protocol witness table cache variable for type FlowExtensionConnection.ExtensionError and conformance FlowExtensionConnection.ExtensionError;
  if (!lazy protocol witness table cache variable for type FlowExtensionConnection.ExtensionError and conformance FlowExtensionConnection.ExtensionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlowExtensionConnection.ExtensionError and conformance FlowExtensionConnection.ExtensionError);
  }
  return result;
}

uint64_t type metadata accessor for FlowExtensionConnection()
{
  return self;
}

uint64_t method lookup function for FlowExtensionConnection(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for FlowExtensionConnection);
}

uint64_t dispatch thunk of FlowExtensionConnection.__allocating_init(nsExtension:onConnectionInterrupted:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

ValueMetadata *type metadata accessor for FlowExtensionConnection.ExtensionError()
{
  return &type metadata for FlowExtensionConnection.ExtensionError;
}

uint64_t partial apply for closure #1 in closure #2 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(void *a1)
{
  return closure #1 in closure #2 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(a1, v1);
}

uint64_t sub_1B9EFB8DC()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in closure #2 in FlowExtensionConnection.withRemoteConversationConnection<A>(execute:)(a1, v4, v5, v7, v6);
}

uint64_t NoopSiriKitEventSender.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t FlowExtensionContext.__allocating_init(inputItems:listenerEndpoint:contextUUID:overrideFlowExtension:overrideSiriKitRuntime:overrideExtensionId:overrideIntentTopics:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v18 = objc_allocWithZone(v9);
  specialized FlowExtensionContext.init(inputItems:listenerEndpoint:contextUUID:overrideFlowExtension:overrideSiriKitRuntime:overrideExtensionId:overrideIntentTopics:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  uint64_t v20 = v19;
  swift_release();
  swift_unknownObjectRelease();

  return v20;
}

uint64_t FlowExtensionContext.init(inputItems:listenerEndpoint:contextUUID:overrideFlowExtension:overrideSiriKitRuntime:overrideExtensionId:overrideIntentTopics:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  specialized FlowExtensionContext.init(inputItems:listenerEndpoint:contextUUID:overrideFlowExtension:overrideSiriKitRuntime:overrideExtensionId:overrideIntentTopics:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  uint64_t v11 = v10;
  swift_release();
  swift_unknownObjectRelease();

  return v11;
}

id FlowExtensionContext.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

uint64_t FlowExtensionContext.init()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 1, 1, v4);
  uint64_t v5 = (*(uint64_t (**)(void))(ObjectType + 216))(MEMORY[0x1E4FBC860]);
  swift_deallocPartialClassInstance();
  return v5;
}

id FlowExtensionContext.__allocating_init(inputItems:)()
{
  id v1 = objc_allocWithZone(v0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v3 = objc_msgSend(v1, sel_initWithInputItems_, isa);

  return v3;
}

uint64_t FlowExtensionContext.init(inputItems:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v4, 1, 1, v6);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void, char *, void, void, void, void, void, void))(ObjectType + 216))(a1, 0, v4, 0, 0, 0, 0, 0, MEMORY[0x1E4FBC860]);
  swift_deallocPartialClassInstance();
  return v7;
}

id FlowExtensionContext.__allocating_init(inputItems:listenerEndpoint:contextUUID:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v7.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a3, 1, v8) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a3, v8);
  }
  id v11 = objc_msgSend(objc_allocWithZone(v4), sel_initWithInputItems_listenerEndpoint_contextUUID_, v7.super.isa, a2, isa);

  return v11;
}

uint64_t FlowExtensionContext.init(inputItems:listenerEndpoint:contextUUID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ObjectType = swift_getObjectType();
  outlined init with copy of UUID?(a3, (uint64_t)v8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, char *, void, void, void, void, void, void))(ObjectType + 216))(a1, a2, v8, 0, 0, 0, 0, 0, MEMORY[0x1E4FBC860]);
  outlined destroy of UUID?(a3);
  swift_deallocPartialClassInstance();
  return v10;
}

id static FlowExtensionContext._extensionAuxiliaryVendorProtocol()()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for remoteConversationXPCInterface, (void **)&static RemoteConversationXPCHelper.remoteConversationXPCInterface);
}

id static FlowExtensionContext._extensionAuxiliaryHostProtocol()()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for remoteConversationHostXPCInterface, (void **)&static RemoteConversationXPCHelper.remoteConversationHostXPCInterface);
}

id @objc static FlowExtensionContext._extensionAuxiliaryVendorProtocol()(uint64_t a1, uint64_t a2, void *a3, void **a4)
{
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v5 = *a4;

  return v5;
}

uint64_t FlowExtensionContext.remoteConversationService.getter()
{
  uint64_t v1 = OBJC_IVAR___SKRFlowExtensionContext____lazy_storage___remoteConversationService;
  if (*(void *)&v0[OBJC_IVAR___SKRFlowExtensionContext____lazy_storage___remoteConversationService])
  {
    uint64_t v2 = *(void *)&v0[OBJC_IVAR___SKRFlowExtensionContext____lazy_storage___remoteConversationService];
  }
  else
  {
    uint64_t v2 = closure #1 in FlowExtensionContext.remoteConversationService.getter(v0);
    *(void *)&v0[v1] = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t closure #1 in FlowExtensionContext.remoteConversationService.getter(char *a1)
{
  uint64_t v2 = type metadata accessor for FlowPluginBundleImpl();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)&a1[OBJC_IVAR___SKRFlowExtensionContext_overrideFlowExtension];
  uint64_t v37 = v3;
  if (!v6)
  {
    id v8 = objc_msgSend(a1, sel__principalObject);
    if (v8)
    {
      uint64_t v9 = (uint64_t)v8;
      swift_getObjectType();
      uint64_t v10 = swift_conformsToProtocol2();
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      if (v10) {
        uint64_t v7 = v9;
      }
      else {
        uint64_t v7 = 0;
      }
      if (v7)
      {
        uint64_t v36 = v11;
        goto LABEL_12;
      }
      swift_unknownObjectRelease();
    }
    uint64_t v42 = 0;
    unint64_t v43 = 0xE000000000000000;
    _StringGuts.grow(_:)(55);
    v33._object = (void *)0x80000001BA0693A0;
    v33._uint64_t countAndFlagsBits = 0xD000000000000035;
    String.append(_:)(v33);
    *(void *)&long long v39 = objc_msgSend(a1, sel__principalObject);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject?);
    v34._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    uint64_t result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(v42, v43, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/RemoteConversation/FlowExtension/FlowExtensionContext.swift", 128, 2, 82);
    __break(1u);
    return result;
  }
  uint64_t v36 = *(void *)&a1[OBJC_IVAR___SKRFlowExtensionContext_overrideFlowExtension + 8];
  uint64_t v7 = v6;
LABEL_12:
  uint64_t v12 = *(void *)&a1[OBJC_IVAR___SKRFlowExtensionContext_overrideSiriKitRuntime];
  if (v12)
  {
    swift_unknownObjectRetain();
    uint64_t v13 = v12;
  }
  else
  {
    uint64_t v14 = type metadata accessor for NoopSiriKitEventSender();
    uint64_t v15 = swift_allocObject();
    uint64_t v44 = v14;
    uint64_t v45 = _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_0(&lazy protocol witness table cache variable for type NoopSiriKitEventSender and conformance NoopSiriKitEventSender, v16, (void (*)(uint64_t))type metadata accessor for NoopSiriKitEventSender);
    uint64_t v42 = v15;
    type metadata accessor for SiriKitRuntimeState();
    long long v39 = 0u;
    long long v40 = 0u;
    uint64_t v41 = 0;
    swift_allocObject();
    swift_unknownObjectRetain();
    uint64_t v13 = SiriKitRuntimeState.init(customEventSender:rrClient:)((uint64_t)&v42, (uint64_t)&v39);
  }
  uint64_t v17 = *(void *)&a1[OBJC_IVAR___SKRFlowExtensionContext_overrideExtensionId + 8];
  uint64_t v35 = v13;
  if (v17)
  {
    uint64_t v18 = v2;
    uint64_t v19 = *(void *)&a1[OBJC_IVAR___SKRFlowExtensionContext_overrideExtensionId];
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v20 = v17;
  }
  else
  {
    swift_getObjectType();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    unint64_t v22 = self;
    swift_retain();
    id v23 = objc_msgSend(v22, sel_bundleForClass_, ObjCClassFromMetadata, v35);
    uint64_t v19 = NSBundle.packageId.getter();
    uint64_t v20 = v24;
    id v25 = objc_msgSend(v23, sel_infoDictionary);
    if (v25)
    {
      uint64_t v26 = v25;
      static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    }
    uint64_t v18 = v2;
    static IntentTopic.makeFromBundleInfoPlist(dictionary:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v27 = type metadata accessor for RemoteConversationService(0);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v44 = ObjectType;
  uint64_t v45 = *(void *)(*(void *)(v36 + 8) + 8);
  uint64_t v29 = v45;
  uint64_t v42 = v7;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  FlowPluginBundleImpl.init(bundlePath:supportedTopics:)();
  type metadata accessor for SnippetManager();
  long long v39 = 0u;
  long long v40 = 0u;
  uint64_t v41 = 0;
  uint64_t v30 = static SnippetManager.sharedInstance.getter();
  uint64_t v38 = v7;
  swift_unknownObjectRetain();
  uint64_t v31 = specialized RemoteConversationService.__allocating_init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)((uint64_t)&v38, v19, v20, (uint64_t)v5, v35, (uint64_t)closure #1 in closure #1 in FlowExtensionContext.remoteConversationService.getter, 0, v30, (uint64_t)&v39, v27, ObjectType, v18, v29, MEMORY[0x1E4FA18D0]);
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v5, v18);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v42);
  swift_unknownObjectRelease();
  return (uint64_t)v31;
}

uint64_t closure #1 in closure #1 in FlowExtensionContext.remoteConversationService.getter()
{
  return 0;
}

uint64_t FlowExtensionContext.remoteConversationService.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR___SKRFlowExtensionContext____lazy_storage___remoteConversationService) = a1;
  return swift_release();
}

uint64_t (*FlowExtensionContext.remoteConversationService.modify(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = FlowExtensionContext.remoteConversationService.getter();
  return FlowExtensionContext.remoteConversationService.modify;
}

uint64_t FlowExtensionContext.remoteConversationService.modify(void *a1)
{
  *(void *)(a1[1] + OBJC_IVAR___SKRFlowExtensionContext____lazy_storage___remoteConversationService) = *a1;
  return swift_release();
}

uint64_t FlowExtensionContext.warmup(refId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v4) + 0xE0))(v10);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = one-time initialization token for shared;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v16 != -1) {
    swift_once();
  }
  uint64_t v17 = static ConversationActor.shared;
  uint64_t v18 = _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, 255, (void (*)(uint64_t))type metadata accessor for ConversationActor);
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = v17;
  v19[3] = v18;
  v19[4] = v13;
  v19[5] = a1;
  v19[6] = a2;
  v19[7] = a3;
  v19[8] = a4;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.warmup(refId:reply:), (uint64_t)v19);
  swift_release();
  return swift_release();
}

uint64_t FlowExtensionContext.canHandle(inputData:rcId:reply:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v26 = a3;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v6) + 0xE0))(v13);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v18 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v15, 1, 1, v18);
  outlined copy of Data._Representation(a1, a2);
  uint64_t v19 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v19 != -1) {
    swift_once();
  }
  uint64_t v20 = static ConversationActor.shared;
  uint64_t v21 = _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, 255, (void (*)(uint64_t))type metadata accessor for ConversationActor);
  unint64_t v22 = (void *)swift_allocObject();
  void v22[2] = v20;
  v22[3] = v21;
  v22[4] = a1;
  v22[5] = a2;
  v22[6] = a5;
  v22[7] = a6;
  uint64_t v23 = v26;
  v22[8] = v16;
  v22[9] = v23;
  v22[10] = a4;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v15, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.canHandle(inputData:rcId:reply:), (uint64_t)v22);
  swift_release();
  return swift_release();
}

uint64_t FlowExtensionContext.cancel(reply:)(uint64_t a1, uint64_t a2)
{
  return FlowExtensionContext.cancel(reply:)(a1, a2, (uint64_t)"cancel(reply:)", 14, (uint64_t)&unk_1F137D6D8, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.cancel(reply:));
}

uint64_t FlowExtensionContext.reset(reply:)(uint64_t a1, uint64_t a2)
{
  return FlowExtensionContext.cancel(reply:)(a1, a2, (uint64_t)"reset(reply:)", 13, (uint64_t)&unk_1F137D700, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.reset(reply:));
}

uint64_t FlowExtensionContext.cancel(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v6) + 0xE0))(v11);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v13, 1, 1, v16);
  uint64_t v17 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  if (v17 != -1) {
    swift_once();
  }
  uint64_t v18 = static ConversationActor.shared;
  uint64_t v19 = _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, 255, (void (*)(uint64_t))type metadata accessor for ConversationActor);
  uint64_t v20 = (void *)swift_allocObject();
  _OWORD v20[2] = v18;
  v20[3] = v19;
  v20[4] = v14;
  v20[5] = a1;
  v20[6] = a2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v13, a6, (uint64_t)v20);
  swift_release();
  return swift_release();
}

uint64_t FlowExtensionContext.ensureReady(reply:)(uint64_t a1, uint64_t a2)
{
  return FlowExtensionContext.cancel(reply:)(a1, a2, (uint64_t)"ensureReady(reply:)", 19, (uint64_t)&unk_1F137D728, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.ensureReady(reply:));
}

uint64_t FlowExtensionContext.startTurn(turnData:bridge:reply:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0xE0))();
  RemoteConversationService.startTurn(turnData:bridge:reply:)(a1, a2, a3, a4);

  return swift_release();
}

uint64_t FlowExtensionContext.startTurnFromCache(executionRequestId:bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void))
{
  return a4(0, 0);
}

uint64_t FlowExtensionContext.acceptInitialInput(inputIdentifier:speechData:reply:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0xE0))();
  RemoteConversationService.acceptInitialInput(inputIdentifier:speechData:reply:)(a1, a2, a3, a4);

  return swift_release();
}

uint64_t FlowExtensionContext.accept(inputData:speechData:reply:)(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v5) + 0xE0))(v12);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v14, 1, 1, v17);
  outlined copy of Data._Representation(a1, a2);
  uint64_t v18 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  id v19 = a3;
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v20 = static ConversationActor.shared;
  uint64_t v21 = _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, 255, (void (*)(uint64_t))type metadata accessor for ConversationActor);
  uint64_t v22 = (void *)swift_allocObject();
  void v22[2] = v20;
  v22[3] = v21;
  v22[4] = a1;
  v22[5] = a2;
  v22[6] = a4;
  v22[7] = a5;
  v22[8] = v15;
  v22[9] = v19;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v14, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.accept(inputData:speechData:reply:), (uint64_t)v22);
  swift_release();
  return swift_release();
}

uint64_t FlowExtensionContext.paraphrase(reply:)(uint64_t a1, uint64_t a2)
{
  return FlowExtensionContext.cancel(reply:)(a1, a2, (uint64_t)"paraphrase(reply:)", 18, (uint64_t)&unk_1F137D778, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.paraphrase(reply:));
}

uint64_t FlowExtensionContext.prepare(bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FlowExtensionContext.cancel(reply:)(a2, a3, (uint64_t)"prepare(bridge:reply:)", 22, (uint64_t)&unk_1F137DAE8, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.prepare(bridge:reply:));
}

uint64_t FlowExtensionContext.commit(bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FlowExtensionContext.cancel(reply:)(a2, a3, (uint64_t)"commit(bridge:reply:)", 21, (uint64_t)&unk_1F137DAC0, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.commit(bridge:reply:));
}

uint64_t FlowExtensionContext.isEmpty(reply:)(uint64_t a1, uint64_t a2)
{
  return FlowExtensionContext.cancel(reply:)(a1, a2, (uint64_t)"isEmpty(reply:)", 15, (uint64_t)&unk_1F137D7A0, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.isEmpty(reply:));
}

uint64_t FlowExtensionContext.isCorrectable(reply:)(uint64_t a1, uint64_t a2)
{
  return FlowExtensionContext.cancel(reply:)(a1, a2, (uint64_t)"isCorrectable(reply:)", 21, (uint64_t)&unk_1F137D7C8, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.isCorrectable(reply:));
}

uint64_t FlowExtensionContext.flexibleExecutionSupportOptions(reply:)(uint64_t a1, uint64_t a2)
{
  return FlowExtensionContext.cancel(reply:)(a1, a2, (uint64_t)"flexibleExecutionSupportOptions(reply:)", 39, (uint64_t)&unk_1F137D7F0, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.flexibleExecutionSupportOptions(reply:));
}

uint64_t @objc FlowExtensionContext.cancel(reply:)(void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v9 = _Block_copy(aBlock);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  id v11 = a1;
  a6(a5, v10);

  return swift_release();
}

uint64_t FlowExtensionContext.drainAsyncWork(reply:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  id v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v2) + 0xE0))(v6);
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 1, 1, v10);
  uint64_t v11 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  if (v11 != -1) {
    swift_once();
  }
  uint64_t v12 = static ConversationActor.shared;
  uint64_t v13 = _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor, 255, (void (*)(uint64_t))type metadata accessor for ConversationActor);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = v12;
  v14[3] = v13;
  v14[4] = v9;
  v14[5] = a1;
  v14[6] = a2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteConversationService.drainAsyncWork(reply:), (uint64_t)v14);
  swift_release();
  return swift_release();
}

id FlowExtensionContext.__allocating_init(inputItems:contextUUID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (a1)
  {
    v5.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v5.super.Class isa = 0;
  }
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  }
  id v9 = objc_msgSend(objc_allocWithZone(v3), sel_initWithInputItems_contextUUID_, v5.super.isa, isa);

  return v9;
}

void FlowExtensionContext.init(inputItems:contextUUID:)()
{
}

id FlowExtensionContext.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FlowExtensionContext();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t *NoopSiriKitEventSender.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  return &static NoopSiriKitEventSender.instance;
}

uint64_t static NoopSiriKitEventSender.instance.getter()
{
  return swift_initStaticObject();
}

uint64_t NoopSiriKitEventSender.init()()
{
  return v0;
}

void NoopSiriKitEventSender.send(_:)()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    objc_super v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)objc_super v2 = 0;
    _os_log_impl(&dword_1B9C64000, oslog, v1, "Dropping SiriKitEvent since we're running in an external process. rdar://83367714 (Support event bus from flows running in external processes)", v2, 2u);
    MEMORY[0x1BA9E48C0](v2, -1, -1);
  }
}

uint64_t NoopSiriKitEventSender.deinit()
{
  return v0;
}

uint64_t NoopSiriKitEventSender.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

void protocol witness for SiriKitEventSending.send(_:) in conformance NoopSiriKitEventSender()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    objc_super v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)objc_super v2 = 0;
    _os_log_impl(&dword_1B9C64000, oslog, v1, "Dropping SiriKitEvent since we're running in an external process. rdar://83367714 (Support event bus from flows running in external processes)", v2, 2u);
    MEMORY[0x1BA9E48C0](v2, -1, -1);
  }
}

uint64_t protocol witness for SiriKitEventSending.sendAsync(_:) in conformance NoopSiriKitEventSender(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return MEMORY[0x1F4151BE8](a1, a2, a3);
}

void specialized FlowExtensionContext.init(inputItems:listenerEndpoint:contextUUID:overrideFlowExtension:overrideSiriKitRuntime:overrideExtensionId:overrideIntentTopics:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  uint64_t v72 = a7;
  uint64_t v73 = a8;
  uint64_t v70 = a4;
  uint64_t v71 = a6;
  uint64_t v69 = a5;
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v13 = MEMORY[0x1F4188790](v63);
  char v74 = &v56[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v62 = &v56[-v16];
  MEMORY[0x1F4188790](v15);
  uint64_t v75 = &v56[-v17];
  uint64_t v18 = &v9[OBJC_IVAR___SKRFlowExtensionContext_overrideFlowExtension];
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = 0;
  uint64_t v66 = OBJC_IVAR___SKRFlowExtensionContext_overrideSiriKitRuntime;
  *(void *)&v9[OBJC_IVAR___SKRFlowExtensionContext_overrideSiriKitRuntime] = 0;
  id v19 = &v9[OBJC_IVAR___SKRFlowExtensionContext_overrideExtensionId];
  *(void *)id v19 = 0;
  *((void *)v19 + 1) = 0;
  uint64_t v67 = OBJC_IVAR___SKRFlowExtensionContext_overrideIntentTopics;
  *(void *)&v9[OBJC_IVAR___SKRFlowExtensionContext_overrideIntentTopics] = 0;
  *(void *)&v9[OBJC_IVAR___SKRFlowExtensionContext____lazy_storage___remoteConversationService] = 0;
  uint64_t v20 = one-time initialization token for executor;
  uint64_t v21 = v9;
  if (v20 != -1) {
    swift_once();
  }
  uint64_t v65 = a9;
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.executor);
  outlined init with copy of UUID?(a3, (uint64_t)v75);
  id v23 = a2;
  swift_bridgeObjectRetain_n();
  id v24 = v23;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  int v27 = v26;
  char v64 = v25;
  BOOL v28 = os_log_type_enabled(v25, v26);
  id v68 = v24;
  if (v28)
  {
    uint64_t v29 = v24;
    uint64_t v30 = swift_slowAlloc();
    uint64_t v59 = swift_slowAlloc();
    uint64_t v77 = v59;
    *(_DWORD *)uint64_t v30 = 136315650;
    char v60 = v21;
    uint64_t v31 = swift_bridgeObjectRetain();
    uint64_t v58 = MEMORY[0x1E4FBC840] + 8;
    uint64_t v32 = MEMORY[0x1BA9E3080](v31);
    uint64_t v61 = a3;
    uint64_t v33 = v32;
    int v57 = v27;
    uint64_t v34 = (uint64_t)a2;
    unint64_t v36 = v35;
    swift_bridgeObjectRelease();
    uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v36, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 12) = 2080;
    uint64_t v76 = v34;
    id v37 = v29;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSXPCListenerEndpoint?);
    uint64_t v38 = String.init<A>(describing:)();
    uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v21 = v60;
    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 22) = 2080;
    long long v40 = v75;
    outlined init with copy of UUID?((uint64_t)v75, (uint64_t)v62);
    uint64_t v41 = String.init<A>(describing:)();
    uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a3 = v61;
    swift_bridgeObjectRelease();
    outlined destroy of UUID?((uint64_t)v40);
    unint64_t v43 = v64;
    _os_log_impl(&dword_1B9C64000, v64, (os_log_type_t)v57, "FlowExtensionContext inputItems: %s, listenerEndpoint: %s, contextUUID: %s", (uint8_t *)v30, 0x20u);
    uint64_t v44 = v59;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v44, -1, -1);
    MEMORY[0x1BA9E48C0](v30, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    outlined destroy of UUID?((uint64_t)v75);
  }
  uint64_t v45 = v69;
  *(void *)uint64_t v18 = v70;
  *((void *)v18 + 1) = v45;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)&v10[v66] = v71;
  swift_retain();
  swift_release();
  uint64_t v46 = v73;
  *(void *)id v19 = v72;
  *((void *)v19 + 1) = v46;
  swift_bridgeObjectRelease();
  *(void *)&v10[v67] = v65;

  swift_bridgeObjectRelease();
  v47.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  long long v48 = v74;
  outlined init with copy of UUID?(a3, (uint64_t)v74);
  uint64_t v49 = type metadata accessor for UUID();
  uint64_t v50 = *(void *)(v49 - 8);
  int v51 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49);
  Class isa = 0;
  if (v51 != 1)
  {
    uint64_t v53 = v74;
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(unsigned char *, uint64_t))(v50 + 8))(v53, v49);
  }
  uint64_t v54 = (objc_class *)type metadata accessor for FlowExtensionContext();
  v78.receiver = v21;
  v78.super_class = v54;
  id v55 = objc_msgSendSuper2(&v78, sel_initWithInputItems_listenerEndpoint_contextUUID_, v47.super.isa, v68, isa);

  if (v55) {
    outlined destroy of UUID?(a3);
  }
  else {
    __break(1u);
  }
}

uint64_t sub_1B9EFF160()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t partial apply for closure #1 in RemoteConversationService.warmup(refId:reply:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in RemoteConversationService.warmup(refId:reply:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1B9EFF28C()
{
  swift_unknownObjectRelease();
  outlined consume of Data._Representation(*(void *)(v0 + 32), *(void *)(v0 + 40));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 88, 7);
}

uint64_t partial apply for closure #1 in RemoteConversationService.canHandle(inputData:rcId:reply:)(uint64_t a1)
{
  uint64_t v4 = v1[3];
  uint64_t v12 = v1[2];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = v1[8];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in RemoteConversationService.canHandle(inputData:rcId:reply:)(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t partial apply for closure #1 in RemoteConversationService.cancel(reply:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in RemoteConversationService.cancel(reply:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in RemoteConversationService.reset(reply:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in RemoteConversationService.reset(reply:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in RemoteConversationService.ensureReady(reply:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in RemoteConversationService.ensureReady(reply:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1B9EFF63C()
{
  swift_unknownObjectRelease();
  outlined consume of Data._Representation(*(void *)(v0 + 32), *(void *)(v0 + 40));
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t partial apply for closure #1 in RemoteConversationService.accept(inputData:speechData:reply:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in RemoteConversationService.accept(inputData:speechData:reply:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t partial apply for closure #1 in RemoteConversationService.paraphrase(reply:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in RemoteConversationService.paraphrase(reply:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in RemoteConversationService.isEmpty(reply:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in RemoteConversationService.isEmpty(reply:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in RemoteConversationService.isCorrectable(reply:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in RemoteConversationService.isCorrectable(reply:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in RemoteConversationService.flexibleExecutionSupportOptions(reply:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in RemoteConversationService.flexibleExecutionSupportOptions(reply:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in RemoteConversationService.drainAsyncWork(reply:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in RemoteConversationService.drainAsyncWork(reply:)(a1, v4, v5, v6, v7, v8);
}

uint64_t type metadata accessor for FlowExtensionContext()
{
  return self;
}

uint64_t sub_1B9EFFBA0@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0xE0))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9EFFBFC(uint64_t a1, void **a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & **a2) + 0xE8);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t method lookup function for FlowExtensionContext(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for FlowExtensionContext);
}

uint64_t dispatch thunk of FlowExtensionContext.__allocating_init(inputItems:listenerEndpoint:contextUUID:overrideFlowExtension:overrideSiriKitRuntime:overrideExtensionId:overrideIntentTopics:)()
{
  return (*(uint64_t (**)(void))(v0 + 216))();
}

uint64_t dispatch thunk of FlowExtensionContext.remoteConversationService.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of FlowExtensionContext.remoteConversationService.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of FlowExtensionContext.remoteConversationService.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of FlowExtensionContext.warmup(refId:reply:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of FlowExtensionContext.canHandle(inputData:rcId:reply:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of FlowExtensionContext.cancel(reply:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of FlowExtensionContext.reset(reply:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110))();
}

uint64_t dispatch thunk of FlowExtensionContext.ensureReady(reply:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of FlowExtensionContext.startTurn(turnData:bridge:reply:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of FlowExtensionContext.startTurnFromCache(executionRequestId:bridge:reply:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of FlowExtensionContext.acceptInitialInput(inputIdentifier:speechData:reply:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of FlowExtensionContext.accept(inputData:speechData:reply:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of FlowExtensionContext.paraphrase(reply:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of FlowExtensionContext.prepare(bridge:reply:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of FlowExtensionContext.commit(bridge:reply:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150))();
}

uint64_t dispatch thunk of FlowExtensionContext.isEmpty(reply:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of FlowExtensionContext.isCorrectable(reply:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of FlowExtensionContext.flexibleExecutionSupportOptions(reply:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of FlowExtensionContext.drainAsyncWork(reply:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x170))();
}

uint64_t type metadata accessor for NoopSiriKitEventSender()
{
  return self;
}

uint64_t method lookup function for NoopSiriKitEventSender(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NoopSiriKitEventSender);
}

uint64_t dispatch thunk of NoopSiriKitEventSender.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable () -> ()()
{
  return thunk for @escaping @callee_unowned @convention(block) @Sendable () -> ()(*(void *)(v0 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ConversationFlexibleExecutionSupportXPC) -> ()(uint64_t a1)
{
  return thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned FlowExtensionUserInputResultXPC) -> ()(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ObjCBool) -> ()(char a1)
{
  return thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ObjCBool) -> ()(a1, *(void *)(v1 + 16));
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSError?) -> ()(uint64_t a1)
{
  thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSError?) -> ()(a1, *(void *)(v1 + 16));
}

uint64_t sub_1B9F0015C()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ConversationCanHandleResult) -> ()(uint64_t a1)
{
  return thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ConversationCanHandleResult) -> ()(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in RemoteConversationService.commit(bridge:reply:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in RemoteConversationService.commit(bridge:reply:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in RemoteConversationService.prepare(bridge:reply:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in RemoteConversationService.prepare(bridge:reply:)(a1, v4, v5, v6, v7, v8);
}

uint64_t _s14SiriKitRuntime17ConversationActorCACScAAAWlTm_0(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id FlowExtensionContextHost.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id FlowExtensionContextHost.init()()
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v2 = objc_msgSend(v0, sel_initWithInputItems_listenerEndpoint_contextUUID_, isa, 0, 0);

  return v2;
}

id FlowExtensionContextHost.__allocating_init(inputItems:)()
{
  id v1 = objc_allocWithZone(v0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v3 = objc_msgSend(v1, sel_initWithInputItems_, isa);

  return v3;
}

id FlowExtensionContextHost.init(inputItems:)()
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v2 = objc_msgSend(v0, sel_initWithInputItems_listenerEndpoint_contextUUID_, isa, 0, 0);

  return v2;
}

id FlowExtensionContextHost.__allocating_init(inputItems:listenerEndpoint:contextUUID:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v7.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a3, 1, v8) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a3, v8);
  }
  id v11 = objc_msgSend(objc_allocWithZone(v4), sel_initWithInputItems_listenerEndpoint_contextUUID_, v7.super.isa, a2, isa);

  return v11;
}

uint64_t FlowExtensionContextHost.init(inputItems:listenerEndpoint:contextUUID:)(uint64_t a1, void *a2, uint64_t a3)
{
  specialized FlowExtensionContextHost.init(inputItems:listenerEndpoint:contextUUID:)(a1, (uint64_t)a2, a3);
  uint64_t v5 = v4;

  return v5;
}

id static FlowExtensionContextHost._extensionAuxiliaryVendorProtocol()()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for remoteConversationXPCInterface, (void **)&static RemoteConversationXPCHelper.remoteConversationXPCInterface);
}

id static FlowExtensionContextHost._extensionAuxiliaryHostProtocol()()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for remoteConversationHostXPCInterface, (void **)&static RemoteConversationXPCHelper.remoteConversationHostXPCInterface);
}

id FlowExtensionContextHost.__allocating_init(inputItems:contextUUID:)(uint64_t a1, uint64_t a2)
{
  id v3 = v2;
  if (a1)
  {
    v5.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v5.super.Class isa = 0;
  }
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, v6);
  }
  id v9 = objc_msgSend(objc_allocWithZone(v3), sel_initWithInputItems_contextUUID_, v5.super.isa, isa);

  return v9;
}

void FlowExtensionContextHost.init(inputItems:contextUUID:)()
{
}

id FlowExtensionContextHost.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FlowExtensionContextHost();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void specialized FlowExtensionContextHost.init(inputItems:listenerEndpoint:contextUUID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v7 - 8);
  id v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  outlined init with copy of UUID?(a3, (uint64_t)v9);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v11) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
  }
  uint64_t v14 = (objc_class *)type metadata accessor for FlowExtensionContextHost();
  v16.receiver = v4;
  v16.super_class = v14;
  id v15 = objc_msgSendSuper2(&v16, sel_initWithInputItems_listenerEndpoint_contextUUID_, v10.super.isa, a2, isa);

  if (v15) {
    outlined destroy of UUID?(a3);
  }
  else {
    __break(1u);
  }
}

uint64_t type metadata accessor for FlowExtensionContextHost()
{
  return self;
}

uint64_t FlowExtensionConversationHandler.id.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t FlowExtensionConversationHandler.init(remoteConversationClient:)(uint64_t a1)
{
  return a1;
}

uint64_t FlowExtensionConversationHandler.warmup(refId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized FlowExtensionConversationHandler.warmup(refId:)
                                                         + async function pointer to specialized FlowExtensionConversationHandler.warmup(refId:));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v9(a1, a2, a3);
}

uint64_t FlowExtensionConversationHandler.startTurn(turnData:rcId:hypothesisId:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v10;
  *uint64_t v10 = v6;
  v10[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return RemoteConversationClient.startTurn(turnData:bridge:)(a1, a5, a6);
}

uint64_t FlowExtensionConversationHandler.findConversation(for:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a1;
  void v5[3] = a5;
  id v9 = (void *)swift_task_alloc();
  v5[4] = v9;
  *id v9 = v5;
  v9[1] = FlowExtensionConversationHandler.findConversation(for:rcId:);
  return RemoteConversationClient.canHandle(input:rcId:)(a2, a3, a4);
}

uint64_t FlowExtensionConversationHandler.findConversation(for:rcId:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    *(void *)(v4 + 40) = a1;
    return MEMORY[0x1F4188298](FlowExtensionConversationHandler.findConversation(for:rcId:), 0, 0);
  }
}

uint64_t FlowExtensionConversationHandler.findConversation(for:rcId:)()
{
  uint64_t v1 = (void *)v0[5];
  (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x78))(v0[3]);

  objc_super v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t FlowExtensionConversationHandler.affinityScore(for:)()
{
  return 2;
}

uint64_t protocol witness for ConversationHandler.id.getter in conformance FlowExtensionConversationHandler()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for ConversationHandler.warmup(refId:) in conformance FlowExtensionConversationHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  id v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized FlowExtensionConversationHandler.warmup(refId:)
                                                         + async function pointer to specialized FlowExtensionConversationHandler.warmup(refId:));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  void *v7 = v3;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v9(a1, a2, v6);
}

uint64_t protocol witness for ConversationHandler.startTurn(turnData:rcId:hypothesisId:bridge:) in conformance FlowExtensionConversationHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v10;
  *uint64_t v10 = v6;
  v10[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return RemoteConversationClient.startTurn(turnData:bridge:)(a1, a5, a6);
}

uint64_t protocol witness for ConversationHandler.findConversation(for:rcId:) in conformance FlowExtensionConversationHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  v5[2] = a1;
  void v5[3] = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  v5[4] = v10;
  *uint64_t v10 = v5;
  v10[1] = FlowExtensionConversationHandler.findConversation(for:rcId:);
  return RemoteConversationClient.canHandle(input:rcId:)(a2, a3, a4);
}

uint64_t protocol witness for ConversationHandler.affinityScore(for:) in conformance FlowExtensionConversationHandler()
{
  return 2;
}

uint64_t protocol witness for Identifiable.id.getter in conformance FlowExtensionConversationHandler@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *a1 = *(void *)(v1 + 8);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t specialized FlowExtensionConversationHandler.warmup(refId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v3[3] = a2;
  v3[4] = a3;
  long long v3[2] = a1;
  return MEMORY[0x1F4188298](specialized FlowExtensionConversationHandler.warmup(refId:), a3, 0);
}

unint64_t instantiation function for generic protocol witness table for FlowExtensionConversationHandler(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type FlowExtensionConversationHandler and conformance FlowExtensionConversationHandler();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in FlowExtensionConversationHandler()
{
  return MEMORY[0x1E4FBB1B0];
}

uint64_t destroy for FlowExtensionConversationHandler()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for FlowExtensionConversationHandler(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for FlowExtensionConversationHandler(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for FlowExtensionConversationHandler(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FlowExtensionConversationHandler()
{
  return &type metadata for FlowExtensionConversationHandler;
}

uint64_t sub_1B9F01878()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t FlowExtensionDiscoverer.findConversationHandler(bundleId:onConnectionInterrupted:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 + 16) = a1;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v11;
  void *v11 = v6;
  v11[1] = FlowExtensionDiscoverer.findConversationHandler(bundleId:onConnectionInterrupted:);
  v11[25] = a5;
  v11[26] = v5;
  v11[23] = a3;
  unsigned char v11[24] = a4;
  v11[22] = a2;
  return MEMORY[0x1F4188298](FlowExtensionDiscoverer.findFlowExtension(bundleId:onConnectionInterrupted:), 0, 0);
}

uint64_t FlowExtensionDiscoverer.findConversationHandler(bundleId:onConnectionInterrupted:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 32) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](FlowExtensionDiscoverer.findConversationHandler(bundleId:onConnectionInterrupted:), 0, 0);
}

uint64_t FlowExtensionDiscoverer.findConversationHandler(bundleId:onConnectionInterrupted:)()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = (void *)v0[2];
  if (v1)
  {
    uint64_t v4 = *(void *)(v1 + 112);
    uint64_t v3 = *(void *)(v1 + 120);
    v2[3] = &type metadata for FlowExtensionConversationHandler;
    v2[4] = lazy protocol witness table accessor for type FlowExtensionConversationHandler and conformance FlowExtensionConversationHandler();
    *uint64_t v2 = v1;
    v2[1] = v4;
    _OWORD v2[2] = v3;
    swift_bridgeObjectRetain();
  }
  else
  {
    v2[4] = 0;
    *(_OWORD *)uint64_t v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
  }
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t FlowExtensionDiscoverer.observer.getter()
{
  return swift_retain();
}

uint64_t FlowExtensionDiscoverer.__allocating_init(observer:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t FlowExtensionDiscoverer.init(observer:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t static FlowExtensionDiscoverer.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t FlowExtensionDiscoverer.findFlowExtension(topic:onConnectionInterrupted:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[47] = a3;
  v4[48] = v3;
  v4[45] = a1;
  v4[46] = a2;
  uint64_t v5 = type metadata accessor for Logger();
  v4[49] = v5;
  v4[50] = *(void *)(v5 - 8);
  v4[51] = swift_task_alloc();
  return MEMORY[0x1F4188298](FlowExtensionDiscoverer.findFlowExtension(topic:onConnectionInterrupted:), 0, 0);
}

uint64_t FlowExtensionDiscoverer.findFlowExtension(topic:onConnectionInterrupted:)()
{
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  uint64_t v1 = (void *)IntentTopic.makeCacheKeyAndWildcardFallbacks()();
  *(void *)(v0 + 416) = v1;
  uint64_t v2 = v1[2];
  *(void *)(v0 + 424) = v2;
  if (v2)
  {
    *(void *)(v0 + 432) = *(void *)(*(void *)(v0 + 384) + 16);
    *(void *)(v0 + 440) = 0;
    *(void *)(v0 + 448) = v1[4];
    *(void *)(v0 + 456) = v1[5];
    uint64_t v3 = one-time initialization token for shared;
    swift_bridgeObjectRetain();
    if (v3 != -1) {
      swift_once();
    }
    uint64_t v4 = static ConversationActor.shared;
    *(void *)(v0 + 464) = static ConversationActor.shared;
    return MEMORY[0x1F4188298](FlowExtensionDiscoverer.findFlowExtension(topic:onConnectionInterrupted:), v4, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 16, v0 + 216, &demangling cache variable for type metadata for NSExtensionProtocol?);
    if (*(void *)(v0 + 240))
    {
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 216), v0 + 176);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v6 = *(void *)(v0 + 400);
      uint64_t v5 = *(void *)(v0 + 408);
      uint64_t v7 = *(void *)(v0 + 392);
      uint64_t v8 = *(void *)(v0 + 376);
      uint64_t v24 = *(void *)(v0 + 368);
      uint64_t v9 = __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v9, v7);
      outlined init with copy of ReferenceResolutionClientProtocol(v0 + 176, v0 + 256);
      uint64_t v10 = swift_allocObject();
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 256), v10 + 16);
      specialized Logger.debugF(_:_:_:_:)((uint64_t (*)(uint64_t))partial apply for implicit closure #1 in FlowExtensionDiscoverer.findFlowExtension(topic:onConnectionInterrupted:));
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      outlined init with copy of ReferenceResolutionClientProtocol(v0 + 176, v0 + 296);
      uint64_t v11 = type metadata accessor for FlowExtensionConnection();
      swift_allocObject();
      swift_retain();
      uint64_t v12 = FlowExtensionConnection.init(nsExtension:onConnectionInterrupted:)((void *)(v0 + 296), v24, v8);
      uint64_t v13 = *(void *)(v0 + 200);
      uint64_t v14 = *(void *)(v0 + 208);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 176), v13);
      uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
      uint64_t v17 = v16;
      *(void *)(v0 + 160) = v11;
      *(void *)(v0 + 168) = &protocol witness table for FlowExtensionConnection;
      *(void *)(v0 + 136) = v12;
      type metadata accessor for RemoteConversationClient();
      uint64_t v18 = (void *)swift_allocObject();
      swift_retain();
      swift_defaultActor_initialize();
      v18[21] = 0;
      v18[22] = 0;
      v18[14] = v15;
      v18[15] = v17;
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 136), (uint64_t)(v18 + 16));
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for NSExtensionProtocol?);
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 176);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 216, &demangling cache variable for type metadata for NSExtensionProtocol?);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      __swift_project_value_buffer(*(void *)(v0 + 392), (uint64_t)static Logger.executor);
      id v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v21 = 0;
        _os_log_impl(&dword_1B9C64000, v19, v20, "No extensions support input", v21, 2u);
        MEMORY[0x1BA9E48C0](v21, -1, -1);
      }

      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for NSExtensionProtocol?);
      uint64_t v18 = 0;
    }
    swift_task_dealloc();
    uint64_t v22 = *(uint64_t (**)(void *))(v0 + 8);
    return v22(v18);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v12;

  uint64_t v1 = *(void *)(v0 + 432);
  uint64_t v2 = *(void *)(v1 + 48);
  *(void *)(v0 + 472) = v2;
  if (v2)
  {
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 480) = v3;
    *uint64_t v3 = v0;
    v3[1] = FlowExtensionDiscoverer.findFlowExtension(topic:onConnectionInterrupted:);
    uint64_t v4 = MEMORY[0x1E4FBC848] + 8;
    return MEMORY[0x1F4187DC0](v3, v2, v4);
  }
  else
  {
    uint64_t v5 = (_OWORD *)(v0 + 96);
    swift_beginAccess();
    uint64_t v6 = *(void *)(v1 + 64);
    if (v6)
    {
      if (*(void *)(v6 + 16))
      {
        uint64_t v8 = *(void *)(v0 + 448);
        uint64_t v7 = *(void *)(v0 + 456);
        swift_bridgeObjectRetain();
        uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
        if (v10)
        {
          outlined init with copy of ReferenceResolutionClientProtocol(*(void *)(v6 + 56) + 40 * v9, v0 + 96);
        }
        else
        {
          *(void *)(v0 + 128) = 0;
          *uint64_t v5 = 0u;
          *(_OWORD *)(v0 + 112) = 0u;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        *(void *)(v0 + 128) = 0;
        *uint64_t v5 = 0u;
        *(_OWORD *)(v0 + 112) = 0u;
      }
      swift_endAccess();
    }
    else
    {
      swift_endAccess();
      *(void *)(v0 + 128) = 0;
      *uint64_t v5 = 0u;
      *(_OWORD *)(v0 + 112) = 0u;
    }
    swift_bridgeObjectRelease();
    return MEMORY[0x1F4188298](FlowExtensionDiscoverer.findFlowExtension(topic:onConnectionInterrupted:), 0, 0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 464);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](FlowExtensionDiscoverer.findFlowExtension(topic:onConnectionInterrupted:), v1, 0);
}

{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v9;

  uint64_t v1 = (_OWORD *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 432);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v2 + 64);
  if (v3)
  {
    if (*(void *)(v3 + 16))
    {
      uint64_t v5 = *(void *)(v0 + 448);
      uint64_t v4 = *(void *)(v0 + 456);
      swift_bridgeObjectRetain();
      uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v4);
      if (v7)
      {
        outlined init with copy of ReferenceResolutionClientProtocol(*(void *)(v3 + 56) + 40 * v6, v0 + 96);
      }
      else
      {
        *(void *)(v0 + 128) = 0;
        *uint64_t v1 = 0u;
        *(_OWORD *)(v0 + 112) = 0u;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      *(void *)(v0 + 128) = 0;
      *uint64_t v1 = 0u;
      *(_OWORD *)(v0 + 112) = 0u;
    }
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    *(void *)(v0 + 128) = 0;
    *uint64_t v1 = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](FlowExtensionDiscoverer.findFlowExtension(topic:onConnectionInterrupted:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t (*v20)(void *);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (*(void *)(v0 + 120))
  {
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for NSExtensionProtocol?);
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 96), v0 + 56);
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 56), v0 + 16);
LABEL_5:
    outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 16, v0 + 216, &demangling cache variable for type metadata for NSExtensionProtocol?);
    if (*(void *)(v0 + 240))
    {
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 216), v0 + 176);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v4 = *(void *)(v0 + 400);
      uint64_t v3 = *(void *)(v0 + 408);
      uint64_t v5 = *(void *)(v0 + 392);
      uint64_t v6 = *(void *)(v0 + 376);
      os_log_type_t v26 = *(void *)(v0 + 368);
      uint64_t v7 = __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v7, v5);
      outlined init with copy of ReferenceResolutionClientProtocol(v0 + 176, v0 + 256);
      uint64_t v8 = swift_allocObject();
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 256), v8 + 16);
      specialized Logger.debugF(_:_:_:_:)((uint64_t (*)(uint64_t))partial apply for implicit closure #1 in FlowExtensionDiscoverer.findFlowExtension(topic:onConnectionInterrupted:));
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
      outlined init with copy of ReferenceResolutionClientProtocol(v0 + 176, v0 + 296);
      uint64_t v9 = type metadata accessor for FlowExtensionConnection();
      swift_allocObject();
      swift_retain();
      uint64_t v10 = FlowExtensionConnection.init(nsExtension:onConnectionInterrupted:)((void *)(v0 + 296), v26, v6);
      uint64_t v11 = *(void *)(v0 + 200);
      uint64_t v12 = *(void *)(v0 + 208);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 176), v11);
      uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
      uint64_t v15 = v14;
      *(void *)(v0 + 160) = v9;
      *(void *)(v0 + 168) = &protocol witness table for FlowExtensionConnection;
      *(void *)(v0 + 136) = v10;
      type metadata accessor for RemoteConversationClient();
      uint64_t v16 = (void *)swift_allocObject();
      swift_retain();
      swift_defaultActor_initialize();
      v16[21] = 0;
      v16[22] = 0;
      v16[14] = v13;
      v16[15] = v15;
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 136), (uint64_t)(v16 + 16));
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for NSExtensionProtocol?);
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 176);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 216, &demangling cache variable for type metadata for NSExtensionProtocol?);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      __swift_project_value_buffer(*(void *)(v0 + 392), (uint64_t)static Logger.executor);
      uint64_t v17 = Logger.logObject.getter();
      uint64_t v18 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v17, v18))
      {
        id v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v19 = 0;
        _os_log_impl(&dword_1B9C64000, v17, v18, "No extensions support input", v19, 2u);
        MEMORY[0x1BA9E48C0](v19, -1, -1);
      }

      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for NSExtensionProtocol?);
      uint64_t v16 = 0;
    }
    swift_task_dealloc();
    os_log_type_t v20 = *(uint64_t (**)(void *))(v0 + 8);
    return v20(v16);
  }
  uint64_t v1 = *(void *)(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 440) + 1;
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 96, &demangling cache variable for type metadata for NSExtensionProtocol?);
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  uint64_t v22 = *(void *)(v0 + 440) + 1;
  *(void *)(v0 + 440) = v22;
  id v23 = *(void *)(v0 + 416) + 16 * v22;
  *(void *)(v0 + 448) = *(void *)(v23 + 32);
  *(void *)(v0 + 456) = *(void *)(v23 + 40);
  uint64_t v24 = one-time initialization token for shared;
  swift_bridgeObjectRetain();
  if (v24 != -1) {
    swift_once();
  }
  uint64_t v25 = static ConversationActor.shared;
  *(void *)(v0 + 464) = static ConversationActor.shared;
  return MEMORY[0x1F4188298](FlowExtensionDiscoverer.findFlowExtension(topic:onConnectionInterrupted:), v25, 0);
}

uint64_t FlowExtensionObserver.findExtension(matchingTopicKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  void v4[5] = a1;
  v4[6] = a2;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v5 = static ConversationActor.shared;
  v4[9] = static ConversationActor.shared;
  return MEMORY[0x1F4188298](FlowExtensionObserver.findExtension(matchingTopicKey:), v5, 0);
}

uint64_t FlowExtensionObserver.findExtension(matchingTopicKey:)()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = *(void *)(v1 + 48);
  v0[10] = v2;
  if (v2)
  {
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    v0[11] = v3;
    *uint64_t v3 = v0;
    v3[1] = FlowExtensionObserver.findExtension(matchingTopicKey:);
    uint64_t v4 = MEMORY[0x1E4FBC848] + 8;
    return MEMORY[0x1F4187DC0](v3, v2, v4);
  }
  else
  {
    swift_beginAccess();
    uint64_t v5 = *(void *)(v1 + 64);
    if (v5)
    {
      if (*(void *)(v5 + 16))
      {
        uint64_t v7 = v0[6];
        uint64_t v6 = v0[7];
        swift_bridgeObjectRetain();
        unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
        char v10 = v9;
        uint64_t v11 = v0[5];
        if (v10)
        {
          outlined init with copy of ReferenceResolutionClientProtocol(*(void *)(v5 + 56) + 40 * v8, v11);
        }
        else
        {
          *(void *)(v11 + 32) = 0;
          *(_OWORD *)uint64_t v11 = 0u;
          *(_OWORD *)(v11 + 16) = 0u;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v13 = v0[5];
        *(void *)(v13 + 32) = 0;
        *(_OWORD *)uint64_t v13 = 0u;
        *(_OWORD *)(v13 + 16) = 0u;
      }
      swift_endAccess();
    }
    else
    {
      uint64_t v12 = v0[5];
      swift_endAccess();
      *(void *)(v12 + 32) = 0;
      *(_OWORD *)uint64_t v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
    }
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](FlowExtensionObserver.findExtension(matchingTopicKey:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;

  uint64_t v1 = v0[8];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 64);
  if (v2)
  {
    if (*(void *)(v2 + 16))
    {
      uint64_t v4 = v0[6];
      uint64_t v3 = v0[7];
      swift_bridgeObjectRetain();
      uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v3);
      uint64_t v7 = v6;
      unint64_t v8 = v0[5];
      if (v7)
      {
        outlined init with copy of ReferenceResolutionClientProtocol(*(void *)(v2 + 56) + 40 * v5, v8);
      }
      else
      {
        *(void *)(v8 + 32) = 0;
        *(_OWORD *)unint64_t v8 = 0u;
        *(_OWORD *)(v8 + 16) = 0u;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      char v10 = v0[5];
      *(void *)(v10 + 32) = 0;
      *(_OWORD *)char v10 = 0u;
      *(_OWORD *)(v10 + 16) = 0u;
    }
    swift_endAccess();
  }
  else
  {
    char v9 = v0[5];
    swift_endAccess();
    *(void *)(v9 + 32) = 0;
    *(_OWORD *)char v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
  }
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t FlowExtensionDiscoverer.findFlowExtension(bundleId:onConnectionInterrupted:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[25] = a4;
  v5[26] = v4;
  v5[23] = a2;
  unsigned char v5[24] = a3;
  v5[22] = a1;
  return MEMORY[0x1F4188298](FlowExtensionDiscoverer.findFlowExtension(bundleId:onConnectionInterrupted:), 0, 0);
}

uint64_t FlowExtensionDiscoverer.findFlowExtension(bundleId:onConnectionInterrupted:)()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[27] = v1;
  *uint64_t v1 = v0;
  v1[1] = FlowExtensionDiscoverer.findFlowExtension(bundleId:onConnectionInterrupted:);
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[23];
  return FlowExtensionObserver.findExtension(withIdentifier:)((uint64_t)(v0 + 7), v2, v3);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](FlowExtensionDiscoverer.findFlowExtension(bundleId:onConnectionInterrupted:), 0, 0);
}

{
  uint64_t v0;
  long long *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t (*v12)(void *);
  uint64_t v14;

  uint64_t v1 = (long long *)(v0 + 56);
  if (*(void *)(v0 + 80))
  {
    uint64_t v3 = *(void *)(v0 + 192);
    uint64_t v2 = *(void *)(v0 + 200);
    outlined init with take of ReferenceResolutionClientProtocol(v1, v0 + 16);
    outlined init with copy of ReferenceResolutionClientProtocol(v0 + 16, v0 + 96);
    uint64_t v4 = type metadata accessor for FlowExtensionConnection();
    swift_allocObject();
    swift_retain();
    uint64_t v5 = FlowExtensionConnection.init(nsExtension:onConnectionInterrupted:)((void *)(v0 + 96), v3, v2);
    uint64_t v6 = *(void *)(v0 + 40);
    uint64_t v7 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v6);
    unint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    char v10 = v9;
    *(void *)(v0 + 136) = v5;
    *(void *)(v0 + 160) = v4;
    *(void *)(v0 + 168) = &protocol witness table for FlowExtensionConnection;
    type metadata accessor for RemoteConversationClient();
    uint64_t v11 = (void *)swift_allocObject();
    swift_retain();
    swift_defaultActor_initialize();
    v11[21] = 0;
    v11[22] = 0;
    v11[14] = v8;
    v11[15] = v10;
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 136), (uint64_t)(v11 + 16));
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v1, &demangling cache variable for type metadata for NSExtensionProtocol?);
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(void *))(v0 + 8);
  return v12(v11);
}

uint64_t FlowExtensionObserver.findExtension(withIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  void v4[5] = a1;
  v4[6] = a2;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v5 = static ConversationActor.shared;
  v4[9] = static ConversationActor.shared;
  return MEMORY[0x1F4188298](FlowExtensionObserver.findExtension(withIdentifier:), v5, 0);
}

uint64_t FlowExtensionObserver.findExtension(withIdentifier:)()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = *(void *)(v1 + 48);
  v0[10] = v2;
  if (v2)
  {
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    v0[11] = v3;
    *uint64_t v3 = v0;
    v3[1] = FlowExtensionObserver.findExtension(withIdentifier:);
    uint64_t v4 = MEMORY[0x1E4FBC848] + 8;
    return MEMORY[0x1F4187DC0](v3, v2, v4);
  }
  else
  {
    swift_beginAccess();
    uint64_t v5 = *(void *)(v1 + 56);
    if (v5)
    {
      if (*(void *)(v5 + 16))
      {
        uint64_t v7 = v0[6];
        uint64_t v6 = v0[7];
        swift_bridgeObjectRetain();
        unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
        char v10 = v9;
        uint64_t v11 = v0[5];
        if (v10)
        {
          outlined init with copy of ReferenceResolutionClientProtocol(*(void *)(v5 + 56) + 40 * v8, v11);
        }
        else
        {
          *(void *)(v11 + 32) = 0;
          *(_OWORD *)uint64_t v11 = 0u;
          *(_OWORD *)(v11 + 16) = 0u;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v13 = v0[5];
        *(void *)(v13 + 32) = 0;
        *(_OWORD *)uint64_t v13 = 0u;
        *(_OWORD *)(v13 + 16) = 0u;
      }
      swift_endAccess();
    }
    else
    {
      uint64_t v12 = v0[5];
      swift_endAccess();
      *(void *)(v12 + 32) = 0;
      *(_OWORD *)uint64_t v12 = 0u;
      *(_OWORD *)(v12 + 16) = 0u;
    }
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](FlowExtensionObserver.findExtension(withIdentifier:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;

  uint64_t v1 = v0[8];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 56);
  if (v2)
  {
    if (*(void *)(v2 + 16))
    {
      uint64_t v4 = v0[6];
      uint64_t v3 = v0[7];
      swift_bridgeObjectRetain();
      uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v3);
      uint64_t v7 = v6;
      unint64_t v8 = v0[5];
      if (v7)
      {
        outlined init with copy of ReferenceResolutionClientProtocol(*(void *)(v2 + 56) + 40 * v5, v8);
      }
      else
      {
        *(void *)(v8 + 32) = 0;
        *(_OWORD *)unint64_t v8 = 0u;
        *(_OWORD *)(v8 + 16) = 0u;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      char v10 = v0[5];
      *(void *)(v10 + 32) = 0;
      *(_OWORD *)char v10 = 0u;
      *(_OWORD *)(v10 + 16) = 0u;
    }
    swift_endAccess();
  }
  else
  {
    char v9 = v0[5];
    swift_endAccess();
    *(void *)(v9 + 32) = 0;
    *(_OWORD *)char v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
  }
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t implicit closure #1 in FlowExtensionDiscoverer.findFlowExtension(topic:onConnectionInterrupted:)(void *a1)
{
  _StringGuts.grow(_:)(39);
  v2._object = (void *)0x80000001BA069740;
  v2._uint64_t countAndFlagsBits = 0xD000000000000025;
  String.append(_:)(v2);
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  v5._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.append(_:)(v6);
  return 0;
}

uint64_t FlowExtensionDiscoverer.deinit()
{
  swift_release();
  return v0;
}

uint64_t FlowExtensionDiscoverer.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t one-time initialization function for kSharedFlowExtensionObserver()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v0 - 8);
  Swift::String v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FlowExtensionObserver();
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = type metadata accessor for TaskPriority();
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(void *)(v3 + 64) = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 1, 1, v4);
  uint64_t v5 = one-time initialization token for shared;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v6 = static ConversationActor.shared;
  unint64_t v7 = lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor();
  unint64_t v8 = (void *)swift_allocObject();
  v8[2] = v6;
  v8[3] = v7;
  v8[4] = v3;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v2, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in variable initialization expression of kSharedFlowExtensionObserver, (uint64_t)v8);
  uint64_t result = swift_release();
  kSharedFlowExtensionObserver = v3;
  return result;
}

uint64_t closure #1 in closure #1 in variable initialization expression of kSharedFlowExtensionObserver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v5 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in variable initialization expression of kSharedFlowExtensionObserver, v5, 0);
}

uint64_t closure #1 in closure #1 in variable initialization expression of kSharedFlowExtensionObserver()
{
  FlowExtensionObserver.begin()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void FlowExtensionObserver.begin()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = &v41[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = &v41[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = &v41[-v11];
  if (v1[6])
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
    os_log_t v44 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_1B9C64000, v44, v14, "FlowExtensionObserver.begin() called multiple times while still gathering initial extensions. Ignoring.", v15, 2u);
      MEMORY[0x1BA9E48C0](v15, -1, -1);
    }
    os_log_t v16 = v44;
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    os_log_t v44 = v5;
    uint64_t v17 = type metadata accessor for OSSignposter();
    __swift_project_value_buffer(v17, (uint64_t)static Signposter.executor);
    static OSSignpostID.exclusive.getter();
    uint64_t v18 = OSSignposter.logHandle.getter();
    int v19 = static os_signpost_type_t.begin.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      os_log_type_t v20 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 16);
      int v42 = v19;
      v20(v10, v12, v6);
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = v2;
      uint64_t v22 = v21;
      *(_WORD *)uint64_t v21 = 0;
      os_signpost_id_t v23 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_1B9C64000, v18, (os_signpost_type_t)v42, v23, "LoadAllFlowExtensions", "", v22, 2u);
      uint64_t v24 = v22;
      uint64_t v2 = v43;
      MEMORY[0x1BA9E48C0](v24, -1, -1);

      (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v6);
    }
    else
    {

      os_log_type_t v20 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 16);
    }
    v20(v10, v12, v6);
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    uint64_t v25 = OSSignpostIntervalState.init(id:isOpen:)();
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v12, v6);
    os_log_type_t v26 = self;
    if (one-time initialization token for extensionPointAttributes != -1) {
      swift_once();
    }
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    aBlock[4] = partial apply for closure #1 in FlowExtensionObserver.begin();
    aBlock[5] = v1;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed [Any]?, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_14;
    BOOL v28 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    id v29 = objc_msgSend(v26, sel_beginMatchingExtensionsWithAttributes_completion_, isa, v28);
    _Block_release(v28);

    os_log_t v30 = v44;
    if (v29)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v47, 0, sizeof(v47));
    }
    outlined init with take of Any?((uint64_t)v47, (uint64_t)aBlock);
    uint64_t v31 = type metadata accessor for TaskPriority();
    (*(void (**)(os_log_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
    uint64_t v32 = one-time initialization token for shared;
    swift_retain();
    swift_retain();
    if (v32 != -1) {
      swift_once();
    }
    uint64_t v33 = static ConversationActor.shared;
    unint64_t v34 = lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor();
    unint64_t v35 = (void *)swift_allocObject();
    v35[2] = v33;
    v35[3] = v34;
    v35[4] = v25;
    v35[5] = v1;
    v35[6] = v2;
    swift_retain();
    uint64_t v36 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v30, (uint64_t)&async function pointer to partial apply for closure #2 in FlowExtensionObserver.begin(), (uint64_t)v35);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)aBlock, (uint64_t)&v45, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v46)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)aBlock, (uint64_t *)&demangling cache variable for type metadata for Any?);
      swift_release();
      outlined init with take of Any(&v45, v47);
      outlined init with take of Any(v47, &v45);
      swift_beginAccess();
      outlined assign with take of Any?((uint64_t)&v45, (uint64_t)(v1 + 2));
      swift_endAccess();
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v45, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      __swift_project_value_buffer(v37, (uint64_t)static Logger.executor);
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        long long v40 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v40 = 0;
        _os_log_impl(&dword_1B9C64000, v38, v39, "Could not set up NSExtension observer, new extensions will not be discovered until assistantd is killed", v40, 2u);
        MEMORY[0x1BA9E48C0](v40, -1, -1);
      }
      swift_release();

      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)aBlock, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    v1[6] = v36;
    swift_release();
  }
}

unint64_t one-time initialization function for extensionPointAttributes()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BA04F9C0;
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRetain();
  uint64_t v1 = MEMORY[0x1E4FBB1A0];
  AnyHashable.init<A>(_:)();
  swift_bridgeObjectRelease();
  *(void *)(inited + 96) = v1;
  *(void *)(inited + 72) = 0xD00000000000001DLL;
  *(void *)(inited + 80) = 0x80000001BA065500;
  AnyHashable.init<A>(_:)();
  *(void *)(inited + 168) = MEMORY[0x1E4FBB390];
  *(unsigned char *)(inited + 144) = 1;
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(inited);
  static FlowExtensionObserver.extensionPointAttributes = result;
  return result;
}

uint64_t FlowExtensionObserver.__allocating_init(forceKnownExtensions:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(void *)(v2 + 64) = 0;
  uint64_t v3 = specialized static FlowExtensionObserver.reduceSeenExtensions(_:)(a1);
  swift_beginAccess();
  *(void *)(v2 + 56) = v3;
  swift_bridgeObjectRelease();
  uint64_t v4 = specialized static FlowExtensionObserver.reduceSeenTopics(_:)(a1);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v2 + 64) = v4;
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t FlowExtensionObserver.init(forceKnownExtensions:)(uint64_t a1)
{
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(void *)(v1 + 64) = 0;
  uint64_t v3 = specialized static FlowExtensionObserver.reduceSeenExtensions(_:)(a1);
  swift_beginAccess();
  *(void *)(v1 + 56) = v3;
  swift_bridgeObjectRelease();
  uint64_t v4 = specialized static FlowExtensionObserver.reduceSeenTopics(_:)(a1);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v1 + 64) = v4;
  swift_bridgeObjectRelease();
  return v1;
}

void closure #1 in FlowExtensionObserver.begin()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 && (uint64_t v9 = specialized _arrayConditionalCast<A, B>(_:)(a1)) != 0)
  {
    uint64_t v10 = v9;
    uint64_t v11 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 1, 1, v11);
    swift_retain();
    id v12 = a2;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    uint64_t v13 = static ConversationActor.shared;
    unint64_t v14 = lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor();
    uint64_t v15 = (void *)swift_allocObject();
    long long v15[2] = v13;
    v15[3] = v14;
    v15[4] = a3;
    v15[5] = v10;
    v15[6] = a2;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in FlowExtensionObserver.begin(), (uint64_t)v15);
    swift_release();
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
    os_log_t v21 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_1B9C64000, v21, v17, "Error when matching new NSExtensions: Could not cast as [NSExtensionProtocol]? Assuming no results.", v18, 2u);
      MEMORY[0x1BA9E48C0](v18, -1, -1);
    }
    os_log_t v19 = v21;
  }
}

uint64_t closure #1 in closure #1 in FlowExtensionObserver.begin()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  void v6[4] = a6;
  _OWORD v6[2] = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v7 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in FlowExtensionObserver.begin(), v7, 0);
}

uint64_t closure #1 in closure #1 in FlowExtensionObserver.begin()()
{
  FlowExtensionObserver.foundExtensions(_:error:)(*(void *)(v0 + 24), *(void **)(v0 + 32));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void FlowExtensionObserver.foundExtensions(_:error:)(uint64_t a1, void *a2)
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 134217984;
    v21[0] = *(void *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v6, v7, "FlowExtensionObserver: %ld extensions found", v8, 0xCu);
    MEMORY[0x1BA9E48C0](v8, -1, -1);

    if (a2) {
      goto LABEL_5;
    }
LABEL_8:
    uint64_t v19 = specialized static FlowExtensionObserver.reduceSeenExtensions(_:)(a1);
    swift_beginAccess();
    *(void *)(v2 + 56) = v19;
    swift_bridgeObjectRelease();
    uint64_t v20 = specialized static FlowExtensionObserver.reduceSeenTopics(_:)(a1);
    swift_beginAccess();
    *(void *)(v2 + 64) = v20;
    swift_bridgeObjectRelease();
    return;
  }

  swift_bridgeObjectRelease();
  if (!a2) {
    goto LABEL_8;
  }
LABEL_5:
  id v9 = a2;
  id v10 = a2;
  id v11 = a2;
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    v21[0] = v15;
    *(_DWORD *)unint64_t v14 = 136315138;
    id v16 = a2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v17 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v12, v13, "Error finding Flow Extensions: %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v15, -1, -1);
    MEMORY[0x1BA9E48C0](v14, -1, -1);
  }
  else
  {
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [Any]?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2) {
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  swift_retain();
  id v6 = a3;
  v4(v5, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in FlowExtensionObserver.begin()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 56) = a4;
  *(void *)(v5 + 64) = a5;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v6 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #2 in FlowExtensionObserver.begin(), v6, 0);
}

uint64_t closure #2 in FlowExtensionObserver.begin()()
{
  int v27 = v0;
  v26[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void **)(v0 + 5);
  uint64_t v2 = self;
  if (one-time initialization token for extensionPointAttributes != -1) {
    swift_once();
  }
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  *uint64_t v1 = 0;
  id v4 = objc_msgSend(v2, sel_extensionsWithMatchingAttributes_error_, isa, v0 + 5);

  uint64_t v5 = *v1;
  if (v4)
  {
    uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    id v7 = v5;

    uint64_t v8 = specialized _arrayConditionalCast<A, B>(_:)(v6);
    swift_bridgeObjectRelease();
    if (v8)
    {
      FlowExtensionObserver.foundExtensions(_:error:)(v8, 0);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
      os_log_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v21, v22))
      {
        os_signpost_id_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_signpost_id_t v23 = 0;
        _os_log_impl(&dword_1B9C64000, v21, v22, "Error initially finding NSExtensions: Could not cast as [NSExtensionProtocol]? Assuming no results.", v23, 2u);
        MEMORY[0x1BA9E48C0](v23, -1, -1);
      }
    }
  }
  else
  {
    id v9 = v5;
    id v10 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    id v12 = v10;
    id v13 = v10;
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v14, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      v26[0] = v17;
      *(_DWORD *)id v16 = 136446210;
      swift_getErrorValue();
      uint64_t v18 = Error.localizedDescription.getter();
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v14, v15, "Error initially finding NSExtensions: %{public}s? Assuming no results.", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v17, -1, -1);
      MEMORY[0x1BA9E48C0](v16, -1, -1);
    }
    else
    {
    }
  }
  $defer #1 () in closure #2 in FlowExtensionObserver.begin()(v0[7], v0[8]);
  uint64_t v24 = (uint64_t (*)(void))v0[1];
  return v24();
}

uint64_t $defer #1 () in closure #2 in FlowExtensionObserver.begin()(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = a2;
  uint64_t v2 = type metadata accessor for OSSignpostError();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for OSSignpostID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  id v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  id v12 = &v20[-v11];
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v13, (uint64_t)static Signposter.executor);
  unint64_t v14 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  int v21 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    if ((*(unsigned int (**)(unsigned char *, uint64_t))(v3 + 88))(v5, v2) == *MEMORY[0x1E4FBD340])
    {
      os_log_type_t v15 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, v2);
      os_log_type_t v15 = "";
    }
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 16))(v10, v12, v6);
    id v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v16 = 0;
    os_signpost_id_t v17 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1B9C64000, v14, (os_signpost_type_t)v21, v17, "LoadAllFlowExtensions", v15, v16, 2u);
    MEMORY[0x1BA9E48C0](v16, -1, -1);

    uint64_t v18 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
    v18(v12, v6);
    v18(v10, v6);
  }
  else
  {

    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v12, v6);
  }
  *(void *)(v22 + 48) = 0;
  return swift_release();
}

Swift::Void __swiftcall FlowExtensionObserver.stop()()
{
  uint64_t v1 = v0 + 16;
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 16, (uint64_t)&v3, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (*((void *)&v4 + 1))
  {
    outlined init with take of Any(&v3, &v5);
    uint64_t v2 = self;
    __swift_project_boxed_opaque_existential_1(&v5, v6);
    objc_msgSend(v2, sel_endMatchingExtensions_, _bridgeAnythingToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v5);
    long long v3 = 0u;
    long long v4 = 0u;
    swift_beginAccess();
    outlined assign with take of Any?((uint64_t)&v3, v1);
    swift_endAccess();
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v3, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
}

uint64_t closure #1 in closure #1 in static FlowExtensionObserver.reduceSeenTopics(_:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = IntentTopic.cacheKey.getter();
  unint64_t v7 = v6;
  uint64_t v8 = *a2;
  if (!*(void *)(*a2 + 16))
  {
    uint64_t v30 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v7);
  if ((v10 & 1) == 0)
  {
    uint64_t v30 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  outlined init with copy of ReferenceResolutionClientProtocol(*(void *)(v8 + 56) + 40 * v9, (uint64_t)&v28);
  swift_bridgeObjectRelease();
  if (!*((void *)&v29 + 1))
  {
LABEL_10:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v28, &demangling cache variable for type metadata for NSExtensionProtocol?);
    outlined init with copy of ReferenceResolutionClientProtocol(a3, (uint64_t)v31);
    return specialized Dictionary.subscript.setter((uint64_t)v31, v5, v7);
  }
  outlined init with take of ReferenceResolutionClientProtocol(&v28, (uint64_t)v31);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v31, (uint64_t)&v28);
  outlined init with copy of ReferenceResolutionClientProtocol(a3, (uint64_t)v25);
  swift_bridgeObjectRetain();
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    uint64_t v32 = v24;
    *(_DWORD *)uint64_t v14 = 136315650;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 12) = 2080;
    uint64_t v16 = *((void *)&v29 + 1);
    uint64_t v15 = v30;
    __swift_project_boxed_opaque_existential_1(&v28, *((uint64_t *)&v29 + 1));
    uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v16, v15);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v28);
    *(_WORD *)(v14 + 22) = 2080;
    uint64_t v19 = v26;
    uint64_t v20 = v27;
    __swift_project_boxed_opaque_existential_1(v25, v26);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v19, v20);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
    _os_log_impl(&dword_1B9C64000, v12, v13, "Multiple extensions support topic %s, using %s and ignoring %s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v24, -1, -1);
    MEMORY[0x1BA9E48C0](v14, -1, -1);
  }
  else
  {

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v28);
    swift_bridgeObjectRelease_n();
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v31);
}

uint64_t FlowExtensionObserver.deinit()
{
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for Any?);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t FlowExtensionObserver.__deallocating_deinit()
{
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for Any?);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t NSExtension.identifierString.getter()
{
  id v1 = objc_msgSend(v0, sel_identifier);
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    return v3;
  }
  else
  {
    uint64_t result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000033, 0x80000001BA0695A0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/RemoteConversation/FlowExtension/FlowExtensionDiscovery.swift", 130, 2, 289);
    __break(1u);
  }
  return result;
}

id static NSExtension.findExtension(identifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v11[1] = *(id *)MEMORY[0x1E4F143B8];
  swift_bridgeObjectRetain();
  unint64_t v6 = (void *)MEMORY[0x1BA9E2DD0](a1, a2);
  swift_bridgeObjectRelease();
  v11[0] = 0;
  id v7 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_extensionWithIdentifier_error_, v6, v11);

  id v8 = v11[0];
  if (v7)
  {
    a3[3] = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSExtension);
    a3[4] = &protocol witness table for NSExtension;
    *a3 = v7;
    return v8;
  }
  else
  {
    id v10 = v11[0];
    _convertNSErrorToError(_:)();

    return (id)swift_willThrow();
  }
}

double NSExtension.extensionContextAsProtocol(for:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v6 - 8);
  id v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  id v12 = objc_msgSend(v3, sel__extensionContextForUUID_, isa);

  if (v12)
  {
    *(void *)(a2 + 24) = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSExtensionContext);
    *(void *)(a2 + 32) = &protocol witness table for NSExtensionContext;
    *(void *)a2 = v12;
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

unint64_t NSExtension.stringIndexedAttributes.getter()
{
  id v1 = objc_msgSend(v0, sel_attributes);
  if (!v1
    || (uint64_t v2 = v1,
        uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(),
        v2,
        unint64_t v4 = specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(v3),
        swift_bridgeObjectRelease(),
        !v4))
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
    id v6 = v0;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v20 = v10;
      *(_DWORD *)uint64_t v9 = 136315394;
      id v11 = v6;
      id v12 = objc_msgSend(v11, sel_description);
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v15 = v14;

      uint64_t v19 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2080;

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]?);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]?.Type);
      uint64_t v16 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v7, v8, "Extension %s has wrong type for attributes: %s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v10, -1, -1);
      MEMORY[0x1BA9E48C0](v9, -1, -1);
    }
    else
    {
    }
    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  }
  return v4;
}

unint64_t specialized _dictionaryDownCastConditional<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
  }
  uint64_t v23 = a1 + 64;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(a1 + 64);
  int64_t v22 = (unint64_t)(63 - v4) >> 6;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | (v7 << 6);
      int64_t v12 = v7;
    }
    else
    {
      int64_t v13 = v7 + 1;
      if (__OFADD__(v7, 1)) {
        goto LABEL_37;
      }
      if (v13 >= v22)
      {
LABEL_33:
        outlined consume of [Int : @Sendable ()].Iterator._Variant();
        return (unint64_t)v2;
      }
      unint64_t v14 = *(void *)(v23 + 8 * v13);
      int64_t v12 = v7 + 1;
      if (!v14)
      {
        int64_t v12 = v7 + 2;
        if (v7 + 2 >= v22) {
          goto LABEL_33;
        }
        unint64_t v14 = *(void *)(v23 + 8 * v12);
        if (!v14)
        {
          int64_t v12 = v7 + 3;
          if (v7 + 3 >= v22) {
            goto LABEL_33;
          }
          unint64_t v14 = *(void *)(v23 + 8 * v12);
          if (!v14)
          {
            int64_t v12 = v7 + 4;
            if (v7 + 4 >= v22) {
              goto LABEL_33;
            }
            unint64_t v14 = *(void *)(v23 + 8 * v12);
            if (!v14)
            {
              int64_t v15 = v7 + 5;
              if (v7 + 5 >= v22) {
                goto LABEL_33;
              }
              unint64_t v14 = *(void *)(v23 + 8 * v15);
              if (!v14)
              {
                while (1)
                {
                  int64_t v12 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    goto LABEL_38;
                  }
                  if (v12 >= v22) {
                    goto LABEL_33;
                  }
                  unint64_t v14 = *(void *)(v23 + 8 * v12);
                  ++v15;
                  if (v14) {
                    goto LABEL_26;
                  }
                }
              }
              int64_t v12 = v7 + 5;
            }
          }
        }
      }
LABEL_26:
      uint64_t v10 = (v14 - 1) & v14;
      unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
    }
    outlined init with copy of AnyHashable(*(void *)(a1 + 48) + 40 * v11, (uint64_t)v33);
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v11, (uint64_t)v34 + 8);
    v31[0] = v34[0];
    v31[1] = v34[1];
    uint64_t v32 = v35;
    v30[0] = v33[0];
    v30[1] = v33[1];
    outlined init with copy of AnyHashable((uint64_t)v30, (uint64_t)v25);
    if (!swift_dynamicCast())
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v30, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
      swift_bridgeObjectRelease();
      outlined consume of [Int : @Sendable ()].Iterator._Variant();
      swift_release();
      return 0;
    }
    outlined init with copy of Any((uint64_t)v31 + 8, (uint64_t)v25);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v30, &demangling cache variable for type metadata for (key: AnyHashable, value: Any));
    outlined init with take of Any(v25, v26);
    long long v27 = v24;
    outlined init with take of Any(v26, v28);
    long long v16 = v27;
    outlined init with take of Any(v28, v29);
    outlined init with take of Any(v29, &v27);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v16, *((uint64_t *)&v16 + 1));
    unint64_t v17 = result;
    if (v18)
    {
      os_log_type_t v8 = (_OWORD *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *os_log_type_t v8 = v16;
      uint64_t v9 = (_OWORD *)(v2[7] + 32 * v17);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v9);
      unint64_t result = (unint64_t)outlined init with take of Any(&v27, v9);
      goto LABEL_8;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_OWORD *)(v2[6] + 16 * result) = v16;
    unint64_t result = (unint64_t)outlined init with take of Any(&v27, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v19 = v2[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_36;
    }
    _OWORD v2[2] = v21;
LABEL_8:
    int64_t v7 = v12;
    unint64_t v5 = v10;
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t protocol witness for NSExtensionProtocol.identifierString.getter in conformance NSExtension()
{
  id v1 = objc_msgSend(*v0, sel_identifier);
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    return v3;
  }
  else
  {
    uint64_t result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000033, 0x80000001BA0695A0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/RemoteConversation/FlowExtension/FlowExtensionDiscovery.swift", 130, 2, 289);
    __break(1u);
  }
  return result;
}

unint64_t protocol witness for NSExtensionProtocol.stringIndexedAttributes.getter in conformance NSExtension()
{
  return NSExtension.stringIndexedAttributes.getter();
}

id protocol witness for NSExtensionProtocol.beginRequest(options:inputItems:) in conformance NSExtension(uint64_t a1, uint64_t a2)
{
  return @nonobjc NSExtension.beginRequest(options:inputItems:)(a1, a2);
}

id @nonobjc NSExtension.beginRequest(options:inputItems:)(uint64_t a1, uint64_t a2)
{
  v9[1] = *(id *)MEMORY[0x1E4F143B8];
  if (a2) {
    v4.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else {
    v4.super.Class isa = 0;
  }
  v9[0] = 0;
  id v5 = objc_msgSend(v2, sel_beginExtensionRequestWithOptions_inputItems_error_, a1, v4.super.isa, v9);

  if (v5)
  {
    id v6 = v9[0];
  }
  else
  {
    id v7 = v9[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v5;
}

double protocol witness for NSExtensionProtocol.extensionContextAsProtocol(for:) in conformance NSExtension@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return NSExtension.extensionContextAsProtocol(for:)(a1, a2);
}

id protocol witness for NSExtensionProtocol._kill(_:) in conformance NSExtension(uint64_t a1)
{
  return objc_msgSend(*v1, sel__kill_, a1);
}

id protocol witness for NSExtensionContextProtocol._auxiliaryConnection.getter in conformance NSExtensionContext()
{
  id v1 = objc_msgSend(*v0, sel__auxiliaryConnection);

  return v1;
}

uint64_t sub_1B9F06408()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for implicit closure #1 in FlowExtensionDiscoverer.findFlowExtension(topic:onConnectionInterrupted:)()
{
  return implicit closure #1 in FlowExtensionDiscoverer.findFlowExtension(topic:onConnectionInterrupted:)((void *)(v0 + 16));
}

uint64_t specialized static FlowExtensionObserver.reduceSeenExtensions(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSExtensionProtocol);
  uint64_t v3 = (void *)Dictionary.init(minimumCapacity:)();
  if (!v2) {
    return (uint64_t)v3;
  }
  uint64_t v4 = a1 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol(v4, (uint64_t)v26);
    uint64_t v6 = v27;
    uint64_t v7 = v28;
    __swift_project_boxed_opaque_existential_1(v26, v27);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    uint64_t v10 = v9;
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v26, (uint64_t)v25);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v10);
    uint64_t v14 = v3[2];
    BOOL v15 = (v12 & 1) == 0;
    uint64_t v16 = v14 + v15;
    if (__OFADD__(v14, v15)) {
      break;
    }
    char v17 = v12;
    if (v3[3] >= v16)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v12) {
          goto LABEL_3;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v17) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, isUniquelyReferenced_nonNull_native);
      unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v10);
      if ((v17 & 1) != (v19 & 1)) {
        goto LABEL_20;
      }
      unint64_t v13 = v18;
      if (v17)
      {
LABEL_3:
        uint64_t v5 = v3[7] + 40 * v13;
        __swift_destroy_boxed_opaque_existential_1Tm(v5);
        outlined init with take of ReferenceResolutionClientProtocol(v25, v5);
        goto LABEL_4;
      }
    }
    v3[(v13 >> 6) + 8] |= 1 << v13;
    BOOL v20 = (uint64_t *)(v3[6] + 16 * v13);
    *BOOL v20 = v8;
    v20[1] = v10;
    outlined init with take of ReferenceResolutionClientProtocol(v25, v3[7] + 40 * v13);
    uint64_t v21 = v3[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_19;
    }
    long long v3[2] = v23;
    swift_bridgeObjectRetain();
LABEL_4:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
    v4 += 40;
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v3;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized static FlowExtensionObserver.reduceSeenTopics(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IntentTopic();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSExtensionProtocol);
  uint64_t result = Dictionary.init(minimumCapacity:)();
  uint64_t v26 = result;
  uint64_t v21 = v6;
  if (v6)
  {
    uint64_t v19 = v3;
    uint64_t v20 = a1 + 32;
    uint64_t v8 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v18 = a1;
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    do
    {
      outlined init with copy of ReferenceResolutionClientProtocol(v20 + 40 * v9, (uint64_t)v23);
      uint64_t v10 = v24;
      uint64_t v11 = v25;
      __swift_project_boxed_opaque_existential_1(v23, v24);
      (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v10, v11);
      uint64_t v12 = static IntentTopic.makeFromBundleInfoPlist(dictionary:)();
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(v12 + 16);
      if (v13)
      {
        unint64_t v14 = v12 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
        uint64_t v15 = *(void *)(v19 + 72);
        uint64_t v16 = v12;
        char v17 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
        uint64_t v22 = v16;
        swift_bridgeObjectRetain();
        do
        {
          v17(v5, v14, v2);
          closure #1 in closure #1 in static FlowExtensionObserver.reduceSeenTopics(_:)((uint64_t)v5, &v26, (uint64_t)v23);
          (*v8)(v5, v2);
          v14 += v15;
          --v13;
        }
        while (v13);
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      ++v9;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
    }
    while (v9 != v21);
    swift_bridgeObjectRelease();
    return v26;
  }
  return result;
}

uint64_t outlined assign with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for FlowExtensionDiscoverer()
{
  return self;
}

uint64_t method lookup function for FlowExtensionDiscoverer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for FlowExtensionDiscoverer);
}

uint64_t dispatch thunk of FlowExtensionDiscoverer.__allocating_init(observer:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t type metadata accessor for FlowExtensionObserver()
{
  return self;
}

uint64_t method lookup function for FlowExtensionObserver(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for FlowExtensionObserver);
}

uint64_t dispatch thunk of FlowExtensionObserver.__allocating_init(forceKnownExtensions:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of NSExtensionProtocol.identifierString.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of NSExtensionProtocol.stringIndexedAttributes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of NSExtensionProtocol.beginRequest(options:inputItems:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of NSExtensionProtocol.extensionContextAsProtocol(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of NSExtensionProtocol._kill(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of NSExtensionContextProtocol._auxiliaryConnection.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

unint64_t lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor()
{
  unint64_t result = lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor;
  if (!lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor)
  {
    type metadata accessor for ConversationActor();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationActor and conformance ConversationActor);
  }
  return result;
}

uint64_t sub_1B9F06AE0()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in closure #1 in variable initialization expression of kSharedFlowExtensionObserver(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in variable initialization expression of kSharedFlowExtensionObserver(a1, v4, v5, v6);
}

void partial apply for closure #1 in FlowExtensionObserver.begin()(uint64_t a1, void *a2)
{
  closure #1 in FlowExtensionObserver.begin()(a1, a2, v2);
}

uint64_t sub_1B9F06BDC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #2 in FlowExtensionObserver.begin()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #2 in FlowExtensionObserver.begin()(a1, v4, v5, v6, v7);
}

uint64_t sub_1B9F06CEC()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #1 in closure #1 in FlowExtensionObserver.begin()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in FlowExtensionObserver.begin()(a1, v4, v5, v6, v7, v8);
}

id static FlowExtensionSubsystem.initForPlugInKit()()
{
  objc_msgSend(self, sel__startListening);
  id v0 = objc_allocWithZone((Class)type metadata accessor for FlowExtensionSubsystem());

  return objc_msgSend(v0, sel_init);
}

id FlowExtensionSubsystem.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

uint64_t type metadata accessor for FlowExtensionSubsystem()
{
  return self;
}

id FlowExtensionSubsystem.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FlowExtensionSubsystem();
  return objc_msgSendSuper2(&v2, sel_init);
}

id FlowExtensionSubsystem.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FlowExtensionSubsystem();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t FlowPluginInfo.__allocating_init(pluginBundle:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v65 = type metadata accessor for IntentTopic.IntentTopicType();
  uint64_t v4 = *(void *)(v65 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v65);
  id v68 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v67 = (char *)&v50 - v7;
  uint64_t v66 = type metadata accessor for IntentTopic();
  uint64_t v69 = *(void *)(v66 - 8);
  MEMORY[0x1F4188790](v66);
  char v64 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for HandcraftedPluginManifestEntry?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  unint64_t v56 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v54 = (char *)&v50 - v12;
  uint64_t v55 = type metadata accessor for HandcraftedPluginManifestEntry();
  uint64_t v58 = *(void *)(v55 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v55);
  uint64_t v53 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  char v52 = (char *)&v50 - v15;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a1, (uint64_t)v72);
  char v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v57 = v1;
  if (v19)
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v71 = v21;
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v63 = (void (*)(char *, unint64_t, uint64_t))(v20 + 4);
    __swift_project_boxed_opaque_existential_1(v72, v72[3]);
    uint64_t v22 = dispatch thunk of FlowPluginBundle.bundlePath.getter();
    uint64_t v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v72);
    _os_log_impl(&dword_1B9C64000, v17, v18, "[UserSessionIdentityOverride] Initializing FlowPluginBundle with %s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v21, -1, -1);
    uint64_t v2 = v57;
    MEMORY[0x1BA9E48C0](v20, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v72);
  }

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v24 = dispatch thunk of FlowPluginBundle.supportedTopics.getter();
  uint64_t v25 = *(void *)(v24 + 16);
  if (v25)
  {
    int v51 = a1;
    uint64_t v63 = *(void (**)(char *, unint64_t, uint64_t))(v69 + 16);
    unint64_t v26 = (*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80);
    uint64_t v50 = v24;
    unint64_t v27 = v24 + v26;
    unsigned int v62 = *MEMORY[0x1E4FA1A98];
    uint64_t v28 = (void (**)(char *, uint64_t))(v4 + 8);
    char v60 = (void (**)(char *, uint64_t))(v69 + 8);
    uint64_t v61 = (void (**)(char *, void, uint64_t))(v4 + 104);
    v69 += 16;
    uint64_t v59 = *(void *)(v69 + 56);
    long long v29 = v64;
    uint64_t v30 = v66;
    uint64_t v31 = v67;
    uint64_t v32 = v68;
    while (1)
    {
      v63(v29, v27, v30);
      IntentTopic.type.getter();
      uint64_t v33 = v65;
      (*v61)(v32, v62, v65);
      lazy protocol witness table accessor for type IntentTopic.IntentTopicType and conformance IntentTopic.IntentTopicType(&lazy protocol witness table cache variable for type IntentTopic.IntentTopicType and conformance IntentTopic.IntentTopicType, MEMORY[0x1E4FA1AA0]);
      char v34 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v35 = *v28;
      (*v28)(v32, v33);
      v35(v31, v33);
      (*v60)(v29, v30);
      if (v34) {
        break;
      }
      v27 += v59;
      if (!--v25)
      {
        swift_bridgeObjectRelease();
        uint64_t v36 = 0;
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v36 = 1;
LABEL_13:
    a1 = v51;
    uint64_t v2 = v57;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v36 = 0;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of FlowPluginBundle.bundlePath.getter();
  uint64_t v37 = (uint64_t)v54;
  static HandcraftedPluginManifestEntry.fromPluginBundleIdOrPath(_:)();
  swift_bridgeObjectRelease();
  uint64_t v38 = v58;
  os_log_type_t v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
  uint64_t v40 = v55;
  if (v39(v37, 1, v55) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v37, (uint64_t *)&demangling cache variable for type metadata for HandcraftedPluginManifestEntry?);
    char v41 = 1;
  }
  else
  {
    int v42 = v52;
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v52, v37, v40);
    char v41 = HandcraftedPluginManifestEntry.isPersonalDomain.getter();
    (*(void (**)(char *, uint64_t))(v38 + 8))(v42, v40);
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of FlowPluginBundle.bundlePath.getter();
  uint64_t v43 = (uint64_t)v56;
  static HandcraftedPluginManifestEntry.fromPluginBundleIdOrPath(_:)();
  swift_bridgeObjectRelease();
  if (v39(v43, 1, v40) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v43, (uint64_t *)&demangling cache variable for type metadata for HandcraftedPluginManifestEntry?);
    uint64_t v44 = 0;
  }
  else
  {
    uint64_t v45 = v58;
    uint64_t v46 = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v53, v43, v40);
    uint64_t v44 = HandcraftedPluginManifestEntry.sensitivityPolicy.getter();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v40);
  }
  char v47 = specialized static FlowPluginInfo.isEmergencyRequest(bundle:)(a1);
  uint64_t v48 = (*(uint64_t (**)(uint64_t, void, uint64_t, void, void))(v2 + 112))(v36, v41 & 1, v44, 0, v47 & 1);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return v48;
}

uint64_t static FlowPluginInfo.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t FlowPluginInfo.supportsOnDeviceNL.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_supportsOnDeviceNL);
}

uint64_t FlowPluginInfo.isPersonalRequest.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_isPersonalRequest);
}

uint64_t FlowPluginInfo.sensitivityPolicy.getter()
{
  return *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_sensitivityPolicy);
}

uint64_t FlowPluginInfo.isEmergencyRequest.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_isEmergencyRequest);
}

id FlowPluginInfo.__allocating_init(supportsOnDeviceNL:isPersonalRequest:sensitivityPolicy:isEmergencyRequest:)(char a1, char a2, uint64_t a3, char a4, char a5)
{
  char v10 = a4 & 1;
  id v11 = objc_allocWithZone(v5);
  return FlowPluginInfo.init(supportsOnDeviceNL:isPersonalRequest:sensitivityPolicy:isEmergencyRequest:)(a1, a2, a3, v10, a5);
}

id FlowPluginInfo.init(supportsOnDeviceNL:isPersonalRequest:sensitivityPolicy:isEmergencyRequest:)(char a1, char a2, uint64_t a3, char a4, char a5)
{
  v5[OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_supportsOnDeviceNL] = a1;
  v5[OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_isPersonalRequest] = (a2 == 2) | a2 & 1;
  if (a4) {
    a3 = 0;
  }
  *(void *)&v5[OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_sensitivityPolicy] = a3;
  v5[OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_isEmergencyRequest] = a5 & 1;
  v8.receiver = v5;
  v8.super_class = (Class)type metadata accessor for FlowPluginInfo();
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t FlowPluginInfo.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return FlowPluginInfo.init(coder:)(a1);
}

Swift::Void __swiftcall FlowPluginInfo.encode(with:)(NSCoder with)
{
  uint64_t v3 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_supportsOnDeviceNL);
  uint64_t v4 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000013, 0x80000001BA069880);
  [(objc_class *)with.super.isa encodeBool:v3 forKey:v4];

  uint64_t v5 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_isPersonalRequest);
  uint64_t v6 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000011, 0x80000001BA0698A0);
  [(objc_class *)with.super.isa encodeBool:v5 forKey:v6];

  uint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_sensitivityPolicy);
  id v8 = (id)MEMORY[0x1BA9E2DD0](0xD000000000000011, 0x80000001BA0698C0);
  [(objc_class *)with.super.isa encodeInteger:v7 forKey:v8];
}

id FlowPluginInfo.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void FlowPluginInfo.init()()
{
}

id FlowPluginInfo.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FlowPluginInfo();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized static FlowPluginInfo.isEmergencyRequest(bundle:)(void *a1)
{
  uint64_t v2 = type metadata accessor for HandcraftedPluginManifestEntry();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HandcraftedPluginManifestEntry?, HandcraftedPluginManifestEntry?));
  uint64_t v7 = v6 - 8;
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for HandcraftedPluginManifestEntry?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v26 = (uint64_t)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v25 - v14;
  MEMORY[0x1F4188790](v13);
  char v17 = (char *)&v25 - v16;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of FlowPluginBundle.bundlePath.getter();
  static HandcraftedPluginManifestEntry.fromPluginBundleIdOrPath(_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v15, *MEMORY[0x1E4FA1E70], v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v15, 0, 1, v2);
  uint64_t v18 = (uint64_t)&v9[*(int *)(v7 + 56)];
  outlined init with copy of HandcraftedPluginManifestEntry?((uint64_t)v17, (uint64_t)v9);
  outlined init with copy of HandcraftedPluginManifestEntry?((uint64_t)v15, v18);
  BOOL v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v19((uint64_t)v9, 1, v2) == 1)
  {
    uint64_t v20 = (uint64_t *)&demangling cache variable for type metadata for HandcraftedPluginManifestEntry?;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for HandcraftedPluginManifestEntry?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for HandcraftedPluginManifestEntry?);
    if (v19(v18, 1, v2) == 1)
    {
      char v21 = -1;
    }
    else
    {
      uint64_t v20 = &demangling cache variable for type metadata for (HandcraftedPluginManifestEntry?, HandcraftedPluginManifestEntry?);
      char v21 = 0;
    }
  }
  else
  {
    uint64_t v22 = v26;
    outlined init with copy of HandcraftedPluginManifestEntry?((uint64_t)v9, v26);
    if (v19(v18, 1, v2) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for HandcraftedPluginManifestEntry?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for HandcraftedPluginManifestEntry?);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v22, v2);
      char v21 = 0;
      uint64_t v20 = &demangling cache variable for type metadata for (HandcraftedPluginManifestEntry?, HandcraftedPluginManifestEntry?);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v5, v18, v2);
      lazy protocol witness table accessor for type IntentTopic.IntentTopicType and conformance IntentTopic.IntentTopicType(lazy protocol witness table cache variable for type HandcraftedPluginManifestEntry and conformance HandcraftedPluginManifestEntry, MEMORY[0x1E4FA1E78]);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v23 = *(void (**)(char *, uint64_t))(v3 + 8);
      v23(v5, v2);
      uint64_t v20 = (uint64_t *)&demangling cache variable for type metadata for HandcraftedPluginManifestEntry?;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for HandcraftedPluginManifestEntry?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for HandcraftedPluginManifestEntry?);
      v23((char *)v22, v2);
    }
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, v20);
  return v21 & 1;
}

uint64_t method lookup function for FlowPluginInfo(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for FlowPluginInfo);
}

uint64_t dispatch thunk of FlowPluginInfo.__allocating_init(supportsOnDeviceNL:isPersonalRequest:sensitivityPolicy:isEmergencyRequest:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v4 + 112))(a1, a2, a3, a4 & 1);
}

uint64_t dispatch thunk of FlowPluginInfo.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of FlowPluginInfo.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t outlined init with copy of HandcraftedPluginManifestEntry?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for HandcraftedPluginManifestEntry?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type IntentTopic.IntentTopicType and conformance IntentTopic.IntentTopicType(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *GenericContextTransformer.sharedInstance.unsafeMutableAddressor()
{
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }
  return &static GenericContextTransformer.sharedInstance;
}

id one-time initialization function for sharedInstance()
{
  id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for GenericContextTransformer()), sel_init);
  static GenericContextTransformer.sharedInstance = (uint64_t)result;
  return result;
}

id static GenericContextTransformer.sharedInstance.getter()
{
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static GenericContextTransformer.sharedInstance;

  return v0;
}

uint64_t GenericContextTransformer.getRedactedContext(for:metadata:privacyPolicy:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

id GenericContextTransformer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GenericContextTransformer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for GenericContextTransformer()
{
  return self;
}

uint64_t method lookup function for GenericContextTransformer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for GenericContextTransformer);
}

uint64_t dispatch thunk of GenericContextTransformer.getRedactedContext(for:metadata:privacyPolicy:completion:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x50))();
}

const char *HALFeatureFlags.domain.getter()
{
  return "Siri";
}

const char *HALFeatureFlags.feature.getter()
{
  return "cross_device_voice_follow_up";
}

uint64_t static HALFeatureFlags.== infix(_:_:)()
{
  return 1;
}

void HALFeatureFlags.hash(into:)()
{
}

Swift::Int HALFeatureFlags.hashValue.getter()
{
  return Hasher._finalize()();
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance HALFeatureFlags()
{
  return "cross_device_voice_follow_up";
}

unsigned char *storeEnumTagSinglePayload for HALFeatureFlags(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *id result = a2;
        return result;
      case 2:
        *(_WORD *)id result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)id result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *id result = 0;
      break;
    case 2:
      *(_WORD *)id result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B9F0845CLL);
    case 4:
      *(_DWORD *)id result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for HALFeatureFlags()
{
  return &type metadata for HALFeatureFlags;
}

uint64_t one-time initialization function for phoneCallStateQueryTimeoutInMillis()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  __swift_allocate_value_buffer(v0, static HALUtils.phoneCallStateQueryTimeoutInMillis);
  *(void *)__swift_project_value_buffer(v0, (uint64_t)static HALUtils.phoneCallStateQueryTimeoutInMillis) = 50;
  id v1 = *(uint64_t (**)(void))(*(void *)(v0 - 8) + 104);

  return v1();
}

uint64_t HALUtils.phoneCallStateQueryTimeoutInMillis.unsafeMutableAddressor()
{
  if (one-time initialization token for phoneCallStateQueryTimeoutInMillis != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();

  return __swift_project_value_buffer(v0, (uint64_t)static HALUtils.phoneCallStateQueryTimeoutInMillis);
}

uint64_t static HALUtils.phoneCallStateQueryTimeoutInMillis.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for phoneCallStateQueryTimeoutInMillis != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static HALUtils.phoneCallStateQueryTimeoutInMillis);
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

ValueMetadata *type metadata accessor for HALUtils()
{
  return &type metadata for HALUtils;
}

uint64_t sub_1B9F08648()
{
  uint64_t v1 = type metadata accessor for OSSignpostID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, v6 + 16, v5);
}

uint64_t sub_1B9F0870C()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

uint64_t sub_1B9F0871C()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t HangUpOverride.__allocating_init(topRankedParse:bridge:isSpeechRequest:isNlEmpty:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t v10 = swift_allocObject();
  HangUpOverride.init(topRankedParse:bridge:isSpeechRequest:isNlEmpty:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t HangUpOverride.overrideType.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 16) = v2;
  return result;
}

uint64_t (*HangUpOverride.overrideType.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t HangUpOverride.topRankedParse.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_topRankedParse, a1, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
}

uint64_t HangUpOverride.bridge.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t HangUpOverride.isSpeechRequest.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isSpeechRequest);
}

uint64_t HangUpOverride.isNlEmpty.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isNlEmpty);
}

uint64_t HangUpOverride.isBlushingPhantomEnabled.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isBlushingPhantomEnabled);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*HangUpOverride.isBlushingPhantomEnabled.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t HangUpOverride.isQuickStopCallBellEnabled.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isQuickStopCallBellEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t HangUpOverride.isQuickStopCallBellEnabled.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isQuickStopCallBellEnabled);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*HangUpOverride.isQuickStopCallBellEnabled.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t HangUpOverride.isCancelCallBellEnabled.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isCancelCallBellEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t HangUpOverride.isCancelCallBellEnabled.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isCancelCallBellEnabled);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*HangUpOverride.isCancelCallBellEnabled.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t HangUpOverride.isActiveDropInCall.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isActiveDropInCall);
  swift_beginAccess();
  return *v1;
}

uint64_t HangUpOverride.isActiveDropInCall.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isActiveDropInCall);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*HangUpOverride.isActiveDropInCall.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t HangUpOverride.init(topRankedParse:bridge:isSpeechRequest:isNlEmpty:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t v6 = v5;
  *(unsigned char *)(v6 + 16) = 0;
  *(unsigned char *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isBlushingPhantomEnabled) = AFSupportsSiriInCall();
  uint64_t v12 = (void *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_bridge);
  *uint64_t v12 = a2;
  v12[1] = a3;
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, v6 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_topRankedParse, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  *(unsigned char *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isSpeechRequest) = a4;
  *(unsigned char *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isNlEmpty) = a5;
  uint64_t v13 = one-time initialization token for forceEnabled;
  swift_unknownObjectRetain();
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v14 = swift_beginAccess();
  uint64_t v15 = static SiriPlaybackControlFeature.forceEnabled;
  if (*(void *)(static SiriPlaybackControlFeature.forceEnabled + 16)
    && (uint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v14), (v17 & 1) != 0))
  {
    char v18 = *(unsigned char *)(*(void *)(v15 + 56) + v16);
  }
  else
  {
    uint64_t v26 = &type metadata for SiriPlaybackControlFeature;
    unint64_t v27 = lazy protocol witness table accessor for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature();
    char v18 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
  }
  *(unsigned char *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isQuickStopCallBellEnabled) = v18 & 1;
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  uint64_t v19 = swift_beginAccess();
  uint64_t v20 = static SiriPhoneFeature.forceEnabled;
  if (*(void *)(static SiriPhoneFeature.forceEnabled + 16)
    && (uint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v19), (v22 & 1) != 0))
  {
    char v23 = *(unsigned char *)(*(void *)(v20 + 56) + v21);
  }
  else
  {
    uint64_t v26 = &type metadata for SiriPhoneFeature;
    unint64_t v27 = lazy protocol witness table accessor for type SiriPhoneFeature and conformance SiriPhoneFeature();
    char v23 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
  }
  swift_unknownObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  *(unsigned char *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isCancelCallBellEnabled) = v23 & 1;
  *(unsigned char *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isActiveDropInCall) = 0;
  return v6;
}

uint64_t HangUpOverride.isValidActivePhoneCallRequest()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UsoIdentifier();
  uint64_t v71 = *(void *)(v2 - 8);
  uint64_t v72 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v73 = v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  char v74 = (char *)v68 - v16;
  outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_topRankedParse, (uint64_t)v7, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  uint64_t v17 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v7, 1, v17) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
LABEL_7:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.executor);
    char v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_1B9C64000, v22, v23, "[ExecutionOverride] Unable to retrieve UserDialogAct from parse. Cannot determine request type; presuming reques"
        "t is not valid active phone call request.",
        v24,
        2u);
      MEMORY[0x1BA9E48C0](v24, -1, -1);
    }

    return 0;
  }
  uint64_t v19 = MEMORY[0x1BA9DE000]();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v17);
  if (*(void *)(v19 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v10, v19 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)), v11);
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v20 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, v20, 1, v11);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1) {
    goto LABEL_7;
  }
  uint64_t v25 = v74;
  uint64_t v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(v74, v10, v11);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 224))(v26) & 1) == 0)
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v25, v11);
    goto LABEL_20;
  }
  char v27 = (*(uint64_t (**)(void))(*(void *)v1 + 248))();
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v25, v11);
  if ((v27 & 1) == 0)
  {
LABEL_20:
    long long v29 = *(void (**)(char *, uint64_t))(v12 + 8);
    v29(v15, v11);
    goto LABEL_21;
  }
  char v28 = Siri_Nlu_External_UserDialogAct.hasCancelled.getter();
  long long v29 = *(void (**)(char *, uint64_t))(v12 + 8);
  v29(v15, v11);
  if (v28)
  {
    if (one-time initialization token for executor == -1)
    {
LABEL_16:
      uint64_t v30 = type metadata accessor for Logger();
      __swift_project_value_buffer(v30, (uint64_t)static Logger.executor);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v33 = 0;
        _os_log_impl(&dword_1B9C64000, v31, v32, "[ExecutionOverride] [HangUpOverride]: userDialogAct:UserCancelled: Conditions met to end the call. Return .accept.", v33, 2u);
        MEMORY[0x1BA9E48C0](v33, -1, -1);
      }

      v29(v25, v11);
      return 1;
    }
LABEL_76:
    swift_once();
    goto LABEL_16;
  }
LABEL_21:
  unint64_t v35 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  unint64_t v41 = v35;
  if (!(v35 >> 62))
  {
    if (*(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_32;
    }
LABEL_73:
    swift_bridgeObjectRelease();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.executor);
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      os_log_type_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v39 = 0;
      _os_log_impl(&dword_1B9C64000, v37, v38, "[ExecutionOverride] UserDialog was not of type UsoTask. Cannot determine request type; presuming request is not "
        "valid active phone call request.",
        v39,
        2u);
      MEMORY[0x1BA9E48C0](v39, -1, -1);
    }
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v67) {
    goto LABEL_73;
  }
LABEL_32:
  if ((v41 & 0xC000000000000001) != 0)
  {
    uint64_t v42 = MEMORY[0x1BA9E3990](0, v41);
  }
  else
  {
    if (!*(void *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_76;
    }
    uint64_t v42 = *(void *)(v41 + 32);
    swift_retain();
  }
  uint64_t v43 = swift_bridgeObjectRelease();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 200))(v43) & 1) != 0
    && ((*(uint64_t (**)(void))(*(void *)v1 + 248))() & 1) != 0
    && (specialized HangUpOverride.isQuickStopTask(task:)() & 1) != 0)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Logger.executor);
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v45, v46))
    {
      char v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v47 = 0;
      _os_log_impl(&dword_1B9C64000, v45, v46, "[ExecutionOverride] [HangUpOverride]: Conditions met to quick stop dropIn call. Return .accept.", v47, 2u);
      MEMORY[0x1BA9E48C0](v47, -1, -1);
    }
    swift_release();

    goto LABEL_46;
  }
  swift_retain();
  static UsoTask_CodegenConverter.convert(task:)();
  swift_release();
  if (!v77)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v76, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v48 = type metadata accessor for Logger();
    __swift_project_value_buffer(v48, (uint64_t)static Logger.executor);
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl(&dword_1B9C64000, v37, v49, "[ExecutionOverride] Unable to initialize UsoTask. Cannot determine request type; presuming request is not valid "
        "active phone call request.",
        v50,
        2u);
      MEMORY[0x1BA9E48C0](v50, -1, -1);
    }
    swift_release();
LABEL_26:

LABEL_27:
    v29(v25, v11);
    return 0;
  }
  outlined init with take of Any(&v76, v78);
  outlined init with copy of Any((uint64_t)v78, (uint64_t)&v76);
  type metadata accessor for UsoTask_hangup_common_PhoneCall();
  if (swift_dynamicCast())
  {
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v78);
LABEL_46:
    v29(v25, v11);
    return 1;
  }
  outlined init with copy of Any((uint64_t)v78, (uint64_t)&v76);
  type metadata accessor for UsoTask_action_common_SocialConversation();
  if (!swift_dynamicCast())
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v78);
    goto LABEL_27;
  }
  uint64_t v51 = v75;
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_Target.target.getter();
  swift_release();
  if (!(void)v76)
  {
    uint64_t v54 = v72;
LABEL_58:
    swift_bridgeObjectRelease();
    uint64_t v53 = MEMORY[0x1E4FBC860];
    goto LABEL_59;
  }
  uint64_t v52 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  swift_release();
  uint64_t v53 = v52;
  uint64_t v54 = v72;
  if (!v52) {
    goto LABEL_58;
  }
LABEL_59:
  uint64_t v70 = v42;
  uint64_t v55 = *(void *)(v53 + 16);
  if (v55)
  {
    v68[1] = v51;
    uint64_t v69 = v29;
    unint64_t v56 = *(void (**)(char *, unint64_t, uint64_t))(v71 + 16);
    unint64_t v57 = v53 + ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80));
    uint64_t v58 = (void (**)(char *, uint64_t))(v71 + 8);
    uint64_t v59 = *(void *)(v71 + 72);
    uint64_t v71 = v53;
    swift_bridgeObjectRetain();
    while (1)
    {
      v56(v4, v57, v54);
      char v60 = closure #1 in HangUpOverride.isValidActivePhoneCallRequest()((uint64_t)v4);
      uint64_t v61 = v54;
      char v62 = v60;
      (*v58)(v4, v61);
      if (v62) {
        break;
      }
      v57 += v59;
      --v55;
      uint64_t v54 = v72;
      if (!v55)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v34 = 0;
        goto LABEL_66;
      }
    }
    swift_bridgeObjectRelease_n();
    uint64_t v34 = 1;
LABEL_66:
    uint64_t v25 = v74;
    long long v29 = v69;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v34 = 0;
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v63 = type metadata accessor for Logger();
  __swift_project_value_buffer(v63, (uint64_t)static Logger.executor);
  char v64 = Logger.logObject.getter();
  os_log_type_t v65 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v64, v65))
  {
    uint64_t v66 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v66 = 67109120;
    LODWORD(v76) = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v64, v65, "[ExecutionOverride] [HangUpOverride] Received canned UsoTask, isVoiceTrigger = %{BOOL}d", v66, 8u);
    MEMORY[0x1BA9E48C0](v66, -1, -1);
  }
  swift_release();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v78);
  v29(v25, v11);
  return v34;
}

uint64_t closure #1 in HangUpOverride.isValidActivePhoneCallRequest()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IdentifierNamespace();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v57 = v2;
  uint64_t v58 = v3;
  MEMORY[0x1F4188790](v2);
  uint64_t v54 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (IdentifierNamespace?, IdentifierNamespace?));
  MEMORY[0x1F4188790](v56);
  uint64_t v59 = (uint64_t)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifierNamespace?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v55 = (uint64_t)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v61 = (uint64_t)&v51 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v62 = (uint64_t)&v51 - v11;
  uint64_t v12 = type metadata accessor for UsoIdentifier();
  uint64_t v64 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  char v60 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v51 - v15;
  uint64_t v17 = type metadata accessor for IdentifierAppBundle();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  os_log_type_t v23 = (char *)&v51 - v22;
  UsoIdentifier.appBundleSemantic.getter();
  (*(void (**)(char *, void, uint64_t))(v18 + 104))(v21, *MEMORY[0x1E4FA3030], v17);
  char v24 = MEMORY[0x1BA9DE8E0](v23, v21);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v26 = v21;
  uint64_t v27 = v64;
  v25(v26, v17);
  v25(v23, v17);
  char v28 = *(void (**)(char *))(v27 + 16);
  uint64_t v63 = a1;
  v28(v16);
  if ((v24 & 1) == 0)
  {
    os_log_type_t v38 = *(void (**)(char *, uint64_t))(v27 + 8);
    v38(v16, v12);
    os_log_type_t v39 = v60;
LABEL_9:
    ((void (*)(char *, uint64_t, uint64_t))v28)(v39, v63, v12);
    goto LABEL_10;
  }
  uint64_t v52 = (void (*)(char *, uint64_t, uint64_t))v28;
  uint64_t v29 = v62;
  UsoIdentifier.namespaceSemantic.getter();
  uint64_t v30 = *MEMORY[0x1E4FA3050];
  uint64_t v31 = v57;
  uint64_t v32 = v58;
  uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 104);
  uint64_t v34 = v61;
  uint64_t v53 = v16;
  v33(v61, v30, v57);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56))(v34, 0, 1, v31);
  uint64_t v35 = v59;
  uint64_t v36 = v59 + *(int *)(v56 + 48);
  outlined init with copy of ReferenceResolutionClientProtocol?(v29, v59, &demangling cache variable for type metadata for IdentifierNamespace?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v34, v36, &demangling cache variable for type metadata for IdentifierNamespace?);
  uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
  if (v37(v35, 1, v31) != 1)
  {
    uint64_t v40 = v55;
    outlined init with copy of ReferenceResolutionClientProtocol?(v35, v55, &demangling cache variable for type metadata for IdentifierNamespace?);
    int v41 = v37(v36, 1, v31);
    uint64_t v42 = (void (**)(uint64_t, uint64_t))(v58 + 8);
    if (v41 != 1)
    {
      uint64_t v46 = v58 + 32;
      char v47 = v54;
      (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v54, v36, v31);
      lazy protocol witness table accessor for type IdentifierNamespace and conformance IdentifierNamespace(&lazy protocol witness table cache variable for type IdentifierNamespace and conformance IdentifierNamespace, MEMORY[0x1E4FA3078]);
      LODWORD(v56) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v58 = v12;
      uint64_t v48 = *(void (**)(char *, uint64_t))(v46 - 24);
      v48(v47, v31);
      outlined destroy of ReferenceResolutionClientProtocol?(v61, &demangling cache variable for type metadata for IdentifierNamespace?);
      outlined destroy of ReferenceResolutionClientProtocol?(v62, &demangling cache variable for type metadata for IdentifierNamespace?);
      uint64_t v49 = v40;
      os_log_type_t v38 = *(void (**)(char *, uint64_t))(v64 + 8);
      v38(v53, v58);
      v48((char *)v49, v31);
      outlined destroy of ReferenceResolutionClientProtocol?(v35, &demangling cache variable for type metadata for IdentifierNamespace?);
      os_log_type_t v39 = v60;
      uint64_t v12 = v58;
      v52(v60, v63, v58);
      if (v56) {
        goto LABEL_13;
      }
LABEL_10:
      char v44 = 0;
      goto LABEL_11;
    }
    outlined destroy of ReferenceResolutionClientProtocol?(v61, &demangling cache variable for type metadata for IdentifierNamespace?);
    outlined destroy of ReferenceResolutionClientProtocol?(v62, &demangling cache variable for type metadata for IdentifierNamespace?);
    uint64_t v43 = v40;
    os_log_type_t v38 = *(void (**)(char *, uint64_t))(v64 + 8);
    v38(v53, v12);
    (*v42)(v43, v31);
    goto LABEL_8;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v61, &demangling cache variable for type metadata for IdentifierNamespace?);
  outlined destroy of ReferenceResolutionClientProtocol?(v62, &demangling cache variable for type metadata for IdentifierNamespace?);
  os_log_type_t v38 = *(void (**)(char *, uint64_t))(v64 + 8);
  v38(v53, v12);
  if (v37(v36, 1, v31) != 1)
  {
LABEL_8:
    os_log_type_t v39 = v60;
    char v28 = (void (*)(char *))v52;
    outlined destroy of ReferenceResolutionClientProtocol?(v59, &demangling cache variable for type metadata for (IdentifierNamespace?, IdentifierNamespace?));
    goto LABEL_9;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v59, &demangling cache variable for type metadata for IdentifierNamespace?);
  os_log_type_t v39 = v60;
  v52(v60, v63, v12);
LABEL_13:
  if (UsoIdentifier.value.getter() == 0x6563696F566C6164 && v50 == 0xEF72656767697254)
  {
    swift_bridgeObjectRelease();
    char v44 = 1;
  }
  else
  {
    char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
LABEL_11:
  v38(v39, v12);
  return v44 & 1;
}

uint64_t HangUpOverride.isUserOnPhoneCall()()
{
  *(void *)(v1 + 128) = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = static MessageBusActor.shared;
  *(void *)(v1 + 136) = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](HangUpOverride.isUserOnPhoneCall(), v2, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[18] = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "[ExecutionOverride] [HangUpOverride]: Checking if User on Phone call", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }

  uint64_t v5 = static MessageBusActor.shared;
  v0[19] = static MessageBusActor.shared;
  uint64_t v6 = lazy protocol witness table accessor for type IdentifierNamespace and conformance IdentifierNamespace((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[20] = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AFServiceDeviceContext]?);
  v0[21] = v8;
  char *v7 = v0;
  v7[1] = HangUpOverride.isUserOnPhoneCall();
  uint64_t v9 = v0[16];
  return MEMORY[0x1F41880D8](v0 + 13, v5, v6, 0xD000000000000013, 0x80000001BA069AD0, partial apply for closure #1 in HangUpOverride.isUserOnPhoneCall(), v9, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](HangUpOverride.isUserOnPhoneCall(), v1, 0);
}

void HangUpOverride.isUserOnPhoneCall()()
{
  uint64_t v35 = v0;
  swift_release();
  unint64_t v1 = *(void *)(v0 + 104);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v34 = v5;
    *(void *)(v0 + 120) = v1;
    swift_bridgeObjectRetain();
    uint64_t v6 = String.init<A>(describing:)();
    *(void *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v2, v3, "[ExecutionOverride] [HangUpOverride]: fetched context: %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v5, -1, -1);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v8 = (_OWORD *)(v0 + 16);
  if (!v1) {
    goto LABEL_27;
  }
  if (!(v1 >> 62))
  {
    if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v29)
  {
LABEL_26:
    swift_bridgeObjectRelease();
LABEL_27:
    *uint64_t v8 = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
LABEL_28:
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl(&dword_1B9C64000, v30, v31, "[ExecutionOverride] [HangUpOverride]: Failed to retrieve phone call state before running Hangup Rule.", v32, 2u);
      MEMORY[0x1BA9E48C0](v32, -1, -1);
    }

    unint64_t v20 = 0;
    goto LABEL_31;
  }
LABEL_7:
  if ((v1 & 0xC000000000000001) != 0)
  {
    id v9 = (id)MEMORY[0x1BA9E3990](0, v1);
  }
  else
  {
    if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v9 = *(id *)(v1 + 32);
  }
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  id v11 = objc_msgSend(v10, sel_serializedContextByKey);

  if (!v11) {
    goto LABEL_27;
  }
  uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(void *)(v12 + 16) && (unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14), (v16 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v12 + 56) + 32 * v15, v0 + 16);
  }
  else
  {
    *uint64_t v8 = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*(void *)(v0 + 40)) {
    goto LABEL_28;
  }
  uint64_t v17 = v0 + 48;
  outlined init with take of Any((_OWORD *)(v0 + 16), (_OWORD *)(v0 + 48));
  id v18 = objc_allocWithZone(MEMORY[0x1E4F4E410]);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 48), *(void *)(v0 + 72));
  id v19 = objc_msgSend(v18, sel_initWithSerializedBackingStore_, _bridgeAnythingToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (objc_msgSend(v19, sel_callState)) {
    unint64_t v20 = 1;
  }
  else {
    unint64_t v20 = ((unint64_t)objc_msgSend(v19, sel_callState) >> 1) & 1;
  }
  (*(void (**)(id))(**(void **)(v0 + 128) + 256))(objc_msgSend(v19, sel_isDropInCall));
  swift_retain();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v24 = *(void *)(v0 + 128);
  if (v23)
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 67109120;
    *(_DWORD *)(v0 + 176) = (*(uint64_t (**)(void))(*(void *)v24 + 248))() & 1;
    uint64_t v17 = v0 + 48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1B9C64000, v21, v22, "[ExecutionOverride] [HangUpOverride]: phoneCall state retrieved and is user on drop in call? Ans: %{BOOL}d", v25, 8u);
    MEMORY[0x1BA9E48C0](v25, -1, -1);
  }
  else
  {
    swift_release();
  }

  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    char v28 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)char v28 = 67109120;
    *(_DWORD *)(v0 + 180) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v26, v27, "[ExecutionOverride] [HangUpOverride]: phoneCall state retrieved and is user on call? Ans: %{BOOL}d", v28, 8u);
    MEMORY[0x1BA9E48C0](v28, -1, -1);
  }

  __swift_destroy_boxed_opaque_existential_1Tm(v17);
LABEL_31:
  uint64_t v33 = *(void (**)(unint64_t))(v0 + 8);
  v33(v20);
}

uint64_t closure #1 in HangUpOverride.isUserOnPhoneCall()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[AFServiceDeviceContext]?, Never>);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = *(void *)(a2 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_bridge + 8);
  uint64_t ObjectType = swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BA04FD90;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v9;
  Swift::Int v10 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v12 + v11, (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  (*(void (**)(Swift::Int, void, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v7 + 104))(v10, 0, partial apply for closure #1 in closure #1 in HangUpOverride.isUserOnPhoneCall(), v12, ObjectType, v7);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in HangUpOverride.isUserOnPhoneCall()()
{
  return CheckedContinuation.resume(returning:)();
}

uint64_t HangUpOverride.deinit()
{
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_topRankedParse, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  swift_unknownObjectRelease();
  return v0;
}

void *sub_1B9F0AF2C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 152))(&v4);
  *a2 = v4;
  return result;
}

uint64_t sub_1B9F0AF88(char *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v4 = *a1;
  return (*(uint64_t (**)(char *))(*(void *)v2 + 160))(&v4);
}

uint64_t sub_1B9F0AFE0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B9F0B030(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 184))(*a1);
}

uint64_t sub_1B9F0B078@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B9F0B0C8(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 208))(*a1);
}

uint64_t sub_1B9F0B110@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 224))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B9F0B160(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 232))(*a1);
}

uint64_t sub_1B9F0B1A8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 248))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B9F0B1F8(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 256))(*a1);
}

uint64_t ObjC metadata update function for HangUpOverride()
{
  return type metadata accessor for HangUpOverride();
}

void type metadata completion function for HangUpOverride()
{
  type metadata accessor for Siri_Nlu_External_UserParse?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for HangUpOverride(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for HangUpOverride);
}

uint64_t dispatch thunk of HangUpOverride.overrideType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of HangUpOverride.overrideType.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of HangUpOverride.overrideType.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of HangUpOverride.isBlushingPhantomEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of HangUpOverride.isBlushingPhantomEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of HangUpOverride.isBlushingPhantomEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of HangUpOverride.isQuickStopCallBellEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of HangUpOverride.isQuickStopCallBellEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of HangUpOverride.isQuickStopCallBellEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of HangUpOverride.isCancelCallBellEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of HangUpOverride.isCancelCallBellEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of HangUpOverride.isCancelCallBellEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of HangUpOverride.isActiveDropInCall.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of HangUpOverride.isActiveDropInCall.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of HangUpOverride.isActiveDropInCall.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of HangUpOverride.__allocating_init(topRankedParse:bridge:isSpeechRequest:isNlEmpty:)()
{
  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t dispatch thunk of HangUpOverride.evaluate()(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 280) + **(int **)(*(void *)v1 + 280));
  char v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  void *v4 = v2;
  v4[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v6(a1);
}

uint64_t specialized HangUpOverride.isQuickStopTask(task:)()
{
  static UsoTask_CodegenConverter.convert(task:)();
  if (v7)
  {
    outlined init with take of Any(&v6, v8);
    outlined init with take of Any(v8, &v6);
    type metadata accessor for UsoTask_stop_uso_NoEntity();
    uint64_t v0 = swift_dynamicCast();
    if (v0) {
      swift_release();
    }
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v6, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      char v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v4 = 0;
      _os_log_impl(&dword_1B9C64000, v2, v3, "[ExecutionOverride] Unable to initialize UsoTask. Rejecting.", v4, 2u);
      MEMORY[0x1BA9E48C0](v4, -1, -1);
    }

    return 0;
  }
  return v0;
}

uint64_t lazy protocol witness table accessor for type IdentifierNamespace and conformance IdentifierNamespace(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in HangUpOverride.isUserOnPhoneCall()(uint64_t a1)
{
  return closure #1 in HangUpOverride.isUserOnPhoneCall()(a1, v1);
}

uint64_t sub_1B9F0B81C()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[AFServiceDeviceContext]?, Never>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for closure #1 in closure #1 in HangUpOverride.isUserOnPhoneCall()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[AFServiceDeviceContext]?, Never>);

  return closure #1 in closure #1 in HangUpOverride.isUserOnPhoneCall()();
}

uint64_t HangUpRule.ruleType.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t HangUpRule.ruleType.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 16) = a1;
  return result;
}

uint64_t (*HangUpRule.ruleType.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t HangUpRule.isUserOnActivePhoneCall.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t HangUpRule.isActiveCallFallbackAllowed.getter()
{
  return *(unsigned __int8 *)(v0 + 18);
}

unsigned char *HangUpRule.__allocating_init(isUserOnActivePhoneCall:isActiveCallFallbackAllowed:)(char a1, char a2)
{
  uint64_t result = (unsigned char *)swift_allocObject();
  result[16] = 0;
  result[17] = a1;
  result[18] = a2;
  return result;
}

unsigned char *HangUpRule.init(isUserOnActivePhoneCall:isActiveCallFallbackAllowed:)(char a1, char a2)
{
  v2[16] = 0;
  v2[17] = a1;
  v2[18] = a2;
  return v2;
}

uint64_t HangUpRule.deinit()
{
  return v0;
}

uint64_t protocol witness for PreExecutionRule.ruleType.getter in conformance HangUpRule()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

uint64_t sub_1B9F0BAA4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 104))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9F0BAF0(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 112))(*a1);
}

uint64_t method lookup function for HangUpRule(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for HangUpRule);
}

uint64_t dispatch thunk of HangUpRule.ruleType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t dispatch thunk of HangUpRule.ruleType.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of HangUpRule.ruleType.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of HangUpRule.__allocating_init(isUserOnActivePhoneCall:isActiveCallFallbackAllowed:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of HangUpRule.evaluate()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

SiriKitRuntime::HealthAffinityScorer __swiftcall HealthAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA062C70;
  uint64_t v1 = 0xD000000000000021;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t static HealthNLUtils.hasMeasurementUnits(from:)(uint64_t result)
{
  if (result)
  {
    SiriKitRuntime::HealthAffinityScorer result = dispatch thunk of UsoEntity_common_MeasurementComponent.unit.getter();
    if (result)
    {
      uint64_t v1 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
      if (v1)
      {
        uint64_t v2 = specialized _ArrayProtocol.filter(_:)(v1, outlined read-only object #0 of static HealthNLUtils.hasMeasurementUnits(from:));
        swift_release();
        swift_bridgeObjectRelease();
        swift_arrayDestroy();
        uint64_t v3 = *(void *)(v2 + 16);
        swift_bridgeObjectRelease();
        return v3 != 0;
      }
      else
      {
        swift_arrayDestroy();
        swift_release();
        return 0;
      }
    }
  }
  return result;
}

uint64_t HealthAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t HealthAffinityScorer.bundleIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*HealthAffinityScorer.bundleIdentifier.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t HealthAffinityScorer.score(input:environment:)()
{
  if (!specialized HealthAffinityScorer.getUsoTask(input:)()) {
    return 1;
  }
  char v0 = specialized HealthAffinityScorer.isExplicitlySupported(usoTask:)();
  swift_release();
  if (v0) {
    return 3;
  }
  else {
    return 2;
  }
}

unint64_t default argument 0 of HealthAffinityScorer.init(bundleIdentifier:)()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for AffinityScoring.score(input:environment:) in conformance HealthAffinityScorer()
{
  if (!specialized HealthAffinityScorer.getUsoTask(input:)()) {
    return 1;
  }
  char v0 = specialized HealthAffinityScorer.isExplicitlySupported(usoTask:)();
  swift_release();
  if (v0) {
    return 3;
  }
  else {
    return 2;
  }
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for UsoIdentifier();
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  int v41 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  Swift::Int v10 = (char *)&v32 - v9;
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v44 = MEMORY[0x1E4FBC860];
  uint64_t v39 = *(void *)(a1 + 16);
  if (!v39) {
    return result;
  }
  uint64_t v32 = v2;
  uint64_t v12 = 0;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v13 = v8 + 16;
  unint64_t v35 = (*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64);
  uint64_t v36 = v13;
  uint64_t v37 = a1 + v35;
  os_log_type_t v38 = v14;
  uint64_t v15 = *(void *)(v13 + 56);
  uint64_t v42 = a2;
  uint64_t v43 = v15;
  uint64_t v40 = (void (**)(char *, char *, uint64_t))(v13 + 16);
  uint64_t v33 = a2 + 7;
  uint64_t v34 = (void (**)(char *, uint64_t))(v13 - 8);
  while (1)
  {
    uint64_t v16 = v5;
    v38(v10, v37 + v43 * v12, v5);
    uint64_t v17 = v10;
    uint64_t v18 = UsoIdentifier.namespace.getter();
    uint64_t v20 = v19 ? v18 : 0;
    unint64_t v21 = v19 ? v19 : 0xE000000000000000;
    uint64_t v22 = a2[2];
    if (v22)
    {
      BOOL v23 = a2[4] == v20 && a2[5] == v21;
      if (v23 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
LABEL_17:
        swift_bridgeObjectRelease();
        uint64_t v24 = *v40;
        Swift::Int v10 = v17;
        uint64_t v5 = v16;
        (*v40)(v41, v17, v16);
        uint64_t v25 = v44;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v25 + 16) + 1, 1);
          uint64_t v25 = v44;
        }
        unint64_t v27 = *(void *)(v25 + 16);
        unint64_t v26 = *(void *)(v25 + 24);
        if (v27 >= v26 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
          uint64_t v25 = v44;
        }
        *(void *)(v25 + 16) = v27 + 1;
        v24((char *)(v25 + v35 + v27 * v43), v41, v16);
        uint64_t v44 = v25;
        a2 = v42;
        goto LABEL_4;
      }
      a2 = v42;
      if (v22 != 1) {
        break;
      }
    }
LABEL_3:
    swift_bridgeObjectRelease();
    Swift::Int v10 = v17;
    uint64_t v5 = v16;
    (*v34)(v17, v16);
LABEL_4:
    if (++v12 == v39) {
      return v44;
    }
  }
  char v28 = v33;
  uint64_t v29 = 1;
  while (1)
  {
    uint64_t v30 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (*(v28 - 1) == v20 && *v28 == v21) {
      goto LABEL_17;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_17;
    }
    v28 += 2;
    ++v29;
    BOOL v23 = v30 == v22;
    a2 = v42;
    if (v23) {
      goto LABEL_3;
    }
  }
  __break(1u);
  return result;
}

unint64_t specialized HealthAffinityScorer.getUsoTask(input:)()
{
  uint64_t v0 = type metadata accessor for Parse();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for USOParse();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v1 + 88))(v3, v0) == *MEMORY[0x1E4FA1F48])
  {
    (*(void (**)(char *, uint64_t))(v1 + 96))(v3, v0);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    unint64_t v8 = specialized static AffinityScorerUtils.getTask(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if (v8) {
      return v8;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
  Swift::Int v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_1B9C64000, v10, v11, "#HealthAffinityScorer did not find any relevant usoParses, returning low affinity score.", v12, 2u);
    MEMORY[0x1BA9E48C0](v12, -1, -1);
  }

  return 0;
}

uint64_t specialized static HealthNLUtils.extractHealthLog(from:)()
{
  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of Any?((uint64_t)v6, (uint64_t)v4);
  if (v5)
  {
    outlined init with copy of Any?((uint64_t)v4, (uint64_t)v3);
    type metadata accessor for UsoTask_create_common_HealthLog();
    if (swift_dynamicCast())
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_Target.target.getter();
LABEL_12:
      swift_release_n();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Any?);
      uint64_t v0 = v2;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v3);
      goto LABEL_13;
    }
    type metadata accessor for UsoTask_requestLog_common_HealthLog();
    if (swift_dynamicCast())
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_ReferenceMeasurementUnit.reference.getter();
      goto LABEL_12;
    }
    type metadata accessor for UsoTask_open_common_HealthLog();
    if (swift_dynamicCast()
      || (type metadata accessor for UsoTask_checkExistence_common_HealthLog(), swift_dynamicCast())
      || (type metadata accessor for UsoTask_delete_common_HealthLog(), swift_dynamicCast()))
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
      goto LABEL_12;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Any?);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v3);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v0 = 0;
LABEL_13:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v0;
}

uint64_t specialized static HealthNLUtils.hasHealthDataType(from:)(BOOL a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UsoIdentifier();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  os_log_type_t v11 = (char *)&v32 - v10;
  if (!a1) {
    return a1;
  }
  swift_retain();
  uint64_t v12 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  if (!v12)
  {
    swift_arrayDestroy();
    swift_release();
    return 0;
  }
  uint64_t v38 = *(void *)(v12 + 16);
  if (!v38)
  {
    uint64_t v27 = 1;
LABEL_31:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, v27, 1, v5);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
      uint64_t v28 = UsoIdentifier.value.getter();
      unint64_t v30 = v29;
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v31 = HIBYTE(v30) & 0xF;
      if ((v30 & 0x2000000000000000) == 0) {
        uint64_t v31 = v28 & 0xFFFFFFFFFFFFLL;
      }
      a1 = v31 != 0;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      return a1;
    }
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for UsoIdentifier?);
    return 0;
  }
  uint64_t v33 = v11;
  uint64_t v34 = v4;
  uint64_t v35 = v6;
  BOOL v36 = a1;
  uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v13 = v6 + 16;
  unint64_t v40 = v12 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
  int v41 = v14;
  uint64_t v37 = (void (**)(char *, uint64_t))(v13 - 8);
  uint64_t v39 = *(void *)(v13 + 56);
  uint64_t v32 = v12;
  swift_bridgeObjectRetain();
  uint64_t v15 = 0;
  while (1)
  {
    v41(v9, v40 + v39 * v15, v5);
    uint64_t v16 = UsoIdentifier.namespace.getter();
    uint64_t v18 = v17 ? v16 : 0;
    unint64_t v19 = v17 ? v17 : 0xE000000000000000;
    uint64_t v20 = qword_1F1372EE8;
    if (qword_1F1372EE8)
    {
      BOOL v21 = aHealthlogname[0] == v18 && aHealthlogname[1] == v19;
      if (v21 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
      {
LABEL_29:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v4 = v34;
        uint64_t v6 = v35;
        (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v34, v9, v5);
        uint64_t v27 = 0;
        os_log_type_t v11 = v33;
        goto LABEL_31;
      }
      if (v20 != 1) {
        break;
      }
    }
LABEL_5:
    ++v15;
    swift_bridgeObjectRelease();
    (*v37)(v9, v5);
    if (v15 == v38)
    {
      swift_bridgeObjectRelease();
      uint64_t v27 = 1;
      uint64_t v6 = v35;
      os_log_type_t v11 = v33;
      uint64_t v4 = v34;
      goto LABEL_31;
    }
  }
  BOOL v23 = aOgname;
  uint64_t v24 = 1;
  while (1)
  {
    uint64_t v25 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (*((void *)v23 - 1) == v18 && *(void *)v23 == v19) {
      goto LABEL_29;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    if (result) {
      goto LABEL_29;
    }
    v23 += 16;
    ++v24;
    if (v25 == v20) {
      goto LABEL_5;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized HealthAffinityScorer.isExplicitlySupported(usoTask:)()
{
  uint64_t v0 = type metadata accessor for UsoIdentifier();
  uint64_t v52 = *(void *)(v0 - 8);
  uint64_t v1 = MEMORY[0x1F4188790](v0);
  uint64_t v53 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v1);
  uint64_t v54 = (char *)&v39 - v3;
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v56[3])
  {
LABEL_81:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v56, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_82;
  }
  outlined init with copy of Any?((uint64_t)v56, (uint64_t)v55);
  type metadata accessor for UsoTask_open_common_HealthLog();
  if (!swift_dynamicCast())
  {
    type metadata accessor for UsoTask_create_common_HealthLog();
    if (!swift_dynamicCast())
    {
      type metadata accessor for UsoTask_delete_common_HealthLog();
      if (!swift_dynamicCast())
      {
        type metadata accessor for UsoTask_update_common_HealthLog();
        if (!swift_dynamicCast())
        {
          type metadata accessor for UsoTask_noVerb_common_HealthLog();
          if (!swift_dynamicCast())
          {
            type metadata accessor for UsoTask_requestLog_common_HealthLog();
            if (!swift_dynamicCast())
            {
              type metadata accessor for UsoTask_checkExistence_common_MedicationEvent();
              if (swift_dynamicCast()) {
                goto LABEL_76;
              }
              type metadata accessor for UsoTask_create_common_MedicationEvent();
              if (swift_dynamicCast()
                || (type metadata accessor for UsoTask_snooze_common_MedicationEvent(), swift_dynamicCast())
                || (type metadata accessor for UsoTask_checkExistence_common_MedicationSchedule(),
                    swift_dynamicCast())
                || (type metadata accessor for UsoTask_delete_common_MedicationSchedule(),
                    swift_dynamicCast())
                || (type metadata accessor for UsoTask_update_common_MedicationSchedule(),
                    swift_dynamicCast())
                || (type metadata accessor for UsoTask_create_common_MedicationSchedule(),
                    swift_dynamicCast())
                || (type metadata accessor for UsoTask_summarise_common_MedicationSchedule(),
                    swift_dynamicCast())
                || (type metadata accessor for UsoTask_request_common_MedicationSchedule(),
                    swift_dynamicCast()))
              {
LABEL_76:
                swift_release();
                __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v55);
                outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v56, (uint64_t *)&demangling cache variable for type metadata for Any?);
                LOBYTE(v5) = 1;
                return v5 & 1;
              }
              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v55);
              goto LABEL_81;
            }
          }
        }
      }
    }
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v55);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v56, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v4 = specialized static HealthNLUtils.extractHealthLog(from:)();
  uint64_t v5 = (unsigned char *)v4;
  if (!v4) {
    return v5 & 1;
  }
  if (specialized static HealthNLUtils.hasHealthDataType(from:)(v4))
  {
    swift_release();
    LOBYTE(v5) = 1;
    return v5 & 1;
  }
  if (!dispatch thunk of UsoEntity_common_HealthLog.value.getter()
    || (unint64_t v6 = dispatch thunk of UsoEntity_common_Measurement.components.getter(), swift_release(), !v6))
  {
    swift_release();
LABEL_82:
    LOBYTE(v5) = 0;
    return v5 & 1;
  }
  if (v6 >> 62) {
    goto LABEL_79;
  }
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
LABEL_15:
  uint64_t v39 = v5;
  uint64_t v8 = MEMORY[0x1E4FBC860];
  if (v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = v6 & 0xC000000000000001;
    unint64_t v43 = v6 + 32;
    uint64_t v51 = v52 + 16;
    unint64_t v40 = (void (**)(char *, uint64_t))(v52 + 8);
    os_log_type_t v11 = (void (**)(char *, char *, uint64_t))(v52 + 32);
    uint64_t v49 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v50 = v0;
    unint64_t v41 = v6;
    uint64_t v42 = v7;
    unint64_t v44 = v6 & 0xC000000000000001;
    while (1)
    {
      if (v10)
      {
        uint64_t v12 = MEMORY[0x1BA9E3990](v9, v6);
        BOOL v13 = __OFADD__(v9++, 1);
        if (v13)
        {
LABEL_78:
          __break(1u);
LABEL_79:
          swift_bridgeObjectRetain();
          uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v12 = swift_retain();
        BOOL v13 = __OFADD__(v9++, 1);
        if (v13) {
          goto LABEL_78;
        }
      }
      uint64_t v14 = v12;
      dispatch thunk of CodeGenListEntry.entry.getter();
      uint64_t v5 = (unsigned char *)v56[0];
      if (!v56[0]) {
        goto LABEL_54;
      }
      uint64_t v48 = v14;
      uint64_t v15 = dispatch thunk of UsoEntity_common_MeasurementComponent.unit.getter();
      if (!v15) {
        break;
      }
      uint64_t v16 = v15;
      char v47 = v5;
      uint64_t v17 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
      if (v17)
      {
        uint64_t v18 = v17;
        uint64_t v45 = v16;
        uint64_t v46 = v9;
        v55[0] = v8;
        uint64_t v19 = *(void *)(v17 + 16);
        if (v19)
        {
          unint64_t v6 = 0;
          while (1)
          {
            if (v6 >= *(void *)(v18 + 16))
            {
              __break(1u);
              goto LABEL_78;
            }
            unint64_t v20 = (*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
            uint64_t v21 = *(void *)(v52 + 72);
            (*(void (**)(char *, unint64_t, uint64_t))(v52 + 16))(v54, v18 + v20 + v21 * v6, v0);
            uint64_t v22 = UsoIdentifier.namespace.getter();
            uint64_t v24 = v23 ? v22 : 0;
            unint64_t v25 = v23 ? v23 : 0xE000000000000000;
            if (v24 == 0x6D6572757361656DLL && v25 == 0xEF74696E55746E65
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
              || v24 == 0x6E5568746C616568 && v25 == 0xEA00000000007469
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
              || aMedicationunit[0] == v24 && aMedicationunit[1] == v25)
            {
              break;
            }
            char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v30) {
              goto LABEL_43;
            }
            (*v40)(v54, v0);
LABEL_48:
            if (v19 == ++v6)
            {
              uint64_t v34 = v55[0];
              unint64_t v6 = v41;
              uint64_t v8 = MEMORY[0x1E4FBC860];
              goto LABEL_62;
            }
          }
          swift_bridgeObjectRelease();
LABEL_43:
          uint64_t v5 = *v11;
          (*v11)(v53, v54, v0);
          uint64_t v26 = v55[0];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v26 + 16) + 1, 1);
            uint64_t v26 = v55[0];
          }
          unint64_t v28 = *(void *)(v26 + 16);
          unint64_t v27 = *(void *)(v26 + 24);
          if (v28 >= v27 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
            uint64_t v26 = v55[0];
          }
          *(void *)(v26 + 16) = v28 + 1;
          unint64_t v29 = v26 + v20 + v28 * v21;
          uint64_t v0 = v50;
          ((void (*)(unint64_t, char *, uint64_t))v5)(v29, v53, v50);
          v55[0] = v26;
          goto LABEL_48;
        }
        uint64_t v34 = v8;
LABEL_62:
        swift_bridgeObjectRelease();
        swift_arrayDestroy();
        uint64_t v36 = *(void *)(v34 + 16);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        BOOL v31 = v36 != 0;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v7 = v42;
        uint64_t v9 = v46;
        unint64_t v10 = v44;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
LABEL_63:
        }
          uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v49 + 2) + 1, 1, v49);
      }
      else
      {
        swift_arrayDestroy();
        swift_release();
        swift_release();
        swift_release();
        char v35 = swift_isUniquelyReferenced_nonNull_native();
        BOOL v31 = 0;
        unint64_t v10 = v44;
        if ((v35 & 1) == 0) {
          goto LABEL_63;
        }
      }
LABEL_55:
      uint64_t v5 = (unsigned char *)*((void *)v49 + 2);
      unint64_t v32 = *((void *)v49 + 3);
      if ((unint64_t)v5 >= v32 >> 1) {
        uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), (int64_t)(v5 + 1), 1, v49);
      }
      uint64_t v33 = v49;
      *((void *)v49 + 2) = v5 + 1;
      v5[(void)v33 + 32] = v31;
      if (v9 == v7) {
        goto LABEL_66;
      }
    }
    swift_release();
LABEL_54:
    swift_release();
    BOOL v31 = 0;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_63;
    }
    goto LABEL_55;
  }
  uint64_t v49 = (char *)MEMORY[0x1E4FBC860];
LABEL_66:
  swift_bridgeObjectRelease_n();
  LOBYTE(v5) = specialized Sequence<>.contains(_:)(1, (uint64_t)v49);
  swift_bridgeObjectRelease();
  swift_release();
  return v5 & 1;
}

ValueMetadata *type metadata accessor for HealthNLUtils()
{
  return &type metadata for HealthNLUtils;
}

ValueMetadata *type metadata accessor for HealthAffinityScorer()
{
  return &type metadata for HealthAffinityScorer;
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1)
{
  uint64_t v9 = MEMORY[0x1E4FBC860];
  if (a1 >> 62)
  {
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      for (uint64_t i = 4; ; ++i)
      {
        uint64_t v4 = i - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1BA9E3990](i - 4, a1);
          uint64_t v5 = i - 3;
          if (__OFADD__(v4, 1)) {
            goto LABEL_15;
          }
        }
        else
        {
          swift_retain();
          uint64_t v5 = i - 3;
          if (__OFADD__(v4, 1))
          {
LABEL_15:
            __break(1u);
            goto LABEL_16;
          }
        }
        swift_getKeyPath();
        swift_retain();
        swift_getAtKeyPath();
        swift_release();
        uint64_t v6 = swift_release_n();
        if (v8)
        {
          MEMORY[0x1BA9E3030](v6);
          if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        if (v5 == v2)
        {
          swift_bridgeObjectRelease();
          return v9;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E4FBC860];
}

{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  uint64_t v9 = MEMORY[0x1E4FBC860];
  if (a1 >> 62)
  {
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      for (uint64_t i = 4; ; ++i)
      {
        uint64_t v4 = i - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1BA9E3990](i - 4, a1);
          uint64_t v5 = i - 3;
          if (__OFADD__(v4, 1)) {
            goto LABEL_15;
          }
        }
        else
        {
          swift_retain();
          uint64_t v5 = i - 3;
          if (__OFADD__(v4, 1))
          {
LABEL_15:
            __break(1u);
            goto LABEL_16;
          }
        }
        swift_getKeyPath();
        swift_retain();
        swift_getAtKeyPath();
        swift_release();
        uint64_t v6 = swift_release_n();
        if (v8)
        {
          MEMORY[0x1BA9E3030](v6);
          if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        if (v5 == v2)
        {
          swift_bridgeObjectRelease();
          return v9;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E4FBC860];
}

SiriKitRuntime::HomeAutomationAffinityScorer __swiftcall HomeAutomationAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA062970;
  uint64_t v1 = 0xD00000000000002FLL;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

unint64_t HomeAutomationAffinityScorer.HomeAutomationNamespace.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000018;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000015;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
    case 9:
      unint64_t result = 0xD000000000000013;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 0xD000000000000017;
      break;
    case 6:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 7:
      unint64_t result = 0xD000000000000015;
      break;
    case 8:
      unint64_t result = 0xD000000000000017;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HomeAutomationAffinityScorer.HomeAutomationNamespace(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = HomeAutomationAffinityScorer.HomeAutomationNamespace.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == HomeAutomationAffinityScorer.HomeAutomationNamespace.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance HomeAutomationAffinityScorer.HomeAutomationNamespace()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  HomeAutomationAffinityScorer.HomeAutomationNamespace.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HomeAutomationAffinityScorer.HomeAutomationNamespace()
{
  HomeAutomationAffinityScorer.HomeAutomationNamespace.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance HomeAutomationAffinityScorer.HomeAutomationNamespace()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  HomeAutomationAffinityScorer.HomeAutomationNamespace.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance HomeAutomationAffinityScorer.HomeAutomationNamespace@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized HomeAutomationAffinityScorer.HomeAutomationNamespace.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance HomeAutomationAffinityScorer.HomeAutomationNamespace@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = HomeAutomationAffinityScorer.HomeAutomationNamespace.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t one-time initialization function for kHAGeneralNamespaceMatches()
{
  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kHAGeneralNamespaceMatches);
  uint64_t result = swift_arrayDestroy();
  static HomeAutomationAffinityScorer.kHAGeneralNamespaceMatches = v0;
  return result;
}

uint64_t *HomeAutomationAffinityScorer.kHAGeneralNamespaceMatches.unsafeMutableAddressor()
{
  if (one-time initialization token for kHAGeneralNamespaceMatches != -1) {
    swift_once();
  }
  return &static HomeAutomationAffinityScorer.kHAGeneralNamespaceMatches;
}

uint64_t static HomeAutomationAffinityScorer.kHAGeneralNamespaceMatches.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kHAGeneralNamespaceMatches);
}

uint64_t one-time initialization function for kHAExactNamespaceMatches()
{
  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kHAExactNamespaceMatches);
  uint64_t result = swift_arrayDestroy();
  static HomeAutomationAffinityScorer.kHAExactNamespaceMatches = v0;
  return result;
}

{
  Swift::Int v0;
  uint64_t result;

  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kHAExactNamespaceMatches);
  uint64_t result = swift_arrayDestroy();
  static SystemCommandsAffinityScorer.kHAExactNamespaceMatches = v0;
  return result;
}

uint64_t *HomeAutomationAffinityScorer.kHAExactNamespaceMatches.unsafeMutableAddressor()
{
  if (one-time initialization token for kHAExactNamespaceMatches != -1) {
    swift_once();
  }
  return &static HomeAutomationAffinityScorer.kHAExactNamespaceMatches;
}

uint64_t static HomeAutomationAffinityScorer.kHAExactNamespaceMatches.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kHAExactNamespaceMatches);
}

void *HomeAutomationAffinityScorer.kHAPlaceHintMatch.unsafeMutableAddressor()
{
  return &static HomeAutomationAffinityScorer.kHAPlaceHintMatch;
}

unint64_t static HomeAutomationAffinityScorer.kHAPlaceHintMatch.getter()
{
  return 0xD000000000000017;
}

uint64_t *HomeAutomationAffinityScorer.kAppBundleIdMatches.unsafeMutableAddressor()
{
  if (one-time initialization token for kAppBundleIdMatches != -1) {
    swift_once();
  }
  return &static HomeAutomationAffinityScorer.kAppBundleIdMatches;
}

uint64_t static HomeAutomationAffinityScorer.kAppBundleIdMatches.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kAppBundleIdMatches);
}

void *HomeAutomationAffinityScorer.unspecifiedDevice.unsafeMutableAddressor()
{
  return &static HomeAutomationAffinityScorer.unspecifiedDevice;
}

unint64_t static HomeAutomationAffinityScorer.unspecifiedDevice.getter()
{
  return 0xD000000000000011;
}

uint64_t one-time initialization function for kSummariseSettingStrictValues()
{
  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kSummariseSettingStrictValues);
  uint64_t result = swift_arrayDestroy();
  static HomeAutomationAffinityScorer.kSummariseSettingStrictValues = v0;
  return result;
}

uint64_t *HomeAutomationAffinityScorer.kSummariseSettingStrictValues.unsafeMutableAddressor()
{
  if (one-time initialization token for kSummariseSettingStrictValues != -1) {
    swift_once();
  }
  return &static HomeAutomationAffinityScorer.kSummariseSettingStrictValues;
}

uint64_t static HomeAutomationAffinityScorer.kSummariseSettingStrictValues.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kSummariseSettingStrictValues);
}

uint64_t one-time initialization function for kPauseOrResumeSettingStrictValues()
{
  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kPauseOrResumeSettingStrictValues);
  uint64_t result = swift_arrayDestroy();
  static HomeAutomationAffinityScorer.kPauseOrResumeSettingStrictValues = v0;
  return result;
}

uint64_t *HomeAutomationAffinityScorer.kPauseOrResumeSettingStrictValues.unsafeMutableAddressor()
{
  if (one-time initialization token for kPauseOrResumeSettingStrictValues != -1) {
    swift_once();
  }
  return &static HomeAutomationAffinityScorer.kPauseOrResumeSettingStrictValues;
}

uint64_t static HomeAutomationAffinityScorer.kPauseOrResumeSettingStrictValues.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kPauseOrResumeSettingStrictValues);
}

const char *HomeAutomationAffinityScorer.kPauseOrResumeSettingStateMatch.unsafeMutableAddressor()
{
  return "clean";
}

uint64_t static HomeAutomationAffinityScorer.kPauseOrResumeSettingStateMatch.getter()
{
  return 0x6E61656C63;
}

uint64_t one-time initialization function for kHKEntityTypes()
{
  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kHKEntityTypes);
  uint64_t result = swift_arrayDestroy();
  static HomeAutomationAffinityScorer.kHKEntityTypes = v0;
  return result;
}

{
  Swift::Int v0;
  uint64_t result;

  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kHKEntityTypes);
  uint64_t result = swift_arrayDestroy();
  static SystemCommandsAffinityScorer.kHKEntityTypes = v0;
  return result;
}

uint64_t *HomeAutomationAffinityScorer.kHKEntityTypes.unsafeMutableAddressor()
{
  if (one-time initialization token for kHKEntityTypes != -1) {
    swift_once();
  }
  return &static HomeAutomationAffinityScorer.kHKEntityTypes;
}

uint64_t static HomeAutomationAffinityScorer.kHKEntityTypes.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kHKEntityTypes);
}

uint64_t one-time initialization function for kLockRelatedValues()
{
  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kLockRelatedValues);
  uint64_t result = swift_arrayDestroy();
  static HomeAutomationAffinityScorer.kLockRelatedValues = v0;
  return result;
}

uint64_t *HomeAutomationAffinityScorer.kLockRelatedValues.unsafeMutableAddressor()
{
  if (one-time initialization token for kLockRelatedValues != -1) {
    swift_once();
  }
  return &static HomeAutomationAffinityScorer.kLockRelatedValues;
}

uint64_t static HomeAutomationAffinityScorer.kLockRelatedValues.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kLockRelatedValues);
}

uint64_t HomeAutomationAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.haSpanGeneralMatch.getter(char a1)
{
  return a1 & 1;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.haSpanGeneralMatch.setter(uint64_t result)
{
  *char v1 = result;
  return result;
}

uint64_t (*HomeAutomationAffinityScorer.HAMatchConditions.haSpanGeneralMatch.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.haSpanExactMatch.getter(unint64_t a1)
{
  return (a1 >> 8) & 1;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.haSpanExactMatch.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*HomeAutomationAffinityScorer.HAMatchConditions.haSpanExactMatch.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.haSpanMatch.getter(unint64_t a1)
{
  return (a1 >> 16) & 1;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.haSpanMatch.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 2) = result;
  return result;
}

uint64_t (*HomeAutomationAffinityScorer.HAMatchConditions.haSpanMatch.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.homeKitEntityTypeExactMatch.getter(unint64_t a1)
{
  return (a1 >> 24) & 1;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.homeKitEntityTypeExactMatch.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 3) = result;
  return result;
}

uint64_t (*HomeAutomationAffinityScorer.HAMatchConditions.homeKitEntityTypeExactMatch.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.homeKitEntityTypeFuzzyMatch.getter(unint64_t a1)
{
  return HIDWORD(a1) & 1;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.homeKitEntityTypeFuzzyMatch.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 4) = result;
  return result;
}

uint64_t (*HomeAutomationAffinityScorer.HAMatchConditions.homeKitEntityTypeFuzzyMatch.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.appBundleIdMatch.getter(unint64_t a1)
{
  return (a1 >> 40) & 1;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.appBundleIdMatch.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 5) = result;
  return result;
}

uint64_t (*HomeAutomationAffinityScorer.HAMatchConditions.appBundleIdMatch.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.placeHintGeneralMatch.getter(unint64_t a1)
{
  return HIWORD(a1) & 1;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.placeHintGeneralMatch.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 6) = result;
  return result;
}

uint64_t (*HomeAutomationAffinityScorer.HAMatchConditions.placeHintGeneralMatch.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.visionOSExceptionWordMatch.getter(unint64_t a1)
{
  return HIBYTE(a1) & 1;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.visionOSExceptionWordMatch.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 7) = result;
  return result;
}

uint64_t (*HomeAutomationAffinityScorer.HAMatchConditions.visionOSExceptionWordMatch.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.iOSLockRequest.getter(uint64_t a1, char a2)
{
  return a2 & 1;
}

uint64_t HomeAutomationAffinityScorer.HAMatchConditions.iOSLockRequest.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t (*HomeAutomationAffinityScorer.HAMatchConditions.iOSLockRequest.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

SiriKitRuntime::HomeAutomationAffinityScorer::HAMatchConditions __swiftcall HomeAutomationAffinityScorer.HAMatchConditions.init(haSpanGeneralMatch:haSpanExactMatch:haSpanMatch:homeKitEntityTypeExactMatch:homeKitEntityTypeFuzzyMatch:appBundleIdMatch:placeHintGeneralMatch:visionOSExceptionWordMatch:iOSLockRequest:)(Swift::Bool haSpanGeneralMatch, Swift::Bool haSpanExactMatch, Swift::Bool haSpanMatch, Swift::Bool homeKitEntityTypeExactMatch, Swift::Bool homeKitEntityTypeFuzzyMatch, Swift::Bool appBundleIdMatch, Swift::Bool placeHintGeneralMatch, Swift::Bool visionOSExceptionWordMatch, Swift::Bool iOSLockRequest)
{
  uint64_t v9 = 256;
  if (!haSpanExactMatch) {
    uint64_t v9 = 0;
  }
  unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL | haSpanGeneralMatch;
  uint64_t v11 = 0x10000;
  if (!haSpanMatch) {
    uint64_t v11 = 0;
  }
  uint64_t v12 = 0x1000000;
  if (!homeKitEntityTypeExactMatch) {
    uint64_t v12 = 0;
  }
  unint64_t v13 = v10 | v11 | v12;
  uint64_t v14 = 0x100000000;
  if (!homeKitEntityTypeFuzzyMatch) {
    uint64_t v14 = 0;
  }
  uint64_t v15 = 0x10000000000;
  if (!appBundleIdMatch) {
    uint64_t v15 = 0;
  }
  uint64_t v16 = 0x1000000000000;
  if (!placeHintGeneralMatch) {
    uint64_t v16 = 0;
  }
  uint64_t v17 = v14 | v15;
  uint64_t v18 = 0x100000000000000;
  if (!visionOSExceptionWordMatch) {
    uint64_t v18 = 0;
  }
  uint64_t v19 = v13 | v17 | v16 | v18;
  Swift::Bool v20 = iOSLockRequest;
  result.haSpanGeneralMatch = v19;
  result.haSpanExactMatch = BYTE1(v19);
  result.haSpanMatch = BYTE2(v19);
  result.homeKitEntityTypeExactMatch = BYTE3(v19);
  result.homeKitEntityTypeFuzzyMatch = BYTE4(v19);
  result.appBundleIdMatch = BYTE5(v19);
  result.placeHintGeneralMatch = BYTE6(v19);
  result.visionOSExceptionWordMatch = HIBYTE(v19);
  result.iOSLockRequest = v20;
  return result;
}

void *static HomeAutomationAffinityScorer.HomeAppEntityType.allCases.getter()
{
  return &outlined read-only object #0 of static HomeAutomationAffinityScorer.HomeAppEntityType.allCases.getter;
}

uint64_t HomeAutomationAffinityScorer.HomeAppEntityType.rawValue.getter(char a1)
{
  uint64_t result = 0x6E45656369766544;
  switch(a1)
  {
    case 1:
      unsigned int v3 = 1701670728;
      goto LABEL_6;
    case 2:
      uint64_t result = 0x746E45656E656353;
      break;
    case 3:
      uint64_t result = 0x79726F6765746143;
      break;
    case 4:
      unsigned int v3 = 1836019538;
LABEL_6:
      uint64_t result = v3 | 0x69746E4500000000;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HomeAutomationAffinityScorer.HomeAppEntityType(unsigned __int8 *a1, unsigned char *a2)
{
  unint64_t v2 = 0xEC00000079746974;
  uint64_t v3 = 0x6E45656369766544;
  uint64_t v4 = *a1;
  uint64_t v5 = 0x6E45656369766544;
  unint64_t v6 = 0xEC00000079746974;
  switch(v4)
  {
    case 1:
      unsigned int v7 = 1701670728;
      goto LABEL_6;
    case 2:
      uint64_t v5 = 0x746E45656E656353;
      unint64_t v6 = 0xEB00000000797469;
      break;
    case 3:
      uint64_t v5 = 0x79726F6765746143;
      unint64_t v6 = 0xEE00797469746E45;
      break;
    case 4:
      unsigned int v7 = 1836019538;
LABEL_6:
      uint64_t v5 = v7 | 0x69746E4500000000;
      unint64_t v6 = 0xEA00000000007974;
      break;
    default:
      break;
  }
  switch(*a2)
  {
    case 1:
      unsigned int v8 = 1701670728;
      goto LABEL_12;
    case 2:
      uint64_t v3 = 0x746E45656E656353;
      unint64_t v2 = 0xEB00000000797469;
      break;
    case 3:
      uint64_t v3 = 0x79726F6765746143;
      unint64_t v2 = 0xEE00797469746E45;
      break;
    case 4:
      unsigned int v8 = 1836019538;
LABEL_12:
      uint64_t v3 = v8 | 0x69746E4500000000;
      unint64_t v2 = 0xEA00000000007974;
      break;
    default:
      break;
  }
  if (v5 == v3 && v6 == v2) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance HomeAutomationAffinityScorer.HomeAppEntityType()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HomeAutomationAffinityScorer.HomeAppEntityType()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance HomeAutomationAffinityScorer.HomeAppEntityType()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance HomeAutomationAffinityScorer.HomeAppEntityType@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized HomeAutomationAffinityScorer.HomeAppEntityType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance HomeAutomationAffinityScorer.HomeAppEntityType(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xEC00000079746974;
  uint64_t v3 = 0x6E45656369766544;
  switch(*v1)
  {
    case 1:
      unsigned int v4 = 1701670728;
      goto LABEL_7;
    case 2:
      unint64_t v2 = 0xEB00000000797469;
      uint64_t v3 = 0x746E45656E656353;
      goto LABEL_4;
    case 3:
      strcpy((char *)a1, "CategoryEntity");
      *(unsigned char *)(a1 + 15) = -18;
      return;
    case 4:
      unsigned int v4 = 1836019538;
LABEL_7:
      *(void *)a1 = v4 | 0x69746E4500000000;
      *(void *)(a1 + 8) = 0xEA00000000007974;
      return;
    default:
LABEL_4:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      return;
  }
}

uint64_t protocol witness for Decodable.init(from:) in conformance HomeAutomationAffinityScorer.HomeAppEntityType()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance HomeAutomationAffinityScorer.HomeAppEntityType()
{
  return RawRepresentable<>.encode(to:)();
}

void protocol witness for static CaseIterable.allCases.getter in conformance HomeAutomationAffinityScorer.HomeAppEntityType(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance HomeAutomationAffinityScorer.HomeAppEntityType;
}

const char *HomeAutomationAffinityScorer.visionOSExceptionWord.unsafeMutableAddressor()
{
  return "window";
}

uint64_t static HomeAutomationAffinityScorer.visionOSExceptionWord.getter()
{
  return 0x776F646E6977;
}

const char *HomeAutomationAffinityScorer.answerProductIdentifierNamespace.unsafeMutableAddressor()
{
  return "answerProduct";
}

uint64_t static HomeAutomationAffinityScorer.answerProductIdentifierNamespace.getter()
{
  return 0x7250726577736E61;
}

const char *HomeAutomationAffinityScorer.visionOSUnsupportedPropertyValue.unsafeMutableAddressor()
{
  return "vision_pro";
}

uint64_t static HomeAutomationAffinityScorer.visionOSUnsupportedPropertyValue.getter()
{
  return 0x705F6E6F69736976;
}

uint64_t HomeAutomationAffinityScorer.score(input:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v104 = type metadata accessor for IdentifierAppBundle();
  uint64_t v100 = *(void *)(v104 - 8);
  MEMORY[0x1F4188790](v104);
  uint64_t v103 = &v85[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for UsoEntitySpan();
  uint64_t v101 = *(void *)(v8 - 8);
  uint64_t v102 = (void (*)(void, void, void))v8;
  MEMORY[0x1F4188790](v8);
  os_log_type_t v105 = &v85[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for USOParse();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  unint64_t v13 = &v85[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = type metadata accessor for Parse();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = &v85[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  Input.parse.getter();
  if ((*(unsigned int (**)(unsigned char *, uint64_t))(v15 + 88))(v17, v14) != *MEMORY[0x1E4FA1F48])
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.executor);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_1B9C64000, v22, v23, "HomeAutomationAffinityScorer - [Default] Got unexpected parse", v24, 2u);
      MEMORY[0x1BA9E48C0](v24, -1, -1);
    }

    (*(void (**)(unsigned char *, uint64_t))(v15 + 8))(v17, v14);
    return 2;
  }
  uint64_t v99 = a3;
  (*(void (**)(unsigned char *, uint64_t))(v15 + 96))(v17, v14);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v11 + 32))(v13, v17, v10);
  unint64_t v18 = specialized static AffinityScorerUtils.getTask(_:)();
  if (!v18)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.executor);
    unint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      unint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v29 = 0;
      _os_log_impl(&dword_1B9C64000, v27, v28, "HomeAutomationAffinityScorer - [Unsupported] Could not extract uso task", v29, 2u);
      MEMORY[0x1BA9E48C0](v29, -1, -1);
    }

    (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v10);
    return 0;
  }
  uint64_t v19 = (uint8_t *)v18;
  uint64_t v95 = a2;
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.homeKitProvider.getter();
  swift_release();
  char v20 = dispatch thunk of HomeKitProvider.areHomesConfigured(refresh:)();
  swift_release();
  uint64_t v97 = a4;
  if (v20)
  {
    int v98 = 1;
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.executor);
    BOOL v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl(&dword_1B9C64000, v31, v32, "HomeAutomationAffinityScorer - Refreshing home configuration", v33, 2u);
      MEMORY[0x1BA9E48C0](v33, -1, -1);
    }

    static SiriEnvironment.default.getter();
    SiriEnvironment.homeKitProvider.getter();
    swift_release();
    int v98 = dispatch thunk of HomeKitProvider.areHomesConfigured(refresh:)();
    swift_release();
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  uint64_t v96 = __swift_project_value_buffer(v34, (uint64_t)static Logger.executor);
  char v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    uint64_t v94 = swift_slowAlloc();
    uint64_t v107 = v94;
    *(_DWORD *)uint64_t v37 = 136315138;
    uint64_t v92 = v37 + 4;
    uint64_t v93 = v37;
    static SiriEnvironment.default.getter();
    SiriEnvironment.homeKitProvider.getter();
    swift_release();
    uint64_t v38 = dispatch thunk of HomeKitProvider.debugInfo.getter();
    unint64_t v40 = v39;
    swift_release();
    uint64_t v106 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, &v107);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_type_t v41 = v36;
    uint64_t v42 = v93;
    _os_log_impl(&dword_1B9C64000, v35, v41, "HomeAutomationAffinityScorer - Home configuration is %s", v93, 0xCu);
    uint64_t v43 = v94;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v43, -1, -1);
    MEMORY[0x1BA9E48C0](v42, -1, -1);
  }

  unint64_t v44 = v102;
  uint64_t v45 = v105;
  uint64_t v46 = specialized static AffinityScorerUtils.getEntitySpans(_:)();
  uint64_t v47 = specialized HomeAutomationAffinityScorer.scorePauseOrResumeSetting(usoTask:usoEntitySpans:)((uint64_t)v19, v46);
  if (v47 != 5)
  {
    uint64_t v25 = v47;
    (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v10);
    swift_bridgeObjectRelease();
LABEL_53:
    swift_release();
    return v25;
  }
  uint64_t v93 = v19;
  uint64_t v89 = v13;
  uint64_t v91 = specialized HomeAutomationAffinityScorer.hasGeneralNamespaceMatch(_:)(v46);
  BOOL v48 = specialized HomeAutomationAffinityScorer.hasExactNamespaceMatch(_:)(v46);
  BOOL v90 = specialized HomeAutomationAffinityScorer.hasNamespaceMatch(_:)(v46);
  LODWORD(v92) = specialized HomeAutomationAffinityScorer.hasHKExactMatch(_:)(v46);
  LODWORD(v94) = specialized HomeAutomationAffinityScorer.hasHKFuzzyMatch(_:)(v46);
  uint64_t v49 = *(void *)(v46 + 16);
  if (v49)
  {
    BOOL v86 = v48;
    uint64_t v87 = v10;
    uint64_t v88 = v11;
    uint64_t v50 = *(void (**)(void, void, void))(v101 + 16);
    unint64_t v51 = v46 + ((*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80));
    uint64_t v52 = (void (**)(unsigned char *, uint64_t))(v100 + 8);
    uint64_t v53 = (void (**)(unsigned char *, void))(v101 + 8);
    uint64_t v101 = *(void *)(v101 + 72);
    uint64_t v102 = v50;
    uint64_t v100 = v46;
    swift_bridgeObjectRetain();
    uint64_t v54 = v103;
    while (1)
    {
      v102(v45, v51, v44);
      uint64_t v55 = v44;
      if (one-time initialization token for kAppBundleIdMatches != -1) {
        swift_once();
      }
      uint64_t v56 = static HomeAutomationAffinityScorer.kAppBundleIdMatches;
      UsoEntitySpan.appBundleSemantic.getter();
      uint64_t v57 = IdentifierAppBundle.rawValue.getter();
      uint64_t v59 = v58;
      (*v52)(v54, v104);
      LOBYTE(v57) = specialized Set.contains(_:)(v57, v59, v56);
      uint64_t v45 = v105;
      swift_bridgeObjectRelease();
      (*v53)(v45, v55);
      if (v57) {
        break;
      }
      unint64_t v44 = v55;
      v51 += v101;
      if (!--v49)
      {
        uint64_t v61 = 0;
        goto LABEL_37;
      }
    }
    uint64_t v61 = 0x10000000000;
LABEL_37:
    uint64_t v46 = v100;
    swift_bridgeObjectRelease();
    uint64_t v10 = v87;
    uint64_t v11 = v88;
    char v60 = v93;
    LOBYTE(v48) = v86;
  }
  else
  {
    uint64_t v61 = 0;
    char v60 = v93;
  }
  char v62 = (char)v92;
  BOOL v63 = specialized HomeAutomationAffinityScorer.hasPlaceHintMatch(_:)(v46);
  char v64 = specialized HomeAutomationAffinityScorer.isiOSLockRequest(_:)(v46);
  swift_bridgeObjectRelease();
  uint64_t v65 = 256;
  if (!v48) {
    uint64_t v65 = 0;
  }
  unint64_t v66 = v65 & 0xFFFFFFFFFFFFFFFELL | v91 & 1;
  uint64_t v67 = 0x10000;
  if (!v90) {
    uint64_t v67 = 0;
  }
  uint64_t v68 = 0x1000000;
  if ((v62 & 1) == 0) {
    uint64_t v68 = 0;
  }
  unint64_t v69 = v66 | v67 | v68;
  uint64_t v70 = 0x100000000;
  if ((v94 & 1) == 0) {
    uint64_t v70 = 0;
  }
  uint64_t v71 = 0x1000000000000;
  if (!v63) {
    uint64_t v71 = 0;
  }
  Swift::Int v72 = v69 | v70 | v61 | v71;
  uint64_t v73 = specialized HomeAutomationAffinityScorer.scoreSummariseSetting(usoTask:_:)((uint64_t)v60, v72);
  if (v73 != 5)
  {
    uint64_t v25 = v73;
    (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v89, v10);
    goto LABEL_53;
  }
  if ((v98 & 1) == 0)
  {
    uint64_t v75 = Logger.logObject.getter();
    if (v63 || v48)
    {
      os_log_type_t v76 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v75, v76))
      {
        uint64_t v77 = swift_slowAlloc();
        *(_DWORD *)uint64_t v77 = 67109632;
        LODWORD(v107) = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v77 + 8) = 1024;
        LODWORD(v107) = v63;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v77 + 14) = 1024;
        LODWORD(v107) = v48;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B9C64000, v75, v76, "HomeAutomationAffinityScorer - [Low]\nHome configured: %{BOOL}d &\n(placeHintGeneralMatch: %{BOOL}d || HASpanExactMatch: %{BOOL}d)", (uint8_t *)v77, 0x14u);
        MEMORY[0x1BA9E48C0](v77, -1, -1);
      }

      swift_release();
      (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v89, v10);
      return 1;
    }
    os_log_type_t v80 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v75, v80))
    {
      uint64_t v81 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v81 = 0;
      _os_log_impl(&dword_1B9C64000, v75, v80, "HomeAutomationAffinityScorer - [Unsupported] No home configured.", v81, 2u);
      MEMORY[0x1BA9E48C0](v81, -1, -1);
    }

    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v89, v10);
    return 0;
  }
  if (HomeAutomationAffinityScorer.isOverrideScore(_:_:_:)((uint64_t)v60, v72))
  {
    (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v89, v10);
    swift_release();
    return 4;
  }
  if (!(v62 & 1 | ((v64 & 1) == 0) | ((v94 | v48) | v63) & 1))
  {
    (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v89, v10);
    swift_release();
    return 1;
  }
  char v78 = HomeAutomationAffinityScorer.isHighScore(_:_:_:)((uint64_t)v60, v72);
  uint64_t v79 = v89;
  if (v78)
  {
    (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v89, v10);
    swift_release();
    return 3;
  }
  if ((specialized HomeAutomationAffinityScorer.isDefaultScore(_:_:_:)((uint64_t)v60, v72) & 1) == 0)
  {
    uint64_t v82 = Logger.logObject.getter();
    os_log_type_t v83 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v82, v83))
    {
      uint64_t v84 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v84 = 0;
      _os_log_impl(&dword_1B9C64000, v82, v83, "HomeAutomationAffinityScorer - [Low] Found no HomeAutomation spans", v84, 2u);
      MEMORY[0x1BA9E48C0](v84, -1, -1);
    }

    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v79, v10);
    return 1;
  }
  (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v79, v10);
  swift_release();
  return 2;
}

uint64_t HomeAutomationAffinityScorer.isOverrideScore(_:_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for RRCandidate();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v38 - v11;
  if ((a2 & 0x100000000000000) != 0)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.executor);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 67109120;
      LODWORD(v39) = 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v19, v20, "HomeAutomationAffinityScorer - usoEntitySpansConditions.visionOSExceptionWordMatch is %{BOOL}d", v21, 8u);
      MEMORY[0x1BA9E48C0](v21, -1, -1);
    }

    return 0;
  }
  if ((a2 & 0x10000) != 0)
  {
    if ((a2 & 0x1000000) != 0)
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      __swift_project_value_buffer(v24, (uint64_t)static Logger.executor);
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v25, v26))
      {
        unint64_t v27 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v27 = 0;
        _os_log_impl(&dword_1B9C64000, v25, v26, "HomeAutomationAffinityScorer - [Override] USO entity spans satisfy condition:\n(GeneralNamespaceMatches || ExactNameSpaceMatch) && HomeKitEntityType.ExactMatch", v27, 2u);
        MEMORY[0x1BA9E48C0](v27, -1, -1);
      }

      return 1;
    }
    uint64_t v13 = UsoTask.arguments.getter();
    if (*(void *)(v13 + 16))
    {
      unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(0x636E657265666572, 0xE900000000000065);
      if (v15)
      {
        unint64_t v16 = *(void *)(*(void *)(v13 + 56) + 8 * v14);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v16 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v37)
          {
LABEL_8:
            if ((v16 & 0xC000000000000001) != 0)
            {
              MEMORY[0x1BA9E3990](0, v16);
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRelease();
              if (!v17)
              {
                __break(1u);
LABEL_34:
                swift_once();
LABEL_27:
                uint64_t v28 = type metadata accessor for Logger();
                __swift_project_value_buffer(v28, (uint64_t)static Logger.executor);
                (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
                unint64_t v29 = Logger.logObject.getter();
                os_log_type_t v30 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(v29, v30))
                {
                  BOOL v31 = (uint8_t *)swift_slowAlloc();
                  uint64_t v32 = swift_slowAlloc();
                  uint64_t v39 = v32;
                  *(_DWORD *)BOOL v31 = 136315138;
                  v38[1] = v31 + 4;
                  lazy protocol witness table accessor for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType((unint64_t *)&lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate, MEMORY[0x1E4FA3DB8]);
                  uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
                  v38[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v39);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  char v35 = *(void (**)(char *, uint64_t))(v7 + 8);
                  v35(v10, v6);
                  _os_log_impl(&dword_1B9C64000, v29, v30, "HomeAutomationAffinityScorer - [Override] USO entity spans satisfy condition:\n(GeneralNamespaceMatches || ExactNameSpaceMatch) && HasSRRMatch %s", v31, 0xCu);
                  uint64_t v22 = 1;
                  swift_arrayDestroy();
                  MEMORY[0x1BA9E48C0](v32, -1, -1);
                  MEMORY[0x1BA9E48C0](v31, -1, -1);

                  v35(v12, v6);
                  return v22;
                }

                os_log_type_t v36 = *(void (**)(char *, uint64_t))(v7 + 8);
                v36(v10, v6);
                v36(v12, v6);
                return 1;
              }
            }
            HomeAutomationAffinityScorer.smartHomeSalientEntity(environment:)((uint64_t)v5);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
            {
              outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, &demangling cache variable for type metadata for RRCandidate?);
              return 0;
            }
            (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
            if (one-time initialization token for executor == -1) {
              goto LABEL_27;
            }
            goto LABEL_34;
          }
        }
        else if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_8;
        }
      }
    }
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t HomeAutomationAffinityScorer.isHighScore(_:_:_:)(uint64_t a1, uint64_t a2)
{
  __int16 v3 = ~(_WORD)a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for RRCandidate();
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v39 - v12;
  if ((v3 & 0x101) != 0)
  {
    if ((~a2 & 0x1000000010000) == 0)
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Logger.executor);
      char v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v15, v16)) {
        goto LABEL_26;
      }
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      uint64_t v18 = "HomeAutomationAffinityScorer - [High] USO entity spans satisfy condition:\n"
            "(GeneralNamespaceMatches || ExactNameSpaceMatch) && PlaceHintGeneralMatches";
      goto LABEL_25;
    }
    if ((a2 & 0x1000000) != 0)
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      __swift_project_value_buffer(v26, (uint64_t)static Logger.executor);
      char v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v15, v16)) {
        goto LABEL_26;
      }
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      uint64_t v18 = "HomeAutomationAffinityScorer - [High] USO entity spans satisfy condition:\nHomeKitEntityType.ExactMatch";
      goto LABEL_25;
    }
    uint64_t v20 = v11;
    uint64_t v21 = UsoTask.arguments.getter();
    if (*(void *)(v21 + 16))
    {
      unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(0x636E657265666572, 0xE900000000000065);
      if (v23)
      {
        unint64_t v24 = *(void *)(*(void *)(v21 + 56) + 8 * v22);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v24 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v38)
          {
LABEL_16:
            if ((v24 & 0xC000000000000001) != 0)
            {
              MEMORY[0x1BA9E3990](0, v24);
            }
            else
            {
              if (!*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
                goto LABEL_41;
              }
              swift_retain();
            }
            swift_bridgeObjectRelease();
            uint64_t v25 = *(void *)(dispatch thunk of UsoValue.getEntitySpans()() + 16);
            swift_bridgeObjectRelease();
            if (v25)
            {
              swift_release();
              return 0;
            }
            HomeAutomationAffinityScorer.smartHomeSalientEntity(environment:)((uint64_t)v6);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v6, 1, v7) == 1)
            {
              swift_release();
              outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for RRCandidate?);
              return 0;
            }
            (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v13, v6, v7);
            if (one-time initialization token for executor == -1)
            {
LABEL_34:
              uint64_t v29 = type metadata accessor for Logger();
              __swift_project_value_buffer(v29, (uint64_t)static Logger.executor);
              (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v10, v13, v7);
              os_log_type_t v30 = Logger.logObject.getter();
              os_log_type_t v31 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v30, v31))
              {
                uint64_t v32 = (uint8_t *)swift_slowAlloc();
                uint64_t v40 = swift_slowAlloc();
                uint64_t v42 = v40;
                *(_DWORD *)uint64_t v32 = 136315138;
                uint64_t v39 = v32 + 4;
                lazy protocol witness table accessor for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType((unint64_t *)&lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate, MEMORY[0x1E4FA3DB8]);
                uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
                uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v42);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                char v35 = *(void (**)(char *, uint64_t))(v20 + 8);
                v35(v10, v7);
                _os_log_impl(&dword_1B9C64000, v30, v31, "HomeAutomationAffinityScorer - [High] Found salient HA entity %s", v32, 0xCu);
                uint64_t v27 = 1;
                uint64_t v36 = v40;
                swift_arrayDestroy();
                MEMORY[0x1BA9E48C0](v36, -1, -1);
                MEMORY[0x1BA9E48C0](v32, -1, -1);

                swift_release();
                v35(v13, v7);
                return v27;
              }

              swift_release();
              uint64_t v37 = *(void (**)(char *, uint64_t))(v20 + 8);
              v37(v10, v7);
              v37(v13, v7);
              return 1;
            }
LABEL_41:
            swift_once();
            goto LABEL_34;
          }
        }
        else if (*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_16;
        }
      }
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
  char v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v15, v16)) {
    goto LABEL_26;
  }
  uint64_t v17 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v17 = 0;
  uint64_t v18 = "HomeAutomationAffinityScorer - [High] USO entity spans satisfy condition:\n"
        "GeneralNamespaceMatches && ExactNameSpaceMatch";
LABEL_25:
  _os_log_impl(&dword_1B9C64000, v15, v16, v18, v17, 2u);
  MEMORY[0x1BA9E48C0](v17, -1, -1);
LABEL_26:

  return 1;
}

BOOL UsoEntitySpan.anyPropertiesKeyMatchAny(value:)(uint64_t a1)
{
  uint64_t v28 = type metadata accessor for SpanProperty();
  uint64_t v2 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = UsoEntitySpan.properties.getter();
  int64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v25 = a1;
    uint64_t v29 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
    uint64_t v7 = v2 + 16;
    uint64_t v9 = *(unsigned __int8 *)(v7 + 64);
    uint64_t v24 = v5;
    uint64_t v10 = v5 + ((v9 + 32) & ~v9);
    uint64_t v26 = *(void *)(v7 + 56);
    uint64_t v27 = v8;
    uint64_t v11 = (void (**)(char *, uint64_t))(v7 - 8);
    do
    {
      uint64_t v12 = v28;
      uint64_t v13 = v7;
      v27(v4, v10, v28);
      uint64_t v14 = SpanProperty.key.getter();
      uint64_t v16 = v15;
      (*v11)(v4, v12);
      uint64_t v17 = v29;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1);
        uint64_t v17 = v29;
      }
      unint64_t v19 = *(void *)(v17 + 16);
      unint64_t v18 = *(void *)(v17 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        uint64_t v17 = v29;
      }
      *(void *)(v17 + 16) = v19 + 1;
      uint64_t v20 = v17 + 16 * v19;
      *(void *)(v20 + 32) = v14;
      *(void *)(v20 + 40) = v16;
      v10 += v26;
      --v6;
      uint64_t v7 = v13;
    }
    while (v6);
    swift_bridgeObjectRelease();
    a1 = v25;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = MEMORY[0x1E4FBC860];
  }
  uint64_t v21 = specialized Set.init<A>(_:)(v17);
  swift_bridgeObjectRelease();
  char v22 = specialized Set.isDisjoint(with:)(v21, a1);
  swift_bridgeObjectRelease();
  return (v22 & 1) == 0;
}

BOOL UsoEntitySpan.anyPropertiesValueMatchAny(value:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SpanProperty();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = UsoEntitySpan.properties.getter();
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    v21[1] = v6;
    uint64_t v22 = a1;
    uint64_t v9 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    uint64_t v8 = v3 + 16;
    unint64_t v10 = v6 + ((*(unsigned __int8 *)(v8 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 64));
    uint64_t v24 = *(void *)(v8 + 56);
    uint64_t v25 = v9;
    uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v23 = v8;
    v9(v5, v10, v2);
    while (1)
    {
      uint64_t v13 = SpanProperty.valueString.getter();
      uint64_t v15 = v14;
      (*(void (**)(char *, uint64_t))(v8 - 8))(v5, v2);
      if (v15)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
        }
        unint64_t v17 = v11[2];
        unint64_t v16 = v11[3];
        if (v17 >= v16 >> 1) {
          uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v11);
        }
        id v11[2] = v17 + 1;
        uint64_t v12 = &v11[2 * v17];
        v12[4] = v13;
        v12[5] = v15;
      }
      v10 += v24;
      if (!--v7) {
        break;
      }
      v25(v5, v10, v2);
    }
    swift_bridgeObjectRelease();
    a1 = v22;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v18 = specialized Set.init<A>(_:)((uint64_t)v11);
  swift_bridgeObjectRelease();
  char v19 = specialized Set.isDisjoint(with:)(v18, a1);
  swift_bridgeObjectRelease();
  return (v19 & 1) == 0;
}

uint64_t static SpanMatchAccuracy.from(matchInfo:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t matched = type metadata accessor for MatchInfo();
  uint64_t v5 = *(void *)(matched - 8);
  MEMORY[0x1F4188790](matched);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for MatchInfo.MatchSignals();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static MatchInfo.MatchSignals.partialMatch.getter();
  char v12 = MatchInfo.hasMatchSignals(_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v9 + 8);
  v13(v11, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, matched);
  if (v12)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, matched);
    char v15 = 1;
  }
  else
  {
    static MatchInfo.MatchSignals.approximateMatch.getter();
    char v16 = MatchInfo.hasMatchSignals(_:)();
    v13(v11, v8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, matched);
    if (v16)
    {
      char v15 = 1;
    }
    else
    {
      static MatchInfo.MatchSignals.aliasMatch.getter();
      char v17 = MatchInfo.hasMatchSignals(_:)();
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v13)(v11, v8);
      if (v17) {
        char v15 = 3;
      }
      else {
        char v15 = 0;
      }
    }
  }
  *a2 = v15;
  return result;
}

uint64_t SpanMatchAccuracy.rawValue.getter()
{
  return 4 - *v0;
}

uint64_t UsoEntitySpan.anyPropertiesKeyAndValueMatchAny(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = a3;
  uint64_t v5 = type metadata accessor for SpanProperty();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = UsoEntitySpan.properties.getter();
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
    v22[1] = v9;
    uint64_t v12 = v9 + ((v11 + 32) & ~v11);
    uint64_t v24 = *(void *)(v6 + 72);
    uint64_t v13 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v14 = (void (**)(char *, uint64_t))(v6 + 8);
    do
    {
      if (SpanProperty.key.getter() == a1 && v15 == a2)
      {
        swift_bridgeObjectRelease();
        (*v13)(v8, v12, v5);
      }
      else
      {
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        (*v13)(v8, v12, v5);
        if ((v16 & 1) == 0)
        {
          (*v14)(v8, v5);
          goto LABEL_4;
        }
      }
      uint64_t v17 = SpanProperty.valueString.getter();
      if (v18)
      {
        uint64_t v19 = v18;
      }
      else
      {
        uint64_t v17 = 0;
        uint64_t v19 = 0xE000000000000000;
      }
      char v20 = specialized Set.contains(_:)(v17, v19, v23);
      swift_bridgeObjectRelease();
      (*v14)(v8, v5);
      if (v20)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
LABEL_4:
      v12 += v24;
      --v10;
    }
    while (v10);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t HomeAutomationAffinityScorer.smartHomeSalientEntity(environment:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for RRCandidate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  SiriEnvironment.salientEntitiesProvider.getter();
  uint64_t v6 = dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
  swift_release();
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v16 = v3;
    uint64_t v17 = a1;
    uint64_t v10 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    uint64_t v8 = v3 + 16;
    uint64_t v9 = v10;
    unint64_t v11 = v6 + ((*(unsigned __int8 *)(v8 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 64));
    uint64_t v12 = *(void *)(v8 + 56);
    swift_bridgeObjectRetain();
    while (1)
    {
      v9(v5, v11, v2);
      if (closure #1 in HomeAutomationAffinityScorer.smartHomeSalientEntity(environment:)((uint64_t)v5)) {
        break;
      }
      (*(void (**)(char *, uint64_t))(v8 - 8))(v5, v2);
      v11 += v12;
      if (!--v7)
      {
        swift_bridgeObjectRelease();
        uint64_t v13 = 1;
        uint64_t v3 = v16;
        a1 = v17;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v3 = v16;
    a1 = v17;
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v17, v5, v2);
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = 1;
  }
LABEL_8:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(a1, v13, 1, v2);
  return swift_bridgeObjectRelease();
}

Swift::Bool __swiftcall UsoEntitySpan.hasNLFuzzyMatch()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PayloadAttachmentInfo?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PayloadAttachmentInfo.AttachmentType();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v18 - v11;
  UsoEntitySpan.payloadAttachmentInfo.getter();
  uint64_t v13 = type metadata accessor for PayloadAttachmentInfo();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v2, 1, v13) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v2, &demangling cache variable for type metadata for PayloadAttachmentInfo?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  }
  else
  {
    PayloadAttachmentInfo.attachmentType.getter();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v2, v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v5, v6);
      (*(void (**)(char *, void, uint64_t))(v7 + 104))(v10, *MEMORY[0x1E4FA30A0], v6);
      lazy protocol witness table accessor for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType(&lazy protocol witness table cache variable for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType, MEMORY[0x1E4FA30A8]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      Swift::Bool v15 = v18[1] == v18[0];
      uint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
      v16(v10, v6);
      v16(v12, v6);
      return v15;
    }
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  return 0;
}

Swift::Bool __swiftcall UsoEntitySpan.hasVocabFuzzyMatch()()
{
  uint64_t matched = type metadata accessor for MatchInfo.MatchSignals();
  uint64_t v1 = *(void *)(matched - 8);
  MEMORY[0x1F4188790](matched);
  uint64_t v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MatchInfo?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for MatchInfo();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v24 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v24 - v15;
  UsoEntitySpan.matchInfo.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for MatchInfo?);
    char v17 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v16, v6, v7);
    static MatchInfo.MatchSignals.approximateMatch.getter();
    char v18 = MatchInfo.hasMatchSignals(_:)();
    uint64_t v19 = *(void (**)(char *, uint64_t))(v1 + 8);
    uint64_t v26 = v1 + 8;
    uint64_t v27 = matched;
    v19(v3, matched);
    char v20 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v20(v14, v16, v7);
    if (v18)
    {
      uint64_t v21 = *(void (**)(char *, uint64_t))(v8 + 8);
      v21(v14, v7);
      v20(v11, v16, v7);
    }
    else
    {
      static MatchInfo.MatchSignals.partialMatch.getter();
      char v22 = MatchInfo.hasMatchSignals(_:)();
      uint64_t v25 = v19;
      v19(v3, v27);
      uint64_t v21 = *(void (**)(char *, uint64_t))(v8 + 8);
      v21(v14, v7);
      v20(v11, v16, v7);
      if ((v22 & 1) == 0)
      {
        static MatchInfo.MatchSignals.aliasMatch.getter();
        char v17 = MatchInfo.hasMatchSignals(_:)();
        v25(v3, v27);
        v21(v11, v7);
        v21(v16, v7);
        return v17 & 1;
      }
    }
    v21(v11, v7);
    v21(v16, v7);
    char v17 = 1;
  }
  return v17 & 1;
}

Swift::Bool __swiftcall UsoEntitySpan.hasExactMatch()()
{
  uint64_t v0 = type metadata accessor for PayloadAttachmentInfo.AttachmentType();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v65 = v0;
  uint64_t v66 = v1;
  MEMORY[0x1F4188790](v0);
  uint64_t v58 = (char *)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PayloadAttachmentInfo.AttachmentType?, PayloadAttachmentInfo.AttachmentType?));
  MEMORY[0x1F4188790](v64);
  uint64_t v61 = (uint64_t)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t matched = type metadata accessor for MatchInfo.MatchSignals();
  uint64_t v67 = *(void *)(matched - 8);
  MEMORY[0x1F4188790](matched);
  char v62 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PayloadAttachmentInfo?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v54 - v13;
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  char v17 = (char *)&v54 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v54 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MatchInfo?);
  MEMORY[0x1F4188790](v20 - 8);
  char v22 = (char *)&v54 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for MatchInfo();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v54 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  UsoEntitySpan.matchInfo.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
  {
    uint64_t v27 = &demangling cache variable for type metadata for MatchInfo?;
    uint64_t v28 = (uint64_t)v22;
LABEL_3:
    outlined destroy of ReferenceResolutionClientProtocol?(v28, v27);
LABEL_12:
    char v49 = 0;
    return v49 & 1;
  }
  uint64_t v59 = v14;
  char v60 = v26;
  uint64_t v56 = v17;
  uint64_t v54 = v11;
  uint64_t v29 = v66;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v26, v22, v23);
  UsoEntitySpan.payloadAttachmentInfo.getter();
  uint64_t v30 = type metadata accessor for PayloadAttachmentInfo();
  uint64_t v31 = *(void *)(v30 - 8);
  int v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48))(v7, 1, v30);
  uint64_t v57 = v23;
  uint64_t v55 = v24;
  if (v32 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for PayloadAttachmentInfo?);
    uint64_t v33 = v29;
    uint64_t v34 = (uint64_t)v19;
    char v35 = v19;
    uint64_t v36 = v65;
    (*(void (**)(char *, uint64_t, uint64_t))(v29 + 56))(v35, 1, 1);
  }
  else
  {
    uint64_t v34 = (uint64_t)v19;
    PayloadAttachmentInfo.attachmentType.getter();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v30);
    uint64_t v36 = v65;
    uint64_t v33 = v29;
  }
  uint64_t v37 = (uint64_t)v56;
  uint64_t v39 = (uint64_t)v59;
  uint64_t v38 = v60;
  uint64_t v41 = matched;
  uint64_t v40 = v64;
  uint64_t v42 = v62;
  static MatchInfo.MatchSignals.exactMatch.getter();
  char v43 = MatchInfo.hasMatchSignals(_:)();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v42, v41);
  outlined init with copy of ReferenceResolutionClientProtocol?(v34, v37, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  if ((v43 & 1) == 0)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v37, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    outlined destroy of ReferenceResolutionClientProtocol?(v34, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v38, v57);
    goto LABEL_12;
  }
  uint64_t v44 = v36;
  (*(void (**)(uint64_t, void, uint64_t))(v33 + 104))(v39, *MEMORY[0x1E4FA3098], v36);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56))(v39, 0, 1, v36);
  uint64_t v45 = v61;
  uint64_t v46 = v61 + *(int *)(v40 + 48);
  outlined init with copy of ReferenceResolutionClientProtocol?(v37, v61, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v39, v46, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  uint64_t v47 = v33;
  BOOL v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  if (v48(v45, 1, v44) != 1)
  {
    uint64_t v51 = (uint64_t)v54;
    outlined init with copy of ReferenceResolutionClientProtocol?(v45, (uint64_t)v54, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    if (v48(v46, 1, v44) != 1)
    {
      uint64_t v52 = v58;
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v58, v46, v44);
      lazy protocol witness table accessor for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType((unint64_t *)&lazy protocol witness table cache variable for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType, MEMORY[0x1E4FA30A8]);
      char v49 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v53 = *(void (**)(char *, uint64_t))(v47 + 8);
      v53(v52, v44);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v59, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      outlined destroy of ReferenceResolutionClientProtocol?(v37, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      outlined destroy of ReferenceResolutionClientProtocol?(v34, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v60, v57);
      v53((char *)v51, v44);
      outlined destroy of ReferenceResolutionClientProtocol?(v45, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      return v49 & 1;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v59, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    outlined destroy of ReferenceResolutionClientProtocol?(v37, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    outlined destroy of ReferenceResolutionClientProtocol?(v34, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v60, v57);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v51, v44);
    goto LABEL_16;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v39, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  outlined destroy of ReferenceResolutionClientProtocol?(v37, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  outlined destroy of ReferenceResolutionClientProtocol?(v34, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v60, v57);
  if (v48(v46, 1, v44) != 1)
  {
LABEL_16:
    uint64_t v27 = &demangling cache variable for type metadata for (PayloadAttachmentInfo.AttachmentType?, PayloadAttachmentInfo.AttachmentType?);
    uint64_t v28 = v45;
    goto LABEL_3;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v45, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  char v49 = 1;
  return v49 & 1;
}

Swift::Bool __swiftcall UsoEntitySpan.anyPropertiesKeyMatchAny(value:)(Swift::String value)
{
  object = value._object;
  uint64_t countAndFlagsBits = value._countAndFlagsBits;
  uint64_t v3 = type metadata accessor for SpanProperty();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = UsoEntitySpan.properties.getter();
  int64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v24 = countAndFlagsBits;
    uint64_t v25 = object;
    uint64_t v29 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v9 = v4 + 16;
    uint64_t v11 = *(unsigned __int8 *)(v9 + 64);
    v23[1] = v7;
    uint64_t v12 = v7 + ((v11 + 32) & ~v11);
    uint64_t v26 = *(void *)(v9 + 56);
    uint64_t v27 = v10;
    uint64_t v28 = v9;
    do
    {
      v27(v6, v12, v3);
      uint64_t v13 = SpanProperty.key.getter();
      uint64_t v15 = v14;
      (*(void (**)(char *, uint64_t))(v9 - 8))(v6, v3);
      uint64_t v16 = v29;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1);
        uint64_t v16 = v29;
      }
      unint64_t v18 = *(void *)(v16 + 16);
      unint64_t v17 = *(void *)(v16 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
        uint64_t v16 = v29;
      }
      *(void *)(v16 + 16) = v18 + 1;
      uint64_t v19 = v16 + 16 * v18;
      *(void *)(v19 + 32) = v13;
      *(void *)(v19 + 40) = v15;
      v12 += v26;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = v24;
    object = v25;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = MEMORY[0x1E4FBC860];
  }
  uint64_t v20 = specialized Set.init<A>(_:)(v16);
  swift_bridgeObjectRelease();
  char v21 = specialized Set.contains(_:)(countAndFlagsBits, (uint64_t)object, v20);
  swift_bridgeObjectRelease();
  return v21 & 1;
}

uint64_t closure #1 in HomeAutomationAffinityScorer.smartHomeSalientEntity(environment:)(uint64_t a1)
{
  uint64_t v85 = type metadata accessor for SpanProperty();
  uint64_t v66 = *(void *)(v85 - 8);
  MEMORY[0x1F4188790](v85);
  uint64_t v84 = (char *)v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for IdentifierNamespace();
  uint64_t v4 = *(void *)(v78 - 8);
  MEMORY[0x1F4188790](v78);
  uint64_t v77 = (char *)v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UsoEntitySpan();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v65 = (char *)v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RREntity();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  char v60 = (char *)v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v58 - v13;
  uint64_t v63 = a1;
  RRCandidate.entity.getter();
  RREntity.usoEntity.getter();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v62 = v9;
  uint64_t v61 = v10 + 8;
  uint64_t v59 = v15;
  v15(v14, v9);
  uint64_t v16 = UsoEntity.attributes.getter();
  swift_release();
  if (*(void *)(v16 + 16)
    && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(0x73656D616ELL, 0xE500000000000000), (v18 & 1) != 0))
  {
    uint64_t v19 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v19 & 0xC000000000000001) != 0)
    {
      MEMORY[0x1BA9E3990](0, v19);
    }
    else
    {
      if (!*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return result;
      }
      swift_retain();
    }
    swift_bridgeObjectRelease();
    uint64_t v21 = dispatch thunk of UsoValue.getEntitySpans()();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = MEMORY[0x1E4FBC860];
  }
  uint64_t v76 = *(void *)(v21 + 16);
  if (v76)
  {
    v58[1] = v1;
    uint64_t v23 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v22 = v7 + 16;
    char v74 = v23;
    unint64_t v73 = v21 + ((*(unsigned __int8 *)(v22 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 64));
    unsigned int v72 = *MEMORY[0x1E4FA3060];
    uint64_t v71 = (void (**)(char *, void, uint64_t))(v4 + 104);
    uint64_t v70 = (void (**)(char *, uint64_t))(v4 + 8);
    uint64_t v82 = (void (**)(char *, uint64_t))(v66 + 8);
    uint64_t v83 = v66 + 16;
    unint64_t v69 = (void (**)(char *, uint64_t))(v22 - 8);
    uint64_t v75 = v22;
    uint64_t v68 = *(void *)(v22 + 56);
    v58[0] = v21;
    swift_bridgeObjectRetain();
    uint64_t v24 = 0;
    long long v67 = xmmword_1BA04FD90;
    uint64_t v25 = v65;
    uint64_t v64 = v6;
    while (1)
    {
      v74(v25, v73 + v68 * v24, v6);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v67;
      uint64_t v27 = v77;
      uint64_t v28 = v78;
      (*v71)(v77, v72, v78);
      uint64_t v29 = IdentifierNamespace.rawValue.getter();
      uint64_t v31 = v30;
      (*v70)(v27, v28);
      *(void *)(inited + 32) = v29;
      *(void *)(inited + 40) = v31;
      uint64_t v81 = *(void *)(inited + 16) ? specialized Set.init(_nonEmptyArrayLiteral:)(inited) : MEMORY[0x1E4FBC870];
      swift_setDeallocating();
      swift_arrayDestroy();
      uint64_t v32 = UsoEntitySpan.properties.getter();
      int64_t v33 = *(void *)(v32 + 16);
      if (v33)
      {
        uint64_t v80 = v24;
        Swift::Int v87 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33, 0);
        uint64_t v34 = *(unsigned __int8 *)(v66 + 80);
        uint64_t v79 = v32;
        uint64_t v35 = v32 + ((v34 + 32) & ~v34);
        uint64_t v86 = *(void *)(v66 + 72);
        uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
        do
        {
          uint64_t v37 = v84;
          uint64_t v38 = v85;
          v36(v84, v35, v85);
          uint64_t v39 = SpanProperty.key.getter();
          uint64_t v41 = v40;
          (*v82)(v37, v38);
          Swift::Int v42 = v87;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v42 + 16) + 1, 1);
            Swift::Int v42 = v87;
          }
          unint64_t v44 = *(void *)(v42 + 16);
          unint64_t v43 = *(void *)(v42 + 24);
          if (v44 >= v43 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1);
            Swift::Int v42 = v87;
          }
          *(void *)(v42 + 16) = v44 + 1;
          Swift::Int v45 = v42 + 16 * v44;
          *(void *)(v45 + 32) = v39;
          *(void *)(v45 + 40) = v41;
          v35 += v86;
          --v33;
        }
        while (v33);
        swift_bridgeObjectRelease();
        uint64_t v6 = v64;
        uint64_t v25 = v65;
        uint64_t v24 = v80;
      }
      else
      {
        swift_bridgeObjectRelease();
        Swift::Int v42 = MEMORY[0x1E4FBC860];
      }
      uint64_t v88 = Set.init(minimumCapacity:)();
      uint64_t v46 = *(void *)(v42 + 16);
      if (v46)
      {
        uint64_t v47 = (Swift::Int *)(v42 + 40);
        do
        {
          Swift::Int v49 = *(v47 - 1);
          Swift::Int v48 = *v47;
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(&v87, v49, v48);
          swift_bridgeObjectRelease();
          v47 += 2;
          --v46;
        }
        while (v46);
      }
      swift_bridgeObjectRelease();
      char v50 = specialized Set.isDisjoint(with:)(v88, v81);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*v69)(v25, v6);
      if ((v50 & 1) == 0) {
        break;
      }
      if (++v24 == v76)
      {
        swift_bridgeObjectRelease_n();
        char v51 = 0;
        goto LABEL_30;
      }
    }
    swift_bridgeObjectRelease_n();
    char v51 = 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    char v51 = 0;
  }
LABEL_30:
  uint64_t v52 = v60;
  RRCandidate.entity.getter();
  uint64_t v53 = RREntity.appBundleId.getter();
  uint64_t v55 = v54;
  v59(v52, v62);
  if (v53 == 0xD00000000000001CLL && v55 == 0x80000001BA069B80)
  {
    swift_bridgeObjectRelease();
    char v56 = 1;
  }
  else
  {
    char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v56 = v51 | v57;
  }
  return v56 & 1;
}

uint64_t specialized Set.isDisjoint(with:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 1;
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return 1;
  }
  if (v2 >= v3) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = a2;
  }
  uint64_t v31 = v4 + 56;
  if (v2 >= v3) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = a1;
  }
  uint64_t v6 = 1 << *(unsigned char *)(v4 + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v4 + 56);
  int64_t v32 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v33 = v4;
  uint64_t v9 = v5 + 56;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    while (v8)
    {
      unint64_t v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v13 = v12 | (v11 << 6);
      if (*(void *)(v5 + 16)) {
        goto LABEL_29;
      }
    }
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    if (v14 >= v32) {
      goto LABEL_44;
    }
    unint64_t v15 = *(void *)(v31 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v32) {
        goto LABEL_44;
      }
      unint64_t v15 = *(void *)(v31 + 8 * v11);
      if (!v15) {
        break;
      }
    }
LABEL_28:
    unint64_t v8 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v11 << 6);
    if (*(void *)(v5 + 16))
    {
LABEL_29:
      unint64_t v17 = (uint64_t *)(*(void *)(v33 + 48) + 16 * v13);
      uint64_t v19 = *v17;
      uint64_t v18 = v17[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v20 = Hasher._finalize()();
      uint64_t v21 = -1 << *(unsigned char *)(v5 + 32);
      unint64_t v22 = v20 & ~v21;
      if ((*(void *)(v9 + ((v22 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v22))
      {
        uint64_t v23 = *(void *)(v5 + 48);
        uint64_t v24 = (void *)(v23 + 16 * v22);
        BOOL v25 = *v24 == v19 && v24[1] == v18;
        if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
LABEL_43:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          return 0;
        }
        uint64_t v26 = ~v21;
        for (unint64_t i = v22 + 1; ; unint64_t i = v28 + 1)
        {
          uint64_t v28 = i & v26;
          if (((*(void *)(v9 + (((i & v26) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v26)) & 1) == 0) {
            break;
          }
          uint64_t v29 = (void *)(v23 + 16 * v28);
          BOOL v30 = *v29 == v19 && v29[1] == v18;
          if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_43;
          }
        }
      }
      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  int64_t v16 = v14 + 2;
  if (v16 >= v32)
  {
LABEL_44:
    swift_release();
    swift_bridgeObjectRelease();
    return 1;
  }
  unint64_t v15 = *(void *)(v31 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_28;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v32) {
      goto LABEL_44;
    }
    unint64_t v15 = *(void *)(v31 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_28;
    }
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t UsoEntitySpan.containsSubstring(in:substring:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  LOBYTE(a2) = specialized Sequence.contains(where:)(a1, a2, a3);
  swift_bridgeObjectRelease();
  return a2 & 1;
}

Swift::Bool __swiftcall UsoEntitySpan.anyPropertiesValueContainAny(value:)(Swift::String value)
{
  object = value._object;
  uint64_t countAndFlagsBits = value._countAndFlagsBits;
  uint64_t v3 = type metadata accessor for SpanProperty();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = UsoEntitySpan.properties.getter();
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v24 = countAndFlagsBits;
    BOOL v25 = object;
    uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v9 = v4 + 16;
    uint64_t v11 = *(unsigned __int8 *)(v9 + 64);
    v23[1] = v7;
    uint64_t v12 = v7 + ((v11 + 32) & ~v11);
    uint64_t v27 = *(void *)(v9 + 56);
    uint64_t v28 = v10;
    unint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v26 = v9;
    v10(v6, v12, v3);
    while (1)
    {
      uint64_t v15 = SpanProperty.valueString.getter();
      uint64_t v17 = v16;
      (*(void (**)(char *, uint64_t))(v9 - 8))(v6, v3);
      if (v17)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
        }
        unint64_t v19 = v13[2];
        unint64_t v18 = v13[3];
        if (v19 >= v18 >> 1) {
          unint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v13);
        }
        v13[2] = v19 + 1;
        int64_t v14 = &v13[2 * v19];
        v14[4] = v15;
        v14[5] = v17;
      }
      v12 += v27;
      if (!--v8) {
        break;
      }
      v28(v6, v12, v3);
    }
    swift_bridgeObjectRelease();
    uint64_t countAndFlagsBits = v24;
    object = v25;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v13 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v20 = specialized Set.init<A>(_:)((uint64_t)v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  char v21 = specialized Sequence.contains(where:)(v20, countAndFlagsBits, (uint64_t)object);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v21 & 1;
}

Swift::Bool __swiftcall UsoEntitySpan.anyPropertiesMatch(key:value:)(Swift::String key, Swift::String value)
{
  object = value._object;
  uint64_t countAndFlagsBits = value._countAndFlagsBits;
  unint64_t v2 = key._object;
  uint64_t v3 = key._countAndFlagsBits;
  uint64_t v4 = type metadata accessor for SpanProperty();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = UsoEntitySpan.properties.getter();
  uint64_t v9 = *(void *)(v8 + 16);
  if (!v9)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v20 = v8;
  uint64_t v11 = v8 + ((v10 + 32) & ~v10);
  uint64_t v23 = *(void *)(v5 + 72);
  uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  unint64_t v13 = (void (**)(char *, uint64_t))(v5 + 8);
  while (1)
  {
    if (SpanProperty.key.getter() == v3 && v14 == v2)
    {
      swift_bridgeObjectRelease();
      (*v12)(v7, v11, v4);
    }
    else
    {
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*v12)(v7, v11, v4);
      if ((v15 & 1) == 0) {
        goto LABEL_3;
      }
    }
    uint64_t v16 = SpanProperty.valueString.getter();
    if (!v17)
    {
LABEL_3:
      (*v13)(v7, v4);
      goto LABEL_4;
    }
    if (v16 == countAndFlagsBits && v17 == object) {
      break;
    }
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    (*v13)(v7, v4);
    swift_bridgeObjectRelease();
    if (v18) {
      goto LABEL_16;
    }
LABEL_4:
    v11 += v23;
    if (!--v9) {
      goto LABEL_14;
    }
  }
  (*v13)(v7, v4);
  swift_bridgeObjectRelease();
LABEL_16:
  swift_bridgeObjectRelease();
  return 1;
}

Swift::Bool __swiftcall UsoEntitySpan.isAttachmentFull()()
{
  uint64_t v0 = type metadata accessor for PayloadAttachmentInfo.AttachmentType();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v28 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PayloadAttachmentInfo.AttachmentType?, PayloadAttachmentInfo.AttachmentType?));
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PayloadAttachmentInfo?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v29 = (uint64_t)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  int64_t v14 = (char *)&v28 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v28 - v15;
  UsoEntitySpan.payloadAttachmentInfo.getter();
  uint64_t v17 = type metadata accessor for PayloadAttachmentInfo();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v8, 1, v17) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for PayloadAttachmentInfo?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v16, 1, 1, v0);
  }
  else
  {
    PayloadAttachmentInfo.attachmentType.getter();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v8, v17);
  }
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v14, *MEMORY[0x1E4FA3098], v0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v1 + 56))(v14, 0, 1, v0);
  uint64_t v19 = (uint64_t)&v5[*(int *)(v3 + 48)];
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v16, (uint64_t)v5, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v14, v19, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v20((uint64_t)v5, 1, v0) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    int v21 = v20(v19, 1, v0);
    if (v21 == 1) {
      unint64_t v22 = &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?;
    }
    else {
      unint64_t v22 = &demangling cache variable for type metadata for (PayloadAttachmentInfo.AttachmentType?, PayloadAttachmentInfo.AttachmentType?);
    }
    if (v21 == 1) {
      char v23 = -1;
    }
    else {
      char v23 = 0;
    }
  }
  else
  {
    uint64_t v24 = v29;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v5, v29, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
    if (v20(v19, 1, v0) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v24, v0);
      char v23 = 0;
      unint64_t v22 = &demangling cache variable for type metadata for (PayloadAttachmentInfo.AttachmentType?, PayloadAttachmentInfo.AttachmentType?);
    }
    else
    {
      BOOL v25 = v28;
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v28, v19, v0);
      lazy protocol witness table accessor for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType((unint64_t *)&lazy protocol witness table cache variable for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType, MEMORY[0x1E4FA30A8]);
      char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v26 = *(void (**)(char *, uint64_t))(v1 + 8);
      v26(v25, v0);
      unint64_t v22 = &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      v26((char *)v24, v0);
    }
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, v22);
  return v23 & 1;
}

unint64_t SpanMatchAccuracy.description.getter()
{
  unint64_t result = 0x746365667265702ELL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6C6169747261702ELL;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0x614D7361696C612ELL;
      break;
    default:
      return result;
  }
  return result;
}

BOOL static SpanMatchAccuracy.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return 4 - (unint64_t)*a1 < 4 - (unint64_t)*a2;
}

SiriKitRuntime::SpanMatchAccuracy_optional __swiftcall SpanMatchAccuracy.init(rawValue:)(Swift::Int rawValue)
{
  if ((unint64_t)rawValue >= 5) {
    char v2 = 4;
  }
  else {
    char v2 = 4 - rawValue;
  }
  *uint64_t v1 = v2;
  return (SiriKitRuntime::SpanMatchAccuracy_optional)rawValue;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SpanMatchAccuracy(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 == *a1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SpanMatchAccuracy()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(4 - v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SpanMatchAccuracy()
{
  Hasher._combine(_:)(4 - *v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SpanMatchAccuracy()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(4 - v1);
  return Hasher._finalize()();
}

SiriKitRuntime::SpanMatchAccuracy_optional protocol witness for RawRepresentable.init(rawValue:) in conformance SpanMatchAccuracy(Swift::Int *a1)
{
  return SpanMatchAccuracy.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SpanMatchAccuracy(void *a1@<X8>)
{
  *a1 = 4 - *v1;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance SpanMatchAccuracy()
{
  unint64_t result = 0x746365667265702ELL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6C6169747261702ELL;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0x614D7361696C612ELL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t specialized Sequence.contains(where:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v26 = a1 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v8;
  int64_t v27 = (unint64_t)(v9 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v13 = 0;
  while (v11)
  {
    unint64_t v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    unint64_t v15 = v14 | (v13 << 6);
LABEL_5:
    uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v15);
    uint64_t v17 = v16[1];
    uint64_t v30 = *v16;
    uint64_t v31 = v17;
    uint64_t v28 = a2;
    uint64_t v29 = v32;
    uint64_t v18 = type metadata accessor for Locale();
    uint64_t v19 = 1;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v7, 1, 1, v18);
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain();
    StringProtocol.range<A>(of:options:range:locale:)();
    char v21 = v20;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for Locale?);
    uint64_t result = swift_bridgeObjectRelease();
    if ((v21 & 1) == 0) {
      goto LABEL_24;
    }
  }
  int64_t v22 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v22 >= v27) {
    goto LABEL_23;
  }
  unint64_t v23 = *(void *)(v26 + 8 * v22);
  ++v13;
  if (v23) {
    goto LABEL_22;
  }
  int64_t v13 = v22 + 1;
  if (v22 + 1 >= v27) {
    goto LABEL_23;
  }
  unint64_t v23 = *(void *)(v26 + 8 * v13);
  if (v23) {
    goto LABEL_22;
  }
  int64_t v13 = v22 + 2;
  if (v22 + 2 >= v27) {
    goto LABEL_23;
  }
  unint64_t v23 = *(void *)(v26 + 8 * v13);
  if (v23) {
    goto LABEL_22;
  }
  int64_t v13 = v22 + 3;
  if (v22 + 3 >= v27) {
    goto LABEL_23;
  }
  unint64_t v23 = *(void *)(v26 + 8 * v13);
  if (v23)
  {
LABEL_22:
    unint64_t v11 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v13 << 6);
    goto LABEL_5;
  }
  int64_t v24 = v22 + 4;
  if (v24 >= v27)
  {
LABEL_23:
    uint64_t v19 = 0;
LABEL_24:
    swift_release();
    return v19;
  }
  unint64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v27) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized HomeAutomationAffinityScorer.scorePauseOrResumeSetting(usoTask:usoEntitySpans:)(uint64_t a1, uint64_t a2)
{
  uint64_t v224 = type metadata accessor for SpanProperty();
  uint64_t v217 = *(void *)(v224 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v224);
  uint64_t v226 = (char *)&v209 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v229 = (char *)&v209 - v6;
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v219 = (char *)&v209 - v8;
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v218 = (char *)&v209 - v10;
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v223 = (char *)&v209 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v222 = (char *)&v209 - v13;
  uint64_t matched = type metadata accessor for MatchInfo.MatchSignals();
  uint64_t v215 = *(void *)(matched - 8);
  MEMORY[0x1F4188790](matched);
  unint64_t v15 = (char *)&v209 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MatchInfo?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  v228 = (char *)&v209 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  v238 = (char *)&v209 - v19;
  uint64_t v20 = type metadata accessor for MatchInfo();
  uint64_t v214 = *(void *)(v20 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v20);
  long long v231 = (char *)&v209 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  v237 = (char *)&v209 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  v236 = (char *)&v209 - v26;
  MEMORY[0x1F4188790](v25);
  uint64_t v247 = (uint64_t)&v209 - v27;
  uint64_t v28 = type metadata accessor for UsoEntitySpan();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v32 = (char *)&v209 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x1F4188790](v30);
  uint64_t v213 = (char *)&v209 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v37 = (char *)&v209 - v36;
  uint64_t v38 = MEMORY[0x1F4188790](v35);
  v225 = (char *)&v209 - v39;
  uint64_t v40 = MEMORY[0x1F4188790](v38);
  v227 = (char *)&v209 - v41;
  MEMORY[0x1F4188790](v40);
  v239 = (char *)&v209 - v42;
  static UsoTask_CodegenConverter.convert(task:)();
  if (v252)
  {
    type metadata accessor for UsoTask_pause_uso_NoEntity();
    if (swift_dynamicCast()) {
      uint64_t v43 = v250;
    }
    else {
      uint64_t v43 = 0;
    }
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v251, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v43 = 0;
  }
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v252)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v251, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v47 = v229;
    if (v43)
    {
      uint64_t v211 = 0;
      goto LABEL_16;
    }
    return 5;
  }
  type metadata accessor for UsoTask_resume_uso_NoEntity();
  int v44 = swift_dynamicCast();
  uint64_t v45 = v250;
  if (v44) {
    uint64_t v46 = v250;
  }
  else {
    uint64_t v46 = 0;
  }
  if (!v43)
  {
    uint64_t v47 = v229;
    if (v46)
    {
      swift_retain();
      uint64_t v211 = v45;
      goto LABEL_16;
    }
    return 5;
  }
  uint64_t v211 = v46;
  uint64_t v47 = v229;
LABEL_16:
  uint64_t v216 = v32;
  swift_retain();
  swift_release();
  Swift::Int v48 = *(char **)(a2 + 16);
  uint64_t v49 = MEMORY[0x1E4FBC860];
  uint64_t v212 = v43;
  uint64_t v249 = v28;
  v220 = v37;
  uint64_t v221 = v29;
  uint64_t v210 = a2;
  v248 = v48;
  if (!v48) {
    goto LABEL_36;
  }
  char v51 = *(void (**)(const char *, uint64_t, uint64_t))(v29 + 16);
  uint64_t v50 = v29 + 16;
  v245 = v51;
  uint64_t v52 = a2 + ((*(unsigned __int8 *)(v50 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 64));
  uint64_t v53 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v214 + 48);
  v244 = *(char **)(v50 + 56);
  uint64_t v234 = (char *)(v214 + 32);
  v240 = (void (**)(char *, uint64_t))(v215 + 8);
  v233 = (char *)(v214 + 16);
  uint64_t v54 = (char *)(v214 + 8);
  uint64_t v246 = v50;
  v243 = (const char *)(v50 - 8);
  swift_bridgeObjectRetain();
  uint64_t v55 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v232 = (void (*)(char *, uint64_t))v54;
  uint64_t v230 = (unint64_t)v54 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  char v56 = v48;
  uint64_t v57 = (uint64_t)v238;
  uint64_t v58 = v239;
  v235 = v53;
  do
  {
    v245(v58, v52, v28);
    UsoEntitySpan.matchInfo.getter();
    if ((*v53)(v57, 1, v20) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v57, &demangling cache variable for type metadata for MatchInfo?);
      (*(void (**)(const char *, uint64_t))v243)(v58, v28);
      goto LABEL_19;
    }
    v242 = v55;
    uint64_t v59 = v247;
    (*(void (**)(uint64_t, uint64_t, uint64_t))v234)(v247, v57, v20);
    static MatchInfo.MatchSignals.partialMatch.getter();
    char v60 = MatchInfo.hasMatchSignals(_:)();
    uint64_t v61 = matched;
    uint64_t v62 = *v240;
    (*v240)(v15, matched);
    uint64_t v63 = v236;
    (*(void (**)(char *, uint64_t, uint64_t))v233)(v236, v59, v20);
    if (v60)
    {
      uint64_t v64 = *(void (**)(uint64_t, uint64_t))v232;
      (*(void (**)(char *, uint64_t))v232)(v63, v20);
      uint64_t v55 = (char *)v242;
      uint64_t v57 = (uint64_t)v238;
    }
    else
    {
      static MatchInfo.MatchSignals.approximateMatch.getter();
      char v65 = MatchInfo.hasMatchSignals(_:)();
      v62(v15, v61);
      uint64_t v66 = v61;
      uint64_t v64 = *(void (**)(uint64_t, uint64_t))v232;
      (*(void (**)(char *, uint64_t))v232)(v63, v20);
      if ((v65 & 1) == 0)
      {
        static MatchInfo.MatchSignals.aliasMatch.getter();
        uint64_t v68 = v247;
        char v69 = MatchInfo.hasMatchSignals(_:)();
        v62(v15, v66);
        v64(v68, v20);
        uint64_t v58 = v239;
        (*(void (**)(const char *, uint64_t))v243)(v239, v249);
        uint64_t v55 = (char *)v242;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if (v69) {
          uint64_t v67 = 1;
        }
        else {
          uint64_t v67 = 4;
        }
        uint64_t v57 = (uint64_t)v238;
        if (isUniquelyReferenced_nonNull_native) {
          goto LABEL_31;
        }
LABEL_34:
        uint64_t v55 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v55 + 2) + 1, 1, v55);
        goto LABEL_31;
      }
      uint64_t v57 = (uint64_t)v238;
      uint64_t v55 = (char *)v242;
    }
    v64(v247, v20);
    uint64_t v58 = v239;
    (*(void (**)(const char *, uint64_t))v243)(v239, v249);
    uint64_t v67 = 3;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_34;
    }
    uint64_t v67 = 3;
LABEL_31:
    unint64_t v72 = *((void *)v55 + 2);
    unint64_t v71 = *((void *)v55 + 3);
    if (v72 >= v71 >> 1) {
      uint64_t v55 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v71 > 1), v72 + 1, 1, v55);
    }
    *((void *)v55 + 2) = v72 + 1;
    *(void *)&v55[8 * v72 + 32] = v67;
    uint64_t v28 = v249;
    uint64_t v53 = v235;
LABEL_19:
    v52 += (uint64_t)v244;
    --v56;
  }
  while (v56);
  a2 = v210;
  swift_bridgeObjectRelease();
  uint64_t v47 = v229;
  uint64_t v37 = v220;
  uint64_t v49 = (uint64_t)v55;
  uint64_t v29 = v221;
LABEL_36:
  v239 = (const char *)specialized Sequence<>.max()(v49);
  char v74 = v73;
  swift_bridgeObjectRelease();
  uint64_t v75 = v224;
  if (v74)
  {
    swift_release();
    uint64_t v107 = 5;
    goto LABEL_188;
  }
  v238 = v15;
  uint64_t v76 = MEMORY[0x1E4FBC860];
  uint64_t v251 = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRetain();
  uint64_t v77 = v248;
  if (v248)
  {
    uint64_t v79 = *(char **)(v29 + 16);
    uint64_t v78 = v29 + 16;
    v244 = v79;
    unint64_t v80 = (*(unsigned __int8 *)(v78 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 64);
    uint64_t v81 = *(void *)(v78 + 56);
    uint64_t v246 = v20;
    uint64_t v247 = v81;
    uint64_t v232 = (void (*)(char *, uint64_t))v80;
    uint64_t v82 = a2 + v80;
    v243 = (const char *)(v214 + 48);
    v236 = (char *)(v214 + 32);
    uint64_t v83 = (void (**)(char *, uint64_t))(v215 + 8);
    v235 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v214 + 16);
    uint64_t v234 = (char *)(v78 + 16);
    v245 = (void (*)(const char *, uint64_t, uint64_t))v78;
    v242 = (const char *)(v78 - 8);
    uint64_t v84 = (void (**)(char *, uint64_t))(v214 + 8);
    v233 = (char *)((v214 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
    uint64_t v85 = v238;
    uint64_t v86 = (uint64_t)v228;
    Swift::Int v87 = v231;
    uint64_t v88 = v227;
    v240 = (void (**)(char *, uint64_t))(v215 + 8);
    uint64_t v89 = v246;
    while (1)
    {
      v248 = v77;
      ((void (*)(char *, uint64_t, uint64_t))v244)(v88, v82, v28);
      UsoEntitySpan.matchInfo.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v243)(v86, 1, v89) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v86, &demangling cache variable for type metadata for MatchInfo?);
        goto LABEL_40;
      }
      BOOL v90 = v84;
      uint64_t v91 = v237;
      (*(void (**)(char *, uint64_t, uint64_t))v236)(v237, v86, v89);
      static MatchInfo.MatchSignals.partialMatch.getter();
      char v92 = MatchInfo.hasMatchSignals(_:)();
      uint64_t v93 = *v83;
      uint64_t v94 = matched;
      (*v83)(v85, matched);
      (*v235)((uint64_t)v87, (uint64_t)v91, v89);
      if (v92) {
        break;
      }
      static MatchInfo.MatchSignals.approximateMatch.getter();
      char v97 = MatchInfo.hasMatchSignals(_:)();
      v93(v85, v94);
      int v98 = v87;
      uint64_t v96 = *v90;
      (*v90)(v98, v89);
      if (v97)
      {
        uint64_t v86 = (uint64_t)v228;
        uint64_t v88 = v227;
        uint64_t v84 = v90;
LABEL_47:
        v96(v237, v89);
        uint64_t v83 = v240;
        uint64_t v85 = v238;
        Swift::Int v87 = v231;
        uint64_t v28 = v249;
        if (v239 == (const char *)3) {
          goto LABEL_54;
        }
        goto LABEL_40;
      }
      static MatchInfo.MatchSignals.aliasMatch.getter();
      uint64_t v99 = v237;
      char v100 = MatchInfo.hasMatchSignals(_:)();
      v93(v85, v94);
      v96(v99, v89);
      uint64_t v84 = v90;
      if (v100) {
        BOOL v101 = v239 == (const char *)1;
      }
      else {
        BOOL v101 = v239 == (const char *)4;
      }
      uint64_t v85 = v238;
      uint64_t v86 = (uint64_t)v228;
      Swift::Int v87 = v231;
      uint64_t v88 = v227;
      uint64_t v28 = v249;
      if (v101)
      {
LABEL_54:
        uint64_t v102 = *(void (**)(char *, char *, uint64_t))v234;
        (*(void (**)(char *, char *, uint64_t))v234)(v225, v88, v28);
        uint64_t v103 = v251;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v103 + 16) + 1, 1);
          uint64_t v103 = v251;
        }
        unint64_t v105 = *(void *)(v103 + 16);
        unint64_t v104 = *(void *)(v103 + 24);
        if (v105 >= v104 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v104 > 1, v105 + 1, 1);
          uint64_t v103 = v251;
        }
        *(void *)(v103 + 16) = v105 + 1;
        uint64_t v106 = (char *)v232 + v103 + v105 * v247;
        uint64_t v28 = v249;
        v102(v106, v225, v249);
        uint64_t v251 = v103;
        Swift::Int v87 = v231;
        uint64_t v83 = v240;
        goto LABEL_41;
      }
LABEL_40:
      (*(void (**)(char *, uint64_t))v242)(v88, v28);
LABEL_41:
      v82 += v247;
      uint64_t v77 = v248 - 1;
      if (v248 == (char *)1)
      {
        uint64_t v76 = v251;
        uint64_t v75 = v224;
        uint64_t v47 = v229;
        uint64_t v37 = v220;
        uint64_t v29 = v221;
        goto LABEL_61;
      }
    }
    uint64_t v95 = v87;
    uint64_t v84 = v90;
    uint64_t v96 = *v90;
    (*v90)(v95, v89);
    uint64_t v86 = (uint64_t)v228;
    uint64_t v88 = v227;
    goto LABEL_47;
  }
LABEL_61:
  swift_bridgeObjectRelease();
  v233 = *(char **)(v76 + 16);
  if (!v233)
  {
    swift_release();
    goto LABEL_180;
  }
  Swift::String v110 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  uint64_t v109 = v29 + 16;
  uint64_t v108 = v110;
  uint64_t v111 = v76 + ((*(unsigned __int8 *)(v109 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 64));
  uint64_t v247 = v217 + 16;
  v248 = (char *)(v217 + 8);
  v238 = (char *)(v109 - 8);
  uint64_t v112 = *(char **)(v109 + 56);
  swift_retain();
  uint64_t v113 = 0;
  unint64_t v114 = 0x1E9F2D000uLL;
  v239 = "homeAutomationNoun";
  v237 = (char *)0x80000001BA05F230;
  v242 = "homeAutomationHue";
  v243 = "homeAutomationAccessoryType";
  v240 = (void (**)(char *, uint64_t))0x80000001BA05F1F0;
  uint64_t matched = 0x80000001BA05F250;
  uint64_t v221 = v109;
  v228 = v112;
  v235 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v76;
  v236 = (char *)v110;
  uint64_t v230 = v111;
  while (2)
  {
    uint64_t v234 = v113;
    v108(v37, v111 + (void)v112 * (void)v113, v28);
    if (*(void *)(v114 + 496) != -1) {
      swift_once();
    }
    uint64_t v115 = static HomeAutomationAffinityScorer.kPauseOrResumeSettingStrictValues;
    uint64_t v116 = UsoEntitySpan.properties.getter();
    v244 = *(char **)(v116 + 16);
    uint64_t v117 = v216;
    if (!v244)
    {
      swift_bridgeObjectRelease();
      goto LABEL_99;
    }
    uint64_t v246 = v116 + ((*(unsigned __int8 *)(v217 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v217 + 80));
    uint64_t v118 = v115 + 56;
    v245 = *(void (**)(const char *, uint64_t, uint64_t))(v217 + 72);
    int v119 = *(void (**)(char *, uint64_t, uint64_t))(v217 + 16);
    uint64_t v232 = (void (*)(char *, uint64_t))v116;
    swift_bridgeObjectRetain();
    unint64_t v120 = 0;
    uint64_t v121 = v223;
    unint64_t v122 = v222;
    while (2)
    {
      v119(v122, v246 + (void)v245 * (void)v120, v75);
      if (SpanProperty.key.getter() == 0xD000000000000015 && v124 == matched)
      {
        swift_bridgeObjectRelease();
        v119(v121, (uint64_t)v122, v75);
LABEL_73:
        uint64_t v126 = SpanProperty.valueString.getter();
        if (v127) {
          uint64_t v128 = v126;
        }
        else {
          uint64_t v128 = 0;
        }
        if (v127) {
          unint64_t v129 = v127;
        }
        else {
          unint64_t v129 = 0xE000000000000000;
        }
        if (*(void *)(v115 + 16))
        {
          Hasher.init(_seed:)();
          String.hash(into:)();
          Swift::Int v130 = Hasher._finalize()();
          uint64_t v131 = -1 << *(unsigned char *)(v115 + 32);
          unint64_t v132 = v130 & ~v131;
          if ((*(void *)(v118 + ((v132 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v132))
          {
            uint64_t v133 = *(void *)(v115 + 48);
            uint64_t v134 = (void *)(v133 + 16 * v132);
            BOOL v135 = *v134 == v128 && v134[1] == v129;
            if (v135 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              goto LABEL_96;
            }
            uint64_t v136 = ~v131;
            unint64_t v137 = (v132 + 1) & v136;
            if ((*(void *)(v118 + ((v137 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v137))
            {
              uint64_t v138 = (void *)(v133 + 16 * v137);
              if (*v138 != v128 || v138[1] != v129)
              {
                do
                {
                  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                    break;
                  }
                  unint64_t v137 = (v137 + 1) & v136;
                  if (((*(void *)(v118 + ((v137 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v137) & 1) == 0) {
                    goto LABEL_67;
                  }
                  uint64_t v139 = (void *)(v133 + 16 * v137);
                }
                while (*v139 != v128 || v139[1] != v129);
              }
LABEL_96:
              swift_bridgeObjectRelease();
              unint64_t v141 = *(void (**)(char *, uint64_t))v248;
              (*(void (**)(char *, uint64_t))v248)(v223, v75);
              v141(v222, v75);
              swift_bridgeObjectRelease_n();
              int64_t v142 = v213;
              uint64_t v37 = v220;
              uint64_t v28 = v249;
              uint64_t v108 = (void (*)(char *, uint64_t, uint64_t))v236;
              ((void (*)(char *, char *, uint64_t))v236)(v213, v220, v249);
              char v143 = 1;
              uint64_t v47 = v229;
              uint64_t v117 = v216;
              goto LABEL_135;
            }
          }
        }
LABEL_67:
        swift_bridgeObjectRelease();
        uint64_t v121 = v223;
        unint64_t v122 = v222;
      }
      else
      {
        char v125 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v119(v121, (uint64_t)v122, v75);
        if (v125) {
          goto LABEL_73;
        }
      }
      ++v120;
      uint64_t v123 = *(void (**)(char *, uint64_t))v248;
      (*(void (**)(char *, uint64_t))v248)(v121, v75);
      v123(v122, v75);
      if (v120 != v244) {
        continue;
      }
      break;
    }
    swift_bridgeObjectRelease_n();
    uint64_t v47 = v229;
    uint64_t v28 = v249;
    uint64_t v117 = v216;
    uint64_t v37 = v220;
LABEL_99:
    ((void (*)(char *, char *, uint64_t))v236)(v213, v37, v28);
    uint64_t v144 = static HomeAutomationAffinityScorer.kPauseOrResumeSettingStrictValues;
    uint64_t v145 = UsoEntitySpan.properties.getter();
    v244 = *(char **)(v145 + 16);
    if (!v244)
    {
      swift_bridgeObjectRelease();
      char v143 = 0;
      goto LABEL_134;
    }
    uint64_t v246 = v145 + ((*(unsigned __int8 *)(v217 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v217 + 80));
    uint64_t v146 = v144 + 56;
    v245 = *(void (**)(const char *, uint64_t, uint64_t))(v217 + 72);
    uint64_t v147 = *(void (**)(char *, uint64_t, uint64_t))(v217 + 16);
    uint64_t v232 = (void (*)(char *, uint64_t))v145;
    swift_bridgeObjectRetain();
    int64_t v148 = 0;
    uint64_t v149 = v219;
    long long v150 = v218;
    while (2)
    {
      v147(v150, v246 + (void)v245 * (void)v148, v75);
      if (SpanProperty.key.getter() == 0xD00000000000001BLL && v152 == v237)
      {
        swift_bridgeObjectRelease();
        v147(v149, (uint64_t)v150, v75);
LABEL_107:
        uint64_t v154 = SpanProperty.valueString.getter();
        if (v155) {
          uint64_t v156 = v154;
        }
        else {
          uint64_t v156 = 0;
        }
        if (v155) {
          unint64_t v157 = v155;
        }
        else {
          unint64_t v157 = 0xE000000000000000;
        }
        if (*(void *)(v144 + 16))
        {
          Hasher.init(_seed:)();
          String.hash(into:)();
          Swift::Int v158 = Hasher._finalize()();
          uint64_t v159 = -1 << *(unsigned char *)(v144 + 32);
          unint64_t v160 = v158 & ~v159;
          if ((*(void *)(v146 + ((v160 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v160))
          {
            uint64_t v161 = *(void *)(v144 + 48);
            uint64_t v162 = (void *)(v161 + 16 * v160);
            BOOL v163 = *v162 == v156 && v162[1] == v157;
            if (v163 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              goto LABEL_130;
            }
            uint64_t v164 = ~v159;
            unint64_t v165 = (v160 + 1) & v164;
            if ((*(void *)(v146 + ((v165 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v165))
            {
              uint64_t v166 = (void *)(v161 + 16 * v165);
              if (*v166 != v156 || v166[1] != v157)
              {
                do
                {
                  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                    break;
                  }
                  unint64_t v165 = (v165 + 1) & v164;
                  if (((*(void *)(v146 + ((v165 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v165) & 1) == 0) {
                    goto LABEL_101;
                  }
                  uint64_t v167 = (void *)(v161 + 16 * v165);
                }
                while (*v167 != v156 || v167[1] != v157);
              }
LABEL_130:
              swift_bridgeObjectRelease();
              uint64_t v169 = *(void (**)(char *, uint64_t))v248;
              (*(void (**)(char *, uint64_t))v248)(v219, v75);
              v169(v218, v75);
              swift_bridgeObjectRelease_n();
              char v143 = 1;
              goto LABEL_133;
            }
          }
        }
LABEL_101:
        swift_bridgeObjectRelease();
        uint64_t v149 = v219;
        long long v150 = v218;
      }
      else
      {
        char v153 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v147(v149, (uint64_t)v150, v75);
        if (v153) {
          goto LABEL_107;
        }
      }
      ++v148;
      Swift::String v151 = *(void (**)(char *, uint64_t))v248;
      (*(void (**)(char *, uint64_t))v248)(v149, v75);
      v151(v150, v75);
      if (v148 != v244) {
        continue;
      }
      break;
    }
    swift_bridgeObjectRelease_n();
    char v143 = 0;
LABEL_133:
    uint64_t v47 = v229;
    uint64_t v28 = v249;
    uint64_t v117 = v216;
    uint64_t v37 = v220;
LABEL_134:
    int64_t v142 = v213;
    uint64_t v108 = (void (*)(char *, uint64_t, uint64_t))v236;
LABEL_135:
    uint64_t v170 = *(void (**)(char *, uint64_t))v238;
    (*(void (**)(char *, uint64_t))v238)(v142, v28);
    v108(v117, (uint64_t)v37, v28);
    if (v143) {
      goto LABEL_175;
    }
    Swift::Int v171 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of HomeAutomationAffinityScorer.scorePauseOrResumeSetting(usoTask:usoEntitySpans:));
    swift_arrayDestroy();
    uint64_t v172 = UsoEntitySpan.properties.getter();
    v244 = *(char **)(v172 + 16);
    if (!v244)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_170:
      uint64_t v197 = v234 + 1;
      v170(v117, v28);
      v170(v37, v28);
      uint64_t v113 = v197;
      BOOL v101 = v197 == v233;
      uint64_t v111 = v230;
      uint64_t v112 = v228;
      unint64_t v114 = 0x1E9F2D000;
      if (v101)
      {
        swift_release_n();
LABEL_180:
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v204 = type metadata accessor for Logger();
        __swift_project_value_buffer(v204, (uint64_t)static Logger.executor);
        uint64_t v205 = Logger.logObject.getter();
        os_log_type_t v206 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v205, v206))
        {
          v207 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v207 = 0;
          _os_log_impl(&dword_1B9C64000, v205, v206, "HomeAutomationAffinityScorer - [Low] No matches specific to Pause/Resume, falling back to default logic.", v207, 2u);
          MEMORY[0x1BA9E48C0](v207, -1, -1);
          swift_release();
        }
        else
        {

          swift_release();
        }
        uint64_t v107 = 1;
        goto LABEL_188;
      }
      continue;
    }
    break;
  }
  uint64_t v232 = v170;
  uint64_t v246 = v172 + ((*(unsigned __int8 *)(v217 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v217 + 80));
  Swift::Int v173 = v171 + 56;
  v245 = *(void (**)(const char *, uint64_t, uint64_t))(v217 + 72);
  uint64_t v174 = *(void (**)(char *, uint64_t, uint64_t))(v217 + 16);
  long long v231 = (char *)v172;
  swift_bridgeObjectRetain();
  uint64_t v175 = 0;
  while (1)
  {
    v174(v47, v246 + (void)v245 * (void)v175, v75);
    if (SpanProperty.key.getter() == 0xD000000000000013 && v179 == v240)
    {
      swift_bridgeObjectRelease();
      v174(v226, (uint64_t)v47, v75);
    }
    else
    {
      long long v180 = v47;
      char v181 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v176 = v226;
      v174(v226, (uint64_t)v180, v75);
      if ((v181 & 1) == 0) {
        goto LABEL_139;
      }
    }
    uint64_t v182 = SpanProperty.valueString.getter();
    uint64_t v184 = v183 ? v182 : 0;
    unint64_t v185 = v183 ? v183 : 0xE000000000000000;
    if (*(void *)(v171 + 16))
    {
      Hasher.init(_seed:)();
      String.hash(into:)();
      Swift::Int v186 = Hasher._finalize()();
      uint64_t v187 = -1 << *(unsigned char *)(v171 + 32);
      unint64_t v188 = v186 & ~v187;
      if ((*(void *)(v173 + ((v188 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v188))
      {
        uint64_t v189 = *(void *)(v171 + 48);
        int v190 = (void *)(v189 + 16 * v188);
        BOOL v191 = *v190 == v184 && v190[1] == v185;
        if (v191 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_174;
        }
        uint64_t v192 = ~v187;
        unint64_t v193 = (v188 + 1) & ~v187;
        if ((*(void *)(v173 + ((v193 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v193)) {
          break;
        }
      }
    }
LABEL_138:
    swift_bridgeObjectRelease();
    uint64_t v75 = v224;
    uint64_t v176 = v226;
    uint64_t v28 = v249;
LABEL_139:
    ++v175;
    uint64_t v177 = v176;
    uint64_t v178 = *(void (**)(char *, uint64_t))v248;
    (*(void (**)(char *, uint64_t))v248)(v177, v75);
    uint64_t v47 = v229;
    v178(v229, v75);
    if (v175 == v244)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      uint64_t v117 = v216;
      uint64_t v37 = v220;
      uint64_t v108 = (void (*)(char *, uint64_t, uint64_t))v236;
      uint64_t v170 = v232;
      goto LABEL_170;
    }
  }
  v194 = (void *)(v189 + 16 * v193);
  if (*v194 != v184 || v194[1] != v185)
  {
    do
    {
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        break;
      }
      unint64_t v193 = (v193 + 1) & v192;
      if (((*(void *)(v173 + ((v193 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v193) & 1) == 0) {
        goto LABEL_138;
      }
      v195 = (void *)(v189 + 16 * v193);
    }
    while (*v195 != v184 || v195[1] != v185);
  }
LABEL_174:
  swift_bridgeObjectRelease();
  v198 = *(void (**)(char *, uint64_t))v248;
  uint64_t v199 = v224;
  (*(void (**)(char *, uint64_t))v248)(v226, v224);
  v198(v229, v199);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v28 = v249;
  uint64_t v117 = v216;
  uint64_t v37 = v220;
  uint64_t v170 = v232;
LABEL_175:
  v170(v117, v28);
  v170(v37, v28);
  swift_release_n();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v200 = type metadata accessor for Logger();
  __swift_project_value_buffer(v200, (uint64_t)static Logger.executor);
  v201 = Logger.logObject.getter();
  os_log_type_t v202 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v201, v202))
  {
    uint64_t v203 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v203 = 0;
    _os_log_impl(&dword_1B9C64000, v201, v202, "HomeAutomationAffinityScorer - [High] Pause/Resume spans have HA entity.", v203, 2u);
    MEMORY[0x1BA9E48C0](v203, -1, -1);
    swift_release();
  }
  else
  {

    swift_release();
  }
  uint64_t v107 = 3;
LABEL_188:
  swift_release();
  return v107;
}

uint64_t specialized HomeAutomationAffinityScorer.hasGeneralNamespaceMatch(_:)(uint64_t a1)
{
  uint64_t v75 = type metadata accessor for SpanProperty();
  uint64_t v2 = *(void *)(v75 - 8);
  MEMORY[0x1F4188790](v75);
  char v74 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UsoEntitySpan();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntitySpan?);
  uint64_t v8 = MEMORY[0x1F4188790](v56);
  uint64_t v55 = (uint64_t)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v54 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v58 = (char *)&v54 - v13;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v57 = v5;
  uint64_t v68 = v14;
  if (v14)
  {
    uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v15 = v5 + 16;
    uint64_t v64 = a1 + ((*(unsigned __int8 *)(v15 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 64));
    char v65 = v16;
    uint64_t v59 = v2;
    unint64_t v72 = (void (**)(char *, uint64_t))(v2 + 8);
    uint64_t v73 = v2 + 16;
    uint64_t v66 = v15;
    uint64_t v17 = *(void *)(v15 + 56);
    uint64_t v62 = (void (**)(char *, uint64_t))(v15 - 8);
    uint64_t v63 = v17;
    uint64_t v54 = a1;
    swift_bridgeObjectRetain();
    uint64_t v18 = 0;
    char v60 = v12;
    uint64_t v61 = v4;
    uint64_t v67 = v7;
    while (1)
    {
      v65(v7, v64 + v63 * v18, v4);
      if (one-time initialization token for kHAGeneralNamespaceMatches != -1) {
        swift_once();
      }
      uint64_t v70 = v18;
      uint64_t v71 = static HomeAutomationAffinityScorer.kHAGeneralNamespaceMatches;
      uint64_t v19 = UsoEntitySpan.properties.getter();
      int64_t v20 = *(void *)(v19 + 16);
      if (v20)
      {
        uint64_t v76 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
        uint64_t v21 = *(unsigned __int8 *)(v59 + 80);
        uint64_t v69 = v19;
        uint64_t v22 = v19 + ((v21 + 32) & ~v21);
        uint64_t v23 = *(void *)(v59 + 72);
        uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 16);
        do
        {
          uint64_t v25 = v74;
          uint64_t v26 = v75;
          v24(v74, v22, v75);
          uint64_t v27 = SpanProperty.key.getter();
          uint64_t v29 = v28;
          (*v72)(v25, v26);
          uint64_t v30 = v76;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v30 + 16) + 1, 1);
            uint64_t v30 = v76;
          }
          unint64_t v32 = *(void *)(v30 + 16);
          unint64_t v31 = *(void *)(v30 + 24);
          if (v32 >= v31 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
            uint64_t v30 = v76;
          }
          *(void *)(v30 + 16) = v32 + 1;
          uint64_t v33 = v30 + 16 * v32;
          *(void *)(v33 + 32) = v27;
          *(void *)(v33 + 40) = v29;
          v22 += v23;
          --v20;
        }
        while (v20);
        swift_bridgeObjectRelease();
        uint64_t v12 = v60;
        uint64_t v4 = v61;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v30 = MEMORY[0x1E4FBC860];
      }
      uint64_t v77 = Set.init(minimumCapacity:)();
      uint64_t v34 = *(void *)(v30 + 16);
      if (v34)
      {
        uint64_t v35 = (Swift::Int *)(v30 + 40);
        do
        {
          Swift::Int v36 = *(v35 - 1);
          Swift::Int v37 = *v35;
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(&v76, v36, v37);
          swift_bridgeObjectRelease();
          v35 += 2;
          --v34;
        }
        while (v34);
      }
      swift_bridgeObjectRelease();
      char v38 = specialized Set.isDisjoint(with:)(v77, v71);
      swift_bridgeObjectRelease();
      if ((v38 & 1) == 0) {
        break;
      }
      uint64_t v18 = v70 + 1;
      uint64_t v7 = v67;
      (*v62)(v67, v4);
      if (v18 == v68)
      {
        swift_bridgeObjectRelease();
        uint64_t v39 = 1;
        uint64_t v5 = v57;
        goto LABEL_22;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v5 = v57;
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v58, v67, v4);
    uint64_t v39 = 0;
  }
  else
  {
    uint64_t v39 = 1;
  }
LABEL_22:
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = (uint64_t)v58;
  v40(v58, v39, 1, v4);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v42 = type metadata accessor for Logger();
  __swift_project_value_buffer(v42, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol?(v41, (uint64_t)v12, &demangling cache variable for type metadata for UsoEntitySpan?);
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = (uint8_t *)swift_slowAlloc();
    uint64_t v46 = swift_slowAlloc();
    uint64_t v76 = v46;
    *(_DWORD *)uint64_t v45 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v12, v55, &demangling cache variable for type metadata for UsoEntitySpan?);
    uint64_t v47 = String.init<A>(describing:)();
    uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for UsoEntitySpan?);
    _os_log_impl(&dword_1B9C64000, v43, v44, "HomeAutomationAffinityScorer - Found HomeAutomation GeneralSpan match: %s", v45, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v46, -1, -1);
    uint64_t v49 = v45;
    uint64_t v41 = (uint64_t)v58;
    MEMORY[0x1BA9E48C0](v49, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for UsoEntitySpan?);
  }

  BOOL v50 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v41, 1, v4) == 1;
  uint64_t v51 = v41;
  uint64_t v52 = !v50;
  outlined destroy of ReferenceResolutionClientProtocol?(v51, &demangling cache variable for type metadata for UsoEntitySpan?);
  return v52;
}

BOOL specialized HomeAutomationAffinityScorer.hasExactNamespaceMatch(_:)(uint64_t a1)
{
  uint64_t matched = type metadata accessor for MatchInfo.MatchSignals();
  uint64_t v219 = *(void *)(matched - 8);
  MEMORY[0x1F4188790](matched);
  uint64_t v226 = (char *)&v198 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MatchInfo?);
  MEMORY[0x1F4188790](v4 - 8);
  v225 = (char *)&v198 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for MatchInfo();
  uint64_t v212 = *(void (***)(char *, uint64_t))(v6 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  v220 = (char *)&v198 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v216 = (char *)&v198 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v215 = (char *)&v198 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PayloadAttachmentInfo?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v198 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v224 = (char *)&v198 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v229 = type metadata accessor for PayloadAttachmentInfo.AttachmentType();
  uint64_t v217 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v229 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v229);
  uint64_t v211 = (char *)&v198 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v210 = (char *)&v198 - v19;
  uint64_t v253 = type metadata accessor for SpanProperty();
  uint64_t v239 = *(void *)(v253 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v253);
  uint64_t v249 = (char *)&v198 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v252 = (char *)&v198 - v22;
  uint64_t v23 = type metadata accessor for UsoEntitySpan();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v232 = (char *)&v198 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  v228 = (char *)&v198 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v222 = (char *)&v198 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v33 = (char *)&v198 - v32;
  uint64_t v34 = MEMORY[0x1F4188790](v31);
  Swift::Int v36 = (char *)&v198 - v35;
  MEMORY[0x1F4188790](v34);
  char v38 = (char *)&v198 - v37;
  uint64_t v200 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntitySpan?);
  uint64_t v39 = MEMORY[0x1F4188790](v200);
  uint64_t v199 = (uint64_t)&v198 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v227 = (uint64_t)&v198 - v42;
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  uint64_t v233 = (uint64_t)&v198 - v44;
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  uint64_t v203 = (char *)&v198 - v46;
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  os_log_type_t v202 = (char *)&v198 - v48;
  MEMORY[0x1F4188790](v47);
  uint64_t v245 = (uint64_t)&v198 - v49;
  uint64_t v50 = *(void *)(a1 + 16);
  uint64_t v241 = v23;
  uint64_t v204 = v24;
  uint64_t v205 = a1;
  uint64_t v223 = matched;
  uint64_t v240 = v6;
  uint64_t v51 = (uint64_t)v14;
  uint64_t v246 = v14;
  uint64_t v247 = v50;
  v248 = v33;
  if (!v50)
  {
LABEL_35:
    v201 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
    v201(v245, 1, 1, v23);
    if (!v247) {
      goto LABEL_94;
    }
    goto LABEL_36;
  }
  uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  uint64_t v52 = v24 + 16;
  v243 = v53;
  long long v231 = (char *)(a1 + ((*(unsigned __int8 *)(v52 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 64)));
  uint64_t v250 = (void (**)(char *, uint64_t))(v239 + 8);
  uint64_t v251 = v239 + 16;
  v238 = (char **)(v52 - 8);
  uint64_t v244 = v52;
  uint64_t v230 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v52 + 56);
  swift_bridgeObjectRetain();
  uint64_t v54 = 0;
  v236 = v36;
  v237 = v38;
  while (1)
  {
    uint64_t v242 = v54;
    v243(v38, &v231[(void)v230 * v54], v23);
    Swift::Int v56 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of HomeAutomationAffinityScorer.hasExactNamespaceMatch(_:));
    swift_arrayDestroy();
    uint64_t v57 = UsoEntitySpan.properties.getter();
    int64_t v58 = *(void *)(v57 + 16);
    if (v58)
    {
      Swift::Int v235 = v56;
      uint64_t v254 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v58, 0);
      unint64_t v59 = (*(unsigned __int8 *)(v239 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v239 + 80);
      uint64_t v234 = (void (**)(char *, uint64_t, uint64_t))v57;
      unint64_t v60 = v57 + v59;
      uint64_t v61 = *(void *)(v239 + 72);
      uint64_t v62 = *(void (**)(char *, unint64_t, uint64_t))(v239 + 16);
      do
      {
        uint64_t v63 = v252;
        uint64_t v64 = v253;
        v62(v252, v60, v253);
        uint64_t v65 = SpanProperty.key.getter();
        uint64_t v67 = v66;
        (*v250)(v63, v64);
        uint64_t v68 = v254;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v68 + 16) + 1, 1);
          uint64_t v68 = v254;
        }
        unint64_t v70 = *(void *)(v68 + 16);
        unint64_t v69 = *(void *)(v68 + 24);
        if (v70 >= v69 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v69 > 1, v70 + 1, 1);
          uint64_t v68 = v254;
        }
        *(void *)(v68 + 16) = v70 + 1;
        uint64_t v71 = v68 + 16 * v70;
        *(void *)(v71 + 32) = v65;
        *(void *)(v71 + 40) = v67;
        v60 += v61;
        --v58;
      }
      while (v58);
      swift_bridgeObjectRelease();
      uint64_t v23 = v241;
      Swift::Int v56 = v235;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v68 = MEMORY[0x1E4FBC860];
    }
    uint64_t v255 = Set.init(minimumCapacity:)();
    uint64_t v72 = *(void *)(v68 + 16);
    uint64_t v33 = v248;
    if (v72)
    {
      uint64_t v73 = (Swift::Int *)(v68 + 40);
      do
      {
        Swift::Int v74 = *(v73 - 1);
        Swift::Int v75 = *v73;
        swift_bridgeObjectRetain();
        specialized Set._Variant.insert(_:)(&v254, v74, v75);
        swift_bridgeObjectRelease();
        v73 += 2;
        --v72;
      }
      while (v72);
    }
    swift_bridgeObjectRelease();
    char v76 = specialized Set.isDisjoint(with:)(v255, v56);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v77 = v236;
    char v38 = v237;
    v243(v236, v237, v23);
    if ((v76 & 1) == 0) {
      break;
    }
    uint64_t v55 = *v238;
    ((void (*)(char *, uint64_t))*v238)(v77, v23);
    uint64_t v51 = (uint64_t)v246;
LABEL_4:
    uint64_t v54 = v242 + 1;
    ((void (*)(char *, uint64_t))v55)(v38, v23);
    if (v54 == v247)
    {
      swift_bridgeObjectRelease();
      uint64_t v24 = v204;
      goto LABEL_35;
    }
  }
  uint64_t v234 = (void (**)(char *, uint64_t, uint64_t))((unint64_t)v238 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
  Swift::Int v235 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #1 of HomeAutomationAffinityScorer.hasExactNamespaceMatch(_:));
  swift_arrayDestroy();
  uint64_t v78 = UsoEntitySpan.properties.getter();
  uint64_t v79 = *(void *)(v78 + 16);
  if (v79)
  {
    unint64_t v80 = (*(unsigned __int8 *)(v239 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v239 + 80);
    uint64_t v221 = v78;
    unint64_t v81 = v78 + v80;
    uint64_t v82 = *(void *)(v239 + 72);
    uint64_t v83 = *(void (**)(char *, unint64_t, uint64_t))(v239 + 16);
    uint64_t v84 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v86 = v249;
      uint64_t v87 = v253;
      v83(v249, v81, v253);
      uint64_t v88 = SpanProperty.valueString.getter();
      uint64_t v90 = v89;
      (*v250)(v86, v87);
      if (v90)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v84[2] + 1, 1, v84);
        }
        unint64_t v92 = v84[2];
        unint64_t v91 = v84[3];
        if (v92 >= v91 >> 1) {
          uint64_t v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v91 > 1), v92 + 1, 1, v84);
        }
        v84[2] = v92 + 1;
        uint64_t v85 = &v84[2 * v92];
        v85[4] = v88;
        v85[5] = v90;
      }
      v81 += v82;
      --v79;
    }
    while (v79);
    swift_bridgeObjectRelease();
    uint64_t v23 = v241;
    uint64_t v77 = v236;
    char v38 = v237;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v84 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v255 = Set.init(minimumCapacity:)();
  uint64_t v93 = v84[2];
  if (v93)
  {
    uint64_t v94 = v84 + 5;
    do
    {
      Swift::Int v95 = *(v94 - 1);
      Swift::Int v96 = *v94;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v254, v95, v96);
      swift_bridgeObjectRelease();
      v94 += 2;
      --v93;
    }
    while (v93);
  }
  swift_bridgeObjectRelease();
  char v97 = specialized Set.isDisjoint(with:)(v255, v235);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v55 = *v238;
  ((void (*)(char *, uint64_t))*v238)(v77, v23);
  if (v97)
  {
    uint64_t v51 = (uint64_t)v246;
    uint64_t v33 = v248;
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  uint64_t v24 = v204;
  uint64_t v185 = v245;
  (*(void (**)(uint64_t, char *, uint64_t))(v204 + 32))(v245, v38, v23);
  v201 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
  v201(v185, 0, 1, v23);
  uint64_t v51 = (uint64_t)v246;
  uint64_t v33 = v248;
  if (v247)
  {
LABEL_36:
    uint64_t v99 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
    uint64_t v98 = v24 + 16;
    v243 = v99;
    v237 = (char *)(v205 + ((*(unsigned __int8 *)(v98 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 64)));
    char v100 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 32);
    uint64_t v234 = (void (**)(char *, uint64_t, uint64_t))(v98 + 16);
    uint64_t v251 = v239 + 16;
    uint64_t v249 = (char *)(v98 - 8);
    uint64_t v250 = (void (**)(char *, uint64_t))(v239 + 8);
    uint64_t v218 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v217 + 6);
    uint64_t v209 = (void (**)(char *, uint64_t, uint64_t))(v217 + 4);
    unsigned int v208 = *MEMORY[0x1E4FA30A0];
    v207 = (void (**)(char *, void, uint64_t))(v217 + 13);
    os_log_type_t v206 = (void (**)(char *, uint64_t))(v217 + 1);
    v217 += 7;
    uint64_t v230 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v212 + 6);
    uint64_t v214 = (void (**)(char *, uint64_t, uint64_t))(v212 + 4);
    BOOL v101 = (char **)(v219 + 8);
    uint64_t v213 = (void (**)(char *, char *, uint64_t))(v212 + 2);
    ++v212;
    uint64_t v244 = v98;
    v236 = *(char **)(v98 + 56);
    swift_bridgeObjectRetain();
    uint64_t v102 = 0;
    Swift::Int v235 = v98 + 32;
    v238 = v101;
    while (1)
    {
      v243(v33, &v237[(void)v236 * v102], v23);
      uint64_t v103 = v233;
      outlined init with copy of ReferenceResolutionClientProtocol?(v245, v233, &demangling cache variable for type metadata for UsoEntitySpan?);
      unint64_t v104 = *v100;
      if ((*v100)(v103, 1, v23) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v103, &demangling cache variable for type metadata for UsoEntitySpan?);
      }
      else
      {
        unint64_t v105 = v222;
        (*v234)(v222, v103, v23);
        char v106 = MEMORY[0x1BA9DE780](v105, v33);
        uint64_t v107 = *(char **)v249;
        (*(void (**)(char *, uint64_t))v249)(v105, v23);
        if (v106) {
          goto LABEL_37;
        }
      }
      uint64_t v108 = v227;
      outlined init with copy of ReferenceResolutionClientProtocol?(v245, v227, &demangling cache variable for type metadata for UsoEntitySpan?);
      if (v104(v108, 1, v23) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v108, &demangling cache variable for type metadata for UsoEntitySpan?);
      }
      else
      {
        (*v234)(v228, v108, v23);
        Swift::Int v109 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #2 of HomeAutomationAffinityScorer.hasExactNamespaceMatch(_:));
        swift_arrayDestroy();
        uint64_t v110 = UsoEntitySpan.properties.getter();
        int64_t v111 = *(void *)(v110 + 16);
        if (v111)
        {
          long long v231 = (char *)v109;
          uint64_t v242 = v102;
          uint64_t v254 = MEMORY[0x1E4FBC860];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v111, 0);
          unint64_t v112 = (*(unsigned __int8 *)(v239 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v239 + 80);
          uint64_t v221 = v110;
          unint64_t v113 = v110 + v112;
          uint64_t v114 = *(void *)(v239 + 72);
          uint64_t v115 = *(void (**)(char *, unint64_t, uint64_t))(v239 + 16);
          do
          {
            uint64_t v116 = v252;
            uint64_t v117 = v253;
            v115(v252, v113, v253);
            uint64_t v118 = SpanProperty.key.getter();
            uint64_t v120 = v119;
            (*v250)(v116, v117);
            uint64_t v121 = v254;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v121 + 16) + 1, 1);
              uint64_t v121 = v254;
            }
            unint64_t v123 = *(void *)(v121 + 16);
            unint64_t v122 = *(void *)(v121 + 24);
            if (v123 >= v122 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v122 > 1, v123 + 1, 1);
              uint64_t v121 = v254;
            }
            *(void *)(v121 + 16) = v123 + 1;
            uint64_t v124 = v121 + 16 * v123;
            *(void *)(v124 + 32) = v118;
            *(void *)(v124 + 40) = v120;
            v113 += v114;
            --v111;
          }
          while (v111);
          swift_bridgeObjectRelease();
          char v100 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v235;
          uint64_t v102 = v242;
          Swift::Int v109 = (Swift::Int)v231;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v121 = MEMORY[0x1E4FBC860];
        }
        uint64_t v255 = Set.init(minimumCapacity:)();
        uint64_t v125 = *(void *)(v121 + 16);
        if (v125)
        {
          uint64_t v126 = (Swift::Int *)(v121 + 40);
          do
          {
            Swift::Int v127 = *(v126 - 1);
            Swift::Int v128 = *v126;
            swift_bridgeObjectRetain();
            specialized Set._Variant.insert(_:)(&v254, v127, v128);
            swift_bridgeObjectRelease();
            v126 += 2;
            --v125;
          }
          while (v125);
        }
        swift_bridgeObjectRelease();
        char v129 = specialized Set.isDisjoint(with:)(v255, v109);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v129)
        {
          uint64_t v23 = v241;
          (*(void (**)(char *, uint64_t))v249)(v228, v241);
          uint64_t v51 = (uint64_t)v246;
          uint64_t v33 = v248;
          BOOL v101 = v238;
        }
        else
        {
          uint64_t v33 = v248;
          Swift::Int v130 = v228;
          char v131 = UsoEntitySpan.indexesMatch(_:)();
          uint64_t v107 = *(char **)v249;
          uint64_t v23 = v241;
          (*(void (**)(char *, uint64_t))v249)(v130, v241);
          uint64_t v51 = (uint64_t)v246;
          BOOL v101 = v238;
          if (v131) {
            goto LABEL_37;
          }
        }
      }
      UsoEntitySpan.payloadAttachmentInfo.getter();
      uint64_t v132 = type metadata accessor for PayloadAttachmentInfo();
      uint64_t v133 = *(void *)(v132 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v133 + 48))(v51, 1, v132) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v51, &demangling cache variable for type metadata for PayloadAttachmentInfo?);
        uint64_t v134 = (uint64_t)v224;
        (*v217)(v224, 1, 1, v229);
      }
      else
      {
        uint64_t v135 = v51;
        uint64_t v134 = (uint64_t)v224;
        PayloadAttachmentInfo.attachmentType.getter();
        (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v135, v132);
        if ((*v218)(v134, 1, v229) != 1)
        {
          uint64_t v164 = v210;
          uint64_t v165 = v134;
          uint64_t v166 = v229;
          (*v209)(v210, v165, v229);
          uint64_t v167 = v211;
          (*v207)(v211, v208, v166);
          lazy protocol witness table accessor for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType(&lazy protocol witness table cache variable for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType, MEMORY[0x1E4FA30A8]);
          dispatch thunk of RawRepresentable.rawValue.getter();
          dispatch thunk of RawRepresentable.rawValue.getter();
          uint64_t v168 = v254;
          uint64_t v169 = v255;
          uint64_t v170 = *v206;
          Swift::Int v171 = v167;
          uint64_t v33 = v248;
          (*v206)(v171, v166);
          uint64_t v172 = v164;
          char v100 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v235;
          v170(v172, v166);
          BOOL v101 = v238;
          uint64_t v136 = v232;
          v243(v232, v33, v23);
          BOOL v173 = v168 == v169;
          unint64_t v137 = v226;
          uint64_t v138 = (uint64_t)v225;
          if (v173)
          {
            uint64_t v107 = *(char **)v249;
            (*(void (**)(char *, uint64_t))v249)(v136, v23);
            uint64_t v51 = (uint64_t)v246;
            goto LABEL_37;
          }
          goto LABEL_62;
        }
      }
      outlined destroy of ReferenceResolutionClientProtocol?(v134, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      uint64_t v136 = v232;
      v243(v232, v33, v23);
      unint64_t v137 = v226;
      uint64_t v138 = (uint64_t)v225;
LABEL_62:
      UsoEntitySpan.matchInfo.getter();
      if ((*v230)(v138, 1, v240) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v138, &demangling cache variable for type metadata for MatchInfo?);
        uint64_t v107 = *(char **)v249;
        (*(void (**)(char *, uint64_t))v249)(v136, v23);
      }
      else
      {
        unint64_t v155 = v215;
        uint64_t v156 = v240;
        (*v214)(v215, v138, v240);
        static MatchInfo.MatchSignals.approximateMatch.getter();
        char v157 = MatchInfo.hasMatchSignals(_:)();
        Swift::Int v158 = v213;
        long long v231 = *v101;
        ((void (*)(char *, uint64_t))v231)(v137, v223);
        uint64_t v159 = *v158;
        unint64_t v160 = v216;
        (*v158)(v216, v155, v156);
        if (v157)
        {
          uint64_t v161 = *v212;
          uint64_t v162 = v240;
          (*v212)(v160, v240);
          BOOL v163 = v220;
          v159(v220, v155, v162);
          uint64_t v51 = (uint64_t)v246;
          uint64_t v33 = v248;
LABEL_81:
          uint64_t v175 = v163;
          uint64_t v176 = v240;
          v161(v175, v240);
          v161(v155, v176);
          uint64_t v107 = *(char **)v249;
          (*(void (**)(char *, uint64_t))v249)(v232, v23);
          char v100 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v235;
          BOOL v101 = v238;
          goto LABEL_37;
        }
        uint64_t v242 = v102;
        static MatchInfo.MatchSignals.partialMatch.getter();
        LODWORD(v221) = MatchInfo.hasMatchSignals(_:)();
        ((void (*)(char *, uint64_t))v231)(v137, v223);
        uint64_t v161 = *v212;
        uint64_t v174 = v240;
        (*v212)(v160, v240);
        BOOL v163 = v220;
        v159(v220, v155, v174);
        if (v221)
        {
          uint64_t v51 = (uint64_t)v246;
          uint64_t v33 = v248;
          uint64_t v102 = v242;
          goto LABEL_81;
        }
        static MatchInfo.MatchSignals.aliasMatch.getter();
        char v182 = MatchInfo.hasMatchSignals(_:)();
        ((void (*)(char *, uint64_t))v231)(v137, v223);
        uint64_t v183 = v240;
        v161(v220, v240);
        v161(v155, v183);
        uint64_t v107 = *(char **)v249;
        (*(void (**)(char *, uint64_t))v249)(v232, v23);
        uint64_t v33 = v248;
        if (v182)
        {
          uint64_t v51 = (uint64_t)v246;
          char v100 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v235;
          uint64_t v102 = v242;
          goto LABEL_37;
        }
        char v100 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v235;
        uint64_t v102 = v242;
      }
      long long v231 = v107;
      if (one-time initialization token for kHAExactNamespaceMatches != -1) {
        swift_once();
      }
      uint64_t v139 = static HomeAutomationAffinityScorer.kHAExactNamespaceMatches;
      uint64_t v140 = UsoEntitySpan.properties.getter();
      int64_t v141 = *(void *)(v140 + 16);
      if (v141)
      {
        uint64_t v221 = v139;
        uint64_t v242 = v102;
        uint64_t v254 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v141, 0);
        unint64_t v142 = (*(unsigned __int8 *)(v239 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v239 + 80);
        uint64_t v219 = v140;
        unint64_t v143 = v140 + v142;
        uint64_t v144 = *(void *)(v239 + 72);
        uint64_t v145 = *(void (**)(char *, unint64_t, uint64_t))(v239 + 16);
        do
        {
          uint64_t v146 = v252;
          uint64_t v147 = v253;
          v145(v252, v143, v253);
          uint64_t v148 = SpanProperty.key.getter();
          uint64_t v150 = v149;
          (*v250)(v146, v147);
          uint64_t v151 = v254;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v151 + 16) + 1, 1);
            uint64_t v151 = v254;
          }
          unint64_t v153 = *(void *)(v151 + 16);
          unint64_t v152 = *(void *)(v151 + 24);
          if (v153 >= v152 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v152 > 1, v153 + 1, 1);
            uint64_t v151 = v254;
          }
          *(void *)(v151 + 16) = v153 + 1;
          uint64_t v154 = v151 + 16 * v153;
          *(void *)(v154 + 32) = v148;
          *(void *)(v154 + 40) = v150;
          v143 += v144;
          --v141;
        }
        while (v141);
        swift_bridgeObjectRelease();
        char v100 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))v235;
        uint64_t v102 = v242;
        uint64_t v139 = v221;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v151 = MEMORY[0x1E4FBC860];
      }
      uint64_t v255 = Set.init(minimumCapacity:)();
      uint64_t v177 = *(void *)(v151 + 16);
      if (v177)
      {
        uint64_t v178 = (Swift::Int *)(v151 + 40);
        do
        {
          Swift::Int v179 = *(v178 - 1);
          Swift::Int v180 = *v178;
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(&v254, v179, v180);
          swift_bridgeObjectRelease();
          v178 += 2;
          --v177;
        }
        while (v177);
      }
      swift_bridgeObjectRelease();
      char v181 = specialized Set.isDisjoint(with:)(v255, v139);
      swift_bridgeObjectRelease();
      if ((v181 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v186 = (uint64_t)v202;
        uint64_t v23 = v241;
        (*v234)(v202, (uint64_t)v248, v241);
        uint64_t v184 = 0;
        uint64_t v24 = v204;
        goto LABEL_96;
      }
      uint64_t v33 = v248;
      uint64_t v23 = v241;
      uint64_t v51 = (uint64_t)v246;
      BOOL v101 = v238;
      uint64_t v107 = v231;
LABEL_37:
      ++v102;
      ((void (*)(char *, uint64_t))v107)(v33, v23);
      if (v102 == v247)
      {
        swift_bridgeObjectRelease();
        uint64_t v184 = 1;
        uint64_t v24 = v204;
        goto LABEL_95;
      }
    }
  }
LABEL_94:
  uint64_t v184 = 1;
LABEL_95:
  uint64_t v186 = (uint64_t)v202;
LABEL_96:
  v201(v186, v184, 1, v23);
  uint64_t v187 = (uint64_t)v203;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v188 = type metadata accessor for Logger();
  __swift_project_value_buffer(v188, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol?(v186, v187, &demangling cache variable for type metadata for UsoEntitySpan?);
  uint64_t v189 = Logger.logObject.getter();
  os_log_type_t v190 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v189, v190))
  {
    BOOL v191 = (uint8_t *)swift_slowAlloc();
    uint64_t v192 = swift_slowAlloc();
    uint64_t v254 = v192;
    *(_DWORD *)BOOL v191 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?(v187, v199, &demangling cache variable for type metadata for UsoEntitySpan?);
    uint64_t v193 = String.init<A>(describing:)();
    uint64_t v255 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v193, v194, &v254);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v23 = v241;
    outlined destroy of ReferenceResolutionClientProtocol?(v187, &demangling cache variable for type metadata for UsoEntitySpan?);
    _os_log_impl(&dword_1B9C64000, v189, v190, "HomeAutomationAffinityScorer - Found HomeAutomation ExactSpan %s", v191, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v192, -1, -1);
    v195 = v191;
    uint64_t v24 = v204;
    MEMORY[0x1BA9E48C0](v195, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v187, &demangling cache variable for type metadata for UsoEntitySpan?);
  }

  BOOL v196 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v186, 1, v23) != 1;
  outlined destroy of ReferenceResolutionClientProtocol?(v186, &demangling cache variable for type metadata for UsoEntitySpan?);
  outlined destroy of ReferenceResolutionClientProtocol?(v245, &demangling cache variable for type metadata for UsoEntitySpan?);
  return v196;
}

BOOL specialized HomeAutomationAffinityScorer.hasNamespaceMatch(_:)(uint64_t a1)
{
  uint64_t v91 = type metadata accessor for SpanProperty();
  uint64_t v2 = *(void *)(v91 - 8);
  MEMORY[0x1F4188790](v91);
  uint64_t v4 = (char *)v69 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UsoEntitySpan();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v87 = (char *)v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v69 - v9;
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntitySpan?);
  uint64_t v11 = MEMORY[0x1F4188790](v71);
  uint64_t v70 = (uint64_t)v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v73 = (uint64_t)v69 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v72 = (char *)v69 - v15;
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t v74 = v6;
  uint64_t v75 = v16;
  if (v16)
  {
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v17 = v6 + 16;
    uint64_t v85 = v18;
    uint64_t v86 = v17;
    uint64_t v78 = a1 + ((*(unsigned __int8 *)(v17 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 64));
    uint64_t v89 = (void (**)(char *, uint64_t))(v2 + 8);
    uint64_t v90 = v2 + 16;
    uint64_t v77 = *(void *)(v17 + 56);
    v69[1] = a1;
    swift_bridgeObjectRetain();
    uint64_t v19 = 0;
    uint64_t v80 = v2;
    uint64_t v81 = v5;
    uint64_t v84 = v10;
    char v76 = (void (**)(char *, uint64_t))(v17 - 8);
    while (1)
    {
      uint64_t v82 = v19;
      v85(v10, v78 + v77 * v19, v5);
      if (one-time initialization token for kHAGeneralNamespaceMatches != -1) {
        swift_once();
      }
      uint64_t v83 = static HomeAutomationAffinityScorer.kHAGeneralNamespaceMatches;
      uint64_t v20 = UsoEntitySpan.properties.getter();
      int64_t v21 = *(void *)(v20 + 16);
      if (v21)
      {
        uint64_t v92 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
        uint64_t v22 = *(unsigned __int8 *)(v2 + 80);
        uint64_t v79 = v20;
        uint64_t v23 = v20 + ((v22 + 32) & ~v22);
        uint64_t v88 = *(void *)(v2 + 72);
        uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
        do
        {
          uint64_t v25 = v91;
          v24(v4, v23, v91);
          uint64_t v26 = SpanProperty.key.getter();
          uint64_t v28 = v27;
          (*v89)(v4, v25);
          uint64_t v29 = v92;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v29 + 16) + 1, 1);
            uint64_t v29 = v92;
          }
          unint64_t v31 = *(void *)(v29 + 16);
          unint64_t v30 = *(void *)(v29 + 24);
          if (v31 >= v30 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
            uint64_t v29 = v92;
          }
          *(void *)(v29 + 16) = v31 + 1;
          uint64_t v32 = v29 + 16 * v31;
          *(void *)(v32 + 32) = v26;
          *(void *)(v32 + 40) = v28;
          v23 += v88;
          --v21;
        }
        while (v21);
        swift_bridgeObjectRelease();
        uint64_t v2 = v80;
        uint64_t v5 = v81;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v29 = MEMORY[0x1E4FBC860];
      }
      uint64_t v93 = Set.init(minimumCapacity:)();
      uint64_t v33 = *(void *)(v29 + 16);
      if (v33)
      {
        uint64_t v34 = (Swift::Int *)(v29 + 40);
        do
        {
          Swift::Int v35 = *(v34 - 1);
          Swift::Int v36 = *v34;
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(&v92, v35, v36);
          swift_bridgeObjectRelease();
          v34 += 2;
          --v33;
        }
        while (v33);
      }
      swift_bridgeObjectRelease();
      char v37 = specialized Set.isDisjoint(with:)(v93, v83);
      swift_bridgeObjectRelease();
      uint64_t v10 = v84;
      v85(v87, (uint64_t)v84, v5);
      if ((v37 & 1) == 0) {
        break;
      }
      if (one-time initialization token for kHAExactNamespaceMatches != -1) {
        swift_once();
      }
      uint64_t v83 = static HomeAutomationAffinityScorer.kHAExactNamespaceMatches;
      uint64_t v38 = UsoEntitySpan.properties.getter();
      int64_t v39 = *(void *)(v38 + 16);
      if (v39)
      {
        uint64_t v92 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39, 0);
        uint64_t v40 = *(unsigned __int8 *)(v2 + 80);
        uint64_t v79 = v38;
        uint64_t v41 = v38 + ((v40 + 32) & ~v40);
        uint64_t v88 = *(void *)(v2 + 72);
        uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
        do
        {
          uint64_t v43 = v91;
          v42(v4, v41, v91);
          uint64_t v44 = SpanProperty.key.getter();
          uint64_t v46 = v45;
          (*v89)(v4, v43);
          uint64_t v47 = v92;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v47 + 16) + 1, 1);
            uint64_t v47 = v92;
          }
          unint64_t v49 = *(void *)(v47 + 16);
          unint64_t v48 = *(void *)(v47 + 24);
          if (v49 >= v48 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
            uint64_t v47 = v92;
          }
          *(void *)(v47 + 16) = v49 + 1;
          uint64_t v50 = v47 + 16 * v49;
          *(void *)(v50 + 32) = v44;
          *(void *)(v50 + 40) = v46;
          v41 += v88;
          --v39;
        }
        while (v39);
        swift_bridgeObjectRelease();
        uint64_t v2 = v80;
        uint64_t v5 = v81;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v47 = MEMORY[0x1E4FBC860];
      }
      uint64_t v93 = Set.init(minimumCapacity:)();
      uint64_t v51 = *(void *)(v47 + 16);
      if (v51)
      {
        uint64_t v52 = (Swift::Int *)(v47 + 40);
        do
        {
          Swift::Int v53 = *(v52 - 1);
          Swift::Int v54 = *v52;
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(&v92, v53, v54);
          swift_bridgeObjectRelease();
          v52 += 2;
          --v51;
        }
        while (v51);
      }
      swift_bridgeObjectRelease();
      char v55 = specialized Set.isDisjoint(with:)(v93, v83);
      swift_bridgeObjectRelease();
      Swift::Int v56 = *v76;
      (*v76)(v87, v5);
      uint64_t v10 = v84;
      if ((v55 & 1) == 0) {
        goto LABEL_37;
      }
      uint64_t v19 = v82 + 1;
      v56(v84, v5);
      if (v19 == v75)
      {
        swift_bridgeObjectRelease();
        uint64_t v58 = 1;
        uint64_t v6 = v74;
        goto LABEL_38;
      }
    }
    (*v76)(v87, v5);
LABEL_37:
    swift_bridgeObjectRelease();
    uint64_t v6 = v74;
    uint64_t v57 = (uint64_t)v72;
    (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v72, v10, v5);
    uint64_t v58 = 0;
  }
  else
  {
    uint64_t v58 = 1;
LABEL_38:
    uint64_t v57 = (uint64_t)v72;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v57, v58, 1, v5);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v59 = type metadata accessor for Logger();
  __swift_project_value_buffer(v59, (uint64_t)static Logger.executor);
  uint64_t v60 = v73;
  outlined init with copy of ReferenceResolutionClientProtocol?(v57, v73, &demangling cache variable for type metadata for UsoEntitySpan?);
  uint64_t v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v61, v62))
  {
    uint64_t v63 = (uint8_t *)swift_slowAlloc();
    uint64_t v64 = swift_slowAlloc();
    uint64_t v92 = v64;
    *(_DWORD *)uint64_t v63 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?(v60, v70, &demangling cache variable for type metadata for UsoEntitySpan?);
    uint64_t v65 = String.init<A>(describing:)();
    uint64_t v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, &v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v60, &demangling cache variable for type metadata for UsoEntitySpan?);
    _os_log_impl(&dword_1B9C64000, v61, v62, "HomeAutomationAffinityScorer - Found HomeAutomation Span match: %s", v63, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v64, -1, -1);
    MEMORY[0x1BA9E48C0](v63, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v60, &demangling cache variable for type metadata for UsoEntitySpan?);
  }

  BOOL v67 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v57, 1, v5) != 1;
  outlined destroy of ReferenceResolutionClientProtocol?(v57, &demangling cache variable for type metadata for UsoEntitySpan?);
  return v67;
}

BOOL specialized HomeAutomationAffinityScorer.hasHKExactMatch(_:)(uint64_t a1)
{
  uint64_t v121 = type metadata accessor for SpanProperty();
  uint64_t v2 = *(void *)(v121 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v121);
  uint64_t v117 = (char *)v91 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v118 = (char *)v91 - v5;
  uint64_t v106 = type metadata accessor for IdentifierNamespace();
  uint64_t v6 = *(void *)(v106 - 8);
  MEMORY[0x1F4188790](v106);
  unint64_t v105 = (char *)v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UsoEntitySpan();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v115 = (char *)v91 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v91 - v15;
  uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntitySpan?);
  uint64_t v17 = MEMORY[0x1F4188790](a1);
  uint64_t v93 = (uint64_t)v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  int64_t v21 = (char *)v91 - v20;
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  uint64_t v24 = (char *)v91 - v23;
  uint64_t v25 = *(void *)(v22 + 16);
  uint64_t v103 = v8;
  uint64_t v104 = v25;
  uint64_t v95 = v9;
  if (v25)
  {
    uint64_t v92 = (char *)v91 - v23;
    uint64_t v26 = v9 + 16;
    uint64_t v116 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    unint64_t v101 = v22 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    unsigned int v100 = *MEMORY[0x1E4FA3060];
    uint64_t v99 = (void (**)(char *, void, uint64_t))(v6 + 104);
    uint64_t v98 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v120 = v2 + 16;
    uint64_t v108 = v2;
    uint64_t v119 = (void (**)(char *, uint64_t))(v2 + 8);
    uint64_t v27 = (void (**)(char *, uint64_t))(v9 + 8);
    uint64_t v97 = *(void *)(v9 + 72);
    v91[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t v28 = 0;
    long long v96 = xmmword_1BA04FD90;
    uint64_t v107 = v12;
    uint64_t v110 = v26;
    uint64_t v102 = v21;
    int64_t v111 = v16;
    unint64_t v112 = v27;
    do
    {
      uint64_t v113 = v28;
      v116(v16, v101 + v97 * v28, v8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v96;
      unint64_t v30 = v105;
      uint64_t v31 = v106;
      (*v99)(v105, v100, v106);
      uint64_t v32 = IdentifierNamespace.rawValue.getter();
      uint64_t v34 = v33;
      (*v98)(v30, v31);
      *(void *)(inited + 32) = v32;
      *(void *)(inited + 40) = v34;
      if (*(void *)(inited + 16)) {
        Swift::Int v114 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
      }
      else {
        Swift::Int v114 = MEMORY[0x1E4FBC870];
      }
      swift_setDeallocating();
      swift_arrayDestroy();
      uint64_t v35 = UsoEntitySpan.properties.getter();
      int64_t v36 = *(void *)(v35 + 16);
      if (v36)
      {
        uint64_t v122 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v36, 0);
        unint64_t v37 = (*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80);
        uint64_t v109 = v35;
        unint64_t v38 = v35 + v37;
        uint64_t v39 = *(void *)(v108 + 72);
        uint64_t v40 = *(void (**)(char *, unint64_t, uint64_t))(v108 + 16);
        do
        {
          uint64_t v41 = v118;
          uint64_t v42 = v121;
          v40(v118, v38, v121);
          uint64_t v43 = SpanProperty.key.getter();
          uint64_t v45 = v44;
          (*v119)(v41, v42);
          uint64_t v46 = v122;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v46 + 16) + 1, 1);
            uint64_t v46 = v122;
          }
          unint64_t v48 = *(void *)(v46 + 16);
          unint64_t v47 = *(void *)(v46 + 24);
          if (v48 >= v47 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1);
            uint64_t v46 = v122;
          }
          *(void *)(v46 + 16) = v48 + 1;
          uint64_t v49 = v46 + 16 * v48;
          *(void *)(v49 + 32) = v43;
          *(void *)(v49 + 40) = v45;
          v38 += v39;
          --v36;
        }
        while (v36);
        swift_bridgeObjectRelease();
        uint64_t v8 = v103;
        uint64_t v12 = v107;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v46 = MEMORY[0x1E4FBC860];
      }
      uint64_t v123 = Set.init(minimumCapacity:)();
      uint64_t v50 = *(void *)(v46 + 16);
      if (v50)
      {
        uint64_t v51 = (Swift::Int *)(v46 + 40);
        do
        {
          Swift::Int v52 = *(v51 - 1);
          Swift::Int v53 = *v51;
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(&v122, v52, v53);
          swift_bridgeObjectRelease();
          v51 += 2;
          --v50;
        }
        while (v50);
      }
      swift_bridgeObjectRelease();
      char v54 = specialized Set.isDisjoint(with:)(v123, v114);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v16 = v111;
      v116(v115, (unint64_t)v111, v8);
      if (v54)
      {
        char v55 = 0;
        int64_t v21 = v102;
      }
      else
      {
        uint64_t v56 = v108;
        if (one-time initialization token for kHKEntityTypes != -1) {
          swift_once();
        }
        uint64_t v57 = static HomeAutomationAffinityScorer.kHKEntityTypes;
        uint64_t v58 = UsoEntitySpan.properties.getter();
        uint64_t v59 = *(void *)(v58 + 16);
        if (v59)
        {
          Swift::Int v114 = v57;
          unint64_t v60 = v58 + ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80));
          uint64_t v61 = *(void *)(v56 + 72);
          os_log_type_t v62 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
          uint64_t v63 = (void *)MEMORY[0x1E4FBC860];
          do
          {
            uint64_t v65 = v117;
            uint64_t v66 = v121;
            v62(v117, v60, v121);
            uint64_t v67 = SpanProperty.valueString.getter();
            uint64_t v69 = v68;
            (*v119)(v65, v66);
            if (v69)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63[2] + 1, 1, v63);
              }
              unint64_t v71 = v63[2];
              unint64_t v70 = v63[3];
              if (v71 >= v70 >> 1) {
                uint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v70 > 1), v71 + 1, 1, v63);
              }
              v63[2] = v71 + 1;
              uint64_t v64 = &v63[2 * v71];
              v64[4] = v67;
              v64[5] = v69;
            }
            v60 += v61;
            --v59;
          }
          while (v59);
          swift_bridgeObjectRelease();
          uint64_t v8 = v103;
          uint64_t v16 = v111;
          uint64_t v57 = v114;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v63 = (void *)MEMORY[0x1E4FBC860];
        }
        uint64_t v123 = Set.init(minimumCapacity:)();
        uint64_t v72 = v63[2];
        if (v72)
        {
          uint64_t v73 = v63 + 5;
          do
          {
            Swift::Int v74 = *(v73 - 1);
            Swift::Int v75 = *v73;
            swift_bridgeObjectRetain();
            specialized Set._Variant.insert(_:)(&v122, v74, v75);
            swift_bridgeObjectRelease();
            v73 += 2;
            --v72;
          }
          while (v72);
        }
        swift_bridgeObjectRelease();
        char v76 = specialized Set.isDisjoint(with:)(v123, v57);
        swift_bridgeObjectRelease();
        char v55 = v76 ^ 1;
        int64_t v21 = v102;
        uint64_t v12 = v107;
      }
      uint64_t v77 = *v112;
      (*v112)(v115, v8);
      v116(v12, (unint64_t)v16, v8);
      if (v55)
      {
        Swift::Bool v78 = UsoEntitySpan.hasExactMatch()();
        v77(v12, v8);
        if (v78)
        {
          swift_bridgeObjectRelease();
          uint64_t v9 = v95;
          uint64_t v24 = v92;
          (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v92, v16, v8);
          uint64_t v79 = 0;
          goto LABEL_44;
        }
      }
      else
      {
        v77(v12, v8);
      }
      uint64_t v28 = v113 + 1;
      v77(v16, v8);
    }
    while (v28 != v104);
    swift_bridgeObjectRelease();
    uint64_t v79 = 1;
    uint64_t v9 = v95;
    uint64_t v24 = v92;
  }
  else
  {
    uint64_t v79 = 1;
  }
LABEL_44:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v24, v79, 1, v8);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v80 = type metadata accessor for Logger();
  __swift_project_value_buffer(v80, (uint64_t)static Logger.executor);
  uint64_t v81 = (uint64_t)v24;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v24, (uint64_t)v21, &demangling cache variable for type metadata for UsoEntitySpan?);
  uint64_t v82 = Logger.logObject.getter();
  os_log_type_t v83 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v82, v83))
  {
    uint64_t v84 = (uint8_t *)swift_slowAlloc();
    uint64_t v85 = swift_slowAlloc();
    uint64_t v122 = v85;
    *(_DWORD *)uint64_t v84 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v21, v93, &demangling cache variable for type metadata for UsoEntitySpan?);
    uint64_t v86 = String.init<A>(describing:)();
    uint64_t v123 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v8 = v103;
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, &demangling cache variable for type metadata for UsoEntitySpan?);
    _os_log_impl(&dword_1B9C64000, v82, v83, "HomeAutomationAffinityScorer - Found HomeKitSpan with ExactMatch %s", v84, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v85, -1, -1);
    uint64_t v88 = v84;
    uint64_t v9 = v95;
    MEMORY[0x1BA9E48C0](v88, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, &demangling cache variable for type metadata for UsoEntitySpan?);
  }

  BOOL v89 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v81, 1, v8) != 1;
  outlined destroy of ReferenceResolutionClientProtocol?(v81, &demangling cache variable for type metadata for UsoEntitySpan?);
  return v89;
}

BOOL specialized HomeAutomationAffinityScorer.hasHKFuzzyMatch(_:)(uint64_t a1)
{
  uint64_t matched = type metadata accessor for MatchInfo.MatchSignals();
  uint64_t v2 = *(void *)(matched - 8);
  MEMORY[0x1F4188790](matched);
  uint64_t v4 = (char *)&v140 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MatchInfo?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v161 = (char *)&v140 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v163 = type metadata accessor for MatchInfo();
  uint64_t v7 = *(void *)(v163 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v163);
  Swift::Int v158 = (char *)&v140 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v156 = (char *)&v140 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v167 = (char *)&v140 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PayloadAttachmentInfo?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v164 = (char *)&v140 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v162 = (char *)&v140 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = type metadata accessor for PayloadAttachmentInfo.AttachmentType();
  uint64_t v17 = *(void *)(v165 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v165);
  uint64_t v150 = (char *)&v140 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v149 = (char *)&v140 - v20;
  uint64_t v194 = type metadata accessor for SpanProperty();
  uint64_t v21 = *(void *)(v194 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v194);
  os_log_type_t v190 = (char *)&v140 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  BOOL v191 = (char *)&v140 - v24;
  uint64_t v177 = type metadata accessor for IdentifierNamespace();
  uint64_t v25 = *(void *)(v177 - 8);
  MEMORY[0x1F4188790](v177);
  uint64_t v176 = (char *)&v140 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v182 = type metadata accessor for UsoEntitySpan();
  uint64_t v27 = *(void *)(v182 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v182);
  Swift::Int v180 = (char *)&v140 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v32 = (char *)&v140 - v31;
  uint64_t v33 = MEMORY[0x1F4188790](v30);
  uint64_t v187 = (char *)&v140 - v34;
  MEMORY[0x1F4188790](v33);
  uint64_t v186 = (char *)&v140 - v35;
  uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntitySpan?);
  uint64_t v36 = MEMORY[0x1F4188790](v143);
  uint64_t v142 = (uint64_t)&v140 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = MEMORY[0x1F4188790](v36);
  uint64_t v148 = (char *)&v140 - v39;
  MEMORY[0x1F4188790](v38);
  uint64_t v41 = (char *)&v140 - v40;
  uint64_t v175 = *(void *)(a1 + 16);
  uint64_t v151 = (char *)&v140 - v40;
  if (!v175)
  {
    uint64_t v127 = 1;
    uint64_t v45 = v182;
    goto LABEL_58;
  }
  uint64_t v141 = v27;
  uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  uint64_t v42 = v27 + 16;
  uint64_t v188 = v43;
  uint64_t v173 = a1 + ((*(unsigned __int8 *)(v42 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 64));
  unsigned int v172 = *MEMORY[0x1E4FA3060];
  Swift::Int v171 = (void (**)(char *, void, uint64_t))(v25 + 104);
  uint64_t v170 = (void (**)(char *, uint64_t))(v25 + 8);
  uint64_t v193 = v21 + 16;
  uint64_t v178 = v21;
  uint64_t v192 = (void (**)(char *, uint64_t))(v21 + 8);
  char v181 = (void (**)(char *, uint64_t))(v42 - 8);
  unint64_t v155 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  uint64_t v147 = (void (**)(char *, uint64_t, uint64_t))(v17 + 32);
  unsigned int v146 = *MEMORY[0x1E4FA30A0];
  uint64_t v145 = (void (**)(char *, void, uint64_t))(v17 + 104);
  uint64_t v144 = (void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v154 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  uint64_t v159 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  unint64_t v152 = (void (**)(char *, uint64_t, uint64_t))(v7 + 32);
  unint64_t v160 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v166 = (void (**)(char *, char *, uint64_t))(v7 + 16);
  unint64_t v153 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v189 = v42;
  uint64_t v169 = *(void *)(v42 + 56);
  uint64_t v140 = a1;
  swift_bridgeObjectRetain();
  uint64_t v44 = 0;
  long long v168 = xmmword_1BA04FD90;
  uint64_t v45 = v182;
  uint64_t v46 = v180;
  unint64_t v47 = v186;
  uint64_t v174 = v4;
  uint64_t v183 = v32;
  while (1)
  {
    uint64_t v184 = v44;
    v188(v47, v173 + v169 * v44, v45);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = v168;
    uint64_t v50 = v176;
    uint64_t v51 = v177;
    (*v171)(v176, v172, v177);
    uint64_t v52 = IdentifierNamespace.rawValue.getter();
    uint64_t v54 = v53;
    (*v170)(v50, v51);
    *(void *)(inited + 32) = v52;
    *(void *)(inited + 40) = v54;
    if (*(void *)(inited + 16)) {
      uint64_t v185 = (void (*)(char *, uint64_t))specialized Set.init(_nonEmptyArrayLiteral:)(inited);
    }
    else {
      uint64_t v185 = (void (*)(char *, uint64_t))MEMORY[0x1E4FBC870];
    }
    swift_setDeallocating();
    swift_arrayDestroy();
    uint64_t v55 = UsoEntitySpan.properties.getter();
    int64_t v56 = *(void *)(v55 + 16);
    if (v56)
    {
      uint64_t v195 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v56, 0);
      unint64_t v57 = (*(unsigned __int8 *)(v178 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v178 + 80);
      uint64_t v179 = v55;
      unint64_t v58 = v55 + v57;
      uint64_t v59 = *(void *)(v178 + 72);
      unint64_t v60 = *(void (**)(char *, unint64_t, uint64_t))(v178 + 16);
      do
      {
        uint64_t v61 = v191;
        uint64_t v62 = v194;
        v60(v191, v58, v194);
        uint64_t v63 = SpanProperty.key.getter();
        uint64_t v65 = v64;
        (*v192)(v61, v62);
        uint64_t v66 = v195;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v66 + 16) + 1, 1);
          uint64_t v66 = v195;
        }
        unint64_t v68 = *(void *)(v66 + 16);
        unint64_t v67 = *(void *)(v66 + 24);
        if (v68 >= v67 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v67 > 1, v68 + 1, 1);
          uint64_t v66 = v195;
        }
        *(void *)(v66 + 16) = v68 + 1;
        uint64_t v69 = v66 + 16 * v68;
        *(void *)(v69 + 32) = v63;
        *(void *)(v69 + 40) = v65;
        v58 += v59;
        --v56;
      }
      while (v56);
      swift_bridgeObjectRelease();
      uint64_t v45 = v182;
      uint64_t v46 = v180;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v66 = MEMORY[0x1E4FBC860];
    }
    uint64_t v196 = Set.init(minimumCapacity:)();
    uint64_t v70 = *(void *)(v66 + 16);
    unint64_t v47 = v186;
    if (v70)
    {
      unint64_t v71 = (Swift::Int *)(v66 + 40);
      do
      {
        Swift::Int v72 = *(v71 - 1);
        Swift::Int v73 = *v71;
        swift_bridgeObjectRetain();
        specialized Set._Variant.insert(_:)(&v195, v72, v73);
        swift_bridgeObjectRelease();
        v71 += 2;
        --v70;
      }
      while (v70);
    }
    swift_bridgeObjectRelease();
    char v74 = specialized Set.isDisjoint(with:)(v196, (uint64_t)v185);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v188(v187, (uint64_t)v47, v45);
    if (v74)
    {
      char v75 = 0;
      char v76 = v174;
      uint64_t v77 = v183;
    }
    else
    {
      uint64_t v77 = v183;
      if (one-time initialization token for kHKEntityTypes != -1) {
        swift_once();
      }
      uint64_t v185 = (void (*)(char *, uint64_t))static HomeAutomationAffinityScorer.kHKEntityTypes;
      uint64_t v78 = UsoEntitySpan.properties.getter();
      uint64_t v79 = *(void *)(v78 + 16);
      if (v79)
      {
        unint64_t v80 = (*(unsigned __int8 *)(v178 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v178 + 80);
        uint64_t v179 = v78;
        unint64_t v81 = v78 + v80;
        uint64_t v82 = *(void *)(v178 + 72);
        os_log_type_t v83 = *(void (**)(char *, unint64_t, uint64_t))(v178 + 16);
        uint64_t v84 = (void *)MEMORY[0x1E4FBC860];
        do
        {
          uint64_t v86 = v190;
          uint64_t v87 = v194;
          v83(v190, v81, v194);
          uint64_t v88 = SpanProperty.valueString.getter();
          uint64_t v90 = v89;
          (*v192)(v86, v87);
          if (v90)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v84[2] + 1, 1, v84);
            }
            unint64_t v92 = v84[2];
            unint64_t v91 = v84[3];
            if (v92 >= v91 >> 1) {
              uint64_t v84 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v91 > 1), v92 + 1, 1, v84);
            }
            v84[2] = v92 + 1;
            uint64_t v85 = &v84[2 * v92];
            v85[4] = v88;
            v85[5] = v90;
          }
          v81 += v82;
          --v79;
        }
        while (v79);
        swift_bridgeObjectRelease();
        uint64_t v77 = v183;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v84 = (void *)MEMORY[0x1E4FBC860];
      }
      uint64_t v196 = Set.init(minimumCapacity:)();
      uint64_t v93 = v84[2];
      uint64_t v45 = v182;
      uint64_t v46 = v180;
      if (v93)
      {
        uint64_t v94 = v84 + 5;
        do
        {
          Swift::Int v95 = *(v94 - 1);
          Swift::Int v96 = *v94;
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(&v195, v95, v96);
          swift_bridgeObjectRelease();
          v94 += 2;
          --v93;
        }
        while (v93);
      }
      swift_bridgeObjectRelease();
      char v97 = specialized Set.isDisjoint(with:)(v196, (uint64_t)v185);
      swift_bridgeObjectRelease();
      char v75 = v97 ^ 1;
      char v76 = v174;
      unint64_t v47 = v186;
    }
    uint64_t v98 = *v181;
    (*v181)(v187, v45);
    v188(v77, (uint64_t)v47, v45);
    if ((v75 & 1) == 0) {
      goto LABEL_4;
    }
    uint64_t v99 = v164;
    UsoEntitySpan.payloadAttachmentInfo.getter();
    uint64_t v100 = (uint64_t)v99;
    uint64_t v101 = type metadata accessor for PayloadAttachmentInfo();
    uint64_t v102 = *(void *)(v101 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v102 + 48))(v100, 1, v101) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v100, &demangling cache variable for type metadata for PayloadAttachmentInfo?);
      uint64_t v103 = (uint64_t)v162;
      (*v154)(v162, 1, 1, v165);
LABEL_44:
      outlined destroy of ReferenceResolutionClientProtocol?(v103, &demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
      v188(v46, (uint64_t)v77, v45);
      uint64_t v104 = v163;
      unint64_t v105 = v166;
      uint64_t v106 = v160;
      goto LABEL_46;
    }
    uint64_t v103 = (uint64_t)v162;
    PayloadAttachmentInfo.attachmentType.getter();
    (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v100, v101);
    if ((*v155)(v103, 1, v165) == 1) {
      goto LABEL_44;
    }
    uint64_t v107 = v149;
    uint64_t v108 = v103;
    uint64_t v109 = v165;
    (*v147)(v149, v108, v165);
    uint64_t v110 = v150;
    (*v145)(v150, v146, v109);
    lazy protocol witness table accessor for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType(&lazy protocol witness table cache variable for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType, MEMORY[0x1E4FA30A8]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v111 = v195;
    uint64_t v112 = v196;
    uint64_t v113 = *v144;
    Swift::Int v114 = v110;
    uint64_t v77 = v183;
    (*v144)(v114, v109);
    uint64_t v115 = v107;
    uint64_t v45 = v182;
    v113(v115, v109);
    v188(v46, (uint64_t)v77, v45);
    uint64_t v104 = v163;
    unint64_t v105 = v166;
    uint64_t v106 = v160;
    if (v111 == v112) {
      goto LABEL_56;
    }
LABEL_46:
    uint64_t v116 = (uint64_t)v161;
    UsoEntitySpan.matchInfo.getter();
    if ((*v159)(v116, 1, v104) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v116, &demangling cache variable for type metadata for MatchInfo?);
      v98(v46, v45);
      unint64_t v47 = v186;
LABEL_4:
      v98(v77, v45);
      uint64_t v48 = v45;
      goto LABEL_5;
    }
    uint64_t v185 = v98;
    uint64_t v117 = v167;
    (*v152)(v167, v116, v104);
    static MatchInfo.MatchSignals.approximateMatch.getter();
    char v118 = MatchInfo.hasMatchSignals(_:)();
    uint64_t v119 = *v106;
    uint64_t v120 = matched;
    (*v106)(v76, matched);
    uint64_t v121 = *v105;
    uint64_t v122 = v156;
    (*v105)(v156, v117, v104);
    if (v118)
    {
      uint64_t v124 = *v153;
      (*v153)(v122, v104);
      uint64_t v125 = v158;
      Swift::Int v128 = v167;
      v121(v158, v167, v104);
      goto LABEL_55;
    }
    uint64_t v123 = v153;
    static MatchInfo.MatchSignals.partialMatch.getter();
    LODWORD(v179) = MatchInfo.hasMatchSignals(_:)();
    v119(v76, v120);
    uint64_t v124 = *v123;
    (*v123)(v122, v104);
    uint64_t v125 = v158;
    v121(v158, v167, v104);
    if (v179) {
      break;
    }
    static MatchInfo.MatchSignals.aliasMatch.getter();
    char v126 = MatchInfo.hasMatchSignals(_:)();
    v119(v76, v120);
    v124(v125, v104);
    v124(v167, v104);
    uint64_t v46 = v180;
    uint64_t v48 = v182;
    uint64_t v98 = v185;
    v185(v180, v182);
    v98(v183, v48);
    unint64_t v47 = v186;
    if (v126) {
      goto LABEL_57;
    }
LABEL_5:
    uint64_t v44 = v184 + 1;
    v98(v47, v48);
    uint64_t v45 = v48;
    if (v44 == v175)
    {
      swift_bridgeObjectRelease();
      uint64_t v127 = 1;
      uint64_t v27 = v141;
      uint64_t v41 = v151;
      goto LABEL_58;
    }
  }
  Swift::Int v128 = v167;
LABEL_55:
  uint64_t v77 = v183;
  v124(v125, v104);
  v124(v128, v104);
  uint64_t v46 = v180;
  uint64_t v45 = v182;
  uint64_t v98 = v185;
LABEL_56:
  v98(v46, v45);
  v98(v77, v45);
  unint64_t v47 = v186;
  uint64_t v48 = v45;
LABEL_57:
  swift_bridgeObjectRelease();
  uint64_t v27 = v141;
  uint64_t v41 = v151;
  (*(void (**)(char *, char *, uint64_t))(v141 + 32))(v151, v47, v48);
  uint64_t v127 = 0;
  uint64_t v45 = v48;
LABEL_58:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v41, v127, 1, v45);
  uint64_t v129 = (uint64_t)v148;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v130 = type metadata accessor for Logger();
  __swift_project_value_buffer(v130, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v41, v129, &demangling cache variable for type metadata for UsoEntitySpan?);
  char v131 = Logger.logObject.getter();
  os_log_type_t v132 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v131, v132))
  {
    uint64_t v133 = (uint8_t *)swift_slowAlloc();
    uint64_t v134 = swift_slowAlloc();
    uint64_t v195 = v134;
    *(_DWORD *)uint64_t v133 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?(v129, v142, &demangling cache variable for type metadata for UsoEntitySpan?);
    uint64_t v135 = String.init<A>(describing:)();
    uint64_t v196 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v135, v136, &v195);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v129, &demangling cache variable for type metadata for UsoEntitySpan?);
    _os_log_impl(&dword_1B9C64000, v131, v132, "HomeAutomationAffinityScorer - Found HomeKitSpan with FuzzyMatch %s", v133, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v134, -1, -1);
    MEMORY[0x1BA9E48C0](v133, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v129, &demangling cache variable for type metadata for UsoEntitySpan?);
  }

  uint64_t v137 = (uint64_t)v151;
  BOOL v138 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v151, 1, v45) != 1;
  outlined destroy of ReferenceResolutionClientProtocol?(v137, &demangling cache variable for type metadata for UsoEntitySpan?);
  return v138;
}

BOOL specialized HomeAutomationAffinityScorer.hasPlaceHintMatch(_:)(uint64_t a1)
{
  uint64_t v70 = type metadata accessor for SpanProperty();
  uint64_t v2 = *(void *)(v70 - 8);
  MEMORY[0x1F4188790](v70);
  uint64_t v69 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UsoEntitySpan();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntitySpan?);
  uint64_t v8 = MEMORY[0x1F4188790](v52);
  uint64_t v51 = (uint64_t)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v53 = (uint64_t)&v49 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v49 - v12;
  uint64_t v64 = *(void *)(a1 + 16);
  uint64_t v54 = (char *)&v49 - v12;
  if (v64)
  {
    uint64_t v50 = v5;
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v14 = v5 + 16;
    uint64_t v61 = a1 + ((*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64));
    uint64_t v62 = v15;
    unint64_t v67 = (void (**)(char *, uint64_t))(v2 + 8);
    uint64_t v68 = v2 + 16;
    unint64_t v58 = (void (**)(char *, uint64_t))(v14 - 8);
    uint64_t v63 = v14;
    uint64_t v60 = *(void *)(v14 + 56);
    uint64_t v49 = a1;
    swift_bridgeObjectRetain();
    uint64_t v16 = 0;
    uint64_t v59 = 0x80000001BA060E50;
    uint64_t v56 = v2;
    uint64_t v57 = v4;
    uint64_t v55 = v7;
    while (1)
    {
      uint64_t v66 = v16;
      v62(v7, v61 + v60 * v16, v4);
      uint64_t v17 = UsoEntitySpan.properties.getter();
      int64_t v18 = *(void *)(v17 + 16);
      if (v18)
      {
        uint64_t v71 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
        uint64_t v19 = *(unsigned __int8 *)(v2 + 80);
        uint64_t v65 = v17;
        uint64_t v20 = v17 + ((v19 + 32) & ~v19);
        uint64_t v21 = *(void *)(v2 + 72);
        uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
        do
        {
          uint64_t v23 = v69;
          uint64_t v24 = v70;
          v22(v69, v20, v70);
          uint64_t v25 = SpanProperty.key.getter();
          uint64_t v27 = v26;
          (*v67)(v23, v24);
          uint64_t v28 = v71;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v28 + 16) + 1, 1);
            uint64_t v28 = v71;
          }
          unint64_t v30 = *(void *)(v28 + 16);
          unint64_t v29 = *(void *)(v28 + 24);
          if (v30 >= v29 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
            uint64_t v28 = v71;
          }
          *(void *)(v28 + 16) = v30 + 1;
          uint64_t v31 = v28 + 16 * v30;
          *(void *)(v31 + 32) = v25;
          *(void *)(v31 + 40) = v27;
          v20 += v21;
          --v18;
        }
        while (v18);
        swift_bridgeObjectRelease();
        uint64_t v2 = v56;
        uint64_t v4 = v57;
        uint64_t v7 = v55;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v28 = MEMORY[0x1E4FBC860];
      }
      uint64_t v72 = Set.init(minimumCapacity:)();
      uint64_t v32 = *(void *)(v28 + 16);
      if (v32)
      {
        uint64_t v33 = (Swift::Int *)(v28 + 40);
        do
        {
          Swift::Int v34 = *(v33 - 1);
          Swift::Int v35 = *v33;
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(&v71, v34, v35);
          swift_bridgeObjectRelease();
          v33 += 2;
          --v32;
        }
        while (v32);
      }
      swift_bridgeObjectRelease();
      char v36 = specialized Set.contains(_:)(0xD000000000000017, v59, v72);
      swift_bridgeObjectRelease();
      if (v36) {
        break;
      }
      uint64_t v16 = v66 + 1;
      (*v58)(v7, v4);
      if (v16 == v64)
      {
        swift_bridgeObjectRelease();
        uint64_t v37 = 1;
        uint64_t v5 = v50;
        uint64_t v13 = v54;
        goto LABEL_20;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v5 = v50;
    uint64_t v13 = v54;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v54, v7, v4);
    uint64_t v37 = 0;
  }
  else
  {
    uint64_t v37 = 1;
  }
LABEL_20:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v13, v37, 1, v4);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v38 = type metadata accessor for Logger();
  __swift_project_value_buffer(v38, (uint64_t)static Logger.executor);
  uint64_t v39 = v53;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v13, v53, &demangling cache variable for type metadata for UsoEntitySpan?);
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    uint64_t v71 = v43;
    *(_DWORD *)uint64_t v42 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?(v39, v51, &demangling cache variable for type metadata for UsoEntitySpan?);
    uint64_t v44 = String.init<A>(describing:)();
    uint64_t v72 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v39, &demangling cache variable for type metadata for UsoEntitySpan?);
    _os_log_impl(&dword_1B9C64000, v40, v41, "HomeAutomationAffinityScorer - Found HomeAutomation PlaceHint: %s", v42, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v43, -1, -1);
    MEMORY[0x1BA9E48C0](v42, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v39, &demangling cache variable for type metadata for UsoEntitySpan?);
  }

  uint64_t v46 = (uint64_t)v54;
  BOOL v47 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v54, 1, v4) != 1;
  outlined destroy of ReferenceResolutionClientProtocol?(v46, &demangling cache variable for type metadata for UsoEntitySpan?);
  return v47;
}

uint64_t specialized HomeAutomationAffinityScorer.isiOSLockRequest(_:)(uint64_t a1)
{
  uint64_t v53 = type metadata accessor for SpanProperty();
  uint64_t v2 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  uint64_t v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UsoEntitySpan();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = *(void *)(a1 + 16);
  if (v47)
  {
    uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v9 = v6 + 16;
    uint64_t v45 = a1 + ((*(unsigned __int8 *)(v9 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 64));
    uint64_t v46 = v10;
    uint64_t v51 = (void (**)(char *, uint64_t))(v2 + 8);
    uint64_t v52 = v2 + 16;
    uint64_t v44 = (void (**)(char *, uint64_t))(v9 - 8);
    uint64_t v11 = *(void *)(v9 + 56);
    uint64_t v42 = v2;
    uint64_t v43 = v11;
    uint64_t v38 = a1;
    swift_bridgeObjectRetain();
    uint64_t v12 = 0;
    uint64_t v40 = v9;
    uint64_t v41 = v5;
    uint64_t v39 = v8;
    do
    {
      uint64_t v50 = v12;
      v46(v8, v45 + v43 * v12, v5);
      if (one-time initialization token for kLockRelatedValues != -1) {
        swift_once();
      }
      uint64_t v49 = static HomeAutomationAffinityScorer.kLockRelatedValues;
      uint64_t v13 = UsoEntitySpan.properties.getter();
      uint64_t v14 = *(void *)(v13 + 16);
      if (v14)
      {
        uint64_t v15 = *(unsigned __int8 *)(v42 + 80);
        uint64_t v48 = v13;
        uint64_t v16 = v13 + ((v15 + 32) & ~v15);
        uint64_t v17 = *(void *)(v42 + 72);
        int64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v42 + 16);
        uint64_t v19 = (void *)MEMORY[0x1E4FBC860];
        do
        {
          uint64_t v21 = v53;
          v18(v4, v16, v53);
          uint64_t v22 = SpanProperty.valueString.getter();
          uint64_t v24 = v23;
          (*v51)(v4, v21);
          if (v24)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19[2] + 1, 1, v19);
            }
            unint64_t v26 = v19[2];
            unint64_t v25 = v19[3];
            if (v26 >= v25 >> 1) {
              uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v25 > 1), v26 + 1, 1, v19);
            }
            v19[2] = v26 + 1;
            uint64_t v20 = &v19[2 * v26];
            unsigned char v20[4] = v22;
            v20[5] = v24;
          }
          v16 += v17;
          --v14;
        }
        while (v14);
        swift_bridgeObjectRelease();
        uint64_t v5 = v41;
        uint64_t v8 = v39;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v19 = (void *)MEMORY[0x1E4FBC860];
      }
      uint64_t v55 = Set.init(minimumCapacity:)();
      uint64_t v27 = v19[2];
      if (v27)
      {
        uint64_t v28 = v19 + 5;
        do
        {
          Swift::Int v29 = *(v28 - 1);
          Swift::Int v30 = *v28;
          swift_bridgeObjectRetain();
          specialized Set._Variant.insert(_:)(&v54, v29, v30);
          swift_bridgeObjectRelease();
          v28 += 2;
          --v27;
        }
        while (v27);
      }
      swift_bridgeObjectRelease();
      char v31 = specialized Set.isDisjoint(with:)(v55, v49);
      swift_bridgeObjectRelease();
      (*v44)(v8, v5);
      if ((v31 & 1) == 0) {
        break;
      }
      uint64_t v12 = v50 + 1;
    }
    while (v50 + 1 != v47);
    char v32 = v31 ^ 1;
    swift_bridgeObjectRelease();
  }
  else
  {
    char v32 = 0;
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  __swift_project_value_buffer(v33, (uint64_t)static Logger.executor);
  Swift::Int v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v34, v35))
  {
    char v36 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)char v36 = 67109120;
    LODWORD(v54) = v32 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v34, v35, "HomeAutomationAffinityScorer - haMatchConditions.isiOSLockRequest %{BOOL}d ", v36, 8u);
    MEMORY[0x1BA9E48C0](v36, -1, -1);
  }

  return v32 & 1;
}