uint64_t protocol witness for Bridge.name.getter in conformance ConversationBridgeSPI()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

id protocol witness for QueueIsolatedBridge.queue.getter in conformance ConversationBridgeSPI()
{
  return *(id *)(v0 + 32);
}

uint64_t protocol witness for Bridge.handleMessage(_:) in conformance ConversationBridgeSPI()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t ConversationBridgeSPI.handleMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790]();
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v1 + 16);
  unint64_t v18 = 0;
  unint64_t v19 = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  unint64_t v18 = 0xD000000000000014;
  unint64_t v19 = 0x80000001BA064800;
  swift_getObjectType();
  v9._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x80000001BA064820;
  v10._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v10);
  MessageBase.messageId.getter();
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  unint64_t v12 = v18;
  unint64_t v13 = v19;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v2;
  *(void *)(v14 + 24) = a1;
  v15 = *(void (**)(unint64_t, unint64_t, void *, uint64_t))(*(void *)v8 + 208);
  swift_retain();
  id v16 = a1;
  v15(v12, v13, &async function pointer to partial apply for closure #1 in ConversationBridgeSPI.handleMessage(_:), v14);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t partial apply for closure #1 in ConversationBridgeSPI.handleMessage(_:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationBridgeSPI.handleMessage(_:)(v2, v3);
}

uint64_t closure #1 in ConversationBridgeSPI.handleMessage(_:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v3 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ConversationBridgeSPI.handleMessage(_:), v3, 0);
}

uint64_t closure #1 in ConversationBridgeSPI.handleMessage(_:)()
{
  (*(void (**)(void))(**(void **)(v0[5] + 24) + 256))(v0[6]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void ConversationRequestAwareBridgeBase.handleMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790]();
  v7 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for RequestMessageBase();
  uint64_t v8 = (void *)swift_dynamicCastClass();
  if (!v8) {
    goto LABEL_15;
  }
  uint64_t v84 = v5;
  MEMORY[0x1F4188790]();
  Swift::String v9 = v8;
  *(&v80 - 2) = (uint64_t)v8;
  uint64_t v11 = (uint64_t)&v10[4];
  unint64_t v12 = v10 + 6;
  id v13 = a1;
  os_unfair_lock_lock(v12);
  partial apply for closure #1 in ConversationRequestAwareBridgeBase.handleMessage(_:)(v11, (BOOL *)v86);
  os_unfair_lock_unlock(v12);
  char v14 = v86[0];

  if (v14)
  {
    uint64_t v84 = v2;
    id v15 = v13;
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      v86[0] = v19;
      *(_DWORD *)unint64_t v18 = 136315138;
      swift_getObjectType();
      uint64_t v20 = _typeName(_:qualified:)();
      uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v86);
      uint64_t v8 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v16, v17, "RequestAware bridge handling request-scoped message %s outside of a request", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v19, -1, -1);
      MEMORY[0x1BA9E48C0](v18, -1, -1);
    }
    else
    {

      uint64_t v8 = v9;
    }
LABEL_15:
    ConversationMessageDispatchingBridgeBase.handleMessage(_:)(a1);

    return;
  }
  if ((*(unsigned char *)(v2 + direct field offset for ConversationRequestAwareBridgeBase.hasRegisteredToAnyStartRequest) & 1) == 0)
  {
    swift_retain_n();
    id v26 = v13;
    v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    uint64_t v29 = v2;
    if (os_log_type_enabled(v27, v28))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      v86[0] = v31;
      *(_DWORD *)v30 = 136315138;
      uint64_t v32 = *(void *)(v29 + 16);
      unint64_t v33 = *(void *)(v29 + 24);
      swift_bridgeObjectRetain();
      uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v27, v28, "Bridge: %s did not register any start request message so not handling any RequestMessageBase messages", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v31, -1, -1);
      MEMORY[0x1BA9E48C0](v30, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    goto LABEL_22;
  }
  swift_getObjectType();
  uint64_t v22 = swift_conformsToProtocol2();
  if (v22) {
    v23 = v22;
  }
  else {
    v23 = 0;
  }
  if (v22) {
    v24 = v13;
  }
  else {
    v24 = 0;
  }
  if (v24)
  {
    id v25 = v13;
    ConversationRequestAwareBridgeBase.handleStartRequestInternal(_:)(v24, v23);

    return;
  }
  type metadata accessor for EndRequestMessageBase();
  uint64_t v34 = swift_dynamicCastClass();
  if (v34)
  {
    v35 = (void *)v34;
    id v26 = v13;
    ConversationRequestAwareBridgeBase.handleEndRequestInternal(_:)(v35);
LABEL_22:

    return;
  }
  v36 = v9;
  unint64_t v37 = specialized static CandidateRequestMessage.from(_:)(v9);
  if ((~v37 & 0xF000000000000007) != 0)
  {
    unint64_t v46 = v37;
    id v47 = v13;
    ConversationRequestAwareBridgeBase.handleCandidateRequestMessageInternal(_:)(v46);

    outlined consume of CandidateRequestMessage?(v46);
    return;
  }
  uint64_t v38 = v2;
  v39 = *(uint64_t (**)(void))(*(void *)v2 + 376);
  id v26 = v13;
  uint64_t v40 = v39();
  if (v40)
  {
    uint64_t v42 = *(void *)(v40 + 64);
    uint64_t v41 = *(void *)(v40 + 72);
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v43 = RequestMessageBase.requestId.getter();
    if (v41)
    {
      if (v42 == v43 && v41 == v44)
      {
        uint64_t v45 = swift_bridgeObjectRelease_n();
        goto LABEL_39;
      }
      char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v45 = swift_bridgeObjectRelease();
      if (v64)
      {
LABEL_39:
        uint64_t v65 = ((uint64_t (*)(uint64_t))v39)(v45);
        if (v65)
        {
          (*(void (**)(void *, uint64_t))(*(void *)v38 + 496))(v36, v65);
          swift_release();
        }
        goto LABEL_22;
      }
      goto LABEL_32;
    }
  }
  else
  {
    RequestMessageBase.requestId.getter();
  }
  uint64_t v45 = swift_bridgeObjectRelease();
LABEL_32:
  if ((*(unsigned char *)(v38
                 + direct field offset for ConversationRequestAwareBridgeBase.hasAutoRegisteredStartRequestMessageBase) & 1) != 0
    || (uint64_t v48 = ((uint64_t (*)(uint64_t))v39)(v45), swift_release(), v48))
  {
    id v49 = v26;
    swift_retain_n();
    id v26 = v49;
    v50 = Logger.logObject.getter();
    int v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, (os_log_type_t)v51))
    {
      LODWORD(v82) = v51;
      v81 = v50;
      uint64_t v52 = swift_slowAlloc();
      uint64_t v80 = swift_slowAlloc();
      v86[0] = v80;
      *(_DWORD *)uint64_t v52 = 136315906;
      MessageBase.messageId.getter();
      _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
      v83 = v36;
      unint64_t v55 = v54;
      (*(void (**)(char *, uint64_t))(v84 + 8))(v7, v4);
      uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v55, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v52 + 12) = 2080;
      swift_getObjectType();
      uint64_t v56 = _typeName(_:qualified:)();
      uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v52 + 22) = 2080;
      uint64_t v58 = RequestMessageBase.requestId.getter();
      uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      uint64_t v60 = swift_bridgeObjectRelease();
      *(_WORD *)(v52 + 32) = 2080;
      uint64_t v61 = ((uint64_t (*)(uint64_t))v39)(v60);
      if (v61)
      {
        uint64_t v63 = *(void *)(v61 + 64);
        unint64_t v62 = *(void *)(v61 + 72);
        swift_bridgeObjectRetain();
        swift_release();
      }
      else
      {
        unint64_t v62 = 0xE700000000000000;
        uint64_t v63 = 0x74657320746F4ELL;
      }
      uint64_t v79 = v80;
      v78 = v81;
      uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v62, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v78, (os_log_type_t)v82, "Receiving message id: %s of type: %s for request Id: %s but current request id: %s", (uint8_t *)v52, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v79, -1, -1);
      MEMORY[0x1BA9E48C0](v52, -1, -1);
    }
    else
    {
      swift_release_n();
    }
    goto LABEL_22;
  }
  id v66 = v26;
  v67 = Logger.logObject.getter();
  os_log_type_t v68 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v67, v68))
  {
    uint64_t v69 = swift_slowAlloc();
    uint64_t v82 = swift_slowAlloc();
    v86[0] = v82;
    *(_DWORD *)uint64_t v69 = 136315650;
    MessageBase.messageId.getter();
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter();
    v83 = v36;
    unint64_t v72 = v71;
    (*(void (**)(char *, uint64_t))(v84 + 8))(v7, v4);
    uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v72, v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v69 + 12) = 2080;
    swift_getObjectType();
    uint64_t v73 = _typeName(_:qualified:)();
    uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v69 + 22) = 2080;
    uint64_t v75 = RequestMessageBase.requestId.getter();
    uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v67, v68, "Receiving message id: %s of type: %s for request Id: %s but current request id not set", (uint8_t *)v69, 0x20u);
    uint64_t v77 = v82;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v77, -1, -1);
    MEMORY[0x1BA9E48C0](v69, -1, -1);
  }
  else
  {
  }
}

uint64_t ConversationRequestAwareBridgeBase.currentRequestProcessor.getter()
{
  return swift_retain();
}

uint64_t ConversationRequestAwareBridgeBase.candidateRequestProcessors.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t ConversationBridge.rraasClient.getter@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3 + *a1;
  swift_beginAccess();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v6, a3, a2);
}

uint64_t ConversationBridge.rraasClient.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&direct field offset for ConversationBridge.rraasClient, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?, a1);
}

uint64_t outlined init with copy of ReferenceResolutionClientProtocol?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of ReferenceResolutionClientProtocol(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t ConversationBridge.correctionsPlatformClient.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&direct field offset for ConversationBridge.correctionsPlatformClient, &demangling cache variable for type metadata for CorrectionsHandling?, a1);
}

uint64_t ConversationBridge.networkAvailabilityProvider.getter()
{
  return ConversationBridge.runSiriKitExecutorProcessor.getter();
}

uint64_t ConversationBridge.currentSessionId.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&direct field offset for ConversationBridge.currentSessionId, (uint64_t *)&demangling cache variable for type metadata for UUID?, a1);
}

uint64_t outlined destroy of ReferenceResolutionClientProtocol?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t ConversationBridge.sessionUserId.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&direct field offset for ConversationBridge.sessionUserId, (uint64_t *)&demangling cache variable for type metadata for UserID?, a1);
}

uint64_t ConversationBridge.sessionState.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&direct field offset for ConversationBridge.sessionState, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?, a1);
}

uint64_t ConversationBridge.isMUXEnabled.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + direct field offset for ConversationBridge.isMUXEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t outlined init with copy of ReferenceResolutionClientProtocol(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t ConversationBridge.executionClient.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v1 + direct field offset for ConversationBridge.$__lazy_storage_$_executionClient;
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v3, (uint64_t)&v5, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
  if (v6) {
    return outlined init with take of ReferenceResolutionClientProtocol(&v5, (uint64_t)a1);
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v5, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
  closure #1 in ConversationBridge.executionClient.getter(v1, a1);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a1, (uint64_t)&v5);
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)((uint64_t)&v5, v3, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
  return swift_endAccess();
}

uint64_t ConversationBridge.isFirstRequestInSession.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + direct field offset for ConversationBridge.isFirstRequestInSession);
  swift_beginAccess();
  return *v1;
}

uint64_t ConversationBridge.coreTelephonyServiceProvider.getter()
{
  return ConversationBridge.runSiriKitExecutorProcessor.getter();
}

void *ConversationBridge.muxContextMessage.getter()
{
  uint64_t v1 = (void **)(v0 + direct field offset for ConversationBridge.muxContextMessage);
  swift_beginAccess();
  long long v2 = *v1;
  id v3 = v2;
  return v2;
}

uint64_t type metadata accessor for ServerFallbackCapableRequestProcessor()
{
  uint64_t result = type metadata singleton initialization cache for ServerFallbackCapableRequestProcessor;
  if (!type metadata singleton initialization cache for ServerFallbackCapableRequestProcessor) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for ConcurrentTaskPool()
{
  return self;
}

uint64_t RecentDialogTracker.setCurrentRequest(withRequestId:sessionId:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v57 = a1;
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x1F4188790](v56);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v55 = (uint64_t)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  unint64_t v54 = (char *)&v49 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  char v14 = (char *)&v49 - v13;
  MEMORY[0x1F4188790](v12);
  id v16 = (char *)&v49 - v15;
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  int v51 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v49 - v21;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v53 = v14;
  uint64_t v63 = v6;
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationBridge);
  uint64_t v60 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  uint64_t v61 = v18 + 16;
  v60(v22, a3, v17);
  swift_bridgeObjectRetain_n();
  v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v58 = v16;
  uint64_t v59 = a3;
  if (v26)
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    v65[0] = v49;
    *(_DWORD *)uint64_t v27 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v28 = v57;
    uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, a2, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v27 + 12) = 2080;
    uint64_t v50 = v18;
    lazy protocol witness table accessor for type RecentDialogsEnvironmentProvider and conformance RecentDialogsEnvironmentProvider((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v65);
    id v16 = v58;
    uint64_t v18 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v52 = *(void (**)(char *, uint64_t))(v18 + 8);
    v52(v22, v17);
    _os_log_impl(&dword_1B9C64000, v24, v25, "RecentDialogTracker: new request %s, session %s", (uint8_t *)v27, 0x16u);
    uint64_t v31 = v49;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v31, -1, -1);
    uint64_t v32 = v27;
    a3 = v59;
    MEMORY[0x1BA9E48C0](v32, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    uint64_t v52 = *(void (**)(char *, uint64_t))(v18 + 8);
    v52(v22, v17);

    uint64_t v28 = v57;
  }
  uint64_t v33 = v62;
  uint64_t v34 = (uint64_t *)(v62 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentRequestId);
  *uint64_t v34 = v28;
  v34[1] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v33 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentRequestHasTrackedDialogs) = 0;
  uint64_t v35 = v33 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentSessionId;
  swift_beginAccess();
  v60(v16, a3, v17);
  v36 = *(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56);
  v36(v16, 0, 1, v17);
  uint64_t v37 = (uint64_t)v63;
  uint64_t v38 = (uint64_t)&v63[*(int *)(v56 + 48)];
  outlined init with copy of UUID?(v35, (uint64_t)v63);
  outlined init with copy of UUID?((uint64_t)v16, v38);
  v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  if (v39(v37, 1, v17) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (v39(v38, 1, v17) == 1) {
      return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v63, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    }
  }
  else
  {
    uint64_t v41 = (uint64_t)v53;
    outlined init with copy of UUID?(v37, (uint64_t)v53);
    if (v39(v38, 1, v17) != 1)
    {
      uint64_t v42 = v51;
      (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v51, v38, v17);
      lazy protocol witness table accessor for type RecentDialogsEnvironmentProvider and conformance RecentDialogsEnvironmentProvider((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
      char v43 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v44 = v42;
      uint64_t v45 = (void (*)(uint64_t, uint64_t))v52;
      v52(v44, v17);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v58, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      v45(v41, v17);
      uint64_t result = outlined destroy of ReferenceResolutionClientProtocol?(v37, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      if (v43) {
        return result;
      }
      goto LABEL_13;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v58, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v52((char *)v41, v17);
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v63, &demangling cache variable for type metadata for (UUID?, UUID?));
LABEL_13:
  RecentDialogTracker.clearRecentDialogs()();
  unint64_t v46 = v54;
  v60(v54, v59, v17);
  v36(v46, 0, 1, v17);
  uint64_t v47 = (uint64_t)v46;
  uint64_t v48 = v55;
  outlined init with take of UUID?(v47, v55);
  swift_beginAccess();
  outlined assign with take of UUID?(v48, v35);
  return swift_endAccess();
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for DeviceContextHelper()
{
  return self;
}

uint64_t type metadata accessor for ConversationBridgeProcessorDelegate()
{
  return self;
}

uint64_t type metadata accessor for MultiUserContextUpdater()
{
  return self;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t (*ConversationRequestAwareBridgeBase.candidateRequestProcessors.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationRequestAwareBridgeBase.currentRequestProcessor.setter(uint64_t a1)
{
  id v3 = (void *)(v1 + direct field offset for ConversationRequestAwareBridgeBase.currentRequestProcessor);
  swift_beginAccess();
  *id v3 = a1;
  return swift_release();
}

uint64_t ConversationRequestAwareBridgeBase.postMessage(_:to:)(void *a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (char *)v3 + direct field offset for ConversationMessageDispatchingBridgeBase.logger;
  swift_retain_n();
  id v11 = a1;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v41 = v7;
  uint64_t v42 = v6;
  uint64_t v40 = v9;
  if (v14)
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v38 = v10;
    uint64_t v16 = v15;
    uint64_t v17 = (void *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    uint64_t v44 = v37;
    *(_DWORD *)uint64_t v16 = 136315394;
    uint64_t v39 = a2;
    uint64_t v18 = v3[2];
    unint64_t v19 = v3[3];
    swift_bridgeObjectRetain();
    uint64_t ObjectType = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2112;
    uint64_t ObjectType = (uint64_t)v11;
    id v20 = v11;
    a2 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v17 = v11;

    _os_log_impl(&dword_1B9C64000, v12, v13, "Bridge \"%s\" received message: %@", (uint8_t *)v16, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v17, -1, -1);
    uint64_t v21 = v37;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v21, -1, -1);
    MEMORY[0x1BA9E48C0](v16, -1, -1);
  }
  else
  {

    swift_release_n();
  }

  uint64_t v22 = (*(uint64_t (**)(id))(*v3 + 264))(v11);
  if ((*(uint64_t (**)(void))(*(void *)v22 + 104))())
  {
    id v23 = v11;
    v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    int v26 = v25;
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      uint64_t v44 = v39;
      *(_DWORD *)uint64_t v27 = 136315394;
      LODWORD(v38) = v26;
      uint64_t ObjectType = swift_getObjectType();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RequestMessageBase.Type);
      uint64_t v28 = String.init<A>(describing:)();
      uint64_t ObjectType = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2080;
      unint64_t v30 = v40;
      MessageBase.messageId.getter();
      _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v31 = v42;
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v34 = v33;
      (*(void (**)(char *, uint64_t))(v41 + 8))(v30, v31);
      uint64_t ObjectType = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v24, (os_log_type_t)v38, "handleMessage got message type %s with message id: %s that is not register in the bridge", (uint8_t *)v27, 0x16u);
      uint64_t v35 = v39;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v35, -1, -1);
      MEMORY[0x1BA9E48C0](v27, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    (*(void (**)(uint64_t, id))(*(void *)v22 + 88))(a2, v11);
  }
  return swift_release();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x1E4FBC860];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return MEMORY[0x1E4FBC860];
    }
    uint64_t v8 = v5;
    if (v5 <= 0)
    {
      uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 8 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
        swift_arrayInitWithCopy();
        return (uint64_t)v9;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v9 = (void *)swift_allocObject();
      int64_t v10 = _swift_stdlib_malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 25;
      }
      v9[2] = v5;
      v9[3] = (2 * (v11 >> 3)) | 1;
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  unint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = (2 * (v5 >> 3)) | 1;
  char v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  unint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  char v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  unint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  char v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  int64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
  unint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  char v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

uint64_t ConversationMessageDispatchingBridgeBase.getHandleMethod(_:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Mirror?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[0] = swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageBase.Type);
  uint64_t v6 = String.init<A>(describing:)();
  uint64_t v8 = v7;
  uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 152);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = v9(v10);
  v20[0] = v6;
  v20[1] = v8;
  uint64_t v12 = type metadata accessor for ConversationMessageDispatchingBridgeBase.MessageHandlerBase();
  MEMORY[0x1BA9E2D40](&v21, v20, v11, MEMORY[0x1E4FBB1A0], v12, MEMORY[0x1E4FBB1B0]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = v21;
  if (v21)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v20[3] = type metadata accessor for MessageBase();
    v20[0] = a1;
    id v14 = a1;
    Mirror.init(reflecting:)();
    uint64_t v15 = type metadata accessor for Mirror();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v5, 0, 1, v15);
    uint64_t v13 = ConversationMessageDispatchingBridgeBase.findRegisterMethod(_:)((uint64_t)v5);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Mirror?);
    swift_release();
    v19[1] = v8;
    v19[2] = v13;
    v19[0] = v6;
    uint64_t v16 = *(uint64_t (**)(void *))(*(void *)v1 + 168);
    swift_retain();
    uint64_t v17 = (void (*)(void *, void))v16(v20);
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    v17(v20, 0);
  }
  return v13;
}

uint64_t ConversationMessageDispatchingBridgeBase.methodDispatcher.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for ConversationMessageDispatchingBridgeBase.MessageHandlerBase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

Swift::Bool __swiftcall ConversationMessageDispatchingBridgeBase.MessageHandler.isBase()()
{
  return 0;
}

void ConversationMessageDispatchingBridgeBase.MessageHandler.handleMethod(_:_:)(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = a1;
  swift_unknownObjectRetain();
  if (swift_dynamicCast())
  {
    uint64_t v9 = v40;
    uint64_t v10 = swift_dynamicCastClass();
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = *(uint64_t (**)(uint64_t))(v2 + 16);
      id v13 = a2;
      id v14 = (void (*)(uint64_t))v12(v9);
      v14(v11);
      swift_unknownObjectRelease();

      swift_release();
    }
    else
    {
      id v23 = a2;
      v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      int v26 = v25;
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v27 = swift_slowAlloc();
        uint64_t v39 = swift_slowAlloc();
        uint64_t v41 = v39;
        *(_DWORD *)uint64_t v27 = 136315650;
        int v38 = v26;
        os_log_t v37 = v24;
        MessageBase.messageId.getter();
        _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v30 = v29;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 12) = 2080;
        swift_getObjectType();
        uint64_t v31 = _typeName(_:qualified:)();
        uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 22) = 2080;
        uint64_t v33 = _typeName(_:qualified:)();
        uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v24 = v37;
        _os_log_impl(&dword_1B9C64000, v37, (os_log_type_t)v38, "Input message %s of type %s is not of type %s", (uint8_t *)v27, 0x20u);
        uint64_t v35 = v39;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v35, -1, -1);
        MEMORY[0x1BA9E48C0](v27, -1, -1);
      }
      else
      {
      }
      swift_unknownObjectRelease();
    }
  }
  else
  {
    swift_unknownObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v41 = v18;
      *(_DWORD *)uint64_t v17 = 136315394;
      swift_getObjectType();
      uint64_t v19 = _typeName(_:qualified:)();
      uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_unknownObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2080;
      uint64_t v21 = _typeName(_:qualified:)();
      uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v15, v16, "Handler invoking object is of type %s and not of type %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v18, -1, -1);
      MEMORY[0x1BA9E48C0](v17, -1, -1);
    }
    else
    {
      swift_unknownObjectRelease_n();
    }
  }
}

uint64_t ConversationRequestProcessor.handleStartTextRequestMessage(_:)(void *a1)
{
  return ConversationRequestProcessor.handleStartSpeechRequestMessage(_:)(a1, (uint64_t (*)(void))specialized ConversationRequestProcessorTurnState.__allocating_init(startTextRequestMessage:));
}

uint64_t type metadata accessor for ConversationRequestProcessorTurnState()
{
  uint64_t result = type metadata singleton initialization cache for ConversationRequestProcessorTurnState;
  if (!type metadata singleton initialization cache for ConversationRequestProcessorTurnState) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ConversationRequestProcessor.state.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_state;
  swift_beginAccess();
  uint64_t v2 = *(void *)v1;
  outlined copy of ConversationRequestProcessor.State(*(void *)v1, *(void **)(v1 + 8), *(unsigned char *)(v1 + 16));
  return v2;
}

void outlined copy of ConversationRequestProcessor.State(uint64_t a1, void *a2, char a3)
{
  if (a3 == 2)
  {
    swift_retain();
    id v3 = a2;
  }
  else
  {
    if (a3 == 1)
    {
      swift_retain();
    }
    else if (a3)
    {
      return;
    }
    swift_bridgeObjectRetain();
  }
}

void outlined consume of ConversationRequestProcessor.State(uint64_t a1, void *a2, char a3)
{
  if (a3 == 2)
  {
    swift_release();
  }
  else
  {
    if (a3 == 1)
    {
      swift_release();
    }
    else if (a3)
    {
      return;
    }
    swift_bridgeObjectRelease();
  }
}

void ConversationRequestProcessor.state.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = v3 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_state;
  swift_beginAccess();
  uint64_t v8 = *(void *)v7;
  uint64_t v9 = *(void **)(v7 + 8);
  *(void *)uint64_t v7 = a1;
  *(void *)(v7 + 8) = a2;
  char v10 = *(unsigned char *)(v7 + 16);
  *(unsigned char *)(v7 + 16) = a3;
  outlined consume of ConversationRequestProcessor.State(v8, v9, v10);
}

uint64_t type metadata accessor for StartExecutionTurn()
{
  uint64_t result = type metadata singleton initialization cache for StartExecutionTurn;
  if (!type metadata singleton initialization cache for StartExecutionTurn) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t protocol witness for ConversationRuntimeClientProtocol.sendStartExecutionTurn(_:withBridgeDelegate:) in conformance ConversationRuntimeClient()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 144))();
}

uint64_t ConversationRuntimeClient.sendStartExecutionTurn(_:withBridgeDelegate:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = v3[3];
  uint64_t v7 = v3[4];
  uint64_t v9 = v3[5];
  char v10 = (void *)swift_allocObject();
  v10[2] = v8;
  v10[3] = v7;
  v10[4] = v9;
  v10[5] = a1;
  v10[6] = a2;
  v10[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  id v11 = a1;
  swift_unknownObjectRetain();
  uint64_t v12 = StaticString.description.getter();
  uint64_t v14 = v13;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveStartExecutionTurn:from:);
  *(void *)(v15 + 24) = v10;
  *(void *)(v15 + 32) = "bridge(didReceiveStartExecutionTurn:from:)";
  *(void *)(v15 + 40) = 42;
  *(unsigned char *)(v15 + 48) = 2;
  os_log_type_t v16 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v7 + 208);
  swift_retain();
  v16(v12, v14, &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:), v15);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t protocol witness for ContextUpdating.updateServerContext() in conformance MultiUserContextUpdater()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 256))();
}

Swift::Void __swiftcall MultiUserContextUpdater.updateServerContext()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1B9C64000, v4, v5, "Applying server context through shared ContextUpdater", v6, 2u);
    MEMORY[0x1BA9E48C0](v6, -1, -1);
  }

  uint64_t v7 = type metadata accessor for UserID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v2, 1, 1, v7);
  uint64_t v8 = MultiUserContextUpdater.contextUpdater(forUserId:)((uint64_t)v2);
  uint64_t v9 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v2, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 472))(v9);
    char v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_1B9C64000, v10, v11, "Applied server context", v12, 2u);
      MEMORY[0x1BA9E48C0](v12, -1, -1);
    }

    swift_release();
  }
  else
  {
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_1B9C64000, v13, v14, "Could not find shared contextUpdater instance", v15, 2u);
      MEMORY[0x1BA9E48C0](v15, -1, -1);
    }
  }
}

uint64_t MultiUserContextUpdater.contextUpdater(forUserId:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v45 - v8;
  uint64_t v10 = type metadata accessor for UserID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  os_log_type_t v14 = (char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)v45 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)v45 - v18;
  outlined init with copy of UserID?(a1, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      id v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v23 = 0;
      _os_log_impl(&dword_1B9C64000, v21, v22, "Returning shared ContextUpdater instance since userId passed is nil", v23, 2u);
      MEMORY[0x1BA9E48C0](v23, -1, -1);
    }

    uint64_t v24 = (*(uint64_t (**)(void))(*v2 + 208))();
    if (!v24)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v7, 1, 1, v10);
      uint64_t v24 = MultiUserContextUpdater.addContextUpdater(forUserId:)((uint64_t)v7);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v19, v9, v10);
    if (specialized Set.contains(_:)((uint64_t)v19, v2[30]))
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationBridge);
      uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
      uint64_t v49 = v11 + 16;
      v48(v17, v19, v10);
      int v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        uint64_t v47 = swift_slowAlloc();
        uint64_t v51 = v47;
        unint64_t v46 = v28;
        *(_DWORD *)uint64_t v28 = 136315138;
        v45[1] = v28 + 4;
        lazy protocol witness table accessor for type UserID and conformance UserID();
        uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v31 = *(void (**)(char *, uint64_t))(v11 + 8);
        v31(v17, v10);
        unint64_t v32 = v46;
        _os_log_impl(&dword_1B9C64000, v26, v27, "Returning a ContextUpdater instance for userId: %s", v46, 0xCu);
        uint64_t v33 = v47;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v33, -1, -1);
        MEMORY[0x1BA9E48C0](v32, -1, -1);
      }
      else
      {
        uint64_t v31 = *(void (**)(char *, uint64_t))(v11 + 8);
        v31(v17, v10);
      }

      uint64_t v41 = (*(uint64_t (**)(void))(*v2 + 184))();
      if (*(void *)(v41 + 16) && (unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v19), (v43 & 1) != 0))
      {
        uint64_t v24 = *(void *)(*(void *)(v41 + 56) + 8 * v42);
        swift_retain();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        v48(v7, v19, v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v7, 0, 1, v10);
        uint64_t v24 = MultiUserContextUpdater.addContextUpdater(forUserId:)((uint64_t)v7);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UserID?);
      }
    }
    else
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      __swift_project_value_buffer(v34, (uint64_t)static Logger.conversationBridge);
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v19, v10);
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v36))
      {
        os_log_t v37 = (uint8_t *)swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        uint64_t v51 = v49;
        *(_DWORD *)os_log_t v37 = 136315138;
        lazy protocol witness table accessor for type UserID and conformance UserID();
        uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v31 = *(void (**)(char *, uint64_t))(v11 + 8);
        v31(v14, v10);
        _os_log_impl(&dword_1B9C64000, v35, v36, "Current userId: %s does not exist in known userSet", v37, 0xCu);
        uint64_t v40 = v49;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v40, -1, -1);
        MEMORY[0x1BA9E48C0](v37, -1, -1);
      }
      else
      {
        uint64_t v31 = *(void (**)(char *, uint64_t))(v11 + 8);
        v31(v14, v10);
      }

      uint64_t v24 = 0;
    }
    v31(v19, v10);
  }
  return v24;
}

uint64_t MultiUserContextUpdater.sharedContextUpdater.getter()
{
  return swift_retain();
}

uint64_t MultiUserContextUpdater.addContextUpdater(forUserId:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UserID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v45 = (char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  unint64_t v46 = (char *)v41 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)v41 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)v41 - v16;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationBridge);
  outlined init with copy of UserID?(a1, (uint64_t)v17);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v43 = v5;
    uint64_t v21 = swift_slowAlloc();
    uint64_t v44 = v4;
    os_log_type_t v22 = (uint8_t *)v21;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v42 = a1;
    uint64_t v24 = v23;
    v48[0] = v23;
    *(_DWORD *)os_log_type_t v22 = 136315138;
    v41[1] = v22 + 4;
    outlined init with copy of UserID?((uint64_t)v17, (uint64_t)v15);
    uint64_t v25 = String.init<A>(describing:)();
    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v48);
    uint64_t v5 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    _os_log_impl(&dword_1B9C64000, v19, v20, "Creating ContextUpdater for userId: %s", v22, 0xCu);
    swift_arrayDestroy();
    uint64_t v27 = v24;
    a1 = v42;
    MEMORY[0x1BA9E48C0](v27, -1, -1);
    uint64_t v28 = v22;
    uint64_t v4 = v44;
    MEMORY[0x1BA9E48C0](v28, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  }

  uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 328))(a1);
  outlined init with copy of UserID?(a1, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    unint64_t v30 = *(void (**)(uint64_t))(*(void *)v2 + 216);
    uint64_t v31 = swift_retain();
    v30(v31);
  }
  else
  {
    unint64_t v32 = v46;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v46, v12, v4);
    uint64_t v33 = (uint64_t)v45;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v45, v32, v4);
    uint64_t v34 = *(uint64_t (**)(uint64_t *))(*(void *)v2 + 200);
    swift_retain();
    uint64_t v35 = (void (*)(uint64_t *, void))v34(v48);
    os_log_t v37 = v36;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v47 = *v37;
    *os_log_t v37 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v29, v33, isUniquelyReferenced_nonNull_native);
    *os_log_t v37 = v47;
    swift_bridgeObjectRelease();
    unint64_t v39 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v39(v33, v4);
    v35(v48, 0);
    v39((uint64_t)v32, v4);
  }
  return v29;
}

void *MultiUserContextUpdater.makeContextUpdater(userId:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v1 + 2), (uint64_t)v19);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v1 + 7), (uint64_t)v18);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v1 + 12), (uint64_t)v17);
  uint64_t v7 = v1[17];
  uint64_t v6 = v1[18];
  uint64_t v8 = v1[19];
  uint64_t v9 = v1[20];
  uint64_t v10 = v1[21];
  uint64_t v11 = v1[22];
  uint64_t v12 = v1[23];
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v1 + 24), (uint64_t)v16);
  uint64_t v13 = v1[29];
  outlined init with copy of UserID?(a1, (uint64_t)v5);
  type metadata accessor for ContextUpdater();
  swift_allocObject();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return ContextUpdater.init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userId:)((uint64_t)v19, (uint64_t)v18, (uint64_t)v17, v7, v6, v8, v9, v10, v11, v12, (uint64_t)v16, v13, (uint64_t)v5);
}

uint64_t type metadata accessor for ContextUpdater()
{
  uint64_t result = type metadata singleton initialization cache for ContextUpdater;
  if (!type metadata singleton initialization cache for ContextUpdater) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for SessionStateContextKeysManager()
{
  return self;
}

uint64_t outlined assign with copy of UserID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of UserID?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t MultiUserContextUpdater.sharedContextUpdater.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 264) = a1;
  return swift_release();
}

Swift::Void __swiftcall ContextUpdater.updateServerContext()()
{
  uint64_t v1 = v0;
  id v59 = (id)__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v59);
  uint64_t v58 = (char *)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v55 = *(void *)(v3 - 8);
  uint64_t v56 = v3;
  MEMORY[0x1F4188790](v3);
  unint64_t v54 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ConversationSessionKey();
  uint64_t v61 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  swift_retain();
  uint64_t v60 = v9;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v57 = v5;
    uint64_t v14 = v13;
    *(void *)&long long aBlock = v13;
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v16 = v1[20];
    unint64_t v15 = v1[21];
    swift_bridgeObjectRetain();
    id v66 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    uint64_t v17 = v1[22];
    unint64_t v18 = v1[23];
    swift_bridgeObjectRetain();
    id v66 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v10, v11, "Updating server context for requestID: %s using rootRequestID: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    uint64_t v19 = v14;
    uint64_t v5 = v57;
    MEMORY[0x1BA9E48C0](v19, -1, -1);
    MEMORY[0x1BA9E48C0](v12, -1, -1);
  }
  else
  {

    swift_release();
  }
  __swift_project_boxed_opaque_existential_1(v1 + 2, v1[5]);
  uint64_t v20 = *MEMORY[0x1E4FA2658];
  uint64_t v21 = v61;
  os_log_type_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 104);
  v22(v7, v20, v5);
  dispatch thunk of ConversationSessionState.sharedValue(forKey:)();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v21 + 8);
  uint64_t v24 = v21 + 8;
  uint64_t v23 = v25;
  v25(v7, v5);
  if (!*((void *)&v63 + 1))
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&aBlock, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_12:
    swift_retain_n();
    unint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(void *)&long long aBlock = v35;
      *(_DWORD *)uint64_t v34 = 136315394;
      (*(void (**)(void))(*v1 + 360))();
      uint64_t v36 = String.init<A>(describing:)();
      id v66 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 12) = 2080;
      uint64_t v38 = v1[20];
      unint64_t v39 = v1[21];
      swift_bridgeObjectRetain();
      id v66 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v32, v33, "NativeFlowContextUpdate is empty when userId: %s, requestID: %s", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v35, -1, -1);
      MEMORY[0x1BA9E48C0](v34, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    return;
  }
  uint64_t v61 = v24;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SARDNativeFlowContextUpdate);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_12;
  }
  id v59 = v66;
  objc_msgSend(v66, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  if (swift_dynamicCast())
  {
    uint64_t v57 = v5;
    id v26 = v66;
    id v27 = objc_msgSend(v26, sel_aceId);
    if (v27)
    {
      uint64_t v28 = v27;
      uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v31 = v30;
    }
    else
    {
      uint64_t v43 = v54;
      UUID.init()();
      uint64_t v29 = UUID.uuidString.getter();
      uint64_t v31 = v44;
      (*(void (**)(char *, uint64_t))(v55 + 8))(v43, v56);
    }
    uint64_t v45 = (void *)MEMORY[0x1BA9E2DD0](v29, v31);
    swift_bridgeObjectRelease();
    objc_msgSend(v26, sel_setAceId_, v45);

    uint64_t v46 = v1[22];
    uint64_t v47 = v1[23];
    id v48 = v26;
    uint64_t v49 = (void *)MEMORY[0x1BA9E2DD0](v46, v47);
    objc_msgSend(v48, sel_setRefId_, v49);

    uint64_t v50 = (void *)v1[17];
    uint64_t v64 = closure #1 in ContextUpdater.updateServerContext();
    uint64_t v65 = 0;
    *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v63 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
    *((void *)&v63 + 1) = &block_descriptor_3;
    uint64_t v51 = _Block_copy(&aBlock);
    id v52 = v48;
    objc_msgSend(v50, sel_handleCommand_completion_, v52, v51);
    _Block_release(v51);

    long long aBlock = 0u;
    long long v63 = 0u;
    uint64_t v53 = v57;
    v22(v7, v20, v57);
    ContextUpdater.updateSessionState(withValue:forKey:)();

    v23(v7, v53);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&aBlock, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  else
  {
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl(&dword_1B9C64000, v40, v41, "Could not copy NFCU. It is not safe to send it to server", v42, 2u);
      MEMORY[0x1BA9E48C0](v42, -1, -1);
    }
    else
    {
    }
  }
}

uint64_t partial apply for closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:)()
{
  uint64_t v2 = *(int **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  char v6 = *(unsigned char *)(v0 + 48);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  void *v7 = v1;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:)(v2, v3, v4, v5, v6);
}

uint64_t type metadata accessor for OS_dispatch_queue(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:)(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(unsigned char *)(v5 + 72) = a5;
  *(void *)(v5 + 40) = a3;
  *(void *)(v5 + 48) = a4;
  uint64_t v8 = (uint64_t (*)(void))((char *)a1 + *a1);
  char v6 = (void *)swift_task_alloc();
  *(void *)(v5 + 56) = v6;
  *char v6 = v5;
  v6[1] = closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:);
  return v8();
}

uint64_t closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:)()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:), 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveStartExecutionTurn:from:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  char v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *char v6 = v1;
  v6[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationServiceSerialFacade.bridge(didReceiveStartExecutionTurn:from:)(v2, v3, v4, v5);
}

uint64_t closure #1 in ConversationServiceSerialFacade.bridge(didReceiveStartExecutionTurn:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized ConversationService.bridge(didReceiveStartExecutionTurn:from:)
                                       + async function pointer to specialized ConversationService.bridge(didReceiveStartExecutionTurn:from:));
  char v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  *char v6 = v4;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v8(a4);
}

uint64_t specialized ConversationService.bridge(didReceiveStartExecutionTurn:from:)()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](specialized ConversationService.bridge(didReceiveStartExecutionTurn:from:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  char v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  uint64_t v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[13];
  if (v4)
  {
    char v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)char v6 = 134217984;
    swift_beginAccess();
    uint64_t v7 = *(void *)(v5 + 104);
    if ((v7 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = __CocoaSet.count.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v8 = *(void *)(v7 + 16);
    }
    v0[11] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1B9C64000, v2, v3, "[ConversationService] Active Conversation Count: %ld", v6, 0xCu);
    MEMORY[0x1BA9E48C0](v6, -1, -1);
  }
  else
  {
    swift_release();
  }

  uint64_t v9 = v0[13];
  swift_beginAccess();
  uint64_t v10 = *(unsigned __int8 *)(v9 + 120);
  if (v10 >> 6)
  {
    os_log_type_t v11 = v10 & 1;
    if (v10 >> 6 != 1) {
      os_log_type_t v11 = 0;
    }
  }
  else
  {
    os_log_type_t v11 = *(unsigned char *)(v9 + 112) & 1;
  }
  uint64_t v12 = (void *)v0[12];
  uint64_t v13 = *(void **)(v9 + 112);
  *(void *)(v9 + 112) = v12;
  *(unsigned char *)(v9 + 120) = v11 | 0x40;
  uint64_t v14 = v12;
  outlined consume of ConversationService.State(v13, v10);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteConversationClient?);
  v0[15] = static MessageBusActor.shared;
  _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v15, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  swift_retain();
  uint64_t v16 = (void *)swift_task_alloc();
  v0[16] = v16;
  *uint64_t v16 = v0;
  v16[1] = specialized ConversationService.bridge(didReceiveStartExecutionTurn:from:);
  return MEMORY[0x1F4187F28]();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t specialized ConversationService.bridge(didReceiveStartExecutionTurn:from:)(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v3 = static MessageBusActor.shared;
  v2[14] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](specialized ConversationService.bridge(didReceiveStartExecutionTurn:from:), v3, 0);
}

uint64_t ContextUpdater.updateSessionState(withValue:forKey:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UserID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*v0 + 360))(v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
    return dispatch thunk of ConversationSessionState.updateSharedValue(_:forKey:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v3, v4);
    __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
    dispatch thunk of ConversationSessionState.updateValue(_:forKey:userId:)();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

uint64_t ContextUpdater.userId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime14ContextUpdater_userId;
  swift_beginAccess();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v3, a1, (uint64_t *)&demangling cache variable for type metadata for UserID?);
}

uint64_t outlined init with copy of UserID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void closure #1 in ContextUpdater.updateServerContext()(uint64_t a1, void *a2)
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
  id v4 = a2;
  id v5 = a2;
  oslog = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v12 = v8;
    *(_DWORD *)id v7 = 136315138;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
    uint64_t v9 = Optional.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, oslog, v6, "Sent NativeFlowContextUpdate to server. Error: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }
  else
  {
  }
}

void Logger.debugF(file:function:)()
{
  os_log_type_t v0 = static os_log_type_t.debug.getter();
  log = Logger.logObject.getter();
  if (os_log_type_enabled(log, v0))
  {
    uint64_t v1 = swift_slowAlloc();
    uint64_t v2 = swift_slowAlloc();
    uint64_t v8 = v2;
    *(_DWORD *)uint64_t v1 = 136315394;
    uint64_t v3 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v4, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v1 + 12) = 2080;
    uint64_t v5 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, log, v0, "%s:%s", (uint8_t *)v1, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v2, -1, -1);
    MEMORY[0x1BA9E48C0](v1, -1, -1);
  }
  else
  {
  }
}

void outlined consume of ConversationService.State(id a1, unsigned __int8 a2)
{
  int v2 = a2 >> 6;
  if (v2 == 2)
  {
    swift_release();
  }
  else if (v2 == 1)
  {
  }
}

uint64_t ConversationService.ActiveTurn.__deallocating_deinit()
{
  ConversationService.ActiveTurn.deinit();

  return swift_deallocClassInstance();
}

uint64_t ConversationService.ActiveTurn.deinit()
{
  outlined destroy of DecisionEngineResponse(v0 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData, type metadata accessor for RemoteConversationTurnData);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_eventSender);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_aceServiceInvoker);
  uint64_t v1 = v0 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_conversationLoggingId;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t outlined destroy of DecisionEngineResponse(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for CombiningAffinityScorer(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for RemoteConversationTurnData(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, type metadata singleton initialization cache for RemoteConversationTurnData);
}

void destroy for RemoteConversationTurnData(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  id v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }

  uint64_t v8 = a1 + a2[8];
  if (!v7(v8, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  }
  swift_release();

  uint64_t v9 = (uint64_t *)(a1 + a2[12]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15)
  {
    uint64_t v11 = *v9;
    outlined consume of Data._Representation(v11, v10);
  }
}

uint64_t InvocationScopedSiriKitEventSender.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t SiriKitEventContext.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t AceServiceInvokerImpl.__deallocating_deinit()
{
  AceServiceInvokerImpl.deinit();

  return swift_deallocClassInstance();
}

uint64_t AceServiceInvokerImpl.deinit()
{
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 112);
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t ServiceBridgeDelegateXPCWrapper.__deallocating_deinit()
{
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t SubmissionTaskRegistry.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t destroy for ConversationService.EagerResult(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    uint64_t v5 = type metadata accessor for ServerFallbackReason();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    uint64_t v7 = v5;
    uint64_t v8 = a1;
LABEL_11:
    return v6(v8, v7);
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    swift_release();
    swift_release();
    uint64_t v3 = a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationUserInput, RemoteConversationClient, Input?))
                + 64);
    uint64_t v4 = type metadata accessor for Input();
    uint64_t v9 = *(void *)(v4 - 8);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v3, 1, v4);
    if (result) {
      return result;
    }
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    uint64_t v8 = v3;
    uint64_t v7 = v4;
    goto LABEL_11;
  }

  return swift_release();
}

uint64_t ConversationUserInput.__deallocating_deinit()
{
  ConversationUserInput.deinit();

  return swift_deallocClassInstance();
}

uint64_t ConversationUserInput.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_mitigationDecision, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_userSpecificInfoForUserMeetingSessionThreshold));
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_asrLocation;
  uint64_t v2 = type metadata accessor for ExecutionLocation();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_nlLocation, v2);
  return v0;
}

uint64_t NLResponse.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlResponseStatusCode;
  uint64_t v2 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_languageVariantResult, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_serverFallbackReason, &demangling cache variable for type metadata for ServerFallbackReason?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlRoutingDecision, (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);

  return swift_deallocClassInstance();
}

uint64_t PommesInfo.__deallocating_deinit()
{
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesError, &demangling cache variable for type metadata for PommesError?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesSearchReason, &demangling cache variable for type metadata for PommesSearchReason?);

  return swift_deallocClassInstance();
}

uint64_t closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:)()
{
  uint64_t v1 = *(void *)(v0 + 240);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 104);
  if ((v2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for RemoteConversationClient();
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3(&lazy protocol witness table cache variable for type RemoteConversationClient and conformance RemoteConversationClient, 255, (void (*)(uint64_t))type metadata accessor for RemoteConversationClient);
    uint64_t v3 = Set.Iterator.init(_cocoa:)();
    uint64_t v2 = *(void *)(v0 + 16);
    uint64_t v47 = *(void *)(v0 + 24);
    uint64_t v8 = *(void *)(v0 + 32);
    uint64_t v7 = *(void *)(v0 + 40);
    unint64_t v9 = *(void *)(v0 + 48);
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(v2 + 32);
    uint64_t v47 = v2 + 56;
    uint64_t v8 = ~v10;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v9 = v12 & *(void *)(v2 + 56);
    uint64_t v3 = swift_bridgeObjectRetain();
    uint64_t v7 = 0;
  }
  int64_t v46 = (unint64_t)(v8 + 64) >> 6;
  while (v2 < 0)
  {
    uint64_t v17 = __CocoaSet.Iterator.next()();
    if (!v17) {
      goto LABEL_37;
    }
    *(void *)(v0 + 224) = v17;
    type metadata accessor for RemoteConversationClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v18 = *(void *)(v0 + 216);
    swift_unknownObjectRelease();
    uint64_t v16 = v7;
    uint64_t v14 = v9;
    if (!v18) {
      goto LABEL_37;
    }
LABEL_30:
    unint64_t v48 = v14;
    uint64_t v49 = v16;
    uint64_t v22 = v2;
    uint64_t v24 = *(void *)(v0 + 256);
    uint64_t v23 = *(void *)(v0 + 264);
    uint64_t v25 = type metadata accessor for TaskPriority();
    uint64_t v26 = *(void *)(v25 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v23, 1, 1, v25);
    id v27 = (void *)swift_allocObject();
    v27[2] = 0;
    uint64_t v28 = v27 + 2;
    v27[3] = 0;
    v27[4] = v18;
    outlined init with copy of ReferenceResolutionClientProtocol?(v23, v24, &demangling cache variable for type metadata for TaskPriority?);
    LODWORD(v24) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25);
    swift_retain();
    uint64_t v29 = *(void *)(v0 + 256);
    if (v24 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 256), &demangling cache variable for type metadata for TaskPriority?);
      if (*v28) {
        goto LABEL_32;
      }
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v29, v25);
      if (*v28)
      {
LABEL_32:
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v30 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v32 = v31;
        swift_unknownObjectRelease();
        goto LABEL_35;
      }
    }
    uint64_t v30 = 0;
    uint64_t v32 = 0;
LABEL_35:
    uint64_t v33 = **(void **)(v0 + 232);
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:);
    *(void *)(v34 + 24) = v27;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteConversationClient?);
    uint64_t v35 = v32 | v30;
    if (v32 | v30)
    {
      uint64_t v35 = v0 + 56;
      *(void *)(v0 + 56) = 0;
      *(void *)(v0 + 64) = 0;
      *(void *)(v0 + 72) = v30;
      *(void *)(v0 + 80) = v32;
    }
    uint64_t v2 = v22;
    uint64_t v13 = *(void *)(v0 + 264);
    *(void *)(v0 + 136) = 1;
    *(void *)(v0 + 144) = v35;
    *(void *)(v0 + 152) = v33;
    swift_task_create();
    swift_release();
    swift_release();
    uint64_t v3 = outlined destroy of ReferenceResolutionClientProtocol?(v13, &demangling cache variable for type metadata for TaskPriority?);
    uint64_t v7 = v49;
    unint64_t v9 = v48;
  }
  if (v9)
  {
    uint64_t v14 = (v9 - 1) & v9;
    unint64_t v15 = __clz(__rbit64(v9)) | (v7 << 6);
    uint64_t v16 = v7;
    goto LABEL_29;
  }
  int64_t v19 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    return MEMORY[0x1F4187C48](v3, v4, v5, v6);
  }
  if (v19 >= v46) {
    goto LABEL_37;
  }
  unint64_t v20 = *(void *)(v47 + 8 * v19);
  uint64_t v16 = v7 + 1;
  if (v20) {
    goto LABEL_28;
  }
  uint64_t v16 = v7 + 2;
  if (v7 + 2 >= v46) {
    goto LABEL_37;
  }
  unint64_t v20 = *(void *)(v47 + 8 * v16);
  if (v20) {
    goto LABEL_28;
  }
  uint64_t v16 = v7 + 3;
  if (v7 + 3 >= v46) {
    goto LABEL_37;
  }
  unint64_t v20 = *(void *)(v47 + 8 * v16);
  if (v20) {
    goto LABEL_28;
  }
  uint64_t v16 = v7 + 4;
  if (v7 + 4 >= v46) {
    goto LABEL_37;
  }
  unint64_t v20 = *(void *)(v47 + 8 * v16);
  if (v20)
  {
LABEL_28:
    uint64_t v14 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v16 << 6);
LABEL_29:
    uint64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    swift_retain();
    if (!v18) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
  uint64_t v21 = v7 + 5;
  while (v46 != v21)
  {
    unint64_t v20 = *(void *)(v47 + 8 * v21++);
    if (v20)
    {
      uint64_t v16 = v21 - 1;
      goto LABEL_28;
    }
  }
LABEL_37:
  uint64_t v36 = *(void *)(v0 + 240);
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  swift_beginAccess();
  uint64_t v38 = *(void *)(v36 + 280);
  if (v38)
  {
    uint64_t v39 = *(void *)(v0 + 248);
    uint64_t v40 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 1, 1, v40);
    os_log_type_t v41 = (void *)swift_allocObject();
    void v41[2] = 0;
    v41[3] = 0;
    v41[4] = v38;
    swift_retain();
    _sScG7addTask8priority9operationyScPSg_xyYaYAcntF14SiriKitRuntime24RemoteConversationClientCSg_Tg5(v39, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:), (uint64_t)v41);
    outlined destroy of ReferenceResolutionClientProtocol?(v39, &demangling cache variable for type metadata for TaskPriority?);
  }
  uint64_t v42 = static MessageBusActor.shared;
  *(void *)(v0 + 280) = static MessageBusActor.shared;
  uint64_t v43 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v37, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  swift_retain();
  uint64_t v44 = (void *)swift_task_alloc();
  *(void *)(v0 + 288) = v44;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskGroup<RemoteConversationClient?>);
  *uint64_t v44 = v0;
  v44[1] = closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:);
  uint64_t v3 = v0 + 208;
  uint64_t v4 = v42;
  uint64_t v5 = v43;
  return MEMORY[0x1F4187C48](v3, v4, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 272);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:), v1, 0);
}

uint64_t closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[29] = a2;
  v3[30] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[31] = swift_task_alloc();
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static MessageBusActor.shared;
  v3[34] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:), v4, 0);
}

uint64_t closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2[26];
  if (v3 == 1)
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
  if (v3)
  {
    swift_beginAccess();
    uint64_t v6 = swift_retain();
    uint64_t v7 = specialized Set._Variant.remove(_:)(v6);
    swift_endAccess();
    swift_release();
    if (v7 || (uint64_t v12 = *(void *)(v2[30] + 280)) == 0)
    {
      outlined consume of RemoteConversationClient??(v3);
      outlined consume of RemoteConversationClient??(v3);
    }
    else
    {
      if (*(void *)(v3 + 112) == *(void *)(v12 + 112) && *(void *)(v3 + 120) == *(void *)(v12 + 120))
      {
        outlined consume of RemoteConversationClient??(v3);
        outlined consume of RemoteConversationClient??(v3);
LABEL_19:
        *(void *)(v2[30] + 280) = 0;
        swift_release();
        goto LABEL_8;
      }
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      outlined consume of RemoteConversationClient??(v3);
      outlined consume of RemoteConversationClient??(v3);
      if (v14) {
        goto LABEL_19;
      }
    }
  }
LABEL_8:
  uint64_t v8 = static MessageBusActor.shared;
  v2[35] = static MessageBusActor.shared;
  uint64_t v9 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, a2, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  v2[36] = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskGroup<RemoteConversationClient?>);
  *uint64_t v10 = v2;
  v10[1] = closure #1 in ConversationService.bridge(didReceiveStartExecutionTurn:from:);
  return MEMORY[0x1F4187C48](v2 + 26, v8, v9, v11);
}

uint64_t SharedFlowPluginConnection.withRemoteConversationConnectionIfValid<A>(execute:)()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[5];
  swift_release();
  InterruptibleTaskResult.getOrNilIfInterrupted()(v1, v2);
  (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
  swift_unknownObjectRelease();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 104);
    uint64_t v4 = FlowExtensionConnection.withRemoteConversationConnectionIfValid<A>(execute:);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 104);
    swift_release();
    uint64_t v4 = SharedFlowPluginConnection.withRemoteConversationConnectionIfValid<A>(execute:);
    uint64_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, void, uint64_t);
  uint64_t v15;

  uint64_t v1 = v0[9];
  uint64_t v2 = *(void *)(v1 + 48);
  v0[14] = v2;
  uint64_t v3 = *(void *)(v1 + 56);
  if (v2)
  {
    uint64_t v4 = v0[7];
    uint64_t v5 = v0[8];
    uint64_t v6 = v0[6];
    uint64_t v7 = (void *)swift_allocObject();
    v0[15] = v7;
    v7[2] = v5;
    v7[3] = v6;
    v7[4] = v4;
    v7[5] = v2;
    v7[6] = v3;
    swift_unknownObjectRetain_n();
    swift_retain();
    uint64_t v8 = (void *)swift_task_alloc();
    v0[16] = v8;
    *uint64_t v8 = v0;
    v8[1] = SharedFlowPluginConnection.withRemoteConversationConnectionIfValid<A>(execute:);
    uint64_t v9 = v0[12];
    uint64_t v10 = v0[8];
    return InterruptibleTaskManager.perform<A>(_:)(v9, (uint64_t)&async function pointer to partial apply for closure #1 in SharedFlowPluginConnection.withRemoteConversationConnectionIfValid<A>(execute:), (uint64_t)v7, v10);
  }
  else
  {
    char v14 = (uint64_t (*)(uint64_t, void, uint64_t))(v0[6] + *(int *)v0[6]);
    uint64_t v12 = (void *)swift_task_alloc();
    v0[18] = v12;
    *uint64_t v12 = v0;
    v12[1] = SharedFlowPluginConnection.withRemoteConversationConnectionIfValid<A>(execute:);
    uint64_t v13 = v0[5];
    return v14(v13, 0, v3);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  swift_release();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(v2, 0, 1, v1);
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 104);
  if (v0) {
    uint64_t v4 = FlowExtensionConnection.withRemoteConversationConnectionIfValid<A>(execute:);
  }
  else {
    uint64_t v4 = SharedFlowPluginConnection.withRemoteConversationConnectionIfValid<A>(execute:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

uint64_t FlowExtensionConnection.withRemoteConversationConnectionIfValid<A>(execute:)()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, void, uint64_t);
  uint64_t v15;

  uint64_t v1 = v0[9];
  uint64_t v2 = *(void *)(v1 + 88);
  v0[14] = v2;
  uint64_t v3 = *(void *)(v1 + 96);
  if (v2)
  {
    uint64_t v4 = v0[7];
    uint64_t v5 = v0[8];
    uint64_t v6 = v0[6];
    uint64_t v7 = (void *)swift_allocObject();
    v0[15] = v7;
    v7[2] = v5;
    v7[3] = v6;
    v7[4] = v4;
    v7[5] = v2;
    v7[6] = v3;
    swift_unknownObjectRetain_n();
    swift_retain();
    uint64_t v8 = (void *)swift_task_alloc();
    v0[16] = v8;
    *uint64_t v8 = v0;
    v8[1] = FlowExtensionConnection.withRemoteConversationConnectionIfValid<A>(execute:);
    uint64_t v9 = v0[12];
    uint64_t v10 = v0[8];
    return InterruptibleTaskManager.perform<A>(_:)(v9, (uint64_t)&async function pointer to partial apply for closure #1 in FlowExtensionConnection.withRemoteConversationConnectionIfValid<A>(execute:), (uint64_t)v7, v10);
  }
  else
  {
    char v14 = (uint64_t (*)(uint64_t, void, uint64_t))(v0[6] + *(int *)v0[6]);
    uint64_t v12 = (void *)swift_task_alloc();
    v0[18] = v12;
    *uint64_t v12 = v0;
    v12[1] = FlowExtensionConnection.withRemoteConversationConnectionIfValid<A>(execute:);
    uint64_t v13 = v0[5];
    return v14(v13, 0, v3);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 104);
    uint64_t v4 = FlowExtensionConnection.withRemoteConversationConnectionIfValid<A>(execute:);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 104);
    swift_release();
    uint64_t v4 = FlowExtensionConnection.withRemoteConversationConnectionIfValid<A>(execute:);
    uint64_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[17];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[5];
  swift_release();
  InterruptibleTaskResult.get()(v2, v3);
  (*(void (**)(void, void))(v0[11] + 8))(v0[12], v0[10]);
  swift_unknownObjectRelease();
  if (!v1) {
    (*(void (**)(void, void, uint64_t))(*(void *)(v0[8] - 8) + 56))(v0[5], 0, 1);
  }
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 104);
  if (v0) {
    uint64_t v4 = FlowExtensionConnection.withRemoteConversationConnectionIfValid<A>(execute:);
  }
  else {
    uint64_t v4 = FlowExtensionConnection.withRemoteConversationConnectionIfValid<A>(execute:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  (*(void (**)(void, void, uint64_t))(*(void *)(v0[8] - 8) + 56))(v0[5], 0, 1);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t SharedFlowPluginConnection.withRemoteConversationConnectionIfValid<A>(execute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  uint64_t v6 = type metadata accessor for InterruptibleTaskResult();
  v5[10] = v6;
  v5[11] = *(void *)(v6 - 8);
  v5[12] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v7 = static MessageBusActor.shared;
  v5[13] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](SharedFlowPluginConnection.withRemoteConversationConnectionIfValid<A>(execute:), v7, 0);
}

uint64_t type metadata accessor for InterruptibleTaskResult()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3[15];
  uint64_t v5 = *(void *)(v4 + 40);
  v3[18] = v5;
  if (v5 == -1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = v3[16];
    uint64_t v8 = v3[13];
    uint64_t v7 = v3[14];
    uint64_t v9 = v3[12];
    *(void *)(v4 + 40) = v5 + 1;
    uint64_t v10 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v6, 1, 1, v10);
    uint64_t v11 = static MessageBusActor.shared;
    uint64_t v12 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_4((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
    uint64_t v13 = (void *)swift_allocObject();
    v13[2] = v11;
    v13[3] = v12;
    v13[4] = v7;
    v13[5] = v4;
    v13[6] = v5;
    v13[7] = v9;
    v13[8] = v8;
    uint64_t v14 = type metadata accessor for InterruptibleTaskResult();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v15 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC(v6, (uint64_t)&async function pointer to partial apply for closure #1 in InterruptibleTaskManager.perform<A>(_:), (uint64_t)v13, v14);
    v3[19] = v15;
    uint64_t v16 = (void *)swift_allocObject();
    v16[2] = v7;
    v16[3] = v4;
    v16[4] = v15;
    swift_beginAccess();
    swift_retain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *(void *)(v4 + 32);
    *(void *)(v4 + 32) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for closure #2 in InterruptibleTaskManager.perform<A>(_:), (uint64_t)v16, v5, isUniquelyReferenced_nonNull_native);
    *(void *)(v4 + 32) = v20;
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v18 = (void *)swift_task_alloc();
    v3[20] = v18;
    *uint64_t v18 = v3;
    v18[1] = InterruptibleTaskManager.perform<A>(_:);
    a1 = v3[11];
    a2 = v15;
    a3 = v14;
  }
  return MEMORY[0x1F4187DC0](a1, a2, a3);
}

uint64_t InterruptibleTaskManager.perform<A>(_:)()
{
  swift_release();
  swift_beginAccess();
  uint64_t v1 = specialized Dictionary._Variant.removeValue(forKey:)();
  swift_endAccess();
  swift_release();
  if (v1) {
    _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(v1);
  }
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](InterruptibleTaskManager.perform<A>(_:), v1, 0);
}

uint64_t InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[14] = a4;
  v5[15] = v4;
  v5[12] = a2;
  v5[13] = a3;
  v5[11] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v5[16] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  v5[17] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](InterruptibleTaskManager.perform<A>(_:), v6, 0);
}

uint64_t withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = v4;
  type metadata accessor for ManagedContinuation();
  swift_allocObject();
  uint64_t v10 = ManagedContinuation.().init()();
  v8[2] = v10;
  uint64_t v11 = (void *)swift_task_alloc();
  v8[3] = v11;
  v11[2] = v10;
  v11[3] = a2;
  v11[4] = a3;
  uint64_t v14 = (char *)&async function pointer to _unsafeInheritExecutor_withTaskCancellationHandler<A>(handler:operation:)
      + async function pointer to _unsafeInheritExecutor_withTaskCancellationHandler<A>(handler:operation:);
  uint64_t v12 = (void *)swift_task_alloc();
  v8[4] = v12;
  *uint64_t v12 = v8;
  v12[1] = withCancellableContinuation<A>(body:);
  return ((uint64_t (*)(uint64_t, uint64_t (*)(), uint64_t, void *, void *, uint64_t))v14)(a1, partial apply for closure #1 in withCancellableContinuation<A>(body:), v10, &async function pointer to partial apply for closure #2 in withCancellableContinuation<A>(body:), v11, a4);
}

uint64_t withCancellableContinuation<A>(body:)()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t type metadata accessor for ManagedContinuation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ManagedContinuation.().init()()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 88);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v2 = type metadata accessor for CheckedContinuation();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 96);
  uint64_t v4 = type metadata accessor for Result();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E08]), sel_init);
  *(void *)(v0 + *(void *)(*(void *)v0 + 104)) = v5;
  id v6 = v5;
  uint64_t v7 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000027, 0x80000001BA063490);
  objc_msgSend(v6, sel_setName_, v7);

  return v0;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t partial apply for closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = swift_task_alloc();
  long long v6 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  *(void *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 48) = *(void *)v6;
  return MEMORY[0x1F4188298](closure #2 in withCancellableContinuation<A>(body:), 0, 0);
}

uint64_t partial apply for closure #1 in closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1)
{
  return closure #1 in closure #2 in withCancellableContinuation<A>(body:)(a1, *(void *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t closure #1 in closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v6 = type metadata accessor for Result();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (uint64_t *)((char *)&v12 - v8);
  ManagedContinuation.setContinuation(_:)(a1);
  if ((static Task<>.isCancelled.getter() & 1) == 0) {
    return a3(a2);
  }
  type metadata accessor for CancellationError();
  lazy protocol witness table accessor for type CancellationError and conformance CancellationError();
  uint64_t v10 = swift_allocError();
  CancellationError.init()();
  *uint64_t v9 = v10;
  swift_storeEnumTagMultiPayload();
  ManagedContinuation.resume(with:)((uint64_t)v9);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t ManagedContinuation.setContinuation(_:)(uint64_t a1)
{
  uint64_t v14 = a1;
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v1 = type metadata accessor for Result();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v13 - v4;
  uint64_t v6 = type metadata accessor for CheckedContinuation();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v13 - v9;
  uint64_t v11 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v13 - v9, v14, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v10, 0, 1, v6);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(v5, 1, 1, v1);
  ManagedContinuation.updateState(continuation:result:)((uint64_t)v10, (uint64_t)v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t ManagedContinuation.updateState(continuation:result:)(uint64_t a1, uint64_t a2)
{
  uint64_t v109 = a2;
  uint64_t v105 = a1;
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 80);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v5 = type metadata accessor for CheckedContinuation();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v110 = v6;
  uint64_t v111 = v7;
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  v107 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  v100 = (char *)&v81 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  v104 = (char *)&v81 - v13;
  uint64_t v106 = v5;
  uint64_t v14 = *(void *)(v5 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  v87 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  v98 = (char *)&v81 - v18;
  uint64_t v86 = v19;
  MEMORY[0x1F4188790](v17);
  v90 = (char *)&v81 - v20;
  uint64_t v88 = v4;
  uint64_t v21 = type metadata accessor for Result();
  uint64_t v22 = type metadata accessor for Optional();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  v95 = (char *)&v81 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  v83 = (char *)&v81 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  v89 = (void (*)(char *, uint64_t))((char *)&v81 - v29);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v32 = (char *)&v81 - v31;
  uint64_t v33 = *(void *)(v21 - 8);
  uint64_t v34 = MEMORY[0x1F4188790](v30);
  v97 = (char *)&v81 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  v94 = (char *)&v81 - v37;
  uint64_t v85 = v38;
  MEMORY[0x1F4188790](v36);
  v101 = (char *)&v81 - v39;
  objc_msgSend(*(id *)((char *)v2 + *(void *)(v3 + 104)), sel_lock);
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v40(v32, v109, v22);
  uint64_t v109 = v33;
  os_log_type_t v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
  unsigned int v42 = v41(v32, 1, v21);
  uint64_t v108 = v14;
  uint64_t v99 = v21;
  uint64_t v96 = v22;
  uint64_t v84 = v23;
  uint64_t v103 = v23 + 16;
  v93 = v40;
  v102 = v2;
  uint64_t v92 = v33 + 48;
  v91 = v41;
  if (v42 == 1)
  {
    v89 = *(void (**)(char *, uint64_t))(v23 + 8);
    v89(v32, v22);
    uint64_t v43 = v111;
  }
  else
  {
    uint64_t v82 = *(void (**)(char *, char *, uint64_t))(v109 + 32);
    v82(v101, v32, v21);
    uint64_t v44 = (uint64_t)v2 + *(void *)(*v2 + 96);
    swift_beginAccess();
    uint64_t v45 = (char *)v89;
    v40((char *)v89, v44, v22);
    unsigned int v46 = v41(v45, 1, v21);
    v89 = *(void (**)(char *, uint64_t))(v23 + 8);
    v89(v45, v22);
    if (v46 == 1)
    {
      uint64_t v47 = v83;
      v82(v83, v101, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v47, 0, 1, v21);
      swift_beginAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v23 + 40))(v44, v47, v22);
      swift_endAccess();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v109 + 8))(v101, v21);
    }
    uint64_t v43 = v111;
    uint64_t v14 = v108;
    uint64_t v2 = v102;
  }
  unint64_t v48 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  uint64_t v49 = v104;
  uint64_t v50 = v110;
  v48(v104, v105, v110);
  uint64_t v51 = *(unsigned int (**)(void, void, void))(v14 + 48);
  uint64_t v52 = v106;
  if (v51(v49, 1, v106) == 1)
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v49, v50);
  }
  else
  {
    uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    unint64_t v54 = v51;
    uint64_t v55 = v48;
    uint64_t v56 = v90;
    v53(v90, v49, v52);
    uint64_t v57 = v100;
    uint64_t v58 = v56;
    unint64_t v48 = v55;
    uint64_t v51 = v54;
    uint64_t v2 = v102;
    v53(v100, v58, v52);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v57, 0, 1, v52);
    uint64_t v59 = (uint64_t)v2 + *(void *)(*v2 + 88);
    swift_beginAccess();
    uint64_t v60 = v59;
    uint64_t v50 = v110;
    (*(void (**)(uint64_t, char *, uint64_t))(v111 + 40))(v60, v57, v110);
    swift_endAccess();
  }
  uint64_t v61 = (uint64_t)v2 + *(void *)(*v2 + 88);
  swift_beginAccess();
  uint64_t v62 = v107;
  v48(v107, v61, v50);
  long long v63 = v62;
  if (v51(v62, 1, v52) == 1)
  {
    (*(void (**)(char *, uint64_t))(v111 + 8))(v62, v50);
  }
  else
  {
    uint64_t v64 = v108;
    uint64_t v65 = v98;
    v107 = *(char **)(v108 + 32);
    ((void (*)(char *, char *, uint64_t))v107)(v98, v63, v52);
    uint64_t v66 = (uint64_t)v2 + *(void *)(*v2 + 96);
    swift_beginAccess();
    v67 = v95;
    uint64_t v68 = v66;
    uint64_t v69 = v96;
    v93(v95, v68, v96);
    uint64_t v70 = v99;
    if (v91(v67, 1, v99) != 1)
    {
      uint64_t v72 = v109 + 32;
      uint64_t v109 = *(void *)(v109 + 32);
      ((void (*)(char *, char *, uint64_t))v109)(v94, v67, v70);
      uint64_t v73 = v100;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56))(v100, 1, 1, v52);
      swift_beginAccess();
      (*(void (**)(uint64_t, char *, uint64_t))(v111 + 40))(v61, v73, v110);
      swift_endAccess();
      unint64_t v74 = v65;
      uint64_t v75 = v87;
      unint64_t v76 = (void (*)(unint64_t, char *, uint64_t))v107;
      ((void (*)(char *, char *, uint64_t))v107)(v87, v74, v52);
      ((void (*)(char *, char *, uint64_t))v109)(v97, v94, v70);
      unint64_t v77 = (*(unsigned __int8 *)(v64 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
      unint64_t v78 = (v86 + *(unsigned __int8 *)(v72 + 48) + v77) & ~(unint64_t)*(unsigned __int8 *)(v72 + 48);
      uint64_t v79 = swift_allocObject();
      *(void *)(v79 + 16) = v88;
      v76(v79 + v77, v75, v52);
      ((void (*)(unint64_t, char *, uint64_t))v109)(v79 + v78, v97, v70);
      unint64_t v71 = partial apply for closure #2 in ManagedContinuation.updateState(continuation:result:);
      goto LABEL_16;
    }
    (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v52);
    v89(v67, v69);
  }
  unint64_t v71 = destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
LABEL_16:
  ((void (*)(id))v71)(objc_msgSend(*(id *)((char *)v2 + *(void *)(*v2 + 104)), sel_unlock));
  return swift_release();
}

uint64_t partial apply for closure #1 in SharedFlowPluginConnection.withRemoteConversationConnectionIfValid<A>(execute:)(uint64_t a1)
{
  uint64_t v4 = (int *)v1[3];
  uint64_t v6 = v1[5];
  uint64_t v5 = v1[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  uint64_t v8 = (void *)swift_task_alloc();
  v7[2] = v8;
  *uint64_t v8 = v7;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v10(a1, v6, v5);
}

uint64_t closure #1 in RemoteConversationClient.ensureReady()()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in RemoteConversationClient.ensureReady();
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v2 = closure #1 in RemoteConversationClient.warmup(refId:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  void *v16;
  uint64_t v17;

  uint64_t v16 = v0;
  uint64_t v1 = v0[4];
  if (v1)
  {
    uint64_t v2 = v0[5];
    uint64_t v3 = swift_allocObject();
    v0[6] = v3;
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    swift_unknownObjectRetain_n();
    uint64_t v4 = swift_task_alloc();
    v0[7] = v4;
    *(void *)(v4 + 16) = partial apply for closure #1 in closure #1 in RemoteConversationClient.ensureReady();
    *(void *)(v4 + 24) = v3;
    uint64_t v5 = (void *)swift_task_alloc();
    v0[8] = v5;
    *uint64_t v5 = v0;
    v5[1] = closure #1 in RemoteConversationClient.ensureReady();
    uint64_t v6 = v0[3];
    uint64_t v7 = MEMORY[0x1E4FBC848] + 8;
    return MEMORY[0x1F4188160](v6, 0, 0, 0xD000000000000028, 0x80000001BA063410, closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)specialized partial apply, v4, v7);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
    uint64_t v9 = Logger.logObject.getter();
    uint64_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v15 = v12;
      *(_DWORD *)uint64_t v11 = 136446210;
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6552657275736E65, 0xED00002928796461, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v9, v10, "Tried to call %{public}s on an invalid connection to a RemoteConversation. Will not reconnect until a StartTurn comes in.", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v12, -1, -1);
      MEMORY[0x1BA9E48C0](v11, -1, -1);
    }

    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in RemoteConversationClient.ensureReady()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationClient.ensureReady(), 0, 0);
}

uint64_t closure #1 in RemoteConversationClient.warmup(refId:)()
{
  swift_unknownObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  long long v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v16 = v0;
  uint64_t v1 = *(void *)(v0 + 32);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 56);
    uint64_t v14 = *(_OWORD *)(v0 + 40);
    uint64_t v3 = swift_task_alloc();
    *(void *)(v0 + 64) = v3;
    *(void *)(v3 + 16) = v1;
    *(_OWORD *)(v3 + 24) = v14;
    *(void *)(v3 + 40) = v2;
    swift_unknownObjectRetain();
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v4;
    *uint64_t v4 = v0;
    v4[1] = closure #1 in RemoteConversationClient.warmup(refId:);
    uint64_t v5 = *(void *)(v0 + 24);
    uint64_t v6 = MEMORY[0x1E4FBC848] + 8;
    return MEMORY[0x1F41880D8](v5, 0, 0, 0x722870756D726177, 0xEE00293A64496665, partial apply for closure #1 in closure #1 in RemoteConversationClient.warmup(refId:), v3, v6);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
    uint64_t v8 = Logger.logObject.getter();
    uint64_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v15 = v11;
      *(_DWORD *)uint64_t v10 = 136446210;
      *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x722870756D726177, 0xEE00293A64496665, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v8, v9, "Tried to call %{public}s on an invalid connection to a RemoteConversation. Will not reconnect until a StartTurn comes in.", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v11, -1, -1);
      MEMORY[0x1BA9E48C0](v10, -1, -1);
    }

    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationClient.warmup(refId:), 0, 0);
}

unint64_t specialized static CandidateRequestMessage.from(_:)(void *a1)
{
  type metadata accessor for StartCandidateRequestMessage();
  uint64_t v2 = swift_dynamicCastClass();
  if (v2)
  {
    unint64_t v3 = v2;
  }
  else
  {
    type metadata accessor for TRPCandidateRequestMessage();
    uint64_t v4 = swift_dynamicCastClass();
    if (v4)
    {
      unint64_t v3 = v4 | 0x2000000000000000;
    }
    else
    {
      type metadata accessor for TTResponseMessage();
      uint64_t v5 = swift_dynamicCastClass();
      if (v5)
      {
        unint64_t v3 = v5 | 0x4000000000000000;
      }
      else
      {
        type metadata accessor for SpeechStopDetectedMessage();
        uint64_t v6 = swift_dynamicCastClass();
        if (v6)
        {
          unint64_t v3 = v6 | 0x8000000000000000;
        }
        else
        {
          type metadata accessor for StoppedListeningForSpeechContinuationMessage();
          uint64_t v7 = swift_dynamicCastClass();
          if (v7)
          {
            unint64_t v3 = v7 | 0xA000000000000000;
          }
          else
          {
            type metadata accessor for ExecuteNLOnServerMessage();
            uint64_t v8 = swift_dynamicCastClass();
            if (!v8) {
              return 0xF000000000000007;
            }
            unint64_t v3 = v8 | 0xC000000000000000;
          }
        }
      }
    }
  }
  id v9 = a1;
  return v3;
}

void ConversationRequestProcessor.handleRequestContextMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Restrictions?);
  MEMORY[0x1F4188790](v4 - 8);
  v165 = (char *)&v155 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1F4188790](v6 - 8);
  v164 = (char *)&v155 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseMode?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  v161 = (char *)&v155 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  v162 = (char *)&v155 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  MEMORY[0x1F4188790](v12 - 8);
  v160 = (char *)&v155 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  MEMORY[0x1F4188790](v14 - 8);
  v159 = (char *)&v155 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for InputOrigin();
  uint64_t v172 = *(void *)(v16 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  v158 = (char *)&v155 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  v171 = (char *)&v155 - v19;
  uint64_t v20 = type metadata accessor for RequestType();
  uint64_t v21 = *(void **)(v20 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  v167 = (char *)&v155 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  v166 = (char *)&v155 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  v163 = (char *)&v155 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  v174 = (char *)&v155 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v32 = ((char *)&v155 - v31);
  MEMORY[0x1F4188790](v30);
  uint64_t v34 = (char *)&v155 - v33;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  uint64_t v36 = __swift_project_value_buffer(v35, (uint64_t)static Logger.conversationBridge);
  id v37 = a1;
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  BOOL v40 = os_log_type_enabled(v38, v39);
  id v179 = v37;
  v180 = v2;
  uint64_t v173 = v16;
  os_log_t v178 = v32;
  if (v40)
  {
    uint64_t v175 = v36;
    os_log_type_t v41 = v34;
    unsigned int v42 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    uint64_t v176 = v20;
    v177 = v21;
    uint64_t v44 = (void *)v43;
    *(_DWORD *)unsigned int v42 = 138412290;
    v185[0] = v37;
    id v45 = v37;
    uint64_t v2 = v180;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v44 = v37;

    uint64_t v34 = v41;
    _os_log_impl(&dword_1B9C64000, v38, v39, "ConversationBridge handling message: %@", v42, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    unsigned int v46 = v44;
    uint64_t v20 = v176;
    uint64_t v21 = v177;
    MEMORY[0x1BA9E48C0](v46, -1, -1);
    MEMORY[0x1BA9E48C0](v42, -1, -1);
  }
  else
  {
  }
  uint64_t v47 = (uint64_t (**)(void))(*v2 + 384);
  unint64_t v48 = *v47;
  uint64_t v49 = (*v47)();
  if (v51 == 1)
  {
    uint64_t v157 = (uint64_t)v50;
    uint64_t v175 = v49;
    uint64_t v52 = v49 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
    swift_beginAccess();
    v168 = (void (*)(char *, uint64_t, uint64_t))v21[2];
    v169 = v21 + 2;
    v168(v34, v52, v20);
    uint64_t v53 = *MEMORY[0x1E4FA2428];
    os_log_t v54 = v178;
    v156 = (void (*)(os_log_t, uint64_t, uint64_t))v21[13];
    v156(v178, v53, v20);
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2(&lazy protocol witness table cache variable for type RequestType and conformance RequestType, MEMORY[0x1E4FA2460]);
    char v55 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v57 = (void (*)(os_log_t, uint64_t))v21[1];
    uint64_t v56 = v21 + 1;
    v57(v54, v20);
    v170 = (void (*)(char *, uint64_t))v57;
    v57((os_log_t)v34, v20);
    uint64_t v155 = v52;
    if ((v55 & 1) != 0
      || (v168(v34, v52, v20),
          v156(v54, *MEMORY[0x1E4FA2450], v20),
          char v58 = dispatch thunk of static Equatable.== infix(_:_:)(),
          uint64_t v59 = v170,
          v170((char *)v54, v20),
          v59(v34, v20),
          (v58 & 1) != 0))
    {
      v180 = v34;
      swift_bridgeObjectRelease();
      id v60 = v179;
      swift_retain_n();
      id v61 = v60;
      uint64_t v62 = Logger.logObject.getter();
      os_log_type_t v63 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v62, v63))
      {
        uint64_t v64 = swift_slowAlloc();
        os_log_t v178 = v62;
        uint64_t v65 = v64;
        uint64_t v66 = (void *)swift_slowAlloc();
        id v179 = (id)swift_slowAlloc();
        id v183 = v179;
        *(_DWORD *)uint64_t v65 = 138412546;
        uint64_t v181 = (uint64_t)v61;
        uint64_t v67 = v20;
        id v68 = v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v69 = v66;
        *uint64_t v66 = v61;

        *(_WORD *)(v65 + 12) = 2080;
        uint64_t v70 = (char *)v180;
        v168((char *)v180, v155, v67);
        uint64_t v71 = RequestType.rawValue.getter();
        unint64_t v73 = v72;
        v170(v70, v67);
        uint64_t v181 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v73, (uint64_t *)&v183);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        os_log_t v74 = v178;
        _os_log_impl(&dword_1B9C64000, v178, v63, "%@ is not supported for this requestType: %s", (uint8_t *)v65, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v69, -1, -1);
        id v75 = v179;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v75, -1, -1);
        MEMORY[0x1BA9E48C0](v65, -1, -1);
        swift_release();

        return;
      }

      goto LABEL_16;
    }
    uint64_t v176 = v20;
    v177 = v56;
    uint64_t v85 = *MEMORY[0x1E4FA2390];
    uint64_t v86 = *(void (**)(char *, uint64_t, uint64_t))(v172 + 104);
    v86(v171, v85, v173);
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin, MEMORY[0x1E4FA23A0]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v183 == (id)v181 && v184 == v182) {
      char v87 = 1;
    }
    else {
      char v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v89 = *(void (**)(char *, uint64_t))(v172 + 8);
    uint64_t v90 = v173;
    v89(v171, v173);
    if (v87)
    {
      v91 = v158;
      v86(v158, v85, v90);
      uint64_t v92 = InputOrigin.aceInputOrigin.getter();
      uint64_t v94 = v93;
      v89(v91, v90);
    }
    else
    {
      uint64_t v92 = InputOrigin.aceInputOrigin.getter();
      uint64_t v94 = v95;
    }
    uint64_t v96 = v176;
    v97 = v156;
    type metadata accessor for RequestContextData.Builder(0);
    swift_allocObject();
    uint64_t v98 = *(void *)RequestContextData.Builder.init()();
    uint64_t v99 = (*(uint64_t (**)(uint64_t, uint64_t))(v98 + 1040))(v92, v94);
    swift_release();
    swift_bridgeObjectRelease();
    RequestContextMessage.audioSource.getter();
    uint64_t v100 = (uint64_t)v159;
    AudioSource.init(aceValue:)();
    uint64_t v101 = (*(uint64_t (**)(uint64_t))(*(void *)v99 + 1048))(v100);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v100, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
    RequestContextMessage.audioDestination.getter();
    uint64_t v102 = (uint64_t)v160;
    AudioDestination.init(aceValue:)();
    uint64_t v103 = (*(uint64_t (**)(uint64_t))(*(void *)v101 + 1056))(v102);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v102, &demangling cache variable for type metadata for AudioDestination?);
    RequestContextMessage.responseMode.getter();
    uint64_t v104 = (uint64_t)v161;
    ResponseMode.init(aceValue:)();
    uint64_t v105 = type metadata accessor for ResponseMode();
    uint64_t v106 = *(void *)(v105 - 8);
    int v107 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v104, 1, v105);
    uint64_t v108 = (uint64_t)v162;
    if (v107 == 1)
    {
      static ResponseMode.displayForward.getter();
      outlined destroy of ReferenceResolutionClientProtocol?(v104, &demangling cache variable for type metadata for ResponseMode?);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v106 + 32))(v162, v104, v105);
    }
    char v109 = 1;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v106 + 56))(v108, 0, 1, v105);
    uint64_t v110 = (*(uint64_t (**)(uint64_t))(*(void *)v103 + 1064))(v108);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v108, &demangling cache variable for type metadata for ResponseMode?);
    char v111 = RequestContextMessage.isEyesFree.getter();
    uint64_t v112 = (*(uint64_t (**)(void))(*(void *)v110 + 1072))(v111 & 1);
    swift_release();
    v168(v174, v155, v96);
    v113 = v163;
    v97((os_log_t)v163, *MEMORY[0x1E4FA2408], v96);
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, MEMORY[0x1E4FA2460]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v183 != (id)v181 || v184 != v182) {
      char v109 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v114 = v113;
    v115 = v170;
    v170(v114, v96);
    v115(v174, v96);
    uint64_t v116 = (*(uint64_t (**)(void))(*(void *)v112 + 1080))(v109 & 1);
    swift_release();
    char v117 = RequestContextMessage.isVoiceTriggerEnabled.getter();
    uint64_t v118 = (*(uint64_t (**)(void))(*(void *)v116 + 1088))(v117 & 1);
    swift_release();
    char v119 = RequestContextMessage.isTextToSpeechEnabled.getter();
    uint64_t v120 = (*(uint64_t (**)(void))(*(void *)v118 + 1096))(v119 & 1);
    swift_release();
    uint64_t v121 = RequestContextMessage.bargeInModes.getter();
    uint64_t v122 = (*(uint64_t (**)(uint64_t))(*(void *)v120 + 1128))(v121);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v123 = (uint64_t)v164;
    RequestContextMessage.approximatePreviousTTSInterval.getter();
    uint64_t v124 = (*(uint64_t (**)(uint64_t))(*(void *)v122 + 1136))(v123);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v123, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
    RequestContextMessage.deviceRestrictions.getter();
    uint64_t v125 = (uint64_t)v165;
    Restrictions.init(aceValue:)();
    uint64_t v126 = type metadata accessor for Restrictions();
    char v127 = 1;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v126 - 8) + 56))(v125, 0, 1, v126);
    uint64_t v128 = (*(uint64_t (**)(uint64_t))(*(void *)v124 + 1144))(v125);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v125, &demangling cache variable for type metadata for Restrictions?);
    uint64_t v129 = (*(uint64_t (**)(void, void))(*(void *)v128 + 1160))(v180[12], v180[13]);
    swift_release();
    char v130 = RequestContextMessage.isTriggerlessFollowup.getter();
    uint64_t v131 = (*(uint64_t (**)(void))(*(void *)v129 + 1168))(v130 & 1);
    swift_release();
    char v132 = ConversationRequestProcessor.didPreviouslyFallbackToServer(forUserId:)();
    uint64_t v133 = (*(uint64_t (**)(void))(*(void *)v131 + 1176))(v132 & 1);
    uint64_t v134 = v176;
    swift_release();
    v135 = v166;
    v168(v166, v155, v134);
    v136 = v167;
    v156((os_log_t)v167, *MEMORY[0x1E4FA2448], v134);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v183 != (id)v181 || v184 != v182) {
      char v127 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v137 = v170;
    v170(v136, v134);
    v137(v135, v134);
    uint64_t v138 = (*(uint64_t (**)(void))(*(void *)v133 + 1184))(v127 & 1);
    swift_release();
    uint64_t v139 = RequestContextMessage.voiceTriggerEventInfo.getter();
    uint64_t v140 = (*(uint64_t (**)(uint64_t))(*(void *)v138 + 1200))(v139);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v141 = v157;
    if (*(void *)((char *)v180 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_muxContextMessage)) {
      char v142 = MUXContextMessage.isRMVEnabled.getter();
    }
    else {
      char v142 = 0;
    }
    uint64_t v143 = (*(uint64_t (**)(void))(*(void *)v140 + 1208))(v142 & 1);
    swift_release();
    unsigned int v144 = RequestContextMessage.voiceAudioSessionId.getter();
    v145 = *(uint64_t (**)(void))(*(void *)v143 + 1216);
    LOBYTE(v183) = 0;
    uint64_t v146 = v145(v144);
    swift_release();
    uint64_t v147 = RequestContextMessage.isSystemApertureEnabled.getter();
    uint64_t v148 = (*(uint64_t (**)(uint64_t))(*(void *)v146 + 1224))(v147);
    swift_release();
    uint64_t v149 = RequestContextMessage.isLiveActivitiesSupported.getter();
    uint64_t v150 = (*(uint64_t (**)(uint64_t))(*(void *)v148 + 1232))(v149);
    swift_release();
    uint64_t v151 = RequestContextMessage.isInAmbient.getter();
    uint64_t v152 = (*(uint64_t (**)(uint64_t))(*(void *)v150 + 1240))(v151);
    uint64_t v153 = swift_release();
    v154 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v152 + 1280))(v153);
    swift_release();
    ConversationRequestProcessor.sendRequestContextData(_:turn:candidateRequestMessages:)(v154, v175, v141);

    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined consume of ConversationRequestProcessor.State(v49, v50, v51);
    swift_retain_n();
    unint64_t v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v76, v77))
    {

LABEL_16:
      swift_release_n();
      return;
    }
    unint64_t v78 = (uint8_t *)swift_slowAlloc();
    uint64_t v79 = swift_slowAlloc();
    v185[0] = (id)v79;
    *(_DWORD *)unint64_t v78 = 136315138;
    uint64_t v80 = v48();
    switch(v82)
    {
      case 1:
        outlined consume of ConversationRequestProcessor.State(v80, (void *)v81, 1);
        uint64_t v83 = 0xD00000000000001DLL;
        uint64_t v84 = "awaiting request context data";
        goto LABEL_21;
      case 2:
        outlined consume of ConversationRequestProcessor.State(v80, (void *)v81, 2);
        unint64_t v88 = 0xEC00000064657472;
        uint64_t v83 = 0x617473206E727574;
        break;
      case 3:
        if (v80 | v81) {
          uint64_t v83 = 0x6574656C706D6F63;
        }
        else {
          uint64_t v83 = 1701602409;
        }
        if (v80 | v81) {
          unint64_t v88 = 0xE800000000000000;
        }
        else {
          unint64_t v88 = 0xE400000000000000;
        }
        break;
      default:
        uint64_t v83 = 0xD000000000000011;
        outlined consume of ConversationRequestProcessor.State(v80, (void *)v81, 0);
        uint64_t v84 = "candidate request";
LABEL_21:
        unint64_t v88 = (unint64_t)(v84 - 32) | 0x8000000000000000;
        break;
    }
    id v183 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v88, (uint64_t *)v185);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v76, v77, "ConversationBridge got request context data while in unexpected state: %s", v78, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v79, -1, -1);
    MEMORY[0x1BA9E48C0](v78, -1, -1);
  }
}

uint64_t type metadata accessor for RequestContextData.Builder(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for RequestContextData.Builder);
}

uint64_t RequestContextData.Builder.init()()
{
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  uint64_t v1 = v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_audioSource;
  uint64_t v2 = type metadata accessor for AudioSource();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_audioDestination;
  uint64_t v4 = type metadata accessor for AudioDestination();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_responseMode;
  uint64_t v6 = type metadata accessor for ResponseMode();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(unsigned char *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isEyesFree) = 2;
  *(unsigned char *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isDirectAction) = 2;
  *(unsigned char *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isVoiceTriggerEnabled) = 2;
  *(unsigned char *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isTextToSpeechEnabled) = 2;
  *(void *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_peerInfo) = 0;
  *(void *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_endpointInfo) = 0;
  *(void *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_instanceInfo) = 0;
  *(void *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_bargeInModes) = 0;
  uint64_t v7 = v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_approximatePreviousTTSInterval;
  uint64_t v8 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_restrictions;
  uint64_t v10 = type metadata accessor for Restrictions();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(void *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_originatingHome) = 0;
  uint64_t v11 = (void *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_currentDeviceAssistantId);
  *uint64_t v11 = 0;
  v11[1] = 0;
  *(unsigned char *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isTriggerlessFollowup) = 2;
  *(unsigned char *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_didPreviouslyFallbackToServer) = 2;
  *(unsigned char *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isSpeechRequest) = 2;
  *(unsigned char *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isUserOnActivePhoneCall) = 2;
  *(void *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_voiceTriggerEventInfo) = 0;
  *(unsigned char *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isRecognizeMyVoiceEnabled) = 2;
  uint64_t v12 = v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_voiceAudioSessionId;
  *(_DWORD *)uint64_t v12 = 0;
  *(unsigned char *)(v12 + 4) = 1;
  *(unsigned char *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isSystemApertureEnabled) = 2;
  *(unsigned char *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isLiveActivitiesSupported) = 2;
  *(unsigned char *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isInAmbient) = 2;
  uint64_t v13 = v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_positionInSession;
  uint64_t v14 = type metadata accessor for RequestPositionInSession();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  *(void *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_conjunctionInfo) = 0;
  *(unsigned char *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isDeviceShowingLockScreen) = 2;
  *(unsigned char *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isDeviceLocked) = 2;
  return v0;
}

uint64_t RequestContextData.Builder.inputOrigin(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)v2 + 328);
  swift_bridgeObjectRetain();
  v5(a1, a2);

  return swift_retain();
}

uint64_t RequestContextData.Builder.inputOrigin.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t RequestContextData.Builder.audioSource(_:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  (*(void (**)(char *))(*(void *)v1 + 352))(v5);
  return swift_retain();
}

uint64_t RequestContextData.Builder.audioSource.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_audioSource, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
}

uint64_t ConversationBridge.rraasClient.setter(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = v3 + *a2;
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)(a1, v6, a3);
  return swift_endAccess();
}

uint64_t RequestContextData.Builder.audioDestination(_:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v5, &demangling cache variable for type metadata for AudioDestination?);
  (*(void (**)(char *))(*(void *)v1 + 376))(v5);
  return swift_retain();
}

uint64_t RequestContextData.Builder.audioDestination.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_audioDestination, &demangling cache variable for type metadata for AudioDestination?);
}

uint64_t RequestContextData.Builder.responseMode(_:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseMode?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v5, &demangling cache variable for type metadata for ResponseMode?);
  (*(void (**)(char *))(*(void *)v1 + 400))(v5);
  return swift_retain();
}

uint64_t RequestContextData.Builder.responseMode.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_responseMode, &demangling cache variable for type metadata for ResponseMode?);
}

uint64_t RequestContextData.Builder.isEyesFree(_:)()
{
  (*(void (**)(void))(*(void *)v0 + 424))();

  return swift_retain();
}

uint64_t RequestContextData.Builder.isEyesFree.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isEyesFree);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t RequestContextData.Builder.isDirectAction(_:)()
{
  (*(void (**)(void))(*(void *)v0 + 448))();

  return swift_retain();
}

uint64_t RequestContextData.Builder.isDirectAction.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isDirectAction);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t RequestContextData.Builder.isVoiceTriggerEnabled(_:)()
{
  (*(void (**)(void))(*(void *)v0 + 472))();

  return swift_retain();
}

uint64_t RequestContextData.Builder.isVoiceTriggerEnabled.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isVoiceTriggerEnabled);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t RequestContextData.Builder.isTextToSpeechEnabled(_:)()
{
  (*(void (**)(void))(*(void *)v0 + 496))();

  return swift_retain();
}

uint64_t RequestContextData.Builder.isTextToSpeechEnabled.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isTextToSpeechEnabled);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t RequestContextData.Builder.bargeInModes(_:)()
{
  uint64_t v1 = *(void (**)(uint64_t))(*(void *)v0 + 592);
  uint64_t v2 = swift_bridgeObjectRetain();
  v1(v2);

  return swift_retain();
}

uint64_t RequestContextData.Builder.bargeInModes.setter(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(v2 + *a2);
  swift_beginAccess();
  *uint64_t v4 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t RequestContextData.Builder.bargeInModes.setter(uint64_t a1)
{
  return RequestContextData.Builder.bargeInModes.setter(a1, &OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_bargeInModes);
}

uint64_t RequestContextData.Builder.approximatePreviousTTSInterval(_:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  (*(void (**)(char *))(*(void *)v1 + 616))(v5);
  return swift_retain();
}

uint64_t RequestContextData.Builder.approximatePreviousTTSInterval.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_approximatePreviousTTSInterval, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
}

uint64_t RequestContextData.Builder.restrictions(_:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Restrictions?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v5, &demangling cache variable for type metadata for Restrictions?);
  (*(void (**)(char *))(*(void *)v1 + 640))(v5);
  return swift_retain();
}

uint64_t RequestContextData.Builder.restrictions.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_restrictions, &demangling cache variable for type metadata for Restrictions?);
}

uint64_t RequestContextData.Builder.currentDeviceAssistantId(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(*(void *)v2 + 688);
  swift_bridgeObjectRetain();
  v5(a1, a2);

  return swift_retain();
}

uint64_t RequestContextData.Builder.currentDeviceAssistantId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_currentDeviceAssistantId);
  swift_beginAccess();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t RequestContextData.Builder.isTriggerlessFollowup(_:)()
{
  (*(void (**)(void))(*(void *)v0 + 712))();

  return swift_retain();
}

uint64_t RequestContextData.Builder.isTriggerlessFollowup.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isTriggerlessFollowup);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t ConversationRequestProcessor.didPreviouslyFallbackToServer(forUserId:)()
{
  uint64_t v1 = type metadata accessor for ConversationSessionKey();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v16[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (char *)&v16[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v0 + 408))(v16, v6);
  __swift_project_boxed_opaque_existential_1(v16, v16[3]);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FA2640], v1);
  dispatch thunk of ConversationSessionState.value(forKey:userId:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  if (v18)
  {
    uint64_t v9 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
    int v10 = swift_dynamicCast();
    uint64_t v11 = *(void *)(v9 - 8);
    uint64_t v12 = 1;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, v10 ^ 1u, 1, v9);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v9) != 1) {
      goto LABEL_6;
    }
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v13 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 1, 1, v13);
  }
  uint64_t v12 = 0;
LABEL_6:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  return v12;
}

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

void thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSError?) -> ()(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in RemoteConversationClient.prepare(bridge:)(uint64_t a1)
{
  return partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in RemoteConversationClient.ensureReady()(a1, &demangling cache variable for type metadata for CheckedContinuation<(), Error>, (uint64_t (*)(uint64_t, unint64_t))implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in RemoteConversationClient.ensureReady());
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in RemoteConversationClient.ensureReady()(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, unint64_t))
{
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a2) - 8);
  return a3(a1, v3 + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)));
}

uint64_t implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in RemoteConversationClient.ensureReady()(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t ManagedContinuation.resume(returning:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 80);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v4 = type metadata accessor for Result();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v9 - v6;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))((char *)&v9 - v6, a1, v3);
  swift_storeEnumTagMultiPayload();
  ManagedContinuation.resume(with:)((uint64_t)v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ManagedContinuation.resume(with:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v2 = type metadata accessor for Result();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v14 - v5;
  uint64_t v7 = type metadata accessor for CheckedContinuation();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))((char *)&v14 - v10, 1, 1, v7);
  uint64_t v12 = *(void *)(v2 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v6, a1, v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v6, 0, 1, v2);
  ManagedContinuation.updateState(continuation:result:)((uint64_t)v11, (uint64_t)v6);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t partial apply for closure #2 in ManagedContinuation.updateState(continuation:result:)()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v1 = *(void *)(type metadata accessor for CheckedContinuation() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for Result() - 8);
  uint64_t v5 = v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return closure #2 in ManagedContinuation.updateState(continuation:result:)(v0 + v2, v5);
}

uint64_t closure #2 in ManagedContinuation.updateState(continuation:result:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v3 = type metadata accessor for CheckedContinuation();
  return CheckedContinuation.resume(with:)(a2, v3);
}

uint64_t CheckedContinuation.resume(with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 24);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Result();
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v18 - v14, a1, v13);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v15, v3);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t RequestContextData.Builder.didPreviouslyFallbackToServer(_:)()
{
  (*(void (**)(void))(*(void *)v0 + 736))();

  return swift_retain();
}

uint64_t RequestContextData.Builder.didPreviouslyFallbackToServer.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_didPreviouslyFallbackToServer);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t RequestContextData.Builder.isSpeechRequest(_:)()
{
  (*(void (**)(void))(*(void *)v0 + 760))();

  return swift_retain();
}

uint64_t RequestContextData.Builder.isSpeechRequest.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isSpeechRequest);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t RequestContextData.Builder.voiceTriggerEventInfo(_:)()
{
  uint64_t v1 = *(void (**)(uint64_t))(*(void *)v0 + 808);
  uint64_t v2 = swift_bridgeObjectRetain();
  v1(v2);

  return swift_retain();
}

uint64_t RequestContextData.Builder.voiceTriggerEventInfo.setter(uint64_t a1)
{
  return RequestContextData.Builder.bargeInModes.setter(a1, &OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_voiceTriggerEventInfo);
}

uint64_t RequestContextData.Builder.isRecognizeMyVoiceEnabled(_:)()
{
  (*(void (**)(void))(*(void *)v0 + 832))();

  return swift_retain();
}

uint64_t RequestContextData.Builder.isRecognizeMyVoiceEnabled.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isRecognizeMyVoiceEnabled);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t RequestContextData.Builder.voiceAudioSessionId(_:)(unint64_t a1)
{
  (*(void (**)(unint64_t))(*(void *)v1 + 856))(a1 | ((HIDWORD(a1) & 1) << 32));

  return swift_retain();
}

uint64_t RequestContextData.Builder.voiceAudioSessionId.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_voiceAudioSessionId;
  uint64_t result = swift_beginAccess();
  *(_DWORD *)uint64_t v3 = a1;
  *(unsigned char *)(v3 + 4) = BYTE4(a1) & 1;
  return result;
}

uint64_t RequestContextData.Builder.isSystemApertureEnabled(_:)()
{
  (*(void (**)(void))(*(void *)v0 + 880))();

  return swift_retain();
}

uint64_t RequestContextData.Builder.isSystemApertureEnabled.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isSystemApertureEnabled);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

id RequestContextData.Builder.build()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestPositionInSession?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v67 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for RequestPositionInSession();
  uint64_t v4 = *(void *)(v86 - 8);
  MEMORY[0x1F4188790](v86);
  uint64_t v89 = (uint64_t)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Restrictions?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Restrictions();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v90 = (uint64_t)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseMode?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for ResponseMode();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v88 = (uint64_t)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v92 = (uint64_t)&v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v91 = (uint64_t)&v67 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 320))(v24);
  if (!v27) {
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v84 = v27;
  uint64_t v85 = v26;
  uint64_t v28 = (*(uint64_t (**)(void))(*(void *)v0 + 344))();
  uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 368))(v28);
  (*(void (**)(uint64_t))(*(void *)v0 + 392))(v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    static ResponseMode.displayForward.getter();
    uint64_t v30 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, &demangling cache variable for type metadata for ResponseMode?);
  }
  else
  {
    uint64_t v30 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(v88, v17, v18);
  }
  int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 416))(v30);
  int v32 = (*(uint64_t (**)(void))(*(void *)v0 + 440))();
  int v33 = (*(uint64_t (**)(void))(*(void *)v0 + 464))();
  LODWORD(v75) = (*(uint64_t (**)(void))(*(void *)v0 + 488))();
  uint64_t v80 = (*(uint64_t (**)(void))(*(void *)v0 + 512))();
  uint64_t v79 = (*(uint64_t (**)(void))(*(void *)v0 + 536))();
  uint64_t v78 = (*(uint64_t (**)(void))(*(void *)v0 + 560))();
  uint64_t v74 = (*(uint64_t (**)(void))(*(void *)v0 + 584))();
  uint64_t v34 = (*(uint64_t (**)(void))(*(void *)v0 + 608))();
  (*(void (**)(uint64_t))(*(void *)v0 + 632))(v34);
  int v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  char v87 = v14;
  int v82 = v32;
  int v83 = v31;
  int v81 = v33;
  if (v35 == 1)
  {
    Restrictions.init(restrictedCommands:)();
    uint64_t v36 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for Restrictions?);
  }
  else
  {
    uint64_t v36 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v90, v8, v9);
  }
  uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 656))(v36);
  uint64_t v73 = (*(uint64_t (**)(void))(*(void *)v0 + 680))();
  unint64_t v68 = v38;
  int v72 = (*(uint64_t (**)(void))(*(void *)v0 + 704))();
  int v71 = (*(uint64_t (**)(void))(*(void *)v0 + 728))();
  int v70 = (*(uint64_t (**)(void))(*(void *)v0 + 752))();
  int v69 = (*(uint64_t (**)(void))(*(void *)v0 + 776))();
  uint64_t v76 = (*(uint64_t (**)(void))(*(void *)v0 + 800))();
  char v39 = (*(uint64_t (**)(void))(*(void *)v0 + 824))();
  uint64_t v40 = (*(uint64_t (**)(void))(*(void *)v0 + 848))();
  char v41 = (*(uint64_t (**)(void))(*(void *)v0 + 872))();
  char v42 = (*(uint64_t (**)(void))(*(void *)v0 + 896))();
  char v43 = (*(uint64_t (**)(void))(*(void *)v0 + 920))();
  (*(void (**)(void))(*(void *)v0 + 944))();
  uint64_t v44 = v4;
  id v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
  uint64_t v46 = v86;
  int v47 = v45(v3, 1, v86);
  uint64_t v77 = v37;
  if (v47 == 1)
  {
    (*(void (**)(uint64_t, void, uint64_t))(v44 + 104))(v89, *MEMORY[0x1E4F9FD40], v46);
    uint64_t v48 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v3, &demangling cache variable for type metadata for RequestPositionInSession?);
  }
  else
  {
    uint64_t v48 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v44 + 32))(v89, v3, v46);
  }
  char v49 = v75;
  char v51 = v71;
  char v50 = v72;
  char v52 = v70;
  unint64_t v53 = 0xE000000000000000;
  if (v68) {
    unint64_t v53 = v68;
  }
  uint64_t v86 = v53;
  if (v68) {
    uint64_t v54 = v73;
  }
  else {
    uint64_t v54 = 0;
  }
  uint64_t v75 = v54;
  int v71 = v42 & 1;
  int v72 = v43 & 1;
  int v70 = v41 & 1;
  if ((v40 & 0x100000000) != 0) {
    int v55 = 0;
  }
  else {
    int v55 = v40;
  }
  char v56 = v39 & 1;
  char v57 = v69 & 1;
  char v58 = v52 & 1;
  char v59 = v51 & 1;
  char v60 = v50 & 1;
  uint64_t v61 = MEMORY[0x1E4FBC860];
  if (v74) {
    uint64_t v61 = v74;
  }
  uint64_t v73 = v61;
  LODWORD(v74) = v49 & 1;
  uint64_t v62 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 968))(v48);
  char v63 = (*(uint64_t (**)(void))(*(void *)v0 + 992))() & 1;
  char v64 = (*(uint64_t (**)(void))(*(void *)v0 + 1016))() & 1;
  id v65 = objc_allocWithZone((Class)type metadata accessor for RequestContextData(0));
  return RequestContextData.init(inputOrigin:audioSource:audioDestination:responseMode:isEyesFree:isDirectAction:isVoiceTriggerEnabled:isTextToSpeechEnabled:peerInfo:endpointInfo:instanceInfo:bargeInModes:approximatePreviousTTSInterval:restrictions:originatingHome:currentDeviceAssistantId:isTriggerlessFollowup:didPreviouslyFallbackToServer:isSpeechRequest:isUserOnActivePhoneCall:voiceTriggerEventInfo:isRecognizeMyVoiceEnabled:voiceAudioSessionId:isSystemApertureEnabled:isLiveActivitiesSupported:isInAmbient:positionInSession:conjunctionInfo:isDeviceShowingLockScreen:isDeviceLocked:)(v85, v84, v91, v92, v88, v83 & 1, v82 & 1, v81 & 1, v74, v80, v79, v78, v73, (uint64_t)v87, v90, v77, v75, v86, v60,
           v59,
           v58,
           v57,
           v76,
           v56,
           v55,
           v70,
           v71,
           v72,
           v89,
           v62,
           v63,
           v64);
}

uint64_t RequestContextData.Builder.inputOrigin.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RequestContextData.Builder.audioSource.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_audioSource, (uint64_t *)&demangling cache variable for type metadata for AudioSource?, a1);
}

uint64_t ManagedContinuation.__deallocating_deinit()
{
  ManagedContinuation.deinit();

  return swift_deallocClassInstance();
}

uint64_t RequestContextData.Builder.audioDestination.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_audioDestination, &demangling cache variable for type metadata for AudioDestination?, a1);
}

uint64_t ManagedContinuation.deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 88);
  __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Error);
  type metadata accessor for CheckedContinuation();
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 96);
  type metadata accessor for Result();
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return v0;
}

uint64_t RequestContextData.Builder.responseMode.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_responseMode, &demangling cache variable for type metadata for ResponseMode?, a1);
}

uint64_t RequestContextData.Builder.isEyesFree.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isEyesFree);
  swift_beginAccess();
  return *v1;
}

uint64_t RequestContextData.Builder.isDirectAction.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isDirectAction);
  swift_beginAccess();
  return *v1;
}

uint64_t RequestContextData.Builder.isVoiceTriggerEnabled.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isVoiceTriggerEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t RequestContextData.Builder.isTextToSpeechEnabled.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isTextToSpeechEnabled);
  swift_beginAccess();
  return *v1;
}

void *RequestContextData.Builder.peerInfo.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_peerInfo);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void *RequestContextData.Builder.endpointInfo.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_endpointInfo);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void *RequestContextData.Builder.instanceInfo.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_instanceInfo);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

uint64_t RequestContextData.Builder.bargeInModes.getter()
{
  return swift_bridgeObjectRetain();
}

{
  return RequestContextData.Builder.bargeInModes.getter();
}

uint64_t RequestContextData.Builder.approximatePreviousTTSInterval.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_approximatePreviousTTSInterval, (uint64_t *)&demangling cache variable for type metadata for DateInterval?, a1);
}

uint64_t RequestContextData.Builder.restrictions.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_restrictions, &demangling cache variable for type metadata for Restrictions?, a1);
}

void *RequestContextData.Builder.originatingHome.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_originatingHome);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

uint64_t RequestContextData.Builder.currentDeviceAssistantId.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_currentDeviceAssistantId);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t RequestContextData.Builder.isTriggerlessFollowup.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isTriggerlessFollowup);
  swift_beginAccess();
  return *v1;
}

uint64_t RequestContextData.Builder.didPreviouslyFallbackToServer.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_didPreviouslyFallbackToServer);
  swift_beginAccess();
  return *v1;
}

uint64_t RequestContextData.Builder.isSpeechRequest.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isSpeechRequest);
  swift_beginAccess();
  return *v1;
}

uint64_t RequestContextData.Builder.isUserOnActivePhoneCall.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isUserOnActivePhoneCall);
  swift_beginAccess();
  return *v1;
}

uint64_t RequestContextData.Builder.voiceTriggerEventInfo.getter()
{
  return RequestContextData.Builder.bargeInModes.getter();
}

uint64_t RequestContextData.Builder.isRecognizeMyVoiceEnabled.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isRecognizeMyVoiceEnabled);
  swift_beginAccess();
  return *v1;
}

unint64_t RequestContextData.Builder.voiceAudioSessionId.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_voiceAudioSessionId);
  swift_beginAccess();
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

uint64_t RequestContextData.Builder.isSystemApertureEnabled.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isSystemApertureEnabled);
  swift_beginAccess();
  return *v1;
}

uint64_t RequestContextData.Builder.positionInSession.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_positionInSession, &demangling cache variable for type metadata for RequestPositionInSession?, a1);
}

uint64_t type metadata accessor for RequestContextData(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for RequestContextData);
}

uint64_t RequestContextData.Builder.__deallocating_deinit()
{
  RequestContextData.Builder.deinit();

  return swift_deallocClassInstance();
}

uint64_t RequestContextData.Builder.deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_audioSource, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_audioDestination, &demangling cache variable for type metadata for AudioDestination?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_responseMode, &demangling cache variable for type metadata for ResponseMode?);

  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_approximatePreviousTTSInterval, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_restrictions, &demangling cache variable for type metadata for Restrictions?);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_positionInSession, &demangling cache variable for type metadata for RequestPositionInSession?);

  return v0;
}

uint64_t protocol witness for ConversationRuntimeClientProtocol.sendRequestContextData(_:withBridgeDelegate:) in conformance ConversationRuntimeClient()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t ConversationRuntimeClient.sendRequestContextData(_:withBridgeDelegate:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = v3[3];
  uint64_t v7 = v3[4];
  uint64_t v9 = v3[5];
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v8;
  v10[3] = v7;
  v10[4] = v9;
  v10[5] = a1;
  v10[6] = a2;
  v10[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  id v11 = a1;
  swift_unknownObjectRetain();
  uint64_t v12 = StaticString.description.getter();
  uint64_t v14 = v13;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveRequestContextData:from:);
  *(void *)(v15 + 24) = v10;
  *(void *)(v15 + 32) = "bridge(didReceiveRequestContextData:from:)";
  *(void *)(v15 + 40) = 42;
  *(unsigned char *)(v15 + 48) = 2;
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v7 + 208);
  swift_retain();
  v16(v12, v14, &closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:)partial apply, v15);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

void *initializeWithCopy for InterruptibleTaskResult(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 3;
  if (v5 >= 3)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 3;
        unsigned int v5 = v8 + 3;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 2)
  {
    uint64_t v13 = *(void *)a2;
    id v14 = *(id *)a2;
    *a1 = v13;
    char v12 = 2;
  }
  else if (v5 == 1)
  {
    id v10 = *(id *)a2;
    id v11 = *(id *)a2;
    *a1 = v10;
    char v12 = 1;
  }
  else
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
    char v12 = 0;
  }
  *((unsigned char *)a1 + v4) = v12;
  return a1;
}

void ConversationRequestProcessor.handleTextBasedResultCandidateMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  id v14 = (void (*)(char *, uint64_t, uint64_t))ResultCandidateRequestMessageBase.resultCandidateId.getter();
  uint64_t v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestType>);
  uint64_t v6 = type metadata accessor for RequestType();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 72);
  unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1BA050760;
  unint64_t v11 = v10 + v9;
  char v12 = *(void (**)(unint64_t, void, uint64_t))(v7 + 104);
  v12(v11, *MEMORY[0x1E4FA2430], v6);
  v12(v11 + v8, *MEMORY[0x1E4FA2450], v6);
  v12(v11 + 2 * v8, *MEMORY[0x1E4FA2438], v6);
  swift_retain();
  id v13 = a1;
  specialized ConversationRequestProcessor.handleCandidateMessage(_:rcId:expectedTypes:messageToCacheIfNotInActiveTurn:shouldUpdateExistingRCState:createResultCandidateState:)(v13, v14, v5, v10, 0xF000000000000007, 0, v2, (uint64_t)v13, (uint64_t (*)(uint64_t))specialized ConversationRequestProcessor.makeResultCandidateState(from:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
}

uint64_t ConversationRequestProcessor.activeTurn.getter()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 384))();
  id v3 = v2;
  char v5 = v4;
  if ((v4 - 1) > 1u)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v1 = swift_retain();
    uint64_t v6 = v1;
  }
  outlined consume of ConversationRequestProcessor.State(v1, v3, v5);
  return v6;
}

uint64_t type metadata accessor for ResultCandidateState.LoggingMetadata(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, type metadata singleton initialization cache for ResultCandidateState.LoggingMetadata);
}

uint64_t ResultCandidateState.description.getter()
{
  uint64_t v66 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1F4188790](v66);
  id v65 = (char *)&v61 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExecutionLocation?);
  MEMORY[0x1F4188790](v2 - 8);
  char v4 = (char *)&v61 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SelectedUserAttributes?);
  MEMORY[0x1F4188790](v64);
  char v63 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  MEMORY[0x1F4188790](v62);
  uint64_t v6 = type metadata accessor for RoutingDecision(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = 0;
  unint64_t v70 = 0xE000000000000000;
  _StringGuts.grow(_:)(305);
  v9._object = (void *)0x80000001BA06C730;
  v9._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v9);
  uint64_t v10 = v0[2];
  unint64_t v11 = (void *)v0[3];
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._object = (void *)0x80000001BA06C750;
  v13._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v13);
  uint64_t v67 = (*(uint64_t (**)(void))(*v0 + 280))();
  uint64_t v68 = v14;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  v15._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0xD000000000000016;
  v16._object = (void *)0x80000001BA06C770;
  String.append(_:)(v16);
  type metadata accessor for ResultCandidateType(0);
  _print_unlocked<A, B>(_:_:)();
  v17._countAndFlagsBits = 0x617265747475202CLL;
  v17._object = (void *)0xEE0022203A65636ELL;
  String.append(_:)(v17);
  uint64_t v18 = (*(uint64_t (**)(void))(*v0 + 856))();
  if (v19)
  {
    unint64_t v20 = v19;
  }
  else
  {
    uint64_t v18 = 0x3E6C696E3CLL;
    unint64_t v20 = 0xE500000000000000;
  }
  unint64_t v21 = v20;
  String.append(_:)(*(Swift::String *)&v18);
  swift_bridgeObjectRelease();
  v22._object = (void *)0x80000001BA06C790;
  v22._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v22);
  char v23 = (*(uint64_t (**)(void))(*v0 + 400))();
  v24._countAndFlagsBits = ResultCandidateProcessingStatus.rawValue.getter(v23);
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 0x7463656C6573202CLL;
  v25._object = (void *)0xEB000000003A6465;
  String.append(_:)(v25);
  char v26 = (*(uint64_t (**)(void))(*v0 + 472))();
  BOOL v27 = (v26 & 1) == 0;
  if (v26) {
    uint64_t v28 = 1702195828;
  }
  else {
    uint64_t v28 = 0x65736C6166;
  }
  if (v27) {
    unint64_t v29 = 0xE500000000000000;
  }
  else {
    unint64_t v29 = 0xE400000000000000;
  }
  unint64_t v30 = v29;
  String.append(_:)(*(Swift::String *)&v28);
  swift_bridgeObjectRelease();
  v31._object = (void *)0x80000001BA06C7B0;
  v31._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v31);
  (*(void (**)(void))(*v0 + 568))();
  _print_unlocked<A, B>(_:_:)();
  _s14SiriKitRuntime15RoutingDecisionOWOhTm_0((uint64_t)v8, type metadata accessor for RoutingDecision);
  v32._object = (void *)0x80000001BA06C7D0;
  v32._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v32);
  (*(void (**)(void))(*v0 + 544))();
  v33._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._countAndFlagsBits = 0x644972657375202CLL;
  v34._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v34);
  type metadata accessor for UserID();
  lazy protocol witness table accessor for type UserID and conformance UserID();
  v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._object = (void *)0x80000001BA06C7F0;
  v36._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v36);
  char v37 = (*(uint64_t (**)(void))(*v0 + 640))();
  BOOL v38 = (v37 & 1) == 0;
  if (v37) {
    uint64_t v39 = 1702195828;
  }
  else {
    uint64_t v39 = 0x65736C6166;
  }
  if (v38) {
    unint64_t v40 = 0xE500000000000000;
  }
  else {
    unint64_t v40 = 0xE400000000000000;
  }
  unint64_t v41 = v40;
  String.append(_:)(*(Swift::String *)&v39);
  swift_bridgeObjectRelease();
  v42._object = (void *)0x80000001BA06C810;
  v42._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v42);
  v43._countAndFlagsBits = 0x3E6C696E3CLL;
  v43._object = (void *)0xE500000000000000;
  String.append(_:)(v43);
  v44._object = (void *)0x80000001BA06C830;
  v44._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v44);
  (*(void (**)(void))(*v0 + 760))();
  v45._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  v46._countAndFlagsBits = 0x636F4C727361202CLL;
  v46._object = (void *)0xEF203A6E6F697461;
  String.append(_:)(v46);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_asrLocation, (uint64_t)v4, &demangling cache variable for type metadata for ExecutionLocation?);
  uint64_t v47 = type metadata accessor for ExecutionLocation();
  uint64_t v48 = *(void *)(v47 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v4, 1, v47) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for ExecutionLocation?);
    char v49 = (void *)0xE500000000000000;
    uint64_t v50 = 0x3E6C696E3CLL;
  }
  else
  {
    uint64_t v50 = ExecutionLocation.description.getter();
    char v49 = v51;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v4, v47);
  }
  v52._countAndFlagsBits = v50;
  v52._object = v49;
  String.append(_:)(v52);
  swift_bridgeObjectRelease();
  v53._countAndFlagsBits = 0xD000000000000018;
  v53._object = (void *)0x80000001BA06C850;
  String.append(_:)(v53);
  uint64_t v54 = (uint64_t)v65;
  (*(void (**)(void))(*v0 + 712))();
  uint64_t v55 = Optional.debugDescription.getter();
  char v57 = v56;
  outlined destroy of ReferenceResolutionClientProtocol?(v54, &demangling cache variable for type metadata for ServerFallbackReason?);
  v58._countAndFlagsBits = v55;
  v58._object = v57;
  String.append(_:)(v58);
  swift_bridgeObjectRelease();
  v59._countAndFlagsBits = 93;
  v59._object = (void *)0xE100000000000000;
  String.append(_:)(v59);
  return v69;
}

uint64_t ResultCandidateState.processingStatus.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_processingStatus);
  swift_beginAccess();
  return *v1;
}

unint64_t ResultCandidateProcessingStatus.rawValue.getter(char a1)
{
  unint64_t result = 0x696C616974696E69;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0xD000000000000014;
      break;
    case 3:
      unint64_t result = 0xD000000000000019;
      break;
    case 4:
    case 6:
    case 10:
    case 13:
      unint64_t result = 0xD000000000000018;
      break;
    case 5:
      unint64_t result = 0xD000000000000014;
      break;
    case 7:
      unint64_t result = 0xD000000000000013;
      break;
    case 8:
      unint64_t result = 0x6F69747563657865;
      break;
    case 9:
      unint64_t result = 0xD000000000000011;
      break;
    case 11:
      unint64_t result = 0xD000000000000013;
      break;
    case 12:
      unint64_t result = 0xD000000000000016;
      break;
    case 14:
      unint64_t result = 0xD000000000000016;
      break;
    case 15:
      unint64_t result = 0xD000000000000017;
      break;
    case 16:
      unint64_t result = 0x5364696C61766E69;
      break;
    case 17:
      unint64_t result = 0x64656C65636E6163;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ResultCandidateState.selected.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_selected);
  swift_beginAccess();
  return *v1;
}

uint64_t ResultCandidateState.mitigationDecision.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_mitigationDecision, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?, a1);
}

uint64_t ResultCandidateState.serverFallback.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_serverFallback);
  swift_beginAccess();
  return *v1;
}

uint64_t ResultCandidateState.serverFallbackReason.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_serverFallbackReason, &demangling cache variable for type metadata for ServerFallbackReason?, a1);
}

uint64_t ResultCandidateState.processingStatus.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_processingStatus);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

void ConversationRequestProcessorTurnState.addResultCandidateState(_:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 24);
  uint64_t v5 = (unint64_t *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  unint64_t v7 = *v5;
  uint64_t v6 = (void *)v5[1];
  unint64_t v8 = *v5 >> 62;
  if (v8)
  {
    if (v8 == 1)
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
      swift_retain_n();
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        Swift::String v12 = (uint8_t *)swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        v36[0] = v13;
        *(_DWORD *)Swift::String v12 = 136315138;
        unint64_t v14 = *v5 >> 62;
        if (v14)
        {
          if (v14 == 1)
          {
            unint64_t v15 = 0xEA00000000006465;
            uint64_t v16 = 0x7463656C65536372;
          }
          else
          {
            unint64_t v15 = 0xE400000000000000;
            uint64_t v16 = 1701602409;
          }
        }
        else
        {
          unint64_t v15 = 0x80000001BA0664F0;
          uint64_t v16 = 0xD000000000000019;
        }
        uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v10, v11, "Got an ASRResultCandidateMessge in state %s: Ignoring", v12, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v13, -1, -1);
        MEMORY[0x1BA9E48C0](v12, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      return;
    }
    type metadata accessor for ConversationRequestProcessorTurnState.ResultCandidateStateHolder();
    Swift::String v25 = (void *)swift_allocObject();
    v25[2] = MEMORY[0x1E4FBC868];
    *uint64_t v5 = (unint64_t)v25;
    v5[1] = 0;
    swift_bridgeObjectRetain();
    swift_retain();
    goto LABEL_17;
  }
  Swift::String v17 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 88);
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(v7, v6);
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(v7, v6);
  swift_bridgeObjectRetain();
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(v7, v6);
  uint64_t v18 = swift_bridgeObjectRetain();
  if (!*(void *)(v17(v18) + 16) || (specialized __RawDictionaryStorage.find<A>(_:)(v4, v3), (v19 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v7, v6);
    Swift::String v25 = (void *)v7;
LABEL_17:
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v7, v6);
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    BOOL v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      unint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      v36[0] = v30;
      *(_DWORD *)unint64_t v29 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v27, v28, "Adding ResultCandidateState with rcId %s to rcStateHolder.", v29, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v30, -1, -1);
      MEMORY[0x1BA9E48C0](v29, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    Swift::String v31 = *(uint64_t (**)(uint64_t *))(*v25 + 104);
    swift_retain();
    Swift::String v32 = (void (*)(uint64_t *, void))v31(v36);
    Swift::String v34 = v33;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v37 = *v34;
    *Swift::String v34 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, v4, v3, isUniquelyReferenced_nonNull_native);
    *Swift::String v34 = v37;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v32(v36, 0);
    swift_release();
    return;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain();
  unint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    char v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    v36[0] = v24;
    *(_DWORD *)char v23 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v21, v22, "Got the same RC ID %s multiple times this turn. Ignoring.", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v24, -1, -1);
    MEMORY[0x1BA9E48C0](v23, -1, -1);
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v7, v6);

    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v7, v6);
  }
  else
  {
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v7, v6);
    swift_bridgeObjectRelease_n();
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v7, v6);
  }
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v7, v6);
}

uint64_t type metadata accessor for ConversationRequestProcessorTurnState.ResultCandidateStateHolder()
{
  return self;
}

void outlined consume of ConversationRequestProcessorTurnState.SpeechState(unint64_t a1, void *a2)
{
  if (a1 >> 62 == 1)
  {
    swift_release();
  }
  else if (!(a1 >> 62))
  {
    swift_release();
  }
}

unint64_t outlined copy of ConversationRequestProcessorTurnState.SpeechState(unint64_t result, void *a2)
{
  if (result >> 62)
  {
    if (result >> 62 != 1) {
      return result;
    }
    id v2 = a2;
  }

  return swift_retain();
}

uint64_t ConversationRequestProcessorTurnState.ResultCandidateStateHolder.byRcId.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t (*ConversationRequestProcessorTurnState.ResultCandidateStateHolder.byRcId.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  void (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for UserID();
  uint64_t v2 = (void (*)(uint64_t))MEMORY[0x1E4FA26E0];
  lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor(&lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E4FA26E0]);
  unint64_t v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, MEMORY[0x1E4FA26E0], &lazy protocol witness table cache variable for type UserID and conformance UserID, v2, MEMORY[0x1E4FA26F0]);
}

{
  void (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for ConversationSessionKey();
  uint64_t v2 = (void (*)(uint64_t))MEMORY[0x1E4FA2670];
  lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor(&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, MEMORY[0x1E4FA2670]);
  unint64_t v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, MEMORY[0x1E4FA2670], (unint64_t *)&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, v2, MEMORY[0x1E4FA2680]);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t vars8;

  uint64_t v2 = v1;
  uint64_t v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t vars8;

  uint64_t v2 = v1;
  uint64_t v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  void (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for UUID();
  uint64_t v2 = (void (*)(uint64_t))MEMORY[0x1E4F27990];
  lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  unint64_t v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, MEMORY[0x1E4F27990], (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, v2, MEMORY[0x1E4F279B0]);
}

{
  Swift::Int v2;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  void (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange();
  uint64_t v2 = (void (*)(uint64_t))MEMORY[0x1E4F9FE18];
  lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor(&lazy protocol witness table cache variable for type DateTime.DateTimeRange.DefinedDateTimeRange and conformance DateTime.DateTimeRange.DefinedDateTimeRange, MEMORY[0x1E4F9FE18]);
  unint64_t v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, MEMORY[0x1E4F9FE18], &lazy protocol witness table cache variable for type DateTime.DateTimeRange.DefinedDateTimeRange and conformance DateTime.DateTimeRange.DefinedDateTimeRange, v2, MEMORY[0x1E4F9FE28]);
}

{
  uint64_t v2;
  uint64_t vars8;

  type metadata accessor for CodingUserInfoKey();
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  void (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for IntentTopic();
  uint64_t v2 = (void (*)(uint64_t))MEMORY[0x1E4FA1AB0];
  lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor(&lazy protocol witness table cache variable for type IntentTopic and conformance IntentTopic, MEMORY[0x1E4FA1AB0]);
  unint64_t v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, MEMORY[0x1E4FA1AB0], &lazy protocol witness table cache variable for type IntentTopic and conformance IntentTopic, v2, MEMORY[0x1E4FA1AC8]);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Swift::Int v0 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unint64_t a1)
{
  Hasher.init(_seed:)();
  if ((a1 & 0x100000000) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a1);
  }
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1 | ((HIDWORD(a1) & 1) << 32), v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(char a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    while (1)
    {
      int v6 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v4);
      unint64_t v7 = 0x4C4E79636167656CLL;
      if (v6 != 1) {
        unint64_t v7 = 0xD00000000000001ALL;
      }
      unint64_t v8 = 0xEF747865746E6F43;
      if (v6 != 1) {
        unint64_t v8 = 0x80000001BA060330;
      }
      if (*(unsigned char *)(*(void *)(v2 + 48) + v4)) {
        unint64_t v9 = v7;
      }
      else {
        unint64_t v9 = 0xD000000000000019;
      }
      if (*(unsigned char *)(*(void *)(v2 + 48) + v4)) {
        unint64_t v10 = v8;
      }
      else {
        unint64_t v10 = 0x80000001BA060300;
      }
      if (a1)
      {
        if (a1 == 1) {
          unint64_t v11 = 0x4C4E79636167656CLL;
        }
        else {
          unint64_t v11 = 0xD00000000000001ALL;
        }
        if (a1 == 1) {
          unint64_t v12 = 0xEF747865746E6F43;
        }
        else {
          unint64_t v12 = 0x80000001BA060330;
        }
        if (v9 != v11) {
          goto LABEL_24;
        }
      }
      else
      {
        unint64_t v12 = 0x80000001BA060300;
        if (v9 != 0xD000000000000019) {
          goto LABEL_24;
        }
      }
      if (v10 == v12)
      {
        swift_bridgeObjectRelease_n();
        return v4;
      }
LABEL_24:
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v13 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
  }
  return v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = ~v4;
    do
    {
      uint64_t v7 = *(void *)(v2 + 48) + 8 * result;
      if (*(unsigned char *)(v7 + 4))
      {
        if ((a1 & 0x100000000) != 0) {
          return result;
        }
      }
      else if ((a1 & 0x100000000) == 0 && *(_DWORD *)v7 == a1)
      {
        return result;
      }
      unint64_t result = (result + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      unint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    type metadata accessor for LNSystemProtocol();
    uint64_t v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    uint64_t v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      unint64_t v8 = ~v4;
      for (i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        unint64_t v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        unint64_t v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  unsigned char v9[40];

  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      uint64_t v7 = MEMORY[0x1BA9E38C0](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if (v7) {
        break;
      }
      uint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    unint64_t v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      unint64_t v12 = ~v4;
      uint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          char v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          uint64_t v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            uint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t);
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  void (**v15)(char *, uint64_t);
  uint64_t v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  unint64_t v21 = a1;
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v22 = v2;
  unint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v20 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    unint64_t v10 = ~v8;
    char v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    unint64_t v11 = v5 + 16;
    unint64_t v12 = v13;
    unint64_t v14 = *(void *)(v11 + 56);
    unint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      uint64_t v16 = v11;
      v12(v7, *(void *)(v22 + 48) + v14 * v9, v4);
      Swift::String v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v15)(v7, v4);
      if (v17) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
      unint64_t v11 = v16;
    }
    while (((*(void *)(v20 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1)
{
  return a1 & ~(-1 << *(unsigned char *)(v1 + 32));
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  char v23 = a4;
  v21[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unint64_t v11 = (char *)v21 - v10;
  uint64_t v22 = v6;
  uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v13 = a2 & ~v12;
  v21[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v14 = ~v12;
    Swift::String v17 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v16 = v9 + 16;
    unint64_t v15 = v17;
    uint64_t v18 = *(void *)(v16 + 56);
    do
    {
      v15(v11, *(void *)(v22 + 48) + v18 * v13, v8);
      lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor(v23, v24);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 - 8))(v11, v8);
      if (v19) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
    }
    while (((*(void *)(v21[0] + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        unint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

void destroy for InterruptibleTaskResult(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 8) {
    unint64_t v2 = 8;
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 3;
  if (v3 >= 3)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 3;
        unsigned int v3 = v6 + 3;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 2 || v3 == 1) {

  }
  else {
    (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
}

uint64_t objectdestroyTm()
{
  swift_release();
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t InterruptibleTaskResult.getOrNilIfInterrupted()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  int v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      return swift_willThrow();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56))(a2, 1, 1);
    }
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = *(void *)(v9 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a2, v6, v9);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(a2, 0, 1, v9);
  }
}

void ConversationRequestProcessor.handleResultSelectedMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RequestType();
  uint64_t v99 = *(void *)(v4 - 8);
  uint64_t v100 = v4;
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  int v7 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v91 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v96 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationBridge);
  BOOL v14 = a1;
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  v97 = v7;
  uint64_t v98 = v9;
  if (v17)
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v101 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 138412290;
    v106[3] = (uint64_t)v14;
    char v19 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v20 = v101;
    void *v101 = v14;

    _os_log_impl(&dword_1B9C64000, v15, v16, "ConversationBridge handling message: %@", v18, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v20, -1, -1);
    MEMORY[0x1BA9E48C0](v18, -1, -1);
  }
  else
  {
  }
  uint64_t v21 = (*(uint64_t (**)(void))(*(void *)v2 + 592))();
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v101 = (void *)ResultCandidateRequestMessageBase.resultCandidateId.getter();
    unint64_t v24 = v23;
    uint64_t v25 = (unint64_t *)(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    unint64_t v26 = *v25;
    if (!(*v25 >> 62))
    {
      BOOL v27 = (void *)v25[1];
      os_log_type_t v28 = *(uint64_t (**)(uint64_t))(*(void *)v26 + 88);
      outlined copy of ConversationRequestProcessorTurnState.SpeechState(*v25, v27);
      outlined copy of ConversationRequestProcessorTurnState.SpeechState(v26, v27);
      uint64_t v29 = swift_bridgeObjectRetain();
      uint64_t v30 = v28(v29);
      if (*(void *)(v30 + 16))
      {
        unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v101, v24);
        if (v32)
        {
          uint64_t v33 = v13;
          uint64_t v34 = *(void *)(*(void *)(v30 + 56) + 8 * v31);
          swift_retain();
          swift_bridgeObjectRelease();
          outlined consume of ConversationRequestProcessorTurnState.SpeechState(v26, v27);
          swift_bridgeObjectRelease();
          outlined consume of ConversationRequestProcessorTurnState.SpeechState(v26, v27);
          swift_retain_n();
          uint64_t v95 = v33;
          Swift::String v35 = Logger.logObject.getter();
          os_log_type_t v36 = static os_log_type_t.debug.getter();
          int v37 = v36;
          if (os_log_type_enabled(v35, v36))
          {
            os_log_t v94 = v35;
            uint64_t v38 = swift_slowAlloc();
            int v93 = v37;
            uint64_t v39 = (uint8_t *)v38;
            uint64_t v40 = swift_slowAlloc();
            v106[0] = v40;
            uint64_t v92 = v39;
            *(_DWORD *)uint64_t v39 = 136315138;
            uint64_t v91 = v39 + 4;
            uint64_t v41 = *(void *)v34;
            uint64_t v42 = v34 & 0xFFFFFFFFFFFFLL | 0x6AE1000000000000;
            uint64_t v43 = v34;
            Swift::String v44 = v14;
            uint64_t v45 = v2;
            Swift::String v46 = *(uint64_t (**)(uint64_t))(v41 + 800);
            uint64_t v47 = swift_retain();
            uint64_t v48 = v46(v47);
            uint64_t v2 = v45;
            BOOL v14 = v44;
            uint64_t v34 = v43;
            uint64_t v49 = v48;
            unint64_t v51 = v50;
            swift_release();
            uint64_t v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v51, v106);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            os_log_t v52 = v94;
            Swift::String v53 = v92;
            _os_log_impl(&dword_1B9C64000, v94, (os_log_type_t)v93, "ResultSelected received for RC state: %s", v92, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1BA9E48C0](v40, -1, -1);
            MEMORY[0x1BA9E48C0](v53, -1, -1);
          }
          else
          {

            uint64_t v54 = swift_release_n();
            uint64_t v42 = v34 & 0xFFFFFFFFFFFFLL | 0x6AE1000000000000;
          }
          char v62 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 400))(v54);
          if (ResultCandidateProcessingStatus.rawValue.getter(v62) == 0x64656C65636E6163
            && v63 == 0xE800000000000000)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v65 & 1) == 0)
            {
              swift_bridgeObjectRelease();
              uint64_t v101 = v14;
              char v66 = ResultSelectedMessageBase.isMitigated.getter();
              uint64_t v67 = type metadata accessor for TTResponseMessage.MitigationDecision();
              uint64_t v68 = *(void *)(v67 - 8);
              uint64_t v69 = (unsigned int *)MEMORY[0x1E4FA2080];
              if ((v66 & 1) == 0) {
                uint64_t v69 = (unsigned int *)MEMORY[0x1E4FA2078];
              }
              unint64_t v70 = v96;
              (*(void (**)(char *, void, uint64_t))(*(void *)(v67 - 8) + 104))(v96, *v69, v67);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v70, 0, 1, v67);
              (*(void (**)(char *))(*(void *)v34 + 552))(v70);
              uint64_t v71 = *(void *)v34;
              uint64_t v96 = (char *)v42;
              uint64_t v72 = v34;
              (*(void (**)(uint64_t))(v71 + 480))(1);
              uint64_t v73 = v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
              swift_beginAccess();
              uint64_t v75 = v98;
              uint64_t v74 = v99;
              uint64_t v76 = v100;
              (*(void (**)(char *, uint64_t, uint64_t))(v99 + 16))(v98, v73, v100);
              uint64_t v77 = v97;
              (*(void (**)(char *, void, uint64_t))(v74 + 104))(v97, *MEMORY[0x1E4FA2448], v76);
              _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, MEMORY[0x1E4FA2460]);
              dispatch thunk of RawRepresentable.rawValue.getter();
              dispatch thunk of RawRepresentable.rawValue.getter();
              if (v104 == v102 && v105 == v103)
              {
                swift_bridgeObjectRelease_n();
                uint64_t v78 = *(void (**)(char *, uint64_t))(v74 + 8);
                v78(v77, v76);
                uint64_t v79 = ((uint64_t (*)(char *, uint64_t))v78)(v75, v76);
                uint64_t v80 = v101;
              }
              else
              {
                char v84 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                uint64_t v85 = *(void (**)(char *, uint64_t))(v74 + 8);
                v85(v77, v76);
                uint64_t v79 = ((uint64_t (*)(char *, uint64_t))v85)(v75, v76);
                uint64_t v80 = v101;
                if ((v84 & 1) == 0)
                {
LABEL_39:
                  uint64_t v90 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)v2 + 1352))(v72, v22, 0, 0);
                  (*(void (**)(void *, uint64_t, uint64_t, void *))(*(void *)v2 + 952))(v80, v22, v72, v90);
                  swift_release();
                  swift_release();

                  return;
                }
              }
              uint64_t v86 = (*(uint64_t (**)(uint64_t))(*(void *)v72 + 864))(v79);
              if (v86)
              {
                uint64_t v87 = v86;
                uint64_t v88 = ResultSelectedMessageBase.endpointMode.getter();
                (*(void (**)(uint64_t, void))(*(void *)v87 + 152))(v88, v89 & 1);
                swift_release();
              }
              goto LABEL_39;
            }
          }
          swift_bridgeObjectRetain();
          Swift::String v58 = Logger.logObject.getter();
          os_log_type_t v81 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v58, v81))
          {
            int v82 = (uint8_t *)swift_slowAlloc();
            uint64_t v83 = swift_slowAlloc();
            v106[0] = v83;
            *(_DWORD *)int v82 = 136315138;
            swift_bridgeObjectRetain();
            uint64_t v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v101, v24, v106);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1B9C64000, v58, v81, "RC ID: %s already canceled. Not sending commit signal.", v82, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1BA9E48C0](v83, -1, -1);
            MEMORY[0x1BA9E48C0](v82, -1, -1);
            swift_release();
            goto LABEL_18;
          }

          swift_bridgeObjectRelease_n();
          swift_release();
          goto LABEL_20;
        }
      }
      swift_bridgeObjectRelease();
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v26, v27);
      swift_bridgeObjectRelease();
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v26, v27);
    }
    swift_bridgeObjectRetain();
    Swift::String v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      char v60 = (uint8_t *)swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      v106[0] = v61;
      *(_DWORD *)char v60 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v101, v24, v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v58, v59, "Received ResultSelectedMessage before RC state was created for RC ID: %s. Dropping it on the floor.", v60, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v61, -1, -1);
      MEMORY[0x1BA9E48C0](v60, -1, -1);
LABEL_18:
      swift_release();

      return;
    }

    swift_bridgeObjectRelease_n();
LABEL_20:
    swift_release();
    return;
  }
  uint64_t v55 = Logger.logObject.getter();
  os_log_type_t v56 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v55, v56))
  {
    char v57 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v57 = 0;
    _os_log_impl(&dword_1B9C64000, v55, v56, "Request already canceled. Not handling ResultSelectedMessage.", v57, 2u);
    MEMORY[0x1BA9E48C0](v57, -1, -1);
  }
}

uint64_t ResultCandidateState.mitigationDecision.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_mitigationDecision, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
}

uint64_t ResultCandidateState.selected.setter(char a1)
{
  unsigned int v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_selected);
  uint64_t result = swift_beginAccess();
  *unsigned int v3 = a1;
  return result;
}

id ConversationRequestProcessor.makeAndSendSpeechRecognizedCommand(rcState:turn:reply:)(void *a1, uint64_t a2, void (*a3)(void, void), uint64_t a4)
{
  char v89 = a1;
  uint64_t v90 = a4;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v87 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RequestType();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unint64_t v15 = (char *)v82 - v14;
  uint64_t v16 = a2 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v15, v16, v9);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, *MEMORY[0x1E4FA2448], v9);
  _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2(&lazy protocol witness table cache variable for type RequestType and conformance RequestType, MEMORY[0x1E4FA2460]);
  LOBYTE(v16) = dispatch thunk of static Equatable.== infix(_:_:)();
  BOOL v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v13, v9);
  v17(v15, v9);
  if ((v16 & 1) == 0)
  {
    if (a3) {
      a3(0, 0);
    }
    return 0;
  }
  uint64_t v86 = a3;
  uint64_t v18 = (void *)(a2 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  uint64_t v19 = swift_beginAccess();
  if (*v18 >> 62 == 1 && v18[1] != 0)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.conversationBridge);
    os_log_type_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v36, v37)) {
      goto LABEL_24;
    }
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v38 = 0;
    uint64_t v39 = "SpeechRecognized is already sent. Not sending again..";
LABEL_23:
    _os_log_impl(&dword_1B9C64000, v36, v37, v39, v38, 2u);
    MEMORY[0x1BA9E48C0](v38, -1, -1);
LABEL_24:

    if (v86) {
      v86(0, 0);
    }
    return 0;
  }
  uint64_t v21 = v89;
  uint64_t v85 = (*(uint64_t (**)(uint64_t))(*v89 + 864))(v19);
  if (!v85)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.conversationBridge);
    os_log_type_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v36, v37)) {
      goto LABEL_24;
    }
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v38 = 0;
    uint64_t v39 = "ResultCandidateState is not of the right type. Cannot send SpeechRecognized";
    goto LABEL_23;
  }
  uint64_t v22 = *(void **)(v85 + 24);
  if (!v22)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.conversationBridge);
    swift_retain();
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v42, v43))
    {
      Swift::String v44 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      aBlock[0] = v45;
      *(_DWORD *)Swift::String v44 = 136315138;
      uint64_t v46 = v21[2];
      unint64_t v47 = v21[3];
      swift_bridgeObjectRetain();
      uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v42, v43, "RC:%s does not contain an ASR output. Not sending SpeechRecognized.", v44, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v45, -1, -1);
      MEMORY[0x1BA9E48C0](v44, -1, -1);
    }
    else
    {

      swift_release();
    }
    if (v86) {
      v86(0, 0);
    }
    swift_release();
    return 0;
  }
  uint64_t v23 = one-time initialization token for conversationBridge;
  id v24 = v22;
  if (v23 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  uint64_t v26 = __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationBridge);
  BOOL v27 = v24;
  os_log_type_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  int v30 = v29;
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v84 = v26;
    int v83 = v30;
    unint64_t v31 = (uint8_t *)swift_slowAlloc();
    char v32 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v31 = 138412290;
    v82[1] = v31 + 4;
    uint64_t v33 = v31;
    aBlock[0] = (uint64_t)v27;
    uint64_t v34 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *char v32 = v22;

    _os_log_impl(&dword_1B9C64000, v28, (os_log_type_t)v83, "Rec = %@", v33, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v32, -1, -1);
    MEMORY[0x1BA9E48C0](v33, -1, -1);
  }
  else
  {

    os_log_type_t v28 = v27;
  }

  id v48 = [v27 utterances];
  if (!v48) {
    goto LABEL_40;
  }
  uint64_t v49 = v48;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SASUtterance);
  unint64_t v50 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v50 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v51 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v51)
  {
LABEL_40:
    uint64_t v74 = v89;
    swift_retain();
    uint64_t v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v88 = v27;
      uint64_t v77 = (uint8_t *)swift_slowAlloc();
      uint64_t v78 = swift_slowAlloc();
      aBlock[0] = v78;
      *(_DWORD *)uint64_t v77 = 136315138;
      uint64_t v79 = v74[2];
      unint64_t v80 = v74[3];
      swift_bridgeObjectRetain();
      uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v80, aBlock);
      BOOL v27 = v88;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v75, v76, "RC:%s consists of empty recognition. Not sending SpeechRecognized.", v77, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v78, -1, -1);
      MEMORY[0x1BA9E48C0](v77, -1, -1);
    }
    else
    {

      swift_release();
    }
    if (v86) {
      v86(0, 0);
    }
    swift_release();

    return 0;
  }
  os_log_t v52 = v27;
  Swift::String v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v55 = 0;
    _os_log_impl(&dword_1B9C64000, v53, v54, "Sending SpeechRecognized command", v55, 2u);
    MEMORY[0x1BA9E48C0](v55, -1, -1);
  }

  id v56 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F969A8]), sel_init);
  UUID.init()();
  uint64_t v57 = UUID.uuidString.getter();
  uint64_t v59 = v58;
  (*(void (**)(char *, uint64_t))(v87 + 8))(v8, v6);
  char v60 = (void *)MEMORY[0x1BA9E2DD0](v57, v59);
  swift_bridgeObjectRelease();
  objc_msgSend(v56, sel_setAceId_, v60);

  uint64_t v61 = v88;
  Class isa = v88[10].isa;
  Class v63 = v88[11].isa;
  id v64 = v56;
  char v65 = (void *)MEMORY[0x1BA9E2DD0](isa, v63);
  objc_msgSend(v64, sel_setRefId_, v65);

  objc_msgSend(v64, sel_setEager_, 0);
  objc_msgSend(v64, sel_setRecognition_, v52);
  char v66 = (void *)MEMORY[0x1BA9E2DD0](isa, v63);
  objc_msgSend(v64, sel_setSessionId_, v66);

  uint64_t v67 = (void *)MEMORY[0x1BA9E2DD0](v89[2], v89[3]);
  objc_msgSend(v64, sel_setResultId_, v67);

  uint64_t v68 = *(Class *)((char *)&v61->isa
                 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_requestDispatcherServiceHelper);
  if (objc_msgSend(v68, sel_respondsToSelector_, sel_handleSpeechRecognized_completion_))
  {
    uint64_t v69 = swift_allocObject();
    uint64_t v70 = (uint64_t)v86;
    uint64_t v71 = v90;
    *(void *)(v69 + 16) = v86;
    *(void *)(v69 + 24) = v71;
    aBlock[4] = (uint64_t)partial apply for closure #1 in ConversationRequestProcessor.makeAndSendSpeechRecognizedCommand(rcState:turn:reply:);
    aBlock[5] = v69;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
    aBlock[3] = (uint64_t)&block_descriptor_38;
    uint64_t v72 = _Block_copy(aBlock);
    id v73 = v64;
    swift_unknownObjectRetain();
    outlined copy of (@escaping @callee_guaranteed (@guaranteed SAAceCommand?, @guaranteed Error?) -> ())?(v70);
    swift_retain();
    swift_release();
    objc_msgSend(v68, sel_handleSpeechRecognized_completion_, v73, v72);
    _Block_release(v72);

    swift_release();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }

  return v64;
}

void ServerFallbackCapableRequestProcessor.handleResultSelectedMessage(_:forTurn:withResultCandidateState:speechRecognizedCommand:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = (uint64_t (**)(void))(*a3 + 400);
  uint64_t v11 = *v10;
  char v12 = (*v10)();
  if (ResultCandidateProcessingStatus.rawValue.getter(v12) != 0xD000000000000016 || v13 != 0x80000001BA0611E0)
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v15 = swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_5;
    }
    char v16 = ((uint64_t (*)(uint64_t))v11)(v15);
    if (ResultCandidateProcessingStatus.rawValue.getter(v16) == 0xD000000000000018 && v17 == 0x80000001BA0611A0)
    {
      uint64_t v18 = swift_bridgeObjectRelease();
    }
    else
    {
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v18 = swift_bridgeObjectRelease();
      if ((v19 & 1) == 0) {
        goto LABEL_14;
      }
    }
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 456))(v18);
    if ((v18 & 1) == 0)
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationBridge);
      id v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v26 = 0;
        _os_log_impl(&dword_1B9C64000, v24, v25, "Sending ResultCandidateSelected with ResultSelected", v26, 2u);
        MEMORY[0x1BA9E48C0](v26, -1, -1);
      }

      (*(void (**)(void, void, uint64_t, void, void))(*(void *)v5 + 1280))(a3[2], a3[3], 1, 0, 0);
      goto LABEL_6;
    }
LABEL_14:
    char v20 = ((uint64_t (*)(uint64_t))v11)(v18);
    if (ResultCandidateProcessingStatus.rawValue.getter(v20) == 0xD000000000000013 && v21 == 0x80000001BA0611C0)
    {
      uint64_t v22 = swift_bridgeObjectRelease();
    }
    else
    {
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v22 = swift_bridgeObjectRelease();
      if ((v27 & 1) == 0) {
        goto LABEL_6;
      }
    }
    uint64_t v40 = a1;
    unint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 1528))(v22);
    unint64_t v29 = v28;
    if (v28 >> 62)
    {
      uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
      if (v30) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v30 = *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v30)
      {
LABEL_25:
        uint64_t v38 = a2;
        uint64_t v39 = a4;
        if (v30 < 1)
        {
          __break(1u);
          return;
        }
        uint64_t v31 = 0;
        uint64_t v33 = a3[2];
        uint64_t v32 = a3[3];
        while (1)
        {
          if ((v29 & 0xC000000000000001) != 0) {
            id v34 = (id)MEMORY[0x1BA9E3990](v31, v29);
          }
          else {
            id v34 = *(id *)(v29 + 8 * v31 + 32);
          }
          uint64_t v35 = v34;
          if (ResultCandidateRequestMessageBase.resultCandidateId.getter() == v33 && v36 == v32)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v37 & 1) == 0) {
              goto LABEL_29;
            }
          }
          ServerFallbackCapableRequestProcessor.attemptServerFallback(executeNLOnServer:rcState:)((uint64_t)v35, (unint64_t)a3);
LABEL_29:
          ++v31;

          if (v30 == v31)
          {
            swift_bridgeObjectRelease();
            a2 = v38;
            a4 = v39;
            goto LABEL_40;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_40:
    a1 = v40;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
LABEL_5:
  (*(void (**)(void *, void))(*(void *)v4 + 1128))(a3, 0);
LABEL_6:

  ConversationRequestProcessor.handleResultSelectedMessage(_:forTurn:withResultCandidateState:speechRecognizedCommand:)(a1, a2, (unint64_t)a3, a4);
}

void ConversationRequestProcessor.handleResultSelectedMessage(_:forTurn:withResultCandidateState:speechRecognizedCommand:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v8 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  uint64_t v10 = v9;
  char v11 = (*(uint64_t (**)(void))(*(void *)a3 + 400))();
  if (ResultCandidateProcessingStatus.rawValue.getter(v11) == 0xD000000000000013 && v12 == 0x80000001BA061150)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    (*(void (**)(unint64_t, void))(*(void *)v4 + 1128))(a3, 0);
    goto LABEL_6;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v13) {
    goto LABEL_5;
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Logger.conversationBridge);
  swift_retain();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    id v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    v29[0] = v28;
    *(_DWORD *)id v24 = 136315138;
    buf = v24;
    uint64_t v26 = *(void *)(a3 + 16);
    unint64_t v25 = *(void *)(a3 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v25, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v22, v23, "Not sending CommitResultCandidateId for RC ID: %s yet", buf, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v28, -1, -1);
    MEMORY[0x1BA9E48C0](buf, -1, -1);
  }
  else
  {

    swift_release();
  }
LABEL_6:
  char v14 = (unint64_t *)(a2 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  unint64_t v15 = *v14;
  char v16 = (void *)v14[1];
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(*v14, v16);
  v17.value._countAndFlagsBits = v8;
  v17.value._object = v10;
  ConversationRequestProcessorTurnState.SpeechState.cancelAll(exceptResultCandidateId:)(v17);
  swift_bridgeObjectRelease();
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v15, v16);
  unint64_t v18 = *v14;
  char v19 = (void *)v14[1];
  *char v14 = a3 | 0x4000000000000000;
  v14[1] = (unint64_t)a4;
  id v20 = a4;
  swift_retain();
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v18, v19);
}

Swift::Void __swiftcall ConversationRequestProcessorTurnState.SpeechState.cancelAll(exceptResultCandidateId:)(Swift::String_optional exceptResultCandidateId)
{
  if (v1 >> 62) {
    return;
  }
  object = exceptResultCandidateId.value._object;
  uint64_t countAndFlagsBits = exceptResultCandidateId.value._countAndFlagsBits;
  char v37 = v2;
  uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 88);
  unint64_t v6 = v1;
  uint64_t v7 = swift_retain();
  unint64_t v36 = v6;
  uint64_t v8 = v5(v7);
  uint64_t v9 = v8;
  int64_t v10 = 0;
  uint64_t v11 = v8 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v8 + 64);
  int64_t v42 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v38 = v8 + 64;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_23;
    }
    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
LABEL_39:
      __break(1u);
      return;
    }
    if (v17 >= v42) {
      goto LABEL_35;
    }
    unint64_t v18 = *(void *)(v11 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v42) {
        goto LABEL_35;
      }
      unint64_t v18 = *(void *)(v11 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v42) {
          goto LABEL_35;
        }
        unint64_t v18 = *(void *)(v11 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v14 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_23:
    uint64_t v20 = *(void *)(*(void *)(v9 + 56) + 8 * v16);
    if (object)
    {
      uint64_t v21 = (void *)(*(void *)(v9 + 48) + 16 * v16);
      BOOL v22 = *v21 == countAndFlagsBits && v21[1] == (void)object;
      if (v22
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        continue;
      }
    }
    uint64_t v23 = one-time initialization token for conversationBridge;
    swift_retain();
    if (v23 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.conversationBridge);
    swift_retain_n();
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v39 = swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      uint64_t v43 = v41;
      *(_DWORD *)uint64_t v39 = 136315138;
      uint64_t v27 = v9;
      uint64_t v28 = countAndFlagsBits;
      unint64_t v29 = object;
      uint64_t v30 = *(uint64_t (**)(uint64_t))(*(void *)v20 + 800);
      uint64_t v31 = swift_retain();
      os_log_type_t type = v26;
      uint64_t v32 = v30(v31);
      object = v29;
      uint64_t countAndFlagsBits = v28;
      uint64_t v9 = v27;
      uint64_t v33 = v32;
      unint64_t v35 = v34;
      swift_release();
      *(void *)(v39 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, &v43);
      swift_release_n();
      uint64_t v11 = v38;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v25, type, "Cancelling RC: %s", (uint8_t *)v39, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v41, -1, -1);
      MEMORY[0x1BA9E48C0](v39, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(uint64_t))(*(void *)v20 + 408))(17);
    swift_release();
  }
  int64_t v19 = v17 + 3;
  if (v19 < v42)
  {
    unint64_t v18 = *(void *)(v11 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        int64_t v10 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_39;
        }
        if (v10 >= v42) {
          goto LABEL_35;
        }
        unint64_t v18 = *(void *)(v11 + 8 * v10);
        ++v19;
        if (v18) {
          goto LABEL_22;
        }
      }
    }
    int64_t v10 = v19;
    goto LABEL_22;
  }
LABEL_35:
  swift_release();

  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v36, v37);
}

uint64_t ConversationRequestProcessorTurnState.ResultCandidateStateHolder.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveRequestContextData:from:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v7 = v0[6];
  uint64_t v6 = v0[7];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v8;
  *uint64_t v8 = v1;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationServiceSerialFacade.bridge(didReceiveRequestContextData:from:)(v2, v3, v4, v5, v7, v6);
}

uint64_t closure #1 in ConversationServiceSerialFacade.bridge(didReceiveRequestContextData:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v10;
  *uint64_t v10 = v6;
  v10[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return ConversationService.bridge(didReceiveRequestContextData:from:)(a4, a5, a6);
}

uint64_t ConversationService.bridge(didReceiveRequestContextData:from:)()
{
  char v1 = *(unsigned char *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + 72)) + 0x170))();
  *(void *)(v0 + 136) = v4;
  uint64_t v5 = type metadata accessor for RequestPositionInSession();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = (unsigned int *)MEMORY[0x1E4F9FD48];
  if (v1) {
    uint64_t v7 = (unsigned int *)MEMORY[0x1E4F9FD38];
  }
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v5 - 8) + 104))(v3, *v7, v5);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v3, 0, 1, v5);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 952))(v3);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 1280))(v8);
  *(void *)(v0 + 144) = v9;
  uint64_t v10 = *(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId);
  uint64_t v11 = *(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId + 8);
  *(void *)(v0 + 152) = v11;
  uint64_t v12 = *(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId);
  uint64_t v13 = *(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId + 8);
  *(void *)(v0 + 160) = v13;
  uint64_t v14 = v2 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_sessionId;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v15;
  *unint64_t v15 = v0;
  v15[1] = ConversationService.bridge(didReceiveRequestContextData:from:);
  return ConversationService.setupNewTurn(executionRequestId:rootRequestId:sessionId:contextData:runSiriKitExecutor:scopedRRData:bridge:)(v10, v11, v12, v13, v14, v9, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  unsigned __int8 v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  char v1 = *(void **)(v0 + 144);
  uint64_t v2 = *(void **)(v0 + 120);
  uint64_t v3 = *(unsigned char *)(v0 + 192);
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of ConversationService.State(v2, v3);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  char v1 = *(void *)(v0 + 112);
  TaskService.onNewTurn()();
  return MEMORY[0x1F4188298](ConversationService.bridge(didReceiveRequestContextData:from:), v1, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  void *v7;
  uint8_t *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  char v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t (*v20)(void);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  uint64_t v24 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  char v1 = *(void **)(v0 + 72);
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.debug.getter();
  uint64_t v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void **)(v0 + 72);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    BOOL v22 = swift_slowAlloc();
    uint64_t v23 = v22;
    *(_DWORD *)uint64_t v8 = 136315138;
    uint64_t v9 = objc_msgSend(v7, sel_debugDescription);
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v4, v5, "[ConversationService] Received context data: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v22, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  else
  {
  }
  uint64_t v13 = *(void *)(v0 + 96);
  swift_beginAccess();
  uint64_t v14 = *(void **)(v13 + 112);
  *(void *)(v0 + 120) = v14;
  unint64_t v15 = *(unsigned char *)(v13 + 120);
  *(unsigned char *)(v0 + 192) = v15;
  if ((v15 & 0xC0) == 0x40)
  {
    *(void *)(v0 + 128) = *(void *)(*(void *)(v0 + 96) + 192);
    unint64_t v16 = one-time initialization token for shared;
    uint64_t v17 = v14;
    if (v16 != -1) {
      swift_once();
    }
    unint64_t v18 = static ConversationActor.shared;
    return MEMORY[0x1F4188298](ConversationService.bridge(didReceiveRequestContextData:from:), v18, 0);
  }
  else
  {
    swift_release();
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
    swift_allocError();
    *int64_t v19 = 0xD000000000000050;
    v19[1] = 0x80000001BA066AD0;
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  unsigned __int8 v4;
  void *v5;
  unsigned __int8 v6;
  uint64_t (*v7)(void);
  uint64_t v9;

  char v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void **)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(unsigned char *)(v0 + 192);

  swift_release();
  swift_release();
  outlined consume of ConversationService.State(v2, v4);
  uint64_t v5 = *(void **)(v3 + 112);
  *(void *)(v3 + 112) = v1;
  uint64_t v6 = *(unsigned char *)(v3 + 120);
  *(unsigned char *)(v3 + 120) = 0x80;
  outlined consume of ConversationService.State(v5, v6);
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t ConversationService.bridge(didReceiveRequestContextData:from:)(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 176) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 112);
    uint64_t v6 = ConversationService.bridge(didReceiveRequestContextData:from:);
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 112);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)(v4 + 184) = a1;
    uint64_t v6 = ConversationService.bridge(didReceiveRequestContextData:from:);
    uint64_t v5 = v7;
  }
  return MEMORY[0x1F4188298](v6, v5, 0);
}

uint64_t ConversationService.bridge(didReceiveRequestContextData:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[11] = a3;
  v4[12] = v3;
  v4[9] = a1;
  v4[10] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestPositionInSession?);
  v4[13] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = static MessageBusActor.shared;
  v4[14] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](ConversationService.bridge(didReceiveRequestContextData:from:), v5, 0);
}

uint64_t RequestContextData.debugDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for RequestPositionInSession();
  uint64_t v343 = *(void *)(v2 - 8);
  uint64_t v344 = v2;
  MEMORY[0x1F4188790](v2);
  v342 = (char *)&v333 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v345 = type metadata accessor for Restrictions();
  unint64_t v340 = *(void *)(v345 - 8);
  MEMORY[0x1F4188790](v345);
  v339 = (char *)&v333 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DeviceRestrictions();
  uint64_t v337 = *(void *)(v5 - 8);
  uint64_t v338 = v5;
  MEMORY[0x1F4188790](v5);
  v336 = (char *)&v333 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v334 = (uint64_t)&v333 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v333 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v333 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = (objc_class *)type metadata accessor for RequestContextData(0);
  v347.receiver = v0;
  v347.super_class = v15;
  id v16 = objc_msgSendSuper2(&v347, sel_debugDescription);
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  v348[0] = v17;
  v348[1] = v19;
  v20._uint64_t countAndFlagsBits = 31520;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  uint64_t v22 = v348[0];
  uint64_t v21 = v348[1];
  strcpy((char *)v348, "inputOrigin: ");
  HIWORD(v348[1]) = -4864;
  uint64_t v23 = *(void *)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_inputOrigin);
  uint64_t v24 = *(void **)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_inputOrigin + 8);
  swift_bridgeObjectRetain();
  v25._uint64_t countAndFlagsBits = v23;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._uint64_t countAndFlagsBits = 8236;
  v26._object = (void *)0xE200000000000000;
  String.append(_:)(v26);
  uint64_t v27 = v348[0];
  uint64_t v28 = (void *)v348[1];
  v348[0] = v22;
  v348[1] = v21;
  swift_bridgeObjectRetain();
  v29._uint64_t countAndFlagsBits = v27;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v31 = v348[0];
  uint64_t v30 = v348[1];
  strcpy((char *)v348, "audioSource: ");
  HIWORD(v348[1]) = -4864;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioSource, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  uint64_t v32 = type metadata accessor for AudioSource();
  uint64_t v33 = *(void *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v14, 1, v32) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
    unint64_t v34 = (void *)0xE500000000000000;
    uint64_t v35 = 0x3E6C696E3CLL;
  }
  else
  {
    uint64_t v35 = AudioSource.aceValue.getter();
    unint64_t v34 = v36;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v32);
  }
  v37._uint64_t countAndFlagsBits = v35;
  v37._object = v34;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38._uint64_t countAndFlagsBits = 8236;
  v38._object = (void *)0xE200000000000000;
  String.append(_:)(v38);
  uint64_t v39 = v348[0];
  uint64_t v40 = (void *)v348[1];
  v348[0] = v31;
  v348[1] = v30;
  swift_bridgeObjectRetain();
  v41._uint64_t countAndFlagsBits = v39;
  v41._object = v40;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v43 = v348[0];
  uint64_t v42 = v348[1];
  unint64_t v333 = 0xD000000000000012;
  v348[0] = 0xD000000000000012;
  v348[1] = 0x80000001BA06C2F0;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioDestination, (uint64_t)v11, &demangling cache variable for type metadata for AudioDestination?);
  uint64_t v44 = type metadata accessor for AudioDestination();
  uint64_t v45 = *(void *)(v44 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v11, 1, v44) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, &demangling cache variable for type metadata for AudioDestination?);
    uint64_t v46 = (void *)0xE500000000000000;
    uint64_t v47 = 0x3E6C696E3CLL;
  }
  else
  {
    uint64_t v47 = AudioDestination.aceValue.getter();
    uint64_t v46 = v48;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v11, v44);
  }
  v49._uint64_t countAndFlagsBits = v47;
  v49._object = v46;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v50._uint64_t countAndFlagsBits = 8236;
  v50._object = (void *)0xE200000000000000;
  String.append(_:)(v50);
  uint64_t v51 = v348[0];
  os_log_t v52 = (void *)v348[1];
  v348[0] = v43;
  v348[1] = v42;
  swift_bridgeObjectRetain();
  v53._uint64_t countAndFlagsBits = v51;
  v53._object = v52;
  String.append(_:)(v53);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v55 = v348[0];
  uint64_t v54 = v348[1];
  strcpy((char *)v348, "responseMode: ");
  HIBYTE(v348[1]) = -18;
  v56._uint64_t countAndFlagsBits = ResponseMode.aceValue.getter();
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  v57._uint64_t countAndFlagsBits = 8236;
  v57._object = (void *)0xE200000000000000;
  String.append(_:)(v57);
  uint64_t v58 = v348[0];
  uint64_t v59 = (void *)v348[1];
  v348[0] = v55;
  v348[1] = v54;
  swift_bridgeObjectRetain();
  v60._uint64_t countAndFlagsBits = v58;
  v60._object = v59;
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v62 = v348[0];
  uint64_t v61 = v348[1];
  int v63 = *((unsigned __int8 *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isEyesFree);
  strcpy((char *)v348, "isEyesFree: ");
  BYTE5(v348[1]) = 0;
  HIWORD(v348[1]) = -5120;
  if (v63) {
    uint64_t v64 = 1702195828;
  }
  else {
    uint64_t v64 = 0x65736C6166;
  }
  char v65 = (void *)0xE500000000000000;
  if (v63) {
    unint64_t v66 = 0xE400000000000000;
  }
  else {
    unint64_t v66 = 0xE500000000000000;
  }
  unint64_t v67 = v66;
  String.append(_:)(*(Swift::String *)&v64);
  swift_bridgeObjectRelease();
  v68._uint64_t countAndFlagsBits = 8236;
  v68._object = (void *)0xE200000000000000;
  String.append(_:)(v68);
  uint64_t v69 = v348[0];
  uint64_t v70 = (void *)v348[1];
  v348[0] = v62;
  v348[1] = v61;
  swift_bridgeObjectRetain();
  v71._uint64_t countAndFlagsBits = v69;
  v71._object = v70;
  String.append(_:)(v71);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v73 = v348[0];
  uint64_t v72 = v348[1];
  unint64_t v341 = 0xD000000000000010;
  v348[0] = 0xD000000000000010;
  v348[1] = 0x80000001BA06C310;
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDirectAction)) {
    uint64_t v74 = 1702195828;
  }
  else {
    uint64_t v74 = 0x65736C6166;
  }
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDirectAction)) {
    unint64_t v75 = 0xE400000000000000;
  }
  else {
    unint64_t v75 = 0xE500000000000000;
  }
  unint64_t v76 = v75;
  String.append(_:)(*(Swift::String *)&v74);
  swift_bridgeObjectRelease();
  v77._uint64_t countAndFlagsBits = 8236;
  v77._object = (void *)0xE200000000000000;
  String.append(_:)(v77);
  uint64_t v78 = v348[0];
  uint64_t v79 = (void *)v348[1];
  v348[0] = v73;
  v348[1] = v72;
  swift_bridgeObjectRetain();
  v80._uint64_t countAndFlagsBits = v78;
  v80._object = v79;
  String.append(_:)(v80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v82 = v348[0];
  uint64_t v81 = v348[1];
  v348[0] = 0xD000000000000017;
  v348[1] = 0x80000001BA06C330;
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isVoiceTriggerEnabled)) {
    uint64_t v83 = 1702195828;
  }
  else {
    uint64_t v83 = 0x65736C6166;
  }
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isVoiceTriggerEnabled)) {
    unint64_t v84 = 0xE400000000000000;
  }
  else {
    unint64_t v84 = 0xE500000000000000;
  }
  unint64_t v85 = v84;
  String.append(_:)(*(Swift::String *)&v83);
  swift_bridgeObjectRelease();
  v86._uint64_t countAndFlagsBits = 8236;
  v86._object = (void *)0xE200000000000000;
  String.append(_:)(v86);
  uint64_t v87 = v348[0];
  uint64_t v88 = (void *)v348[1];
  v348[0] = v82;
  v348[1] = v81;
  swift_bridgeObjectRetain();
  v89._uint64_t countAndFlagsBits = v87;
  v89._object = v88;
  String.append(_:)(v89);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v91 = v348[0];
  uint64_t v90 = v348[1];
  v348[0] = 0xD000000000000017;
  v348[1] = 0x80000001BA06C350;
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTextToSpeechEnabled)) {
    uint64_t v92 = 1702195828;
  }
  else {
    uint64_t v92 = 0x65736C6166;
  }
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTextToSpeechEnabled)) {
    unint64_t v93 = 0xE400000000000000;
  }
  else {
    unint64_t v93 = 0xE500000000000000;
  }
  unint64_t v94 = v93;
  String.append(_:)(*(Swift::String *)&v92);
  swift_bridgeObjectRelease();
  v95._uint64_t countAndFlagsBits = 8236;
  v95._object = (void *)0xE200000000000000;
  String.append(_:)(v95);
  uint64_t v96 = v348[0];
  v97 = (void *)v348[1];
  v348[0] = v91;
  v348[1] = v90;
  swift_bridgeObjectRetain();
  v98._uint64_t countAndFlagsBits = v96;
  v98._object = v97;
  String.append(_:)(v98);
  swift_bridgeObjectRelease();
  uint64_t v99 = swift_bridgeObjectRelease();
  uint64_t v101 = v348[0];
  uint64_t v100 = v348[1];
  unint64_t v335 = 0xD000000000000015;
  v348[0] = 0xD000000000000015;
  v348[1] = 0x80000001BA06C370;
  uint64_t v102 = (void *)MEMORY[0x1E4FBC8C8];
  char v103 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x140))(v99);
  BOOL v104 = (v103 & 1) == 0;
  if (v103) {
    uint64_t v105 = 1702195828;
  }
  else {
    uint64_t v105 = 0x65736C6166;
  }
  if (v104) {
    unint64_t v106 = 0xE500000000000000;
  }
  else {
    unint64_t v106 = 0xE400000000000000;
  }
  unint64_t v107 = v106;
  String.append(_:)(*(Swift::String *)&v105);
  swift_bridgeObjectRelease();
  v108._uint64_t countAndFlagsBits = 8236;
  v108._object = (void *)0xE200000000000000;
  String.append(_:)(v108);
  uint64_t v109 = v348[0];
  uint64_t v110 = (void *)v348[1];
  v348[0] = v101;
  v348[1] = v100;
  swift_bridgeObjectRetain();
  v111._uint64_t countAndFlagsBits = v109;
  v111._object = v110;
  String.append(_:)(v111);
  swift_bridgeObjectRelease();
  uint64_t v112 = swift_bridgeObjectRelease();
  uint64_t v114 = v348[0];
  uint64_t v113 = v348[1];
  v348[0] = v333;
  v348[1] = 0x80000001BA06C390;
  char v115 = (*(uint64_t (**)(uint64_t))((*v102 & *v1) + 0x148))(v112);
  BOOL v116 = (v115 & 1) == 0;
  if (v115) {
    uint64_t v117 = 1702195828;
  }
  else {
    uint64_t v117 = 0x65736C6166;
  }
  if (v116) {
    unint64_t v118 = 0xE500000000000000;
  }
  else {
    unint64_t v118 = 0xE400000000000000;
  }
  unint64_t v119 = v118;
  String.append(_:)(*(Swift::String *)&v117);
  swift_bridgeObjectRelease();
  v120._uint64_t countAndFlagsBits = 8236;
  v120._object = (void *)0xE200000000000000;
  String.append(_:)(v120);
  uint64_t v121 = v348[0];
  uint64_t v122 = (void *)v348[1];
  v348[0] = v114;
  v348[1] = v113;
  swift_bridgeObjectRetain();
  v123._uint64_t countAndFlagsBits = v121;
  v123._object = v122;
  String.append(_:)(v123);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v125 = v348[0];
  uint64_t v124 = v348[1];
  strcpy((char *)v348, "peerInfo: ");
  BYTE3(v348[1]) = 0;
  HIDWORD(v348[1]) = -369098752;
  uint64_t v126 = *(void **)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_peerInfo);
  if (v126)
  {
    id v127 = objc_msgSend(v126, sel_debugDescription);
    uint64_t v128 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    char v65 = v129;
  }
  else
  {
    uint64_t v128 = 0x3E6C696E3CLL;
  }
  v130._uint64_t countAndFlagsBits = v128;
  v130._object = v65;
  String.append(_:)(v130);
  swift_bridgeObjectRelease();
  v131._uint64_t countAndFlagsBits = 8236;
  v131._object = (void *)0xE200000000000000;
  String.append(_:)(v131);
  uint64_t v132 = v348[0];
  uint64_t v133 = (void *)v348[1];
  v348[0] = v125;
  v348[1] = v124;
  swift_bridgeObjectRetain();
  v134._uint64_t countAndFlagsBits = v132;
  v134._object = v133;
  String.append(_:)(v134);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v136 = v348[0];
  uint64_t v135 = v348[1];
  strcpy((char *)v348, "endpointInfo: ");
  HIBYTE(v348[1]) = -18;
  v137 = *(void **)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_endpointInfo);
  if (v137)
  {
    id v138 = objc_msgSend(v137, sel_debugDescription);
    uint64_t v139 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v141 = v140;
  }
  else
  {
    uint64_t v141 = (void *)0xE500000000000000;
    uint64_t v139 = 0x3E6C696E3CLL;
  }
  v142._uint64_t countAndFlagsBits = v139;
  v142._object = v141;
  String.append(_:)(v142);
  swift_bridgeObjectRelease();
  v143._uint64_t countAndFlagsBits = 8236;
  v143._object = (void *)0xE200000000000000;
  String.append(_:)(v143);
  uint64_t v144 = v348[0];
  v145 = (void *)v348[1];
  v348[0] = v136;
  v348[1] = v135;
  swift_bridgeObjectRetain();
  v146._uint64_t countAndFlagsBits = v144;
  v146._object = v145;
  String.append(_:)(v146);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v148 = v348[0];
  uint64_t v147 = v348[1];
  strcpy((char *)v348, "instanceInfo: ");
  HIBYTE(v348[1]) = -18;
  uint64_t v149 = *(void **)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_instanceInfo);
  if (v149)
  {
    id v150 = objc_msgSend(v149, sel_debugDescription);
    uint64_t v151 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v153 = v152;
  }
  else
  {
    uint64_t v153 = (void *)0xE500000000000000;
    uint64_t v151 = 0x3E6C696E3CLL;
  }
  v154._uint64_t countAndFlagsBits = v151;
  v154._object = v153;
  String.append(_:)(v154);
  swift_bridgeObjectRelease();
  v155._uint64_t countAndFlagsBits = 8236;
  v155._object = (void *)0xE200000000000000;
  String.append(_:)(v155);
  uint64_t v156 = v348[0];
  uint64_t v157 = (void *)v348[1];
  v348[0] = v148;
  v348[1] = v147;
  swift_bridgeObjectRetain();
  v158._uint64_t countAndFlagsBits = v156;
  v158._object = v157;
  String.append(_:)(v158);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v160 = v348[0];
  uint64_t v159 = v348[1];
  strcpy((char *)v348, "bargeInModes: ");
  HIBYTE(v348[1]) = -18;
  uint64_t v161 = swift_bridgeObjectRetain();
  v162._uint64_t countAndFlagsBits = MEMORY[0x1BA9E3080](v161, MEMORY[0x1E4FBB1A0]);
  String.append(_:)(v162);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v163._uint64_t countAndFlagsBits = 8236;
  v163._object = (void *)0xE200000000000000;
  String.append(_:)(v163);
  uint64_t v164 = v348[0];
  v165 = (void *)v348[1];
  v348[0] = v160;
  v348[1] = v159;
  swift_bridgeObjectRetain();
  v166._uint64_t countAndFlagsBits = v164;
  v166._object = v165;
  String.append(_:)(v166);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v168 = v348[0];
  uint64_t v167 = v348[1];
  v348[0] = 0xD000000000000020;
  v348[1] = 0x80000001BA06C3B0;
  uint64_t v169 = v334;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_approximatePreviousTTSInterval, v334, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  uint64_t v170 = type metadata accessor for DateInterval();
  uint64_t v171 = *(void *)(v170 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v171 + 48))(v169, 1, v170) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v169, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
    uint64_t v172 = (void *)0xE500000000000000;
    uint64_t v173 = 0x3E6C696E3CLL;
  }
  else
  {
    uint64_t v173 = MEMORY[0x1BA9DBF60]();
    uint64_t v172 = v174;
    (*(void (**)(uint64_t, uint64_t))(v171 + 8))(v169, v170);
  }
  v175._uint64_t countAndFlagsBits = v173;
  v175._object = v172;
  String.append(_:)(v175);
  swift_bridgeObjectRelease();
  v176._uint64_t countAndFlagsBits = 8236;
  v176._object = (void *)0xE200000000000000;
  String.append(_:)(v176);
  uint64_t v177 = v348[0];
  os_log_t v178 = (void *)v348[1];
  v348[0] = v168;
  v348[1] = v167;
  swift_bridgeObjectRetain();
  v179._uint64_t countAndFlagsBits = v177;
  v179._object = v178;
  String.append(_:)(v179);
  swift_bridgeObjectRelease();
  uint64_t v180 = swift_bridgeObjectRelease();
  uint64_t v182 = v348[0];
  uint64_t v181 = v348[1];
  v348[0] = 0xD000000000000014;
  v348[1] = 0x80000001BA06C3E0;
  id v183 = v336;
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x150))(v180);
  DeviceRestrictions.aceSet.getter();
  (*(void (**)(char *, uint64_t))(v337 + 8))(v183, v338);
  uint64_t v184 = swift_bridgeObjectRetain();
  v185 = specialized _copyCollectionToContiguousArray<A>(_:)(v184);
  swift_bridgeObjectRelease();
  id v346 = v185;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v346);
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v186 = BidirectionalCollection<>.joined(separator:)();
  v188 = v187;
  swift_release();
  v189._uint64_t countAndFlagsBits = v186;
  v189._object = v188;
  String.append(_:)(v189);
  swift_bridgeObjectRelease();
  v190._uint64_t countAndFlagsBits = 8236;
  v190._object = (void *)0xE200000000000000;
  String.append(_:)(v190);
  uint64_t v191 = v348[0];
  v192 = (void *)v348[1];
  v348[0] = v182;
  v348[1] = v181;
  swift_bridgeObjectRetain();
  v193._uint64_t countAndFlagsBits = v191;
  v193._object = v192;
  String.append(_:)(v193);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v195 = v348[0];
  uint64_t v194 = v348[1];
  strcpy((char *)v348, "restrictions: ");
  HIBYTE(v348[1]) = -18;
  (*(void (**)(char *, uint64_t, uint64_t))(v340 + 16))(v339, (uint64_t)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_restrictions, v345);
  v196._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v196);
  swift_bridgeObjectRelease();
  v197._uint64_t countAndFlagsBits = 32;
  v197._object = (void *)0xE100000000000000;
  String.append(_:)(v197);
  uint64_t v198 = v348[0];
  v199 = (void *)v348[1];
  v348[0] = v195;
  v348[1] = v194;
  swift_bridgeObjectRetain();
  v200._uint64_t countAndFlagsBits = v198;
  v200._object = v199;
  String.append(_:)(v200);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v202 = v348[0];
  uint64_t v201 = v348[1];
  uint64_t v345 = 0xD000000000000011;
  v348[0] = 0xD000000000000011;
  v348[1] = 0x80000001BA06C400;
  v203 = *(void **)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_originatingHome);
  if (v203)
  {
    id v204 = objc_msgSend(v203, sel_debugDescription);
    uint64_t v205 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v207 = v206;
  }
  else
  {
    v207 = (void *)0xE500000000000000;
    uint64_t v205 = 0x3E6C696E3CLL;
  }
  v208._uint64_t countAndFlagsBits = v205;
  v208._object = v207;
  String.append(_:)(v208);
  swift_bridgeObjectRelease();
  v209._uint64_t countAndFlagsBits = 32;
  v209._object = (void *)0xE100000000000000;
  String.append(_:)(v209);
  uint64_t v210 = v348[0];
  v211 = (void *)v348[1];
  v348[0] = v202;
  v348[1] = v201;
  swift_bridgeObjectRetain();
  v212._uint64_t countAndFlagsBits = v210;
  v212._object = v211;
  String.append(_:)(v212);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v214 = v348[0];
  uint64_t v213 = v348[1];
  v348[0] = 0xD00000000000001ALL;
  v348[1] = 0x80000001BA06C420;
  uint64_t v215 = *(void *)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_currentDeviceAssistantId);
  v216 = *(void **)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_currentDeviceAssistantId + 8);
  swift_bridgeObjectRetain();
  v217._uint64_t countAndFlagsBits = v215;
  v217._object = v216;
  String.append(_:)(v217);
  swift_bridgeObjectRelease();
  v218._uint64_t countAndFlagsBits = 32;
  v218._object = (void *)0xE100000000000000;
  String.append(_:)(v218);
  uint64_t v219 = v348[0];
  v220 = (void *)v348[1];
  v348[0] = v214;
  v348[1] = v213;
  swift_bridgeObjectRetain();
  v221._uint64_t countAndFlagsBits = v219;
  v221._object = v220;
  String.append(_:)(v221);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v223 = v348[0];
  uint64_t v222 = v348[1];
  v348[0] = 0xD000000000000017;
  v348[1] = 0x80000001BA06C440;
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTriggerlessFollowup)) {
    uint64_t v224 = 1702195828;
  }
  else {
    uint64_t v224 = 0x65736C6166;
  }
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTriggerlessFollowup)) {
    unint64_t v225 = 0xE400000000000000;
  }
  else {
    unint64_t v225 = 0xE500000000000000;
  }
  unint64_t v226 = v225;
  String.append(_:)(*(Swift::String *)&v224);
  swift_bridgeObjectRelease();
  v227._uint64_t countAndFlagsBits = 32;
  v227._object = (void *)0xE100000000000000;
  String.append(_:)(v227);
  uint64_t v228 = v348[0];
  v229 = (void *)v348[1];
  v348[0] = v223;
  v348[1] = v222;
  swift_bridgeObjectRetain();
  v230._uint64_t countAndFlagsBits = v228;
  v230._object = v229;
  String.append(_:)(v230);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v232 = v348[0];
  uint64_t v231 = v348[1];
  v348[0] = 0xD00000000000001FLL;
  v348[1] = 0x80000001BA06C460;
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_didPreviouslyFallbackToServer)) {
    uint64_t v233 = 1702195828;
  }
  else {
    uint64_t v233 = 0x65736C6166;
  }
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_didPreviouslyFallbackToServer)) {
    unint64_t v234 = 0xE400000000000000;
  }
  else {
    unint64_t v234 = 0xE500000000000000;
  }
  unint64_t v235 = v234;
  String.append(_:)(*(Swift::String *)&v233);
  swift_bridgeObjectRelease();
  v236._uint64_t countAndFlagsBits = 32;
  v236._object = (void *)0xE100000000000000;
  String.append(_:)(v236);
  uint64_t v237 = v348[0];
  v238 = (void *)v348[1];
  v348[0] = v232;
  v348[1] = v231;
  swift_bridgeObjectRetain();
  v239._uint64_t countAndFlagsBits = v237;
  v239._object = v238;
  String.append(_:)(v239);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v241 = v348[0];
  uint64_t v240 = v348[1];
  v348[0] = v345;
  v348[1] = 0x80000001BA06C480;
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSpeechRequest)) {
    uint64_t v242 = 1702195828;
  }
  else {
    uint64_t v242 = 0x65736C6166;
  }
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSpeechRequest)) {
    unint64_t v243 = 0xE400000000000000;
  }
  else {
    unint64_t v243 = 0xE500000000000000;
  }
  unint64_t v244 = v243;
  String.append(_:)(*(Swift::String *)&v242);
  swift_bridgeObjectRelease();
  v245._uint64_t countAndFlagsBits = 32;
  v245._object = (void *)0xE100000000000000;
  String.append(_:)(v245);
  uint64_t v246 = v348[0];
  v247 = (void *)v348[1];
  v348[0] = v241;
  v348[1] = v240;
  swift_bridgeObjectRetain();
  v248._uint64_t countAndFlagsBits = v246;
  v248._object = v247;
  String.append(_:)(v248);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v250 = v348[0];
  uint64_t v249 = v348[1];
  unint64_t v340 = 0xD000000000000019;
  v348[0] = 0xD000000000000019;
  v348[1] = 0x80000001BA06C4A0;
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isUserOnActivePhoneCall)) {
    uint64_t v251 = 1702195828;
  }
  else {
    uint64_t v251 = 0x65736C6166;
  }
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isUserOnActivePhoneCall)) {
    unint64_t v252 = 0xE400000000000000;
  }
  else {
    unint64_t v252 = 0xE500000000000000;
  }
  unint64_t v253 = v252;
  String.append(_:)(*(Swift::String *)&v251);
  swift_bridgeObjectRelease();
  v254._uint64_t countAndFlagsBits = 32;
  v254._object = (void *)0xE100000000000000;
  String.append(_:)(v254);
  uint64_t v255 = v348[0];
  v256 = (void *)v348[1];
  v348[0] = v250;
  v348[1] = v249;
  swift_bridgeObjectRetain();
  v257._uint64_t countAndFlagsBits = v255;
  v257._object = v256;
  String.append(_:)(v257);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v259 = v348[0];
  uint64_t v258 = v348[1];
  v348[0] = 0xD000000000000017;
  v348[1] = 0x80000001BA06C4C0;
  id v346 = *(id *)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceTriggerEventInfo);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : String]?);
  v260._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v260);
  swift_bridgeObjectRelease();
  uint64_t v261 = v348[0];
  v262 = (void *)v348[1];
  v348[0] = v259;
  v348[1] = v258;
  swift_bridgeObjectRetain();
  v263._uint64_t countAndFlagsBits = v261;
  v263._object = v262;
  String.append(_:)(v263);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v265 = v348[0];
  uint64_t v264 = v348[1];
  v348[0] = 0xD00000000000001BLL;
  v348[1] = 0x80000001BA06C4E0;
  v339 = (char *)0xD00000000000001BLL;
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isRecognizeMyVoiceEnabled)) {
    uint64_t v266 = 1702195828;
  }
  else {
    uint64_t v266 = 0x65736C6166;
  }
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isRecognizeMyVoiceEnabled)) {
    unint64_t v267 = 0xE400000000000000;
  }
  else {
    unint64_t v267 = 0xE500000000000000;
  }
  unint64_t v268 = v267;
  String.append(_:)(*(Swift::String *)&v266);
  swift_bridgeObjectRelease();
  uint64_t v269 = v348[0];
  v270 = (void *)v348[1];
  v348[0] = v265;
  v348[1] = v264;
  swift_bridgeObjectRetain();
  v271._uint64_t countAndFlagsBits = v269;
  v271._object = v270;
  String.append(_:)(v271);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v273 = v348[0];
  uint64_t v272 = v348[1];
  v348[0] = v335;
  v348[1] = 0x80000001BA06C500;
  LODWORD(v346) = *(_DWORD *)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceAudioSessionId);
  v274._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v274);
  swift_bridgeObjectRelease();
  uint64_t v275 = v348[0];
  v276 = (void *)v348[1];
  v348[0] = v273;
  v348[1] = v272;
  swift_bridgeObjectRetain();
  v277._uint64_t countAndFlagsBits = v275;
  v277._object = v276;
  String.append(_:)(v277);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v279 = v348[0];
  uint64_t v278 = v348[1];
  v348[0] = v340;
  v348[1] = 0x80000001BA06C520;
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSystemApertureEnabled)) {
    uint64_t v280 = 1702195828;
  }
  else {
    uint64_t v280 = 0x65736C6166;
  }
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSystemApertureEnabled)) {
    unint64_t v281 = 0xE400000000000000;
  }
  else {
    unint64_t v281 = 0xE500000000000000;
  }
  unint64_t v282 = v281;
  String.append(_:)(*(Swift::String *)&v280);
  swift_bridgeObjectRelease();
  uint64_t v283 = v348[0];
  v284 = (void *)v348[1];
  v348[0] = v279;
  v348[1] = v278;
  swift_bridgeObjectRetain();
  v285._uint64_t countAndFlagsBits = v283;
  v285._object = v284;
  String.append(_:)(v285);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v287 = v348[0];
  uint64_t v286 = v348[1];
  v348[0] = 0xD00000000000001BLL;
  v348[1] = 0x80000001BA06C540;
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isLiveActivitiesSupported)) {
    uint64_t v288 = 1702195828;
  }
  else {
    uint64_t v288 = 0x65736C6166;
  }
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isLiveActivitiesSupported)) {
    unint64_t v289 = 0xE400000000000000;
  }
  else {
    unint64_t v289 = 0xE500000000000000;
  }
  unint64_t v290 = v289;
  String.append(_:)(*(Swift::String *)&v288);
  swift_bridgeObjectRelease();
  uint64_t v291 = v348[0];
  v292 = (void *)v348[1];
  v348[0] = v287;
  v348[1] = v286;
  swift_bridgeObjectRetain();
  v293._uint64_t countAndFlagsBits = v291;
  v293._object = v292;
  String.append(_:)(v293);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v295 = v348[0];
  uint64_t v294 = v348[1];
  strcpy((char *)v348, "isInAmbient: ");
  HIWORD(v348[1]) = -4864;
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isInAmbient)) {
    uint64_t v296 = 1702195828;
  }
  else {
    uint64_t v296 = 0x65736C6166;
  }
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isInAmbient)) {
    unint64_t v297 = 0xE400000000000000;
  }
  else {
    unint64_t v297 = 0xE500000000000000;
  }
  unint64_t v298 = v297;
  String.append(_:)(*(Swift::String *)&v296);
  swift_bridgeObjectRelease();
  uint64_t v299 = v348[0];
  v300 = (void *)v348[1];
  v348[0] = v295;
  v348[1] = v294;
  swift_bridgeObjectRetain();
  v301._uint64_t countAndFlagsBits = v299;
  v301._object = v300;
  String.append(_:)(v301);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v303 = v348[0];
  uint64_t v302 = v348[1];
  v348[0] = 0xD000000000000013;
  v348[1] = 0x80000001BA06C560;
  (*(void (**)(char *, uint64_t, uint64_t))(v343 + 16))(v342, (uint64_t)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_positionInSession, v344);
  v304._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v304);
  swift_bridgeObjectRelease();
  uint64_t v305 = v348[0];
  v306 = (void *)v348[1];
  v348[0] = v303;
  v348[1] = v302;
  swift_bridgeObjectRetain();
  v307._uint64_t countAndFlagsBits = v305;
  v307._object = v306;
  String.append(_:)(v307);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v309 = v348[0];
  uint64_t v308 = v348[1];
  v348[0] = v345;
  v348[1] = 0x80000001BA06C580;
  id v346 = *(id *)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_conjunctionInfo);
  id v310 = v346;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RequestConjunctionInfo?);
  v311._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v311);
  swift_bridgeObjectRelease();
  uint64_t v312 = v348[0];
  v313 = (void *)v348[1];
  v348[0] = v309;
  v348[1] = v308;
  swift_bridgeObjectRetain();
  v314._uint64_t countAndFlagsBits = v312;
  v314._object = v313;
  String.append(_:)(v314);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v316 = v348[0];
  uint64_t v315 = v348[1];
  v348[0] = v339;
  v348[1] = 0x80000001BA06C5A0;
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceShowingLockScreen)) {
    uint64_t v317 = 1702195828;
  }
  else {
    uint64_t v317 = 0x65736C6166;
  }
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceShowingLockScreen)) {
    unint64_t v318 = 0xE400000000000000;
  }
  else {
    unint64_t v318 = 0xE500000000000000;
  }
  unint64_t v319 = v318;
  String.append(_:)(*(Swift::String *)&v317);
  swift_bridgeObjectRelease();
  uint64_t v320 = v348[0];
  v321 = (void *)v348[1];
  v348[0] = v316;
  v348[1] = v315;
  swift_bridgeObjectRetain();
  v322._uint64_t countAndFlagsBits = v320;
  v322._object = v321;
  String.append(_:)(v322);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v324 = v348[0];
  uint64_t v323 = v348[1];
  v348[0] = v341;
  v348[1] = 0x80000001BA06C5C0;
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceLocked)) {
    uint64_t v325 = 1702195828;
  }
  else {
    uint64_t v325 = 0x65736C6166;
  }
  if (*((unsigned char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceLocked)) {
    unint64_t v326 = 0xE400000000000000;
  }
  else {
    unint64_t v326 = 0xE500000000000000;
  }
  unint64_t v327 = v326;
  String.append(_:)(*(Swift::String *)&v325);
  swift_bridgeObjectRelease();
  uint64_t v328 = v348[0];
  v329 = (void *)v348[1];
  v348[0] = v324;
  v348[1] = v323;
  swift_bridgeObjectRetain();
  v330._uint64_t countAndFlagsBits = v328;
  v330._object = v329;
  String.append(_:)(v330);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v331._uint64_t countAndFlagsBits = 125;
  v331._object = (void *)0xE100000000000000;
  String.append(_:)(v331);
  swift_bridgeObjectRelease();
  return v348[0];
}

uint64_t RequestContextData.isDeviceInStarkMode.getter()
{
  return RequestContextData.isDeviceInStarkMode.getter(MEMORY[0x1E4FA5290]);
}

uint64_t RequestContextData.isDeviceInStarkMode.getter(void (*a1)(uint64_t))
{
  uint64_t v3 = type metadata accessor for DeviceRestrictions();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)&v15 - v9;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x150))(v8);
  a1(v11);
  lazy protocol witness table accessor for type DeviceRestrictions and conformance DeviceRestrictions((unint64_t *)&lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions, MEMORY[0x1E4FA5298]);
  char v12 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v7, v3);
  v13(v10, v3);
  return v12 & 1;
}

uint64_t RequestContextData.deviceRestrictions.getter()
{
  return Restrictions.deviceRestrictions.getter();
}

{
  return MEMORY[0x1F4154BA0]();
}

uint64_t RequestContextData.isDeviceInCarDND.getter()
{
  return RequestContextData.isDeviceInStarkMode.getter(MEMORY[0x1E4FA5280]);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<LinkActionMetadata>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  char v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  size_t v14 = 40 * v8;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    char v12 = v11 - 32;
    if (v11 < 32) {
      char v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    char v12 = v11 - 32;
    if (v11 < 32) {
      char v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SettingParseOptions>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  char v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    char v12 = v11 - 32;
    if (v11 < 32) {
      char v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v13 = (void *)swift_allocObject();
    size_t v14 = _swift_stdlib_malloc_size(v13);
    v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
  }
  else
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v15 = (unint64_t)(v13 + 4);
  unint64_t v16 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v13 != a4 || v15 >= v16 + 40 * v11) {
      memmove(v13 + 4, a4 + 4, 40 * v11);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v16 >= v15 + 40 * v11 || v15 >= v16 + 40 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v16 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  size_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = (void *)swift_allocObject();
  uint64_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  Swift::String v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  uint64_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  uint64_t v24 = &v21[v23];
  Swift::String v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler)>, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    unint64_t v9 = a4[2];
  }
  else {
    unint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, AffinityScoring)>);
    int64_t v10 = (void *)swift_allocObject();
    uint64_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = (unint64_t)(v10 + 4);
  uint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 56 * v8) {
      memmove(v10 + 4, a4 + 4, 56 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 56 * v8 || v12 >= v13 + 56 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, AffinityScoring));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(uuid: UUID, actionCandidate: ActionCandidate)>, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    unint64_t v9 = a4[2];
  }
  else {
    unint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(appBundleId: String, userData: [String : Any])>);
    int64_t v10 = (void *)swift_allocObject();
    uint64_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = (unint64_t)(v10 + 4);
  uint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (appBundleId: String, userData: [String : Any]));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RRCandidate>, MEMORY[0x1E4FA3DB8]);
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    unint64_t v9 = a4[2];
  }
  else {
    unint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(namespace: String, value: String?)>);
    int64_t v10 = (void *)swift_allocObject();
    uint64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 5);
  }
  else
  {
    int64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = (unint64_t)(v10 + 4);
  size_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 32 * v8) {
      memmove(v10 + 4, a4 + 4, 32 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 32 * v8 || v13 >= v14 + 32 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (namespace: String, value: String?));
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

id outlined copy of ConversationService.State(id result, unsigned __int8 a2)
{
  int v2 = a2 >> 6;
  if (v2 == 2) {
    return (id)swift_retain();
  }
  if (v2 == 1) {
    return result;
  }
  return result;
}

Swift::Void __swiftcall TaskService.onNewTurn()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  unint64_t v6 = *(void *)(v0 + 32);
  if (!(v6 >> 62))
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_3;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.instrumentation);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl(&dword_1B9C64000, v30, v31, "TaskService - No current task, creating a new one", v32, 2u);
      MEMORY[0x1BA9E48C0](v32, -1, -1);
    }

    static Date.now.getter();
    TaskService.addNewTask(id:state:isClientInitiated:creationTime:)(0, 0, 0, 1, (uint64_t)v5);
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  if (!v7) {
    goto LABEL_23;
  }
LABEL_3:
  if ((v6 & 0xC000000000000001) != 0)
  {
    uint64_t v7 = MEMORY[0x1BA9E3990](0, v6);
LABEL_6:
    swift_bridgeObjectRelease();
    if (one-time initialization token for instrumentation == -1) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }
  if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v7 = *(void *)(v6 + 32);
    swift_retain();
    goto LABEL_6;
  }
  __break(1u);
LABEL_31:
  swift_once();
LABEL_7:
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = __swift_project_value_buffer(v8, (uint64_t)static Logger.instrumentation);
  swift_retain_n();
  int64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    v33[1] = v9;
    uint64_t v13 = (uint8_t *)v12;
    uint64_t v14 = swift_slowAlloc();
    unint64_t v34 = v5;
    uint64_t v15 = v14;
    uint64_t v38 = v14;
    uint64_t v35 = v1;
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_retain();
    uint64_t v16 = FlowTask.description.getter();
    uint64_t v36 = v3;
    unint64_t v18 = v17;
    swift_release();
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    uint64_t v3 = v36;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v10, v11, "TaskService - Existing currentTask: %s", v13, 0xCu);
    swift_arrayDestroy();
    uint64_t v19 = v15;
    uint64_t v5 = v34;
    MEMORY[0x1BA9E48C0](v19, -1, -1);
    MEMORY[0x1BA9E48C0](v13, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  if (*(unsigned char *)(v7 + 32) == 2)
  {
    Swift::String v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_1B9C64000, v20, v21, "TaskService - Current task has ended, creating a new one", v22, 2u);
      MEMORY[0x1BA9E48C0](v22, -1, -1);
    }

    static Date.now.getter();
    TaskService.addNewTask(id:state:isClientInitiated:creationTime:)(0, 0, 0, 1, (uint64_t)v5);
    swift_release();
LABEL_28:
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return;
  }
  swift_retain_n();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    Swift::String v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v38 = v26;
    *(_DWORD *)Swift::String v25 = 136315138;
    if (*(unsigned char *)(v7 + 32))
    {
      if (*(unsigned char *)(v7 + 32) == 1)
      {
        unint64_t v27 = 0xE700000000000000;
        uint64_t v28 = 0x676E696F676E6FLL;
      }
      else
      {
        unint64_t v27 = 0xE500000000000000;
        uint64_t v28 = 0x6465646E65;
      }
    }
    else
    {
      unint64_t v27 = 0xE700000000000000;
      uint64_t v28 = 0x64657461657263;
    }
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v23, v24, "TaskService - Current task state is %s, not creating new task", v25, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v26, -1, -1);
    MEMORY[0x1BA9E48C0](v25, -1, -1);
    swift_release();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t FlowTask.description.getter()
{
  v14[8] = 0;
  _StringGuts.grow(_:)(68);
  v1._uint64_t countAndFlagsBits = 0x6B736154776F6C46;
  v1._object = (void *)0xED0000203A64697BLL;
  String.append(_:)(v1);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x3A6574617473202CLL;
  v5._object = (void *)0xE900000000000020;
  String.append(_:)(v5);
  *(void *)uint64_t v14 = *(unsigned __int8 *)(v0 + 32);
  _print_unlocked<A, B>(_:_:)();
  v6._uint64_t countAndFlagsBits = 0xD000000000000015;
  v6._object = (void *)0x80000001BA071360;
  String.append(_:)(v6);
  if (*(unsigned char *)(v0 + 33)) {
    uint64_t v7 = 1702195828;
  }
  else {
    uint64_t v7 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 33)) {
    unint64_t v8 = 0xE400000000000000;
  }
  else {
    unint64_t v8 = 0xE500000000000000;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x80000001BA071380;
  v10._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v10);
  type metadata accessor for Date();
  lazy protocol witness table accessor for type Date and conformance Date();
  v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 125;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return *(void *)&v14[1];
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTag for AffinityValueComparison(unsigned __int8 *a1)
{
  return *a1;
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

uint64_t RequestContextData.makeBuilder()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestPositionInSession?);
  MEMORY[0x1F4188790](v2 - 8);
  Swift::String v4 = &v54[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Restrictions?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = &v54[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseMode?);
  MEMORY[0x1F4188790](v8 - 8);
  Swift::String v10 = &v54[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for RequestContextData.Builder(0);
  uint64_t v11 = swift_allocObject();
  RequestContextData.Builder.init()();
  uint64_t v12 = (*(uint64_t (**)(void, void))(*(void *)v11 + 1040))(*(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_inputOrigin), *(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_inputOrigin + 8));
  swift_release();
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 1048))(v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioSource);
  swift_release();
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 1056))(v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioDestination);
  swift_release();
  uint64_t v15 = v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_responseMode;
  uint64_t v16 = type metadata accessor for ResponseMode();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v17 + 16))(v10, v15, v16);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v17 + 56))(v10, 0, 1, v16);
  uint64_t v18 = (*(uint64_t (**)(unsigned char *))(*(void *)v14 + 1064))(v10);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for ResponseMode?);
  uint64_t v19 = (*(uint64_t (**)(void))(*(void *)v18 + 1072))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isEyesFree));
  swift_release();
  uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v19 + 1080))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDirectAction));
  swift_release();
  uint64_t v21 = (*(uint64_t (**)(void))(*(void *)v20 + 1088))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isVoiceTriggerEnabled));
  swift_release();
  uint64_t v22 = (*(uint64_t (**)(void))(*(void *)v21 + 1096))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTextToSpeechEnabled));
  swift_release();
  uint64_t v23 = (*(uint64_t (**)(void))(*(void *)v22 + 1104))(*(void *)(v1
                                                                                + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_peerInfo));
  swift_release();
  uint64_t v24 = (*(uint64_t (**)(void))(*(void *)v23 + 1112))(*(void *)(v1
                                                                                + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_endpointInfo));
  swift_release();
  uint64_t v25 = (*(uint64_t (**)(void))(*(void *)v24 + 1120))(*(void *)(v1
                                                                                + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_instanceInfo));
  swift_release();
  uint64_t v26 = (*(uint64_t (**)(void))(*(void *)v25 + 1128))(*(void *)(v1
                                                                                + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_bargeInModes));
  swift_release();
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 1136))(v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_approximatePreviousTTSInterval);
  swift_release();
  uint64_t v28 = v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_restrictions;
  uint64_t v29 = type metadata accessor for Restrictions();
  uint64_t v30 = *(void *)(v29 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v30 + 16))(v7, v28, v29);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v30 + 56))(v7, 0, 1, v29);
  uint64_t v31 = (*(uint64_t (**)(unsigned char *))(*(void *)v27 + 1144))(v7);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for Restrictions?);
  uint64_t v32 = (*(uint64_t (**)(void))(*(void *)v31 + 1152))(*(void *)(v1
                                                                                + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_originatingHome));
  swift_release();
  uint64_t v33 = (*(uint64_t (**)(void, void))(*(void *)v32 + 1160))(*(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_currentDeviceAssistantId), *(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_currentDeviceAssistantId + 8));
  swift_release();
  uint64_t v34 = (*(uint64_t (**)(void))(*(void *)v33 + 1168))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTriggerlessFollowup));
  swift_release();
  uint64_t v35 = (*(uint64_t (**)(void))(*(void *)v34 + 1176))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_didPreviouslyFallbackToServer));
  swift_release();
  uint64_t v36 = (*(uint64_t (**)(void))(*(void *)v35 + 1184))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSpeechRequest));
  swift_release();
  uint64_t v37 = (*(uint64_t (**)(void))(*(void *)v36 + 1192))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isUserOnActivePhoneCall));
  swift_release();
  uint64_t v38 = (*(uint64_t (**)(void))(*(void *)v37 + 1200))(*(void *)(v1
                                                                                + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceTriggerEventInfo));
  swift_release();
  uint64_t v39 = (*(uint64_t (**)(void))(*(void *)v38 + 1208))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isRecognizeMyVoiceEnabled));
  swift_release();
  uint64_t v40 = *(unsigned int *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceAudioSessionId);
  Swift::String v41 = *(uint64_t (**)(uint64_t))(*(void *)v39 + 1216);
  v54[12] = 0;
  uint64_t v42 = v41(v40);
  swift_release();
  uint64_t v43 = (*(uint64_t (**)(void))(*(void *)v42 + 1224))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSystemApertureEnabled));
  swift_release();
  uint64_t v44 = (*(uint64_t (**)(void))(*(void *)v43 + 1232))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isLiveActivitiesSupported));
  swift_release();
  uint64_t v45 = (*(uint64_t (**)(void))(*(void *)v44 + 1240))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isInAmbient));
  swift_release();
  uint64_t v46 = v1 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_positionInSession;
  uint64_t v47 = type metadata accessor for RequestPositionInSession();
  uint64_t v48 = *(void *)(v47 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v48 + 16))(v4, v46, v47);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v48 + 56))(v4, 0, 1, v47);
  uint64_t v49 = (*(uint64_t (**)(unsigned char *))(*(void *)v45 + 1248))(v4);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for RequestPositionInSession?);
  uint64_t v50 = (*(uint64_t (**)(void))(*(void *)v49 + 1256))(*(void *)(v1
                                                                                + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_conjunctionInfo));
  swift_release();
  uint64_t v51 = (*(uint64_t (**)(void))(*(void *)v50 + 1264))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceShowingLockScreen));
  swift_release();
  uint64_t v52 = (*(uint64_t (**)(void))(*(void *)v51 + 1272))(*(unsigned __int8 *)(v1
                                                                                         + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceLocked));
  swift_release();
  return v52;
}

uint64_t RequestContextData.Builder.peerInfo(_:)(void *a1)
{
  uint64_t v3 = *(void (**)(void *))(*(void *)v1 + 520);
  id v4 = a1;
  v3(a1);

  return swift_retain();
}

void RequestContextData.Builder.peerInfo.setter(void *a1)
{
}

void RequestContextData.Builder.peerInfo.setter(void *a1, void *a2)
{
  id v4 = (void **)(v2 + *a2);
  swift_beginAccess();
  uint64_t v5 = *v4;
  *id v4 = a1;
}

uint64_t RequestContextData.Builder.endpointInfo(_:)(void *a1)
{
  uint64_t v3 = *(void (**)(void *))(*(void *)v1 + 544);
  id v4 = a1;
  v3(a1);

  return swift_retain();
}

void RequestContextData.Builder.endpointInfo.setter(void *a1)
{
}

uint64_t RequestContextData.Builder.instanceInfo(_:)(void *a1)
{
  uint64_t v3 = *(void (**)(void *))(*(void *)v1 + 568);
  id v4 = a1;
  v3(a1);

  return swift_retain();
}

void RequestContextData.Builder.instanceInfo.setter(void *a1)
{
}

uint64_t RequestContextData.Builder.originatingHome(_:)(void *a1)
{
  uint64_t v3 = *(void (**)(void *))(*(void *)v1 + 664);
  id v4 = a1;
  v3(a1);

  return swift_retain();
}

void RequestContextData.Builder.originatingHome.setter(void *a1)
{
}

uint64_t RequestContextData.Builder.isUserOnActivePhoneCall(_:)()
{
  (*(void (**)(void))(*(void *)v0 + 784))();

  return swift_retain();
}

uint64_t RequestContextData.Builder.isUserOnActivePhoneCall.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_isUserOnActivePhoneCall);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t RequestContextData.Builder.positionInSession(_:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestPositionInSession?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v5, &demangling cache variable for type metadata for RequestPositionInSession?);
  (*(void (**)(char *))(*(void *)v1 + 952))(v5);
  return swift_retain();
}

uint64_t RequestContextData.Builder.positionInSession.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &OBJC_IVAR____TtCC14SiriKitRuntime18RequestContextData7Builder_positionInSession, &demangling cache variable for type metadata for RequestPositionInSession?);
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t ServiceBridgeDelegate.xpcWrapper.getter(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ServiceBridgeDelegateXPCWrapper();
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = specialized ServiceBridgeDelegateXPCWrapper.init(wrapping:)(v2, v5, a1, a2);
  swift_unknownObjectRetain();
  return v6;
}

uint64_t type metadata accessor for ServiceBridgeDelegateXPCWrapper()
{
  return self;
}

uint64_t specialized ServiceBridgeDelegateXPCWrapper.init(wrapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a2 + 16) = a1;
  *(void *)(a2 + 24) = a4;
  return a2;
}

uint64_t type metadata accessor for SharedContextServiceImpl()
{
  return self;
}

uint64_t SharedContextServiceImpl.__deallocating_deinit()
{
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for SharedContextService.fetchContext(for:includesNearbyDevices:with:) in conformance SharedContextServiceImpl()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 104))();
}

void SharedContextServiceImpl.fetchContext(for:includesNearbyDevices:with:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void **)(v4 + 16);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  v11[4] = a3;
  v11[5] = a4;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [AFServiceDeviceContext]?) -> ();
  v11[3] = &block_descriptor_24;
  Swift::String v10 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_fetchContextsFor_includesNearByDevices_completion_, isa, a2 & 1, v10);
  _Block_release(v10);
}

uint64_t ServiceBridgeDelegateXPCWrapper.fetchContexts(for:includesNearByDevices:completion:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  uint64_t v14 = one-time initialization token for shared;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v14 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v15 = static MessageBusActor.shared;
  unint64_t v16 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v15;
  *(void *)(v17 + 24) = v16;
  *(void *)(v17 + 32) = v5;
  *(void *)(v17 + 40) = a1;
  *(unsigned char *)(v17 + 48) = a2 & 1;
  *(void *)(v17 + 56) = a3;
  *(void *)(v17 + 64) = a4;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.fetchContexts(for:includesNearByDevices:completion:), v17);
  return swift_release();
}

uint64_t ConversationBridgeProcessorDelegate.fetchContexts(for:includesNearByDevices:completion:)(uint64_t a1, char a2, uint64_t (*a3)(void), uint64_t a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v10 = *(void *)(Strong + 80);
    uint64_t v11 = *(void **)(Strong + 88);
    uint64_t v12 = *(void **)(v4 + 24);
    swift_bridgeObjectRetain();
    static ServiceBridgeDelegate.fetchContextsDefault(for:includesNearByDevices:requestId:serviceHelper:completion:)(a1, a2 & 1, v10, v11, v12, (uint64_t)a3, a4);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v22 = v18;
      *(_DWORD *)uint64_t v17 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v19 = Set.description.getter();
      unint64_t v21 = v20;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v15, v16, "ConversationRequestProcessor already released, ignoring fetchContexts of %s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v18, -1, -1);
      MEMORY[0x1BA9E48C0](v17, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return a3(0);
  }
}

void static ServiceBridgeDelegate.fetchContextsDefault(for:includesNearByDevices:requestId:serviceHelper:completion:)(uint64_t a1, char a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v28 = a6;
    char v29 = a2;
    os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = a4;
    uint64_t v17 = swift_slowAlloc();
    aBlock[0] = v17;
    uint64_t v26 = a7;
    *(_DWORD *)os_log_type_t v16 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v18 = Set.description.getter();
    unint64_t v20 = v19;
    swift_bridgeObjectRelease();
    uint64_t v21 = v18;
    a6 = v28;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v20, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v14, v15, "Trying to fetch context for keys: %s", v16, 0xCu);
    swift_arrayDestroy();
    uint64_t v22 = v17;
    a4 = v27;
    MEMORY[0x1BA9E48C0](v22, -1, -1);
    uint64_t v23 = v16;
    a2 = v29;
    MEMORY[0x1BA9E48C0](v23, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (objc_msgSend(a5, sel_respondsToSelector_, sel_fetchContextsForKeys_forRequestID_includesNearbyDevices_completion_, v26))
  {
    swift_unknownObjectRetain();
    v24.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
    if (a4) {
      a4 = (void *)MEMORY[0x1BA9E2DD0](a3, a4);
    }
    aBlock[4] = a6;
    aBlock[5] = a7;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed [AFServiceDeviceContext]?) -> ();
    aBlock[3] = (uint64_t)&block_descriptor_9_0;
    uint64_t v25 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(a5, sel_fetchContextsForKeys_forRequestID_includesNearbyDevices_completion_, v24.super.isa, a4, a2 & 1, v25);
    _Block_release(v25);
    swift_unknownObjectRelease();
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [AFServiceDeviceContext]?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  if (a2)
  {
    type metadata accessor for AFServiceDeviceContext();
    uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v3(v2);
  swift_release();

  return swift_bridgeObjectRelease();
}

unint64_t type metadata accessor for AFServiceDeviceContext()
{
  unint64_t result = lazy cache variable for type metadata for AFServiceDeviceContext;
  if (!lazy cache variable for type metadata for AFServiceDeviceContext)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AFServiceDeviceContext);
  }
  return result;
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSArray?) -> ()(uint64_t a1)
{
  thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSArray?) -> ()(a1, *(void *)(v1 + 16));
}

void thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSArray?) -> ()(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for AFServiceDeviceContext);
    v3.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else
  {
    v3.super.Class isa = 0;
  }
  Class isa = v3.super.isa;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [AFServiceDeviceContext]?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  NSArray v3 = *(void (**)(uint64_t))(a1 + 32);
  if (a2)
  {
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for AFServiceDeviceContext);
    uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v3(v2);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of DecisionEngineResponse(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void *initializeWithCopy for RemoteConversationTurnData(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = *(void **)((char *)a2 + v15);
  *(void *)((char *)a1 + v15) = v17;
  uint64_t v18 = (char *)a1 + v16;
  unint64_t v19 = (char *)a2 + v16;
  id v20 = v17;
  if (v13(v19, 1, v11))
  {
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v18, v19, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v18, 0, 1, v11);
  }
  uint64_t v22 = a3[10];
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  *((unsigned char *)a1 + v22) = *((unsigned char *)a2 + v22);
  uint64_t v23 = a3[11];
  uint64_t v24 = a3[12];
  uint64_t v25 = *(void **)((char *)a2 + v23);
  *(void *)((char *)a1 + v23) = v25;
  uint64_t v26 = (char *)a1 + v24;
  uint64_t v27 = (_OWORD *)((char *)a2 + v24);
  unint64_t v28 = *(void *)((char *)a2 + v24 + 8);
  swift_retain();
  id v29 = v25;
  if (v28 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v26 = *v27;
  }
  else
  {
    uint64_t v30 = *(void *)v27;
    outlined copy of Data._Representation(v30, v28);
    *(void *)uint64_t v26 = v30;
    *((void *)v26 + 1) = v28;
  }
  return a1;
}

uint64_t outlined init with take of DecisionEngineResponse(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s14SiriKitRuntime22DecisionEngineResponseVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)(uint64_t a1, uint64_t a2)
{
  v3[40] = a2;
  v3[41] = v2;
  v3[39] = a1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static MessageBusActor.shared;
  v3[42] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:), v4, 0);
}

uint64_t specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = *v4;
  *(void *)(v6 + 192) = v3;
  *(unsigned char *)(v6 + 184) = a3;
  *(void *)(v6 + 168) = a1;
  *(void *)(v6 + 176) = a2;
  *(void *)(v6 + 160) = v4;
  *(void *)(v6 + 376) = a1;
  *(void *)(v6 + 384) = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v7 = *(void *)(v6 + 336);
    uint64_t v8 = specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
  }
  else
  {
    uint64_t v9 = *(void *)(v6 + 336);
    swift_release();
    *(unsigned char *)(v6 + 440) = a3;
    uint64_t v8 = specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    uint64_t v7 = v9;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v11;

  uint64_t v6 = *v4;
  *(void *)(v6 + 232) = v3;
  *(unsigned char *)(v6 + 224) = a3;
  *(void *)(v6 + 208) = a1;
  *(void *)(v6 + 216) = a2;
  *(void *)(v6 + 200) = v4;
  *(void *)(v6 + 424) = a1;
  *(void *)(v6 + 432) = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v7 = *(void *)(v6 + 336);
    uint64_t v8 = specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
  }
  else
  {
    uint64_t v9 = *(void *)(v6 + 336);
    swift_release();
    *(unsigned char *)(v6 + 441) = a3;
    uint64_t v8 = specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    uint64_t v7 = v9;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

uint64_t specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)(uint64_t a1, char a2)
{
  uint64_t v5 = *v3;
  *(void *)(v5 + 296) = a1;
  *(void *)(v5 + 304) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v6 = *(void *)(v5 + 256);
    uint64_t v7 = specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
  }
  else
  {
    uint64_t v8 = *(void *)(v5 + 256);
    swift_release();
    *(unsigned char *)(v5 + 360) = a2;
    uint64_t v7 = specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    uint64_t v6 = v8;
  }
  return MEMORY[0x1F4188298](v7, v6, 0);
}

{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v10;

  uint64_t v5 = *v3;
  *(void *)(v5 + 344) = a1;
  *(void *)(v5 + 352) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v6 = *(void *)(v5 + 256);
    uint64_t v7 = specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
  }
  else
  {
    uint64_t v8 = *(void *)(v5 + 256);
    swift_release();
    *(unsigned char *)(v5 + 361) = a2;
    uint64_t v7 = specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    uint64_t v6 = v8;
  }
  return MEMORY[0x1F4188298](v7, v6, 0);
}

uint64_t specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[30] = a3;
  v4[31] = v3;
  v4[29] = a2;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = static MessageBusActor.shared;
  v4[32] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:), v5, 0);
}

uint64_t specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)()
{
  int v1 = *(unsigned __int8 *)(v0 + 361);
  swift_release();
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 312);
    swift_willThrow();

    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void **)(v0 + 312);
    swift_unknownObjectRelease();
  }
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  unsigned char *v38;
  unsigned char *v39;
  uint64_t (*v40)(void);
  char *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;

  uint64_t v43 = v0;
  int v1 = (void *)v0[31];
  uint64_t v2 = (void *)v1[2];
  v0[33] = v2;
  if (v2)
  {
    uint64_t v4 = v0[29];
    uint64_t v3 = v0[30];
    uint64_t v5 = v1[3];
    v0[34] = v5;
    uint64_t v6 = (void *)swift_allocObject();
    v0[35] = v6;
    v6[2] = v4;
    v6[3] = v3;
    v6[4] = v2;
    v6[5] = v5;
    outlined copy of SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection?(v2);
    Swift::String v41 = (char *)&async function pointer to specialized InterruptibleTaskManager.perform<A>(_:)
        + async function pointer to specialized InterruptibleTaskManager.perform<A>(_:);
    swift_retain();
    uint64_t v7 = v2;
    swift_unknownObjectRetain();
    uint64_t v8 = (void *)swift_task_alloc();
    v0[36] = v8;
    *uint64_t v8 = v0;
    v8[1] = specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    uint64_t v9 = &async function pointer to partial apply for specialized closure #1 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    uint64_t v10 = v6;
LABEL_3:
    return ((uint64_t (*)(void *, void *))v41)(v9, v10);
  }
  uint64_t v12 = v1[10];
  uint64_t v13 = v1[11];
  __swift_project_boxed_opaque_existential_1(v1 + 7, v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  v0[39] = v14;
  if (v14)
  {
    uint64_t v15 = (void *)v14;
    if (one-time initialization token for xpcInterface != -1) {
      swift_once();
    }
    objc_msgSend(v15, sel_setRemoteObjectInterface_, static SharedFlowPluginXPCServer.xpcInterface);
    uint64_t v16 = swift_allocObject();
    swift_weakInit();
    v0[12] = partial apply for closure #2 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    v0[13] = v16;
    v0[8] = MEMORY[0x1E4F143A8];
    v0[9] = 1107296256;
    v0[10] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v0[11] = &block_descriptor_71;
    uint64_t v17 = _Block_copy(v0 + 8);
    swift_release();
    objc_msgSend(v15, sel_setInvalidationHandler_, v17);
    _Block_release(v17);
    uint64_t v18 = swift_allocObject();
    swift_weakInit();
    v0[6] = partial apply for closure #3 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    v0[7] = v18;
    v0[2] = MEMORY[0x1E4F143A8];
    v0[3] = 1107296256;
    v0[4] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v0[5] = &block_descriptor_76;
    unint64_t v19 = _Block_copy(v0 + 2);
    swift_release();
    objc_msgSend(v15, sel_setInterruptionHandler_, v19);
    _Block_release(v19);
    objc_msgSend(v15, sel_resume);
    v0[18] = closure #4 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    v0[19] = 0;
    v0[14] = MEMORY[0x1E4F143A8];
    v0[15] = 1107296256;
    v0[16] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
    v0[17] = &block_descriptor_79;
    id v20 = _Block_copy(v0 + 14);
    uint64_t v21 = objc_msgSend(v15, sel_remoteObjectProxyWithErrorHandler_, v20);
    _Block_release(v20);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedFlowPluginServiceXPC);
    if (swift_dynamicCast())
    {
      uint64_t v22 = v0[28];
      v0[40] = v22;
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Logger.executor);
      uint64_t v24 = Logger.logObject.getter();
      uint64_t v25 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v26 = 0;
        _os_log_impl(&dword_1B9C64000, v24, v25, "Connection set up completed", v26, 2u);
        MEMORY[0x1BA9E48C0](v26, -1, -1);
      }
      uint64_t v27 = v0[30];
      unint64_t v28 = v0[29];

      id v29 = (void *)v1[2];
      v1[2] = v15;
      v1[3] = v22;
      uint64_t v30 = v15;
      swift_unknownObjectRetain();
      outlined consume of SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection?(v29);
      uint64_t v31 = (void *)swift_allocObject();
      v0[41] = v31;
      v31[2] = v28;
      v31[3] = v27;
      v31[4] = v22;
      Swift::String v41 = (char *)&async function pointer to specialized InterruptibleTaskManager.perform<A>(_:)
          + async function pointer to specialized InterruptibleTaskManager.perform<A>(_:);
      swift_retain();
      swift_unknownObjectRetain();
      uint64_t v32 = (void *)swift_task_alloc();
      v0[42] = v32;
      *uint64_t v32 = v0;
      v32[1] = specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
      uint64_t v9 = &async function pointer to partial apply for specialized closure #5 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
      uint64_t v10 = v31;
      goto LABEL_3;
    }
    swift_release();
    lazy protocol witness table accessor for type SharedFlowPluginServiceConnectionError and conformance SharedFlowPluginServiceConnectionError();
    swift_allocError();
    *uint64_t v39 = 1;
    swift_willThrow();
  }
  else
  {
    swift_release();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.executor);
    uint64_t v34 = Logger.logObject.getter();
    uint64_t v35 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      uint64_t v42 = v37;
      *(_DWORD *)uint64_t v36 = 136315138;
      v0[27] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003ALL, 0x80000001BA065950, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v34, v35, "%s", v36, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v37, -1, -1);
      MEMORY[0x1BA9E48C0](v36, -1, -1);
    }

    lazy protocol witness table accessor for type SharedFlowPluginServiceConnectionError and conformance SharedFlowPluginServiceConnectionError();
    swift_allocError();
    *uint64_t v38 = 0;
    swift_willThrow();
  }
  uint64_t v40 = (uint64_t (*)(void))v0[1];
  return v40();
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  unsigned char *v38;
  unsigned char *v39;
  uint64_t (*v40)(void);
  char *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;

  uint64_t v43 = v0;
  int v1 = (void *)v0[41];
  uint64_t v2 = (void *)v1[2];
  v0[43] = v2;
  if (v2)
  {
    uint64_t v4 = v0[39];
    uint64_t v3 = v0[40];
    uint64_t v5 = v1[3];
    v0[44] = v5;
    uint64_t v6 = (void *)swift_allocObject();
    v0[45] = v6;
    v6[2] = v4;
    v6[3] = v3;
    v6[4] = v2;
    v6[5] = v5;
    outlined copy of SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection?(v2);
    Swift::String v41 = (char *)&async function pointer to specialized InterruptibleTaskManager.perform<A>(_:)
        + async function pointer to specialized InterruptibleTaskManager.perform<A>(_:);
    swift_retain();
    uint64_t v7 = v2;
    swift_unknownObjectRetain();
    uint64_t v8 = (void *)swift_task_alloc();
    v0[46] = v8;
    *uint64_t v8 = v0;
    v8[1] = specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    uint64_t v9 = &async function pointer to partial apply for specialized closure #1 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    uint64_t v10 = v6;
LABEL_3:
    return ((uint64_t (*)(void *, void *))v41)(v9, v10);
  }
  uint64_t v12 = v1[10];
  uint64_t v13 = v1[11];
  __swift_project_boxed_opaque_existential_1(v1 + 7, v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
  v0[49] = v14;
  if (v14)
  {
    uint64_t v15 = (void *)v14;
    if (one-time initialization token for xpcInterface != -1) {
      swift_once();
    }
    objc_msgSend(v15, sel_setRemoteObjectInterface_, static SharedFlowPluginXPCServer.xpcInterface);
    uint64_t v16 = swift_allocObject();
    swift_weakInit();
    v0[12] = partial apply for closure #2 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    v0[13] = v16;
    v0[8] = MEMORY[0x1E4F143A8];
    v0[9] = 1107296256;
    v0[10] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v0[11] = &block_descriptor_7;
    uint64_t v17 = _Block_copy(v0 + 8);
    swift_release();
    objc_msgSend(v15, sel_setInvalidationHandler_, v17);
    _Block_release(v17);
    uint64_t v18 = swift_allocObject();
    swift_weakInit();
    v0[6] = partial apply for closure #3 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    v0[7] = v18;
    v0[2] = MEMORY[0x1E4F143A8];
    v0[3] = 1107296256;
    v0[4] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v0[5] = &block_descriptor_25;
    unint64_t v19 = _Block_copy(v0 + 2);
    swift_release();
    objc_msgSend(v15, sel_setInterruptionHandler_, v19);
    _Block_release(v19);
    objc_msgSend(v15, sel_resume);
    v0[18] = closure #4 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    v0[19] = 0;
    v0[14] = MEMORY[0x1E4F143A8];
    v0[15] = 1107296256;
    v0[16] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
    v0[17] = &block_descriptor_28;
    id v20 = _Block_copy(v0 + 14);
    uint64_t v21 = objc_msgSend(v15, sel_remoteObjectProxyWithErrorHandler_, v20);
    _Block_release(v20);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SharedFlowPluginServiceXPC);
    if (swift_dynamicCast())
    {
      uint64_t v22 = v0[38];
      v0[50] = v22;
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Logger.executor);
      uint64_t v24 = Logger.logObject.getter();
      uint64_t v25 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v26 = 0;
        _os_log_impl(&dword_1B9C64000, v24, v25, "Connection set up completed", v26, 2u);
        MEMORY[0x1BA9E48C0](v26, -1, -1);
      }
      uint64_t v27 = v0[40];
      unint64_t v28 = v0[39];

      id v29 = (void *)v1[2];
      v1[2] = v15;
      v1[3] = v22;
      uint64_t v30 = v15;
      swift_unknownObjectRetain();
      outlined consume of SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection?(v29);
      uint64_t v31 = (void *)swift_allocObject();
      v0[51] = v31;
      v31[2] = v28;
      v31[3] = v27;
      v31[4] = v22;
      Swift::String v41 = (char *)&async function pointer to specialized InterruptibleTaskManager.perform<A>(_:)
          + async function pointer to specialized InterruptibleTaskManager.perform<A>(_:);
      swift_retain();
      swift_unknownObjectRetain();
      uint64_t v32 = (void *)swift_task_alloc();
      v0[52] = v32;
      *uint64_t v32 = v0;
      v32[1] = specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
      uint64_t v9 = &async function pointer to partial apply for specialized closure #5 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
      uint64_t v10 = v31;
      goto LABEL_3;
    }
    swift_release();
    lazy protocol witness table accessor for type SharedFlowPluginServiceConnectionError and conformance SharedFlowPluginServiceConnectionError();
    swift_allocError();
    *uint64_t v39 = 1;
    swift_willThrow();
  }
  else
  {
    swift_release();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.executor);
    uint64_t v34 = Logger.logObject.getter();
    uint64_t v35 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      uint64_t v42 = v37;
      *(_DWORD *)uint64_t v36 = 136315138;
      v0[37] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000003ALL, 0x80000001BA065950, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v34, v35, "%s", v36, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v37, -1, -1);
      MEMORY[0x1BA9E48C0](v36, -1, -1);
    }

    lazy protocol witness table accessor for type SharedFlowPluginServiceConnectionError and conformance SharedFlowPluginServiceConnectionError();
    swift_allocError();
    *uint64_t v38 = 0;
    swift_willThrow();
  }
  uint64_t v40 = (uint64_t (*)(void))v0[1];
  return v40();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  int v1 = *(void **)(v0 + 344);
  swift_release();
  swift_release();
  swift_unknownObjectRelease();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  int v1 = *(void **)(v0 + 264);
  swift_release();
  swift_release();
  swift_unknownObjectRelease();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  void *v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;

  int v1 = *(unsigned __int8 *)(v0 + 441);
  swift_release();
  uint64_t v2 = *(void *)(v0 + 424);
  if (v1)
  {
    uint64_t v3 = *(void **)(v0 + 392);
    swift_willThrow();

    swift_unknownObjectRelease();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 216);
    uint64_t v7 = *(void **)(v0 + 392);
    swift_unknownObjectRelease();

    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v8(v2, v6);
  }
}

{
  uint64_t v0;
  int v1;
  void *v2;
  uint64_t (*v3)(void);
  void *v4;
  uint64_t v6;

  int v1 = *(unsigned __int8 *)(v0 + 360);
  swift_release();
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 264);
    swift_willThrow();

    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void **)(v0 + 264);
    swift_unknownObjectRelease();
  }
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  int v1 = *(void **)(v0 + 312);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  void *v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;

  int v1 = *(unsigned __int8 *)(v0 + 440);
  swift_release();
  uint64_t v2 = *(void *)(v0 + 376);
  if (v1)
  {
    uint64_t v3 = *(void **)(v0 + 344);
    swift_willThrow();

    swift_unknownObjectRelease();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 176);
    uint64_t v7 = *(void **)(v0 + 344);
    swift_unknownObjectRelease();

    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v8(v2, v6);
  }
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  int v1 = *(void **)(v0 + 392);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

void *outlined copy of SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection?(void *result)
{
  if (result)
  {
    id v1 = result;
    return (void *)swift_unknownObjectRetain();
  }
  return result;
}

uint64_t specialized InterruptibleTaskManager.perform<A>(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3[16];
  uint64_t v5 = *(void *)(v4 + 40);
  v3[19] = v5;
  if (v5 == -1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = v3[17];
    uint64_t v7 = v3[14];
    uint64_t v8 = v3[15];
    *(void *)(v4 + 40) = v5 + 1;
    uint64_t v9 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v6, 1, 1, v9);
    uint64_t v10 = static MessageBusActor.shared;
    uint64_t v11 = lazy protocol witness table accessor for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
    uint64_t v12 = (void *)swift_allocObject();
    v12[2] = v10;
    uint64_t v12[3] = v11;
    v12[4] = v4;
    v12[5] = v5;
    v12[6] = v7;
    v12[7] = v8;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v13 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime23InterruptibleTaskResultOyAG18RemoteConversation_pSgG_Tgm5(v6, (uint64_t)&async function pointer to partial apply for specialized closure #1 in InterruptibleTaskManager.perform<A>(_:), (uint64_t)v12);
    v3[20] = v13;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v4;
    *(void *)(v14 + 24) = v13;
    swift_beginAccess();
    swift_retain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *(void *)(v4 + 32);
    *(void *)(v4 + 32) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for specialized closure #2 in InterruptibleTaskManager.perform<A>(_:), v14, v5, isUniquelyReferenced_nonNull_native);
    *(void *)(v4 + 32) = v18;
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v16 = (void *)swift_task_alloc();
    v3[21] = v16;
    a3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InterruptibleTaskResult<RemoteConversation?>);
    *uint64_t v16 = v3;
    v16[1] = specialized InterruptibleTaskManager.perform<A>(_:);
    a1 = v3 + 11;
    a2 = v13;
  }
  return MEMORY[0x1F4187DC0](a1, a2, a3);
}

{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  void *v16;
  uint64_t v18;
  uint64_t v19;

  uint64_t v4 = v3[15];
  uint64_t v5 = *(void *)(v4 + 40);
  v3[18] = v5;
  if (v5 == -1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = v3[16];
    uint64_t v7 = v3[13];
    uint64_t v8 = v3[14];
    *(void *)(v4 + 40) = v5 + 1;
    uint64_t v9 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v6, 1, 1, v9);
    uint64_t v10 = static MessageBusActor.shared;
    uint64_t v11 = lazy protocol witness table accessor for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
    uint64_t v12 = (void *)swift_allocObject();
    v12[2] = v10;
    uint64_t v12[3] = v11;
    v12[4] = v4;
    v12[5] = v5;
    v12[6] = v7;
    v12[7] = v8;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v13 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime23InterruptibleTaskResultOyytG_Tgm5(v6, (uint64_t)&async function pointer to partial apply for specialized closure #1 in InterruptibleTaskManager.perform<A>(_:), (uint64_t)v12);
    v3[19] = v13;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v4;
    *(void *)(v14 + 24) = v13;
    swift_beginAccess();
    swift_retain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *(void *)(v4 + 32);
    *(void *)(v4 + 32) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for specialized closure #2 in InterruptibleTaskManager.perform<A>(_:), v14, v5, isUniquelyReferenced_nonNull_native);
    *(void *)(v4 + 32) = v18;
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v16 = (void *)swift_task_alloc();
    v3[20] = v16;
    a3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for InterruptibleTaskResult<()>);
    *uint64_t v16 = v3;
    v16[1] = specialized InterruptibleTaskManager.perform<A>(_:);
    a1 = v3 + 11;
    a2 = v13;
  }
  return MEMORY[0x1F4187DC0](a1, a2, a3);
}

uint64_t specialized InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2)
{
  v3[14] = a2;
  v3[15] = v2;
  v3[13] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[16] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static MessageBusActor.shared;
  v3[17] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](specialized InterruptibleTaskManager.perform<A>(_:), v4, 0);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  v3[15] = a2;
  v3[16] = v2;
  v3[14] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[17] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static MessageBusActor.shared;
  v3[18] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](specialized InterruptibleTaskManager.perform<A>(_:), v4, 0);
}

uint64_t specialized InterruptibleTaskManager.perform<A>(_:)()
{
  swift_release();
  swift_beginAccess();
  uint64_t v1 = specialized Dictionary._Variant.removeValue(forKey:)();
  swift_endAccess();
  swift_release();
  if (v1) {
    _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(v1);
  }
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 96);
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v4(v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 144);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](specialized InterruptibleTaskManager.perform<A>(_:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;

  swift_release();
  swift_beginAccess();
  uint64_t v1 = specialized Dictionary._Variant.removeValue(forKey:)();
  swift_endAccess();
  swift_release();
  if (v1) {
    _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(v1);
  }
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 104);
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8);
  return v5(v3, v2, v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](specialized InterruptibleTaskManager.perform<A>(_:), v1, 0);
}

void specialized closure #1 in closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>);
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, a1, v9);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v11(v8, 0, 1, v9);
  specialized ManagedContinuation.updateState(continuation:result:)((uint64_t)v8, 0, 0, 0xFFu);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
  if (static Task<>.isCancelled.getter())
  {
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler((unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, MEMORY[0x1E4FBCF50]);
    uint64_t v12 = (void *)swift_allocError();
    CancellationError.init()();
    v11(v8, 1, 1, v9);
    id v13 = v12;
    specialized ManagedContinuation.updateState(continuation:result:)((uint64_t)v8, v12, 0, 1u);

    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
  }
  else
  {
    a3(a2);
  }
}

void specialized closure #1 in closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t *a5, uint64_t *a6, void (*a7)(char *, void *, uint64_t))
{
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(a6);
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v15, a1, v16);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  v18(v15, 0, 1, v16);
  a7(v15, 0, 255);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, a5);
  if (static Task<>.isCancelled.getter())
  {
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler((unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, MEMORY[0x1E4FBCF50]);
    uint64_t v19 = (void *)swift_allocError();
    CancellationError.init()();
    v18(v15, 1, 1, v16);
    id v20 = v19;
    a7(v15, v19, 1);

    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, a5);
  }
  else
  {
    a3(a2);
  }
}

uint64_t partial apply for closure #1 in SharedFlowPluginServiceClient.startTurn(turnData:bridge:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(type metadata accessor for RemoteConversationTurnData(0) - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = v2 + v7;
  uint64_t v9 = (uint64_t *)(v2 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  *uint64_t v12 = v3;
  v12[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in SharedFlowPluginServiceClient.startTurn(turnData:bridge:)(a1, a2, v8, v10, v11);
}

uint64_t closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:)()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:), 0, 0);
  }
  else
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  long long v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  uint64_t v3 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 32) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:);
  uint64_t v5 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188080](v5, v1, v1, 0, 0, &async function pointer to partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:), v2, v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in SharedFlowPluginServiceClient.startTurn(turnData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in SharedFlowPluginServiceClient.startTurn(turnData:bridge:), 0, 0);
}

uint64_t closure #1 in SharedFlowPluginServiceClient.startTurn(turnData:bridge:)()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  long long v2 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 32) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v3;
  *uint64_t v3 = v0;
  v3[1] = closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = MEMORY[0x1E4FBC848] + 8;
  return MEMORY[0x1F4188160](v4, 0, 0, 0xD00000000000001BLL, 0x80000001BA0671E0, partial apply for closure #1 in closure #1 in SharedFlowPluginServiceClient.startTurn(turnData:bridge:), v1, v5);
}

id RemoteConversationTurnData.xpcRepresentation.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v27 - v6;
  uint64_t v8 = v1[1];
  uint64_t v29 = *v1;
  uint64_t v9 = v1[3];
  uint64_t v32 = v1[2];
  uint64_t v10 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v1 + v10[6], (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v13 = v30(v7, 1, v11);
  uint64_t v31 = v9;
  swift_bridgeObjectRetain();
  uint64_t v28 = v8;
  swift_bridgeObjectRetain();
  Class isa = 0;
  if (v13 != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v11);
  }
  uint64_t v15 = *(void **)((char *)v1 + v10[7]);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v1 + v10[8], (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  int v16 = v30(v5, 1, v11);
  id v17 = v15;
  if (v16 == 1)
  {
    Class v18 = 0;
  }
  else
  {
    Class v18 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v5, v11);
  }
  uint64_t v20 = v28;
  uint64_t v19 = v29;
  id v21 = *(id *)((char *)v1 + v10[9]);
  if (v21) {
    id v21 = FlowTask.xpcRepresentation.getter();
  }
  if (*(unint64_t *)((char *)v1 + v10[12] + 8) >> 60 == 15) {
    Class v22 = 0;
  }
  else {
    Class v22 = Data._bridgeToObjectiveC()().super.isa;
  }
  char v23 = *((unsigned char *)v1 + v10[10]);
  uint64_t v24 = *(void **)((char *)v1 + v10[11]);
  id v25 = v24;
  return specialized ConversationTurnDataXPC.__allocating_init(executionRequestId:rootRequestId:sessionId:requestContextData:conversationLoggingId:flowTask:scopedRRData:invokedByPeerToPeerEORR:proxiedRequestContext:)(v19, v20, v32, v31, (uint64_t)isa, (uint64_t)v17, (uint64_t)v18, (uint64_t)v21, (uint64_t)v22, v23, (uint64_t)v24);
}

id FlowTask.xpcRepresentation.getter()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 24);
  char v7 = *(unsigned char *)(v0 + 32);
  int v15 = *(unsigned __int8 *)(v0 + 33);
  uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v8(v4, v0 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime, v1);
  uint64_t v9 = (objc_class *)type metadata accessor for FlowTaskXPC(0);
  uint64_t v10 = objc_allocWithZone(v9);
  uint64_t v11 = &v10[OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_id];
  *uint64_t v11 = v6;
  v11[1] = v5;
  v10[OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_state] = v7;
  v10[OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_isClientInitiated] = v15;
  v8(&v10[OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_creationTime], (uint64_t)v4, v1);
  v16.receiver = v10;
  v16.super_class = v9;
  swift_bridgeObjectRetain();
  id v12 = objc_msgSendSuper2(&v16, sel_init);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v12;
}

uint64_t type metadata accessor for FlowTaskXPC(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for FlowTaskXPC);
}

uint64_t type metadata accessor for ConversationTurnDataXPC()
{
  return self;
}

Swift::Void __swiftcall ConversationTurnDataXPC.encode(with:)(NSCoder with)
{
  uint64_t v3 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v1 + OBJC_IVAR___SKRConversationTurnDataXPC_executionRequestId), *(void *)(v1 + OBJC_IVAR___SKRConversationTurnDataXPC_executionRequestId + 8));
  uint64_t v4 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000012, 0x80000001BA060AC0);
  [(objc_class *)with.super.isa encodeObject:v3 forKey:v4];

  if (*(void *)(v1 + OBJC_IVAR___SKRConversationTurnDataXPC_rootRequestId + 8)) {
    uint64_t v5 = MEMORY[0x1BA9E2DD0](*(void *)(v1 + OBJC_IVAR___SKRConversationTurnDataXPC_rootRequestId));
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)MEMORY[0x1BA9E2DD0](0x75716552746F6F72, 0xED00006449747365);
  [(objc_class *)with.super.isa encodeObject:v5 forKey:v6];
  swift_unknownObjectRelease();

  uint64_t v7 = *(void *)(v1 + OBJC_IVAR___SKRConversationTurnDataXPC_requestContextData);
  uint64_t v8 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000012, 0x80000001BA060ED0);
  [(objc_class *)with.super.isa encodeObject:v7 forKey:v8];

  uint64_t v9 = *(void *)(v1 + OBJC_IVAR___SKRConversationTurnDataXPC_sessionId);
  uint64_t v10 = (void *)MEMORY[0x1BA9E2DD0](0x496E6F6973736573, 0xE900000000000064);
  [(objc_class *)with.super.isa encodeObject:v9 forKey:v10];

  uint64_t v11 = *(void *)(v1 + OBJC_IVAR___SKRConversationTurnDataXPC_conversationLoggingId);
  id v12 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000015, 0x80000001BA060EF0);
  [(objc_class *)with.super.isa encodeObject:v11 forKey:v12];

  uint64_t v13 = *(void *)(v1 + OBJC_IVAR___SKRConversationTurnDataXPC_flowTask);
  uint64_t v14 = (void *)MEMORY[0x1BA9E2DD0](0x6B736154776F6C66, 0xE800000000000000);
  [(objc_class *)with.super.isa encodeObject:v13 forKey:v14];

  uint64_t v15 = *(void *)(v1 + OBJC_IVAR___SKRConversationTurnDataXPC_scopedRRData);
  objc_super v16 = (void *)MEMORY[0x1BA9E2DD0](0x52526465706F6373, 0xEC00000061746144);
  [(objc_class *)with.super.isa encodeObject:v15 forKey:v16];

  uint64_t v17 = *(unsigned __int8 *)(v1 + OBJC_IVAR___SKRConversationTurnDataXPC_invokedByPeerToPeerEORR);
  Class v18 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000017, 0x80000001BA060F10);
  [(objc_class *)with.super.isa encodeBool:v17 forKey:v18];

  uint64_t v19 = *(void *)(v1 + OBJC_IVAR___SKRConversationTurnDataXPC_proxiedRequestContext);
  id v20 = (id)MEMORY[0x1BA9E2DD0](0xD000000000000015, 0x80000001BA060F30);
  [(objc_class *)with.super.isa encodeObject:v19 forKey:v20];
}

Swift::Void __swiftcall RequestContextData.encode(with:)(NSCoder with)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DeviceRestrictions();
  uint64_t v128 = *(void *)(v4 - 8);
  uint64_t v129 = v4;
  MEMORY[0x1F4188790](v4);
  id v127 = (char *)&v124 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v132 = (uint64_t)&v124 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DateInterval();
  uint64_t v133 = *(void **)(v8 - 8);
  Swift::String v134 = (objc_class *)v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v126 = (char *)&v124 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  MEMORY[0x1F4188790](v10 - 8);
  id v12 = (char *)&v124 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AudioDestination();
  uint64_t v130 = *(void *)(v13 - 8);
  uint64_t v131 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v125 = (char *)&v124 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v124 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for AudioSource();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  id v21 = (char *)&v124 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  Class v22 = (void *)MEMORY[0x1BA9E2DD0](*(void *)((char *)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_inputOrigin), *(void *)((char *)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_inputOrigin + 8));
  char v23 = (void *)MEMORY[0x1BA9E2DD0](0x69724F7475706E69, 0xEB000000006E6967);
  [(objc_class *)with.super.isa encodeObject:v22 forKey:v23];

  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioSource, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
    uint64_t v24 = &off_1E61F1000;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
    uint64_t v25 = AudioSource.aceValue.getter();
    uint64_t v26 = (void *)MEMORY[0x1BA9E2DD0](v25);
    swift_bridgeObjectRelease();
    uint64_t v27 = (void *)MEMORY[0x1BA9E2DD0](0x756F536F69647561, 0xEB00000000656372);
    [(objc_class *)with.super.isa encodeObject:v26 forKey:v27];

    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    uint64_t v24 = &off_1E61F1000;
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioDestination, (uint64_t)v12, &demangling cache variable for type metadata for AudioDestination?);
  uint64_t v29 = v130;
  uint64_t v28 = v131;
  int v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v130 + 48))(v12, 1, v131);
  uint64_t v31 = v134;
  if (v30 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for AudioDestination?);
  }
  else
  {
    uint64_t v32 = v125;
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v125, v12, v28);
    uint64_t v33 = AudioDestination.aceValue.getter();
    uint64_t v34 = (void *)MEMORY[0x1BA9E2DD0](v33);
    swift_bridgeObjectRelease();
    uint64_t v35 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000010, 0x80000001BA06C1B0);
    objc_msgSend(with.super.isa, (SEL)v24[225], v34, v35);

    (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v28);
  }
  uint64_t v36 = ResponseMode.aceValue.getter();
  uint64_t v37 = (void *)MEMORY[0x1BA9E2DD0](v36);
  swift_bridgeObjectRelease();
  uint64_t v38 = (void *)MEMORY[0x1BA9E2DD0](0x65736E6F70736572, 0xEC00000065646F4DLL);
  objc_msgSend(with.super.isa, (SEL)v24[225], v37, v38);

  uint64_t v39 = *((unsigned __int8 *)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isEyesFree);
  uint64_t v40 = (void *)MEMORY[0x1BA9E2DD0](0x7246736579457369, 0xEA00000000006565);
  [(objc_class *)with.super.isa encodeBool:v39 forKey:v40];

  uint64_t v41 = *((unsigned __int8 *)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDirectAction);
  uint64_t v42 = (void *)MEMORY[0x1BA9E2DD0](0x7463657269447369, 0xEE006E6F69746341);
  [(objc_class *)with.super.isa encodeBool:v41 forKey:v42];

  uint64_t v43 = *((unsigned __int8 *)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isVoiceTriggerEnabled);
  uint64_t v44 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000015, 0x80000001BA060FF0);
  [(objc_class *)with.super.isa encodeBool:v43 forKey:v44];

  uint64_t v45 = *((unsigned __int8 *)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTextToSpeechEnabled);
  uint64_t v46 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000015, 0x80000001BA061010);
  [(objc_class *)with.super.isa encodeBool:v45 forKey:v46];

  uint64_t v47 = *(void **)((char *)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_peerInfo);
  if (v47)
  {
    id v48 = v47;
    uint64_t v49 = (void *)MEMORY[0x1BA9E2DD0](0x6F666E4972656570, 0xE800000000000000);
    objc_msgSend(with.super.isa, (SEL)v24[225], v48, v49);
  }
  uint64_t v50 = *(void **)((char *)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_endpointInfo);
  if (v50)
  {
    id v51 = v50;
    uint64_t v52 = (void *)MEMORY[0x1BA9E2DD0](0x746E696F70646E65, 0xEC0000006F666E49);
    objc_msgSend(with.super.isa, (SEL)v24[225], v51, v52);
  }
  Swift::String v53 = *(void **)((char *)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_instanceInfo);
  if (v53)
  {
    id v54 = v53;
    uint64_t v55 = (void *)MEMORY[0x1BA9E2DD0](0x65636E6174736E69, 0xEC0000006F666E49);
    objc_msgSend(with.super.isa, (SEL)v24[225], v54, v55);
  }
  uint64_t v56 = *(void *)((char *)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_bargeInModes);
  uint64_t v57 = *(void *)(v56 + 16);
  uint64_t v58 = MEMORY[0x1E4FBC860];
  if (v57)
  {
    uint64_t v59 = v2;
    uint64_t v135 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    Swift::String v60 = (uint64_t *)(v56 + 40);
    do
    {
      uint64_t v61 = *(v60 - 1);
      uint64_t v62 = *v60;
      swift_bridgeObjectRetain();
      MEMORY[0x1BA9E2DD0](v61, v62);
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v60 += 2;
      --v57;
    }
    while (v57);
    swift_bridgeObjectRelease();
    uint64_t v2 = v59;
  }
  uint64_t v131 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v64 = (void *)MEMORY[0x1BA9E2DD0](0x4D6E496567726162, 0xEC0000007365646FLL);
  [(objc_class *)with.super.isa encodeObject:isa forKey:v64];

  uint64_t v65 = v132;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_approximatePreviousTTSInterval, v132, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  unint64_t v66 = v133;
  if (((unsigned int (*)(uint64_t, uint64_t, objc_class *))v133[6])(v65, 1, v31) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v65, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  }
  else
  {
    unint64_t v67 = v126;
    ((void (*)(char *, uint64_t, objc_class *))v66[4])(v126, v65, v31);
    Swift::String v68 = v66;
    Class v69 = DateInterval._bridgeToObjectiveC()().super.isa;
    uint64_t v70 = (void *)MEMORY[0x1BA9E2DD0](0xD00000000000001ELL, 0x80000001BA06C1D0);
    [(objc_class *)with.super.isa encodeObject:v69 forKey:v70];

    ((void (*)(char *, objc_class *))v68[1])(v67, v31);
  }
  uint64_t v71 = Restrictions.restrictedCommands.getter();
  uint64_t v72 = *(void *)(v71 + 16);
  if (v72)
  {
    uint64_t v133 = v2;
    Swift::String v134 = with.super.isa;
    uint64_t v135 = v58;
    specialized ContiguousArray.reserveCapacity(_:)();
    int64_t v73 = specialized Set.startIndex.getter(v71);
    int v75 = v74;
    char v77 = v76 & 1;
    while ((v73 & 0x8000000000000000) == 0 && v73 < 1 << *(unsigned char *)(v71 + 32))
    {
      if (((*(void *)(v71 + 56 + (((unint64_t)v73 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v73) & 1) == 0) {
        goto LABEL_35;
      }
      if (*(_DWORD *)(v71 + 36) != v75) {
        goto LABEL_36;
      }
      uint64_t v78 = (uint64_t *)(*(void *)(v71 + 48) + 16 * v73);
      uint64_t v79 = *v78;
      uint64_t v80 = v78[1];
      swift_bridgeObjectRetain();
      MEMORY[0x1BA9E2DD0](v79, v80);
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      int64_t v81 = specialized _NativeSet.index(after:)(v73, v75, v77 & 1, v71);
      int64_t v73 = v81;
      int v75 = v82;
      char v77 = v83 & 1;
      if (!--v72)
      {
        outlined consume of Set<String>.Index._Variant(v81, v82, v83 & 1);
        swift_bridgeObjectRelease();
        uint64_t v2 = v133;
        with.super.Class isa = v134;
        goto LABEL_29;
      }
    }
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_29:
    Class v84 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    unint64_t v85 = (void *)MEMORY[0x1BA9E2DD0](0x7463697274736572, 0xEC000000736E6F69);
    [(objc_class *)with.super.isa encodeObject:v84 forKey:v85];

    Swift::String v86 = v127;
    (*(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x150))();
    uint64_t v87 = DeviceRestrictions.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v128 + 8))(v86, v129);
    uint64_t v88 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000012, 0x80000001BA06C1F0);
    [(objc_class *)with.super.isa encodeInteger:v87 forKey:v88];

    Swift::String v89 = *(void **)((char *)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_originatingHome);
    if (v89)
    {
      id v90 = v89;
      uint64_t v91 = (void *)MEMORY[0x1BA9E2DD0](0x74616E696769726FLL, 0xEF656D6F48676E69);
      [(objc_class *)with.super.isa encodeObject:v90 forKey:v91];
    }
    uint64_t v92 = (void *)MEMORY[0x1BA9E2DD0](*(void *)((char *)v2+ OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_currentDeviceAssistantId), *(void *)((char *)v2+ OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_currentDeviceAssistantId+ 8));
    unint64_t v93 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000018, 0x80000001BA06C210);
    [(objc_class *)with.super.isa encodeObject:v92 forKey:v93];

    uint64_t v94 = *((unsigned __int8 *)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTriggerlessFollowup);
    Swift::String v95 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000015, 0x80000001BA063080);
    [(objc_class *)with.super.isa encodeBool:v94 forKey:v95];

    uint64_t v96 = *((unsigned __int8 *)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_didPreviouslyFallbackToServer);
    v97 = (void *)MEMORY[0x1BA9E2DD0](0xD00000000000001DLL, 0x80000001BA067F60);
    [(objc_class *)with.super.isa encodeBool:v96 forKey:v97];

    uint64_t v98 = *((unsigned __int8 *)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSpeechRequest);
    uint64_t v99 = (void *)MEMORY[0x1BA9E2DD0](0x6863656570537369, 0xEF74736575716552);
    [(objc_class *)with.super.isa encodeBool:v98 forKey:v99];

    uint64_t v100 = *((unsigned __int8 *)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isUserOnActivePhoneCall);
    uint64_t v101 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000017, 0x80000001BA069B20);
    [(objc_class *)with.super.isa encodeBool:v100 forKey:v101];

    if (*(void *)((char *)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceTriggerEventInfo))
    {
      Class v102 = Dictionary._bridgeToObjectiveC()().super.isa;
      char v103 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000015, 0x80000001BA06C230);
      [(objc_class *)with.super.isa encodeObject:v102 forKey:v103];
    }
    uint64_t v104 = *((unsigned __int8 *)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isRecognizeMyVoiceEnabled);
    uint64_t v105 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000019, 0x80000001BA06C250);
    [(objc_class *)with.super.isa encodeBool:v104 forKey:v105];

    uint64_t v106 = *(unsigned int *)((char *)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceAudioSessionId);
    unint64_t v107 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000013, 0x80000001BA06C270);
    [(objc_class *)with.super.isa encodeInt64:v106 forKey:v107];

    uint64_t v108 = *((unsigned __int8 *)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSystemApertureEnabled);
    uint64_t v109 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000017, 0x80000001BA06C290);
    [(objc_class *)with.super.isa encodeBool:v108 forKey:v109];

    uint64_t v110 = *((unsigned __int8 *)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isLiveActivitiesSupported);
    Swift::String v111 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000019, 0x80000001BA06C2B0);
    [(objc_class *)with.super.isa encodeBool:v110 forKey:v111];

    uint64_t v112 = *((unsigned __int8 *)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isInAmbient);
    uint64_t v113 = (void *)MEMORY[0x1BA9E2DD0](0x69626D416E497369, 0xEB00000000746E65);
    [(objc_class *)with.super.isa encodeBool:v112 forKey:v113];

    uint64_t v114 = RequestPositionInSession.rawValue.getter();
    char v115 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000011, 0x80000001BA06C2D0);
    [(objc_class *)with.super.isa encodeInt64:v114 forKey:v115];

    uint64_t v116 = *(void *)((char *)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_conjunctionInfo);
    uint64_t v117 = (void *)MEMORY[0x1BA9E2DD0](0x74636E756A6E6F63, 0xEF6F666E496E6F69);
    [(objc_class *)with.super.isa encodeObject:v116 forKey:v117];

    uint64_t v118 = *((unsigned __int8 *)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceShowingLockScreen);
    unint64_t v119 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000019, 0x80000001BA067D10);
    [(objc_class *)with.super.isa encodeBool:v118 forKey:v119];

    uint64_t v120 = *((unsigned __int8 *)v2 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceLocked);
    uint64_t v121 = MEMORY[0x1BA9E2DD0](0x6563697665447369, 0xEE0064656B636F4CLL);
    Class v122 = with.super.isa;
    Swift::String v123 = (void *)v121;
    [(objc_class *)v122 encodeBool:v120 forKey:v121];
  }
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (unint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

Swift::Void __swiftcall FlowTaskXPC.encode(with:)(NSCoder with)
{
  uint64_t v3 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_id), *(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_id + 8));
  unint64_t v4 = (void *)MEMORY[0x1BA9E2DD0](25705, 0xE200000000000000);
  [(objc_class *)with.super.isa encodeObject:v3 forKey:v4];

  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_state))
  {
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_state) == 1)
    {
      unint64_t v5 = 0xE700000000000000;
      uint64_t v6 = 0x676E696F676E6FLL;
    }
    else
    {
      unint64_t v5 = 0xE500000000000000;
      uint64_t v6 = 0x6465646E65;
    }
  }
  else
  {
    unint64_t v5 = 0xE700000000000000;
    uint64_t v6 = 0x64657461657263;
  }
  unint64_t v7 = (void *)MEMORY[0x1BA9E2DD0](v6, v5);
  swift_bridgeObjectRelease();
  unint64_t v8 = (void *)MEMORY[0x1BA9E2DD0](0x6574617473, 0xE500000000000000);
  [(objc_class *)with.super.isa encodeObject:v7 forKey:v8];

  uint64_t v9 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_isClientInitiated);
  unint64_t v10 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000011, 0x80000001BA0615C0);
  [(objc_class *)with.super.isa encodeBool:v9 forKey:v10];

  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v12 = (id)MEMORY[0x1BA9E2DD0](0x6E6F697461657263, 0xEC000000656D6954);
  [(objc_class *)with.super.isa encodeObject:isa forKey:v12];
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in SharedFlowPluginServiceClient.startTurn(turnData:bridge:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(a1, &demangling cache variable for type metadata for CheckedContinuation<(), Error>, (uint64_t (*)(uint64_t, uint64_t))implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in RemoteConversationClient.ensureReady());
}

id outlined copy of Result<(), Error>(id result, char a2)
{
  if (a2) {
    return result;
  }
  return result;
}

void outlined consume of Result<(), Error>?(void *a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    outlined consume of Result<(), Error>(a1, a2 & 1);
  }
}

uint64_t objectdestroy_12Tm()
{
  uint64_t v1 = type metadata accessor for ConversationHelperInput(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v14 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v3 = (id *)(v0 + ((v2 + 40) & ~v2));

  unint64_t v4 = (char *)v3 + *(int *)(v1 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v5 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  uint64_t v6 = &v4[v5[6]];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }

  unint64_t v10 = &v4[v5[8]];
  if (!v9(v10, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  swift_release();

  unint64_t v11 = (uint64_t *)&v4[v5[12]];
  unint64_t v12 = v11[1];
  if (v12 >> 60 != 15) {
    outlined consume of Data._Representation(*v11, v12);
  }
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, ((v2 + 40) & ~v2) + v14, v2 | 7);
}

void outlined consume of Result<(), Error>(id a1, char a2)
{
  if (a2) {
}
  }

uint64_t protocol witness for RemoteConversationConnectionProviding.withRemoteConversationConnection<A>(execute:) in conformance SharedFlowPluginConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:)(a1, a2, a3, a4);
}

uint64_t SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:)()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 136);
  if (v0) {
    uint64_t v4 = SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:);
  }
  else {
    uint64_t v4 = SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 224) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 136);
  swift_release();
  if (v0) {
    uint64_t v4 = SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:);
  }
  else {
    uint64_t v4 = SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 168) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 136);
    uint64_t v4 = SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:);
  }
  else
  {
    unint64_t v5 = *(void *)(v2 + 136);
    swift_release();
    uint64_t v4 = SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:);
    uint64_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[13];
  uint64_t v2 = v0[7];
  swift_release();
  InterruptibleTaskResult.get()(v1, v2);
  (*(void (**)(void, void))(v0[14] + 8))(v0[15], v0[13]);
  swift_release();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[13];
  uint64_t v2 = v0[7];
  swift_release();
  InterruptibleTaskResult.get()(v1, v2);
  (*(void (**)(void, void))(v0[14] + 8))(v0[16], v0[13]);
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  uint64_t v1 = v0[11];
  uint64_t v2 = *(void *)(v1 + 48);
  v0[18] = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 56);
    uint64_t v4 = one-time initialization token for executor;
    swift_unknownObjectRetain();
    if (v4 != -1) {
      swift_once();
    }
    unint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
    uint64_t v6 = Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_1B9C64000, v6, v7, "RemoteConversation is active", v8, 2u);
      MEMORY[0x1BA9E48C0](v8, -1, -1);
    }
    uint64_t v9 = v0[10];
    uint64_t v11 = v0[8];
    unint64_t v10 = v0[9];

    unint64_t v12 = (void *)swift_allocObject();
    v0[19] = v12;
    v12[2] = v9;
    uint64_t v12[3] = v11;
    v12[4] = v10;
    v12[5] = v2;
    v12[6] = v3;
    swift_unknownObjectRetain();
    swift_retain();
    uint64_t v13 = (void *)swift_task_alloc();
    v0[20] = v13;
    *uint64_t v13 = v0;
    v13[1] = SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:);
    uint64_t v14 = v0[16];
    uint64_t v15 = v0[10];
    return InterruptibleTaskManager.perform<A>(_:)(v14, (uint64_t)&async function pointer to partial apply for closure #1 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:), (uint64_t)v12, v15);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
    uint64_t v18 = Logger.logObject.getter();
    uint64_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_1B9C64000, v18, v19, "RemoteConversation is invalid, will reconnect", v20, 2u);
      MEMORY[0x1BA9E48C0](v20, -1, -1);
    }
    id v21 = v0[11];

    if (*(void *)(v21 + 64))
    {
      Class v22 = *(void *)(v21 + 64);
    }
    else
    {
      char v23 = v0[11];
      uint64_t v24 = v0[12];
      uint64_t v25 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
      uint64_t v26 = static MessageBusActor.shared;
      uint64_t v27 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
      uint64_t v28 = (void *)swift_allocObject();
      v28[2] = v26;
      v28[3] = v27;
      v28[4] = v23;
      swift_retain();
      swift_retain();
      Class v22 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime18RemoteConversation_p_Tgm5(v24, (uint64_t)&async function pointer to partial apply for closure #2 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:), (uint64_t)v28);
      *(void *)(v21 + 64) = v22;
      swift_retain();
      swift_release();
    }
    v0[22] = v22;
    swift_retain();
    uint64_t v29 = (void *)swift_task_alloc();
    v0[23] = v29;
    int v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteConversation);
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    *uint64_t v29 = v0;
    v29[1] = SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:);
    uint64_t v32 = MEMORY[0x1E4FBC0F0];
    return MEMORY[0x1F4187D90](v0 + 5, v22, v30, v31, v32);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v2 = v0[10];
  uint64_t v1 = (void *)v0[11];
  uint64_t v4 = v0[8];
  uint64_t v3 = v0[9];
  unint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  v0[25] = v5;
  v1[8] = 0;
  swift_release();
  v1[6] = v5;
  v1[7] = v6;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v7 = (void *)swift_allocObject();
  v0[26] = v7;
  v7[2] = v2;
  v7[3] = v4;
  v7[4] = v3;
  v7[5] = v5;
  v7[6] = v6;
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[27] = v8;
  *uint64_t v8 = v0;
  v8[1] = SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:);
  uint64_t v9 = v0[15];
  unint64_t v10 = v0[10];
  return InterruptibleTaskManager.perform<A>(_:)(v9, (uint64_t)&async function pointer to partial apply for closure #3 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:), (uint64_t)v7, v10);
}

uint64_t SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v5[12] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for InterruptibleTaskResult();
  v5[13] = v6;
  v5[14] = *(void *)(v6 - 8);
  v5[15] = swift_task_alloc();
  v5[16] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v7 = static MessageBusActor.shared;
  v5[17] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:), v7, 0);
}

uint64_t partial apply for closure #1 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1)
{
  uint64_t v4 = (int *)v1[3];
  uint64_t v6 = v1[5];
  uint64_t v5 = v1[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  unint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  uint64_t v8 = (void *)swift_task_alloc();
  v7[2] = v8;
  *uint64_t v8 = v7;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v10(a1, v6, v5);
}

uint64_t partial apply for closure #1 in RemoteConversationClient.startTurn(turnData:bridge:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for RemoteConversationTurnData(0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = (uint64_t *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  unint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *unint64_t v10 = v2;
  v10[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in RemoteConversationClient.startTurn(turnData:bridge:)(a1, v6, v8, v9);
}

uint64_t closure #1 in RemoteConversationClient.startTurn(turnData:bridge:)()
{
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 16);
  long long v12 = *(_OWORD *)(v0 + 32);
  _s14SiriKitRuntime26RemoteConversationTurnDataVWOcTm_1(*(void *)(v0 + 24), v1, type metadata accessor for RemoteConversationTurnData);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v6 = (v2 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 72) = v7;
  *(void *)(v7 + 16) = v4;
  outlined init with take of RemoteConversationTurnData(v1, v7 + v5);
  *(_OWORD *)(v7 + v6) = v12;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v8 = swift_task_alloc();
  *(void *)(v0 + 80) = v8;
  *(void *)(v8 + 16) = partial apply for closure #1 in closure #1 in RemoteConversationClient.startTurn(turnData:bridge:);
  *(void *)(v8 + 24) = v7;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v9;
  *uint64_t v9 = v0;
  uint64_t v10 = MEMORY[0x1E4FBC848];
  v9[1] = closure #1 in RemoteConversationClient.startTurn(turnData:bridge:);
  return MEMORY[0x1F4188160](v9, 0, 0, 0xD000000000000028, 0x80000001BA063410, closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)specialized partial apply, v8, v10 + 8);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in RemoteConversationClient.startTurn(turnData:bridge:);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v2 = RemoteConversationClient.startTurn(turnData:bridge:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t RemoteConversationClient.startTurn(turnData:bridge:)()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 40);
    uint64_t v4 = RemoteConversationClient.startTurn(turnData:bridge:);
  }
  else
  {
    unint64_t v5 = *(void *)(v2 + 40);
    swift_release();
    uint64_t v4 = RemoteConversationClient.startTurn(turnData:bridge:);
    uint64_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t (*v15)(void);
  long long v16;
  uint64_t v17;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = *(void **)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  unint64_t v5 = *(void *)(v0 + 16);
  unint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = v3 + 16;
  uint64_t v16 = *(_OWORD *)(v0 + 24);
  __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v8 = v3[19];
  uint64_t v9 = v3[20];
  __swift_project_boxed_opaque_existential_1(v7, v8);
  _s14SiriKitRuntime26RemoteConversationTurnDataVWOcTm_1(v5, v1, type metadata accessor for RemoteConversationTurnData);
  uint64_t v10 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v11 = swift_allocObject();
  outlined init with take of RemoteConversationTurnData(v1, v11 + v10);
  *(_OWORD *)(v11 + ((v2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8)) = v16;
  long long v12 = swift_allocObject();
  *(void *)(v0 + 72) = v12;
  *(void *)(v12 + 16) = &async function pointer to partial apply for closure #1 in RemoteConversationClient.startTurn(turnData:bridge:);
  *(void *)(v12 + 24) = v11;
  uint64_t v15 = (uint64_t (*)(void))(*(void *)(v9 + 8) + **(int **)(v9 + 8));
  swift_unknownObjectRetain();
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v13;
  *uint64_t v13 = v0;
  v13[1] = RemoteConversationClient.startTurn(turnData:bridge:);
  return v15();
}

uint64_t closure #1 in RemoteConversationClient.startTurn(turnData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = *(void *)(type metadata accessor for RemoteConversationTurnData(0) - 8);
  v4[6] = v5;
  v4[7] = *(void *)(v5 + 64);
  v4[8] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationClient.startTurn(turnData:bridge:), 0, 0);
}

uint64_t closure #1 in closure #1 in RemoteConversationClient.startTurn(turnData:bridge:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v27 = a5;
  uint64_t v28 = a1;
  uint64_t v32 = a2;
  uint64_t v8 = type metadata accessor for RemoteConversationTurnData(0);
  uint64_t v29 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v29 + 64);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x1BA9E2DD0](*a3, a3[1]);
  uint64_t v26 = a4;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v30 = ServiceBridgeDelegate.xpcWrapper.getter(ObjectType, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v28, v10);
  _s14SiriKitRuntime26RemoteConversationTurnDataVWOcTm_1((uint64_t)a3, (uint64_t)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for RemoteConversationTurnData);
  unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v16 = (v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (*(unsigned __int8 *)(v29 + 80) + v16 + 8) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  uint64_t v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v18 + v15, v13, v10);
  uint64_t v19 = v32;
  *(void *)(v18 + v16) = v32;
  outlined init with take of RemoteConversationTurnData((uint64_t)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17);
  uint64_t v20 = (void *)(v18 + ((v9 + v17 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v21 = v27;
  *uint64_t v20 = v26;
  v20[1] = v21;
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.startTurn(turnData:bridge:);
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_169;
  Class v22 = _Block_copy(aBlock);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_release();
  char v23 = (void *)v31;
  objc_msgSend(v19, sel_startTurnFromCacheWithExecutionRequestId_bridge_reply_, v31, v30, v22);
  _Block_release(v22);

  return swift_unknownObjectRelease();
}

uint64_t outlined init with take of RemoteConversationTurnData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RemoteConversationTurnData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ObjCBool, @unowned NSError?) -> ()(char a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, void))(a3 + 16))(a3, a1 & 1);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.startTurn(turnData:bridge:)(char a1, void *a2)
{
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>)
                 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(type metadata accessor for RemoteConversationTurnData(0) - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void **)(v2 + v7);
  uint64_t v11 = v2 + v9;
  uint64_t v12 = (uint64_t *)(v2 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];

  return closure #1 in closure #1 in closure #1 in RemoteConversationClient.startTurn(turnData:bridge:)(a1, a2, v2 + v6, v10, v11, v13, v14);
}

uint64_t closure #1 in closure #1 in closure #1 in RemoteConversationClient.startTurn(turnData:bridge:)(char a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v27 = a7;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x1F4188790](v11);
  if (a2)
  {
    aBlock[0] = a2;
    id v14 = a2;
    CheckedContinuation.resume(throwing:)();
  }
  if (a1) {
    return CheckedContinuation.resume(returning:)();
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  id v26 = a4;
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl(&dword_1B9C64000, v17, v18, "Remote Conversation does not have turn data for the current request. Will serialize the TurnData again.", v19, 2u);
    MEMORY[0x1BA9E48C0](v19, -1, -1);
  }

  id v20 = RemoteConversationTurnData.xpcRepresentation.getter();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v22 = ServiceBridgeDelegate.xpcWrapper.getter(ObjectType, v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v11);
  unint64_t v23 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v24 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v24 + v23, (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in RemoteConversationClient.startTurn(turnData:bridge:);
  aBlock[5] = v24;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_175;
  uint64_t v25 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v26, sel_startTurnWithTurnData_bridge_reply_, v20, v22, v25);
  _Block_release(v25);

  return swift_unknownObjectRelease();
}

uint64_t outlined destroy of UserInputResult(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UserInputResult();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t InterruptibleTaskResult.get()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v5);
  if (swift_getEnumCaseMultiPayload()) {
    return swift_willThrow();
  }
  else {
    return (*(uint64_t (**)(uint64_t, char *))(*(void *)(*(void *)(a1 + 16) - 8) + 32))(a2, v5);
  }
}

uint64_t protocol witness for DecisionMaking.newTurnStarted(executionUUID:) in conformance DecisionEngine(uint64_t a1)
{
  *(void *)(*(void *)v1 + 176) = 0;
  swift_bridgeObjectRelease();
  ActionGenerator.newTurnStarted()();
  DecisionEngine.ambiguityService.getter((uint64_t)v6);
  uint64_t v3 = v7;
  uint64_t v4 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, v3, v4);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v6);
}

uint64_t DecisionEngine.newTurnStarted(executionUUID:)(uint64_t a1)
{
  *(void *)(v1 + 176) = 0;
  swift_bridgeObjectRelease();
  ActionGenerator.newTurnStarted()();
  DecisionEngine.ambiguityService.getter((uint64_t)v6);
  uint64_t v3 = v7;
  uint64_t v4 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a1, v3, v4);
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v6);
}

uint64_t specialized FeatureToggle<>.isEnabled.getter(unsigned __int8 a1)
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = static SydneyConversationFeatureFlags.forceEnabled;
  if (*(void *)(static SydneyConversationFeatureFlags.forceEnabled + 16)
    && (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v4 & 1) != 0))
  {
    char v5 = *(unsigned char *)(*(void *)(v2 + 56) + v3);
  }
  else
  {
    uint64_t v8 = &type metadata for SydneyConversationFeatureFlags;
    unint64_t v9 = lazy protocol witness table accessor for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags();
    v7[0] = a1;
    char v5 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
  }
  return v5 & 1;
}

{
  uint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  unsigned __int8 v7[24];
  ValueMetadata *v8;
  unint64_t v9;

  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = static AmbiguityFeatureFlags.forceEnabled;
  if (*(void *)(static AmbiguityFeatureFlags.forceEnabled + 16)
    && (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v4 & 1) != 0))
  {
    char v5 = *(unsigned char *)(*(void *)(v2 + 56) + v3);
  }
  else
  {
    uint64_t v8 = &type metadata for AmbiguityFeatureFlags;
    unint64_t v9 = lazy protocol witness table accessor for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags();
    v7[0] = a1;
    char v5 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
  }
  return v5 & 1;
}

uint64_t specialized FeatureToggle<>.isEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = static SiriPlaybackControlFeature.forceEnabled;
  if (*(void *)(static SiriPlaybackControlFeature.forceEnabled + 16)
    && (uint64_t v1 = specialized __RawDictionaryStorage.find<A>(_:)(), (v2 & 1) != 0))
  {
    char v3 = *(unsigned char *)(*(void *)(v0 + 56) + v1);
  }
  else
  {
    v5[3] = &type metadata for SiriPlaybackControlFeature;
    v5[4] = lazy protocol witness table accessor for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature();
    char v3 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v5);
  }
  return v3 & 1;
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  void v5[5];

  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = static SiriKitFlowFeatureFlagDefinitions.forceEnabled;
  if (*(void *)(static SiriKitFlowFeatureFlagDefinitions.forceEnabled + 16)
    && (uint64_t v1 = specialized __RawDictionaryStorage.find<A>(_:)(), (v2 & 1) != 0))
  {
    char v3 = *(unsigned char *)(*(void *)(v0 + 56) + v1);
  }
  else
  {
    v5[3] = &type metadata for SiriKitFlowFeatureFlagDefinitions;
    v5[4] = lazy protocol witness table accessor for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions();
    char v3 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v5);
  }
  return v3 & 1;
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  void v5[5];

  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = static LinkFeature.forceEnabled;
  if (*(void *)(static LinkFeature.forceEnabled + 16)
    && (uint64_t v1 = specialized __RawDictionaryStorage.find<A>(_:)(), (v2 & 1) != 0))
  {
    char v3 = *(unsigned char *)(*(void *)(v0 + 56) + v1);
  }
  else
  {
    v5[3] = &type metadata for LinkFeature;
    v5[4] = lazy protocol witness table accessor for type LinkFeature and conformance LinkFeature();
    char v3 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v5);
  }
  return v3 & 1;
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  char v3;
  void v5[5];

  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = static SiriPhoneFeature.forceEnabled;
  if (*(void *)(static SiriPhoneFeature.forceEnabled + 16)
    && (uint64_t v1 = specialized __RawDictionaryStorage.find<A>(_:)(), (v2 & 1) != 0))
  {
    char v3 = *(unsigned char *)(*(void *)(v0 + 56) + v1);
  }
  else
  {
    v5[3] = &type metadata for SiriPhoneFeature;
    v5[4] = lazy protocol witness table accessor for type SiriPhoneFeature and conformance SiriPhoneFeature();
    char v3 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v5);
  }
  return v3 & 1;
}

unint64_t lazy protocol witness table accessor for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions;
  if (!lazy protocol witness table cache variable for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions;
  if (!lazy protocol witness table cache variable for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions;
  if (!lazy protocol witness table cache variable for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions);
  }
  return result;
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.getter in conformance SiriKitFlowFeatureFlagDefinitions(uint64_t a1, uint64_t a2)
{
  return protocol witness for static FeatureToggle.forceEnabled.getter in conformance SydneyConversationFeatureFlags(a1, a2, &one-time initialization token for forceEnabled);
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance SiriKitFlowFeatureFlagDefinitions()
{
  return "SiriKitFlow";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance SiriKitFlowFeatureFlagDefinitions()
{
  return "Link";
}

unint64_t lazy protocol witness table accessor for type LinkFeature and conformance LinkFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type LinkFeature and conformance LinkFeature;
  if (!lazy protocol witness table cache variable for type LinkFeature and conformance LinkFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkFeature and conformance LinkFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkFeature and conformance LinkFeature;
  if (!lazy protocol witness table cache variable for type LinkFeature and conformance LinkFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkFeature and conformance LinkFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LinkFeature and conformance LinkFeature;
  if (!lazy protocol witness table cache variable for type LinkFeature and conformance LinkFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinkFeature and conformance LinkFeature);
  }
  return result;
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.getter in conformance LinkFeature(uint64_t a1, uint64_t a2)
{
  return protocol witness for static FeatureToggle.forceEnabled.getter in conformance SydneyConversationFeatureFlags(a1, a2, &one-time initialization token for forceEnabled);
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance LinkFeature()
{
  return "conditionallyEnabledIntents";
}

uint64_t outlined consume of AppShortcutExpansionContext?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t DecisionEngine.ambiguityService.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 200;
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v1 + 200, (uint64_t)&v11, &demangling cache variable for type metadata for AmbiguityServiceProviding?);
  if (!v12)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v11, &demangling cache variable for type metadata for AmbiguityServiceProviding?);
    uint64_t v4 = *(void *)(v1 + 40);
    outlined init with copy of ReferenceResolutionClientProtocol(v1 + 136, (uint64_t)&v11);
    uint64_t v5 = type metadata accessor for AmbiguityService();
    uint64_t v6 = swift_allocObject();
    type metadata accessor for ServerFallbackDisablingUtils();
    uint64_t v7 = (void *)swift_allocObject();
    id v8 = objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager());
    swift_retain();
    v7[2] = objc_msgSend(v8, sel_init);
    v7[3] = closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:);
    v7[4] = 0;
    *(void *)(v6 + 64) = v7;
    *(void *)(v6 + 16) = v4;
    outlined init with take of ReferenceResolutionClientProtocol(&v11, v6 + 24);
    uint64_t v12 = v5;
    uint64_t v13 = &protocol witness table for AmbiguityService;
    *(void *)&long long v11 = v6;
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v11, (uint64_t)v10);
    swift_beginAccess();
    outlined assign with take of (Input, AnyFlow, SiriEnvironment)((uint64_t)v10, v3, &demangling cache variable for type metadata for AmbiguityServiceProviding?);
    swift_endAccess();
  }
  return outlined init with take of ReferenceResolutionClientProtocol(&v11, a1);
}

uint64_t protocol witness for AmbiguityServiceProviding.newTurnStarted(executionUUID:) in conformance AmbiguityService(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 48);
  uint64_t v5 = *(void *)(*v1 + 56);
  __swift_project_boxed_opaque_existential_1((void *)(*v1 + 24), v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 64))(a1, v4, v5);
  uint64_t v6 = *(void **)(v3 + 16);
  uint64_t v7 = v6[5];
  uint64_t v8 = v6[6];
  __swift_project_boxed_opaque_existential_1(v6 + 2, v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 8))(a1, v7, v8);
}

uint64_t protocol witness for CamBridge.setupNewTurn(executionUUID:) in conformance CamBridgeImpl(uint64_t a1)
{
  return CamBridgeImpl.setupNewTurn(executionUUID:)(a1);
}

uint64_t CamBridgeImpl.setupNewTurn(executionUUID:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  unint64_t v66 = (char *)v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v65 = (char *)v54 - v6;
  MEMORY[0x1F4188790](v5);
  uint64_t v62 = (char *)v54 - v7;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  unint64_t v15 = (char *)v54 - v14;
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  Swift::String v68 = (char *)v54 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  id v20 = (char *)v54 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)v54 - v21;
  type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  dispatch thunk of ConversationSELFHelper.makeCamIdAndEmitRequestLink(executionUUID:)();
  swift_release();
  static ConversationSELFHelper.shared.getter();
  dispatch thunk of ConversationSELFHelper.makeCaarIdAndEmitRequestLink(executionUUID:)();
  swift_release();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.executor);
  uint64_t v24 = v9;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v61 = a1;
  v25(v68, a1, v8);
  int v63 = v22;
  v25(v15, (uint64_t)v22, v8);
  uint64_t v64 = v20;
  Swift::String v60 = v25;
  v25(v12, (uint64_t)v20, v8);
  id v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  int v28 = v27;
  uint64_t v29 = v12;
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v30 = swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    v70[0] = v58;
    *(_DWORD *)uint64_t v30 = 136315650;
    v54[2] = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    int v57 = v28;
    uint64_t v31 = v68;
    uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v70);
    os_log_t v56 = v26;
    v54[1] = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v55 = v29;
    uint64_t v34 = *(void (**)(char *, uint64_t))(v24 + 8);
    uint64_t v59 = (v24 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v34(v31, v8);
    *(_WORD *)(v30 + 12) = 2080;
    Swift::String v68 = (char *)(v30 + 14);
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v34(v15, v8);
    *(_WORD *)(v30 + 22) = 2080;
    Swift::String v68 = (char *)(v30 + 24);
    uint64_t v37 = v55;
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    Swift::String v68 = (char *)v34;
    v34(v37, v8);
    os_log_t v40 = v56;
    _os_log_impl(&dword_1B9C64000, v56, (os_log_type_t)v57, "CamBridge: Setup new turn with executionUUID: %s, camId:%s, caarId: %s.", (uint8_t *)v30, 0x20u);
    uint64_t v41 = v58;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v41, -1, -1);
    MEMORY[0x1BA9E48C0](v30, -1, -1);
  }
  else
  {
    uint64_t v42 = *(void (**)(char *, uint64_t))(v24 + 8);
    uint64_t v59 = (v24 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v42(v68, v8);
    v42(v15, v8);
    Swift::String v68 = (char *)v42;
    v42(v12, v8);
  }
  uint64_t v43 = (uint64_t)v62;
  uint64_t v44 = (void (*)(char *, char *, uint64_t))v60;
  v60(v62, v61, v8);
  uint64_t v45 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56);
  v45(v43, 0, 1, v8);
  uint64_t v46 = (uint64_t)v65;
  uint64_t v47 = v63;
  v44(v65, v63, v8);
  v45(v46, 0, 1, v8);
  uint64_t v48 = (uint64_t)v66;
  uint64_t v49 = v64;
  v44(v66, v64, v8);
  v45(v48, 0, 1, v8);
  type metadata accessor for CamBridgeState();
  uint64_t v50 = swift_allocObject();
  *(void *)(v50 + 16) = MEMORY[0x1E4FBC868];
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v43, v50 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v46, v50 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_camLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v48, v50 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_caarLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v51 = v67;
  swift_beginAccess();
  *(void *)(v51 + 240) = v50;
  swift_retain();
  swift_release();
  CamBridgeImpl.camBridgeState.didset();
  swift_release();
  uint64_t v52 = (uint64_t (*)(char *, uint64_t))v68;
  ((void (*)(char *, uint64_t))v68)(v49, v8);
  return v52(v47, v8);
}

uint64_t type metadata accessor for CamBridgeState()
{
  uint64_t result = type metadata singleton initialization cache for CamBridgeState;
  if (!type metadata singleton initialization cache for CamBridgeState) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t CamBridgeState.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId);
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_camLoggingId);
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_caarLoggingId);

  return swift_deallocClassInstance();
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void CamBridgeImpl.camBridgeState.didset()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v7 = v4;
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_beginAccess();
    type metadata accessor for CamBridgeState();
    swift_retain();
    uint64_t v5 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v1, v2, "CamBridge: camBridgeState set to %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v4, -1, -1);
    MEMORY[0x1BA9E48C0](v3, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

uint64_t protocol witness for CorrectionsHandling.setupNewTurn(executionUUID:) in conformance CorrectionsPlatformClient()
{
  return dispatch thunk of CorrectionsPlatformClient.setupNewTurn(executionUUID:)();
}

uint64_t type metadata accessor for ConversationService.ActiveTurn(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for ConversationService.ActiveTurn);
}

uint64_t type metadata accessor for InvocationStateImpl()
{
  uint64_t result = type metadata singleton initialization cache for InvocationStateImpl;
  if (!type metadata singleton initialization cache for InvocationStateImpl) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for AceServiceInvokerImpl()
{
  return self;
}

uint64_t type metadata accessor for SubmissionTaskRegistry()
{
  return self;
}

void InvocationStateImpl.init(executionRequestId:requestContextData:previousInvocationState:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v89 = a4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomeInfo?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v110 = (char *)v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v102 = (uint64_t)v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for BargeInMode();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v101 = (uint64_t)v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BargeInContext?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v100 = (char *)v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InteractionType?);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v96 = (char *)v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for InteractionTypeHelper();
  uint64_t v98 = *(void *)(v19 - 8);
  uint64_t v99 = v19;
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)v85 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = type metadata accessor for InteractionType();
  uint64_t v95 = *(void *)(v97 - 8);
  MEMORY[0x1F4188790](v97);
  uint64_t v92 = (char *)v85 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = (int *)type metadata accessor for InvocationStateImpl();
  uint64_t v24 = (char *)a5 + v23[8];
  uint64_t v25 = type metadata accessor for AudioSource();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
  uint64_t v26 = (uint64_t)a5 + v23[9];
  uint64_t v27 = type metadata accessor for AudioDestination();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 1, 1, v27);
  int v28 = (void *)((char *)a5 + v23[12]);
  *int v28 = 0;
  v28[1] = 0;
  Swift::String v111 = v28;
  uint64_t v108 = v23[20];
  *(void *)((char *)a5 + v108) = 0;
  uint64_t v29 = (void *)((char *)a5 + v23[23]);
  *uint64_t v29 = 0;
  v29[1] = 0;
  uint64_t v104 = v29;
  uint64_t v30 = (uint64_t)a5 + v23[24];
  uint64_t v31 = type metadata accessor for PersonalDomainsAuthenticationMode();
  uint64_t v32 = *(void *)(v31 - 8);
  unint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
  uint64_t v109 = v30;
  uint64_t v106 = v33;
  uint64_t v107 = v31;
  uint64_t v105 = v32 + 56;
  ((void (*)(uint64_t, uint64_t, uint64_t))v33)(v30, 1, 1);
  uint64_t v34 = (uint64_t)a5 + v23[25];
  uint64_t v35 = type metadata accessor for BargeInContext();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56);
  uint64_t v88 = v34;
  uint64_t v87 = v35;
  Swift::String v86 = v37;
  v85[1] = v36 + 56;
  ((void (*)(uint64_t, uint64_t, uint64_t))v37)(v34, 1, 1);
  uint64_t v38 = (uint64_t)a5 + v23[27];
  uint64_t v39 = type metadata accessor for HomeInfo();
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56);
  uint64_t v94 = v38;
  uint64_t v93 = v39;
  uint64_t v91 = v41;
  uint64_t v90 = v40 + 56;
  ((void (*)(uint64_t, uint64_t, uint64_t))v41)(v38, 1, 1);
  uint64_t v103 = v23[29];
  *(void *)((char *)a5 + v103) = 0;
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a1;
  a5[3] = a2;
  uint64_t v42 = (void *)((char *)a5 + v23[21]);
  *uint64_t v42 = a1;
  v42[1] = a2;
  uint64_t v43 = (void *)((char *)a5 + v23[22]);
  *uint64_t v43 = a1;
  v43[1] = a2;
  uint64_t v45 = *(void *)((char *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_inputOrigin);
  uint64_t v44 = *(void *)((char *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_inputOrigin + 8);
  uint64_t v46 = (char *)a5 + v23[6];
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v47 = (uint64_t)v46;
  uint64_t v48 = v21;
  static SiriKitExecutorRunUtils.inputOriginFrom(aceValue:)(v45, v44, v47);
  swift_bridgeObjectRelease();
  uint64_t v49 = (uint64_t)v24;
  uint64_t v50 = v89;
  outlined assign with copy of ReferenceResolutionClientProtocol?((uint64_t)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioSource, v49, (uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  outlined assign with copy of ReferenceResolutionClientProtocol?((uint64_t)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_audioDestination, v26, &demangling cache variable for type metadata for AudioDestination?);
  uint64_t v51 = (char *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_responseMode;
  uint64_t v52 = (char *)a5 + v23[10];
  uint64_t v53 = type metadata accessor for ResponseMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16))(v52, v51, v53);
  *((unsigned char *)a5 + v23[13]) = *((unsigned char *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isEyesFree);
  *((unsigned char *)a5 + v23[17]) = *((unsigned char *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDirectAction);
  *((unsigned char *)a5 + v23[14]) = *((unsigned char *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isVoiceTriggerEnabled);
  *((unsigned char *)a5 + v23[15]) = *((unsigned char *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTextToSpeechEnabled);
  *((unsigned char *)a5 + v23[16]) = *((unsigned char *)a3
                             + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isRecognizeMyVoiceEnabled);
  static InteractionTypeHelper.shared.getter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v50, (uint64_t)v112, &demangling cache variable for type metadata for InvocationState?);
  uint64_t v54 = v113;
  if (v113)
  {
    uint64_t v55 = v114;
    __swift_project_boxed_opaque_existential_1(v112, v113);
    uint64_t v56 = (uint64_t)v96;
    (*(void (**)(uint64_t, uint64_t))(v55 + 32))(v54, v55);
    uint64_t v57 = v95;
    uint64_t v58 = v97;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v95 + 56))(v56, 0, 1, v97);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v112);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v112, &demangling cache variable for type metadata for InvocationState?);
    uint64_t v57 = v95;
    uint64_t v56 = (uint64_t)v96;
    uint64_t v58 = v97;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v95 + 56))(v96, 1, 1, v97);
  }
  uint64_t v59 = v92;
  InteractionTypeHelper.mapInteractionType(requestContextData:previousInteractionType:)(a3);
  outlined destroy of ReferenceResolutionClientProtocol?(v56, &demangling cache variable for type metadata for InteractionType?);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v48, v99);
  (*(void (**)(char *, char *, uint64_t))(v57 + 32))((char *)a5 + v23[7], v59, v58);
  uint64_t v60 = swift_bridgeObjectRetain();
  static BargeInMode.from(aceModes:)(v60, v101);
  swift_bridgeObjectRelease();
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_approximatePreviousTTSInterval, v102, (uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  uint64_t v61 = (uint64_t)v100;
  BargeInContext.init(mode:approximatePreviousTTSInterval:)();
  uint64_t v62 = 1;
  v86(v61, 0, 1, v87);
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v61, v88, &demangling cache variable for type metadata for BargeInContext?);
  int v63 = (char *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_restrictions;
  uint64_t v64 = (char *)a5 + v23[26];
  uint64_t v65 = type metadata accessor for Restrictions();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 16))(v64, v63, v65);
  unint64_t v66 = *(void **)((char *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_originatingHome);
  if (v66)
  {
    id v67 = v66;
    uint64_t v68 = (uint64_t)v110;
    AFHomeInfo.asInternalHomeInfo.getter();

    uint64_t v62 = 0;
  }
  else
  {
    uint64_t v68 = (uint64_t)v110;
  }
  v91(v68, v62, 1, v93);
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v68, v94, &demangling cache variable for type metadata for HomeInfo?);
  uint64_t v69 = *(void *)((char *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_currentDeviceAssistantId + 8);
  uint64_t v70 = (void *)((char *)a5 + v23[28]);
  *uint64_t v70 = *(void *)((char *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_currentDeviceAssistantId);
  v70[1] = v69;
  type metadata accessor for DeviceEnvironmentHelper();
  uint64_t v71 = swift_bridgeObjectRetain();
  MEMORY[0x1BA9DD9D0](v71);
  swift_release();
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  dispatch thunk of CurrentDevice.siriLocale.getter();
  uint64_t v72 = swift_release();
  MEMORY[0x1BA9DD9D0](v72);
  swift_release();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  dispatch thunk of CurrentDevice.siriVoiceGender.getter();
  uint64_t v73 = swift_release();
  MEMORY[0x1BA9DD9D0](v73);
  swift_release();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  uint64_t v74 = dispatch thunk of CurrentDevice.preferencesLanguageCode.getter();
  uint64_t v76 = v75;
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v50, &demangling cache variable for type metadata for InvocationState?);
  char v77 = v104;
  swift_bridgeObjectRelease();
  *char v77 = v74;
  v77[1] = v76;
  uint64_t v78 = (char *)a5 + v23[11];
  uint64_t v79 = type metadata accessor for MultiUserContext();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 56))(v78, 1, 1, v79);
  uint64_t v80 = v108;

  *(void *)((char *)a5 + v80) = 0;
  uint64_t v81 = v109;
  outlined destroy of ReferenceResolutionClientProtocol?(v109, &demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
  v106(v81, 1, 1, v107);
  uint64_t v82 = v111;
  swift_bridgeObjectRelease();
  *uint64_t v82 = 0;
  v82[1] = 0;
  uint64_t v83 = *(void *)((char *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceTriggerEventInfo);
  uint64_t v84 = v103;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a5 + v84) = v83;
  *(_DWORD *)((char *)a5 + v23[30]) = *(_DWORD *)((char *)a3
                                                + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_voiceAudioSessionId);
  *((unsigned char *)a5 + v23[31]) = *((unsigned char *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isSystemApertureEnabled);
  *((unsigned char *)a5 + v23[32]) = *((unsigned char *)a3
                             + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isLiveActivitiesSupported);
  LOBYTE(v83) = *((unsigned char *)a3 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isInAmbient);

  *((unsigned char *)a5 + v23[33]) = v83;
}

uint64_t static SiriKitExecutorRunUtils.inputOriginFrom(aceValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  InputOrigin.init(aceValue:)();
  uint64_t v9 = type metadata accessor for InputOrigin();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v8, v9);
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for InputOrigin?);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  static os_log_type_t.error.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1BA04FD90;
  *(void *)(v11 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v11 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(v10 + 104))(a3, *MEMORY[0x1E4FA5148], v9);
}

uint64_t outlined assign with copy of ReferenceResolutionClientProtocol?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t InteractionTypeHelper.mapInteractionType(requestContextData:previousInteractionType:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for InputOrigin();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  InputOrigin.init(aceValue:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E4FA5148], v5);
    uint64_t v9 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for InputOrigin?);
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
  }
  uint64_t v10 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v11 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x140))(v9);
  (*(void (**)(uint64_t))((*v10 & *a1) + 0x148))(v11);
  InteractionTypeHelper.mapInteractionType(inputOrigin:isEyesFree:isDeviceInStarkMode:isDeviceInCarDND:audioSource:audioDestination:previousInteractionType:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t static BargeInMode.from(aceModes:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BargeInMode();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = static BargeInMode.none.getter();
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    v25[4] = *MEMORY[0x1E4F97598];
    uint64_t v10 = *MEMORY[0x1E4F97590];
    v25[2] = *MEMORY[0x1E4F975A0];
    v25[3] = v10;
    v25[0] = *MEMORY[0x1E4F97588];
    uint64_t v11 = (void (**)(uint64_t, uint64_t))(v5 + 8);
    swift_bridgeObjectRetain();
    v25[1] = a1;
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      uint64_t v14 = *(i - 1);
      uint64_t v13 = *i;
      BOOL v16 = static String._unconditionallyBridgeFromObjectiveC(_:)() == v14 && v15 == v13;
      if (v16
        || (char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(),
            swift_bridgeObjectRetain(),
            swift_bridgeObjectRelease(),
            (v17 & 1) != 0))
      {
        swift_bridgeObjectRelease();
        static BargeInMode.overSiri.getter();
      }
      else
      {
        if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v14 && v19 == v13)
        {
          swift_bridgeObjectRelease();
LABEL_16:
          swift_bridgeObjectRelease();
          static BargeInMode.overMedia.getter();
          goto LABEL_9;
        }
        char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v20) {
          goto LABEL_16;
        }
        if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v14 && v21 == v13)
        {
          swift_bridgeObjectRelease();
LABEL_21:
          swift_bridgeObjectRelease();
          static BargeInMode.overTimer.getter();
          goto LABEL_9;
        }
        char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v22) {
          goto LABEL_21;
        }
        if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v14 && v23 == v13)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v24 & 1) == 0) {
            goto LABEL_10;
          }
        }
        static BargeInMode.overAlarm.getter();
      }
LABEL_9:
      lazy protocol witness table accessor for type BargeInMode and conformance BargeInMode(&lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode);
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v18 = *v11;
      (*v11)(a2, v4);
      dispatch thunk of RawRepresentable.rawValue.getter();
      v25[7] = v25[5] | v25[6];
      lazy protocol witness table accessor for type BargeInMode and conformance BargeInMode((unint64_t *)&lazy protocol witness table cache variable for type BargeInMode and conformance BargeInMode);
      dispatch thunk of OptionSet.init(rawValue:)();
      v18((uint64_t)v7, v4);
LABEL_10:
      if (!--v9) {
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for InvocationScopedSiriKitEventSender()
{
  return self;
}

void *initializeWithCopy for InvocationStateImpl(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for InputOrigin();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v9, v10, v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for InteractionType();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  uint64_t v17 = a3[8];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = type metadata accessor for AudioSource();
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  uint64_t v23 = a3[9];
  char v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = type metadata accessor for AudioDestination();
  uint64_t v27 = *(void *)(v26 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  uint64_t v29 = a3[10];
  uint64_t v30 = (char *)a1 + v29;
  uint64_t v31 = (char *)a2 + v29;
  uint64_t v32 = type metadata accessor for ResponseMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
  uint64_t v33 = a3[11];
  uint64_t v34 = (char *)a1 + v33;
  uint64_t v35 = (char *)a2 + v33;
  uint64_t v36 = type metadata accessor for MultiUserContext();
  uint64_t v37 = *(void *)(v36 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
  {
    uint64_t v38 = type metadata accessor for MultiUserState();
    memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  }
  uint64_t v39 = a3[12];
  uint64_t v40 = a3[13];
  uint64_t v41 = (void *)((char *)a1 + v39);
  uint64_t v42 = (void *)((char *)a2 + v39);
  uint64_t v43 = v42[1];
  *uint64_t v41 = *v42;
  v41[1] = v43;
  *((unsigned char *)a1 + v40) = *((unsigned char *)a2 + v40);
  uint64_t v44 = a3[15];
  *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
  *((unsigned char *)a1 + v44) = *((unsigned char *)a2 + v44);
  uint64_t v45 = a3[17];
  *((unsigned char *)a1 + a3[16]) = *((unsigned char *)a2 + a3[16]);
  *((unsigned char *)a1 + v45) = *((unsigned char *)a2 + v45);
  uint64_t v46 = a3[18];
  uint64_t v47 = (char *)a1 + v46;
  uint64_t v48 = (char *)a2 + v46;
  uint64_t v49 = type metadata accessor for Locale();
  uint64_t v50 = *(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16);
  swift_bridgeObjectRetain();
  v50(v47, v48, v49);
  uint64_t v51 = a3[19];
  uint64_t v52 = (char *)a1 + v51;
  uint64_t v53 = (char *)a2 + v51;
  uint64_t v54 = type metadata accessor for SiriVoiceGender();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 16))(v52, v53, v54);
  uint64_t v55 = a3[20];
  uint64_t v56 = a3[21];
  uint64_t v57 = *(void **)((char *)a2 + v55);
  *(void *)((char *)a1 + v55) = v57;
  uint64_t v58 = (void *)((char *)a1 + v56);
  uint64_t v59 = (void *)((char *)a2 + v56);
  uint64_t v60 = v59[1];
  *uint64_t v58 = *v59;
  v58[1] = v60;
  uint64_t v61 = a3[22];
  uint64_t v62 = a3[23];
  int v63 = (void *)((char *)a1 + v61);
  uint64_t v64 = (void *)((char *)a2 + v61);
  uint64_t v65 = v64[1];
  *int v63 = *v64;
  v63[1] = v65;
  unint64_t v66 = (void *)((char *)a1 + v62);
  id v67 = (void *)((char *)a2 + v62);
  uint64_t v68 = v67[1];
  *unint64_t v66 = *v67;
  v66[1] = v68;
  uint64_t v69 = a3[24];
  uint64_t v100 = a3;
  __dst = (char *)a1 + v69;
  uint64_t v70 = (char *)a2 + v69;
  uint64_t v71 = type metadata accessor for PersonalDomainsAuthenticationMode();
  uint64_t v72 = *(void *)(v71 - 8);
  uint64_t v99 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48);
  id v73 = v57;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v99(v70, 1, v71))
  {
    uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
    memcpy(__dst, v70, *(void *)(*(void *)(v74 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v72 + 16))(__dst, v70, v71);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(__dst, 0, 1, v71);
  }
  uint64_t v75 = v100[25];
  uint64_t v76 = (char *)a1 + v75;
  char v77 = (char *)a2 + v75;
  uint64_t v78 = type metadata accessor for BargeInContext();
  uint64_t v79 = *(void *)(v78 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48))(v77, 1, v78))
  {
    uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BargeInContext?);
    memcpy(v76, v77, *(void *)(*(void *)(v80 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v76, v77, v78);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
  }
  uint64_t v81 = v100[26];
  uint64_t v82 = (char *)a1 + v81;
  uint64_t v83 = (char *)a2 + v81;
  uint64_t v84 = type metadata accessor for Restrictions();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v84 - 8) + 16))(v82, v83, v84);
  uint64_t v85 = v100[27];
  Swift::String v86 = (char *)a1 + v85;
  uint64_t v87 = (char *)a2 + v85;
  uint64_t v88 = type metadata accessor for HomeInfo();
  uint64_t v89 = *(void *)(v88 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
  {
    uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomeInfo?);
    memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v86, v87, v88);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v86, 0, 1, v88);
  }
  uint64_t v91 = v100[28];
  uint64_t v92 = v100[29];
  uint64_t v93 = (void *)((char *)a1 + v91);
  uint64_t v94 = (void *)((char *)a2 + v91);
  uint64_t v95 = v94[1];
  *uint64_t v93 = *v94;
  v93[1] = v95;
  *(void *)((char *)a1 + v92) = *(void *)((char *)a2 + v92);
  uint64_t v96 = v100[31];
  *(_DWORD *)((char *)a1 + v100[30]) = *(_DWORD *)((char *)a2 + v100[30]);
  *((unsigned char *)a1 + v96) = *((unsigned char *)a2 + v96);
  uint64_t v97 = v100[33];
  *((unsigned char *)a1 + v100[32]) = *((unsigned char *)a2 + v100[32]);
  *((unsigned char *)a1 + v97) = *((unsigned char *)a2 + v97);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized InvocationScopedSiriKitEventSender.init(aceServiceInvoker:taskService:invocationState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v44 = a4;
  uint64_t v45 = a8;
  uint64_t v43 = a7;
  uint64_t v12 = *(void *)(a6 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)v41 - v17;
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v16);
  uint64_t v23 = (char *)v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v25 = (char *)v41 - v24;
  (*(void (**)(char *))(v20 + 32))((char *)v41 - v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v18, a3, a6);
  type metadata accessor for SiriKitEventContext();
  uint64_t v26 = (void *)swift_allocObject();
  uint64_t v46 = v20;
  uint64_t v47 = v25;
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v23, v25, a5);
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  uint64_t v48 = v18;
  v27(v15, v18, a6);
  uint64_t v49 = a2;
  uint64_t v28 = specialized SiriKitEventContext.init(aceServiceInvoker:taskService:invocationState:)((uint64_t)v23, a2, (uint64_t)v15, v26, a5, a6, v43, v45);
  uint64_t v29 = v44;
  *(void *)(v44 + 16) = v28;
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.instrumentation);
  swift_retain_n();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = swift_slowAlloc();
    uint64_t v45 = a5;
    uint64_t v34 = (uint8_t *)v33;
    uint64_t v35 = swift_slowAlloc();
    uint64_t v51 = v35;
    *(_DWORD *)uint64_t v34 = 136315138;
    v41[1] = v34 + 4;
    swift_retain();
    unint64_t v36 = SiriKitEventContext.description.getter();
    uint64_t v42 = v12;
    uint64_t v43 = a6;
    uint64_t v37 = v36;
    unint64_t v39 = v38;
    swift_release();
    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v31, v32, "InternalSiriKitEventSender ready with: %s", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v35, -1, -1);
    MEMORY[0x1BA9E48C0](v34, -1, -1);

    swift_release();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v48, v43);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v45);
  }
  else
  {
    swift_release_n();

    swift_release();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v48, a6);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v47, a5);
  }
  return v29;
}

uint64_t specialized InvocationScopedSiriKitEventSender.init(aceServiceInvoker:taskService:invocationState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for InvocationStateImpl();
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)v27 - v12;
  outlined init with take of DecisionEngineResponse(a3, (uint64_t)v27 - v12, (uint64_t (*)(void))type metadata accessor for InvocationStateImpl);
  type metadata accessor for SiriKitEventContext();
  uint64_t v14 = (void *)swift_allocObject();
  outlined init with copy of DecisionEngineResponse((uint64_t)v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for InvocationStateImpl);
  swift_retain();
  swift_retain();
  *(void *)(a4 + 16) = specialized SiriKitEventContext.init(aceServiceInvoker:taskService:invocationState:)(a1, a2, (uint64_t)v11, v14);
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.instrumentation);
  swift_retain_n();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v27[3] = a1;
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v28 = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    v27[1] = v18 + 4;
    swift_retain();
    unint64_t v20 = SiriKitEventContext.description.getter();
    v27[2] = a2;
    uint64_t v21 = a4;
    unint64_t v22 = v20;
    unint64_t v24 = v23;
    swift_release();
    uint64_t v25 = v22;
    a4 = v21;
    v27[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v24, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v16, v17, "InternalSiriKitEventSender ready with: %s", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v19, -1, -1);
    MEMORY[0x1BA9E48C0](v18, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  swift_release();
  outlined destroy of DecisionEngineResponse((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for InvocationStateImpl);
  swift_release();
  return a4;
}

uint64_t type metadata accessor for SiriKitEventContext()
{
  return self;
}

void *specialized SiriKitEventContext.init(aceServiceInvoker:taskService:invocationState:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  os_log_type_t v17 = (char *)&v28[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[3] = v18;
  v28[4] = v19;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v28);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(boxed_opaque_existential_0, a1, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v17, a3, a6);
  a4[2] = 0;
  a4[3] = 0;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v28, (uint64_t)(a4 + 4));
  a4[9] = a2;
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(a8 + 144);
  swift_retain();
  a4[10] = v21(a6, a8);
  a4[11] = v22;
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 152))(a6, a8);
  uint64_t v25 = v24;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v28);
  a4[12] = v23;
  a4[13] = v25;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a6);
  return a4;
}

void *specialized SiriKitEventContext.init(aceServiceInvoker:taskService:invocationState:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for InvocationStateImpl();
  uint64_t v9 = v8 - 8;
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v19[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v19[3] = type metadata accessor for AceServiceInvokerImpl();
  v19[4] = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3(&lazy protocol witness table cache variable for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl, 255, (void (*)(uint64_t))type metadata accessor for AceServiceInvokerImpl);
  v19[0] = a1;
  outlined init with take of DecisionEngineResponse(a3, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for InvocationStateImpl);
  a4[2] = 0;
  a4[3] = 0;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v19, (uint64_t)(a4 + 4));
  a4[9] = a2;
  uint64_t v12 = &v11[*(int *)(v9 + 92)];
  uint64_t v13 = *((void *)v12 + 1);
  a4[10] = *(void *)v12;
  a4[11] = v13;
  uint64_t v14 = &v11[*(int *)(v9 + 96)];
  uint64_t v16 = *(void *)v14;
  uint64_t v15 = *((void *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
  a4[12] = v16;
  a4[13] = v15;
  outlined destroy of DecisionEngineResponse((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for InvocationStateImpl);
  return a4;
}

uint64_t destroy for InvocationStateImpl(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for InputOrigin();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + a2[7];
  uint64_t v7 = type metadata accessor for InteractionType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for AudioSource();
  uint64_t v10 = *(void *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  uint64_t v11 = a1 + a2[9];
  uint64_t v12 = type metadata accessor for AudioDestination();
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  }
  uint64_t v14 = a1 + a2[10];
  uint64_t v15 = type metadata accessor for ResponseMode();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  uint64_t v16 = a1 + a2[11];
  uint64_t v17 = type metadata accessor for MultiUserContext();
  uint64_t v18 = *(void *)(v17 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17)) {
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  }
  swift_bridgeObjectRelease();
  uint64_t v19 = a1 + a2[18];
  uint64_t v20 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  uint64_t v21 = a1 + a2[19];
  uint64_t v22 = type metadata accessor for SiriVoiceGender();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(v21, v22);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = a1 + a2[24];
  uint64_t v24 = type metadata accessor for PersonalDomainsAuthenticationMode();
  uint64_t v25 = *(void *)(v24 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24)) {
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
  }
  uint64_t v26 = a1 + a2[25];
  uint64_t v27 = type metadata accessor for BargeInContext();
  uint64_t v28 = *(void *)(v27 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27)) {
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
  }
  uint64_t v29 = a1 + a2[26];
  uint64_t v30 = type metadata accessor for Restrictions();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(v29, v30);
  uint64_t v31 = a1 + a2[27];
  uint64_t v32 = type metadata accessor for HomeInfo();
  uint64_t v33 = *(void *)(v32 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32)) {
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

unint64_t SiriKitEventContext.description.getter()
{
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  uint64_t v1 = v0[10];
  uint64_t v2 = (void *)v0[11];
  swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._uint64_t countAndFlagsBits = 32;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  if (v0[3])
  {
    uint64_t v5 = v0[2];
    uint64_t v6 = (void *)v0[3];
  }
  else
  {
    uint64_t v6 = (void *)0xE300000000000000;
    uint64_t v5 = 7104878;
  }
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 32;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = 0xD000000000000010;
  v9._object = (void *)0x80000001BA06E910;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  uint64_t v11 = v0[12];
  uint64_t v10 = (void *)v0[13];
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = v11;
  v12._object = v10;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRetain();
  v14._uint64_t countAndFlagsBits = 0x7463617265746E69;
  v14._object = (void *)0xEF203A64496E6F69;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0xD000000000000028;
}

void ConversationRequestProcessor.handleNLRepetitionMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RequestType();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  Swift::String v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v65 - v9;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
  id v12 = a1;
  Swift::String v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v69 = v5;
    uint64_t v16 = (uint8_t *)v15;
    unint64_t v66 = (void *)swift_slowAlloc();
    id v67 = v10;
    uint64_t v68 = v8;
    *(_DWORD *)uint64_t v16 = 138412290;
    v72[4] = (uint64_t)v12;
    id v17 = v12;
    uint64_t v70 = (uint8_t *)v4;
    id v18 = v12;
    id v19 = v17;
    Swift::String v8 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v20 = v66;
    *unint64_t v66 = v18;

    uint64_t v4 = (uint64_t)v70;
    _os_log_impl(&dword_1B9C64000, v13, v14, "ConversationBridge handling message: %@", v16, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v10 = v67;
    MEMORY[0x1BA9E48C0](v20, -1, -1);
    uint64_t v21 = v16;
    uint64_t v5 = v69;
    MEMORY[0x1BA9E48C0](v21, -1, -1);
  }
  else
  {
  }
  uint64_t v22 = (*(uint64_t (**)(void))(*(void *)v2 + 592))();
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v24 = v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v24, v4);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E4FA2448], v4);
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2(&lazy protocol witness table cache variable for type RequestType and conformance RequestType, MEMORY[0x1E4FA2460]);
    LOBYTE(v24) = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v25 = *(void (**)(char *, uint64_t))(v5 + 8);
    v25(v8, v4);
    v25(v10, v4);
    if (v24)
    {
      uint64_t v26 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
      unint64_t v28 = v27;
      uint64_t v29 = (unint64_t *)(v23
                               + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
      swift_beginAccess();
      unint64_t v30 = *v29;
      if (*v29 >> 62 == 1)
      {
        uint64_t v31 = *(void *)((v30 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
        uint64_t v32 = *(void *)((v30 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
        swift_retain();
        BOOL v33 = v31 == v26 && v32 == v28;
        if (!v33 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          swift_bridgeObjectRelease();
          uint64_t v53 = Logger.logObject.getter();
          os_log_type_t v62 = static os_log_type_t.info.getter();
          if (!os_log_type_enabled(v53, v62))
          {

            swift_release();
            goto LABEL_46;
          }
          int v63 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)int v63 = 0;
          _os_log_impl(&dword_1B9C64000, v53, v62, "RC already selected. Not handling NLRepetitionMessage.", v63, 2u);
          MEMORY[0x1BA9E48C0](v63, -1, -1);
          swift_release();
LABEL_33:
          swift_release();

          return;
        }
        swift_release();
      }
      unint64_t v35 = *v29;
      uint64_t v34 = (void *)v29[1];
      outlined copy of ConversationRequestProcessorTurnState.SpeechState(v35, v34);
      uint64_t v36 = ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(v26, v28, v35, v34);
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v35, v34);
      if (v36)
      {
        char v37 = (*(uint64_t (**)(void))(*(void *)v36 + 400))();
        if (ResultCandidateProcessingStatus.rawValue.getter(v37) == 0x64656C65636E6163 && v38 == 0xE800000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
          uint64_t v41 = swift_bridgeObjectRelease();
          if ((v40 & 1) == 0)
          {
            uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 864))(v41);
            if (v42)
            {
              uint64_t v43 = v42;
              uint64_t v44 = (*(uint64_t (**)(void))(*(void *)v42 + 120))();
              swift_bridgeObjectRelease();
              if (!v44)
              {
                uint64_t v64 = NLRepetitionMessage.repetitionResults.getter();
                (*(void (**)(uint64_t))(*(void *)v43 + 128))(v64);
                swift_bridgeObjectRetain();
                uint64_t v45 = Logger.logObject.getter();
                os_log_type_t v46 = static os_log_type_t.debug.getter();
                if (!os_log_type_enabled(v45, v46))
                {

                  swift_release();
                  swift_release();
                  swift_bridgeObjectRelease_n();
                  goto LABEL_46;
                }
                uint64_t v47 = (uint8_t *)swift_slowAlloc();
                uint64_t v48 = swift_slowAlloc();
                v72[0] = v48;
                *(_DWORD *)uint64_t v47 = 136315138;
                uint64_t v70 = v47 + 4;
                swift_bridgeObjectRetain();
                uint64_t v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, v72);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                uint64_t v49 = "Cached NL repetition results in ResultCandidateState for RC ID: %s";
                goto LABEL_49;
              }
              swift_bridgeObjectRetain();
              uint64_t v45 = Logger.logObject.getter();
              os_log_type_t v46 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v45, v46))
              {
                uint64_t v47 = (uint8_t *)swift_slowAlloc();
                uint64_t v48 = swift_slowAlloc();
                v72[0] = v48;
                *(_DWORD *)uint64_t v47 = 136315138;
                uint64_t v70 = v47 + 4;
                swift_bridgeObjectRetain();
                uint64_t v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, v72);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                uint64_t v49 = "Repetition result is already set for this RC ID: %s. This should not happen as there is only one N"
                      "LRepetition message for one RC.";
LABEL_49:
                _os_log_impl(&dword_1B9C64000, v45, v46, v49, v47, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x1BA9E48C0](v48, -1, -1);
                MEMORY[0x1BA9E48C0](v47, -1, -1);
                swift_release();

                swift_release();
                goto LABEL_46;
              }

              swift_bridgeObjectRelease_n();
              swift_release();
              goto LABEL_45;
            }
            swift_bridgeObjectRetain();
            uint64_t v57 = Logger.logObject.getter();
            os_log_type_t v58 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v57, v58))
            {
              uint64_t v59 = (uint8_t *)swift_slowAlloc();
              uint64_t v60 = swift_slowAlloc();
              v72[0] = v60;
              *(_DWORD *)uint64_t v59 = 136315138;
              swift_bridgeObjectRetain();
              uint64_t v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, v72);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              uint64_t v61 = "RC ID:%s is not a speech-based RC. Not revealing ASR.";
              goto LABEL_38;
            }
            goto LABEL_44;
          }
        }
        swift_bridgeObjectRetain();
        uint64_t v57 = Logger.logObject.getter();
        os_log_type_t v58 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v57, v58))
        {
          uint64_t v59 = (uint8_t *)swift_slowAlloc();
          uint64_t v60 = swift_slowAlloc();
          v72[0] = v60;
          *(_DWORD *)uint64_t v59 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, v72);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          uint64_t v61 = "RC ID:%s has already been canceled. Not handling NLRepetitionMessage.";
LABEL_38:
          _os_log_impl(&dword_1B9C64000, v57, v58, v61, v59, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v60, -1, -1);
          MEMORY[0x1BA9E48C0](v59, -1, -1);
          swift_release();

          goto LABEL_46;
        }
LABEL_44:

        swift_bridgeObjectRelease_n();
LABEL_45:
        swift_release();
        goto LABEL_46;
      }
      swift_bridgeObjectRelease();
      uint64_t v53 = Logger.logObject.getter();
      uint64_t v54 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v53, (os_log_type_t)v54))
      {
        uint64_t v55 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v55 = 0;
        uint64_t v56 = "RC State missing. SpeechBasedRCState should be created before NLRepetitionMessage.";
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v53 = Logger.logObject.getter();
      LOBYTE(v54) = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v53, (os_log_type_t)v54))
      {
        uint64_t v55 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v55 = 0;
        uint64_t v56 = "Request is not a speech request. Not handling NLRepetitionMessage";
LABEL_32:
        _os_log_impl(&dword_1B9C64000, v53, (os_log_type_t)v54, v56, v55, 2u);
        MEMORY[0x1BA9E48C0](v55, -1, -1);
        goto LABEL_33;
      }
    }

LABEL_46:
    swift_release();
    return;
  }
  uint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v52 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v52 = 0;
    _os_log_impl(&dword_1B9C64000, v50, v51, "Request not active. Not handling NLRepetitionMessage.", v52, 2u);
    MEMORY[0x1BA9E48C0](v52, -1, -1);
  }
}

void ConversationRequestProcessor.handleNLResultCandidateMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RequestType();
  uint64_t v118 = *(void (***)(void, void, void))(v4 - 8);
  uint64_t v119 = v4;
  MEMORY[0x1F4188790](v4);
  os_log_t v117 = (os_log_t)((char *)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for UserID();
  uint64_t v114 = *(void *)(v6 - 8);
  char v115 = (void *)v6;
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v112 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v113 = (char *)&v109 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SelectedUserAttributes?);
  MEMORY[0x1F4188790](v10 - 8);
  id v12 = (char *)&v109 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationBridge);
  id v15 = a1;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    id v18 = (uint8_t *)swift_slowAlloc();
    Swift::String v111 = (void *)swift_slowAlloc();
    *(_DWORD *)id v18 = 138412290;
    v121[0] = v15;
    id v19 = v15;
    uint64_t v116 = (void (**)(void, void, void))v14;
    uint64_t v20 = v1;
    id v21 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v22 = v111;
    *Swift::String v111 = v15;

    uint64_t v2 = v20;
    uint64_t v14 = (uint64_t)v116;
    _os_log_impl(&dword_1B9C64000, v16, v17, "ConversationBridge handling message: %@", v18, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v22, -1, -1);
    MEMORY[0x1BA9E48C0](v18, -1, -1);
  }
  else
  {
  }
  uint64_t v23 = (*(uint64_t (**)(void))(*(void *)v2 + 592))();
  if (v23)
  {
    uint64_t v24 = v23;
    if (!ConversationRequestProcessorTurnState.requestSupportedForOnDeviceExecution()())
    {
      id v60 = v15;
      swift_retain_n();
      uint64_t v61 = v24;
      id v62 = v60;
      int v63 = Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v63, v64))
      {
        uint64_t v65 = swift_slowAlloc();
        unint64_t v66 = (void *)swift_slowAlloc();
        char v115 = v66;
        uint64_t v116 = (void (**)(void, void, void))swift_slowAlloc();
        Class v122 = v116;
        *(_DWORD *)uint64_t v65 = 138412546;
        v121[0] = v62;
        id v67 = v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *unint64_t v66 = v62;

        *(_WORD *)(v65 + 12) = 2080;
        uint64_t v68 = v61 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
        swift_beginAccess();
        os_log_t v69 = v117;
        uint64_t v70 = v118;
        uint64_t v71 = v119;
        ((void (**)(os_log_t, uint64_t, uint64_t))v118)[2](v117, v68, v119);
        uint64_t v72 = RequestType.rawValue.getter();
        unint64_t v74 = v73;
        ((void (*)(os_log_t, uint64_t))v70[1])(v69, v71);
        uint64_t v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v74, (uint64_t *)&v122);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v63, v64, "%@ is not supported for this requestType: %s", (uint8_t *)v65, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v75 = v115;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v75, -1, -1);
        uint64_t v76 = v116;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v76, -1, -1);
        MEMORY[0x1BA9E48C0](v65, -1, -1);
        swift_release();

        return;
      }

      goto LABEL_23;
    }
    uint64_t v119 = v2;
    uint64_t v25 = (void (**)(void, void, void))v15;
    uint64_t v26 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
    unint64_t v28 = v27;
    uint64_t v29 = (unint64_t *)(v24 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    unint64_t v31 = *v29;
    unint64_t v30 = (void *)v29[1];
    outlined copy of ConversationRequestProcessorTurnState.SpeechState(v31, v30);
    uint64_t v32 = (Swift::String *)ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)((uint64_t)v26, v28, v31, v30);
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v31, v30);
    if (!v32)
    {
      swift_bridgeObjectRetain();
      char v77 = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v77, v78))
      {
        uint64_t v79 = (uint8_t *)swift_slowAlloc();
        uint64_t v80 = (void (**)(void, void, void))swift_slowAlloc();
        Class v122 = v80;
        *(_DWORD *)uint64_t v79 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v26, v28, (uint64_t *)&v122);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B9C64000, v77, v78, "Received NL result before RC state is created for RC ID: %s ..this may happen if no ASR or text input message was received before the NL output message is received from the message bus", v79, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v80, -1, -1);
        MEMORY[0x1BA9E48C0](v79, -1, -1);
LABEL_30:
        swift_release();

        return;
      }

      swift_bridgeObjectRelease_n();
      goto LABEL_48;
    }
    NLResultCandidateMessage.voiceIdScore.getter();
    uint64_t v118 = v25;
    NLResultCandidateMessage.voiceIdClassification.getter();
    static SelectedUserAttributes.defaultLowVoiceIdThreshold.getter();
    SelectedUserAttributes.init(score:classification:lowScoreThreshold:meetsUserSessionThreshold:meetsPersonalRequestThreshold:)();
    uint64_t v33 = type metadata accessor for SelectedUserAttributes();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v12, 0, 1, v33);
    uint64_t v34 = (*(uint64_t (**)(char *))(v32->_countAndFlagsBits + 768))(v12);
    char v35 = (*(uint64_t (**)(uint64_t))(v32->_countAndFlagsBits + 400))(v34);
    if (ResultCandidateProcessingStatus.rawValue.getter(v35) == 0x64656C65636E6163 && v36 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v38 & 1) == 0)
      {
        swift_retain_n();
        uint64_t v116 = (void (**)(void, void, void))v14;
        unint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.debug.getter();
        int v41 = v40;
        BOOL v42 = os_log_type_enabled(v39, v40);
        os_log_t v117 = v26;
        if (v42)
        {
          LODWORD(v111) = v41;
          uint64_t v43 = (uint8_t *)swift_slowAlloc();
          uint64_t v110 = (void (**)(void, void, void))swift_slowAlloc();
          Class v122 = v110;
          *(_DWORD *)uint64_t v43 = 136315138;
          uint64_t v44 = *(uint64_t (**)(uint64_t))(v32->_countAndFlagsBits + 800);
          uint64_t v45 = swift_retain();
          uint64_t v46 = v44(v45);
          unint64_t v48 = v47;
          swift_release();
          uint64_t v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v48, (uint64_t *)&v122);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v39, (os_log_type_t)v111, "Received NL output when RC state: %s", v43, 0xCu);
          uint64_t v49 = v110;
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v49, -1, -1);
          MEMORY[0x1BA9E48C0](v43, -1, -1);
        }
        else
        {

          uint64_t v50 = swift_release_n();
        }
        uint64_t v87 = (*(uint64_t (**)(uint64_t))(v32->_countAndFlagsBits + 304))(v50);
        swift_bridgeObjectRelease();
        if (v87)
        {
          swift_bridgeObjectRetain();
          char v77 = Logger.logObject.getter();
          os_log_type_t v81 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v77, v81))
          {
            uint64_t v82 = (uint8_t *)swift_slowAlloc();
            uint64_t v84 = (void (**)(void, void, void))swift_slowAlloc();
            Class v122 = v84;
            *(_DWORD *)uint64_t v82 = 136315138;
            swift_bridgeObjectRetain();
            uint64_t v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v117, v28, (uint64_t *)&v122);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            uint64_t v85 = "Already received NL output for this RC ID: %s .. this happened because we received multiple NL outputs"
                  " for the same RC ID.";
            goto LABEL_29;
          }
LABEL_46:

          swift_bridgeObjectRelease_n();
LABEL_47:
          swift_release();
LABEL_48:
          swift_release();
          return;
        }
        swift_bridgeObjectRelease();
        uint64_t v88 = v113;
        UserIdAwareResultCandidateMessageBase.userId.getter();
        uint64_t v89 = UserID.sharedUserId.getter();
        uint64_t v91 = v90;
        uint64_t v92 = *(void (**)(char *, void *))(v114 + 8);
        v92(v88, v115);
        if (v89 == UserID.sharedUserId.getter() && v91 == v93)
        {
          swift_bridgeObjectRelease_n();
LABEL_53:
          ConversationRequestProcessor.handleNLResultCandidateMessage(_:rcState:)((uint64_t)v118, v32);
          goto LABEL_47;
        }
        char v94 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v94) {
          goto LABEL_53;
        }
        uint64_t v119 = v24;
        uint64_t v95 = v118;
        swift_retain_n();
        uint64_t v96 = v95;
        uint64_t v97 = Logger.logObject.getter();
        os_log_type_t v98 = static os_log_type_t.error.getter();
        int v99 = v98;
        if (os_log_type_enabled(v97, v98))
        {
          uint64_t v100 = swift_slowAlloc();
          uint64_t v118 = (void (**)(void, void, void))swift_slowAlloc();
          Class v122 = v118;
          *(_DWORD *)uint64_t v100 = 136315394;
          uint64_t v114 = v100 + 4;
          uint64_t v101 = v112;
          os_log_t v117 = v97;
          UserIdAwareResultCandidateMessageBase.userId.getter();
          uint64_t v102 = UserID.sharedUserId.getter();
          LODWORD(v116) = v99;
          unint64_t v104 = v103;
          v92(v101, v115);
          uint64_t v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v104, (uint64_t *)&v122);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v100 + 12) = 2080;
          _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E4FA26E0]);
          uint64_t v105 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v105, v106, (uint64_t *)&v122);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          os_log_t v107 = v117;
          _os_log_impl(&dword_1B9C64000, v117, (os_log_type_t)v116, "Discrepency in userId. UserId received with NL RC: %s, but RCState userId: %s", (uint8_t *)v100, 0x16u);
          uint64_t v108 = v118;
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v108, -1, -1);
          MEMORY[0x1BA9E48C0](v100, -1, -1);
          swift_release();
          swift_release();

          return;
        }

        swift_release();
LABEL_23:
        swift_release_n();
        return;
      }
    }
    swift_bridgeObjectRetain();
    char v77 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v77, v81))
    {
      uint64_t v82 = (uint8_t *)swift_slowAlloc();
      uint64_t v83 = (uint64_t)v26;
      uint64_t v84 = (void (**)(void, void, void))swift_slowAlloc();
      Class v122 = v84;
      *(_DWORD *)uint64_t v82 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v28, (uint64_t *)&v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v85 = "RC ID:%s has already been canceled. Not handling NLResultCandidateMessage any further.";
LABEL_29:
      _os_log_impl(&dword_1B9C64000, v77, v81, v85, v82, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v84, -1, -1);
      MEMORY[0x1BA9E48C0](v82, -1, -1);
      swift_release();
      goto LABEL_30;
    }
    goto LABEL_46;
  }
  swift_retain_n();
  os_log_type_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v51, v52))
  {

    goto LABEL_23;
  }
  uint64_t v53 = (uint8_t *)swift_slowAlloc();
  uint64_t v54 = swift_slowAlloc();
  v121[0] = (id)v54;
  *(_DWORD *)uint64_t v53 = 136315138;
  uint64_t v55 = (*(uint64_t (**)(void))(*(void *)v2 + 384))();
  switch(v57)
  {
    case 1:
      outlined consume of ConversationRequestProcessor.State(v55, (void *)v56, 1);
      uint64_t v58 = 0xD00000000000001DLL;
      uint64_t v59 = "awaiting request context data";
      goto LABEL_33;
    case 2:
      outlined consume of ConversationRequestProcessor.State(v55, (void *)v56, 2);
      unint64_t v86 = 0xEC00000064657472;
      uint64_t v58 = 0x617473206E727574;
      break;
    case 3:
      if (v55 | v56) {
        uint64_t v58 = 0x6574656C706D6F63;
      }
      else {
        uint64_t v58 = 1701602409;
      }
      if (v55 | v56) {
        unint64_t v86 = 0xE800000000000000;
      }
      else {
        unint64_t v86 = 0xE400000000000000;
      }
      break;
    default:
      uint64_t v58 = 0xD000000000000011;
      outlined consume of ConversationRequestProcessor.State(v55, (void *)v56, 0);
      uint64_t v59 = "candidate request";
LABEL_33:
      unint64_t v86 = (unint64_t)(v59 - 32) | 0x8000000000000000;
      break;
  }
  Class v122 = (void (**)(void, void, void))getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v86, (uint64_t *)v121);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  _os_log_impl(&dword_1B9C64000, v51, v52, "Got DirectActionResultCandidateMessage when in state %s: Ignoring", v53, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1BA9E48C0](v54, -1, -1);
  MEMORY[0x1BA9E48C0](v53, -1, -1);
}

Swift::Bool __swiftcall ConversationRequestProcessorTurnState.requestSupportedForOnDeviceExecution()()
{
  uint64_t v1 = type metadata accessor for RequestType();
  uint64_t v2 = *(void **)(v1 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v1);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v3);
  uint64_t v32 = (char *)&v32 - v7;
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v34 = (char *)&v32 - v9;
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  char v35 = (char *)&v32 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v36 = (char *)&v32 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  os_log_type_t v40 = (char *)&v32 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  id v18 = (char *)&v32 - v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v32 - v19;
  uint64_t v21 = v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  swift_beginAccess();
  char v38 = (void (*)(char *, uint64_t, uint64_t))v2[2];
  uint64_t v39 = v21;
  v38(v20, v21, v1);
  uint64_t v22 = *MEMORY[0x1E4FA2448];
  char v37 = (void (*)(char *, uint64_t, uint64_t))v2[13];
  v37(v18, v22, v1);
  lazy protocol witness table accessor for type RequestType and conformance RequestType();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v33 = v5;
  if (v43 == v41 && v44 == v42) {
    char v23 = 1;
  }
  else {
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = (void (*)(char *, uint64_t))v2[1];
  v24(v18, v1);
  v24(v20, v1);
  if (v23) {
    goto LABEL_6;
  }
  v38(v40, v39, v1);
  uint64_t v26 = v36;
  v37(v36, *MEMORY[0x1E4FA2430], v1);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v43 == v41 && v44 == v42)
  {
    swift_bridgeObjectRelease_n();
    char v25 = 1;
    unint64_t v27 = v40;
LABEL_10:
    v24(v26, v1);
    v24(v27, v1);
    return v25 & 1;
  }
  char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v24(v26, v1);
  v24(v40, v1);
  if ((v29 & 1) == 0)
  {
    v38(v35, v39, v1);
    uint64_t v26 = v34;
    v37(v34, *MEMORY[0x1E4FA2420], v1);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v43 == v41 && v44 == v42)
    {
      swift_bridgeObjectRelease_n();
      char v25 = 1;
      unint64_t v27 = v35;
      goto LABEL_10;
    }
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24(v26, v1);
    v24(v35, v1);
    if ((v30 & 1) == 0)
    {
      unint64_t v31 = v32;
      v38(v32, v39, v1);
      unint64_t v27 = v31;
      uint64_t v26 = v33;
      v37(v33, *MEMORY[0x1E4FA2438], v1);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v43 == v41 && v44 == v42) {
        char v25 = 1;
      }
      else {
        char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
  }
LABEL_6:
  char v25 = 1;
  return v25 & 1;
}

uint64_t ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  if (!(a3 >> 62))
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)a3 + 88);
    outlined copy of ConversationRequestProcessorTurnState.SpeechState(a3, a4);
    uint64_t v11 = swift_bridgeObjectRetain();
    uint64_t v12 = v10(v11);
    if (*(void *)(v12 + 16))
    {
      unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
      if (v14)
      {
        uint64_t v7 = *(void *)(*(void *)(v12 + 56) + 8 * v13);
        swift_retain();
        swift_bridgeObjectRelease();
        outlined consume of ConversationRequestProcessorTurnState.SpeechState(a3, a4);
        swift_bridgeObjectRelease();
        return v7;
      }
    }
    swift_bridgeObjectRelease();
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(a3, a4);
    swift_bridgeObjectRelease();
    return 0;
  }
  if (a3 >> 62 != 1) {
    return 0;
  }
  uint64_t v7 = a3 & 0x3FFFFFFFFFFFFFFFLL;
  BOOL v8 = *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x10) == a1 && *(void *)((a3 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) == a2;
  if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  swift_retain();
  return v7;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TTResponseMessage.MitigationDecision(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790]();
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  int v5 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v4, a1);
  if (v5 == *MEMORY[0x1E4FA2078]) {
    return 0x64657463656C6573;
  }
  if (v5 == *MEMORY[0x1E4FA2080]) {
    return 0x657461676974696DLL;
  }
  if (v5 == *MEMORY[0x1E4FA2070])
  {
    unsigned int v7 = 1652121965;
    return v7 | 0x74694D6500000000;
  }
  if (v5 == *MEMORY[0x1E4FA2068])
  {
    unsigned int v7 = 1668444006;
    return v7 | 0x74694D6500000000;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return 0;
}

uint64_t ResultCandidateState.nlUserParses.getter()
{
  return RequestContextData.Builder.bargeInModes.getter();
}

void ConversationRequestProcessor.handleNLResultCandidateMessage(_:rcState:)(uint64_t a1, Swift::String *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v3 - 8);
  int v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t countAndFlagsBits = a2[1]._countAndFlagsBits;
  unint64_t object = (unint64_t)a2[1]._object;
  swift_bridgeObjectRetain();
  uint64_t v14 = NLResultCandidateMessageBase.userParses.getter();
  (*(void (**)(uint64_t))(a2->_countAndFlagsBits + 312))(v14);
  NLResultCandidateMessageBase.responseStatusCode.getter();
  (*(void (**)(char *))(a2->_countAndFlagsBits + 600))(v11);
  NLResultCandidateMessageBase.languageVariantResult.getter();
  (*(void (**)(char *))(a2->_countAndFlagsBits + 336))(v8);
  uint64_t v15 = NLResultCandidateMessageBase.responseVariantResult.getter();
  (*(void (**)(uint64_t))(a2->_countAndFlagsBits + 360))(v15);
  (*(void (**)(uint64_t))(a2->_countAndFlagsBits + 408))(5);
  NLResultCandidateMessageBase.fallbackParse.getter();
  (*(void (**)(char *))(a2->_countAndFlagsBits + 696))(v5);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v22 = v20;
    *(_DWORD *)uint64_t v19 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, object, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v17, v18, "Cached NL output in ResultCandidateState for RC ID: %s", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v20, -1, -1);
    MEMORY[0x1BA9E48C0](v19, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  ConversationRequestProcessor.maybeRunExecution(rcState:)(a2);
}

uint64_t ResultCandidateState.nlUserParses.setter(uint64_t a1)
{
  return ResultCandidateState.nlUserParses.setter(a1, &OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlUserParses, MEMORY[0x1E4FBC898]);
}

uint64_t ResultCandidateState.nlUserParses.setter(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6 = (uint64_t *)(v3 + *a2);
  swift_beginAccess();
  uint64_t v7 = *v6;
  *uint64_t v6 = a1;
  return a3(v7);
}

uint64_t ResultCandidateState.nlResponseStatusCode.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlResponseStatusCode;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t ResultCandidateState.nlLanguageVariantResult.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlLanguageVariantResult, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
}

uint64_t ResultCandidateState.fallbackParse.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_fallbackParse, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
}

void ConversationRequestProcessor.maybeRunExecution(rcState:)(Swift::String *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RequestType();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v165 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1F4188790](v8 - 8);
  os_log_t v180 = (os_log_t)((char *)&v165 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  MEMORY[0x1F4188790](v10 - 8);
  Swift::String v179 = (char *)&v165 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  uint64_t v177 = *(void *)(v12 - 8);
  uint64_t v178 = v12;
  MEMORY[0x1F4188790](v12);
  Swift::String v176 = (char *)&v165 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for RoutingDecision(0);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v165 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v175 = (uint64_t)&v165 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v165 - v21;
  char v23 = *(uint64_t (**)(void))(a1->_countAndFlagsBits + 400);
  unsigned int v24 = ((unsigned __int8 (*)(uint64_t))v23)(v20);
  if (v24 > 0xF) {
    goto LABEL_20;
  }
  if (((1 << v24) & 0xC060) == 0)
  {
    if (v24 == 7)
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      __swift_project_value_buffer(v36, (uint64_t)static Logger.conversationBridge);
      swift_retain();
      char v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v37, v38))
      {

        swift_release();
        return;
      }
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      v182[0] = v40;
      *(_DWORD *)uint64_t v39 = 136315138;
      uint64_t countAndFlagsBits = a1[1]._countAndFlagsBits;
      unint64_t object = (unint64_t)a1[1]._object;
      swift_bridgeObjectRetain();
      uint64_t v183 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, object, v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v37, v38, "Execution already in progress for TRP/RC %s, will not begin execution again", v39, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v40, -1, -1);
      uint64_t v43 = v39;
LABEL_24:
      MEMORY[0x1BA9E48C0](v43, -1, -1);

      return;
    }
LABEL_20:
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    __swift_project_value_buffer(v46, (uint64_t)static Logger.conversationBridge);
    swift_retain_n();
    char v37 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v37, v47))
    {

      swift_release_n();
      return;
    }
    unint64_t v48 = (uint8_t *)swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    v182[0] = v49;
    *(_DWORD *)unint64_t v48 = 136315138;
    char v50 = v23();
    unint64_t v51 = ResultCandidateProcessingStatus.rawValue.getter(v50);
    uint64_t v183 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, v182);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v37, v47, "Not running execution, unexpected state %s", v48, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v49, -1, -1);
    uint64_t v43 = v48;
    goto LABEL_24;
  }
  v174 = v7;
  uint64_t v25 = (*(uint64_t (**)(void))(v1->_countAndFlagsBits + 384))();
  uint64_t v28 = v25;
  if (v27 == 2)
  {
    uint64_t v169 = v5;
    uint64_t v170 = v4;
    uint64_t v173 = v26;
    if (v23() == 15)
    {
      uint64_t v29 = *MEMORY[0x1E4FA20C0];
      uint64_t v30 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
      uint64_t v31 = *(void *)(v30 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 104))(v22, v29, v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v22, 0, 1, v30);
    }
    else
    {
      uint64_t v44 = *(uint64_t *)((char *)&v1[1]._object
                       + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_featureChecker);
      uint64_t v45 = *(uint64_t *)((char *)&v1[2]._countAndFlagsBits
                       + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_featureChecker);
      __swift_project_boxed_opaque_existential_1((uint64_t *)((char *)&v1->_countAndFlagsBits+ OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_featureChecker), v44);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v45 + 32))(v44, v45))
      {
        (*(void (**)(void))(a1->_countAndFlagsBits + 568))();
        RoutingDecision.value.getter(v22);
        outlined destroy of RoutingDecision((uint64_t)v16, type metadata accessor for RoutingDecision);
      }
      else
      {
        outlined init with copy of ReferenceResolutionClientProtocol?(v28 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_nlRoutingDecision, (uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
      }
    }
    char v53 = (*(uint64_t (**)(Swift::String *, char *))(v2->_countAndFlagsBits + 912))(a1, v22);
    uint64_t v172 = (*(uint64_t (**)(void))(a1->_countAndFlagsBits + 376))();
    if (!v172)
    {
      if (v53)
      {
        if (one-time initialization token for conversationBridge != -1) {
          swift_once();
        }
        uint64_t v54 = type metadata accessor for Logger();
        __swift_project_value_buffer(v54, (uint64_t)static Logger.conversationBridge);
        uint64_t v55 = Logger.logObject.getter();
        os_log_type_t v56 = static os_log_type_t.debug.getter();
        BOOL v57 = os_log_type_enabled(v55, v56);
        id v58 = v173;
        if (v57)
        {
          uint64_t v59 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v59 = 0;
          _os_log_impl(&dword_1B9C64000, v55, v56, "POMMES result is not yet available. Holding off on running execution until Pommes results are received.", v59, 2u);
          MEMORY[0x1BA9E48C0](v59, -1, -1);
        }

        goto LABEL_68;
      }
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v60 = type metadata accessor for Logger();
      __swift_project_value_buffer(v60, (uint64_t)static Logger.conversationBridge);
      uint64_t v61 = Logger.logObject.getter();
      os_log_type_t v62 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v61, v62))
      {
        int v63 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int v63 = 0;
        _os_log_impl(&dword_1B9C64000, v61, v62, "Proceeding without waiting for POMMES result", v63, 2u);
        MEMORY[0x1BA9E48C0](v63, -1, -1);
      }
    }
    uint64_t v64 = (*(uint64_t (**)(void))(a1->_countAndFlagsBits + 872))();
    uint64_t v171 = v28;
    if (!v64) {
      goto LABEL_57;
    }
    uint64_t v65 = v64;
    unint64_t v66 = v22;
    id v67 = *(uint64_t (**)(void))(*(void *)v64 + 216);
    uint64_t v167 = *(void *)v64 + 216;
    uint64_t v168 = (uint64_t (*)(uint64_t))v67;
    uint64_t v68 = v67();
    if (!v69)
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v74 = type metadata accessor for Logger();
      __swift_project_value_buffer(v74, (uint64_t)static Logger.conversationBridge);
      uint64_t v75 = Logger.logObject.getter();
      os_log_type_t v76 = static os_log_type_t.debug.getter();
      BOOL v77 = os_log_type_enabled(v75, v76);
      id v78 = v173;
      if (v77)
      {
        uint64_t v79 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v79 = 0;
        _os_log_impl(&dword_1B9C64000, v75, v76, "Not running execution since TTResponseMessage has not been received yet", v79, 2u);
        MEMORY[0x1BA9E48C0](v79, -1, -1);
      }
      swift_release();
      swift_release();

      swift_release();
      uint64_t v80 = (uint64_t)v22;
      goto LABEL_69;
    }
    uint64_t v70 = v69;
    if (v53)
    {
      uint64_t v71 = v68;
      Swift::String v166 = *(uint64_t (**)(void))(*(void *)v65 + 240);
      uint64_t v72 = v166();
      if (!v73)
      {
        swift_bridgeObjectRelease();
        goto LABEL_79;
      }
      if (v71 == v72 && v70 == v73)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_56:
        uint64_t v22 = v66;
LABEL_57:
        char v81 = v23();
        if (ResultCandidateProcessingStatus.rawValue.getter(v81) == 0x64656C65636E6163 && v82 == 0xE800000000000000) {
          goto LABEL_59;
        }
        char v83 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v84 = swift_bridgeObjectRelease();
        if (v83) {
          goto LABEL_61;
        }
        char v93 = ((uint64_t (*)(uint64_t))v23)(v84);
        if (ResultCandidateProcessingStatus.rawValue.getter(v93) == 0xD000000000000013 && v94 == 0x80000001BA061150)
        {
LABEL_59:
          swift_bridgeObjectRelease();
        }
        else
        {
          char v95 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v95 & 1) == 0)
          {
            if (one-time initialization token for conversationBridge != -1) {
              swift_once();
            }
            uint64_t v96 = type metadata accessor for Logger();
            uint64_t v97 = __swift_project_value_buffer(v96, (uint64_t)static Logger.conversationBridge);
            swift_retain();
            uint64_t v168 = (uint64_t (*)(uint64_t))v97;
            os_log_type_t v98 = Logger.logObject.getter();
            os_log_type_t v99 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v98, v99))
            {
              uint64_t v100 = (uint8_t *)swift_slowAlloc();
              uint64_t v101 = swift_slowAlloc();
              v182[0] = v101;
              *(_DWORD *)uint64_t v100 = 136315138;
              uint64_t v167 = (uint64_t)(v100 + 4);
              uint64_t v102 = v22;
              uint64_t v104 = a1[1]._countAndFlagsBits;
              unint64_t v103 = (unint64_t)a1[1]._object;
              swift_bridgeObjectRetain();
              uint64_t v105 = v104;
              uint64_t v22 = v102;
              uint64_t v183 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v105, v103, v182);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_1B9C64000, v98, v99, "Attempting execution for RC ID: %s", v100, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1BA9E48C0](v101, -1, -1);
              MEMORY[0x1BA9E48C0](v100, -1, -1);
            }
            else
            {

              uint64_t v106 = swift_release();
            }
            uint64_t v120 = (*(uint64_t (**)(uint64_t))(a1->_countAndFlagsBits + 304))(v106);
            if (v120)
            {
              uint64_t v121 = v120;
              Class v122 = v176;
              (*(void (**)(void))(a1->_countAndFlagsBits + 592))();
              Swift::String v123 = *(uint64_t (**)(uint64_t))(a1->_countAndFlagsBits + 328);
              uint64_t v124 = v172;
              uint64_t v125 = swift_retain();
              uint64_t v126 = (uint64_t)v179;
              uint64_t v127 = v123(v125);
              uint64_t v128 = (*(uint64_t (**)(uint64_t))(a1->_countAndFlagsBits + 352))(v127);
              uint64_t v167 = v129;
              os_log_t v130 = v180;
              (*(void (**)(void))(a1->_countAndFlagsBits + 712))();
              uint64_t v131 = v175;
              outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v22, v175, (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
              type metadata accessor for NLResponse(0);
              uint64_t v132 = swift_allocObject();
              *(void *)(v132 + 16) = v121;
              uint64_t v133 = (char *)v132;
              (*(void (**)(uint64_t, char *, uint64_t))(v177 + 32))(v132 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlResponseStatusCode, v122, v178);
              outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v126, (uint64_t)&v133[OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_languageVariantResult], (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
              Swift::String v134 = (uint64_t *)&v133[OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_responseVariantResult];
              uint64_t v135 = v167;
              *Swift::String v134 = v128;
              v134[1] = v135;
              *(void *)&v133[OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_pommesInfo] = v124;
              outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v130, (uint64_t)&v133[OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_serverFallbackReason], &demangling cache variable for type metadata for ServerFallbackReason?);
              outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v131, (uint64_t)&v133[OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlRoutingDecision], (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
              uint64_t v136 = Logger.logObject.getter();
              os_log_type_t v137 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v136, v137))
              {
                id v138 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)id v138 = 0;
                _os_log_impl(&dword_1B9C64000, v136, v137, "Constructing ConversationUserInput from unranked results", v138, 2u);
                MEMORY[0x1BA9E48C0](v138, -1, -1);
              }

              uint64_t v139 = v171 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
              swift_beginAccess();
              uint64_t v141 = v169;
              uint64_t v140 = v170;
              Swift::String v142 = v174;
              (*(void (**)(char *, uint64_t, uint64_t))(v169 + 16))(v174, v139, v170);
              uint64_t v143 = (*(uint64_t (**)(Swift::String *, char *, char *))(v2->_countAndFlagsBits + 1256))(a1, v142, v133);
              (*(void (**)(char *, uint64_t))(v141 + 8))(v142, v140);
              id v144 = v173;
              if (v143)
              {
                (*(void (**)(void, uint64_t, uint64_t, uint64_t, void *, uint64_t, void *, uint64_t, void *, _BYTE))(**(void **)((char *)&v2->_countAndFlagsBits + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil) + 136))(0, 3, 8, v2[5]._countAndFlagsBits, v2[5]._object, v2[4]._countAndFlagsBits, v2[4]._object, a1[1]._countAndFlagsBits, a1[1]._object, v173[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTriggerlessFollowup]);
                v145 = Logger.logObject.getter();
                os_log_type_t v146 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(v145, v146))
                {
                  uint64_t v147 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)uint64_t v147 = 0;
                  _os_log_impl(&dword_1B9C64000, v145, v146, "Sending conversation user input to execution", v147, 2u);
                  MEMORY[0x1BA9E48C0](v147, -1, -1);
                }

                uint64_t v148 = *(uint64_t *)((char *)&v2[1]._object
                                  + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient);
                uint64_t v149 = *(uint64_t *)((char *)&v2[2]._countAndFlagsBits
                                  + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient);
                __swift_project_boxed_opaque_existential_1((uint64_t *)((char *)&v2->_countAndFlagsBits+ OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient), v148);
                (*(void (**)(uint64_t, void, _UNKNOWN **, uint64_t, uint64_t))(v149 + 24))(v143, *(uint64_t *)((char *)&v2->_countAndFlagsBits+ OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionBridgeProcessorDelegate), &protocol witness table for ConversationBridgeProcessorDelegate, v148, v149);
                swift_retain_n();
                id v150 = Logger.logObject.getter();
                os_log_type_t v151 = static os_log_type_t.debug.getter();
                if (os_log_type_enabled(v150, v151))
                {
                  uint64_t v152 = (uint8_t *)swift_slowAlloc();
                  uint64_t v153 = swift_slowAlloc();
                  Swift::String v179 = v133;
                  uint64_t v154 = v153;
                  uint64_t v183 = v153;
                  *(_DWORD *)uint64_t v152 = 136315138;
                  os_log_t v180 = (os_log_t)v22;
                  uint64_t v155 = ConversationUserInput.debugDescription.getter();
                  uint64_t v181 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v155, v156, &v183);
                  uint64_t v22 = (char *)v180;
                  id v144 = v173;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_release_n();
                  swift_bridgeObjectRelease();
                  _os_log_impl(&dword_1B9C64000, v150, v151, "Successfully sent: %s", v152, 0xCu);
                  swift_arrayDestroy();
                  MEMORY[0x1BA9E48C0](v154, -1, -1);
                  MEMORY[0x1BA9E48C0](v152, -1, -1);
                }
                else
                {

                  swift_release_n();
                }
                if (one-time initialization token for insightRequestSummaryLogger != -1) {
                  swift_once();
                }
                uint64_t v162 = type metadata accessor for InsightRequestSummaryLogger();
                uint64_t v163 = __swift_project_value_buffer(v162, (uint64_t)static Logger.insightRequestSummaryLogger);
                swift_retain();
                swift_retain();
                specialized InsightRequestSummaryLogger.emitDebug(_:)(v163, v2, a1);
                swift_release();
                swift_release();
                (*(void (**)(uint64_t))(a1->_countAndFlagsBits + 408))(7);
                if ((*(uint64_t (**)(Swift::String *))(v2->_countAndFlagsBits + 896))(a1))
                {
                  uint64_t v164 = *(void (**)(Swift::String *, uint64_t))(v2->_countAndFlagsBits + 1128);
                  swift_retain();
                  v164(a1, v143);

                  swift_release();
                }
                else
                {
                }
                swift_release();
                swift_release();
                swift_release();
              }
              else
              {
                uint64_t v159 = Logger.logObject.getter();
                os_log_type_t v160 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v159, v160))
                {
                  uint64_t v161 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)uint64_t v161 = 0;
                  _os_log_impl(&dword_1B9C64000, v159, v160, "Could not build ConversationUserInput", v161, 2u);
                  MEMORY[0x1BA9E48C0](v161, -1, -1);
                  swift_release();
                  swift_release();
                }
                else
                {
                  swift_release();

                  swift_release();
                }
              }
              goto LABEL_68;
            }
            unint64_t v86 = Logger.logObject.getter();
            os_log_type_t v157 = static os_log_type_t.debug.getter();
            if (!os_log_type_enabled(v86, v157)) {
              goto LABEL_67;
            }
            Swift::String v158 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)Swift::String v158 = 0;
            _os_log_impl(&dword_1B9C64000, v86, v157, "NL User parses is nil", v158, 2u);
            uint64_t v92 = v158;
            goto LABEL_65;
          }
        }
LABEL_61:
        if (one-time initialization token for conversationBridge != -1) {
          swift_once();
        }
        uint64_t v85 = type metadata accessor for Logger();
        __swift_project_value_buffer(v85, (uint64_t)static Logger.conversationBridge);
        swift_retain_n();
        unint64_t v86 = Logger.logObject.getter();
        os_log_type_t v87 = static os_log_type_t.info.getter();
        if (!os_log_type_enabled(v86, v87))
        {
          swift_release_n();
          goto LABEL_67;
        }
        uint64_t v88 = (uint8_t *)swift_slowAlloc();
        uint64_t v89 = swift_slowAlloc();
        v182[0] = v89;
        *(_DWORD *)uint64_t v88 = 136315138;
        uint64_t v90 = a1[1]._countAndFlagsBits;
        unint64_t v91 = (unint64_t)a1[1]._object;
        swift_bridgeObjectRetain();
        uint64_t v183 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v91, v182);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v86, v87, "Execution in progress for RC ID: %s. Not sending ConversationUserInput", v88, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v89, -1, -1);
        uint64_t v92 = v88;
LABEL_65:
        MEMORY[0x1BA9E48C0](v92, -1, -1);
LABEL_67:
        swift_release();

LABEL_68:
        swift_release();
        uint64_t v80 = (uint64_t)v22;
LABEL_69:
        outlined destroy of ReferenceResolutionClientProtocol?(v80, (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
        return;
      }
      char v107 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v107 & 1) == 0)
      {
LABEL_79:
        uint64_t v22 = v66;
        if (one-time initialization token for conversationBridge != -1) {
          swift_once();
        }
        uint64_t v108 = type metadata accessor for Logger();
        __swift_project_value_buffer(v108, (uint64_t)static Logger.conversationBridge);
        swift_retain_n();
        uint64_t v109 = Logger.logObject.getter();
        os_log_type_t v110 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v109, v110))
        {
          uint64_t v111 = swift_slowAlloc();
          uint64_t v112 = swift_slowAlloc();
          v182[0] = v112;
          *(_DWORD *)uint64_t v111 = 136315394;
          uint64_t v113 = v166();
          if (v114)
          {
            unint64_t v115 = v114;
          }
          else
          {
            uint64_t v113 = 7104878;
            unint64_t v115 = 0xE300000000000000;
          }
          uint64_t v183 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, v115, v182);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          uint64_t v116 = swift_bridgeObjectRelease();
          *(_WORD *)(v111 + 12) = 2080;
          uint64_t v117 = v168(v116);
          if (v118)
          {
            unint64_t v119 = v118;
          }
          else
          {
            uint64_t v117 = 0x3E6C696E3CLL;
            unint64_t v119 = 0xE500000000000000;
          }
          uint64_t v183 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v117, v119, v182);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v109, v110, "Not running execution since PommesInfo points to tcuId: %s whereas selectedTCUId is %s", (uint8_t *)v111, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v112, -1, -1);
          MEMORY[0x1BA9E48C0](v111, -1, -1);
          swift_release();
        }
        else
        {
          swift_release_n();
        }
        swift_release();

        goto LABEL_68;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_release();
    goto LABEL_56;
  }
  outlined consume of ConversationRequestProcessor.State(v25, v26, v27);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Logger.conversationBridge);
  os_log_t v180 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v180, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v34 = 0;
    _os_log_impl(&dword_1B9C64000, v180, v33, "Cannot run execution: No active turn?", v34, 2u);
    MEMORY[0x1BA9E48C0](v34, -1, -1);
  }
  os_log_t v35 = v180;
}

void ConversationRequestProcessor.handlePommesResultCandidateMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesError?);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v105 = (char *)&v96 - v11;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationBridge);
  id v14 = a1;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v102 = v7;
  unint64_t v103 = v6;
  uint64_t v104 = v10;
  if (v17)
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = (void *)swift_slowAlloc();
    uint64_t v106 = v2;
    *(_DWORD *)uint64_t v18 = 138412290;
    v108[1] = (uint64_t)v14;
    id v20 = v14;
    uint64_t v2 = v106;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v19 = v14;

    _os_log_impl(&dword_1B9C64000, v15, v16, "ExecutionBridge received message: %@", v18, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v19, -1, -1);
    MEMORY[0x1BA9E48C0](v18, -1, -1);
  }
  else
  {
  }
  uint64_t v21 = (*(uint64_t (**)(void))(*(void *)v2 + 592))();
  if (!v21)
  {
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl(&dword_1B9C64000, v44, v45, "Request already canceled. Not handling PommesResultCandidateMessage.", v46, 2u);
      MEMORY[0x1BA9E48C0](v46, -1, -1);
    }
    goto LABEL_39;
  }
  uint64_t v22 = v21;
  uint64_t v23 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  unint64_t v25 = v24;
  uint64_t v26 = (unint64_t *)(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  unint64_t v27 = *v26;
  uint64_t v28 = (void *)v26[1];
  if (v27 >> 62 == 1)
  {
    BOOL v29 = *(void *)((v27 & 0x3FFFFFFFFFFFFFFFLL) + 0x10) == v23
       && *(void *)((v27 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) == v25;
    if (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v64 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v44, v64))
      {

        goto LABEL_41;
      }
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v65 = 0;
      _os_log_impl(&dword_1B9C64000, v44, v64, "A different RC was already selected. Not handling PommesResultCandidateMessage.", v65, 2u);
      unint64_t v51 = v65;
      goto LABEL_37;
    }
  }
  id v100 = v14;
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(v27, v28);
  uint64_t v30 = (Swift::String *)ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(v23, v25, v27, v28);
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v27, v28);
  if (!v30)
  {
    swift_bridgeObjectRetain();
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v44, v47))
    {

      swift_bridgeObjectRelease_n();
      goto LABEL_41;
    }
    unint64_t v48 = (uint8_t *)swift_slowAlloc();
    unint64_t v49 = v25;
    uint64_t v50 = swift_slowAlloc();
    v108[0] = v50;
    *(_DWORD *)unint64_t v48 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v49, v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v44, v47, "Received PommesResultCandidateMessage before RC state was created for RC ID: %s. Dropping it on the floor.", v48, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v50, -1, -1);
    unint64_t v51 = v48;
LABEL_37:
    MEMORY[0x1BA9E48C0](v51, -1, -1);
    goto LABEL_38;
  }
  uint64_t v106 = v2;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v101 = v13;
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  BOOL v33 = os_log_type_enabled(v31, v32);
  uint64_t v99 = v23;
  if (v33)
  {
    uint64_t v34 = swift_slowAlloc();
    uint64_t v98 = v22;
    uint64_t v35 = v34;
    uint64_t v97 = swift_slowAlloc();
    v108[0] = v97;
    *(_DWORD *)uint64_t v35 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v35 + 12) = 2080;
    unint64_t v36 = v25;
    char v37 = *(uint64_t (**)(uint64_t))(v30->_countAndFlagsBits + 800);
    uint64_t v38 = swift_retain();
    uint64_t v39 = v37(v38);
    unint64_t v41 = v40;
    swift_release();
    uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    unint64_t v25 = v36;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v31, v32, "PommesResultCandidateMessage was received for RC ID %s when RC state: %s", (uint8_t *)v35, 0x16u);
    uint64_t v42 = v97;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v42, -1, -1);
    uint64_t v43 = v35;
    uint64_t v22 = v98;
    MEMORY[0x1BA9E48C0](v43, -1, -1);
  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  char v52 = (*(uint64_t (**)(void))(v30->_countAndFlagsBits + 400))();
  if (ResultCandidateProcessingStatus.rawValue.getter(v52) == 0x64656C65636E6163 && v53 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v56 = swift_bridgeObjectRelease();
    if ((v55 & 1) == 0)
    {
      uint64_t v57 = (*(uint64_t (**)(uint64_t))(v30->_countAndFlagsBits + 376))(v56);
      swift_release();
      if (!v57)
      {
        uint64_t v66 = PommesResultCandidateMessage.pommesResponse.getter();
        uint64_t v67 = (uint64_t)v105;
        PommesResultCandidateMessage.error.getter();
        uint64_t v68 = (uint64_t)v103;
        PommesResultCandidateMessage.searchReason.getter();
        uint64_t v69 = type metadata accessor for PommesSearchReason();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v68, 0, 1, v69);
        type metadata accessor for PommesInfo(0);
        uint64_t v70 = swift_allocObject();
        *(void *)(v70 + 16) = v66;
        outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v67, v70 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesError, &demangling cache variable for type metadata for PommesError?);
        outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v68, v70 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesSearchReason, &demangling cache variable for type metadata for PommesSearchReason?);
        (*(void (**)(uint64_t))(v30->_countAndFlagsBits + 384))(v70);
        swift_bridgeObjectRetain_n();
        uint64_t v71 = Logger.logObject.getter();
        os_log_type_t v72 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v71, v72))
        {
          uint64_t v73 = (uint8_t *)swift_slowAlloc();
          uint64_t v74 = swift_slowAlloc();
          v108[0] = v74;
          *(_DWORD *)uint64_t v73 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v25, v108);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B9C64000, v71, v72, "Cached PommesResultCandidateMessage in ResultCandidateState for RC ID: %s", v73, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v74, -1, -1);
          MEMORY[0x1BA9E48C0](v73, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v75 = (void *)v106;
        uint64_t v76 = (uint64_t)v104;
        id v77 = v100;
        PommesResultCandidateMessage.error.getter();
        uint64_t v78 = type metadata accessor for PommesError();
        int v79 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 48))(v76, 1, v78);
        outlined destroy of ReferenceResolutionClientProtocol?(v76, &demangling cache variable for type metadata for PommesError?);
        if (v79 != 1)
        {
          uint64_t v98 = v22;
          id v80 = v77;
          swift_bridgeObjectRetain_n();
          id v81 = v80;
          uint64_t v82 = Logger.logObject.getter();
          os_log_type_t v83 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v82, v83))
          {
            uint64_t v84 = swift_slowAlloc();
            uint64_t v106 = swift_slowAlloc();
            v108[0] = v106;
            *(_DWORD *)uint64_t v84 = 136315394;
            PommesResultCandidateMessage.error.getter();
            uint64_t v85 = String.init<A>(describing:)();
            uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v86, v108);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            *(_WORD *)(v84 + 12) = 2080;
            swift_bridgeObjectRetain();
            uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v25, v108);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1B9C64000, v82, v83, "PommesResultCandidateMessage had error: %s for RC ID: %s", (uint8_t *)v84, 0x16u);
            uint64_t v87 = v106;
            swift_arrayDestroy();
            MEMORY[0x1BA9E48C0](v87, -1, -1);
            MEMORY[0x1BA9E48C0](v84, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
        }
        uint64_t v88 = (void *)PommesResultCandidateMessage.pommesResponse.getter();

        if (v88)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRetain();
          uint64_t v89 = Logger.logObject.getter();
          os_log_type_t v90 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v89, v90))
          {
            unint64_t v91 = (uint8_t *)swift_slowAlloc();
            uint64_t v92 = swift_slowAlloc();
            v108[0] = v92;
            *(_DWORD *)unint64_t v91 = 136315138;
            swift_bridgeObjectRetain();
            uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v25, v108);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1B9C64000, v89, v90, "PommesResultCandidateMessage had unexpected nil response for RC ID: %s", v91, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1BA9E48C0](v92, -1, -1);
            MEMORY[0x1BA9E48C0](v91, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
        }
        if (one-time initialization token for insightRequestSummaryLogger != -1) {
          swift_once();
        }
        uint64_t v93 = type metadata accessor for InsightRequestSummaryLogger();
        uint64_t v94 = __swift_project_value_buffer(v93, (uint64_t)static Logger.insightRequestSummaryLogger);
        id v95 = v100;
        swift_retain();
        swift_retain();
        specialized InsightRequestSummaryLogger.emitDebug(_:)(v94, (uint64_t)v95, v75, (uint64_t)v30);

        swift_release();
        swift_release();
        ConversationRequestProcessor.maybeRunExecution(rcState:)(v30);
        swift_release();
        goto LABEL_41;
      }
      swift_bridgeObjectRetain();
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v44, v58))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc();
        unint64_t v60 = v25;
        uint64_t v61 = swift_slowAlloc();
        v108[0] = v61;
        *(_DWORD *)uint64_t v59 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v60, v108);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        os_log_type_t v62 = "Already received Pommes output for this RC ID: %s .. this happened because we received multiple Pommes out"
              "puts for the same RC ID.";
LABEL_32:
        _os_log_impl(&dword_1B9C64000, v44, v58, v62, v59, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v61, -1, -1);
        MEMORY[0x1BA9E48C0](v59, -1, -1);
        swift_release();
LABEL_38:
        swift_release();
LABEL_39:

        return;
      }
      goto LABEL_33;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v44, v58))
  {
    uint64_t v59 = (uint8_t *)swift_slowAlloc();
    unint64_t v63 = v25;
    uint64_t v61 = swift_slowAlloc();
    v108[0] = v61;
    *(_DWORD *)uint64_t v59 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v63, v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_log_type_t v62 = "RC ID:%s has already been canceled. Not handling PommesResultCandidateMessage.";
    goto LABEL_32;
  }
LABEL_33:

  swift_bridgeObjectRelease_n();
  swift_release();
LABEL_41:
  swift_release();
}

uint64_t type metadata accessor for InsightRequestSummaryLogger()
{
  uint64_t result = type metadata singleton initialization cache for InsightRequestSummaryLogger;
  if (!type metadata singleton initialization cache for InsightRequestSummaryLogger) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

uint64_t destroy for AceServiceInvokerImpl.AceSubmitOptions()
{
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for PommesInfo(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for PommesInfo);
}

uint64_t ResultCandidateState.nlResponseStatusCode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlResponseStatusCode;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ResultCandidateState.nlLanguageVariantResult.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationBridge.rraasClient.getter(&OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlLanguageVariantResult, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?, a1);
}

uint64_t type metadata accessor for NLResponse(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for NLResponse);
}

char *ConversationRequestProcessor.buildConversationUserInput(rcState:requestType:nlResponse:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v114 = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExecutionLocation?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v110 = (uint64_t)&v106 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v107 = (char *)&v106 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v113 = (char *)&v106 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v106 - v14;
  uint64_t v16 = type metadata accessor for ExecutionLocation();
  uint64_t v115 = *(void *)(v16 - 8);
  uint64_t v116 = v16;
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  uint64_t v108 = (char *)&v106 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v106 = (char *)&v106 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v112 = (uint64_t)&v106 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v117 = (char *)&v106 - v24;
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v106 - v25;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  uint64_t v28 = MEMORY[0x1F4188790](v27 - 8);
  uint64_t v109 = (char *)&v106 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v111 = (uint64_t)&v106 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v34 = (char *)&v106 - v33;
  MEMORY[0x1F4188790](v32);
  unint64_t v36 = (char *)&v106 - v35;
  uint64_t v37 = type metadata accessor for RequestType();
  uint64_t v38 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37);
  unint64_t v40 = (char *)&v106 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v40, a2, v37);
  int v41 = (*(uint64_t (**)(char *, uint64_t))(v38 + 88))(v40, v37);
  if (v41 != *MEMORY[0x1E4FA2448])
  {
    if (v41 != *MEMORY[0x1E4FA2430])
    {
      if (v41 == *MEMORY[0x1E4FA2410] || v41 == *MEMORY[0x1E4FA2408]) {
        goto LABEL_25;
      }
      if (v41 == *MEMORY[0x1E4FA2438])
      {
        uint64_t v65 = a1[2];
        uint64_t v66 = a1[3];
        uint64_t v67 = *(uint64_t (**)(uint64_t))(*a1 + 864);
        uint64_t v68 = swift_bridgeObjectRetain();
        uint64_t v69 = v67(v68);
        if (v69)
        {
          uint64_t v70 = (*(uint64_t (**)(uint64_t))(*(void *)v69 + 112))(v69);
          uint64_t v69 = swift_release();
        }
        else
        {
          uint64_t v70 = 0;
        }
        uint64_t v96 = v115;
        uint64_t v95 = v116;
        uint64_t v98 = (uint64_t)v106;
        uint64_t v97 = (uint64_t)v107;
        uint64_t v99 = (*(uint64_t (**)(uint64_t))(*a1 + 544))(v69);
        uint64_t v100 = (*(uint64_t (**)(uint64_t))(*a1 + 856))(v99);
        uint64_t v102 = v101;
        outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)a1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_asrLocation, v97, &demangling cache variable for type metadata for ExecutionLocation?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v96 + 48))(v97, 1, v95) == 1)
        {
          static ExecutionLocation.unknown.getter();
          outlined destroy of ReferenceResolutionClientProtocol?(v97, &demangling cache variable for type metadata for ExecutionLocation?);
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 32))(v98, v97, v95);
        }
        uint64_t v103 = (uint64_t)v117;
        static ExecutionLocation.device.getter();
        type metadata accessor for ConversationUserInput(0);
        swift_allocObject();
        uint64_t v104 = v114;
        swift_retain();
        uint64_t v76 = ConversationUserInput.init(resultCandidateId:speechPackage:nlResponse:mitigationDecision:userSpecificInfoForRecognizedUser:userSpecificInfoForUserMeetingSessionThreshold:utterance:asrLocation:nlLocation:)(v65, v66, v70, v104, v111, 0, 0, v100, v102, v98, v103);
        goto LABEL_39;
      }
      if (v41 == *MEMORY[0x1E4FA2428]
        || v41 == *MEMORY[0x1E4FA2450]
        || v41 == *MEMORY[0x1E4FA2440]
        || v41 == *MEMORY[0x1E4FA2458]
        || v41 == *MEMORY[0x1E4FA2418])
      {
LABEL_25:
        uint64_t v77 = *(void *)(v4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_gestureRCID + 8);
        if (!v77
          || ((uint64_t v78 = a1[2],
               uint64_t v79 = a1[3],
               v78 != *(void *)(v4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_gestureRCID))
           || v77 != v79)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          uint64_t v91 = 0;
          uint64_t v92 = 0;
          uint64_t v71 = 0;
LABEL_41:
          (*(void (**)(uint64_t, uint64_t))(*a1 + 288))(v91, v92);
          return v71;
        }
        id v80 = *(uint64_t (**)(uint64_t))(*a1 + 544);
        uint64_t v81 = swift_bridgeObjectRetain();
        uint64_t v82 = (uint64_t)v109;
        uint64_t v83 = v80(v81);
        uint64_t v84 = (*(uint64_t (**)(uint64_t))(*a1 + 856))(v83);
        uint64_t v86 = v85;
        uint64_t v87 = v110;
        outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)a1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_asrLocation, v110, &demangling cache variable for type metadata for ExecutionLocation?);
        uint64_t v89 = v115;
        uint64_t v88 = v116;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v115 + 48))(v87, 1, v116) == 1)
        {
          uint64_t v90 = (uint64_t)v108;
          static ExecutionLocation.unknown.getter();
          outlined destroy of ReferenceResolutionClientProtocol?(v87, &demangling cache variable for type metadata for ExecutionLocation?);
        }
        else
        {
          uint64_t v90 = (uint64_t)v108;
          (*(void (**)(char *, uint64_t, uint64_t))(v89 + 32))(v108, v87, v88);
        }
        uint64_t v93 = v114;
        uint64_t v94 = (uint64_t)v117;
        static ExecutionLocation.device.getter();
        type metadata accessor for ConversationUserInput(0);
        swift_allocObject();
        swift_retain();
        uint64_t v76 = ConversationUserInput.init(resultCandidateId:speechPackage:nlResponse:mitigationDecision:userSpecificInfoForRecognizedUser:userSpecificInfoForUserMeetingSessionThreshold:utterance:asrLocation:nlLocation:)(v78, v79, 0, v93, v82, 0, 0, v84, v86, v90, v94);
        goto LABEL_39;
      }
      if (v41 != *MEMORY[0x1E4FA2420])
      {
        (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v37);
        return 0;
      }
    }
    uint64_t v111 = (*(uint64_t (**)(void *, void))(*(void *)v4 + 1272))(a1, 0);
    uint64_t v53 = a1[2];
    uint64_t v54 = a1[3];
    char v55 = *(uint64_t (**)(uint64_t))(*a1 + 544);
    uint64_t v56 = swift_bridgeObjectRetain();
    uint64_t v57 = v55(v56);
    uint64_t v58 = (*(uint64_t (**)(uint64_t))(*a1 + 856))(v57);
    uint64_t v60 = v59;
    id v61 = v113;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)a1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_asrLocation, (uint64_t)v113, &demangling cache variable for type metadata for ExecutionLocation?);
    uint64_t v63 = v115;
    uint64_t v62 = v116;
    if ((*(unsigned int (**)(id, uint64_t, uint64_t))(v115 + 48))(v61, 1, v116) == 1)
    {
      uint64_t v64 = v112;
      static ExecutionLocation.unknown.getter();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v61, &demangling cache variable for type metadata for ExecutionLocation?);
    }
    else
    {
      uint64_t v64 = v112;
      (*(void (**)(uint64_t, id, uint64_t))(v63 + 32))(v112, v61, v62);
    }
    uint64_t v74 = (uint64_t)v117;
    static ExecutionLocation.device.getter();
    type metadata accessor for ConversationUserInput(0);
    swift_allocObject();
    uint64_t v75 = v114;
    swift_retain();
    uint64_t v76 = ConversationUserInput.init(resultCandidateId:speechPackage:nlResponse:mitigationDecision:userSpecificInfoForRecognizedUser:userSpecificInfoForUserMeetingSessionThreshold:utterance:asrLocation:nlLocation:)(v53, v54, 0, v75, (uint64_t)v34, v111, 0, v58, v60, v64, v74);
LABEL_39:
    uint64_t v71 = v76;
LABEL_40:
    uint64_t v91 = *((void *)v71 + 4);
    uint64_t v92 = *((void *)v71 + 5);
    swift_bridgeObjectRetain();
    goto LABEL_41;
  }
  uint64_t v42 = (*(uint64_t (**)(void))(*a1 + 864))();
  if (v42)
  {
    uint64_t v113 = (char *)(*(uint64_t (**)(void))(*(void *)v42 + 112))();
    uint64_t v112 = (*(uint64_t (**)(void *, id))(*(void *)v4 + 1272))(a1, objc_msgSend(v113, sel_speechProfileUsed));
    uint64_t v43 = (*(uint64_t (**)(void *))(*(void *)v4 + 1264))(a1);
    uint64_t v44 = a1[3];
    uint64_t v110 = a1[2];
    uint64_t v111 = v43;
    os_log_type_t v45 = *(uint64_t (**)(uint64_t))(*a1 + 544);
    uint64_t v46 = swift_bridgeObjectRetain();
    uint64_t v47 = v45(v46);
    uint64_t v48 = (*(uint64_t (**)(uint64_t))(*a1 + 856))(v47);
    uint64_t v50 = v49;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)a1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_asrLocation, (uint64_t)v15, &demangling cache variable for type metadata for ExecutionLocation?);
    uint64_t v52 = v115;
    uint64_t v51 = v116;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v115 + 48))(v15, 1, v116) == 1)
    {
      static ExecutionLocation.unknown.getter();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, &demangling cache variable for type metadata for ExecutionLocation?);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v26, v15, v51);
    }
    uint64_t v72 = (uint64_t)v117;
    static ExecutionLocation.device.getter();
    type metadata accessor for ConversationUserInput(0);
    swift_allocObject();
    uint64_t v73 = v114;
    swift_retain();
    uint64_t v71 = ConversationUserInput.init(resultCandidateId:speechPackage:nlResponse:mitigationDecision:userSpecificInfoForRecognizedUser:userSpecificInfoForUserMeetingSessionThreshold:utterance:asrLocation:nlLocation:)(v110, v44, (uint64_t)v113, v73, (uint64_t)v36, v112, v111, v48, v50, (uint64_t)v26, v72);
    swift_release();
    goto LABEL_40;
  }
  return 0;
}

uint64_t ResultCandidateState.utteranceIfAvailable.getter()
{
  uint64_t v1 = type metadata accessor for GestureInput();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ResultCandidateType(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of RoutingDecision(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_resultCandidateType, (uint64_t)v7, type metadata accessor for ResultCandidateType);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v8 = *(void *)v7;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      break;
    case 2u:
      _s14SiriKitRuntime15RoutingDecisionOWOhTm_0((uint64_t)v7, type metadata accessor for ResultCandidateType);
      uint64_t v8 = 0;
      break;
    case 3u:
      uint64_t v9 = (*(uint64_t (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
      uint64_t v8 = MEMORY[0x1BA9E1C80](v9);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      break;
    default:
      uint64_t v8 = (*(uint64_t (**)(void))(**(void **)v7 + 176))();
      swift_release();
      break;
  }
  return v8;
}

uint64_t type metadata accessor for ConversationUserInput(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for ConversationUserInput);
}

unint64_t ConversationBridgeInstrumentationUtil.mapPreExecutionRuleTypeToLogRuleType(_:_:)(char a1, char a2)
{
  if (a1 == 8)
  {
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = 4;
    switch(a1)
    {
      case 1:
        uint64_t v2 = 1;
        break;
      case 2:
        uint64_t v2 = 2;
        break;
      case 3:
        uint64_t v2 = 3;
        break;
      case 4:
        uint64_t v2 = 6;
        break;
      case 5:
        uint64_t v2 = 8;
        break;
      case 6:
        uint64_t v2 = 9;
        break;
      case 7:
        uint64_t v2 = 7;
        if (a2) {
          uint64_t v2 = 10;
        }
        break;
      default:
        return v2 | ((unint64_t)(a1 == 8) << 32);
    }
  }
  return v2 | ((unint64_t)(a1 == 8) << 32);
}

id specialized InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    id v20 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v22 = objc_msgSend(v20, sel_initWithNSUUID_, isa);

    id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0D50]), sel_init);
    uint64_t v24 = v23;
    if (v23)
    {
      objc_msgSend(v23, sel_setRequestId_, v22);
      id v25 = v24;
      if (a4) {
        uint64_t v26 = (void *)MEMORY[0x1BA9E2DD0](a3, a4);
      }
      else {
        uint64_t v26 = 0;
      }
      objc_msgSend(v24, sel_setResultCandidateId_, v26);
    }
    id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0D38]), sel_init);
    objc_msgSend(v19, sel_setEventMetadata_, v24);
    if ((a5 & 1) == 0 || !v19)
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);

      return v19;
    }
    id v27 = objc_allocWithZone(MEMORY[0x1E4FA0E50]);
    id v28 = v19;
    id v29 = objc_msgSend(v27, sel_init);
    if (v29)
    {
      id v30 = objc_allocWithZone(MEMORY[0x1E4FA0DC0]);
      id v31 = v29;
      id v53 = v29;
      id v32 = v28;
      id v33 = v22;
      id v34 = v31;
      id v35 = objc_msgSend(v30, sel_init);
      objc_msgSend(v34, sel_setMemoryUsageMetadata_, v35);

      id v22 = v33;
      id v28 = v32;
      id v29 = v53;
    }
    v55.ru_utime.tv_sec = 0;
    v55.ru_utime.tv_usec = 0;
    v55.ru_stime.tv_sec = 0;
    v55.ru_stime.tv_usec = 0;
    memset(&v55.ru_maxrss, 0, 112);
    int v36 = getrusage(0, &v55);
    id v54 = v22;
    if (v36)
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      __swift_project_value_buffer(v37, (uint64_t)static Logger.conversationBridge);
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v38, v39)) {
        goto LABEL_22;
      }
      id v40 = v29;
      id v41 = v28;
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl(&dword_1B9C64000, v38, v39, "Not logging maxRSS since getrusage() did not succeed", v42, 2u);
      uint64_t v43 = v42;
      id v28 = v41;
      id v29 = v40;
      goto LABEL_21;
    }
    uint64_t ru_maxrss = v55.ru_maxrss;
    if (v55.ru_maxrss < 0)
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v50 = type metadata accessor for Logger();
      __swift_project_value_buffer(v50, (uint64_t)static Logger.conversationBridge);
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v38, v51)) {
        goto LABEL_22;
      }
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v52 = 0;
      _os_log_impl(&dword_1B9C64000, v38, v51, "Not logging maxRSS since it is negative", v52, 2u);
      uint64_t v43 = v52;
LABEL_21:
      MEMORY[0x1BA9E48C0](v43, -1, -1);
LABEL_22:

LABEL_23:
      objc_msgSend(v28, sel_setResourceUtilizationMetadata_, v29);

      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      return v19;
    }
    if (!v29) {
      goto LABEL_23;
    }
    uint64_t v46 = objc_msgSend(v29, sel_memoryUsageMetadata);
    if (!v46) {
      goto LABEL_23;
    }
    uint64_t v38 = v46;
    double v47 = ceil(log10((double)(unint64_t)ru_maxrss));
    if (v47 <= 2.0)
    {
LABEL_34:
      [v38 setMaxRSS:ru_maxrss];
      goto LABEL_22;
    }
    double v48 = __exp10(v47 + -2.0);
    double v49 = v48 * rint((double)(unint64_t)ru_maxrss / v48);
    if ((~*(void *)&v49 & 0x7FF0000000000000) != 0)
    {
      if (v49 > -1.0)
      {
        if (v49 < 1.84467441e19)
        {
          uint64_t ru_maxrss = (unint64_t)v49;
          goto LABEL_34;
        }
LABEL_41:
        __break(1u);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_41;
  }
  outlined destroy of UUID?((uint64_t)v10);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&dword_1B9C64000, v16, v17, "The requestId is not a valid UUID. Will return a nil wrapper", v18, 2u);
    MEMORY[0x1BA9E48C0](v18, -1, -1);
  }

  return 0;
}

uint64_t protocol witness for ConversationRuntimeClientProtocol.sendConversationUserInput(_:withBridgeDelegate:) in conformance ConversationRuntimeClient()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 160))();
}

uint64_t ConversationRuntimeClient.sendConversationUserInput(_:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  uint64_t v9 = v3[5];
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = v7;
  v10[3] = v8;
  v10[4] = v9;
  v10[5] = a1;
  v10[6] = a2;
  v10[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v11 = StaticString.description.getter();
  uint64_t v13 = v12;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v7;
  *(void *)(v14 + 24) = v8;
  *(void *)(v14 + 32) = v9;
  *(void *)(v14 + 40) = "bridge(didReceiveInput:from:)";
  *(void *)(v14 + 48) = 29;
  *(unsigned char *)(v14 + 56) = 2;
  *(void *)(v14 + 64) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveInput:from:);
  *(void *)(v14 + 72) = v10;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v8 + 208);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v15(v11, v13, &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:), v14);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t ConversationUserInput.debugDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v88 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90[0] = _typeName(_:qualified:)();
  v90[1] = v5;
  v6._uint64_t countAndFlagsBits = 31520;
  v6._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = v90[0];
  uint64_t v8 = (void *)v90[1];
  v90[0] = 123;
  v90[1] = 0xE100000000000000;
  v7._unint64_t object = v8;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  uint64_t v10 = v90[0];
  uint64_t v9 = v90[1];
  v90[0] = 0xD000000000000013;
  v90[1] = 0x80000001BA067260;
  uint64_t v11 = v0[2];
  uint64_t v12 = (void *)v0[3];
  swift_bridgeObjectRetain();
  v13._uint64_t countAndFlagsBits = v11;
  v13._unint64_t object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = 8236;
  v14._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  uint64_t v15 = v90[0];
  uint64_t v16 = (void *)v90[1];
  v90[0] = v10;
  v90[1] = v9;
  swift_bridgeObjectRetain();
  v17._uint64_t countAndFlagsBits = v15;
  v17._unint64_t object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v19 = v90[0];
  uint64_t v18 = v90[1];
  v90[0] = 0xD000000000000019;
  v90[1] = 0x80000001BA067280;
  uint64_t v20 = v0[4];
  uint64_t v21 = (void *)v0[5];
  swift_bridgeObjectRetain();
  v22._uint64_t countAndFlagsBits = v20;
  v22._unint64_t object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._uint64_t countAndFlagsBits = 8236;
  v23._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  uint64_t v24 = v90[0];
  id v25 = (void *)v90[1];
  v90[0] = v19;
  v90[1] = v18;
  swift_bridgeObjectRetain();
  v26._uint64_t countAndFlagsBits = v24;
  v26._unint64_t object = v25;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v28 = v90[0];
  uint64_t v27 = v90[1];
  v90[0] = 0x6150686365657073;
  v90[1] = 0xEF203A6567616B63;
  uint64_t v88 = v0[6];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AFSpeechPackage?);
  v29._uint64_t countAndFlagsBits = Optional.debugDescription.getter();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._uint64_t countAndFlagsBits = 8236;
  v30._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v30);
  uint64_t v31 = v90[0];
  id v32 = (void *)v90[1];
  v90[0] = v28;
  v90[1] = v27;
  swift_bridgeObjectRetain();
  v33._uint64_t countAndFlagsBits = v31;
  v33._unint64_t object = v32;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v35 = v90[0];
  uint64_t v34 = v90[1];
  strcpy((char *)v90, "nlResponse: ");
  BYTE5(v90[1]) = 0;
  HIWORD(v90[1]) = -5120;
  v36._uint64_t countAndFlagsBits = NLResponse.debugDescription.getter();
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._uint64_t countAndFlagsBits = 8236;
  v37._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v37);
  uint64_t v38 = v90[0];
  os_log_type_t v39 = (void *)v90[1];
  v90[0] = v35;
  v90[1] = v34;
  swift_bridgeObjectRetain();
  v40._uint64_t countAndFlagsBits = v38;
  v40._unint64_t object = v39;
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v42 = v90[0];
  uint64_t v41 = v90[1];
  v90[0] = 0xD000000000000014;
  v90[1] = 0x80000001BA0672A0;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v0 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_mitigationDecision, (uint64_t)v4, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  v43._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  v44._uint64_t countAndFlagsBits = 8236;
  v44._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v44);
  uint64_t v45 = v90[0];
  uint64_t v46 = (void *)v90[1];
  v90[0] = v42;
  v90[1] = v41;
  swift_bridgeObjectRetain();
  v47._uint64_t countAndFlagsBits = v45;
  v47._unint64_t object = v46;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v49 = v90[0];
  uint64_t v48 = v90[1];
  v90[0] = 0xD000000000000023;
  v90[1] = 0x80000001BA0672C0;
  uint64_t v50 = *(void **)((char *)v0 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_userSpecificInfoForRecognizedUser);
  if (v50)
  {
    id v51 = objc_msgSend(v50, sel_debugDescription);
    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v54 = v53;
  }
  else
  {
    uint64_t v52 = 0;
    uint64_t v54 = 0;
  }
  uint64_t v88 = v52;
  uint64_t v89 = v54;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  v55._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  v56._uint64_t countAndFlagsBits = 8236;
  v56._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v56);
  uint64_t v57 = v90[0];
  uint64_t v58 = (void *)v90[1];
  v90[0] = v49;
  v90[1] = v48;
  swift_bridgeObjectRetain();
  v59._uint64_t countAndFlagsBits = v57;
  v59._unint64_t object = v58;
  String.append(_:)(v59);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v61 = v90[0];
  uint64_t v60 = v90[1];
  v90[0] = 0xD000000000000030;
  v90[1] = 0x80000001BA0672F0;
  uint64_t v62 = *(void **)((char *)v1
                 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_userSpecificInfoForUserMeetingSessionThreshold);
  if (v62)
  {
    id v63 = objc_msgSend(v62, sel_debugDescription);
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v66 = v65;
  }
  else
  {
    uint64_t v64 = 0;
    uint64_t v66 = 0;
  }
  uint64_t v88 = v64;
  uint64_t v89 = v66;
  v67._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v67);
  swift_bridgeObjectRelease();
  v68._uint64_t countAndFlagsBits = 8236;
  v68._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v68);
  uint64_t v69 = v90[0];
  uint64_t v70 = (void *)v90[1];
  v90[0] = v61;
  v90[1] = v60;
  swift_bridgeObjectRetain();
  v71._uint64_t countAndFlagsBits = v69;
  v71._unint64_t object = v70;
  String.append(_:)(v71);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v73 = v90[0];
  uint64_t v72 = v90[1];
  strcpy((char *)v90, "asrLocation: ");
  HIWORD(v90[1]) = -4864;
  v74._uint64_t countAndFlagsBits = ExecutionLocation.description.getter();
  String.append(_:)(v74);
  swift_bridgeObjectRelease();
  v75._uint64_t countAndFlagsBits = 8236;
  v75._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v75);
  uint64_t v76 = v90[0];
  uint64_t v77 = (void *)v90[1];
  v90[0] = v73;
  v90[1] = v72;
  swift_bridgeObjectRetain();
  v78._uint64_t countAndFlagsBits = v76;
  v78._unint64_t object = v77;
  String.append(_:)(v78);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v80 = v90[0];
  uint64_t v79 = v90[1];
  strcpy((char *)v90, "nlLocation: ");
  BYTE5(v90[1]) = 0;
  HIWORD(v90[1]) = -5120;
  v81._uint64_t countAndFlagsBits = ExecutionLocation.description.getter();
  String.append(_:)(v81);
  swift_bridgeObjectRelease();
  v82._uint64_t countAndFlagsBits = 32;
  v82._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v82);
  uint64_t v83 = v90[0];
  uint64_t v84 = (void *)v90[1];
  v90[0] = v80;
  v90[1] = v79;
  swift_bridgeObjectRetain();
  v85._uint64_t countAndFlagsBits = v83;
  v85._unint64_t object = v84;
  String.append(_:)(v85);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v86._uint64_t countAndFlagsBits = 125;
  v86._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v86);
  swift_bridgeObjectRelease();
  return v90[0];
}

uint64_t NLResponse.debugDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  MEMORY[0x1F4188790](v42);
  uint64_t v41 = (uint64_t)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1F4188790](v40);
  uint64_t v39 = (uint64_t)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  MEMORY[0x1F4188790](v4);
  Swift::String v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1BA0526C0;
  uint64_t v45 = 0;
  unint64_t v46 = 0xE000000000000000;
  LOBYTE(v43) = 0;
  _print_unlocked<A, B>(_:_:)();
  v8._uint64_t countAndFlagsBits = 8250;
  v8._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  uint64_t v9 = *(void *)(v0 + 16);
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_UserParse();
  v11._uint64_t countAndFlagsBits = MEMORY[0x1BA9E30C0](v9, v10);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  unint64_t v12 = v46;
  *(void *)(v7 + 32) = v45;
  *(void *)(v7 + 40) = v12;
  uint64_t v45 = 0;
  unint64_t v46 = 0xE000000000000000;
  LOBYTE(v43) = 1;
  _print_unlocked<A, B>(_:_:)();
  v13._uint64_t countAndFlagsBits = 8250;
  v13._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  _print_unlocked<A, B>(_:_:)();
  unint64_t v14 = v46;
  *(void *)(v7 + 48) = v45;
  *(void *)(v7 + 56) = v14;
  uint64_t v45 = 0;
  unint64_t v46 = 0xE000000000000000;
  LOBYTE(v43) = 2;
  _print_unlocked<A, B>(_:_:)();
  v15._uint64_t countAndFlagsBits = 8250;
  v15._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v15);
  uint64_t v43 = *(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_pommesInfo);
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesInfo?);
  v16._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  unint64_t v17 = v46;
  *(void *)(v7 + 64) = v45;
  *(void *)(v7 + 72) = v17;
  uint64_t v45 = 0;
  unint64_t v46 = 0xE000000000000000;
  LOBYTE(v43) = 3;
  _print_unlocked<A, B>(_:_:)();
  v18._uint64_t countAndFlagsBits = 8250;
  v18._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_languageVariantResult, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  v19._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  unint64_t v20 = v46;
  *(void *)(v7 + 80) = v45;
  *(void *)(v7 + 88) = v20;
  uint64_t v45 = 0;
  unint64_t v46 = 0xE000000000000000;
  LOBYTE(v43) = 4;
  _print_unlocked<A, B>(_:_:)();
  v21._uint64_t countAndFlagsBits = 8250;
  v21._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v21);
  uint64_t v22 = *(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_responseVariantResult + 8);
  uint64_t v43 = *(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_responseVariantResult);
  uint64_t v44 = v22;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  v23._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  unint64_t v24 = v46;
  *(void *)(v7 + 96) = v45;
  *(void *)(v7 + 104) = v24;
  uint64_t v45 = 0;
  unint64_t v46 = 0xE000000000000000;
  LOBYTE(v43) = 5;
  _print_unlocked<A, B>(_:_:)();
  v25._uint64_t countAndFlagsBits = 8250;
  v25._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v25);
  outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_serverFallbackReason, v39, &demangling cache variable for type metadata for ServerFallbackReason?);
  v26._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  unint64_t v27 = v46;
  *(void *)(v7 + 112) = v45;
  *(void *)(v7 + 120) = v27;
  uint64_t v45 = 0;
  unint64_t v46 = 0xE000000000000000;
  LOBYTE(v43) = 6;
  _print_unlocked<A, B>(_:_:)();
  v28._uint64_t countAndFlagsBits = 8250;
  v28._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v28);
  outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlRoutingDecision, v41, (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  v29._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  unint64_t v30 = v46;
  *(void *)(v7 + 128) = v45;
  *(void *)(v7 + 136) = v30;
  uint64_t v45 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v31 = BidirectionalCollection<>.joined(separator:)();
  Swift::String v33 = v32;
  swift_bridgeObjectRelease();
  uint64_t v45 = _typeName(_:qualified:)();
  unint64_t v46 = v34;
  v35._uint64_t countAndFlagsBits = 31520;
  v35._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v35);
  v36._uint64_t countAndFlagsBits = v31;
  v36._unint64_t object = v33;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._uint64_t countAndFlagsBits = 125;
  v37._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v37);
  return v45;
}

uint64_t partial apply for closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  uint64_t v7 = *(void *)(v0 + 64);
  uint64_t v8 = *(void *)(v0 + 72);
  char v9 = *(unsigned char *)(v0 + 56);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v10;
  *uint64_t v10 = v1;
  v10[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)(v2, v3, v4, v5, v6, v9, v7, v8);
}

uint64_t closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 16);
  char v6 = *(unsigned char *)(v0 + 56);
  uint64_t v7 = StaticString.description.getter();
  uint64_t v9 = v8;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v2;
  *(void *)(v10 + 24) = v1;
  *(void *)(v10 + 32) = v4;
  *(void *)(v10 + 40) = v3;
  *(unsigned char *)(v10 + 48) = v6;
  Swift::String v11 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v5 + 208);
  swift_retain();
  v11(v7, v9, &async function pointer to partial apply for closure #1 in closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:), v10);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 40) = a7;
  *(void *)(v8 + 48) = a8;
  *(unsigned char *)(v8 + 56) = a6;
  *(void *)(v8 + 24) = a4;
  *(void *)(v8 + 32) = a5;
  *(void *)(v8 + 16) = a3;
  return MEMORY[0x1F4188298](closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:), 0, 0);
}

uint64_t objectdestroy_20Tm()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t objectdestroy_20Tm_0(uint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a1) - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 16) & ~v5;
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = a2(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v2 + v6, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v2 + v6, v8);
  }

  return MEMORY[0x1F4186498](v2, v6 + v7, v5 | 7);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)()
{
  uint64_t v2 = *(int **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  char v5 = *(unsigned char *)(v0 + 48);
  uint64_t v6 = swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *(void *)uint64_t v6 = v1;
  *(void *)(v6 + 8) = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  *(unsigned char *)(v6 + 72) = v5;
  *(void *)(v6 + 40) = v3;
  *(void *)(v6 + 48) = v4;
  uint64_t v9 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v6 + 56) = v7;
  void *v7 = v6;
  v7[1] = closure #1 in closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:);
  return v9();
}

uint64_t partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveInput:from:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v7 = v0[6];
  uint64_t v6 = v0[7];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v8;
  *uint64_t v8 = v1;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationServiceSerialFacade.bridge(didReceiveInput:from:)(v2, v3, v4, v5, v7, v6);
}

uint64_t closure #1 in ConversationServiceSerialFacade.bridge(didReceiveInput:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v10;
  *uint64_t v10 = v6;
  v10[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return ConversationService.bridge(didReceiveInput:from:)(a4, a5, a6);
}

uint64_t ConversationService.bridge(didReceiveInput:from:)()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[21];
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  v2[39] = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[35];
  if (v0)
  {
    uint64_t v4 = ConversationService.bridge(didReceiveInput:from:);
  }
  else
  {
    outlined destroy of DecisionEngineResponse(v2[19], type metadata accessor for ConversationService.EagerResult);
    uint64_t v4 = ConversationService.bridge(didReceiveInput:from:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(void, uint64_t, void);
  uint64_t v28;
  void (**v29)(uint64_t, void, uint64_t);
  void (**v30)(uint64_t, uint64_t);
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  void (**v74)(uint64_t, uint64_t);
  void (**v75)(uint64_t, uint64_t, uint64_t);
  void (**v76)(uint64_t, void, uint64_t);
  unsigned int v77;
  void (**v78)(uint64_t, uint64_t);
  uint64_t v79;
  void (*v80)(void, uint64_t, void);
  void (*v81)(uint64_t, void, uint64_t);
  uint64_t v82;
  uint64_t v83;
  long long v84;
  uint64_t v85[3];
  void *v86;
  uint64_t v87;

  Swift::String v86 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = v0 + 14;
  uint64_t v1 = v0[14];
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  uint64_t v72 = *(void *)(v1 + 24);
  uint64_t v73 = *(void *)(v1 + 16);
  dispatch thunk of ConversationSELFHelper.emitExecutionPrepareTimeBegin(rcId:)();
  swift_release();
  swift_retain_n();
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    v85[0] = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v8 = ConversationUserInput.debugDescription.getter();
    v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B9C64000, v4, v5, "Received ConversationUserInput: %s", v6, 0xCu);
    swift_arrayDestroy();
    uint64_t v10 = v7;
    uint64_t v2 = v0 + 14;
    MEMORY[0x1BA9E48C0](v10, -1, -1);
    MEMORY[0x1BA9E48C0](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  swift_retain();
  Swift::String v11 = Logger.logObject.getter();
  uint64_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    Swift::String v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    v85[0] = v14;
    *(_DWORD *)Swift::String v13 = 136315138;
    swift_bridgeObjectRetain();
    v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v72, v85);
    uint64_t v2 = v0 + 14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_1B9C64000, v11, v12, "[ConversationService] received ConversationUserInput for rcId: %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v14, -1, -1);
    MEMORY[0x1BA9E48C0](v13, -1, -1);
  }
  else
  {
    swift_release();
  }

  Swift::String v15 = v0[17];
  swift_beginAccess();
  Swift::String v16 = *(void **)(v15 + 112);
  LOBYTE(v15) = *(unsigned char *)(v15 + 120);
  outlined copy of ConversationService.State(v16, v15);
  unint64_t v17 = specialized ConversationService.State.assertTurnStarted(function:)((uint64_t)"bridge(didReceiveInput:from:)", 29, 2, (uint64_t)v16, v15);
  v0[36] = v17;
  Swift::String v18 = v0;
  Swift::String v19 = v17;
  unint64_t v20 = *v2;
  swift_retain();
  outlined consume of ConversationService.State(v16, v15);
  Swift::String v21 = *(void *)(v20 + 56);
  uint64_t v22 = *(void *)(v21 + 16);
  Swift::String v23 = *(void *)(v22 + 16);
  if (v23)
  {
    Swift::String v68 = *(void *)(v20 + 56);
    Swift::String v71 = v19;
    unint64_t v24 = v0[33];
    Swift::String v25 = v0[28];
    Swift::String v26 = v0[25];
    uint64_t v70 = v0[14];
    unint64_t v27 = *(void (**)(void, void, void))(v24 + 16);
    v24 += 16;
    uint64_t v80 = v27;
    Swift::String v28 = v22 + ((*(unsigned __int8 *)(v24 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 64));
    Swift::String v78 = (void (**)(uint64_t, uint64_t))(v26 + 8);
    uint64_t v79 = *(void *)(v24 + 56);
    uint64_t v77 = *MEMORY[0x1E4FA2920];
    Swift::String v29 = (void (**)(uint64_t, void, uint64_t))(v25 + 104);
    unint64_t v30 = (void (**)(uint64_t, uint64_t))(v25 + 8);
    Swift::String v75 = (void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16);
    uint64_t v69 = *MEMORY[0x1E4FA2918];
    Swift::String v74 = (void (**)(uint64_t, uint64_t))(v24 - 8);
    swift_bridgeObjectRetain();
    uint64_t v76 = v29;
    while (1)
    {
      uint64_t v83 = v23;
      Swift::String v35 = v18[31];
      Swift::String v36 = v18[30];
      Swift::String v82 = v18[29];
      uint64_t v38 = v18[26];
      Swift::String v37 = v18[27];
      uint64_t v39 = v18[24];
      v80(v18[34], v28, v18[32]);
      Siri_Nlu_External_UserParse.repetitionResult.getter();
      Siri_Nlu_External_RepetitionResult.repetitionType.getter();
      (*v78)(v38, v39);
      Swift::String v81 = *v29;
      (*v29)(v36, v77, v37);
      _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3(&lazy protocol witness table cache variable for type Siri_Nlu_External_RepetitionResult.RepetitionType and conformance Siri_Nlu_External_RepetitionResult.RepetitionType, 255, MEMORY[0x1E4FA2928]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v41 = v18[8];
      uint64_t v40 = v18[9];
      uint64_t v42 = *v30;
      (*v30)(v36, v37);
      (*v75)(v82, v35, v37);
      if (v41 == v40)
      {
        v42(v18[29], v18[27]);
      }
      else
      {
        uint64_t v44 = v18[29];
        uint64_t v43 = v18[30];
        uint64_t v45 = v18[27];
        v81(v43, v69, v45);
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        unint64_t v46 = v18[10];
        Swift::String v47 = v18[11];
        v42(v43, v45);
        v42(v44, v45);
        if (v46 != v47) {
          goto LABEL_13;
        }
      }
      uint64_t v31 = objc_msgSend(*(id *)(v70 + 48), sel_recognition);
      id v32 = objc_msgSend(v31, sel_aceRecognition);

      (*(void (**)(uint64_t, unint64_t, id))(*(void *)v71 + 336))(v73, v72, v32);
LABEL_13:
      Swift::String v33 = v18[34];
      unint64_t v34 = v18[32];
      v42(v18[31], v18[27]);
      (*v74)(v33, v34);
      v28 += v79;
      Swift::String v23 = v83 - 1;
      Swift::String v29 = v76;
      if (v83 == 1)
      {
        swift_bridgeObjectRelease();
        Swift::String v19 = v71;
        Swift::String v21 = v68;
        break;
      }
    }
  }
  (*(void (**)(void, uint64_t, void))(v18[22] + 16))(v18[23], v21 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlResponseStatusCode, v18[21]);
  uint64_t v48 = Logger.logObject.getter();
  uint64_t v49 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v50 = 0;
    _os_log_impl(&dword_1B9C64000, v48, v49, "[ConversationService] Storing NL Response code ConversationUserInput for execution overrides check", v50, 2u);
    MEMORY[0x1BA9E48C0](v50, -1, -1);
  }
  id v51 = v18;
  uint64_t v52 = v18[23];
  uint64_t v53 = v51[20];
  uint64_t v54 = v51[17];
  Swift::String v55 = v51[14];
  uint64_t v84 = *(_OWORD *)(v51 + 15);

  (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)v19 + 368))(v73, v72, v52);
  Swift::String v56 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v53, 1, 1, v56);
  uint64_t v57 = static MessageBusActor.shared;
  Swift::String v59 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v58, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  uint64_t v60 = swift_allocObject();
  *(void *)(v60 + 16) = v57;
  *(void *)(v60 + 24) = v59;
  *(void *)(v60 + 32) = v55;
  *(void *)(v60 + 40) = v54;
  *(void *)(v60 + 48) = v19;
  *(_OWORD *)(v60 + 56) = v84;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v61 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime19ConversationServiceC11EagerResultO_Tgm5(v53, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.bridge(didReceiveInput:from:), v60);
  v51[37] = v61;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 320))(v55, v61);
  uint64_t v62 = (void *)swift_task_alloc();
  v51[38] = v62;
  id v63 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  *uint64_t v62 = v51;
  v62[1] = ConversationService.bridge(didReceiveInput:from:);
  uint64_t v65 = v51[18];
  uint64_t v64 = v51[19];
  uint64_t v66 = MEMORY[0x1E4FBC0F0];
  return MEMORY[0x1F4187D90](v64, v61, v65, v63, v66);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = v0[22];
  uint64_t v1 = v0[23];
  uint64_t v3 = v0[21];
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t ConversationService.bridge(didReceiveInput:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[16] = a3;
  v4[17] = v3;
  v4[14] = a1;
  v4[15] = a2;
  v4[18] = type metadata accessor for ConversationService.EagerResult(0);
  v4[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v4[20] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  v4[21] = v5;
  v4[22] = *(void *)(v5 - 8);
  v4[23] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_RepetitionResult();
  v4[24] = v6;
  v4[25] = *(void *)(v6 - 8);
  v4[26] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_RepetitionResult.RepetitionType();
  v4[27] = v7;
  v4[28] = *(void *)(v7 - 8);
  v4[29] = swift_task_alloc();
  v4[30] = swift_task_alloc();
  v4[31] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_UserParse();
  v4[32] = v8;
  v4[33] = *(void *)(v8 - 8);
  v4[34] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v9 = static MessageBusActor.shared;
  v4[35] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](ConversationService.bridge(didReceiveInput:from:), v9, 0);
}

uint64_t type metadata accessor for ConversationService.EagerResult(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, type metadata singleton initialization cache for ConversationService.EagerResult);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PommesInfo()
{
  return PommesInfo.debugDescription.getter();
}

uint64_t PommesInfo.debugDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesError?);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(v0 + 16);
  id v8 = (id)v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesResponse?);
  v9._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  uint64_t v24 = 123;
  unint64_t v25 = 0xE100000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = v24;
  unint64_t v11 = v25;
  outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesError, (uint64_t)v7, &demangling cache variable for type metadata for PommesError?);
  uint64_t v12 = String.init<A>(describing:)();
  uint64_t v14 = v13;
  uint64_t v24 = v10;
  unint64_t v25 = v11;
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = v12;
  v15._unint64_t object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = v24;
  unint64_t v17 = v25;
  outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesSearchReason, (uint64_t)v4, &demangling cache variable for type metadata for PommesSearchReason?);
  uint64_t v18 = String.init<A>(describing:)();
  unint64_t v20 = v19;
  uint64_t v24 = v16;
  unint64_t v25 = v17;
  swift_bridgeObjectRetain();
  v21._uint64_t countAndFlagsBits = v18;
  v21._unint64_t object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v22._uint64_t countAndFlagsBits = 125;
  v22._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  return v24;
}

uint64_t ConversationRequestProcessor.fetchCachedAnnounceContext(forUserId:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UserID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v28[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ConversationSessionKey();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  unint64_t v11 = (char *)&v28[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v1 + 408))(v28, v9);
  __swift_project_boxed_opaque_existential_1(v28, v28[3]);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v11, *MEMORY[0x1E4FA2638], v7);
  dispatch thunk of ConversationSessionState.value(forKey:userId:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  if (v29[3])
  {
    type metadata accessor for AnnounceContext();
    if (swift_dynamicCast()) {
      uint64_t v12 = v27;
    }
    else {
      uint64_t v12 = 0;
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v28);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v28);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v12 = 0;
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationBridge);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  swift_retain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    v28[0] = v17;
    *(_DWORD *)uint64_t v16 = 136315650;
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E4FA26E0]);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    v29[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    *(_WORD *)(v16 + 12) = 2080;
    if (v12) {
      uint64_t v20 = swift_bridgeObjectRetain();
    }
    else {
      uint64_t v20 = 0;
    }
    v29[0] = v20;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_Task]?);
    uint64_t v21 = String.init<A>(describing:)();
    v29[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2080;
    if (v12) {
      uint64_t v23 = swift_bridgeObjectRetain();
    }
    else {
      uint64_t v23 = 0;
    }
    v29[0] = v23;
    uint64_t v24 = String.init<A>(describing:)();
    v29[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v14, v15, "Fetched the following for userId: %s from cachedSessionContext: activeTasks: %s, executedTasks: %s", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v17, -1, -1);
    MEMORY[0x1BA9E48C0](v16, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);

    swift_release_n();
  }
  return v12;
}

uint64_t type metadata accessor for AnnounceContext()
{
  return self;
}

uint64_t type metadata accessor for ExecutionOverrideContext()
{
  return self;
}

void ConcurrentTaskPool.add(task:)()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + 24) + 16);
  os_unfair_lock_lock(v1);
  _s2os21OSAllocatedUnfairLockVAAytRszlE04withD0yqd__qd__yYbKXEKs8SendableRd__lFqd__ytz_tYbKXEfU_yt_Tg5TA_0(v2);
  os_unfair_lock_unlock(v1);
}

void *specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)@<X0>(void *(*a1)(uint64_t *__return_ptr)@<X1>, void *a2@<X8>)
{
  unint64_t result = a1(&v5);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t partial apply for closure #1 in ConcurrentTaskPool.add(task:)()
{
  return closure #1 in ConcurrentTaskPool.add(task:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t closure #1 in ConcurrentTaskPool.add(task:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)(a1 + 16);
  swift_beginAccess();
  uint64_t v5 = *(void **)(a1 + 16);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a1 + 16) = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
    *uint64_t v4 = v5;
  }
  unint64_t v8 = v5[2];
  unint64_t v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v7 > 1), v8 + 1, 1, v5);
    *uint64_t v4 = v5;
  }
  v5[2] = v8 + 1;
  v5[v8 + 4] = a2;
  return swift_endAccess();
}

uint64_t specialized ConversationService.State.assertTurnStarted(function:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 0xC0) != 0x80)
  {
    _StringGuts.grow(_:)(35);
    swift_bridgeObjectRelease();
    strcpy((char *)v10, "Cannot call ");
    BYTE5(v10[1]) = 0;
    HIWORD(v10[1]) = -5120;
    v5._uint64_t countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._unint64_t object = (void *)0x80000001BA066B30;
    v6._uint64_t countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v6);
    uint64_t v7 = v10[1];
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
    swift_allocError();
    *unint64_t v8 = v10[0];
    v8[1] = v7;
    swift_willThrow();
  }
  return a4;
}

uint64_t ConversationService.ActiveTurn.registerNlResponseCode(rcId:responseCode:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
  MEMORY[0x1F4188790](v6 - 8);
  unint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, a3, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter((uint64_t)v8, a1, a2, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?, MEMORY[0x1E4FA2880], (void (*)(char *, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:), (void (*)(uint64_t, uint64_t))specialized Dictionary._Variant.removeValue(forKey:));
  return swift_endAccess();
}

uint64_t ConversationService.ActiveTurn.registerEagerTask(forInput:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = (uint64_t *)(v2 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_eagerTasks);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v6;
  *uint64_t v6 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, v4, v5, isUniquelyReferenced_nonNull_native);
  *uint64_t v6 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

uint64_t protocol witness for ConversationRuntimeClientProtocol.checkExecutionOverride(rcId:executionOverrideContext:withBridgeDelegate:) in conformance ConversationRuntimeClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(**(void **)v5 + 184)
                                                                            + **(int **)(**(void **)v5 + 184));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v12;
  *uint64_t v12 = v6;
  v12[1] = protocol witness for AppShortcutStateProviding.intentsStates(appShortcutTargets:conditionalIntentMetadata:) in conformance AppShortcutStateProvider;
  return v14(a1, a2, a3, a4, a5);
}

uint64_t ConversationRuntimeClient.checkExecutionOverride(rcId:executionOverrideContext:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[8] = a3;
  v4[9] = v3;
  v4[6] = a1;
  v4[7] = a2;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = static MessageBusActor.shared;
  v4[10] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](ConversationRuntimeClient.checkExecutionOverride(rcId:executionOverrideContext:withBridgeDelegate:), v5, 0);
}

uint64_t ConversationRuntimeClient.checkExecutionOverride(rcId:executionOverrideContext:withBridgeDelegate:)()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[9];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  v0[11] = v1[3];
  v0[12] = v1[4];
  v0[13] = v1[5];
  return MEMORY[0x1F4188298](ConversationRuntimeClient.checkExecutionOverride(rcId:executionOverrideContext:withBridgeDelegate:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 112) = v5;
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(v0 + 88);
  *(void *)(v5 + 32) = v1;
  *(void *)(v5 + 40) = v2;
  *(void *)(v5 + 48) = v4;
  *(void *)(v5 + 56) = v3;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExecutionOverrideResult?);
  *uint64_t v6 = v0;
  v6[1] = ConversationRuntimeClient.checkExecutionOverride(rcId:executionOverrideContext:withBridgeDelegate:);
  return MEMORY[0x1F41880D8](v0 + 40, 0, 0, 0xD000000000000033, 0x80000001BA066760, partial apply for closure #1 in ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:), v5, v7);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](ConversationRuntimeClient.checkExecutionOverride(rcId:executionOverrideContext:withBridgeDelegate:), 0, 0);
}

{
  void *v0;
  uint64_t v1;

  uint64_t v1 = v0[10];
  v0[16] = v0[5];
  return MEMORY[0x1F4188298](ConversationRuntimeClient.checkExecutionOverride(rcId:executionOverrideContext:withBridgeDelegate:), v1, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 128);
  return v1(v2);
}

uint64_t ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:)()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 72) = v5;
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(v0 + 48);
  *(void *)(v5 + 32) = v1;
  *(void *)(v5 + 40) = v4;
  *(void *)(v5 + 48) = v3;
  *(void *)(v5 + 56) = v2;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExecutionOverrideResult?);
  *uint64_t v6 = v0;
  v6[1] = ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:);
  return MEMORY[0x1F41880D8](v0 + 16, 0, 0, 0xD000000000000033, 0x80000001BA066760, partial apply for closure #1 in ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:), v5, v7);
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.recentDialogs(), 0, 0);
}

uint64_t ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a5;
  v6[8] = a6;
  v6[5] = a3;
  v6[6] = a4;
  void v6[3] = a1;
  v6[4] = a2;
  return MEMORY[0x1F4188298](ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:), 0, 0);
}

uint64_t type metadata accessor for DecisionEngineResponse()
{
  uint64_t result = type metadata singleton initialization cache for DecisionEngineResponse;
  if (!type metadata singleton initialization cache for DecisionEngineResponse) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t RemoteConversationClient.flexibleExecutionSupportOptions()(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
  v2[5] = swift_task_alloc();
  v2[6] = swift_task_alloc();
  return MEMORY[0x1F4188298](RemoteConversationClient.flexibleExecutionSupportOptions(), v1, 0);
}

uint64_t RemoteConversationClient.flexibleExecutionSupportOptions()()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = type metadata accessor for Logger();
  v0[7] = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v3 = v1 + 16;
  uint64_t v4 = v1[19];
  uint64_t v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  uint64_t v10 = (uint64_t (*)(uint64_t, void *, void, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 16)
                                                                                   + **(int **)(v5 + 16));
  uint64_t v6 = (void *)swift_task_alloc();
  v0[8] = v6;
  uint64_t v7 = type metadata accessor for FlexibleExecutionSupportOptions();
  v0[9] = v7;
  *uint64_t v6 = v0;
  v6[1] = RemoteConversationClient.flexibleExecutionSupportOptions();
  uint64_t v8 = v0[6];
  return v10(v8, &async function pointer to closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions(), 0, v7, v4, v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v18;
  void *v19;
  uint64_t v20;

  unint64_t v19 = v0;
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[5];
  outlined init with copy of FlexibleExecutionSupportOptions?(v0[6], v2);
  uint64_t v3 = *(void *)(v1 - 8);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v2, 1, v1);
  uint64_t v5 = v0[5];
  if (v4 == 1)
  {
    outlined destroy of FlexibleExecutionSupportOptions?(v0[5]);
    uint64_t v6 = Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v18 = v9;
      *(_DWORD *)uint64_t v8 = 136446210;
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x80000001BA06B1F0, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v6, v7, "Connection to RemoteConversation was invalidated while calling %{public}s. Will return false.", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v9, -1, -1);
      MEMORY[0x1BA9E48C0](v8, -1, -1);
    }

    if (one-time initialization token for none != -1) {
      swift_once();
    }
    uint64_t v10 = v0[9];
    uint64_t v11 = v0[6];
    uint64_t v12 = v0[3];
    uint64_t v13 = __swift_project_value_buffer(v10, (uint64_t)static FlexibleExecutionSupportOptions.none);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v12, v13, v10);
    outlined destroy of FlexibleExecutionSupportOptions?(v11);
  }
  else
  {
    uint64_t v14 = v0[9];
    uint64_t v15 = v0[3];
    outlined destroy of FlexibleExecutionSupportOptions?(v0[6]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v15, v5, v14);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v18;
  void *v19;
  uint64_t v20;

  unint64_t v19 = v0;
  (*(void (**)(void, uint64_t, uint64_t))(*(void *)(v0[9] - 8) + 56))(v0[6], 1, 1);
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[5];
  outlined init with copy of FlexibleExecutionSupportOptions?(v0[6], v2);
  uint64_t v3 = *(void *)(v1 - 8);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v2, 1, v1);
  uint64_t v5 = v0[5];
  if (v4 == 1)
  {
    outlined destroy of FlexibleExecutionSupportOptions?(v0[5]);
    uint64_t v6 = Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v18 = v9;
      *(_DWORD *)uint64_t v8 = 136446210;
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x80000001BA06B1F0, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v6, v7, "Connection to RemoteConversation was invalidated while calling %{public}s. Will return false.", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v9, -1, -1);
      MEMORY[0x1BA9E48C0](v8, -1, -1);
    }

    if (one-time initialization token for none != -1) {
      swift_once();
    }
    uint64_t v10 = v0[9];
    uint64_t v11 = v0[6];
    uint64_t v12 = v0[3];
    uint64_t v13 = __swift_project_value_buffer(v10, (uint64_t)static FlexibleExecutionSupportOptions.none);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v12, v13, v10);
    outlined destroy of FlexibleExecutionSupportOptions?(v11);
  }
  else
  {
    uint64_t v14 = v0[9];
    uint64_t v15 = v0[3];
    outlined destroy of FlexibleExecutionSupportOptions?(v0[6]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v15, v5, v14);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 32);
  if (v0)
  {

    uint64_t v4 = RemoteConversationClient.flexibleExecutionSupportOptions();
  }
  else
  {
    uint64_t v4 = RemoteConversationClient.flexibleExecutionSupportOptions();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

uint64_t closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions();
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v2 = closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v18;
  void *v19;
  uint64_t v20;

  unint64_t v19 = v0;
  uint64_t v1 = v0[4];
  if (v1)
  {
    uint64_t v2 = v0[5];
    uint64_t v3 = swift_allocObject();
    v0[6] = v3;
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    swift_unknownObjectRetain_n();
    uint64_t v4 = swift_task_alloc();
    v0[7] = v4;
    *(void *)(v4 + 16) = partial apply for closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions();
    *(void *)(v4 + 24) = v3;
    uint64_t v5 = (void *)swift_task_alloc();
    v0[8] = v5;
    uint64_t v6 = type metadata accessor for FlexibleExecutionSupportOptions();
    *uint64_t v5 = v0;
    v5[1] = closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions();
    uint64_t v7 = v0[3];
    return MEMORY[0x1F4188160](v7, 0, 0, 0xD000000000000028, 0x80000001BA063410, partial apply for specialized closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:), v4, v6);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
    uint64_t v9 = Logger.logObject.getter();
    uint64_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v18 = v12;
      *(_DWORD *)uint64_t v11 = 136446210;
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x80000001BA06B1F0, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v9, v10, "Tried to call %{public}s on an invalid connection to a RemoteConversation. Will not reconnect until a StartTurn comes in.", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v12, -1, -1);
      MEMORY[0x1BA9E48C0](v11, -1, -1);
    }

    if (one-time initialization token for none != -1) {
      swift_once();
    }
    uint64_t v13 = v0[3];
    uint64_t v14 = type metadata accessor for FlexibleExecutionSupportOptions();
    uint64_t v15 = __swift_project_value_buffer(v14, (uint64_t)static FlexibleExecutionSupportOptions.none);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v13, v15, v14);
    uint64_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
}

uint64_t closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions(), 0, 0);
}

uint64_t type metadata accessor for ConversationFlexibleExecutionSupportXPC()
{
  return self;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(a1, &demangling cache variable for type metadata for CheckedContinuation<FlexibleExecutionSupportOptions, Error>, (uint64_t (*)(uint64_t, uint64_t))closure #1 in closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions());
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a2) - 8);
  uint64_t v6 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return a3(a1, v6);
}

uint64_t closure #1 in closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(void *a1)
{
  uint64_t v2 = type metadata accessor for FlexibleExecutionSupportOptions();
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x60))(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<FlexibleExecutionSupportOptions, Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t ConversationFlexibleExecutionSupportXPC.swiftRepresentation()()
{
  return FlexibleExecutionSupportOptions.init(rawValue:)();
}

uint64_t outlined init with copy of FlexibleExecutionSupportOptions?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of FlexibleExecutionSupportOptions?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConversationUserInput()
{
  return ConversationUserInput.debugDescription.getter();
}

uint64_t ConversationService.ActiveTurn.registerInput(rcId:input:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Input();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, a3, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter((uint64_t)v8, a1, a2, &demangling cache variable for type metadata for Input?, MEMORY[0x1E4FA1EE0], (void (*)(char *, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:), (void (*)(uint64_t, uint64_t))specialized Dictionary._Variant.removeValue(forKey:));
  return swift_endAccess();
}

void *initializeWithCopy for ConversationService.EagerResult(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v14 = type metadata accessor for ServerFallbackReason();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 1:
      *a1 = *a2;
      swift_retain();
      goto LABEL_10;
    case 0:
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      swift_retain();
      swift_retain();
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationUserInput, RemoteConversationClient, Input?))
                  + 64);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for Input();
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
        memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      goto LABEL_10;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

uint64_t objectdestroy_16Tm()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:)()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ExecutionOverrideResult?, Never>)
                 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + v4);
  uint64_t v6 = v0 + v3;
  uint64_t v7 = (uint64_t *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v10;
  *uint64_t v10 = v1;
  v10[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  v10[3] = v6;
  uint64_t v11 = (void *)swift_task_alloc();
  v10[4] = v11;
  *uint64_t v11 = v10;
  v11[1] = closure #1 in closure #1 in ConversationServiceSerialFacade.checkExecutionOverrides(context:resultCandidateId:);
  return ConversationService.checkExecutionOverrides(context:resultCandidateId:)(v5, v8, v9);
}

void ConversationService.checkExecutionOverrides(context:resultCandidateId:)()
{
  uint64_t v1 = v0[17];
  swift_beginAccess();
  if ((*(void *)(v1 + 104) & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.count.getter();
    swift_bridgeObjectRelease();
  }
  uint64_t v2 = v0[28];
  swift_beginAccess();
  uint64_t v5 = (char *)&async function pointer to specialized static ExecutionOverrideHandler.runExecutionOverridesAfterRCSelection(rcId:aceInputOrigin:input:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:endpointMode:executionOverrideContext:didPreviouslyFallbackToServer:isSpeechRequest:bridge:skipEmptyAsr:)
     + async function pointer to specialized static ExecutionOverrideHandler.runExecutionOverridesAfterRCSelection(rcId:aceInputOrigin:input:isNlEmpty:isFirstRequestInSession:isFlowAwaitingInput:consecutiveEmptyInputs:endpointMode:executionOverrideContext:didPreviouslyFallbackToServer:isSpeechRequest:bridge:skipEmptyAsr:);
  v0[33] = *(void *)(v2 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_bridge);
  swift_unknownObjectRetain();
  unint64_t v3 = (void *)swift_task_alloc();
  v0[34] = v3;
  *unint64_t v3 = v0;
  v3[1] = ConversationService.checkExecutionOverrides(context:resultCandidateId:);
  __asm { BR              X8 }
}

uint64_t ConversationService.checkExecutionOverrides(context:resultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[16] = a3;
  v4[17] = v3;
  v4[14] = a1;
  v4[15] = a2;
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  v4[18] = v5;
  v4[19] = *(void *)(v5 - 8);
  v4[20] = swift_task_alloc();
  v4[21] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Siri_Nlu_External_ResponseStatus.StatusCode?, Siri_Nlu_External_ResponseStatus.StatusCode?));
  v4[22] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
  v4[23] = swift_task_alloc();
  v4[24] = swift_task_alloc();
  v4[25] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v4[26] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  v4[27] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](ConversationService.checkExecutionOverrides(context:resultCandidateId:), v6, 0);
}

uint64_t ConversationService.checkExecutionOverrides(context:resultCandidateId:)()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_beginAccess();
  uint64_t v2 = *(char **)(v1 + 112);
  *(void *)(v0 + 224) = v2;
  unsigned __int8 v3 = *(unsigned char *)(v1 + 120);
  *(unsigned char *)(v0 + 292) = v3;
  if ((v3 & 0xC0) == 0x80)
  {
    uint64_t v4 = one-time initialization token for executor;
    swift_retain();
    if (v4 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_1B9C64000, v6, v7, "[ConversationService] didReceiveCheckExecutionOverrides", v8, 2u);
      MEMORY[0x1BA9E48C0](v8, -1, -1);
    }

    unsigned int v9 = *(unsigned __int8 *)(v1 + 120);
    if (v9 >> 6)
    {
      if (v9 >> 6 != 1)
      {
        char v10 = 0;
        goto LABEL_14;
      }
    }
    else
    {
      LOBYTE(v9) = *(unsigned char *)(v1 + 112);
    }
    char v10 = v9 & 1;
LABEL_14:
    *(unsigned char *)(v0 + 293) = v10;
    uint64_t v15 = *(void *)(v0 + 200);
    uint64_t v16 = *(void *)(v0 + 192);
    uint64_t v17 = *(void *)(v0 + 176);
    uint64_t v44 = *(void *)(v0 + 168);
    uint64_t v18 = *(void *)(v0 + 144);
    uint64_t v19 = *(void *)(v0 + 152);
    uint64_t v21 = *(void *)(v0 + 120);
    uint64_t v20 = *(void *)(v0 + 128);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 360))(v21, v20);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 376))(v21, v20);
    uint64_t v22 = OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData;
    *(void *)(v0 + 232) = OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData;
    uint64_t v23 = &v2[v22];
    uint64_t v24 = *(int *)(type metadata accessor for RemoteConversationTurnData(0) + 28);
    *(_DWORD *)(v0 + 288) = v24;
    unint64_t v25 = (void *)(*(void *)&v23[v24] + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_inputOrigin);
    *(void *)(v0 + 240) = *v25;
    *(void *)(v0 + 248) = v25[1];
    (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))(v16, *MEMORY[0x1E4FA2868], v18);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    uint64_t v26 = v17 + *(int *)(v44 + 48);
    outlined init with copy of ReferenceResolutionClientProtocol?(v15, v17, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
    outlined init with copy of ReferenceResolutionClientProtocol?(v16, v26, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
    uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
    if (v27(v17, 1, v18) == 1)
    {
      uint64_t v28 = *(void *)(v0 + 192);
      uint64_t v29 = *(void *)(v0 + 144);
      swift_bridgeObjectRetain();
      outlined destroy of ReferenceResolutionClientProtocol?(v28, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
      if (v27(v26, 1, v29) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 176), (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
        char v30 = 1;
LABEL_21:
        *(unsigned char *)(v0 + 294) = v30 & 1;
        uint64_t v42 = (uint64_t)&v2[OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_aceServiceInvoker];
        uint64_t v45 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized static ConversationService.skipEmptyAsr(_:)
                                              + async function pointer to specialized static ConversationService.skipEmptyAsr(_:));
        uint64_t v43 = (void *)swift_task_alloc();
        *(void *)(v0 + 256) = v43;
        *uint64_t v43 = v0;
        v43[1] = ConversationService.checkExecutionOverrides(context:resultCandidateId:);
        return v45(v42);
      }
    }
    else
    {
      uint64_t v31 = *(void *)(v0 + 144);
      outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 176), *(void *)(v0 + 184), (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
      unsigned int v32 = v27(v26, 1, v31);
      uint64_t v33 = *(void *)(v0 + 184);
      uint64_t v34 = *(void *)(v0 + 192);
      if (v32 != 1)
      {
        uint64_t v37 = *(void *)(v0 + 176);
        uint64_t v39 = *(void *)(v0 + 152);
        uint64_t v38 = *(void *)(v0 + 160);
        uint64_t v40 = *(void *)(v0 + 144);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32))(v38, v26, v40);
        _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3(&lazy protocol witness table cache variable for type Siri_Nlu_External_ResponseStatus.StatusCode and conformance Siri_Nlu_External_ResponseStatus.StatusCode, 255, MEMORY[0x1E4FA2880]);
        swift_bridgeObjectRetain();
        char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
        v41(v38, v40);
        outlined destroy of ReferenceResolutionClientProtocol?(v34, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
        v41(v33, v40);
        outlined destroy of ReferenceResolutionClientProtocol?(v37, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
        goto LABEL_21;
      }
      uint64_t v35 = *(void *)(v0 + 144);
      uint64_t v36 = *(void *)(v0 + 152);
      swift_bridgeObjectRetain();
      outlined destroy of ReferenceResolutionClientProtocol?(v34, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v33, v35);
    }
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 176), &demangling cache variable for type metadata for (Siri_Nlu_External_ResponseStatus.StatusCode?, Siri_Nlu_External_ResponseStatus.StatusCode?));
    char v30 = 0;
    goto LABEL_21;
  }
  outlined copy of ConversationService.State(v2, v3);
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = StaticString.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._unint64_t object = (void *)0x80000001BA066B30;
  v12._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  outlined consume of ConversationService.State(v2, v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13(0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v8;

  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v2 = *(void **)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 200);
  unsigned __int8 v3 = *(void *)(v0 + 208);
  uint64_t v5 = *(unsigned char *)(v0 + 292);
  swift_release();
  outlined consume of ConversationService.State(v2, v5);
  outlined destroy of ReferenceResolutionClientProtocol?(v4, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
  outlined destroy of ReferenceResolutionClientProtocol?(v3, &demangling cache variable for type metadata for Input?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v6(v1);
}

uint64_t ConversationService.checkExecutionOverrides(context:resultCandidateId:)(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 216);
  *(unsigned char *)(*(void *)v1 + 295) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](ConversationService.checkExecutionOverrides(context:resultCandidateId:), v2, 0);
}

uint64_t ConversationService.ActiveTurn.getInput(rcId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ConversationService.ActiveTurn.getInput(rcId:)(a1, a2, &OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnInput, MEMORY[0x1E4FA1EE0], a3);
}

uint64_t ConversationService.ActiveTurn.getInput(rcId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  char v10 = (uint64_t *)(v5 + *a3);
  swift_beginAccess();
  uint64_t v11 = *v10;
  if (*(void *)(v11 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v13)
    {
      unint64_t v14 = v12;
      uint64_t v15 = *(void *)(v11 + 56);
      uint64_t v16 = a4(0);
      uint64_t v17 = *(void *)(v16 - 8);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v17 + 16))(a5, v15 + *(void *)(v17 + 72) * v14, v16);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(a5, 0, 1, v16);
    }
    else
    {
      uint64_t v20 = a4(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(a5, 1, 1, v20);
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = a4(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a5, 1, 1, v18);
  }
}

uint64_t ConversationService.ActiveTurn.getNlResponseCode(rcId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ConversationService.ActiveTurn.getInput(rcId:)(a1, a2, &OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_nlResponseCode, MEMORY[0x1E4FA2880], a3);
}

uint64_t type metadata accessor for CompositeExecutionOverrides.Builder()
{
  return self;
}

uint64_t type metadata accessor for HangUpOverride()
{
  uint64_t result = type metadata singleton initialization cache for HangUpOverride;
  if (!type metadata singleton initialization cache for HangUpOverride) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature;
  if (!lazy protocol witness table cache variable for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature;
  if (!lazy protocol witness table cache variable for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature;
  if (!lazy protocol witness table cache variable for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature);
  }
  return result;
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.getter in conformance SiriPlaybackControlFeature(uint64_t a1, uint64_t a2)
{
  return protocol witness for static FeatureToggle.forceEnabled.getter in conformance SydneyConversationFeatureFlags(a1, a2, &one-time initialization token for forceEnabled);
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance SiriPlaybackControlFeature()
{
  return "SiriPlaybackControls";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance SiriPlaybackControlFeature()
{
  return "quick_stop_call_bell";
}

unint64_t lazy protocol witness table accessor for type SiriPhoneFeature and conformance SiriPhoneFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriPhoneFeature and conformance SiriPhoneFeature;
  if (!lazy protocol witness table cache variable for type SiriPhoneFeature and conformance SiriPhoneFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriPhoneFeature and conformance SiriPhoneFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriPhoneFeature and conformance SiriPhoneFeature;
  if (!lazy protocol witness table cache variable for type SiriPhoneFeature and conformance SiriPhoneFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriPhoneFeature and conformance SiriPhoneFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriPhoneFeature and conformance SiriPhoneFeature;
  if (!lazy protocol witness table cache variable for type SiriPhoneFeature and conformance SiriPhoneFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriPhoneFeature and conformance SiriPhoneFeature);
  }
  return result;
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.getter in conformance SiriPhoneFeature(uint64_t a1, uint64_t a2)
{
  return protocol witness for static FeatureToggle.forceEnabled.getter in conformance SydneyConversationFeatureFlags(a1, a2, &one-time initialization token for forceEnabled);
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance PhoneFeatureFlags()
{
  return "SiriPhone";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance PhoneFeatureFlags()
{
  return "CancelCallBell";
}

uint64_t type metadata accessor for WaitUniversalActionOverride()
{
  uint64_t result = type metadata singleton initialization cache for WaitUniversalActionOverride;
  if (!type metadata singleton initialization cache for WaitUniversalActionOverride) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for EmptyAsrOverride()
{
  return self;
}

uint64_t type metadata accessor for EmergencyCallMitigatorOverride()
{
  uint64_t result = type metadata singleton initialization cache for EmergencyCallMitigatorOverride;
  if (!type metadata singleton initialization cache for EmergencyCallMitigatorOverride) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for AnnounceExecutionOverride()
{
  uint64_t result = type metadata singleton initialization cache for AnnounceExecutionOverride;
  if (!type metadata singleton initialization cache for AnnounceExecutionOverride) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for CompositeExecutionOverrides()
{
  return self;
}

uint64_t ExecutionOverrideDecisionMaker.evaluate(rules:)()
{
  uint64_t v49 = v0;
  uint64_t v1 = *(unsigned __int8 *)(v0 + 233);
  outlined init with copy of ReferenceResolutionClientProtocol(v0 + 56, v0 + 16);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v42 = v3;
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(void *)(v0 + 168) = v5;
    *(_DWORD *)uint64_t v4 = 136315394;
    uint64_t v43 = v1;
    char v48 = v1;
    unint64_t v6 = ExecutionOverrideDecision.rawValue.getter();
    *(void *)(v4 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, (uint64_t *)(v0 + 168));
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    uint64_t v9 = *(void *)(v0 + 40);
    uint64_t v8 = *(void *)(v0 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 16), v9);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v8);
    uint64_t v10 = 0xD000000000000016;
    unint64_t v11 = 0x80000001BA060D10;
    switch(*(unsigned char *)(v0 + 235))
    {
      case 1:
        uint64_t v10 = 0xD000000000000021;
        unint64_t v12 = "overrideMitigatorForEmergencyCall";
        goto LABEL_11;
      case 2:
        uint64_t v10 = 0xD000000000000023;
        unint64_t v12 = "overrideMitigatorForIntercomRequest";
        goto LABEL_11;
      case 3:
        uint64_t v10 = 0xD000000000000022;
        unint64_t v12 = "overrideMitigatorForServerFallback";
        goto LABEL_11;
      case 4:
        uint64_t v10 = 0xD000000000000022;
        unint64_t v12 = "validIntentForTriggerLessFollowups";
        goto LABEL_11;
      case 5:
        unint64_t v11 = 0x80000001BA060DF0;
        uint64_t v10 = 0xD000000000000017;
        break;
      case 6:
        uint64_t v10 = 0x5253417974706D65;
        unint64_t v11 = 0xEC000000656C7552;
        break;
      case 7:
        uint64_t v10 = 0xD00000000000001BLL;
        unint64_t v12 = "waitUniversalActionOverride";
LABEL_11:
        unint64_t v11 = (unint64_t)(v12 - 32) | 0x8000000000000000;
        break;
      case 8:
        unint64_t v11 = 0xE400000000000000;
        uint64_t v10 = 1701736302;
        break;
      default:
        break;
    }
    *(void *)(v4 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, (uint64_t *)(v0 + 168));
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    _os_log_impl(&dword_1B9C64000, v2, v42, "[ExecutionOverride] Evaluating.. Intermediate Decision was evaluated as: %s from %s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v5, -1, -1);
    MEMORY[0x1BA9E48C0](v4, -1, -1);

    uint64_t v13 = v43;
    unint64_t v14 = (void *)(v0 + 56);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);

    uint64_t v13 = v1;
    unint64_t v14 = (void *)(v0 + 56);
  }
  switch(v13)
  {
    case 12:
      swift_bridgeObjectRelease();
      goto LABEL_15;
    default:
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v15 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        char v18 = v13;
        *(unsigned char *)(v0 + 232) = v13;
        uint64_t v20 = *(void *)(v0 + 80);
        uint64_t v21 = *(void *)(v0 + 88);
        __swift_project_boxed_opaque_existential_1(v14, v20);
        (*(void (**)(unsigned __int8 *__return_ptr, uint64_t, uint64_t))(v21 + 8))(&v45, v20, v21);
        int v19 = v45;
        *(unsigned char *)(v0 + 234) = v45;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
        goto LABEL_18;
      }
LABEL_15:
      uint64_t v16 = *(void *)(v0 + 208);
      uint64_t v17 = *(void *)(v0 + 216) + 1;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
      if (v17 == v16)
      {
        swift_bridgeObjectRelease();
        char v18 = *(unsigned char *)(v0 + 232);
        int v19 = *(unsigned __int8 *)(v0 + 234);
LABEL_18:
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v24 = swift_slowAlloc();
          uint64_t v25 = swift_slowAlloc();
          uint64_t v46 = v25;
          *(_DWORD *)uint64_t v24 = 136315394;
          char v47 = v18;
          unint64_t v26 = ExecutionOverrideDecision.rawValue.getter();
          *(void *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v46);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v24 + 12) = 2080;
          uint64_t v28 = 0xD000000000000016;
          unint64_t v29 = 0x80000001BA060D10;
          switch(v19)
          {
            case 1:
              uint64_t v28 = 0xD000000000000021;
              char v30 = "overrideMitigatorForEmergencyCall";
              goto LABEL_33;
            case 2:
              uint64_t v28 = 0xD000000000000023;
              char v30 = "overrideMitigatorForIntercomRequest";
              goto LABEL_33;
            case 3:
              uint64_t v28 = 0xD000000000000022;
              char v30 = "overrideMitigatorForServerFallback";
              goto LABEL_33;
            case 4:
              uint64_t v28 = 0xD000000000000022;
              char v30 = "validIntentForTriggerLessFollowups";
              goto LABEL_33;
            case 5:
              unint64_t v29 = 0x80000001BA060DF0;
              uint64_t v28 = 0xD000000000000017;
              break;
            case 6:
              uint64_t v28 = 0x5253417974706D65;
              unint64_t v29 = 0xEC000000656C7552;
              break;
            case 7:
              uint64_t v28 = 0xD00000000000001BLL;
              char v30 = "waitUniversalActionOverride";
LABEL_33:
              unint64_t v29 = (unint64_t)(v30 - 32) | 0x8000000000000000;
              break;
            case 8:
              unint64_t v29 = 0xE400000000000000;
              uint64_t v28 = 1701736302;
              break;
            default:
              break;
          }
          *(void *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v46);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v22, v23, "[ExecutionOverride] Final ExecutionOverride Decision was evaluated as: %s from %s", (uint8_t *)v24, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v25, -1, -1);
          MEMORY[0x1BA9E48C0](v24, -1, -1);
        }
        else
        {
        }
        swift_beginAccess();
        char v36 = *(unsigned char *)(v0 + 234);
        swift_beginAccess();
        char v37 = *(unsigned char *)(v0 + 232);
        uint64_t v38 = (objc_class *)type metadata accessor for ExecutionOverrideResult();
        uint64_t v39 = objc_allocWithZone(v38);
        v39[OBJC_IVAR____TtC14SiriKitRuntime23ExecutionOverrideResult_type] = v36;
        v39[OBJC_IVAR____TtC14SiriKitRuntime23ExecutionOverrideResult_decision] = v37;
        *(void *)(v0 + 144) = v39;
        *(void *)(v0 + 152) = v38;
        id v40 = objc_msgSendSuper2((objc_super *)(v0 + 144), sel_init);
        uint64_t v41 = *(uint64_t (**)(id))(v0 + 8);
        return v41(v40);
      }
      uint64_t v31 = *(void *)(v0 + 216) + 1;
      *(void *)(v0 + 216) = v31;
      outlined init with copy of ReferenceResolutionClientProtocol(*(void *)(v0 + 200) + 40 * v31 + 32, (uint64_t)v14);
      uint64_t v32 = *(void *)(v0 + 80);
      uint64_t v33 = *(void *)(v0 + 88);
      __swift_project_boxed_opaque_existential_1(v14, v32);
      uint64_t v44 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 + 16) + **(int **)(v33 + 16));
      uint64_t v34 = (void *)swift_task_alloc();
      *(void *)(v0 + 224) = v34;
      *uint64_t v34 = v0;
      v34[1] = ExecutionOverrideDecisionMaker.evaluate(rules:);
      return v44(v0 + 233, v32, v33);
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](ExecutionOverrideDecisionMaker.evaluate(rules:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char v20;
  objc_class *v21;
  unsigned char *v22;
  id v23;
  uint64_t (*v24)(id);
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  uint64_t v28 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 192) = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "Evaluating Pre-Execution Decision..", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }
  uint64_t v5 = *(void *)(v0 + 184);

  *(unsigned char *)(v0 + 232) = 12;
  *(unsigned char *)(v0 + 234) = 8;
  unint64_t v6 = *(void *)(v5 + 16);
  *(void *)(v0 + 200) = v6;
  unint64_t v7 = *(void *)(v6 + 16);
  *(void *)(v0 + 208) = v7;
  if (v7)
  {
    *(void *)(v0 + 216) = 0;
    uint64_t v8 = v6 + 32;
    swift_bridgeObjectRetain();
    outlined init with copy of ReferenceResolutionClientProtocol(v8, v0 + 56);
    uint64_t v9 = *(void *)(v0 + 80);
    uint64_t v10 = *(void *)(v0 + 88);
    __swift_project_boxed_opaque_existential_1((void *)(v0 + 56), v9);
    uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 + 16) + **(int **)(v10 + 16));
    unint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 224) = v11;
    *unint64_t v11 = v0;
    v11[1] = ExecutionOverrideDecisionMaker.evaluate(rules:);
    return v25(v0 + 233, v9, v10);
  }
  else
  {
    uint64_t v13 = Logger.logObject.getter();
    unint64_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      char v15 = swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      unint64_t v26 = v16;
      *(_DWORD *)char v15 = 136315394;
      unint64_t v27 = 12;
      uint64_t v17 = ExecutionOverrideDecision.rawValue.getter();
      *(void *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2080;
      *(void *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(1701736302, 0xE400000000000000, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v13, v14, "[ExecutionOverride] Final ExecutionOverride Decision was evaluated as: %s from %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v16, -1, -1);
      MEMORY[0x1BA9E48C0](v15, -1, -1);
    }

    swift_beginAccess();
    int v19 = *(unsigned char *)(v0 + 234);
    swift_beginAccess();
    uint64_t v20 = *(unsigned char *)(v0 + 232);
    uint64_t v21 = (objc_class *)type metadata accessor for ExecutionOverrideResult();
    uint64_t v22 = objc_allocWithZone(v21);
    v22[OBJC_IVAR____TtC14SiriKitRuntime23ExecutionOverrideResult_type] = v19;
    v22[OBJC_IVAR____TtC14SiriKitRuntime23ExecutionOverrideResult_decision] = v20;
    *(void *)(v0 + 144) = v22;
    *(void *)(v0 + 152) = v21;
    os_log_type_t v23 = objc_msgSendSuper2((objc_super *)(v0 + 144), sel_init);
    uint64_t v24 = *(uint64_t (**)(id))(v0 + 8);
    return v24(v23);
  }
}

uint64_t ExecutionOverrideDecisionMaker.evaluate(rules:)(uint64_t a1)
{
  *(void *)(v1 + 184) = a1;
  return MEMORY[0x1F4188298](ExecutionOverrideDecisionMaker.evaluate(rules:), 0, 0);
}

uint64_t protocol witness for ExecutionOverride.evaluate() in conformance HangUpOverride(uint64_t a1)
{
  unint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(**(void **)v1 + 280) + **(int **)(**(void **)v1 + 280));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v6(a1);
}

uint64_t HangUpOverride.evaluate()(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x1F4188298](HangUpOverride.evaluate(), 0, 0);
}

uint64_t HangUpOverride.evaluate()(char a1)
{
  *(unsigned char *)(*(void *)v1 + 40) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](HangUpOverride.evaluate(), 0, 0);
}

uint64_t HangUpOverride.evaluate()()
{
  if ((*(uint64_t (**)(void))(**(void **)(v0 + 24) + 176))())
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1B9C64000, v2, v3, "[ExecutionOverride] [HangUpOverride]: ff enabled. Return .accept", v4, 2u);
      MEMORY[0x1BA9E48C0](v4, -1, -1);
    }

    **(unsigned char **)(v0 + 16) = 12;
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
  else
  {
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 32) = v7;
    void *v7 = v0;
    v7[1] = HangUpOverride.evaluate();
    return HangUpOverride.isUserOnPhoneCall()();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  char v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t (*v15)(void);
  uint64_t v17;

  if (*(unsigned char *)(v0 + 40))
  {
    uint64_t v1 = *(void *)(v0 + 24);
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isSpeechRequest) == 1
      && *(unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isNlEmpty) == 1)
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v2 = type metadata accessor for Logger();
      __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
      os_log_type_t v3 = Logger.logObject.getter();
      uint64_t v4 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v3, v4))
      {
        uint64_t v5 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v5 = 0;
        _os_log_impl(&dword_1B9C64000, v3, v4, "[ExecutionOverride] [HangUpOverride]: User on phone call and NL is empty. Return .mitigateEmptyASR", v5, 2u);
        MEMORY[0x1BA9E48C0](v5, -1, -1);
      }

      unint64_t v6 = 8;
    }
    else
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      unint64_t v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
      unint64_t v12 = Logger.logObject.getter();
      uint64_t v13 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v13))
      {
        unint64_t v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v14 = 0;
        _os_log_impl(&dword_1B9C64000, v12, v13, "[ExecutionOverride] [HangUpOverride]: User on phone call. Checking if valid active phone call request...", v14, 2u);
        MEMORY[0x1BA9E48C0](v14, -1, -1);
      }

      if (HangUpOverride.isValidActivePhoneCallRequest()()) {
        unint64_t v6 = 12;
      }
      else {
        unint64_t v6 = 0;
      }
    }
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
    uint64_t v8 = Logger.logObject.getter();
    uint64_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_1B9C64000, v8, v9, "[ExecutionOverride] [HangUpOverride]: User not on phone call. Return .accept", v10, 2u);
      MEMORY[0x1BA9E48C0](v10, -1, -1);
    }

    unint64_t v6 = 12;
  }
  **(unsigned char **)(v0 + 16) = v6;
  char v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t HangUpOverride.isBlushingPhantomEnabled.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_isBlushingPhantomEnabled);
  swift_beginAccess();
  return *v1;
}

unint64_t ExecutionOverrideDecision.rawValue.getter()
{
  unint64_t result = 0xD000000000000017;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000021;
      break;
    case 2:
    case 4:
    case 5:
    case 6:
      unint64_t result = 0xD000000000000024;
      break;
    case 3:
      unint64_t result = 0xD000000000000019;
      break;
    case 7:
      unint64_t result = 0xD000000000000021;
      break;
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    case 0xA:
      unint64_t result = 0x757165526C696166;
      break;
    case 0xB:
      unint64_t result = 0xD000000000000015;
      break;
    case 0xC:
      unint64_t result = 0x747065636361;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for ExecutionOverride.overrideType.getter in conformance HangUpOverride()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t HangUpOverride.overrideType.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(unsigned char *)(v1 + 16);
  return result;
}

uint64_t protocol witness for ExecutionOverride.evaluate() in conformance WaitUniversalActionOverride()
{
  (*(void (**)(void))(**(void **)v0 + 144))();
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
  return protocol witness for ExecutionOverride.evaluate() in conformance AnnounceExecutionOverride(v2);
}

SiriKitRuntime::ExecutionOverrideDecision __swiftcall WaitUniversalActionOverride.evaluate()()
{
  uint64_t v2 = v1;
  uint64_t v72 = v0;
  uint64_t v3 = type metadata accessor for Parse();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v61 = v3;
  uint64_t v62 = v4;
  MEMORY[0x1F4188790](v3);
  id v63 = (id *)((char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = type metadata accessor for Input();
  uint64_t v70 = *(void *)(v6 - 8);
  uint64_t v71 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v65 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  uint64_t v8 = MEMORY[0x1F4188790](v67);
  uint64_t v69 = (uint64_t)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  unint64_t v11 = (char *)&v60 - v10;
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  uint64_t v12 = MEMORY[0x1F4188790](v68);
  MEMORY[0x1F4188790](v12);
  unint64_t v14 = (char *)&v60 - v13;
  uint64_t v15 = type metadata accessor for InputOrigin();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  int v19 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v60 - v20;
  uint64_t v22 = *(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_aceInputOrigin);
  swift_bridgeObjectRetain();
  uint64_t v66 = v22;
  InputOrigin.init(aceValue:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for InputOrigin?);
    int v64 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v14, v15);
    (*(void (**)(char *, void, uint64_t))(v16 + 104))(v19, *MEMORY[0x1E4FA5180], v15);
    lazy protocol witness table accessor for type InputOrigin and conformance InputOrigin();
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v75[0] == v73 && v75[1] == v74) {
      int v64 = 1;
    }
    else {
      int v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    os_log_type_t v23 = *(void (**)(char *, uint64_t))(v16 + 8);
    v23(v19, v15);
    v23(v21, v15);
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  uint64_t v25 = __swift_project_value_buffer(v24, (uint64_t)static Logger.executor);
  swift_retain_n();
  unint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v60 = v25;
    uint64_t v29 = v28;
    uint64_t v30 = swift_slowAlloc();
    v75[0] = v30;
    *(_DWORD *)uint64_t v29 = 136315650;
    outlined init with copy of Input?(v2 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_input, (uint64_t)v11);
    uint64_t v31 = String.init<A>(describing:)();
    uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2080;
    swift_bridgeObjectRetain();
    InputOrigin.init(aceValue:)();
    uint64_t v33 = String.init<A>(describing:)();
    uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 22) = 1024;
    int v35 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_isFirstRequestInSession);
    swift_release();
    LODWORD(v73) = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1B9C64000, v26, v27, "input: %s,\ninputOrigin: %s,\nisFirstRequestInSession:%{BOOL}d", (uint8_t *)v29, 0x1Cu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v30, -1, -1);
    MEMORY[0x1BA9E48C0](v29, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  char v36 = (unsigned __int8 *)(static StopRepromptFeatureFlag.forceEnabled + 16);
  char v37 = (os_unfair_lock_s *)(static StopRepromptFeatureFlag.forceEnabled + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static StopRepromptFeatureFlag.forceEnabled + 20));
  partial apply for closure #1 in StopRepromptFeatureFlag.isEnabled.getter(v36, v75);
  os_unfair_lock_unlock(v37);
  if (LOBYTE(v75[0]) != 1)
  {
    os_log_type_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl(&dword_1B9C64000, v42, v43, "User may want to Pause but StopRepromptFeatureFlag is disabled.", v44, 2u);
      MEMORY[0x1BA9E48C0](v44, -1, -1);
    }

    goto LABEL_27;
  }
  uint64_t v38 = v69;
  outlined init with copy of Input?(v2 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_input, v69);
  uint64_t v40 = v70;
  uint64_t v39 = v71;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48))(v38, 1, v71) == 1)
  {
    SiriKitRuntime::ExecutionOverrideDecision result = outlined destroy of ReferenceResolutionClientProtocol?(v38, &demangling cache variable for type metadata for Input?);
LABEL_27:
    char v50 = 12;
    goto LABEL_28;
  }
  unsigned __int8 v45 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v65, v38, v39);
  if ((Input.inputOrAlternativesHasWantedToPause.getter() & 1) == 0
    || (*(unsigned char *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_isFirstRequestInSession) & 1) != 0
    || (v64 & 1) == 0)
  {
    SiriKitRuntime::ExecutionOverrideDecision result = (*(unsigned __int8 (**)(char *, uint64_t))(v40 + 8))(v45, v39);
    goto LABEL_27;
  }
  uint64_t v46 = v63;
  Input.parse.getter();
  uint64_t v48 = v61;
  uint64_t v47 = v62;
  int v49 = (*(uint64_t (**)(id *, uint64_t))(v62 + 88))(v46, v61);
  if (v49 != *MEMORY[0x1E4FA1F00])
  {
    if (v49 == *MEMORY[0x1E4FA1F40])
    {
      (*(void (**)(id *, uint64_t))(v47 + 96))(v46, v48);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
      swift_release();
      uint64_t v51 = type metadata accessor for NLIntent();
      (*(void (**)(id *, uint64_t))(*(void *)(v51 - 8) + 8))(v46, v51);
      goto LABEL_33;
    }
    if (v49 == *MEMORY[0x1E4FA1F08])
    {
      (*(void (**)(id *, uint64_t))(v47 + 96))(v46, v48);
      swift_unknownObjectRelease();
      goto LABEL_33;
    }
    if (v49 != *MEMORY[0x1E4FA1F10])
    {
      if (v49 == *MEMORY[0x1E4FA1F18])
      {
        (*(void (**)(id *, uint64_t))(v47 + 96))(v46, v48);

        goto LABEL_33;
      }
      if (v49 != *MEMORY[0x1E4FA1F48])
      {
        Swift::String v56 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v58 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v58 = 0;
          _os_log_impl(&dword_1B9C64000, v56, v57, "User may want to Pause but doing nothing for this type of input.", v58, 2u);
          Swift::String v59 = v58;
          uint64_t v39 = v71;
          MEMORY[0x1BA9E48C0](v59, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v40 + 8))(v65, v39);
        SiriKitRuntime::ExecutionOverrideDecision result = (*(unsigned __int8 (**)(id *, uint64_t))(v47 + 8))(v46, v48);
        goto LABEL_27;
      }
    }
  }
  (*(void (**)(id *, uint64_t))(v47 + 8))(v46, v48);
LABEL_33:
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v54 = 0;
    _os_log_impl(&dword_1B9C64000, v52, v53, "User may want to Pause. Siri will wait for next input.", v54, 2u);
    Swift::String v55 = v54;
    uint64_t v39 = v71;
    MEMORY[0x1BA9E48C0](v55, -1, -1);
  }

  SiriKitRuntime::ExecutionOverrideDecision result = (*(unsigned __int8 (**)(char *, uint64_t))(v40 + 8))(v65, v39);
  char v50 = 9;
LABEL_28:
  *uint64_t v72 = v50;
  return result;
}

unint64_t lazy protocol witness table accessor for type InputOrigin and conformance InputOrigin()
{
  unint64_t result = lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin;
  if (!lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin)
  {
    type metadata accessor for InputOrigin();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StopRepromptFeatureFlag and conformance StopRepromptFeatureFlag()
{
  unint64_t result = lazy protocol witness table cache variable for type StopRepromptFeatureFlag and conformance StopRepromptFeatureFlag;
  if (!lazy protocol witness table cache variable for type StopRepromptFeatureFlag and conformance StopRepromptFeatureFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StopRepromptFeatureFlag and conformance StopRepromptFeatureFlag);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StopRepromptFeatureFlag and conformance StopRepromptFeatureFlag;
  if (!lazy protocol witness table cache variable for type StopRepromptFeatureFlag and conformance StopRepromptFeatureFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StopRepromptFeatureFlag and conformance StopRepromptFeatureFlag);
  }
  return result;
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance CamFeatureFlag()
{
  return "Siri";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance StopRepromptFeatureFlag()
{
  return "stop_reprompt";
}

uint64_t protocol witness for ExecutionOverride.overrideType.getter in conformance WaitUniversalActionOverride()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 112))();
}

uint64_t WaitUniversalActionOverride.overrideType.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(unsigned char *)(v1 + 16);
  return result;
}

uint64_t protocol witness for ExecutionOverride.evaluate() in conformance EmptyAsrOverride()
{
  (*(void (**)(void))(**(void **)v0 + 184))();
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
  return protocol witness for ExecutionOverride.evaluate() in conformance AnnounceExecutionOverride(v2);
}

SiriKitRuntime::ExecutionOverrideDecision __swiftcall EmptyAsrOverride.evaluate()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for InputOrigin();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  unint64_t v11 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)v42 - v12;
  uint64_t v14 = *(void *)(v2 + 48);
  unint64_t v15 = *(void *)(v2 + 56);
  swift_bridgeObjectRetain();
  InputOrigin.init(aceValue:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of InputOrigin?((uint64_t)v6);
    int v44 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v11, *MEMORY[0x1E4FA5180], v7);
    lazy protocol witness table accessor for type InputOrigin and conformance InputOrigin();
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v47[0] == v45 && v47[1] == v46) {
      int v44 = 1;
    }
    else {
      int v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
    v16(v11, v7);
    v16(v13, v7);
  }
  uint64_t v17 = *(void *)(v2 + 24);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = __swift_project_value_buffer(v18, (uint64_t)static Logger.executor);
  swift_retain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc();
    v42[1] = v19;
    uint64_t v23 = v22;
    uint64_t v24 = swift_slowAlloc();
    os_log_type_t v43 = v3;
    v42[0] = v24;
    v47[0] = v24;
    *(_DWORD *)uint64_t v23 = 136316930;
    swift_bridgeObjectRetain();
    uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2080;
    if (*(unsigned char *)(v2 + 44)) {
      uint64_t v25 = 1702195828;
    }
    else {
      uint64_t v25 = 0x65736C6166;
    }
    if (*(unsigned char *)(v2 + 44)) {
      unint64_t v26 = 0xE400000000000000;
    }
    else {
      unint64_t v26 = 0xE500000000000000;
    }
    uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 22) = 2080;
    uint64_t v45 = v17;
    uint64_t v27 = v17;
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 32) = 1024;
    int v30 = *(unsigned __int8 *)(v2 + 40);
    swift_release();
    LODWORD(v45) = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v23 + 38) = 1024;
    int v31 = *(unsigned __int8 *)(v2 + 41);
    swift_release();
    LODWORD(v45) = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v23 + 44) = 2048;
    uint64_t v32 = *(void *)(v2 + 32);
    swift_release();
    uint64_t v45 = v32;
    uint64_t v17 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v23 + 54) = 1024;
    int v33 = *(unsigned __int8 *)(v2 + 43);
    swift_release();
    LODWORD(v45) = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v23 + 60) = 1024;
    int v34 = *(unsigned __int8 *)(v2 + 42);
    swift_release();
    LODWORD(v45) = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1B9C64000, v20, v21, "[EmptyAsrOverride]\ninputOrigin: %s,\nisNlEmpty: %s,\nendpointMode:%s,\nisFirstRequestInSession:%{BOOL}d,\nisFlowAwaitingInput:%{BOOL}d,\nconsecutiveEmptyInputs:%ld,\nisSpeechRequest:%{BOOL}d,\ndidPreviouslyFallbackToServer:%{BOOL}d", (uint8_t *)v23, 0x42u);
    uint64_t v35 = v42[0];
    swift_arrayDestroy();
    uint64_t v3 = v43;
    MEMORY[0x1BA9E48C0](v35, -1, -1);
    MEMORY[0x1BA9E48C0](v23, -1, -1);
  }
  else
  {

    SiriKitRuntime::ExecutionOverrideDecision result = swift_release_n();
  }
  if (*(unsigned char *)(v2 + 43) == 1 && *(unsigned char *)(v2 + 44) == 1)
  {
    if (*(unsigned char *)(v2 + 40))
    {
      char v37 = 8;
    }
    else if ((v44 & (v17 != 2)) == 1 && (*(unsigned char *)(v2 + 42) & 1) == 0)
    {
      uint64_t v38 = *(void *)(v2 + 32);
      if (v38 < 1)
      {
        if (*(unsigned char *)(v2 + 41)) {
          char v37 = 12;
        }
        else {
          char v37 = 9;
        }
      }
      else
      {
        swift_retain();
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v39, v40))
        {
          uint64_t v41 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 134217984;
          v47[0] = v38;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          _os_log_impl(&dword_1B9C64000, v39, v40, "[EmptyAsrOverride] Ignore repetitive empty parse. repetition: %ld", v41, 0xCu);
          MEMORY[0x1BA9E48C0](v41, -1, -1);
        }
        else
        {

          SiriKitRuntime::ExecutionOverrideDecision result = swift_release();
        }
        char v37 = 9;
      }
    }
    else
    {
      char v37 = 9;
    }
  }
  else
  {
    char v37 = 12;
  }
  *uint64_t v3 = v37;
  return result;
}

uint64_t protocol witness for ExecutionOverride.overrideType.getter in conformance EmptyAsrOverride()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t EmptyAsrOverride.overrideType.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(unsigned char *)(v1 + 16);
  return result;
}

uint64_t protocol witness for ExecutionOverride.evaluate() in conformance EmergencyCallMitigatorOverride()
{
  (*(void (**)(void))(**(void **)v0 + 128))();
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
  return protocol witness for ExecutionOverride.evaluate() in conformance AnnounceExecutionOverride(v2);
}

SiriKitRuntime::ExecutionOverrideDecision __swiftcall EmergencyCallMitigatorOverride.evaluate()()
{
  uint64_t v2 = v0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Siri_Nlu_External_UserParse?(v1 + OBJC_IVAR____TtC14SiriKitRuntime30EmergencyCallMitigatorOverride_topRankedParse, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    SiriKitRuntime::ExecutionOverrideDecision result = outlined destroy of Siri_Nlu_External_UserParse?((uint64_t)v5);
    char v11 = 12;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    specialized static EmergencyCallMitigatorOverride.isEmergencyRequest(userParse:)();
    char v13 = v12;
    SiriKitRuntime::ExecutionOverrideDecision result = (*(unsigned __int8 (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    if (v13) {
      char v11 = 3;
    }
    else {
      char v11 = 12;
    }
  }
  *uint64_t v2 = v11;
  return result;
}

unint64_t type metadata accessor for USOSerializedIdentifier()
{
  unint64_t result = lazy cache variable for type metadata for USOSerializedIdentifier;
  if (!lazy cache variable for type metadata for USOSerializedIdentifier)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for USOSerializedIdentifier);
  }
  return result;
}

uint64_t protocol witness for ExecutionOverride.overrideType.getter in conformance EmergencyCallMitigatorOverride()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t EmergencyCallMitigatorOverride.overrideType.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(unsigned char *)(v1 + 16);
  return result;
}

uint64_t protocol witness for ExecutionOverride.evaluate() in conformance AnnounceExecutionOverride()
{
  (*(void (**)(void))(**(void **)v0 + 152))();
  uint64_t v2 = *(uint64_t (**)(void))(v1 + 8);
  return protocol witness for ExecutionOverride.evaluate() in conformance AnnounceExecutionOverride(v2);
}

SiriKitRuntime::ExecutionOverrideDecision __swiftcall AnnounceExecutionOverride.evaluate()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_1B9C64000, v5, v6, "Evaluating Announce Override rule...", v7, 2u);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }

  if ((*(uint64_t (**)(void))(*(void *)v2 + 168))())
  {
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_1B9C64000, v8, v9, "AnnounceExecutionOverride overriding mitigator decision.", v10, 2u);
      MEMORY[0x1BA9E48C0](v10, -1, -1);
    }

    char v12 = 3;
    goto LABEL_22;
  }
  int v13 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isTriggerlessFollowup);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  if (v13 != 1)
  {
    if (v16)
    {
      os_log_type_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v21 = 0;
      os_log_type_t v24 = v15;
      uint64_t v22 = "Evaluation result from Announce rule is accept when request is not trigger less follow up nor the request sh"
            "ould be mitigated for an Intercom task";
      uint64_t v23 = v14;
      goto LABEL_20;
    }
LABEL_21:

    char v12 = 12;
LABEL_22:
    *uint64_t v3 = v12;
    return result;
  }
  if (v16)
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_1B9C64000, v14, v15, "Request is a triggerless followup aka siri announcement.,.", v17, 2u);
    MEMORY[0x1BA9E48C0](v17, -1, -1);
  }

  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isMedocSupported) == 1)
  {
    if (one-time initialization token for forceEnabled != -1) {
      swift_once();
    }
    uint64_t v18 = (unsigned __int8 *)(static FlexibleAnnounceFeatureFlag.forceEnabled + 16);
    uint64_t v19 = (os_unfair_lock_s *)(static FlexibleAnnounceFeatureFlag.forceEnabled + 20);
    os_unfair_lock_lock((os_unfair_lock_t)(static FlexibleAnnounceFeatureFlag.forceEnabled + 20));
    partial apply for closure #1 in FlexibleAnnounceFeatureFlag.isEnabled.getter(v18, &v28);
    os_unfair_lock_unlock(v19);
    if (v28 == 1)
    {
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v14, v20))
      {
        os_log_type_t v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v21 = 0;
        uint64_t v23 = v14;
        os_log_type_t v24 = v20;
LABEL_20:
        _os_log_impl(&dword_1B9C64000, v23, v24, v22, v21, 2u);
        MEMORY[0x1BA9E48C0](v21, -1, -1);
        goto LABEL_21;
      }
      goto LABEL_21;
    }
  }
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl(&dword_1B9C64000, v25, v26, "Announce rule feature flag is disabled or we are on a non-medoc-enabled device; running rule..",
      v27,
      2u);
    MEMORY[0x1BA9E48C0](v27, -1, -1);
  }

  AnnounceExecutionOverride.triggerlessFollowupRulesWithoutFlexibleAnnounce()(v3);
  return result;
}

Swift::Bool __swiftcall AnnounceExecutionOverride.shouldOverrideMitigatorAndIsIntercomTask()()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_isMitigated) == 1) {
    AnnounceExecutionOverride.parseContainsAnnounceIntercomTask()();
  }
  return 0;
}

void protocol witness for ExecutionOverride.overrideType.getter in conformance AnnounceExecutionOverride(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(*(void *)v1 + 16);
}

uint64_t type metadata accessor for ExecutionOverrideResult()
{
  return self;
}

uint64_t HangUpOverride.__deallocating_deinit()
{
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime14HangUpOverride_topRankedParse, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t WaitUniversalActionOverride.__deallocating_deinit()
{
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_input, &demangling cache variable for type metadata for Input?);
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t EmptyAsrOverride.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t EmergencyCallMitigatorOverride.__deallocating_deinit()
{
  outlined destroy of Siri_Nlu_External_UserParse?(v0 + OBJC_IVAR____TtC14SiriKitRuntime30EmergencyCallMitigatorOverride_topRankedParse);

  return swift_deallocClassInstance();
}

uint64_t outlined destroy of Siri_Nlu_External_UserParse?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AnnounceExecutionOverride.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime25AnnounceExecutionOverride_topNlParse, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);

  return swift_deallocClassInstance();
}

SiriKitRuntime::PreExecutionRuleType __swiftcall ExecutionOverrideType.asPreExecutionType()()
{
  SiriKitRuntime::PreExecutionRuleType v1 = *v0;
  int v2 = 1 << *v0;
  if ((v2 & 0x53) == 0)
  {
    if ((v2 & 0xAC) != 0)
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
      uint64_t v4 = Logger.logObject.getter();
      os_log_type_t v5 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v4, v5))
      {
        uint64_t v6 = swift_slowAlloc();
        uint64_t v7 = swift_slowAlloc();
        uint64_t v11 = v7;
        *(_DWORD *)uint64_t v6 = 136315650;
        uint64_t v8 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v11);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v6 + 12) = 2080;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000029, 0x80000001BA06AF40, &v11);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v6 + 22) = 2080;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000014, 0x80000001BA06AF70, &v11);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B9C64000, v4, v5, "ExecutionOverrideType value of %s not expected; mapping to .none for PreExecutionRuleType. If you added a rule"
          " recently; make sure to explicitly update it's mapping value in %s.%s",
          (uint8_t *)v6,
          0x20u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v7, -1, -1);
        MEMORY[0x1BA9E48C0](v6, -1, -1);
      }
    }
    return 7;
  }
  return v1;
}

SiriKitRuntime::PreExecutionDecision __swiftcall ExecutionOverrideDecision.asPreExecutionDecision()()
{
  return *v0;
}

uint64_t ConversationRequestProcessor.handledMitigation(rcState:turn:ruleType:ruleDecision:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  os_log_type_t v5 = v4;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for InputOrigin?);
  MEMORY[0x1F4188790](v10 - 8);
  char v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for TTResponseMessage.MitigationDecision();
  uint64_t v70 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v77 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v61 - v17;
  MEMORY[0x1F4188790](v16);
  os_log_type_t v20 = (char *)&v61 - v19;
  (*(void (**)(uint64_t))(*a1 + 504))(a4);
  (*(void (**)(uint64_t))(*a1 + 528))(a3);
  uint64_t v21 = *(void *)((char *)v5 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_preExecutionActionHandler);
  uint64_t v22 = a2 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin;
  uint64_t v23 = type metadata accessor for InputOrigin();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  uint64_t v74 = v24 + 16;
  uint64_t v75 = v22;
  uint64_t v72 = v25;
  v25(v12, v22, v23);
  os_log_type_t v26 = *(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56);
  uint64_t v76 = v24 + 56;
  uint64_t v73 = v26;
  v26(v12, 0, 1, v23);
  uint64_t v27 = *(void (**)(uint64_t *, char *))(*(void *)v21 + 136);
  uint64_t v78 = v21;
  uint64_t v79 = v20;
  v27(a1, v12);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for InputOrigin?);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  uint64_t v29 = __swift_project_value_buffer(v28, (uint64_t)static Logger.conversationBridge);
  uint64_t v30 = v70;
  (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v18, v79, v13);
  swift_retain_n();
  uint64_t v69 = v29;
  int v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.info.getter();
  int v33 = v32;
  uint64_t v34 = v13;
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v35 = swift_slowAlloc();
    uint64_t v68 = v23;
    uint64_t v36 = v35;
    uint64_t v67 = swift_slowAlloc();
    v81[0] = v67;
    *(_DWORD *)uint64_t v36 = 134218242;
    os_log_t v66 = v31;
    uint64_t v37 = TTResponseMessage.MitigationDecision.rawValue.getter();
    uint64_t v62 = *(void (**)(char *, uint64_t))(v30 + 8);
    uint64_t v71 = (v30 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v62(v18, v13);
    uint64_t v80 = v37;
    int v64 = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v36 + 12) = 2080;
    uint64_t v63 = v36 + 14;
    uint64_t v38 = *a1;
    int v65 = v33;
    uint64_t v39 = *(uint64_t (**)(uint64_t))(v38 + 800);
    uint64_t v40 = swift_retain();
    uint64_t v41 = v39(v40);
    uint64_t v34 = v13;
    os_log_type_t v42 = v62;
    uint64_t v43 = v41;
    unint64_t v45 = v44;
    swift_release();
    uint64_t v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v45, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    os_log_t v46 = v66;
    _os_log_impl(&dword_1B9C64000, v66, (os_log_type_t)v65, "[ConversationRequestProcessor] PreExecution Migitation Decision %ld State %s", (uint8_t *)v36, 0x16u);
    uint64_t v47 = v67;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v47, -1, -1);
    uint64_t v48 = v36;
    uint64_t v23 = v68;
    MEMORY[0x1BA9E48C0](v48, -1, -1);
  }
  else
  {
    int v49 = *(void (**)(char *, uint64_t))(v30 + 8);
    uint64_t v71 = (v30 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    char v50 = v18;
    os_log_type_t v42 = v49;
    v49(v50, v13);

    swift_release_n();
  }
  uint64_t v51 = *(void (**)(char *, void, uint64_t))(v30 + 104);
  uint64_t v52 = v77;
  v51(v77, *MEMORY[0x1E4FA2080], v34);
  _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2(&lazy protocol witness table cache variable for type TTResponseMessage.MitigationDecision and conformance TTResponseMessage.MitigationDecision, MEMORY[0x1E4FA2088]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  BOOL v53 = v81[0] == v80;
  v42(v52, v34);
  specialized static ConversationRequestProcessor.postMitigationMessage(mitigated:assistantId:sessionId:requestId:messagePublisher:)(v53, v5[12], v5[13], (uint64_t)v5 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId, v5[8], v5[9], v5 + 3);
  uint64_t v54 = v5[10];
  uint64_t v55 = v5[11];
  v72(v12, v75, v23);
  v73(v12, 0, 1, v23);
  char v56 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, char *))(*(void *)v78 + 144))(a1, v54, v55, v12);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for InputOrigin?);
  if (v56)
  {
    os_log_type_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v57, v58))
    {
      Swift::String v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v59 = 0;
      _os_log_impl(&dword_1B9C64000, v57, v58, "Acted upon pre-execution decision. Not committing..", v59, 2u);
      MEMORY[0x1BA9E48C0](v59, -1, -1);
    }
  }
  v42(v79, v34);
  return v56 & 1;
}

uint64_t ResultCandidateState.preExecutionDecision.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_preExecutionDecision);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t ResultCandidateState.preExcutionRuleType.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_preExcutionRuleType);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t ResultCandidateState.preExecutionDecision.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_preExecutionDecision);
  swift_beginAccess();
  return *v1;
}

void specialized static ConversationRequestProcessor.postMitigationMessage(mitigated:assistantId:sessionId:requestId:messagePublisher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v8 = objc_allocWithZone((Class)type metadata accessor for ConversationMitigationMessage());
  uint64_t v9 = ConversationMitigationMessage.init(build:)();
  if (v9)
  {
    uint64_t v10 = v9;
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
    char v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v12, v13, "[ConversationRequestProcessor] post MitigationMessage %{BOOL}d", v14, 8u);
      MEMORY[0x1BA9E48C0](v14, -1, -1);
    }

    __swift_project_boxed_opaque_existential_1(a7, a7[3]);
    dispatch thunk of MessagePublishing.postMessage(_:)();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_1B9C64000, v10, v16, "[ConversationRequestProcessor] Error building ConversationMitigationMessage. Missing fields?", v17, 2u);
      MEMORY[0x1BA9E48C0](v17, -1, -1);
    }
  }
}

uint64_t partial apply for closure #1 in static ConversationRequestProcessor.postMitigationMessage(mitigated:assistantId:sessionId:requestId:messagePublisher:)(uint64_t a1)
{
  return closure #1 in static ConversationRequestProcessor.postMitigationMessage(mitigated:assistantId:sessionId:requestId:messagePublisher:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned __int8 *)(v1 + 56));
}

uint64_t closure #1 in static ConversationRequestProcessor.postMitigationMessage(mitigated:assistantId:sessionId:requestId:messagePublisher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v21 = a7;
  uint64_t v20 = a5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v11 - 8);
  os_log_type_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *MEMORY[0x1E4FA2328];
  uint64_t v15 = type metadata accessor for MessageSource();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 104))(v13, v14, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  ConversationMitigationMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  ConversationMitigationMessage.Builder.assistantId.setter();
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v10, a4, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v10, 0, 1, v17);
  ConversationMitigationMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  ConversationMitigationMessage.Builder.requestId.setter();
  return ConversationMitigationMessage.Builder.isMitigated.setter();
}

uint64_t PreExecutionActionHandler.actOnPreExecutionDecision(rcState:requestId:inputOrigin:)(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v125 = a4;
  unint64_t v142 = a3;
  uint64_t v138 = type metadata accessor for SelectedUserAttributes();
  uint64_t v140 = *(void *)(v138 - 8);
  MEMORY[0x1F4188790](v138);
  uint64_t v133 = (char *)&v120 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SelectedUserAttributes?);
  MEMORY[0x1F4188790](v7 - 8);
  os_log_type_t v137 = (char *)&v120 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = type metadata accessor for InputOrigin();
  uint64_t v9 = *(void *)(v128 - 8);
  MEMORY[0x1F4188790](v128);
  Class v122 = (char *)&v120 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (InputOrigin?, InputOrigin?));
  MEMORY[0x1F4188790](v123);
  uint64_t v12 = (char *)&v120 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for InputOrigin?);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v124 = (uint64_t)&v120 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v135 = (uint64_t)&v120 - v16;
  uint64_t v17 = type metadata accessor for TTResponseMessage.MitigationDecision();
  uint64_t v144 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v132 = (char *)&v120 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (TTResponseMessage.MitigationDecision?, TTResponseMessage.MitigationDecision?));
  MEMORY[0x1F4188790](v139);
  uint64_t v145 = (uint64_t)&v120 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  uint64_t v20 = MEMORY[0x1F4188790](v131);
  os_log_t v130 = (char *)&v120 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v120 - v23;
  uint64_t v25 = MEMORY[0x1F4188790](v22);
  uint64_t v27 = (char *)&v120 - v26;
  uint64_t v28 = MEMORY[0x1F4188790](v25);
  uint64_t v143 = (uint64_t)&v120 - v29;
  uint64_t v146 = (*(uint64_t (**)(uint64_t))(*a1 + 496))(v28);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  uint64_t v31 = __swift_project_value_buffer(v30, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  uint64_t v134 = v31;
  os_log_type_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v136 = a2;
  uint64_t v127 = v12;
  uint64_t v126 = v9;
  if (v34)
  {
    uint64_t v35 = swift_slowAlloc();
    uint64_t v129 = (void (*)(void))v24;
    uint64_t v36 = v35;
    uint64_t v121 = swift_slowAlloc();
    v148[0] = v121;
    *(_DWORD *)uint64_t v36 = 136315394;
    uint64_t v37 = *(uint64_t (**)(uint64_t))(*a1 + 800);
    uint64_t v38 = swift_retain();
    uint64_t v39 = v37(v38);
    unint64_t v41 = v40;
    swift_release();
    uint64_t v147 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, v148);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v36 + 12) = 2080;
    unint64_t v42 = PreExecutionDecision.rawValue.getter(v146);
    uint64_t v147 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, v148);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v32, v33, "Taking action on preExecution decision for RC: %s, preExecutionDecision: %s", (uint8_t *)v36, 0x16u);
    uint64_t v44 = v121;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v44, -1, -1);
    uint64_t v45 = v36;
    uint64_t v24 = (char *)v129;
    MEMORY[0x1BA9E48C0](v45, -1, -1);
  }
  else
  {

    uint64_t v46 = swift_release_n();
  }
  uint64_t v47 = v143;
  uint64_t v48 = (void (**)(void))(*a1 + 544);
  uint64_t v129 = *v48;
  ((void (*)(uint64_t))v129)(v46);
  uint64_t v49 = v144;
  (*(void (**)(char *, void, uint64_t))(v144 + 104))(v27, *MEMORY[0x1E4FA2080], v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v27, 0, 1, v17);
  uint64_t v50 = v145;
  uint64_t v51 = v145 + *(int *)(v139 + 48);
  outlined init with copy of ReferenceResolutionClientProtocol?(v47, v145, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  uint64_t v52 = v50;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v27, v51, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  BOOL v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  if (v53(v50, 1, v17) != 1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v50, (uint64_t)v24, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    if (v53(v51, 1, v17) != 1)
    {
      uint64_t v139 = (uint64_t)v48;
      Swift::String v59 = v24;
      uint64_t v60 = v144;
      uint64_t v61 = v132;
      (*(void (**)(char *, uint64_t, uint64_t))(v144 + 32))(v132, v51, v17);
      lazy protocol witness table accessor for type TTResponseMessage.MitigationDecision and conformance TTResponseMessage.MitigationDecision(&lazy protocol witness table cache variable for type TTResponseMessage.MitigationDecision and conformance TTResponseMessage.MitigationDecision, MEMORY[0x1E4FA2088]);
      char v62 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v63 = *(void (**)(char *, uint64_t))(v60 + 8);
      v63(v61, v17);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v27, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      outlined destroy of ReferenceResolutionClientProtocol?(v143, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      v63(v59, v17);
      uint64_t v58 = outlined destroy of ReferenceResolutionClientProtocol?(v50, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      uint64_t v55 = v140;
      char v56 = v141;
      uint64_t v57 = v135;
      if ((v62 & 1) == 0) {
        goto LABEL_23;
      }
      goto LABEL_13;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v27, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    outlined destroy of ReferenceResolutionClientProtocol?(v143, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    (*(void (**)(char *, uint64_t))(v144 + 8))(v24, v17);
    uint64_t v55 = v140;
LABEL_11:
    uint64_t v58 = outlined destroy of ReferenceResolutionClientProtocol?(v52, (uint64_t *)&demangling cache variable for type metadata for (TTResponseMessage.MitigationDecision?, TTResponseMessage.MitigationDecision?));
    char v56 = v141;
    goto LABEL_23;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v27, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  uint64_t v52 = v145;
  outlined destroy of ReferenceResolutionClientProtocol?(v47, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  unsigned int v54 = v53(v51, 1, v17);
  uint64_t v55 = v140;
  if (v54 != 1) {
    goto LABEL_11;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v52, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  char v56 = v141;
  uint64_t v57 = v135;
LABEL_13:
  if (PreExecutionDecision.rawValue.getter(v146) == 0xD000000000000019 && v64 == 0x80000001BA060BC0) {
    goto LABEL_15;
  }
  char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v58 = swift_bridgeObjectRelease();
  if (v65) {
    goto LABEL_23;
  }
  if (PreExecutionDecision.rawValue.getter(v146) == 0xD000000000000010 && v66 == 0x80000001BA060CA0) {
    goto LABEL_15;
  }
  char v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v58 = swift_bridgeObjectRelease();
  if (v67) {
    goto LABEL_23;
  }
  if (PreExecutionDecision.rawValue.getter(v146) == 0xD000000000000017 && v68 == 0x80000001BA060CC0)
  {
LABEL_15:
    uint64_t v58 = swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  char v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v58 = swift_bridgeObjectRelease();
  if (v69)
  {
LABEL_23:
    uint64_t v70 = (*(uint64_t (**)(uint64_t))(*v56[7] + 184))(v58);
    uint64_t v71 = (uint64_t)v137;
    (*(void (**)(uint64_t))(*a1 + 760))(v70);
    uint64_t v72 = v138;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v71, 1, v138))
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v71, &demangling cache variable for type metadata for SelectedUserAttributes?);
      char v73 = 0;
    }
    else
    {
      uint64_t v74 = v133;
      (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v133, v71, v72);
      outlined destroy of ReferenceResolutionClientProtocol?(v71, &demangling cache variable for type metadata for SelectedUserAttributes?);
      char v73 = SelectedUserAttributes.meetsUserSessionThreshold.getter();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v74, v72);
    }
    switch((char)v146)
    {
      case 1:
        uint64_t v75 = 1;
        PreExecutionActionHandler.mitigateRequest(requestId:dismissUI:logToStream:mitigatedByURS:)(v136, v142, 1, 0, 0);
        return v75;
      case 2:
        PreExecutionActionHandler.rejectUnrelatedAnnounceCallsFollowup(requestId:rcId:catId:userId:meetsUserSessionThreshold:)(v136, v142, a1[2], a1[3], 0xD000000000000032, 0x80000001BA06AD70, (uint64_t)a1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId, v73 & 1);
        return 1;
      case 3:
        swift_retain_n();
        uint64_t v76 = Logger.logObject.getter();
        os_log_type_t v77 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v76, v77))
        {
          uint64_t v78 = (uint8_t *)swift_slowAlloc();
          uint64_t v79 = swift_slowAlloc();
          v148[0] = v79;
          *(_DWORD *)uint64_t v78 = 136315138;
          uint64_t v146 = (uint64_t)(v78 + 4);
          uint64_t v80 = (uint64_t)v130;
          v129();
          uint64_t v81 = Optional.debugDescription.getter();
          unint64_t v83 = v82;
          outlined destroy of ReferenceResolutionClientProtocol?(v80, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
          uint64_t v147 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v83, v148);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v76, v77, "mitigationDecision = %s. Overriding mitigator decision..", v78, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v79, -1, -1);
          MEMORY[0x1BA9E48C0](v78, -1, -1);
        }
        else
        {

          swift_release_n();
        }
        goto LABEL_41;
      case 4:
        uint64_t v84 = a1[2];
        uint64_t v85 = a1[3];
        uint64_t v86 = (uint64_t)a1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId;
        uint64_t v87 = "OfflineServerFallback#NoConnection";
        goto LABEL_35;
      case 5:
        uint64_t v84 = a1[2];
        uint64_t v85 = a1[3];
        uint64_t v86 = (uint64_t)a1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId;
        uint64_t v87 = "OfflineServerFallback#AirplaneMode";
LABEL_35:
        PreExecutionActionHandler.rejectOfflineServerFallback(requestId:rcId:catId:userId:meetsUserSessionThreshold:)(v136, v142, v84, v85, 0xD000000000000022, (unint64_t)(v87 - 32) | 0x8000000000000000, v86, v73 & 1);
        return 1;
      case 6:
      case 10:
        ((void (*)(uint64_t, unint64_t))(*v56)[28])(v136, v142);
        return 1;
      case 7:
        PreExecutionActionHandler.rejectNonActiveSessionUserRequest(requestId:rcId:userId:meetsUserSessionThreshold:)(v136, v142, a1[2], a1[3], (uint64_t)a1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId, v73 & 1);
        return 1;
      case 8:
        PreExecutionActionHandler.mitigateDueToEmptyASR(requestId:)(v136, v142);
        return 1;
      case 9:
        uint64_t v88 = v136;
        ((void (*)(uint64_t, unint64_t))(*v56)[29])(v136, v142);
        swift_bridgeObjectRetain_n();
        uint64_t v89 = Logger.logObject.getter();
        os_log_type_t v90 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v89, v90))
        {
          uint64_t v91 = swift_slowAlloc();
          uint64_t v92 = swift_slowAlloc();
          v148[0] = v92;
          *(_DWORD *)uint64_t v91 = 136315394;
          unint64_t v93 = v142;
          swift_bridgeObjectRetain();
          uint64_t v147 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v93, v148);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v91 + 12) = 2080;
          unint64_t v94 = PreExecutionDecision.rawValue.getter(9);
          uint64_t v147 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v95, v148);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v89, v90, "Action taken on requestId: %s is: %s", (uint8_t *)v91, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v92, -1, -1);
          MEMORY[0x1BA9E48C0](v91, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        return 1;
      case 11:
      case 12:
LABEL_41:
        swift_bridgeObjectRetain_n();
        uint64_t v96 = Logger.logObject.getter();
        os_log_type_t v97 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v96, v97))
        {
          uint64_t v98 = (uint8_t *)swift_slowAlloc();
          uint64_t v99 = swift_slowAlloc();
          v148[0] = v99;
          *(_DWORD *)uint64_t v98 = 136315138;
          unint64_t v100 = v142;
          swift_bridgeObjectRetain();
          uint64_t v147 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v136, v100, v148);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B9C64000, v96, v97, "Action taken on requestId: %s is: No action taken", v98, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v99, -1, -1);
          MEMORY[0x1BA9E48C0](v98, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        return 0;
      default:
        PreExecutionActionHandler.rejectRequestSinceUserIsOnCall(requestId:rcId:userId:meetsUserSessionThreshold:)(v136, v142, a1[2], a1[3], (uint64_t)a1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId, v73 & 1);
        return 1;
    }
  }
  char v102 = v146;
  uint64_t v103 = v125;
  char v104 = (*(uint64_t (**)(uint64_t, uint64_t))(*v56[7] + 176))(v146, v125);
  uint64_t v105 = v136;
  PreExecutionActionHandler.mitigateRequest(requestId:dismissUI:logToStream:mitigatedByURS:)(v136, v142, v104 & 1, 1, 1);
  if (one-time initialization token for insightRequestSummaryLogger != -1) {
    swift_once();
  }
  uint64_t v106 = type metadata accessor for InsightRequestSummaryLogger();
  uint64_t v107 = __swift_project_value_buffer(v106, (uint64_t)static Logger.insightRequestSummaryLogger);
  uint64_t v108 = v142;
  swift_bridgeObjectRetain();
  specialized InsightRequestSummaryLogger.emitDebug(_:)(v107, v102, v105, v108);
  swift_bridgeObjectRelease();
  uint64_t v109 = v126;
  uint64_t v110 = v128;
  (*(void (**)(uint64_t, void, uint64_t))(v126 + 104))(v57, *MEMORY[0x1E4FA2390], v128);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v109 + 56))(v57, 0, 1, v110);
  uint64_t v111 = (uint64_t)v127;
  uint64_t v112 = (uint64_t)&v127[*(int *)(v123 + 48)];
  outlined init with copy of ReferenceResolutionClientProtocol?(v103, (uint64_t)v127, (uint64_t *)&demangling cache variable for type metadata for InputOrigin?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v57, v112, (uint64_t *)&demangling cache variable for type metadata for InputOrigin?);
  uint64_t v113 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v109 + 48);
  int v114 = v113(v111, 1, v110);
  uint64_t v115 = v124;
  if (v114 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v57, (uint64_t *)&demangling cache variable for type metadata for InputOrigin?);
    if (v113(v112, 1, v110) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v111, (uint64_t *)&demangling cache variable for type metadata for InputOrigin?);
LABEL_57:
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*v56[3] + 232))(5, v105, v142);
      return 1;
    }
    goto LABEL_55;
  }
  outlined init with copy of ReferenceResolutionClientProtocol?(v111, v124, (uint64_t *)&demangling cache variable for type metadata for InputOrigin?);
  if (v113(v112, 1, v110) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v135, (uint64_t *)&demangling cache variable for type metadata for InputOrigin?);
    (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v115, v110);
LABEL_55:
    outlined destroy of ReferenceResolutionClientProtocol?(v111, &demangling cache variable for type metadata for (InputOrigin?, InputOrigin?));
    return 1;
  }
  uint64_t v116 = v115;
  uint64_t v117 = v122;
  (*(void (**)(char *, uint64_t, uint64_t))(v109 + 32))(v122, v112, v110);
  lazy protocol witness table accessor for type TTResponseMessage.MitigationDecision and conformance TTResponseMessage.MitigationDecision((unint64_t *)&lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin, MEMORY[0x1E4FA23A0]);
  char v118 = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v119 = *(void (**)(char *, uint64_t))(v109 + 8);
  v119(v117, v110);
  outlined destroy of ReferenceResolutionClientProtocol?(v135, (uint64_t *)&demangling cache variable for type metadata for InputOrigin?);
  v119((char *)v116, v110);
  outlined destroy of ReferenceResolutionClientProtocol?(v111, (uint64_t *)&demangling cache variable for type metadata for InputOrigin?);
  if (v118) {
    goto LABEL_57;
  }
  return 1;
}

unint64_t PreExecutionDecision.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000017;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000021;
      break;
    case 2:
    case 4:
    case 5:
    case 6:
      unint64_t result = 0xD000000000000024;
      break;
    case 3:
      unint64_t result = 0xD000000000000019;
      break;
    case 7:
      unint64_t result = 0xD000000000000021;
      break;
    case 8:
      unint64_t result = 0xD000000000000010;
      break;
    case 10:
      unint64_t result = 0x757165526C696166;
      break;
    case 11:
      unint64_t result = 0xD000000000000015;
      break;
    case 12:
      unint64_t result = 0x747065636361;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ConversationRequestProcessor.revealAsrTranscription(for:turn:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v76 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_RepetitionResult?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_RepetitionResult.RepetitionType();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v72 - v14;
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)&v72 - v17;
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*a1 + 864))(v16);
  if (!v19)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.conversationBridge);
    swift_retain();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      aBlock[0] = v30;
      *(_DWORD *)uint64_t v29 = 136315138;
      uint64_t v31 = a1[2];
      unint64_t v32 = a1[3];
      swift_bridgeObjectRetain();
      uint64_t v78 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v27, v28, "Only speech-based RC can reveal ASR transcription. Not revealing ASR for RCID %s.", v29, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v30, -1, -1);
      MEMORY[0x1BA9E48C0](v29, -1, -1);

      return 0;
    }

LABEL_30:
    swift_release();
    return 0;
  }
  uint64_t v20 = v19;
  uint64_t v21 = (*(uint64_t (**)(void))(*(void *)v19 + 120))();
  if (!v21)
  {
LABEL_25:
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v60 = type metadata accessor for Logger();
    __swift_project_value_buffer(v60, (uint64_t)static Logger.conversationBridge);
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v63 = 0;
      _os_log_impl(&dword_1B9C64000, v61, v62, "ASR is not to be revealed.", v63, 2u);
      MEMORY[0x1BA9E48C0](v63, -1, -1);
    }

    goto LABEL_30;
  }
  uint64_t v22 = v21;
  uint64_t v72 = v3;
  uint64_t v73 = v9;
  uint64_t v74 = v8;
  uint64_t v75 = v18;
  uint64_t v23 = *(void *)(v21 + 16);
  uint64_t v24 = type metadata accessor for Siri_Nlu_External_RepetitionResult();
  uint64_t v25 = *(void *)(v24 - 8);
  if (v23)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v25 + 16))(v7, v22 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80)), v24);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v7, 0, 1, v24);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56))(v7, 1, 1, v24);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for Siri_Nlu_External_RepetitionResult();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v7, 1, v24) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_RepetitionResult?);
    goto LABEL_25;
  }
  Siri_Nlu_External_RepetitionResult.repetitionType.getter();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v24);
  uint64_t v34 = v73;
  uint64_t v33 = v74;
  uint64_t v35 = v75;
  (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v75, v15, v74);
  (*(void (**)(char *, void, uint64_t))(v34 + 104))(v12, *MEMORY[0x1E4FA2918], v33);
  _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2(&lazy protocol witness table cache variable for type Siri_Nlu_External_RepetitionResult.RepetitionType and conformance Siri_Nlu_External_RepetitionResult.RepetitionType, MEMORY[0x1E4FA2928]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v36 = aBlock[0];
  uint64_t v37 = v78;
  uint64_t v38 = *(uint64_t (**)(char *, uint64_t))(v34 + 8);
  uint64_t v39 = v38(v12, v33);
  if (v36 != v37)
  {
    v38(v35, v33);
    goto LABEL_25;
  }
  unint64_t v40 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v20 + 112))(v39);
  id v41 = objc_msgSend(v40, sel_recognition);

  if (!v41
    || (id v42 = objc_msgSend(v41, sel_aceRecognition), v41, !v42))
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v65 = type metadata accessor for Logger();
    __swift_project_value_buffer(v65, (uint64_t)static Logger.conversationBridge);
    uint64_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v68 = 0;
      _os_log_impl(&dword_1B9C64000, v66, v67, "Failed to get ASR Recognition object for ASR reveal. ASR is NOT to be revealed.", v68, 2u);
      MEMORY[0x1BA9E48C0](v68, -1, -1);
    }

    swift_release();
    v38(v75, v33);
    return 0;
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v43 = type metadata accessor for Logger();
  __swift_project_value_buffer(v43, (uint64_t)static Logger.conversationBridge);
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v46 = 0;
    _os_log_impl(&dword_1B9C64000, v44, v45, "Preparing ACE command for ASR reveal.", v46, 2u);
    MEMORY[0x1BA9E48C0](v46, -1, -1);
  }

  id v47 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96B58]), sel_init);
  uint64_t v48 = *(void *)(v72 + 80);
  uint64_t v49 = *(void *)(v72 + 88);
  id v50 = v47;
  uint64_t v51 = (void *)MEMORY[0x1BA9E2DD0](v48, v49);
  objc_msgSend(v50, sel_setRefId_, v51);

  objc_msgSend(v50, sel_setRecognition_, v42);
  uint64_t v52 = (void *)(v76 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  id v53 = 0;
  if (*v52 >> 62 == 1)
  {
    unsigned int v54 = (void *)v52[1];
    uint64_t v55 = v72;
    if (v54)
    {
      id v53 = objc_msgSend(v54, sel_aceId);
      if (v53)
      {
        uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v58 = v57;

        uint64_t v59 = v56;
        uint64_t v55 = v72;
        id v53 = (id)MEMORY[0x1BA9E2DD0](v59, v58);
        swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    uint64_t v55 = v72;
  }
  objc_msgSend(v50, sel_setSpeechRecognizedAceId_, v53);

  char v69 = *(void **)(v55 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_requestDispatcherServiceHelper);
  aBlock[4] = (uint64_t)closure #1 in ConversationRequestProcessor.revealAsrTranscription(for:turn:);
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_32;
  uint64_t v70 = _Block_copy(aBlock);
  id v71 = v50;
  objc_msgSend(v69, sel_handleCommand_completion_, v71, v70);
  swift_release();
  _Block_release(v70);

  v38(v75, v33);
  return 1;
}

void ConversationRequestProcessor.sendCommitToExecution(_:_:)(uint64_t a1, unint64_t a2, Swift::String *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = type metadata accessor for ResultCandidateType(0);
  MEMORY[0x1F4188790](v87);
  uint64_t v88 = (Swift::String **)((char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = AFIsInternalInstall();
  if (v12)
  {
    type metadata accessor for ConversationBridge(0);
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;
    uint64_t v16 = *(void **)((char *)&v3->_countAndFlagsBits
                   + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_requestDispatcherServiceHelper);
    swift_getObjectType();
    specialized static ConversationBridge.sendShowRequestHandlingStatus(withStatus:serviceHelper:requestId:completion:)(v13, v15, v16, 0, 0, 0, 0);
    uint64_t v12 = swift_bridgeObjectRelease();
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(a3->_countAndFlagsBits + 280))(v12);
  if (!v18)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.conversationBridge);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl(&dword_1B9C64000, v33, v34, "Trying to commit RCState without a conversationUserInputId - this means we did not create a ConversationUserInput for this RC which is an error. Sending CommandFailed.", v35, 2u);
      MEMORY[0x1BA9E48C0](v35, -1, -1);
    }

    id v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F965A8]), sel_init);
    objc_msgSend(v36, sel_setErrorCode_, -1);
    uint64_t v37 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000036, 0x80000001BA066440);
    objc_msgSend(v36, sel_setReason_, v37);

    uint64_t countAndFlagsBits = v4[4]._countAndFlagsBits;
    unint64_t object = v4[4]._object;
    id v40 = v36;
    id v41 = (void *)MEMORY[0x1BA9E2DD0](countAndFlagsBits, object);
    objc_msgSend(v40, sel_setRefId_, v41);

    id v42 = *(void **)((char *)&v4->_countAndFlagsBits
                   + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_requestDispatcherServiceHelper);
    aBlock[4] = (uint64_t)closure #1 in ConversationRequestProcessor.sendCommitToExecution(_:_:);
    aBlock[5] = 0;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
    aBlock[3] = (uint64_t)&block_descriptor_74;
    uint64_t v43 = _Block_copy(aBlock);
    uint64_t v44 = v40;
    objc_msgSend(v42, sel_handleCommand_completion_, v44, v43);
    _Block_release(v43);

    goto LABEL_38;
  }
  uint64_t v19 = v17;
  unint64_t v20 = v18;
  uint64_t v89 = v10;
  type metadata accessor for CommitResultCandidateId();
  uint64_t v21 = (void *)swift_allocObject();
  void v21[2] = a1;
  v21[3] = a2;
  v21[4] = v19;
  v21[5] = v20;
  os_log_type_t v90 = v21;
  uint64_t v22 = one-time initialization token for conversationBridge;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v22 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  uint64_t v91 = v24;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v86 = v4;
    uint64_t v28 = v27;
    uint64_t v29 = swift_slowAlloc();
    aBlock[0] = v29;
    *(_DWORD *)uint64_t v28 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v28 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v25, v26, "Sending CommitResultCandidateId for RC ID: %s and conversationUserInputId: %s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v29, -1, -1);
    uint64_t v30 = v28;
    uint64_t v4 = v86;
    MEMORY[0x1BA9E48C0](v30, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v31 = swift_bridgeObjectRelease_n();
  }
  uint64_t v45 = (*(uint64_t (**)(uint64_t))(v4->_countAndFlagsBits + 592))(v31);
  if (v45)
  {
    uint64_t v46 = v45;
    id v47 = (uint64_t *)(v45 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    uint64_t v48 = *v47;
    if ((unint64_t)*v47 >> 62 != 1) {
      goto LABEL_31;
    }
    uint64_t v49 = v48 & 0x3FFFFFFFFFFFFFFFLL;
    id v50 = *(uint64_t (**)(uint64_t))(*(void *)(v48 & 0x3FFFFFFFFFFFFFFFLL) + 872);
    uint64_t v51 = swift_retain();
    uint64_t v52 = v50(v51);
    if (v52)
    {
      uint64_t v53 = (*(uint64_t (**)(void))(*(void *)v52 + 216))();
      if (v54)
      {
        uint64_t v55 = v54;
        uint64_t v56 = *(void *)(v46 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8);
        uint64_t v88 = *(void **)(v46 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
        uint64_t v86 = v4;
        uint64_t v57 = *(void *)(v49 + 16);
        uint64_t v58 = *(void **)(v49 + 24);
        uint64_t v59 = v53;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        ConversationRequestProcessor.postExecutionFinalizedMessage(requestId:selectedTrpId:selectedTcuId:userId:)((uint64_t)v88, v56, v57, v58, v59, v55);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v4 = v86;
        swift_bridgeObjectRelease();
      }
      else
      {
        id v71 = Logger.logObject.getter();
        os_log_type_t v72 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v71, v72))
        {
          uint64_t v73 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v73 = 0;
          _os_log_impl(&dword_1B9C64000, v71, v72, "Sending commit to conversation bridge, but selected TCU ID is unknown. This can happen if we didn't get a well-formed TTResponseMessage. ExecutionFinalizedMessage will fail to send.", v73, 2u);
          MEMORY[0x1BA9E48C0](v73, -1, -1);
          swift_release();
          swift_release();

LABEL_31:
          swift_release();
          goto LABEL_32;
        }

        swift_release();
      }
      swift_release();
      goto LABEL_31;
    }
    uint64_t v60 = v88;
    outlined init with copy of ResultCandidateType(v49 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_resultCandidateType, (uint64_t)v88);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      swift_release();
      swift_release();
      outlined destroy of RoutingDecision((uint64_t)v60, type metadata accessor for ResultCandidateType);
      goto LABEL_32;
    }
    uint64_t v61 = (void *)v60[3];
    os_log_type_t v62 = (void *)v60[5];
    if (v61)
    {
      if (v62)
      {
        uint64_t v86 = v4;
        uint64_t v63 = v60[2];
        uint64_t v64 = v60[4];
        swift_bridgeObjectRelease();
        uint64_t v65 = Logger.logObject.getter();
        os_log_type_t v66 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v65, v66))
        {
          os_log_type_t v67 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v67 = 0;
          _os_log_impl(&dword_1B9C64000, v65, v66, "Posting ExecutionFinalizedMessage for text request", v67, 2u);
          MEMORY[0x1BA9E48C0](v67, -1, -1);
        }

        uint64_t v68 = *(void *)(v46 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
        uint64_t v69 = *(void *)(v46 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8);
        swift_bridgeObjectRetain();
        uint64_t v70 = v86;
        ConversationRequestProcessor.postExecutionFinalizedMessage(requestId:selectedTrpId:selectedTcuId:userId:)(v68, v69, v63, v61, v64, v62);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v4 = v70;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
      }
      goto LABEL_31;
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
LABEL_32:
  (*(void (**)(Swift::String *))(**(void **)((char *)&v4->_countAndFlagsBits
                                                        + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_selfReflectionAgent)
                                          + 392))(a3);
  uint64_t v74 = *(uint64_t *)((char *)&v4[1]._object
                   + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient);
  uint64_t v75 = *(uint64_t *)((char *)&v4[2]._countAndFlagsBits
                   + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient);
  __swift_project_boxed_opaque_existential_1((uint64_t *)((char *)&v4->_countAndFlagsBits+ OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient), v74);
  (*(void (**)(void *, void, _UNKNOWN **, uint64_t, uint64_t))(v75 + 48))(v90, *(uint64_t *)((char *)&v4->_countAndFlagsBits+ OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionBridgeProcessorDelegate), &protocol witness table for ConversationBridgeProcessorDelegate, v74, v75);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  id v76 = (id)static Log.executor;
  os_log_type_t v77 = v89;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  uint64_t v78 = type metadata accessor for OSSignpostID();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56))(v77, 0, 1, v78);
  (*(void (**)(char *))(a3->_countAndFlagsBits + 840))(v77);
  if (one-time initialization token for insightRequestSummaryLogger != -1) {
    swift_once();
  }
  uint64_t v79 = type metadata accessor for InsightRequestSummaryLogger();
  uint64_t v80 = __swift_project_value_buffer(v79, (uint64_t)static Logger.insightRequestSummaryLogger);
  swift_retain();
  swift_retain();
  specialized InsightRequestSummaryLogger.emitDebug(_:)(v80, v4, a3);
  swift_release();
  swift_release();
  swift_retain_n();
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v81 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v44, v81))
  {
    unint64_t v82 = (uint8_t *)swift_slowAlloc();
    uint64_t v83 = swift_slowAlloc();
    uint64_t v93 = v83;
    *(_DWORD *)unint64_t v82 = 136315138;
    uint64_t v84 = CommitResultCandidateId.debugDescription.getter();
    uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, &v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v44, v81, "Successfully sent: %s", v82, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v83, -1, -1);
    MEMORY[0x1BA9E48C0](v82, -1, -1);
    swift_release();
LABEL_38:

    return;
  }

  swift_release_n();
}

uint64_t type metadata accessor for ConversationBridge(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, type metadata singleton initialization cache for ConversationBridge);
}

void specialized static ConversationBridge.sendShowRequestHandlingStatus(withStatus:serviceHelper:requestId:completion:)(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  id v35 = a3;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  unint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96B70]), sel_init);
  UUID.init()();
  uint64_t v16 = UUID.uuidString.getter();
  uint64_t v18 = v17;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v19 = (void *)MEMORY[0x1BA9E2DD0](v16, v18);
  swift_bridgeObjectRelease();
  objc_msgSend(v15, sel_setAceId_, v19);

  id v20 = v15;
  if (a5) {
    uint64_t v21 = (void *)MEMORY[0x1BA9E2DD0](a4, a5);
  }
  else {
    uint64_t v21 = 0;
  }
  objc_msgSend(v15, sel_setRefId_, v21, v33, v34);

  uint64_t v22 = (void *)MEMORY[0x1BA9E2DD0](a1, a2);
  objc_msgSend(v15, sel_setRequestHandlingStatus_, v22);

  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    os_log_type_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    aBlock[0] = v27;
    *(_DWORD *)os_log_type_t v26 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v24, v25, "Sending ShowRequestHandlingStatus with status: %s", v26, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v27, -1, -1);
    MEMORY[0x1BA9E48C0](v26, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v28 = (void *)swift_allocObject();
  uint64_t v30 = v33;
  uint64_t v29 = v34;
  v28[2] = v15;
  v28[3] = v30;
  uint64_t v28[4] = v29;
  aBlock[4] = (uint64_t)partial apply for closure #1 in static ConversationBridge.sendShowRequestHandlingStatus(withStatus:serviceHelper:requestId:completion:);
  aBlock[5] = (uint64_t)v28;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_4;
  uint64_t v31 = _Block_copy(aBlock);
  id v32 = v15;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed SAAceCommand?, @guaranteed Error?) -> ())?(v30);
  swift_release();
  objc_msgSend(v35, sel_handleCommand_completion_, v32, v31);
  _Block_release(v31);
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@guaranteed SAAceCommand?, @guaranteed Error?) -> ())?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t type metadata accessor for CommitResultCandidateId()
{
  return self;
}

uint64_t protocol witness for ConversationRuntimeClientProtocol.sendCommitResultCandidateId(_:withBridgeDelegate:) in conformance ConversationRuntimeClient()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 192))();
}

uint64_t ConversationRuntimeClient.sendCommitResultCandidateId(_:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  uint64_t v9 = v3[5];
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = v7;
  v10[3] = v8;
  v10[4] = v9;
  v10[5] = a1;
  v10[6] = a2;
  v10[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v11 = StaticString.description.getter();
  uint64_t v13 = v12;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v7;
  *(void *)(v14 + 24) = v8;
  *(void *)(v14 + 32) = v9;
  *(void *)(v14 + 40) = "bridge(didReceiveCommitResultCandidateId:from:)";
  *(void *)(v14 + 48) = 47;
  *(unsigned char *)(v14 + 56) = 2;
  *(void *)(v14 + 64) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCommitResultCandidateId:from:);
  *(void *)(v14 + 72) = v10;
  id v15 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v8 + 208);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v15(v11, v13, &closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)partial apply, v14);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t ResultCandidateState.commitSignpostID.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_loggingMetadata;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for ResultCandidateState.LoggingMetadata(0);
  outlined assign with copy of ReferenceResolutionClientProtocol?(a1, v3 + *(int *)(v4 + 20), &demangling cache variable for type metadata for OSSignpostID?);
  swift_endAccess();
  return outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for OSSignpostID?);
}

uint64_t closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:)partial apply()
{
  long long v7 = *(_OWORD *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 48);
  char v3 = *(unsigned char *)(v0 + 56);
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 64);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  *(_OWORD *)(v4 + 40) = v5;
  *(unsigned char *)(v4 + 56) = v3;
  *(void *)(v4 + 32) = v2;
  *(_OWORD *)(v4 + 16) = v7;
  return MEMORY[0x1F4188298](closure #1 in ConversationServiceSerialFacade.doExecutionWork(function:work:), 0, 0);
}

uint64_t CommitResultCandidateId.debugDescription.getter()
{
  _StringGuts.grow(_:)(55);
  v1._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._unint64_t object = (void *)0x80000001BA063D60;
  v2._uint64_t countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v2);
  uint64_t v3 = v0[2];
  uint64_t v4 = (void *)v0[3];
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = v3;
  v5._unint64_t object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  v6._unint64_t object = (void *)0x80000001BA063DD0;
  String.append(_:)(v6);
  uint64_t v8 = v0[4];
  long long v7 = (void *)v0[5];
  swift_bridgeObjectRetain();
  v9._uint64_t countAndFlagsBits = v8;
  v9._unint64_t object = v7;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 125;
  v10._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return 0;
}

uint64_t ExecutionOverrideContext.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCommitResultCandidateId:from:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v7 = v0[6];
  uint64_t v6 = v0[7];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v8;
  *uint64_t v8 = v1;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCommitResultCandidateId:from:)(v2, v3, v4, v5, v7, v6);
}

uint64_t closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCommitResultCandidateId:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v10;
  *uint64_t v10 = v6;
  v10[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return ConversationService.bridge(didReceiveCommitResultCandidateId:from:)(a4, a5, a6);
}

uint64_t ConversationService.bridge(didReceiveCommitResultCandidateId:from:)()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 672);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](ConversationService.bridge(didReceiveCommitResultCandidateId:from:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 672);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](ConversationService.bridge(didReceiveCommitResultCandidateId:from:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 672);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](ConversationService.bridge(didReceiveCommitResultCandidateId:from:), v1, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  unint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  unint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  unint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t result;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t (*v54)(void);
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id *v78;
  uint64_t v79;
  uint64_t ObjectType;
  objc_class *v81;
  unsigned char *v82;
  void *v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int (*v122)(uint64_t, uint64_t, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t (*v126)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v127)(void);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;

  uint64_t v1 = *(void **)(v0 + 536);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      *(void *)(v0 + 784) = *v1;
      swift_retain();
      uint64_t v13 = Logger.logObject.getter();
      uint64_t v14 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v13, v14))
      {
        id v15 = *(void *)(v0 + 704);
        unint64_t v119 = *(void *)(v0 + 696);
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        uint64_t v17 = swift_slowAlloc();
        os_log_t v130 = v17;
        *(_DWORD *)uint64_t v16 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v119, v15, &v130);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release();
        _os_log_impl(&dword_1B9C64000, v13, v14, "[ConversationService] Now running unsafe eager input %s, since it was committed", v16, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v17, -1, -1);
        MEMORY[0x1BA9E48C0](v16, -1, -1);
      }
      else
      {
        swift_release();
      }

      uint64_t v51 = *(void **)(v0 + 240);
      uint64_t v52 = v51[6];
      __swift_project_boxed_opaque_existential_1(v51 + 2, v51[5]);
      swift_beginAccess();
      *(void *)(v0 + 792) = v51[13];
      swift_beginAccess();
      *(void *)(v0 + 800) = v51[35];
      *(void *)(v0 + 808) = OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData;
      uint64_t v125 = *(void *)(v52 + 8) + **(int **)(v52 + 8);
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v53 = (void *)swift_task_alloc();
      *(void *)(v0 + 816) = v53;
      *uint64_t v53 = v0;
      v53[1] = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
      __asm { BRAA            X9, X16 }
      return result;
    case 2u:
      uint64_t v123 = *(void *)(v0 + 704);
      uint64_t v120 = *(void *)(v0 + 696);
      uint64_t v18 = *(void *)(v0 + 688);
      uint64_t v19 = *(void *)(v0 + 344);
      uint64_t v21 = *(void *)(v0 + 296);
      id v20 = *(void *)(v0 + 304);
      uint64_t v22 = *(void *)(v0 + 288);
      uint64_t v23 = *(void *)(v0 + 224);
      uint64_t v116 = *(void *)(v0 + 232);
      swift_release();
      (*(void (**)(uint64_t, void *, uint64_t))(v21 + 32))(v20, v1, v22);
      uint64_t v24 = v18 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData;
      os_log_type_t v26 = *(void *)(v18 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData);
      os_log_type_t v25 = *(void *)(v18 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData + 8);
      uint64_t v27 = *(void *)(v18 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData + 16);
      uint64_t v28 = *(void *)(v24 + 24);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v19, v20, v22);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(v19, 0, 1, v22);
      ConversationService.closeRequestForDisabledServerFallback(bridge:forResultCandidateId:executionRequestId:rootRequestId:isDomainDirected:serverFallbackReason:)(v23, v116, v120, v123, v26, v25, v27, v28, 0, v19);
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?(v19, &demangling cache variable for type metadata for ServerFallbackReason?);
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
      goto LABEL_22;
    case 3u:
      swift_release();
      swift_retain_n();
      uint64_t v29 = Logger.logObject.getter();
      uint64_t v30 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = *(void *)(v0 + 704);
        uint64_t v121 = *(void *)(v0 + 696);
        id v32 = (uint8_t *)swift_slowAlloc();
        uint64_t v33 = swift_slowAlloc();
        os_log_t v130 = v33;
        *(_DWORD *)id v32 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 192) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v121, v31, &v130);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1B9C64000, v29, v30, "[ConversationService] rcId %s fell back to server, ending commit.", v32, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v33, -1, -1);
        MEMORY[0x1BA9E48C0](v32, -1, -1);
        swift_release();
      }
      else
      {
        swift_release_n();

        swift_release();
      }
LABEL_22:
      $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(*(void *)(v0 + 240), (uint64_t)&unk_1F137B698, (uint64_t)&unk_1F137B6C0, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.markNotBusyAsync());
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unsigned int v54 = *(uint64_t (**)(void))(v0 + 8);
      return v54();
    case 4u:
      swift_retain();
      uint64_t v34 = Logger.logObject.getter();
      id v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = *(void *)(v0 + 704);
        uint64_t v124 = *(void *)(v0 + 696);
        uint64_t v37 = (uint8_t *)swift_slowAlloc();
        uint64_t v38 = swift_slowAlloc();
        os_log_t v130 = v38;
        *(_DWORD *)uint64_t v37 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v124, v36, &v130);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release();
        _os_log_impl(&dword_1B9C64000, v34, v35, "[ConversationService] No conversation found for rcId %s during commit. Will redirect to server.", v37, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v38, -1, -1);
        MEMORY[0x1BA9E48C0](v37, -1, -1);
      }
      else
      {
        swift_release();
      }

      uint64_t v55 = *(void **)(v0 + 240);
      uint64_t v56 = v55[11];
      uint64_t v57 = v55[12];
      __swift_project_boxed_opaque_existential_1(v55 + 8, v56);
      uint64_t v126 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v57 + 40) + **(int **)(v57 + 40));
      uint64_t v58 = (void *)swift_task_alloc();
      *(void *)(v0 + 880) = v58;
      *uint64_t v58 = v0;
      v58[1] = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
      uint64_t v59 = *(void *)(v0 + 704);
      uint64_t v60 = *(void *)(v0 + 696);
      return v126(v60, v59, v56, v57);
    default:
      uint64_t v2 = *(void *)(v0 + 584);
      uint64_t v3 = *v1;
      uint64_t v128 = v1[1];
      uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationUserInput, RemoteConversationClient, Input?));
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v1 + *(int *)(v4 + 64), v2, &demangling cache variable for type metadata for Input?);
      uint64_t v5 = Logger.logObject.getter();
      uint64_t v6 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v7 = 0;
        _os_log_impl(&dword_1B9C64000, v5, v6, "Now running commit for conversation which was eagerly prepared", v7, 2u);
        MEMORY[0x1BA9E48C0](v7, -1, -1);
      }

      uint64_t v8 = *(void *)(v0 + 584);
      char v118 = v3;
      *(void *)(v0 + 896) = v3;
      *(void *)(v0 + 888) = v128;
      Swift::String v9 = *(void *)(v0 + 592);
      uint64_t v10 = *(void *)(v0 + 552);
      uint64_t v11 = *(void *)(v0 + 416);
      uint64_t v12 = *(void *)(v0 + 424);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v8, v9, &demangling cache variable for type metadata for Input?);
      outlined init with copy of ReferenceResolutionClientProtocol?(v9, v10, &demangling cache variable for type metadata for Input?);
      Class v122 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
      if (v122(v10, 1, v11) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 552), &demangling cache variable for type metadata for Input?);
LABEL_30:
        uint64_t v64 = *(void *)(v0 + 240);
        swift_beginAccess();
        *(void *)(v64 + 272) = 0;
        uint64_t v65 = v122;
        goto LABEL_33;
      }
      uint64_t v39 = *(void *)(v0 + 392);
      id v40 = *(void *)(v0 + 368);
      id v41 = *(void *)(v0 + 376);
      (*(void (**)(void, void, void))(*(void *)(v0 + 424) + 32))(*(void *)(v0 + 448), *(void *)(v0 + 552), *(void *)(v0 + 416));
      Input.parse.getter();
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v41 + 88))(v39, v40) != *MEMORY[0x1E4FA1F58])
      {
        uint64_t v61 = *(void *)(v0 + 392);
        os_log_type_t v62 = *(void *)(v0 + 368);
        uint64_t v63 = *(void *)(v0 + 376);
        (*(void (**)(void, void))(*(void *)(v0 + 424) + 8))(*(void *)(v0 + 448), *(void *)(v0 + 416));
        (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v61, v62);
        goto LABEL_30;
      }
      id v42 = *(void *)(v0 + 240);
      (*(void (**)(void, void))(*(void *)(v0 + 376) + 8))(*(void *)(v0 + 392), *(void *)(v0 + 368));
      uint64_t v43 = (void *)(v42 + 272);
      unint64_t result = swift_beginAccess();
      uint64_t v45 = *(void *)(v42 + 272);
      uint64_t v46 = __OFADD__(v45, 1);
      id v47 = v45 + 1;
      if (v46)
      {
        __break(1u);
        return result;
      }
      *uint64_t v43 = v47;
      swift_retain();
      uint64_t v48 = Logger.logObject.getter();
      uint64_t v49 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v48, v49))
      {
        id v50 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)id v50 = 134217984;
        *(void *)(v0 + 200) = *v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl(&dword_1B9C64000, v48, v49, "Input given to flow was empty: Incrementing consecutiveEmptyInputs to %ld", v50, 0xCu);
        MEMORY[0x1BA9E48C0](v50, -1, -1);
      }
      else
      {
        swift_release();
      }
      uint64_t v65 = v122;
      os_log_type_t v66 = *(void *)(v0 + 448);
      os_log_type_t v67 = *(void *)(v0 + 416);
      uint64_t v68 = *(void *)(v0 + 424);

      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v66, v67);
LABEL_33:
      uint64_t v69 = *(void *)(v0 + 544);
      uint64_t v70 = *(void *)(v0 + 416);
      outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 592), v69, &demangling cache variable for type metadata for Input?);
      if (v65(v69, 1, v70) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 544), &demangling cache variable for type metadata for Input?);
      }
      else
      {
        os_log_type_t v72 = *(void *)(v0 + 376);
        id v71 = *(void *)(v0 + 384);
        uint64_t v73 = *(void *)(v0 + 368);
        (*(void (**)(void, void, void))(*(void *)(v0 + 424) + 32))(*(void *)(v0 + 440), *(void *)(v0 + 544), *(void *)(v0 + 416));
        Input.parse.getter();
        uint64_t v74 = (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 88))(v71, v73);
        if (v74 == *MEMORY[0x1E4FA1F18])
        {
          uint64_t v75 = *(void *)(v0 + 440);
          id v76 = *(void *)(v0 + 416);
          os_log_type_t v77 = *(void *)(v0 + 424);
          uint64_t v78 = *(id **)(v0 + 384);
          uint64_t v79 = *(void *)(v0 + 232);
          (*(void (**)(id *, void))(*(void *)(v0 + 376) + 96))(v78, *(void *)(v0 + 368));

          uint64_t ObjectType = swift_getObjectType();
          os_log_type_t v81 = (objc_class *)type metadata accessor for ExecutionInputInfo();
          unint64_t v82 = objc_allocWithZone(v81);
          uint64_t v83 = &v82[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId];
          char *v83 = 0;
          v83[1] = 0;
          v82[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes] = 1;
          *(void *)(v0 + 160) = v82;
          *(void *)(v0 + 168) = v81;
          uint64_t v84 = objc_msgSendSuper2((objc_super *)(v0 + 160), sel_init);
          (*(void (**)(id, uint64_t, uint64_t))(v79 + 152))(v84, ObjectType, v79);

          unint64_t v85 = v76;
          uint64_t v65 = v122;
          (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v75, v85);
        }
        else
        {
          uint64_t v86 = *(void *)(v0 + 424);
          uint64_t v88 = *(void *)(v0 + 376);
          uint64_t v87 = *(void *)(v0 + 384);
          uint64_t v89 = *(void *)(v0 + 368);
          if (v74 == *MEMORY[0x1E4FA1F48])
          {
            uint64_t v91 = *(void *)(v0 + 320);
            os_log_type_t v90 = *(void *)(v0 + 328);
            uint64_t v111 = *(void *)(v0 + 312);
            uint64_t v93 = *(void *)(v0 + 272);
            uint64_t v92 = *(void *)(v0 + 280);
            uint64_t v112 = *(void *)(v0 + 256);
            uint64_t v113 = *(void *)(v0 + 264);
            int v114 = *(void *)(v0 + 232);
            uint64_t v115 = *(void *)(v0 + 440);
            uint64_t v117 = *(void *)(v0 + 416);
            (*(void (**)(uint64_t, uint64_t))(v88 + 96))(v87, v89);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v91 + 32))(v90, v87, v111);
            unint64_t v94 = swift_getObjectType();
            USOParse.userParse.getter();
            Siri_Nlu_External_UserParse.id.getter();
            (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v92, v113);
            unint64_t v95 = objc_allocWithZone((Class)type metadata accessor for ExecutionInputInfo());
            uint64_t v96 = ExecutionInputInfo.init(parseId:)(v112);
            (*(void (**)(id, uint64_t))(v114 + 152))(v96, v94);

            uint64_t v65 = v122;
            (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v90, v111);
            (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v115, v117);
          }
          else
          {
            (*(void (**)(void, void))(v86 + 8))(*(void *)(v0 + 440), *(void *)(v0 + 416));
            (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v87, v89);
          }
        }
      }
      os_log_type_t v97 = *(void *)(v0 + 592);
      uint64_t v98 = *(void *)(v0 + 416);
      type metadata accessor for ConversationSELFHelper();
      *(void *)(v0 + 904) = static ConversationSELFHelper.shared.getter();
      if (v65(v97, 1, v98))
      {
        uint64_t v99 = *(void *)(v0 + 248);
        unint64_t v100 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56))(v99, 1, 1, v100);
      }
      else
      {
        char v102 = *(void *)(v0 + 424);
        uint64_t v101 = *(void *)(v0 + 432);
        uint64_t v103 = *(void *)(v0 + 416);
        char v104 = *(void *)(v0 + 248);
        (*(void (**)(uint64_t, void, uint64_t))(v102 + 16))(v101, *(void *)(v0 + 592), v103);
        Input.identifier.getter();
        (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v101, v103);
        uint64_t v105 = type metadata accessor for UUID();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v105 - 8) + 56))(v104, 0, 1, v105);
      }
      uint64_t v106 = *(void *)(v0 + 688);
      uint64_t v107 = *(void *)(v0 + 240);
      uint64_t v108 = *(void *)(v0 + 216);
      uint64_t v109 = swift_allocObject();
      *(void *)(v0 + 912) = v109;
      *(void *)(v109 + 16) = v107;
      *(void *)(v109 + 24) = v108;
      *(void *)(v109 + 32) = v106;
      *(_OWORD *)(v109 + 40) = *(_OWORD *)(v0 + 224);
      *(void *)(v109 + 56) = v128;
      *(unsigned char *)(v109 + 64) = 0;
      *(void *)(v109 + 72) = v118;
      uint64_t v127 = (uint64_t (*)(void))((int)*MEMORY[0x1E4FA1E00] + MEMORY[0x1E4FA1E00]);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_unknownObjectRetain();
      swift_retain();
      swift_retain();
      uint64_t v110 = (void *)swift_task_alloc();
      *(void *)(v0 + 920) = v110;
      *uint64_t v110 = v0;
      v110[1] = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
      return v127();
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  uint64_t v1 = v0[60];
  if (*(unsigned char *)(v1 + 8))
  {
    (*(void (**)(void, void))(v0[53] + 8))(v0[57], v0[52]);
    outlined destroy of DecisionEngineResponse(v1, (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
    uint64_t v2 = (void *)v0[30];
    uint64_t v3 = v2[11];
    uint64_t v4 = v2[12];
    __swift_project_boxed_opaque_existential_1(v2 + 8, v3);
    Swift::String v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 40) + **(int **)(v4 + 40));
    uint64_t v5 = (void *)swift_task_alloc();
    v0[109] = v5;
    *uint64_t v5 = v0;
    v5[1] = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
    uint64_t v6 = v0[88];
    uint64_t v7 = v0[87];
    return v9(v7, v6, v3, v4);
  }
  else
  {
    return MEMORY[0x1F4188298](ConversationService.bridge(didReceiveCommitResultCandidateId:from:), 0, 0);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 776) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 672);
  if (v0) {
    uint64_t v4 = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
  }
  else {
    uint64_t v4 = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 240);
  swift_release();
  swift_release();
  $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(v1, (uint64_t)&unk_1F137B698, (uint64_t)&unk_1F137B6C0, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.markNotBusyAsync());
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  uint64_t v1 = v0[60];
  (*(void (**)(void, void))(v0[53] + 8))(v0[57], v0[52]);
  outlined destroy of DecisionEngineResponse(v1, (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
  uint64_t v2 = (void *)v0[30];
  uint64_t v3 = v2[11];
  uint64_t v4 = v2[12];
  __swift_project_boxed_opaque_existential_1(v2 + 8, v3);
  Swift::String v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 40) + **(int **)(v4 + 40));
  uint64_t v5 = (void *)swift_task_alloc();
  v0[109] = v5;
  *uint64_t v5 = v0;
  v5[1] = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
  uint64_t v6 = v0[88];
  uint64_t v7 = v0[87];
  return v9(v7, v6, v3, v4);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[74];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v1, &demangling cache variable for type metadata for Input?);
  $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(v0[30], (uint64_t)&unk_1F137B698, (uint64_t)&unk_1F137B6C0, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.markNotBusyAsync());
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *(void *)(*(void *)v0 + 672);
  uint64_t v2 = *(void *)(*(void *)v0 + 408);
  uint64_t v3 = *(void *)(*(void *)v0 + 376);
  uint64_t v4 = *(void *)(*(void *)v0 + 368);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return MEMORY[0x1F4188298](ConversationService.bridge(didReceiveCommitResultCandidateId:from:), v1, 0);
}

{
  void *v0;
  void (*v1)(uint64_t *, void, uint64_t);
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;

  uint64_t v1 = (void (*)(uint64_t *, void, uint64_t))v0[91];
  uint64_t v2 = (uint64_t *)v0[77];
  uint64_t v3 = v0[75];
  uint64_t v4 = (void *)(v0[86] + v0[89]);
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v5);
  *uint64_t v2 = specialized static SiriKitMetricsUtils.extractIntentTypeName(input:)();
  v2[1] = v7;
  v1(v2, *MEMORY[0x1E4FA1908], v3);
  uint64_t v8 = SiriKitEvent.__allocating_init(_:builder:)();
  v0[107] = v8;
  Swift::String v9 = (void *)swift_task_alloc();
  v0[108] = v9;
  *Swift::String v9 = v0;
  v9[1] = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
  return MEMORY[0x1F4151BE0](v8, v5, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 824) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 672);
    uint64_t v4 = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 672);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v4 = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
    uint64_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;

  uint64_t v1 = v0[64];
  uint64_t v2 = v0[58];
  uint64_t v3 = v0[59];
  outlined init with copy of ReferenceResolutionClientProtocol?(v0[65], v1, &demangling cache variable for type metadata for DecisionEngineResponse?);
  uint64_t v4 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  v0[104] = v4;
  v0[105] = (v3 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v4(v1, 1, v2) == 1)
  {
    uint64_t v5 = v0[64];
    uint64_t v6 = &demangling cache variable for type metadata for DecisionEngineResponse?;
LABEL_5:
    outlined destroy of ReferenceResolutionClientProtocol?(v5, v6);
    uint64_t v13 = (void *)v0[30];
    uint64_t v14 = v13[11];
    id v15 = v13[12];
    __swift_project_boxed_opaque_existential_1(v13 + 8, v14);
    os_log_type_t v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 + 40) + **(int **)(v15 + 40));
    uint64_t v16 = (void *)swift_task_alloc();
    v0[109] = v16;
    *uint64_t v16 = v0;
    v16[1] = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
    uint64_t v17 = v0[88];
    uint64_t v18 = v0[87];
    return v26(v18, v17, v14, v15);
  }
  uint64_t v7 = v0[72];
  uint64_t v8 = v0[60];
  Swift::String v9 = v0[58];
  uint64_t v10 = v0[52];
  uint64_t v11 = v0[53];
  outlined init with take of DecisionEngineResponse(v0[64], v8, (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
  outlined init with copy of ReferenceResolutionClientProtocol?(v8 + *(int *)(v9 + 24), v7, &demangling cache variable for type metadata for Input?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v7, 1, v10) == 1)
  {
    uint64_t v12 = v0[72];
    outlined destroy of DecisionEngineResponse(v0[60], (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
    uint64_t v6 = &demangling cache variable for type metadata for Input?;
    uint64_t v5 = v12;
    goto LABEL_5;
  }
  id v20 = v0[98];
  (*(void (**)(void, void, void))(v0[53] + 32))(v0[57], v0[72], v0[52]);
  uint64_t v21 = *(void *)(v20 + 16);
  uint64_t v22 = *(void *)(v20 + 24);
  Input.parse.getter();
  uint64_t v23 = (void *)swift_task_alloc();
  v0[106] = v23;
  NSObject *v23 = v0;
  v23[1] = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
  uint64_t v24 = v0[86];
  os_log_type_t v25 = v0[51];
  return specialized ConversationService.updateRequestHandlingExecutionSystem(activeTurn:rcId:parse:)(v24, v21, v22, v25);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t, uint64_t);
  uint64_t v11;
  void *v12;
  uint64_t v14;

  uint64_t v1 = v0[88];
  uint64_t v2 = v0[87];
  uint64_t v3 = (void *)v0[77];
  uint64_t v4 = v0[76];
  uint64_t v5 = v0[75];
  uint64_t v6 = (void *)(v0[86] + v0[89]);
  uint64_t v7 = v6[3];
  uint64_t v8 = v6[4];
  __swift_project_boxed_opaque_existential_1(v6, v7);
  v0[90] = type metadata accessor for SiriKitEvent();
  *uint64_t v3 = v2;
  v3[1] = v1;
  Swift::String v9 = *MEMORY[0x1E4FA1980];
  uint64_t v10 = *(void (**)(void *, uint64_t, uint64_t))(v4 + 104);
  v0[91] = v10;
  v0[92] = (v4 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  v10(v3, v9, v5);
  swift_bridgeObjectRetain();
  uint64_t v11 = SiriKitEvent.__allocating_init(_:builder:)();
  v0[93] = v11;
  uint64_t v12 = (void *)swift_task_alloc();
  v0[94] = v12;
  *uint64_t v12 = v0;
  v12[1] = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
  return MEMORY[0x1F4151BE0](v11, v7, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 240);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(v1, (uint64_t)&unk_1F137B698, (uint64_t)&unk_1F137B6C0, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.markNotBusyAsync());
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t ObjectType;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = v0[30];
  uint64_t v2 = type metadata accessor for Logger();
  v0[85] = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 112);
  uint64_t v4 = *(unsigned char *)(v1 + 120);
  outlined copy of ConversationService.State(v3, v4);
  uint64_t v5 = specialized ConversationService.State.assertTurnStarted(function:)((uint64_t)"bridge(didReceiveCommitResultCandidateId:from:)", 47, 2, (uint64_t)v3, v4);
  v0[86] = v5;
  uint64_t v6 = v5;
  uint64_t v7 = v0[27];
  swift_retain();
  outlined consume of ConversationService.State(v3, v4);
  uint64_t v8 = *(void *)(v7 + 16);
  v0[87] = v8;
  Swift::String v9 = *(void *)(v7 + 24);
  v0[88] = v9;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 344))(v8, v9);
  if (v10)
  {
    uint64_t v31 = (void *)v10;
    uint64_t v11 = Logger.logObject.getter();
    uint64_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_1B9C64000, v11, v12, "Sending ACE command to reveal ASR", v13, 2u);
      MEMORY[0x1BA9E48C0](v13, -1, -1);
    }
    uint64_t v14 = v0[83];
    os_log_type_t v26 = v0[80];
    uint64_t v27 = v0[82];
    id v15 = v0[79];
    uint64_t v16 = v0[78];
    uint64_t v29 = v0[29];
    uint64_t v30 = v0[81];

    uint64_t v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96B58]), sel_init);
    objc_msgSend(v17, sel_setRecognition_, v31);
    uint64_t v18 = (void *)MEMORY[0x1BA9E2DD0](v8, v9);
    objc_msgSend(v17, sel_setSpeechRecognizedAceId_, v18);

    uint64_t ObjectType = swift_getObjectType();
    uint64_t v19 = *(void *)(v6 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData + 8);
    os_log_type_t v25 = *(void *)(v6 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData);
    id v20 = type metadata accessor for FlowOutputMessage.InAppResponse();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v14, 1, 1, v20);
    (*(void (**)(uint64_t, void, uint64_t))(v15 + 104))(v30, *MEMORY[0x1E4FA24B8], v16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v26, v30, v16);
    outlined init with copy of ReferenceResolutionClientProtocol?(v14, v27, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
    uint64_t v21 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
    uint64_t v22 = v17;
    swift_bridgeObjectRetain();
    uint64_t v23 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)(v17, 0, 0, 0, 0, 0, 0, 0, 0, 0, v25, v19, v26, v27);

    outlined destroy of ReferenceResolutionClientProtocol?(v14, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v30, v16);
    (*(void (**)(id, void (*)(int, id), void, uint64_t))(v29 + 8))(v23, closure #1 in ConversationService.bridge(didReceiveCommitResultCandidateId:from:), 0, ObjectType);
  }
  v0[89] = OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_eventSender;
  return MEMORY[0x1F4188298](ConversationService.bridge(didReceiveCommitResultCandidateId:from:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[74];
  uint64_t v2 = v0[30];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v1, &demangling cache variable for type metadata for Input?);
  $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(v2, (uint64_t)&unk_1F137B698, (uint64_t)&unk_1F137B6C0, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.markNotBusyAsync());
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t (*v25)(void);
  uint64_t v27;
  uint64_t v28;
  uint64_t ObjectType;
  uint64_t v30;
  uint64_t v31;

  uint64_t v1 = v0[86];
  uint64_t v2 = v0[27];
  ConversationService.markBusy(doing:)();
  uint64_t v3 = (*(uint64_t (**)(void, void))(*(void *)v1 + 328))(*(void *)(v2 + 32), *(void *)(v2 + 40));
  v0[95] = v3;
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = (void *)swift_task_alloc();
    v0[96] = v5;
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    *uint64_t v5 = v0;
    v5[1] = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
    uint64_t v7 = v0[67];
    uint64_t v8 = v0[66];
    Swift::String v9 = MEMORY[0x1E4FBC0F0];
    return MEMORY[0x1F4187D90](v7, v4, v8, v6, v9);
  }
  else
  {
    uint64_t v10 = (void *)v0[88];
    uint64_t v28 = v0[87];
    uint64_t v11 = v0[86];
    uint64_t v12 = v0[83];
    uint64_t v13 = v0[82];
    uint64_t v14 = v0[81];
    id v15 = v0[80];
    uint64_t v16 = v0[79];
    uint64_t v17 = v0[78];
    uint64_t v30 = v0[29];
    swift_release();
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v18 = *(void *)(v11 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData + 8);
    uint64_t v27 = *(void *)(v11 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData);
    uint64_t v19 = type metadata accessor for FlowOutputMessage.InAppResponse();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v12, 1, 1, v19);
    (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))(v14, *MEMORY[0x1E4FA24B8], v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v15, v14, v17);
    outlined init with copy of ReferenceResolutionClientProtocol?(v12, v13, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
    id v20 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
    swift_bridgeObjectRetain();
    uint64_t v21 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v27, v18, v15, v13);
    outlined destroy of ReferenceResolutionClientProtocol?(v12, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v17);
    _StringGuts.grow(_:)(76);
    v22._unint64_t object = (void *)0x80000001BA066B50;
    v22._uint64_t countAndFlagsBits = 0xD000000000000023;
    String.append(_:)(v22);
    swift_bridgeObjectRetain();
    v23._uint64_t countAndFlagsBits = v28;
    v23._unint64_t object = v10;
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._uint64_t countAndFlagsBits = 0xD000000000000027;
    v24._unint64_t object = (void *)0x80000001BA066B80;
    String.append(_:)(v24);
    (*(void (**)(id, void, unint64_t, uint64_t))(v30 + 32))(v21, 0, 0xE000000000000000, ObjectType);
    swift_bridgeObjectRelease();

    $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(v0[30], (uint64_t)&unk_1F137B698, (uint64_t)&unk_1F137B6C0, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.markNotBusyAsync());
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v25 = (uint64_t (*)(void))v0[1];
    return v25();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;

  uint64_t v1 = v0[88];
  uint64_t v2 = v0[87];
  uint64_t v3 = v0[86];
  uint64_t v4 = v0[70];
  uint64_t v6 = v0[52];
  uint64_t v5 = v0[53];
  swift_release();
  id v41 = *(void *)(v3 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData + 8);
  id v42 = *(void *)(v3 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData);
  uint64_t v39 = *(void *)(v3 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData + 24);
  id v40 = *(void *)(v3 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 360))(v2, v1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v4, 1, v6) == 1)
  {
    uint64_t v7 = v0[44];
    uint64_t v8 = v0[33];
    Swift::String v9 = v0[34];
    outlined destroy of ReferenceResolutionClientProtocol?(v0[70], &demangling cache variable for type metadata for Input?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  }
  else
  {
    uint64_t v10 = v0[50];
    uint64_t v12 = v0[46];
    uint64_t v11 = v0[47];
    Input.parse.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v11 + 88))(v10, v12) == *MEMORY[0x1E4FA1F48])
    {
      uint64_t v13 = v0[50];
      uint64_t v14 = v0 + 42;
      id v15 = v0[42];
      uint64_t v16 = v0 + 40;
      uint64_t v17 = v0 + 39;
      uint64_t v19 = v0[39];
      uint64_t v18 = v0[40];
      (*(void (**)(uint64_t, void))(v0[47] + 96))(v13, v0[46]);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v15, v13, v19);
      USOParse.userParse.getter();
      id v20 = 0;
    }
    else
    {
      uint64_t v14 = v0 + 50;
      uint64_t v16 = v0 + 47;
      uint64_t v17 = v0 + 46;
      id v20 = 1;
    }
    uint64_t v21 = *v14;
    uint64_t v22 = *v16;
    uint64_t v23 = v0[70];
    os_log_type_t v25 = v0[52];
    uint64_t v24 = v0[53];
    os_log_type_t v26 = v0[44];
    uint64_t v28 = v0[33];
    uint64_t v27 = v0[34];
    (*(void (**)(uint64_t, void))(v22 + 8))(v21, *v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v26, v20, 1, v28);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  }
  uint64_t v29 = v0[88];
  uint64_t v30 = v0[87];
  id v32 = v0[43];
  uint64_t v31 = v0[44];
  uint64_t v33 = v0[36];
  uint64_t v34 = v0[37];
  id v35 = v0[29];
  uint64_t v36 = v0[28];
  (*(void (**)(uint64_t, void, uint64_t))(v34 + 104))(v32, *MEMORY[0x1E4FA25F0], v33);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v32, 0, 1, v33);
  ConversationService.maybeDoServerFallback(bridge:forResultCandidateId:executionRequestId:rootRequestId:isDomainDirected:topNlParse:serverFallbackReason:)(v36, v35, v30, v29, v42, v41, v40, v39, 0, v31, v32);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v32, &demangling cache variable for type metadata for ServerFallbackReason?);
  outlined destroy of ReferenceResolutionClientProtocol?(v31, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(v0[30], (uint64_t)&unk_1F137B698, (uint64_t)&unk_1F137B6C0, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.markNotBusyAsync());
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v37 = (uint64_t (*)(void))v0[1];
  return v37();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 672);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](ConversationService.bridge(didReceiveCommitResultCandidateId:from:), v1, 0);
}

{
  uint64_t v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  unint64_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  id *v72;
  uint64_t v73;
  uint64_t ObjectType;
  uint64_t v75;
  objc_class *v76;
  unsigned char *v77;
  void *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int *v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int (*v121)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v122)(void);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;

  uint64_t v124 = v0;
  uint64_t v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 832);
  uint64_t v2 = *(void *)(v0 + 504);
  uint64_t v3 = *(void *)(v0 + 464);
  outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 520), v2, &demangling cache variable for type metadata for DecisionEngineResponse?);
  if (v1(v2, 1, v3) == 1)
  {
    uint64_t v4 = *(void *)(v0 + 504);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v4, &demangling cache variable for type metadata for DecisionEngineResponse?);
LABEL_7:
    swift_retain();
    id v15 = Logger.logObject.getter();
    uint64_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = *(void *)(v0 + 704);
      uint64_t v18 = *(void *)(v0 + 696);
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      id v20 = swift_slowAlloc();
      uint64_t v123 = v20;
      *(_DWORD *)uint64_t v19 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, &v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl(&dword_1B9C64000, v15, v16, "[ConversationService] No conversation found for followup input %s during commit. Will redirect to server.", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v20, -1, -1);
      MEMORY[0x1BA9E48C0](v19, -1, -1);
    }
    else
    {
      swift_release();
    }

    uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 832);
    uint64_t v22 = *(void *)(v0 + 488);
    uint64_t v23 = *(void *)(v0 + 464);
    uint64_t v24 = (uint64_t *)(*(void *)(v0 + 688) + *(void *)(v0 + 808));
    uint64_t v120 = *v24;
    int v114 = v24[2];
    uint64_t v117 = v24[1];
    uint64_t v112 = v24[3];
    outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 520), v22, &demangling cache variable for type metadata for DecisionEngineResponse?);
    os_log_type_t v25 = v21(v22, 1, v23);
    os_log_type_t v26 = *(void *)(v0 + 488);
    uint64_t v27 = *(void *)(v0 + 360);
    if (v25 == 1)
    {
      uint64_t v28 = *(void *)(v0 + 264);
      uint64_t v29 = *(void *)(v0 + 272);
      outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 488), &demangling cache variable for type metadata for DecisionEngineResponse?);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v27, 1, 1, v28);
    }
    else
    {
      DecisionEngineResponse.topNlParse.getter(*(void *)(v0 + 360));
      outlined destroy of DecisionEngineResponse(v26, (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
    }
    uint64_t v30 = *(void *)(v0 + 704);
    uint64_t v31 = *(void *)(v0 + 696);
    uint64_t v110 = *(void *)(v0 + 520);
    id v32 = *(void *)(v0 + 360);
    uint64_t v33 = *(void *)(v0 + 344);
    uint64_t v34 = *(void *)(v0 + 288);
    id v35 = *(void *)(v0 + 296);
    uint64_t v36 = *(void *)(v0 + 232);
    uint64_t v37 = *(void *)(v0 + 224);
    (*(void (**)(uint64_t, void, uint64_t))(v35 + 104))(v33, *MEMORY[0x1E4FA25F0], v34);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v33, 0, 1, v34);
    ConversationService.maybeDoServerFallback(bridge:forResultCandidateId:executionRequestId:rootRequestId:isDomainDirected:topNlParse:serverFallbackReason:)(v37, v36, v31, v30, v120, v117, v114, v112, 0, v32, v33);
    swift_release();
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v33, &demangling cache variable for type metadata for ServerFallbackReason?);
    outlined destroy of ReferenceResolutionClientProtocol?(v32, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    outlined destroy of ReferenceResolutionClientProtocol?(v110, &demangling cache variable for type metadata for DecisionEngineResponse?);
    $defer #1 () in ConversationService.bridge(didReceiveRSKE:withRequestContextData:from:)(*(void *)(v0 + 240), (uint64_t)&unk_1F137B698, (uint64_t)&unk_1F137B6C0, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.markNotBusyAsync());
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v38 = *(uint64_t (**)(void))(v0 + 8);
    return v38();
  }
  uint64_t v5 = *(uint64_t **)(v0 + 504);
  uint64_t v6 = *v5;
  swift_retain();
  outlined destroy of DecisionEngineResponse((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
  if (!v6)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 832);
  uint64_t v8 = *(void *)(v0 + 496);
  Swift::String v9 = *(void *)(v0 + 464);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(*(void *)(v0 + 520), v8, &demangling cache variable for type metadata for DecisionEngineResponse?);
  uint64_t v10 = v7(v8, 1, v9);
  uint64_t v11 = *(void *)(v0 + 568);
  uint64_t v12 = *(void *)(v0 + 496);
  if (v10 == 1)
  {
    uint64_t v13 = *(void *)(v0 + 416);
    uint64_t v14 = *(void *)(v0 + 424);
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 496), &demangling cache variable for type metadata for DecisionEngineResponse?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v11, 1, 1, v13);
  }
  else
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v12 + *(int *)(*(void *)(v0 + 464) + 24), *(void *)(v0 + 568), &demangling cache variable for type metadata for Input?);
    outlined destroy of DecisionEngineResponse(v12, (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
  }
  id v40 = *(void *)(v0 + 784);
  id v41 = *(void *)(v0 + 568);
  *(void *)(v0 + 896) = v40;
  *(void *)(v0 + 888) = v6;
  id v42 = *(void *)(v0 + 592);
  uint64_t v43 = *(void *)(v0 + 552);
  uint64_t v45 = *(void *)(v0 + 416);
  uint64_t v44 = *(void *)(v0 + 424);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v41, v42, &demangling cache variable for type metadata for Input?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v42, v43, &demangling cache variable for type metadata for Input?);
  uint64_t v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
  if (v46(v43, 1, v45) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 552), &demangling cache variable for type metadata for Input?);
  }
  else
  {
    id v47 = *(void *)(v0 + 392);
    uint64_t v48 = *(void *)(v0 + 368);
    uint64_t v49 = *(void *)(v0 + 376);
    (*(void (**)(void, void, void))(*(void *)(v0 + 424) + 32))(*(void *)(v0 + 448), *(void *)(v0 + 552), *(void *)(v0 + 416));
    Input.parse.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v49 + 88))(v47, v48) == *MEMORY[0x1E4FA1F58])
    {
      id v50 = *(void *)(v0 + 240);
      (*(void (**)(void, void))(*(void *)(v0 + 376) + 8))(*(void *)(v0 + 392), *(void *)(v0 + 368));
      uint64_t v51 = (void *)(v50 + 272);
      unint64_t result = swift_beginAccess();
      uint64_t v52 = *(void *)(v50 + 272);
      uint64_t v53 = __OFADD__(v52, 1);
      unsigned int v54 = v52 + 1;
      if (v53)
      {
        __break(1u);
        return result;
      }
      *uint64_t v51 = v54;
      swift_retain();
      uint64_t v55 = Logger.logObject.getter();
      uint64_t v56 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v55, v56))
      {
        uint64_t v57 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v57 = 134217984;
        *(void *)(v0 + 200) = *v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl(&dword_1B9C64000, v55, v56, "Input given to flow was empty: Incrementing consecutiveEmptyInputs to %ld", v57, 0xCu);
        MEMORY[0x1BA9E48C0](v57, -1, -1);
      }
      else
      {
        swift_release();
      }
      os_log_type_t v62 = *(void *)(v0 + 448);
      uint64_t v63 = *(void *)(v0 + 416);
      uint64_t v64 = *(void *)(v0 + 424);

      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v62, v63);
      goto LABEL_27;
    }
    uint64_t v58 = *(void *)(v0 + 392);
    uint64_t v59 = *(void *)(v0 + 368);
    uint64_t v60 = *(void *)(v0 + 376);
    (*(void (**)(void, void))(*(void *)(v0 + 424) + 8))(*(void *)(v0 + 448), *(void *)(v0 + 416));
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v58, v59);
  }
  uint64_t v61 = *(void *)(v0 + 240);
  swift_beginAccess();
  *(void *)(v61 + 272) = 0;
LABEL_27:
  uint64_t v65 = *(void *)(v0 + 544);
  os_log_type_t v66 = *(void *)(v0 + 416);
  outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 592), v65, &demangling cache variable for type metadata for Input?);
  if (v46(v65, 1, v66) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 544), &demangling cache variable for type metadata for Input?);
  }
  else
  {
    uint64_t v121 = v46;
    uint64_t v68 = *(void *)(v0 + 376);
    os_log_type_t v67 = *(void *)(v0 + 384);
    uint64_t v69 = *(void *)(v0 + 368);
    (*(void (**)(void, void, void))(*(void *)(v0 + 424) + 32))(*(void *)(v0 + 440), *(void *)(v0 + 544), *(void *)(v0 + 416));
    Input.parse.getter();
    uint64_t v70 = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 88))(v67, v69);
    if (v70 == *MEMORY[0x1E4FA1F18])
    {
      id v71 = *(void *)(v0 + 424);
      uint64_t v115 = *(void *)(v0 + 416);
      char v118 = *(void *)(v0 + 440);
      os_log_type_t v72 = *(id **)(v0 + 384);
      uint64_t v73 = *(void *)(v0 + 232);
      (*(void (**)(id *, void))(*(void *)(v0 + 376) + 96))(v72, *(void *)(v0 + 368));

      uint64_t ObjectType = swift_getObjectType();
      uint64_t v75 = v40;
      id v76 = (objc_class *)type metadata accessor for ExecutionInputInfo();
      os_log_type_t v77 = objc_allocWithZone(v76);
      uint64_t v78 = &v77[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_parseId];
      uint8_t *v78 = 0;
      v78[1] = 0;
      v77[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes] = 1;
      *(void *)(v0 + 160) = v77;
      *(void *)(v0 + 168) = v76;
      uint64_t v79 = objc_msgSendSuper2((objc_super *)(v0 + 160), sel_init);
      (*(void (**)(id, uint64_t, uint64_t))(v73 + 152))(v79, ObjectType, v73);

      id v40 = v75;
      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v118, v115);
    }
    else
    {
      os_log_type_t v81 = *(void *)(v0 + 376);
      uint64_t v80 = *(void *)(v0 + 384);
      unint64_t v82 = *(void *)(v0 + 368);
      if (v70 == *MEMORY[0x1E4FA1F48])
      {
        uint64_t v83 = *(void *)(v0 + 320);
        uint64_t v116 = v40;
        unint64_t v119 = *(void *)(v0 + 328);
        uint64_t v84 = *(void *)(v0 + 312);
        uint64_t v109 = v83;
        uint64_t v86 = *(void *)(v0 + 272);
        unint64_t v85 = *(void *)(v0 + 280);
        uint64_t v107 = *(void *)(v0 + 264);
        uint64_t v106 = *(void *)(v0 + 256);
        uint64_t v108 = *(void *)(v0 + 232);
        uint64_t v111 = *(void *)(v0 + 440);
        uint64_t v113 = *(void *)(v0 + 416);
        uint64_t v87 = *(void *)(v0 + 424);
        (*(void (**)(uint64_t, void))(v81 + 96))(v80, *(void *)(v0 + 368));
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 32))(v119, v80, v84);
        uint64_t v88 = swift_getObjectType();
        USOParse.userParse.getter();
        Siri_Nlu_External_UserParse.id.getter();
        (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v85, v107);
        uint64_t v89 = objc_allocWithZone((Class)type metadata accessor for ExecutionInputInfo());
        os_log_type_t v90 = ExecutionInputInfo.init(parseId:)(v106);
        (*(void (**)(id, uint64_t))(v108 + 152))(v90, v88);

        (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v119, v84);
        id v40 = v116;
        (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v111, v113);
      }
      else
      {
        (*(void (**)(void, void))(*(void *)(v0 + 424) + 8))(*(void *)(v0 + 440), *(void *)(v0 + 416));
        (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v80, v82);
      }
    }
    uint64_t v46 = v121;
  }
  uint64_t v91 = *(void *)(v0 + 592);
  uint64_t v92 = *(void *)(v0 + 416);
  type metadata accessor for ConversationSELFHelper();
  *(void *)(v0 + 904) = static ConversationSELFHelper.shared.getter();
  if (v46(v91, 1, v92))
  {
    uint64_t v93 = *(void *)(v0 + 248);
    unint64_t v94 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v94 - 8) + 56))(v93, 1, 1, v94);
  }
  else
  {
    uint64_t v96 = *(void *)(v0 + 424);
    unint64_t v95 = *(void *)(v0 + 432);
    os_log_type_t v97 = *(void *)(v0 + 416);
    uint64_t v98 = *(void *)(v0 + 248);
    (*(void (**)(uint64_t, void, uint64_t))(v96 + 16))(v95, *(void *)(v0 + 592), v97);
    Input.identifier.getter();
    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v95, v97);
    uint64_t v99 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v99 - 8) + 56))(v98, 0, 1, v99);
  }
  unint64_t v100 = *(void *)(v0 + 688);
  uint64_t v101 = *(void *)(v0 + 240);
  char v102 = *(void *)(v0 + 216);
  uint64_t v103 = swift_allocObject();
  char v104 = (int *)MEMORY[0x1E4FA1E00];
  *(unsigned char *)(v103 + 64) = 1;
  Class v122 = (uint64_t (*)(void))((char *)v104 + *v104);
  *(void *)(v0 + 912) = v103;
  *(void *)(v103 + 16) = v101;
  *(void *)(v103 + 24) = v102;
  *(void *)(v103 + 32) = v100;
  *(_OWORD *)(v103 + 40) = *(_OWORD *)(v0 + 224);
  *(void *)(v103 + 56) = v6;
  *(void *)(v103 + 72) = v40;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v105 = (void *)swift_task_alloc();
  *(void *)(v0 + 920) = v105;
  *uint64_t v105 = v0;
  v105[1] = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
  return v122();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 928) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 672);
  outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v2 + 248), (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_release();
  swift_release();
  if (v0) {
    uint64_t v4 = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
  }
  else {
    uint64_t v4 = ConversationService.bridge(didReceiveCommitResultCandidateId:from:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

uint64_t ConversationService.bridge(didReceiveCommitResultCandidateId:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[29] = a3;
  v4[30] = v3;
  v4[27] = a1;
  v4[28] = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v4[31] = swift_task_alloc();
  type metadata accessor for Siri_Nlu_External_UUID();
  v4[32] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UserParse();
  v4[33] = v5;
  v4[34] = *(void *)(v5 - 8);
  v4[35] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ServerFallbackReason();
  v4[36] = v6;
  v4[37] = *(void *)(v6 - 8);
  v4[38] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for USOParse();
  v4[39] = v7;
  v4[40] = *(void *)(v7 - 8);
  v4[41] = swift_task_alloc();
  v4[42] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  v4[43] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  v4[44] = swift_task_alloc();
  v4[45] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Parse();
  v4[46] = v8;
  v4[47] = *(void *)(v8 - 8);
  v4[48] = swift_task_alloc();
  v4[49] = swift_task_alloc();
  v4[50] = swift_task_alloc();
  v4[51] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Input();
  v4[52] = v9;
  v4[53] = *(void *)(v9 - 8);
  v4[54] = swift_task_alloc();
  v4[55] = swift_task_alloc();
  v4[56] = swift_task_alloc();
  v4[57] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DecisionEngineResponse();
  v4[58] = v10;
  v4[59] = *(void *)(v10 - 8);
  v4[60] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DecisionEngineResponse?);
  v4[61] = swift_task_alloc();
  v4[62] = swift_task_alloc();
  v4[63] = swift_task_alloc();
  v4[64] = swift_task_alloc();
  v4[65] = swift_task_alloc();
  v4[66] = type metadata accessor for ConversationService.EagerResult(0);
  v4[67] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v4[68] = swift_task_alloc();
  v4[69] = swift_task_alloc();
  v4[70] = swift_task_alloc();
  v4[71] = swift_task_alloc();
  v4[72] = swift_task_alloc();
  v4[73] = swift_task_alloc();
  v4[74] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for SiriKitEventPayload();
  v4[75] = v11;
  v4[76] = *(void *)(v11 - 8);
  v4[77] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for RequestSummary.ExecutionSource();
  v4[78] = v12;
  v4[79] = *(void *)(v12 - 8);
  v4[80] = swift_task_alloc();
  v4[81] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  v4[82] = swift_task_alloc();
  v4[83] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v13 = static MessageBusActor.shared;
  v4[84] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](ConversationService.bridge(didReceiveCommitResultCandidateId:from:), v13, 0);
}

void *ConversationService.ActiveTurn.getNeedsASRReveal(rcId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_needsASRReveal);
  swift_beginAccess();
  uint64_t v6 = *v5;
  if (!*(void *)(v6 + 16)) {
    return 0;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if (v8)
  {
    uint64_t v9 = *(void **)(*(void *)(v6 + 56) + 8 * v7);
    id v10 = v9;
  }
  else
  {
    uint64_t v9 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t protocol witness for SiriKitEventSending.sendAsync(_:) in conformance InvocationScopedSiriKitEventSender(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return InvocationScopedSiriKitEventSender.sendAsync(_:)(a1);
}

uint64_t InvocationScopedSiriKitEventSender.sendAsync(_:)()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[16];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[13];
  uint64_t v4 = v0[11];
  static os_signpost_type_t.event.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v1(v3, v4);
  swift_release();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  v1(v2, v4);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  void *v28;
  uint64_t v29;
  uint64_t v31;
  os_log_type_t type;
  uint64_t v33;
  void *v34;
  uint64_t v35;

  uint64_t v34 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[5];
  uint64_t v6 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  SiriKitEvent.overrides.getter();
  uint64_t v7 = *(void *)(v5 + 16);
  outlined init with copy of SiriKitEventOverrides?(v1, v2);
  char v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3);
  uint64_t v9 = v0[10];
  if (v8 == 1)
  {
    outlined destroy of SiriKitEventOverrides?(v0[10]);
    swift_retain();
  }
  else
  {
    id v10 = v0[8];
    uint64_t v11 = v0[6];
    uint64_t v12 = v0[7];
    (*(void (**)(uint64_t, void, uint64_t))(v12 + 32))(v10, v0[9], v11);
    swift_retain();
    uint64_t v13 = SiriKitEventContext.withOverrides(_:)(v10);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    outlined destroy of SiriKitEventOverrides?(v9);
    swift_release();
    uint64_t v7 = (uint64_t)v13;
  }
  v0[15] = v7;
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.instrumentation);
  swift_retain_n();
  swift_retain_n();
  uint64_t v15 = Logger.logObject.getter();
  uint64_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    os_log_type_t type = v16;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v33 = v31;
    *(_DWORD *)uint64_t v17 = 136315394;
    uint64_t v18 = SiriKitEvent.debugDescription.getter();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v17 + 12) = 2080;
    swift_retain();
    id v20 = SiriKitEventContext.description.getter();
    uint64_t v22 = v21;
    swift_release();
    v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B9C64000, v15, type, "Dispatching async event to sinks: %s with context: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v31, -1, -1);
    MEMORY[0x1BA9E48C0](v17, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_release_n();
  }

  uint64_t v24 = v0[12];
  uint64_t v23 = v0[13];
  os_log_type_t v25 = v0[11];
  os_log_type_t v26 = v0[4];
  type metadata accessor for IntentLoggingEventSink();
  swift_initStaticObject();
  specialized IntentLoggingEventSink.receive(_:_:)(v26);
  static os_signpost_type_t.event.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
  v0[16] = v27;
  v0[17] = (v24 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v27(v23, v25);
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v28 = (void *)swift_task_alloc();
  v0[18] = v28;
  *uint64_t v28 = v0;
  v28[1] = InvocationScopedSiriKitEventSender.sendAsync(_:);
  uint64_t v29 = v0[4];
  return TaskLoggingEventSink.receiveAsync(_:_:)(v29, v7);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](InvocationScopedSiriKitEventSender.sendAsync(_:), 0, 0);
}

uint64_t InvocationScopedSiriKitEventSender.sendAsync(_:)(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for SiriKitEventOverrides();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitEventOverrides?);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OSSignpostID();
  v2[11] = v4;
  v2[12] = *(void *)(v4 - 8);
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  return MEMORY[0x1F4188298](InvocationScopedSiriKitEventSender.sendAsync(_:), 0, 0);
}

uint64_t outlined init with copy of SiriKitEventOverrides?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitEventOverrides?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *SiriKitEventContext.withOverrides(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = type metadata accessor for SiriKitEventOverrides();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v33 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  id v10 = (char *)&v30 - v9;
  uint64_t v11 = a1;
  uint64_t v12 = SiriKitEventOverrides.resultCandidateId.getter();
  uint64_t v14 = v13;
  if (v13)
  {
    uint64_t v15 = v12;
    if (v12 == 12589 && v13 == 0xE200000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v15 = 0;
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v16(v10, v11, v5);
  uint64_t v31 = v15;
  uint64_t v32 = v4;
  if (v14)
  {
    uint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
    v17(v10, v5);
    uint64_t v18 = v33;
    v16(v33, v11, v5);
    v17(v18, v5);
  }
  else
  {
    SiriKitEventOverrides.taskId.getter();
    uint64_t v20 = v19;
    uint64_t v21 = *(void (**)(char *, uint64_t))(v6 + 8);
    v21(v10, v5);
    swift_bridgeObjectRelease();
    uint64_t v22 = v33;
    v16(v33, v11, v5);
    if (v20)
    {
      v21(v22, v5);
    }
    else
    {
      SiriKitEventOverrides.interactionId.getter();
      uint64_t v29 = v28;
      v21(v22, v5);
      swift_bridgeObjectRelease();
      if (!v29)
      {
        swift_bridgeObjectRelease();
        swift_retain();
        return v2;
      }
    }
  }
  swift_retain();
  uint64_t v23 = SiriKitEventOverrides.interactionId.getter();
  uint64_t v25 = v24;
  swift_allocObject();
  os_log_type_t v26 = specialized SiriKitEventContext.init(context:interactionId:resultCandidateId:)(v2, v23, v25, v31, v14);
  swift_release();
  return v26;
}

void *specialized SiriKitEventContext.init(context:interactionId:resultCandidateId:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(a1 + 4), (uint64_t)(v5 + 4));
  v5[9] = a1[9];
  uint64_t v9 = a1[11];
  v5[10] = a1[10];
  v5[11] = v9;
  if (!a3)
  {
    a2 = a1[12];
    a3 = a1[13];
    swift_bridgeObjectRetain();
  }
  v5[12] = a2;
  v5[13] = a3;
  swift_retain();
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t outlined destroy of SiriKitEventOverrides?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitEventOverrides?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized IntentLoggingEventSink.receive(_:_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v216 = *v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  MEMORY[0x1F4188790](v4 - 8);
  Swift::String v208 = (char *)&v194 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (void *)type metadata accessor for SiriKitConfirmationState();
  uint64_t v218 = *(v6 - 1);
  id v219 = v6;
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  Swift::String v209 = (char *)&v194 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v217 = (uint64_t)&v194 - v9;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v215 = (uint64_t)&v194 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  v220 = (char *)&v194 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v194 - v16;
  uint64_t v18 = type metadata accessor for SiriKitEventPayload();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  v206 = (char *)&v194 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v194 - v22;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LaunchAppBehavior?);
  uint64_t v25 = MEMORY[0x1F4188790](v24 - 8);
  uint64_t v201 = (uint64_t)&v194 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v203 = (uint64_t)&v194 - v28;
  MEMORY[0x1F4188790](v27);
  uint64_t v214 = (uint64_t)&v194 - v29;
  uint64_t v30 = type metadata accessor for ActivityType();
  uint64_t v212 = *(void *)(v30 - 8);
  uint64_t v213 = v30;
  uint64_t v31 = MEMORY[0x1F4188790](v30);
  uint64_t v210 = (char *)&v194 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  v199 = (char *)&v194 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  Swift::String v200 = (char *)&v194 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v202 = (char *)&v194 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  id v204 = (char *)&v194 - v40;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v43 = (char *)&v194 - v42;
  uint64_t v44 = MEMORY[0x1F4188790](v41);
  uint64_t v205 = (char *)&v194 - v45;
  MEMORY[0x1F4188790](v44);
  v211 = (char *)&v194 - v46;
  SiriKitEvent.payload.getter();
  int v47 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v23, v18);
  if (v47 == *MEMORY[0x1E4FA1910])
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v23, v18);
    uint64_t v48 = *(void **)v23;
    swift_bridgeObjectRelease();
    SiriKitEvent.timestamp.getter();
    IntentLoggingEventSink.handleIntentStarted(intent:now:context:)(v48, (uint64_t)v17, 0x53746E65746E692ELL, 0xEE00646574726174);

    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v17, v10);
  }
  uint64_t v207 = v18;
  uint64_t v198 = a1;
  uint64_t v194 = v2;
  uint64_t v195 = v17;
  uint64_t v196 = v10;
  uint64_t v197 = v11;
  if (v47 == *MEMORY[0x1E4FA1988])
  {
    (*(void (**)(char *, uint64_t))(v19 + 96))(v23, v207);
    id v50 = *(void **)v23;
    uint64_t v51 = (void *)*((void *)v23 + 1);
    uint64_t v52 = *((void *)v23 + 4);
    uint64_t v54 = *((void *)v23 + 5);
    uint64_t v53 = *((void *)v23 + 6);
    int v55 = v23[56];
    swift_bridgeObjectRelease();
    uint64_t v56 = v220;
    SiriKitEvent.timestamp.getter();
    if (v51)
    {
      LODWORD(v218) = v55;
      uint64_t v217 = v54;
      id v57 = v51;
      id v58 = objc_msgSend(v57, sel_intentId, v194);
      if (v58)
      {
        uint64_t v59 = v58;
        uint64_t v60 = v52;
        uint64_t v61 = v53;
        os_log_type_t v62 = v50;
        uint64_t v215 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v219 = v63;
      }
      else
      {
        uint64_t v60 = v52;
        uint64_t v61 = v53;
        os_log_type_t v62 = v50;
        uint64_t v215 = 0;
        id v219 = 0;
      }
      uint64_t v88 = v197;
      char v104 = v195;
      uint64_t v89 = v196;
      (*(void (**)(char *, char *, uint64_t))(v197 + 16))(v195, v56, v196);
      unint64_t v105 = (*(unsigned __int8 *)(v88 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
      unint64_t v106 = (v12 + v105 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v107 = swift_allocObject();
      *(void *)(v107 + 16) = v60;
      *(void *)(v107 + 24) = v217;
      *(void *)(v107 + 32) = v57;
      *(void *)(v107 + 40) = v61;
      *(unsigned char *)(v107 + 48) = v218;
      *(void *)(v107 + 56) = v62;
      unint64_t v108 = v107 + v105;
      uint64_t v56 = v220;
      (*(void (**)(unint64_t, char *, uint64_t))(v88 + 32))(v108, v104, v89);
      *(void *)(v107 + v106) = v216;
      id v109 = v57;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized IntentLoggingEventSink.safeHandle(intentId:context:intentIdClosure:)(v215, (uint64_t)v219, 0xD000000000000016, 0x80000001BA069FC0, (void (*)(void))partial apply for closure #1 in IntentLoggingEventSink.handleDisambiguationOffered(intent:parameterName:multicardinalValueIndex:disambiguationItems:now:context:));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {
      if (one-time initialization token for instrumentation != -1) {
        swift_once();
      }
      uint64_t v84 = type metadata accessor for Logger();
      __swift_project_value_buffer(v84, (uint64_t)static Logger.instrumentation);
      unint64_t v85 = Logger.logObject.getter();
      os_log_type_t v86 = static os_log_type_t.error.getter();
      BOOL v87 = os_log_type_enabled(v85, v86);
      uint64_t v88 = v197;
      uint64_t v89 = v196;
      if (v87)
      {
        os_log_type_t v90 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v90 = 0;
        _os_log_impl(&dword_1B9C64000, v85, v86, "Intent is nil, not sending handleDisambiguationOffered event.", v90, 2u);
        uint64_t v91 = v90;
        uint64_t v56 = v220;
        MEMORY[0x1BA9E48C0](v91, -1, -1);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v88 + 8))(v56, v89);
  }
  if (v47 != *MEMORY[0x1E4FA1968])
  {
    if (v47 == *MEMORY[0x1E4FA1958])
    {
      (*(void (**)(char *, uint64_t))(v19 + 96))(v23, v207);
      uint64_t v78 = (void *)*((void *)v23 + 4);
      swift_bridgeObjectRelease();
      uint64_t v79 = *((void *)v23 + 7);
      uint64_t v80 = *((void *)v23 + 8);
      uint64_t v81 = *((void *)v23 + 9);
      int v82 = v23[80];
      outlined init with take of Any(v23, v221);
      uint64_t v83 = (uint64_t)v195;
      SiriKitEvent.timestamp.getter();
      IntentLoggingEventSink.handleConfirmationOffered(intent:parameterName:multicardinalValueIndex:itemToConfirm:now:context:)(v78, v79, v80, v81, v82, (uint64_t)v221, v83, 0xD000000000000014, 0x80000001BA069F80);
      swift_bridgeObjectRelease();

      (*(void (**)(uint64_t, uint64_t))(v197 + 8))(v83, v196);
      return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v221);
    }
    uint64_t v92 = (uint64_t)v195;
    if (v47 == *MEMORY[0x1E4FA1940])
    {
      (*(void (**)(char *, uint64_t))(v19 + 96))(v23, v207);
      uint64_t v93 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (confirmationState: SiriKitConfirmationState, intent: INIntent?, taskName: String?, parameterName: String, confirmedItem: Any?, multicardinalIndex: Int?));
      unint64_t v94 = *(void **)&v23[v93[12]];
      swift_bridgeObjectRelease();
      unint64_t v95 = (uint64_t *)&v23[v93[20]];
      uint64_t v96 = v95[1];
      uint64_t v217 = *v95;
      v220 = &v23[v93[24]];
      os_log_type_t v97 = &v23[v93[28]];
      uint64_t v98 = *(void *)v97;
      int v99 = v97[8];
      uint64_t v100 = v92;
      uint64_t v102 = v218;
      id v101 = v219;
      uint64_t v103 = (uint64_t)v209;
      (*(void (**)(char *, char *, id))(v218 + 32))(v209, v23, v219);
      SiriKitEvent.timestamp.getter();
      IntentLoggingEventSink.handleConfirmationResult(intent:parameterName:multicardinalIndexValue:confirmationState:now:context:)(v94, v217, v96, v98, v99, v103, v100, 0xD000000000000013, 0x80000001BA069F60);
      swift_bridgeObjectRelease();

      (*(void (**)(uint64_t, uint64_t))(v197 + 8))(v100, v196);
      (*(void (**)(uint64_t, id))(v102 + 8))(v103, v101);
      return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v220, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    if (v47 == *MEMORY[0x1E4FA1928])
    {
      (*(void (**)(char *, uint64_t))(v19 + 96))(v23, v207);
      uint64_t v117 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, intent: INIntent, app: App?, launchAppBehavior: LaunchAppBehavior?, parameterName: String?, responseId: String?, statusDescription: String?, statusReason: SiriKitReliabilityCodes?));
      v220 = *(char **)&v23[v117[12]];
      swift_release();
      uint64_t v118 = (uint64_t)&v23[v117[20]];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v119 = (uint64_t)&v23[v117[36]];
      uint64_t v120 = v211;
      uint64_t v121 = v212;
      Class v122 = v23;
      uint64_t v123 = v213;
      (*(void (**)(char *, char *, uint64_t))(v212 + 32))(v211, v122, v213);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v118, v214, &demangling cache variable for type metadata for LaunchAppBehavior?);
      outlined destroy of ReferenceResolutionClientProtocol?(v119, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      uint64_t v124 = v210;
LABEL_35:
      (*(void (**)(char *, void, uint64_t))(v121 + 104))(v124, *MEMORY[0x1E4FA1B20], v123);
      lazy protocol witness table accessor for type ActivityType and conformance ActivityType();
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v221[0] == v222) {
        char v136 = 1;
      }
      else {
        char v136 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      os_log_type_t v137 = *(void (**)(char *, uint64_t))(v121 + 8);
      v137(v124, v123);
      if (v136)
      {
        SiriKitEvent.timestamp.getter();
        *(void *)&v221[0] = 46;
        *((void *)&v221[0] + 1) = 0xE100000000000000;
        uint64_t v138 = v120;
        uint64_t v139 = v206;
        SiriKitEvent.payload.getter();
        uint64_t v140 = SiriKitEventPayload.description.getter();
        unint64_t v142 = v141;
        (*(void (**)(char *, uint64_t))(v19 + 8))(v139, v207);
        v143._uint64_t countAndFlagsBits = v140;
        v143._unint64_t object = v142;
        String.append(_:)(v143);
        swift_bridgeObjectRelease();
        v144._uint64_t countAndFlagsBits = 11816;
        v144._unint64_t object = (void *)0xE200000000000000;
        String.append(_:)(v144);
        uint64_t v145 = ActivityType.rawValue.getter();
        uint64_t v147 = v146;
        v137(v138, v123);
        v148._uint64_t countAndFlagsBits = v145;
        v148._unint64_t object = v147;
        String.append(_:)(v148);
        swift_bridgeObjectRelease();
        long long v149 = v221[0];
        uint64_t v150 = type metadata accessor for SiriKitReliabilityCodes();
        uint64_t v151 = (uint64_t)v208;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v150 - 8) + 56))(v208, 1, 1, v150);
        uint64_t v152 = v220;
        uint64_t v153 = v214;
        IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:)(v220, v214, v92, v149, *((unint64_t *)&v149 + 1), v151);

        swift_bridgeObjectRelease();
        outlined destroy of ReferenceResolutionClientProtocol?(v151, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
        (*(void (**)(uint64_t, uint64_t))(v197 + 8))(v92, v196);
        return outlined destroy of ReferenceResolutionClientProtocol?(v153, &demangling cache variable for type metadata for LaunchAppBehavior?);
      }
      else
      {

        outlined destroy of ReferenceResolutionClientProtocol?(v214, &demangling cache variable for type metadata for LaunchAppBehavior?);
        return ((uint64_t (*)(char *, uint64_t))v137)(v120, v123);
      }
    }
    uint64_t v120 = v211;
    uint64_t v121 = v212;
    uint64_t v124 = v210;
    if (v47 == *MEMORY[0x1E4FA1950])
    {
      (*(void (**)(char *, uint64_t))(v19 + 96))(v23, v207);
      uint64_t v131 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, app: App, intent: INIntent, parameterName: String, descriptionCode: Int?, flowActivity: FlowActivity?, launchAppBehavior: LaunchAppBehavior?, responseId: String?, statusReason: SiriKitReliabilityCodes?));
      swift_release();
      v220 = *(char **)&v23[v131[16]];
      swift_bridgeObjectRelease();
      uint64_t v132 = (uint64_t)&v23[v131[28]];
      uint64_t v133 = (uint64_t)&v23[v131[32]];
      swift_bridgeObjectRelease();
      uint64_t v134 = (uint64_t)&v23[v131[40]];
      uint64_t v135 = v23;
      uint64_t v123 = v213;
      (*(void (**)(char *, char *, uint64_t))(v121 + 32))(v120, v135, v213);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v133, v214, &demangling cache variable for type metadata for LaunchAppBehavior?);
      outlined destroy of ReferenceResolutionClientProtocol?(v134, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      outlined destroy of ReferenceResolutionClientProtocol?(v132, &demangling cache variable for type metadata for FlowActivity?);
      goto LABEL_35;
    }
    if (v47 == *MEMORY[0x1E4FA1960])
    {
      (*(void (**)(char *, uint64_t))(v19 + 96))(v23, v207);
      uint64_t v154 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, app: App, intent: INIntent, descriptionCode: Int?, flowActivity: FlowActivity?, responseId: String?, statusReason: SiriKitReliabilityCodes?));
      swift_release();
      uint64_t v155 = *(void **)&v23[v154[16]];
      swift_bridgeObjectRelease();
      uint64_t v156 = v213;
      (*(void (**)(char *, char *, uint64_t))(v121 + 32))(v205, v23, v213);
      (*(void (**)(char *, void, uint64_t))(v121 + 104))(v43, *MEMORY[0x1E4FA1B28], v156);
      lazy protocol witness table accessor for type ActivityType and conformance ActivityType();
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v221[0] == v222) {
        char v157 = 1;
      }
      else {
        char v157 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v163 = *(void (**)(char *, uint64_t))(v121 + 8);
      uint64_t v164 = v43;
      uint64_t v165 = v213;
      v163(v164, v213);
      if (v157)
      {
        uint64_t v166 = type metadata accessor for LaunchAppBehavior();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v166 - 8) + 56))(v203, 1, 1, v166);
        id v167 = v155;
        SiriKitEvent.timestamp.getter();
        uint64_t v168 = type metadata accessor for SiriKitReliabilityCodes();
        uint64_t v169 = (uint64_t)v208;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v168 - 8) + 56))(v208, 1, 1, v168);
        uint64_t v170 = v155;
        uint64_t v171 = v203;
        IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:)(v170, v203, v92, 0xD000000000000020, 0x80000001BA069F30, v169);

        outlined destroy of ReferenceResolutionClientProtocol?(v169, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
        (*(void (**)(uint64_t, uint64_t))(v197 + 8))(v92, v196);
        outlined destroy of ReferenceResolutionClientProtocol?(v171, &demangling cache variable for type metadata for LaunchAppBehavior?);
        v163(v205, v165);
      }
      else
      {
        v163(v205, v165);
      }
      uint64_t v172 = (uint64_t)&v23[v154[24]];
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v23[v154[32]], &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      return outlined destroy of ReferenceResolutionClientProtocol?(v172, &demangling cache variable for type metadata for FlowActivity?);
    }
    if (v47 != *MEMORY[0x1E4FA1920]) {
      return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v23, v207);
    }
    (*(void (**)(char *, uint64_t))(v19 + 96))(v23, v207);
    uint64_t v158 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, app: App, intent: INIntent, descriptionCode: Int?, flowActivity: FlowActivity?, launchAppBehavior: LaunchAppBehavior?, responseId: String?, statusReason: SiriKitReliabilityCodes?));
    swift_release();
    id v219 = *(id *)&v23[*(int *)(v158 + 64)];
    uint64_t v159 = (uint64_t)&v23[*(int *)(v158 + 112)];
    swift_bridgeObjectRelease();
    uint64_t v160 = v213;
    (*(void (**)(char *, char *, uint64_t))(v121 + 32))(v204, v23, v213);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v159, v201, &demangling cache variable for type metadata for LaunchAppBehavior?);
    uint64_t v161 = *(void (**)(char *, void, uint64_t))(v121 + 104);
    v161(v202, *MEMORY[0x1E4FA1B30], v160);
    lazy protocol witness table accessor for type ActivityType and conformance ActivityType();
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v218 = v158;
    if (v221[0] == v222) {
      char v162 = 1;
    }
    else {
      char v162 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v173 = *(char **)(v121 + 8);
    uint64_t v174 = v213;
    ((void (*)(char *, uint64_t))v173)(v202, v213);
    uint64_t v175 = *(void (**)(char *, char *, uint64_t))(v121 + 16);
    Swift::String v176 = v200;
    v175(v200, v204, v174);
    v220 = v173;
    if ((v162 & 1) == 0)
    {
      uint64_t v177 = v199;
      v161(v199, *MEMORY[0x1E4FA1B20], v174);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v221[0] != v222)
      {
        char v192 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v193 = v213;
        Swift::String v189 = v220;
        ((void (*)(char *, uint64_t))v220)(v177, v213);
        ((void (*)(char *, uint64_t))v189)(v176, v193);
        if ((v192 & 1) == 0)
        {

          uint64_t v188 = v201;
          uint64_t v181 = v204;
          goto LABEL_59;
        }
LABEL_58:
        id v178 = v219;
        id v179 = v219;
        uint64_t v180 = (uint64_t)v195;
        SiriKitEvent.timestamp.getter();
        *(void *)&v221[0] = 0;
        *((void *)&v221[0] + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(19);
        swift_bridgeObjectRelease();
        *(void *)&v221[0] = 0xD000000000000011;
        *((void *)&v221[0] + 1) = 0x80000001BA069F10;
        uint64_t v181 = v204;
        v182._uint64_t countAndFlagsBits = ActivityType.rawValue.getter();
        String.append(_:)(v182);
        swift_bridgeObjectRelease();
        unint64_t v184 = *((void *)&v221[0] + 1);
        uint64_t v183 = *(NSObject **)&v221[0];
        uint64_t v185 = type metadata accessor for SiriKitReliabilityCodes();
        uint64_t v186 = (uint64_t)v208;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v185 - 8) + 56))(v208, 1, 1, v185);
        v187 = v178;
        uint64_t v188 = v201;
        IntentLoggingEventSink.handleIntentResult(intent:launchAppBehavior:now:context:statusReason:)(v187, v201, v180, v183, v184, v186);
        Swift::String v189 = v220;

        swift_bridgeObjectRelease();
        outlined destroy of ReferenceResolutionClientProtocol?(v186, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
        (*(void (**)(uint64_t, uint64_t))(v197 + 8))(v180, v196);
LABEL_59:
        uint64_t v190 = v218;
        outlined destroy of ReferenceResolutionClientProtocol?(v188, &demangling cache variable for type metadata for LaunchAppBehavior?);
        ((void (*)(char *, uint64_t))v189)(v181, v213);
        uint64_t v191 = (uint64_t)&v23[*(int *)(v190 + 96)];
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v23[*(int *)(v190 + 144)], &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
        return outlined destroy of ReferenceResolutionClientProtocol?(v191, &demangling cache variable for type metadata for FlowActivity?);
      }
      swift_bridgeObjectRelease_n();
      uint64_t v174 = v213;
      uint64_t v173 = v220;
      ((void (*)(char *, uint64_t))v220)(v177, v213);
    }
    ((void (*)(char *, uint64_t))v173)(v176, v174);
    goto LABEL_58;
  }
  (*(void (**)(char *, uint64_t))(v19 + 96))(v23, v207);
  uint64_t v64 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (confirmationState: SiriKitConfirmationState, intent: INIntent?, taskName: String?, parameterName: String, multicardinalIndex: Int?));
  uint64_t v65 = *(void **)&v23[v64[12]];
  swift_bridgeObjectRelease();
  os_log_type_t v66 = &v23[v64[20]];
  uint64_t v68 = *(void *)v66;
  uint64_t v67 = *((void *)v66 + 1);
  uint64_t v69 = &v23[v64[24]];
  uint64_t v70 = *(void *)v69;
  int v71 = v69[8];
  (*(void (**)(uint64_t, char *, id))(v218 + 32))(v217, v23, v219);
  uint64_t v72 = v215;
  SiriKitEvent.timestamp.getter();
  if (v65)
  {
    LODWORD(v214) = v71;
    id v73 = v65;
    id v74 = objc_msgSend(v73, sel_intentId, v194);
    if (v74)
    {
      uint64_t v75 = v74;
      uint64_t v76 = v70;
      uint64_t v213 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v220 = v77;
    }
    else
    {
      uint64_t v76 = v70;
      uint64_t v213 = 0;
      v220 = 0;
    }
    uint64_t v114 = v197;
    uint64_t v125 = v195;
    uint64_t v116 = v196;
    (*(void (**)(char *, uint64_t, uint64_t))(v197 + 16))(v195, v72, v196);
    unint64_t v126 = (*(unsigned __int8 *)(v114 + 80) + 49) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80);
    unint64_t v127 = (v12 + v126 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v128 = swift_allocObject();
    *(void *)(v128 + 16) = v73;
    *(void *)(v128 + 24) = v68;
    *(void *)(v128 + 32) = v67;
    *(void *)(v128 + 40) = v76;
    *(unsigned char *)(v128 + 48) = v214;
    unint64_t v129 = v128 + v126;
    uint64_t v72 = v215;
    (*(void (**)(unint64_t, char *, uint64_t))(v114 + 32))(v129, v125, v116);
    *(void *)(v128 + v127) = v216;
    id v130 = v73;
    swift_bridgeObjectRetain();
    specialized IntentLoggingEventSink.safeHandle(intentId:context:intentIdClosure:)(v213, (uint64_t)v220, 0xD000000000000015, 0x80000001BA069FA0, (void (*)(void))partial apply for closure #1 in IntentLoggingEventSink.handleDisambiguationResult(intent:parameterName:multicardinalIndexValue:sirikitConfirmationState:now:context:));
    swift_bridgeObjectRelease();
    swift_release();

    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v110 = type metadata accessor for Logger();
    __swift_project_value_buffer(v110, (uint64_t)static Logger.instrumentation);
    uint64_t v111 = Logger.logObject.getter();
    os_log_type_t v112 = static os_log_type_t.error.getter();
    BOOL v113 = os_log_type_enabled(v111, v112);
    uint64_t v114 = v197;
    if (v113)
    {
      uint64_t v115 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v115 = 0;
      _os_log_impl(&dword_1B9C64000, v111, v112, "Intent is nil, not sending handleDisambiguationResult event.", v115, 2u);
      MEMORY[0x1BA9E48C0](v115, -1, -1);
    }
    swift_bridgeObjectRelease();

    uint64_t v116 = v196;
  }
  (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v72, v116);
  return (*(uint64_t (**)(uint64_t, id))(v218 + 8))(v217, v219);
}

uint64_t TaskLoggingEventSink.receiveAsync(_:_:)()
{
  *(void *)(v0 + 96) = *(void *)(*(void *)(v0 + 72) + 72);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v1 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](TaskLoggingEventSink.receiveAsync(_:_:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t (*v25)(void);
  uint64_t v26;
  os_log_type_t type;
  uint64_t v28;
  void *v29;
  uint64_t v30;

  uint64_t v29 = v0;
  uint64_t v1 = v0[11];
  SiriKitEvent.overrides.getter();
  uint64_t v2 = type metadata accessor for SiriKitEventOverrides();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  uint64_t v5 = v0[11];
  if (v4 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0[11], &demangling cache variable for type metadata for SiriKitEventOverrides?);
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = SiriKitEventOverrides.taskId.getter();
    uint64_t v7 = v8;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v2);
  }
  uint64_t v9 = specialized static TaskLoggingEventSink.computeEffectiveTask(_:_:)(v0[13], v6, v7);
  v0[14] = v9;
  swift_bridgeObjectRelease();
  swift_release();
  if (v9)
  {
    uint64_t v10 = (void *)swift_task_alloc();
    v0[15] = v10;
    *uint64_t v10 = v0;
    v10[1] = TaskLoggingEventSink.receiveAsync(_:_:);
    uint64_t v11 = v0[9];
    uint64_t v12 = v0[8];
    return TaskLoggingEventSink.receiveAsync(_:_:_:)(v12, v11, v9);
  }
  else
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.instrumentation);
    swift_retain_n();
    swift_retain_n();
    uint64_t v15 = Logger.logObject.getter();
    uint64_t v16 = static os_log_type_t.error.getter();
    uint64_t v17 = os_log_type_enabled(v15, v16);
    uint64_t v18 = v0[8];
    if (v17)
    {
      os_log_type_t type = v16;
      uint64_t v19 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      uint64_t v28 = v26;
      *(_DWORD *)uint64_t v19 = 136315394;
      v0[5] = v18;
      type metadata accessor for SiriKitEvent();
      lazy protocol witness table accessor for type SiriKitEvent and conformance SiriKitEvent(&lazy protocol witness table cache variable for type SiriKitEvent and conformance SiriKitEvent, MEMORY[0x1E4FA1A68]);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v19 + 12) = 2080;
      swift_retain();
      uint64_t v22 = SiriKitEventContext.description.getter();
      uint64_t v24 = v23;
      swift_release();
      v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v15, type, "TaskLoggingEventSink - No active task, dropping event: %s context: %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v26, -1, -1);
      MEMORY[0x1BA9E48C0](v19, -1, -1);
    }
    else
    {
      swift_release_n();
      swift_release_n();
    }

    swift_task_dealloc();
    uint64_t v25 = (uint64_t (*)(void))v0[1];
    return v25();
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](TaskLoggingEventSink.receiveAsync(_:_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *(void *)(v0 + 96);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 32);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v3 = v4;
    if (!v4) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v4 = swift_bridgeObjectRetain();
    if (!v3) {
      goto LABEL_6;
    }
  }
  if ((v2 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = MEMORY[0x1BA9E3990](0, v2);
  }
  else
  {
    if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return MEMORY[0x1F4188298](v4, v5, v6);
    }
    uint64_t v3 = *(void *)(v2 + 32);
    swift_retain();
  }
LABEL_6:
  swift_bridgeObjectRelease();
  *(void *)(v0 + 104) = v3;
  uint64_t v4 = (uint64_t)TaskLoggingEventSink.receiveAsync(_:_:);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  return MEMORY[0x1F4188298](v4, v5, v6);
}

uint64_t TaskLoggingEventSink.receiveAsync(_:_:)(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitEventOverrides?);
  v3[11] = swift_task_alloc();
  return MEMORY[0x1F4188298](TaskLoggingEventSink.receiveAsync(_:_:), 0, 0);
}

uint64_t specialized static TaskLoggingEventSink.computeEffectiveTask(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3
    || a1
    && (*(void *)(a1 + 16) == a2 ? (BOOL v10 = *(void *)(a1 + 24) == a3) : (BOOL v10 = 0),
        v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    swift_retain();
  }
  else
  {
    swift_bridgeObjectRetain();
    static Date.now.getter();
    type metadata accessor for FlowTask(0);
    a1 = swift_allocObject();
    *(void *)(a1 + 16) = a2;
    *(void *)(a1 + 24) = a3;
    *(_WORD *)(a1 + 32) = 256;
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime, v9, v6);
  }
  return a1;
}

uint64_t TaskLoggingEventSink.receiveAsync(_:_:_:)()
{
  TaskService.update(task:state:)(*(void *)(v0 + 552), 2);
  swift_release();
  swift_release();
  return MEMORY[0x1F4188298](TaskLoggingEventSink.receiveAsync(_:_:_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  unsigned int (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  __CFString *v31;
  __CFString *v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __CFString *v48;
  uint64_t v49;
  __CFString *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(void);
  uint64_t v75;
  uint64_t type;
  os_log_type_t typea;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  uint64_t v80 = v0;
  uint64_t v1 = *(void *)(v0 + 536);
  swift_release();
  *(void *)(v0 + 336) = v1;
  uint64_t v2 = *(unsigned int (**)(uint64_t, uint64_t))(v0 + 496);
  uint64_t v3 = *(void *)(v0 + 440);
  uint64_t v4 = *(void *)(v0 + 424);
  SiriKitEvent.payload.getter();
  uint64_t v5 = &unk_1EB9D6000;
  if (v2(v3, v4) == *MEMORY[0x1E4FA1930])
  {
    uint64_t v6 = *(_DWORD *)(v0 + 564);
    uint64_t v7 = *(_DWORD *)(v0 + 560);
    uint64_t v8 = *(void *)(v0 + 488);
    (*(void (**)(void, void))(*(void *)(v0 + 432) + 96))(*(void *)(v0 + 440), *(void *)(v0 + 424));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = *(void *)(v0 + 336);
    if (v7 != v6 && (v8 & 0x1FFFFFFFFLL) != 1 && *(unsigned char *)(v9 + 33)) {
      goto LABEL_14;
    }
  }
  else
  {
    BOOL v10 = *(_DWORD *)(v0 + 564);
    uint64_t v11 = *(_DWORD *)(v0 + 560);
    uint64_t v12 = *(void *)(v0 + 488);
    (*(void (**)(void, void))(v0 + 512))(*(void *)(v0 + 440), *(void *)(v0 + 424));
    if (v11 != v10 && (v12 & 0x1FFFFFFFFLL) != 1) {
      goto LABEL_14;
    }
    uint64_t v9 = *(void *)(v0 + 336);
  }
  uint64_t v13 = *(void *)(v0 + 400);
  uint64_t v14 = type metadata accessor for TaskLoggingEventSink.SiriKitEventMetricsState();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v13;
  *(void *)(v15 + 24) = v9;
  *(void *)(v0 + 40) = v14;
  *(void *)(v0 + 48) = lazy protocol witness table accessor for type SiriKitEvent and conformance SiriKitEvent(&lazy protocol witness table cache variable for type TaskLoggingEventSink.SiriKitEventMetricsState and conformance TaskLoggingEventSink.SiriKitEventMetricsState, (void (*)(uint64_t))type metadata accessor for TaskLoggingEventSink.SiriKitEventMetricsState);
  *(void *)(v0 + 16) = v15;
  swift_retain();
  swift_retain();
  static Metrics.setMetricsState(_:)();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.instrumentation);
  uint64_t v17 = Logger.logObject.getter();
  uint64_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v79 = v20;
    *(_DWORD *)uint64_t v19 = 136315138;
    swift_beginAccess();
    uint64_t v21 = *(void *)(v0 + 336);
    uint64_t v22 = *(void *)(v21 + 16);
    uint64_t v23 = *(void *)(v21 + 24);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v5 = &unk_1EB9D6000;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v17, v18, "TaskLoggingEventSink - Metrics.current has been updated for taskId: %s", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v20, -1, -1);
    MEMORY[0x1BA9E48C0](v19, -1, -1);
  }

LABEL_14:
  uint64_t v24 = SiriKitEvent.flowStateType.getter();
  if ((v24 & 0x100000000) != 0)
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.instrumentation);
    swift_retain_n();
    swift_retain_n();
    uint64_t v34 = Logger.logObject.getter();
    uint64_t v35 = static os_log_type_t.debug.getter();
    uint64_t v36 = os_log_type_enabled(v34, v35);
    uint64_t v37 = *(void *)(v0 + 480);
    if (v36)
    {
      typea = v35;
      uint64_t v38 = swift_slowAlloc();
      uint64_t v75 = swift_slowAlloc();
      uint64_t v79 = v75;
      *(_DWORD *)uint64_t v38 = 136315650;
      *(void *)(v0 + 296) = v37;
      type metadata accessor for SiriKitEvent();
      lazy protocol witness table accessor for type SiriKitEvent and conformance SiriKitEvent(&lazy protocol witness table cache variable for type SiriKitEvent and conformance SiriKitEvent, MEMORY[0x1E4FA1A68]);
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v38 + 12) = 2080;
      swift_retain();
      uint64_t v41 = SiriKitEventContext.description.getter();
      uint64_t v43 = v42;
      swift_release();
      *(void *)(v0 + 248) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v43, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v38 + 22) = 2080;
      swift_beginAccess();
      swift_retain();
      uint64_t v44 = FlowTask.description.getter();
      uint64_t v46 = v45;
      swift_release();
      *(void *)(v0 + 232) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v34, typea, "TaskLoggingEventSink - Routing event: %s context: %s task: %s", (uint8_t *)v38, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v75, -1, -1);
      int v47 = v38;
      uint64_t v5 = (void *)&unk_1EB9D6000;
      MEMORY[0x1BA9E48C0](v47, -1, -1);
    }
    else
    {
      swift_release_n();
      swift_release_n();
    }
  }
  else
  {
    uint64_t v25 = v24;
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.instrumentation);
    swift_retain_n();
    swift_retain_n();
    uint64_t v27 = Logger.logObject.getter();
    uint64_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v78 = v28;
      uint64_t v29 = swift_slowAlloc();
      os_log_type_t type = swift_slowAlloc();
      uint64_t v79 = type;
      *(_DWORD *)uint64_t v29 = 136315906;
      if (v25 > 0xD0)
      {
        uint64_t v31 = @"FLOWSTATETYPE_UNKNOWN";
        uint64_t v32 = @"FLOWSTATETYPE_UNKNOWN";
      }
      else
      {
        uint64_t v30 = (int)v25;
        uint64_t v31 = off_1E61ED5A8[v30];
        uint64_t v32 = off_1E61EDC30[v30];
      }
      uint64_t v48 = v31;
      uint64_t v49 = *(void *)(v0 + 480);
      id v50 = v32;
      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v53 = v52;

      *(void *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v53, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 12) = 2080;
      *(void *)(v0 + 208) = v49;
      type metadata accessor for SiriKitEvent();
      lazy protocol witness table accessor for type SiriKitEvent and conformance SiriKitEvent(&lazy protocol witness table cache variable for type SiriKitEvent and conformance SiriKitEvent, MEMORY[0x1E4FA1A68]);
      uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 216) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v29 + 22) = 2080;
      swift_retain();
      uint64_t v56 = SiriKitEventContext.description.getter();
      id v58 = v57;
      swift_release();
      *(void *)(v0 + 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v58, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v29 + 32) = 2080;
      swift_beginAccess();
      swift_retain();
      uint64_t v59 = FlowTask.description.getter();
      uint64_t v61 = v60;
      swift_release();
      *(void *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v61, &v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v27, v78, "TaskLoggingEventSink - Routing task step: %s for event: %s context: %s task: %s", (uint8_t *)v29, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](type, -1, -1);
      MEMORY[0x1BA9E48C0](v29, -1, -1);

      uint64_t v5 = &unk_1EB9D6000;
    }
    else
    {
      swift_release_n();
      swift_release_n();
    }
  }
  os_log_type_t v62 = *(unsigned __int8 *)(v0 + 568);
  uint64_t v63 = *(void *)(v0 + 480);
  uint64_t v64 = *(void **)(v0 + 400);
  swift_beginAccess();
  uint64_t v65 = *(void *)(v0 + 336);
  swift_retain();
  TaskLoggingEventSink.route(_:_:_:)(v63, v64, v65);
  swift_release();
  if (v62 == 1)
  {
    if (v5[280] != -1) {
      swift_once();
    }
    os_log_type_t v66 = type metadata accessor for Logger();
    __swift_project_value_buffer(v66, (uint64_t)static Logger.instrumentation);
    uint64_t v67 = Logger.logObject.getter();
    uint64_t v68 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v69 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v69 = 0;
      _os_log_impl(&dword_1B9C64000, v67, v68, "TaskLoggingEventSink - updating task state to .ended because isLastTaskStep!", v69, 2u);
      MEMORY[0x1BA9E48C0](v69, -1, -1);
    }
    uint64_t v70 = *(void *)(v0 + 400);

    *(void *)(v0 + 544) = *(void *)(v70 + 72);
    *(void *)(v0 + 552) = *(void *)(v0 + 336);
    int v71 = one-time initialization token for shared;
    swift_retain();
    if (v71 != -1) {
      swift_once();
    }
    uint64_t v72 = static ConversationActor.shared;
    return MEMORY[0x1F4188298](TaskLoggingEventSink.receiveAsync(_:_:_:), v72, 0);
  }
  else
  {
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v73 = *(uint64_t (**)(void))(v0 + 8);
    return v73();
  }
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(v0 + 536) = TaskService.update(task:state:)(*(void *)(v0 + 528), 1);
  swift_release();
  return MEMORY[0x1F4188298](TaskLoggingEventSink.receiveAsync(_:_:_:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  __CFString *v8;
  __CFString *v9;
  __CFString *v10;
  uint64_t v11;
  __CFString *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t);
  int v53;
  _DWORD *v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  char v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)();
  unsigned int (*v80)(uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  void *v83;
  int v84;
  int v85;
  uint64_t v86;
  Class isa;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unsigned __int8 *v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  uint64_t v107;
  uint64_t v108;
  __CFString *v109;
  __CFString *v110;
  uint64_t v111;
  os_log_type_t v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __CFString *v126;
  uint64_t v127;
  __CFString *v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  int v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  uint64_t v144;
  NSObject *v145;
  os_log_type_t v146;
  uint8_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t (*v150)(void);
  uint64_t v152;
  os_log_type_t v153;
  uint64_t v154;
  os_log_type_t type;
  uint64_t v156;
  os_log_type_t v157;
  os_log_type_t v158;
  uint64_t v159;
  uint64_t v160;
  os_log_t log;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;

  uint64_t v163 = v0;
  uint64_t v1 = SiriKitEvent.flowStateType.getter();
  if ((v1 & 0x100000000) == 0)
  {
    uint64_t v2 = v1;
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.instrumentation);
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    uint64_t v4 = Logger.logObject.getter();
    uint64_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v156 = swift_slowAlloc();
      char v162 = v156;
      *(_DWORD *)uint64_t v6 = 136315906;
      uint64_t v158 = v5;
      if (v2 > 0xD0)
      {
        uint64_t v8 = @"FLOWSTATETYPE_UNKNOWN";
        uint64_t v9 = @"FLOWSTATETYPE_UNKNOWN";
      }
      else
      {
        uint64_t v7 = (int)v2;
        uint64_t v8 = off_1E61EBB88[v7];
        uint64_t v9 = off_1E61EC210[v7];
      }
      BOOL v10 = v8;
      uint64_t v11 = *(void *)(v0 + 392);
      uint64_t v12 = v9;
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;

      *(void *)(v0 + 352) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 2080;
      *(void *)(v0 + 360) = v11;
      type metadata accessor for SiriKitEvent();
      lazy protocol witness table accessor for type SiriKitEvent and conformance SiriKitEvent(&lazy protocol witness table cache variable for type SiriKitEvent and conformance SiriKitEvent, MEMORY[0x1E4FA1A68]);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 368) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v6 + 22) = 2080;
      swift_retain();
      uint64_t v18 = SiriKitEventContext.description.getter();
      uint64_t v20 = v19;
      swift_release();
      *(void *)(v0 + 376) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v6 + 32) = 2080;
      swift_retain();
      uint64_t v21 = FlowTask.description.getter();
      uint64_t v23 = v22;
      swift_release();
      *(void *)(v0 + 384) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v23, &v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v4, v158, "TaskLoggingEventSink - receiveAsync source event with task step: %s for event: %s context: %s task: %s", (uint8_t *)v6, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v156, -1, -1);
      MEMORY[0x1BA9E48C0](v6, -1, -1);
    }
    else
    {
      swift_release_n();
      swift_release_n();
      swift_release_n();
    }
  }
  uint64_t v24 = *(void *)(v0 + 408);
  uint64_t v25 = *(void *)(v0 + 392);
  *(void *)(v0 + 336) = v24;
  swift_retain();
  uint64_t v26 = specialized static TaskLoggingEventSink.translateStartEvent(_:_:)(v25, v24);
  *(void *)(v0 + 480) = v26;
  uint64_t v27 = SiriKitEvent.flowStateType.getter();
  *(void *)(v0 + 488) = v27;
  uint64_t v28 = v27 & 0x1FFFFFFFFLL;
  if ((v27 & 0x1FFFFFFFFLL) == 1)
  {
    if (*(unsigned char *)(*(void *)(v0 + 408) + 32) && *(unsigned char *)(*(void *)(v0 + 408) + 32) == 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    uint64_t v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v29)
    {
LABEL_15:
      uint64_t v31 = *(void *)(v0 + 464);
      uint64_t v30 = *(uint64_t **)(v0 + 472);
      uint64_t v32 = *(void *)(v0 + 456);
      type metadata accessor for CoreAnalyticsService();
      static CoreAnalyticsService.instance.getter();
      const char *v30 = v26;
      (*(void (**)(uint64_t *, void, uint64_t))(v31 + 104))(v30, *MEMORY[0x1E4FA1A20], v32);
      swift_retain();
      CoreAnalyticsService.sendReliabilityEvent(event:file:line:function:)();
      swift_release();
      (*(void (**)(uint64_t *, uint64_t))(v31 + 8))(v30, v32);
      if (one-time initialization token for instrumentation != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      __swift_project_value_buffer(v33, (uint64_t)static Logger.instrumentation);
      swift_retain_n();
      swift_retain_n();
      uint64_t v34 = Logger.logObject.getter();
      uint64_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = swift_slowAlloc();
        uint64_t v159 = swift_slowAlloc();
        char v162 = v159;
        *(_DWORD *)uint64_t v36 = 136315650;
        os_log_type_t type = v35;
        *(void *)(v0 + 312) = v26;
        type metadata accessor for SiriKitEvent();
        lazy protocol witness table accessor for type SiriKitEvent and conformance SiriKitEvent(&lazy protocol witness table cache variable for type SiriKitEvent and conformance SiriKitEvent, MEMORY[0x1E4FA1A68]);
        uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v162);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_WORD *)(v36 + 12) = 2080;
        swift_retain();
        uint64_t v39 = SiriKitEventContext.description.getter();
        uint64_t v41 = v40;
        swift_release();
        *(void *)(v0 + 328) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, &v162);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_WORD *)(v36 + 22) = 2080;
        swift_beginAccess();
        swift_retain();
        uint64_t v42 = FlowTask.description.getter();
        uint64_t v44 = v43;
        swift_release();
        *(void *)(v0 + 344) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, &v162);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v34, type, "TaskLoggingEventSink - Task already started, ignoring first step event: %s context: %s task: %s", (uint8_t *)v36, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v159, -1, -1);
        uint64_t v45 = v36;
LABEL_35:
        MEMORY[0x1BA9E48C0](v45, -1, -1);

        swift_release();
        goto LABEL_85;
      }
      goto LABEL_28;
    }
  }
  uint64_t v46 = SiriKitEvent.flowStateType.getter();
  log = (os_log_t)(v0 + 336);
  if ((v46 & 0x100000000) != 0
    || ((int v47 = 1, v46 > 5) || ((1 << v46) & 0x34) == 0) && v46 != 128)
  {
    int v47 = 0;
  }
  *(unsigned char *)(v0 + 568) = v47;
  uint64_t v48 = *(void *)(v0 + 448);
  uint64_t v49 = *(void *)(v0 + 424);
  id v50 = *(void *)(v0 + 432);
  uint64_t v51 = SiriKitEvent.flowStateType.getter();
  SiriKitEvent.payload.getter();
  uint64_t v52 = *(uint64_t (**)(uint64_t, uint64_t))(v50 + 88);
  *(void *)(v0 + 496) = v52;
  *(void *)(v0 + 504) = (v50 + 88) & 0xFFFFFFFFFFFFLL | 0xA3B5000000000000;
  uint64_t v53 = v52(v48, v49);
  uint64_t v54 = (_DWORD *)MEMORY[0x1E4FA1998];
  *(_DWORD *)(v0 + 560) = v53;
  *(_DWORD *)(v0 + 564) = *v54;
  int v55 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
  *(void *)(v0 + 512) = v55;
  v55(v48, v49);
  if (v47)
  {
    uint64_t v56 = v51 & 0x1FFFFFFFFLL;
    if (*((unsigned char *)log->isa + 32) && *((unsigned char *)log->isa + 32) != 1)
    {
      swift_bridgeObjectRelease();
      if (v56 != 4) {
        goto LABEL_31;
      }
    }
    else
    {
      id v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v57 & 1) != 0 && v56 != 4)
      {
LABEL_31:
        uint64_t v59 = *(void *)(v0 + 464);
        id v58 = *(uint64_t **)(v0 + 472);
        uint64_t v60 = *(void *)(v0 + 456);
        type metadata accessor for CoreAnalyticsService();
        static CoreAnalyticsService.instance.getter();
        *id v58 = v26;
        (*(void (**)(uint64_t *, void, uint64_t))(v59 + 104))(v58, *MEMORY[0x1E4FA1A20], v60);
        swift_retain();
        CoreAnalyticsService.sendReliabilityEvent(event:file:line:function:)();
        swift_release();
        (*(void (**)(uint64_t *, uint64_t))(v59 + 8))(v58, v60);
        if (one-time initialization token for instrumentation != -1) {
          swift_once();
        }
        uint64_t v61 = type metadata accessor for Logger();
        __swift_project_value_buffer(v61, (uint64_t)static Logger.instrumentation);
        swift_retain_n();
        swift_retain_n();
        uint64_t v34 = Logger.logObject.getter();
        os_log_type_t v62 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v34, v62))
        {
          uint64_t v63 = swift_slowAlloc();
          uint64_t v160 = swift_slowAlloc();
          char v162 = v160;
          *(_DWORD *)uint64_t v63 = 136315650;
          uint64_t v153 = v62;
          *(void *)(v0 + 272) = v26;
          type metadata accessor for SiriKitEvent();
          lazy protocol witness table accessor for type SiriKitEvent and conformance SiriKitEvent(&lazy protocol witness table cache variable for type SiriKitEvent and conformance SiriKitEvent, MEMORY[0x1E4FA1A68]);
          uint64_t v64 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v0 + 280) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, &v162);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_release_n();
          *(_WORD *)(v63 + 12) = 2080;
          swift_retain();
          os_log_type_t v66 = SiriKitEventContext.description.getter();
          uint64_t v68 = v67;
          swift_release();
          *(void *)(v0 + 288) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v68, &v162);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_release_n();
          *(_WORD *)(v63 + 22) = 2080;
          swift_beginAccess();
          swift_retain();
          uint64_t v69 = FlowTask.description.getter();
          int v71 = v70;
          swift_release();
          *(void *)(v0 + 304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v71, &v162);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v34, v153, "TaskLoggingEventSink - Task already ended, ignoring last step event: %s context: %s task: %s", (uint8_t *)v63, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v160, -1, -1);
          uint64_t v45 = v63;
          goto LABEL_35;
        }
LABEL_28:
        swift_release_n();
        swift_release_n();

LABEL_85:
        swift_release();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v150 = *(uint64_t (**)(void))(v0 + 8);
        return v150();
      }
    }
  }
  if (v28 == 1)
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v72 = type metadata accessor for Logger();
    __swift_project_value_buffer(v72, (uint64_t)static Logger.instrumentation);
    id v73 = Logger.logObject.getter();
    id v74 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v75 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v75 = 0;
      _os_log_impl(&dword_1B9C64000, v73, v74, "TaskLoggingEventSink - updating task state to .ongoing because isFirstTaskStep!", v75, 2u);
      MEMORY[0x1BA9E48C0](v75, -1, -1);
    }
    uint64_t v76 = *(void *)(v0 + 400);

    *(void *)(v0 + 520) = *(void *)(v76 + 72);
    *(void *)(v0 + 528) = *(void *)(v0 + 336);
    os_log_type_t v77 = one-time initialization token for shared;
    swift_retain();
    if (v77 != -1) {
      swift_once();
    }
    uint64_t v78 = static ConversationActor.shared;
    uint64_t v79 = TaskLoggingEventSink.receiveAsync(_:_:_:);
    goto LABEL_81;
  }
  uint64_t v80 = *(unsigned int (**)(uint64_t, uint64_t))(v0 + 496);
  uint64_t v81 = *(void *)(v0 + 440);
  int v82 = *(void *)(v0 + 424);
  SiriKitEvent.payload.getter();
  uint64_t v83 = &unk_1EB9D6000;
  if (v80(v81, v82) == *MEMORY[0x1E4FA1930])
  {
    uint64_t v84 = *(_DWORD *)(v0 + 564);
    unint64_t v85 = *(_DWORD *)(v0 + 560);
    os_log_type_t v86 = *(void *)(v0 + 488);
    (*(void (**)(void, void))(*(void *)(v0 + 432) + 96))(*(void *)(v0 + 440), *(void *)(v0 + 424));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Class isa = *(Class *)(v0 + 336);
    if (v85 != v84 && (v86 & 0x1FFFFFFFFLL) != 1 && *((unsigned char *)isa + 33)) {
      goto LABEL_58;
    }
  }
  else
  {
    uint64_t v88 = *(_DWORD *)(v0 + 564);
    uint64_t v89 = *(_DWORD *)(v0 + 560);
    os_log_type_t v90 = *(void *)(v0 + 488);
    (*(void (**)(void, void))(v0 + 512))(*(void *)(v0 + 440), *(void *)(v0 + 424));
    if (v89 != v88 && (v90 & 0x1FFFFFFFFLL) != 1) {
      goto LABEL_58;
    }
    Class isa = log->isa;
  }
  uint64_t v91 = *(void *)(v0 + 400);
  uint64_t v92 = type metadata accessor for TaskLoggingEventSink.SiriKitEventMetricsState();
  uint64_t v93 = swift_allocObject();
  *(void *)(v93 + 16) = v91;
  *(void *)(v93 + 24) = isa;
  *(void *)(v0 + 40) = v92;
  *(void *)(v0 + 48) = lazy protocol witness table accessor for type SiriKitEvent and conformance SiriKitEvent(&lazy protocol witness table cache variable for type TaskLoggingEventSink.SiriKitEventMetricsState and conformance TaskLoggingEventSink.SiriKitEventMetricsState, (void (*)(uint64_t))type metadata accessor for TaskLoggingEventSink.SiriKitEventMetricsState);
  *(void *)(v0 + 16) = v93;
  swift_retain();
  swift_retain();
  static Metrics.setMetricsState(_:)();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  unint64_t v94 = type metadata accessor for Logger();
  __swift_project_value_buffer(v94, (uint64_t)static Logger.instrumentation);
  unint64_t v95 = Logger.logObject.getter();
  uint64_t v96 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v95, v96))
  {
    os_log_type_t v97 = (uint8_t *)swift_slowAlloc();
    uint64_t v98 = swift_slowAlloc();
    char v162 = v98;
    *(_DWORD *)os_log_type_t v97 = 136315138;
    swift_beginAccess();
    int v99 = *((void *)log->isa + 2);
    uint64_t v100 = *((void *)log->isa + 3);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, &v162);
    uint64_t v83 = &unk_1EB9D6000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v95, v96, "TaskLoggingEventSink - Metrics.current has been updated for taskId: %s", v97, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v98, -1, -1);
    MEMORY[0x1BA9E48C0](v97, -1, -1);
  }

LABEL_58:
  id v101 = (unsigned __int8 *)(v0 + 568);
  uint64_t v102 = SiriKitEvent.flowStateType.getter();
  if ((v102 & 0x100000000) == 0)
  {
    uint64_t v103 = v102;
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    char v104 = type metadata accessor for Logger();
    __swift_project_value_buffer(v104, (uint64_t)static Logger.instrumentation);
    swift_retain_n();
    swift_retain_n();
    unint64_t v105 = Logger.logObject.getter();
    unint64_t v106 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v105, v106))
    {
      char v157 = v106;
      uint64_t v107 = swift_slowAlloc();
      uint64_t v154 = swift_slowAlloc();
      char v162 = v154;
      *(_DWORD *)uint64_t v107 = 136315906;
      if (v103 > 0xD0)
      {
        id v109 = @"FLOWSTATETYPE_UNKNOWN";
        uint64_t v110 = @"FLOWSTATETYPE_UNKNOWN";
      }
      else
      {
        unint64_t v108 = (int)v103;
        id v109 = off_1E61EC898[v108];
        uint64_t v110 = off_1E61ECF20[v108];
      }
      unint64_t v126 = v109;
      unint64_t v127 = *(void *)(v0 + 480);
      uint64_t v128 = v110;
      unint64_t v129 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v131 = v130;

      *(void *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v129, v131, &v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v107 + 12) = 2080;
      *(void *)(v0 + 208) = v127;
      type metadata accessor for SiriKitEvent();
      lazy protocol witness table accessor for type SiriKitEvent and conformance SiriKitEvent(&lazy protocol witness table cache variable for type SiriKitEvent and conformance SiriKitEvent, MEMORY[0x1E4FA1A68]);
      uint64_t v132 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 216) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v132, v133, &v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v107 + 22) = 2080;
      swift_retain();
      uint64_t v134 = SiriKitEventContext.description.getter();
      char v136 = v135;
      swift_release();
      *(void *)(v0 + 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v134, v136, &v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v107 + 32) = 2080;
      swift_beginAccess();
      swift_retain();
      os_log_type_t v137 = FlowTask.description.getter();
      uint64_t v139 = v138;
      swift_release();
      *(void *)(v0 + 240) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v137, v139, &v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v105, v157, "TaskLoggingEventSink - Routing task step: %s for event: %s context: %s task: %s", (uint8_t *)v107, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v154, -1, -1);
      MEMORY[0x1BA9E48C0](v107, -1, -1);

      uint64_t v83 = &unk_1EB9D6000;
      id v101 = (unsigned __int8 *)(v0 + 568);
      goto LABEL_73;
    }
    goto LABEL_69;
  }
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v111 = type metadata accessor for Logger();
  __swift_project_value_buffer(v111, (uint64_t)static Logger.instrumentation);
  swift_retain_n();
  swift_retain_n();
  unint64_t v105 = Logger.logObject.getter();
  os_log_type_t v112 = static os_log_type_t.debug.getter();
  BOOL v113 = os_log_type_enabled(v105, v112);
  uint64_t v114 = *(void *)(v0 + 480);
  if (!v113)
  {
LABEL_69:
    swift_release_n();
    swift_release_n();
    goto LABEL_70;
  }
  uint64_t v115 = swift_slowAlloc();
  uint64_t v152 = swift_slowAlloc();
  char v162 = v152;
  *(_DWORD *)uint64_t v115 = 136315650;
  *(void *)(v0 + 296) = v114;
  type metadata accessor for SiriKitEvent();
  lazy protocol witness table accessor for type SiriKitEvent and conformance SiriKitEvent(&lazy protocol witness table cache variable for type SiriKitEvent and conformance SiriKitEvent, MEMORY[0x1E4FA1A68]);
  uint64_t v116 = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v0 + 256) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v116, v117, &v162);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_WORD *)(v115 + 12) = 2080;
  swift_retain();
  uint64_t v118 = SiriKitEventContext.description.getter();
  uint64_t v120 = v119;
  swift_release();
  *(void *)(v0 + 248) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, v120, &v162);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  swift_release_n();
  *(_WORD *)(v115 + 22) = 2080;
  swift_beginAccess();
  swift_retain();
  uint64_t v121 = FlowTask.description.getter();
  uint64_t v123 = v122;
  swift_release();
  uint64_t v124 = v121;
  uint64_t v83 = (void *)&unk_1EB9D6000;
  *(void *)(v0 + 232) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v124, v123, &v162);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  _os_log_impl(&dword_1B9C64000, v105, v112, "TaskLoggingEventSink - Routing event: %s context: %s task: %s", (uint8_t *)v115, 0x20u);
  swift_arrayDestroy();
  MEMORY[0x1BA9E48C0](v152, -1, -1);
  uint64_t v125 = v115;
  id v101 = (unsigned __int8 *)(v0 + 568);
  MEMORY[0x1BA9E48C0](v125, -1, -1);
LABEL_70:

LABEL_73:
  uint64_t v140 = *v101;
  uint64_t v141 = *(void *)(v0 + 480);
  unint64_t v142 = *(void **)(v0 + 400);
  swift_beginAccess();
  Swift::String v143 = *(void *)(v0 + 336);
  swift_retain();
  TaskLoggingEventSink.route(_:_:_:)(v141, v142, v143);
  swift_release();
  if (v140 != 1)
  {
    swift_release();
    goto LABEL_85;
  }
  if (v83[280] != -1) {
    swift_once();
  }
  Swift::String v144 = type metadata accessor for Logger();
  __swift_project_value_buffer(v144, (uint64_t)static Logger.instrumentation);
  uint64_t v145 = Logger.logObject.getter();
  uint64_t v146 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v145, v146))
  {
    uint64_t v147 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v147 = 0;
    _os_log_impl(&dword_1B9C64000, v145, v146, "TaskLoggingEventSink - updating task state to .ended because isLastTaskStep!", v147, 2u);
    MEMORY[0x1BA9E48C0](v147, -1, -1);
  }
  Swift::String v148 = *(void *)(v0 + 400);

  *(void *)(v0 + 544) = *(void *)(v148 + 72);
  *(void *)(v0 + 552) = *(void *)(v0 + 336);
  long long v149 = one-time initialization token for shared;
  swift_retain();
  if (v149 != -1) {
    swift_once();
  }
  uint64_t v78 = static ConversationActor.shared;
  uint64_t v79 = TaskLoggingEventSink.receiveAsync(_:_:_:);
LABEL_81:
  return MEMORY[0x1F4188298](v79, v78, 0);
}

uint64_t TaskLoggingEventSink.receiveAsync(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[51] = a3;
  v4[52] = v3;
  v4[49] = a1;
  v4[50] = a2;
  uint64_t v5 = type metadata accessor for SiriKitEventPayload();
  v4[53] = v5;
  v4[54] = *(void *)(v5 - 8);
  v4[55] = swift_task_alloc();
  v4[56] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SiriKitReliabilityEvent();
  v4[57] = v6;
  v4[58] = *(void *)(v6 - 8);
  v4[59] = swift_task_alloc();
  return MEMORY[0x1F4188298](TaskLoggingEventSink.receiveAsync(_:_:_:), 0, 0);
}

uint64_t specialized static TaskLoggingEventSink.translateStartEvent(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SiriKitEventPayload();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v11 = (char *)&v57 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (uint64_t *)((char *)&v57 - v12);
  SiriKitEvent.payload.getter();
  int v14 = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 88))(v13, v4);
  if (v14 == *MEMORY[0x1E4FA1930])
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 96))(v13, v4);
    uint64_t v16 = *v13;
    unint64_t v15 = v13[1];
    swift_bridgeObjectRelease();
    if (*(unsigned char *)(a2 + 33) == 1)
    {
      uint64_t v17 = *MEMORY[0x1E4FA1B18];
      uint64_t v18 = type metadata accessor for ActivityType();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 104))(v11, v17, v18);
      uint64_t v65 = v16;
      unint64_t v66 = v15;
      uint64_t v63 = 0x203A746365726944;
      unint64_t v64 = 0xE800000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      if (StringProtocol.contains<A>(_:)())
      {
        uint64_t v19 = 0x6465737261706E55;
        unint64_t v20 = 0xEE00746E65746E49;
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v19 = v16;
        unint64_t v20 = v15;
      }
      uint64_t v40 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, intentTypeName: String, app: App?, attribute: String?, chosenItem: Any?, disambiguationItems: [Any]?, domainContext: FLOWSchemaFLOWDomainContext?, flowActivity: FlowActivity?, parameterName: String?, responseId: String?, statusDescription: String?, statusReason: SiriKitReliabilityCodes?));
      uint64_t v41 = (uint64_t *)&v11[v40[12]];
      uint64_t v42 = v40[16];
      uint64_t v43 = &v11[v40[20]];
      uint64_t v44 = &v11[v40[24]];
      uint64_t v45 = v40[28];
      uint64_t v46 = v40[32];
      int v47 = &v11[v40[36]];
      uint64_t v48 = &v11[v40[40]];
      uint64_t v49 = &v11[v40[44]];
      uint64_t v50 = v40[48];
      uint64_t v51 = v40[52];
      *uint64_t v41 = v19;
      v41[1] = v20;
      *(void *)&v11[v42] = 0;
      uint64_t v52 = &v11[v51];
      *(void *)uint64_t v43 = v16;
      *((void *)v43 + 1) = v15;
      *(_OWORD *)uint64_t v44 = 0u;
      *((_OWORD *)v44 + 1) = 0u;
      *(void *)&v11[v45] = 0;
      *(void *)&v11[v46] = 0;
      *((void *)v47 + 4) = 0;
      *(_OWORD *)int v47 = 0u;
      *((_OWORD *)v47 + 1) = 0u;
      *(void *)uint64_t v48 = 0;
      *((void *)v48 + 1) = 0;
      *(void *)uint64_t v49 = 0;
      *((void *)v49 + 1) = 0;
      *(_OWORD *)&v11[v50] = xmmword_1BA05DB90;
      uint64_t v53 = *MEMORY[0x1E4FA19F0];
      uint64_t v54 = type metadata accessor for SiriKitReliabilityCodes();
      uint64_t v55 = *(void *)(v54 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v55 + 104))(v52, v53, v54);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
      (*(void (**)(char *, void, uint64_t))(v5 + 104))(v11, *MEMORY[0x1E4FA18F8], v4);
      a1 = SiriKitEvent.withPayload(_:)();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    }
    else
    {
      swift_retain();
      swift_bridgeObjectRelease();
    }
  }
  else if (v14 == *MEMORY[0x1E4FA1980])
  {
    (*(void (**)(uint64_t *, uint64_t))(v5 + 96))(v13, v4);
    swift_bridgeObjectRelease();
    uint64_t v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, intentTypeName: String, app: App?, attribute: String?, chosenItem: Any?, disambiguationItems: [Any]?, domainContext: FLOWSchemaFLOWDomainContext?, flowActivity: FlowActivity?, parameterName: String?, responseId: String?, statusDescription: String?, statusReason: SiriKitReliabilityCodes?));
    uint64_t v22 = &v8[v21[12]];
    uint64_t v23 = v21[16];
    uint64_t v24 = &v8[v21[20]];
    uint64_t v25 = v21[24];
    uint64_t v62 = a1;
    uint64_t v26 = &v8[v25];
    uint64_t v27 = v21[28];
    uint64_t v59 = v21[32];
    uint64_t v60 = v27;
    uint64_t v28 = &v8[v21[36]];
    uint64_t v29 = &v8[v21[40]];
    uint64_t v30 = &v8[v21[44]];
    uint64_t v31 = &v8[v21[48]];
    uint64_t v57 = v23;
    id v58 = v31;
    uint64_t v61 = &v8[v21[52]];
    uint64_t v32 = *MEMORY[0x1E4FA1B18];
    uint64_t v33 = type metadata accessor for ActivityType();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 104))(v8, v32, v33);
    strcpy(v22, "UnparsedIntent");
    v22[15] = -18;
    *(void *)&v8[v57] = 0;
    *(void *)uint64_t v24 = 0;
    *((void *)v24 + 1) = 0;
    *(_OWORD *)uint64_t v26 = 0u;
    *((_OWORD *)v26 + 1) = 0u;
    *(void *)&v8[v60] = 0;
    *(void *)&v8[v59] = 0;
    *((void *)v28 + 4) = 0;
    *(_OWORD *)uint64_t v28 = 0u;
    *((_OWORD *)v28 + 1) = 0u;
    *(void *)uint64_t v29 = 0;
    *((void *)v29 + 1) = 0;
    *(void *)uint64_t v30 = 0;
    *((void *)v30 + 1) = 0;
    uint64_t v34 = v58;
    *(void *)id v58 = 0;
    *((void *)v34 + 1) = 0;
    uint64_t v35 = *MEMORY[0x1E4FA19D8];
    uint64_t v36 = type metadata accessor for SiriKitReliabilityCodes();
    uint64_t v37 = *(void *)(v36 - 8);
    uint64_t v38 = v61;
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 104))(v61, v35, v36);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v38, 0, 1, v36);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E4FA18F8], v4);
    a1 = SiriKitEvent.withPayload(_:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  else
  {
    uint64_t v39 = *(void (**)(uint64_t *, uint64_t))(v5 + 8);
    swift_retain();
    v39(v13, v4);
  }
  return a1;
}

uint64_t lazy protocol witness table accessor for type SiriKitEvent and conformance SiriKitEvent(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ConversationService.markBusy(doing:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 128);
  OS_dispatch_semaphore.wait()();
  closure #1 in JetsamHelper.ensureJetsamTransaction()(v2);
  OS_dispatch_semaphore.signal()();
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  uint64_t v3 = (void *)SiriEnvironment.currentProcess.getter();
  swift_release();
  uint64_t v4 = (void *)dispatch thunk of CurrentProcess.idleTracker.getter();

  if (v4)
  {
    uint64_t v5 = dispatch thunk of IdleTracker.track(name:)();
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(void *)(v1 + 136) = v5;

  return swift_release();
}

uint64_t closure #1 in JetsamHelper.ensureJetsamTransaction()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v67 = *(void *)(v2 - 8);
  uint64_t v68 = v2;
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  unint64_t v66 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v65 = (char *)&v52 - v5;
  uint64_t v64 = type metadata accessor for DispatchTime();
  uint64_t v6 = *(void *)(v64 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v64);
  uint64_t v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v63 = (char *)&v52 - v10;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v60 = *(void *)(v11 - 8);
  uint64_t v61 = (void (*)(char *, uint64_t))v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v59 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v57 = *(void *)(v13 - 8);
  uint64_t v58 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v56 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for OS_dispatch_source.TimerFlags();
  uint64_t v54 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55);
  uint64_t v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = (uint64_t *)(a1 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction);
  if (!*(void *)(a1 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction + 8))
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.executor);
    swift_retain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v69 = swift_slowAlloc();
      aBlock[0] = v69;
      *(_DWORD *)uint64_t v28 = 136315138;
      uint64_t v53 = (uint64_t)(v28 + 4);
      uint64_t v30 = *(void *)(a1 + 16);
      unint64_t v29 = *(void *)(a1 + 24);
      swift_bridgeObjectRetain();
      uint64_t v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v29, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v18, v27, "os_transaction(%s) begin", v28, 0xCu);
      uint64_t v31 = v69;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v31, -1, -1);
      uint64_t v25 = v28;
      goto LABEL_10;
    }
LABEL_11:

    swift_release();
    goto LABEL_12;
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
  swift_retain();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v18, v19)) {
    goto LABEL_11;
  }
  uint64_t v69 = v6;
  uint64_t v20 = swift_slowAlloc();
  uint64_t v53 = (uint64_t)v9;
  uint64_t v21 = (uint8_t *)v20;
  uint64_t v22 = swift_slowAlloc();
  aBlock[0] = v22;
  *(_DWORD *)uint64_t v21 = 136315138;
  uint64_t v23 = *(void *)(a1 + 16);
  unint64_t v24 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain();
  uint64_t v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  uint64_t v6 = v69;
  swift_bridgeObjectRelease();
  _os_log_impl(&dword_1B9C64000, v18, v19, "os_transaction(%s) bump", v21, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1BA9E48C0](v22, -1, -1);
  uint64_t v25 = v21;
  uint64_t v9 = (char *)v53;
LABEL_10:
  MEMORY[0x1BA9E48C0](v25, -1, -1);

LABEL_12:
  String.utf8CString.getter();
  uint64_t v53 = os_transaction_create();
  swift_release();
  type metadata accessor for OS_dispatch_source();
  aBlock[0] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags(&lazy protocol witness table cache variable for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags, MEMORY[0x1E4FBCC70]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
  lazy protocol witness table accessor for type [OS_dispatch_source.TimerFlags] and conformance [A](&lazy protocol witness table cache variable for type [OS_dispatch_source.TimerFlags] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_source.TimerFlags]);
  uint64_t v32 = v55;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v33 = static OS_dispatch_source.makeTimerSource(flags:queue:)();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v16, v32);
  uint64_t v52 = v33;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v35 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = (uint64_t)partial apply for closure #1 in closure #1 in JetsamHelper.ensureJetsamTransaction();
  aBlock[5] = v35;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_16;
  uint64_t v36 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v37 = v56;
  static DispatchQoS.unspecified.getter();
  uint64_t v38 = v59;
  uint64_t v55 = ObjectType;
  default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)();
  _Block_release(v36);
  (*(void (**)(char *, void))(v60 + 8))(v38, v61);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v37, v58);
  swift_release();
  swift_release();
  static DispatchTime.now()();
  uint64_t v39 = v63;
  DispatchTime.advanced(by:)();
  uint64_t v61 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v69 = v6 + 8;
  uint64_t v40 = v64;
  v61(v9, v64);
  uint64_t v42 = v67;
  uint64_t v41 = v68;
  uint64_t v43 = *(void (**)(char *, void, uint64_t))(v67 + 104);
  uint64_t v44 = v65;
  v43(v65, *MEMORY[0x1E4FBCAD0], v68);
  uint64_t v45 = v66;
  *(void *)unint64_t v66 = 0;
  v43(v45, *MEMORY[0x1E4FBCAA8], v41);
  uint64_t v46 = v52;
  MEMORY[0x1BA9E35D0](v39, v44, v45, v55);
  int v47 = *(void (**)(char *, uint64_t))(v42 + 8);
  v47(v45, v41);
  v47(v44, v41);
  v61(v39, v40);
  OS_dispatch_source.resume()();
  uint64_t v48 = v62;
  uint64_t v49 = *v62;
  uint64_t v50 = v62[1];
  *uint64_t v62 = v53;
  v48[1] = v46;
  return outlined consume of (transaction: OS_os_transaction?, timer: OS_dispatch_source_timer)?(v49, v50);
}

unint64_t type metadata accessor for OS_dispatch_source()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_source;
  if (!lazy cache variable for type metadata for OS_dispatch_source)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_source);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type OS_dispatch_source.TimerFlags and conformance OS_dispatch_source.TimerFlags(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [OS_dispatch_source.TimerFlags] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t default argument 1 of OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t outlined consume of (transaction: OS_os_transaction?, timer: OS_dispatch_source_timer)?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t protocol witness for DecisionMaking.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:turnData:bridge:) in conformance DecisionEngine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v7 + 16) = v15;
  *uint64_t v15 = v7;
  v15[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:turnData:bridge:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:turnData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[13] = a7;
  v8[14] = v7;
  v8[11] = a5;
  v8[12] = a6;
  v8[9] = a3;
  v8[10] = a4;
  v8[7] = a1;
  v8[8] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v8[15] = swift_task_alloc();
  v8[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UUID?);
  v8[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DecisionEngineResponse?);
  v8[18] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DecisionEngineResponse();
  v8[19] = v9;
  v8[20] = *(void *)(v9 - 8);
  v8[21] = swift_task_alloc();
  v8[22] = type metadata accessor for ConversationHelperInput(0);
  v8[23] = swift_task_alloc();
  v8[24] = type metadata accessor for RemoteConversationTurnData(0);
  v8[25] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v10 = static MessageBusActor.shared;
  v8[26] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:turnData:bridge:), v10, 0);
}

uint64_t DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:turnData:bridge:)()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 232) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v2 + 208);
  if (v0) {
    uint64_t v4 = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:turnData:bridge:);
  }
  else {
    uint64_t v4 = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:turnData:bridge:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 184);
  swift_release();
  outlined destroy of RemoteConversationTurnData(v1, type metadata accessor for ConversationHelperInput);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  uint64_t v27;

  uint64_t v1 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[18];
  uint64_t v4 = v0[7];
  swift_release();
  outlined init with copy of ReferenceResolutionClientProtocol?(v4, v3, &demangling cache variable for type metadata for DecisionEngineResponse?);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1);
  uint64_t v6 = v0[18];
  if (v5 == 1)
  {
    outlined destroy of RemoteConversationTurnData(v0[23], type metadata accessor for ConversationHelperInput);
    outlined destroy of ReferenceResolutionClientProtocol?(v6, &demangling cache variable for type metadata for DecisionEngineResponse?);
  }
  else
  {
    uint64_t v7 = (uint64_t *)v0[21];
    uint64_t v8 = (uint64_t *)v0[11];
    uint64_t v9 = v0[8];
    _s14SiriKitRuntime22DecisionEngineResponseVWObTm_0(v0[18], (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
    DecisionEngineCurareDonator.donateDecisionEngineResponse(decisionEngineResponse:requestId:rcId:)(v7, *v8, v8[1], *(void *)(v9 + 16), *(void *)(v9 + 24));
    type metadata accessor for ConversationSELFHelper();
    static ConversationSELFHelper.shared.getter();
    if (*v7) {
      swift_bridgeObjectRetain();
    }
    uint64_t v10 = v0[16];
    uint64_t v11 = v0[21] + *(int *)(v0[19] + 24);
    outlined init with copy of ReferenceResolutionClientProtocol?(v11, v10, &demangling cache variable for type metadata for Input?);
    uint64_t v12 = type metadata accessor for Input();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    uint64_t v15 = v14(v10, 1, v12);
    uint64_t v17 = v0[16];
    uint64_t v16 = v0[17];
    if (v15 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v0[16], &demangling cache variable for type metadata for Input?);
      uint64_t v18 = type metadata accessor for Siri_Nlu_External_UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v16, 1, 1, v18);
    }
    else
    {
      Input.parseHypothesisId.getter(v0[17]);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v17, v12);
    }
    os_log_type_t v19 = v0[15];
    outlined init with copy of ReferenceResolutionClientProtocol?(v11, v19, &demangling cache variable for type metadata for Input?);
    uint64_t v20 = v14(v19, 1, v12);
    uint64_t v21 = v0[15];
    if (v20 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v0[15], &demangling cache variable for type metadata for Input?);
    }
    else
    {
      Input.inputOrAlternativesInterpretableAsUniversalAction.getter();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v21, v12);
    }
    uint64_t v22 = v0[23];
    uint64_t v23 = v0[21];
    unint64_t v24 = v0[17];
    dispatch thunk of ConversationSELFHelper.emitDecisionEngineDecision(flowHandlerId:parseHypothesisId:isInterpretableAsUniversalAction:isExistingFlowSelected:)();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v24, &demangling cache variable for type metadata for Siri_Nlu_External_UUID?);
    outlined destroy of RemoteConversationTurnData(v23, (uint64_t (*)(void))type metadata accessor for DecisionEngineResponse);
    outlined destroy of RemoteConversationTurnData(v22, type metadata accessor for ConversationHelperInput);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  long long v31;
  uint64_t v32;
  uint64_t v33;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[11];
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  _s14SiriKitRuntime26RemoteConversationTurnDataVWOcTm_0(v2, v1, type metadata accessor for RemoteConversationTurnData);
  uint64_t v4 = Logger.logObject.getter();
  uint64_t v5 = static os_log_type_t.debug.getter();
  uint64_t v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[25];
  if (v6)
  {
    uint64_t v8 = v0[24];
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    uint64_t v33 = v10;
    uint64_t v11 = *(void **)(*(void *)(v7 + *(int *)(v8 + 28))
                   + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_conjunctionInfo);
    v0[5] = v11;
    uint64_t v12 = v11;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for RequestConjunctionInfo?);
    uint64_t v13 = String.init<A>(describing:)();
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RemoteConversationTurnData(v7, type metadata accessor for RemoteConversationTurnData);
    _os_log_impl(&dword_1B9C64000, v4, v5, "ConjunctionInfo: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v10, -1, -1);
    MEMORY[0x1BA9E48C0](v9, -1, -1);
  }
  else
  {
    outlined destroy of RemoteConversationTurnData(v0[25], type metadata accessor for RemoteConversationTurnData);
  }

  uint64_t v16 = (void *)v0[23];
  uint64_t v15 = v0[24];
  uint64_t v17 = v0[22];
  uint64_t v18 = v0[11];
  uint64_t v31 = *((_OWORD *)v0 + 6);
  os_log_type_t v19 = ConversationUserInput.asSpeechData.getter();
  _s14SiriKitRuntime26RemoteConversationTurnDataVWOcTm_0(v18, (uint64_t)v16 + *(int *)(v17 + 20), type metadata accessor for RemoteConversationTurnData);
  *uint64_t v16 = v19;
  *(_OWORD *)((char *)v16 + *(int *)(v17 + 24)) = v31;
  uint64_t v20 = (uint64_t *)(*(void *)(v18 + *(int *)(v15 + 28))
                  + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_inputOrigin);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  v0[27] = v21;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v23 = (void *)swift_task_alloc();
  v0[28] = v23;
  char *v23 = v0;
  v23[1] = DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:turnData:bridge:);
  unint64_t v24 = v0[23];
  uint64_t v25 = v0[12];
  uint64_t v26 = v0[9];
  os_log_type_t v27 = v0[10];
  uint64_t v28 = v0[7];
  unint64_t v29 = v0[8];
  return DecisionEngine.findBestConversationFor(conversationUserInput:activeConversations:recentlyCompletedCorrectableConversation:conversationHelperInput:inputOrigin:bridge:)(v28, v29, v26, v27, v24, v22, v21, v25);
}

uint64_t type metadata accessor for ConversationHelperInput(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, type metadata singleton initialization cache for ConversationHelperInput);
}

id ConversationUserInput.asSpeechData.getter()
{
  uint64_t v1 = v0;
  uint64_t v62 = type metadata accessor for ExecutionLocation();
  uint64_t v54 = *(void *)(v62 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v62);
  uint64_t v61 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v60 = (char *)&v45 - v4;
  uint64_t v5 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v49 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision.SiriXRoute();
  uint64_t v47 = *(void *)(v8 - 8);
  uint64_t v48 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v46 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLRoutingDecisionMessage.GenAIFallbackSuppressReason?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *((void *)v0 + 2);
  uint64_t v58 = *((void *)v0 + 3);
  uint64_t v59 = v16;
  uint64_t v17 = swift_bridgeObjectRetain();
  int v57 = MEMORY[0x1BA9E3F30](v17);
  uint64_t v18 = *(void **)&v0[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_userSpecificInfoForRecognizedUser];
  os_log_type_t v19 = *(void **)&v0[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_userSpecificInfoForUserMeetingSessionThreshold];
  uint64_t v20 = *(void *)&v0[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_utterance + 8];
  uint64_t v55 = *(void *)&v0[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_utterance];
  uint64_t v22 = (void *)*((void *)v0 + 6);
  uint64_t v21 = *((void *)v0 + 7);
  uint64_t v23 = *(void *)(v21 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_responseVariantResult);
  uint64_t v52 = *(void *)(v21 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_responseVariantResult + 8);
  uint64_t v53 = v23;
  swift_bridgeObjectRetain();
  uint64_t v56 = (uint64_t)v18;
  id v24 = v18;
  uint64_t v25 = (uint64_t)v19;
  id v26 = v19;
  uint64_t v50 = (uint64_t)v22;
  id v27 = v22;
  swift_bridgeObjectRetain();
  uint64_t v28 = NLResponse.requestLanguageVariant.getter();
  uint64_t v51 = v29;
  outlined init with copy of ReferenceResolutionClientProtocol?(v21 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlRoutingDecision, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v12, 1, v5) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
    uint64_t v30 = type metadata accessor for NLRoutingDecisionMessage.GenAIFallbackSuppressReason();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v15, 1, 1, v30);
  }
  else
  {
    uint64_t v45 = v28;
    uint64_t v31 = v49;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v49, v12, v5);
    if ((*(unsigned int (**)(char *, uint64_t))(v6 + 88))(v31, v5) == *MEMORY[0x1E4FA20D0])
    {
      (*(void (**)(char *, uint64_t))(v6 + 96))(v31, v5);
      uint64_t v32 = v46;
      uint64_t v33 = v47;
      uint64_t v34 = v31;
      uint64_t v35 = v48;
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v46, v34, v48);
      NLRoutingDecisionMessage.RoutingDecision.SiriXRoute.genAIFallbackSuppressReason.getter();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v32, v35);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
    }
    else
    {
      uint64_t v36 = *(void (**)(char *, uint64_t))(v6 + 8);
      uint64_t v48 = v20;
      v36(v31, v5);
      uint64_t v37 = type metadata accessor for NLRoutingDecisionMessage.GenAIFallbackSuppressReason();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v15, 1, 1, v37);
      uint64_t v20 = v48;
      v36(v12, v5);
    }
    uint64_t v28 = v45;
  }
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
  uint64_t v39 = (uint64_t)v60;
  uint64_t v40 = v62;
  v38(v60, &v1[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_asrLocation], v62);
  uint64_t v41 = &v1[OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_nlLocation];
  uint64_t v42 = (uint64_t)v61;
  v38(v61, v41, v40);
  id v43 = objc_allocWithZone((Class)type metadata accessor for RemoteConversationSpeechData());
  return RemoteConversationSpeechData.init(rcId:asrOnDevice:userSpecificInfoForRecognizedUser:userSpecificInfoForUserMeetingSessionThreshold:speechPackage:utterance:responseLanguageVariant:requestLanguageVariant:genAIFallbackSuppressReason:asrLocation:nlLocation:)(v59, v58, v57, v56, v25, v50, v55, v20, v53, v52, v28, v51, (uint64_t)v15, v39, v42);
}

uint64_t type metadata accessor for RemoteConversationSpeechData()
{
  uint64_t result = type metadata singleton initialization cache for RemoteConversationSpeechData;
  if (!type metadata singleton initialization cache for RemoteConversationSpeechData) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for AmbiguityServiceResponse(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for AmbiguityServiceResponse);
}

uint64_t type metadata accessor for UserInputResult()
{
  uint64_t result = type metadata singleton initialization cache for UserInputResult;
  if (!type metadata singleton initialization cache for UserInputResult) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t protocol witness for AmbiguityServiceProviding.createRankedInput(from:) in conformance AmbiguityService@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return AmbiguityService.createRankedInput(from:)(a1, a2);
}

uint64_t AmbiguityService.createRankedInput(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1F4188790](v4 - 8);
  Swift::String v189 = (char *)&v188 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v200 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  uint64_t v199 = *(void *)(v200 - 8);
  MEMORY[0x1F4188790](v200);
  uint64_t v198 = (char *)&v188 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NLRouterParse();
  uint64_t v194 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  char v192 = (char *)&v188 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v188 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v201 = (char *)&v188 - v13;
  uint64_t v208 = type metadata accessor for NLRouterParse.InputCandidate();
  uint64_t v207 = *(void *)(v208 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v208);
  id v204 = (char *)&v188 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v206 = (char **)((char *)&v188 - v16);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1F4188790](v17 - 8);
  v211 = (char *)&v188 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v188 = (char *)&v188 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v193 = (char *)&v188 - v22;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for USOParse?);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v203 = (uint64_t)&v188 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v191 = (char *)&v188 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)&v188 - v28;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v30 - 8);
  v238 = (char *)&v188 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  MEMORY[0x1F4188790](v32 - 8);
  uint64_t v34 = (char *)&v188 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v221 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
  uint64_t v222 = *(void *)(v221 - 8);
  uint64_t v35 = MEMORY[0x1F4188790](v221);
  uint64_t v202 = (char *)&v188 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v35);
  uint64_t v38 = (char *)&v188 - v37;
  uint64_t v241 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  uint64_t v220 = *(void *)(v241 - 8);
  uint64_t v39 = MEMORY[0x1F4188790](v241);
  uint64_t v237 = (char *)&v188 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v39);
  Swift::String v236 = (char *)&v188 - v41;
  uint64_t v240 = type metadata accessor for Siri_Nlu_External_Parser();
  uint64_t v219 = *(void *)(v240 - 8);
  MEMORY[0x1F4188790](v240);
  Swift::String v239 = (char *)&v188 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v249 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v226 = *(void *)(v249 - 8);
  uint64_t v43 = MEMORY[0x1F4188790](v249);
  uint64_t v218 = (char *)&v188 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  uint64_t v210 = (char *)&v188 - v46;
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v190 = (char *)&v188 - v48;
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  uint64_t v246 = (char *)&v188 - v50;
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  v247 = (char *)&v188 - v52;
  uint64_t v53 = MEMORY[0x1F4188790](v51);
  uint64_t v55 = (char *)&v188 - v54;
  uint64_t v56 = MEMORY[0x1F4188790](v53);
  unint64_t v234 = (char *)&v188 - v57;
  MEMORY[0x1F4188790](v56);
  unint64_t v235 = (char *)&v188 - v58;
  uint64_t v225 = type metadata accessor for Parse();
  uint64_t v59 = *(void *)(v225 - 8);
  uint64_t v60 = MEMORY[0x1F4188790](v225);
  uint64_t v215 = (char *)&v188 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v60);
  uint64_t v63 = (char **)((char *)&v188 - v62);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v216 = v38;
  uint64_t v205 = v29;
  uint64_t v195 = v12;
  uint64_t v196 = v7;
  uint64_t v64 = type metadata accessor for Logger();
  uint64_t v65 = __swift_project_value_buffer(v64, (uint64_t)static Logger.executor);
  unint64_t v66 = Logger.logObject.getter();
  os_log_type_t v67 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v66, v67))
  {
    uint64_t v68 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v68 = 0;
    _os_log_impl(&dword_1B9C64000, v66, v67, "[AmbiguityService] Creating ranked input by ranking between NL and Pommes", v68, 2u);
    MEMORY[0x1BA9E48C0](v68, -1, -1);
  }

  uint64_t v217 = a1;
  uint64_t v224 = *(void *)(a1 + 56);
  uint64_t v69 = *(void *)(v224 + 16);
  unint64_t v70 = (*(unsigned __int8 *)(v226 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v226 + 80);
  unint64_t v233 = *(void *)(v69 + 16);
  uint64_t v223 = a2;
  uint64_t v209 = v65;
  unint64_t v243 = v70;
  if (!v233)
  {
    swift_bridgeObjectRetain();
    uint64_t v91 = MEMORY[0x1E4FBC860];
    uint64_t v92 = v224;
    goto LABEL_35;
  }
  uint64_t v197 = v34;
  uint64_t v212 = v63;
  uint64_t v214 = v59;
  unint64_t v71 = v69 + v70;
  uint64_t v250 = *(void (**)(char *))(v226 + 16);
  uint64_t v245 = *(void *)(v226 + 72);
  Swift::String v230 = (void (**)(char *, uint64_t))(v219 + 8);
  unsigned int v229 = *MEMORY[0x1E4FA27A0];
  uint64_t v228 = (void (**)(char *, void, uint64_t))(v220 + 104);
  Swift::String v227 = (void (**)(char *, uint64_t))(v220 + 8);
  uint64_t v248 = v226 + 16;
  uint64_t v242 = (void (**)(char *, uint64_t))(v226 + 8);
  uint64_t v213 = v69;
  swift_bridgeObjectRetain();
  unint64_t v72 = 0;
  unint64_t v73 = v71;
  unint64_t v231 = v71;
  uint64_t v232 = v55;
  id v74 = v235;
  uint64_t v75 = v227;
  while (1)
  {
    unint64_t v244 = v73;
    v250(v74);
    uint64_t v76 = v239;
    Siri_Nlu_External_UserParse.parser.getter();
    os_log_type_t v77 = v236;
    Siri_Nlu_External_Parser.parserID.getter();
    (*v230)(v76, v240);
    uint64_t v78 = v237;
    uint64_t v79 = v241;
    (*v228)(v237, v229, v241);
    lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, MEMORY[0x1E4FA27B0]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v81 = v251;
    uint64_t v80 = (uint64_t)v252;
    int v82 = *v75;
    (*v75)(v78, v79);
    v82(v77, v79);
    uint64_t v83 = v249;
    uint64_t v84 = v234;
    ((void (*)(char *, char *, uint64_t))v250)(v234, v74, v249);
    char v85 = v80 == v81 ? 1 : Siri_Nlu_External_UserParse.isOverriddenSNLC.getter();
    os_log_type_t v86 = v232;
    BOOL v87 = *v242;
    (*v242)(v84, v83);
    ((void (*)(char *, char *, uint64_t))v250)(v86, v74, v83);
    uint64_t v88 = (uint64_t)v238;
    unint64_t v89 = v231;
    if (v85) {
      break;
    }
    char v90 = Siri_Nlu_External_UserParse.isNlv3FallbackException.getter();
    v87(v86, v83);
    v87(v74, v83);
    if (v90) {
      goto LABEL_16;
    }
    ++v72;
    unint64_t v73 = v244 + v245;
    if (v233 == v72)
    {
      unint64_t v72 = v233;
      uint64_t v88 = (uint64_t)v238;
      goto LABEL_16;
    }
  }
  v87(v86, v83);
  v87(v74, v83);
LABEL_16:
  uint64_t result = v213;
  uint64_t v92 = v224;
  if (*(void *)(v213 + 16) >= v72)
  {
    uint64_t v91 = MEMORY[0x1E4FBC860];
    unint64_t v252 = (void (*)(void))MEMORY[0x1E4FBC860];
    if (v72)
    {
      unint64_t v94 = (void (**)(char *, char *, uint64_t))(v226 + 32);
      while (1)
      {
        uint64_t v96 = ((uint64_t (*)(char *, unint64_t, uint64_t))v250)(v247, v89, v83);
        uint64_t v97 = MEMORY[0x1BA9DE000](v96);
        uint64_t v98 = *(void *)(v97 + 16);
        uint64_t v99 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
        uint64_t v100 = *(void *)(v99 - 8);
        if (v98)
        {
          (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v99 - 8) + 16))(v88, v97+ ((*(unsigned __int8 *)(*(void *)(v99 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v99 - 8) + 80)), v99);
          uint64_t v101 = 0;
        }
        else
        {
          uint64_t v101 = 1;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v100 + 56))(v88, v101, 1, v99);
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48))(v88, 1, v99) == 1) {
          break;
        }
        char v102 = Siri_Nlu_External_UserDialogAct.hasDelegated.getter();
        (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v88, v99);
        if ((v102 & 1) == 0) {
          goto LABEL_28;
        }
        uint64_t v83 = v249;
        v87(v247, v249);
        uint64_t v95 = v245;
LABEL_21:
        v89 += v95;
        if (!--v72)
        {
          uint64_t v91 = (uint64_t)v252;
          a2 = v223;
          uint64_t v59 = v214;
          uint64_t v63 = v212;
          uint64_t v92 = v224;
          uint64_t v34 = v197;
          goto LABEL_35;
        }
      }
      outlined destroy of ReferenceResolutionClientProtocol?(v88, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_28:
      uint64_t v103 = *v94;
      (*v94)(v246, v247, v249);
      uint64_t v104 = (uint64_t)v252;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v104 + 16) + 1, 1);
        uint64_t v104 = (uint64_t)v252;
      }
      uint64_t v95 = v245;
      unint64_t v106 = *(void *)(v104 + 16);
      unint64_t v105 = *(void *)(v104 + 24);
      if (v106 >= v105 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v105 > 1, v106 + 1, 1);
        uint64_t v95 = v245;
        uint64_t v104 = (uint64_t)v252;
      }
      *(void *)(v104 + 16) = v106 + 1;
      uint64_t v107 = v249;
      v103((char *)(v104 + v243 + v106 * v95), v246, v249);
      uint64_t v83 = v107;
      unint64_t v252 = (void (*)(void))v104;
      goto LABEL_21;
    }
    a2 = v223;
    uint64_t v59 = v214;
    uint64_t v63 = v212;
    uint64_t v34 = v197;
LABEL_35:
    swift_bridgeObjectRelease();
    outlined init with copy of ReferenceResolutionClientProtocol?(v92 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlRoutingDecision, (uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
    uint64_t v108 = v222;
    uint64_t v109 = v221;
    int v110 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v222 + 48))(v34, 1, v221);
    uint64_t v111 = v217;
    if (v110 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
    }
    else
    {
      os_log_type_t v112 = v216;
      (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v216, v34, v109);
      if (NLRoutingDecisionMessage.RoutingDecision.shouldBeHandledBySiriX.getter())
      {
        (*(void (**)(char *, uint64_t))(v108 + 8))(v112, v109);
      }
      else
      {
        uint64_t v113 = *(void *)(v111 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_utterance + 8);
        if (v113)
        {
          uint64_t v212 = v63;
          uint64_t v114 = *(void *)(v111 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_utterance);
          if (*(void *)(v91 + 16))
          {
            uint64_t v115 = v226;
            uint64_t v116 = (uint64_t)v193;
            uint64_t v117 = v249;
            (*(void (**)(char *, unint64_t, uint64_t))(v226 + 16))(v193, v91 + v243, v249);
            uint64_t v118 = 0;
          }
          else
          {
            uint64_t v118 = 1;
            uint64_t v117 = v249;
            uint64_t v115 = v226;
            uint64_t v116 = (uint64_t)v193;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v115 + 56))(v116, v118, 1, v117);
          swift_bridgeObjectRetain();
          swift_release();
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v115 + 48))(v116, 1, v117) == 1)
          {
            outlined destroy of ReferenceResolutionClientProtocol?(v116, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
            uint64_t v157 = type metadata accessor for USOParse();
            uint64_t v158 = (uint64_t)v205;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v157 - 8) + 56))(v205, 1, 1, v157);
          }
          else
          {
            uint64_t v159 = v190;
            (*(void (**)(char *, uint64_t, uint64_t))(v115 + 32))(v190, v116, v117);
            (*(void (**)(char *, char *, uint64_t))(v115 + 16))(v210, v159, v117);
            uint64_t v160 = v239;
            Siri_Nlu_External_UserParse.parser.getter();
            uint64_t v161 = v211;
            Siri_Nlu_External_Parser.parserID.getter();
            (*(void (**)(char *, uint64_t))(v219 + 8))(v160, v240);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v220 + 56))(v161, 0, 1, v241);
            uint64_t v162 = (uint64_t)v191;
            USOParse.init(userParse:parserIdentifier:appBundleId:)();
            (*(void (**)(char *, uint64_t))(v115 + 8))(v159, v117);
            uint64_t v163 = type metadata accessor for USOParse();
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v163 - 8) + 56))(v162, 0, 1, v163);
            uint64_t v158 = (uint64_t)v205;
            outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v162, (uint64_t)v205, &demangling cache variable for type metadata for USOParse?);
          }
          uint64_t v164 = v196;
          uint64_t v165 = v206;
          void *v206 = v114;
          v165[1] = v113;
          uint64_t v166 = v207;
          uint64_t v167 = v208;
          (*(void (**)(void *, void, uint64_t))(v207 + 104))(v165, *MEMORY[0x1E4FA1B90], v208);
          (*(void (**)(char *, char *, uint64_t))(v222 + 16))(v202, v216, v221);
          (*(void (**)(char *, void *, uint64_t))(v166 + 16))(v204, v165, v167);
          outlined init with copy of ReferenceResolutionClientProtocol?(v158, v203, &demangling cache variable for type metadata for USOParse?);
          uint64_t v168 = *(void *)(v224 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_pommesInfo);
          uint64_t v214 = v59;
          uint64_t v169 = v223;
          if (v168) {
            id v170 = *(id *)(v168 + 16);
          }
          uint64_t v171 = v194;
          uint64_t v172 = v201;
          uint64_t v63 = v212;
          NLRouterParse.init(nlRoutingDecision:input:usoParse:pommesResponse:)();
          uint64_t v173 = *(void (**)(char *, char *, uint64_t))(v171 + 16);
          v173((char *)v63, v172, v164);
          (*(void (**)(void *, void, uint64_t))(v214 + 104))(v63, *MEMORY[0x1E4FA1F60], v225);
          uint64_t v174 = v195;
          v173(v195, v172, v164);
          uint64_t v175 = Logger.logObject.getter();
          os_log_type_t v176 = static os_log_type_t.debug.getter();
          if (!os_log_type_enabled(v175, v176))
          {

            uint64_t v185 = *(void (**)(char *, uint64_t))(v171 + 8);
            v185(v174, v164);
            v185(v201, v164);
            (*(void (**)(void *, uint64_t))(v207 + 8))(v206, v208);
            outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v205, &demangling cache variable for type metadata for USOParse?);
            (*(void (**)(char *, uint64_t))(v222 + 8))(v216, v221);
            uint64_t v59 = v214;
            uint64_t v133 = v215;
            a2 = v169;
            goto LABEL_72;
          }
          uint64_t v177 = (uint8_t *)swift_slowAlloc();
          uint64_t v250 = (void (*)(char *))swift_slowAlloc();
          unint64_t v252 = (void (*)(void))v250;
          *(_DWORD *)uint64_t v177 = 136315138;
          uint64_t v249 = (uint64_t)(v177 + 4);
          v173(v192, v174, v164);
          uint64_t v178 = String.init<A>(describing:)();
          uint64_t v251 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v178, v179, (uint64_t *)&v252);
          uint64_t v180 = v223;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v181 = *(void (**)(char *, uint64_t))(v171 + 8);
          v181(v174, v164);
          os_log_type_t v182 = v176;
          a2 = v180;
          _os_log_impl(&dword_1B9C64000, v175, v182, "[AmbiguityService] Choosing NLRouterParse. nl router parse: %s", v177, 0xCu);
          uint64_t v183 = v250;
          swift_arrayDestroy();
          unint64_t v184 = v183;
          uint64_t v63 = v212;
          MEMORY[0x1BA9E48C0](v184, -1, -1);
          MEMORY[0x1BA9E48C0](v177, -1, -1);

          v181(v201, v164);
          (*(void (**)(void *, uint64_t))(v207 + 8))(v206, v208);
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v205, &demangling cache variable for type metadata for USOParse?);
          (*(void (**)(char *, uint64_t))(v222 + 8))(v216, v221);
          uint64_t v59 = v214;
          goto LABEL_70;
        }
        (*(void (**)(char *, uint64_t))(v222 + 8))(v216, v109);
      }
    }
    uint64_t v119 = *(void *)(v92 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_pommesInfo);
    uint64_t v120 = v218;
    if (v119)
    {
      uint64_t v121 = *(void **)(v119 + 16);
      if (v121)
      {
        id v122 = v121;
        dispatch thunk of PommesResponse.primaryQueryConfidence()();
        if (v123 >= 0.7)
        {
          unint64_t v142 = Logger.logObject.getter();
          os_log_type_t v143 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v142, v143))
          {
            uint64_t v144 = a2;
            uint64_t v145 = v63;
            uint64_t v146 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v146 = 0;
            _os_log_impl(&dword_1B9C64000, v142, v143, "[AmbiguityService] Choosing pommes as top as it has higher confidence", v146, 2u);
            uint64_t v147 = v146;
            uint64_t v63 = v145;
            a2 = v144;
            MEMORY[0x1BA9E48C0](v147, -1, -1);
          }

          *uint64_t v63 = v122;
          (*(void (**)(void *, void, uint64_t))(v59 + 104))(v63, *MEMORY[0x1E4FA1F18], v225);
          id v148 = v122;
          specialized AmbiguityService.getAlternatives<A>(nlParses:)(v91);
          swift_release();

          goto LABEL_70;
        }

        uint64_t v120 = v218;
      }
    }
    unint64_t v124 = *(void *)(v91 + 16);
    if (v124)
    {
      uint64_t v125 = v226;
      unint64_t v126 = v63;
      unint64_t v127 = *(void (**)(char *))(v226 + 16);
      uint64_t v248 = v91 + v243;
      uint64_t v128 = v249;
      v127(v120);
      ((void (*)(char *, char *, uint64_t))v127)(v210, v120, v128);
      uint64_t v250 = (void (*)(char *))v91;
      unint64_t v129 = v126;
      id v130 = v239;
      Siri_Nlu_External_UserParse.parser.getter();
      uint64_t v131 = v211;
      Siri_Nlu_External_Parser.parserID.getter();
      uint64_t v132 = v130;
      uint64_t v63 = v129;
      (*(void (**)(char *, uint64_t))(v219 + 8))(v132, v240);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v220 + 56))(v131, 0, 1, v241);
      uint64_t v133 = v215;
      uint64_t v134 = v225;
      USOParse.init(userParse:parserIdentifier:appBundleId:)();
      (*(void (**)(char *, void, uint64_t))(v59 + 104))(v133, *MEMORY[0x1E4FA1F48], v134);
      uint64_t v135 = v134;
      char v136 = v250;
      uint64_t result = (*(uint64_t (**)(void *, char *, uint64_t))(v59 + 32))(v63, v133, v135);
      if (*((void *)v136 + 2) < v124) {
        goto LABEL_73;
      }
      specialized AmbiguityService.getAlternatives<A>(nlParses:)(v248, 1, (2 * v124) | 1);
      swift_release();
      (*(void (**)(char *, uint64_t))(v125 + 8))(v120, v128);
      goto LABEL_52;
    }
    swift_release();
    uint64_t v137 = v199;
    uint64_t v138 = v198;
    uint64_t v139 = v200;
    (*(void (**)(char *, void, uint64_t))(v199 + 104))(v198, *MEMORY[0x1E4FA2868], v200);
    lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_ResponseStatus.StatusCode and conformance Siri_Nlu_External_ResponseStatus.StatusCode, MEMORY[0x1E4FA2880]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v141 = v251;
    uint64_t v140 = (uint64_t)v252;
    (*(void (**)(char *, uint64_t))(v137 + 8))(v138, v139);
    if (v140 == v141)
    {
      (*(void (**)(void *, void, uint64_t))(v59 + 104))(v63, *MEMORY[0x1E4FA1F58], v225);
      uint64_t v133 = v215;
LABEL_52:
      a2 = v223;
LABEL_72:
      uint64_t v186 = v225;
      (*(void (**)(char *, void *, uint64_t))(v59 + 16))(v133, v63, v225);
      Input.init(parse:alternatives:)();
      (*(void (**)(void *, uint64_t))(v59 + 8))(v63, v186);
      uint64_t v187 = type metadata accessor for Input();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v187 - 8) + 56))(a2, 0, 1, v187);
    }
    a2 = v223;
    if (*(void *)(*(void *)(v92 + 16) + 16)) {
      goto LABEL_61;
    }
    uint64_t v149 = (uint64_t)v188;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v226 + 56))(v188, 1, 1, v249);
    uint64_t v150 = type metadata accessor for ServerFallbackReason();
    uint64_t v151 = (uint64_t)v189;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v150 - 8) + 56))(v189, 1, 1, v150);
    unsigned __int8 v152 = specialized ServerFallbackDisablingUtils.shouldDisableServerFallbackWithABDecision(isDomainDirected:topNlParse:serverFallbackReason:)(1, v149, v151);
    outlined destroy of ReferenceResolutionClientProtocol?(v151, &demangling cache variable for type metadata for ServerFallbackReason?);
    outlined destroy of ReferenceResolutionClientProtocol?(v149, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    if ((v152 & 1) == 0)
    {
LABEL_61:
      uint64_t v156 = type metadata accessor for Input();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v156 - 8) + 56))(a2, 1, 1, v156);
    }
    uint64_t v153 = Logger.logObject.getter();
    os_log_type_t v154 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v153, v154))
    {
      uint64_t v155 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v155 = 0;
      _os_log_impl(&dword_1B9C64000, v153, v154, "[AmbiguityService] Empty nlParses and isServerFallbackDisabled = true", v155, 2u);
      MEMORY[0x1BA9E48C0](v155, -1, -1);
    }

    (*(void (**)(void *, void, uint64_t))(v59 + 104))(v63, *MEMORY[0x1E4FA1F58], v225);
LABEL_70:
    uint64_t v133 = v215;
    goto LABEL_72;
  }
  __break(1u);
LABEL_73:
  __break(1u);
  return result;
}

uint64_t Siri_Nlu_External_UserParse.isOverriddenSNLC.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v37 = *(void *)(v2 - 8);
  uint64_t v38 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v36 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v39 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v40 = *(void *)(v6 - 8);
  uint64_t v41 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v36 - v14;
  uint64_t v16 = type metadata accessor for Siri_Nlu_External_Parser();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  Siri_Nlu_External_UserParse.parser.getter();
  Siri_Nlu_External_Parser.parserID.getter();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, *MEMORY[0x1E4FA27A8], v9);
  lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v42;
  uint64_t v20 = v43;
  uint64_t v22 = *(void (**)(char *, uint64_t))(v10 + 8);
  v22(v13, v9);
  uint64_t v23 = v15;
  uint64_t v24 = v9;
  uint64_t v26 = v40;
  uint64_t v25 = v41;
  v22(v23, v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v8, v1, v25);
  if (v20 != v21) {
    goto LABEL_4;
  }
  uint64_t v27 = v39;
  Siri_Nlu_External_UserParse.preferredUserDialogAct.getter(v39);
  uint64_t v28 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)v27);
LABEL_4:
    (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v25);
    char v30 = 0;
    return v30 & 1;
  }
  uint64_t v31 = v36;
  Siri_Nlu_External_UserDialogAct.delegated.getter();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v28);
  uint64_t v32 = Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter();
  uint64_t v34 = v33;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v31, v38);
  if (v32 == 0xD000000000000013 && v34 == 0x80000001BA06A940) {
    char v30 = 1;
  }
  else {
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v25);
  swift_bridgeObjectRelease();
  return v30 & 1;
}

unint64_t lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier()
{
  unint64_t result = lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier;
  if (!lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier)
  {
    type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier;
  if (!lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier)
  {
    type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t Siri_Nlu_External_UserParse.isNlv3FallbackException.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v37 = *(void *)(v2 - 8);
  uint64_t v38 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v36 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v39 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v40 = *(void *)(v6 - 8);
  uint64_t v41 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v36 - v14;
  uint64_t v16 = type metadata accessor for Siri_Nlu_External_Parser();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  Siri_Nlu_External_UserParse.parser.getter();
  Siri_Nlu_External_Parser.parserID.getter();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, *MEMORY[0x1E4FA27A8], v9);
  lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v42;
  uint64_t v20 = v43;
  uint64_t v22 = *(void (**)(char *, uint64_t))(v10 + 8);
  v22(v13, v9);
  uint64_t v23 = v15;
  uint64_t v24 = v9;
  uint64_t v26 = v40;
  uint64_t v25 = v41;
  v22(v23, v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v8, v1, v25);
  if (v20 != v21) {
    goto LABEL_4;
  }
  uint64_t v27 = v39;
  Siri_Nlu_External_UserParse.preferredUserDialogAct.getter(v39);
  uint64_t v28 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)v27);
LABEL_4:
    (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v25);
    char v30 = 0;
    return v30 & 1;
  }
  uint64_t v31 = v36;
  Siri_Nlu_External_UserDialogAct.delegated.getter();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v28);
  uint64_t v32 = Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter();
  uint64_t v34 = v33;
  (*(void (**)(char *, uint64_t))(v37 + 8))(v31, v38);
  if (v32 == 0xD000000000000026 && v34 == 0x80000001BA067A60) {
    char v30 = 1;
  }
  else {
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v25);
  swift_bridgeObjectRelease();
  return v30 & 1;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AffinityValueFetcher>, &demangling cache variable for type metadata for AffinityValueFetcher);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationHandler>, &demangling cache variable for type metadata for ConversationHandler);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UsoIdentifier>, MEMORY[0x1E4FA2CF0]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ActionCandidate>, MEMORY[0x1E4F9FAB8]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_DelegatedUserDialogAct>, MEMORY[0x1E4FA2990]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Input>, MEMORY[0x1E4FA1EE0]);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<RRCandidate>, MEMORY[0x1E4FA3DB8]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<RankedAction>, MEMORY[0x1E4F9FAA8]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Google_Protobuf_StringValue>, MEMORY[0x1E4F70D20]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<NSExtensionProtocol>, &demangling cache variable for type metadata for NSExtensionProtocol);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler)>, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<AffinityScorer>, &demangling cache variable for type metadata for AffinityScorer);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SiriKitConfirmationState>, MEMORY[0x1E4FA1A48]);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<CorrectionsActionOutcome>, MEMORY[0x1E4FA1E20]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserParse>, MEMORY[0x1E4FA2808]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Parse>, MEMORY[0x1E4FA1F68]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<ParseUserDataAttachment>, (uint64_t (*)(void))type metadata accessor for ParseUserDataAttachment);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<TemplatingSection>, MEMORY[0x1E4FA1C88]);
  *uint64_t v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<USOParse>, MEMORY[0x1E4FA1F80]);
  *uint64_t v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (void *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UsoEntitySpan>, MEMORY[0x1E4FA2CA0]);
  *uint64_t v3 = result;
  return result;
}

Swift::Void __swiftcall Input.stripSetIdentity()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1F4188790](v1 - 8);
  id v122 = (char *)&v103 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = type metadata accessor for Input();
  uint64_t v124 = *(void *)(v125 - 8);
  MEMORY[0x1F4188790](v125);
  double v123 = (char *)&v103 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  unint64_t v149 = *(void *)(v141 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v141);
  uint64_t v131 = (char *)&v103 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v135 = (char *)&v103 - v6;
  uint64_t v142 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v145 = *(void (***)(char *, uint64_t))(v142 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v142);
  unint64_t v129 = (char *)&v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v134 = (char *)&v103 - v9;
  uint64_t v146 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v120 = *(void *)(v146 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v146);
  uint64_t v137 = (char *)&v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v138 = (char *)&v103 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  id v130 = (char *)&v103 - v15;
  MEMORY[0x1F4188790](v14);
  int64_t v140 = (int64_t)&v103 - v16;
  uint64_t v17 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v128 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v103 - v21;
  uint64_t v23 = type metadata accessor for USOParse();
  int64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v103 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for Parse();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v121 = (char *)&v103 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v32 = (char *)&v103 - v31;
  unint64_t v126 = v0;
  Input.parse.getter();
  uint64_t v33 = v27;
  uint64_t v34 = v28;
  unsigned int v35 = (*(uint64_t (**)(char *, uint64_t))(v28 + 88))(v32, v33);
  if (v35 != *MEMORY[0x1E4FA1F48])
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v32, v33);
    return;
  }
  unsigned int v111 = v35;
  uint64_t v36 = *(void (**)(char *, uint64_t))(v28 + 96);
  uint64_t v112 = v33;
  v36(v32, v33);
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v26, v32, v23);
  uint64_t v37 = USOParse.userParse.getter();
  uint64_t v38 = MEMORY[0x1BA9DE000](v37);
  uint64_t v113 = v18;
  uint64_t v39 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v115 = v18 + 8;
  uint64_t v114 = v39;
  v39(v22, v17);
  unint64_t v40 = *(void *)(v38 + 16);
  swift_bridgeObjectRelease();
  if (v40 < 2)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    return;
  }
  uint64_t v41 = v17;
  int64_t v107 = v24;
  uint64_t v106 = v23;
  int64_t v42 = (int64_t)v128;
  USOParse.userParse.getter();
  uint64_t v43 = Siri_Nlu_External_UserParse.userDialogActs.modify();
  uint64_t v45 = v44;
  unint64_t v46 = *v44;
  unint64_t v47 = *(void *)(*v44 + 16);
  int v110 = v22;
  unint64_t v147 = v47;
  uint64_t v127 = v41;
  uint64_t v108 = v26;
  if (!v47)
  {
    int64_t v62 = 0;
    uint64_t v63 = 0;
    goto LABEL_36;
  }
  uint64_t v104 = (void (*)(void, void, void))v43;
  uint64_t v48 = v120 + 16;
  uint64_t v43 = *(void *)(v120 + 16);
  unint64_t v143 = (*(unsigned __int8 *)(v120 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80);
  uint64_t v136 = v46 + v143;
  uint64_t v148 = *(void *)(v120 + 72);
  uint64_t v133 = v145 + 1;
  uint64_t v132 = (void (**)(char *, uint64_t))(v149 + 8);
  uint64_t v144 = (void (**)(char *, uint64_t))(v120 + 8);
  unint64_t v105 = v46;
  swift_bridgeObjectRetain();
  uint64_t v49 = 0;
  uint64_t v145 = 0;
  unint64_t v149 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v50 = v146;
  uint64_t v51 = (char *)v140;
  uint64_t v109 = v34;
  uint64_t v118 = v48;
  uint64_t v139 = (void (*)(void, void, void))v43;
  uint64_t v119 = v45;
  while (1)
  {
    ((void (*)(char *, uint64_t, uint64_t))v43)(v51, v136 + v148 * v49, v50);
    if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter() & 1) == 0) {
      goto LABEL_8;
    }
    uint64_t v52 = v134;
    Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
    uint64_t v53 = v135;
    Siri_Nlu_External_UserStatedTask.task.getter();
    uint64_t v54 = *v133;
    (*v133)(v52, v142);
    uint64_t v55 = v145;
    uint64_t v56 = static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
    if (v55)
    {

      (*v132)(v53, v141);
      uint64_t v145 = 0;
      uint64_t v43 = (uint64_t)v139;
LABEL_6:
      uint64_t v51 = (char *)v140;
      goto LABEL_7;
    }
    uint64_t v45 = (unint64_t *)v56;
    uint64_t v117 = v54;
    uint64_t v145 = 0;
    uint64_t v116 = *v132;
    v116(v53, v141);
    unint64_t v57 = MEMORY[0x1BA9DE8C0](v45);
    unint64_t v58 = v57;
    uint64_t v59 = v57 >> 62 ? _CocoaArrayWrapper.endIndex.getter() : *(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v43 = (uint64_t)v139;
    uint64_t v51 = (char *)v140;
    if (v59) {
      break;
    }
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v41 = v127;
    uint64_t v50 = v146;
LABEL_7:
    uint64_t v45 = v119;
LABEL_8:
    (*v144)(v51, v50);
    if (++v49 == v147)
    {
      swift_bridgeObjectRelease();
      int64_t v62 = *(void *)(*v45 + 16);
      int64_t v42 = v147;
      goto LABEL_35;
    }
  }
  uint64_t v34 = 4;
  while (1)
  {
    int64_t v42 = v34 - 4;
    if ((v58 & 0xC000000000000001) != 0)
    {
      uint64_t v41 = MEMORY[0x1BA9E3990](v34 - 4, v58);
      uint64_t v60 = v34 - 3;
      if (__OFADD__(v42, 1)) {
        goto LABEL_79;
      }
    }
    else
    {
      uint64_t v41 = *(void *)(v58 + 8 * v34);
      swift_retain();
      uint64_t v60 = v34 - 3;
      if (__OFADD__(v42, 1))
      {
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }
    }
    static UsoTask_CodegenConverter.convert(task:)();
    swift_release();
    if (v151) {
      break;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v150, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_16:
    ++v34;
    if (v60 == v59)
    {
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v41 = v127;
      uint64_t v34 = v109;
      uint64_t v50 = v146;
      goto LABEL_6;
    }
  }
  outlined init with take of Any(&v150, &v152);
  outlined init with take of Any(&v152, &v150);
  uint64_t v61 = type metadata accessor for UsoTask_setIdentity_common_Person();
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_16;
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t v58 = v146;
  uint64_t v134 = (char *)*v144;
  ((void (*)(int64_t, uint64_t))v134)(v140, v146);
  swift_bridgeObjectRelease();
  int64_t v62 = v49 + 1;
  if (__OFADD__(v49, 1))
  {
    __break(1u);
    return;
  }
  uint64_t v45 = v119;
  unint64_t v64 = *v119;
  unint64_t v65 = *(void *)(*v119 + 16);
  uint64_t v41 = v127;
  uint64_t v34 = v109;
  if (v62 == v65)
  {
    int64_t v42 = v49;
    goto LABEL_35;
  }
  uint64_t v136 = v61;
  v120 += 40;
  uint64_t v135 = (char *)(MEMORY[0x1E4FBC840] + 8);
  int64_t v42 = v49;
  BOOL v87 = v131;
  uint64_t v49 = (uint64_t)v130;
  while (2)
  {
    if (v62 >= v65) {
      goto LABEL_81;
    }
    unint64_t v149 = v62;
    int64_t v140 = v62 * v148;
    ((void (*)(uint64_t, unint64_t, unint64_t))v43)(v49, v64 + v143 + v62 * v148, v58);
    if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter() & 1) == 0) {
      goto LABEL_47;
    }
    uint64_t v88 = v129;
    Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
    Siri_Nlu_External_UserStatedTask.task.getter();
    v117(v88, v142);
    unint64_t v89 = v145;
    uint64_t v90 = static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
    if (v89)
    {

      v116(v87, v141);
      uint64_t v145 = 0;
      unint64_t v58 = v146;
      uint64_t v43 = (uint64_t)v139;
      goto LABEL_47;
    }
    uint64_t v99 = v90;
    uint64_t v145 = 0;
    v116(v87, v141);
    unint64_t v147 = v99;
    unint64_t v100 = MEMORY[0x1BA9DE8C0](v99);
    unint64_t v101 = v100;
    if (v100 >> 62) {
      uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v34 = *(void *)((v100 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    unint64_t v58 = v146;
    uint64_t v43 = (uint64_t)v139;
    if (!v34)
    {
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v41 = v127;
      uint64_t v34 = v109;
LABEL_47:
      ((void (*)(uint64_t, unint64_t))v134)(v49, v58);
      unint64_t v91 = v149;
      if (v42 != v149)
      {
        if (v42 < 0)
        {
LABEL_84:
          __break(1u);
          goto LABEL_85;
        }
        unint64_t v58 = *v45;
        unint64_t v92 = *(void *)(*v45 + 16);
        if (v42 >= v92)
        {
LABEL_85:
          __break(1u);
          goto LABEL_86;
        }
        int64_t v93 = v42;
        int64_t v42 = v34;
        uint64_t v34 = v41;
        uint64_t v49 = v58 + v143;
        unint64_t v147 = v93;
        int64_t v94 = v93 * v148;
        uint64_t v41 = v146;
        ((void (*)(char *, unint64_t, uint64_t))v43)(v138, v58 + v143 + v93 * v148, v146);
        if (v149 >= v92)
        {
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
          goto LABEL_88;
        }
        ((void (*)(char *, uint64_t, uint64_t))v43)(v137, v49 + v140, v41);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v45 = v58;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v58 = specialized _ArrayBuffer._consumeAndCreateNew()(v58);
          *uint64_t v45 = v58;
        }
        BOOL v87 = v131;
        uint64_t v49 = (uint64_t)v130;
        uint64_t v41 = v34;
        if (v147 >= *(void *)(v58 + 16)) {
          goto LABEL_87;
        }
        uint64_t v34 = v42;
        uint64_t v43 = v143;
        unint64_t v96 = v58 + v143 + v94;
        unint64_t v58 = *(void *)v120;
        unint64_t v97 = v146;
        (*(void (**)(unint64_t, char *, uint64_t))v120)(v96, v137, v146);
        if (v149 >= *(void *)(*v45 + 16))
        {
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
          goto LABEL_90;
        }
        ((void (*)(unint64_t, char *, unint64_t))v58)(*v45 + v43 + v140, v138, v97);
        unint64_t v91 = v149;
        unint64_t v58 = v97;
        int64_t v42 = v147;
        uint64_t v43 = (uint64_t)v139;
      }
      BOOL v98 = __OFADD__(v42++, 1);
      if (v98)
      {
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }
      BOOL v98 = __OFADD__(v91, 1);
      int64_t v62 = v91 + 1;
      if (!v98) {
        goto LABEL_58;
      }
LABEL_82:
      __break(1u);
      goto LABEL_83;
    }
    unint64_t v58 = v101 & 0xC000000000000001;
    uint64_t v49 = 4;
    while (1)
    {
      uint64_t v102 = v49 - 4;
      if (v58)
      {
        MEMORY[0x1BA9E3990](v49 - 4, v101);
        BOOL v98 = __OFADD__(v102, 1);
        uint64_t v41 = v49 - 3;
        if (v98) {
          goto LABEL_80;
        }
      }
      else
      {
        swift_retain();
        BOOL v98 = __OFADD__(v102, 1);
        uint64_t v41 = v49 - 3;
        if (v98) {
          goto LABEL_80;
        }
      }
      static UsoTask_CodegenConverter.convert(task:)();
      swift_release();
      if (v151) {
        break;
      }
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v150, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_65:
      ++v49;
      if (v41 == v34)
      {
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v41 = v127;
        uint64_t v34 = v109;
        BOOL v87 = v131;
        unint64_t v58 = v146;
        uint64_t v49 = (uint64_t)v130;
        goto LABEL_47;
      }
    }
    outlined init with take of Any(&v150, &v152);
    outlined init with take of Any(&v152, &v150);
    if ((swift_dynamicCast() & 1) == 0) {
      goto LABEL_65;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v49 = (uint64_t)v130;
    unint64_t v58 = v146;
    ((void (*)(char *, uint64_t))v134)(v130, v146);
    uint64_t v41 = v127;
    uint64_t v34 = v109;
    BOOL v87 = v131;
    int64_t v62 = v149 + 1;
    if (__OFADD__(v149, 1)) {
      goto LABEL_82;
    }
LABEL_58:
    unint64_t v64 = *v45;
    unint64_t v65 = *(void *)(*v45 + 16);
    if (v62 != v65) {
      continue;
    }
    break;
  }
LABEL_35:
  BOOL v66 = v62 < v42;
  uint64_t v49 = (uint64_t)v108;
  uint64_t v63 = v42;
  int64_t v42 = (int64_t)v128;
  unint64_t v58 = (unint64_t)&v153;
  uint64_t v43 = (uint64_t)v104;
  if (v66) {
    goto LABEL_89;
  }
LABEL_36:
  specialized Array.replaceSubrange<A>(_:with:)(v63, v62);
  ((void (*)(uint64_t *, void))v43)(&v153, 0);
  os_log_type_t v67 = v110;
  uint64_t v68 = USOParse.userParse.getter();
  uint64_t v69 = MEMORY[0x1BA9DE000](v68);
  v114(v67, v41);
  uint64_t v70 = *(void *)(v69 + 16);
  uint64_t v71 = swift_bridgeObjectRelease();
  uint64_t v41 = v42;
  uint64_t v72 = *(void *)(MEMORY[0x1BA9DE000](v71) + 16);
  swift_bridgeObjectRelease();
  uint64_t v45 = v126;
  int64_t v42 = v107;
  uint64_t v49 = v113;
  if (v70 == v72) {
    goto LABEL_41;
  }
  uint64_t v43 = Input.description.getter();
  unint64_t v58 = v73;
  if (one-time initialization token for executor != -1) {
LABEL_90:
  }
    swift_once();
  uint64_t v74 = type metadata accessor for Logger();
  __swift_project_value_buffer(v74, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain();
  uint64_t v75 = Logger.logObject.getter();
  os_log_type_t v76 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v75, v76))
  {
    os_log_type_t v77 = (uint8_t *)swift_slowAlloc();
    uint64_t v78 = swift_slowAlloc();
    uint64_t v153 = v78;
    *(_DWORD *)os_log_type_t v77 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)&long long v152 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v58, &v153);
    uint64_t v45 = v126;
    int64_t v42 = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v75, v76, "[DecisionEngine] setIdentity stripped %s", v77, 0xCu);
    swift_arrayDestroy();
    uint64_t v79 = v78;
    uint64_t v49 = v113;
    MEMORY[0x1BA9E48C0](v79, -1, -1);
    MEMORY[0x1BA9E48C0](v77, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
LABEL_41:
  uint64_t v80 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v110, v41, v127);
  uint64_t v81 = v108;
  USOParse.parserIdentifier.getter();
  USOParse.appBundleId.getter();
  int v82 = v121;
  USOParse.init(userParse:parserIdentifier:appBundleId:)();
  uint64_t v83 = v112;
  (*(void (**)(char *, void, uint64_t))(v34 + 104))(v82, v111, v112);
  uint64_t v84 = v123;
  Input.withReformedParse(_:)();
  uint64_t v85 = v124;
  uint64_t v86 = v125;
  (*(void (**)(unint64_t *, uint64_t))(v124 + 8))(v45, v125);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v82, v83);
  v114((char *)v80, v127);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v81, v106);
  (*(void (**)(unint64_t *, char *, uint64_t))(v85 + 32))(v45, v84, v86);
}

uint64_t ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[16] = a3;
  v4[17] = v3;
  v4[14] = a1;
  v4[15] = a2;
  v4[18] = type metadata accessor for UserInputResult();
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = static MessageBusActor.shared;
  v4[22] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:), v5, 0);
}

void ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:)()
{
  uint64_t v33 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = *(void **)(v0 + 264);
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  id v3 = v1;
  id v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = *(void **)(v0 + 264);
  if (v7)
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v32 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    *(void *)(v0 + 80) = v8;
    id v11 = v8;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(describing:)();
    *(void *)(v9 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v32);
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v5, v6, "[ConversationHelper] Error checking if active conversation could handle input: %s. Will try the next conversation", (uint8_t *)v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v10, -1, -1);
    MEMORY[0x1BA9E48C0](v9, -1, -1);

    swift_release();
  }
  else
  {
    swift_release();
  }
  uint64_t v14 = *(void *)(v0 + 240);
  unint64_t v15 = *(void *)(v0 + 248);
  *(void *)(v0 + 216) = v14;
  *(void *)(v0 + 224) = v15;
  uint64_t v16 = *(void *)(v0 + 192);
  if (v16 < 0)
  {
    uint64_t v21 = __CocoaSet.Iterator.next()();
    if (!v21) {
      goto LABEL_30;
    }
    *(void *)(v0 + 104) = v21;
    type metadata accessor for RemoteConversationClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v20 = *(void *)(v0 + 96);
    swift_unknownObjectRelease();
    uint64_t v19 = v14;
    uint64_t v17 = v15;
  }
  else
  {
    if (v15)
    {
      uint64_t v17 = (v15 - 1) & v15;
      unint64_t v18 = __clz(__rbit64(v15)) | (v14 << 6);
      uint64_t v19 = v14;
    }
    else
    {
      int64_t v26 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        return;
      }
      int64_t v27 = (unint64_t)(*(void *)(v0 + 208) + 64) >> 6;
      if (v26 >= v27) {
        goto LABEL_30;
      }
      uint64_t v28 = *(void *)(v0 + 200);
      unint64_t v29 = *(void *)(v28 + 8 * v26);
      uint64_t v19 = v14 + 1;
      if (!v29)
      {
        uint64_t v19 = v14 + 2;
        if (v14 + 2 >= v27) {
          goto LABEL_30;
        }
        unint64_t v29 = *(void *)(v28 + 8 * v19);
        if (!v29)
        {
          uint64_t v19 = v14 + 3;
          if (v14 + 3 >= v27) {
            goto LABEL_30;
          }
          unint64_t v29 = *(void *)(v28 + 8 * v19);
          if (!v29)
          {
            uint64_t v19 = v14 + 4;
            if (v14 + 4 >= v27) {
              goto LABEL_30;
            }
            unint64_t v29 = *(void *)(v28 + 8 * v19);
            if (!v29)
            {
              uint64_t v30 = v14 + 5;
              while (v27 != v30)
              {
                unint64_t v29 = *(void *)(v28 + 8 * v30++);
                if (v29)
                {
                  uint64_t v19 = v30 - 1;
                  goto LABEL_19;
                }
              }
              goto LABEL_30;
            }
          }
        }
      }
LABEL_19:
      uint64_t v17 = (v29 - 1) & v29;
      unint64_t v18 = __clz(__rbit64(v29)) + (v19 << 6);
    }
    uint64_t v20 = *(void *)(*(void *)(v16 + 48) + 8 * v18);
    swift_retain();
  }
  *(void *)(v0 + 240) = v19;
  *(void *)(v0 + 248) = v17;
  *(void *)(v0 + 232) = v20;
  if (v20)
  {
    uint64_t v22 = **(void **)(v0 + 128);
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 256) = v23;
    void *v23 = v0;
    v23[1] = ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:);
    uint64_t v24 = *(void *)(v0 + 160);
    uint64_t v25 = *(void *)(v0 + 112);
    RemoteConversationClient.accept(input:speechData:)(v24, v25, v22);
    return;
  }
LABEL_30:
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = *(void (**)(void))(v0 + 8);
  v31(0);
}

uint64_t ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:)()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 176);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  BOOL v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[2];
  uint64_t v40;
  uint64_t v41;

  unint64_t v40 = v0;
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 152);
  outlined init with take of RemoteConversationOrReformedInput(*(void *)(v0 + 160), v1, (uint64_t (*)(void))type metadata accessor for UserInputResult);
  outlined init with copy of RemoteConversationOrReformedInput(v1, v2, (uint64_t (*)(void))type metadata accessor for UserInputResult);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      return specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD00000000000005CLL, 0x80000001BA065A90, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/DecisionEngine/ConversationHelper.swift", 108, 2, 88);
    }
    unint64_t v13 = *(void *)(v0 + 232);
    swift_release();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
    swift_retain_n();
    unint64_t v15 = Logger.logObject.getter();
    uint64_t v16 = static os_log_type_t.debug.getter();
    uint64_t v17 = os_log_type_enabled(v15, v16);
    unint64_t v18 = *(void *)(v0 + 232);
    uint64_t v37 = *(void *)(v0 + 168);
    if (v17)
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136315138;
      uint64_t v38 = v36;
      swift_retain();
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      strcpy((char *)v39, "FlowExtension(");
      HIBYTE(v39[1]) = -18;
      uint64_t v20 = v13;
      uint64_t v21 = *(void *)(v18 + 112);
      uint64_t v22 = *(void **)(v18 + 120);
      swift_bridgeObjectRetain();
      v23._uint64_t countAndFlagsBits = v21;
      v23._unint64_t object = v22;
      String.append(_:)(v23);
      unint64_t v13 = v20;
      swift_bridgeObjectRelease();
      v24._uint64_t countAndFlagsBits = 41;
      v24._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v24);
      swift_release();
      *(void *)(v0 + 88) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39[0], v39[1], &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v15, v16, "[ConversationHelper] Selecting existing conversation to handle input: %s", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v36, -1, -1);
      MEMORY[0x1BA9E48C0](v19, -1, -1);

      outlined destroy of RemoteConversationOrReformedInput(v37, (uint64_t (*)(void))type metadata accessor for UserInputResult);
      outlined consume of [Int : @Sendable ()].Iterator._Variant();
    }
    else
    {

      swift_release_n();
      outlined destroy of RemoteConversationOrReformedInput(v37, (uint64_t (*)(void))type metadata accessor for UserInputResult);
      outlined consume of [Int : @Sendable ()].Iterator._Variant();
    }
    goto LABEL_36;
  }
  uint64_t v5 = *(void *)(v0 + 152);
  outlined destroy of RemoteConversationOrReformedInput(*(void *)(v0 + 168), (uint64_t (*)(void))type metadata accessor for UserInputResult);
  swift_release();
  uint64_t result = outlined destroy of RemoteConversationOrReformedInput(v5, (uint64_t (*)(void))type metadata accessor for UserInputResult);
  os_log_type_t v6 = *(void *)(v0 + 240);
  BOOL v7 = *(void *)(v0 + 248);
  *(void *)(v0 + 216) = v6;
  *(void *)(v0 + 224) = v7;
  uint64_t v8 = *(void *)(v0 + 192);
  if (v8 < 0)
  {
    uint64_t v25 = __CocoaSet.Iterator.next()();
    if (!v25)
    {
LABEL_35:
      outlined consume of [Int : @Sendable ()].Iterator._Variant();
      swift_release();
      unint64_t v13 = 0;
LABEL_36:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unsigned int v35 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v35(v13);
    }
    *(void *)(v0 + 104) = v25;
    type metadata accessor for RemoteConversationClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v12 = *(void *)(v0 + 96);
    swift_unknownObjectRelease();
    id v11 = v6;
    uint64_t v9 = v7;
  }
  else
  {
    if (v7)
    {
      uint64_t v9 = (v7 - 1) & v7;
      uint64_t v10 = __clz(__rbit64(v7)) | (v6 << 6);
      id v11 = v6;
    }
    else
    {
      uint64_t v30 = v6 + 1;
      if (__OFADD__(v6, 1))
      {
        __break(1u);
        return result;
      }
      uint64_t v31 = (unint64_t)(*(void *)(v0 + 208) + 64) >> 6;
      if (v30 >= v31) {
        goto LABEL_35;
      }
      uint64_t v32 = *(void *)(v0 + 200);
      uint64_t v33 = *(void *)(v32 + 8 * v30);
      id v11 = v6 + 1;
      if (!v33)
      {
        id v11 = v6 + 2;
        if (v6 + 2 >= v31) {
          goto LABEL_35;
        }
        uint64_t v33 = *(void *)(v32 + 8 * v11);
        if (!v33)
        {
          id v11 = v6 + 3;
          if (v6 + 3 >= v31) {
            goto LABEL_35;
          }
          uint64_t v33 = *(void *)(v32 + 8 * v11);
          if (!v33)
          {
            id v11 = v6 + 4;
            if (v6 + 4 >= v31) {
              goto LABEL_35;
            }
            uint64_t v33 = *(void *)(v32 + 8 * v11);
            if (!v33)
            {
              uint64_t v34 = v6 + 5;
              while (v31 != v34)
              {
                uint64_t v33 = *(void *)(v32 + 8 * v34++);
                if (v33)
                {
                  id v11 = v34 - 1;
                  goto LABEL_24;
                }
              }
              goto LABEL_35;
            }
          }
        }
      }
LABEL_24:
      uint64_t v9 = (v33 - 1) & v33;
      uint64_t v10 = __clz(__rbit64(v33)) + (v11 << 6);
    }
    uint64_t v12 = *(void *)(*(void *)(v8 + 48) + 8 * v10);
    swift_retain();
  }
  *(void *)(v0 + 240) = v11;
  *(void *)(v0 + 248) = v9;
  *(void *)(v0 + 232) = v12;
  if (!v12) {
    goto LABEL_35;
  }
  int64_t v26 = **(void **)(v0 + 128);
  int64_t v27 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v27;
  char *v27 = v0;
  v27[1] = ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:);
  uint64_t v28 = *(void *)(v0 + 160);
  unint64_t v29 = *(void *)(v0 + 112);
  return RemoteConversationClient.accept(input:speechData:)(v28, v29, v26);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 264) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 176);
  if (v0) {
    id v4 = ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:);
  }
  else {
    id v4 = ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v24;

  uint64_t v1 = *(void *)(v0 + 120);
  if ((v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for RemoteConversationClient();
    lazy protocol witness table accessor for type PluginAction and conformance PluginAction(&lazy protocol witness table cache variable for type RemoteConversationClient and conformance RemoteConversationClient, (void (*)(uint64_t))type metadata accessor for RemoteConversationClient);
    Set.Iterator.init(_cocoa:)();
    uint64_t result = *(void *)(v0 + 16);
    uint64_t v3 = *(void *)(v0 + 24);
    uint64_t v5 = *(void *)(v0 + 32);
    id v4 = *(void *)(v0 + 40);
    os_log_type_t v6 = *(void *)(v0 + 48);
  }
  else
  {
    BOOL v7 = -1 << *(unsigned char *)(v1 + 32);
    uint64_t v3 = v1 + 56;
    uint64_t v5 = ~v7;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    os_log_type_t v6 = v9 & *(void *)(v1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    id v4 = 0;
  }
  *(void *)(v0 + 192) = result;
  *(void *)(v0 + 200) = v3;
  *(void *)(v0 + 216) = v4;
  *(void *)(v0 + 224) = v6;
  *(void *)(v0 + 208) = v5;
  if (result < 0)
  {
    uint64_t v14 = __CocoaSet.Iterator.next()();
    if (!v14) {
      goto LABEL_31;
    }
    *(void *)(v0 + 104) = v14;
    type metadata accessor for RemoteConversationClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    unint64_t v13 = *(void *)(v0 + 96);
    swift_unknownObjectRelease();
    uint64_t v12 = v4;
    uint64_t v10 = v6;
  }
  else
  {
    if (v6)
    {
      uint64_t v10 = (v6 - 1) & v6;
      id v11 = __clz(__rbit64(v6)) | (v4 << 6);
      uint64_t v12 = v4;
    }
    else
    {
      uint64_t v19 = v4 + 1;
      if (__OFADD__(v4, 1))
      {
        __break(1u);
        return result;
      }
      uint64_t v20 = (unint64_t)(v5 + 64) >> 6;
      if (v19 >= v20) {
        goto LABEL_31;
      }
      uint64_t v21 = *(void *)(v3 + 8 * v19);
      uint64_t v12 = v4 + 1;
      if (!v21)
      {
        uint64_t v12 = v4 + 2;
        if (v4 + 2 >= v20) {
          goto LABEL_31;
        }
        uint64_t v21 = *(void *)(v3 + 8 * v12);
        if (!v21)
        {
          uint64_t v12 = v4 + 3;
          if (v4 + 3 >= v20) {
            goto LABEL_31;
          }
          uint64_t v21 = *(void *)(v3 + 8 * v12);
          if (!v21)
          {
            uint64_t v12 = v4 + 4;
            if (v4 + 4 >= v20) {
              goto LABEL_31;
            }
            uint64_t v21 = *(void *)(v3 + 8 * v12);
            if (!v21)
            {
              uint64_t v22 = v4 + 5;
              while (v20 != v22)
              {
                uint64_t v21 = *(void *)(v3 + 8 * v22++);
                if (v21)
                {
                  uint64_t v12 = v22 - 1;
                  goto LABEL_20;
                }
              }
              goto LABEL_31;
            }
          }
        }
      }
LABEL_20:
      uint64_t v10 = (v21 - 1) & v21;
      id v11 = __clz(__rbit64(v21)) + (v12 << 6);
    }
    unint64_t v13 = *(void *)(*(void *)(result + 48) + 8 * v11);
    swift_retain();
  }
  *(void *)(v0 + 240) = v12;
  *(void *)(v0 + 248) = v10;
  *(void *)(v0 + 232) = v13;
  if (v13)
  {
    unint64_t v15 = **(void **)(v0 + 128);
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 256) = v16;
    *uint64_t v16 = v0;
    v16[1] = ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:);
    uint64_t v17 = *(void *)(v0 + 160);
    unint64_t v18 = *(void *)(v0 + 112);
    return RemoteConversationClient.accept(input:speechData:)(v17, v18, v15);
  }
LABEL_31:
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23(0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(void);
  uint64_t (*v29)(uint64_t, uint64_t);
  uint64_t v30;

  uint64_t v1 = *(void *)(v0 + 120);
  if ((v1 & 0xC000000000000001) != 0)
  {
    if (__CocoaSet.count.getter())
    {
LABEL_3:
      uint64_t v2 = *(void **)(v0 + 136);
      uint64_t v3 = v2[6];
      id v4 = v2[7];
      __swift_project_boxed_opaque_existential_1(v2 + 3, v3);
      unint64_t v29 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v4 + 8) + **(int **)(v4 + 8));
      uint64_t v5 = (void *)swift_task_alloc();
      *(void *)(v0 + 184) = v5;
      *uint64_t v5 = v0;
      v5[1] = ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:);
      return v29(v3, v4);
    }
  }
  else if (*(void *)(v1 + 16))
  {
    goto LABEL_3;
  }
  BOOL v7 = *(void *)(v0 + 120);
  if ((v7 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for RemoteConversationClient();
    lazy protocol witness table accessor for type PluginAction and conformance PluginAction(&lazy protocol witness table cache variable for type RemoteConversationClient and conformance RemoteConversationClient, (void (*)(uint64_t))type metadata accessor for RemoteConversationClient);
    Set.Iterator.init(_cocoa:)();
    uint64_t result = *(void *)(v0 + 16);
    uint64_t v8 = *(void *)(v0 + 24);
    uint64_t v10 = *(void *)(v0 + 32);
    uint64_t v9 = *(void *)(v0 + 40);
    id v11 = *(void *)(v0 + 48);
  }
  else
  {
    uint64_t v12 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v8 = v7 + 56;
    uint64_t v10 = ~v12;
    unint64_t v13 = -v12;
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    id v11 = v14 & *(void *)(v7 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v9 = 0;
  }
  *(void *)(v0 + 192) = result;
  *(void *)(v0 + 200) = v8;
  *(void *)(v0 + 216) = v9;
  *(void *)(v0 + 224) = v11;
  *(void *)(v0 + 208) = v10;
  if (result < 0)
  {
    uint64_t v19 = __CocoaSet.Iterator.next()();
    if (!v19) {
      goto LABEL_37;
    }
    *(void *)(v0 + 104) = v19;
    type metadata accessor for RemoteConversationClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    unint64_t v18 = *(void *)(v0 + 96);
    swift_unknownObjectRelease();
    uint64_t v17 = v9;
    unint64_t v15 = v11;
  }
  else
  {
    if (v11)
    {
      unint64_t v15 = (v11 - 1) & v11;
      uint64_t v16 = __clz(__rbit64(v11)) | (v9 << 6);
      uint64_t v17 = v9;
    }
    else
    {
      uint64_t v24 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        return result;
      }
      uint64_t v25 = (unint64_t)(v10 + 64) >> 6;
      if (v24 >= v25) {
        goto LABEL_37;
      }
      int64_t v26 = *(void *)(v8 + 8 * v24);
      uint64_t v17 = v9 + 1;
      if (!v26)
      {
        uint64_t v17 = v9 + 2;
        if (v9 + 2 >= v25) {
          goto LABEL_37;
        }
        int64_t v26 = *(void *)(v8 + 8 * v17);
        if (!v26)
        {
          uint64_t v17 = v9 + 3;
          if (v9 + 3 >= v25) {
            goto LABEL_37;
          }
          int64_t v26 = *(void *)(v8 + 8 * v17);
          if (!v26)
          {
            uint64_t v17 = v9 + 4;
            if (v9 + 4 >= v25) {
              goto LABEL_37;
            }
            int64_t v26 = *(void *)(v8 + 8 * v17);
            if (!v26)
            {
              int64_t v27 = v9 + 5;
              while (v25 != v27)
              {
                int64_t v26 = *(void *)(v8 + 8 * v27++);
                if (v26)
                {
                  uint64_t v17 = v27 - 1;
                  goto LABEL_26;
                }
              }
              goto LABEL_37;
            }
          }
        }
      }
LABEL_26:
      unint64_t v15 = (v26 - 1) & v26;
      uint64_t v16 = __clz(__rbit64(v26)) + (v17 << 6);
    }
    unint64_t v18 = *(void *)(*(void *)(result + 48) + 8 * v16);
    swift_retain();
  }
  *(void *)(v0 + 240) = v17;
  *(void *)(v0 + 248) = v15;
  *(void *)(v0 + 232) = v18;
  if (v18)
  {
    uint64_t v20 = **(void **)(v0 + 128);
    uint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 256) = v21;
    *uint64_t v21 = v0;
    v21[1] = ConversationHelper.selectActiveConversation(input:activeConversations:conversationHelperInput:);
    uint64_t v22 = *(void *)(v0 + 160);
    uint64_t v23 = *(void *)(v0 + 112);
    return RemoteConversationClient.accept(input:speechData:)(v22, v23, v20);
  }
LABEL_37:
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28(0);
}

uint64_t protocol witness for Waitable.wait() in conformance ConcurrentTaskPool()
{
  id v4 = (uint64_t (*)(void))(*(void *)(**(void **)v0 + 136) + **(int **)(**(void **)v0 + 136));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v4();
}

uint64_t ConcurrentTaskPool.wait()()
{
  swift_task_dealloc();
  return MEMORY[0x1F4188298](ConcurrentTaskPool.wait(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 24) = v0;
  return MEMORY[0x1F4188298](ConcurrentTaskPool.wait(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v11;

  uint64_t v1 = v0[5];
  uint64_t v3 = v0[3];
  uint64_t v2 = (os_unfair_lock_s *)v0[4];
  swift_release_n();
  id v4 = v2 + 4;
  uint64_t v5 = swift_task_alloc();
  *(void *)(v5 + 16) = partial apply for closure #1 in ConcurrentTaskPool.wait();
  *(void *)(v5 + 24) = v3;
  os_unfair_lock_lock(v4);
  _s2os21OSAllocatedUnfairLockVAAytRszlE04withD0yqd__qd__yYbKXEKs8SendableRd__lFqd__ytz_tYbKXEfU_ScTyyts5NeverOGSg_TG5TA_0(v0 + 2);
  if (v1)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v0[4] + 16));
    return swift_task_dealloc();
  }
  else
  {
    v0[5] = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)(v0[4] + 16));
    BOOL v7 = v0[2];
    v0[6] = v7;
    swift_task_dealloc();
    if (v7)
    {
      swift_retain();
      uint64_t v8 = (void *)swift_task_alloc();
      v0[7] = v8;
      *uint64_t v8 = v0;
      v8[1] = ConcurrentTaskPool.wait();
      uint64_t v9 = MEMORY[0x1E4FBC848] + 8;
      return MEMORY[0x1F4187DC0](v8, v7, v9);
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(void))v0[1];
      return v10();
    }
  }
}

{
  void *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = v0[3];
  uint64_t v2 = *(os_unfair_lock_s **)(v1 + 24);
  v0[4] = v2;
  uint64_t v3 = v2 + 4;
  id v4 = swift_task_alloc();
  *(void *)(v4 + 16) = partial apply for closure #1 in ConcurrentTaskPool.wait();
  *(void *)(v4 + 24) = v1;
  os_unfair_lock_lock(v3);
  _s2os21OSAllocatedUnfairLockVAAytRszlE04withD0yqd__qd__yYbKXEKs8SendableRd__lFqd__ytz_tYbKXEfU_ScTyyts5NeverOGSg_TG5TA_0(v0 + 2);
  v0[5] = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(v0[4] + 16));
  uint64_t v5 = v0[2];
  v0[6] = v5;
  swift_task_dealloc();
  if (v5)
  {
    swift_retain();
    os_log_type_t v6 = (void *)swift_task_alloc();
    v0[7] = v6;
    *os_log_type_t v6 = v0;
    v6[1] = ConcurrentTaskPool.wait();
    BOOL v7 = MEMORY[0x1E4FBC848] + 8;
    return MEMORY[0x1F4187DC0](v6, v5, v7);
  }
  else
  {
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t partial apply for closure #1 in ConcurrentTaskPool.wait()@<X0>(void *a1@<X8>)
{
  return closure #1 in ConcurrentTaskPool.wait()(v1, a1);
}

uint64_t closure #1 in ConcurrentTaskPool.wait()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1 + 16;
  uint64_t result = swift_beginAccess();
  uint64_t v6 = *(void *)(a1 + 16);
  if (!*(void *)(v6 + 16))
  {
    uint64_t v7 = 0;
    goto LABEL_5;
  }
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)v4 + 16))
  {
    swift_retain();
    swift_retain();
    specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    swift_endAccess();
    uint64_t result = swift_release();
LABEL_5:
    *a2 = v7;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t RemoteConversationClient.accept(input:speechData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[8] = a3;
  v4[9] = v3;
  v4[6] = a1;
  v4[7] = a2;
  v4[10] = type metadata accessor for UserInputResult();
  v4[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Input();
  v4[12] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[13] = v6;
  v4[14] = *(void *)(v6 + 64);
  v4[15] = swift_task_alloc();
  return MEMORY[0x1F4188298](RemoteConversationClient.accept(input:speechData:), v3, 0);
}

uint64_t RemoteConversationClient.accept(input:speechData:)()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = v0[15];
  uint64_t v21 = v0[14];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[13];
  uint64_t v5 = (char *)v0[8];
  uint64_t v4 = (void *)v0[9];
  uint64_t v6 = v0[7];
  uint64_t v7 = type metadata accessor for Logger();
  v0[16] = __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v9 = *(void *)&v5[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId];
  uint64_t v8 = *(void *)&v5[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId + 8];
  swift_beginAccess();
  v4[21] = v9;
  v4[22] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = v4 + 16;
  uint64_t v11 = v4[19];
  uint64_t v12 = v4[20];
  __swift_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v6, v2);
  unint64_t v13 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v14 = swift_allocObject();
  v0[17] = v14;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v14 + v13, v1, v2);
  *(void *)(v14 + ((v21 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) = v5;
  uint64_t v20 = (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 + 8)
                                                                                    + **(int **)(v12 + 8));
  unint64_t v15 = v5;
  uint64_t v16 = (void *)swift_task_alloc();
  v0[18] = v16;
  *uint64_t v16 = v0;
  v16[1] = RemoteConversationClient.accept(input:speechData:);
  uint64_t v17 = v0[10];
  uint64_t v18 = v0[6];
  return v20(v18, &async function pointer to partial apply for closure #1 in RemoteConversationClient.accept(input:speechData:), v14, v17, v11, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 72);
    uint64_t v4 = RemoteConversationClient.accept(input:speechData:);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 72);
    swift_release();
    uint64_t v4 = RemoteConversationClient.accept(input:speechData:);
    uint64_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

uint64_t partial apply for closure #1 in RemoteConversationClient.accept(input:speechData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(type metadata accessor for Input() - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v3 + v9;
  uint64_t v11 = *(void *)(v3 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v12;
  *uint64_t v12 = v4;
  v12[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in RemoteConversationClient.accept(input:speechData:)(a1, a2, a3, v10, v11);
}

uint64_t closure #1 in RemoteConversationClient.accept(input:speechData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for Input();
  v5[7] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[8] = v7;
  v5[9] = *(void *)(v7 + 64);
  v5[10] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationClient.accept(input:speechData:), 0, 0);
}

uint64_t closure #1 in RemoteConversationClient.accept(input:speechData:)()
{
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = *(void **)(v0 + 48);
  long long v15 = *(_OWORD *)(v0 + 24);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v1, *(void *)(v0 + 40), v3);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v7 = (v2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 88) = v8;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v6, v1, v3);
  *(_OWORD *)(v8 + v7) = v15;
  *(void *)(v8 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)) = v5;
  swift_unknownObjectRetain();
  id v9 = v5;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 96) = v10;
  *(void *)(v10 + 16) = partial apply for closure #1 in closure #1 in RemoteConversationClient.accept(input:speechData:);
  *(void *)(v10 + 24) = v8;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v11;
  uint64_t v12 = type metadata accessor for UserInputResult();
  *uint64_t v11 = v0;
  v11[1] = closure #1 in RemoteConversationClient.accept(input:speechData:);
  uint64_t v13 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188160](v13, 0, 0, 0xD000000000000028, 0x80000001BA063410, closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:)specialized partial apply, v10, v12);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v2 = *v1;
  *(void *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in RemoteConversationClient.accept(input:speechData:), 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t closure #1 in closure #1 in RemoteConversationClient.accept(input:speechData:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = a5;
  uint64_t v19 = a1;
  id v20 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UserInputResult, Error>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  type metadata accessor for Input();
  lazy protocol witness table accessor for type RemoteConversationClient and conformance RemoteConversationClient((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, 255, MEMORY[0x1E4FA1EE0]);
  uint64_t v9 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v11 = v10;
  uint64_t result = swift_release();
  if (!v5)
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v19, v6);
    unint64_t v13 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v14 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v14 + v13, (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
    aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.accept(input:speechData:);
    aBlock[5] = v14;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed ConversationCanHandleResult) -> ();
    aBlock[3] = &block_descriptor_155;
    long long v15 = _Block_copy(aBlock);
    swift_release();
    Class v16 = isa;
    objc_msgSend(v20, sel_acceptWithInputData_speechData_reply_, isa, v22, v15);
    _Block_release(v15);

    return outlined consume of Data._Representation(v9, v11);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type RemoteConversationClient and conformance RemoteConversationClient(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Void __swiftcall RemoteConversationSpeechData.encode(with:)(NSCoder with)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLRoutingDecisionMessage.GenAIFallbackSuppressReason?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NLRoutingDecisionMessage.GenAIFallbackSuppressReason();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId), *(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId + 8));
  uint64_t v12 = (void *)MEMORY[0x1BA9E2DD0](1682531186, 0xE400000000000000);
  [(objc_class *)with.super.isa encodeObject:v11 forKey:v12];

  uint64_t v13 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_asrOnDevice);
  uint64_t v14 = (void *)MEMORY[0x1BA9E2DD0](0x7665446E4F727361, 0xEB00000000656369);
  [(objc_class *)with.super.isa encodeBool:v13 forKey:v14];

  uint64_t v15 = *(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForRecognizedUser);
  Class v16 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000021, 0x80000001BA0673E0);
  [(objc_class *)with.super.isa encodeObject:v15 forKey:v16];

  uint64_t v17 = *(void *)(v2
                  + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_userSpecificInfoForUserMeetingSessionThreshold);
  uint64_t v18 = (void *)MEMORY[0x1BA9E2DD0](0xD00000000000002ELL, 0x80000001BA067410);
  [(objc_class *)with.super.isa encodeObject:v17 forKey:v18];

  uint64_t v19 = *(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_speechPackage);
  id v20 = (void *)MEMORY[0x1BA9E2DD0](0x6150686365657073, 0xED00006567616B63);
  [(objc_class *)with.super.isa encodeObject:v19 forKey:v20];

  if (*(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_utterance + 8)) {
    uint64_t v21 = MEMORY[0x1BA9E2DD0](*(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_utterance));
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = (void *)MEMORY[0x1BA9E2DD0](0x636E617265747475, 0xE900000000000065);
  [(objc_class *)with.super.isa encodeObject:v21 forKey:v22];
  swift_unknownObjectRelease();

  if (*(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_responseLanguageVariant + 8)) {
    uint64_t v23 = MEMORY[0x1BA9E2DD0](*(void *)(v2
  }
                                        + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_responseLanguageVariant));
  else {
    uint64_t v23 = 0;
  }
  uint64_t v24 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000017, 0x80000001BA06BA30);
  [(objc_class *)with.super.isa encodeObject:v23 forKey:v24];
  swift_unknownObjectRelease();

  if (*(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_requestLanguageVariant + 8)) {
    uint64_t v25 = MEMORY[0x1BA9E2DD0](*(void *)(v2
  }
                                        + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_requestLanguageVariant));
  else {
    uint64_t v25 = 0;
  }
  int64_t v26 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000016, 0x80000001BA06BA50);
  [(objc_class *)with.super.isa encodeObject:v25 forKey:v26];
  swift_unknownObjectRelease();

  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  outlined init with copy of NLRoutingDecisionMessage.GenAIFallbackSuppressReason?(v2 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_genAIFallbackSuppressReason, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of NLRoutingDecisionMessage.GenAIFallbackSuppressReason?((uint64_t)v6);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    lazy protocol witness table accessor for type ExecutionLocation and conformance ExecutionLocation(&lazy protocol witness table cache variable for type NLRoutingDecisionMessage.GenAIFallbackSuppressReason and conformance NLRoutingDecisionMessage.GenAIFallbackSuppressReason, MEMORY[0x1E4FA2130]);
    uint64_t v27 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v29 = v28;
    v30.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    v44[0] = v10;
    Class isa = v30.super.isa;
    outlined consume of Data._Representation(v27, v29);
    uint64_t v32 = isa;
    uint64_t v33 = (void *)MEMORY[0x1BA9E2DD0](0xD00000000000001BLL, 0x80000001BA06BAB0);
    [(objc_class *)with.super.isa encodeObject:v32 forKey:v33];

    (*(void (**)(void, uint64_t))(v8 + 8))(v44[0], v7);
  }
  type metadata accessor for ExecutionLocation();
  lazy protocol witness table accessor for type ExecutionLocation and conformance ExecutionLocation(&lazy protocol witness table cache variable for type ExecutionLocation and conformance ExecutionLocation, MEMORY[0x1E4FA5260]);
  uint64_t v34 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v36 = v35;
  Class v37 = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v34, v36);
  uint64_t v38 = (void *)MEMORY[0x1BA9E2DD0](0x7461636F4C727361, 0xEB000000006E6F69);
  [(objc_class *)with.super.isa encodeObject:v37 forKey:v38];

  uint64_t v39 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v41 = v40;
  Class v42 = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v39, v41);
  uint64_t v43 = (void *)MEMORY[0x1BA9E2DD0](0x697461636F4C6C6ELL, 0xEA00000000006E6FLL);
  [(objc_class *)with.super.isa encodeObject:v42 forKey:v43];
  swift_release();
}

uint64_t lazy protocol witness table accessor for type ExecutionLocation and conformance ExecutionLocation(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

void partial apply for closure #1 in static ConversationBridge.sendShowRequestHandlingStatus(withStatus:serviceHelper:requestId:completion:)(uint64_t a1, void *a2)
{
  closure #1 in static ConversationBridge.sendShowRequestHandlingStatus(withStatus:serviceHelper:requestId:completion:)(a1, a2, *(void **)(v2 + 16), *(void (**)(void, void))(v2 + 24));
}

void closure #1 in static ConversationBridge.sendShowRequestHandlingStatus(withStatus:serviceHelper:requestId:completion:)(uint64_t a1, void *a2, void *a3, void (*a4)(void, void))
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  id v9 = a3;
  id v10 = a2;
  id v11 = v9;
  id v12 = a2;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v13, v14))
  {

    if (!a4) {
      return;
    }
    goto LABEL_7;
  }
  uint64_t v15 = swift_slowAlloc();
  uint64_t v22 = swift_slowAlloc();
  uint64_t v24 = v22;
  *(_DWORD *)uint64_t v15 = 136315394;
  id v16 = objc_msgSend(v11, sel_debugDescription);
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = a4;
  unint64_t v19 = v18;

  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, &v24);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  *(_WORD *)(v15 + 12) = 2080;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
  uint64_t v20 = Optional.debugDescription.getter();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v24);
  a4 = v23;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();

  _os_log_impl(&dword_1B9C64000, v13, v14, "Sent %s with error: %s", (uint8_t *)v15, 0x16u);
  swift_arrayDestroy();
  MEMORY[0x1BA9E48C0](v22, -1, -1);
  MEMORY[0x1BA9E48C0](v15, -1, -1);

  if (v23) {
LABEL_7:
  }
    a4(a1, a2);
}

id FlowExtensionUserInputResultXPC.init(coder:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v4 = (void *)MEMORY[0x1BA9E2DD0](1701869940, 0xE400000000000000);
  id v5 = objc_msgSend(a1, sel_decodeIntegerForKey_, v4);

  if ((unint64_t)v5 >= 4)
  {

    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    id v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v14 = 0;
      _os_log_impl(&dword_1B9C64000, v12, v13, "Could not decode FlowExtensionUserInputResultXPC: unknown .type", v14, 2u);
      MEMORY[0x1BA9E48C0](v14, -1, -1);
    }

    type metadata accessor for FlowExtensionUserInputResultXPC();
    swift_deallocPartialClassInstance();
    return 0;
  }
  else
  {
    *(void *)&v3[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_type] = v5;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSError);
    *(void *)&v3[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_error] = NSCoder.decodeObject<A>(of:forKey:)();
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSData);
    uint64_t v6 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v6)
    {
      uint64_t v7 = (void *)v6;
      uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v10 = v9;
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v10 = 0xF000000000000000;
    }
    id v16 = (uint64_t *)&v3[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_reformedInputData];
    *id v16 = v8;
    v16[1] = v10;
    uint64_t v17 = (void *)MEMORY[0x1BA9E2DD0](0x6564756C637865, 0xE700000000000000);
    unsigned __int8 v18 = objc_msgSend(a1, sel_decodeBoolForKey_, v17);

    v3[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_exclude] = v18;
    v20.receiver = v3;
    v20.super_class = (Class)type metadata accessor for FlowExtensionUserInputResultXPC();
    id v15 = objc_msgSendSuper2(&v20, sel_init);
  }
  return v15;
}

uint64_t type metadata accessor for FlowExtensionUserInputResultXPC()
{
  return self;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:)(uint64_t a1)
{
  return partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in RemoteConversationClient.ensureReady()(a1, &demangling cache variable for type metadata for CheckedContinuation<UserInputResult, Error>, (uint64_t (*)(uint64_t, unint64_t))closure #1 in closure #1 in closure #1 in RemoteConversationClient.accept(input:speechData:));
}

uint64_t closure #1 in closure #1 in closure #1 in RemoteConversationClient.accept(input:speechData:)(void *a1)
{
  uint64_t v2 = type metadata accessor for UserInputResult();
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0x78))(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<UserInputResult, Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t FlowExtensionUserInputResultXPC.swiftRepresentation()@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v4 = type metadata accessor for Input();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(*(void *)(v1 + OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_type))
  {
    case 0:
      type metadata accessor for UserInputResult();
      goto LABEL_9;
    case 1:
      *a1 = *(unsigned char *)(v1 + OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_exclude);
      type metadata accessor for UserInputResult();
      goto LABEL_9;
    case 2:
      unint64_t v8 = *(void *)(v1 + OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_reformedInputData + 8);
      if (v8 >> 60 == 15) {
        goto LABEL_12;
      }
      uint64_t v9 = *(void *)(v1 + OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_reformedInputData);
      type metadata accessor for PropertyListDecoder();
      swift_allocObject();
      outlined copy of Data._Representation(v9, v8);
      PropertyListDecoder.init()();
      lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type Input and conformance Input);
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      outlined consume of Data?(v9, v8);
      uint64_t result = swift_release();
      if (!v2)
      {
        (*(void (**)(unsigned char *, char *, uint64_t))(v5 + 32))(a1, v7, v4);
        type metadata accessor for UserInputResult();
LABEL_9:
        uint64_t result = swift_storeEnumTagMultiPayload();
      }
      break;
    case 3:
      uint64_t v11 = *(void **)(v1 + OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_error);
      if (!v11) {
        goto LABEL_13;
      }
      v11;
      uint64_t result = swift_willThrow();
      break;
    default:
      v12[1] = *(void *)(v1 + OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_type);
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
LABEL_12:
      specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000046, 0x80000001BA0716A0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/RemoteConversation/XPCTypes/UserInputResult.swift", 118, 2, 112);
      __break(1u);
LABEL_13:
      uint64_t result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000035, 0x80000001BA0715E0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/RemoteConversation/XPCTypes/UserInputResult.swift", 118, 2, 119);
      __break(1u);
      break;
  }
  return result;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

void *initializeWithCopy for UserInputResult(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for Input();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t destroy for UserInputResult(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    uint64_t v3 = type metadata accessor for Input();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  return result;
}

unint64_t UserInputResult.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Input();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UserInputResult();
  MEMORY[0x1F4188790](v6);
  unint64_t v8 = (unsigned __int8 *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UserInputResult(v1, (uint64_t)v8);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, unsigned __int8 *, uint64_t))(v3 + 32))(v5, v8, v2);
      unint64_t v22 = 0;
      unint64_t v23 = 0xE000000000000000;
      _StringGuts.grow(_:)(18);
      swift_bridgeObjectRelease();
      unint64_t v22 = 0x656D726F6665722ELL;
      unint64_t v23 = 0xEF287475706E4964;
      v10._uint64_t countAndFlagsBits = Input.description.getter();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11._uint64_t countAndFlagsBits = 41;
      v11._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      uint64_t v13 = v22;
      id v12 = (void *)v23;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    else
    {
      id v12 = (void *)0xEF7475706E496465;
      uint64_t v13 = 0x74726F707075732ELL;
    }
  }
  else
  {
    int v14 = *v8;
    unint64_t v22 = 0;
    unint64_t v23 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    unint64_t v22 = 0xD00000000000001BLL;
    unint64_t v23 = 0x80000001BA0715C0;
    if (v14) {
      uint64_t v15 = 1702195828;
    }
    else {
      uint64_t v15 = 0x65736C6166;
    }
    if (v14) {
      unint64_t v16 = 0xE400000000000000;
    }
    else {
      unint64_t v16 = 0xE500000000000000;
    }
    unint64_t v17 = v16;
    String.append(_:)(*(Swift::String *)&v15);
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 41;
    v18._unint64_t object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    uint64_t v13 = v22;
    id v12 = (void *)v23;
  }
  unint64_t v22 = 0;
  unint64_t v23 = 0xE000000000000000;
  _StringGuts.grow(_:)(19);
  swift_bridgeObjectRelease();
  unint64_t v22 = 0xD000000000000010;
  unint64_t v23 = 0x80000001BA0715A0;
  v19._uint64_t countAndFlagsBits = v13;
  v19._unint64_t object = v12;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 41;
  v20._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  return v22;
}

uint64_t outlined init with copy of UserInputResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UserInputResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of RemoteConversationOrReformedInput(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of RemoteConversationOrReformedInput(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of RemoteConversationOrReformedInput(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *DecisionEngine.getRREntities()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_1B9C64000, v7, v8, "[DecisionEngine] Beginning collecting the RRCandidates", v9, 2u);
    MEMORY[0x1BA9E48C0](v9, -1, -1);
  }

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  id v10 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 48), *(void *)(v1 + 72));
  Swift::String v11 = (void *)dispatch thunk of ReferenceResolutionClientProtocol.retrieveSalientEntities()();
  id v12 = v11;
  if (v13)
  {
    outlined copy of Result<[RRCandidate], Error>(v11, 1);
    id v23 = v12;
    id v24 = v12;
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v34 = v3;
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v35 = (uint64_t)v12;
      uint64_t v36 = v28;
      *(_DWORD *)uint64_t v27 = 136315138;
      id v29 = v12;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v30 = String.init<A>(describing:)();
      uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v36);
      uint64_t v3 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Result<[RRCandidate], Error>(v12, 1);
      outlined consume of Result<[RRCandidate], Error>(v12, 1);
      _os_log_impl(&dword_1B9C64000, v25, v26, "[DecisionEngine] Error when retrieving RRCandidates : %s", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v28, -1, -1);
      MEMORY[0x1BA9E48C0](v27, -1, -1);
    }
    else
    {
      outlined consume of Result<[RRCandidate], Error>(v12, 1);
      outlined consume of Result<[RRCandidate], Error>(v12, 1);
    }

    outlined consume of Result<[RRCandidate], Error>(v12, 1);
    outlined consume of Result<[RRCandidate], Error>(v12, 1);
    id v12 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    outlined copy of Result<[RRCandidate], Error>(v11, 0);
    outlined copy of Result<[RRCandidate], Error>(v12, 0);
    swift_bridgeObjectRetain();
    int v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v33 = v2;
      unint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v36 = v17;
      uint64_t v34 = v3;
      *(_DWORD *)unint64_t v16 = 136315138;
      uint64_t v18 = type metadata accessor for RRCandidate();
      uint64_t v19 = swift_bridgeObjectRetain();
      uint64_t v20 = MEMORY[0x1BA9E3080](v19, v18);
      unint64_t v22 = v21;
      outlined consume of Result<[RRCandidate], Error>(v12, 0);
      uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v36);
      uint64_t v3 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v2 = v33;
      swift_bridgeObjectRelease();
      outlined consume of Result<[RRCandidate], Error>(v12, 0);
      outlined consume of Result<[RRCandidate], Error>(v12, 0);
      _os_log_impl(&dword_1B9C64000, v14, v15, "[DecisionEngine] RRCandidates: %s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v17, -1, -1);
      MEMORY[0x1BA9E48C0](v16, -1, -1);
    }
    else
    {
      outlined consume of Result<[RRCandidate], Error>(v12, 0);
      outlined consume of Result<[RRCandidate], Error>(v12, 0);
    }

    outlined consume of Result<[RRCandidate], Error>(v12, 0);
  }
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v12;
}

id outlined copy of Result<[RRCandidate], Error>(id a1, char a2)
{
  if (a2) {
    return a1;
  }
  else {
    return (id)swift_bridgeObjectRetain();
  }
}

void outlined consume of Result<[RRCandidate], Error>(id a1, char a2)
{
  if (a2) {

  }
  else {
    swift_bridgeObjectRelease();
  }
}

uint64_t ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[55] = a3;
  v4[56] = v3;
  v4[53] = a1;
  v4[54] = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
  v4[57] = v5;
  v4[58] = *(void *)(v5 - 8);
  v4[59] = swift_task_alloc();
  type metadata accessor for CamParse();
  v4[60] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ActionCandidate();
  v4[61] = v6;
  v4[62] = *(void *)(v6 - 8);
  v4[63] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for USOParse();
  v4[64] = v7;
  v4[65] = *(void *)(v7 - 8);
  v4[66] = swift_task_alloc();
  v4[67] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v4[68] = swift_task_alloc();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Siri_Nlu_External_UserParse));
  v4[69] = v8;
  v4[70] = *(void *)(v8 - 8);
  v4[71] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: Siri_Nlu_External_UserParse)?);
  v4[72] = swift_task_alloc();
  v4[73] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v4[74] = v9;
  v4[75] = *(void *)(v9 - 8);
  v4[76] = swift_task_alloc();
  v4[77] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  v4[78] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Parse();
  v4[79] = v10;
  v4[80] = *(void *)(v10 - 8);
  v4[81] = swift_task_alloc();
  v4[82] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for UUID();
  v4[83] = v11;
  v4[84] = *(void *)(v11 - 8);
  v4[85] = swift_task_alloc();
  v4[86] = swift_task_alloc();
  v4[87] = swift_task_alloc();
  v4[88] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for NLRouterParse();
  v4[89] = v12;
  v4[90] = *(void *)(v12 - 8);
  v4[91] = swift_task_alloc();
  v4[92] = swift_task_alloc();
  v4[93] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for NLRouterParse.InputCandidate();
  v4[94] = v13;
  v4[95] = *(void *)(v13 - 8);
  v4[96] = swift_task_alloc();
  v4[97] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for Siri_Nlu_External_Parser();
  v4[98] = v14;
  v4[99] = *(void *)(v14 - 8);
  v4[100] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  v4[101] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for Siri_Nlu_External_UserParse();
  v4[102] = v15;
  v4[103] = *(void *)(v15 - 8);
  v4[104] = swift_task_alloc();
  v4[105] = swift_task_alloc();
  v4[106] = swift_task_alloc();
  v4[107] = swift_task_alloc();
  v4[108] = swift_task_alloc();
  v4[109] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for USOParse?);
  v4[110] = swift_task_alloc();
  v4[111] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  v4[112] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
  v4[113] = v16;
  v4[114] = *(void *)(v16 - 8);
  v4[115] = swift_task_alloc();
  v4[116] = swift_task_alloc();
  return MEMORY[0x1F4188298](ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:), 0, 0);
}

{
  void *v3;
  void *v4;
  uint64_t v6;

  uint64_t v4 = (void *)*v3;
  v4[121] = a1;
  v4[122] = a2;
  v4[123] = a3;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:), 0, 0);
}

uint64_t ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:)()
{
  uint64_t v161 = v0;
  char v1 = *(unsigned char *)(v0 + 1184);
  uint64_t v2 = *(void *)(v0 + 1120);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0 + 1104);
  uint64_t v4 = *(void *)(v0 + 864);
  uint64_t v5 = *(void *)(v0 + 824);
  uint64_t v157 = *(void *)(v0 + 816);
  uint64_t v6 = *(void *)(v0 + 696);
  uint64_t v7 = *(void *)(v0 + 664);
  *(void *)(v2 + 72) = MEMORY[0x1E4FBB390];
  *(unsigned char *)(v2 + 48) = v1;
  unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(v2);
  uint64_t v9 = *(void *)(v0 + 384);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v160 = v9;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8, v6, isUniquelyReferenced_nonNull_native);
  *(void *)(v0 + 384) = v9;
  swift_bridgeObjectRelease();
  v3(v6, v7);
  USOParse.userParse.getter();
  LOBYTE(v9) = Siri_Nlu_External_UserParse.isSNLC.getter();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v11(v4, v157);
  if (v9)
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_1B9C64000, v12, v13, "[ActionGenerator] Found SNLC parse. Generating dummy action candidate", v14, 2u);
      MEMORY[0x1BA9E48C0](v14, -1, -1);
    }
    uint64_t v15 = *(void (**)(void))(v0 + 1088);
    uint64_t v16 = *(void *)(v0 + 696);
    uint64_t v17 = *(void *)(v0 + 688);
    uint64_t v18 = *(void *)(v0 + 664);
    uint64_t v19 = *(void *)(v0 + 496);
    uint64_t v147 = *(void *)(v0 + 504);
    uint64_t v20 = *(void **)(v0 + 480);
    uint64_t v158 = *(void *)(v0 + 488);
    uint64_t v153 = *(void *)(v0 + 472);
    uint64_t v149 = *(void *)(v0 + 456);

    Parse.asCamParse()(v20);
    ((void (*)(uint64_t, uint64_t, uint64_t))v15)(v16, v17, v18);
    ActionCandidate.init(flowHandlerId:parse:affinityScore:loggingId:userData:)();
    uint64_t v21 = v153 + *(int *)(v149 + 48);
    v15();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v21, v147, v158);
    unint64_t v22 = *(char *__ptr32 **)(v0 + 360);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_53:
    }
      unint64_t v22 = (char *__ptr32 *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v22 + 2) + 1, 1, (unint64_t)v22, &demangling cache variable for type metadata for _ContiguousArrayStorage<(uuid: UUID, actionCandidate: ActionCandidate)>, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    unint64_t v24 = *((void *)v22 + 2);
    unint64_t v23 = *((void *)v22 + 3);
    if (v24 >= v23 >> 1) {
      unint64_t v22 = (char *__ptr32 *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1, (unint64_t)v22, &demangling cache variable for type metadata for _ContiguousArrayStorage<(uuid: UUID, actionCandidate: ActionCandidate)>, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    }
    uint64_t v26 = *(void *)(v0 + 464);
    uint64_t v25 = *(void *)(v0 + 472);
    *((void *)v22 + 2) = v24 + 1;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v25, (uint64_t)v22+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(void *)(v26 + 72) * v24, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    *(void *)(v0 + 360) = v22;
  }
  uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 1104);
  uint64_t v159 = *(void *)(v0 + 1056);
  uint64_t v28 = *(void *)(v0 + 688);
  uint64_t v29 = *(void *)(v0 + 664);
  uint64_t v30 = *(void *)(v0 + 536);
  uint64_t v31 = *(void *)(v0 + 520);
  uint64_t v32 = *(void *)(v0 + 512);
  uint64_t v33 = *(void *)(v0 + 1080) + 1;
  (*(void (**)(void, void))(*(void *)(v0 + 640) + 8))(*(void *)(v0 + 648), *(void *)(v0 + 632));
  v27(v28, v29);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
  unint64_t v22 = &off_1BA04F000;
  if (v33 == v159)
  {
    swift_bridgeObjectRelease();
    v11(*(void *)(v0 + 832), *(void *)(v0 + 816));
    while (1)
    {
      uint64_t v34 = *(void *)(v0 + 1040);
      unint64_t v35 = *(void *)(v0 + 1024);
      uint64_t v36 = *(void *)(v0 + 952);
      unint64_t v37 = *(void *)(v36 + 16);
      if (v35 == v37)
      {
        (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 560) + 56))(*(void *)(v0 + 576), 1, 1, *(void *)(v0 + 552));
      }
      else
      {
        if (v35 >= v37)
        {
          __break(1u);
          goto LABEL_53;
        }
        uint64_t v38 = *(void *)(v0 + 824);
        uint64_t v39 = *(void *)(v0 + 816);
        unint64_t v40 = *(unint64_t **)(v0 + 576);
        uint64_t v41 = *(void *)(v0 + 560);
        uint64_t v42 = *(void *)(v0 + 552);
        uint64_t v43 = *(void *)(v0 + 568) + *(int *)(v42 + 48);
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v38 + 16))(v43, v36+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(void *)(v38 + 72) * v35, v39);
        uint64_t v44 = (char *)v40 + *(int *)(v42 + 48);
        *unint64_t v40 = v35;
        (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v44, v43, v39);
        (*(void (**)(unint64_t *, void, uint64_t, uint64_t))(v41 + 56))(v40, 0, 1, v42);
        ++v35;
      }
      *(void *)(v0 + 1024) = v35;
      uint64_t v45 = *(void *)(v0 + 584);
      uint64_t v46 = *(void *)(v0 + 560);
      uint64_t v47 = *(void *)(v0 + 552);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(*(void *)(v0 + 576), v45, &demangling cache variable for type metadata for (offset: Int, element: Siri_Nlu_External_UserParse)?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v45, 1, v47) == 1)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_setDeallocating();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        uint64_t v82 = *(void *)(*(void *)(v0 + 944) + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_pommesInfo);
        if (v82)
        {
          uint64_t v83 = *(void **)(v82 + 16);
          if (v83)
          {
            uint64_t v84 = *(void *)(v0 + 696);
            uint64_t v85 = *(void *)(v0 + 680);
            uint64_t v86 = *(void *)(v0 + 672);
            uint64_t v87 = *(void *)(v0 + 664);
            uint64_t v88 = *(void *)(v0 + 640);
            uint64_t v154 = *(void *)(v0 + 632);
            unint64_t v89 = *(void **)(v0 + 624);
            id v90 = v83;
            UUID.init()();
            unint64_t v91 = *(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 16);
            v91(v84, v85, v87);
            *unint64_t v89 = v90;
            (*(void (**)(void *, void, uint64_t))(v88 + 104))(v89, *MEMORY[0x1E4FA1F18], v154);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v88 + 56))(v89, 0, 1, v154);
            id v155 = v90;
            specialized SimpleOrderedDictionary.subscript.setter((uint64_t)v89, v84);
            uint64_t v92 = v87;
            v91(v84, v85, v87);
            uint64_t v93 = *(void *)(v0 + 408);
            uint64_t v94 = *(void *)(v93 + 16);
            char v95 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v160 = v93;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v94, v84, v95);
            *(void *)(v0 + 408) = v93;
            swift_bridgeObjectRelease();
            unint64_t v96 = *(void (**)(uint64_t, uint64_t))(v86 + 8);
            v96(v84, v92);
            unint64_t v97 = Logger.logObject.getter();
            os_log_type_t v98 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v97, v98))
            {
              uint64_t v99 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v99 = 0;
              _os_log_impl(&dword_1B9C64000, v97, v98, "[ActionGenerator] Found PommesResponse. Generating parse for it", v99, 2u);
              MEMORY[0x1BA9E48C0](v99, -1, -1);
            }
            uint64_t v100 = *(void *)(v0 + 680);
            uint64_t v101 = *(void *)(v0 + 664);

            v96(v100, v101);
          }
        }
        *(void *)(v0 + 1136) = v34;
        uint64_t v102 = Logger.logObject.getter();
        os_log_type_t v103 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v102, v103))
        {
          uint64_t v104 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v104 = 0;
          _os_log_impl(&dword_1B9C64000, v102, v103, "[ActionGenerator] Finding plugins/extensions", v104, 2u);
          MEMORY[0x1BA9E48C0](v104, -1, -1);
        }

        uint64_t v105 = *(void *)(v0 + 312);
        uint64_t v106 = *(void *)(v0 + 320);
        *(void *)(v0 + 1144) = v105;
        *(void *)(v0 + 1152) = v106;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        int64_t v107 = (void *)swift_task_alloc();
        *(void *)(v0 + 1160) = v107;
        void *v107 = v0;
        v107[1] = ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:);
        return ConversationHandlerLocator.allHandlers(for:)(v105, v106);
      }
      uint64_t v48 = *(void *)(v0 + 832);
      uint64_t v49 = *(void *)(v0 + 824);
      uint64_t v50 = *(void *)(v0 + 816);
      uint64_t v51 = *(char **)(v0 + 584);
      uint64_t v52 = *(void *)(v0 + 552);
      *(void *)(v0 + 1032) = *(void *)v51;
      uint64_t v53 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 32))(v48, &v51[*(int *)(v52 + 48)], v50);
      uint64_t v54 = MEMORY[0x1BA9DE000](v53);
      uint64_t v55 = *(void *)(v54 + 16);
      uint64_t v56 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
      uint64_t v57 = *(void *)(v56 - 8);
      if (v55)
      {
        (*(void (**)(void, unint64_t, uint64_t))(*(void *)(v56 - 8) + 16))(*(void *)(v0 + 544), v54+ ((*(unsigned __int8 *)(*(void *)(v56 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v56 - 8) + 80)), v56);
        uint64_t v58 = 0;
      }
      else
      {
        uint64_t v58 = 1;
      }
      uint64_t v59 = *(void *)(v0 + 544);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56))(v59, v58, 1, v56);
      swift_bridgeObjectRelease();
      int v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v59, 1, v56);
      uint64_t v61 = *(void *)(v0 + 544);
      if (v60 == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 544), &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      }
      else
      {
        unint64_t v62 = Siri_Nlu_External_UserDialogAct.toUsoTask()();
        (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v61, v56);
        if (v62)
        {
          swift_retain();
          static UsoTask_CodegenConverter.convert(task:)();
          swift_release();
          if (*(void *)(v0 + 280))
          {
            type metadata accessor for UsoTask_run_common_VoiceCommand();
            if (swift_dynamicCast())
            {
              uint64_t v63 = UsoTask_run_common_VoiceCommand.appShortcuts.getter();
              swift_release();
              swift_release();
              if (*(void *)(v63 + 16)) {
                goto LABEL_30;
              }
              goto LABEL_24;
            }
            swift_release();
          }
          else
          {
            swift_release();
            outlined destroy of ReferenceResolutionClientProtocol?(v0 + 256, (uint64_t *)&demangling cache variable for type metadata for Any?);
          }
        }
      }
      uint64_t v63 = MEMORY[0x1E4FBC860];
      if (*(void *)(MEMORY[0x1E4FBC860] + 16))
      {
LABEL_30:
        uint64_t v74 = *(void *)(v0 + 1016);
        uint64_t v75 = *(void *)(v0 + 832);
        uint64_t v76 = swift_task_alloc();
        *(void *)(v76 + 16) = v74;
        *(void *)(v76 + 24) = v75;
        unint64_t v67 = specialized Sequence.compactMap<A>(_:)((void (*)(void))partial apply for closure #1 in AppShortcutParseExpansion.expandExactMatchParses(nlParse:appShortcutTargets:), v76, v63);
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
LABEL_24:
      swift_bridgeObjectRelease();
      unint64_t v64 = Siri_Nlu_External_UserParse.generalizedAppShortcuts.getter();
      if (!v64[2])
      {
        uint64_t v68 = *(void *)(v0 + 864);
        uint64_t v69 = *(void *)(v0 + 832);
        uint64_t v70 = *(void *)(v0 + 824);
        uint64_t v140 = *(void *)(v0 + 816);
        uint64_t v142 = *(void *)(v0 + 808);
        uint64_t v71 = *(void *)(v0 + 800);
        uint64_t v72 = *(void *)(v0 + 792);
        uint64_t v73 = *(void *)(v0 + 600);
        uint64_t v144 = *(void *)(v0 + 784);
        uint64_t v148 = *(void *)(v0 + 592);
        swift_bridgeObjectRelease();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<USOParse>);
        unint64_t v67 = swift_allocObject();
        *(_OWORD *)(v67 + 16) = xmmword_1BA04FD90;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 16))(v68, v69, v140);
        Siri_Nlu_External_UserParse.parser.getter();
        Siri_Nlu_External_Parser.parserID.getter();
        (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v71, v144);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v73 + 56))(v142, 0, 1, v148);
        USOParse.init(userParse:parserIdentifier:appBundleId:)();
        goto LABEL_32;
      }
      uint64_t v65 = *(void *)(v0 + 832);
      uint64_t v66 = swift_task_alloc();
      *(void *)(v66 + 16) = v65;
      unint64_t v67 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime28GeneralizedAppShortcutTargetVG_0dE4Flow8USOParseVs5NeverOTg5((void (*)(void *))partial apply for closure #1 in AppShortcutParseExpansion.expand(nlParse:), v66, (uint64_t)v64);
      swift_bridgeObjectRelease();
LABEL_31:
      swift_task_dealloc();
LABEL_32:
      *(void *)(v0 + 1048) = v67;
      *(void *)(v0 + 1040) = v34;
      uint64_t v77 = *(void *)(v67 + 16);
      *(void *)(v0 + 1056) = v77;
      if (v77)
      {
        uint64_t v78 = 0;
        uint64_t v109 = *(void *)(v0 + 520);
        int v81 = *(_DWORD *)(v109 + 80);
        *(_DWORD *)(v0 + 1180) = v81;
        uint64_t v80 = *(void *)(v109 + 72);
        *(void *)(v0 + 1064) = v80;
        uint64_t v79 = *(void (**)(uint64_t, unint64_t, uint64_t))(v109 + 16);
        *(void *)(v0 + 1072) = v79;
        goto LABEL_46;
      }
      unint64_t v22 = *(char *__ptr32 **)(v0 + 824);
      swift_bridgeObjectRelease();
      uint64_t v11 = (void (*)(uint64_t, uint64_t))*((void *)v22 + 1);
      v11(*(void *)(v0 + 832), *(void *)(v0 + 816));
    }
  }
  uint64_t v78 = *(void *)(v0 + 1080) + 1;
  uint64_t v79 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 1072);
  uint64_t v80 = *(void *)(v0 + 1064);
  LOBYTE(v81) = *(unsigned char *)(v0 + 1180);
  unint64_t v67 = *(void *)(v0 + 1048);
LABEL_46:
  *(void *)(v0 + 1080) = v78;
  unint64_t v110 = *(void *)(v0 + 536);
  uint64_t v111 = *(void *)(v0 + 528);
  uint64_t v112 = *(void *)(v0 + 512);
  v79(v110, v67 + ((v81 + 32) & ~(unint64_t)v81) + v80 * v78, v112);
  v79(v111, v110, v112);
  uint64_t v113 = Logger.logObject.getter();
  os_log_type_t v114 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v113, v114))
  {
    uint64_t v115 = *(void *)(v0 + 864);
    uint64_t v116 = *(void *)(v0 + 824);
    uint64_t v117 = *(void *)(v0 + 800);
    uint64_t v118 = *(void *)(v0 + 792);
    uint64_t v138 = *(void *)(v0 + 816);
    uint64_t v139 = *(void *)(v0 + 784);
    uint64_t v141 = *(void *)(v0 + 528);
    uint64_t v145 = *(void *)(v0 + 520);
    uint64_t v156 = *(void *)(v0 + 512);
    uint64_t v119 = (uint8_t *)swift_slowAlloc();
    uint64_t v150 = swift_slowAlloc();
    uint64_t v160 = v150;
    *(_DWORD *)uint64_t v119 = 136315138;
    USOParse.userParse.getter();
    Siri_Nlu_External_UserParse.parser.getter();
    (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v115, v138);
    Siri_Nlu_External_Parser.parserID.getter();
    (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v117, v139);
    uint64_t v120 = String.init<A>(describing:)();
    *(void *)(v0 + 368) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v120, v121, &v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v141, v156);
    _os_log_impl(&dword_1B9C64000, v113, v114, "[ActionGenerator] Generating UUID for parse of type: %s", v119, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v150, -1, -1);
    MEMORY[0x1BA9E48C0](v119, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 520) + 8))(*(void *)(v0 + 528), *(void *)(v0 + 512));
  }

  unint64_t v143 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1072);
  uint64_t v152 = *(void *)(v0 + 1032);
  unsigned int v146 = *(_DWORD *)(v0 + 1176);
  uint64_t v122 = *(void *)(v0 + 696);
  uint64_t v123 = *(void *)(v0 + 688);
  uint64_t v124 = *(void *)(v0 + 672);
  uint64_t v151 = *(void *)(v0 + 664);
  uint64_t v125 = *(void *)(v0 + 648);
  uint64_t v126 = *(void *)(v0 + 640);
  uint64_t v127 = *(void *)(v0 + 632);
  uint64_t v128 = *(void *)(v0 + 624);
  uint64_t v129 = *(void *)(v0 + 536);
  uint64_t v130 = *(void *)(v0 + 512);
  UUID.init()();
  v143(v125, v129, v130);
  (*(void (**)(uint64_t, void, uint64_t))(v126 + 104))(v125, v146, v127);
  uint64_t v131 = *(void (**)(uint64_t, uint64_t, uint64_t))(v124 + 16);
  *(void *)(v0 + 1088) = v131;
  *(void *)(v0 + 1096) = (v124 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v131(v122, v123, v151);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v126 + 16))(v128, v125, v127);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v126 + 56))(v128, 0, 1, v127);
  specialized SimpleOrderedDictionary.subscript.setter(v128, v122);
  v131(v122, v123, v151);
  uint64_t v132 = *(void *)(v0 + 408);
  char v133 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v160 = v132;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v152, v122, v133);
  *(void *)(v0 + 408) = v160;
  swift_bridgeObjectRelease();
  uint64_t v134 = *(void (**)(uint64_t, uint64_t))(v124 + 8);
  *(void *)(v0 + 1104) = v134;
  *(void *)(v0 + 1112) = (v124 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v134(v122, v151);
  v131(v122, v123, v151);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 1120) = inited;
  *(_OWORD *)(inited + 16) = xmmword_1BA04FD90;
  *(void *)(inited + 32) = 0xD000000000000014;
  *(void *)(inited + 40) = 0x80000001BA062340;
  uint64_t v136 = (void *)swift_task_alloc();
  *(void *)(v0 + 1128) = v136;
  void *v136 = v0;
  v136[1] = ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:);
  uint64_t v137 = *(void *)(v0 + 440);
  return MEMORY[0x1F41529E8](v137);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *inited;
  uint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  id v60;
  void (*v61)(uint64_t, uint64_t, uint64_t);
  id v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  void (*v66)(uint64_t, uint64_t);
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v79;
  void (*v80)(uint64_t, unint64_t, uint64_t);
  int v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint8_t *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t, uint64_t);
  uint64_t v104;
  char isUniquelyReferenced_nonNull_native;
  void (*v106)(uint64_t, uint64_t);
  uint64_t v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, uint64_t);
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  uint64_t v126 = v0;
  char v1 = v0 + 256;
  uint64_t v2 = *(void *)(v0 + 984);
  uint64_t v3 = *(void *)(v0 + 976);
  uint64_t v4 = *(void *)(v0 + 968);
  *(void *)(v0 + 1008) = v2;
  *(void *)(v0 + 1000) = v3;
  *(void *)(v0 + 992) = v4;
  type metadata accessor for AppShortcutParseExpansion();
  uint64_t inited = (void *)swift_initStackObject();
  *(void *)(v0 + 1016) = inited;
  inited[2] = v4;
  inited[3] = v3;
  inited[4] = v2;
  *(_DWORD *)(v0 + 1176) = *MEMORY[0x1E4FA1F48];
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v6 = swift_retain();
  uint64_t v7 = 0;
  for (i = 0; ; i = *(void *)(v0 + 1024))
  {
    uint64_t v9 = *(void *)(v0 + 952);
    uint64_t v10 = *(void *)(v9 + 16);
    if (i == v10)
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 560) + 56))(*(void *)(v0 + 576), 1, 1, *(void *)(v0 + 552));
    }
    else
    {
      if (i >= v10)
      {
        __break(1u);
        return MEMORY[0x1F41529E8](v6);
      }
      uint64_t v11 = *(void *)(v0 + 824);
      uint64_t v12 = *(void *)(v0 + 816);
      os_log_type_t v13 = *(unint64_t **)(v0 + 576);
      uint64_t v14 = *(void *)(v0 + 560);
      uint64_t v15 = *(void *)(v0 + 552);
      uint64_t v16 = *(void *)(v0 + 568) + *(int *)(v15 + 48);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v11 + 16))(v16, v9+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * i, v12);
      uint64_t v17 = (char *)v13 + *(int *)(v15 + 48);
      *os_log_type_t v13 = i;
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v17, v16, v12);
      char v1 = v0 + 256;
      (*(void (**)(unint64_t *, void, uint64_t, uint64_t))(v14 + 56))(v13, 0, 1, v15);
      ++i;
    }
    *(void *)(v0 + 1024) = i;
    uint64_t v18 = *(void *)(v0 + 584);
    uint64_t v19 = *(void *)(v0 + 560);
    uint64_t v20 = *(void *)(v0 + 552);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(*(void *)(v0 + 576), v18, &demangling cache variable for type metadata for (offset: Int, element: Siri_Nlu_External_UserParse)?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v18, 1, v20) == 1) {
      break;
    }
    uint64_t v21 = *(void *)(v0 + 832);
    unint64_t v22 = *(void *)(v0 + 824);
    unint64_t v23 = *(void *)(v0 + 816);
    unint64_t v24 = *(char **)(v0 + 584);
    uint64_t v25 = *(void *)(v0 + 552);
    *(void *)(v0 + 1032) = *(void *)v24;
    uint64_t v26 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v22 + 32))(v21, &v24[*(int *)(v25 + 48)], v23);
    uint64_t v27 = MEMORY[0x1BA9DE000](v26);
    uint64_t v28 = *(void *)(v27 + 16);
    uint64_t v29 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
    uint64_t v30 = *(void *)(v29 - 8);
    if (v28)
    {
      (*(void (**)(void, unint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(*(void *)(v0 + 544), v27+ ((*(unsigned __int8 *)(*(void *)(v29 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v29 - 8) + 80)), v29);
      uint64_t v31 = 0;
    }
    else
    {
      uint64_t v31 = 1;
    }
    uint64_t v32 = *(void *)(v0 + 544);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v32, v31, 1, v29);
    swift_bridgeObjectRelease();
    uint64_t v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v32, 1, v29);
    uint64_t v34 = *(void *)(v0 + 544);
    if (v33 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 544), &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    }
    else
    {
      unint64_t v35 = Siri_Nlu_External_UserDialogAct.toUsoTask()();
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v34, v29);
      if (v35)
      {
        swift_retain();
        static UsoTask_CodegenConverter.convert(task:)();
        swift_release();
        if (*(void *)(v0 + 280))
        {
          type metadata accessor for UsoTask_run_common_VoiceCommand();
          if (swift_dynamicCast())
          {
            uint64_t v36 = UsoTask_run_common_VoiceCommand.appShortcuts.getter();
            swift_release();
            swift_release();
            if (*(void *)(v36 + 16)) {
              goto LABEL_22;
            }
            goto LABEL_16;
          }
          swift_release();
        }
        else
        {
          swift_release();
          outlined destroy of ReferenceResolutionClientProtocol?(v1, (uint64_t *)&demangling cache variable for type metadata for Any?);
        }
      }
    }
    uint64_t v36 = MEMORY[0x1E4FBC860];
    if (*(void *)(MEMORY[0x1E4FBC860] + 16))
    {
LABEL_22:
      uint64_t v47 = *(void *)(v0 + 1016);
      uint64_t v48 = *(void *)(v0 + 832);
      uint64_t v49 = swift_task_alloc();
      *(void *)(v49 + 16) = v47;
      *(void *)(v49 + 24) = v48;
      unint64_t v40 = specialized Sequence.compactMap<A>(_:)((void (*)(void))partial apply for closure #1 in AppShortcutParseExpansion.expandExactMatchParses(nlParse:appShortcutTargets:), v49, v36);
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    unint64_t v37 = Siri_Nlu_External_UserParse.generalizedAppShortcuts.getter();
    if (!v37[2])
    {
      uint64_t v41 = *(void *)(v0 + 864);
      uint64_t v42 = *(void *)(v0 + 832);
      uint64_t v43 = *(void *)(v0 + 824);
      unint64_t v110 = *(void *)(v0 + 816);
      uint64_t v112 = *(void *)(v0 + 808);
      uint64_t v44 = *(void *)(v0 + 800);
      uint64_t v45 = *(void *)(v0 + 792);
      uint64_t v46 = *(void *)(v0 + 600);
      uint64_t v115 = *(void *)(v0 + 784);
      uint64_t v117 = *(void *)(v0 + 592);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<USOParse>);
      unint64_t v40 = swift_allocObject();
      *(_OWORD *)(v40 + 16) = xmmword_1BA04FD90;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v41, v42, v110);
      char v1 = v0 + 256;
      Siri_Nlu_External_UserParse.parser.getter();
      Siri_Nlu_External_Parser.parserID.getter();
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v115);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v46 + 56))(v112, 0, 1, v117);
      USOParse.init(userParse:parserIdentifier:appBundleId:)();
      goto LABEL_24;
    }
    uint64_t v38 = *(void *)(v0 + 832);
    uint64_t v39 = swift_task_alloc();
    *(void *)(v39 + 16) = v38;
    unint64_t v40 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime28GeneralizedAppShortcutTargetVG_0dE4Flow8USOParseVs5NeverOTg5((void (*)(void *))partial apply for closure #1 in AppShortcutParseExpansion.expand(nlParse:), v39, (uint64_t)v37);
    swift_bridgeObjectRelease();
LABEL_23:
    swift_task_dealloc();
LABEL_24:
    *(void *)(v0 + 1048) = v40;
    *(void *)(v0 + 1040) = v7;
    uint64_t v50 = *(void *)(v40 + 16);
    *(void *)(v0 + 1056) = v50;
    if (v50)
    {
      uint64_t v79 = *(void *)(v0 + 520);
      uint64_t v80 = *(void (**)(uint64_t, unint64_t, uint64_t))(v79 + 16);
      v79 += 16;
      int v81 = *(_DWORD *)(v79 + 64);
      *(_DWORD *)(v0 + 1180) = v81;
      *(void *)(v0 + 1064) = *(void *)(v79 + 56);
      *(void *)(v0 + 1072) = v80;
      *(void *)(v0 + 1080) = 0;
      uint64_t v82 = *(void *)(v0 + 536);
      uint64_t v83 = *(void *)(v0 + 528);
      uint64_t v84 = *(void *)(v0 + 512);
      v80(v82, v40 + ((v81 + 32) & ~(unint64_t)v81), v84);
      v80(v83, v82, v84);
      uint64_t v85 = Logger.logObject.getter();
      uint64_t v86 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v85, v86))
      {
        uint64_t v87 = *(void *)(v0 + 864);
        uint64_t v88 = *(void *)(v0 + 824);
        uint64_t v109 = *(void *)(v0 + 816);
        unint64_t v89 = *(void *)(v0 + 800);
        id v90 = *(void *)(v0 + 792);
        uint64_t v111 = *(void *)(v0 + 784);
        uint64_t v113 = *(void *)(v0 + 528);
        uint64_t v118 = *(void *)(v0 + 520);
        uint64_t v124 = *(void *)(v0 + 512);
        unint64_t v91 = (uint8_t *)swift_slowAlloc();
        uint64_t v122 = swift_slowAlloc();
        uint64_t v125 = v122;
        *(_DWORD *)unint64_t v91 = 136315138;
        USOParse.userParse.getter();
        Siri_Nlu_External_UserParse.parser.getter();
        (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v87, v109);
        Siri_Nlu_External_Parser.parserID.getter();
        (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v89, v111);
        uint64_t v92 = String.init<A>(describing:)();
        *(void *)(v0 + 368) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v93, &v125);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v113, v124);
        _os_log_impl(&dword_1B9C64000, v85, v86, "[ActionGenerator] Generating UUID for parse of type: %s", v91, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v122, -1, -1);
        MEMORY[0x1BA9E48C0](v91, -1, -1);
      }
      else
      {
        (*(void (**)(void, void))(*(void *)(v0 + 520) + 8))(*(void *)(v0 + 528), *(void *)(v0 + 512));
      }

      os_log_type_t v114 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1072);
      uint64_t v116 = *(_DWORD *)(v0 + 1176);
      uint64_t v94 = *(void *)(v0 + 696);
      char v95 = *(void *)(v0 + 688);
      unint64_t v96 = *(void *)(v0 + 672);
      uint64_t v120 = *(void *)(v0 + 664);
      uint64_t v123 = *(void *)(v0 + 1032);
      unint64_t v97 = *(void *)(v0 + 648);
      os_log_type_t v98 = *(void *)(v0 + 640);
      uint64_t v99 = *(void *)(v0 + 632);
      uint64_t v100 = *(void *)(v0 + 624);
      uint64_t v101 = *(void *)(v0 + 536);
      uint64_t v102 = *(void *)(v0 + 512);
      UUID.init()();
      v114(v97, v101, v102);
      (*(void (**)(uint64_t, void, uint64_t))(v98 + 104))(v97, v116, v99);
      os_log_type_t v103 = *(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 16);
      *(void *)(v0 + 1088) = v103;
      *(void *)(v0 + 1096) = (v96 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v103(v94, v95, v120);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v98 + 16))(v100, v97, v99);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v98 + 56))(v100, 0, 1, v99);
      specialized SimpleOrderedDictionary.subscript.setter(v100, v94);
      v103(v94, v95, v120);
      uint64_t v104 = *(void *)(v0 + 408);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v125 = v104;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v123, v94, isUniquelyReferenced_nonNull_native);
      *(void *)(v0 + 408) = v125;
      swift_bridgeObjectRelease();
      uint64_t v106 = *(void (**)(uint64_t, uint64_t))(v96 + 8);
      *(void *)(v0 + 1104) = v106;
      *(void *)(v0 + 1112) = (v96 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v106(v94, v120);
      v103(v94, v95, v120);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
      int64_t v107 = swift_initStackObject();
      *(void *)(v0 + 1120) = v107;
      *(_OWORD *)(v107 + 16) = xmmword_1BA04FD90;
      *(void *)(v107 + 32) = 0xD000000000000014;
      *(void *)(v107 + 40) = 0x80000001BA062340;
      uint64_t v108 = (void *)swift_task_alloc();
      *(void *)(v0 + 1128) = v108;
      *uint64_t v108 = v0;
      v108[1] = ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:);
      uint64_t v6 = *(void *)(v0 + 440);
      return MEMORY[0x1F41529E8](v6);
    }
    uint64_t v51 = *(void *)(v0 + 824);
    swift_bridgeObjectRelease();
    uint64_t v6 = (*(uint64_t (**)(void, void))(v51 + 8))(*(void *)(v0 + 832), *(void *)(v0 + 816));
    uint64_t v7 = *(void *)(v0 + 1040);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_setDeallocating();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v52 = *(void *)(*(void *)(v0 + 944) + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_pommesInfo);
  if (v52)
  {
    uint64_t v53 = *(void **)(v52 + 16);
    if (v53)
    {
      uint64_t v54 = *(void *)(v0 + 696);
      uint64_t v55 = *(void *)(v0 + 680);
      uint64_t v56 = *(void *)(v0 + 672);
      uint64_t v57 = *(void *)(v0 + 664);
      uint64_t v58 = *(void *)(v0 + 640);
      uint64_t v119 = *(void *)(v0 + 632);
      unint64_t v121 = v57;
      uint64_t v59 = *(void **)(v0 + 624);
      int v60 = v53;
      UUID.init()();
      uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16);
      v61(v54, v55, v57);
      *uint64_t v59 = v60;
      (*(void (**)(void *, void, uint64_t))(v58 + 104))(v59, *MEMORY[0x1E4FA1F18], v119);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v58 + 56))(v59, 0, 1, v119);
      unint64_t v62 = v60;
      specialized SimpleOrderedDictionary.subscript.setter((uint64_t)v59, v54);
      v61(v54, v55, v57);
      uint64_t v63 = *(void *)(v0 + 408);
      unint64_t v64 = *(void *)(v63 + 16);
      uint64_t v65 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v125 = v63;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v64, v54, v65);
      *(void *)(v0 + 408) = v63;
      swift_bridgeObjectRelease();
      uint64_t v66 = *(void (**)(uint64_t, uint64_t))(v56 + 8);
      v66(v54, v121);
      unint64_t v67 = Logger.logObject.getter();
      uint64_t v68 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v67, v68))
      {
        uint64_t v69 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v69 = 0;
        _os_log_impl(&dword_1B9C64000, v67, v68, "[ActionGenerator] Found PommesResponse. Generating parse for it", v69, 2u);
        MEMORY[0x1BA9E48C0](v69, -1, -1);
      }
      uint64_t v70 = *(void *)(v0 + 680);
      uint64_t v71 = *(void *)(v0 + 664);

      v66(v70, v71);
    }
  }
  *(void *)(v0 + 1136) = v7;
  uint64_t v72 = Logger.logObject.getter();
  uint64_t v73 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v72, v73))
  {
    uint64_t v74 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v74 = 0;
    _os_log_impl(&dword_1B9C64000, v72, v73, "[ActionGenerator] Finding plugins/extensions", v74, 2u);
    MEMORY[0x1BA9E48C0](v74, -1, -1);
  }

  uint64_t v75 = *(void *)(v0 + 312);
  uint64_t v76 = *(void *)(v0 + 320);
  *(void *)(v0 + 1144) = v75;
  *(void *)(v0 + 1152) = v76;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v77 = (void *)swift_task_alloc();
  *(void *)(v0 + 1160) = v77;
  *uint64_t v77 = v0;
  v77[1] = ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:);
  return ConversationHandlerLocator.allHandlers(for:)(v75, v76);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  void *v4;
  NSObject *v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;

  os_log_type_t v13 = v0;
  char v1 = v0[146];
  uint64_t v2 = v0[142];
  *(void *)(swift_task_alloc() + 16) = v0 + 48;
  uint64_t v3 = specialized Sequence.compactMap<A>(_:)(v1, (void (*)(char *, char *, uint64_t, uint64_t))partial apply for closure #2 in ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:));
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  specialized Array.append<A>(contentsOf:)(v3);
  uint64_t v4 = (void *)v0[45];
  uint64_t v12 = v4;
  swift_bridgeObjectRetain_n();
  specialized MutableCollection<>.sort(by:)(&v12, v0 + 51);
  if (v2)
  {
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10Foundation4UUIDV4uuid_7SiriCam15ActionCandidateV06actionJ0tG_ALs5NeverOTg504_s14g12KitRuntime15i77GeneratorC08generateD10Candidates4from02rrG019appShortcutProviderSay0A3Cam0D9j29VGAA21ConversationUserInputC_W177A28ReferenceResolutionDataModel11RRCandidateVG0aB4Flow03AppK9Providing_ptYaFAJ10Foundation4UUIDV4uuid_AJ06actionN0t_tcfu2_33_40673c41111a6ef0d8501a99c5a3b4d4AvW_AjXtAJTf3nnnpk_nTf1cn_n((uint64_t)v12);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v6 = Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, (os_log_type_t)v7))
    {
      unint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v8 = 134217984;
      uint64_t v9 = v4[2];
      swift_bridgeObjectRelease();
      v0[44] = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v6, (os_log_type_t)v7, "[ActionGenerator] Sorting and returning %ld ActionCandidates", v8, 0xCu);
      MEMORY[0x1BA9E48C0](v8, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(uint64_t))v0[1];
    return v10(v11);
  }
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, unint64_t, uint64_t);
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint8_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char v44;
  void (*v45)(unint64_t, uint64_t, uint64_t);
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  BOOL v57;
  void *v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  unint64_t i;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  id v118;
  void (*v119)(uint64_t, uint64_t, uint64_t);
  id v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  void (*v124)(uint64_t, uint64_t);
  NSObject *v125;
  os_log_type_t v126;
  uint8_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(uint64_t, unint64_t, uint64_t);
  int v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  os_log_type_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint8_t *v142;
  uint64_t v143;
  unint64_t v144;
  uint8_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(uint64_t, uint64_t, uint64_t);
  uint64_t v156;
  char v157;
  void (*v158)(uint64_t, uint64_t);
  uint64_t v159;
  void *v160;
  uint64_t v161;
  void *v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  id v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char isUniquelyReferenced_nonNull_native;
  void (*v175)(uint64_t, uint64_t);
  uint64_t inited;
  uint64_t *boxed_opaque_existential_0;
  unint64_t v178;
  uint64_t v179;
  char v180;
  uint64_t v181;
  NSObject *v182;
  os_log_type_t v183;
  BOOL v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint8_t *v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  void (*v192)(uint64_t, uint64_t);
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void (*v199)(uint64_t, uint64_t);
  NSObject *v200;
  os_log_type_t v201;
  uint8_t *v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  void (**v208)(unint64_t, uint64_t, uint64_t);
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  void (**v212)(uint64_t, uint64_t);
  uint64_t v213;
  void (**v214)(uint64_t, uint64_t);
  id v215;
  void (**v216)(uint64_t, void, uint64_t);
  uint64_t v217;
  void (*v218)(uint64_t, uint64_t, uint64_t);
  uint64_t v219;
  uint64_t v220;
  unsigned int v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  void (**v225)(uint64_t, uint64_t);
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void (*v249)(uint64_t, uint64_t, uint64_t);
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unsigned int v255;
  uint64_t v256;
  void (*v257)(uint64_t, uint64_t, uint64_t);
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  void (*v262)(uint64_t, uint64_t);
  uint64_t v263;
  void (*v264)(uint64_t, unint64_t);
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  void *v278;
  uint64_t v279[3];
  void *v280;
  uint64_t v281;

  uint64_t v280 = v0;
  char v1 = v0;
  if (one-time initialization token for executor != -1) {
    goto LABEL_94;
  }
  while (1)
  {
    uint64_t v2 = type metadata accessor for Logger();
    v1[117] = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1B9C64000, v3, v4, "[ActionGenerator] Generating actions", v5, 2u);
      MEMORY[0x1BA9E48C0](v5, -1, -1);
    }
    uint64_t v6 = v1[114];
    uint64_t v7 = v1[113];
    unint64_t v8 = v1[112];
    uint64_t v9 = v1[53];

    uint64_t v10 = MEMORY[0x1E4FBC860];
    v1[39] = MEMORY[0x1E4FBC868];
    v1[40] = v10;
    uint64_t v11 = specialized Dictionary.init(dictionaryLiteral:)(v10);
    v1[51] = v11;
    v1[48] = specialized Dictionary.init(dictionaryLiteral:)(v10, &demangling cache variable for type metadata for (UUID, [String : Any]), (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, [String : Any]>);
    v1[45] = v10;
    uint64_t v12 = *(void *)(v9 + 56);
    v1[118] = v12;
    outlined init with copy of ReferenceResolutionClientProtocol?(v12 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_nlRoutingDecision, v8, (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
    uint64_t v278 = v1;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v7) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v1[112], (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
    }
    else
    {
      (*(void (**)(void, void, void))(v1[114] + 32))(v1[116], v1[112], v1[113]);
      if ((NLRoutingDecisionMessage.RoutingDecision.shouldBeHandledBySiriX.getter() & 1) == 0)
      {
        os_log_type_t v13 = (uint64_t *)(v1[53] + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_utterance);
        uint64_t v14 = v13[1];
        if (v14)
        {
          uint64_t v15 = *v13;
          uint64_t v16 = *(void *)(v12 + 16);
          if (*(void *)(v16 + 16))
          {
            uint64_t v246 = v1[110];
            uint64_t v17 = v1[109];
            uint64_t v275 = v14;
            uint64_t v18 = v1[108];
            uint64_t v19 = v1[103];
            uint64_t v213 = v1[101];
            uint64_t v20 = v1[100];
            uint64_t v220 = v1[99];
            uint64_t v224 = v1[98];
            unsigned int v229 = v1[75];
            uint64_t v237 = v1[74];
            uint64_t v251 = v1[65];
            uint64_t v259 = v1[64];
            Swift::String v263 = v1[111];
            uint64_t v21 = *(void (**)(uint64_t, unint64_t, uint64_t))(v19 + 16);
            uint64_t v232 = v1[102];
            v21(v17, v16 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80)), v232);
            v21(v18, v17, v232);
            swift_bridgeObjectRetain();
            Siri_Nlu_External_UserParse.parser.getter();
            Siri_Nlu_External_Parser.parserID.getter();
            (*(void (**)(uint64_t, uint64_t))(v220 + 8))(v20, v224);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v229 + 56))(v213, 0, 1, v237);
            uint64_t v14 = v275;
            USOParse.init(userParse:parserIdentifier:appBundleId:)();
            (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v232);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v251 + 56))(v246, 0, 1, v259);
            outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v246, v263, &demangling cache variable for type metadata for USOParse?);
          }
          else
          {
            (*(void (**)(void, uint64_t, uint64_t, void))(v1[65] + 56))(v1[111], 1, 1, v1[64]);
            swift_bridgeObjectRetain();
          }
          uint64_t v162 = (void *)v1[97];
          uint64_t v163 = v1[95];
          char *v162 = v15;
          v162[1] = v14;
          (*(void (**)(void))(v163 + 104))();
          uint64_t v164 = *(void *)(v12 + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_pommesInfo);
          if (v164)
          {
            uint64_t v165 = *(void **)(v164 + 16);
            uint64_t v166 = v165;
          }
          else
          {
            uint64_t v165 = 0;
          }
          uint64_t v167 = v1[110];
          uint64_t v250 = v1[97];
          v256 = v1[111];
          uint64_t v168 = v1[96];
          uint64_t v169 = v1[95];
          uint64_t v217 = v1[94];
          unint64_t v268 = v1[93];
          uint64_t v240 = v1[92];
          id v170 = v1[90];
          uint64_t v273 = v1[89];
          uint64_t v171 = v1[88];
          Swift::String v230 = v1[87];
          Swift::String v277 = v1[84];
          uint64_t v261 = v1[83];
          uint64_t v172 = v1[80];
          uint64_t v222 = v1[82];
          Swift::String v227 = v1[79];
          unint64_t v234 = v1[78];
          (*(void (**)(void, void, void))(v1[114] + 16))(v1[115], v1[116], v1[113]);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v169 + 16))(v168, v250, v217);
          outlined init with copy of ReferenceResolutionClientProtocol?(v256, v167, &demangling cache variable for type metadata for USOParse?);
          uint64_t v215 = v165;
          NLRouterParse.init(nlRoutingDecision:input:usoParse:pommesResponse:)();
          UUID.init()();
          Swift::String v257 = *(void (**)(uint64_t, uint64_t, uint64_t))(v170 + 16);
          v257(v222, v268, v273);
          (*(void (**)(uint64_t, void, uint64_t))(v172 + 104))(v222, *MEMORY[0x1E4FA1F60], v227);
          uint64_t v218 = *(void (**)(uint64_t, uint64_t, uint64_t))(v277 + 16);
          v218(v230, v171, v261);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v172 + 16))(v234, v222, v227);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v172 + 56))(v234, 0, 1, v227);
          specialized SimpleOrderedDictionary.subscript.setter(v234, v230);
          v218(v230, v171, v261);
          uint64_t v173 = *(void *)(v11 + 16);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v279[0] = v11;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v173, v230, isUniquelyReferenced_nonNull_native);
          v1[51] = v11;
          swift_bridgeObjectRelease();
          uint64_t v175 = *(void (**)(uint64_t, uint64_t))(v277 + 8);
          v175(v230, v261);
          v218(v230, v171, v261);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_1BA04FD90;
          *(void *)(inited + 32) = 0x726574756F526C6ELL;
          *(void *)(inited + 40) = 0xE800000000000000;
          *(void *)(inited + 72) = v273;
          boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(inited + 48));
          v257((uint64_t)boxed_opaque_existential_0, v268, v273);
          uint64_t v178 = specialized Dictionary.init(dictionaryLiteral:)(inited);
          unint64_t v179 = v1[48];
          uint64_t v180 = swift_isUniquelyReferenced_nonNull_native();
          v279[0] = v179;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v178, v230, v180);
          v1[48] = v179;
          swift_bridgeObjectRelease();
          uint64_t v181 = v261;
          v262 = v175;
          v175(v230, v181);
          v257(v240, v268, v273);
          os_log_type_t v182 = Logger.logObject.getter();
          uint64_t v183 = static os_log_type_t.debug.getter();
          unint64_t v184 = os_log_type_enabled(v182, v183);
          uint64_t v269 = v1[116];
          Swift::String v274 = v1[114];
          uint64_t v241 = v1[111];
          uint64_t v245 = v1[113];
          Swift::String v236 = v1[97];
          unint64_t v235 = v1[94];
          uint64_t v228 = v1[95];
          unint64_t v231 = v1[93];
          uint64_t v185 = v1[92];
          if (v184)
          {
            uint64_t v186 = v1[91];
            v206 = v1[90];
            uint64_t v187 = v1[89];
            uint64_t v219 = v1[83];
            uint64_t v223 = v1[88];
            uint64_t v207 = v1[80];
            uint64_t v209 = v1[79];
            v211 = v1[82];
            uint64_t v188 = (uint8_t *)swift_slowAlloc();
            Swift::String v189 = swift_slowAlloc();
            v279[0] = v189;
            *(_DWORD *)uint64_t v188 = 136315138;
            v257(v186, v185, v187);
            uint64_t v190 = String.init<A>(describing:)();
            v1[52] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v190, v191, v279);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            char v192 = *(void (**)(uint64_t, uint64_t))(v206 + 8);
            v192(v185, v187);
            _os_log_impl(&dword_1B9C64000, v182, v183, "[ActionGenerator] Found NLRoutingDecision. Generating parse for it. nl router parse: %s", v188, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1BA9E48C0](v189, -1, -1);
            MEMORY[0x1BA9E48C0](v188, -1, -1);

            (*(void (**)(uint64_t, uint64_t))(v207 + 8))(v211, v209);
            v262(v223, v219);
            v192(v231, v187);
            (*(void (**)(uint64_t, uint64_t))(v228 + 8))(v236, v235);
          }
          else
          {
            uint64_t v193 = v1[90];
            uint64_t v194 = v1[89];
            uint64_t v258 = v1[88];
            uint64_t v195 = v1[83];
            uint64_t v196 = v1[82];
            uint64_t v197 = v1[80];
            uint64_t v198 = v1[79];

            uint64_t v199 = *(void (**)(uint64_t, uint64_t))(v193 + 8);
            v199(v185, v194);

            (*(void (**)(uint64_t, uint64_t))(v197 + 8))(v196, v198);
            v262(v258, v195);
            v199(v231, v194);
            (*(void (**)(uint64_t, uint64_t))(v228 + 8))(v236, v235);
          }
          outlined destroy of ReferenceResolutionClientProtocol?(v241, &demangling cache variable for type metadata for USOParse?);
          (*(void (**)(uint64_t, uint64_t))(v274 + 8))(v269, v245);
          uint64_t v51 = 0;
LABEL_87:
          v1[142] = v51;
          uint64_t v200 = Logger.logObject.getter();
          uint64_t v201 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v200, v201))
          {
            uint64_t v202 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v202 = 0;
            _os_log_impl(&dword_1B9C64000, v200, v201, "[ActionGenerator] Finding plugins/extensions", v202, 2u);
            MEMORY[0x1BA9E48C0](v202, -1, -1);
          }

          uint64_t v203 = v1[39];
          id v204 = v1[40];
          v1[143] = v203;
          v1[144] = v204;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v205 = (void *)swift_task_alloc();
          v1[145] = v205;
          *uint64_t v205 = v1;
          v205[1] = ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:);
          return ConversationHandlerLocator.allHandlers(for:)(v203, v204);
        }
      }
      (*(void (**)(void, void))(v1[114] + 8))(v1[116], v1[113]);
    }
    unint64_t v22 = *(void *)(v12 + 16);
    if (!*(void *)(v22 + 16))
    {
      uint64_t v51 = 0;
LABEL_68:
      uint64_t v109 = *(void *)(v1[118] + OBJC_IVAR____TtC14SiriKitRuntime10NLResponse_pommesInfo);
      if (v109)
      {
        unint64_t v110 = *(void **)(v109 + 16);
        if (v110)
        {
          uint64_t v111 = v1[87];
          uint64_t v112 = v1[85];
          uint64_t v113 = v1[84];
          os_log_type_t v114 = v1[83];
          uint64_t v115 = v278[80];
          uint64_t v116 = v278[79];
          uint64_t v117 = (void *)v278[78];
          uint64_t v118 = v110;
          UUID.init()();
          uint64_t v119 = *(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 16);
          v119(v111, v112, v114);
          *uint64_t v117 = v118;
          (*(void (**)(void *, void, uint64_t))(v115 + 104))(v117, *MEMORY[0x1E4FA1F18], v116);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v115 + 56))(v117, 0, 1, v116);
          char v1 = v278;
          uint64_t v120 = v118;
          specialized SimpleOrderedDictionary.subscript.setter((uint64_t)v117, v111);
          v119(v111, v112, v114);
          unint64_t v121 = v278[51];
          uint64_t v122 = *(void *)(v121 + 16);
          uint64_t v123 = swift_isUniquelyReferenced_nonNull_native();
          v279[0] = v121;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v122, v111, v123);
          v278[51] = v121;
          swift_bridgeObjectRelease();
          uint64_t v124 = *(void (**)(uint64_t, uint64_t))(v113 + 8);
          v124(v111, v114);
          uint64_t v125 = Logger.logObject.getter();
          uint64_t v126 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v125, v126))
          {
            uint64_t v127 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v127 = 0;
            _os_log_impl(&dword_1B9C64000, v125, v126, "[ActionGenerator] Found PommesResponse. Generating parse for it", v127, 2u);
            MEMORY[0x1BA9E48C0](v127, -1, -1);
          }
          uint64_t v128 = v278[85];
          uint64_t v129 = v278[83];

          v124(v128, v129);
        }
      }
      goto LABEL_87;
    }
    swift_bridgeObjectRetain();
    unint64_t v23 = Logger.logObject.getter();
    unint64_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = v10;
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 134217984;
      v1[50] = *(void *)(v22 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v23, v24, "[ActionGenerator] Found %ld unranked parses.", v26, 0xCu);
      uint64_t v27 = v26;
      uint64_t v10 = v25;
      MEMORY[0x1BA9E48C0](v27, -1, -1);
    }

    uint64_t v28 = specialized ActionGenerator.dedupeAppShortcuts(parses:)(v22);
    swift_bridgeObjectRelease();
    v279[0] = v10;
    v247 = *(void *)(v28 + 16);
    if (!v247) {
      break;
    }
    uint64_t v29 = 0;
    uint64_t v30 = v1[103];
    uint64_t v31 = v1[75];
    uint64_t v225 = (void (**)(uint64_t, uint64_t))(v1[99] + 8);
    uint64_t v221 = *MEMORY[0x1E4FA2780];
    uint64_t v214 = (void (**)(uint64_t, uint64_t))(v31 + 8);
    uint64_t v216 = (void (**)(uint64_t, void, uint64_t))(v31 + 104);
    unint64_t v233 = v30;
    uint64_t v208 = (void (**)(unint64_t, uint64_t, uint64_t))(v30 + 32);
    uint64_t v210 = MEMORY[0x1E4FBC860];
    uint64_t v212 = (void (**)(uint64_t, uint64_t))(v30 + 8);
    uint64_t v242 = v28;
    while (v29 < *(void *)(v28 + 16))
    {
      uint64_t v33 = v1[107];
      v270 = v278[102];
      v276 = v1[106];
      uint64_t v34 = v278[100];
      unint64_t v35 = v278[98];
      uint64_t v36 = v278[77];
      unint64_t v37 = v278[76];
      uint64_t v38 = v278[74];
      Swift::String v260 = (*(unsigned __int8 *)(v233 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v233 + 80);
      unint64_t v252 = *(void *)(v233 + 72);
      uint64_t v264 = *(void (**)(uint64_t, unint64_t))(v233 + 16);
      v264(v33, v28 + v260 + v252 * v29);
      Siri_Nlu_External_UserParse.parser.getter();
      Siri_Nlu_External_Parser.parserID.getter();
      (*v225)(v34, v35);
      (*v216)(v37, v221, v38);
      lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, MEMORY[0x1E4FA27B0]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v39 = v278[42];
      unint64_t v40 = v278[41];
      uint64_t v41 = *v214;
      (*v214)(v37, v38);
      v41(v36, v38);
      ((void (*)(uint64_t, uint64_t, uint64_t))v264)(v276, v33, v270);
      char v1 = v278;
      uint64_t v42 = v278[106];
      uint64_t v43 = v278[102];
      if (v39 == v40)
      {
        uint64_t v32 = *v212;
        (*v212)(v42, v278[102]);
      }
      else
      {
        uint64_t v44 = Siri_Nlu_External_UserParse.isOverriddenPSC.getter();
        uint64_t v32 = *v212;
        (*v212)(v42, v43);
        if ((v44 & 1) == 0)
        {
          uint64_t v45 = *v208;
          (*v208)(v278[105], v278[107], v278[102]);
          uint64_t v46 = v210;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v210 + 16) + 1, 1);
            uint64_t v46 = v279[0];
          }
          uint64_t v48 = *(void *)(v46 + 16);
          uint64_t v47 = *(void *)(v46 + 24);
          if (v48 >= v47 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1);
            uint64_t v46 = v279[0];
          }
          uint64_t v49 = v278[105];
          uint64_t v50 = v278[102];
          *(void *)(v46 + 16) = v48 + 1;
          v45(v46 + v260 + v48 * v252, v49, v50);
          uint64_t v210 = v46;
          v279[0] = v46;
          goto LABEL_18;
        }
      }
      v32(v278[107], v278[102]);
LABEL_18:
      ++v29;
      uint64_t v28 = v242;
      if (v247 == v29) {
        goto LABEL_29;
      }
    }
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    swift_once();
  }
  uint64_t v210 = v10;
LABEL_29:
  v1[119] = v210;
  swift_bridgeObjectRelease();
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v52 = static LinkFeature.forceEnabled;
  if (*(void *)(static LinkFeature.forceEnabled + 16)
    && (uint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(), (v54 & 1) != 0))
  {
    if (*(unsigned char *)(*(void *)(v52 + 56) + v53) != 1)
    {
LABEL_40:
      uint64_t v265 = (uint64_t)(v1 + 32);
      if (one-time initialization token for emptyContext != -1) {
        swift_once();
      }
      uint64_t v61 = static AppShortcutExpansionContext.emptyContext;
      unint64_t v62 = *(void *)algn_1EB9DB6F8;
      uint64_t v63 = qword_1EB9DB700;
      v1[126] = qword_1EB9DB700;
      v1[125] = v62;
      v1[124] = v61;
      type metadata accessor for AppShortcutParseExpansion();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      unint64_t v64 = (void *)swift_initStackObject();
      v1[127] = v64;
      v64[2] = v61;
      v64[3] = v62;
      v64[4] = v63;
      *((_DWORD *)v1 + 294) = *MEMORY[0x1E4FA1F48];
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      uint64_t v51 = 0;
      for (i = 0; ; i = v1[128])
      {
        uint64_t v66 = v1[119];
        unint64_t v67 = *(void *)(v66 + 16);
        if (i == v67)
        {
          (*(void (**)(void, uint64_t, uint64_t, void))(v1[70] + 56))(v1[72], 1, 1, v1[69]);
        }
        else
        {
          if (i >= v67) {
            goto LABEL_93;
          }
          uint64_t v68 = v1[103];
          uint64_t v69 = v1[102];
          uint64_t v70 = (unint64_t *)v1[72];
          uint64_t v71 = v1[70];
          uint64_t v72 = v1[69];
          uint64_t v73 = v1[71] + *(int *)(v72 + 48);
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v68 + 16))(v73, v66+ ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80))+ *(void *)(v68 + 72) * i, v69);
          uint64_t v74 = (char *)v70 + *(int *)(v72 + 48);
          *uint64_t v70 = i;
          (*(void (**)(char *, uint64_t, uint64_t))(v68 + 32))(v74, v73, v69);
          (*(void (**)(unint64_t *, void, uint64_t, uint64_t))(v71 + 56))(v70, 0, 1, v72);
          ++i;
        }
        v1[128] = i;
        uint64_t v75 = v1[73];
        uint64_t v76 = v1[70];
        uint64_t v77 = v1[69];
        outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v1[72], v75, &demangling cache variable for type metadata for (offset: Int, element: Siri_Nlu_External_UserParse)?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v75, 1, v77) == 1)
        {
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_setDeallocating();
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          goto LABEL_68;
        }
        uint64_t v78 = v1[104];
        uint64_t v79 = v1[103];
        uint64_t v80 = v1[102];
        int v81 = (char *)v1[73];
        uint64_t v82 = v1[69];
        v1[129] = *(void *)v81;
        uint64_t v83 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v79 + 32))(v78, &v81[*(int *)(v82 + 48)], v80);
        uint64_t v84 = MEMORY[0x1BA9DE000](v83);
        uint64_t v85 = *(void *)(v84 + 16);
        uint64_t v86 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
        uint64_t v87 = *(void *)(v86 - 8);
        if (v85)
        {
          (*(void (**)(void, unint64_t, uint64_t))(*(void *)(v86 - 8) + 16))(v1[68], v84+ ((*(unsigned __int8 *)(*(void *)(v86 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v86 - 8) + 80)), v86);
          uint64_t v88 = 0;
        }
        else
        {
          uint64_t v88 = 1;
        }
        unint64_t v89 = v1[68];
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v87 + 56))(v89, v88, 1, v86);
        swift_bridgeObjectRelease();
        id v90 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v87 + 48))(v89, 1, v86);
        unint64_t v91 = v1[68];
        if (v90 == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v1[68], &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
        }
        else
        {
          uint64_t v92 = Siri_Nlu_External_UserDialogAct.toUsoTask()();
          (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v91, v86);
          if (v92)
          {
            swift_retain();
            static UsoTask_CodegenConverter.convert(task:)();
            swift_release();
            if (v1[35])
            {
              type metadata accessor for UsoTask_run_common_VoiceCommand();
              if (swift_dynamicCast())
              {
                uint64_t v93 = UsoTask_run_common_VoiceCommand.appShortcuts.getter();
                swift_release();
                swift_release();
                if (*(void *)(v93 + 16)) {
                  goto LABEL_63;
                }
                goto LABEL_57;
              }
              swift_release();
            }
            else
            {
              swift_release();
              outlined destroy of ReferenceResolutionClientProtocol?(v265, (uint64_t *)&demangling cache variable for type metadata for Any?);
            }
          }
        }
        uint64_t v93 = MEMORY[0x1E4FBC860];
        if (*(void *)(MEMORY[0x1E4FBC860] + 16))
        {
LABEL_63:
          uint64_t v104 = v1[127];
          uint64_t v105 = v1[104];
          uint64_t v106 = swift_task_alloc();
          *(void *)(v106 + 16) = v104;
          *(void *)(v106 + 24) = v105;
          unint64_t v97 = specialized Sequence.compactMap<A>(_:)((void (*)(void))partial apply for closure #1 in AppShortcutParseExpansion.expandExactMatchParses(nlParse:appShortcutTargets:), v106, v93);
          swift_bridgeObjectRelease();
          goto LABEL_64;
        }
LABEL_57:
        swift_bridgeObjectRelease();
        uint64_t v94 = Siri_Nlu_External_UserParse.generalizedAppShortcuts.getter();
        if (!v94[2])
        {
          os_log_type_t v98 = v1[108];
          uint64_t v99 = v1[104];
          uint64_t v100 = v1[103];
          v238 = v1[102];
          unint64_t v243 = v1[101];
          uint64_t v101 = v1[100];
          uint64_t v102 = v1[99];
          os_log_type_t v103 = v1[75];
          uint64_t v248 = v1[98];
          unint64_t v253 = v1[74];
          swift_bridgeObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<USOParse>);
          unint64_t v97 = swift_allocObject();
          *(_OWORD *)(v97 + 16) = xmmword_1BA04FD90;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 16))(v98, v99, v238);
          Siri_Nlu_External_UserParse.parser.getter();
          Siri_Nlu_External_Parser.parserID.getter();
          (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v101, v248);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v103 + 56))(v243, 0, 1, v253);
          char v1 = v278;
          USOParse.init(userParse:parserIdentifier:appBundleId:)();
          goto LABEL_65;
        }
        char v95 = v1[104];
        unint64_t v96 = swift_task_alloc();
        *(void *)(v96 + 16) = v95;
        unint64_t v97 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime28GeneralizedAppShortcutTargetVG_0dE4Flow8USOParseVs5NeverOTg5((void (*)(void *))partial apply for closure #1 in AppShortcutParseExpansion.expand(nlParse:), v96, (uint64_t)v94);
        swift_bridgeObjectRelease();
LABEL_64:
        swift_task_dealloc();
LABEL_65:
        v1[131] = v97;
        v1[130] = v51;
        int64_t v107 = *(void *)(v97 + 16);
        v1[132] = v107;
        if (v107)
        {
          uint64_t v130 = v1[65];
          uint64_t v131 = *(void (**)(uint64_t, unint64_t, uint64_t))(v130 + 16);
          v130 += 16;
          uint64_t v132 = *(_DWORD *)(v130 + 64);
          *((_DWORD *)v1 + 295) = v132;
          v1[133] = *(void *)(v130 + 56);
          v1[134] = v131;
          v1[135] = 0;
          char v133 = v1[67];
          uint64_t v134 = v1[66];
          uint64_t v135 = v1[64];
          v131(v133, v97 + ((v132 + 32) & ~(unint64_t)v132), v135);
          v131(v134, v133, v135);
          uint64_t v136 = Logger.logObject.getter();
          uint64_t v137 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v136, v137))
          {
            uint64_t v138 = v1[108];
            uint64_t v139 = v1[103];
            uint64_t v226 = v1[102];
            uint64_t v140 = v1[100];
            uint64_t v141 = v1[99];
            Swift::String v239 = v1[98];
            unint64_t v244 = v1[66];
            Swift::String v254 = v1[65];
            Swift::String v271 = v1[64];
            uint64_t v142 = (uint8_t *)swift_slowAlloc();
            uint64_t v266 = swift_slowAlloc();
            v279[0] = v266;
            *(_DWORD *)uint64_t v142 = 136315138;
            USOParse.userParse.getter();
            Siri_Nlu_External_UserParse.parser.getter();
            (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v138, v226);
            Siri_Nlu_External_Parser.parserID.getter();
            (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v140, v239);
            unint64_t v143 = String.init<A>(describing:)();
            v278[46] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v143, v144, v279);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v254 + 8))(v244, v271);
            _os_log_impl(&dword_1B9C64000, v136, v137, "[ActionGenerator] Generating UUID for parse of type: %s", v142, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1BA9E48C0](v266, -1, -1);
            uint64_t v145 = v142;
            char v1 = v278;
            MEMORY[0x1BA9E48C0](v145, -1, -1);
          }
          else
          {
            (*(void (**)(void, void))(v1[65] + 8))(v1[66], v1[64]);
          }

          uint64_t v249 = (void (*)(uint64_t, uint64_t, uint64_t))v1[134];
          uint64_t v272 = v1[129];
          uint64_t v255 = *((_DWORD *)v1 + 294);
          unsigned int v146 = v1[87];
          uint64_t v147 = v1[86];
          uint64_t v148 = v1[84];
          unint64_t v267 = v1[83];
          uint64_t v149 = v1[81];
          uint64_t v150 = v1[80];
          uint64_t v151 = v1[79];
          uint64_t v152 = v1[78];
          uint64_t v153 = v1[67];
          uint64_t v154 = v1[64];
          UUID.init()();
          v249(v149, v153, v154);
          (*(void (**)(uint64_t, void, uint64_t))(v150 + 104))(v149, v255, v151);
          id v155 = *(void (**)(uint64_t, uint64_t, uint64_t))(v148 + 16);
          v1[136] = v155;
          v1[137] = (v148 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
          v155(v146, v147, v267);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v150 + 16))(v152, v149, v151);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v150 + 56))(v152, 0, 1, v151);
          specialized SimpleOrderedDictionary.subscript.setter(v152, v146);
          v155(v146, v147, v267);
          uint64_t v156 = v1[51];
          uint64_t v157 = swift_isUniquelyReferenced_nonNull_native();
          v279[0] = v156;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v272, v146, v157);
          v1[51] = v279[0];
          swift_bridgeObjectRelease();
          uint64_t v158 = *(void (**)(uint64_t, uint64_t))(v148 + 8);
          v1[138] = v158;
          v1[139] = (v148 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
          v158(v146, v267);
          v155(v146, v147, v267);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
          uint64_t v159 = swift_initStackObject();
          v1[140] = v159;
          *(_OWORD *)(v159 + 16) = xmmword_1BA04FD90;
          *(void *)(v159 + 32) = 0xD000000000000014;
          *(void *)(v159 + 40) = 0x80000001BA062340;
          uint64_t v160 = (void *)swift_task_alloc();
          v1[141] = v160;
          char *v160 = v1;
          v160[1] = ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:);
          uint64_t v161 = v1[55];
          return MEMORY[0x1F41529E8](v161);
        }
        uint64_t v108 = v1[103];
        swift_bridgeObjectRelease();
        (*(void (**)(void, void))(v108 + 8))(v1[104], v1[102]);
        uint64_t v51 = v1[130];
      }
    }
  }
  else
  {
    v1[25] = &type metadata for LinkFeature;
    v1[26] = lazy protocol witness table accessor for type LinkFeature and conformance LinkFeature();
    uint64_t v55 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v1 + 22));
    if ((v55 & 1) == 0) {
      goto LABEL_40;
    }
  }
  uint64_t v56 = swift_retain();
  uint64_t v57 = specialized Sequence<>.isContainsAppShortcutParse.getter(v56);
  swift_release();
  if (!v57) {
    goto LABEL_40;
  }
  uint64_t v58 = (void *)swift_task_alloc();
  v1[120] = v58;
  *uint64_t v58 = v1;
  v58[1] = ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:);
  uint64_t v59 = v1[54];
  return ActionGenerator.getAppShortcutExpansionContext(rrCandidates:nlParses:)(v59, v210);
}

uint64_t ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 1168) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:), 0, 0);
}

uint64_t ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:)(char a1)
{
  *(unsigned char *)(*(void *)v1 + 1184) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:), 0, 0);
}

uint64_t specialized ActionGenerator.dedupeAppShortcuts(parses:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v82 = (char *)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppShortcutGeneralizedInvocation?);
  MEMORY[0x1F4188790](v4 - 8);
  id v90 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AppShortcutGeneralizedInvocation();
  uint64_t v72 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  unint64_t v89 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v71 = (char *)&v68 - v9;
  uint64_t v83 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  uint64_t v10 = *(void *)(v83 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v83);
  uint64_t v88 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v87 = (void (**)(char *, uint64_t))((char *)&v68 - v13);
  uint64_t v86 = (void (**)(char *, uint64_t, uint64_t, uint64_t))type metadata accessor for Siri_Nlu_External_Parser();
  uint64_t v14 = (uint64_t)*(v86 - 1);
  MEMORY[0x1F4188790](v86);
  uint64_t v85 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v93 = (char *)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v84 = (char *)&v68 - v21;
  MEMORY[0x1F4188790](v20);
  unint64_t v23 = (char *)&v68 - v22;
  unint64_t v24 = (char *)MEMORY[0x1E4FBC860];
  unint64_t v97 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v25 = *(char **)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v73 = v6;
  uint64_t v94 = v16;
  uint64_t v68 = a1;
  if (v25)
  {
    uint64_t v91 = v17;
    uint64_t v27 = *(void (**)(char *, unint64_t, uint64_t))(v17 + 16);
    uint64_t v26 = v17 + 16;
    uint64_t v80 = v27;
    uint64_t v28 = v14;
    uint64_t v29 = *(void *)(v26 + 56);
    unint64_t v70 = (*(unsigned __int8 *)(v26 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 64);
    unint64_t v30 = a1 + v70;
    uint64_t v78 = (void (**)(char *, void (**)(char *, uint64_t, uint64_t, uint64_t)))(v28 + 8);
    unsigned int v77 = *MEMORY[0x1E4FA2788];
    uint64_t v76 = (void (**)(char *, void, uint64_t))(v10 + 104);
    uint64_t v75 = (void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v69 = (void (**)(char *, uint64_t))(v26 - 8);
    uint64_t v81 = v26;
    uint64_t v74 = (void (**)(char *, char *, uint64_t))(v26 + 16);
    uint64_t v79 = v29;
    uint64_t v31 = v94;
    uint64_t v32 = v87;
    do
    {
      uint64_t v92 = v25;
      v80(v23, v30, v31);
      unint64_t v35 = v85;
      Siri_Nlu_External_UserParse.parser.getter();
      Siri_Nlu_External_Parser.parserID.getter();
      (*v78)(v35, v86);
      uint64_t v36 = v88;
      uint64_t v37 = v83;
      (*v76)(v88, v77, v83);
      lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, MEMORY[0x1E4FA27B0]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v39 = v95;
      uint64_t v38 = v96;
      unint64_t v40 = *v75;
      (*v75)(v36, v37);
      v40((char *)v32, v37);
      if (v38 == v39)
      {
        uint64_t v41 = *v74;
        (*v74)(v84, v23, v31);
        uint64_t v42 = v97;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v42 + 2) + 1, 1);
          uint64_t v42 = v97;
        }
        uint64_t v33 = v92;
        uint64_t v34 = v79;
        unint64_t v44 = *((void *)v42 + 2);
        unint64_t v43 = *((void *)v42 + 3);
        if (v44 >= v43 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1);
          uint64_t v42 = v97;
        }
        *((void *)v42 + 2) = v44 + 1;
        v41(&v42[v70 + v44 * v34], v84, v94);
        unint64_t v97 = v42;
      }
      else
      {
        (*v69)(v23, v31);
        uint64_t v33 = v92;
        uint64_t v34 = v79;
      }
      v30 += v34;
      uint64_t v25 = v33 - 1;
    }
    while (v25);
    unint64_t v24 = v97;
    a1 = v68;
    uint64_t v6 = v73;
    uint64_t v16 = v94;
    uint64_t v17 = v91;
  }
  swift_bridgeObjectRelease();
  uint64_t v45 = *((void *)v24 + 2);
  if (v45)
  {
    uint64_t v47 = *(char **)(v17 + 16);
    uint64_t v46 = v17 + 16;
    uint64_t v92 = v47;
    uint64_t v48 = &v24[(*(unsigned __int8 *)(v46 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 64)];
    uint64_t v88 = *(char **)(v46 + 56);
    uint64_t v91 = v46;
    uint64_t v86 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v72 + 56);
    uint64_t v87 = (void (**)(char *, uint64_t))(v46 - 8);
    uint64_t v49 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48);
    uint64_t v50 = (void (**)(char *, uint64_t, uint64_t))(v72 + 32);
    uint64_t v85 = v24;
    swift_retain();
    uint64_t v51 = MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v52 = ((uint64_t (*)(char *, char *, uint64_t))v92)(v93, v48, v16);
      uint64_t v53 = MEMORY[0x1BA9DE000](v52);
      uint64_t v54 = *(void *)(v53 + 16);
      uint64_t v55 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
      uint64_t v56 = *(void *)(v55 - 8);
      if (v54)
      {
        uint64_t v57 = (uint64_t)v82;
        (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v55 - 8) + 16))(v82, v53+ ((*(unsigned __int8 *)(*(void *)(v55 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v55 - 8) + 80)), v55);
        uint64_t v58 = 0;
      }
      else
      {
        uint64_t v58 = 1;
        uint64_t v57 = (uint64_t)v82;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 56))(v57, v58, 1, v55);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v57, 1, v55) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v57, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
        uint64_t v59 = (uint64_t)v90;
        (*v86)(v90, 1, 1, v6);
      }
      else
      {
        LOBYTE(v97) = 1;
        int v60 = v90;
        Siri_Nlu_External_UserDialogAct.extractGeneralizedAppShortcutInvocation(groupIndex:)();
        uint64_t v59 = (uint64_t)v60;
        uint64_t v6 = v73;
        (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v57, v55);
      }
      uint64_t v16 = v94;
      (*v87)(v93, v94);
      if ((*v49)(v59, 1, v6) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v59, &demangling cache variable for type metadata for AppShortcutGeneralizedInvocation?);
      }
      else
      {
        uint64_t v61 = *v50;
        unint64_t v62 = v71;
        (*v50)(v71, v59, v6);
        v61(v89, (uint64_t)v62, v6);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v51 + 16) + 1, 1, v51, &demangling cache variable for type metadata for _ContiguousArrayStorage<AppShortcutGeneralizedInvocation>, MEMORY[0x1E4FA1E98], MEMORY[0x1E4FA1E98]);
        }
        unint64_t v64 = *(void *)(v51 + 16);
        unint64_t v63 = *(void *)(v51 + 24);
        if (v64 >= v63 >> 1) {
          uint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v63 > 1, v64 + 1, 1, v51, &demangling cache variable for type metadata for _ContiguousArrayStorage<AppShortcutGeneralizedInvocation>, MEMORY[0x1E4FA1E98], MEMORY[0x1E4FA1E98]);
        }
        *(void *)(v51 + 16) = v64 + 1;
        v61((char *)(v51+ ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80))+ *(void *)(v72 + 72) * v64), (uint64_t)v89, v6);
      }
      uint64_t v48 = &v88[(void)v48];
      --v45;
    }
    while (v45);
    swift_release_n();
    a1 = v68;
  }
  else
  {
    swift_release();
    uint64_t v51 = MEMORY[0x1E4FBC860];
  }
  uint64_t v65 = specialized Set.init<A>(_:)(v51);
  swift_bridgeObjectRelease();
  uint64_t v66 = *(void *)(v65 + 16);
  swift_bridgeObjectRetain();
  if (v66) {
    a1 = specialized _ArrayProtocol.filter(_:)(a1, v65);
  }
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t Siri_Nlu_External_UserParse.isOverriddenPSC.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v38 = (char *)&v36 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v36 = *(void *)(v3 - 8);
  uint64_t v37 = v3;
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v36 - v7;
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v36 - v14;
  uint64_t v16 = type metadata accessor for Siri_Nlu_External_Parser();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = v0;
  Siri_Nlu_External_UserParse.parser.getter();
  Siri_Nlu_External_Parser.parserID.getter();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, *MEMORY[0x1E4FA27A8], v9);
  lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v40;
  uint64_t v20 = v41;
  uint64_t v22 = *(void (**)(char *, uint64_t))(v10 + 8);
  v22(v13, v9);
  uint64_t v23 = ((uint64_t (*)(char *, uint64_t))v22)(v15, v9);
  if (v20 == v21)
  {
    uint64_t v24 = v37;
    uint64_t v25 = (uint64_t)v38;
    uint64_t v26 = v8;
    uint64_t v27 = v36;
    uint64_t v28 = MEMORY[0x1BA9DE000](v23);
    uint64_t v29 = *(void *)(v28 + 16);
    uint64_t v30 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
    uint64_t v31 = *(void *)(v30 - 8);
    if (v29)
    {
      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(v25, v28+ ((*(unsigned __int8 *)(*(void *)(v30 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v30 - 8) + 80)), v30);
      uint64_t v32 = 0;
    }
    else
    {
      uint64_t v32 = 1;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v25, v32, 1, v30);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v25, 1, v30) == 1)
    {
      outlined destroy of Siri_Nlu_External_UserDialogAct?(v25);
    }
    else
    {
      Siri_Nlu_External_UserDialogAct.delegated.getter();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v25, v30);
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v26, v6, v24);
      if (Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter() == 0xD000000000000010
        && v33 == 0x80000001BA06A920)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v27 + 8))(v26, v24);
        return 1;
      }
      char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v27 + 8))(v26, v24);
      if (v35) {
        return 1;
      }
    }
  }
  return 0;
}

BOOL specialized Sequence<>.isContainsAppShortcutParse.getter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    return 0;
  }
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
  uint64_t v10 = v6 + 16;
  uint64_t v12 = a1 + ((*(unsigned __int8 *)(v10 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 64));
  uint64_t v33 = (void (**)(char *, uint64_t))(v10 - 8);
  uint64_t v34 = v11;
  uint64_t v32 = *(void *)(v10 + 56);
  v31[0] = a1;
  swift_bridgeObjectRetain();
  uint64_t v13 = v9 - 1;
  v31[1] = MEMORY[0x1E4FBC840] + 8;
  do
  {
    uint64_t v20 = v5;
    uint64_t v21 = v5;
    uint64_t v22 = v10;
    uint64_t v23 = v34(v8, v12, v21);
    uint64_t v24 = MEMORY[0x1BA9DE000](v23);
    uint64_t v25 = *(void *)(v24 + 16);
    uint64_t v26 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
    uint64_t v27 = *(void *)(v26 - 8);
    if (v25)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v4, v24+ ((*(unsigned __int8 *)(*(void *)(v26 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v26 - 8) + 80)), v26);
      uint64_t v28 = 0;
    }
    else
    {
      uint64_t v28 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v4, v28, 1, v26);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v4, 1, v26) == 1)
    {
      uint64_t v14 = v4;
      uint64_t v15 = &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?;
      goto LABEL_4;
    }
    unint64_t v29 = Siri_Nlu_External_UserDialogAct.toUsoTask()();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v4, v26);
    if (!v29) {
      goto LABEL_5;
    }
    swift_retain();
    static UsoTask_CodegenConverter.convert(task:)();
    swift_release();
    if (!v36)
    {
      swift_release();
      uint64_t v14 = &v35;
      uint64_t v15 = (uint64_t *)&demangling cache variable for type metadata for Any?;
LABEL_4:
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, v15);
LABEL_5:
      uint64_t v16 = MEMORY[0x1E4FBC860];
      goto LABEL_6;
    }
    type metadata accessor for UsoTask_run_common_VoiceCommand();
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_release();
      goto LABEL_5;
    }
    uint64_t v16 = UsoTask_run_common_VoiceCommand.appShortcuts.getter();
    swift_release();
    swift_release();
LABEL_6:
    uint64_t v10 = v22;
    uint64_t v5 = v20;
    uint64_t v17 = *(void *)(v16 + 16);
    swift_bridgeObjectRelease();
    BOOL v18 = v17 != 0;
    (*v33)(v8, v20);
    if (v17) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == 0;
    }
    --v13;
    v12 += v32;
  }
  while (!v19);
  swift_bridgeObjectRelease();
  return v18;
}

unint64_t Siri_Nlu_External_UserDialogAct.toUsoTask()()
{
  unint64_t result = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  unint64_t v1 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v2) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v2)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = MEMORY[0x1BA9E3990](0, v1);
    goto LABEL_6;
  }
  if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v2 = *(void *)(v1 + 32);
    swift_retain();
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for AppShortcutParseExpansion()
{
  return self;
}

uint64_t AppShortcutParseExpansion.expand(nlParse:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_Parser();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = &v23[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = Siri_Nlu_External_UserParse.appShortcuts.getter();
  uint64_t v16 = v15;
  if (*(void *)(v15 + 16))
  {
    MEMORY[0x1F4188790](v15);
    *(void *)&v23[-16] = v2;
    *(void *)&v23[-8] = a1;
    unint64_t v17 = specialized Sequence.compactMap<A>(_:)((void (*)(void))partial apply for closure #1 in AppShortcutParseExpansion.expandExactMatchParses(nlParse:appShortcutTargets:), (uint64_t)&v23[-32], v16);
  }
  else
  {
    swift_bridgeObjectRelease();
    BOOL v18 = Siri_Nlu_External_UserParse.generalizedAppShortcuts.getter();
    uint64_t v19 = (uint64_t)v18;
    if (!v18[2])
    {
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<USOParse>);
      type metadata accessor for USOParse();
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_1BA04FD90;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
      Siri_Nlu_External_UserParse.parser.getter();
      Siri_Nlu_External_Parser.parserID.getter();
      (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
      uint64_t v22 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v10, 0, 1, v22);
      USOParse.init(userParse:parserIdentifier:appBundleId:)();
      return v20;
    }
    MEMORY[0x1F4188790](v18);
    *(void *)&v23[-16] = a1;
    unint64_t v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime28GeneralizedAppShortcutTargetVG_0dE4Flow8USOParseVs5NeverOTg5((void (*)(void *))partial apply for closure #1 in AppShortcutParseExpansion.expand(nlParse:), (uint64_t)&v23[-32], v19);
  }
  uint64_t v20 = v17;
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t Siri_Nlu_External_UserParse.appShortcuts.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v1 = MEMORY[0x1F4188790](v0 - 8);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x1BA9DE000](v1);
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v7 = *(void *)(v6 - 8);
  if (v5)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v3, v4 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v3, 0, 1, v6);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v3, 1, 1, v6);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for Siri_Nlu_External_UserDialogAct();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v3, 1, v6) == 1)
  {
    uint64_t v8 = &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?;
    uint64_t v9 = v3;
LABEL_6:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, v8);
    return MEMORY[0x1E4FBC860];
  }
  unint64_t v10 = Siri_Nlu_External_UserDialogAct.toUsoTask()();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v3, v6);
  if (!v10) {
    return MEMORY[0x1E4FBC860];
  }
  swift_retain();
  static UsoTask_CodegenConverter.convert(task:)();
  swift_release();
  if (!v15)
  {
    swift_release();
    uint64_t v8 = (uint64_t *)&demangling cache variable for type metadata for Any?;
    uint64_t v9 = &v14;
    goto LABEL_6;
  }
  type metadata accessor for UsoTask_run_common_VoiceCommand();
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release();
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v11 = UsoTask_run_common_VoiceCommand.appShortcuts.getter();
  swift_release();
  swift_release();
  return v11;
}

uint64_t specialized SimpleOrderedDictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = a1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  unint64_t v10 = (char *)&v35 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  char v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v35 - v15;
  uint64_t v38 = v2;
  uint64_t v17 = *v2;
  if (*(void *)(v17 + 16) && (unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v19 & 1) != 0))
  {
    unint64_t v20 = v18;
    uint64_t v21 = *(void *)(v17 + 56);
    uint64_t v22 = type metadata accessor for Parse();
    uint64_t v23 = *(void *)(v22 - 8);
    (*(void (**)(char *, unint64_t, uint64_t))(v23 + 16))(v16, v21 + *(void *)(v23 + 72) * v20, v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v16, 0, 1, v22);
    uint64_t v24 = a2;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for Parse?);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, a2, v4);
    uint64_t v25 = v37;
    outlined init with copy of ReferenceResolutionClientProtocol?(v37, (uint64_t)v14, &demangling cache variable for type metadata for Parse?);
    specialized Dictionary.subscript.setter((uint64_t)v14, (uint64_t)v10);
  }
  else
  {
    uint64_t v26 = type metadata accessor for Parse();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v16, 1, 1, v26);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for Parse?);
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v27(v10, a2, v4);
    uint64_t v25 = v37;
    outlined init with copy of ReferenceResolutionClientProtocol?(v37, (uint64_t)v14, &demangling cache variable for type metadata for Parse?);
    uint64_t v28 = v38;
    specialized Dictionary.subscript.setter((uint64_t)v14, (uint64_t)v10);
    uint64_t v36 = v8;
    unint64_t v29 = v8;
    uint64_t v24 = a2;
    v27(v29, a2, v4);
    unint64_t v30 = v28[1];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v30 + 16) + 1, 1, v30, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, MEMORY[0x1E4F27990], MEMORY[0x1E4F27990]);
    }
    unint64_t v32 = *(void *)(v30 + 16);
    unint64_t v31 = *(void *)(v30 + 24);
    if (v32 >= v31 >> 1) {
      unint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1, v30, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, MEMORY[0x1E4F27990], MEMORY[0x1E4F27990]);
    }
    uint64_t v33 = v36;
    *(void *)(v30 + 16) = v32 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v30+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v32, v33, v4);
    v38[1] = v30;
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v24, v4);
  return outlined destroy of ReferenceResolutionClientProtocol?(v25, &demangling cache variable for type metadata for Parse?);
}

uint64_t specialized SimpleOrderedDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v27 - v12;
  uint64_t v14 = *v3;
  if (*(void *)(v14 + 16) && (unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3), (v16 & 1) != 0))
  {
    unint64_t v17 = v15;
    uint64_t v18 = *(void *)(v14 + 56);
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    uint64_t v20 = *(void *)(v19 - 8);
    outlined init with copy of ReferenceResolutionClientProtocol?(v18 + *(void *)(v20 + 72) * v17, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v13, 0, 1, v19);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
    outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v11, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
    specialized Dictionary.subscript.setter((uint64_t)v11, a2, a3);
  }
  else
  {
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v13, 1, 1, v21);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
    outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v11, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.setter((uint64_t)v11, a2, a3);
    uint64_t v22 = (void *)v4[1];
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
    }
    unint64_t v24 = v22[2];
    unint64_t v23 = v22[3];
    if (v24 >= v23 >> 1) {
      uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v22);
    }
    v22[2] = v24 + 1;
    uint64_t v25 = &v22[2 * v24];
    v25[4] = a2;
    v25[5] = a3;
    swift_bridgeObjectRelease();
    v4[1] = v22;
  }
  return outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  return specialized Dictionary.subscript.setter(a1, a2, &demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment)?, &demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment), (void (*)(char *, uint64_t, uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:), (void (*)(uint64_t))specialized Dictionary._Variant.removeValue(forKey:));
}

{
  return specialized Dictionary.subscript.setter(a1, a2, &demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment)?, &demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment), (void (*)(char *, uint64_t, uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:), (void (*)(uint64_t))specialized Dictionary._Variant.removeValue(forKey:));
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Parse();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1, v9) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for Parse?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v8);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a2, v13);
    return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for Parse?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v12, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v18;
    swift_bridgeObjectRelease();
    char v16 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a2, v16);
  }
}

{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];

  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v8;
    swift_bridgeObjectRelease();
    uint64_t v5 = type metadata accessor for CodingUserInfoKey();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(a1, (uint64_t *)&demangling cache variable for type metadata for Any?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, v9);
    uint64_t v7 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a2, v7);
    return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
}

{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[2];

  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v2;
    *uint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v2 = v8;
    swift_bridgeObjectRelease();
    uint64_t v5 = type metadata accessor for ConversationSessionKey();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for Sendable?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, v9);
    uint64_t v7 = type metadata accessor for ConversationSessionKey();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a2, v7);
    return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, &demangling cache variable for type metadata for Sendable?);
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of ReferenceResolutionClientProtocol((long long *)a1, (uint64_t)v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v8;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for NSExtensionProtocol?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v9);
    swift_bridgeObjectRelease();
    return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, &demangling cache variable for type metadata for NSExtensionProtocol?);
  }
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;

  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, (uint64_t)v10);
    swift_bridgeObjectRelease();
    return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
  }
  else
  {
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a1, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t *v3;
  long long v6;
  long long v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  _OWORD v11[5];

  if (*(void *)(a1 + 24))
  {
    uint64_t v6 = *(_OWORD *)(a1 + 48);
    v11[2] = *(_OWORD *)(a1 + 32);
    v11[3] = v6;
    v11[4] = *(_OWORD *)(a1 + 64);
    uint64_t v7 = *(_OWORD *)(a1 + 16);
    v11[0] = *(_OWORD *)a1;
    v11[1] = v7;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, a2, a3, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v10;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for FlowPluginAndBundle?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, v11);
    swift_bridgeObjectRelease();
    return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, &demangling cache variable for type metadata for FlowPluginAndBundle?);
  }
}

uint64_t lazy protocol witness table accessor for type AffinityScoringAdapter and conformance AffinityScoringAdapter(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t Siri_Nlu_External_UserParse.isSNLC.getter()
{
  uint64_t v1 = v0;
  uint64_t v32 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v2 = *(void *)(v32 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v32);
  uint64_t v33 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  unint64_t v31 = (char *)&v30 - v5;
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v30 - v11;
  uint64_t v13 = type metadata accessor for Siri_Nlu_External_Parser();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  char v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Siri_Nlu_External_UserParse.parser.getter();
  Siri_Nlu_External_Parser.parserID.getter();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v10, *MEMORY[0x1E4FA27A0], v6);
  lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v18 = v34;
  uint64_t v17 = v35;
  uint64_t v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  v19(v10, v6);
  uint64_t v20 = v12;
  uint64_t v21 = v1;
  uint64_t v22 = v32;
  v19(v20, v6);
  unint64_t v23 = v31;
  unint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v24(v31, v21, v22);
  if (v17 == v18) {
    char v25 = 1;
  }
  else {
    char v25 = Siri_Nlu_External_UserParse.isOverriddenSNLC.getter();
  }
  uint64_t v26 = *(void (**)(char *, uint64_t))(v2 + 8);
  v26(v23, v22);
  uint64_t v27 = v33;
  v24(v33, v21, v22);
  if (v25) {
    char v28 = 1;
  }
  else {
    char v28 = Siri_Nlu_External_UserParse.isNlv3FallbackException.getter();
  }
  v26(v27, v22);
  return v28 & 1;
}

uint64_t AppShortcutParseExpansion.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15) {
      return a3;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v15) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        uint64_t v19 = lazy protocol witness table accessor for type [String] and conformance [A](a5, a6);
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v15; ++i)
        {
          uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          uint64_t v22 = (void (*)(unsigned char *, void))a7(v26, i, a3, v21, v19);
          uint64_t v24 = *v23;
          swift_retain();
          v22(v26, 0);
          *(void *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for RemoteFlowPluginPackage()
{
  return self;
}

uint64_t FlowExtensionDiscoverer.findConversationHandler(topic:onConnectionInterrupted:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[48] = a4;
  v5[49] = v4;
  v5[46] = a2;
  v5[47] = a3;
  v5[45] = a1;
  uint64_t v6 = type metadata accessor for Logger();
  v5[50] = v6;
  v5[51] = *(void *)(v6 - 8);
  v5[52] = swift_task_alloc();
  return MEMORY[0x1F4188298](FlowExtensionDiscoverer.findConversationHandler(topic:onConnectionInterrupted:), 0, 0);
}

uint64_t FlowExtensionDiscoverer.findConversationHandler(topic:onConnectionInterrupted:)()
{
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 48) = 0;
  uint64_t v1 = (void *)IntentTopic.makeCacheKeyAndWildcardFallbacks()();
  *(void *)(v0 + 424) = v1;
  uint64_t v2 = v1[2];
  *(void *)(v0 + 432) = v2;
  if (v2)
  {
    *(void *)(v0 + 440) = *(void *)(*(void *)(v0 + 392) + 16);
    *(void *)(v0 + 448) = 0;
    *(void *)(v0 + 456) = v1[4];
    *(void *)(v0 + 464) = v1[5];
    uint64_t v3 = one-time initialization token for shared;
    swift_bridgeObjectRetain();
    if (v3 != -1) {
      swift_once();
    }
    uint64_t v4 = static ConversationActor.shared;
    *(void *)(v0 + 472) = static ConversationActor.shared;
    return MEMORY[0x1F4188298](FlowExtensionDiscoverer.findConversationHandler(topic:onConnectionInterrupted:), v4, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 16, v0 + 216, &demangling cache variable for type metadata for NSExtensionProtocol?);
    if (*(void *)(v0 + 240))
    {
      unint64_t v29 = (void *)(v0 + 296);
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 216), v0 + 176);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v6 = *(void *)(v0 + 408);
      uint64_t v5 = *(void *)(v0 + 416);
      uint64_t v7 = *(void *)(v0 + 400);
      uint64_t v8 = *(void *)(v0 + 384);
      uint64_t v28 = *(void *)(v0 + 376);
      uint64_t v9 = *(void **)(v0 + 360);
      uint64_t v10 = __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v10, v7);
      outlined init with copy of ReferenceResolutionClientProtocol(v0 + 176, v0 + 256);
      uint64_t v11 = swift_allocObject();
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 256), v11 + 16);
      specialized Logger.debugF(_:_:_:_:)((uint64_t (*)(uint64_t))partial apply for implicit closure #1 in FlowExtensionDiscoverer.findConversationHandler(topic:onConnectionInterrupted:));
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      outlined init with copy of ReferenceResolutionClientProtocol(v0 + 176, (uint64_t)v29);
      uint64_t v12 = type metadata accessor for FlowExtensionConnection();
      swift_allocObject();
      swift_retain();
      uint64_t v13 = FlowExtensionConnection.init(nsExtension:onConnectionInterrupted:)(v29, v28, v8);
      uint64_t v14 = *(void *)(v0 + 200);
      uint64_t v15 = *(void *)(v0 + 208);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 176), v14);
      uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
      uint64_t v18 = v17;
      *(void *)(v0 + 160) = v12;
      *(void *)(v0 + 168) = &protocol witness table for FlowExtensionConnection;
      *(void *)(v0 + 136) = v13;
      type metadata accessor for RemoteConversationClient();
      uint64_t v19 = (void *)swift_allocObject();
      swift_retain();
      swift_defaultActor_initialize();
      v19[21] = 0;
      v19[22] = 0;
      v19[14] = v16;
      v19[15] = v18;
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 136), (uint64_t)(v19 + 16));
      uint64_t v21 = v19[14];
      uint64_t v20 = v19[15];
      v9[3] = &type metadata for FlowExtensionConversationHandler;
      v9[4] = lazy protocol witness table accessor for type FlowExtensionConversationHandler and conformance FlowExtensionConversationHandler();
      swift_bridgeObjectRetain();
      swift_release();
      *uint64_t v9 = v19;
      v9[1] = v21;
      long long v9[2] = v20;
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for NSExtensionProtocol?);
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 176);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 216, &demangling cache variable for type metadata for NSExtensionProtocol?);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      __swift_project_value_buffer(*(void *)(v0 + 400), (uint64_t)static Logger.executor);
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v24 = 0;
        _os_log_impl(&dword_1B9C64000, v22, v23, "No extensions support input", v24, 2u);
        MEMORY[0x1BA9E48C0](v24, -1, -1);
      }
      uint64_t v25 = *(void *)(v0 + 360);

      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for NSExtensionProtocol?);
      *(_OWORD *)uint64_t v25 = 0u;
      *(_OWORD *)(v25 + 16) = 0u;
      *(void *)(v25 + 32) = 0;
    }
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v12;

  uint64_t v1 = *(void *)(v0 + 440);
  uint64_t v2 = *(void *)(v1 + 48);
  *(void *)(v0 + 480) = v2;
  if (v2)
  {
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 488) = v3;
    *uint64_t v3 = v0;
    v3[1] = FlowExtensionDiscoverer.findConversationHandler(topic:onConnectionInterrupted:);
    uint64_t v4 = MEMORY[0x1E4FBC848] + 8;
    return MEMORY[0x1F4187DC0](v3, v2, v4);
  }
  else
  {
    uint64_t v5 = (_OWORD *)(v0 + 96);
    swift_beginAccess();
    uint64_t v6 = *(void *)(v1 + 64);
    if (v6)
    {
      if (*(void *)(v6 + 16))
      {
        uint64_t v8 = *(void *)(v0 + 456);
        uint64_t v7 = *(void *)(v0 + 464);
        swift_bridgeObjectRetain();
        uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v7);
        if (v10)
        {
          outlined init with copy of ReferenceResolutionClientProtocol(*(void *)(v6 + 56) + 40 * v9, v0 + 96);
        }
        else
        {
          *(void *)(v0 + 128) = 0;
          *uint64_t v5 = 0u;
          *(_OWORD *)(v0 + 112) = 0u;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        *(void *)(v0 + 128) = 0;
        *uint64_t v5 = 0u;
        *(_OWORD *)(v0 + 112) = 0u;
      }
      swift_endAccess();
    }
    else
    {
      swift_endAccess();
      *(void *)(v0 + 128) = 0;
      *uint64_t v5 = 0u;
      *(_OWORD *)(v0 + 112) = 0u;
    }
    swift_bridgeObjectRelease();
    return MEMORY[0x1F4188298](FlowExtensionDiscoverer.findConversationHandler(topic:onConnectionInterrupted:), 0, 0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 472);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](FlowExtensionDiscoverer.findConversationHandler(topic:onConnectionInterrupted:), v1, 0);
}

{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v9;

  uint64_t v1 = (_OWORD *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 440);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v2 + 64);
  if (v3)
  {
    if (*(void *)(v3 + 16))
    {
      uint64_t v5 = *(void *)(v0 + 456);
      uint64_t v4 = *(void *)(v0 + 464);
      swift_bridgeObjectRetain();
      uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v4);
      if (v7)
      {
        outlined init with copy of ReferenceResolutionClientProtocol(*(void *)(v3 + 56) + 40 * v6, v0 + 96);
      }
      else
      {
        *(void *)(v0 + 128) = 0;
        *uint64_t v1 = 0u;
        *(_OWORD *)(v0 + 112) = 0u;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      *(void *)(v0 + 128) = 0;
      *uint64_t v1 = 0u;
      *(_OWORD *)(v0 + 112) = 0u;
    }
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    *(void *)(v0 + 128) = 0;
    *uint64_t v1 = 0u;
    *(_OWORD *)(v0 + 112) = 0u;
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](FlowExtensionDiscoverer.findConversationHandler(topic:onConnectionInterrupted:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (*(void *)(v0 + 120))
  {
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for NSExtensionProtocol?);
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 96), v0 + 56);
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 56), v0 + 16);
LABEL_5:
    outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 16, v0 + 216, &demangling cache variable for type metadata for NSExtensionProtocol?);
    if (*(void *)(v0 + 240))
    {
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 216), v0 + 176);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v4 = *(void *)(v0 + 408);
      uint64_t v3 = *(void *)(v0 + 416);
      uint64_t v5 = *(void *)(v0 + 400);
      uint64_t v6 = *(void *)(v0 + 384);
      uint64_t v30 = *(void *)(v0 + 376);
      uint64_t v7 = *(void **)(v0 + 360);
      uint64_t v8 = __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v8, v5);
      outlined init with copy of ReferenceResolutionClientProtocol(v0 + 176, v0 + 256);
      uint64_t v9 = swift_allocObject();
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 256), v9 + 16);
      specialized Logger.debugF(_:_:_:_:)((uint64_t (*)(uint64_t))partial apply for implicit closure #1 in FlowExtensionDiscoverer.findConversationHandler(topic:onConnectionInterrupted:));
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
      outlined init with copy of ReferenceResolutionClientProtocol(v0 + 176, v0 + 296);
      uint64_t v10 = type metadata accessor for FlowExtensionConnection();
      swift_allocObject();
      swift_retain();
      uint64_t v11 = FlowExtensionConnection.init(nsExtension:onConnectionInterrupted:)((void *)(v0 + 296), v30, v6);
      uint64_t v12 = *(void *)(v0 + 200);
      uint64_t v13 = *(void *)(v0 + 208);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 176), v12);
      uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v12, v13);
      uint64_t v16 = v15;
      *(void *)(v0 + 160) = v10;
      *(void *)(v0 + 168) = &protocol witness table for FlowExtensionConnection;
      *(void *)(v0 + 136) = v11;
      type metadata accessor for RemoteConversationClient();
      uint64_t v17 = (void *)swift_allocObject();
      swift_retain();
      swift_defaultActor_initialize();
      v17[21] = 0;
      v17[22] = 0;
      v17[14] = v14;
      v17[15] = v16;
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 136), (uint64_t)(v17 + 16));
      uint64_t v19 = v17[14];
      uint64_t v18 = v17[15];
      v7[3] = &type metadata for FlowExtensionConversationHandler;
      v7[4] = lazy protocol witness table accessor for type FlowExtensionConversationHandler and conformance FlowExtensionConversationHandler();
      swift_bridgeObjectRetain();
      swift_release();
      unsigned char *v7 = v17;
      v7[1] = v19;
      v7[2] = v18;
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for NSExtensionProtocol?);
      __swift_destroy_boxed_opaque_existential_1Tm(v0 + 176);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 216, &demangling cache variable for type metadata for NSExtensionProtocol?);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      __swift_project_value_buffer(*(void *)(v0 + 400), (uint64_t)static Logger.executor);
      uint64_t v20 = Logger.logObject.getter();
      uint64_t v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl(&dword_1B9C64000, v20, v21, "No extensions support input", v22, 2u);
        MEMORY[0x1BA9E48C0](v22, -1, -1);
      }
      os_log_type_t v23 = *(void *)(v0 + 360);

      outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for NSExtensionProtocol?);
      *(_OWORD *)os_log_type_t v23 = 0u;
      *(_OWORD *)(v23 + 16) = 0u;
      *(void *)(v23 + 32) = 0;
    }
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
    return v24();
  }
  uint64_t v1 = *(void *)(v0 + 432);
  uint64_t v2 = *(void *)(v0 + 448) + 1;
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 96, &demangling cache variable for type metadata for NSExtensionProtocol?);
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  uint64_t v26 = *(void *)(v0 + 448) + 1;
  *(void *)(v0 + 448) = v26;
  uint64_t v27 = *(void *)(v0 + 424) + 16 * v26;
  *(void *)(v0 + 456) = *(void *)(v27 + 32);
  *(void *)(v0 + 464) = *(void *)(v27 + 40);
  uint64_t v28 = one-time initialization token for shared;
  swift_bridgeObjectRetain();
  if (v28 != -1) {
    swift_once();
  }
  unint64_t v29 = static ConversationActor.shared;
  *(void *)(v0 + 472) = static ConversationActor.shared;
  return MEMORY[0x1F4188298](FlowExtensionDiscoverer.findConversationHandler(topic:onConnectionInterrupted:), v29, 0);
}

uint64_t RemoteFlowPluginPackage.affinityScorer.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 64, a1);
}

uint64_t outlined init with copy of AffinityScorer?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AffinityScorer?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for RemoteFlowPluginBundleConversationHandler()
{
  return self;
}

uint64_t *initializeBufferWithCopyOfBuffer for AffinityScoringAdapter(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    long long v9 = *(_OWORD *)((char *)a2 + v8 + 24);
    *(_OWORD *)((char *)a1 + v8 + 24) = v9;
    (**(void (***)(void))(v9 - 8))();
  }
  return a1;
}

uint64_t lazy protocol witness table accessor for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_0, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return outlined init with take of ReferenceResolutionClientProtocol(&v12, v10 + 40 * a1 + 32);
}

uint64_t type metadata accessor for ConversationHandlerLocator.ScoredHandler()
{
  uint64_t result = type metadata singleton initialization cache for ConversationHandlerLocator.ScoredHandler;
  if (!type metadata singleton initialization cache for ConversationHandlerLocator.ScoredHandler) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ConversationHandlerLocator.ScoredHandler.init(handler:input:)@<X0>(void *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v46 = a3;
  uint64_t v5 = type metadata accessor for Input();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v45 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ConversationHandlerLocator.ScoredHandler();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (uint64_t *)((char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v12);
  uint64_t v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(a2, v12, v13);
  if (v15)
  {
    uint64_t v18 = a2;
    uint64_t v44 = v8;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.executor);
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a1, (uint64_t)v49);
    uint64_t v20 = v45;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v45, a2, v5);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    int v23 = v22;
    uint64_t v24 = v9;
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v25 = v5;
      uint64_t v26 = v20;
      uint64_t v27 = swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      uint64_t v48 = v42;
      *(_DWORD *)uint64_t v27 = 136315394;
      uint64_t v40 = v27 + 4;
      unint64_t v43 = v18;
      uint64_t v29 = v50;
      uint64_t v28 = v51;
      __swift_project_boxed_opaque_existential_1(v49, v50);
      uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t))(v28 + 16);
      int v41 = v23;
      uint64_t v31 = v30(v29, v28);
      uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v49);
      *(_WORD *)(v27 + 12) = 2080;
      lazy protocol witness table accessor for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler(&lazy protocol witness table cache variable for type Input and conformance Input, MEMORY[0x1E4FA1EE0]);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v35 = *(void (**)(char *, uint64_t))(v6 + 8);
      v35(v26, v25);
      _os_log_impl(&dword_1B9C64000, v21, (os_log_type_t)v41, "Dropping handler %s as it does not support %s", (uint8_t *)v27, 0x16u);
      uint64_t v36 = v42;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v36, -1, -1);
      MEMORY[0x1BA9E48C0](v27, -1, -1);

      uint64_t v37 = v43;
      uint64_t v38 = v25;
    }
    else
    {

      uint64_t v35 = *(void (**)(char *, uint64_t))(v6 + 8);
      v35(v20, v5);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v49);
      uint64_t v37 = v18;
      uint64_t v38 = v5;
    }
    v35(v37, v38);
    uint64_t v39 = v44;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v46, 1, 1, v39);
  }
  else
  {
    *uint64_t v11 = v14;
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a1, (uint64_t)(v11 + 1));
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))((char *)v11 + *(int *)(v8 + 24), a2, v5);
    uint64_t v16 = v46;
    outlined init with take of ConversationHandlerLocator.ScoredHandler((uint64_t)v11, v46, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v16, 0, 1, v8);
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  }
}

unint64_t protocol witness for ConversationHandler.affinityScore(for:) in conformance RemoteFlowPluginBundleConversationHandler(uint64_t a1)
{
  return RemoteFlowPluginBundleConversationHandler.affinityScore(for:)(a1);
}

unint64_t RemoteFlowPluginBundleConversationHandler.affinityScore(for:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v67 = a1;
  uint64_t v65 = type metadata accessor for Input();
  uint64_t v3 = *(void *)(v65 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v65);
  uint64_t v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v57 - v7;
  uint64_t v9 = type metadata accessor for OSSignpostID();
  uint64_t v62 = *(void *)(v9 - 8);
  uint64_t v63 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for OSSignposter();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  char v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v59 = v8;
  int v60 = v6;
  uint64_t v64 = v3;
  uint64_t v16 = __swift_project_value_buffer(v12, (uint64_t)static Signposter.executor);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v61 = v12;
  v17(v15, v16, v12);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  id v18 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  swift_retain();
  uint64_t v19 = (uint8_t *)swift_slowAlloc();
  uint64_t v20 = swift_slowAlloc();
  uint64_t v69 = v20;
  *(_DWORD *)uint64_t v19 = 136315138;
  uint64_t v22 = v2[2];
  unint64_t v21 = v2[3];
  swift_bridgeObjectRetain();
  uint64_t v57 = v22;
  uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v21, &v69);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  unint64_t v58 = v21;
  swift_bridgeObjectRelease();
  int v23 = OSSignposter.logHandle.getter();
  os_signpost_type_t v24 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v25 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_1B9C64000, v23, v24, v25, "RunAffinityScorer", "AffinityScorer=%s", v19, 0xCu);
  __swift_project_boxed_opaque_existential_1(v2 + 7, v2[10]);
  unint64_t v66 = AffinityScorer.score(for:)();
  LODWORD(v22) = v26 & 1;
  os_signpost_type_t v27 = static os_signpost_type_t.end.getter();
  os_signpost_id_t v28 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_1B9C64000, v23, v27, v28, "RunAffinityScorer", "AffinityScorer=%s", v19, 0xCu);

  swift_arrayDestroy();
  MEMORY[0x1BA9E48C0](v20, -1, -1);
  MEMORY[0x1BA9E48C0](v19, -1, -1);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v11, v63);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v61);
  int v29 = v22;
  if (v22)
  {
    uint64_t v31 = v64;
    uint64_t v30 = v65;
    uint64_t v32 = v67;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.executor);
    unint64_t v34 = v60;
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v60, v32, v30);
    swift_retain();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v35, v36))
    {
      swift_release();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v30);
      goto LABEL_17;
    }
    uint64_t v37 = swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    uint64_t v69 = v38;
    *(_DWORD *)uint64_t v37 = 136315394;
    unint64_t v39 = v58;
    swift_bridgeObjectRetain();
    uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v39, &v69);
    LODWORD(v67) = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2080;
    _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type Input and conformance Input, 255, MEMORY[0x1E4FA1EE0]);
    uint64_t v40 = v60;
    uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v40, v30);
    _os_log_impl(&dword_1B9C64000, v35, v36, "[%s] Missing affinity for input %s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    uint64_t v43 = v38;
  }
  else
  {
    uint64_t v45 = v64;
    uint64_t v44 = v65;
    uint64_t v46 = v67;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static Logger.executor);
    uint64_t v48 = v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v59, v46, v44);
    swift_retain();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v35, v49))
    {
      swift_release();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v48, v44);
      goto LABEL_17;
    }
    uint64_t v37 = swift_slowAlloc();
    uint64_t v67 = swift_slowAlloc();
    uint64_t v69 = v67;
    *(_DWORD *)uint64_t v37 = 136315650;
    unint64_t v50 = v58;
    swift_bridgeObjectRetain();
    uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v50, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2080;
    LOBYTE(v68) = specialized Affinity.init(rawValue:)(v66);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Affinity?);
    uint64_t v51 = String.init<A>(describing:)();
    uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 22) = 2080;
    _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type Input and conformance Input, 255, MEMORY[0x1E4FA1EE0]);
    uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v48, v44);
    _os_log_impl(&dword_1B9C64000, v35, v49, "[%s] Affinity: %s for input %s", (uint8_t *)v37, 0x20u);
    uint64_t v55 = v67;
    swift_arrayDestroy();
    uint64_t v43 = v55;
  }
  MEMORY[0x1BA9E48C0](v43, -1, -1);
  MEMORY[0x1BA9E48C0](v37, -1, -1);
LABEL_17:

  return v66;
}

uint64_t AffinityScorer.score(for:)()
{
  uint64_t v2 = dispatch thunk of CustomDebugStringConvertible.debugDescription.getter();
  uint64_t v4 = specialized logAction<A>(label:_:)(v2, v3, (void (*)(void *__return_ptr, void))partial apply for closure #1 in AffinityScorer.score(for:));
  if (!v1) {
    uint64_t v0 = v4;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t specialized logAction<A>(label:_:)(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = v4;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = a4;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v35 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v5 = (uint64_t)(v12 + 4);
    swift_bridgeObjectRetain();
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v10, v11, "==>> %s", v12, 0xCu);
    swift_arrayDestroy();
    uint64_t v14 = v13;
    a4 = v33;
    MEMORY[0x1BA9E48C0](v14, -1, -1);
    char v15 = v12;
    uint64_t v6 = v4;
    MEMORY[0x1BA9E48C0](v15, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  closure #1 in EnvironmentValueFetcher.fetchValue(input:)(a4, &v35);
  if (v6)
  {
    id v16 = v6;
    swift_bridgeObjectRetain();
    id v17 = v6;
    swift_bridgeObjectRetain();
    id v18 = v6;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v5 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v35 = v21;
      *(_DWORD *)uint64_t v5 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v5 + 12) = 2080;
      uint64_t v37 = (uint64_t)v6;
      id v22 = v6;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v23 = String.init<A>(describing:)();
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v19, v20, "<<== %s threw %s", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v21, -1, -1);
      MEMORY[0x1BA9E48C0](v5, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v35 = (uint64_t)v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl();
  }
  else
  {
    uint64_t v5 = v35;
    uint64_t v25 = v36;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    char v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v37 = v29;
      *(_DWORD *)uint64_t v28 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v28 + 12) = 2080;
      uint64_t v35 = v5;
      uint64_t v36 = v25;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
      uint64_t v30 = String.init<A>(describing:)();
      uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v26, v27, "<<== %s -> %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v29, -1, -1);
      MEMORY[0x1BA9E48C0](v28, -1, -1);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  return v5;
}

uint64_t specialized logAction<A>(label:_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void (*a3)(void *__return_ptr, void)@<X2>, uint64_t a4@<X8>)
{
  void (*v33)(void *__return_ptr, void);
  uint64_t v36[5];
  void v37[5];
  uint64_t v38[5];
  char v39;
  long long v40[2];
  char v41;
  uint64_t v42[7];
  uint64_t v43;

  uint64_t v5 = v4;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = a3;
    uint64_t v12 = swift_slowAlloc();
    v42[0] = v12;
    *(_DWORD *)os_log_type_t v11 = 136315138;
    swift_bridgeObjectRetain();
    *(void *)&v40[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v9, v10, "==>> %s", v11, 0xCu);
    swift_arrayDestroy();
    uint64_t v13 = v12;
    a3 = v33;
    MEMORY[0x1BA9E48C0](v13, -1, -1);
    uint64_t v14 = v11;
    uint64_t v5 = v4;
    MEMORY[0x1BA9E48C0](v14, -1, -1);
  }
  else
  {

    uint64_t v15 = swift_bridgeObjectRelease_n();
  }
  a3(v38, v15);
  if (v5)
  {
    *(void *)&v40[0] = v5;
    uint64_t v41 = 1;
  }
  else
  {
    unint64_t v39 = 0;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v38, (uint64_t)v40, &demangling cache variable for type metadata for Result<AffinityScorer, Error>);
  }
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v40, (uint64_t)v42, &demangling cache variable for type metadata for Result<AffinityScorer, Error>);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v42, (uint64_t)v40, &demangling cache variable for type metadata for Result<AffinityScorer, Error>);
  if (v41)
  {
    id v16 = *(void **)&v40[0];
    swift_bridgeObjectRetain();
    id v17 = v16;
    swift_bridgeObjectRetain();
    id v18 = v16;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      v38[0] = v22;
      *(_DWORD *)uint64_t v21 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v21 + 12) = 2080;
      id v23 = v16;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v24 = String.init<A>(describing:)();
      v37[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v19, v20, "<<== %s threw %s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v22, -1, -1);
      MEMORY[0x1BA9E48C0](v21, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    outlined init with take of ReferenceResolutionClientProtocol(v40, (uint64_t)v38);
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v38, (uint64_t)v37);
    swift_bridgeObjectRetain_n();
    char v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v43 = v29;
      *(_DWORD *)uint64_t v28 = 136315394;
      swift_bridgeObjectRetain();
      v36[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v28 + 12) = 2080;
      outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v37, (uint64_t)v36);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AffinityScorer);
      uint64_t v30 = String.init<A>(describing:)();
      v36[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
      _os_log_impl(&dword_1B9C64000, v26, v27, "<<== %s -> %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v29, -1, -1);
      MEMORY[0x1BA9E48C0](v28, -1, -1);
    }
    else
    {

      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
      swift_bridgeObjectRelease_n();
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v38);
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v42, (uint64_t)v40, &demangling cache variable for type metadata for Result<AffinityScorer, Error>);
  if (v41)
  {
    v38[0] = *(void *)&v40[0];
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl();
  }
  else
  {
    outlined init with take of ReferenceResolutionClientProtocol(v40, a4);
  }
  return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v42, &demangling cache variable for type metadata for Result<AffinityScorer, Error>);
}

uint64_t specialized logAction<A>(label:_:)(uint64_t a1, unint64_t a2, void (*a3)(void *__return_ptr, void))
{
  void (*v33)(void *__return_ptr, void);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  uint64_t v5 = v3;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = a3;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v35 = v12;
    *(_DWORD *)os_log_type_t v11 = 136315138;
    uint64_t v4 = (uint64_t)(v11 + 4);
    swift_bridgeObjectRetain();
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v9, v10, "==>> %s", v11, 0xCu);
    swift_arrayDestroy();
    uint64_t v13 = v12;
    a3 = v33;
    MEMORY[0x1BA9E48C0](v13, -1, -1);
    uint64_t v14 = v11;
    uint64_t v5 = v3;
    MEMORY[0x1BA9E48C0](v14, -1, -1);
  }
  else
  {

    uint64_t v15 = swift_bridgeObjectRelease_n();
  }
  a3(&v35, v15);
  if (v5)
  {
    id v16 = v5;
    swift_bridgeObjectRetain();
    id v17 = v5;
    swift_bridgeObjectRetain();
    id v18 = v5;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v4 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v35 = v21;
      *(_DWORD *)uint64_t v4 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v4 + 12) = 2080;
      uint64_t v37 = (uint64_t)v5;
      id v22 = v5;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v23 = String.init<A>(describing:)();
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v19, v20, "<<== %s threw %s", (uint8_t *)v4, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v21, -1, -1);
      MEMORY[0x1BA9E48C0](v4, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v35 = (uint64_t)v5;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl();
  }
  else
  {
    uint64_t v4 = v35;
    uint64_t v25 = v36;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    char v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v37 = v29;
      *(_DWORD *)uint64_t v28 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v28 + 12) = 2080;
      uint64_t v35 = v4;
      uint64_t v36 = v25;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
      uint64_t v30 = String.init<A>(describing:)();
      uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v26, v27, "<<== %s -> %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v29, -1, -1);
      MEMORY[0x1BA9E48C0](v28, -1, -1);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  return v4;
}

{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void (*v33)(void *__return_ptr, void);
  uint64_t v35;
  char v36;
  uint64_t v37;

  uint64_t v5 = v3;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = a3;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v35 = v12;
    *(_DWORD *)os_log_type_t v11 = 136315138;
    uint64_t v4 = (uint64_t)(v11 + 4);
    swift_bridgeObjectRetain();
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v9, v10, "==>> %s", v11, 0xCu);
    swift_arrayDestroy();
    uint64_t v13 = v12;
    a3 = v33;
    MEMORY[0x1BA9E48C0](v13, -1, -1);
    uint64_t v14 = v11;
    uint64_t v5 = v3;
    MEMORY[0x1BA9E48C0](v14, -1, -1);
  }
  else
  {

    uint64_t v15 = swift_bridgeObjectRelease_n();
  }
  a3(&v35, v15);
  if (v5)
  {
    id v16 = v5;
    swift_bridgeObjectRetain();
    id v17 = v5;
    swift_bridgeObjectRetain();
    id v18 = v5;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v4 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v35 = v21;
      *(_DWORD *)uint64_t v4 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v4 + 12) = 2080;
      uint64_t v37 = (uint64_t)v5;
      id v22 = v5;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v23 = String.init<A>(describing:)();
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v19, v20, "<<== %s threw %s", (uint8_t *)v4, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v21, -1, -1);
      MEMORY[0x1BA9E48C0](v4, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v35 = (uint64_t)v5;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl();
  }
  else
  {
    uint64_t v4 = v35;
    uint64_t v25 = v36;
    swift_bridgeObjectRetain_n();
    char v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v37 = v29;
      *(_DWORD *)uint64_t v28 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v28 + 12) = 2080;
      uint64_t v35 = v4;
      uint64_t v36 = v25;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
      uint64_t v30 = String.init<A>(describing:)();
      uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v26, v27, "<<== %s -> %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v29, -1, -1);
      MEMORY[0x1BA9E48C0](v28, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
  }
  return v4;
}

uint64_t partial apply for closure #1 in AffinityScorer.score(for:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void, void))(v1[3] + 32))(v1[5], v1[6], v1[2]);
  if (!v2)
  {
    *(void *)a1 = result;
    *(unsigned char *)(a1 + 8) = v5 & 1;
  }
  return result;
}

uint64_t protocol witness for AffinityScorer.score(for:loopCheck:) in conformance AffinityScoringAdapter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = (void *)(v3 + *(int *)(a3 + 20));
  uint64_t v6 = v5[3];
  uint64_t v7 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v6);
  type metadata accessor for SiriEnvironment();
  uint64_t v8 = static SiriEnvironment.default.getter();
  unsigned __int8 v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, v8, v6, v7);
  swift_release();
  return v9;
}

unint64_t specialized static AffinityScorerUtils.getTask(_:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = &v18[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  os_log_type_t v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  USOParse.userParse.getter();
  Siri_Nlu_External_UserParse.preferredUserDialogAct.getter(v2);
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v2, 1, v7) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v2, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_1B9C64000, v13, v14, "Could not obtain uso tasks", v15, 2u);
      MEMORY[0x1BA9E48C0](v15, -1, -1);
    }

    return 0;
  }
  (*(void (**)(unsigned char *, char *, uint64_t))(v8 + 32))(v10, v2, v7);
  unint64_t result = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  unint64_t v17 = result;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t result = swift_bridgeObjectRelease();
    if (!v16) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v16 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v16)
    {
LABEL_15:
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
      return v16;
    }
  }
  if ((v17 & 0xC000000000000001) != 0)
  {
    uint64_t v16 = MEMORY[0x1BA9E3990](0, v17);
    goto LABEL_15;
  }
  if (*(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v16 = *(void *)(v17 + 32);
    swift_retain();
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Affinity(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance Affinity()
{
  return Affinity.debugDescription.getter(*v0);
}

unint64_t Affinity.debugDescription.getter(char a1)
{
  unint64_t result = 0xD000000000000014;
  switch(a1)
  {
    case 1:
    case 3:
      unint64_t result = 0x7974696E69666641;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined init with take of ConversationHandlerLocator.ScoredHandler(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t storeEnumTagSinglePayload for ConversationHandlerLocator.ScoredHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B9E12B94);
}

uint64_t getEnumTagSinglePayload for ConversationHandlerLocator.ScoredHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B9E12AE4);
}

uint64_t outlined init with copy of RemoteConversationTurnData(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s14SiriKitRuntime26RemoteConversationTurnDataVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s14SiriKitRuntime26RemoteConversationTurnDataVWOcTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of RemoteConversationTurnData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RemoteConversationTurnData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t initializeWithCopy for ConversationHandlerLocator.ScoredHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 8, a2 + 8);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t destroy for ConversationHandlerLocator.ScoredHandler(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 8);
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Input();
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UserID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v33 = (char *)&v26 - v11;
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v27 = a1 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v36 = MEMORY[0x1E4FBC860];
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  else {
    uint64_t v14 = -1;
  }
  unint64_t v15 = v14 & v12;
  uint64_t v31 = v7 + 32;
  uint64_t v32 = v7 + 16;
  uint64_t v30 = v7 + 56;
  int64_t v28 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v29 = v7 + 8;
  uint64_t v35 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  while (v15)
  {
    unint64_t v18 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    unint64_t v19 = v18 | (v17 << 6);
LABEL_23:
    uint64_t v23 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    unint64_t v24 = v33;
    v23(v33, *(void *)(v35 + 48) + *(void *)(v7 + 72) * v19, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v24, v6);
    v23(v5, (unint64_t)v10, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
    uint64_t v25 = MultiUserContextUpdater.contextUpdater(forUserId:)((uint64_t)v5);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if (v25)
    {
      MEMORY[0x1BA9E3030](result);
      if (*(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      uint64_t result = specialized Array._endMutation()();
    }
  }
  int64_t v20 = v17 + 1;
  if (__OFADD__(v17, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v20 >= v28) {
    goto LABEL_27;
  }
  unint64_t v21 = *(void *)(v27 + 8 * v20);
  ++v17;
  if (v21) {
    goto LABEL_22;
  }
  int64_t v17 = v20 + 1;
  if (v20 + 1 >= v28) {
    goto LABEL_27;
  }
  unint64_t v21 = *(void *)(v27 + 8 * v17);
  if (v21) {
    goto LABEL_22;
  }
  int64_t v17 = v20 + 2;
  if (v20 + 2 >= v28) {
    goto LABEL_27;
  }
  unint64_t v21 = *(void *)(v27 + 8 * v17);
  if (v21) {
    goto LABEL_22;
  }
  int64_t v17 = v20 + 3;
  if (v20 + 3 >= v28) {
    goto LABEL_27;
  }
  unint64_t v21 = *(void *)(v27 + 8 * v17);
  if (v21)
  {
LABEL_22:
    unint64_t v15 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v17 << 6);
    goto LABEL_23;
  }
  int64_t v22 = v20 + 4;
  if (v22 >= v28)
  {
LABEL_27:
    swift_release();
    return v36;
  }
  unint64_t v21 = *(void *)(v27 + 8 * v22);
  if (v21)
  {
    int64_t v17 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v17 >= v28) {
      goto LABEL_27;
    }
    unint64_t v21 = *(void *)(v27 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(void *(*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v10 = MEMORY[0x1E4FBC860];
  uint64_t v6 = *(void *)(a3 + 16);
  if (v6)
  {
    uint64_t v7 = a3 + 32;
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v8 = a1(&v9, v7);
      if (v3)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if (v9)
      {
        MEMORY[0x1BA9E3030](v8);
        if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v7 += 40;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    return v10;
  }
  return result;
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, void *a2)
{
  uint64_t v37 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v34 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PluginAction();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v38 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v36 = (uint64_t)v29 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v35 = (char *)v29 - v12;
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13) {
    return MEMORY[0x1E4FBC860];
  }
  v29[2] = v2;
  uint64_t v14 = *(void *)(type metadata accessor for RankedAction() - 8);
  uint64_t v15 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  uint64_t v33 = v7;
  uint64_t v16 = (void (**)(char *, uint64_t, uint64_t))(v7 + 32);
  uint64_t v32 = *(void *)(v14 + 72);
  uint64_t v31 = type metadata accessor for ActionParaphrase();
  uint64_t v17 = *(void *)(v31 - 8);
  unint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  uint64_t v29[3] = v17 + 56;
  uint64_t v30 = v18;
  v29[1] = a1;
  swift_bridgeObjectRetain();
  unint64_t v19 = MEMORY[0x1E4FBC860];
  int64_t v20 = v38;
  do
  {
    uint64_t v21 = (uint64_t)v34;
    v30(v34, 1, 1, v31);
    uint64_t v22 = v36;
    RankedAction.toPluginAction(withSpeechPackage:withParaphrase:)(v37, v21, v36);
    outlined destroy of ReferenceResolutionClientProtocol?(v21, &demangling cache variable for type metadata for ActionParaphrase?);
    uint64_t v23 = *v16;
    unint64_t v24 = v35;
    (*v16)(v35, v22, v6);
    v23(v20, (uint64_t)v24, v6);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1, v19);
    }
    unint64_t v26 = *(void *)(v19 + 16);
    unint64_t v25 = *(void *)(v19 + 24);
    if (v26 >= v25 >> 1) {
      unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1, v19);
    }
    *(void *)(v19 + 16) = v26 + 1;
    unint64_t v27 = v19
        + ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))
        + *(void *)(v33 + 72) * v26;
    int64_t v20 = v38;
    v23((char *)v27, (uint64_t)v38, v6);
    v15 += v32;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v19;
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v48 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for Parse();
  uint64_t v8 = *(void *)(v47 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v47);
  unint64_t v58 = (char *)v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v46 = (char *)v43 - v11;
  uint64_t v62 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v62 - 8);
  MEMORY[0x1F4188790](v62);
  uint64_t v14 = (char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18)
  {
    uint64_t v63 = v14;
    int64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    uint64_t v19 = v12 + 16;
    uint64_t v21 = a1 + ((*(unsigned __int8 *)(v19 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 64));
    uint64_t v22 = *(void *)(v19 + 56);
    int v60 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 40);
    uint64_t v61 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v56 = (unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 32);
    uint64_t v57 = v20;
    unint64_t v54 = (void (**)(char *, char *, uint64_t))(v19 + 16);
    uint64_t v55 = v22;
    v43[2] = v3;
    v43[3] = v8 + 16;
    unint64_t v52 = (void (**)(char *, uint64_t))(v19 - 8);
    uint64_t v53 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56);
    uint64_t v49 = v8;
    unint64_t v50 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
    uint64_t v51 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    v43[1] = a1;
    swift_bridgeObjectRetain();
    unint64_t v59 = MEMORY[0x1E4FBC860];
    uint64_t v24 = v47;
    uint64_t v23 = (uint64_t)v48;
    uint64_t v25 = v62;
    uint64_t v44 = v19;
    uint64_t v45 = a2;
    do
    {
      unint64_t v26 = v61;
      v57(v61, v21, v25);
      unint64_t v27 = *v60;
      (*v60)(v26, 0, 1, v25);
      if ((*v56)(v26, 1, v25) == 1)
      {
        unint64_t v41 = v59;
        goto LABEL_19;
      }
      uint64_t v28 = v25;
      uint64_t v29 = v19;
      uint64_t v30 = (uint64_t)v63;
      (*v54)(v63, v26, v28);
      if (*(void *)(a2 + 16) && (unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v30), (v32 & 1) != 0))
      {
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v49 + 16))(v23, *(void *)(a2 + 56) + *(void *)(v49 + 72) * v31, v24);
        uint64_t v33 = 0;
      }
      else
      {
        uint64_t v33 = 1;
      }
      uint64_t v19 = v29;
      (*v53)(v23, v33, 1, v24);
      uint64_t v25 = v62;
      (*v52)(v63, v62);
      if ((*v51)(v23, 1, v24) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v23, &demangling cache variable for type metadata for Parse?);
      }
      else
      {
        uint64_t v34 = *v50;
        uint64_t v35 = v46;
        (*v50)(v46, v23, v24);
        v34(v58, (uint64_t)v35, v24);
        unint64_t v36 = v59;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v36 + 16) + 1, 1, v36);
        }
        unint64_t v38 = *(void *)(v36 + 16);
        unint64_t v37 = *(void *)(v36 + 24);
        if (v38 >= v37 >> 1) {
          unint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1, v36);
        }
        *(void *)(v36 + 16) = v38 + 1;
        unint64_t v39 = (*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
        unint64_t v59 = v36;
        uint64_t v24 = v47;
        v34((char *)(v36 + v39 + *(void *)(v49 + 72) * v38), (uint64_t)v58, v47);
        uint64_t v23 = (uint64_t)v48;
        uint64_t v19 = v44;
        a2 = v45;
      }
      v21 += v55;
      --v18;
    }
    while (v18);
    unint64_t v41 = v59;
    v27(v61, 1, 1, v25);
  }
  else
  {
    uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
    swift_bridgeObjectRetain();
    unint64_t v41 = MEMORY[0x1E4FBC860];
    v40(v17, 1, 1, v62);
  }
LABEL_19:
  swift_bridgeObjectRelease();
  return v41;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (**v14)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void v27[3];
  uint64_t v28;
  uint64_t v29;
  unsigned int (**v30)(char *, uint64_t, uint64_t);
  uint64_t v31;

  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  unint64_t v31 = (uint64_t)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v29 = (uint64_t)v27 - v12;
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13) {
    return MEMORY[0x1E4FBC860];
  }
  v27[2] = v2;
  uint64_t v14 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
  uint64_t v30 = (unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  swift_bridgeObjectRetain();
  v27[1] = a1;
  uint64_t v15 = (uint64_t *)(a1 + 40);
  uint64_t v16 = MEMORY[0x1E4FBC860];
  uint64_t v28 = v9;
  do
  {
    if (!*(void *)(a2 + 16))
    {
      (*v14)(v7, 1, 1, v8);
LABEL_4:
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
      goto LABEL_5;
    }
    uint64_t v18 = *(v15 - 1);
    uint64_t v17 = *v15;
    swift_bridgeObjectRetain();
    uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v17);
    if (v20)
    {
      outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(a2 + 56) + *(void *)(v9 + 72) * v19, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = 1;
    }
    (*v14)(v7, v21, 1, v8);
    swift_bridgeObjectRelease();
    if ((*v30)(v7, 1, v8) == 1) {
      goto LABEL_4;
    }
    uint64_t v22 = v29;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v7, v29, (uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v22, v31, (uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1, v16);
    }
    uint64_t v24 = *(void *)(v16 + 16);
    uint64_t v23 = *(void *)(v16 + 24);
    if (v24 >= v23 >> 1) {
      uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1, v16);
    }
    *(void *)(v16 + 16) = v24 + 1;
    uint64_t v25 = v16
        + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))
        + *(void *)(v28 + 72) * v24;
    uint64_t v9 = v28;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v31, v25, (uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
LABEL_5:
    v15 += 2;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v16;
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v3 = a1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
  do
  {
    outlined init with copy of ReferenceResolutionClientProtocol(v3, (uint64_t)v29);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginPackage);
    uint64_t v5 = type metadata accessor for RemoteFlowPluginPackage();
    if (swift_dynamicCast())
    {
      uint64_t v7 = (uint64_t)v31;
      *((void *)&v27 + 1) = v5;
      uint64_t v28 = lazy protocol witness table accessor for type RemoteFlowPluginPackage and conformance RemoteFlowPluginPackage(&lazy protocol witness table cache variable for type RemoteFlowPluginPackage and conformance RemoteFlowPluginPackage, v6, (void (*)(uint64_t))type metadata accessor for RemoteFlowPluginPackage);
    }
    else
    {
      outlined init with copy of ReferenceResolutionClientProtocol(v3, (uint64_t)v29);
      type metadata accessor for NSBundle();
      if (!swift_dynamicCast())
      {
        long long v26 = 0u;
        long long v27 = 0u;
        uint64_t v28 = 0;
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v26, &demangling cache variable for type metadata for PluginPackage?);
        goto LABEL_4;
      }
      uint64_t v8 = *(void *)(a2 + 56);
      id v9 = v31;
      uint64_t v25 = v8;
      swift_retain();
      id v10 = objc_msgSend(v9, sel_infoDictionary);
      if (v10)
      {
        uint64_t v11 = v10;
        static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
        specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      }
      uint64_t v24 = static IntentTopic.makeFromBundleInfoPlist(dictionary:)();
      swift_bridgeObjectRelease();
      uint64_t v23 = NSBundle.packageId.getter();
      uint64_t v13 = v12;
      id v14 = objc_msgSend(v9, sel_bundlePath);
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v17 = v16;

      uint64_t v30 = 0;
      memset(v29, 0, sizeof(v29));
      uint64_t v7 = swift_allocObject();
      RemoteFlowPluginPackage.init(bundleId:bundlePath:supportedTopics:sharedFlowPluginServiceClient:overrideAffinityScorer:)(v23, v13, v15, v17, v24, v25, (uint64_t)v29);

      *((void *)&v27 + 1) = v5;
      uint64_t v28 = lazy protocol witness table accessor for type RemoteFlowPluginPackage and conformance RemoteFlowPluginPackage(&lazy protocol witness table cache variable for type RemoteFlowPluginPackage and conformance RemoteFlowPluginPackage, v18, (void (*)(uint64_t))type metadata accessor for RemoteFlowPluginPackage);
    }
    *(void *)&long long v26 = v7;
    outlined init with take of ReferenceResolutionClientProtocol(&v26, (uint64_t)v29);
    outlined init with take of ReferenceResolutionClientProtocol(v29, (uint64_t)&v26);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
    }
    unint64_t v20 = v4[2];
    unint64_t v19 = v4[3];
    if (v20 >= v19 >> 1) {
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v4);
    }
    v4[2] = v20 + 1;
    outlined init with take of ReferenceResolutionClientProtocol(&v26, (uint64_t)&v4[5 * v20 + 4]);
LABEL_4:
    v3 += 40;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(char *, uint64_t, uint64_t);
  char v17;
  void (**v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  void v36[2];
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  void (**v42)(char *, uint64_t);
  void *v43;
  uint64_t v44;
  void (**v45)(char *, uint64_t);

  unint64_t v41 = a2;
  uint64_t v44 = type metadata accessor for Google_Protobuf_StringValue();
  uint64_t v4 = *(void *)(v44 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v44);
  unint64_t v37 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v40 = (char *)v36 - v7;
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    v36[1] = v2;
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    id v14 = *(void *)(v9 + 72);
    uint64_t v15 = a1;
    uint64_t v16 = (void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v45 = (void (**)(char *, uint64_t))(v9 + 8);
    unint64_t v42 = (void (**)(char *, uint64_t))(v4 + 8);
    v36[0] = v15;
    swift_bridgeObjectRetain();
    uint64_t v43 = (void *)MEMORY[0x1E4FBC860];
    unint64_t v39 = v14;
    while (1)
    {
      uint64_t v17 = Siri_Nlu_External_UsoEntityIdentifier.hasNamespace.getter();
      (*v16)(v11, v13, v8);
      if (v17)
      {
        uint64_t v18 = v16;
        unint64_t v19 = v8;
        unint64_t v20 = v40;
        Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
        uint64_t v21 = Google_Protobuf_StringValue.value.getter();
        uint64_t v23 = v22;
        uint64_t v24 = *v42;
        (*v42)(v20, v44);
        uint64_t v25 = *(void *)(v41 + 32);
        if (v25)
        {
          uint64_t v8 = v19;
          if (v21 == *(void *)(v41 + 24) && v25 == v23)
          {
            (*v45)(v11, v19);
            swift_bridgeObjectRelease();
            uint64_t v16 = v18;
LABEL_12:
            long long v27 = v37;
            Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
            uint64_t v28 = Google_Protobuf_StringValue.value.getter();
            unint64_t v38 = v29;
            v24(v27, v44);
            if (swift_isUniquelyReferenced_nonNull_native()) {
              uint64_t v30 = v43;
            }
            else {
              uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v43[2] + 1, 1, v43);
            }
            char v32 = v30[2];
            id v31 = v30[3];
            id v14 = v39;
            if (v32 >= v31 >> 1) {
              uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v30);
            }
            v30[2] = v32 + 1;
            uint64_t v43 = v30;
            uint64_t v33 = &v30[2 * v32];
            uint64_t v34 = v38;
            v33[4] = v28;
            v33[5] = v34;
            goto LABEL_4;
          }
          long long v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
          (*v45)(v11, v19);
          swift_bridgeObjectRelease();
          uint64_t v16 = v18;
          if (v26) {
            goto LABEL_12;
          }
          id v14 = v39;
        }
        else
        {
          uint64_t v8 = v19;
          (*v45)(v11, v19);
          swift_bridgeObjectRelease();
          id v14 = v39;
          uint64_t v16 = v18;
        }
      }
      else
      {
        (*v45)(v11, v8);
      }
LABEL_4:
      v13 += v14;
      if (!--v12)
      {
        swift_bridgeObjectRelease();
        return v43;
      }
    }
  }
  return (void *)MEMORY[0x1E4FBC860];
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(char *, uint64_t, uint64_t);
  void (**v11)(char *, uint64_t);
  void *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  void v26[3];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  uint64_t v29 = a2;
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  v26[1] = a1;
  v26[2] = v2;
  id v9 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  uint64_t v30 = *(void *)(v5 + 72);
  id v10 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v11 = (void (**)(char *, uint64_t))(v5 + 8);
  swift_bridgeObjectRetain();
  uint64_t v12 = (void *)MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v13 = Siri_Nlu_External_UsoEntityIdentifier.hasBackingAppBundleID.getter();
    (*v10)(v7, v9, v4);
    if ((v13 & 1) == 0)
    {
      (*v11)(v7, v4);
      goto LABEL_4;
    }
    id v14 = Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter();
    uint64_t v16 = *(void *)(v29 + 32);
    if (v16)
    {
      if (v14 == *(void *)(v29 + 24) && v16 == v15)
      {
        (*v11)(v7, v4);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        (*v11)(v7, v4);
        swift_bridgeObjectRelease();
        if ((v18 & 1) == 0) {
          goto LABEL_4;
        }
      }
      unint64_t v19 = Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter();
      long long v27 = v20;
      uint64_t v28 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
      }
      uint64_t v22 = v12[2];
      uint64_t v21 = v12[3];
      if (v22 >= v21 >> 1) {
        uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v12);
      }
      void v12[2] = v22 + 1;
      uint64_t v23 = &v12[2 * v22];
      uint64_t v24 = v27;
      v23[4] = v28;
      v23[5] = v24;
    }
    else
    {
      (*v11)(v7, v4);
      swift_bridgeObjectRelease();
    }
LABEL_4:
    v9 += v30;
    --v8;
  }
  while (v8);
  swift_bridgeObjectRelease();
  return v12;
}

{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (**v13)(char *, uint64_t, uint64_t);
  char v14;
  void (**v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  void v34[2];
  uint64_t v35;
  void (**v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  void *v39;
  void (**v40)(char *, uint64_t);
  uint64_t v41;

  unint64_t v38 = type metadata accessor for Google_Protobuf_StringValue();
  uint64_t v5 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  unint64_t v37 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  MEMORY[0x1F4188790](v7);
  id v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    v34[0] = a1;
    v34[1] = v2;
    uint64_t v12 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    unint64_t v41 = *(void *)(v8 + 72);
    uint64_t v13 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
    uint64_t v40 = (void (**)(char *, uint64_t))(v8 + 8);
    unint64_t v36 = (void (**)(char *, uint64_t))(v5 + 8);
    swift_bridgeObjectRetain();
    unint64_t v39 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v35 = a2;
    while (1)
    {
      id v14 = Siri_Nlu_External_UsoEntityIdentifier.hasNamespace.getter();
      (*v13)(v10, v12, v7);
      if (v14)
      {
        uint64_t v15 = v13;
        uint64_t v16 = v7;
        uint64_t v17 = a2;
        uint64_t v18 = v37;
        Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
        unint64_t v19 = Google_Protobuf_StringValue.value.getter();
        uint64_t v21 = v20;
        uint64_t v22 = v18;
        a2 = v17;
        (*v36)(v22, v38);
        uint64_t v23 = *(void *)(v17 + 32);
        if (v23)
        {
          uint64_t v24 = *(void *)(v17 + 24);
          uint64_t v7 = v16;
          if (v19 == v24 && v23 == v21)
          {
            (*v40)(v10, v16);
            swift_bridgeObjectRelease();
            uint64_t v13 = v15;
LABEL_12:
            long long v26 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
            uint64_t v28 = v27;
            if (swift_isUniquelyReferenced_nonNull_native()) {
              uint64_t v29 = v39;
            }
            else {
              uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39[2] + 1, 1, v39);
            }
            id v31 = v29[2];
            uint64_t v30 = v29[3];
            if (v31 >= v30 >> 1) {
              uint64_t v29 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v29);
            }
            long long v29[2] = v31 + 1;
            unint64_t v39 = v29;
            char v32 = &v29[2 * v31];
            v32[4] = v26;
            v32[5] = v28;
            a2 = v35;
            goto LABEL_4;
          }
          uint64_t v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
          (*v40)(v10, v16);
          swift_bridgeObjectRelease();
          uint64_t v13 = v15;
          if (v25) {
            goto LABEL_12;
          }
        }
        else
        {
          uint64_t v7 = v16;
          (*v40)(v10, v16);
          swift_bridgeObjectRelease();
          uint64_t v13 = v15;
        }
      }
      else
      {
        (*v40)(v10, v7);
      }
LABEL_4:
      v12 += v41;
      if (!--v11)
      {
        swift_bridgeObjectRelease();
        return v39;
      }
    }
  }
  return (void *)MEMORY[0x1E4FBC860];
}

unint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationHandlerLocator.ScoredHandler?);
  MEMORY[0x1F4188790](v7 - 8);
  id v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ConversationHandlerLocator.ScoredHandler();
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v28 = (uint64_t)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v27 = (uint64_t)v23 - v14;
  uint64_t v15 = *(void *)(a3 + 16);
  if (!v15) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v16 = a3 + 32;
  v23[1] = a3;
  uint64_t v24 = v13;
  uint64_t v17 = (unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  swift_bridgeObjectRetain();
  unint64_t v18 = MEMORY[0x1E4FBC860];
  uint64_t v25 = v10;
  uint64_t v26 = a2;
  do
  {
    a1(v16);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v18;
    }
    if ((*v17)(v9, 1, v10) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, &demangling cache variable for type metadata for ConversationHandlerLocator.ScoredHandler?);
    }
    else
    {
      uint64_t v19 = v27;
      outlined init with take of StringKeyedValue((uint64_t)v9, v27, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      outlined init with take of StringKeyedValue(v19, v28, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v18 + 16) + 1, 1, v18, &demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationHandlerLocator.ScoredHandler>, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      }
      unint64_t v21 = *(void *)(v18 + 16);
      unint64_t v20 = *(void *)(v18 + 24);
      if (v21 >= v20 >> 1) {
        unint64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1, v18, &demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationHandlerLocator.ScoredHandler>, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      }
      *(void *)(v18 + 16) = v21 + 1;
      outlined init with take of StringKeyedValue(v28, v18+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(void *)(v24 + 72) * v21, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
      uint64_t v10 = v25;
    }
    v16 += 40;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  return v18;
}

uint64_t partial apply for closure #2 in ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return closure #2 in ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:)(a1, a2, a3, a4, *(void *)(v4 + 16));
}

uint64_t closure #2 in ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  v21[0] = a5;
  v21[1] = a2;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = type metadata accessor for Parse();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CamParse();
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (void *)((char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(a1, a3, v8);
  uint64_t v17 = a4[4];
  uint64_t v18 = a4[5];
  __swift_project_boxed_opaque_existential_1(a4 + 1, v17);
  (*(void (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18);
  type metadata accessor for ConversationHandlerLocator.ScoredHandler();
  Input.parse.getter();
  Parse.asCamParse()(v16);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  UUID.init()();
  if (*(void *)(*(void *)v21[0] + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(a3);
    if (v19) {
      swift_bridgeObjectRetain();
    }
  }
  return ActionCandidate.init(flowHandlerId:parse:affinityScore:loggingId:userData:)();
}

uint64_t protocol witness for ConversationHandler.id.getter in conformance RemoteFlowPluginBundleConversationHandler()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Parse.asCamParse()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UserParse();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v6 = type metadata accessor for USOParse();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for Parse();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = &v25[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(void *, uint64_t, uint64_t))(v11 + 16))(v13, v2, v10);
  int v14 = (*(uint64_t (**)(void *, uint64_t))(v11 + 88))(v13, v10);
  if (v14 == *MEMORY[0x1E4FA1F18])
  {
    (*(void (**)(void *, uint64_t))(v11 + 96))(v13, v10);
    *a1 = *v13;
    uint64_t v15 = (unsigned int *)MEMORY[0x1E4F9FA40];
LABEL_5:
    uint64_t v16 = *v15;
    uint64_t v17 = type metadata accessor for CamParse();
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104))(a1, v16, v17);
  }
  if (v14 == *MEMORY[0x1E4FA1F48])
  {
    (*(void (**)(void *, uint64_t))(v11 + 96))(v13, v10);
    (*(void (**)(unsigned char *, void *, uint64_t))(v7 + 32))(v9, v13, v6);
    USOParse.userParse.getter();
    USOParse.parserIdentifier.getter();
    USOParse.appBundleId.getter();
    USOParse.groupIndex.getter();
    CamUSOParse.init(userParse:parserIdentifier:appBundleId:groupIndex:)();
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v15 = (unsigned int *)MEMORY[0x1E4F9FA48];
    goto LABEL_5;
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.executor);
  unint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl(&dword_1B9C64000, v20, v21, "CamBridge: Received unexpected Parse type in asCamParse", v22, 2u);
    MEMORY[0x1BA9E48C0](v22, -1, -1);
  }

  uint64_t v23 = *MEMORY[0x1E4F9FA50];
  uint64_t v24 = type metadata accessor for CamParse();
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 104))(a1, v23, v24);
  return (*(uint64_t (**)(void *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *a1 = v2;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v2 < 0 || (v2 & 0x4000000000000000) != 0)
  {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    *a1 = v2;
  }
  uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v6[0] = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized Array._endMutation()();
}

Swift::Int specialized MutableCollection<>.sort(by:)(void **a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate))
                 - 8);
  uint64_t v5 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v5);
  }
  uint64_t v6 = v5[2];
  v8[0] = (uint64_t)v5 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v8[1] = v6;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v8, a2);
  *a1 = v5;
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v245 = a2;
  uint64_t v263 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
  uint64_t v235 = *(void *)(v263 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v263);
  uint64_t v230 = (uint64_t)&v222 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v246 = (uint64_t)&v222 - v8;
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v222 - v10;
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  int v14 = (char *)&v222 - v13;
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v222 - v16;
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  unint64_t v20 = (char *)&v222 - v19;
  uint64_t v21 = MEMORY[0x1F4188790](v18);
  uint64_t v23 = (char *)&v222 - v22;
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  v238 = (char *)&v222 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  Swift::String v254 = (char *)&v222 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  unint64_t v231 = (char *)&v222 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v234 = (uint64_t)&v222 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v236 = (uint64_t)&v222 - v33;
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v226 = (uint64_t)&v222 - v35;
  MEMORY[0x1F4188790](v34);
  uint64_t v225 = (uint64_t)&v222 - v36;
  uint64_t v255 = a1;
  Swift::Int v37 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v37);
  if (result >= v37)
  {
    if (v37 < 0) {
      goto LABEL_174;
    }
    if (v37) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v37, 1, v255, v245);
    }
    return result;
  }
  if (v37 >= 0) {
    uint64_t v39 = v37;
  }
  else {
    uint64_t v39 = v37 + 1;
  }
  if (v37 < -1) {
    goto LABEL_182;
  }
  uint64_t v237 = v11;
  Swift::Int v224 = result;
  if (v37 < 2)
  {
    uint64_t v43 = MEMORY[0x1E4FBC860];
    unint64_t v233 = MEMORY[0x1E4FBC860]
         + ((*(unsigned __int8 *)(v235 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v235 + 80));
    if (v37 != 1)
    {
      unint64_t v165 = *(void *)(MEMORY[0x1E4FBC860] + 16);
      uint64_t v45 = (char *)MEMORY[0x1E4FBC860];
      goto LABEL_137;
    }
    uint64_t v223 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v40 = v39 >> 1;
    uint64_t v41 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v41 + 16) = v40;
    uint64_t v42 = *(unsigned __int8 *)(v235 + 80);
    uint64_t v223 = v41;
    unint64_t v233 = v41 + ((v42 + 32) & ~v42);
  }
  Swift::Int v44 = 0;
  uint64_t v45 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v242 = v14;
  unint64_t v244 = v17;
  v256 = v20;
  Swift::String v227 = v23;
  while (2)
  {
    unsigned int v229 = v45;
    Swift::Int v232 = v44;
    if (v44 + 1 >= v37)
    {
      Swift::Int v52 = v44 + 1;
      goto LABEL_51;
    }
    uint64_t v249 = (void (*)(void))v37;
    Swift::Int v46 = v44;
    uint64_t v47 = *v255;
    Swift::Int v48 = *(void *)(v235 + 72);
    uint64_t v262 = v44 + 1;
    uint64_t v49 = v225;
    outlined init with copy of ReferenceResolutionClientProtocol?(v47 + v48 * (v44 + 1), v225, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    uint64_t v240 = v47;
    Swift::Int v252 = v48;
    uint64_t v50 = v47 + v48 * v46;
    uint64_t v51 = v226;
    outlined init with copy of ReferenceResolutionClientProtocol?(v50, v226, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    LODWORD(v248) = closure #3 in ActionGenerator.generateActionCandidates(from:rrCandidates:appShortcutProvider:)(v49, v51, v245);
    if (v3)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v51, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      outlined destroy of ReferenceResolutionClientProtocol?(v49, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      goto LABEL_151;
    }
    outlined destroy of ReferenceResolutionClientProtocol?(v51, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    outlined destroy of ReferenceResolutionClientProtocol?(v49, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
    Swift::Int v52 = v46 + 2;
    if (v46 + 2 >= (uint64_t)v249)
    {
      Swift::Int v44 = v46;
      Swift::Int v37 = (Swift::Int)v249;
      goto LABEL_37;
    }
    uint64_t v222 = 0;
    uint64_t v247 = v252 * v262;
    uint64_t v53 = v240;
    uint64_t v241 = v252 * v52;
    uint64_t v54 = (uint64_t)v231;
    while (1)
    {
      Swift::Int v243 = v52;
      uint64_t v55 = v236;
      outlined init with copy of ReferenceResolutionClientProtocol?(v53 + v241, v236, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      outlined init with copy of ReferenceResolutionClientProtocol?(v53 + v247, v234, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      uint64_t v56 = *(int *)(v263 + 48);
      uint64_t v57 = (char *)(v54 + v56);
      uint64_t v58 = v55 + v56;
      uint64_t v59 = type metadata accessor for UUID();
      uint64_t v60 = *(void *)(v59 - 8);
      uint64_t v258 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16);
      v258(v54, v55, v59);
      uint64_t v61 = type metadata accessor for ActionCandidate();
      uint64_t v62 = *(void *)(v61 - 8);
      uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 16);
      uint64_t v250 = v58;
      Swift::String v257 = v63;
      uint64_t v253 = v62 + 16;
      v63(v57, v58, v61);
      uint64_t v64 = *v245;
      uint64_t v65 = *(void *)(*v245 + 16);
      uint64_t v251 = v53;
      if (!v65 || (unint64_t v66 = specialized __RawDictionaryStorage.find<A>(_:)(v54), (v67 & 1) == 0))
      {
        unsigned int v77 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
        uint64_t v262 = (v62 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        v77((uint64_t)v57, v61);
        uint64_t v78 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
        uint64_t v81 = (v60 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        v78(v54, v59);
LABEL_29:
        uint64_t v259 = v81;
        Swift::String v260 = (void (*)(char *, uint64_t))v78;
        uint64_t v85 = v263;
        uint64_t v86 = &v254[*(int *)(v263 + 48)];
        uint64_t v87 = (void (*)(char *, uint64_t, uint64_t))v258;
        ((void (*)(void))v258)();
        uint64_t v88 = (void (*)(char *, uint64_t))v77;
        uint64_t v261 = (void (*)(char *, uint64_t))v77;
        unint64_t v89 = v257;
        v257(v86, v250, v61);
        uint64_t v250 = ActionCandidate.affinityScore.getter();
        v88(v86, v61);
        uint64_t v90 = *(int *)(v85 + 48);
        uint64_t v91 = v238;
        uint64_t v92 = &v238[v90];
        uint64_t v93 = v59;
        uint64_t v83 = v234;
        uint64_t v94 = v234 + v90;
        v87(v238, v234, v93);
        v89(v92, v94, v61);
        uint64_t v95 = ActionCandidate.affinityScore.getter();
        v261(v92, v61);
        uint64_t v84 = v236;
        BOOL v82 = v95 < v250;
        uint64_t v96 = v260;
        v260(v91, v93);
        v96(v254, v93);
        int v14 = v242;
        uint64_t v17 = v244;
        unint64_t v20 = v256;
        goto LABEL_30;
      }
      uint64_t v239 = *(void *)(*(void *)(v64 + 56) + 8 * v66);
      uint64_t v261 = *(void (**)(char *, uint64_t))(v62 + 8);
      uint64_t v262 = (v62 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v261(v57, v61);
      uint64_t v68 = *(void (**)(char *, uint64_t))(v60 + 8);
      uint64_t v259 = (v60 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      Swift::String v260 = v68;
      v68((char *)v54, v59);
      uint64_t v69 = *(int *)(v263 + 48);
      uint64_t v70 = (uint64_t)v227;
      uint64_t v71 = &v227[v69];
      uint64_t v72 = v234 + v69;
      ((void (*)(char *))v258)(v227);
      v257(v71, v72, v61);
      uint64_t v73 = *v245;
      if (!*(void *)(*v245 + 16) || (unint64_t v74 = specialized __RawDictionaryStorage.find<A>(_:)(v70), (v75 & 1) == 0))
      {
        unsigned int v77 = (void (*)(uint64_t, uint64_t))v261;
        v261(v71, v61);
        uint64_t v78 = (void (*)(uint64_t, uint64_t))v260;
        v260((char *)v70, v59);
        uint64_t v81 = v259;
        goto LABEL_29;
      }
      uint64_t v76 = *(void *)(*(void *)(v73 + 56) + 8 * v74);
      unsigned int v77 = (void (*)(uint64_t, uint64_t))v261;
      v261(v71, v61);
      uint64_t v78 = (void (*)(uint64_t, uint64_t))v260;
      v260((char *)v70, v59);
      BOOL v79 = v239 == v76;
      BOOL v80 = v239 < v76;
      uint64_t v81 = v259;
      if (v79) {
        goto LABEL_29;
      }
      BOOL v82 = v80;
      int v14 = v242;
      uint64_t v17 = v244;
      unint64_t v20 = v256;
      uint64_t v83 = v234;
      uint64_t v84 = v236;
LABEL_30:
      Swift::Int v37 = (Swift::Int)v249;
      outlined destroy of ReferenceResolutionClientProtocol?(v83, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      outlined destroy of ReferenceResolutionClientProtocol?(v84, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      uint64_t v54 = (uint64_t)v231;
      if ((v248 ^ v82)) {
        break;
      }
      Swift::Int v52 = v243 + 1;
      uint64_t v53 = v251 + v252;
      if (v37 == v243 + 1)
      {
        Swift::Int v37 = (Swift::Int)v249;
        Swift::Int v52 = (Swift::Int)v249;
        uint64_t v3 = v222;
        goto LABEL_36;
      }
    }
    uint64_t v3 = v222;
    Swift::Int v52 = v243;
LABEL_36:
    Swift::Int v44 = v232;
LABEL_37:
    if ((v248 & 1) == 0)
    {
LABEL_51:
      if (v52 >= v37) {
        goto LABEL_83;
      }
      BOOL v180 = __OFSUB__(v52, v44);
      Swift::Int v106 = v52 - v44;
      if (v180) {
        goto LABEL_173;
      }
      if (v106 >= v224)
      {
LABEL_82:
        Swift::Int v44 = v232;
LABEL_83:
        if (v52 < v44) {
          goto LABEL_169;
        }
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        Swift::Int v243 = v52;
        if (isUniquelyReferenced_nonNull_native) {
          uint64_t v45 = v229;
        }
        else {
          uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v229 + 2) + 1, 1, v229);
        }
        unint64_t v164 = *((void *)v45 + 2);
        unint64_t v163 = *((void *)v45 + 3);
        unint64_t v165 = v164 + 1;
        if (v164 >= v163 >> 1) {
          uint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v163 > 1), v164 + 1, 1, v45);
        }
        *((void *)v45 + 2) = v165;
        uint64_t v166 = v45 + 32;
        uint64_t v167 = &v45[16 * v164 + 32];
        Swift::Int v168 = v243;
        *(void *)uint64_t v167 = v232;
        *((void *)v167 + 1) = v168;
        if (v164)
        {
          int v14 = v242;
          while (1)
          {
            unint64_t v169 = v165 - 1;
            if (v165 >= 4)
            {
              uint64_t v174 = &v166[16 * v165];
              uint64_t v175 = *((void *)v174 - 8);
              uint64_t v176 = *((void *)v174 - 7);
              BOOL v180 = __OFSUB__(v176, v175);
              uint64_t v177 = v176 - v175;
              if (v180) {
                goto LABEL_157;
              }
              uint64_t v179 = *((void *)v174 - 6);
              uint64_t v178 = *((void *)v174 - 5);
              BOOL v180 = __OFSUB__(v178, v179);
              uint64_t v172 = v178 - v179;
              char v173 = v180;
              if (v180) {
                goto LABEL_158;
              }
              unint64_t v181 = v165 - 2;
              os_log_type_t v182 = &v166[16 * v165 - 32];
              uint64_t v184 = *(void *)v182;
              uint64_t v183 = *((void *)v182 + 1);
              BOOL v180 = __OFSUB__(v183, v184);
              uint64_t v185 = v183 - v184;
              if (v180) {
                goto LABEL_160;
              }
              BOOL v180 = __OFADD__(v172, v185);
              uint64_t v186 = v172 + v185;
              if (v180) {
                goto LABEL_163;
              }
              if (v186 >= v177)
              {
                id v204 = &v166[16 * v169];
                uint64_t v206 = *(void *)v204;
                uint64_t v205 = *((void *)v204 + 1);
                BOOL v180 = __OFSUB__(v205, v206);
                uint64_t v207 = v205 - v206;
                if (v180) {
                  goto LABEL_167;
                }
                BOOL v197 = v172 < v207;
                goto LABEL_121;
              }
            }
            else
            {
              if (v165 != 3)
              {
                uint64_t v198 = *((void *)v45 + 4);
                uint64_t v199 = *((void *)v45 + 5);
                BOOL v180 = __OFSUB__(v199, v198);
                uint64_t v191 = v199 - v198;
                char v192 = v180;
                goto LABEL_115;
              }
              uint64_t v171 = *((void *)v45 + 4);
              uint64_t v170 = *((void *)v45 + 5);
              BOOL v180 = __OFSUB__(v170, v171);
              uint64_t v172 = v170 - v171;
              char v173 = v180;
            }
            if (v173) {
              goto LABEL_159;
            }
            unint64_t v181 = v165 - 2;
            uint64_t v187 = &v166[16 * v165 - 32];
            uint64_t v189 = *(void *)v187;
            uint64_t v188 = *((void *)v187 + 1);
            BOOL v190 = __OFSUB__(v188, v189);
            uint64_t v191 = v188 - v189;
            char v192 = v190;
            if (v190) {
              goto LABEL_162;
            }
            uint64_t v193 = &v166[16 * v169];
            uint64_t v195 = *(void *)v193;
            uint64_t v194 = *((void *)v193 + 1);
            BOOL v180 = __OFSUB__(v194, v195);
            uint64_t v196 = v194 - v195;
            if (v180) {
              goto LABEL_165;
            }
            if (__OFADD__(v191, v196)) {
              goto LABEL_166;
            }
            if (v191 + v196 >= v172)
            {
              BOOL v197 = v172 < v196;
LABEL_121:
              if (v197) {
                unint64_t v169 = v181;
              }
              goto LABEL_123;
            }
LABEL_115:
            if (v192) {
              goto LABEL_161;
            }
            uint64_t v200 = &v166[16 * v169];
            uint64_t v202 = *(void *)v200;
            uint64_t v201 = *((void *)v200 + 1);
            BOOL v180 = __OFSUB__(v201, v202);
            uint64_t v203 = v201 - v202;
            if (v180) {
              goto LABEL_164;
            }
            if (v203 < v191) {
              goto LABEL_132;
            }
LABEL_123:
            unint64_t v208 = v169 - 1;
            if (v169 - 1 >= v165)
            {
              __break(1u);
LABEL_154:
              __break(1u);
LABEL_155:
              __break(1u);
LABEL_156:
              __break(1u);
LABEL_157:
              __break(1u);
LABEL_158:
              __break(1u);
LABEL_159:
              __break(1u);
LABEL_160:
              __break(1u);
LABEL_161:
              __break(1u);
LABEL_162:
              __break(1u);
LABEL_163:
              __break(1u);
LABEL_164:
              __break(1u);
LABEL_165:
              __break(1u);
LABEL_166:
              __break(1u);
LABEL_167:
              __break(1u);
LABEL_168:
              __break(1u);
LABEL_169:
              __break(1u);
LABEL_170:
              __break(1u);
LABEL_171:
              __break(1u);
LABEL_172:
              __break(1u);
LABEL_173:
              __break(1u);
LABEL_174:
              __break(1u);
LABEL_175:
              __break(1u);
              goto LABEL_176;
            }
            if (!*v255) {
              goto LABEL_179;
            }
            uint64_t v209 = v45;
            uint64_t v210 = &v166[16 * v208];
            uint64_t v211 = *(void *)v210;
            uint64_t v212 = &v166[16 * v169];
            uint64_t v213 = *((void *)v212 + 1);
            specialized _merge<A>(low:mid:high:buffer:by:)(*v255 + *(void *)(v235 + 72) * *(void *)v210, *v255 + *(void *)(v235 + 72) * *(void *)v212, *v255 + *(void *)(v235 + 72) * v213, v233, v245);
            if (v3) {
              goto LABEL_151;
            }
            if (v213 < v211) {
              goto LABEL_154;
            }
            if (v169 > *((void *)v209 + 2)) {
              goto LABEL_155;
            }
            *(void *)uint64_t v210 = v211;
            *(void *)&v166[16 * v208 + 8] = v213;
            unint64_t v214 = *((void *)v209 + 2);
            if (v169 >= v214) {
              goto LABEL_156;
            }
            unint64_t v165 = v214 - 1;
            memmove(&v166[16 * v169], v212 + 16, 16 * (v214 - 1 - v169));
            uint64_t v45 = v209;
            *((void *)v209 + 2) = v214 - 1;
            int v14 = v242;
            uint64_t v17 = v244;
            unint64_t v20 = v256;
            if (v214 <= 2) {
              goto LABEL_132;
            }
          }
        }
        unint64_t v165 = 1;
        int v14 = v242;
LABEL_132:
        Swift::Int v37 = v255[1];
        Swift::Int v44 = v243;
        if (v243 >= v37)
        {
          uint64_t v43 = v223;
LABEL_137:
          uint64_t v223 = v43;
          if (v165 >= 2)
          {
            uint64_t v215 = *v255;
            do
            {
              unint64_t v216 = v165 - 2;
              if (v165 < 2) {
                goto LABEL_168;
              }
              if (!v215) {
                goto LABEL_181;
              }
              uint64_t v217 = v45;
              uint64_t v218 = *(void *)&v45[16 * v216 + 32];
              uint64_t v219 = *(void *)&v45[16 * v165 + 24];
              specialized _merge<A>(low:mid:high:buffer:by:)(v215 + *(void *)(v235 + 72) * v218, v215 + *(void *)(v235 + 72) * *(void *)&v45[16 * v165 + 16], v215 + *(void *)(v235 + 72) * v219, v233, v245);
              if (v3) {
                break;
              }
              if (v219 < v218) {
                goto LABEL_170;
              }
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v217 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v217);
              }
              if (v216 >= *((void *)v217 + 2)) {
                goto LABEL_171;
              }
              uint64_t v220 = &v217[16 * v216 + 32];
              *(void *)uint64_t v220 = v218;
              *((void *)v220 + 1) = v219;
              unint64_t v221 = *((void *)v217 + 2);
              if (v165 > v221) {
                goto LABEL_172;
              }
              memmove(&v217[16 * v165 + 16], &v217[16 * v165 + 32], 16 * (v221 - v165));
              uint64_t v45 = v217;
              *((void *)v217 + 2) = v221 - 1;
              unint64_t v165 = v221 - 1;
            }
            while (v221 > 2);
          }
LABEL_151:
          swift_bridgeObjectRelease();
          *(void *)(v223 + 16) = 0;
          return swift_bridgeObjectRelease();
        }
        continue;
      }
      if (__OFADD__(v232, v224)) {
        goto LABEL_175;
      }
      if (v232 + v224 >= v37) {
        Swift::Int v107 = v37;
      }
      else {
        Swift::Int v107 = v232 + v224;
      }
      if (v107 < v232)
      {
LABEL_176:
        __break(1u);
        goto LABEL_177;
      }
      if (v52 == v107)
      {
        Swift::Int v44 = v232;
        goto LABEL_83;
      }
      uint64_t v222 = v3;
      uint64_t v108 = *(void *)(v235 + 72);
      uint64_t v109 = v108 * (v52 - 1);
      uint64_t v239 = v108;
      Swift::Int v110 = v52 * v108;
      Swift::Int v228 = v107;
LABEL_64:
      uint64_t v112 = 0;
      Swift::Int v113 = v232;
      Swift::Int v243 = v52;
      uint64_t v241 = v109;
      uint64_t v240 = v110;
      while (1)
      {
        Swift::Int v252 = v113;
        uint64_t v114 = *v255;
        uint64_t v251 = v110 + v112;
        outlined init with copy of ReferenceResolutionClientProtocol?(v110 + v112 + v114, (uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
        uint64_t v253 = v112;
        uint64_t v250 = v109 + v112;
        outlined init with copy of ReferenceResolutionClientProtocol?(v109 + v112 + v114, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
        uint64_t v115 = *(int *)(v263 + 48);
        uint64_t v116 = &v14[v115];
        uint64_t v117 = &v20[v115];
        uint64_t v118 = type metadata accessor for UUID();
        uint64_t v119 = *(void *)(v118 - 8);
        uint64_t v120 = *(void (**)(void))(v119 + 16);
        ((void (*)(char *, char *, uint64_t))v120)(v14, v20, v118);
        uint64_t v121 = type metadata accessor for ActionCandidate();
        uint64_t v122 = *(void *)(v121 - 8);
        uint64_t v123 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
        uint64_t v248 = (uint64_t)v117;
        Swift::String v257 = v123;
        uint64_t v258 = (void (*)(uint64_t, uint64_t, uint64_t))(v122 + 16);
        v123(v116, (uint64_t)v117, v121);
        uint64_t v124 = *v245;
        uint64_t v125 = *(void *)(*v245 + 16);
        uint64_t v249 = v120;
        if (!v125) {
          break;
        }
        unint64_t v126 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v14);
        if ((v127 & 1) == 0) {
          break;
        }
        uint64_t v128 = *(void *)(*(void *)(v124 + 56) + 8 * v126);
        uint64_t v129 = *(void (**)(char *, uint64_t))(v122 + 8);
        uint64_t v247 = (v122 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        uint64_t v261 = v129;
        uint64_t v262 = v128;
        v129(v116, v121);
        uint64_t v130 = *(void (**)(char *, uint64_t))(v119 + 8);
        uint64_t v259 = (v119 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        Swift::String v260 = v130;
        v130(v14, v118);
        uint64_t v131 = *(int *)(v263 + 48);
        uint64_t v132 = (uint64_t)v237;
        char v133 = &v237[v131];
        uint64_t v134 = &v244[v131];
        ((void (*)(char *))v120)(v237);
        v257(v133, (uint64_t)v134, v121);
        uint64_t v135 = *v245;
        if (!*(void *)(*v245 + 16) || (unint64_t v136 = specialized __RawDictionaryStorage.find<A>(_:)(v132), (v137 & 1) == 0))
        {
          uint64_t v147 = v133;
          uint64_t v140 = v261;
          v261(v147, v121);
          uint64_t v141 = v260;
          v260((char *)v132, v118);
          uint64_t v143 = v259;
          goto LABEL_77;
        }
        uint64_t v138 = *(void *)(*(void *)(v135 + 56) + 8 * v136);
        uint64_t v139 = v133;
        uint64_t v140 = v261;
        v261(v139, v121);
        uint64_t v141 = v260;
        v260((char *)v132, v118);
        BOOL v79 = v262 == v138;
        BOOL v142 = v262 < v138;
        uint64_t v143 = v259;
        if (v79) {
          goto LABEL_77;
        }
        BOOL v144 = v142;
        uint64_t v17 = v244;
        unint64_t v20 = v256;
LABEL_78:
        uint64_t v109 = v241;
        Swift::Int v110 = v240;
        uint64_t v159 = v253;
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
        if (!v144)
        {
          int v14 = v242;
          Swift::Int v111 = v243;
LABEL_63:
          Swift::Int v52 = v111 + 1;
          v109 += v239;
          v110 += v239;
          if (v52 == v228)
          {
            Swift::Int v52 = v228;
            uint64_t v3 = v222;
            goto LABEL_82;
          }
          goto LABEL_64;
        }
        uint64_t v160 = *v255;
        if (!*v255) {
          goto LABEL_178;
        }
        uint64_t v161 = v160 + v109 + v159;
        outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v160 + v110 + v159, v246, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
        swift_arrayInitWithTakeFrontToBack();
        outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v246, v161, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
        uint64_t v112 = v159 - v239;
        Swift::Int v113 = v252 + 1;
        int v14 = v242;
        Swift::Int v111 = v243;
        if (v243 == v252 + 1) {
          goto LABEL_63;
        }
      }
      uint64_t v145 = *(void (**)(char *, uint64_t))(v122 + 8);
      uint64_t v247 = (v122 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      unsigned int v146 = v116;
      uint64_t v140 = v145;
      v145(v146, v121);
      uint64_t v141 = *(void (**)(char *, uint64_t))(v119 + 8);
      uint64_t v143 = (v119 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v141(v14, v118);
LABEL_77:
      Swift::String v260 = v141;
      uint64_t v261 = v140;
      uint64_t v259 = v143;
      uint64_t v148 = v263;
      uint64_t v149 = &v254[*(int *)(v263 + 48)];
      uint64_t v262 = v118;
      uint64_t v150 = v249;
      v249();
      uint64_t v151 = (void (*)(char *, char *, uint64_t))v257;
      v257(v149, v248, v121);
      uint64_t v248 = ActionCandidate.affinityScore.getter();
      v140(v149, v121);
      uint64_t v152 = *(int *)(v148 + 48);
      uint64_t v153 = v238;
      uint64_t v154 = &v238[v152];
      uint64_t v17 = v244;
      id v155 = &v244[v152];
      ((void (*)(char *, char *, uint64_t))v150)(v238, v244, v262);
      v151(v154, v155, v121);
      uint64_t v156 = ActionCandidate.affinityScore.getter();
      v261(v154, v121);
      BOOL v144 = v156 < v248;
      uint64_t v157 = v262;
      uint64_t v158 = v260;
      v260(v153, v262);
      unint64_t v20 = v256;
      v158(v254, v157);
      goto LABEL_78;
    }
    break;
  }
  if (v52 >= v44)
  {
    if (v44 < v52)
    {
      uint64_t v97 = 0;
      uint64_t v98 = v252 * (v52 - 1);
      Swift::Int v99 = v52 * v252;
      Swift::Int v100 = v44;
      uint64_t v101 = v44 * v252;
      do
      {
        if (v100 != v52 + v97 - 1)
        {
          Swift::Int v103 = v52;
          uint64_t v104 = v240;
          if (!v240) {
            goto LABEL_180;
          }
          unint64_t v105 = v240 + v101;
          uint64_t v262 = v240 + v98;
          outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v240 + v101, v230, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
          if (v101 < v98 || v105 >= v104 + v99)
          {
            uint64_t v102 = v262;
            swift_arrayInitWithTakeFrontToBack();
          }
          else
          {
            uint64_t v102 = v262;
            if (v101 != v98) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v230, v102, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
          int v14 = v242;
          Swift::Int v52 = v103;
        }
        ++v100;
        --v97;
        v98 -= v252;
        v99 -= v252;
        v101 += v252;
      }
      while (v100 < v52 + v97);
      uint64_t v17 = v244;
      unint64_t v20 = v256;
      Swift::Int v44 = v232;
      Swift::Int v37 = (Swift::Int)v249;
    }
    goto LABEL_51;
  }
LABEL_177:
  __break(1u);
LABEL_178:
  __break(1u);
LABEL_179:
  __break(1u);
LABEL_180:
  __break(1u);
LABEL_181:
  __break(1u);
LABEL_182:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0) {
      goto LABEL_132;
    }
    if (v3) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
    }
    return;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_140;
  }
  Swift::Int v104 = v4;
  Swift::Int v99 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v111 = MEMORY[0x1E4FBC860];
    Swift::Int v110 = (void **)((MEMORY[0x1E4FBC860] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      unint64_t v11 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_98:
      if (v11 >= 2)
      {
        uint64_t v93 = *v99;
        do
        {
          unint64_t v94 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_127;
          }
          if (!v93) {
            goto LABEL_139;
          }
          uint64_t v95 = *(void *)&v8[16 * v94 + 32];
          uint64_t v96 = *(void *)&v8[16 * v11 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((id *)(v93 + 8 * v95), (id *)(v93 + 8 * *(void *)&v8[16 * v11 + 16]), v93 + 8 * v96, v110);
          if (v1) {
            break;
          }
          if (v96 < v95) {
            goto LABEL_128;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v8);
          }
          if (v94 >= *((void *)v8 + 2)) {
            goto LABEL_129;
          }
          uint64_t v97 = &v8[16 * v94 + 32];
          *(void *)uint64_t v97 = v95;
          *((void *)v97 + 1) = v96;
          unint64_t v98 = *((void *)v8 + 2);
          if (v11 > v98) {
            goto LABEL_130;
          }
          memmove(&v8[16 * v11 + 16], &v8[16 * v11 + 32], 16 * (v98 - v11));
          *((void *)v8 + 2) = v98 - 1;
          unint64_t v11 = v98 - 1;
        }
        while (v98 > 2);
      }
LABEL_109:
      swift_bridgeObjectRelease();
      *(void *)((v111 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    type metadata accessor for AFServiceDeviceContext();
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) = v6;
    Swift::Int v110 = (void **)((v7 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v111 = v7;
  }
  Swift::Int v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v100 = *a1 - 8;
  uint64_t v101 = *a1 + 16;
  uint64_t v8 = (char *)MEMORY[0x1E4FBC860];
  Swift::Int v107 = v3;
  while (1)
  {
    Swift::Int v12 = v9++;
    Swift::Int v108 = v12;
    if (v9 < v3)
    {
      uint64_t v13 = *(void **)(v10 + 8 * v12);
      id v14 = *(id *)(v10 + 8 * v9);
      id v15 = v13;
      id v105 = objc_msgSend(v14, sel_proximity);
      id v16 = objc_msgSend(v15, sel_proximity);

      Swift::Int v3 = v107;
      Swift::Int v9 = v12 + 2;
      if (v12 + 2 < v107)
      {
        uint64_t v102 = v8;
        uint64_t v17 = (id *)(v101 + 8 * v12);
        while (1)
        {
          uint64_t v18 = *(v17 - 1);
          id v19 = *v17;
          id v20 = v18;
          id v21 = objc_msgSend(v19, sel_proximity);
          id v22 = objc_msgSend(v20, sel_proximity);

          if ((uint64_t)v16 < (uint64_t)v105 == (uint64_t)v22 >= (uint64_t)v21) {
            break;
          }
          ++v9;
          ++v17;
          Swift::Int v3 = v107;
          if (v107 == v9)
          {
            Swift::Int v9 = v107;
            uint64_t v8 = v102;
            goto LABEL_22;
          }
        }
        uint64_t v8 = v102;
        Swift::Int v3 = v107;
LABEL_22:
        Swift::Int v12 = v108;
      }
      if ((uint64_t)v16 < (uint64_t)v105)
      {
        if (v9 < v12) {
          goto LABEL_133;
        }
        if (v12 < v9)
        {
          uint64_t v23 = (uint64_t *)(v100 + 8 * v9);
          Swift::Int v24 = v9;
          Swift::Int v25 = v12;
          uint64_t v26 = (uint64_t *)(v10 + 8 * v12);
          do
          {
            if (v25 != --v24)
            {
              if (!v10) {
                goto LABEL_138;
              }
              uint64_t v27 = *v26;
              *uint64_t v26 = *v23;
              uint64_t *v23 = v27;
            }
            ++v25;
            --v23;
            ++v26;
          }
          while (v25 < v24);
        }
      }
    }
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v12)) {
        goto LABEL_131;
      }
      if (v9 - v12 < v104) {
        break;
      }
    }
LABEL_48:
    if (v9 < v12) {
      goto LABEL_126;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v8 + 2) + 1, 1, v8);
    }
    unint64_t v40 = *((void *)v8 + 2);
    unint64_t v39 = *((void *)v8 + 3);
    unint64_t v11 = v40 + 1;
    if (v40 >= v39 >> 1) {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v40 + 1, 1, v8);
    }
    *((void *)v8 + 2) = v11;
    uint64_t v41 = v8 + 32;
    uint64_t v42 = &v8[16 * v40 + 32];
    *(void *)uint64_t v42 = v12;
    *((void *)v42 + 1) = v9;
    if (v40)
    {
      Swift::Int v109 = v9;
      while (1)
      {
        unint64_t v43 = v11 - 1;
        if (v11 >= 4)
        {
          Swift::Int v48 = &v41[16 * v11];
          uint64_t v49 = *((void *)v48 - 8);
          uint64_t v50 = *((void *)v48 - 7);
          BOOL v54 = __OFSUB__(v50, v49);
          uint64_t v51 = v50 - v49;
          if (v54) {
            goto LABEL_115;
          }
          uint64_t v53 = *((void *)v48 - 6);
          uint64_t v52 = *((void *)v48 - 5);
          BOOL v54 = __OFSUB__(v52, v53);
          uint64_t v46 = v52 - v53;
          char v47 = v54;
          if (v54) {
            goto LABEL_116;
          }
          unint64_t v55 = v11 - 2;
          uint64_t v56 = &v41[16 * v11 - 32];
          uint64_t v58 = *(void *)v56;
          uint64_t v57 = *((void *)v56 + 1);
          BOOL v54 = __OFSUB__(v57, v58);
          uint64_t v59 = v57 - v58;
          if (v54) {
            goto LABEL_118;
          }
          BOOL v54 = __OFADD__(v46, v59);
          uint64_t v60 = v46 + v59;
          if (v54) {
            goto LABEL_121;
          }
          if (v60 >= v51)
          {
            uint64_t v78 = &v41[16 * v43];
            uint64_t v80 = *(void *)v78;
            uint64_t v79 = *((void *)v78 + 1);
            BOOL v54 = __OFSUB__(v79, v80);
            uint64_t v81 = v79 - v80;
            if (v54) {
              goto LABEL_125;
            }
            BOOL v71 = v46 < v81;
            goto LABEL_86;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v72 = *((void *)v8 + 4);
            uint64_t v73 = *((void *)v8 + 5);
            BOOL v54 = __OFSUB__(v73, v72);
            uint64_t v65 = v73 - v72;
            char v66 = v54;
            goto LABEL_80;
          }
          uint64_t v45 = *((void *)v8 + 4);
          uint64_t v44 = *((void *)v8 + 5);
          BOOL v54 = __OFSUB__(v44, v45);
          uint64_t v46 = v44 - v45;
          char v47 = v54;
        }
        if (v47) {
          goto LABEL_117;
        }
        unint64_t v55 = v11 - 2;
        uint64_t v61 = &v41[16 * v11 - 32];
        uint64_t v63 = *(void *)v61;
        uint64_t v62 = *((void *)v61 + 1);
        BOOL v64 = __OFSUB__(v62, v63);
        uint64_t v65 = v62 - v63;
        char v66 = v64;
        if (v64) {
          goto LABEL_120;
        }
        char v67 = &v41[16 * v43];
        uint64_t v69 = *(void *)v67;
        uint64_t v68 = *((void *)v67 + 1);
        BOOL v54 = __OFSUB__(v68, v69);
        uint64_t v70 = v68 - v69;
        if (v54) {
          goto LABEL_123;
        }
        if (__OFADD__(v65, v70)) {
          goto LABEL_124;
        }
        if (v65 + v70 >= v46)
        {
          BOOL v71 = v46 < v70;
LABEL_86:
          if (v71) {
            unint64_t v43 = v55;
          }
          goto LABEL_88;
        }
LABEL_80:
        if (v66) {
          goto LABEL_119;
        }
        unint64_t v74 = &v41[16 * v43];
        uint64_t v76 = *(void *)v74;
        uint64_t v75 = *((void *)v74 + 1);
        BOOL v54 = __OFSUB__(v75, v76);
        uint64_t v77 = v75 - v76;
        if (v54) {
          goto LABEL_122;
        }
        if (v77 < v65) {
          goto LABEL_14;
        }
LABEL_88:
        unint64_t v82 = v43 - 1;
        if (v43 - 1 >= v11)
        {
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
          goto LABEL_135;
        }
        uint64_t v83 = v10;
        if (!v10) {
          goto LABEL_137;
        }
        uint64_t v84 = v8;
        uint64_t v85 = &v41[16 * v82];
        uint64_t v86 = *(void *)v85;
        uint64_t v87 = v41;
        unint64_t v88 = v43;
        unint64_t v89 = &v41[16 * v43];
        uint64_t v90 = *((void *)v89 + 1);
        uint64_t v91 = v83;
        specialized _merge<A>(low:mid:high:buffer:by:)((id *)(v83 + 8 * *(void *)v85), (id *)(v83 + 8 * *(void *)v89), v83 + 8 * v90, v110);
        if (v1) {
          goto LABEL_109;
        }
        if (v90 < v86) {
          goto LABEL_112;
        }
        if (v88 > *((void *)v84 + 2)) {
          goto LABEL_113;
        }
        *(void *)uint64_t v85 = v86;
        *(void *)&v87[16 * v82 + 8] = v90;
        unint64_t v92 = *((void *)v84 + 2);
        if (v88 >= v92) {
          goto LABEL_114;
        }
        uint64_t v8 = v84;
        unint64_t v11 = v92 - 1;
        memmove(v89, v89 + 16, 16 * (v92 - 1 - v88));
        uint64_t v41 = v87;
        *((void *)v84 + 2) = v92 - 1;
        uint64_t v10 = v91;
        Swift::Int v9 = v109;
        if (v92 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v11 = 1;
LABEL_14:
    Swift::Int v3 = v107;
    if (v9 >= v107) {
      goto LABEL_98;
    }
  }
  if (__OFADD__(v12, v104)) {
    goto LABEL_134;
  }
  if (v12 + v104 >= v3) {
    Swift::Int v28 = v3;
  }
  else {
    Swift::Int v28 = v12 + v104;
  }
  if (v28 >= v12)
  {
    if (v9 != v28)
    {
      Swift::Int v103 = v8;
      uint64_t v29 = v100 + 8 * v9;
      Swift::Int v106 = v28;
      do
      {
        uint64_t v30 = *(void **)(v10 + 8 * v9);
        Swift::Int v31 = v12;
        uint64_t v32 = v29;
        do
        {
          uint64_t v33 = *(void **)v32;
          id v34 = v30;
          id v35 = v33;
          id v36 = objc_msgSend(v34, sel_proximity);
          id v37 = objc_msgSend(v35, sel_proximity);

          if ((uint64_t)v37 >= (uint64_t)v36) {
            break;
          }
          if (!v10) {
            goto LABEL_136;
          }
          unint64_t v38 = *(void **)v32;
          uint64_t v30 = *(void **)(v32 + 8);
          *(void *)uint64_t v32 = v30;
          *(void *)(v32 + 8) = v38;
          v32 -= 8;
          ++v31;
        }
        while (v9 != v31);
        ++v9;
        v29 += 8;
        Swift::Int v12 = v108;
      }
      while (v9 != v106);
      Swift::Int v9 = v106;
      uint64_t v8 = v103;
    }
    goto LABEL_48;
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t v88 = a5;
  unint64_t v98 = a4;
  uint64_t v79 = a1;
  uint64_t v106 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
  uint64_t v7 = MEMORY[0x1F4188790](v106);
  unint64_t v92 = &v77[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  unint64_t v82 = &v77[-v10];
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v80 = &v77[-v12];
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v91 = &v77[-v14];
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = &v77[-v16];
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  id v20 = &v77[-v19];
  uint64_t result = MEMORY[0x1F4188790](v18);
  Swift::Int v24 = &v77[-v23];
  uint64_t v86 = a3;
  uint64_t v78 = a2;
  if (a3 != a2)
  {
    uint64_t v25 = *(void *)(v22 + 72);
    uint64_t v26 = v25 * (v86 - 1);
    uint64_t v83 = v25;
    uint64_t v27 = v25 * v86;
    uint64_t v81 = v17;
    uint64_t v87 = v20;
    uint64_t v95 = &v77[-v23];
LABEL_5:
    uint64_t v107 = 0;
    uint64_t v99 = v79;
    uint64_t v85 = v26;
    uint64_t v84 = v27;
    while (1)
    {
      uint64_t v28 = (uint64_t)v82;
      uint64_t v29 = *v98;
      uint64_t v30 = v107;
      uint64_t v97 = v27 + v107;
      outlined init with copy of ReferenceResolutionClientProtocol?(v27 + v107 + v29, (uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      uint64_t v96 = v26 + v30;
      outlined init with copy of ReferenceResolutionClientProtocol?(v26 + v30 + v29, (uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      uint64_t v31 = *(int *)(v106 + 48);
      uint64_t v32 = &v17[v31];
      uint64_t v33 = &v24[v31];
      uint64_t v34 = type metadata accessor for UUID();
      uint64_t v35 = *(void *)(v34 - 8);
      uint64_t v36 = v34;
      uint64_t v102 = *(void (**)(void))(v35 + 16);
      ((void (*)(unsigned char *, unsigned char *))v102)(v17, v24);
      uint64_t v37 = type metadata accessor for ActionCandidate();
      uint64_t v38 = *(void *)(v37 - 8);
      unint64_t v39 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v38 + 16);
      uint64_t v94 = (uint64_t)v33;
      uint64_t v100 = v39;
      uint64_t v101 = v38 + 16;
      v39((uint64_t)v32, v33, v37);
      uint64_t v40 = *v88;
      if (!*(void *)(*v88 + 16)) {
        break;
      }
      unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v17);
      if ((v42 & 1) == 0) {
        break;
      }
      unint64_t v89 = *(unsigned char **)(*(void *)(v40 + 56) + 8 * v41);
      unint64_t v43 = *(void (**)(void, void))(v38 + 8);
      uint64_t v93 = (v38 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      id v105 = v43;
      v43(v32, v37);
      uint64_t v44 = *(void (**)(unsigned char *, uint64_t))(v35 + 8);
      uint64_t v103 = (v35 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      Swift::Int v104 = v44;
      v44(v17, v36);
      uint64_t v45 = *(int *)(v106 + 48);
      uint64_t v46 = v28 + v45;
      char v47 = &v87[v45];
      v102(v28);
      v100(v46, v47, v37);
      uint64_t v48 = *v88;
      if (!*(void *)(*v88 + 16) || (unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v28), (v50 & 1) == 0))
      {
        uint64_t v63 = v105;
        v105(v46, v37);
        BOOL v54 = v63;
        uint64_t v64 = v28;
        uint64_t v56 = v36;
        uint64_t v57 = v104;
        v104((unsigned char *)v64, v36);
        uint64_t v60 = v103;
        goto LABEL_18;
      }
      uint64_t v51 = *(unsigned char **)(*(void *)(v48 + 56) + 8 * v49);
      uint64_t v52 = v46;
      uint64_t v53 = v105;
      v105(v52, v37);
      BOOL v54 = v53;
      uint64_t v55 = v28;
      uint64_t v56 = v36;
      uint64_t v57 = v104;
      v104((unsigned char *)v55, v36);
      BOOL v58 = v89 == v51;
      BOOL v59 = (uint64_t)v89 < (uint64_t)v51;
      uint64_t v60 = v103;
      if (v58) {
        goto LABEL_18;
      }
      BOOL v61 = v59;
      id v20 = v87;
      Swift::Int v24 = v95;
LABEL_19:
      uint64_t v26 = v85;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      uint64_t result = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      uint64_t v17 = v81;
      uint64_t v27 = v84;
      if (!v61) {
        goto LABEL_4;
      }
      uint64_t v75 = *v98;
      if (!*v98)
      {
        __break(1u);
        return result;
      }
      uint64_t v76 = v75 + v26 + v107;
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v75 + v84 + v107, (uint64_t)v92, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v92, v76, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
      v107 -= v83;
      if (v86 == ++v99)
      {
LABEL_4:
        v26 += v83;
        v27 += v83;
        if (++v86 == v78) {
          return result;
        }
        goto LABEL_5;
      }
    }
    uint64_t v62 = *(void (**)(unsigned char *, uint64_t))(v38 + 8);
    uint64_t v93 = (v38 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v62(v32, v37);
    BOOL v54 = (void (*)(void, void))v62;
    uint64_t v57 = *(void (**)(unsigned char *, uint64_t))(v35 + 8);
    uint64_t v60 = (v35 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v56 = v36;
    v57(v17, v36);
LABEL_18:
    uint64_t v90 = v35 + 16;
    Swift::Int v104 = v57;
    id v105 = v54;
    uint64_t v103 = v60;
    uint64_t v65 = v106;
    char v66 = &v91[*(int *)(v106 + 48)];
    char v67 = (void (*)(unsigned char *, unsigned char *, uint64_t))v102;
    ((void (*)(void))v102)();
    uint64_t v68 = (void (*)(unsigned char *, unsigned char *, uint64_t))v100;
    v100((uint64_t)v66, (unsigned char *)v94, v37);
    uint64_t v94 = ActionCandidate.affinityScore.getter();
    v54(v66, v37);
    uint64_t v69 = *(int *)(v65 + 48);
    uint64_t v70 = v80;
    BOOL v71 = &v80[v69];
    id v20 = v87;
    unint64_t v89 = &v87[v69];
    v67(v80, v87, v56);
    v68(v71, v89, v37);
    uint64_t v72 = ActionCandidate.affinityScore.getter();
    v105(v71, v37);
    BOOL v61 = v72 < v94;
    uint64_t v73 = v70;
    Swift::Int v24 = v95;
    unint64_t v74 = v104;
    v104(v73, v56);
    v74(v91, v56);
    goto LABEL_19;
  }
  return result;
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v5 = *a4;
    uint64_t v6 = *a4 + 8 * a3 - 8;
LABEL_5:
    uint64_t v7 = *(void **)(v5 + 8 * v4);
    uint64_t v8 = a1;
    uint64_t v17 = v6;
    while (1)
    {
      uint64_t v9 = *(void **)v6;
      id v10 = v7;
      id v11 = v9;
      id v12 = objc_msgSend(v10, sel_proximity);
      id v13 = objc_msgSend(v11, sel_proximity);

      if ((uint64_t)v13 >= (uint64_t)v12)
      {
LABEL_4:
        ++v4;
        uint64_t v6 = v17 + 8;
        if (v4 == a2) {
          return;
        }
        goto LABEL_5;
      }
      if (!v5) {
        break;
      }
      uint64_t v14 = *(void **)v6;
      uint64_t v7 = *(void **)(v6 + 8);
      *(void *)uint64_t v6 = v7;
      *(void *)(v6 + 8) = v14;
      v6 -= 8;
      if (v4 == ++v8) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t RemoteFlowPluginBundleConversationHandler.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t CorrectionsService.getCorrectionsAction(input:conversationUserInput:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UndoAction?);
  MEMORY[0x1F4188790](v8 - 8);
  id v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UndoAction();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  v31[1] = __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    v31[0] = (uint64_t)v14;
    uint64_t v19 = a3;
    id v20 = v18;
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl(&dword_1B9C64000, v16, v17, "[CorrectionsService] Checking for corrections without a possible followup", v18, 2u);
    id v21 = v20;
    a3 = v19;
    uint64_t v14 = (char *)v31[0];
    MEMORY[0x1BA9E48C0](v21, -1, -1);
  }

  CorrectionsService.getUndoAction(_:conversationUserInput:)(v32, (uint64_t)v10);
  uint64_t v32 = a1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for UndoAction?);
    uint64_t v22 = type metadata accessor for Input();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(a3, 1, 1, v22);
  }
  else
  {
    v31[0] = a3;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    Swift::Int v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_1B9C64000, v24, v25, "[CorrectionsService] Detected user requested undo", v26, 2u);
      MEMORY[0x1BA9E48C0](v26, -1, -1);
    }

    uint64_t v27 = type metadata accessor for Input();
    uint64_t v28 = *(void *)(v27 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v7, v32, v27);
    uint64_t v29 = *(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56);
    v29(v7, 0, 1, v27);
    uint64_t v30 = v31[0];
    CorrectionsService.generateNewInput(from:originalInput:)((uint64_t)v14, (uint64_t)v7, v31[0]);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for Input?);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v29)(v30, 0, 1, v27);
  }
}

uint64_t CorrectionsService.getUndoAction(_:conversationUserInput:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v38 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CorrectionsContext?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Parse();
  uint64_t v34 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CorrectionsParse();
  uint64_t v31 = *(void *)(v9 - 8);
  uint64_t v32 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (void *)((char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UndoAction?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (Input.inputOrAlternativesDirectDismissal.getter())
  {
    uint64_t v15 = type metadata accessor for UndoAction();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a2, 1, 1, v15);
  }
  uint64_t v30 = a2;
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v17 = static SydneyConversationFeatureFlags.forceEnabled;
  if (*(void *)(static SydneyConversationFeatureFlags.forceEnabled + 16)
    && (uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(1), (v19 & 1) != 0))
  {
    if (*(unsigned char *)(*(void *)(v17 + 56) + v18) != 1) {
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v36 = &type metadata for SydneyConversationFeatureFlags;
    unint64_t v37 = lazy protocol witness table accessor for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags();
    LOBYTE(v35[0]) = 1;
    char v20 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v35);
    if ((v20 & 1) == 0)
    {
LABEL_14:
      uint64_t v27 = type metadata accessor for UndoAction();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v30, 1, 1, v27);
    }
  }
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v33[1], (uint64_t)v35);
  unint64_t v21 = v37;
  uint64_t v33 = v36;
  v29[1] = __swift_project_boxed_opaque_existential_1(v35, (uint64_t)v36);
  Input.parse.getter();
  Parse.asCorrectionsParse()(v11);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v6);
  if (*(void *)(v38 + OBJC_IVAR____TtC14SiriKitRuntime21ConversationUserInput_userSpecificInfoForRecognizedUser)) {
    swift_bridgeObjectRetain();
  }
  uint64_t v23 = v31;
  uint64_t v22 = v32;
  CorrectionsContext.init(userId:assistantId:)();
  uint64_t v24 = type metadata accessor for CorrectionsContext();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v5, 0, 1, v24);
  (*(void (**)(void *, char *, ValueMetadata *, unint64_t))(v21 + 24))(v11, v5, v33, v21);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, &demangling cache variable for type metadata for CorrectionsContext?);
  (*(void (**)(void *, uint64_t))(v23 + 8))(v11, v22);
  uint64_t v25 = type metadata accessor for UndoAction();
  uint64_t v26 = *(void *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v14, 1, v25) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for UndoAction?);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v35);
    goto LABEL_14;
  }
  uint64_t v28 = v30;
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v30, v14, v25);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v35);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v28, 0, 1, v25);
}

unint64_t lazy protocol witness table accessor for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags;
  if (!lazy protocol witness table cache variable for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags;
  if (!lazy protocol witness table cache variable for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags;
  if (!lazy protocol witness table cache variable for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags);
  }
  return result;
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.getter in conformance SydneyConversationFeatureFlags(uint64_t a1, uint64_t a2)
{
  return protocol witness for static FeatureToggle.forceEnabled.getter in conformance SydneyConversationFeatureFlags(a1, a2, &one-time initialization token for forceEnabled);
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.getter in conformance SydneyConversationFeatureFlags(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance SydneyConversationFeatureFlags()
{
  uint64_t v1 = "SKESiriCorrectionsCheckUndo";
  if (*v0 != 1) {
    uint64_t v1 = "SKESiriCorrectionsUndoFollowup";
  }
  if (*v0) {
    return v1;
  }
  else {
    return "fall2022_conversation_runtime";
  }
}

uint64_t Parse.asCorrectionsParse()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UserParse();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v6 = type metadata accessor for USOParse();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Parse();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (uint64_t *)((char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void *, uint64_t, uint64_t))(v11 + 16))(v13, v2, v10);
  int v14 = (*(uint64_t (**)(void *, uint64_t))(v11 + 88))(v13, v10);
  if (v14 == *MEMORY[0x1E4FA1F08])
  {
    (*(void (**)(void *, uint64_t))(v11 + 96))(v13, v10);
    *a1 = *v13;
    uint64_t v15 = (unsigned int *)MEMORY[0x1E4F9FAC0];
LABEL_5:
    uint64_t v16 = *v15;
    uint64_t v17 = type metadata accessor for CorrectionsParse();
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104))(a1, v16, v17);
  }
  if (v14 == *MEMORY[0x1E4FA1F48])
  {
    (*(void (**)(void *, uint64_t))(v11 + 96))(v13, v10);
    (*(void (**)(char *, void *, uint64_t))(v7 + 32))(v9, v13, v6);
    USOParse.userParse.getter();
    USOParse.parserIdentifier.getter();
    USOParse.appBundleId.getter();
    CorrectionsUSOParse.init(userParse:parserIdentifier:appBundleId:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v15 = (unsigned int *)MEMORY[0x1E4F9FAC8];
    goto LABEL_5;
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.executor);
  char v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl(&dword_1B9C64000, v20, v21, "Received unexpected Parse type in asCorrectionsParse", v22, 2u);
    MEMORY[0x1BA9E48C0](v22, -1, -1);
  }

  uint64_t v23 = *MEMORY[0x1E4F9FAD0];
  uint64_t v24 = type metadata accessor for CorrectionsParse();
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 104))(a1, v23, v24);
  return (*(uint64_t (**)(void *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t protocol witness for CorrectionsHandling.checkUndo(input:context:) in conformance CorrectionsPlatformClient()
{
  return dispatch thunk of CorrectionsPlatformClient.checkUndo(input:context:)();
}

uint64_t protocol witness for AmbiguityServiceProviding.findBestActionFor(conversationUserInput:conversationHelperInput:conversationHelper:actionCandidates:rrCandidates:fallback:previousConversation:inputOrigin:) in conformance AmbiguityService(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v15;
  *uint64_t v15 = v8;
  v15[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return AmbiguityService.findBestActionFor(conversationUserInput:conversationHelperInput:conversationHelper:actionCandidates:rrCandidates:fallback:previousConversation:inputOrigin:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t AmbiguityService.findBestActionFor(conversationUserInput:conversationHelperInput:conversationHelper:actionCandidates:rrCandidates:fallback:previousConversation:inputOrigin:)()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 608);
  uint64_t v2 = *(void *)(*(void *)v0 + 224);
  swift_task_dealloc();
  outlined destroy of ReferenceResolutionClientProtocol?(v2, &demangling cache variable for type metadata for Input?);
  return MEMORY[0x1F4188298](AmbiguityService.findBestActionFor(conversationUserInput:conversationHelperInput:conversationHelper:actionCandidates:rrCandidates:fallback:previousConversation:inputOrigin:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(unint64_t, unint64_t, uint64_t);
  int v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  uint64_t v1 = *(void *)(v0 + 648);
  if (v1)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    *(void *)(v0 + 656) = v2;
    if (v2)
    {
      uint64_t v4 = *(void *)(v0 + 464);
      uint64_t v3 = *(void *)(v0 + 472);
      uint64_t v6 = *(void *)(v0 + 440);
      uint64_t v5 = *(void *)(v0 + 448);
      uint64_t v7 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
      v5 += 16;
      uint64_t v8 = *(_DWORD *)(v5 + 64);
      *(_DWORD *)(v0 + 52) = v8;
      *(void *)(v0 + 664) = v7;
      *(void *)(v0 + 672) = v5 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v7(v3, v1 + ((v8 + 32) & ~(unint64_t)v8), v6);
      v7(v4, v3, v6);
      uint64_t v9 = Logger.logObject.getter();
      uint64_t v10 = static os_log_type_t.debug.getter();
      uint64_t v11 = os_log_type_enabled(v9, v10);
      uint64_t v12 = *(void *)(v0 + 464);
      uint64_t v13 = *(void *)(v0 + 440);
      int v14 = *(void *)(v0 + 448);
      if (v11)
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        uint64_t v16 = swift_slowAlloc();
        uint64_t v48 = v16;
        *(_DWORD *)uint64_t v15 = 136315138;
        lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier(&lazy protocol witness table cache variable for type RankedAction and conformance RankedAction, MEMORY[0x1E4F9FAA8]);
        uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 104) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
        v19(v12, v13);
        _os_log_impl(&dword_1B9C64000, v9, v10, "[AmbiguityService] Top action after CAAR ranking: %s", v15, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v16, -1, -1);
        MEMORY[0x1BA9E48C0](v15, -1, -1);
      }
      else
      {
        uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
        v19(*(void *)(v0 + 464), *(void *)(v0 + 440));
      }

      *(void *)(v0 + 680) = v19;
      uint64_t v31 = *(void *)(v0 + 432);
      uint64_t v32 = *(void **)(v0 + 376);
      uint64_t v33 = *(void *)(v0 + 384);
      uint64_t v35 = *(void *)(v0 + 360);
      uint64_t v34 = *(void *)(v0 + 368);
      uint64_t v36 = *(void *)(v0 + 344);
      uint64_t v45 = *(void *)(v0 + 352);
      unint64_t v37 = *(void *)(v0 + 336);
      uint64_t v44 = *(void *)(v0 + 328);
      uint64_t v38 = *(void **)(v0 + 208);
      unint64_t v39 = type metadata accessor for ActionParaphrase();
      *(void *)(v0 + 688) = v39;
      uint64_t v40 = *(void *)(v39 - 8);
      unint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56);
      *(void *)(v0 + 696) = v41;
      *(void *)(v0 + 704) = (v40 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      v41(v33, 1, 1, v39);
      RankedAction.toPluginAction(withSpeechPackage:withParaphrase:)(0, v33, v31);
      outlined destroy of ReferenceResolutionClientProtocol?(v33, &demangling cache variable for type metadata for ActionParaphrase?);
      RankedAction.parse.getter();
      CamParse.asSKEParse()(v32);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v44);
      (*(void (**)(uint64_t, void *, uint64_t))(v35 + 16))(v34, v32, v45);
      Input.init(parse:)();
      char v42 = v38[7];
      __swift_project_boxed_opaque_existential_1(v38 + 3, v38[6]);
      uint64_t v46 = *(void *)(v42 + 32) + **(int **)(v42 + 32);
      unint64_t v43 = (void *)swift_task_alloc();
      *(void *)(v0 + 712) = v43;
      *unint64_t v43 = v0;
      v43[1] = AmbiguityService.findBestActionFor(conversationUserInput:conversationHelperInput:conversationHelper:actionCandidates:rrCandidates:fallback:previousConversation:inputOrigin:);
      __asm { BRAA            X9, X16 }
    }
    swift_bridgeObjectRelease();
  }
  swift_release();
  char v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl(&dword_1B9C64000, v20, v21, "[AmbiguityService] Despite a non-empty list of action candidates, CAAR didn't return a list of ranked actions or returned an empty one. This might be a bug in CAAR. Returning a default response.", v22, 2u);
    MEMORY[0x1BA9E48C0](v22, -1, -1);
  }
  uint64_t v24 = *(void *)(v0 + 496);
  uint64_t v23 = *(void *)(v0 + 504);
  uint64_t v25 = *(void *)(v0 + 488);
  uint64_t v26 = *(void *)(v0 + 176);
  uint64_t v28 = *(void *)(v0 + 128);
  uint64_t v27 = *(void *)(v0 + 136);

  AmbiguityService.getDefaultResponse(input:conversationUserInput:)(v26, v27, v28);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
  return v29();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(unint64_t, uint64_t, uint64_t);
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void);
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  double *v41;
  double v42;
  double v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (**v59)(unint64_t, uint64_t, uint64_t);
  uint64_t v60;
  void (**v61)(uint64_t, uint64_t);
  void (**v62)(uint64_t, uint64_t);
  void (**v63)(uint64_t, void, uint64_t);
  unsigned int v64;
  void (**v65)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void (*v71)(uint64_t, unint64_t);
  uint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  double v75;
  uint64_t v76[3];
  uint64_t v77;
  uint64_t v78;

  uint64_t v77 = v0;
  if (one-time initialization token for executor != -1) {
LABEL_38:
  }
    swift_once();
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = type metadata accessor for Logger();
  *(void *)(v0 + 616) = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  if (*(void *)(v1 + 16))
  {
    uint64_t v3 = *(void **)(v0 + 136);
    BOOL v58 = v3[2];
    *(void *)(v0 + 624) = v58;
    uint64_t v57 = v3[3];
    *(void *)(v0 + 632) = v57;
    uint64_t v4 = *(void *)(v3[7] + 16);
    uint64_t v5 = MEMORY[0x1E4FBC860];
    v76[0] = MEMORY[0x1E4FBC860];
    uint64_t v6 = *(void *)(v4 + 16);
    swift_bridgeObjectRetain();
    uint64_t v68 = v6;
    if (v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = *(void *)(v0 + 576);
      uint64_t v9 = *(void *)(v0 + 520);
      uint64_t v65 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 552) + 8);
      uint64_t v64 = *MEMORY[0x1E4FA2780];
      uint64_t v62 = (void (**)(uint64_t, uint64_t))(v9 + 8);
      uint64_t v63 = (void (**)(uint64_t, void, uint64_t))(v9 + 104);
      char v66 = v8;
      BOOL v59 = (void (**)(unint64_t, uint64_t, uint64_t))(v8 + 32);
      uint64_t v60 = MEMORY[0x1E4FBC860];
      BOOL v61 = (void (**)(uint64_t, uint64_t))(v8 + 8);
      char v67 = v4;
      while (1)
      {
        if (v7 >= *(void *)(v4 + 16))
        {
          __break(1u);
          goto LABEL_38;
        }
        uint64_t v11 = *(void *)(v0 + 600);
        uint64_t v72 = *(void *)(v0 + 568);
        unint64_t v74 = *(void *)(v0 + 592);
        uint64_t v12 = *(void *)(v0 + 560);
        uint64_t v13 = *(void *)(v0 + 544);
        int v14 = *(void *)(v0 + 536);
        uint64_t v15 = *(void *)(v0 + 528);
        uint64_t v16 = *(void *)(v0 + 512);
        uint64_t v70 = (*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
        uint64_t v69 = *(void *)(v66 + 72);
        BOOL v71 = *(void (**)(uint64_t, unint64_t))(v66 + 16);
        v71(v11, v4 + v70 + v69 * v7);
        Siri_Nlu_External_UserParse.parser.getter();
        Siri_Nlu_External_Parser.parserID.getter();
        (*v65)(v12, v13);
        (*v63)(v15, v64, v16);
        lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, MEMORY[0x1E4FA27B0]);
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        uint64_t v17 = *(void *)(v0 + 112);
        uint64_t v18 = *(void *)(v0 + 56);
        uint64_t v19 = *v62;
        (*v62)(v15, v16);
        v19(v14, v16);
        ((void (*)(uint64_t, uint64_t, uint64_t))v71)(v74, v11, v72);
        char v20 = *(void *)(v0 + 592);
        os_log_type_t v21 = *(void *)(v0 + 568);
        if (v17 == v18)
        {
          uint64_t v10 = *v61;
          (*v61)(*(void *)(v0 + 592), *(void *)(v0 + 568));
        }
        else
        {
          uint64_t v22 = Siri_Nlu_External_UserParse.isOverriddenPSC.getter();
          uint64_t v10 = *v61;
          (*v61)(v20, v21);
          if ((v22 & 1) == 0)
          {
            uint64_t v23 = *v59;
            (*v59)(*(void *)(v0 + 584), *(void *)(v0 + 600), *(void *)(v0 + 568));
            uint64_t v24 = v60;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v60 + 16) + 1, 1);
              uint64_t v24 = v76[0];
            }
            uint64_t v26 = *(void *)(v24 + 16);
            uint64_t v25 = *(void *)(v24 + 24);
            if (v26 >= v25 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v25 > 1, v26 + 1, 1);
              uint64_t v24 = v76[0];
            }
            uint64_t v27 = *(void *)(v0 + 584);
            uint64_t v28 = *(void *)(v0 + 568);
            *(void *)(v24 + 16) = v26 + 1;
            v23(v24 + v70 + v26 * v69, v27, v28);
            uint64_t v60 = v24;
            v76[0] = v24;
            uint64_t v4 = v67;
            goto LABEL_7;
          }
        }
        uint64_t v4 = v67;
        v10(*(void *)(v0 + 600), *(void *)(v0 + 568));
LABEL_7:
        if (v68 == ++v7) {
          goto LABEL_22;
        }
      }
    }
    uint64_t v60 = v5;
LABEL_22:
    swift_bridgeObjectRelease();
    unint64_t v37 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D23_Nlu_External_UserParseVG_Sds5NeverOTg504_s14d62KitRuntime16AmbiguityServiceC17findBestActionFor21conversationh260Input0j6HelperL00jM016actionCandidates02rrO08fallback20previousConversation11inputOriginAA0dE8ResponseVSgAA0skL0C_AA0smL0VAA0sM0CSay0A3Cam0H9CandidateVGSay0A28ReferenceResolutionDataModel11RRCandidateVG0aB4Flow0L0VAA06RemoteS6ClientCSgSStYaKFSd0A8NLUTypes0a14_f1_g3_K5I56Vcfu_33_8b0e7d0ff9134e4aee37f7deef662011A10_SdTf3nnnpk_nTf1cn_n(v60);
    swift_release();
    uint64_t v38 = *(void *)(v37 + 16);
    if (v38)
    {
      unint64_t v39 = *(double *)(v37 + 32);
      uint64_t v40 = v38 - 1;
      if (v38 != 1)
      {
        unint64_t v41 = (double *)(v37 + 40);
        do
        {
          char v42 = *v41++;
          unint64_t v43 = v42;
          if (v39 < v42) {
            unint64_t v39 = v43;
          }
          --v40;
        }
        while (v40);
      }
      uint64_t v75 = v39;
    }
    else
    {
      uint64_t v75 = 0.0;
    }
    swift_bridgeObjectRelease();
    uint64_t v44 = Logger.logObject.getter();
    uint64_t v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      char v47 = swift_slowAlloc();
      v76[0] = v47;
      *(_DWORD *)uint64_t v46 = 136315138;
      *(double *)(v0 + 40) = v75;
      *(unsigned char *)(v0 + 48) = v38 == 0;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
      uint64_t v48 = String.init<A>(describing:)();
      *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v44, v45, "Extracted maxNLProba %s", v46, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v47, -1, -1);
      MEMORY[0x1BA9E48C0](v46, -1, -1);
    }

    char v50 = *(void *)(v0 + 184);
    type metadata accessor for SiriEnvironment();
    static SiriEnvironment.default.getter();
    SiriEnvironment.currentRequest.getter();
    swift_release();
    CurrentRequest.responseMode.getter();
    swift_release();
    if (v50) {
      swift_bridgeObjectRetain();
    }
    uint64_t v51 = *(void **)(v0 + 208);
    swift_bridgeObjectRetain();
    RankerContext.init(rrCandidates:responseMode:previousConversationHandlerId:maxNLProba:)();
    uint64_t v52 = v51[6];
    uint64_t v53 = v51[7];
    __swift_project_boxed_opaque_existential_1(v51 + 3, v52);
    uint64_t v73 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v53 + 56)
                                                                                       + **(int **)(v53 + 56));
    BOOL v54 = (void *)swift_task_alloc();
    *(void *)(v0 + 640) = v54;
    *BOOL v54 = v0;
    v54[1] = AmbiguityService.findBestActionFor(conversationUserInput:conversationHelperInput:conversationHelper:actionCandidates:rrCandidates:fallback:previousConversation:inputOrigin:);
    uint64_t v55 = *(void *)(v0 + 504);
    uint64_t v56 = *(void *)(v0 + 160);
    return v73(v58, v57, v56, v55, v52, v53);
  }
  else
  {
    swift_release();
    uint64_t v29 = Logger.logObject.getter();
    uint64_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl(&dword_1B9C64000, v29, v30, "[AmbiguityService] findBestActionFor was not given a list of action candidates, returning a default response.", v31, 2u);
      MEMORY[0x1BA9E48C0](v31, -1, -1);
    }
    uint64_t v32 = *(void *)(v0 + 176);
    uint64_t v34 = *(void *)(v0 + 128);
    uint64_t v33 = *(void *)(v0 + 136);

    AmbiguityService.getDefaultResponse(input:conversationUserInput:)(v32, v33, v34);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
    return v35();
  }
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(void);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (**v79)(uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  unsigned int (**v81)(uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  void (**v83)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t);
  void (*v88)(uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;

  uint64_t v95 = v0;
  uint64_t v1 = v0[31];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[33] + 48))(v1, 1, v0[32]) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v1, &demangling cache variable for type metadata for CamOutput?);
    uint64_t v2 = Logger.logObject.getter();
    uint64_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1B9C64000, v2, v3, "[AmbiguityService] CAM ambiguity handling failed. Fall back to returning pluginActions", v4, 2u);
      MEMORY[0x1BA9E48C0](v4, -1, -1);
    }

    swift_bridgeObjectRetain();
    uint64_t v5 = Logger.logObject.getter();
    uint64_t v6 = static os_log_type_t.debug.getter();
    uint64_t v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = *(void *)(v93 + 648);
    if (v7)
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 134217984;
      *(void *)(v93 + 88) = *(void *)(v8 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v5, v6, "[AmbiguityService] Converting %ld rankedActions to PluginActions", v9, 0xCu);
      MEMORY[0x1BA9E48C0](v9, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    os_log_type_t v21 = *(void *)(v93 + 448);
    uint64_t v22 = *(void *)(v93 + 400);
    uint64_t v83 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56);
    uint64_t v85 = *(void *)(v21 + 72);
    uint64_t v23 = v21 + 8;
    uint64_t v75 = v22;
    uint64_t v79 = (void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32);
    uint64_t v81 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
    swift_bridgeObjectRetain();
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = MEMORY[0x1E4FBC860];
    uint64_t v77 = v23 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    do
    {
      unint64_t v89 = v24;
      uint64_t v91 = v26;
      uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v93 + 696);
      uint64_t v28 = *(void *)(v93 + 688);
      uint64_t v87 = *(void (**)(uint64_t, uint64_t))(v93 + 680);
      uint64_t v29 = *(void *)(v93 + 456);
      uint64_t v30 = *(void *)(v93 + 440);
      uint64_t v32 = *(void *)(v93 + 384);
      uint64_t v31 = *(void *)(v93 + 392);
      uint64_t v33 = *(void *)(v93 + 240);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v93 + 664))(v29, *(void *)(v93 + 648)+ v24+ ((*(unsigned __int8 *)(v93 + 52) + 32) & ~(unint64_t)*(unsigned __int8 *)(v93 + 52)), v30);
      v27(v32, 1, 1, v28);
      RankedAction.toPluginAction(withSpeechPackage:withParaphrase:)(0, v32, v33);
      outlined destroy of ReferenceResolutionClientProtocol?(v32, &demangling cache variable for type metadata for ActionParaphrase?);
      (*v83)(v33, 0, 1, v31);
      *(void *)(v93 + 728) = v77;
      v87(v29, v30);
      if ((*v81)(v33, 1, v31) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v93 + 240), &demangling cache variable for type metadata for PluginAction?);
        uint64_t v26 = v91;
      }
      else
      {
        uint64_t v34 = *(void *)(v93 + 416);
        uint64_t v35 = *(void *)(v93 + 424);
        uint64_t v36 = *(void *)(v93 + 392);
        unint64_t v37 = *v79;
        (*v79)(v35, *(void *)(v93 + 240), v36);
        v37(v34, v35, v36);
        uint64_t v26 = v91;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v91 + 16) + 1, 1, v91);
        }
        unint64_t v39 = *(void *)(v26 + 16);
        uint64_t v38 = *(void *)(v26 + 24);
        if (v39 >= v38 >> 1) {
          uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1, v26);
        }
        uint64_t v40 = *(void *)(v93 + 416);
        unint64_t v41 = *(void *)(v93 + 392);
        *(void *)(v26 + 16) = v39 + 1;
        v37(v26+ ((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80))+ *(void *)(v75 + 72) * v39, v40, v41);
      }
      *(void *)(v93 + 736) = v26;
      ++v25;
      uint64_t v24 = v89 + v85;
    }
    while (v25 != *(void *)(v93 + 656));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    char v42 = Logger.logObject.getter();
    unint64_t v43 = static os_log_type_t.debug.getter();
    uint64_t v44 = os_log_type_enabled(v42, v43);
    uint64_t v45 = *(void *)(v93 + 648);
    if (v44)
    {
      uint64_t v46 = swift_slowAlloc();
      *(_DWORD *)uint64_t v46 = 134218240;
      char v47 = *(void *)(v45 + 16);
      swift_bridgeObjectRelease();
      *(void *)(v93 + 72) = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v46 + 12) = 2048;
      uint64_t v48 = *(void *)(v26 + 16);
      swift_bridgeObjectRelease();
      *(void *)(v93 + 80) = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v42, v43, "[AmbiguityService] Converted %ld rankedActions to %ld pluginActions", (uint8_t *)v46, 0x16u);
      MEMORY[0x1BA9E48C0](v46, -1, -1);

      if (*(void *)(v26 + 16))
      {
LABEL_20:
        char v50 = *(void *)(v93 + 296);
        unint64_t v49 = *(void *)(v93 + 304);
        uint64_t v51 = *(void *)(v93 + 224);
        (*(void (**)(void, unint64_t, void))(*(void *)(v93 + 400) + 16))(*(void *)(v93 + 408), v26 + ((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80)), *(void *)(v93 + 392));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 56))(v51, 1, 1, v50);
        uint64_t v52 = (void *)swift_task_alloc();
        *(void *)(v93 + 744) = v52;
        *uint64_t v52 = v93;
        v52[1] = AmbiguityService.findBestActionFor(conversationUserInput:conversationHelperInput:conversationHelper:actionCandidates:rrCandidates:fallback:previousConversation:inputOrigin:);
        uint64_t v53 = *(void *)(v93 + 408);
        uint64_t v55 = *(void *)(v93 + 224);
        BOOL v54 = *(void *)(v93 + 232);
        uint64_t v56 = *(void *)(v93 + 136);
        return CorrectionsService.getCorrectionsAction(pluginAction:conversationUserInput:followup:)(v54, v53, v56, v55);
      }
    }
    else
    {
      swift_bridgeObjectRelease_n();

      swift_bridgeObjectRelease_n();
      if (*(void *)(v26 + 16)) {
        goto LABEL_20;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v63 = Logger.logObject.getter();
    uint64_t v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v65 = 0;
      _os_log_impl(&dword_1B9C64000, v63, v64, "[AmbiguityService] Could not convert ranked actions to plugin actions", v65, 2u);
      MEMORY[0x1BA9E48C0](v65, -1, -1);
    }
    char v66 = *(void *)(v93 + 496);
    unint64_t v92 = *(void *)(v93 + 504);
    unint64_t v88 = *(void (**)(uint64_t, uint64_t))(v93 + 680);
    uint64_t v90 = *(void *)(v93 + 488);
    uint64_t v84 = *(void *)(v93 + 440);
    uint64_t v86 = *(void *)(v93 + 472);
    char v67 = *(void *)(v93 + 400);
    uint64_t v80 = *(void *)(v93 + 392);
    unint64_t v82 = *(void *)(v93 + 432);
    uint64_t v68 = *(void *)(v93 + 360);
    uint64_t v76 = *(void *)(v93 + 352);
    uint64_t v78 = *(void *)(v93 + 376);
    uint64_t v69 = *(void *)(v93 + 320);
    uint64_t v70 = *(void *)(v93 + 296);
    BOOL v71 = *(void *)(v93 + 304);
    uint64_t v73 = *(void *)(v93 + 128);
    uint64_t v72 = *(void *)(v93 + 136);

    AmbiguityService.getDefaultResponse(input:conversationUserInput:)(v69, v72, v73);
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v69, v70);
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v78, v76);
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v82, v80);
    v88(v86, v84);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v92, v90);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v74 = *(uint64_t (**)(void))(v93 + 8);
    return v74();
  }
  else
  {
    uint64_t v11 = *(void *)(v93 + 280);
    uint64_t v10 = *(void *)(v93 + 288);
    swift_bridgeObjectRelease();
    outlined init with take of CamOutput(v1, v10);
    outlined init with copy of CamOutput(v10, v11);
    uint64_t v12 = Logger.logObject.getter();
    uint64_t v13 = static os_log_type_t.debug.getter();
    int v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = *(void *)(v93 + 280);
    if (v14)
    {
      uint64_t v16 = *(void *)(v93 + 272);
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v94 = v18;
      *(_DWORD *)uint64_t v17 = 136315138;
      outlined init with copy of CamOutput(v15, v16);
      uint64_t v19 = String.init<A>(describing:)();
      *(void *)(v93 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of CamOutput(v15, (uint64_t (*)(void))type metadata accessor for CamOutput);
      _os_log_impl(&dword_1B9C64000, v12, v13, "[AmbiguityService] CAM output: %s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v18, -1, -1);
      MEMORY[0x1BA9E48C0](v17, -1, -1);
    }
    else
    {
      outlined destroy of CamOutput(*(void *)(v93 + 280), (uint64_t (*)(void))type metadata accessor for CamOutput);
    }

    BOOL v58 = (void *)swift_task_alloc();
    *(void *)(v93 + 720) = v58;
    *BOOL v58 = v93;
    v58[1] = AmbiguityService.findBestActionFor(conversationUserInput:conversationHelperInput:conversationHelper:actionCandidates:rrCandidates:fallback:previousConversation:inputOrigin:);
    BOOL v59 = *(void *)(v93 + 432);
    uint64_t v60 = *(void *)(v93 + 288);
    BOOL v61 = *(void *)(v93 + 128);
    uint64_t v62 = *(void *)(v93 + 136);
    return AmbiguityService.getAmbiguityServiceResponse(camOutput:topPluginAction:conversationUserInput:)(v61, v60, v59, v62);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 608);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](AmbiguityService.findBestActionFor(conversationUserInput:conversationHelperInput:conversationHelper:actionCandidates:rrCandidates:fallback:previousConversation:inputOrigin:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  uint64_t v1 = v0[92];
  uint64_t v27 = (void (*)(uint64_t, uint64_t))v0[85];
  uint64_t v29 = v0[63];
  uint64_t v26 = v0[62];
  uint64_t v28 = v0[61];
  uint64_t v24 = v0[55];
  uint64_t v25 = v0[59];
  uint64_t v23 = v0[54];
  uint64_t v2 = v0[50];
  uint64_t v18 = v0[49];
  uint64_t v19 = v0[46];
  char v20 = v0[45];
  os_log_type_t v21 = v0[44];
  uint64_t v22 = v0[47];
  uint64_t v3 = v0[39];
  uint64_t v17 = v0[40];
  uint64_t v4 = v0[38];
  uint64_t v15 = v0[51];
  uint64_t v16 = v0[37];
  uint64_t v6 = v0[28];
  uint64_t v5 = v0[29];
  uint64_t v7 = (void *)v0[27];
  uint64_t v8 = v0[16];
  swift_release();
  outlined init with copy of ReferenceResolutionClientProtocol?(v5, v6, &demangling cache variable for type metadata for Input?);
  char *v7 = v1;
  uint64_t v9 = type metadata accessor for AmbiguityOutput(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 0, 1, v9);
  PluginAction.input.getter();
  Input.parse.getter();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v10(v3, v16);
  outlined destroy of ReferenceResolutionClientProtocol?(v5, &demangling cache variable for type metadata for Input?);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v11(v15, v18);
  v10(v17, v16);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v21);
  v11(v23, v18);
  v27(v25, v24);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v29, v28);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v6, v8, &demangling cache variable for type metadata for Input?);
  uint64_t v12 = type metadata accessor for AmbiguityServiceResponse(0);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v7, v8 + *(int *)(v12 + 20), &demangling cache variable for type metadata for AmbiguityOutput?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v8 + *(int *)(v12 + 24), v19, v21);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v8, 0, 1, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  uint64_t v1 = v0[62];
  uint64_t v19 = v0[63];
  uint64_t v17 = (void (*)(uint64_t, uint64_t))v0[85];
  uint64_t v18 = v0[61];
  uint64_t v15 = v0[55];
  uint64_t v16 = v0[59];
  int v14 = v0[54];
  uint64_t v2 = v0[50];
  uint64_t v13 = v0[49];
  uint64_t v3 = v0[47];
  uint64_t v5 = v0[44];
  uint64_t v4 = v0[45];
  uint64_t v6 = v0[40];
  uint64_t v7 = v0[37];
  uint64_t v8 = v0[38];
  uint64_t v9 = v0[36];
  char v20 = v0[16];
  swift_release();
  outlined destroy of CamOutput(v9, (uint64_t (*)(void))type metadata accessor for CamOutput);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v14, v13);
  v17(v16, v15);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v19, v18);
  uint64_t v10 = type metadata accessor for AmbiguityServiceResponse(0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v20, 0, 1, v10);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 608);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](AmbiguityService.findBestActionFor(conversationUserInput:conversationHelperInput:conversationHelper:actionCandidates:rrCandidates:fallback:previousConversation:inputOrigin:), v1, 0);
}

uint64_t AmbiguityService.findBestActionFor(conversationUserInput:conversationHelperInput:conversationHelper:actionCandidates:rrCandidates:fallback:previousConversation:inputOrigin:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 608);
  *(void *)(*(void *)v1 + 648) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](AmbiguityService.findBestActionFor(conversationUserInput:conversationHelperInput:conversationHelper:actionCandidates:rrCandidates:fallback:previousConversation:inputOrigin:), v2, 0);
}

uint64_t AmbiguityService.findBestActionFor(conversationUserInput:conversationHelperInput:conversationHelper:actionCandidates:rrCandidates:fallback:previousConversation:inputOrigin:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[25] = v24;
  v9[26] = v8;
  v9[23] = a8;
  v9[24] = v23;
  v9[21] = a6;
  v9[22] = a7;
  v9[19] = a4;
  v9[20] = a5;
  v9[17] = a2;
  v9[18] = a3;
  v9[16] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AmbiguityOutput?);
  v9[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v9[28] = swift_task_alloc();
  v9[29] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAction?);
  v9[30] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CamOutput?);
  v9[31] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for CamOutput();
  v9[32] = v10;
  v9[33] = *(void *)(v10 - 8);
  v9[34] = swift_task_alloc();
  v9[35] = swift_task_alloc();
  v9[36] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Input();
  v9[37] = v11;
  v9[38] = *(void *)(v11 - 8);
  v9[39] = swift_task_alloc();
  v9[40] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for CamParse();
  v9[41] = v12;
  v9[42] = *(void *)(v12 - 8);
  v9[43] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Parse();
  v9[44] = v13;
  v9[45] = *(void *)(v13 - 8);
  v9[46] = swift_task_alloc();
  v9[47] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  v9[48] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for PluginAction();
  v9[49] = v14;
  v9[50] = *(void *)(v14 - 8);
  v9[51] = swift_task_alloc();
  v9[52] = swift_task_alloc();
  v9[53] = swift_task_alloc();
  v9[54] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for RankedAction();
  v9[55] = v15;
  v9[56] = *(void *)(v15 - 8);
  v9[57] = swift_task_alloc();
  v9[58] = swift_task_alloc();
  v9[59] = swift_task_alloc();
  type metadata accessor for ResponseMode();
  v9[60] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for RankerContext();
  v9[61] = v16;
  v9[62] = *(void *)(v16 - 8);
  v9[63] = swift_task_alloc();
  uint64_t v17 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v9[64] = v17;
  v9[65] = *(void *)(v17 - 8);
  v9[66] = swift_task_alloc();
  v9[67] = swift_task_alloc();
  uint64_t v18 = type metadata accessor for Siri_Nlu_External_Parser();
  v9[68] = v18;
  v9[69] = *(void *)(v18 - 8);
  v9[70] = swift_task_alloc();
  uint64_t v19 = type metadata accessor for Siri_Nlu_External_UserParse();
  v9[71] = v19;
  v9[72] = *(void *)(v19 - 8);
  v9[73] = swift_task_alloc();
  v9[74] = swift_task_alloc();
  v9[75] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v20 = static MessageBusActor.shared;
  v9[76] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](AmbiguityService.findBestActionFor(conversationUserInput:conversationHelperInput:conversationHelper:actionCandidates:rrCandidates:fallback:previousConversation:inputOrigin:), v20, 0);
}

uint64_t type metadata accessor for CamOutput()
{
  uint64_t result = type metadata singleton initialization cache for CamOutput;
  if (!type metadata singleton initialization cache for CamOutput) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:)(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t protocol witness for CamBridge.rank(rcId:actions:rankerContext:) in conformance CamBridgeImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return CamBridgeImpl.rank(rcId:actions:rankerContext:)(a1, a2, a3, a4);
}

uint64_t CamBridgeImpl.rank(rcId:actions:rankerContext:)(uint64_t a1)
{
  uint64_t v5 = *v2;
  uint64_t v4 = *v2;
  swift_task_dealloc();
  uint64_t v6 = *(void *)(v4 + 336);
  if (v1)
  {

    uint64_t v7 = CamBridgeImpl.rank(rcId:actions:rankerContext:);
  }
  else
  {
    *(void *)(v5 + 360) = a1;
    uint64_t v7 = CamBridgeImpl.rank(rcId:actions:rankerContext:);
  }
  return MEMORY[0x1F4188298](v7, v6, 0);
}

uint64_t CamBridgeImpl.rank(rcId:actions:rankerContext:)()
{
  swift_release();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "CamBridge: Ranking threw error", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }
  uint64_t v6 = v0[40];
  uint64_t v5 = v0[41];
  uint64_t v7 = v0[35];
  uint64_t v8 = v0[36];

  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v5, v7);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 8));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10(0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 336);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](CamBridgeImpl.rank(rcId:actions:rankerContext:), v1, 0);
}

{
  uint64_t v0;
  long long *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, void, uint64_t);
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  void (*v40)(uint64_t, uint64_t);
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t (*v66)(void);
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  BOOL v71 = v0;
  uint64_t v1 = (long long *)(v0 + 16);
  os_log_type_t v3 = *(void *)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 272);
  uint64_t v5 = *(void *)(v0 + 224);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 240);
  outlined init with copy of ReferenceResolutionClientProtocol?(v6 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId, v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  if (v7(v4, 1, v3) == 1)
  {
    uint64_t v8 = (uint64_t *)(v0 + 272);
LABEL_5:
    outlined destroy of ReferenceResolutionClientProtocol?(*v8, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
    uint64_t v13 = Logger.logObject.getter();
    uint64_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_1B9C64000, v13, v14, "CamBridge: No Execution / CAAR logging ID found in camBridgeState, falling back on new UUID", v15, 2u);
      MEMORY[0x1BA9E48C0](v15, -1, -1);
    }

    UUID.init()();
    UUID.init()();
    goto LABEL_15;
  }
  uint64_t v9 = *(void *)(v0 + 280);
  uint64_t v10 = *(void *)(v0 + 264);
  uint64_t v11 = *(void (**)(uint64_t, void, uint64_t))(*(void *)(v0 + 288) + 32);
  v11(*(void *)(v0 + 312), *(void *)(v0 + 272), v9);
  outlined init with copy of ReferenceResolutionClientProtocol?(v6 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_caarLoggingId, v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if (v7(v10, 1, v9) == 1)
  {
    uint64_t v8 = (uint64_t *)(v0 + 264);
    (*(void (**)(void, void))(*(void *)(v0 + 288) + 8))(*(void *)(v0 + 312), *(void *)(v0 + 280));
    goto LABEL_5;
  }
  uint64_t v17 = *(void *)(v0 + 320);
  uint64_t v16 = *(void *)(v0 + 328);
  uint64_t v19 = *(void *)(v0 + 304);
  uint64_t v18 = *(void *)(v0 + 312);
  os_log_type_t v21 = *(void *)(v0 + 280);
  uint64_t v20 = *(void *)(v0 + 288);
  v11(v19, *(void *)(v0 + 264), v21);
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
  v22(v16, v18, v21);
  v22(v17, v19, v21);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v23 = *(void *)(v0 + 320);
  uint64_t v24 = *(void *)(v0 + 296);
  uint64_t v25 = *(void *)(v0 + 280);
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.executor);
  v22(v24, v23, v25);
  uint64_t v27 = Logger.logObject.getter();
  uint64_t v28 = static os_log_type_t.debug.getter();
  uint64_t v29 = os_log_type_enabled(v27, v28);
  uint64_t v31 = *(void *)(v0 + 304);
  uint64_t v30 = *(void *)(v0 + 312);
  uint64_t v32 = *(void *)(v0 + 288);
  uint64_t v33 = *(void *)(v0 + 296);
  uint64_t v34 = *(void *)(v0 + 280);
  if (v29)
  {
    uint64_t v68 = *(void *)(v0 + 304);
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    char v67 = v30;
    uint64_t v36 = swift_slowAlloc();
    uint64_t v70 = v36;
    *(_DWORD *)uint64_t v35 = 136315138;
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    unint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 184) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v70);
    uint64_t v1 = (long long *)(v0 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v39 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v39(v33, v34);
    _os_log_impl(&dword_1B9C64000, v27, v28, "CamBridge: Retrieved CAAR logging ID from CAM state: %s", v35, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v36, -1, -1);
    MEMORY[0x1BA9E48C0](v35, -1, -1);

    v39(v68, v34);
    v39(v67, v34);
  }
  else
  {

    uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v40(v33, v34);
    v40(v31, v34);
    v40(v30, v34);
  }
LABEL_15:
  unint64_t v41 = (uint64_t *)(*(void *)(v0 + 224) + 192);
  swift_beginAccess();
  outlined init with copy of CamBridgeImpl.CaarState(v41, (uint64_t)v1);
  switch(*(unsigned char *)(v0 + 56))
  {
    case 1:
      outlined init with take of ReferenceResolutionClientProtocol(v1, v0 + 64);
      char v42 = *(void *)(v0 + 88);
      unint64_t v43 = *(void *)(v0 + 96);
      __swift_project_boxed_opaque_existential_1((void *)(v0 + 64), v42);
      uint64_t v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 + 8) + **(int **)(v43 + 8));
      uint64_t v44 = (void *)swift_task_alloc();
      *(void *)(v0 + 352) = v44;
      *uint64_t v44 = v0;
      v44[1] = CamBridgeImpl.rank(rcId:actions:rankerContext:);
      uint64_t v45 = *(void *)(v0 + 320);
      uint64_t v46 = *(void *)(v0 + 208);
      char v47 = *(void *)(v0 + 216);
      uint64_t v48 = *(void *)(v0 + 192);
      unint64_t v49 = *(void *)(v0 + 200);
      char v50 = *(void *)(v0 + 328);
      return v69(v50, v45, v48, v49, v46, v47, v42, v43);
    case 2:
      swift_release();

      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v52 = type metadata accessor for Logger();
      __swift_project_value_buffer(v52, (uint64_t)static Logger.executor);
      uint64_t v53 = Logger.logObject.getter();
      BOOL v54 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v55 = 0;
        _os_log_impl(&dword_1B9C64000, v53, v54, "CamBridge: Avoiding call to CAM due to previous errors", v55, 2u);
        MEMORY[0x1BA9E48C0](v55, -1, -1);
      }
      uint64_t v57 = *(void *)(v0 + 320);
      uint64_t v56 = *(void *)(v0 + 328);
      BOOL v58 = *(void *)(v0 + 280);
      BOOL v59 = *(void *)(v0 + 288);

      uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
      v60(v57, v58);
      v60(v56, v58);
      goto LABEL_27;
    case 3:
      if (!(*(void *)(v0 + 32) | *(void *)(v0 + 16) | *(void *)(v0 + 40) | *(void *)(v0 + 48) | *(void *)(v0 + 24))) {
        goto LABEL_30;
      }
      BOOL v61 = *(void *)(v0 + 328);
      uint64_t v62 = *(void *)(v0 + 320);
      uint64_t v63 = *(void *)(v0 + 280);
      uint64_t v64 = *(void *)(v0 + 288);
      swift_release();
      uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v64 + 8);
      v65(v62, v63);
      v65(v61, v63);
LABEL_27:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      char v66 = *(uint64_t (**)(void))(v0 + 8);
      uint64_t result = v66(0);
      break;
    default:
      swift_release();
LABEL_30:
      uint64_t result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD00000000000003ALL, 0x80000001BA063910, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/DecisionEngine/AmbiguityHandling/CamBridge/CamBridgeImpl.swift", 131, 2, 322);
      break;
  }
  return result;
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  double v11;
  void (*v12)(unint64_t, uint64_t, uint64_t);
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t (*v38)(uint64_t);
  void *v40;
  void (**v41)(unint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;

  uint64_t v1 = v0[45];
  os_log_type_t v3 = v0[24];
  uint64_t v2 = v0[25];
  swift_release();
  uint64_t v4 = specialized static CamBridgeImpl.collateParses(rcId:rankedActions:)(v3, v2, v1);
  swift_bridgeObjectRelease();
  uint64_t v5 = MEMORY[0x1E4FBC860];
  char v42 = MEMORY[0x1E4FBC860];
  uint64_t v6 = *(void **)(v4 + 16);
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v7 = 0;
    uint64_t v8 = v0[30];
    unint64_t v41 = (void (**)(unint64_t, uint64_t, uint64_t))(v8 + 32);
    uint64_t v40 = v6;
    while (v7 < *(void *)(v4 + 16))
    {
      uint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v10 = *(void *)(v8 + 72);
      (*(void (**)(void, unint64_t, void))(v8 + 16))(v0[32], v4 + v9 + v10 * v7, v0[29]);
      RankedAction.score.getter();
      if (v11 < 0.1)
      {
        (*(void (**)(void, void))(v8 + 8))(v0[32], v0[29]);
      }
      else
      {
        uint64_t v12 = *v41;
        (*v41)(v0[31], v0[32], v0[29]);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v5 + 16) + 1, 1);
          uint64_t v5 = v42;
        }
        uint64_t v14 = *(void *)(v5 + 16);
        uint64_t v13 = *(void *)(v5 + 24);
        uint64_t v15 = v5;
        if (v14 >= v13 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
          uint64_t v15 = v42;
        }
        uint64_t v16 = v0[31];
        uint64_t v17 = v0[29];
        *(void *)(v15 + 16) = v14 + 1;
        v12(v15 + v9 + v14 * v10, v16, v17);
        char v42 = v15;
        uint64_t v5 = v15;
        uint64_t v6 = v40;
      }
      if (v6 == (void *)++v7) {
        goto LABEL_12;
      }
    }
    __break(1u);
LABEL_28:
    swift_once();
    goto LABEL_14;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(v4 + 16);
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v5 + 16);
  uint64_t v7 = (unint64_t)&unk_1EB9D8000;
  uint64_t v8 = v18 - v19;
  if (v18 <= v19) {
    goto LABEL_17;
  }
  if (one-time initialization token for executor != -1) {
    goto LABEL_28;
  }
LABEL_14:
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
  os_log_type_t v21 = Logger.logObject.getter();
  uint64_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 134217984;
    v0[22] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v21, v22, "After collating %ld actions were dropped due to low ranker score", v23, 0xCu);
    MEMORY[0x1BA9E48C0](v23, -1, -1);
  }

  uint64_t v19 = *(void *)(v5 + 16);
LABEL_17:
  if (v19)
  {
    uint64_t v24 = v0[41];
    uint64_t v25 = v0[35];
    uint64_t v26 = v5;
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0[36] + 8);
    v27(v0[40], v25);
    v27(v24, v25);
    uint64_t v28 = v26;
  }
  else
  {
    swift_release();
    if (*(void *)(v7 + 192) != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.executor);
    uint64_t v30 = Logger.logObject.getter();
    uint64_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl(&dword_1B9C64000, v30, v31, "CamBridge: Collated & filtered actions are empty!", v32, 2u);
      MEMORY[0x1BA9E48C0](v32, -1, -1);
    }
    uint64_t v34 = v0[40];
    uint64_t v33 = v0[41];
    uint64_t v35 = v0[35];
    uint64_t v36 = v0[36];

    unint64_t v37 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v37(v34, v35);
    v37(v33, v35);
    uint64_t v28 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 8));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v38 = (uint64_t (*)(uint64_t))v0[1];
  return v38(v28);
}

uint64_t CamBridgeImpl.rank(rcId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[27] = a4;
  v5[28] = v4;
  v5[25] = a2;
  v5[26] = a3;
  v5[24] = a1;
  uint64_t v6 = type metadata accessor for RankedAction();
  v5[29] = v6;
  v5[30] = *(void *)(v6 - 8);
  v5[31] = swift_task_alloc();
  v5[32] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v5[33] = swift_task_alloc();
  v5[34] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v5[35] = v7;
  v5[36] = *(void *)(v7 - 8);
  v5[37] = swift_task_alloc();
  v5[38] = swift_task_alloc();
  v5[39] = swift_task_alloc();
  v5[40] = swift_task_alloc();
  v5[41] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  v5[42] = static MessageBusActor.shared;
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  v5[43] = v8;
  *uint64_t v8 = v5;
  v8[1] = CamBridgeImpl.rank(rcId:actions:rankerContext:);
  return CamBridgeImpl.waitForCaarWarmup()();
}

uint64_t CamBridgeImpl.waitForCaarWarmup()()
{
  uint64_t v1 = (uint64_t *)(*(void *)(v0 + 112) + 192);
  swift_beginAccess();
  outlined init with copy of CamBridgeImpl.CaarState(v1, v0 + 16);
  if (*(unsigned char *)(v0 + 56))
  {
    if (*(unsigned char *)(v0 + 56) != 3
      || (int8x16_t v2 = vorrq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 40)),
          *(void *)&vorr_s8(*(int8x8_t *)v2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL)) | *(void *)(v0 + 16)))
    {
      swift_release();
      outlined destroy of CamBridgeImpl.CaarState(v0 + 16);
      os_log_type_t v3 = *(uint64_t (**)(void))(v0 + 8);
      return v3();
    }
    uint64_t v5 = CamBridgeImpl.asyncWarmUpIfSupported()();
    *(void *)(v0 + 128) = v5;
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v6;
    *uint64_t v6 = v0;
    uint64_t v7 = CamBridgeImpl.waitForCamWarmup();
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 16);
    *(void *)(v0 + 144) = v5;
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v6;
    *uint64_t v6 = v0;
    uint64_t v7 = CamBridgeImpl.waitForCamWarmup();
  }
  v6[1] = v7;
  uint64_t v8 = MEMORY[0x1E4FBC848] + 8;
  return MEMORY[0x1F4187DC0](v6, v5, v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(void *)(v1 + 112) = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  int8x16_t v2 = static MessageBusActor.shared;
  *(void *)(v1 + 120) = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](CamBridgeImpl.waitForCaarWarmup(), v2, 0);
}

uint64_t CamBridgeImpl.waitForCamWarmup()()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 120);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](CamBridgeImpl.waitForCamWarmup(), v1, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 120);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](CamBridgeImpl.waitForCamWarmup(), v1, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  int8x16_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)();
  uint64_t (*v6)(void);
  uint64_t v8;
  uint64_t v9;

  uint64_t v1 = (uint64_t *)(*(void *)(v0 + 112) + 144);
  swift_beginAccess();
  outlined init with copy of CamBridgeImpl.CamState(v1, v0 + 16);
  if (!*(unsigned char *)(v0 + 57))
  {
    uint64_t v3 = *(void *)(v0 + 16);
    *(void *)(v0 + 144) = v3;
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v4;
    *uint64_t v4 = v0;
    uint64_t v5 = CamBridgeImpl.waitForCamWarmup();
    goto LABEL_10;
  }
  if (*(unsigned char *)(v0 + 57) == 3 && !*(unsigned char *)(v0 + 56))
  {
    int8x16_t v2 = vorrq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 40));
    if (!(*(void *)&vorr_s8(*(int8x8_t *)v2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL)) | *(void *)(v0 + 16)))
    {
      uint64_t v3 = CamBridgeImpl.asyncWarmUpIfSupported()();
      *(void *)(v0 + 128) = v3;
      uint64_t v4 = (void *)swift_task_alloc();
      *(void *)(v0 + 136) = v4;
      *uint64_t v4 = v0;
      uint64_t v5 = CamBridgeImpl.waitForCamWarmup();
LABEL_10:
      v4[1] = v5;
      uint64_t v8 = MEMORY[0x1E4FBC848] + 8;
      return MEMORY[0x1F4187DC0](v4, v3, v8);
    }
  }
  swift_release();
  outlined destroy of CamBridgeImpl.CamState(v0 + 16);
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(void *)(v1 + 112) = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  int8x16_t v2 = static MessageBusActor.shared;
  *(void *)(v1 + 120) = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](CamBridgeImpl.waitForCamWarmup(), v2, 0);
}

uint64_t outlined init with copy of CamBridgeImpl.CaarState(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for CamBridgeImpl.CaarState(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = *((unsigned __int8 *)a2 + 40);
  if (v3 >= 3) {
    unsigned int v3 = *(_DWORD *)a2 + 3;
  }
  if (v3 == 2)
  {
    uint64_t v4 = *a2;
    id v5 = (id)*a2;
    *(void *)a1 = v4;
    *(unsigned char *)(a1 + 40) = 2;
  }
  else if (v3 == 1)
  {
    long long v6 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v6;
    (**(void (***)(uint64_t))(v6 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 1;
  }
  else if (v3)
  {
    long long v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 40) = 0;
    swift_retain();
  }
  return a1;
}

uint64_t outlined destroy of CamBridgeImpl.CaarState(uint64_t a1)
{
  return a1;
}

void destroy for CamBridgeImpl.CaarState(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 3) {
    unsigned int v1 = *(_DWORD *)a1 + 3;
  }
  switch(v1)
  {
    case 2u:

      break;
    case 1u:
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
      break;
    case 0u:
      swift_release();
      break;
  }
}

uint64_t RealCaarWrapper.getCaarRanking(requestId:caarId:rcId:actions:rankerContext:)()
{
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)(v0 + 64) + 16), *(void *)(*(void *)(v0 + 64) + 40));
  uint64_t v1 = dispatch thunk of Caar.rank(requestId:caarId:rcId:actions:rankerContext:)();
  int8x16_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t protocol witness for CaarRankingProviding.getCaarRanking(requestId:caarId:rcId:actions:rankerContext:) in conformance RealCaarWrapper(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[6] = a5;
  v7[7] = a6;
  v7[4] = a3;
  v7[5] = a4;
  v7[2] = a1;
  v7[3] = a2;
  v7[8] = *v6;
  return MEMORY[0x1F4188298](RealCaarWrapper.getCaarRanking(requestId:caarId:rcId:actions:rankerContext:), 0, 0);
}

uint64_t specialized static CamBridgeImpl.collateParses(rcId:rankedActions:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v185 = type metadata accessor for UUID();
  uint64_t v164 = *(void *)(v185 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v185);
  uint64_t v167 = (char *)v139 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  unint64_t v163 = (char *)v139 - v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v148 = (char *)v139 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  BOOL v180 = (char *)v139 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v179 = (uint64_t)v139 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
  uint64_t v152 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v174 = (uint64_t)v139 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v162 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v187 = *(void *)(v162 - 8);
  MEMORY[0x1F4188790](v162);
  uint64_t v161 = (char *)v139 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v158 = (char *)v139 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AppShortcutInvocation?);
  MEMORY[0x1F4188790](v20 - 8);
  unint64_t v22 = (unint64_t)v139 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v159 = type metadata accessor for AppShortcutInvocation();
  unint64_t v184 = *(void *)(v159 - 8);
  MEMORY[0x1F4188790](v159);
  unint64_t v181 = (char *)v139 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v182 = type metadata accessor for CamParse();
  uint64_t v151 = *(void *)(v182 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v182);
  uint64_t v166 = (char *)v139 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  char v173 = (char *)v139 - v26;
  uint64_t v172 = type metadata accessor for CamUSOParse();
  uint64_t v27 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v172 - 8);
  MEMORY[0x1F4188790](v172);
  uint64_t v171 = (char *)v139 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for RankedAction();
  uint64_t v189 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (uint64_t)v139 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
LABEL_64:
  }
    swift_once();
  uint64_t v32 = type metadata accessor for Logger();
  uint64_t v33 = __swift_project_value_buffer(v32, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  uint64_t v142 = v33;
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  uint64_t v186 = v15;
  unint64_t v160 = v22;
  BOOL v190 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v31;
  v139[3] = a2;
  v139[2] = a1;
  if (v36)
  {
    os_log_type_t v37 = v35;
    uint64_t v38 = swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    uint64_t v191 = (void *)v39;
    *(_DWORD *)uint64_t v38 = 134218242;
    uint64_t v193 = *(void *)(a3 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v38 + 12) = 2080;
    uint64_t v188 = (void (*)(uint64_t, unint64_t, uint64_t))(v38 + 14);
    uint64_t v40 = swift_bridgeObjectRetain();
    uint64_t v41 = MEMORY[0x1BA9E3080](v40, v29);
    unint64_t v43 = v42;
    swift_bridgeObjectRelease();
    uint64_t v44 = v41;
    uint64_t v31 = (uint64_t)v190;
    uint64_t v193 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v43, (uint64_t *)&v191);
    uint64_t v15 = v186;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v34, v37, "CamBridge: Collating %ld actions %s", (uint8_t *)v38, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v39, -1, -1);
    MEMORY[0x1BA9E48C0](v38, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v197 = MEMORY[0x1E4FBC868];
  uint64_t v198 = MEMORY[0x1E4FBC860];
  unint64_t v196 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v45 = *(void *)(a3 + 16);
  uint64_t v150 = v29;
  a1 = (uint64_t)v158;
  if (v45)
  {
    uint64_t v188 = *(void (**)(uint64_t, unint64_t, uint64_t))(v189 + 16);
    unint64_t v46 = a3 + ((*(unsigned __int8 *)(v189 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v189 + 80));
    uint64_t v170 = (uint64_t (**)(char *, uint64_t))(v151 + 88);
    uint64_t v157 = (void (**)(char *, uint64_t))(v151 + 8);
    uint64_t v176 = *(void *)(v189 + 72);
    uint64_t v156 = (void (**)(char *, uint64_t))(v151 + 96);
    id v155 = (void (**)(char *, char *, uint64_t))(v27 + 4);
    int v169 = *MEMORY[0x1E4F9FA48];
    uint64_t v154 = (void (**)(char *, uint64_t))(v187 + 8);
    BOOL v144 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v184 + 48);
    uint64_t v141 = (void (**)(char *, uint64_t, uint64_t))(v184 + 32);
    uint64_t v140 = (void (**)(char *, uint64_t))(v184 + 8);
    uint64_t v153 = (void (**)(char *, uint64_t))(v27 + 1);
    uint64_t v143 = (void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v184 + 56);
    uint64_t v27 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v152 + 56);
    unint64_t v165 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v152 + 48);
    uint64_t v147 = (void (**)(uint64_t, uint64_t, uint64_t))(v189 + 32);
    uint64_t v146 = v151 + 32;
    uint64_t v145 = v164 + 32;
    uint64_t v177 = (void (**)(char *, uint64_t))(v164 + 8);
    v189 += 16;
    uint64_t v175 = (void (**)(uint64_t, uint64_t))(v189 - 8);
    uint64_t v149 = v164 + 16;
    v139[1] = a3;
    swift_bridgeObjectRetain();
    uint64_t v178 = "com.apple.siri.ClockFlowPlugin";
    unint64_t v168 = 0x80000001BA062AF0;
    char v47 = v181;
    uint64_t v183 = v27;
    while (1)
    {
      uint64_t v187 = v45;
      v188(v31, v46, v29);
      if (RankedAction.flowHandlerId.getter() == 0xD000000000000021 && v50 == v168)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v51 & 1) == 0) {
          goto LABEL_24;
        }
      }
      uint64_t v52 = v173;
      RankedAction.parse.getter();
      uint64_t v53 = v182;
      int v54 = (*v170)(v52, v182);
      if (v54 != v169) {
        break;
      }
      (*v156)(v52, v53);
      (*v155)(v171, v52, v172);
      uint64_t v55 = v161;
      uint64_t v56 = CamUSOParse.userParse.getter();
      uint64_t v57 = MEMORY[0x1BA9DE000](v56);
      (*v154)(v55, v162);
      uint64_t v58 = *(void *)(v57 + 16);
      uint64_t v59 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
      uint64_t v60 = *(void *)(v59 - 8);
      if (v58)
      {
        (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v59 - 8) + 16))(a1, v57+ ((*(unsigned __int8 *)(*(void *)(v59 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v59 - 8) + 80)), v59);
        uint64_t v61 = 0;
      }
      else
      {
        uint64_t v61 = 1;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(a1, v61, 1, v59);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(a1, 1, v59) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
        uint64_t v62 = v160;
        (*v143)(v160, 1, 1, v159);
LABEL_22:
        (*v153)(v171, v172);
        outlined destroy of ReferenceResolutionClientProtocol?(v62, (uint64_t *)&demangling cache variable for type metadata for AppShortcutInvocation?);
LABEL_23:
        uint64_t v15 = v186;
LABEL_24:
        uint64_t v66 = RankedAction.flowHandlerId.getter();
        uint64_t v68 = v67;
        goto LABEL_25;
      }
      LOBYTE(v191) = 1;
      uint64_t v63 = v160;
      Siri_Nlu_External_UserDialogAct.extractAppShortcutInvocation(groupIndex:)();
      uint64_t v62 = v63;
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(a1, v59);
      uint64_t v64 = v63;
      uint64_t v65 = v159;
      if ((*v144)(v64, 1, v159) == 1) {
        goto LABEL_22;
      }
      (*v141)(v47, v62, v65);
      uint64_t v110 = AppShortcutInvocation.actionIdentifier.getter();
      if (!v111)
      {
        (*v140)(v47, v65);
        (*v153)(v171, v172);
        goto LABEL_23;
      }
      uint64_t v112 = v110;
      Swift::Int v113 = v111;
      uint64_t v191 = (void *)RankedAction.flowHandlerId.getter();
      uint64_t v192 = v114;
      v115._uint64_t countAndFlagsBits = 46;
      v115._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v115);
      v116._uint64_t countAndFlagsBits = AppShortcutInvocation.bundleId.getter();
      String.append(_:)(v116);
      swift_bridgeObjectRelease();
      v117._uint64_t countAndFlagsBits = 46;
      v117._unint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v117);
      v118._uint64_t countAndFlagsBits = v112;
      v118._unint64_t object = v113;
      String.append(_:)(v118);
      swift_bridgeObjectRelease();
      uint64_t v66 = (uint64_t)v191;
      uint64_t v68 = v192;
      (*v140)(v47, v65);
      (*v153)(v171, v172);
      uint64_t v15 = v186;
LABEL_25:
      uint64_t v69 = v197;
      if (*(void *)(v197 + 16))
      {
        swift_bridgeObjectRetain();
        unint64_t v70 = specialized __RawDictionaryStorage.find<A>(_:)(v66, v68);
        if (v71)
        {
          uint64_t v72 = v152;
          uint64_t v73 = *(void *)(v69 + 56) + *(void *)(v152 + 72) * v70;
          uint64_t v74 = v179;
          outlined init with copy of ReferenceResolutionClientProtocol?(v73, v179, (uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
          uint64_t v75 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v72 + 56);
          v75(v74, 0, 1, v15);
        }
        else
        {
          uint64_t v75 = *v27;
          uint64_t v74 = v179;
          (*v27)(v179, 1, 1, v15);
        }
        swift_bridgeObjectRelease();
        if ((*v165)(v74, 1, v15) != 1)
        {
          uint64_t v89 = v74;
          uint64_t v90 = *(int *)(v15 + 48);
          (*v147)(v174, v89, v29);
          unint64_t v91 = *(void *)(v89 + v90);
          RankedAction.parse.getter();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v91 + 16) + 1, 1, v91);
          }
          unint64_t v93 = *(void *)(v91 + 16);
          unint64_t v92 = *(void *)(v91 + 24);
          if (v93 >= v92 >> 1) {
            unint64_t v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v92 > 1, v93 + 1, 1, v91);
          }
          uint64_t v94 = v186;
          uint64_t v95 = *(int *)(v186 + 48);
          *(void *)(v91 + 16) = v93 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v151 + 32))(v91+ ((*(unsigned __int8 *)(v151 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v151 + 80))+ *(void *)(v151 + 72) * v93, v166, v182);
          uint64_t v96 = v174;
          *(void *)(v174 + v95) = v91;
          uint64_t v97 = *(int *)(v94 + 48);
          uint64_t v98 = (uint64_t)v180;
          uint64_t v29 = v150;
          v188((uint64_t)v180, v96, v150);
          *(void *)(v98 + v97) = v91;
          v75(v98, 0, 1, v94);
          swift_bridgeObjectRetain();
          specialized SimpleOrderedDictionary.subscript.setter(v98, v66, v68);
          uint64_t v99 = v148;
          RankedAction.loggingId.getter();
          uint64_t v101 = specialized Dictionary.subscript.modify(&v191);
          if (*v100)
          {
            uint64_t v102 = v100;
            RankedAction.loggingId.getter();
            unint64_t v103 = *v102;
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            unint64_t *v102 = v103;
            a1 = (uint64_t)v158;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              unint64_t v103 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v103 + 16) + 1, 1, v103);
              unint64_t *v102 = v103;
            }
            uint64_t v27 = v183;
            unint64_t v106 = *(void *)(v103 + 16);
            unint64_t v105 = *(void *)(v103 + 24);
            if (v106 >= v105 >> 1)
            {
              unint64_t v103 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v105 > 1, v106 + 1, 1, v103);
              unint64_t *v102 = v103;
            }
            *(void *)(v103 + 16) = v106 + 1;
            uint64_t v107 = v164;
            unint64_t v108 = v103
                 + ((*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80))
                 + *(void *)(v107 + 72) * v106;
            uint64_t v109 = v185;
            (*(void (**)(unint64_t, char *, uint64_t))(v164 + 32))(v108, v163, v185);
            ((void (*)(void **, void))v101)(&v191, 0);
            (*(void (**)(char *, uint64_t))(v107 + 8))(v99, v109);
            outlined destroy of ReferenceResolutionClientProtocol?(v174, (uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
            uint64_t v15 = v186;
            uint64_t v49 = v187;
            uint64_t v31 = (uint64_t)v190;
          }
          else
          {
            ((void (*)(void **, void))v101)(&v191, 0);
            (*v177)(v99, v185);
            outlined destroy of ReferenceResolutionClientProtocol?(v96, (uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
            uint64_t v15 = v186;
            uint64_t v49 = v187;
            a1 = (uint64_t)v158;
            uint64_t v31 = (uint64_t)v190;
            uint64_t v27 = v183;
          }
          goto LABEL_9;
        }
        unint64_t v184 = v46;
        uint64_t v76 = a1;
      }
      else
      {
        unint64_t v184 = v46;
        uint64_t v76 = a1;
        uint64_t v75 = *v27;
        uint64_t v74 = v179;
        (*v27)(v179, 1, 1, v15);
      }
      a1 = (uint64_t)v27;
      outlined destroy of ReferenceResolutionClientProtocol?(v74, &demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse])?);
      uint64_t v77 = *(int *)(v15 + 48);
      a2 = (uint64_t)v180;
      uint64_t v27 = v190;
      v188((uint64_t)v180, (unint64_t)v190, v29);
      *(void *)(a2 + v77) = MEMORY[0x1E4FBC860];
      v75(a2, 0, 1, v15);
      specialized SimpleOrderedDictionary.subscript.setter(a2, v66, v68);
      a3 = (uint64_t)v167;
      RankedAction.loggingId.getter();
      uint64_t v78 = v196;
      uint64_t v31 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v191 = (void *)v78;
      unint64_t v196 = 0x8000000000000000;
      unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
      uint64_t v80 = *(void *)(v78 + 16);
      BOOL v81 = (v79 & 1) == 0;
      uint64_t v82 = v80 + v81;
      if (__OFADD__(v80, v81))
      {
        __break(1u);
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
      uint64_t v15 = v79;
      if (*(void *)(v78 + 24) >= v82)
      {
        uint64_t v27 = v183;
        a1 = v76;
        if ((v31 & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v82, v31);
        unint64_t v83 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
        uint64_t v27 = v183;
        if ((v15 & 1) != (v84 & 1))
        {
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        unint64_t v22 = v83;
        a1 = v76;
      }
      uint64_t v31 = (uint64_t)v190;
      uint64_t v85 = v191;
      unint64_t v46 = v184;
      if (v15)
      {
        uint64_t v48 = v191[7];
        swift_bridgeObjectRelease();
        *(void *)(v48 + 8 * v22) = MEMORY[0x1E4FBC860];
      }
      else
      {
        v191[(v22 >> 6) + 8] |= 1 << v22;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v164 + 16))(v85[6] + *(void *)(v164 + 72) * v22, a3, v185);
        *(void *)(v85[7] + 8 * v22) = MEMORY[0x1E4FBC860];
        uint64_t v86 = v85[2];
        BOOL v87 = __OFADD__(v86, 1);
        uint64_t v88 = v86 + 1;
        if (v87) {
          goto LABEL_63;
        }
        void v85[2] = v88;
      }
      unint64_t v196 = (unint64_t)v85;
      swift_bridgeObjectRelease();
      (*v177)((char *)a3, v185);
      uint64_t v15 = v186;
      uint64_t v49 = v187;
LABEL_9:
      (*v175)(v31, v29);
      v46 += v176;
      uint64_t v45 = v49 - 1;
      char v47 = v181;
      if (!v45)
      {
        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
    }
    (*v157)(v52, v53);
    goto LABEL_24;
  }
LABEL_56:
  uint64_t v119 = Logger.logObject.getter();
  os_log_type_t v120 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v119, v120))
  {
    uint64_t v121 = (uint8_t *)swift_slowAlloc();
    uint64_t v122 = swift_slowAlloc();
    uint64_t v191 = (void *)v122;
    *(_DWORD *)uint64_t v121 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UUID]);
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_1(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v123 = Dictionary.description.getter();
    unint64_t v125 = v124;
    swift_bridgeObjectRelease();
    uint64_t v195 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v123, v125, (uint64_t *)&v191);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v119, v120, "CamBridge: Collated action candidates for logging: %s", v121, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v122, -1, -1);
    MEMORY[0x1BA9E48C0](v121, -1, -1);
  }

  type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.emitActionCandidatesCollated(rcId:collatedActions:)();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v126 = v197;
  swift_bridgeObjectRetain();
  uint64_t v127 = swift_bridgeObjectRetain();
  unint64_t v128 = specialized Sequence.compactMap<A>(_:)(v127, v126);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v129 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam12RankedActionV03topG0_SayAF0E5ParseOG17alternativeParsestG_AHs5NeverOTg503_s7d5Cam12fg9VSayAA0B5i46OGACIgngr_AC03topD0_AF17alternativeParsestACs5L136OIegnrzr_TR04_s14a12KitRuntime13b55BridgeImplC13collateParses4rcId13rankedActionsSay0aD012cd22VGSS_AJtFZA2I_SayAG0D5E8OGtXEfU_Tf3nnnpf_nTf1cn_n(v128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  uint64_t v130 = Logger.logObject.getter();
  os_log_type_t v131 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v130, v131))
  {
    uint64_t v132 = swift_slowAlloc();
    uint64_t v133 = swift_slowAlloc();
    *(_DWORD *)uint64_t v132 = 134218242;
    uint64_t v194 = *(void *)(v129 + 16);
    uint64_t v195 = v133;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v132 + 12) = 2080;
    uint64_t v134 = swift_bridgeObjectRetain();
    uint64_t v135 = MEMORY[0x1BA9E3080](v134, v150);
    unint64_t v137 = v136;
    swift_bridgeObjectRelease();
    uint64_t v194 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v135, v137, &v195);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v130, v131, "CamBridge: Collated down to %ld actions %s", (uint8_t *)v132, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v133, -1, -1);
    MEMORY[0x1BA9E48C0](v132, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v129;
}

uint64_t RankedAction.toPluginAction(withSpeechPackage:withParaphrase:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v112 = a2;
  id v115 = a1;
  uint64_t v114 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v130 = (char *)v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UserParse();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v129 = (char *)v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = type metadata accessor for CamUSOParse();
  uint64_t v134 = *(void *)(v128 - 8);
  MEMORY[0x1F4188790](v128);
  uint64_t v127 = (char *)v108 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLRouterParse?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v139 = (char *)v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for NLRouterParse();
  int64_t v142 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v108 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v15 - 8);
  Swift::Int v113 = (char *)v108 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v111 = (uint64_t)v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Input();
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v110 = (char *)v108 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for CamParse();
  uint64_t v117 = *(void *)(v21 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v21);
  uint64_t v24 = (void *)((char *)v108 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v25 = MEMORY[0x1F4188790](v22);
  os_log_type_t v131 = (char *)v108 - v26;
  MEMORY[0x1F4188790](v25);
  Swift::String v116 = (char *)v108 - v27;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  MEMORY[0x1F4188790](v28 - 8);
  uint64_t v30 = (char *)v108 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for Parse();
  uint64_t v140 = *(void *)(v31 - 8);
  uint64_t v141 = v31;
  uint64_t v32 = MEMORY[0x1F4188790](v31);
  uint64_t v143 = (void *)((char *)v108 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v109 = (void *)((char *)v108 - v35);
  MEMORY[0x1F4188790](v34);
  os_log_type_t v37 = (char *)v108 - v36;
  if (RankedAction.flowHandlerId.getter() == 0xD000000000000021 && v38 == 0x80000001BA062AF0)
  {
    swift_bridgeObjectRelease();
    uint64_t v39 = v141;
  }
  else
  {
    char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v39 = v141;
    if ((v40 & 1) == 0) {
      goto LABEL_8;
    }
  }
  uint64_t v41 = RankedAction.userData.getter();
  if (v41)
  {
    uint64_t v42 = v41;
    uint64_t v138 = v14;
    uint64_t v43 = v12;
    uint64_t v44 = v24;
    uint64_t v45 = v116;
    RankedAction.parse.getter();
    CamParse.asLinkParse(userData:)(v42, (uint64_t)v30);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v117 + 8))(v45, v21);
    uint64_t v46 = v140;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v140 + 48))(v30, 1, v39) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v37, v30, v39);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      id v65 = v115;
      uint64_t v66 = type metadata accessor for Logger();
      __swift_project_value_buffer(v66, (uint64_t)static Logger.executor);
      uint64_t v67 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v67, v68))
      {
        uint64_t v69 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v69 = 0;
        _os_log_impl(&dword_1B9C64000, v67, v68, "Converting RankedAction to PluginAction with LinkParse", v69, 2u);
        MEMORY[0x1BA9E48C0](v69, -1, -1);
      }

      RankedAction.flowHandlerId.getter();
      unint64_t v70 = *(void (**)(void *, char *, uint64_t))(v46 + 16);
      uint64_t v71 = v46;
      uint64_t v72 = v141;
      v70(v109, v37, v141);
      Input.init(parse:)();
      outlined init with copy of ActionParaphrase?(v112, v111);
      id v73 = v65;
      uint64_t v74 = v113;
      RankedAction.loggingId.getter();
      uint64_t v75 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56))(v74, 0, 1, v75);
      PluginAction.init(flowHandlerId:input:speechPackage:actionParaphrase:loggingId:)();
      return (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v37, v72);
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v30, &demangling cache variable for type metadata for Parse?);
    uint64_t v24 = v44;
    uint64_t v12 = v43;
    uint64_t v14 = v138;
  }
LABEL_8:
  uint64_t v47 = RankedAction.userData.getter();
  if (v47)
  {
    uint64_t v48 = v47;
    if (*(void *)(v47 + 16)
      && (unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(0x726574756F526C6ELL, 0xE800000000000000),
          (v50 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v48 + 56) + 32 * v49, (uint64_t)&v144);
    }
    else
    {
      long long v144 = 0u;
      long long v145 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v145 + 1))
    {
      uint64_t v51 = (uint64_t)v139;
      int v52 = swift_dynamicCast();
      int64_t v53 = v142;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v142 + 56))(v51, v52 ^ 1u, 1, v12);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v51, 1, v12) != 1)
      {
        int v54 = v14;
        (*(void (**)(char *, uint64_t, uint64_t))(v142 + 32))(v14, v51, v12);
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v55 = type metadata accessor for Logger();
        __swift_project_value_buffer(v55, (uint64_t)static Logger.executor);
        uint64_t v56 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v58 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v58 = 0;
          _os_log_impl(&dword_1B9C64000, v56, v57, "Converting RankedAction to PluginAction with NLRouterParse", v58, 2u);
          MEMORY[0x1BA9E48C0](v58, -1, -1);
        }

        RankedAction.flowHandlerId.getter();
        int64_t v59 = v142;
        uint64_t v60 = v109;
        (*(void (**)(void *, char *, uint64_t))(v142 + 16))(v109, v54, v12);
        (*(void (**)(void *, void, uint64_t))(v140 + 104))(v60, *MEMORY[0x1E4FA1F60], v39);
        Input.init(parse:)();
        outlined init with copy of ActionParaphrase?(v112, v111);
        id v61 = v115;
        uint64_t v62 = v113;
        RankedAction.loggingId.getter();
        uint64_t v63 = type metadata accessor for UUID();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v62, 0, 1, v63);
        PluginAction.init(flowHandlerId:input:speechPackage:actionParaphrase:loggingId:)();
        return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v54, v12);
      }
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v144, (uint64_t *)&demangling cache variable for type metadata for Any?);
      uint64_t v51 = (uint64_t)v139;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v142 + 56))(v139, 1, 1, v12);
    }
    outlined destroy of ReferenceResolutionClientProtocol?(v51, &demangling cache variable for type metadata for NLRouterParse?);
  }
  uint64_t v76 = RankedAction.alternatives.getter();
  int64_t v77 = *(void *)(v76 + 16);
  if (v77)
  {
    v108[2] = v4;
    *(void *)&long long v144 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v77, 0);
    uint64_t v138 = *(char **)(v117 + 16);
    unint64_t v78 = (*(unsigned __int8 *)(v117 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80);
    v108[1] = v76;
    unint64_t v79 = v76 + v78;
    uint64_t v80 = *(void *)(v117 + 72);
    unint64_t v136 = (uint64_t (**)(void *, uint64_t))(v117 + 88);
    uint64_t v137 = v80;
    int v135 = *MEMORY[0x1E4F9FA48];
    int v124 = *MEMORY[0x1E4F9FA40];
    int v120 = *MEMORY[0x1E4F9FA50];
    unsigned int v119 = *MEMORY[0x1E4FA1F58];
    BOOL v81 = (void (**)(void, void))(v117 + 8);
    uint64_t v139 = (char *)(v117 + 16);
    uint64_t v132 = (void (**)(void *, uint64_t))(v117 + 96);
    uint64_t v133 = (void (**)(void *, void, uint64_t))(v140 + 104);
    unsigned int v118 = *MEMORY[0x1E4FA1F18];
    uint64_t v123 = (void (**)(char *, void *, uint64_t))(v134 + 32);
    uint64_t v122 = (void (**)(char *, uint64_t))(v134 + 8);
    unsigned int v121 = *MEMORY[0x1E4FA1F48];
    uint64_t v134 = v140 + 32;
    uint64_t v82 = v131;
    uint64_t v126 = v21;
    unint64_t v125 = v24;
    do
    {
      unint64_t v83 = v138;
      ((void (*)(char *, unint64_t, uint64_t))v138)(v82, v79, v21);
      ((void (*)(void *, char *, uint64_t))v83)(v24, v82, v21);
      int v84 = (*v136)(v24, v21);
      int64_t v142 = v77;
      if (v84 == v135)
      {
        (*v132)(v24, v21);
        uint64_t v85 = v127;
        uint64_t v86 = v24;
        uint64_t v87 = v128;
        (*v123)(v127, v86, v128);
        CamUSOParse.userParse.getter();
        CamUSOParse.parserIdentifier.getter();
        CamUSOParse.appBundleId.getter();
        CamUSOParse.groupIndex.getter();
        uint64_t v88 = v81;
        uint64_t v89 = v39;
        uint64_t v90 = v143;
        uint64_t v82 = v131;
        USOParse.init(userParse:parserIdentifier:appBundleId:groupIndex:)();
        uint64_t v91 = v87;
        uint64_t v24 = v125;
        uint64_t v21 = v126;
        (*v122)(v85, v91);
        uint64_t v92 = v89;
        BOOL v81 = v88;
        (*v133)(v90, v121, v92);
      }
      else if (v84 == v124)
      {
        (*v132)(v24, v21);
        unint64_t v93 = v143;
        *uint64_t v143 = *v24;
        (*v133)(v93, v118, v39);
      }
      else if (v84 == v120)
      {
        (*v133)(v143, v119, v39);
      }
      else
      {
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v99 = type metadata accessor for Logger();
        __swift_project_value_buffer(v99, (uint64_t)static Logger.executor);
        uint64_t v100 = Logger.logObject.getter();
        os_log_type_t v101 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v100, v101))
        {
          uint64_t v102 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v102 = 0;
          _os_log_impl(&dword_1B9C64000, v100, v101, "Unknown CamParse type, defaulting to Parse.empty!", v102, 2u);
          MEMORY[0x1BA9E48C0](v102, -1, -1);
        }

        (*v133)(v143, v119, v39);
        (*v81)(v24, v21);
      }
      (*v81)(v82, v21);
      uint64_t v94 = v144;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v94 + 16) + 1, 1);
        uint64_t v94 = v144;
      }
      int64_t v95 = v142;
      unint64_t v97 = *(void *)(v94 + 16);
      unint64_t v96 = *(void *)(v94 + 24);
      if (v97 >= v96 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v96 > 1, v97 + 1, 1);
        uint64_t v94 = v144;
      }
      *(void *)(v94 + 16) = v97 + 1;
      unint64_t v98 = v94
          + ((*(unsigned __int8 *)(v140 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80))
          + *(void *)(v140 + 72) * v97;
      uint64_t v39 = v141;
      (*(void (**)(unint64_t, void *, uint64_t))(v140 + 32))(v98, v143, v141);
      *(void *)&long long v144 = v94;
      v79 += v137;
      int64_t v77 = v95 - 1;
    }
    while (v77);
  }
  swift_bridgeObjectRelease();
  id v103 = v115;
  RankedAction.flowHandlerId.getter();
  Swift::Int v104 = v116;
  RankedAction.parse.getter();
  CamParse.asSKEParse()(v109);
  (*(void (**)(char *, uint64_t))(v117 + 8))(v104, v21);
  Input.init(parse:alternatives:)();
  outlined init with copy of ActionParaphrase?(v112, v111);
  id v105 = v103;
  unint64_t v106 = v113;
  RankedAction.loggingId.getter();
  uint64_t v107 = type metadata accessor for UUID();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v107 - 8) + 56))(v106, 0, 1, v107);
  return PluginAction.init(flowHandlerId:input:speechPackage:actionParaphrase:loggingId:)();
}

uint64_t CamParse.asSKEParse()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UserParse();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v6 = type metadata accessor for CamUSOParse();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for CamParse();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = &v25[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(void *, uint64_t, uint64_t))(v11 + 16))(v13, v2, v10);
  int v14 = (*(uint64_t (**)(void *, uint64_t))(v11 + 88))(v13, v10);
  if (v14 == *MEMORY[0x1E4F9FA48])
  {
    (*(void (**)(void *, uint64_t))(v11 + 96))(v13, v10);
    (*(void (**)(unsigned char *, void *, uint64_t))(v7 + 32))(v9, v13, v6);
    CamUSOParse.userParse.getter();
    CamUSOParse.parserIdentifier.getter();
    CamUSOParse.appBundleId.getter();
    CamUSOParse.groupIndex.getter();
    USOParse.init(userParse:parserIdentifier:appBundleId:groupIndex:)();
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v15 = (unsigned int *)MEMORY[0x1E4FA1F48];
LABEL_7:
    uint64_t v16 = *v15;
    uint64_t v17 = type metadata accessor for Parse();
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104))(a1, v16, v17);
  }
  if (v14 == *MEMORY[0x1E4F9FA40])
  {
    (*(void (**)(void *, uint64_t))(v11 + 96))(v13, v10);
    *a1 = *v13;
    uint64_t v15 = (unsigned int *)MEMORY[0x1E4FA1F18];
    goto LABEL_7;
  }
  if (v14 == *MEMORY[0x1E4F9FA50])
  {
    uint64_t v15 = (unsigned int *)MEMORY[0x1E4FA1F58];
    goto LABEL_7;
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.executor);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl(&dword_1B9C64000, v20, v21, "Unknown CamParse type, defaulting to Parse.empty!", v22, 2u);
    MEMORY[0x1BA9E48C0](v22, -1, -1);
  }

  uint64_t v23 = *MEMORY[0x1E4FA1F58];
  uint64_t v24 = type metadata accessor for Parse();
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 104))(a1, v23, v24);
  return (*(uint64_t (**)(void *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t outlined init with copy of ActionParaphrase?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Siri_Nlu_External_UserDialogAct?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t protocol witness for CamBridge.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:) in conformance StubCamBridge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return StubCamBridge.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)(a1, v8, v9, v10, a5);
}

uint64_t protocol witness for CamBridge.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:) in conformance CamBridgeImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v16;
  *uint64_t v16 = v8;
  v16[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)()
{
  outlined init with copy of ConversationHelperInput(v0[261], v0[259], (uint64_t (*)(void))type metadata accessor for ParaphraseProbeResult);
  uint64_t v1 = v0[260];
  return MEMORY[0x1F41881D8](v0 + 2, v1, CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:), v0 + 218);
}

{
  uint64_t v0;

  return MEMORY[0x1F4188298](CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:), *(void *)(v0 + 2256), 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  unint64_t *v47;
  uint64_t v48;
  uint64_t (*v49)(void);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[3];
  void *v54;
  uint64_t v55;

  int v54 = v0;
  uint64_t v1 = v0[265];
  uint64_t v2 = v0[264];
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v2, &demangling cache variable for type metadata for ActionParaphrase?);
  outlined destroy of ReferenceResolutionClientProtocol?(v1, &demangling cache variable for type metadata for ActionParaphrase?);
  swift_release();
  uint64_t v3 = v0[272];
  uint64_t v4 = v0[241];
  uint64_t v5 = v0[240];
  outlined init with copy of ReferenceResolutionClientProtocol?(v0[274], v3, &demangling cache variable for type metadata for Input?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v3, 1, v5) == 1)
  {
    uint64_t v6 = v0[234];
    outlined destroy of ReferenceResolutionClientProtocol?(v0[272], &demangling cache variable for type metadata for Input?);
    uint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      uint64_t v8 = v0[234];
      uint64_t v9 = (void *)v0[233];
      uint64_t v10 = v9;
      uint64_t v11 = specialized Sequence.compactMap<A>(_:)(v8, v9);

      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v12 = Logger.logObject.getter();
      uint64_t v13 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v13))
      {
        int v14 = v0[243];
        uint64_t v15 = swift_slowAlloc();
        uint64_t v16 = swift_slowAlloc();
        v53[0] = v16;
        *(_DWORD *)uint64_t v15 = 134218242;
        swift_bridgeObjectRelease();
        v0[217] = v7;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v15 + 12) = 2080;
        uint64_t v17 = swift_bridgeObjectRetain();
        uint64_t v18 = MEMORY[0x1BA9E3080](v17, v14);
        uint64_t v20 = v19;
        swift_bridgeObjectRelease();
        v0[211] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B9C64000, v12, v13, "CamBridge: Converted %ld rankedActions to %s", (uint8_t *)v15, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v16, -1, -1);
        MEMORY[0x1BA9E48C0](v15, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      swift_release();
      uint64_t v41 = v0[281];
      uint64_t v42 = v0[280];
      uint64_t v43 = v0[278];
      uint64_t v44 = v0[277];
      uint64_t v45 = *(void *)(v11 + 16);
      outlined destroy of ReferenceResolutionClientProtocol?(v0[274], &demangling cache variable for type metadata for Input?);
      uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
      v46(v42, v44);
      v46(v41, v44);
      uint64_t v47 = (unint64_t *)v0[230];
      if (v45)
      {
        *uint64_t v47 = v11;
        uint64_t v48 = type metadata accessor for CamOutput();
        swift_storeEnumTagMultiPayload();
        (*(void (**)(unint64_t *, void, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v47, 0, 1, v48);
      }
      else
      {
        uint64_t v51 = type metadata accessor for CamOutput();
        (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v47, 1, 1, v51);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      uint64_t v33 = v0[281];
      uint64_t v34 = v0[280];
      uint64_t v35 = v0[278];
      uint64_t v36 = v0[277];
      os_log_type_t v37 = v0[274];
      uint64_t v38 = v0[230];
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?(v37, &demangling cache variable for type metadata for Input?);
      uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
      v39(v34, v36);
      v39(v33, v36);
      char v40 = type metadata accessor for CamOutput();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v38, 1, 1, v40);
    }
  }
  else
  {
    os_log_type_t v21 = v0[281];
    uint64_t v22 = v0[280];
    uint64_t v23 = v0[278];
    uint64_t v24 = v0[277];
    uint64_t v25 = v0[274];
    int v52 = v0[272];
    uint64_t v26 = v0[242];
    uint64_t v27 = v0[241];
    uint64_t v28 = v0[240];
    uint64_t v29 = v0[230];
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v25, &demangling cache variable for type metadata for Input?);
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v30(v22, v24);
    v30(v21, v24);
    uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32);
    v31(v26, v52, v28);
    v31(v29, v26, v28);
    uint64_t v32 = type metadata accessor for CamOutput();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v29, 0, 1, v32);
  }
  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)&async function pointer to partial apply for thunk for @escaping @callee_guaranteed @async () -> (@out ParaphraseProbeResult));
  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)&thunk for @escaping @callee_guaranteed @async () -> (@out ParaphraseProbeResult)partial apply);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v49 = (uint64_t (*)(void))v0[1];
  return v49();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  unint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  unint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  char v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  void (*v99)(void, void);
  uint64_t (*v100)(void);
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t inited;
  uint64_t v108;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;

  uint64_t v127 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = *(unsigned __int8 *)(v0 + 2352);
  uint64_t v2 = *(void *)(v0 + 2192);
  uint64_t v3 = *(void *)(v0 + 1928);
  uint64_t v4 = *(void *)(v0 + 1920);
  uint64_t v5 = *(void **)(v0 + 1856);
  uint64_t v6 = *(void *)(v0 + 1848);
  uint64_t v7 = type metadata accessor for Logger();
  *(void *)(v0 + 2280) = __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
  specialized Logger.debugF(_:_:_:_:)();
  v8._uint64_t countAndFlagsBits = v6;
  v8._unint64_t object = v5;
  CamBridgeState.registerCamAction(rcId:camAction:)(v8, (SiriKitRuntime::ConversationAction)v1);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
  *(void *)(v0 + 2288) = v9;
  *(void *)(v0 + 2296) = (v3 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v9(v2, 1, 1, v4);
  switch(v1)
  {
    case 1:
      int v14 = *(void *)(v0 + 2184);
      uint64_t v15 = *(void *)(v0 + 2168);
      uint64_t v16 = *(void *)(v0 + 2160);
      uint64_t v17 = *(void *)(v0 + 2152);
      uint64_t v18 = *(void *)(v0 + 2144);
      uint64_t v19 = *(void *)(v0 + 2136);
      uint64_t v20 = *(void *)(v0 + 2128);
      uint64_t v122 = *(void *)(v0 + 2192);
      uint64_t v123 = *(void *)(v0 + 1920);
      swift_release();
      static CamDirectInvocationIdentifiers.askRepeat.getter();
      goto LABEL_8;
    case 2:
      int v14 = *(void *)(v0 + 2184);
      uint64_t v15 = *(void *)(v0 + 2168);
      uint64_t v16 = *(void *)(v0 + 2160);
      uint64_t v17 = *(void *)(v0 + 2152);
      uint64_t v18 = *(void *)(v0 + 2144);
      uint64_t v19 = *(void *)(v0 + 2136);
      uint64_t v20 = *(void *)(v0 + 2128);
      uint64_t v122 = *(void *)(v0 + 2192);
      uint64_t v123 = *(void *)(v0 + 1920);
      swift_release();
      static CamDirectInvocationIdentifiers.giveUpRepeat.getter();
LABEL_8:
      Parse.DirectInvocation.init(identifier:userData:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v18, v15, v17);
      (*(void (**)(uint64_t, void, uint64_t))(v19 + 104))(v18, *MEMORY[0x1E4FA1F38], v20);
      Input.init(parse:)();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
      outlined destroy of ReferenceResolutionClientProtocol?(v122, &demangling cache variable for type metadata for Input?);
      v9(v14, 0, 1, v123);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v14, v122, &demangling cache variable for type metadata for Input?);
      goto LABEL_14;
    case 3:
      if (*(void *)(*(void *)(v0 + 1872) + 16) < 2uLL)
      {
        swift_release();
        uint64_t v10 = Logger.logObject.getter();
        uint64_t v11 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v10, v11))
        {
          uint64_t v12 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v12 = 0;
          uint64_t v13 = "CamBridge: We didn't have 2 actions present to disambiguate.";
LABEL_12:
          _os_log_impl(&dword_1B9C64000, v10, v11, v13, v12, 2u);
          MEMORY[0x1BA9E48C0](v12, -1, -1);
        }
LABEL_13:

        goto LABEL_14;
      }
      uint64_t v67 = *(void *)(v0 + 2120);
      os_log_type_t v68 = *(void *)(v0 + 2112);
      uint64_t v69 = type metadata accessor for ActionParaphrase();
      *(void *)(v0 + 2304) = v69;
      unint64_t v70 = *(void *)(v69 - 8);
      *(void *)(v0 + 2312) = v70;
      uint64_t v71 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56);
      *(void *)(v0 + 2320) = v71;
      *(void *)(v0 + 2328) = (v70 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      v71(v67, 1, 1, v69);
      v71(v68, 1, 1, v69);
      if (one-time initialization token for forceEnabled != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v72 = static AmbiguityFeatureFlags.forceEnabled;
      if (*(void *)(static AmbiguityFeatureFlags.forceEnabled + 16)
        && (id v73 = specialized __RawDictionaryStorage.find<A>(_:)(1), (v74 & 1) != 0))
      {
        if (*(unsigned char *)(*(void *)(v72 + 56) + v73) != 1)
        {
LABEL_28:
          swift_release();
          uint64_t v75 = *(void *)(v0 + 2120);
          uint64_t v76 = *(void *)(v0 + 1968);
          int64_t v77 = *(void **)(v0 + 1864);
          type metadata accessor for RankedAction();
          RankedAction.toPluginAction(withSpeechPackage:withParaphrase:)(v77, v75, v76);
          unsigned int v121 = PluginAction.serialize()();
          int v124 = v95;
          unint64_t v96 = *(void *)(v0 + 2112);
          unint64_t v97 = *(void *)(v0 + 1960);
          unint64_t v98 = *(void **)(v0 + 1864);
          uint64_t v99 = *(void (**)(void, void))(*(void *)(v0 + 1952) + 8);
          v99(*(void *)(v0 + 1968), *(void *)(v0 + 1944));
          RankedAction.toPluginAction(withSpeechPackage:withParaphrase:)(v98, v96, v97);
          os_log_type_t v101 = PluginAction.serialize()();
          id v103 = v102;
          unsigned int v119 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 2288);
          Swift::Int v104 = *(void *)(v0 + 2160);
          uint64_t v110 = *(void *)(v0 + 2168);
          uint64_t v111 = *(void *)(v0 + 2152);
          id v105 = *(void *)(v0 + 2144);
          unint64_t v106 = *(void *)(v0 + 2136);
          uint64_t v112 = *(void *)(v0 + 2128);
          Swift::Int v113 = *(void *)(v0 + 2184);
          uint64_t v114 = *(void *)(v0 + 2112);
          id v115 = *(void *)(v0 + 2120);
          Swift::String v116 = *(void *)(v0 + 1920);
          uint64_t v117 = *(void *)(v0 + 2192);
          v99(*(void *)(v0 + 1960), *(void *)(v0 + 1944));
          static CamDirectInvocationIdentifiers.disambiguateTopTwo.getter();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_1BA04FD90;
          *(void *)(inited + 32) = 1936750952;
          *(void *)(inited + 40) = 0xE400000000000000;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
          unint64_t v108 = swift_allocObject();
          *(_OWORD *)(v108 + 16) = xmmword_1BA04F9C0;
          *(void *)(v108 + 32) = v121;
          *(void *)(v108 + 40) = v124;
          *(void *)(v108 + 48) = v101;
          *(void *)(v108 + 56) = v103;
          *(void *)(inited + 72) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
          *(void *)(inited + 48) = v108;
          outlined copy of Data._Representation(v121, v124);
          outlined copy of Data._Representation(v101, v103);
          specialized Dictionary.init(dictionaryLiteral:)(inited);
          Parse.DirectInvocation.init(identifier:userData:)();
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v104 + 16))(v105, v110, v111);
          (*(void (**)(uint64_t, void, uint64_t))(v106 + 104))(v105, *MEMORY[0x1E4FA1F38], v112);
          Input.init(parse:)();
          outlined consume of Data._Representation(v101, v103);
          outlined consume of Data._Representation(v121, v124);
          (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v110, v111);
          outlined destroy of ReferenceResolutionClientProtocol?(v114, &demangling cache variable for type metadata for ActionParaphrase?);
          outlined destroy of ReferenceResolutionClientProtocol?(v115, &demangling cache variable for type metadata for ActionParaphrase?);
          outlined destroy of ReferenceResolutionClientProtocol?(v117, &demangling cache variable for type metadata for Input?);
          v119(v113, 0, 1, v116);
          outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v113, v117, &demangling cache variable for type metadata for Input?);
LABEL_14:
          os_log_type_t v21 = *(void *)(v0 + 2176);
          uint64_t v22 = *(void *)(v0 + 1928);
          uint64_t v23 = *(void *)(v0 + 1920);
          outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 2192), v21, &demangling cache variable for type metadata for Input?);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v21, 1, v23) == 1)
          {
            uint64_t v24 = *(void *)(v0 + 1872);
            outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 2176), &demangling cache variable for type metadata for Input?);
            uint64_t v25 = *(void *)(v24 + 16);
            if (v25)
            {
              uint64_t v26 = *(void *)(v0 + 1872);
              uint64_t v27 = *(void **)(v0 + 1864);
              uint64_t v28 = v27;
              uint64_t v29 = specialized Sequence.compactMap<A>(_:)(v26, v27);

              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain_n();
              uint64_t v30 = Logger.logObject.getter();
              uint64_t v31 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v30, v31))
              {
                uint64_t v32 = *(void *)(v0 + 1944);
                uint64_t v33 = swift_slowAlloc();
                uint64_t v34 = swift_slowAlloc();
                uint64_t v126 = v34;
                *(_DWORD *)uint64_t v33 = 134218242;
                swift_bridgeObjectRelease();
                *(void *)(v0 + 1736) = v25;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                *(_WORD *)(v33 + 12) = 2080;
                uint64_t v35 = swift_bridgeObjectRetain();
                uint64_t v36 = MEMORY[0x1BA9E3080](v35, v32);
                uint64_t v38 = v37;
                swift_bridgeObjectRelease();
                *(void *)(v0 + 1688) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, &v126);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease_n();
                _os_log_impl(&dword_1B9C64000, v30, v31, "CamBridge: Converted %ld rankedActions to %s", (uint8_t *)v33, 0x16u);
                swift_arrayDestroy();
                MEMORY[0x1BA9E48C0](v34, -1, -1);
                MEMORY[0x1BA9E48C0](v33, -1, -1);
              }
              else
              {
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
              }

              swift_release();
              int64_t v59 = *(void *)(v0 + 2248);
              uint64_t v60 = *(void *)(v0 + 2240);
              id v61 = *(void *)(v0 + 2224);
              uint64_t v62 = *(void *)(v0 + 2216);
              uint64_t v63 = *(void *)(v29 + 16);
              outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 2192), &demangling cache variable for type metadata for Input?);
              uint64_t v64 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
              v64(v60, v62);
              v64(v59, v62);
              id v65 = *(unint64_t **)(v0 + 1840);
              if (v63)
              {
                *id v65 = v29;
                uint64_t v66 = type metadata accessor for CamOutput();
                swift_storeEnumTagMultiPayload();
                (*(void (**)(unint64_t *, void, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v65, 0, 1, v66);
              }
              else
              {
                unint64_t v78 = type metadata accessor for CamOutput();
                (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56))(v65, 1, 1, v78);
                swift_bridgeObjectRelease();
              }
            }
            else
            {
              uint64_t v51 = *(void *)(v0 + 2248);
              int v52 = *(void *)(v0 + 2240);
              int64_t v53 = *(void *)(v0 + 2224);
              int v54 = *(void *)(v0 + 2216);
              uint64_t v55 = *(void *)(v0 + 2192);
              uint64_t v56 = *(void *)(v0 + 1840);
              swift_release();
              outlined destroy of ReferenceResolutionClientProtocol?(v55, &demangling cache variable for type metadata for Input?);
              os_log_type_t v57 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
              v57(v52, v54);
              v57(v51, v54);
              uint64_t v58 = type metadata accessor for CamOutput();
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v56, 1, 1, v58);
            }
          }
          else
          {
            uint64_t v39 = *(void *)(v0 + 2248);
            char v40 = *(void *)(v0 + 2240);
            uint64_t v41 = *(void *)(v0 + 2224);
            uint64_t v42 = *(void *)(v0 + 2216);
            uint64_t v43 = *(void *)(v0 + 2192);
            unint64_t v125 = *(void *)(v0 + 2176);
            uint64_t v44 = *(void *)(v0 + 1936);
            uint64_t v45 = *(void *)(v0 + 1928);
            uint64_t v46 = *(void *)(v0 + 1920);
            uint64_t v47 = *(void *)(v0 + 1840);
            swift_release();
            outlined destroy of ReferenceResolutionClientProtocol?(v43, &demangling cache variable for type metadata for Input?);
            uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
            v48(v40, v42);
            v48(v39, v42);
            unint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32);
            v49(v44, v125, v46);
            v49(v47, v44, v46);
            char v50 = type metadata accessor for CamOutput();
            swift_storeEnumTagMultiPayload();
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v47, 0, 1, v50);
          }
          _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(0);
          _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(0);
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v100 = *(uint64_t (**)(void))(v0 + 8);
          return v100();
        }
      }
      else
      {
        *(void *)(v0 + 1440) = &type metadata for AmbiguityFeatureFlags;
        *(void *)(v0 + 1448) = lazy protocol witness table accessor for type AmbiguityFeatureFlags and conformance AmbiguityFeatureFlags();
        *(unsigned char *)(v0 + 1416) = 1;
        unint64_t v79 = isFeatureEnabled(_:)();
        __swift_destroy_boxed_opaque_existential_1Tm(v0 + 1416);
        if ((v79 & 1) == 0) {
          goto LABEL_28;
        }
      }
      uint64_t v80 = Logger.logObject.getter();
      BOOL v81 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v80, v81))
      {
        uint64_t v82 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v82 = 0;
        _os_log_impl(&dword_1B9C64000, v80, v81, "CamBridge: Probing actions for input paraphrases", v82, 2u);
        MEMORY[0x1BA9E48C0](v82, -1, -1);
      }
      unint64_t v83 = *(void *)(v0 + 2000);
      int v120 = *(void *)(v0 + 1992);
      int v84 = *(void *)(v0 + 1976);
      uint64_t v85 = *(void *)(v0 + 1912);
      uint64_t v86 = *(void *)(v0 + 1888);
      uint64_t v87 = *(void *)(v0 + 1880);
      unsigned int v118 = v87;
      uint64_t v88 = *(void *)(v0 + 1872);

      outlined init with copy of ConversationHelperInput(v87, v83, type metadata accessor for ConversationHelperInput);
      uint64_t v89 = (*(unsigned __int8 *)(v84 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
      uint64_t v90 = (void *)swift_allocObject();
      void v90[2] = v85;
      v90[3] = v88;
      v90[4] = v86;
      outlined init with take of ConversationHelperInput(v83, (uint64_t)v90 + v89);
      uint64_t v91 = swift_allocObject();
      *(void *)(v0 + 2336) = v91;
      *(void *)(v91 + 16) = &async function pointer to partial apply for implicit closure #2 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:);
      *(void *)(v91 + 24) = v90;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_asyncLet_begin();
      outlined init with copy of ConversationHelperInput(v118, v120, type metadata accessor for ConversationHelperInput);
      uint64_t v92 = (void *)swift_allocObject();
      v92[2] = v85;
      v92[3] = v88;
      v92[4] = v86;
      outlined init with take of ConversationHelperInput(v120, (uint64_t)v92 + v89);
      unint64_t v93 = swift_allocObject();
      *(void *)(v0 + 2344) = v93;
      *(void *)(v93 + 16) = &async function pointer to partial apply for implicit closure #3 in CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:);
      *(void *)(v93 + 24) = v92;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_asyncLet_begin();
      uint64_t v94 = *(void *)(v0 + 2088);
      return MEMORY[0x1F41881D8](v0 + 656, v94, CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:), v0 + 1520);
    default:
      swift_release();
      uint64_t v10 = Logger.logObject.getter();
      uint64_t v11 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v10, v11)) {
        goto LABEL_13;
      }
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      uint64_t v13 = "CamBridge: Executing top ranked action";
      goto LABEL_12;
  }
}

{
  uint64_t v0;

  return MEMORY[0x1F4188298](CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:), *(void *)(v0 + 2256), 0);
}

{
  uint64_t v0;

  return MEMORY[0x1F4188298](CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:), *(void *)(v0 + 2256), 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 2088);
  return MEMORY[0x1F41881D0](v0 + 656, v1, CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:), v0 + 1296);
}

{
  uint64_t v0;

  return MEMORY[0x1F4188298](CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:), *(void *)(v0 + 2256), 0);
}

{
  uint64_t v0;

  return MEMORY[0x1F4188298](CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:), *(void *)(v0 + 2256), 0);
}

{
  uint64_t v0;

  return MEMORY[0x1F4188298](CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:), *(void *)(v0 + 2256), 0);
}

{
  uint64_t v0;

  return MEMORY[0x1F4188298](CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:), *(void *)(v0 + 2256), 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 2088);
  return MEMORY[0x1F41881D0](v0 + 656, v1, CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:), v0 + 1696);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void (*v8)(void, void);
  uint64_t (*v9)(void);
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t inited;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  unint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  unint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78[3];
  void *v79;
  uint64_t v80;

  unint64_t v79 = v0;
  swift_release();
  swift_release();
  uint64_t v1 = v0[265];
  uint64_t v2 = v0[246];
  uint64_t v3 = (void *)v0[233];
  type metadata accessor for RankedAction();
  RankedAction.toPluginAction(withSpeechPackage:withParaphrase:)(v3, v1, v2);
  uint64_t v75 = PluginAction.serialize()();
  uint64_t v76 = v4;
  uint64_t v5 = v0[264];
  uint64_t v6 = v0[245];
  uint64_t v7 = (void *)v0[233];
  uint64_t v8 = *(void (**)(void, void))(v0[244] + 8);
  v8(v0[246], v0[243]);
  RankedAction.toPluginAction(withSpeechPackage:withParaphrase:)(v7, v5, v6);
  uint64_t v11 = PluginAction.serialize()();
  uint64_t v13 = v12;
  uint64_t v74 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[286];
  int v14 = v0[270];
  uint64_t v66 = v0[271];
  uint64_t v67 = v0[269];
  uint64_t v15 = v0[268];
  uint64_t v16 = v0[267];
  os_log_type_t v68 = v0[266];
  uint64_t v69 = v0[273];
  unint64_t v70 = v0[264];
  uint64_t v71 = v0[265];
  uint64_t v72 = v0[240];
  id v73 = v0[274];
  v8(v0[245], v0[243]);
  static CamDirectInvocationIdentifiers.disambiguateTopTwo.getter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BA04FD90;
  *(void *)(inited + 32) = 1936750952;
  *(void *)(inited + 40) = 0xE400000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_1BA04F9C0;
  *(void *)(v18 + 32) = v75;
  *(void *)(v18 + 40) = v76;
  *(void *)(v18 + 48) = v11;
  *(void *)(v18 + 56) = v13;
  *(void *)(inited + 72) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
  *(void *)(inited + 48) = v18;
  outlined copy of Data._Representation(v75, v76);
  outlined copy of Data._Representation(v11, v13);
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  Parse.DirectInvocation.init(identifier:userData:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v15, v66, v67);
  (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))(v15, *MEMORY[0x1E4FA1F38], v68);
  Input.init(parse:)();
  outlined consume of Data._Representation(v11, v13);
  outlined consume of Data._Representation(v75, v76);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v66, v67);
  outlined destroy of ReferenceResolutionClientProtocol?(v70, &demangling cache variable for type metadata for ActionParaphrase?);
  outlined destroy of ReferenceResolutionClientProtocol?(v71, &demangling cache variable for type metadata for ActionParaphrase?);
  outlined destroy of ReferenceResolutionClientProtocol?(v73, &demangling cache variable for type metadata for Input?);
  v74(v69, 0, 1, v72);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v69, v73, &demangling cache variable for type metadata for Input?);
  uint64_t v19 = v0[272];
  uint64_t v20 = v0[241];
  os_log_type_t v21 = v0[240];
  outlined init with copy of ReferenceResolutionClientProtocol?(v0[274], v19, &demangling cache variable for type metadata for Input?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v19, 1, v21) == 1)
  {
    uint64_t v22 = v0[234];
    outlined destroy of ReferenceResolutionClientProtocol?(v0[272], &demangling cache variable for type metadata for Input?);
    uint64_t v23 = *(void *)(v22 + 16);
    if (v23)
    {
      uint64_t v24 = v0[234];
      uint64_t v25 = (void *)v0[233];
      uint64_t v26 = v25;
      uint64_t v27 = specialized Sequence.compactMap<A>(_:)(v24, v25);

      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v28 = Logger.logObject.getter();
      uint64_t v29 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = v0[243];
        uint64_t v31 = swift_slowAlloc();
        uint64_t v32 = swift_slowAlloc();
        v78[0] = v32;
        *(_DWORD *)uint64_t v31 = 134218242;
        swift_bridgeObjectRelease();
        v0[217] = v23;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v31 + 12) = 2080;
        uint64_t v33 = swift_bridgeObjectRetain();
        uint64_t v34 = MEMORY[0x1BA9E3080](v33, v30);
        uint64_t v36 = v35;
        swift_bridgeObjectRelease();
        v0[211] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B9C64000, v28, v29, "CamBridge: Converted %ld rankedActions to %s", (uint8_t *)v31, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v32, -1, -1);
        MEMORY[0x1BA9E48C0](v31, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      swift_release();
      os_log_type_t v57 = v0[281];
      uint64_t v58 = v0[280];
      int64_t v59 = v0[278];
      uint64_t v60 = v0[277];
      id v61 = *(void *)(v27 + 16);
      outlined destroy of ReferenceResolutionClientProtocol?(v0[274], &demangling cache variable for type metadata for Input?);
      uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
      v62(v58, v60);
      v62(v57, v60);
      uint64_t v63 = (unint64_t *)v0[230];
      if (v61)
      {
        *uint64_t v63 = v27;
        uint64_t v64 = type metadata accessor for CamOutput();
        swift_storeEnumTagMultiPayload();
        (*(void (**)(unint64_t *, void, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v63, 0, 1, v64);
      }
      else
      {
        id v65 = type metadata accessor for CamOutput();
        (*(void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v63, 1, 1, v65);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      unint64_t v49 = v0[281];
      char v50 = v0[280];
      uint64_t v51 = v0[278];
      int v52 = v0[277];
      int64_t v53 = v0[274];
      int v54 = v0[230];
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?(v53, &demangling cache variable for type metadata for Input?);
      uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
      v55(v50, v52);
      v55(v49, v52);
      uint64_t v56 = type metadata accessor for CamOutput();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v54, 1, 1, v56);
    }
  }
  else
  {
    os_log_type_t v37 = v0[281];
    uint64_t v38 = v0[280];
    uint64_t v39 = v0[278];
    char v40 = v0[277];
    uint64_t v41 = v0[274];
    int64_t v77 = v0[272];
    uint64_t v42 = v0[242];
    uint64_t v43 = v0[241];
    uint64_t v44 = v0[240];
    uint64_t v45 = v0[230];
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v41, &demangling cache variable for type metadata for Input?);
    uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v46(v38, v40);
    v46(v37, v40);
    uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32);
    v47(v42, v77, v44);
    v47(v45, v42, v44);
    uint64_t v48 = type metadata accessor for CamOutput();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v45, 0, 1, v48);
  }
  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)&async function pointer to partial apply for thunk for @escaping @callee_guaranteed @async () -> (@out ParaphraseProbeResult));
  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)&thunk for @escaping @callee_guaranteed @async () -> (@out ParaphraseProbeResult)partial apply);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 2088);
  return MEMORY[0x1F41881D0](v0 + 656, v1, CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:), v0 + 1648);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;

  uint64_t v1 = v0[278];
  uint64_t v2 = v0[277];
  uint64_t v3 = v0[276];
  uint64_t v4 = v0[239];
  swift_beginAccess();
  uint64_t v5 = *(void *)(v4 + 240);
  v0[283] = v5;
  outlined init with copy of ReferenceResolutionClientProtocol?(v5 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId, v3, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v6(v3, 1, v2) == 1)
  {
    uint64_t v7 = v0 + 276;
    swift_retain();
  }
  else
  {
    uint64_t v8 = v0[277];
    uint64_t v9 = v0[275];
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[278] + 32);
    v10(v0[279], v0[276], v8);
    outlined init with copy of ReferenceResolutionClientProtocol?(v5 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_camLoggingId, v9, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (v6(v9, 1, v8) != 1)
    {
      uint64_t v18 = v0[281];
      uint64_t v19 = v0[279];
      uint64_t v20 = v0[277];
      v10(v0[280], v0[275], v20);
      v10(v18, v19, v20);
      swift_retain();
      goto LABEL_11;
    }
    uint64_t v7 = v0 + 275;
    uint64_t v11 = v0[279];
    uint64_t v12 = v0[277];
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v0[278] + 8);
    swift_retain();
    v13(v11, v12);
  }
  outlined destroy of ReferenceResolutionClientProtocol?(*v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  int v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
  uint64_t v15 = Logger.logObject.getter();
  uint64_t v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_1B9C64000, v15, v16, "No Execution/CAM logging ID found in camBridgeState, falling back on new UUID", v17, 2u);
    MEMORY[0x1BA9E48C0](v17, -1, -1);
  }

  UUID.init()();
  UUID.init()();
LABEL_11:
  os_log_type_t v21 = (void *)swift_task_alloc();
  v0[284] = v21;
  *os_log_type_t v21 = v0;
  v21[1] = CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:);
  uint64_t v22 = v0[281];
  uint64_t v23 = v0[280];
  uint64_t v24 = v0[238];
  uint64_t v25 = v0[237];
  uint64_t v26 = v0[234];
  uint64_t v27 = v0[233];
  uint64_t v28 = v0[232];
  uint64_t v29 = v0[231];
  return CamBridgeImpl.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:)(v22, v23, v29, v28, v27, v26, v25, v24);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  int v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)();
  uint64_t v29;
  int v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)();
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  int v41;
  void (*v42)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  void (*v51)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  void *v60;
  uint64_t v61;

  uint64_t v60 = v0;
  uint64_t v1 = v0[259];
  uint64_t v2 = v0[257];
  outlined init with copy of ConversationHelperInput(v0[260], v0[258], (uint64_t (*)(void))type metadata accessor for ParaphraseProbeResult);
  outlined init with copy of ConversationHelperInput(v1, v2, (uint64_t (*)(void))type metadata accessor for ParaphraseProbeResult);
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = v0[257];
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    int64_t v59 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v8 = ParaphraseProbeResult.description.getter();
    v0[229] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ParaphraseProbeResult(v5, (uint64_t (*)(void))type metadata accessor for ParaphraseProbeResult);
    _os_log_impl(&dword_1B9C64000, v3, v4, "CamBridge: ActionParaphrase by action 1 %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v7, -1, -1);
    MEMORY[0x1BA9E48C0](v6, -1, -1);
  }
  else
  {
    outlined destroy of ParaphraseProbeResult(v0[257], (uint64_t (*)(void))type metadata accessor for ParaphraseProbeResult);
  }

  outlined init with copy of ConversationHelperInput(v0[258], v0[256], (uint64_t (*)(void))type metadata accessor for ParaphraseProbeResult);
  uint64_t v10 = Logger.logObject.getter();
  uint64_t v11 = static os_log_type_t.debug.getter();
  uint64_t v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = v0[256];
  if (v12)
  {
    int v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    int64_t v59 = v15;
    *(_DWORD *)int v14 = 136315138;
    uint64_t v16 = ParaphraseProbeResult.description.getter();
    v0[223] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ParaphraseProbeResult(v13, (uint64_t (*)(void))type metadata accessor for ParaphraseProbeResult);
    _os_log_impl(&dword_1B9C64000, v10, v11, "CamBridge: ActionParaphrase by action 2 %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v15, -1, -1);
    MEMORY[0x1BA9E48C0](v14, -1, -1);
  }
  else
  {
    outlined destroy of ParaphraseProbeResult(v0[256], (uint64_t (*)(void))type metadata accessor for ParaphraseProbeResult);
  }

  uint64_t v18 = v0[255];
  outlined init with copy of ConversationHelperInput(v0[259], v18, (uint64_t (*)(void))type metadata accessor for ParaphraseProbeResult);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (actionParaphrase: ActionParaphrase));
  uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48);
  os_log_type_t v21 = v20(v18, 2, v19);
  outlined destroy of ParaphraseProbeResult(v18, (uint64_t (*)(void))type metadata accessor for ParaphraseProbeResult);
  if (v21 == 2)
  {
    uint64_t v22 = Logger.logObject.getter();
    uint64_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_1B9C64000, v22, v23, "CamBridge: action 1 is a dead end, avoiding to disambiguate", v24, 2u);
      MEMORY[0x1BA9E48C0](v24, -1, -1);
    }
    uint64_t v25 = v0 + 198;
    uint64_t v26 = v0[259];
    uint64_t v27 = v0[258];

    outlined destroy of ParaphraseProbeResult(v27, (uint64_t (*)(void))type metadata accessor for ParaphraseProbeResult);
    outlined destroy of ParaphraseProbeResult(v26, (uint64_t (*)(void))type metadata accessor for ParaphraseProbeResult);
    uint64_t v28 = CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:);
  }
  else
  {
    uint64_t v29 = v0[254];
    outlined init with copy of ConversationHelperInput(v0[258], v29, (uint64_t (*)(void))type metadata accessor for ParaphraseProbeResult);
    uint64_t v30 = v20(v29, 2, v19);
    outlined destroy of ParaphraseProbeResult(v29, (uint64_t (*)(void))type metadata accessor for ParaphraseProbeResult);
    if (v30 != 2)
    {
      char v40 = v0[253];
      outlined init with copy of ConversationHelperInput(v0[259], v40, (uint64_t (*)(void))type metadata accessor for ParaphraseProbeResult);
      uint64_t v41 = v20(v40, 2, v19);
      uint64_t v42 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[290];
      if (v41)
      {
        uint64_t v43 = v0[253];
        v42(v0[263], 1, 1, v0[288]);
        outlined destroy of ParaphraseProbeResult(v43, (uint64_t (*)(void))type metadata accessor for ParaphraseProbeResult);
      }
      else
      {
        uint64_t v44 = v0[288];
        uint64_t v45 = v0[263];
        (*(void (**)(uint64_t, void, uint64_t))(v0[289] + 32))(v45, v0[253], v44);
        v42(v45, 0, 1, v44);
      }
      uint64_t v46 = v0[265];
      uint64_t v47 = v0[263];
      uint64_t v48 = v0[258];
      unint64_t v49 = v0[252];
      outlined destroy of ReferenceResolutionClientProtocol?(v46, &demangling cache variable for type metadata for ActionParaphrase?);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v47, v46, &demangling cache variable for type metadata for ActionParaphrase?);
      outlined init with copy of ConversationHelperInput(v48, v49, (uint64_t (*)(void))type metadata accessor for ParaphraseProbeResult);
      char v50 = v20(v49, 2, v19);
      uint64_t v51 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[290];
      if (v50)
      {
        int v52 = v0[252];
        v51(v0[262], 1, 1, v0[288]);
        outlined destroy of ParaphraseProbeResult(v52, (uint64_t (*)(void))type metadata accessor for ParaphraseProbeResult);
      }
      else
      {
        int64_t v53 = v0[288];
        int v54 = v0[262];
        (*(void (**)(uint64_t, void, uint64_t))(v0[289] + 32))(v54, v0[252], v53);
        v51(v54, 0, 1, v53);
      }
      uint64_t v55 = v0[264];
      uint64_t v56 = v0[262];
      os_log_type_t v57 = v0[259];
      outlined destroy of ParaphraseProbeResult(v0[258], (uint64_t (*)(void))type metadata accessor for ParaphraseProbeResult);
      outlined destroy of ParaphraseProbeResult(v57, (uint64_t (*)(void))type metadata accessor for ParaphraseProbeResult);
      outlined destroy of ReferenceResolutionClientProtocol?(v55, &demangling cache variable for type metadata for ActionParaphrase?);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v56, v55, &demangling cache variable for type metadata for ActionParaphrase?);
      uint64_t v36 = CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:);
      os_log_type_t v37 = v0[260];
      uint64_t v38 = v0 + 2;
      uint64_t v39 = v0 + 224;
      goto LABEL_23;
    }
    uint64_t v31 = Logger.logObject.getter();
    uint64_t v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl(&dword_1B9C64000, v31, v32, "CamBridge: action 2 is a dead end, avoiding to disambiguate", v33, 2u);
      MEMORY[0x1BA9E48C0](v33, -1, -1);
    }
    uint64_t v25 = v0 + 182;
    uint64_t v34 = v0[259];
    uint64_t v35 = v0[258];

    outlined destroy of ParaphraseProbeResult(v35, (uint64_t (*)(void))type metadata accessor for ParaphraseProbeResult);
    outlined destroy of ParaphraseProbeResult(v34, (uint64_t (*)(void))type metadata accessor for ParaphraseProbeResult);
    uint64_t v28 = CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:);
  }
  uint64_t v36 = v28;
  os_log_type_t v37 = v0[260];
  uint64_t v38 = v0 + 2;
  uint64_t v39 = v25;
LABEL_23:
  return MEMORY[0x1F41881D0](v38, v37, v36, v39);
}

uint64_t CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 2256);
  *(unsigned char *)(*(void *)v1 + 2352) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:), v2, 0);
}

uint64_t CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[239] = v8;
  v9[238] = v19;
  v9[237] = a8;
  v9[236] = a7;
  v9[235] = a6;
  v9[234] = a5;
  v9[233] = a4;
  v9[232] = a3;
  v9[231] = a2;
  v9[230] = a1;
  uint64_t v10 = type metadata accessor for Input();
  v9[240] = v10;
  v9[241] = *(void *)(v10 - 8);
  v9[242] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for PluginAction();
  v9[243] = v11;
  v9[244] = *(void *)(v11 - 8);
  v9[245] = swift_task_alloc();
  v9[246] = swift_task_alloc();
  uint64_t v12 = *(void *)(type metadata accessor for ConversationHelperInput(0) - 8);
  v9[247] = v12;
  v9[248] = *(void *)(v12 + 64);
  v9[249] = swift_task_alloc();
  v9[250] = swift_task_alloc();
  v9[251] = type metadata accessor for ParaphraseProbeResult();
  v9[252] = swift_task_alloc();
  v9[253] = swift_task_alloc();
  v9[254] = swift_task_alloc();
  v9[255] = swift_task_alloc();
  v9[256] = swift_task_alloc();
  v9[257] = swift_task_alloc();
  v9[258] = swift_task_alloc();
  v9[259] = swift_task_alloc();
  v9[260] = swift_task_alloc();
  v9[261] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  v9[262] = swift_task_alloc();
  v9[263] = swift_task_alloc();
  v9[264] = swift_task_alloc();
  v9[265] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for Parse();
  v9[266] = v13;
  v9[267] = *(void *)(v13 - 8);
  v9[268] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for Parse.DirectInvocation();
  v9[269] = v14;
  v9[270] = *(void *)(v14 - 8);
  v9[271] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v9[272] = swift_task_alloc();
  v9[273] = swift_task_alloc();
  v9[274] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v9[275] = swift_task_alloc();
  v9[276] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for UUID();
  v9[277] = v15;
  v9[278] = *(void *)(v15 - 8);
  v9[279] = swift_task_alloc();
  v9[280] = swift_task_alloc();
  v9[281] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v16 = static MessageBusActor.shared;
  v9[282] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](CamBridgeImpl.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:), v16, 0);
}

uint64_t type metadata accessor for ParaphraseProbeResult()
{
  uint64_t result = type metadata singleton initialization cache for ParaphraseProbeResult;
  if (!type metadata singleton initialization cache for ParaphraseProbeResult) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t CamBridgeImpl.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:)()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 504);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](CamBridgeImpl.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  void *v5;
  Swift::String_optional v6;
  void *v7;
  void *v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t (*v32)(void);
  unsigned int v34;
  uint64_t v35;

  uint64_t v2 = v0[44];
  uint64_t v1 = v0[45];
  uint64_t v3 = v0[43];
  swift_release();
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 88))(v1, v3);
  if (v4 != *MEMORY[0x1E4F9FA68])
  {
    os_log_type_t v21 = v4;
    uint64_t v22 = v0[62];
    uint64_t v24 = v0[51];
    uint64_t v23 = v0[52];
    uint64_t v25 = v0[50];
    if (v21 == *MEMORY[0x1E4F9FA70])
    {
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
      outlined destroy of ReferenceResolutionClientProtocol?(v22, (uint64_t *)&demangling cache variable for type metadata for CamAction?);
      uint64_t v34 = 2;
      goto LABEL_15;
    }
    uint64_t v31 = *MEMORY[0x1E4F9FA78];
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    outlined destroy of ReferenceResolutionClientProtocol?(v22, (uint64_t *)&demangling cache variable for type metadata for CamAction?);
    if (v21 == v31)
    {
      uint64_t v34 = 3;
      goto LABEL_15;
    }
    (*(void (**)(void, void))(v0[44] + 8))(v0[45], v0[43]);
    goto LABEL_14;
  }
  uint64_t v5 = (void *)v0[42];
  __swift_project_boxed_opaque_existential_1(v5 + 13, v5[16]);
  v6.value._uint64_t countAndFlagsBits = UUID.uuidString.getter();
  uint64_t v8 = v7;
  v9._unint64_t object = (void *)0x80000001BA0638E0;
  v9._uint64_t countAndFlagsBits = 0xD000000000000024;
  v6.value._unint64_t object = v8;
  TrialExperimentationAssetManaging.emitTriggerLogging(codepathId:requestId:)(v9, v6);
  swift_bridgeObjectRelease();
  uint64_t v10 = v5[16];
  uint64_t v11 = v5[17];
  __swift_project_boxed_opaque_existential_1(v5 + 13, v10);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
  uint64_t v13 = Logger.logObject.getter();
  uint64_t v14 = static os_log_type_t.debug.getter();
  uint64_t v15 = os_log_type_enabled(v13, v14);
  if ((v12 & 1) == 0)
  {
    if (v15)
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_1B9C64000, v13, v14, "CamBridge: Deprecating CAM AskRepeat based on factor level from Trial.", v16, 2u);
      MEMORY[0x1BA9E48C0](v16, -1, -1);
    }
    uint64_t v17 = v0[62];
    uint64_t v19 = v0[51];
    uint64_t v18 = v0[52];
    uint64_t v20 = v0[50];

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    outlined destroy of ReferenceResolutionClientProtocol?(v17, (uint64_t *)&demangling cache variable for type metadata for CamAction?);
LABEL_14:
    uint64_t v34 = 0;
    goto LABEL_15;
  }
  if (v15)
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl(&dword_1B9C64000, v13, v14, "CamBridge: Keeping CAM AskRepeat based on factor level from Trial.", v26, 2u);
    MEMORY[0x1BA9E48C0](v26, -1, -1);
  }
  uint64_t v27 = v0[62];
  uint64_t v29 = v0[51];
  uint64_t v28 = v0[52];
  uint64_t v30 = v0[50];

  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
  outlined destroy of ReferenceResolutionClientProtocol?(v27, (uint64_t *)&demangling cache variable for type metadata for CamAction?);
  uint64_t v34 = 1;
LABEL_15:
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 8));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v32 = (uint64_t (*)(void))v0[1];
  return v32(v34);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 504);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](CamBridgeImpl.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:), v1, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(void, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  NSObject *v38;
  os_log_type_t v39;
  const char *v40;
  char v41;
  uint64_t v42;
  os_log_type_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  id v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void (**v70)(uint64_t, uint64_t);
  void (**v71)(uint64_t, void, uint64_t);
  unsigned int v72;
  uint64_t v73;
  void (**v74)(unint64_t, uint64_t, uint64_t);
  unint64_t v75;
  uint64_t v76;
  void (**v77)(uint64_t, void, uint64_t);
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  void (*v81)(void, uint64_t, uint64_t);
  uint64_t (*v82)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (**v83)(uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  uint64_t v85 = v0;
  uint64_t v1 = (uint64_t *)(*(void *)(v0 + 336) + 144);
  swift_beginAccess();
  outlined init with copy of CamBridgeImpl.CamState(v1, v0 + 16);
  switch(*(unsigned char *)(v0 + 57))
  {
    case 1:
      uint64_t v2 = *(unsigned __int8 *)(v0 + 56);
      outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 16), v0 + 64);
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4F9FA68];
      uint64_t v4 = 1;
      switch(v2)
      {
        case 1:
          goto LABEL_21;
        case 2:
          uint64_t v3 = (unsigned int *)MEMORY[0x1E4F9FA70];
          goto LABEL_21;
        case 3:
          uint64_t v3 = (unsigned int *)MEMORY[0x1E4F9FA78];
          goto LABEL_21;
        case 4:
          goto LABEL_22;
        default:
          uint64_t v3 = (unsigned int *)MEMORY[0x1E4F9FA80];
LABEL_21:
          (*(void (**)(void, void, void))(*(void *)(v0 + 352) + 104))(*(void *)(v0 + 496), *v3, *(void *)(v0 + 344));
          uint64_t v4 = 0;
LABEL_22:
          uint64_t v11 = *(void *)(v0 + 336);
          (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 352) + 56))(*(void *)(v0 + 496), v4, 1, *(void *)(v0 + 344));
          *(void *)(v0 + 256) = MEMORY[0x1E4FBC860];
          swift_beginAccess();
          uint64_t v12 = *(void *)(v11 + 96);
          uint64_t v13 = *(void *)(v12 + 16);
          if (!v13) {
            goto LABEL_53;
          }
          uint64_t v14 = *(void *)(v0 + 456);
          uint64_t v15 = *(void *)(v0 + 432);
          id v73 = *(void *)(v0 + 304);
          uint64_t v16 = *(void (**)(void, uint64_t, uint64_t))(v14 + 16);
          v14 += 16;
          BOOL v81 = v16;
          uint64_t v75 = (*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64);
          uint64_t v17 = v12 + v75;
          uint64_t v18 = *(void *)(v14 + 56);
          unint64_t v79 = *MEMORY[0x1E4F9FA88];
          int64_t v77 = (void (**)(uint64_t, void, uint64_t))(v14 + 88);
          unint64_t v83 = (void (**)(uint64_t, uint64_t))(v14 - 8);
          uint64_t v72 = *MEMORY[0x1E4FA5168];
          unint64_t v70 = (void (**)(uint64_t, uint64_t))(v15 + 8);
          uint64_t v71 = (void (**)(uint64_t, void, uint64_t))(v15 + 104);
          uint64_t v74 = (void (**)(unint64_t, uint64_t, uint64_t))(v14 + 16);
          swift_bridgeObjectRetain();
          uint64_t v76 = v18;
          break;
      }
      break;
    case 2:
      swift_release();

      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
      uint64_t v6 = Logger.logObject.getter();
      uint64_t v7 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v8 = 0;
        _os_log_impl(&dword_1B9C64000, v6, v7, "CamBridge: Avoiding call to CAM due to previous errors", v8, 2u);
        MEMORY[0x1BA9E48C0](v8, -1, -1);
      }

      goto LABEL_16;
    case 3:
      if (!*(unsigned char *)(v0 + 56)
        && !(*(void *)(v0 + 32) | *(void *)(v0 + 16) | *(void *)(v0 + 40) | *(void *)(v0 + 48) | *(void *)(v0 + 24)))
      {
        goto LABEL_12;
      }
      swift_release();
LABEL_16:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
      return v10(0);
    default:
      swift_release();
LABEL_12:
      return specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD00000000000003CLL, 0x80000001BA063810, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/DecisionEngine/AmbiguityHandling/CamBridge/CamBridgeImpl.swift", 131, 2, 275);
  }
  do
  {
    uint64_t v20 = *(void *)(v0 + 472);
    os_log_type_t v21 = *(void *)(v0 + 448);
    v81(*(void *)(v0 + 480), v17, v21);
    (*v77)(v20, v79, v21);
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type CamFeature and conformance CamFeature, MEMORY[0x1E4F9FA98]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (*(void *)(v0 + 240) == *(void *)(v0 + 224) && *(void *)(v0 + 248) == *(void *)(v0 + 232)) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    uint64_t v24 = *(void *)(v0 + 472);
    uint64_t v25 = *(void *)(v0 + 448);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v26 = *v83;
    (*v83)(v24, v25);
    if (v23)
    {
      if (!v73)
      {
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v34 = type metadata accessor for Logger();
        __swift_project_value_buffer(v34, (uint64_t)static Logger.executor);
        uint64_t v35 = Logger.logObject.getter();
        uint64_t v36 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v35, v36)) {
          goto LABEL_25;
        }
        os_log_type_t v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v37 = 0;
        uint64_t v38 = v35;
        uint64_t v39 = v36;
        char v40 = "CamBridge: Not enabling ASK_REPEAT for this request as speechPackage isn't present";
        goto LABEL_24;
      }
      uint64_t v27 = *(void *)(v0 + 440);
      uint64_t v28 = *(void *)(v0 + 424);
      uint64_t v30 = *(void *)(v0 + 320);
      uint64_t v29 = *(void *)(v0 + 328);
      (*v71)(v27, v72, v28);
      uint64_t v31 = InputOrigin.rawValue.getter();
      uint64_t v33 = v32;
      (*v70)(v27, v28);
      if (v31 == v30 && v33 == v29)
      {
        swift_bridgeObjectRelease();
LABEL_43:
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v42 = type metadata accessor for Logger();
        __swift_project_value_buffer(v42, (uint64_t)static Logger.executor);
        uint64_t v35 = Logger.logObject.getter();
        uint64_t v43 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v35, v43))
        {
LABEL_25:

          uint64_t v19 = v76;
          goto LABEL_26;
        }
        os_log_type_t v37 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v37 = 0;
        uint64_t v38 = v35;
        uint64_t v39 = v43;
        char v40 = "CamBridge: Not enabling ASK_REPEAT for flexible follow-up request";
LABEL_24:
        _os_log_impl(&dword_1B9C64000, v38, v39, v40, v37, 2u);
        MEMORY[0x1BA9E48C0](v37, -1, -1);
        goto LABEL_25;
      }
      uint64_t v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v41) {
        goto LABEL_43;
      }
    }
    v81(*(void *)(v0 + 464), *(void *)(v0 + 480), *(void *)(v0 + 448));
    uint64_t v44 = *(void *)(v0 + 256);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v44 + 16) + 1, 1, v44);
    }
    uint64_t v46 = *(void *)(v44 + 16);
    uint64_t v45 = *(void *)(v44 + 24);
    if (v46 >= v45 >> 1) {
      uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1, v44);
    }
    uint64_t v47 = *(void *)(v0 + 464);
    uint64_t v48 = *(void *)(v0 + 448);
    *(void *)(v44 + 16) = v46 + 1;
    uint64_t v19 = v76;
    (*v74)(v44 + v75 + v46 * v76, v47, v48);
    *(void *)(v0 + 256) = v44;
LABEL_26:
    v26(*(void *)(v0 + 480), *(void *)(v0 + 448));
    v17 += v19;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
LABEL_53:
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  unint64_t v49 = type metadata accessor for Logger();
  *(void *)(v0 + 520) = __swift_project_value_buffer(v49, (uint64_t)static Logger.executor);
  char v50 = Logger.logObject.getter();
  uint64_t v51 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v50, v51))
  {
    int v52 = *(void *)(v0 + 448);
    int64_t v53 = (uint8_t *)swift_slowAlloc();
    int v54 = swift_slowAlloc();
    int v84 = v54;
    *(_DWORD *)int64_t v53 = 136315138;
    swift_beginAccess();
    uint64_t v55 = swift_bridgeObjectRetain();
    uint64_t v56 = MEMORY[0x1BA9E3080](v55, v52);
    uint64_t v58 = v57;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 264) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v58, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v50, v51, "CamBridge: Enabled features for this request: %s", v53, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v54, -1, -1);
    MEMORY[0x1BA9E48C0](v53, -1, -1);
  }

  uint64_t v80 = *(void *)(v0 + 496);
  unint64_t v78 = *(void *)(v0 + 488);
  int64_t v59 = *(void *)(v0 + 384);
  uint64_t v60 = *(void *)(v0 + 368);
  id v61 = *(void **)(v0 + 304);
  uint64_t v62 = *(void *)(v0 + 280);
  uint64_t v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 376) + 16);
  v63(*(void *)(v0 + 392), *(void *)(v0 + 272), v60);
  v63(v59, v62, v60);
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v80, v78, (uint64_t *)&demangling cache variable for type metadata for CamAction?);
  uint64_t v64 = v61;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  CamRequest.init(requestId:camId:rcId:maybeSpeechPackage:rankedActions:camEnabledFeatures:previousCamAction:)();
  id v65 = *(void *)(v0 + 88);
  uint64_t v66 = *(void *)(v0 + 96);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + 64), v65);
  uint64_t v82 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v66 + 8) + **(int **)(v66 + 8));
  uint64_t v67 = (void *)swift_task_alloc();
  *(void *)(v0 + 528) = v67;
  NSObject *v67 = v0;
  v67[1] = CamBridgeImpl.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:);
  os_log_type_t v68 = *(void *)(v0 + 416);
  uint64_t v69 = *(void *)(v0 + 360);
  return v82(v69, v68, v65, v66);
}

uint64_t CamBridgeImpl.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[41] = a8;
  v9[42] = v8;
  v9[39] = a6;
  v9[40] = a7;
  v9[37] = a4;
  v9[38] = a5;
  v9[35] = a2;
  v9[36] = a3;
  v9[34] = a1;
  uint64_t v10 = type metadata accessor for CamAction();
  v9[43] = v10;
  v9[44] = *(void *)(v10 - 8);
  v9[45] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for UUID();
  v9[46] = v11;
  v9[47] = *(void *)(v11 - 8);
  v9[48] = swift_task_alloc();
  v9[49] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for CamRequest();
  v9[50] = v12;
  v9[51] = *(void *)(v12 - 8);
  v9[52] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for InputOrigin();
  v9[53] = v13;
  v9[54] = *(void *)(v13 - 8);
  v9[55] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for CamFeature();
  v9[56] = v14;
  v9[57] = *(void *)(v14 - 8);
  v9[58] = swift_task_alloc();
  v9[59] = swift_task_alloc();
  v9[60] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CamAction?);
  v9[61] = swift_task_alloc();
  v9[62] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  v9[63] = static MessageBusActor.shared;
  swift_retain();
  uint64_t v15 = (void *)swift_task_alloc();
  v9[64] = v15;
  *uint64_t v15 = v9;
  v15[1] = CamBridgeImpl.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:);
  return CamBridgeImpl.waitForCamWarmup()();
}

uint64_t outlined init with copy of CamBridgeImpl.CamState(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for CamBridgeImpl.CamState(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *((unsigned __int8 *)a2 + 41);
  if (v4 >= 3) {
    unsigned int v4 = *(_DWORD *)a2 + 3;
  }
  if (v4 == 2)
  {
    uint64_t v5 = *a2;
    id v6 = (id)*a2;
    *(void *)a1 = v5;
    *(unsigned char *)(a1 + 41) = 2;
  }
  else if (v4 == 1)
  {
    long long v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    *(unsigned char *)(a1 + 41) = 1;
  }
  else if (v4)
  {
    long long v8 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(_OWORD *)(a1 + 26) = *(_OWORD *)((char *)a2 + 26);
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 41) = 0;
    swift_retain();
  }
  return a1;
}

uint64_t outlined destroy of CamBridgeImpl.CamState(uint64_t a1)
{
  return a1;
}

void destroy for CamBridgeImpl.CamState(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 41);
  if (v1 >= 3) {
    unsigned int v1 = *(_DWORD *)a1 + 3;
  }
  switch(v1)
  {
    case 2u:

      break;
    case 1u:
      __swift_destroy_boxed_opaque_existential_1Tm(a1);
      break;
    case 0u:
      swift_release();
      break;
  }
}

uint64_t protocol witness for CamActionProviding.getCamAction(request:) in conformance RealCamWrapper(uint64_t a1, uint64_t a2)
{
  v3[2] = a1;
  v3[3] = a2;
  uint64_t v4 = type metadata accessor for CamResponse();
  v3[4] = v4;
  v3[5] = *(void *)(v4 - 8);
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = *v2;
  v3[6] = v5;
  v3[7] = v6;
  return MEMORY[0x1F4188298](protocol witness for CamActionProviding.getCamAction(request:) in conformance RealCamWrapper, 0, 0);
}

uint64_t protocol witness for CamActionProviding.getCamAction(request:) in conformance RealCamWrapper()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  __swift_project_boxed_opaque_existential_1((void *)(v0[7] + 16), *(void *)(v0[7] + 40));
  dispatch thunk of Cam.action(request:)();
  CamResponse.camAction.getter();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

Swift::Void __swiftcall CamBridgeState.registerCamAction(rcId:camAction:)(Swift::String rcId, SiriKitRuntime::ConversationAction camAction)
{
  uint64_t v3 = v2;
  unint64_t object = rcId._object;
  uint64_t countAndFlagsBits = rcId._countAndFlagsBits;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    v16[0] = v11;
    *(_DWORD *)uint64_t v10 = 136315394;
    uint64_t v12 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v8, v9, "CamBridge: Registering CAM action %s for rcId: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v11, -1, -1);
    MEMORY[0x1BA9E48C0](v10, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v15 = *(void *)(v3 + 16);
  *(void *)(v3 + 16) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(camAction, countAndFlagsBits, (uint64_t)object, isUniquelyReferenced_nonNull_native);
  *(void *)(v3 + 16) = v15;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
}

uint64_t outlined init with take of CamOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CamOutput();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of CamOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CamOutput();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void *initializeWithCopy for AmbiguityOutput(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for Input();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t destroy for AmbiguityOutput(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for Input();
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v3(a1, v2);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AmbiguityOutput(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Input();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of CamOutput(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined destroy of CamOutput(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CamOutput();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t AmbiguityService.getAmbiguityServiceResponse(camOutput:topPluginAction:conversationUserInput:)()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 192);
  uint64_t v2 = *(void *)(*(void *)v0 + 96);
  swift_task_dealloc();
  outlined destroy of ReferenceResolutionClientProtocol?(v2, &demangling cache variable for type metadata for Input?);
  return MEMORY[0x1F4188298](AmbiguityService.getAmbiguityServiceResponse(camOutput:topPluginAction:conversationUserInput:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = *(void *)(*(void *)v0 + 192);
  uint64_t v2 = *(void *)(*(void *)v0 + 96);
  swift_task_dealloc();
  outlined destroy of ReferenceResolutionClientProtocol?(v2, &demangling cache variable for type metadata for Input?);
  return MEMORY[0x1F4188298](AmbiguityService.getAmbiguityServiceResponse(camOutput:topPluginAction:conversationUserInput:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  NSObject *v18;
  os_log_type_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t (*v40)();
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  void *v49;
  uint64_t v50;

  unint64_t v49 = v0;
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[15];
  int v5 = v0[8];
  PluginAction.input.getter();
  Input.parse.getter();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v6(v1, v2);
  outlined init with copy of CamOutput(v5, v4);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v47 = v6;
    uint64_t v7 = v0[19];
    uint64_t v8 = v0[16];
    os_log_type_t v9 = v0[17];
    uint64_t v10 = v0[15];
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
    v0[27] = v11;
    v0[28] = (v9 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v11(v7, v10, v8);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v12 = v0[18];
    unint64_t v13 = v0[19];
    uint64_t v14 = v0[16];
    uint64_t v15 = v0[17];
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.executor);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
    v17(v12, v13, v14);
    uint64_t v18 = Logger.logObject.getter();
    uint64_t v19 = static os_log_type_t.debug.getter();
    uint64_t v20 = os_log_type_enabled(v18, v19);
    os_log_type_t v21 = v0[18];
    uint64_t v22 = v0[16];
    if (v20)
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      uint64_t v48 = v46;
      *(_DWORD *)uint64_t v23 = 136315138;
      lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier(&lazy protocol witness table cache variable for type Input and conformance Input, MEMORY[0x1E4FA1EE0]);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v47(v21, v22);
      _os_log_impl(&dword_1B9C64000, v18, v19, "[AmbiguityService] Returning a Direct Invocation for CAM flow: %s", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v46, -1, -1);
      MEMORY[0x1BA9E48C0](v23, -1, -1);
    }
    else
    {
      v47(v0[18], v0[16]);
    }

    uint64_t v36 = v0[16];
    os_log_type_t v37 = v0[17];
    uint64_t v38 = v0[12];
    v17(v38, v0[19], v36);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v38, 0, 1, v36);
    uint64_t v39 = (void *)swift_task_alloc();
    v0[29] = v39;
    *uint64_t v39 = v0;
    char v40 = AmbiguityService.getAmbiguityServiceResponse(camOutput:topPluginAction:conversationUserInput:);
  }
  else
  {
    v0[25] = *(void *)v0[15];
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    uint64_t v27 = Logger.logObject.getter();
    uint64_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v48 = v30;
      *(_DWORD *)uint64_t v29 = 136315138;
      uint64_t v31 = type metadata accessor for PluginAction();
      uint64_t v32 = swift_bridgeObjectRetain();
      uint64_t v33 = MEMORY[0x1BA9E3080](v32, v31);
      uint64_t v35 = v34;
      swift_bridgeObjectRelease();
      v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v27, v28, "[AmbiguityService] Returning set of actions to execute: %s", v29, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v30, -1, -1);
      MEMORY[0x1BA9E48C0](v29, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    (*(void (**)(void, uint64_t, uint64_t, void))(v0[17] + 56))(v0[12], 1, 1, v0[16]);
    uint64_t v39 = (void *)swift_task_alloc();
    v0[26] = v39;
    *uint64_t v39 = v0;
    char v40 = AmbiguityService.getAmbiguityServiceResponse(camOutput:topPluginAction:conversationUserInput:);
  }
  v39[1] = v40;
  uint64_t v42 = v0[12];
  uint64_t v41 = v0[13];
  uint64_t v43 = v0[9];
  uint64_t v44 = v0[10];
  return CorrectionsService.getCorrectionsAction(pluginAction:conversationUserInput:followup:)(v41, v43, v44, v42);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[27];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[7];
  swift_release();
  int v5 = type metadata accessor for AmbiguityServiceResponse(0);
  uint64_t v6 = v4 + *(int *)(v5 + 20);
  v1(v6, v2, v3);
  uint64_t v7 = type metadata accessor for AmbiguityOutput(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 0, 1, v7);
  uint64_t v8 = v0[13];
  os_log_type_t v9 = v0[7];
  (*(void (**)(uint64_t, void, void))(v0[22] + 32))(v9 + *(int *)(v5 + 24), v0[23], v0[21]);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v8, v9, &demangling cache variable for type metadata for Input?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = v0[25];
  uint64_t v2 = v0[7];
  swift_release();
  uint64_t v3 = type metadata accessor for AmbiguityServiceResponse(0);
  uint64_t v4 = (void *)(v2 + *(int *)(v3 + 20));
  *uint64_t v4 = v1;
  int v5 = type metadata accessor for AmbiguityOutput(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 0, 1, v5);
  uint64_t v6 = v0[13];
  uint64_t v7 = v0[7];
  (*(void (**)(uint64_t, void, void))(v0[22] + 32))(v7 + *(int *)(v3 + 24), v0[23], v0[21]);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v6, v7, &demangling cache variable for type metadata for Input?);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t AmbiguityService.getAmbiguityServiceResponse(camOutput:topPluginAction:conversationUserInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[10] = a4;
  v5[11] = v4;
  v5[8] = a2;
  v5[9] = a3;
  v5[7] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v5[12] = swift_task_alloc();
  v5[13] = swift_task_alloc();
  v5[14] = type metadata accessor for CamOutput();
  v5[15] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Input();
  v5[16] = v6;
  v5[17] = *(void *)(v6 - 8);
  v5[18] = swift_task_alloc();
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Parse();
  v5[21] = v7;
  v5[22] = *(void *)(v7 - 8);
  v5[23] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v8 = static MessageBusActor.shared;
  v5[24] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](AmbiguityService.getAmbiguityServiceResponse(camOutput:topPluginAction:conversationUserInput:), v8, 0);
}

uint64_t CorrectionsService.getCorrectionsAction(pluginAction:conversationUserInput:followup:)()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 264);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](CorrectionsService.getCorrectionsAction(pluginAction:conversationUserInput:followup:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t (*v18)(void);
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 272) = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "[CorrectionsService] Checking for corrections with a possible followup", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }
  int v5 = *(void *)(v0 + 232);
  uint64_t v6 = *(void *)(v0 + 120);

  PluginAction.input.getter();
  CorrectionsService.getUndoAction(_:conversationUserInput:)(v6, v5);
  *(void *)(v0 + 280) = 0;
  uint64_t v7 = *(void *)(v0 + 240);
  uint64_t v8 = *(void *)(v0 + 248);
  uint64_t v10 = *(void *)(v0 + 224);
  os_log_type_t v9 = *(void *)(v0 + 232);
  uint64_t v11 = *(void *)(v0 + 200);
  uint64_t v12 = *(void *)(v0 + 208);
  unint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  *(void *)(v0 + 288) = v13;
  *(void *)(v0 + 296) = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v13(v10, v11);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v9, 1, v7) == 1)
  {
    uint64_t v14 = *(void *)(v0 + 232);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v14, &demangling cache variable for type metadata for UndoAction?);
LABEL_7:
    uint64_t v15 = *(void *)(v0 + 208);
    goto LABEL_8;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 248) + 32))(*(void *)(v0 + 256), *(void *)(v0 + 232), *(void *)(v0 + 240));
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl(&dword_1B9C64000, v20, v21, "[CorrectionsService] Detected user requested undo", v22, 2u);
    MEMORY[0x1BA9E48C0](v22, -1, -1);
  }

  if (UndoAction.isExclusive.getter())
  {
    swift_release();
    uint64_t v23 = Logger.logObject.getter();
    uint64_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_1B9C64000, v23, v24, "[CorrectionsService] Undo is exclusive", v25, 2u);
      MEMORY[0x1BA9E48C0](v25, -1, -1);
    }
    uint64_t v27 = *(void *)(v0 + 248);
    uint64_t v26 = *(void *)(v0 + 256);
    int64_t v59 = *(void *)(v0 + 240);
    uint64_t v29 = *(void *)(v0 + 200);
    uint64_t v28 = *(void *)(v0 + 208);
    uint64_t v30 = *(void *)(v0 + 192);
    uint64_t v31 = *(void *)(v0 + 104);

    uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56);
    v32(v30, 1, 1, v29);
    CorrectionsService.generateNewInput(from:originalInput:)(v26, v30, v31);
    outlined destroy of ReferenceResolutionClientProtocol?(v30, &demangling cache variable for type metadata for Input?);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v59);
    uint64_t v16 = v32;
    uint64_t v17 = 0;
    goto LABEL_9;
  }
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v33 = static SydneyConversationFeatureFlags.forceEnabled;
  if (*(void *)(static SydneyConversationFeatureFlags.forceEnabled + 16)
    && (uint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(2), (v35 & 1) != 0))
  {
    if (*(unsigned char *)(*(void *)(v33 + 56) + v34) != 1)
    {
LABEL_23:
      (*(void (**)(void, void))(*(void *)(v0 + 248) + 8))(*(void *)(v0 + 256), *(void *)(v0 + 240));
      swift_release();
      goto LABEL_7;
    }
  }
  else
  {
    *(void *)(v0 + 40) = &type metadata for SydneyConversationFeatureFlags;
    *(void *)(v0 + 48) = lazy protocol witness table accessor for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags();
    *(unsigned char *)(v0 + 16) = 2;
    uint64_t v36 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
    if ((v36 & 1) == 0) {
      goto LABEL_23;
    }
  }
  os_log_type_t v37 = *(void *)(v0 + 200);
  uint64_t v38 = *(void *)(v0 + 208);
  uint64_t v39 = *(void *)(v0 + 184);
  outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 128), v39, &demangling cache variable for type metadata for Input?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v39, 1, v37) == 1)
  {
    char v40 = *(void *)(v0 + 176);
    uint64_t v41 = *(void *)(v0 + 184);
    uint64_t v42 = *(void *)(v0 + 152);
    uint64_t v43 = *(void *)(v0 + 160);
    uint64_t v44 = *(void *)(v0 + 112);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v41, &demangling cache variable for type metadata for Input?);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v40, v44, v42);
    uint64_t v45 = *(void **)(v0 + 280);
    CorrectionsService.generateNewInputWithFollowupFrom(undoAction:pluginAction:)(*(void *)(v0 + 256), *(void *)(v0 + 176), *(void *)(v0 + 104));
    uint64_t v46 = v45;
    uint64_t v48 = *(void *)(v0 + 248);
    uint64_t v47 = *(void *)(v0 + 256);
    unint64_t v49 = *(void *)(v0 + 240);
    uint64_t v15 = *(void *)(v0 + 208);
    char v50 = *(void *)(v0 + 176);
    uint64_t v51 = *(void *)(v0 + 152);
    int v52 = *(void *)(v0 + 160);
    if (!v46)
    {
      (*(void (**)(void, void))(v52 + 8))(*(void *)(v0 + 176), *(void *)(v0 + 152));
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
      uint64_t v17 = 0;
      uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
      goto LABEL_9;
    }

    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
LABEL_8:
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
    uint64_t v17 = 1;
LABEL_9:
    v16(*(void *)(v0 + 104), v17, 1, *(void *)(v0 + 200));
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 208) + 32))(*(void *)(v0 + 216), *(void *)(v0 + 184), *(void *)(v0 + 200));
  int64_t v53 = Logger.logObject.getter();
  int v54 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v55 = 0;
    _os_log_impl(&dword_1B9C64000, v53, v54, "[CorrectionsService] Undo is not exclusive", v55, 2u);
    MEMORY[0x1BA9E48C0](v55, -1, -1);
  }

  uint64_t v56 = (void *)swift_task_alloc();
  *(void *)(v0 + 304) = v56;
  *uint64_t v56 = v0;
  v56[1] = CorrectionsService.getCorrectionsAction(pluginAction:conversationUserInput:followup:);
  os_log_type_t v57 = *(void *)(v0 + 216);
  uint64_t v58 = *(void *)(v0 + 144);
  return CorrectionsService.findFollowUpPluginAction(for:)(v58, v57);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t v31;

  uint64_t v1 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[18];
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0[18], &demangling cache variable for type metadata for PluginAction?);
    uint64_t v4 = Logger.logObject.getter();
    int v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_1B9C64000, v4, v5, "[CorrectionsService] No followup plugin action found, returning nil", v6, 2u);
      MEMORY[0x1BA9E48C0](v6, -1, -1);
    }
    uint64_t v7 = (void (*)(uint64_t, uint64_t))v0[36];
    os_log_type_t v9 = v0[31];
    uint64_t v8 = v0[32];
    uint64_t v10 = v0[30];
    uint64_t v12 = v0[26];
    uint64_t v11 = v0[27];
    unint64_t v13 = v0[25];

    v7(v11, v13);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    goto LABEL_7;
  }
  uint64_t v14 = v0[21];
  uint64_t v15 = v0[22];
  uint64_t v16 = v0[19];
  uint64_t v17 = v0[20];
  uint64_t v18 = v0[18];
  ((void (*)(void, void))v0[36])(v0[27], v0[25]);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);
  v19(v14, v18, v16);
  v19(v15, v14, v16);
  uint64_t v20 = (void *)v0[35];
  CorrectionsService.generateNewInputWithFollowupFrom(undoAction:pluginAction:)(v0[32], v0[22], v0[13]);
  os_log_type_t v21 = v20;
  uint64_t v23 = v0[31];
  uint64_t v22 = v0[32];
  uint64_t v24 = v0[30];
  uint64_t v12 = v0[26];
  uint64_t v25 = v0[22];
  uint64_t v26 = v0[19];
  uint64_t v27 = v0[20];
  if (v21)
  {

    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v25, v26);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
LABEL_7:
    uint64_t v28 = 1;
    goto LABEL_9;
  }
  (*(void (**)(void, void))(v27 + 8))(v0[22], v0[19]);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  uint64_t v28 = 0;
LABEL_9:
  (*(void (**)(void, uint64_t, uint64_t, void))(v12 + 56))(v0[13], v28, 1, v0[25]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = (uint64_t (*)(void))v0[1];
  return v29();
}

uint64_t CorrectionsService.getCorrectionsAction(pluginAction:conversationUserInput:followup:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[16] = a4;
  v5[17] = v4;
  v5[14] = a2;
  v5[15] = a3;
  v5[13] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAction?);
  v5[18] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for PluginAction();
  v5[19] = v6;
  v5[20] = *(void *)(v6 - 8);
  v5[21] = swift_task_alloc();
  v5[22] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v5[23] = swift_task_alloc();
  v5[24] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Input();
  v5[25] = v7;
  v5[26] = *(void *)(v7 - 8);
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UndoAction?);
  v5[29] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UndoAction();
  v5[30] = v8;
  v5[31] = *(void *)(v8 - 8);
  v5[32] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v9 = static MessageBusActor.shared;
  v5[33] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](CorrectionsService.getCorrectionsAction(pluginAction:conversationUserInput:followup:), v9, 0);
}

uint64_t type metadata accessor for AmbiguityOutput(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for AmbiguityOutput);
}

uint64_t outlined init with take of Input?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for AmbiguityServiceResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B9D889A0);
}

uint64_t getEnumTagSinglePayload for AmbiguityServiceResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B9D8884C);
}

uint64_t ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:)()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;

  uint64_t v1 = v0[28];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[21];
  outlined init with copy of ReferenceResolutionClientProtocol?(v0[29], v1, &demangling cache variable for type metadata for RemoteConversationOrReformedInput?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    int v5 = v0[28];
    uint64_t v4 = v0[29];
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v4, &demangling cache variable for type metadata for RemoteConversationOrReformedInput?);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
    outlined destroy of ReferenceResolutionClientProtocol?(v5, &demangling cache variable for type metadata for RemoteConversationOrReformedInput?);
    uint64_t v6 = 0;
LABEL_8:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(uint64_t))v0[1];
    return v16(v6);
  }
  uint64_t v8 = v0[22];
  uint64_t v7 = v0[23];
  outlined init with take of RemoteConversationOrReformedInput(v0[28], v7, type metadata accessor for RemoteConversationOrReformedInput);
  outlined init with copy of RemoteConversationOrReformedInput(v7, v8, type metadata accessor for RemoteConversationOrReformedInput);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    unint64_t v13 = v0[29];
    uint64_t v15 = (uint64_t *)v0[22];
    uint64_t v14 = v0[23];
    swift_release();
    outlined destroy of RemoteConversationOrReformedInput(v14, type metadata accessor for RemoteConversationOrReformedInput);
    outlined destroy of ReferenceResolutionClientProtocol?(v13, &demangling cache variable for type metadata for RemoteConversationOrReformedInput?);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
    uint64_t v6 = *v15;
    goto LABEL_8;
  }
  (*(void (**)(void, void, void))(v0[25] + 32))(v0[26], v0[22], v0[24]);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[45] = v9;
  *uint64_t v9 = v0;
  v9[1] = ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:);
  uint64_t v10 = v0[26];
  uint64_t v11 = v0[18];
  return ConversationHelper.loadNewConversation(input:conversationHelperInput:priorReformationCount:isFallback:)(v10, v11, 1, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  BOOL v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v22 = v0;
  if (*(void *)(v0 + 80))
  {
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 56), v0 + 16);
    PluginAction.input.getter();
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v1;
    *uint64_t v1 = v0;
    v1[1] = ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:);
    uint64_t v2 = *(void *)(v0 + 232);
    uint64_t v3 = *(void *)(v0 + 216);
    uint64_t v4 = *(void *)(v0 + 144);
    return ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:)(v2, v0 + 16, v3, v4);
  }
  else
  {
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 288);
    uint64_t v7 = *(void *)(v0 + 256);
    uint64_t v8 = *(void *)(v0 + 240);
    uint64_t v9 = *(void *)(v0 + 136);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for ConversationHandler?);
    v6(v7, v9, v8);
    uint64_t v10 = Logger.logObject.getter();
    uint64_t v11 = static os_log_type_t.error.getter();
    uint64_t v12 = os_log_type_enabled(v10, v11);
    unint64_t v13 = *(void *)(v0 + 256);
    if (v12)
    {
      uint64_t v19 = *(void *)(v0 + 240);
      uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v0 + 304);
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      os_log_type_t v21 = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      uint64_t v16 = PluginAction.flowHandlerId.getter();
      *(void *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v20(v13, v19);
      _os_log_impl(&dword_1B9C64000, v10, v11, "[AmbiguityService] Cannot load a RemoteConversationClient for %s: handler not found", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v15, -1, -1);
      MEMORY[0x1BA9E48C0](v14, -1, -1);
    }
    else
    {
      (*(void (**)(void, void))(v0 + 304))(*(void *)(v0 + 256), *(void *)(v0 + 240));
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18(0);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 272);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:), v1, 0);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;

  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[43];
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[26];
  int v5 = v0[23];
  uint64_t v4 = v0[24];
  swift_release();
  v1(v3, v4);
  outlined destroy of RemoteConversationOrReformedInput(v5, type metadata accessor for RemoteConversationOrReformedInput);
  outlined destroy of ReferenceResolutionClientProtocol?(v2, &demangling cache variable for type metadata for RemoteConversationOrReformedInput?);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  uint64_t v6 = v0[46];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(uint64_t))v0[1];
  return v7(v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  uint64_t v24 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[33];
  uint64_t v3 = v0[30];
  uint64_t v4 = v0[31];
  int v5 = type metadata accessor for Logger();
  v0[35] = __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[36] = v6;
  v0[37] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v1, v3);
  uint64_t v7 = Logger.logObject.getter();
  uint64_t v8 = static os_log_type_t.debug.getter();
  uint64_t v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[33];
  uint64_t v11 = v0[30];
  uint64_t v12 = v0[31];
  if (v9)
  {
    unint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v23 = v22;
    *(_DWORD *)unint64_t v13 = 136315138;
    lazy protocol witness table accessor for type PluginAction and conformance PluginAction((unint64_t *)&lazy protocol witness table cache variable for type PluginAction and conformance PluginAction, MEMORY[0x1E4FA1B58]);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[16] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
    _os_log_impl(&dword_1B9C64000, v7, v8, "[DecisionEngine] Finding conversation for plugin action: %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v22, -1, -1);
    MEMORY[0x1BA9E48C0](v13, -1, -1);
  }
  else
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
  }

  v0[38] = v16;
  uint64_t v17 = PluginAction.flowHandlerId.getter();
  uint64_t v19 = v18;
  v0[39] = v18;
  uint64_t v20 = (void *)swift_task_alloc();
  v0[40] = v20;
  *uint64_t v20 = v0;
  v20[1] = ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:);
  return ConversationHandlerLocator.handler(id:)((uint64_t)(v0 + 7), v17, v19);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v10;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 216);
  uint64_t v4 = *(void *)(*(void *)v1 + 200);
  int v5 = *(void *)(*(void *)v1 + 192);
  v2[42] = v0;
  swift_task_dealloc();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v2[43] = v6;
  v2[44] = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v3, v5);
  uint64_t v7 = v2[34];
  if (v0) {
    uint64_t v8 = ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:);
  }
  else {
    uint64_t v8 = ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:);
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

uint64_t ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 272);
  *(void *)(*(void *)v1 + 368) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:), v2, 0);
}

uint64_t ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:)(uint64_t a1, uint64_t a2)
{
  v3[18] = a2;
  v3[19] = v2;
  v3[17] = a1;
  uint64_t v4 = type metadata accessor for RemoteConversationOrReformedInput(0);
  v3[20] = v4;
  v3[21] = *(void *)(v4 - 8);
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Input();
  v3[24] = v5;
  v3[25] = *(void *)(v5 - 8);
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteConversationOrReformedInput?);
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for PluginAction();
  v3[30] = v6;
  v3[31] = *(void *)(v6 - 8);
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v7 = static MessageBusActor.shared;
  v3[34] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](ConversationHelper.loadNewConversation(pluginAction:conversationHelperInput:), v7, 0);
}

uint64_t type metadata accessor for RemoteConversationOrReformedInput(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for RemoteConversationOrReformedInput);
}

uint64_t lazy protocol witness table accessor for type PluginAction and conformance PluginAction(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ConversationHandlerLocator.handler(id:)()
{
  uint64_t v2 = v0[21];
  uint64_t v1 = v0[22];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3, v4);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = (uint64_t *)v0[20];
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
    v7[3] = type metadata accessor for RemoteFlowPluginBundleConversationHandler();
    v7[4] = lazy protocol witness table accessor for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler(&lazy protocol witness table cache variable for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler, (void (*)(uint64_t))type metadata accessor for RemoteFlowPluginBundleConversationHandler);
    uint64_t *v7 = v6;
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
  else
  {
    uint64_t v10 = v0[23];
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
    uint64_t v11 = *(void *)(v10 + 40);
    uint64_t v12 = *(void *)(v10 + 48);
    unint64_t v13 = (void *)swift_task_alloc();
    v0[26] = v13;
    *unint64_t v13 = v0;
    v13[1] = ConversationHandlerLocator.handler(id:);
    uint64_t v15 = v0[21];
    uint64_t v14 = v0[22];
    return FlowExtensionDiscoverer.findFlowExtension(bundleId:onConnectionInterrupted:)(v15, v14, v11, v12);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *(void *)(*(void *)(v0 + 184) + 16);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PluginLookupByIntentTopic);
  *uint64_t v2 = v0;
  v2[1] = ConversationHandlerLocator.handler(id:);
  return MEMORY[0x1F4187DC0](v0 + 16, v1, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(void *)(v0 + 160);
  if (*(void *)(v0 + 120))
  {
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 96), v0 + 56);
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 56), v1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 96, &demangling cache variable for type metadata for ConversationHandler?);
    *(_OWORD *)uint64_t v1 = 0u;
    *(_OWORD *)(v1 + 16) = 0u;
    *(void *)(v1 + 32) = 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 192);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](ConversationHandlerLocator.handler(id:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = v0[27];
  if (v1)
  {
    uint64_t v3 = *(void *)(v1 + 112);
    uint64_t v2 = *(void *)(v1 + 120);
    v0[15] = &type metadata for FlowExtensionConversationHandler;
    v0[16] = lazy protocol witness table accessor for type FlowExtensionConversationHandler and conformance FlowExtensionConversationHandler();
    v0[12] = v1;
    v0[13] = v3;
    v0[14] = v2;
    swift_bridgeObjectRetain();
  }
  else
  {
    v0[16] = 0;
    *((_OWORD *)v0 + 6) = 0u;
    *((_OWORD *)v0 + 7) = 0u;
  }
  uint64_t v4 = v0[24];
  return MEMORY[0x1F4188298](ConversationHandlerLocator.handler(id:), v4, 0);
}

uint64_t ConversationHandlerLocator.handler(id:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[22] = a3;
  v4[23] = v3;
  v4[20] = a1;
  v4[21] = a2;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = static MessageBusActor.shared;
  v4[24] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](ConversationHandlerLocator.handler(id:), v5, 0);
}

void *protocol witness for PluginPackage.loadPlugin() in conformance RemoteFlowPluginPackage()
{
  uint64_t v0 = RemoteFlowPluginPackage.loadRemoteConversationHandler()();
  lazy protocol witness table accessor for type RemoteFlowPluginPackage and conformance RemoteFlowPluginPackage(&lazy protocol witness table cache variable for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler, 255, (void (*)(uint64_t))type metadata accessor for RemoteFlowPluginBundleConversationHandler);
  return v0;
}

void *RemoteFlowPluginPackage.loadRemoteConversationHandler()()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/RemoteFlowPluginPackage.swift", 44, 2, (uint64_t)"loadRemoteConversationHandler()", 31, 2, v2);
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v6 = v0[6];
  uint64_t v5 = v0[7];
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v0 + 8), (uint64_t)v10);
  uint64_t v7 = v0[4];
  type metadata accessor for RemoteFlowPluginBundleConversationHandler();
  uint64_t v8 = (void *)swift_allocObject();
  v8[12] = 0;
  v8[13] = 0;
  uint64_t v8[2] = v4;
  v8[3] = v3;
  v8[4] = v6;
  v8[5] = v5;
  outlined init with take of ReferenceResolutionClientProtocol(v10, (uint64_t)(v8 + 7));
  v8[6] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return v8;
}

uint64_t lazy protocol witness table accessor for type RemoteFlowPluginPackage and conformance RemoteFlowPluginPackage(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:)()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 360) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 280);
    uint64_t v4 = ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 280);
    swift_bridgeObjectRelease();
    uint64_t v4 = ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:);
    uint64_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(void);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;

  uint64_t v60 = v0;
  uint64_t v1 = (uint64_t *)v0[30];
  uint64_t v2 = *v1;
  v0[46] = *v1;
  if (v2)
  {
    uint64_t v3 = v0[31];
    uint64_t v4 = v0[32];
    uint64_t v5 = v0[17];
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v1 + *(int *)(v0[29] + 28), v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, v3) == 1)
    {
      uint64_t v6 = v0[17];
      swift_retain_n();
      outlined destroy of ReferenceResolutionClientProtocol?(v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v7 = Logger.logObject.getter();
      uint64_t v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl(&dword_1B9C64000, v7, v8, "Warning: Call to canHandle() did not return an input identifier, sending the input again. This will involve loading the flow twice.", v9, 2u);
        MEMORY[0x1BA9E48C0](v9, -1, -1);
      }
      uint64_t v10 = (uint64_t *)v0[15];

      uint64_t v11 = *v10;
      uint64_t v12 = (void *)swift_task_alloc();
      v0[49] = v12;
      *uint64_t v12 = v0;
      v12[1] = ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:);
      unint64_t v13 = v0[20];
      uint64_t v14 = v0[14];
      return RemoteConversationClient.accept(input:speechData:)(v13, v14, v11);
    }
    else
    {
      char v40 = (uint64_t *)v0[15];
      (*(void (**)(void, void, void))(v0[32] + 32))(v0[33], v0[17], v0[31]);
      uint64_t v41 = *v40;
      swift_retain_n();
      uint64_t v42 = (void *)swift_task_alloc();
      v0[47] = v42;
      *uint64_t v42 = v0;
      v42[1] = ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:);
      uint64_t v43 = v0[33];
      uint64_t v44 = v0[21];
      return RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:)(v44, v43, v41);
    }
  }
  else
  {
    uint64_t v16 = v0[29];
    uint64_t v17 = v0[24];
    uint64_t v18 = v0[25];
    uint64_t v19 = v0[23];
    swift_release();
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v1 + *(int *)(v16 + 24), v19, &demangling cache variable for type metadata for Input?);
    uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v19, 1, v17);
    os_log_type_t v21 = v0[24];
    uint64_t v22 = v0[25];
    if (v20 == 1)
    {
      uint64_t v23 = v0[27];
      uint64_t v25 = v0[13];
      uint64_t v24 = v0[14];
      outlined destroy of ReferenceResolutionClientProtocol?(v0[23], &demangling cache variable for type metadata for Input?);
      outlined init with copy of ReferenceResolutionClientProtocol(v25, (uint64_t)(v0 + 2));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v23, v24, v21);
      uint64_t v26 = Logger.logObject.getter();
      uint64_t v27 = static os_log_type_t.error.getter();
      uint64_t v28 = os_log_type_enabled(v26, v27);
      uint64_t v29 = v0[30];
      uint64_t v30 = v0[27];
      uint64_t v32 = v0[24];
      uint64_t v31 = v0[25];
      if (v28)
      {
        uint64_t v33 = swift_slowAlloc();
        uint64_t v58 = swift_slowAlloc();
        int64_t v59 = v58;
        *(_DWORD *)uint64_t v33 = 136315394;
        os_log_type_t v57 = v30;
        uint64_t v35 = v0[5];
        uint64_t v34 = v0[6];
        __swift_project_boxed_opaque_existential_1(v0 + 2, v35);
        uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 16))(v35, v34);
        v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
        *(_WORD *)(v33 + 12) = 2080;
        lazy protocol witness table accessor for type PluginAction and conformance PluginAction(&lazy protocol witness table cache variable for type Input and conformance Input, MEMORY[0x1E4FA1EE0]);
        uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v57, v32);
        _os_log_impl(&dword_1B9C64000, v26, v27, "[ConversationHelper] Conversation handler %s did not find a flow for input %s, returning nil", (uint8_t *)v33, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v58, -1, -1);
        MEMORY[0x1BA9E48C0](v33, -1, -1);
      }
      else
      {

        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
      }
      outlined destroy of RemoteConversationOrReformedInput(v29, (uint64_t (*)(void))type metadata accessor for ConversationSearchResult);
      int v54 = v0[12];
      uint64_t v55 = type metadata accessor for RemoteConversationOrReformedInput(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v54, 1, 1, v55);
    }
    else
    {
      uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32);
      v45(v0[28], v0[23], v0[24]);
      uint64_t v46 = Logger.logObject.getter();
      uint64_t v47 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v48 = 0;
        _os_log_impl(&dword_1B9C64000, v46, v47, "[ConversationHelper] Conversation wants to reform input, will consider intent reformation in hypothesis list", v48, 2u);
        MEMORY[0x1BA9E48C0](v48, -1, -1);
      }
      unint64_t v49 = v0[30];
      char v50 = v0[28];
      uint64_t v51 = v0[24];
      int v52 = v0[12];

      outlined destroy of RemoteConversationOrReformedInput(v49, (uint64_t (*)(void))type metadata accessor for ConversationSearchResult);
      v45(v52, v50, v51);
      int64_t v53 = type metadata accessor for RemoteConversationOrReformedInput(0);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v52, 0, 1, v53);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v56 = (uint64_t (*)(void))v0[1];
    return v56();
  }
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[41];
  uint64_t v2 = v0[33];
  uint64_t v4 = v0[30];
  uint64_t v3 = v0[31];
  swift_release();
  swift_release();
  v1(v2, v3);
  outlined destroy of RemoteConversationOrReformedInput(v4, (uint64_t (*)(void))type metadata accessor for ConversationSearchResult);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 240);
  swift_release();
  swift_release();
  outlined destroy of RemoteConversationOrReformedInput(v1, (uint64_t (*)(void))type metadata accessor for ConversationSearchResult);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t (*v16)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;

  uint64_t v1 = (void *)v0[15];
  uint64_t v2 = (void *)v0[13];
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  uint64_t v5 = type metadata accessor for ConversationHelperInput(0);
  uint64_t v6 = (char *)v1 + *(int *)(v5 + 20);
  uint64_t v7 = (uint64_t *)(*v1 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  v0[38] = v9;
  swift_bridgeObjectRetain();
  Input.identifier.getter();
  uint64_t v10 = (void *)((char *)v1 + *(int *)(v5 + 24));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v16 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 32) + **(int **)(v4 + 32));
  unint64_t v13 = (void *)swift_task_alloc();
  v0[39] = v13;
  *unint64_t v13 = v0;
  v13[1] = ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:);
  uint64_t v14 = v0[34];
  return v16(v6, v8, v9, v14, v11, v12, v3, v4);
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  void (*v7)(void *, uint64_t, uint64_t);
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void (*v17)(void *, void, uint64_t, uint64_t);
  void *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t (*v29)(void);
  uint64_t v31;

  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[41];
  uint64_t v2 = v0[33];
  uint64_t v3 = v0[31];
  swift_release();
  v1(v2, v3);
  uint64_t v4 = v0[22];
  uint64_t v5 = v0[19];
  outlined init with take of RemoteConversationOrReformedInput(v0[21], v4, (uint64_t (*)(void))type metadata accessor for UserInputResult);
  outlined init with copy of RemoteConversationOrReformedInput(v4, v5, (uint64_t (*)(void))type metadata accessor for UserInputResult);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = *(void (**)(void *, uint64_t, uint64_t))(v0[25] + 32);
      v7((void *)v0[26], v0[19], v0[24]);
      uint64_t v8 = Logger.logObject.getter();
      uint64_t v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl(&dword_1B9C64000, v8, v9, "[ConversationHelper] Conversation wants to reform input after it had just accepted it?", v10, 2u);
        MEMORY[0x1BA9E48C0](v10, -1, -1);
      }
      uint64_t v11 = v0[30];
      uint64_t v12 = v0[26];
      unint64_t v13 = v0[24];
      uint64_t v14 = v0[22];
      uint64_t v15 = (void *)v0[12];

      swift_release();
      outlined destroy of RemoteConversationOrReformedInput(v14, (uint64_t (*)(void))type metadata accessor for UserInputResult);
      outlined destroy of RemoteConversationOrReformedInput(v11, (uint64_t (*)(void))type metadata accessor for ConversationSearchResult);
      v7(v15, v12, v13);
      uint64_t v16 = type metadata accessor for RemoteConversationOrReformedInput(0);
      swift_storeEnumTagMultiPayload();
      uint64_t v17 = *(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
      uint64_t v18 = v15;
    }
    else
    {
      uint64_t v26 = v0[46];
      uint64_t v27 = v0[30];
      uint64_t v28 = (void *)v0[12];
      outlined destroy of RemoteConversationOrReformedInput(v0[22], (uint64_t (*)(void))type metadata accessor for UserInputResult);
      outlined destroy of RemoteConversationOrReformedInput(v27, (uint64_t (*)(void))type metadata accessor for ConversationSearchResult);
      *uint64_t v28 = v26;
      uint64_t v16 = type metadata accessor for RemoteConversationOrReformedInput(0);
      swift_storeEnumTagMultiPayload();
      uint64_t v17 = *(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
      uint64_t v18 = v28;
    }
    v17(v18, 0, 1, v16);
  }
  else
  {
    uint64_t v19 = Logger.logObject.getter();
    uint64_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      os_log_type_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v21 = 0;
      _os_log_impl(&dword_1B9C64000, v19, v20, "[ConversationHelper] Conversation did not accept input, returning nil", v21, 2u);
      MEMORY[0x1BA9E48C0](v21, -1, -1);
    }
    uint64_t v22 = v0[30];
    uint64_t v23 = v0[22];
    uint64_t v24 = v0[12];

    swift_release();
    outlined destroy of RemoteConversationOrReformedInput(v23, (uint64_t (*)(void))type metadata accessor for UserInputResult);
    outlined destroy of RemoteConversationOrReformedInput(v22, (uint64_t (*)(void))type metadata accessor for ConversationSearchResult);
    uint64_t v25 = type metadata accessor for RemoteConversationOrReformedInput(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = (uint64_t (*)(void))v0[1];
  return v29();
}

{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  uint64_t v1 = (void *)v0[15];
  uint64_t v2 = (void *)v0[13];
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  __swift_project_boxed_opaque_existential_1(v2, v3);
  uint64_t v5 = (uint64_t *)(*v1 + OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  v0[43] = v7;
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 40)
                                                                                     + **(int **)(v4 + 40));
  swift_bridgeObjectRetain();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[44] = v8;
  *uint64_t v8 = v0;
  v8[1] = ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:);
  uint64_t v9 = v0[30];
  uint64_t v10 = v0[14];
  return v12(v9, v10, v6, v7, v3, v4);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  void (*v4)(void *, uint64_t, uint64_t);
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void (*v14)(void *, void, uint64_t, uint64_t);
  void *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t (*v26)(void);
  uint64_t v28;

  swift_release();
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[22];
  outlined init with take of RemoteConversationOrReformedInput(v0[20], v2, (uint64_t (*)(void))type metadata accessor for UserInputResult);
  outlined init with copy of RemoteConversationOrReformedInput(v2, v1, (uint64_t (*)(void))type metadata accessor for UserInputResult);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v4 = *(void (**)(void *, uint64_t, uint64_t))(v0[25] + 32);
      v4((void *)v0[26], v0[19], v0[24]);
      uint64_t v5 = Logger.logObject.getter();
      uint64_t v6 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v7 = 0;
        _os_log_impl(&dword_1B9C64000, v5, v6, "[ConversationHelper] Conversation wants to reform input after it had just accepted it?", v7, 2u);
        MEMORY[0x1BA9E48C0](v7, -1, -1);
      }
      uint64_t v8 = v0[30];
      uint64_t v9 = v0[26];
      uint64_t v10 = v0[24];
      uint64_t v11 = v0[22];
      uint64_t v12 = (void *)v0[12];

      swift_release();
      outlined destroy of RemoteConversationOrReformedInput(v11, (uint64_t (*)(void))type metadata accessor for UserInputResult);
      outlined destroy of RemoteConversationOrReformedInput(v8, (uint64_t (*)(void))type metadata accessor for ConversationSearchResult);
      v4(v12, v9, v10);
      unint64_t v13 = type metadata accessor for RemoteConversationOrReformedInput(0);
      swift_storeEnumTagMultiPayload();
      uint64_t v14 = *(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v12;
    }
    else
    {
      uint64_t v23 = v0[46];
      uint64_t v24 = v0[30];
      uint64_t v25 = (void *)v0[12];
      outlined destroy of RemoteConversationOrReformedInput(v0[22], (uint64_t (*)(void))type metadata accessor for UserInputResult);
      outlined destroy of RemoteConversationOrReformedInput(v24, (uint64_t (*)(void))type metadata accessor for ConversationSearchResult);
      *uint64_t v25 = v23;
      unint64_t v13 = type metadata accessor for RemoteConversationOrReformedInput(0);
      swift_storeEnumTagMultiPayload();
      uint64_t v14 = *(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v25;
    }
    v14(v15, 0, 1, v13);
  }
  else
  {
    uint64_t v16 = Logger.logObject.getter();
    uint64_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_1B9C64000, v16, v17, "[ConversationHelper] Conversation did not accept input, returning nil", v18, 2u);
      MEMORY[0x1BA9E48C0](v18, -1, -1);
    }
    uint64_t v19 = v0[30];
    uint64_t v20 = v0[22];
    os_log_type_t v21 = v0[12];

    swift_release();
    outlined destroy of RemoteConversationOrReformedInput(v20, (uint64_t (*)(void))type metadata accessor for UserInputResult);
    outlined destroy of RemoteConversationOrReformedInput(v19, (uint64_t (*)(void))type metadata accessor for ConversationSearchResult);
    uint64_t v22 = type metadata accessor for RemoteConversationOrReformedInput(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = (uint64_t (*)(void))v0[1];
  return v26();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 280);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:), v1, 0);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 384) = v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 280);
  if (v0) {
    uint64_t v4 = ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:);
  }
  else {
    uint64_t v4 = ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v10;

  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 272);
  uint64_t v4 = *(void *)(*(void *)v1 + 256);
  uint64_t v5 = *(void *)(*(void *)v1 + 248);
  v2[40] = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v2[41] = v6;
  v2[42] = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v3, v5);
  uint64_t v7 = v2[35];
  if (v0) {
    uint64_t v8 = ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:);
  }
  else {
    uint64_t v8 = ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:);
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 400) = v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 280);
  if (v0) {
    uint64_t v4 = ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:);
  }
  else {
    uint64_t v4 = ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[16];
  uint64_t v2 = type metadata accessor for Logger();
  v0[36] = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v3 = v1 + 3;
  uint64_t v4 = v1[6];
  uint64_t v5 = v1[7];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v5 + 8) + **(int **)(v5 + 8));
  uint64_t v6 = (void *)swift_task_alloc();
  v0[37] = v6;
  *uint64_t v6 = v0;
  v6[1] = ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:);
  return v8(v4, v5);
}

uint64_t ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[15] = a4;
  v5[16] = v4;
  v5[13] = a2;
  v5[14] = a3;
  v5[12] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v5[17] = swift_task_alloc();
  v5[18] = type metadata accessor for UserInputResult();
  v5[19] = swift_task_alloc();
  v5[20] = swift_task_alloc();
  v5[21] = swift_task_alloc();
  v5[22] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  v5[23] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Input();
  v5[24] = v6;
  v5[25] = *(void *)(v6 - 8);
  v5[26] = swift_task_alloc();
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  v5[29] = type metadata accessor for ConversationSearchResult();
  v5[30] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v5[31] = v7;
  v5[32] = *(void *)(v7 - 8);
  v5[33] = swift_task_alloc();
  v5[34] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v8 = static MessageBusActor.shared;
  v5[35] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](ConversationHelper.loadConversationAndAccept(handler:input:conversationHelperInput:), v8, 0);
}

uint64_t type metadata accessor for ConversationSearchResult()
{
  uint64_t result = type metadata singleton initialization cache for ConversationSearchResult;
  if (!type metadata singleton initialization cache for ConversationSearchResult) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t protocol witness for ConversationHandler.startTurn(turnData:rcId:hypothesisId:bridge:) in conformance RemoteFlowPluginBundleConversationHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *unint64_t v13 = v6;
  v13[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return RemoteFlowPluginBundleConversationHandler.startTurn(turnData:rcId:hypothesisId:bridge:)(a1, a2, a3, a4, a5, a6);
}

uint64_t RemoteFlowPluginBundleConversationHandler.startTurn(turnData:rcId:hypothesisId:bridge:)()
{
  if (v0[15])
  {
    uint64_t v1 = (void *)swift_task_alloc();
    v0[17] = v1;
    *uint64_t v1 = v0;
    v1[1] = RemoteFlowPluginBundleConversationHandler.startTurn(turnData:rcId:hypothesisId:bridge:);
    uint64_t v2 = v0[9];
    uint64_t v3 = v0[10];
    uint64_t v4 = v0[5];
    return RemoteConversationClient.startTurn(turnData:bridge:)(v4, v2, v3);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v1 = v0[12];
  uint64_t v3 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v2, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v1, 0, 1, v4);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[14] = v6;
  *uint64_t v6 = v0;
  v6[1] = RemoteFlowPluginBundleConversationHandler.startTurn(turnData:rcId:hypothesisId:bridge:);
  uint64_t v7 = v0[12];
  uint64_t v8 = v0[6];
  return RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:)(v8, v3, v7);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 144) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 104);
  if (v0) {
    uint64_t v4 = RemoteFlowPluginBundleConversationHandler.startTurn(turnData:rcId:hypothesisId:bridge:);
  }
  else {
    uint64_t v4 = RemoteFlowPluginBundleConversationHandler.startTurn(turnData:rcId:hypothesisId:bridge:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t RemoteFlowPluginBundleConversationHandler.startTurn(turnData:rcId:hypothesisId:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[10] = a6;
  v7[11] = v6;
  v7[8] = a4;
  v7[9] = a5;
  v7[6] = a2;
  v7[7] = a3;
  v7[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v7[12] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v8 = static MessageBusActor.shared;
  v7[13] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](RemoteFlowPluginBundleConversationHandler.startTurn(turnData:rcId:hypothesisId:bridge:), v8, 0);
}

uint64_t RemoteFlowPluginBundleConversationHandler.startTurn(turnData:rcId:hypothesisId:bridge:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 96);
  *(void *)(v4 + 120) = a1;
  *(void *)(v4 + 128) = v1;
  swift_task_dealloc();
  outlined destroy of UUID?(v5);
  uint64_t v6 = *(void *)(v3 + 104);
  if (v1) {
    uint64_t v7 = RemoteFlowPluginBundleConversationHandler.startTurn(turnData:rcId:hypothesisId:bridge:);
  }
  else {
    uint64_t v7 = RemoteFlowPluginBundleConversationHandler.startTurn(turnData:rcId:hypothesisId:bridge:);
  }
  return MEMORY[0x1F4188298](v7, v6, 0);
}

uint64_t RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:)()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 216) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 168);
  if (v0) {
    uint64_t v4 = RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:);
  }
  else {
    uint64_t v4 = RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  swift_release();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 88);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  swift_release();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 96);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 168);
  if (v0) {
    uint64_t v4 = RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:);
  }
  else {
    uint64_t v4 = RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v1 = v0[16];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 96);
  if (v2)
  {
    swift_retain();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = (uint64_t (*)(uint64_t))v0[1];
    return v3(v2);
  }
  else
  {
    uint64_t v5 = (uint64_t *)(v0[16] + 104);
    swift_beginAccess();
    uint64_t v6 = *v5;
    v0[22] = *v5;
    if (v6)
    {
      swift_retain();
      uint64_t v7 = (void *)swift_task_alloc();
      v0[23] = v7;
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteConversationClient?);
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      void *v7 = v0;
      v7[1] = RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:);
      uint64_t v10 = MEMORY[0x1E4FBC0F0];
      uint64_t v11 = v0 + 12;
      uint64_t v12 = v6;
    }
    else
    {
      uint64_t v14 = v0[19];
      unint64_t v13 = v0[20];
      uint64_t v15 = v0[17];
      uint64_t v17 = v0[15];
      uint64_t v16 = v0[16];
      uint64_t v18 = v0[14];
      uint64_t v26 = v0[13];
      uint64_t v19 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v13, 1, 1, v19);
      outlined init with copy of UUID?(v17, v14);
      uint64_t v20 = static MessageBusActor.shared;
      os_log_type_t v21 = _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, 255, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
      uint64_t v22 = (*(unsigned __int8 *)(v15 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      uint64_t v23 = (void *)swift_allocObject();
      void v23[2] = v20;
      v23[3] = v21;
      v23[4] = v16;
      v23[5] = v26;
      v23[6] = v18;
      outlined init with take of UUID?(v14, (uint64_t)v23 + v22);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      uint64_t v24 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime24RemoteConversationClientCSg_Tgm5(v13, (uint64_t)&async function pointer to partial apply for closure #1 in RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:), (uint64_t)v23);
      v0[25] = v24;
      *uint64_t v5 = v24;
      swift_retain();
      swift_release();
      uint64_t v25 = (void *)swift_task_alloc();
      v0[26] = v25;
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteConversationClient?);
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      *uint64_t v25 = v0;
      v25[1] = RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:);
      uint64_t v10 = MEMORY[0x1E4FBC0F0];
      uint64_t v11 = v0 + 11;
      uint64_t v12 = v24;
    }
    return MEMORY[0x1F4187D90](v11, v12, v8, v9, v10);
  }
}

uint64_t RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[15] = a3;
  v4[16] = v3;
  v4[13] = a1;
  v4[14] = a2;
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  v4[17] = v5;
  v4[18] = *(void *)(v5 + 64);
  v4[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v4[20] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  v4[21] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:), v6, 0);
}

uint64_t outlined init with take of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t SharedFlowPluginServiceClient.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)()
{
  uint64_t v1 = *(void *)(v0 + 232);
  swift_release();
  if (!v1)
  {
    swift_release();
    if (one-time initialization token for executor == -1)
    {
LABEL_6:
      uint64_t v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v17 = 0;
        _os_log_impl(&dword_1B9C64000, v15, v16, "Error loading remote flow plugin: No result from loadFlowPlugin(bundleId:)", v17, 2u);
        MEMORY[0x1BA9E48C0](v17, -1, -1);
      }

      uint64_t v11 = 0;
      goto LABEL_9;
    }
LABEL_20:
    swift_once();
    goto LABEL_6;
  }
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v2 + 40);
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v4 = *(void *)(v0 + 240);
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v24 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v7 = *(void **)(v0 + 128);
  *(void *)(v2 + 40) = v3 + 1;
  uint64_t v8 = type metadata accessor for SharedFlowPluginConnection();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v9 = swift_unknownObjectRetain();
  uint64_t v10 = specialized SharedFlowPluginConnection.init(initialRemoteConversation:bundleId:bundlePath:sharedFlowPluginServiceClient:loadedConversationSerial:)(v9, v4, v6, v7, v24, v5, v2, v3);
  *(void *)(v0 + 256) = v10;
  swift_release();
  swift_unknownObjectRelease();
  *(void *)(v0 + 40) = v8;
  *(void *)(v0 + 48) = &protocol witness table for SharedFlowPluginConnection;
  *(void *)(v0 + 16) = v10;
  type metadata accessor for RemoteConversationClient();
  uint64_t v11 = (void *)swift_allocObject();
  *(void *)(v0 + 264) = v11;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_defaultActor_initialize();
  v11[21] = 0;
  v11[22] = 0;
  v11[14] = v6;
  v11[15] = v7;
  outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 16), (uint64_t)(v11 + 16));
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(**(void **)(v2 + 32) + 112);
  uint64_t v13 = swift_retain();
  v12(v13, v3);
  if (*(void *)(v2 + 16))
  {
    swift_unknownObjectRelease();
    swift_release();
    swift_release();
    swift_release();
LABEL_9:
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void *))(v0 + 8);
    return v18(v11);
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
  os_log_type_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl(&dword_1B9C64000, v21, v22, "Connection invalidated while loading flow plugin, invalidating plugin connection", v23, 2u);
    MEMORY[0x1BA9E48C0](v23, -1, -1);
  }

  return MEMORY[0x1F4188298](SharedFlowPluginServiceClient.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:), v11, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 208);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  swift_release();
  return MEMORY[0x1F4188298](SharedFlowPluginServiceClient.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:), v1, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release_n();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 264);
  (*(void (**)(void, void))(v0 + 296))(*(void *)(v0 + 272), *(void *)(v0 + 280));
  return MEMORY[0x1F4188298](SharedFlowPluginServiceClient.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  uint64_t v1 = *(void *)(v0 + 264);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  uint64_t v13;

  uint64_t v1 = v0[25];
  uint64_t v2 = v0[23];
  uint64_t v3 = v0[20];
  uint64_t v4 = v0[18];
  uint64_t v5 = v0[19];
  uint64_t v6 = v0[16];
  uint64_t v7 = v0[17];
  uint64_t v8 = v0[15];
  outlined init with copy of UUID?(v0[21], v1);
  uint64_t v9 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v10 = (void *)swift_allocObject();
  v0[27] = v10;
  long long v10[2] = v8;
  v10[3] = v6;
  v10[4] = v7;
  v10[5] = v4;
  v10[6] = v5;
  v10[7] = v3;
  outlined init with take of UUID?(v1, (uint64_t)v10 + v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[28] = v11;
  *uint64_t v11 = v0;
  v11[1] = SharedFlowPluginServiceClient.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:);
  return specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)((uint64_t)&async function pointer to partial apply for closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:), (uint64_t)v10);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  outlined init with copy of ReferenceResolutionClientProtocol(v0[33] + 128, (uint64_t)(v0 + 7));
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11];
  v0[34] = v1;
  v0[35] = v2;
  v0[36] = __swift_project_boxed_opaque_existential_1(v0 + 7, v1);
  v0[37] = *(void *)(v2 + 24);
  v0[38] = (v2 + 24) & 0xFFFFFFFFFFFFLL | 0xEB38000000000000;
  uint64_t v3 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](SharedFlowPluginServiceClient.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:), v3, 0);
}

uint64_t SharedFlowPluginServiceClient.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[21] = a7;
  v8[22] = v7;
  v8[19] = a5;
  v8[20] = a6;
  v8[17] = a3;
  v8[18] = a4;
  v8[15] = a1;
  v8[16] = a2;
  uint64_t v9 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  v8[23] = v9;
  v8[24] = *(void *)(v9 + 64);
  v8[25] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v10 = static MessageBusActor.shared;
  v8[26] = static MessageBusActor.shared;
  swift_retain_n();
  return MEMORY[0x1F4188298](SharedFlowPluginServiceClient.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:), v10, 0);
}

uint64_t SharedFlowPluginServiceClient.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[29] = a1;
  v4[30] = a2;
  v4[31] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = v4[26];
    uint64_t v6 = SharedFlowPluginServiceClient.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:);
  }
  else
  {
    uint64_t v7 = v4[26];
    swift_release();
    uint64_t v6 = SharedFlowPluginServiceClient.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:);
    uint64_t v5 = v7;
  }
  return MEMORY[0x1F4188298](v6, v5, 0);
}

uint64_t partial apply for specialized closure #1 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)(uint64_t a1)
{
  uint64_t v4 = (int *)v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v9 = (uint64_t (*)(uint64_t, int *, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)
                                                                         + async function pointer to specialized closure #1 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:));
  return v9(a1, v4, v5, v7, v6);
}

{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;

  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
  uint64_t v7 = (void *)swift_task_alloc();
  uint64_t v6[2] = v7;
  void *v7 = v6;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v9(a1, v5);
}

uint64_t partial apply for closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v10 = v2[6];
  uint64_t v11 = v2[7];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  *uint64_t v12 = v3;
  v12[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(a1, a2, v6, v7, v8, v9, v10, v11);
}

uint64_t closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  long long v8;
  long long v9;
  long long v10;
  uint64_t v11;

  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v9 = *(_OWORD *)(v0 + 40);
  uint64_t v10 = *(_OWORD *)(v0 + 56);
  uint64_t v8 = *(_OWORD *)(v0 + 24);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 88) = v3;
  *(_OWORD *)(v3 + 16) = v8;
  *(_OWORD *)(v3 + 32) = v9;
  *(_OWORD *)(v3 + 48) = v10;
  *(void *)(v3 + 64) = v2;
  *(void *)(v3 + 72) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteConversation?);
  *uint64_t v4 = v0;
  v4[1] = closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:);
  uint64_t v6 = *(void *)(v0 + 16);
  return MEMORY[0x1F41880D8](v6, 0, 0, 0xD00000000000004ALL, 0x80000001BA06E020, partial apply for closure #1 in closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:), v3, v5);
}

uint64_t closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[9] = a8;
  v8[10] = v10;
  v8[7] = a6;
  v8[8] = a7;
  v8[5] = a4;
  v8[6] = a5;
  v8[3] = a2;
  v8[4] = a3;
  uint64_t v8[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:), 0, 0);
}

void closure #1 in closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9)
{
  uint64_t v28 = a7;
  uint64_t v29 = a1;
  id v31 = a2;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Never>);
  uint64_t v14 = *(void *)(v30 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x1F4188790](v30);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (void *)MEMORY[0x1BA9E2DD0](a3, a4);
  uint64_t v20 = (void *)MEMORY[0x1BA9E2DD0](a5, a6);
  if (a8) {
    a8 = (void *)MEMORY[0x1BA9E2DD0](v28, a8);
  }
  outlined init with copy of UUID?(a9, (uint64_t)v18);
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v21 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v18, 1, v21) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v18, v21);
  }
  uint64_t v24 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v29, v30);
  unint64_t v25 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v26 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v14 + 32))(v26 + v25, (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v24);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:);
  aBlock[5] = v26;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed RemoteConversationXPC?) -> ();
  aBlock[3] = &block_descriptor_25;
  uint64_t v27 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v31, sel_loadFlowPluginWithBundleId_bundlePath_rcId_hypothesisId_reply_, v19, v20, a8, isa, v27);
  _Block_release(v27);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed RemoteConversationXPC?) -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a2) - 8);
  uint64_t v6 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return a3(a1, v6);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(a1, &demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Never>, (uint64_t (*)(uint64_t, uint64_t))closure #1 in closure #1 in closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:));
}

uint64_t closure #1 in closure #1 in closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(uint64_t a1)
{
  if (a1)
  {
    swift_getObjectType();
    RemoteConversationXPC.sendableWrapper.getter();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t RemoteConversationXPC.sendableWrapper.getter()
{
  type metadata accessor for SendableRemoteConversationXPCWrapper();
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = v0;
  swift_unknownObjectRetain();
  return v1;
}

uint64_t type metadata accessor for SendableRemoteConversationXPCWrapper()
{
  return self;
}

id outlined copy of Result<RemoteConversation?, Error>(id a1, uint64_t a2, char a3)
{
  if (a3) {
    return a1;
  }
  else {
    return (id)swift_unknownObjectRetain();
  }
}

void outlined consume of Result<RemoteConversation?, Error>?(void *a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    outlined consume of Result<RemoteConversation?, Error>(a1, a2, a3 & 1);
  }
}

void outlined consume of Result<RemoteConversation?, Error>(id a1, uint64_t a2, char a3)
{
  if (a3) {

  }
  else {
    swift_unknownObjectRelease();
  }
}

uint64_t objectdestroy_5Tm()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 64) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }

  return MEMORY[0x1F4186498](v0, v3 + v4, v2 | 7);
}

uint64_t type metadata accessor for SharedFlowPluginConnection()
{
  return self;
}

uint64_t type metadata accessor for InterruptibleTaskManager()
{
  return self;
}

uint64_t type metadata accessor for RemoteConversationClient()
{
  return self;
}

uint64_t SharedFlowPluginServiceClient.LoadedConversationTracker.registerLoadedConversation(_:serial:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  swift_weakInit();
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *(void *)(v2 + 16);
  *(void *)(v2 + 16) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)partial apply for closure #1 in SharedFlowPluginServiceClient.LoadedConversationTracker.registerLoadedConversation(_:serial:), v4, a2, isUniquelyReferenced_nonNull_native);
  *(void *)(v2 + 16) = v7;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_release();
}

uint64_t RemoteConversationClient.startTurn(turnData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = *(void *)(type metadata accessor for RemoteConversationTurnData(0) - 8);
  v4[6] = v5;
  v4[7] = *(void *)(v5 + 64);
  v4[8] = swift_task_alloc();
  return MEMORY[0x1F4188298](RemoteConversationClient.startTurn(turnData:bridge:), v3, 0);
}

uint64_t protocol witness for ConversationHandler.findConversation(for:rcId:) in conformance RemoteFlowPluginBundleConversationHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return RemoteFlowPluginBundleConversationHandler.findConversation(for:rcId:)(a1, a2, a3, a4);
}

uint64_t RemoteFlowPluginBundleConversationHandler.findConversation(for:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  void v5[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v5[10] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  v5[11] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](RemoteFlowPluginBundleConversationHandler.findConversation(for:rcId:), v6, 0);
}

uint64_t RemoteFlowPluginBundleConversationHandler.findConversation(for:rcId:)(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[19] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[11];
  if (v1)
  {
    uint64_t v6 = RemoteFlowPluginBundleConversationHandler.findConversation(for:rcId:);
  }
  else
  {
    v4[20] = a1;
    uint64_t v6 = RemoteFlowPluginBundleConversationHandler.findConversation(for:rcId:);
  }
  return MEMORY[0x1F4188298](v6, v5, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 80);
  *(void *)(v4 + 128) = a1;
  *(void *)(v4 + 136) = v1;
  swift_task_dealloc();
  outlined destroy of UUID?(v5);
  uint64_t v6 = *(void *)(v3 + 88);
  if (v1) {
    uint64_t v7 = RemoteFlowPluginBundleConversationHandler.findConversation(for:rcId:);
  }
  else {
    uint64_t v7 = RemoteFlowPluginBundleConversationHandler.findConversation(for:rcId:);
  }
  return MEMORY[0x1F4188298](v7, v6, 0);
}

uint64_t RemoteFlowPluginBundleConversationHandler.findConversation(for:rcId:)()
{
  if (v0[16])
  {
    uint64_t v1 = (void *)swift_task_alloc();
    v0[18] = v1;
    *uint64_t v1 = v0;
    v1[1] = RemoteFlowPluginBundleConversationHandler.findConversation(for:rcId:);
    uint64_t v2 = v0[7];
    uint64_t v3 = v0[8];
    uint64_t v4 = v0[6];
    return RemoteConversationClient.canHandle(input:rcId:)(v4, v2, v3);
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[13];
    uint64_t v7 = v0[12];
    uint64_t v8 = v0[5];
    swift_release();
    uint64_t v9 = type metadata accessor for ConversationSearchResult();
    uint64_t v10 = v8 + *(int *)(v9 + 24);
    uint64_t v11 = type metadata accessor for Input();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
    v6(v8 + *(int *)(v9 + 28), 1, 1, v7);
    *(void *)uint64_t v8 = 0;
    *(unsigned char *)(v8 + 8) = 1;
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, void, uint64_t, uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  Input.identifier.getter();
  uint64_t v3 = type metadata accessor for UUID();
  v0[12] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56);
  v0[13] = v5;
  v0[14] = (v4 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v5(v1, 0, 1, v3);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[15] = v6;
  *uint64_t v6 = v0;
  v6[1] = RemoteFlowPluginBundleConversationHandler.findConversation(for:rcId:);
  uint64_t v7 = v0[10];
  uint64_t v8 = v0[7];
  return RemoteFlowPluginBundleConversationHandler.getRemoteConversationClient(rcId:hypothesisId:)(v8, v2, v7);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = (void *)v0[20];
  uint64_t v2 = v0[16];
  swift_release();
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x78))(v2);

  swift_release();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t RemoteConversationClient.canHandle(input:rcId:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t CanHandleResult;
  uint64_t (*v18)(void *, void *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v3 = v0[7];
  uint64_t v4 = v0[8];
  uint64_t v5 = v0[5];
  uint64_t v6 = (void *)v0[6];
  uint64_t v7 = v0[3];
  uint64_t v19 = v0[4];
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v9 = v6 + 16;
  uint64_t v10 = v6[19];
  uint64_t v11 = v6[20];
  __swift_project_boxed_opaque_existential_1(v9, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v7, v3);
  uint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v13 = swift_allocObject();
  v0[11] = v13;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v13 + v12, v2, v3);
  uint64_t v14 = (void *)(v13 + ((v1 + v12 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v14 = v19;
  v14[1] = v5;
  uint64_t v18 = (uint64_t (*)(void *, void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 + 8)
                                                                                     + **(int **)(v11 + 8));
  swift_bridgeObjectRetain();
  uint64_t v15 = (void *)swift_task_alloc();
  v0[12] = v15;
  CanHandleResult = type metadata accessor for ConversationCanHandleResult();
  *uint64_t v15 = v0;
  v15[1] = RemoteConversationClient.canHandle(input:rcId:);
  return v18(v0 + 2, &async function pointer to partial apply for closure #1 in RemoteConversationClient.canHandle(input:rcId:), v13, CanHandleResult, v10, v11);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 104) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 48);
    uint64_t v4 = RemoteConversationClient.canHandle(input:rcId:);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 48);
    swift_release();
    uint64_t v4 = RemoteConversationClient.canHandle(input:rcId:);
    uint64_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

uint64_t RemoteConversationClient.canHandle(input:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  uint64_t v5 = type metadata accessor for Input();
  v4[7] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[8] = v6;
  v4[9] = *(void *)(v6 + 64);
  v4[10] = swift_task_alloc();
  return MEMORY[0x1F4188298](RemoteConversationClient.canHandle(input:rcId:), v3, 0);
}

uint64_t type metadata accessor for ConversationCanHandleResult()
{
  uint64_t result = type metadata singleton initialization cache for ConversationCanHandleResult;
  if (!type metadata singleton initialization cache for ConversationCanHandleResult) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t partial apply for closure #1 in RemoteConversationClient.canHandle(input:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(type metadata accessor for Input() - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v3 + v9;
  uint64_t v11 = (uint64_t *)(v3 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v14;
  *uint64_t v14 = v4;
  v14[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in RemoteConversationClient.canHandle(input:rcId:)(a1, a2, a3, v10, v12, v13);
}

uint64_t closure #1 in RemoteConversationClient.canHandle(input:rcId:)()
{
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 64);
  long long v15 = *(_OWORD *)(v0 + 32);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v1, *(void *)(v0 + 48), v3);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v8 = (v2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 104) = v9;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v9 + v7, v1, v3);
  *(_OWORD *)(v9 + v8) = v15;
  uint64_t v10 = (void *)(v9 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v10 = v6;
  v10[1] = v5;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = swift_task_alloc();
  *(void *)(v0 + 112) = v11;
  *(void *)(v11 + 16) = partial apply for closure #1 in closure #1 in RemoteConversationClient.canHandle(input:rcId:);
  *(void *)(v11 + 24) = v9;
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v12;
  uint64_t CanHandleResult = type metadata accessor for ConversationCanHandleResult();
  *uint64_t v12 = v0;
  v12[1] = closure #1 in RemoteConversationClient.canHandle(input:rcId:);
  return MEMORY[0x1F4188160](v0 + 16, 0, 0, 0xD000000000000028, 0x80000001BA063410, partial apply for specialized closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:), v11, CanHandleResult);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = (void *)*v1;
  v2[16] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in RemoteConversationClient.canHandle(input:rcId:), 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)v2[3];
    swift_release();
    swift_task_dealloc();
    *uint64_t v3 = v2[2];
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in RemoteConversationClient.canHandle(input:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a5;
  v6[8] = a6;
  v6[5] = a3;
  v6[6] = a4;
  void v6[3] = a1;
  v6[4] = a2;
  uint64_t v7 = type metadata accessor for Input();
  v6[9] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[10] = v8;
  v6[11] = *(void *)(v8 + 64);
  v6[12] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationClient.canHandle(input:rcId:), 0, 0);
}

uint64_t closure #1 in closure #1 in RemoteConversationClient.canHandle(input:rcId:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v22 = a6;
  uint64_t v23 = a1;
  id v25 = a3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ConversationCanHandleResult, Error>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v8);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  type metadata accessor for Input();
  lazy protocol witness table accessor for type RemoteConversationClient and conformance RemoteConversationClient((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input, 255, MEMORY[0x1E4FA1EE0]);
  uint64_t v11 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v13 = v12;
  uint64_t result = swift_release();
  if (!v6)
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v22 = MEMORY[0x1BA9E2DD0](a5, v22);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v23, v8);
    unint64_t v15 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v16 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v16 + v15, (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.canHandle(input:rcId:);
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed ConversationCanHandleResult) -> ();
    aBlock[3] = &block_descriptor_219;
    uint64_t v17 = _Block_copy(aBlock);
    swift_release();
    Class v18 = isa;
    uint64_t v19 = (void *)v22;
    objc_msgSend(v25, sel_canHandleWithInputData_rcId_reply_, isa, v22, v17);
    _Block_release(v17);

    return outlined consume of Data._Representation(v11, v13);
  }
  return result;
}

id ConversationCanHandleResult.init(coder:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v4);
  uint64_t v9 = (char *)&v52 - v8;
  MEMORY[0x1F4188790](v7);
  uint64_t v57 = (uint64_t)&v52 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v52 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v56 = (uint64_t)&v52 - v18;
  id v19 = v1;
  uint64_t v20 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000011, 0x80000001BA060580);
  unsigned int v21 = objc_msgSend(a1, sel_containsValueForKey_, v20);

  if (!v21)
  {

    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.executor);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v34, v35)) {
      goto LABEL_14;
    }
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v36 = 0;
    os_log_type_t v37 = "Could not decode ConversationCanHandleResultXPC: No value for key directlySupported";
    goto LABEL_13;
  }
  uint64_t v22 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000011, 0x80000001BA060580);
  unsigned int v55 = objc_msgSend(a1, sel_decodeBoolForKey_, v22);

  uint64_t v23 = (void *)MEMORY[0x1BA9E2DD0](0x6564756C637865, 0xE700000000000000);
  unsigned __int8 v24 = objc_msgSend(a1, sel_containsValueForKey_, v23);

  if ((v24 & 1) == 0)
  {

    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.executor);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v34, v35)) {
      goto LABEL_14;
    }
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v36 = 0;
    os_log_type_t v37 = "Could not decode ConversationCanHandleResultXPC: No value for key exclude";
LABEL_13:
    _os_log_impl(&dword_1B9C64000, v34, v35, v37, v36, 2u);
    MEMORY[0x1BA9E48C0](v36, -1, -1);
LABEL_14:

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  id v25 = (void *)MEMORY[0x1BA9E2DD0](0x6564756C637865, 0xE700000000000000);
  unsigned int v54 = objc_msgSend(a1, sel_decodeBoolForKey_, v25);

  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSData);
  uint64_t v26 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v26)
  {
    uint64_t v27 = (void *)v26;
    int v52 = v14;
    int64_t v53 = v6;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    uint64_t v28 = type metadata accessor for Input();
    id v29 = v27;
    uint64_t v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v32 = v31;

    lazy protocol witness table accessor for type Input and conformance Input(&lazy protocol witness table cache variable for type Input and conformance Input);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();

    outlined consume of Data._Representation(v30, v32);
    swift_release();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v17, 0, 1, v28);
    uint64_t v42 = (uint64_t)v17;
    uint64_t v43 = v56;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v42, v56, &demangling cache variable for type metadata for Input?);
    uint64_t v14 = v52;
    uint64_t v6 = v53;
  }
  else
  {
    uint64_t v41 = type metadata accessor for Input();
    uint64_t v43 = v56;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v56, 1, 1, v41);
  }
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSUUID);
  uint64_t v44 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v44)
  {
    uint64_t v45 = (void *)v44;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v46 = type metadata accessor for UUID();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v9, 0, 1, v46);
  }
  else
  {
    uint64_t v47 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v9, 1, 1, v47);
  }
  uint64_t v48 = (uint64_t)v9;
  uint64_t v49 = v57;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v48, v57, (uint64_t *)&demangling cache variable for type metadata for UUID?);

  outlined init with copy of ReferenceResolutionClientProtocol?(v43, (uint64_t)v14, &demangling cache variable for type metadata for Input?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v49, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t CanHandleResult = (objc_class *)type metadata accessor for ConversationCanHandleResult();
  uint64_t v51 = objc_allocWithZone(CanHandleResult);
  v51[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported] = v55;
  v51[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude] = v54;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v14, (uint64_t)&v51[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput], &demangling cache variable for type metadata for Input?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v6, (uint64_t)&v51[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier], (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v58.receiver = v51;
  v58.super_class = CanHandleResult;
  id v39 = objc_msgSendSuper2(&v58, sel_init);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for Input?);

  outlined destroy of ReferenceResolutionClientProtocol?(v49, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?(v43, &demangling cache variable for type metadata for Input?);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v39;
}

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed ConversationCanHandleResult) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.canHandle(input:rcId:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(a1, &demangling cache variable for type metadata for CheckedContinuation<ConversationCanHandleResult, Error>, (uint64_t (*)(uint64_t, uint64_t))closure #1 in closure #1 in closure #1 in RemoteConversationClient.canHandle(input:rcId:));
}

uint64_t closure #1 in closure #1 in closure #1 in RemoteConversationClient.canHandle(input:rcId:)(void *a1)
{
  id v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ConversationCanHandleResult, Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t ConversationCanHandleResult.toConversationSearchResult(remoteConversationClient:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Input();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported) == 1)
  {
    uint64_t v12 = v2 + OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier;
    uint64_t v13 = type metadata accessor for ConversationSearchResult();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2 + *(int *)(v13 + 24), 1, 1, v8);
    outlined init with copy of ReferenceResolutionClientProtocol?(v12, a2 + *(int *)(v13 + 28), (uint64_t *)&demangling cache variable for type metadata for UUID?);
    *(void *)a2 = a1;
    *(unsigned char *)(a2 + 8) = 1;
    return swift_retain();
  }
  else
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v2 + OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput, (uint64_t)v7, &demangling cache variable for type metadata for Input?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for Input?);
      char v15 = *(unsigned char *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude);
      uint64_t v16 = type metadata accessor for ConversationSearchResult();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2 + *(int *)(v16 + 24), 1, 1, v8);
      uint64_t v17 = a2 + *(int *)(v16 + 28);
      uint64_t v18 = type metadata accessor for UUID();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
      *(void *)a2 = 0;
      *(unsigned char *)(a2 + 8) = v15;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
      uint64_t v19 = type metadata accessor for ConversationSearchResult();
      uint64_t v20 = a2 + *(int *)(v19 + 24);
      (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(v20, v11, v8);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v20, 0, 1, v8);
      uint64_t v21 = a2 + *(int *)(v19 + 28);
      uint64_t v22 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
      *(void *)a2 = 0;
      *(unsigned char *)(a2 + 8) = 1;
      return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
  }
  return result;
}

uint64_t RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:)()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = v0[15];
  uint64_t v21 = v0[14];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[13];
  uint64_t v5 = (char *)v0[8];
  id v4 = (void *)v0[9];
  uint64_t v6 = v0[7];
  uint64_t v7 = type metadata accessor for Logger();
  v0[16] = __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v9 = *(void *)&v5[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId];
  uint64_t v8 = *(void *)&v5[OBJC_IVAR____TtC14SiriKitRuntime28RemoteConversationSpeechData_rcId + 8];
  swift_beginAccess();
  v4[21] = v9;
  v4[22] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = v4 + 16;
  uint64_t v11 = v4[19];
  uint64_t v12 = v4[20];
  __swift_project_boxed_opaque_existential_1(v10, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v6, v2);
  unint64_t v13 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v14 = swift_allocObject();
  v0[17] = v14;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v14 + v13, v1, v2);
  *(void *)(v14 + ((v21 + v13 + 7) & 0xFFFFFFFFFFFFFFF8)) = v5;
  uint64_t v20 = (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 + 8)
                                                                                    + **(int **)(v12 + 8));
  char v15 = v5;
  uint64_t v16 = (void *)swift_task_alloc();
  v0[18] = v16;
  *uint64_t v16 = v0;
  v16[1] = RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:);
  uint64_t v17 = v0[10];
  uint64_t v18 = v0[6];
  return v20(v18, &async function pointer to partial apply for closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:), v14, v17, v11, v12);
}

{
  void *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  void *v11;
  uint64_t v12;

  uint64_t v11 = v0;
  _s14SiriKitRuntime26RemoteConversationTurnDataVWOcTm_1(v0[6], v0[11], (uint64_t (*)(void))type metadata accessor for UserInputResult);
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[11];
    id v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v10 = v5;
    *(_DWORD *)id v4 = 136315138;
    uint64_t v6 = UserInputResult.description.getter();
    v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of UserInputResult(v3);
    _os_log_impl(&dword_1B9C64000, v1, v2, "Extension returned from accept(): %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v5, -1, -1);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }
  else
  {
    outlined destroy of UserInputResult(v0[11]);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 72);
    id v4 = RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 72);
    swift_release();
    id v4 = RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:);
    uint64_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[8] = a3;
  v4[9] = v3;
  v4[6] = a1;
  v4[7] = a2;
  v4[10] = type metadata accessor for UserInputResult();
  v4[11] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v4[12] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[13] = v6;
  v4[14] = *(void *)(v6 + 64);
  v4[15] = swift_task_alloc();
  return MEMORY[0x1F4188298](RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:), v3, 0);
}

uint64_t partial apply for closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v3 + v9;
  uint64_t v11 = *(void *)(v3 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v12;
  *uint64_t v12 = v4;
  v12[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:)(a1, a2, a3, v10, v11);
}

uint64_t closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:)()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 112) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:), 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  long long v15;
  uint64_t v16;

  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = *(void **)(v0 + 48);
  char v15 = *(_OWORD *)(v0 + 24);
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v1, *(void *)(v0 + 40), v3);
  uint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 88) = v8;
  *(_OWORD *)(v8 + 16) = v15;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v6, v1, v3);
  *(void *)(v8 + v7) = v5;
  swift_unknownObjectRetain();
  unint64_t v9 = v5;
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 96) = v10;
  *(void *)(v10 + 16) = partial apply for closure #1 in closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:);
  *(void *)(v10 + 24) = v8;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v11;
  uint64_t v12 = type metadata accessor for UserInputResult();
  *uint64_t v11 = v0;
  v11[1] = closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:);
  unint64_t v13 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188160](v13, 0, 0, 0xD000000000000028, 0x80000001BA063410, partial apply for specialized closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:), v10, v12);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t v6 = type metadata accessor for UUID();
  v5[7] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[8] = v7;
  v5[9] = *(void *)(v7 + 64);
  v5[10] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationClient.acceptInitialInput(inputIdentifier:speechData:), 0, 0);
}

uint64_t destroy for ConversationSearchResult(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Input();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 28);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v8 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v7, 1, v8);
  if (!result)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
    return v10(v7, v8);
  }
  return result;
}

void *initializeWithCopy for RemoteConversationOrReformedInput(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for Input();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t destroy for RemoteConversationOrReformedInput(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for Input();
    uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    return v3(a1, v2);
  }
  else
  {
    return swift_release();
  }
}

uint64_t storeEnumTagSinglePayload for DecisionEngineResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B9EAC5A4);
}

uint64_t destroy for AmbiguityServiceResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Input();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t v7 = type metadata accessor for AmbiguityOutput(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7))
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v4);
    }
    else {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v8 = a1 + *(int *)(a2 + 24);
  uint64_t v9 = type metadata accessor for Parse();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);

  return v10(v8, v9);
}

uint64_t getEnumTagSinglePayload for DecisionEngineResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B9EAC4E4);
}

uint64_t initializeWithCopy for DecisionEngineResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = type metadata accessor for Input();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  swift_retain();
  if (v9(v6, 1, v7))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
    memcpy(v5, v6, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v5, v6, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

void DecisionEngineCurareDonator.donateDecisionEngineResponse(decisionEngineResponse:requestId:rcId:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = a2;
  uint64_t v44 = a4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse?);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  uint64_t v18 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v19 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v39 - v20;
  outlined init with copy of ReferenceResolutionClientProtocol?(v5 + 16, (uint64_t)&v45, &demangling cache variable for type metadata for DecisionEngineStream?);
  if (v46)
  {
    uint64_t v41 = a3;
    outlined init with take of ReferenceResolutionClientProtocol(&v45, (uint64_t)v47);
    uint64_t v22 = *a1;
    uint64_t v42 = a5;
    if (v22)
    {
      uint64_t v23 = *(void *)(v22 + 120);
      uint64_t v40 = *(void *)(v22 + 112);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v40 = 0;
      uint64_t v23 = 0;
    }
    uint64_t v28 = type metadata accessor for DecisionEngineResponse();
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)a1 + *(int *)(v28 + 24), (uint64_t)v14, &demangling cache variable for type metadata for Input?);
    uint64_t v29 = type metadata accessor for Input();
    uint64_t v30 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v14, 1, v29) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for Input?);
      uint64_t v31 = type metadata accessor for Parse();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v21, 1, 1, v31);
    }
    else
    {
      Input.parse.getter();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v14, v29);
      uint64_t v32 = type metadata accessor for Parse();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v21, 0, 1, v32);
    }
    static TaskPriority.background.getter();
    uint64_t v33 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v11, 0, 1, v33);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v21, (uint64_t)v19, &demangling cache variable for type metadata for Parse?);
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v47, (uint64_t)&v45);
    unint64_t v34 = (*(unsigned __int8 *)(v16 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    unint64_t v35 = (v17 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v36 = (void *)swift_allocObject();
    v36[2] = 0;
    v36[3] = 0;
    uint64_t v37 = v42;
    uint64_t v38 = v41;
    uint64_t v36[4] = v43;
    v36[5] = v38;
    v36[6] = v44;
    v36[7] = v37;
    v36[8] = v40;
    v36[9] = v23;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v19, (uint64_t)v36 + v34, &demangling cache variable for type metadata for Parse?);
    outlined init with take of ReferenceResolutionClientProtocol(&v45, (uint64_t)v36 + v35);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #1 in DecisionEngineCurareDonator.donateDecisionEngineResponse(decisionEngineResponse:requestId:rcId:), (uint64_t)v36);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, &demangling cache variable for type metadata for TaskPriority?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, &demangling cache variable for type metadata for Parse?);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v45, &demangling cache variable for type metadata for DecisionEngineStream?);
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.instrumentation);
    id v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_1B9C64000, v25, v26, "Failed to find DecisionEngineStream for DecisionEngine.", v27, 2u);
      MEMORY[0x1BA9E48C0](v27, -1, -1);
    }
  }
}

uint64_t destroy for DecisionEngineResponse(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Input();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t destroy for ConversationHelperInput(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  uint64_t v6 = &v4[v5[6]];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  if (!v9(v6, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }

  uint64_t v10 = &v4[v5[8]];
  if (!v9(v10, 1, v7)) {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  swift_release();

  uint64_t v11 = (uint64_t *)&v4[v5[12]];
  unint64_t v12 = v11[1];
  if (v12 >> 60 != 15) {
    outlined consume of Data._Representation(*v11, v12);
  }

  return swift_unknownObjectRelease();
}

uint64_t specialized ConversationService.updateRequestHandlingExecutionSystem(activeTurn:rcId:parse:)()
{
  uint64_t v48 = v0;
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v4(v1, *(void *)(v0 + 80), v2);
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v1, v2);
  if (v5 == *MEMORY[0x1E4FA1F00])
  {
LABEL_2:
    (*(void (**)(void, void))(*(void *)(v0 + 120) + 8))(*(void *)(v0 + 144), *(void *)(v0 + 112));
LABEL_5:
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;
    goto LABEL_6;
  }
  if (v5 == *MEMORY[0x1E4FA1F40])
  {
    uint64_t v6 = *(void *)(v0 + 144);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 120) + 96))(v6, *(void *)(v0 + 112));
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    swift_release();
    uint64_t v7 = type metadata accessor for NLIntent();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    goto LABEL_5;
  }
  if (v5 == *MEMORY[0x1E4FA1F10])
  {
    uint64_t v13 = *(void *)(v0 + 144);
    uint64_t v15 = *(void *)(v0 + 112);
    uint64_t v14 = *(void *)(v0 + 120);
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v16;
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  }
  else
  {
    if (v5 == *MEMORY[0x1E4FA1F18])
    {
      uint64_t v17 = *(id **)(v0 + 144);
      (*(void (**)(id *, void))(*(void *)(v0 + 120) + 96))(v17, *(void *)(v0 + 112));

      goto LABEL_5;
    }
    if (v5 == *MEMORY[0x1E4FA1F48] || v5 == *MEMORY[0x1E4FA1F50]) {
      goto LABEL_2;
    }
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v19 = *(void *)(v0 + 128);
    uint64_t v20 = *(void *)(v0 + 136);
    uint64_t v21 = *(void *)(v0 + 112);
    uint64_t v22 = *(void *)(v0 + 80);
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.executor);
    v4(v20, v22, v21);
    v4(v19, v22, v21);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v28 = *(void *)(v0 + 128);
    uint64_t v27 = *(void *)(v0 + 136);
    uint64_t v29 = *(void *)(v0 + 112);
    uint64_t v30 = *(void *)(v0 + 120);
    if (v26)
    {
      log = v24;
      uint64_t v31 = *(void *)(v0 + 104);
      uint64_t v43 = *(void *)(v0 + 88);
      uint64_t v44 = *(void *)(v0 + 96);
      uint64_t v42 = *(void *)(v0 + 128);
      uint64_t v32 = swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      uint64_t v47 = v45;
      *(_DWORD *)uint64_t v32 = 136315394;
      uint64_t v33 = Parse.parseType.getter();
      *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v35 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
      v35(v27, v29);
      *(_WORD *)(v32 + 12) = 2080;
      Parse.nlLocation.getter();
      _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3(&lazy protocol witness table cache variable for type ExecutionLocation and conformance ExecutionLocation, 255, MEMORY[0x1E4FA5260]);
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v38 = v37;
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v31, v43);
      *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v35(v42, v29);
      _os_log_impl(&dword_1B9C64000, log, v25, "[ConversationService] updateRequestHandlingExecutionSystem unknown input system for parse type=%s location=%s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v45, -1, -1);
      MEMORY[0x1BA9E48C0](v32, -1, -1);
    }
    else
    {
      unint64_t v35 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
      v35(*(void *)(v0 + 136), *(void *)(v0 + 112));
      v35(v28, v29);
    }
    uint64_t v39 = *(void *)(v0 + 144);
    uint64_t v40 = *(void *)(v0 + 112);
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v41;
    v35(v39, v40);
  }
LABEL_6:
  (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)(v0 + 56) + 384))(*(void *)(v0 + 64), *(void *)(v0 + 72), v8, v10);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t specialized ConversationService.updateRequestHandlingExecutionSystem(activeTurn:rcId:parse:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[9] = a3;
  v4[10] = a4;
  v4[7] = a1;
  v4[8] = a2;
  uint64_t v5 = type metadata accessor for ExecutionLocation();
  v4[11] = v5;
  v4[12] = *(void *)(v5 - 8);
  v4[13] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Parse();
  v4[14] = v6;
  v4[15] = *(void *)(v6 - 8);
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v7 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](specialized ConversationService.updateRequestHandlingExecutionSystem(activeTurn:rcId:parse:), v7, 0);
}

Swift::Void __swiftcall ConversationService.ActiveTurn.registerExecutionInputSystem(rcId:system:)(Swift::String rcId, Swift::String system)
{
  unint64_t object = system._object;
  uint64_t countAndFlagsBits = system._countAndFlagsBits;
  uint64_t v5 = rcId._object;
  uint64_t v6 = rcId._countAndFlagsBits;
  uint64_t v7 = (uint64_t *)(v2 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_executionInputSystem);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v7;
  uint64_t *v7 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(countAndFlagsBits, (uint64_t)object, v6, (uint64_t)v5, isUniquelyReferenced_nonNull_native);
  uint64_t *v7 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
}

uint64_t destroy for AnyEncodable()
{
  return swift_release();
}

uint64_t specialized static SiriKitMetricsUtils.extractIntentTypeName(input:)()
{
  uint64_t v0 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Parse();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == *MEMORY[0x1E4FA1F00])
  {
    uint64_t v9 = 0x6573726170204C4ELL;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else if (v8 == *MEMORY[0x1E4FA1F40])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (NLIntent, Parse.ServerConversion));
    uint64_t v10 = (void *)Parse.ServerConversion.siriKitIntent.getter();
    id v11 = objc_msgSend(v10, sel_typeName);

    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_release();

    uint64_t v12 = type metadata accessor for NLIntent();
    (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v7, v12);
  }
  else if (v8 == *MEMORY[0x1E4FA1F38])
  {
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v3, v7, v0);
    uint64_t v16 = Parse.DirectInvocation.identifier.getter();
    unint64_t v17 = v13;
    v14._uint64_t countAndFlagsBits = String.init<A>(_:)();
    uint64_t v16 = 0x203A746365726944;
    unint64_t v17 = 0xE800000000000000;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    uint64_t v9 = v16;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  else if (v8 == *MEMORY[0x1E4FA1F08])
  {
    uint64_t v9 = 0x6573726170204C4ELL;
    (*(void (**)(char *, uint64_t))(v5 + 96))(v7, v4);
    swift_unknownObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 0x206E776F6E6B6E55;
  }
  return v9;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *initializeBufferWithCopyOfBuffer for AnyEncodable(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

void TaskLoggingEventSink.route(_:_:_:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v305 = a2;
  uint64_t v306 = a3;
  uint64_t v299 = (void *)type metadata accessor for SiriKitConfirmationState();
  uint64_t v298 = *(v299 - 1);
  uint64_t v3 = MEMORY[0x1F4188790](v299);
  uint64_t v296 = (char *)&v278 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  unint64_t v297 = ((char *)&v278 - v5);
  uint64_t v283 = type metadata accessor for TaskFlowConfiguration();
  uint64_t v282 = *(void *)(v283 - 8);
  MEMORY[0x1F4188790](v283);
  unint64_t v281 = (char *)&v278 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AppResolutionResult?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v302 = (uint64_t)&v278 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v311 = (char *)type metadata accessor for SiriKitReliabilityCodes();
  Swift::String v304 = *((void *)v311 - 1);
  MEMORY[0x1F4188790](v311);
  Swift::String v301 = ((char *)&v278 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v307 = v10;
  uint64_t v308 = v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v280 = (uint64_t)&v278 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v293 = (uint64_t)&v278 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v295 = (uint64_t)&v278 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v286 = (uint64_t)&v278 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v290 = (uint64_t)&v278 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  unint64_t v289 = (char *)&v278 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  BOOL v26 = (char *)&v278 - v25;
  MEMORY[0x1F4188790](v24);
  uint64_t v303 = (uint64_t)&v278 - v27;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  uint64_t v29 = MEMORY[0x1F4188790](v28 - 8);
  uint64_t v285 = (uint64_t)&v278 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v288 = (uint64_t)&v278 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v292 = (uint64_t)&v278 - v34;
  MEMORY[0x1F4188790](v33);
  uint64_t v300 = (uint64_t)&v278 - v35;
  uint64_t v36 = type metadata accessor for ActivityType();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = MEMORY[0x1F4188790](v36);
  uint64_t v279 = (char *)&v278 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = MEMORY[0x1F4188790](v38);
  uint64_t v294 = (char *)&v278 - v41;
  uint64_t v42 = MEMORY[0x1F4188790](v40);
  uint64_t v44 = (char *)&v278 - v43;
  uint64_t v45 = MEMORY[0x1F4188790](v42);
  v284 = (char *)&v278 - v46;
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  uint64_t v287 = (char *)&v278 - v48;
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  uint64_t v291 = (char *)&v278 - v50;
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  int64_t v53 = (char *)&v278 - v52;
  MEMORY[0x1F4188790](v51);
  unsigned int v55 = (char *)&v278 - v54;
  uint64_t v56 = type metadata accessor for SiriKitEventPayload();
  uint64_t v57 = *(void *)(v56 - 8);
  MEMORY[0x1F4188790](v56);
  int64_t v59 = (char *)&v278 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  SiriKitEvent.payload.getter();
  int v60 = (*(uint64_t (**)(char *, uint64_t))(v57 + 88))(v59, v56);
  int v61 = *MEMORY[0x1E4FA1978];
  uint64_t v310 = v36;
  if (v60 == v61)
  {
    (*(void (**)(char *, uint64_t))(v57 + 96))(v59, v56);
    uint64_t v62 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, intentTypeName: String, statusReason: SiriKitReliabilityCodes, flowActivity: FlowActivity?, flowMetadata: [String : Any]?, resolutionResult: AppResolutionResult?));
    uint64_t v63 = (uint64_t *)&v59[v62[12]];
    uint64_t v64 = v63[1];
    uint64_t v300 = *v63;
    id v65 = &v59[v62[16]];
    uint64_t v66 = *(void *)&v59[v62[24]];
    uint64_t v67 = (uint64_t)&v59[v62[20]];
    os_log_type_t v68 = &v59[v62[28]];
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v55, v59, v36);
    uint64_t v69 = v304;
    unint64_t v70 = v301;
    ((void (*)(NSObject *, char *, char *))v304[4].isa)(v301, v65, v311);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v67, (uint64_t)&v313, &demangling cache variable for type metadata for FlowActivity?);
    uint64_t v71 = (uint64_t)v68;
    uint64_t v72 = v302;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v71, v302, (uint64_t *)&demangling cache variable for type metadata for AppResolutionResult?);
    uint64_t v73 = v303;
    SiriKitEvent.timestamp.getter();
    TaskLoggingService.logAppResolutionResult(activityType:eventContext:eventTime:intentTypeName:statusReason:task:domainFlowActivity:flowMetadata:resolutionResult:)(v55, v305, v73, v300, v64, (uint64_t)v70, v306, (uint64_t)&v313, v66, v72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v308 + 8))(v73, v307);
    outlined destroy of ReferenceResolutionClientProtocol?(v72, (uint64_t *)&demangling cache variable for type metadata for AppResolutionResult?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v313, &demangling cache variable for type metadata for FlowActivity?);
    ((void (*)(NSObject *, char *))v69[1].isa)(v70, v311);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v55, v310);
    return;
  }
  uint64_t v302 = v37;
  if (v60 == *MEMORY[0x1E4FA1910])
  {
    (*(void (**)(char *, uint64_t))(v57 + 96))(v59, v56);
    uint64_t v74 = *(void **)v59;
    uint64_t v75 = *((void *)v59 + 1);
    uint64_t v76 = *((void *)v59 + 2);
    uint64_t v77 = v310;
    uint64_t v309 = (char *)*((void *)v309 + 2);
    uint64_t v78 = v302;
    (*(void (**)(char *, void, uint64_t))(v302 + 104))(v53, *MEMORY[0x1E4FA1AF8], v310);
    SiriKitEvent.timestamp.getter();
    uint64_t v315 = 0;
    long long v313 = 0u;
    long long v314 = 0u;
    if (v74)
    {
      id v79 = objc_msgSend(v74, sel_typeName);
      uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v81 = v80;

      swift_bridgeObjectRelease();
      uint64_t v76 = v81;
    }
    uint64_t v82 = v304;
    uint64_t v83 = v300;
    int v84 = v311;
    ((void (*)(uint64_t, void, char *))v304[13].isa)(v300, *MEMORY[0x1E4FA1A00], v311);
    ((void (*)(uint64_t, void, uint64_t, char *))v82[7].isa)(v83, 0, 1, v84);
    TaskLoggingService.logTaskStep(activityType:eventContext:eventTime:task:app:attribute:domainContext:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:platformContext:)(v53, v305, (uint64_t)v26, v306, 0, 0, 0, 0, (uint64_t)&v313, 0, v75, v76, 0, 0, 0, 0, 0, 0, v83,
      0);

    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v83, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v313, &demangling cache variable for type metadata for FlowActivity?);
    (*(void (**)(char *, uint64_t))(v308 + 8))(v26, v307);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v53, v77);
    return;
  }
  uint64_t v85 = v59;
  if (v60 == *MEMORY[0x1E4FA1940])
  {
    (*(void (**)(char *, uint64_t))(v57 + 96))(v59, v56);
    uint64_t v86 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (confirmationState: SiriKitConfirmationState, intent: INIntent?, taskName: String?, parameterName: String, confirmedItem: Any?, multicardinalIndex: Int?));
    uint64_t v87 = *(void **)&v59[v86[12]];
    uint64_t v88 = (uint64_t *)&v59[v86[16]];
    uint64_t v89 = *v88;
    uint64_t v90 = v88[1];
    uint64_t v91 = (uint64_t *)&v59[v86[20]];
    uint64_t v92 = (void *)v91[1];
    uint64_t v303 = *v91;
    uint64_t v93 = (uint64_t)&v85[v86[24]];
    uint64_t v94 = v298;
    int64_t v95 = v297;
    unint64_t v96 = v85;
    unint64_t v97 = v299;
    (*(void (**)(NSObject *, char *, void *))(v298 + 32))(v297, v96, v299);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v93, (uint64_t)v312, (uint64_t *)&demangling cache variable for type metadata for Any?);
    unint64_t v98 = v296;
    (*(void (**)(char *, NSObject *, void *))(v94 + 16))(v296, v95, v97);
    int v99 = (*(uint64_t (**)(char *, void *))(v94 + 88))(v98, v97);
    uint64_t v100 = v302;
    uint64_t v101 = v295;
    if (v99 != *MEMORY[0x1E4FA1A38])
    {
      if (v99 == *MEMORY[0x1E4FA1A40])
      {
        (*(void (**)(char *, void, uint64_t))(v302 + 104))(v294, *MEMORY[0x1E4FA1B00], v310);
        uint64_t v102 = v293;
        SiriKitEvent.timestamp.getter();
        if (v312[3])
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
          uint64_t v103 = swift_allocObject();
          *(_OWORD *)(v103 + 16) = xmmword_1BA04FD90;
          *(void *)(v103 + 56) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
          uint64_t v104 = swift_allocObject();
          *(void *)(v103 + 32) = v104;
          outlined init with copy of Any?((uint64_t)v312, v104 + 16);
        }
        else
        {
          uint64_t v103 = 0;
        }
        uint64_t v315 = 0;
        long long v313 = 0u;
        long long v314 = 0u;
        if (v87)
        {
          id v181 = objc_msgSend(v87, sel_typeName);
          uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v183 = v182;

          swift_bridgeObjectRelease();
          uint64_t v90 = v183;
        }
        uint64_t v184 = v300;
        ((void (*)(uint64_t, uint64_t, uint64_t, char *))v304[7].isa)(v300, 1, 1, v311);
        uint64_t v275 = v89;
        uint64_t v185 = v294;
        TaskLoggingService.logTaskStepAndEntityContextTier1(activityType:eventContext:eventTime:task:app:attribute:chosenItem:disambiguationItems:domainContext:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:)(v294, v305, v102, v306, 0, 0, 0, (uint64_t)v312, v103, 0, (uint64_t)&v313, 0, v275, v90, v303, v92, 0, 0, 0,
          0,
          v184);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of ReferenceResolutionClientProtocol?(v184, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v313, &demangling cache variable for type metadata for FlowActivity?);
        (*(void (**)(uint64_t, uint64_t))(v308 + 8))(v102, v307);
        (*(void (**)(char *, uint64_t))(v100 + 8))(v185, v310);
LABEL_31:
        (*(void (**)(NSObject *, void *))(v298 + 8))(v297, v299);
        uint64_t v141 = (uint64_t *)&demangling cache variable for type metadata for Any?;
        int64_t v142 = (char *)v312;
        goto LABEL_32;
      }
      if (v99 != *MEMORY[0x1E4FA1A30])
      {
        unint64_t v165 = *(void (**)(NSObject *, void *))(v298 + 8);
        uint64_t v166 = v299;
        v165(v297, v299);
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v312, (uint64_t *)&demangling cache variable for type metadata for Any?);
        v165(v98, v166);
        return;
      }
    }
    (*(void (**)(char *, void, uint64_t))(v302 + 104))(v44, *MEMORY[0x1E4FA1B08], v310);
    SiriKitEvent.timestamp.getter();
    uint64_t v315 = 0;
    long long v313 = 0u;
    long long v314 = 0u;
    if (v87)
    {
      id v143 = objc_msgSend(v87, sel_typeName);
      uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v145 = v144;

      swift_bridgeObjectRelease();
      uint64_t v90 = v145;
    }
    uint64_t v146 = v300;
    ((void (*)(uint64_t, uint64_t, uint64_t, char *))v304[7].isa)(v300, 1, 1, v311);
    TaskLoggingService.logTaskStep(activityType:eventContext:eventTime:task:app:attribute:domainContext:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:platformContext:)(v44, v305, v101, v306, 0, 0, 0, 0, (uint64_t)&v313, 0, v89, v90, v303, v92, 0, 0, 0, 0, v146,
      0);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v146, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v313, &demangling cache variable for type metadata for FlowActivity?);
    (*(void (**)(uint64_t, uint64_t))(v308 + 8))(v101, v307);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v44, v310);
    goto LABEL_31;
  }
  if (v60 == *MEMORY[0x1E4FA1990])
  {
    (*(void (**)(char *, uint64_t))(v57 + 96))(v59, v56);
    id v105 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, intentTypeName: String, app: App?, attribute: String?, parameterName: String?, responseId: String?, statusDescription: String?, statusReason: SiriKitReliabilityCodes?));
    unint64_t v106 = &v59[v105[12]];
    unint64_t v108 = *(NSObject **)v106;
    uint64_t v107 = *((void *)v106 + 1);
    Swift::String v304 = v108;
    uint64_t v298 = v107;
    Swift::String v311 = *(char **)&v59[v105[16]];
    uint64_t v109 = &v59[v105[20]];
    uint64_t v111 = *(NSObject **)v109;
    uint64_t v110 = (void *)*((void *)v109 + 1);
    Swift::String v301 = v111;
    uint64_t v299 = v110;
    uint64_t v112 = &v59[v105[24]];
    uint64_t v114 = *(NSObject **)v112;
    Swift::Int v113 = (char *)*((void *)v112 + 1);
    unint64_t v297 = v114;
    uint64_t v296 = v113;
    id v115 = &v59[v105[28]];
    Swift::String v116 = *((void *)v115 + 1);
    uint64_t v294 = *(char **)v115;
    uint64_t v293 = (uint64_t)v116;
    uint64_t v117 = (uint64_t *)&v59[v105[32]];
    uint64_t v118 = *v117;
    uint64_t v295 = v117[1];
    uint64_t v119 = v295;
    uint64_t v120 = (uint64_t)&v85[v105[36]];
    uint64_t v121 = v302;
    (*(void (**)(char *, char *, uint64_t))(v302 + 32))(v55, v85, v310);
    uint64_t v122 = v300;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v120, v300, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    uint64_t v123 = v303;
    SiriKitEvent.timestamp.getter();
    uint64_t v315 = 0;
    long long v313 = 0u;
    long long v314 = 0u;
    TaskLoggingService.logTaskStep(activityType:eventContext:eventTime:task:app:attribute:domainContext:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:platformContext:)(v55, v305, v123, v306, (uint64_t)v311, v301, (unint64_t)v299, 0, (uint64_t)&v313, 0, (uint64_t)v304, v298, (uint64_t)v297, v296, (uint64_t)v294, v116, v118, v119, v122,
      0);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v313, &demangling cache variable for type metadata for FlowActivity?);
    (*(void (**)(uint64_t, uint64_t))(v308 + 8))(v123, v307);
    outlined destroy of ReferenceResolutionClientProtocol?(v122, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    (*(void (**)(char *, uint64_t))(v121 + 8))(v55, v310);
    return;
  }
  int v124 = v55;
  if (v60 == *MEMORY[0x1E4FA1928])
  {
    (*(void (**)(char *, uint64_t))(v57 + 96))(v59, v56);
    unint64_t v125 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, intent: INIntent, app: App?, launchAppBehavior: LaunchAppBehavior?, parameterName: String?, responseId: String?, statusDescription: String?, statusReason: SiriKitReliabilityCodes?));
    uint64_t v126 = *(void **)&v59[v125[12]];
    Swift::String v304 = *(NSObject **)&v59[v125[16]];
    Swift::String v311 = &v59[v125[20]];
    uint64_t v127 = &v59[v125[24]];
    uint64_t v129 = *(NSObject **)v127;
    uint64_t v128 = (void *)*((void *)v127 + 1);
    Swift::String v301 = v129;
    uint64_t v299 = v128;
    uint64_t v130 = (uint64_t *)&v59[v125[28]];
    uint64_t v132 = *v130;
    os_log_type_t v131 = v130[1];
    uint64_t v298 = v132;
    unint64_t v297 = v131;
    uint64_t v133 = (uint64_t *)&v59[v125[32]];
    uint64_t v134 = *v133;
    uint64_t v296 = (char *)v133[1];
    uint64_t v135 = (uint64_t)v296;
    uint64_t v136 = (uint64_t)&v85[v125[36]];
    uint64_t v137 = v302;
    (*(void (**)(char *, char *, uint64_t))(v302 + 32))(v124, v85, v310);
    uint64_t v138 = v300;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v136, v300, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    uint64_t v309 = (char *)*((void *)v309 + 2);
    uint64_t v139 = v303;
    SiriKitEvent.timestamp.getter();
    uint64_t v315 = 0;
    long long v313 = 0u;
    long long v314 = 0u;
    id v140 = v126;
    TaskLoggingService.logTaskStep(activityType:eventContext:eventTime:task:app:attribute:domainContext:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:platformContext:)(v124, v305, v139, v306, (uint64_t)v304, 0, 0, 0, (uint64_t)&v313, v126, 0, 0, (uint64_t)v301, v299, v298, v297, v134, v135, v138,
      0);

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v313, &demangling cache variable for type metadata for FlowActivity?);
    (*(void (**)(uint64_t, uint64_t))(v308 + 8))(v139, v307);
    outlined destroy of ReferenceResolutionClientProtocol?(v138, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    (*(void (**)(char *, uint64_t))(v137 + 8))(v124, v310);
    uint64_t v141 = &demangling cache variable for type metadata for LaunchAppBehavior?;
    int64_t v142 = v311;
LABEL_32:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v142, v141);
    return;
  }
  if (v60 == *MEMORY[0x1E4FA1950])
  {
    (*(void (**)(char *, uint64_t))(v57 + 96))(v59, v56);
    uint64_t v147 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, app: App, intent: INIntent, parameterName: String, descriptionCode: Int?, flowActivity: FlowActivity?, launchAppBehavior: LaunchAppBehavior?, responseId: String?, statusReason: SiriKitReliabilityCodes?));
    uint64_t v148 = *(void *)&v59[v147[12]];
    uint64_t v149 = *(void **)&v59[v147[16]];
    uint64_t v150 = (uint64_t *)&v59[v147[20]];
    uint64_t v152 = *v150;
    uint64_t v151 = (char *)v150[1];
    uint64_t v303 = v152;
    Swift::String v311 = v151;
    uint64_t v153 = &v59[v147[24]];
    uint64_t v154 = *(void *)v153;
    char v155 = v153[8];
    uint64_t v156 = (uint64_t)&v85[v147[28]];
    uint64_t v157 = (NSObject **)&v85[v147[36]];
    uint64_t v159 = *v157;
    uint64_t v158 = v157[1];
    Swift::String v301 = v159;
    Swift::String v304 = v158;
    uint64_t v160 = (uint64_t)&v85[v147[40]];
    (*(void (**)(char *, char *, uint64_t))(v302 + 32))(v291, v85, v310);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v156, (uint64_t)&v313, &demangling cache variable for type metadata for FlowActivity?);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v160, v292, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    uint64_t v161 = (uint64_t)v289;
    SiriKitEvent.timestamp.getter();
    if (v155)
    {
      swift_retain();
      id v162 = v149;
      uint64_t v163 = 0;
      uint64_t v164 = 0;
    }
    else
    {
      v312[0] = v154;
      lazy protocol witness table accessor for type Int and conformance Int();
      swift_retain();
      id v186 = v149;
      uint64_t v163 = BinaryInteger.description.getter();
      uint64_t v164 = v187;
    }
    uint64_t v309 = &v85[v147[32]];
    uint64_t v188 = v292;
    uint64_t v189 = v291;
    TaskLoggingService.logTaskStep(activityType:eventContext:eventTime:task:app:attribute:domainContext:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:platformContext:)(v291, v305, v161, v306, v148, 0, 0, 0, (uint64_t)&v313, v149, 0, 0, v303, v311, (uint64_t)v301, v304, v163, v164, v292,
      0);
    swift_release_n();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v308 + 8))(v161, v307);
    outlined destroy of ReferenceResolutionClientProtocol?(v188, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v313, &demangling cache variable for type metadata for FlowActivity?);
    (*(void (**)(char *, uint64_t))(v302 + 8))(v189, v310);
    uint64_t v141 = &demangling cache variable for type metadata for LaunchAppBehavior?;
    int64_t v142 = v309;
    goto LABEL_32;
  }
  if (v60 == *MEMORY[0x1E4FA1960])
  {
    (*(void (**)(char *, uint64_t))(v57 + 96))(v59, v56);
    uint64_t v167 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, app: App, intent: INIntent, descriptionCode: Int?, flowActivity: FlowActivity?, responseId: String?, statusReason: SiriKitReliabilityCodes?));
    uint64_t v168 = *(void *)&v59[v167[12]];
    int v169 = *(void **)&v59[v167[16]];
    uint64_t v170 = &v59[v167[20]];
    uint64_t v171 = *(void *)v170;
    char v172 = v170[8];
    uint64_t v173 = (uint64_t)&v59[v167[24]];
    uint64_t v174 = (uint64_t *)&v59[v167[28]];
    uint64_t v176 = *v174;
    uint64_t v175 = v174[1];
    uint64_t v177 = (uint64_t)&v85[v167[32]];
    (*(void (**)(char *, char *, uint64_t))(v302 + 32))(v287, v85, v310);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v173, (uint64_t)&v313, &demangling cache variable for type metadata for FlowActivity?);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v177, v288, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    SiriKitEvent.timestamp.getter();
    if (v172)
    {
      swift_retain();
      id v178 = v169;
      uint64_t v179 = 0;
      uint64_t v180 = 0;
    }
    else
    {
      v312[0] = v171;
      lazy protocol witness table accessor for type Int and conformance Int();
      swift_retain();
      id v203 = v169;
      uint64_t v179 = BinaryInteger.description.getter();
      uint64_t v180 = v204;
    }
    uint64_t v205 = v307;
    uint64_t v206 = v288;
    uint64_t v276 = v176;
    uint64_t v207 = v287;
    uint64_t v208 = v290;
    TaskLoggingService.logTaskStep(activityType:eventContext:eventTime:task:app:attribute:domainContext:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:platformContext:)(v287, v305, v290, v306, v168, 0, 0, 0, (uint64_t)&v313, v169, 0, 0, 0, 0, v276, v175, v179, v180, v288,
      0);
    swift_release_n();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v308 + 8))(v208, v205);
    outlined destroy of ReferenceResolutionClientProtocol?(v206, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v313, &demangling cache variable for type metadata for FlowActivity?);
    (*(void (**)(char *, uint64_t))(v302 + 8))(v207, v310);
  }
  else
  {
    if (v60 == *MEMORY[0x1E4FA1920])
    {
      (*(void (**)(char *, uint64_t))(v57 + 96))(v59, v56);
      BOOL v190 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, app: App, intent: INIntent, descriptionCode: Int?, flowActivity: FlowActivity?, launchAppBehavior: LaunchAppBehavior?, responseId: String?, statusReason: SiriKitReliabilityCodes?));
      uint64_t v191 = *(void *)&v59[v190[12]];
      uint64_t v192 = *(void **)&v85[v190[16]];
      uint64_t v193 = &v85[v190[20]];
      uint64_t v194 = *(void *)v193;
      char v195 = v193[8];
      uint64_t v196 = (uint64_t)&v85[v190[24]];
      uint64_t v197 = &v85[v190[32]];
      uint64_t v198 = *((void *)v197 + 1);
      Swift::String v311 = *(char **)v197;
      uint64_t v199 = (uint64_t)&v85[v190[36]];
      (*(void (**)(char *, char *, uint64_t))(v302 + 32))(v284, v85, v310);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v196, (uint64_t)&v313, &demangling cache variable for type metadata for FlowActivity?);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v199, v285, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      SiriKitEvent.timestamp.getter();
      if (v195)
      {
        swift_retain();
        id v200 = v192;
        uint64_t v201 = 0;
        uint64_t v202 = 0;
      }
      else
      {
        v312[0] = v194;
        lazy protocol witness table accessor for type Int and conformance Int();
        swift_retain();
        id v234 = v192;
        uint64_t v201 = BinaryInteger.description.getter();
        uint64_t v202 = v235;
      }
      uint64_t v236 = &v85[v190[28]];
      uint64_t v237 = v285;
      v238 = v284;
      uint64_t v239 = v286;
      TaskLoggingService.logTaskStep(activityType:eventContext:eventTime:task:app:attribute:domainContext:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:platformContext:)(v284, v305, v286, v306, v191, 0, 0, 0, (uint64_t)&v313, v192, 0, 0, 0, 0, (uint64_t)v311, v198, v201, v202, v285,
        0);
      swift_release_n();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v308 + 8))(v239, v307);
      outlined destroy of ReferenceResolutionClientProtocol?(v237, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v313, &demangling cache variable for type metadata for FlowActivity?);
      (*(void (**)(char *, uint64_t))(v302 + 8))(v238, v310);
      uint64_t v141 = &demangling cache variable for type metadata for LaunchAppBehavior?;
      int64_t v142 = v236;
      goto LABEL_32;
    }
    if (v60 == *MEMORY[0x1E4FA18F8])
    {
      (*(void (**)(char *, uint64_t))(v57 + 96))(v59, v56);
      uint64_t v209 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, intentTypeName: String, app: App?, attribute: String?, chosenItem: Any?, disambiguationItems: [Any]?, domainContext: FLOWSchemaFLOWDomainContext?, flowActivity: FlowActivity?, parameterName: String?, responseId: String?, statusDescription: String?, statusReason: SiriKitReliabilityCodes?));
      uint64_t v210 = &v59[v209[12]];
      uint64_t v212 = *(NSObject **)v210;
      uint64_t v211 = *((void *)v210 + 1);
      Swift::String v304 = v212;
      uint64_t v298 = v211;
      Swift::String v311 = *(char **)&v59[v209[16]];
      uint64_t v213 = &v59[v209[20]];
      uint64_t v215 = *(NSObject **)v213;
      unint64_t v214 = (void *)*((void *)v213 + 1);
      Swift::String v301 = v215;
      uint64_t v299 = v214;
      uint64_t v216 = (uint64_t)&v59[v209[24]];
      unint64_t v297 = *(NSObject **)&v59[v209[28]];
      uint64_t v217 = v209[32];
      uint64_t v218 = v55;
      uint64_t v278 = v55;
      uint64_t v296 = *(char **)&v59[v217];
      uint64_t v219 = (uint64_t)&v59[v209[36]];
      uint64_t v220 = (uint64_t *)&v85[v209[40]];
      unint64_t v221 = (char *)v220[1];
      uint64_t v295 = *v220;
      uint64_t v291 = v221;
      uint64_t v222 = (uint64_t *)&v85[v209[44]];
      uint64_t v223 = v222[1];
      uint64_t v293 = *v222;
      uint64_t v292 = v223;
      Swift::Int v224 = (uint64_t *)&v85[v209[48]];
      uint64_t v225 = *v224;
      uint64_t v294 = (char *)v224[1];
      uint64_t v226 = v294;
      uint64_t v227 = (uint64_t)&v85[v209[52]];
      uint64_t v228 = v302;
      (*(void (**)(char *, char *, uint64_t))(v302 + 32))(v218, v85, v310);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v216, (uint64_t)v312, (uint64_t *)&demangling cache variable for type metadata for Any?);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v219, (uint64_t)&v313, &demangling cache variable for type metadata for FlowActivity?);
      uint64_t v229 = v227;
      uint64_t v230 = v300;
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v229, v300, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      uint64_t v309 = (char *)*((void *)v309 + 2);
      uint64_t v231 = v303;
      SiriKitEvent.timestamp.getter();
      Swift::String v277 = v223;
      Swift::Int v232 = v296;
      unint64_t v233 = v278;
      TaskLoggingService.logTaskStepAndEntityContextTier1(activityType:eventContext:eventTime:task:app:attribute:chosenItem:disambiguationItems:domainContext:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:)(v278, v305, v231, v306, (uint64_t)v311, v301, (unint64_t)v299, (uint64_t)v312, (uint64_t)v297, v296, (uint64_t)&v313, 0, (uint64_t)v304, v298, v295, v221, v293, v277, v225,
        (uint64_t)v226,
        v230);
      swift_bridgeObjectRelease();

      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v308 + 8))(v231, v307);
      outlined destroy of ReferenceResolutionClientProtocol?(v230, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v313, &demangling cache variable for type metadata for FlowActivity?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v312, (uint64_t *)&demangling cache variable for type metadata for Any?);
      (*(void (**)(char *, uint64_t))(v228 + 8))(v233, v310);
    }
    else if (v60 == *MEMORY[0x1E4FA1900])
    {
      (*(void (**)(char *, uint64_t))(v57 + 96))(v59, v56);
      LODWORD(v301) = *(_DWORD *)v59;
      unint64_t v240 = *((void *)v59 + 2);
      uint64_t v310 = *((void *)v59 + 1);
      uint64_t v302 = *((void *)v59 + 3);
      Swift::String v304 = *((void *)v59 + 4);
      uint64_t v241 = (void *)*((void *)v59 + 6);
      uint64_t v300 = *((void *)v59 + 5);
      uint64_t v243 = *((void *)v59 + 7);
      uint64_t v242 = (void *)*((void *)v59 + 8);
      uint64_t v244 = *((void *)v59 + 11);
      Swift::String v311 = (char *)*((void *)v85 + 10);
      uint64_t v245 = *((void *)v85 + 12);
      uint64_t v246 = *((unsigned int *)v85 + 26);
      unsigned __int8 v247 = v85[108];
      uint64_t v309 = (char *)*((void *)v309 + 2);
      uint64_t v248 = v303;
      SiriKitEvent.timestamp.getter();
      LOBYTE(v313) = v247;
      specialized TaskLoggingService.logSELFFlowTask(activityType:eventContext:eventTime:task:taskType:app:attribute:domainContext:parameterName:responseId:statusReasonDescription:statusReason:)((signed int)v301, v305, v248, v306, v310, v240, v302, (uint64_t)v304, v300, v241, v243, v242, v244, v245, v246 | ((unint64_t)v247 << 32));
      swift_bridgeObjectRelease();

      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v308 + 8))(v248, v307);
    }
    else if (v60 == *MEMORY[0x1E4FA1938])
    {
      (*(void (**)(char *, uint64_t))(v57 + 96))(v59, v56);
      uint64_t v249 = v282;
      uint64_t v250 = v281;
      uint64_t v251 = v283;
      (*(void (**)(char *, char *, uint64_t))(v282 + 32))(v281, v59, v283);
      Swift::Int v252 = (void *)*((void *)v309 + 2);
      uint64_t v253 = v303;
      SiriKitEvent.timestamp.getter();
      Swift::String v254 = v252 + 7;
      uint64_t v255 = v252[10];
      uint64_t v256 = v252[11];
      __swift_project_boxed_opaque_existential_1(v254, v255);
      (*(void (**)(void *, uint64_t, char *, void, void, uint64_t, uint64_t))(v256 + 16))(v305, v253, v250, *(void *)(v306 + 16), *(void *)(v306 + 24), v255, v256);
      (*(void (**)(uint64_t, uint64_t))(v308 + 8))(v253, v307);
      (*(void (**)(char *, uint64_t))(v249 + 8))(v250, v251);
    }
    else
    {
      uint64_t v258 = v307;
      uint64_t v257 = v308;
      uint64_t v259 = v309;
      if (v60 == *MEMORY[0x1E4FA1918])
      {
        (*(void (**)(char *, uint64_t))(v57 + 96))(v59, v56);
        uint64_t v260 = *(void *)v59;
        uint64_t v261 = (void *)*((void *)v59 + 2);
        TaskLoggingService.logDomainTier1Data(eventContext:task:taskType:tierOneFlowEvent:)(v305, v306, v260, *((void *)v85 + 1), *((id *)v85 + 2));
        swift_bridgeObjectRelease();
      }
      else if (v60 == *MEMORY[0x1E4FA1908])
      {
        (*(void (**)(char *, uint64_t))(v57 + 96))(v59, v56);
        uint64_t v263 = *(NSObject **)v59;
        unint64_t v262 = *((void *)v85 + 1);
        uint64_t v309 = (char *)*((void *)v259 + 2);
        uint64_t v264 = v302;
        (*(void (**)(char *, void, uint64_t))(v302 + 104))(v279, *MEMORY[0x1E4FA1AE0], v310);
        SiriKitEvent.timestamp.getter();
        uint64_t v315 = 0;
        long long v313 = 0u;
        long long v314 = 0u;
        v312[0] = v263;
        v312[1] = v262;
        v312[4] = 0x203A746365726944;
        v312[5] = 0xE800000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        swift_bridgeObjectRetain();
        uint64_t v265 = (uint64_t)v263;
        uint64_t v266 = v262;
        if (StringProtocol.contains<A>(_:)())
        {
          swift_bridgeObjectRelease();
          uint64_t v266 = 0xEE00746E65746E49;
          uint64_t v265 = 0x6465737261706E55;
        }
        uint64_t v267 = v300;
        ((void (*)(uint64_t, uint64_t, uint64_t, char *))v304[7].isa)(v300, 1, 1, v311);
        unint64_t v268 = v279;
        uint64_t v269 = v280;
        TaskLoggingService.logTaskStep(activityType:eventContext:eventTime:task:app:attribute:domainContext:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:platformContext:)(v279, v305, v280, v306, 0, v263, v262, 0, (uint64_t)&v313, 0, v265, v266, 0, 0, 0, 0, 0x6168436369706F54, 0xEC0000006465676ELL, v267,
          0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of ReferenceResolutionClientProtocol?(v267, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v313, &demangling cache variable for type metadata for FlowActivity?);
        (*(void (**)(uint64_t, uint64_t))(v257 + 8))(v269, v258);
        (*(void (**)(char *, uint64_t))(v264 + 8))(v268, v310);
      }
      else if (v60 == *MEMORY[0x1E4FA1948])
      {
        (*(void (**)(char *, uint64_t))(v57 + 96))(v59, v56);
        uint64_t v270 = *(void *)v59;
        unint64_t v271 = *((void *)v59 + 1);
        uint64_t v272 = (void *)*((void *)v85 + 2);
        uint64_t v273 = SiriKitEvent.machAbsoluteTime.getter();
        TaskLoggingService.logDomainPerfContext(eventContext:eventTime:task:taskType:domainPerfContext:)(v305, v273, v306, v270, v271, v272);
        swift_bridgeObjectRelease();
      }
      else if (v60 == *MEMORY[0x1E4FA1970])
      {
        (*(void (**)(char *, uint64_t))(v57 + 96))(v59, v56);
        Swift::String v274 = *(void **)v59;
        TaskLoggingService.logLocationAccessPrompt(eventContext:task:promptContext:)((uint64_t)v305, v306, *(void **)v59);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v57 + 8))(v59, v56);
      }
    }
  }
}

void TaskLoggingService.logTaskStep(activityType:eventContext:eventTime:task:app:attribute:domainContext:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:platformContext:)(char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6, unint64_t a7, void *a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, NSObject *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  uint64_t v21 = v20;
  uint64_t v109 = a6;
  unint64_t v110 = a7;
  uint64_t v111 = a4;
  uint64_t v112 = a19;
  uint64_t v104 = a17;
  uint64_t v105 = a18;
  uint64_t v107 = a14;
  uint64_t v108 = a3;
  uint64_t v106 = a13;
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  MEMORY[0x1F4188790](v26 - 8);
  uint64_t v90 = (uint64_t)&v86 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = a11;
  id v92 = a10;
  if (a12)
  {
    uint64_t v28 = a11;
    uint64_t v29 = a12;
  }
  else if (a10)
  {
    id v30 = objc_msgSend(a10, sel_typeName);
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = v31;
  }
  else
  {
    uint64_t v29 = 0xE700000000000000;
    uint64_t v28 = 0x6E776F6E6B6E55;
  }
  uint64_t v94 = a12;
  swift_bridgeObjectRetain();
  int64_t v95 = a1;
  uint64_t v32 = ActivityType.asSELFTypeAndReason(_:)(v112);
  char v34 = v33;
  uint64_t v35 = SiriKitEventContext.resultCandidateId.getter();
  if (v36) {
    uint64_t v37 = v35;
  }
  else {
    uint64_t v37 = 13101;
  }
  uint64_t v38 = a2;
  if (v36) {
    unint64_t v39 = v36;
  }
  else {
    unint64_t v39 = 0xE200000000000000;
  }
  uint64_t v40 = v38[10];
  unint64_t v41 = v38[11];
  uint64_t v103 = v38;
  uint64_t v42 = *(void *)(v111 + 16);
  unint64_t v43 = *(void *)(v111 + 24);
  LOBYTE(v114[0]) = v34 & 1;
  *((void *)&v44 + 1) = v34 & 1;
  *(void *)&long long v44 = v32;
  unint64_t v98 = v43;
  uint64_t v99 = v42;
  unint64_t v100 = v41;
  uint64_t v101 = v40;
  uint64_t v45 = TaskLoggingService.createFlowTaskSELFClientEvent(activityType:eventTime:resultCandidateId:taskType:app:appResolutionType:attribute:domainContext:executionRequestId:parameterName:platformContext:statusReason:statusReasonDescription:taskId:)(v32, v108, v37, v39, v28, v29, a5, 0x100000000, (uint64_t)v109, v110, a8, v40, v41, v106, v107, a20, v44 >> 32, v104, v105,
          v42,
          v43);
  swift_bridgeObjectRelease();
  uint64_t v97 = a5;
  unint64_t v102 = v29;
  if (v45)
  {
    uint64_t v89 = v45;
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    __swift_project_value_buffer(v46, (uint64_t)static Logger.instrumentation);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    uint64_t v47 = Logger.logObject.getter();
    int v48 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v47, (os_log_type_t)v48))
    {
      LODWORD(v87) = v48;
      uint64_t v49 = swift_slowAlloc();
      uint64_t v86 = swift_slowAlloc();
      v114[0] = v86;
      *(_DWORD *)uint64_t v49 = 136315906;
      os_log_t v88 = v47;
      if (v32 > 0xD0)
      {
        uint64_t v51 = @"FLOWSTATETYPE_UNKNOWN";
        uint64_t v52 = @"FLOWSTATETYPE_UNKNOWN";
      }
      else
      {
        uint64_t v50 = (int)v32;
        uint64_t v51 = off_1E61EE2B8[v50];
        uint64_t v52 = off_1E61EE940[v50];
      }
      unint64_t v53 = v98;
      unsigned int v55 = v51;
      uint64_t v56 = v52;
      uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v59 = v58;

      uint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v59, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v60 = v99;
      uint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v53, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v49 + 22) = 2080;
      unint64_t v61 = v102;
      swift_bridgeObjectRetain();
      uint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v61, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v49 + 32) = 2080;
      uint64_t v62 = v103[12];
      unint64_t v63 = v103[13];
      swift_bridgeObjectRetain();
      uint64_t v64 = v62;
      uint64_t v54 = v60;
      uint64_t v113 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v63, v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_t v65 = v88;
      _os_log_impl(&dword_1B9C64000, v88, (os_log_type_t)v87, "#TaskLoggingService SELF Log - logging task step: %s for taskId: %s, taskType: %s, interactionId:%s", (uint8_t *)v49, 0x2Au);
      uint64_t v66 = v86;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v66, -1, -1);
      MEMORY[0x1BA9E48C0](v49, -1, -1);

      a5 = v97;
    }
    else
    {

      swift_release_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      unint64_t v53 = v98;
      uint64_t v54 = v99;
    }
    uint64_t v67 = v89;
    (*(void (**)(void *))(v21 + 96))(v89);
    TaskLoggingService.emitRequestLink(executionRequestId:taskId:)(v101, v100, v54, v53);
  }
  uint64_t v91 = v28;
  uint64_t v89 = (void *)a9;
  outlined init with copy of ReferenceResolutionClientProtocol(v21 + 16, (uint64_t)v114);
  uint64_t v69 = v115;
  uint64_t v68 = v116;
  uint64_t v86 = (uint64_t)__swift_project_boxed_opaque_existential_1(v114, v115);
  uint64_t v96 = v21;
  if (a5)
  {
    uint64_t v70 = App.appIdentifier.getter();
    uint64_t v72 = v71;
  }
  else
  {
    uint64_t v70 = 0;
    uint64_t v72 = 0;
  }
  uint64_t v73 = (uint64_t)v107;
  os_log_t v88 = a16;
  uint64_t v87 = a15;
  uint64_t v74 = v90;
  outlined init with copy of ReferenceResolutionClientProtocol?(v112, v90, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  uint64_t v75 = type metadata accessor for SiriKitReliabilityCodes();
  uint64_t v76 = *(void *)(v75 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v74, 1, v75) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v74, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    uint64_t v77 = 0;
    uint64_t v78 = 0;
  }
  else
  {
    uint64_t v77 = SiriKitReliabilityCodes.rawValue.getter();
    uint64_t v78 = v79;
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v74, v75);
  }
  uint64_t v80 = *(void (**)(char *, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v68 + 8);
  uint64_t v84 = v69;
  uint64_t v85 = v68;
  uint64_t v81 = v106;
  uint64_t v82 = v95;
  uint64_t v83 = v108;
  v80(v95, v108, v91, v102, v70, v72, v101, v100, v106, v73, v77, v78, v99, v98, v84, v85, v86);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v114);
  TaskLoggingService.logAndDonateClassicFlowTask(activityType:eventContext:eventTime:task:app:attribute:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:shouldDonateToCurare:appResolutionName:flowMetadata:)(v82, v103, v83, v111, v97, v109, v110, (uint64_t)v89, v92, v93, v94, v81, v73, v87, (uint64_t)v88, v104, v105, v112, 1u,
    0,
    0,
    0);
}

uint64_t ActivityType.asSELFTypeAndReason(_:)(uint64_t a1)
{
  uint64_t v42 = a1;
  uint64_t v2 = type metadata accessor for SiriKitReliabilityCodes();
  uint64_t v43 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v38 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SiriKitReliabilityCodes?, SiriKitReliabilityCodes?));
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v40 = (uint64_t)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v39 = (uint64_t)&v38 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v38 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v44 = (uint64_t)&v38 - v15;
  uint64_t v16 = type metadata accessor for ActivityType();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v17 + 104))(v19, *MEMORY[0x1E4FA1B10], v16);
  lazy protocol witness table accessor for type ActivityType and conformance ActivityType((unint64_t *)&lazy protocol witness table cache variable for type ActivityType and conformance ActivityType, MEMORY[0x1E4FA1B38]);
  uint64_t v41 = v1;
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v47 == v45 && v48 == v46)
  {
    uint64_t v20 = v4;
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    uint64_t v21 = v42;
    uint64_t v22 = v44;
    outlined init with copy of ReferenceResolutionClientProtocol?(v42, v44, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  }
  else
  {
    uint64_t v20 = v4;
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    uint64_t v21 = v42;
    uint64_t v22 = v44;
    outlined init with copy of ReferenceResolutionClientProtocol?(v42, v44, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    if ((v23 & 1) == 0)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v22, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      uint64_t v24 = v43;
      goto LABEL_14;
    }
  }
  uint64_t v24 = v43;
  (*(void (**)(char *, void, uint64_t))(v43 + 104))(v14, *MEMORY[0x1E4FA19E8], v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v14, 0, 1, v2);
  uint64_t v25 = *(int *)(v20 + 48);
  uint64_t v26 = (uint64_t)v6;
  uint64_t v27 = (uint64_t)&v6[v25];
  outlined init with copy of ReferenceResolutionClientProtocol?(v22, (uint64_t)v6, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v14, v27, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v28((uint64_t)v6, 1, v2) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    outlined destroy of ReferenceResolutionClientProtocol?(v22, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    if (v28(v27, 1, v2) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
LABEL_13:
      uint64_t v33 = 0x2B00000000;
      unsigned int v34 = 27;
      return v33 | v34;
    }
    goto LABEL_10;
  }
  uint64_t v29 = v39;
  outlined init with copy of ReferenceResolutionClientProtocol?(v26, v39, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  if (v28(v27, 1, v2) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    outlined destroy of ReferenceResolutionClientProtocol?(v44, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v29, v2);
LABEL_10:
    outlined destroy of ReferenceResolutionClientProtocol?(v26, &demangling cache variable for type metadata for (SiriKitReliabilityCodes?, SiriKitReliabilityCodes?));
    goto LABEL_14;
  }
  id v30 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 32))(v38, v27, v2);
  lazy protocol witness table accessor for type ActivityType and conformance ActivityType(&lazy protocol witness table cache variable for type SiriKitReliabilityCodes and conformance SiriKitReliabilityCodes, MEMORY[0x1E4FA1A10]);
  char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v32 = *(void (**)(char *, uint64_t))(v24 + 8);
  v32(v30, v2);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  outlined destroy of ReferenceResolutionClientProtocol?(v44, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  v32((char *)v29, v2);
  outlined destroy of ReferenceResolutionClientProtocol?(v26, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  if (v31) {
    goto LABEL_13;
  }
LABEL_14:
  unsigned int v34 = ActivityType.flowStateType.getter();
  uint64_t v35 = v40;
  outlined init with copy of ReferenceResolutionClientProtocol?(v21, v40, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v35, 1, v2) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v35, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    uint64_t v33 = 0;
  }
  else
  {
    uint64_t v36 = SiriKitReliabilityCodes.flowStatusReason.getter();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v35, v2);
    uint64_t v33 = v36 << 32;
  }
  return v33 | v34;
}

uint64_t SiriKitEventContext.resultCandidateId.getter()
{
  unint64_t v1 = *(void *)(v0 + 24);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 16);
    uint64_t v3 = one-time initialization token for instrumentation;
    swift_bridgeObjectRetain();
    if (v3 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v18 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v1, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v9 = "SiriKitEventContext: Vending overriden rcId: %s";
LABEL_6:
      _os_log_impl(&dword_1B9C64000, v5, v6, v9, v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v8, -1, -1);
      MEMORY[0x1BA9E48C0](v7, -1, -1);

      return v2;
    }
    goto LABEL_13;
  }
  type metadata accessor for SiriEnvironment();
  if (static SiriEnvironment.forCurrentTask.getter())
  {
    SiriEnvironment.currentRequest.getter();
    swift_release();
    uint64_t v2 = CurrentRequest.resultCandidateId.getter();
    unint64_t v11 = v10;
    swift_release();
    if (v11)
    {
      if (one-time initialization token for instrumentation != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)static Logger.instrumentation);
      swift_bridgeObjectRetain_n();
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        uint64_t v8 = swift_slowAlloc();
        uint64_t v18 = v8;
        *(_DWORD *)uint64_t v7 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v11, &v18);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        uint64_t v9 = "SiriKitEventContext: Vending rcId from SiriEnvironment's current flow invocation request: %s";
        goto LABEL_6;
      }
LABEL_13:

      swift_bridgeObjectRelease_n();
      return v2;
    }
  }
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.instrumentation);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl(&dword_1B9C64000, v14, v15, "SiriKitEventContext: No rcId found in SiriEnvironment. This event might be getting sent from a detached Task or dispatch queue, which loses SiriEnvironment context, and is a bug in the code which is emitting this event.", v16, 2u);
    MEMORY[0x1BA9E48C0](v16, -1, -1);
  }

  return 0;
}

void *TaskLoggingService.createFlowTaskSELFClientEvent(activityType:eventTime:resultCandidateId:taskType:app:appResolutionType:attribute:domainContext:executionRequestId:parameterName:platformContext:statusReason:statusReasonDescription:taskId:)(unsigned int a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, unint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21)
{
  unint64_t v27 = a21;
  unint64_t v28 = a13;
  id v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0460]), sel_init);
  if (!v29) {
    goto LABEL_18;
  }
  id v30 = v29;
  id v87 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA04D0]), sel_init);
  if (!v87)
  {

LABEL_18:
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    __swift_project_value_buffer(v54, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    unsigned int v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      v89[0] = v58;
      *(_DWORD *)uint64_t v57 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v57 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a20, a21, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v57 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a12, a13, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v55, v56, "#TaskLoggingService SELF Log - unable to instantiate SELF schema, not logging Task step for resultCandidateId: %s, taskId: %s, executionRequestId: %s", (uint8_t *)v57, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v58, -1, -1);
      MEMORY[0x1BA9E48C0](v57, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  char v31 = TaskLoggingService.constructMetaData(resultCandidateId:executionRequestId:taskId:)(a3, a4, a12, a13, a20, a21);
  if (!v31)
  {
    if (one-time initialization token for instrumentation == -1)
    {
LABEL_25:
      uint64_t v59 = type metadata accessor for Logger();
      __swift_project_value_buffer(v59, (uint64_t)static Logger.instrumentation);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v60, v61))
      {
        uint64_t v62 = swift_slowAlloc();
        uint64_t v63 = swift_slowAlloc();
        v89[0] = v63;
        *(_DWORD *)uint64_t v62 = 136315650;
        swift_bridgeObjectRetain();
        uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v62 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a20, v27, v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v62 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a12, v28, v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B9C64000, v60, v61, "#TaskLoggingService SELF Log - unable to construct metaData, not logging Task step for resultCandidateId: %s, taskId: %s, executionRequestId: %s", (uint8_t *)v62, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v63, -1, -1);
        MEMORY[0x1BA9E48C0](v62, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      return 0;
    }
LABEL_59:
    swift_once();
    goto LABEL_25;
  }
  uint64_t v85 = v31;
  uint64_t v32 = a19;
  id v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0450]), sel_init);
  if (v33)
  {
    unsigned int v34 = v33;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(v21 + 144))(v89, a7);
    uint64_t v36 = v90;
    uint64_t v35 = v91;
    __swift_project_boxed_opaque_existential_1(v89, v90);
    uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v36, v35);
    if (v38)
    {
      unint64_t v39 = v38;
    }
    else
    {
      uint64_t v37 = 0x6C7070615F746F6ELL;
      unint64_t v39 = 0xEE00656C62616369;
    }
    uint64_t v40 = (void *)MEMORY[0x1BA9E2DD0](v37, v39);
    swift_bridgeObjectRelease();
    objc_msgSend(v34, sel_setBundleId_, v40);

    uint64_t v41 = v90;
    uint64_t v42 = v91;
    __swift_project_boxed_opaque_existential_1(v89, v90);
    uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 16))(v41, v42);
    if (v44)
    {
      unint64_t v45 = v44;
    }
    else
    {
      uint64_t v43 = 0x6C7070615F746F6ELL;
      unint64_t v45 = 0xEE00656C62616369;
    }
    uint64_t v46 = (void *)MEMORY[0x1BA9E2DD0](v43, v45);
    swift_bridgeObjectRelease();
    objc_msgSend(v34, sel_setAppVersion_, v46);

    if ((a8 & 0x100000000) == 0) {
      objc_msgSend(v34, sel_setAppResolutionType_, a8);
    }
    objc_msgSend(v87, sel_setAppContext_, v34);

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v89);
    uint64_t v32 = a19;
  }
  uint64_t v47 = a11;
  unint64_t v28 = specialized static SiriKitMetricsUtils.formulateSimplifiedStatusDescription(statusDescription:)(a18, v32);
  uint64_t v49 = v48;
  id v50 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA04C0]), sel_init);
  if (v50)
  {
    uint64_t v51 = v50;
    unint64_t v84 = v28;
    uint64_t v52 = (void *)MEMORY[0x1BA9E2DD0](a5, a6);
    objc_msgSend(v51, sel_setCurrentTaskName_, v52);

    if (a10) {
      unint64_t v53 = (void *)MEMORY[0x1BA9E2DD0](a9, a10);
    }
    else {
      unint64_t v53 = 0;
    }
    unint64_t v28 = a1;
    uint64_t v66 = a15;
    objc_msgSend(v51, sel_setCurrentTaskType_, v53);

    objc_msgSend(v51, sel_setFlowStateType_, a1);
    id v67 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA04C8]), sel_init);
    os_log_t v65 = v87;
    if (v67)
    {
      uint64_t v68 = v67;
      if ((a17 & 0x100000000) != 0) {
        uint64_t v69 = 0;
      }
      else {
        uint64_t v69 = a17;
      }
      objc_msgSend(v67, sel_setStatusReason_, v69);
      objc_msgSend(v51, sel_setFlowStateReason_, v68);
    }
    if (a15) {
      uint64_t v66 = (void *)MEMORY[0x1BA9E2DD0](a14, a15);
    }
    unint64_t v27 = a21;
    unint64_t v64 = a13;
    objc_msgSend(v51, sel_setResolvedSlotName_, v66);

    if (v49)
    {
      uint64_t v70 = (void *)MEMORY[0x1BA9E2DD0](v84, v49);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v70 = 0;
    }
    objc_msgSend(v51, sel_setFlowStateReasonDescription_, v70);

    objc_msgSend(v87, sel_setFlowState_, v51);
    uint64_t v47 = a11;
    if (a11) {
      goto LABEL_43;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v27 = a21;
    unint64_t v64 = a13;
    os_log_t v65 = v87;
    if (a11)
    {
LABEL_43:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      uint64_t v71 = swift_allocObject();
      *(_OWORD *)(v71 + 16) = xmmword_1BA0578E0;
      *(void *)(v71 + 32) = v47;
      v89[0] = v71;
      specialized Array._endMutation()();
      unint64_t v28 = v89[0];
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for FLOWSchemaFLOWDomainContext);
      id v72 = v47;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v65, sel_setDomainContexts_, isa);
    }
  }
  Date.timeIntervalSince1970.getter();
  if ((~*(void *)&v74 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_57;
  }
  if (v74 <= -9.22337204e18)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if (v74 >= 9.22337204e18)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  objc_msgSend(v65, sel_setTimestampMs_, (uint64_t)v74);
  objc_msgSend(v65, sel_setSequenceNum_, 0);
  if (a16)
  {
    uint64_t v75 = one-time initialization token for instrumentation;
    id v76 = a16;
    if (v75 != -1) {
      swift_once();
    }
    uint64_t v77 = type metadata accessor for Logger();
    __swift_project_value_buffer(v77, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v78, v79))
    {
      uint64_t v80 = swift_slowAlloc();
      uint64_t v81 = swift_slowAlloc();
      v89[0] = v81;
      *(_DWORD *)uint64_t v80 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v80 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a20, v27, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v80 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a12, v64, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v78, v79, "#TaskLoggingService Added platformContext for resultCandidateId: %s, taskId: %s, executionRequestId: %s", (uint8_t *)v80, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v81, -1, -1);
      uint64_t v82 = v80;
      os_log_t v65 = v87;
      MEMORY[0x1BA9E48C0](v82, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    objc_msgSend(v65, sel_setPlatformRelatedContext_, v76);
  }
  objc_msgSend(v30, sel_setFlowStep_, v65);
  objc_msgSend(v30, sel_setEventMetadata_, v85);

  return v30;
}

char *TaskLoggingService.constructMetaData(resultCandidateId:executionRequestId:taskId:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v129 = a6;
  uint64_t v130 = a5;
  unint64_t v132 = a4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v121 = (char *)&v110 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v120 = (char *)&v110 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v128 = (uint64_t)&v110 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v110 - v17;
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v131 = (uint64_t)&v110 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v110 - v21;
  uint64_t v23 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v117 = (char *)&v110 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  id v29 = (char *)&v110 - v28;
  uint64_t v30 = MEMORY[0x1F4188790](v27);
  uint64_t v118 = (char *)&v110 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v127 = (char *)&v110 - v33;
  MEMORY[0x1F4188790](v32);
  uint64_t v35 = (char *)&v110 - v34;
  uint64_t v36 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0490]), sel_init);
  if (!v36)
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.instrumentation);
    unint64_t v41 = v129;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      v134[0] = v45;
      *(_DWORD *)uint64_t v44 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v44 + 12) = 2080;
      unint64_t v46 = v132;
      swift_bridgeObjectRetain();
      uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, v41, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v44 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, v46, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v42, v43, "#TaskLoggingService SELF Log - unable to instantiate SELF schema, not logging Task step for resultCandidateId: %s, taskId: %s, executionRequestId: %s", (uint8_t *)v44, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v45, -1, -1);
      MEMORY[0x1BA9E48C0](v44, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  uint64_t v37 = v36;
  uint64_t v116 = v29;
  uint64_t v119 = a3;
  UUID.init(uuidString:)();
  uint64_t v123 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  uint64_t v124 = v24 + 48;
  unsigned int v38 = v123(v22, 1, v23);
  uint64_t v122 = a1;
  uint64_t v125 = v24;
  if (v38 == 1)
  {
    unint64_t v39 = &off_1E61F1000;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v35, v22, v23);
    id v47 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
    uint64_t v115 = v23;
    id v48 = v47;
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    unint64_t v39 = &off_1E61F1000;
    id v50 = objc_msgSend(v48, sel_initWithNSUUID_, isa);

    objc_msgSend(v37, sel_setTrpId_, v50);
    uint64_t v23 = v115;
    uint64_t v24 = v125;
    (*(void (**)(char *, uint64_t))(v125 + 8))(v35, v115);
  }
  uint64_t v51 = (void *)MEMORY[0x1BA9E2DD0](v122, a2);
  objc_msgSend(v37, sel_setResultCandidateId_, v51);

  uint64_t v52 = v131;
  unint64_t v53 = v129;
  UUID.init(uuidString:)();
  outlined init with copy of ReferenceResolutionClientProtocol?(v52, (uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v54 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v123;
  if (v123(v18, 1, v23) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    __swift_project_value_buffer(v55, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    os_log_type_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      uint64_t v59 = swift_slowAlloc();
      v134[0] = v59;
      *(_DWORD *)uint64_t v58 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, v53, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v56, v57, "#TaskLoggingService SELF Log - current taskId: %s is not a valid UUID String, cannot emit SELF message", v58, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v59, -1, -1);
      MEMORY[0x1BA9E48C0](v58, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    outlined destroy of ReferenceResolutionClientProtocol?(v131, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    return 0;
  }
  uint64_t v114 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
  uint64_t v115 = v24 + 32;
  v114(v127, v18, v23);
  id v60 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
  Class v61 = UUID._bridgeToObjectiveC()().super.isa;
  id v62 = objc_msgSend(v60, (SEL)&off_1E61F1080 + 4, v61);

  objc_msgSend(v37, sel_setTaskId_, v62);
  id v63 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1380]), sel_init);
  if (v63)
  {
    unint64_t v64 = v63;
    objc_msgSend(v63, sel_setMajor_, 0);
    objc_msgSend(v64, sel_setMinor_, 5);
    objc_msgSend(v37, sel_setVersion_, v64);
  }
  uint64_t v65 = v128;
  TaskLoggingService.createFlowId(executionRequestId:)(v128);
  uint64_t v66 = v65;
  uint64_t v67 = (uint64_t)v120;
  outlined init with copy of ReferenceResolutionClientProtocol?(v66, (uint64_t)v120, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if (v54(v67, 1, v23) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v67, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v68 = type metadata accessor for Logger();
    __swift_project_value_buffer(v68, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = swift_slowAlloc();
      unint64_t v72 = v53;
      uint64_t v73 = swift_slowAlloc();
      v134[0] = v73;
      *(_DWORD *)uint64_t v71 = 136315394;
      uint64_t v120 = v37;
      swift_bridgeObjectRetain();
      uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, v72, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v71 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v122, a2, v134);
      uint64_t v54 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v123;
      unint64_t v39 = &off_1E61F1000;
      uint64_t v37 = v120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v69, v70, "#TaskLoggingService SELF Log - metadata has flowId: nil, taskId: %s, rcId: %s", (uint8_t *)v71, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v73, -1, -1);
      MEMORY[0x1BA9E48C0](v71, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    unint64_t v113 = a2;
    uint64_t v74 = v67;
    uint64_t v75 = v118;
    v114(v118, (char *)v74, v23);
    id v76 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
    Class v77 = UUID._bridgeToObjectiveC()().super.isa;
    id v78 = objc_msgSend(v76, (SEL)&off_1E61F1080 + 4, v77);

    objc_msgSend(v37, sel_setFlowId_, v78);
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v79 = type metadata accessor for Logger();
    __swift_project_value_buffer(v79, (uint64_t)static Logger.instrumentation);
    uint64_t v80 = v125;
    uint64_t v81 = v116;
    (*(void (**)(char *, char *, uint64_t))(v125 + 16))(v116, v75, v23);
    swift_bridgeObjectRetain_n();
    unint64_t v82 = v113;
    swift_bridgeObjectRetain_n();
    uint64_t v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.debug.getter();
    LODWORD(v120) = v84;
    if (os_log_type_enabled(v83, v84))
    {
      uint64_t v85 = swift_slowAlloc();
      uint64_t v112 = swift_slowAlloc();
      v134[0] = v112;
      *(_DWORD *)uint64_t v85 = 136315650;
      os_log_t v110 = v83;
      uint64_t v86 = UUID.uuidString.getter();
      uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v111 = *(void (**)(char *, uint64_t))(v80 + 8);
      v111(v81, v23);
      *(_WORD *)(v85 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, v53, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v85 + 22) = 2080;
      unint64_t v39 = &off_1E61F1000;
      uint64_t v54 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v123;
      swift_bridgeObjectRetain();
      uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v122, v82, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      os_log_t v88 = v110;
      _os_log_impl(&dword_1B9C64000, v110, (os_log_type_t)v120, "#TaskLoggingService SELF Log - metadata has flowId: %s, taskId: %s, rcId: %s", (uint8_t *)v85, 0x20u);
      uint64_t v89 = v112;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v89, -1, -1);
      MEMORY[0x1BA9E48C0](v85, -1, -1);

      v111(v118, v23);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      uint64_t v90 = *(void (**)(char *, uint64_t))(v80 + 8);
      v90(v81, v23);
      v90(v75, v23);
      unint64_t v39 = &off_1E61F1000;
    }
  }
  uint64_t v91 = (uint64_t)v121;
  uint64_t v92 = v119;
  UUID.init(uuidString:)();
  if (v54(v91, 1, v23) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v91, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v93 = type metadata accessor for Logger();
    __swift_project_value_buffer(v93, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    uint64_t v94 = Logger.logObject.getter();
    os_log_type_t v95 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v94, v95))
    {
      uint64_t v96 = (uint8_t *)swift_slowAlloc();
      uint64_t v97 = swift_slowAlloc();
      unint64_t v98 = v132;
      uint64_t v99 = v97;
      v134[0] = v97;
      *(_DWORD *)uint64_t v96 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v98, v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v94, v95, "#TaskLoggingService: invalid UUID for executionRequestId %s", v96, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v99, -1, -1);
      MEMORY[0x1BA9E48C0](v96, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    outlined destroy of ReferenceResolutionClientProtocol?(v128, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    (*(void (**)(char *, uint64_t))(v125 + 8))(v127, v23);
  }
  else
  {
    unint64_t v100 = v117;
    v114(v117, (char *)v91, v23);
    id v101 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
    Class v102 = UUID._bridgeToObjectiveC()().super.isa;
    id v103 = objc_msgSend(v101, (SEL)v39[236], v102);

    uint64_t v104 = v126[24];
    uint64_t v105 = v126[25];
    __swift_project_boxed_opaque_existential_1(v126 + 21, v104);
    char v106 = (*(uint64_t (**)(uint64_t, uint64_t))(v105 + 16))(v104, v105);
    uint64_t v107 = &selRef_setSubRequestId_;
    if ((v106 & 1) == 0) {
      uint64_t v107 = &selRef_setRequestId_;
    }
    objc_msgSend(v37, *v107, v103);

    uint64_t v108 = *(void (**)(char *, uint64_t))(v125 + 8);
    v108(v100, v23);
    outlined destroy of ReferenceResolutionClientProtocol?(v128, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    v108(v127, v23);
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v131, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  return v37;
}

uint64_t TaskLoggingService.createFlowId(executionRequestId:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.instrumentation);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_1B9C64000, v11, v12, "#TaskLoggingService SELF Log - invalid executionRequestId string, cannot derive flowId form it", v13, 2u);
      MEMORY[0x1BA9E48C0](v13, -1, -1);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a1, 1, 1, v6);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    (*(void (**)(char *))(v1 + 128))(v9);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
}

uint64_t protocol witness for AppInformationProvider.resolveAppBundleId.getter in conformance AppInformationResolver()
{
  return dispatch thunk of AppInformationResolver.resolveAppBundleId.getter();
}

uint64_t protocol witness for AppInformationProvider.resolveAppVersion.getter in conformance AppInformationResolver()
{
  return dispatch thunk of AppInformationResolver.resolveAppVersion.getter();
}

uint64_t specialized static SiriKitMetricsUtils.formulateSimplifiedStatusDescription(statusDescription:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    if ((a1 || a2 != 0xE000000000000000) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v27 = 0x6573726170;
      unint64_t v28 = 0xE500000000000000;
      v26[0] = a1;
      v26[1] = a2;
      uint64_t v7 = type metadata accessor for Locale();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
      lazy protocol witness table accessor for type String and conformance String();
      swift_bridgeObjectRetain();
      StringProtocol.range<A>(of:options:range:locale:)();
      char v9 = v8;
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for Locale?);
      if (v9)
      {
        if (String.count.getter() <= 250) {
          return a1;
        }
        if (one-time initialization token for instrumentation != -1) {
          swift_once();
        }
        uint64_t v14 = type metadata accessor for Logger();
        __swift_project_value_buffer(v14, (uint64_t)static Logger.instrumentation);
        uint64_t v15 = Logger.logObject.getter();
        os_log_type_t v16 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v15, v16))
        {
          uint64_t v17 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v17 = 134217984;
          uint64_t v27 = 250;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1B9C64000, v15, v16, "#SiriKitMetricsUtils - truncating string at char side %ld", v17, 0xCu);
          MEMORY[0x1BA9E48C0](v17, -1, -1);
        }

        String.index(_:offsetBy:)();
      }
      else
      {
        if (one-time initialization token for instrumentation != -1) {
          swift_once();
        }
        uint64_t v10 = type metadata accessor for Logger();
        __swift_project_value_buffer(v10, (uint64_t)static Logger.instrumentation);
        uint64_t v11 = Logger.logObject.getter();
        os_log_type_t v12 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v11, v12))
        {
          uint64_t v13 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v13 = 0;
          _os_log_impl(&dword_1B9C64000, v11, v12, "#SiriKitMetricsUtils - truncating string at parse", v13, 2u);
          MEMORY[0x1BA9E48C0](v13, -1, -1);
        }
      }
      uint64_t v18 = String.subscript.getter();
      uint64_t v20 = v19;
      uint64_t v22 = v21;
      uint64_t v24 = v23;
      swift_bridgeObjectRelease();
      a1 = MEMORY[0x1BA9E2EC0](v18, v20, v22, v24);
      swift_bridgeObjectRelease();
      return a1;
    }
    swift_bridgeObjectRetain();
  }
  return a1;
}

void TaskLoggingService.emitRequestLink(executionRequestId:taskId:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v95 = a3;
  uint64_t v7 = type metadata accessor for UUID();
  os_log_t v97 = *(os_log_t *)(v7 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v94 = (char *)&v81 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v81 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v81 - v20;
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  uint64_t v24 = (char *)&v81 - v23;
  uint64_t v25 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = MEMORY[0x1F4188790](v25);
  unint64_t v28 = (char *)&v81 - v27;
  MEMORY[0x1F4188790](v26);
  if (!a4)
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.instrumentation);
    os_log_t v97 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v97, v38)) {
      goto LABEL_17;
    }
    unint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v39 = 0;
    uint64_t v40 = "#TaskLoggingService SELF Log - current taskId is not set, cannot emit request link info";
    goto LABEL_16;
  }
  if (!a2)
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.instrumentation);
    os_log_t v97 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v97, v38)) {
      goto LABEL_17;
    }
    unint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v39 = 0;
    uint64_t v40 = "#TaskLoggingService SELF Log - current executionRequestId is not set, cannot emit request link info";
LABEL_16:
    _os_log_impl(&dword_1B9C64000, v97, v38, v40, v39, 2u);
    MEMORY[0x1BA9E48C0](v39, -1, -1);
LABEL_17:
    os_log_t v42 = v97;

    return;
  }
  uint64_t v91 = v7;
  uint64_t v92 = (uint64_t)&v81 - v29;
  uint64_t v93 = a1;
  uint64_t v88 = v30;
  id v31 = objc_allocWithZone(MEMORY[0x1E4FA1300]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v32 = objc_msgSend(v31, sel_init);
  if (v32)
  {
    id v89 = v32;
    id v90 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1310]), sel_init);
    if (v90)
    {
      id v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1310]), sel_init);
      if (v33)
      {
        id v87 = v33;
        objc_msgSend(v90, sel_setComponent_, 3);
        uint64_t v34 = v92;
        TaskLoggingService.createFlowId(executionRequestId:)(v92);
        outlined init with copy of ReferenceResolutionClientProtocol?(v34, (uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        os_log_t v35 = v97;
        uint64_t v36 = v91;
        Class isa = v97[6].isa;
        os_log_t v86 = v97 + 6;
        if (((unsigned int (*)(char *, uint64_t, uint64_t))isa)(v28, 1, v91) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v28, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        }
        else
        {
          ((void (*)(char *, char *, uint64_t))v35[4].isa)(v14, v28, v36);
          id v49 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
          Class v50 = UUID._bridgeToObjectiveC()().super.isa;
          id v51 = objc_msgSend(v49, sel_initWithNSUUID_, v50);

          objc_msgSend(v90, sel_setUuid_, v51);
          ((void (*)(char *, uint64_t))v97[1].isa)(v14, v36);
        }
        uint64_t v52 = v36;
        uint64_t v53 = v88;
        UUID.init(uuidString:)();
        outlined init with copy of ReferenceResolutionClientProtocol?(v53, (uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))isa)(v24, 1, v52) == 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          if (one-time initialization token for instrumentation != -1) {
            swift_once();
          }
          uint64_t v54 = type metadata accessor for Logger();
          __swift_project_value_buffer(v54, (uint64_t)static Logger.instrumentation);
          uint64_t v55 = Logger.logObject.getter();
          os_log_type_t v56 = static os_log_type_t.error.getter();
          BOOL v57 = os_log_type_enabled(v55, v56);
          id v58 = v90;
          if (v57)
          {
            uint64_t v59 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v59 = 0;
            _os_log_impl(&dword_1B9C64000, v55, v56, "#TaskLoggingService SELF Log - current executionRequestId is not a valid UUID String, cannot emit request link info", v59, 2u);
            MEMORY[0x1BA9E48C0](v59, -1, -1);
          }

          uint64_t v60 = v53;
        }
        else
        {
          Class v84 = v97[4].isa;
          ((void (*)(char *, char *, uint64_t))v84)(v94, v24, v52);
          uint64_t v61 = *(void *)(v96 + 192);
          uint64_t v62 = *(void *)(v96 + 200);
          __swift_project_boxed_opaque_existential_1((void *)(v96 + 168), v61);
          if ((*(uint64_t (**)(uint64_t, uint64_t))(v62 + 16))(v61, v62)) {
            uint64_t v63 = 43;
          }
          else {
            uint64_t v63 = 1;
          }
          id v64 = v87;
          objc_msgSend(v87, sel_setComponent_, v63);
          id v65 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
          Class v66 = UUID._bridgeToObjectiveC()().super.isa;
          id v67 = objc_msgSend(v65, sel_initWithNSUUID_, v66);

          objc_msgSend(v64, sel_setUuid_, v67);
          id v68 = v89;
          id v69 = v90;
          objc_msgSend(v89, sel_setSource_, v90);
          objc_msgSend(v68, sel_setTarget_, v64);
          if (one-time initialization token for instrumentation != -1) {
            swift_once();
          }
          uint64_t v70 = type metadata accessor for Logger();
          __swift_project_value_buffer(v70, (uint64_t)static Logger.instrumentation);
          outlined init with copy of ReferenceResolutionClientProtocol?(v92, (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v71 = Logger.logObject.getter();
          int v72 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v71, (os_log_type_t)v72))
          {
            int v82 = v72;
            os_log_t v83 = v71;
            uint64_t v73 = swift_slowAlloc();
            uint64_t v81 = swift_slowAlloc();
            v99[0] = v81;
            *(_DWORD *)uint64_t v73 = 136315650;
            swift_bridgeObjectRetain();
            uint64_t v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, a4, v99);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v73 + 12) = 2080;
            outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v21, (uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            uint64_t v74 = v91;
            if (((unsigned int (*)(char *, uint64_t, uint64_t))isa)(v18, 1, v91) == 1)
            {
              unint64_t v75 = 0xE300000000000000;
              uint64_t v76 = 7104878;
            }
            else
            {
              ((void (*)(char *, char *, uint64_t))v84)(v10, v18, v74);
              uint64_t v76 = UUID.uuidString.getter();
              unint64_t v75 = v77;
              ((void (*)(char *, uint64_t))v97[1].isa)(v10, v74);
            }
            uint64_t v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v75, v99);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            *(_WORD *)(v73 + 22) = 2080;
            swift_bridgeObjectRetain();
            uint64_t v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, a2, v99);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            os_log_t v78 = v83;
            _os_log_impl(&dword_1B9C64000, v83, (os_log_type_t)v82, "#TaskLoggingService SELF Log - logging request link for taskId: %s, flowId:%s, executionRequestId: %s", (uint8_t *)v73, 0x20u);
            uint64_t v79 = v81;
            swift_arrayDestroy();
            MEMORY[0x1BA9E48C0](v79, -1, -1);
            MEMORY[0x1BA9E48C0](v73, -1, -1);
          }
          else
          {
            swift_bridgeObjectRelease_n();
            outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for UUID?);

            swift_bridgeObjectRelease_n();
          }
          id v80 = v89;
          (*(void (**)(id))(v96 + 96))(v89);

          ((void (*)(char *, uint64_t))v97[1].isa)(v94, v91);
          uint64_t v60 = v88;
        }
        outlined destroy of ReferenceResolutionClientProtocol?(v60, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        outlined destroy of ReferenceResolutionClientProtocol?(v92, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        return;
      }

      id v43 = v90;
    }
    else
    {
      id v43 = v89;
    }
  }
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v44 = type metadata accessor for Logger();
  __swift_project_value_buffer(v44, (uint64_t)static Logger.instrumentation);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = swift_slowAlloc();
    uint64_t v48 = swift_slowAlloc();
    v99[0] = v48;
    *(_DWORD *)uint64_t v47 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, a4, v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v47 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, a2, v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v45, v46, "#TaskLoggingService SELF Log - unable to create request link info for SELF for taskId: %s, executionRequestId: %s", (uint8_t *)v47, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v48, -1, -1);
    MEMORY[0x1BA9E48C0](v47, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

uint64_t protocol witness for BiomeDonator.donateSiriExecutionTaskStep(activityType:eventTime:intentTypeName:appBundleId:requestId:slotName:statusReason:taskId:) in conformance SiriKitBiomeDonator(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, NSObject *a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14)
{
  return SiriKitBiomeDonator.donateSiriExecutionTaskStep(activityType:eventTime:intentTypeName:appBundleId:requestId:slotName:statusReason:taskId:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t SiriKitBiomeDonator.donateSiriExecutionTaskStep(activityType:eventTime:intentTypeName:appBundleId:requestId:slotName:statusReason:taskId:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, NSObject *a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v71 = a6;
  uint64_t v72 = a8;
  uint64_t v69 = a5;
  unint64_t v70 = a7;
  uint64_t v68 = a2;
  uint64_t v78 = a13;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>.Continuation.YieldResult);
  uint64_t v74 = *(void *)(v17 - 8);
  uint64_t v75 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v73 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for ActivityType();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v76 = a11;
  uint64_t v77 = a3;
  uint64_t v23 = a9;
  uint64_t v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.instrumentation);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a1, v19);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  LODWORD(v65) = v26;
  BOOL v27 = os_log_type_enabled(v25, v26);
  unint64_t v67 = a4;
  if (v27)
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v64 = a1;
    uint64_t v29 = v28;
    uint64_t v63 = swift_slowAlloc();
    v80[0] = v63;
    *(_DWORD *)uint64_t v29 = 136316162;
    os_log_t v62 = v25;
    if (a14) {
      uint64_t v30 = v78;
    }
    else {
      uint64_t v30 = 0x3E6C696E3CLL;
    }
    uint64_t v66 = a9;
    if (a14) {
      unint64_t v31 = a14;
    }
    else {
      unint64_t v31 = 0xE500000000000000;
    }
    uint64_t v61 = v19;
    swift_bridgeObjectRetain();
    uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, a4, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v32 = a12;
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v29 + 22) = 2080;
    uint64_t v33 = ActivityType.rawValue.getter();
    uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v61);
    *(_WORD *)(v29 + 32) = 2080;
    if (a12) {
      uint64_t v35 = v76;
    }
    else {
      uint64_t v35 = 0x3E6C696E3CLL;
    }
    if (a12) {
      unint64_t v36 = a12;
    }
    else {
      unint64_t v36 = 0xE500000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v29 + 42) = 2080;
    if (a10) {
      uint64_t v37 = v66;
    }
    else {
      uint64_t v37 = 0x3E6C696E3CLL;
    }
    if (a10) {
      unint64_t v38 = (unint64_t)a10;
    }
    else {
      unint64_t v38 = 0xE500000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v39 = v37;
    uint64_t v23 = v66;
    uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v38, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    os_log_t v40 = v62;
    _os_log_impl(&dword_1B9C64000, v62, (os_log_type_t)v65, "#SiriKitBiomeDonator - donating execution event to BIOME for taskId: %s, taskType: %s, stepType: %s for statusReason:%s, with slotName: %s", (uint8_t *)v29, 0x34u);
    uint64_t v41 = v63;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v41, -1, -1);
    MEMORY[0x1BA9E48C0](v29, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    unint64_t v32 = a12;
  }
  uint64_t v42 = v76;
  Date.timeIntervalSinceReferenceDate.getter();
  double v44 = v43;
  uint64_t v45 = 1701736302;
  uint64_t v46 = v78;
  if (!a14) {
    uint64_t v46 = 1701736302;
  }
  uint64_t v76 = v46;
  uint64_t v47 = 0xE400000000000000;
  if (a14) {
    unint64_t v48 = a14;
  }
  else {
    unint64_t v48 = 0xE400000000000000;
  }
  uint64_t v68 = v48;
  swift_bridgeObjectRetain();
  uint64_t v49 = ActivityType.executionTaskStepType.getter();
  if (v32) {
    uint64_t v50 = v42;
  }
  else {
    uint64_t v50 = 1701736302;
  }
  uint64_t v65 = v50;
  uint64_t v66 = v49;
  if (v32) {
    unint64_t v51 = v32;
  }
  else {
    unint64_t v51 = 0xE400000000000000;
  }
  uint64_t v64 = v51;
  if (a10) {
    uint64_t v52 = v23;
  }
  else {
    uint64_t v52 = 1701736302;
  }
  uint64_t v63 = v52;
  if (a10) {
    uint64_t v53 = a10;
  }
  else {
    uint64_t v53 = 0xE400000000000000;
  }
  os_log_t v62 = v53;
  if (v71) {
    uint64_t v54 = v69;
  }
  else {
    uint64_t v54 = 1701736302;
  }
  if (v71) {
    uint64_t v55 = v71;
  }
  else {
    uint64_t v55 = 0xE400000000000000;
  }
  if (v72)
  {
    uint64_t v45 = v70;
    uint64_t v47 = v72;
  }
  unint64_t v70 = type metadata accessor for BMSiriExecutionEvent();
  uint64_t v56 = v67;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v57 = BMSiriExecutionEvent.__allocating_init(taskID:taskStep:statusReason:slotValue:intentName:appBundleId:interactionId:absoluteTimestamp:)(v76, v68, v66, v65, v64, v63, (uint64_t)v62, v77, v44, v56, v54, v55, v45, v47);
  v80[0] = (uint64_t)v57;
  v80[1] = v78;
  v80[2] = a14;
  swift_bridgeObjectRetain();
  id v58 = v57;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>.Continuation);
  uint64_t v59 = v73;
  AsyncStream.Continuation.yield(_:)();

  return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v59, v75);
}

unint64_t type metadata accessor for BMSiriExecutionEvent()
{
  unint64_t result = lazy cache variable for type metadata for BMSiriExecutionEvent;
  if (!lazy cache variable for type metadata for BMSiriExecutionEvent)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for BMSiriExecutionEvent);
  }
  return result;
}

id BMSiriExecutionEvent.__allocating_init(taskID:taskStep:statusReason:slotValue:intentName:appBundleId:interactionId:absoluteTimestamp:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  id v30 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v22 = (void *)MEMORY[0x1BA9E2DD0](a1, a2);
  swift_bridgeObjectRelease();
  uint64_t v23 = (void *)MEMORY[0x1BA9E2DD0](a4, a5);
  swift_bridgeObjectRelease();
  uint64_t v24 = (void *)MEMORY[0x1BA9E2DD0](a6, a7);
  swift_bridgeObjectRelease();
  uint64_t v25 = (void *)MEMORY[0x1BA9E2DD0](a8, a10);
  swift_bridgeObjectRelease();
  os_log_type_t v26 = (void *)MEMORY[0x1BA9E2DD0](a11, a12);
  swift_bridgeObjectRelease();
  BOOL v27 = (void *)MEMORY[0x1BA9E2DD0](a13, a14);
  swift_bridgeObjectRelease();
  id v28 = objc_msgSend(v30, sel_initWithTaskID_taskStep_statusReason_slotValue_intentName_appBundleId_interactionId_absoluteTimestamp_, v22, a3, v23, v24, v25, v26, a9, v27);

  return v28;
}

void TaskLoggingService.logAndDonateClassicFlowTask(activityType:eventContext:eventTime:task:app:attribute:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:shouldDonateToCurare:appResolutionName:flowMetadata:)(char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6, unint64_t a7, uint64_t a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned __int8 a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v322 = a8;
  unint64_t v330 = a7;
  Swift::String v331 = a6;
  uint64_t v339 = a5;
  uint64_t v351 = a4;
  uint64_t v332 = a3;
  v348 = a2;
  uint64_t v367 = *MEMORY[0x1E4F143B8];
  uint64_t v23 = type metadata accessor for String.Encoding();
  MEMORY[0x1F4188790](v23 - 8);
  v307[1] = (char *)v307 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v342 = type metadata accessor for SiriKitReliabilityCodes();
  unint64_t v340 = *(void *)(v342 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v342);
  Swift::String v311 = (char *)v307 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  uint64_t v317 = (uint64_t)v307 - v27;
  uint64_t v329 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (SiriKitReliabilityCodes?, SiriKitReliabilityCodes?));
  MEMORY[0x1F4188790](v329);
  uint64_t v345 = (uint64_t)v307 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  uint64_t v30 = MEMORY[0x1F4188790](v29 - 8);
  uint64_t v315 = (uint64_t)v307 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  os_log_t v321 = (os_log_t)((char *)v307 - v33);
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v334 = (char *)v307 - v35;
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  unint64_t v38 = (char *)v307 - v37;
  uint64_t v39 = MEMORY[0x1F4188790](v36);
  uint64_t v41 = (char *)v307 - v40;
  MEMORY[0x1F4188790](v39);
  double v43 = (char *)v307 - v42;
  uint64_t v44 = type metadata accessor for ActivityType();
  uint64_t v45 = *(void *)(v44 - 8);
  uint64_t v46 = MEMORY[0x1F4188790](v44);
  uint64_t v309 = (char *)v307 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = MEMORY[0x1F4188790](v46);
  uint64_t v308 = (char *)v307 - v49;
  uint64_t v50 = MEMORY[0x1F4188790](v48);
  unint64_t v318 = (char *)v307 - v51;
  uint64_t v52 = MEMORY[0x1F4188790](v50);
  long long v313 = (char *)v307 - v53;
  uint64_t v54 = MEMORY[0x1F4188790](v52);
  uint64_t v316 = (char *)v307 - v55;
  uint64_t v56 = MEMORY[0x1F4188790](v54);
  uint64_t v57 = MEMORY[0x1F4188790](v56);
  uint64_t v337 = (uint64_t)v307 - v58;
  uint64_t v59 = MEMORY[0x1F4188790](v57);
  os_log_t v335 = (os_log_t)((char *)v307 - v60);
  uint64_t v61 = MEMORY[0x1F4188790](v59);
  unint64_t v327 = (char *)v307 - v62;
  uint64_t v63 = MEMORY[0x1F4188790](v61);
  uint64_t v336 = (uint64_t)v307 - v64;
  uint64_t v65 = MEMORY[0x1F4188790](v63);
  uint64_t v66 = MEMORY[0x1F4188790](v65);
  uint64_t v68 = (char *)v307 - v67;
  uint64_t v350 = v66;
  long long v314 = v69;
  uint64_t v344 = v70;
  if (a11)
  {
    uint64_t v341 = a10;
    unint64_t v352 = a11;
  }
  else if (a9)
  {
    id v71 = objc_msgSend(a9, sel_typeName);
    uint64_t v341 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v352 = v72;
  }
  else
  {
    unint64_t v352 = 0xE700000000000000;
    uint64_t v341 = 0x6E776F6E6B6E55;
  }
  uint64_t v343 = a18;
  uint64_t v73 = *(void (**)(void))(v45 + 104);
  unsigned int v325 = *MEMORY[0x1E4FA1B18];
  uint64_t v326 = v45 + 104;
  uint64_t v324 = (void (*)(char *, void, uint64_t))v73;
  v73(v68);
  uint64_t v74 = lazy protocol witness table accessor for type ActivityType and conformance ActivityType((unint64_t *)&lazy protocol witness table cache variable for type ActivityType and conformance ActivityType, MEMORY[0x1E4FA1B38]);
  swift_bridgeObjectRetain();
  v349 = a1;
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v323 = v74;
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (*(_OWORD *)v357 == v358) {
    char v75 = 1;
  }
  else {
    char v75 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  uint64_t v338 = a17;
  uint64_t v333 = a16;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  id v346 = *(void (**)(char *, uint64_t))(v45 + 8);
  uint64_t v347 = v45 + 8;
  v346(v68, v350);
  outlined init with copy of ReferenceResolutionClientProtocol?(v343, (uint64_t)v43, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  if ((v75 & 1) == 0)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v43, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    os_log_t v86 = v348;
    uint64_t v85 = v349;
    uint64_t v83 = v351;
    unint64_t v84 = v352;
    uint64_t v87 = v350;
    goto LABEL_20;
  }
  unint64_t v76 = v340;
  uint64_t v77 = v342;
  (*(void (**)(char *, void, uint64_t))(v340 + 104))(v41, *MEMORY[0x1E4FA19E0], v342);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v41, 0, 1, v77);
  uint64_t v78 = v345;
  uint64_t v79 = v345 + *(int *)(v329 + 48);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v43, v345, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  uint64_t v80 = v78;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v41, v79, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  uint64_t v81 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 48);
  if (v81(v80, 1, v77) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v41, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v43, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    int v82 = v81(v79, 1, v77);
    uint64_t v83 = v351;
    unint64_t v84 = v352;
    if (v82 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v345, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      os_log_t v86 = v348;
      uint64_t v85 = v349;
      uint64_t v87 = v350;
LABEL_19:
      uint64_t v92 = v83;
      specialized TaskLoggingService.updateFlowTaskState(aceServiceInvoker:taskName:interactionId:taskId:)(v86 + 4, v341, v84, v86[12], v86[13], *(void *)(v83 + 16), *(void *)(v83 + 24));
      goto LABEL_26;
    }
  }
  else
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v80, (uint64_t)v38, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    if (v81(v79, 1, v77) != 1)
    {
      unint64_t v88 = v340;
      uint64_t v89 = v317;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v340 + 32))(v317, v79, v77);
      lazy protocol witness table accessor for type ActivityType and conformance ActivityType(&lazy protocol witness table cache variable for type SiriKitReliabilityCodes and conformance SiriKitReliabilityCodes, MEMORY[0x1E4FA1A10]);
      char v90 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v91 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
      v91(v89, v77);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v41, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v43, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      v91((uint64_t)v38, v77);
      outlined destroy of ReferenceResolutionClientProtocol?(v345, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      os_log_t v86 = v348;
      uint64_t v85 = v349;
      uint64_t v83 = v351;
      unint64_t v84 = v352;
      uint64_t v87 = v350;
      if (v90) {
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v41, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v43, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    (*(void (**)(char *, uint64_t))(v340 + 8))(v38, v77);
    uint64_t v83 = v351;
    unint64_t v84 = v352;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v345, &demangling cache variable for type metadata for (SiriKitReliabilityCodes?, SiriKitReliabilityCodes?));
  os_log_t v86 = v348;
  uint64_t v85 = v349;
  uint64_t v87 = v350;
LABEL_18:
  if (*(unsigned char *)(v83 + 33)) {
    goto LABEL_19;
  }
LABEL_20:
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v93 = type metadata accessor for Logger();
  __swift_project_value_buffer(v93, (uint64_t)static Logger.instrumentation);
  uint64_t v345 = v45;
  uint64_t v94 = *(void (**)(NSObject *, char *, uint64_t))(v45 + 16);
  uint64_t v95 = v344;
  uint64_t v96 = v85;
  v94(v344, v85, v87);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  os_log_t v97 = Logger.logObject.getter();
  os_log_type_t v98 = static os_log_type_t.debug.getter();
  uint64_t v99 = v87;
  int v100 = v98;
  if (os_log_type_enabled(v97, v98))
  {
    uint64_t v101 = swift_slowAlloc();
    uint64_t v102 = swift_slowAlloc();
    v357[0] = (id)v102;
    *(_DWORD *)uint64_t v101 = 136315906;
    LODWORD(v329) = v100;
    uint64_t v103 = *(void *)(v83 + 16);
    unint64_t v104 = *(void *)(v351 + 24);
    swift_bridgeObjectRetain();
    *(void *)&long long v358 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v103, v104, (uint64_t *)v357);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v101 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)&long long v358 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v341, v352, (uint64_t *)v357);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v101 + 22) = 2080;
    uint64_t v105 = ActivityType.rawValue.getter();
    *(void *)&long long v358 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v105, v106, (uint64_t *)v357);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v346((char *)v95, v99);
    *(_WORD *)(v101 + 32) = 2080;
    uint64_t v107 = v348[12];
    unint64_t v108 = v348[13];
    swift_bridgeObjectRetain();
    uint64_t v109 = v107;
    unint64_t v84 = v352;
    *(void *)&long long v358 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v108, (uint64_t *)v357);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    uint64_t v92 = v351;
    uint64_t v85 = v349;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v97, (os_log_type_t)v329, "#TaskLoggingService - not updating flow task state for taskId: %s, taskType: %s, stepType: %s for interactionId:%s", (uint8_t *)v101, 0x2Au);
    swift_arrayDestroy();
    uint64_t v110 = v102;
    os_log_t v86 = v348;
    MEMORY[0x1BA9E48C0](v110, -1, -1);
    MEMORY[0x1BA9E48C0](v101, -1, -1);

    uint64_t v87 = v99;
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_release_n();
    v346((char *)v95, v87);

    swift_release_n();
    uint64_t v85 = v96;
    uint64_t v92 = v83;
  }
  uint64_t v45 = v345;
LABEL_26:
  uint64_t v329 = a15;
  uint64_t v328 = a14;
  uint64_t v111 = v336;
  uint64_t v344 = *(NSObject **)(v45 + 16);
  uint64_t v345 = v45 + 16;
  ((void (*)(uint64_t, char *, uint64_t))v344)(v336, v85, v87);
  int v112 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 88))(v111, v87);
  int v113 = *MEMORY[0x1E4FA1B28];
  unint64_t v352 = v84;
  if (v112 != v113 && v112 != *MEMORY[0x1E4FA1B20] && v112 != *MEMORY[0x1E4FA1B30] && v112 != *MEMORY[0x1E4FA1AE8])
  {
    v346((char *)v111, v87);
    os_log_t v114 = v335;
LABEL_35:
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v115 = type metadata accessor for Logger();
    __swift_project_value_buffer(v115, (uint64_t)static Logger.instrumentation);
    ((void (*)(os_log_t, char *, uint64_t))v344)(v114, v85, v87);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    uint64_t v116 = Logger.logObject.getter();
    uint64_t v117 = v87;
    os_log_type_t v118 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v116, v118))
    {
      uint64_t v119 = swift_slowAlloc();
      uint64_t v336 = swift_slowAlloc();
      v357[0] = (id)v336;
      *(_DWORD *)uint64_t v119 = 136315906;
      uint64_t v120 = *(void *)(v92 + 16);
      unint64_t v121 = *(void *)(v351 + 24);
      swift_bridgeObjectRetain();
      *(void *)&long long v358 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v120, v121, (uint64_t *)v357);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_t v335 = v116;
      *(_WORD *)(v119 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)&long long v358 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v341, v352, (uint64_t *)v357);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v119 + 22) = 2080;
      uint64_t v122 = ActivityType.rawValue.getter();
      *(void *)&long long v358 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v122, v123, (uint64_t *)v357);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v346((char *)v114, v350);
      *(_WORD *)(v119 + 32) = 2080;
      uint64_t v124 = v86[12];
      unint64_t v125 = v86[13];
      swift_bridgeObjectRetain();
      uint64_t v85 = v349;
      *(void *)&long long v358 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v124, v125, (uint64_t *)v357);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_t v126 = v335;
      _os_log_impl(&dword_1B9C64000, v335, v118, "#TaskLoggingService - not sending update context to reset FlowTaskState for taskId: %s, taskType: %s, stepType: %s for interactionId:%s", (uint8_t *)v119, 0x2Au);
      uint64_t v127 = v336;
      swift_arrayDestroy();
      uint64_t v128 = v127;
      uint64_t v117 = v350;
      MEMORY[0x1BA9E48C0](v128, -1, -1);
      MEMORY[0x1BA9E48C0](v119, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_release_n();
      v346((char *)v114, v117);

      swift_release_n();
    }
    uint64_t v129 = v339;
    unint64_t v130 = v340;
    uint64_t v131 = (uint64_t)v334;
    goto LABEL_47;
  }
  os_log_t v114 = v335;
  if (v338
    && (v333 == 0x764F726576726553 && v338 == 0xEE00656469727265
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    goto LABEL_35;
  }
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v132 = type metadata accessor for Logger();
  __swift_project_value_buffer(v132, (uint64_t)static Logger.instrumentation);
  uint64_t v133 = v327;
  ((void (*)(char *, char *, uint64_t))v344)(v327, v85, v87);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v134 = Logger.logObject.getter();
  os_log_type_t v135 = static os_log_type_t.debug.getter();
  uint64_t v117 = v87;
  int v136 = v135;
  if (os_log_type_enabled(v134, v135))
  {
    uint64_t v137 = swift_slowAlloc();
    uint64_t v336 = swift_slowAlloc();
    v357[0] = (id)v336;
    *(_DWORD *)uint64_t v137 = 136315650;
    swift_bridgeObjectRetain();
    *(void *)&long long v358 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v341, v84, (uint64_t *)v357);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v137 + 12) = 2080;
    uint64_t v138 = *(void *)(v351 + 16);
    LODWORD(v335) = v136;
    uint64_t v139 = v133;
    unint64_t v140 = *(void *)(v351 + 24);
    swift_bridgeObjectRetain();
    *(void *)&long long v358 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v138, v140, (uint64_t *)v357);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v137 + 22) = 2080;
    os_log_t v86 = v348;
    uint64_t v141 = ActivityType.rawValue.getter();
    *(void *)&long long v358 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v141, v142, (uint64_t *)v357);
    uint64_t v85 = v349;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v346(v139, v350);
    _os_log_impl(&dword_1B9C64000, v134, (os_log_type_t)v335, "#TaskLoggingService - sending update context to reset FlowTaskState for TaskType: %s, TaskId: %s, ActivityType: %s", (uint8_t *)v137, 0x20u);
    uint64_t v143 = v336;
    swift_arrayDestroy();
    uint64_t v144 = v143;
    uint64_t v117 = v350;
    MEMORY[0x1BA9E48C0](v144, -1, -1);
    MEMORY[0x1BA9E48C0](v137, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
    v346(v133, v117);
  }

  uint64_t v129 = v339;
  unint64_t v130 = v340;
  uint64_t v131 = (uint64_t)v334;
  specialized TaskLoggingService.resetFlowTaskState(aceServiceInvoker:)(v86 + 4);
LABEL_47:
  uint64_t v319 = a21;
  uint64_t v145 = v337;
  ((void (*)(uint64_t, char *, uint64_t))v344)(v337, v85, v117);
  uint64_t v146 = v86[10];
  unint64_t v147 = v86[11];
  unint64_t v148 = v329;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  Date.timeIntervalSince1970.getter();
  uint64_t v150 = v149;
  uint64_t v320 = type metadata accessor for SiriKitFlowActivity();
  swift_allocObject();
  uint64_t v151 = (char *)specialized SiriKitFlowActivity.init(activityType:app:executionRequestId:responseId:taskStepStartTime:)(v145, v129, v146, v147, v328, v148, v150, 0);
  swift_release();
  outlined init with copy of ReferenceResolutionClientProtocol?(v343, v131, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  uint64_t v152 = v342;
  os_log_t v335 = *(os_log_t *)(v130 + 48);
  uint64_t v336 = v130 + 48;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v335)(v131, 1, v342) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v131, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    uint64_t v153 = 0;
    uint64_t v154 = 0;
  }
  else
  {
    uint64_t v153 = SiriKitReliabilityCodes.rawValue.getter();
    uint64_t v154 = v155;
    (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v131, v152);
  }
  unint64_t v156 = v352;
  uint64_t v157 = v319;
  if (v319)
  {
    uint64_t v337 = a20;
    swift_bridgeObjectRelease();
    uint64_t v154 = (char *)v157;
  }
  else
  {
    uint64_t v337 = v153;
  }
  unint64_t v327 = v154;
  uint64_t v158 = a13;
  uint64_t v334 = v151;
  uint64_t v310 = a13;
  if (!a22)
  {
    swift_bridgeObjectRetain();
    goto LABEL_65;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BA04FD90;
  *(void *)(inited + 32) = 0xD000000000000014;
  *(void *)(inited + 40) = 0x80000001BA0709C0;
  *(void *)(inited + 72) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
  *(void *)(inited + 48) = a22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (!*(void *)(specialized Dictionary.init(dictionaryLiteral:)(inited) + 16)) {
    goto LABEL_58;
  }
  uint64_t v160 = self;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v357[0] = 0;
  id v162 = objc_msgSend(v160, sel_dataWithJSONObject_options_error_, isa, 0, v357);

  id v163 = v357[0];
  if (v162)
  {
    uint64_t v164 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v166 = v165;

    static String.Encoding.utf8.getter();
    String.init(data:encoding:)();
    uint64_t v151 = v334;
    outlined consume of Data._Representation(v164, v166);
    uint64_t v152 = v342;
LABEL_58:
    swift_bridgeObjectRelease();
    dispatch thunk of DefaultFlowActivity.message.setter();
    swift_release();
    goto LABEL_65;
  }
  uint64_t v167 = v163;
  uint64_t v168 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v169 = type metadata accessor for Logger();
  __swift_project_value_buffer(v169, (uint64_t)static Logger.instrumentation);
  id v170 = v168;
  id v171 = v168;
  char v172 = Logger.logObject.getter();
  os_log_type_t v173 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v172, v173))
  {
    uint64_t v174 = (uint8_t *)swift_slowAlloc();
    uint64_t v175 = swift_slowAlloc();
    v357[0] = (id)v175;
    *(_DWORD *)uint64_t v174 = 136315138;
    swift_getErrorValue();
    uint64_t v176 = Error.localizedDescription.getter();
    *(void *)&long long v358 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v176, v177, (uint64_t *)v357);
    uint64_t v151 = v334;
    unint64_t v178 = v340;
    uint64_t v158 = v310;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v172, v173, "#TaskLoggingService - failed to encode appResolutionMetrics payload to JSON due to error: %s", v174, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v175, -1, -1);
    MEMORY[0x1BA9E48C0](v174, -1, -1);

    unint64_t v156 = v352;
  }
  else
  {

    unint64_t v156 = v352;
    unint64_t v178 = v340;
  }
  swift_getErrorValue();
  swift_retain();
  Error.localizedDescription.getter();
  dispatch thunk of DefaultFlowActivity.message.setter();
  swift_release();
  uint64_t v179 = v317;
  uint64_t v152 = v342;
  (*(void (**)(uint64_t, void, uint64_t))(v178 + 104))(v317, *MEMORY[0x1E4FA19C8], v342);
  uint64_t v337 = SiriKitReliabilityCodes.rawValue.getter();
  unint64_t v327 = v180;

  (*(void (**)(uint64_t, uint64_t))(v178 + 8))(v179, v152);
LABEL_65:
  if (v158)
  {
    id v181 = *(void (**)(uint64_t, uint64_t))(class metadata base offset for SiriKitFlowActivity
                                                   + *(void *)v151
                                                   + 312);
    swift_bridgeObjectRetain();
    v181(a12, v158);
    uint64_t v152 = v342;
  }
  uint64_t v319 = a12;
  os_log_t v182 = v321;
  outlined init with copy of ReferenceResolutionClientProtocol?(v343, (uint64_t)v321, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  if (((unsigned int (*)(os_log_t, uint64_t, uint64_t))v335)(v182, 1, v152) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v182, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  }
  else
  {
    unint64_t v183 = v340;
    uint64_t v184 = v311;
    (*(void (**)(char *, os_log_t, uint64_t))(v340 + 32))(v311, v182, v152);
    uint64_t v185 = SiriKitReliabilityCodes.rawValue.getter();
    (*(void (**)(uint64_t))(class metadata base offset for SiriKitFlowActivity + *(void *)v151 + 216))(v185);
    (*(void (**)(char *, uint64_t))(v183 + 8))(v184, v152);
  }
  uint64_t v186 = v338;
  uint64_t v187 = v349;
  if (v338)
  {
    uint64_t v188 = *(void (**)(uint64_t, uint64_t))(class metadata base offset for SiriKitFlowActivity
                                                   + *(void *)v151
                                                   + 192);
    swift_bridgeObjectRetain();
    v188(v333, v186);
  }
  swift_retain();
  Date.timeIntervalSince1970.getter();
  dispatch thunk of DefaultFlowActivity.timestamp.setter();
  swift_release();
  outlined init with copy of ReferenceResolutionClientProtocol?(v322, (uint64_t)&v358, &demangling cache variable for type metadata for FlowActivity?);
  if (v360)
  {
    outlined init with take of ReferenceResolutionClientProtocol(&v358, (uint64_t)v357);
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v189 = type metadata accessor for Logger();
    __swift_project_value_buffer(v189, (uint64_t)static Logger.instrumentation);
    BOOL v190 = v314;
    uint64_t v191 = v350;
    ((void (*)(char *, char *, uint64_t))v344)(v314, v187, v350);
    uint64_t v192 = v351;
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v193 = v348;
    swift_retain_n();
    uint64_t v194 = Logger.logObject.getter();
    os_log_type_t v195 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v194, v195))
    {
      uint64_t v196 = swift_slowAlloc();
      uint64_t v322 = swift_slowAlloc();
      *(void *)&long long v358 = v322;
      *(_DWORD *)uint64_t v196 = 136315906;
      os_log_t v321 = v194;
      uint64_t v197 = *(void *)(v192 + 16);
      os_log_type_t v198 = v195;
      unint64_t v199 = *(void *)(v351 + 24);
      swift_bridgeObjectRetain();
      uint64_t v355 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v197, v199, (uint64_t *)&v358);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v196 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v355 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v341, v156, (uint64_t *)&v358);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v196 + 22) = 2080;
      uint64_t v200 = ActivityType.rawValue.getter();
      uint64_t v355 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v200, v201, (uint64_t *)&v358);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v346(v190, v350);
      *(_WORD *)(v196 + 32) = 2080;
      uint64_t v203 = v193[12];
      unint64_t v202 = v193[13];
      swift_bridgeObjectRetain();
      uint64_t v355 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v203, v202, (uint64_t *)&v358);
      uint64_t v152 = v342;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_t v204 = v321;
      _os_log_impl(&dword_1B9C64000, v321, v198, "#TaskLoggingService - appending domain activities for taskId: %s, taskType: %s, stepType: %s for interactionId:%s", (uint8_t *)v196, 0x2Au);
      uint64_t v205 = v322;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v205, -1, -1);
      MEMORY[0x1BA9E48C0](v196, -1, -1);

      unint64_t v206 = (unint64_t)v327;
      if (!v327) {
        goto LABEL_88;
      }
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_release_n();
      v346(v190, v191);

      swift_release_n();
      unint64_t v206 = (unint64_t)v327;
      if (!v327)
      {
LABEL_88:
        unint64_t v219 = v340;
        uint64_t v220 = v317;
        (*(void (**)(uint64_t, void, uint64_t))(v340 + 104))(v317, *MEMORY[0x1E4FA1A00], v152);
        uint64_t v337 = SiriKitReliabilityCodes.rawValue.getter();
        unint64_t v206 = v221;
        (*(void (**)(uint64_t, uint64_t))(v219 + 8))(v220, v152);
      }
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FlowActivity>);
    uint64_t v222 = swift_initStackObject();
    *(_OWORD *)(v222 + 16) = xmmword_1BA04F9C0;
    *(void *)(v222 + 56) = v320;
    *(void *)(v222 + 64) = lazy protocol witness table accessor for type ActivityType and conformance ActivityType(&lazy protocol witness table cache variable for type SiriKitFlowActivity and conformance DefaultFlowActivity, (void (*)(uint64_t))type metadata accessor for SiriKitFlowActivity);
    *(void *)(v222 + 32) = v334;
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v357, v222 + 72);
    if (v330) {
      uint64_t v223 = v331;
    }
    else {
      uint64_t v223 = 0;
    }
    if (v330) {
      unint64_t v224 = v330;
    }
    else {
      unint64_t v224 = 0xE000000000000000;
    }
    uint64_t v225 = *(NSObject **)(v351 + 16);
    uint64_t v226 = *(void *)(v351 + 24);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v322 = v226;
    unint64_t v306 = v226;
    os_log_t v321 = v225;
    Swift::String v304 = v225;
    unint64_t v216 = v352;
    uint64_t v217 = v349;
    unint64_t v327 = (char *)specialized static TaskLoggingService.createTaskContentString(taskType:stepType:statusReason:activities:attribute:taskId:)(v341, v352, v349, v337, v206, v222, v223, v224, v304, v306);
    uint64_t v337 = v227;
    swift_setDeallocating();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowActivity);
    swift_arrayDestroy();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v357);
    goto LABEL_96;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v358, &demangling cache variable for type metadata for FlowActivity?);
  unint64_t v207 = (unint64_t)v327;
  if (!v327)
  {
    unint64_t v208 = v340;
    uint64_t v209 = v317;
    (*(void (**)(uint64_t, void, uint64_t))(v340 + 104))(v317, *MEMORY[0x1E4FA1A00], v152);
    uint64_t v337 = SiriKitReliabilityCodes.rawValue.getter();
    unint64_t v207 = v210;
    (*(void (**)(uint64_t, uint64_t))(v208 + 8))(v209, v152);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FlowActivity>);
  uint64_t v211 = swift_initStackObject();
  *(_OWORD *)(v211 + 16) = xmmword_1BA04FD90;
  *(void *)(v211 + 56) = v320;
  *(void *)(v211 + 64) = lazy protocol witness table accessor for type ActivityType and conformance ActivityType(&lazy protocol witness table cache variable for type SiriKitFlowActivity and conformance DefaultFlowActivity, (void (*)(uint64_t))type metadata accessor for SiriKitFlowActivity);
  *(void *)(v211 + 32) = v151;
  if (v330) {
    uint64_t v212 = v331;
  }
  else {
    uint64_t v212 = 0;
  }
  if (v330) {
    unint64_t v213 = v330;
  }
  else {
    unint64_t v213 = 0xE000000000000000;
  }
  unint64_t v214 = *(NSObject **)(v351 + 16);
  uint64_t v215 = *(void *)(v351 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v322 = v215;
  unint64_t v305 = v215;
  os_log_t v321 = v214;
  uint64_t v303 = v214;
  unint64_t v216 = v352;
  uint64_t v217 = v349;
  unint64_t v327 = (char *)specialized static TaskLoggingService.createTaskContentString(taskType:stepType:statusReason:activities:attribute:taskId:)(v341, v352, v349, v337, v207, v211, v212, v213, v303, v305);
  uint64_t v337 = v218;
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowActivity);
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_96:
  uint64_t v228 = v350;
  uint64_t v229 = v342;
  if (v337)
  {
    uint64_t v230 = v315;
    outlined init with copy of ReferenceResolutionClientProtocol?(v343, v315, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v335)(v230, 1, v229) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v230, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
      uint64_t v231 = 0;
      uint64_t v232 = 0;
    }
    else
    {
      uint64_t v231 = SiriKitReliabilityCodes.rawValue.getter();
      uint64_t v232 = v249;
      (*(void (**)(uint64_t, uint64_t))(v340 + 8))(v230, v229);
    }
    uint64_t v250 = v348;
    swift_bridgeObjectRetain();
    uint64_t v251 = v339;
    swift_retain();
    specialized SiriKitRequestEvent.init(intentName:errorCode:app:eventReliabilityCode:)(v341, v216, 0, v251, v231, v232, (uint64_t *)v357);
    uint64_t v252 = v250[12];
    unint64_t v253 = v250[13];
    uint64_t v254 = specialized TaskLoggingService.createRequestContentString(siriKitRequestEvent:interactionId:)((uint64_t)v357, v252, v253);
    unint64_t v256 = v255;
    outlined release of SiriKitRequestEvent((uint64_t)v357);
    if (v256) {
      uint64_t v257 = v254;
    }
    else {
      uint64_t v257 = 0;
    }
    unint64_t v258 = 0xE000000000000000;
    if (v256) {
      unint64_t v258 = v256;
    }
    uint64_t v342 = v258;
    unint64_t v340 = v253;
    swift_bridgeObjectRetain();
    uint64_t v259 = SiriKitEventContext.resultCandidateId.getter();
    if (v260) {
      uint64_t v261 = v259;
    }
    else {
      uint64_t v261 = 7104878;
    }
    if (v260) {
      unint64_t v262 = v260;
    }
    else {
      unint64_t v262 = 0xE300000000000000;
    }
    if (v251 && (uint64_t v263 = App.appIdentifier.getter(), v264))
    {
      unint64_t v265 = v264;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v265 = 0xEE00656C62616369;
      uint64_t v263 = 0x6C7070615F746F6ELL;
    }
    uint64_t v266 = v349;
    LODWORD(v336) = a19;
    *(void *)&long long v358 = v327;
    *((void *)&v358 + 1) = v337;
    uint64_t v359 = v257;
    uint64_t v360 = v342;
    uint64_t v317 = v252;
    uint64_t v361 = v252;
    unint64_t v362 = v340;
    uint64_t v363 = v261;
    unint64_t v364 = v262;
    uint64_t v365 = v263;
    unint64_t v366 = v265;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    os_log_t v335 = (os_log_t)MetricsEventInformation.dictionaryRepresentation.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v267 = v316;
    uint64_t v268 = v350;
    v324(v316, v325, v350);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v320 = v257;
    if (v355 == v353 && v356 == v354)
    {
      swift_bridgeObjectRelease_n();
      v346(v267, v268);
      uint64_t v269 = v313;
      ((void (*)(char *, char *, uint64_t))v344)(v313, v266, v268);
      uint64_t v270 = v339;
      uint64_t v271 = v268;
    }
    else
    {
      uint64_t v272 = v266;
      uint64_t v271 = v268;
      char v273 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v346(v267, v271);
      uint64_t v269 = v313;
      ((void (*)(char *, char *, uint64_t))v344)(v313, v272, v271);
      uint64_t v270 = v339;
      if ((v273 & 1) == 0)
      {
        v346(v269, v271);
        goto LABEL_136;
      }
    }
    v324(v318, v325, v271);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v355 == v353 && v356 == v354)
    {
      swift_bridgeObjectRelease_n();
      Swift::String v274 = v346;
      v346(v318, v271);
      v274(v269, v271);
      uint64_t v275 = v351;
    }
    else
    {
      char v276 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Swift::String v277 = v346;
      v346(v318, v271);
      v277(v269, v271);
      uint64_t v275 = v351;
      if ((v276 & 1) == 0) {
        goto LABEL_128;
      }
    }
    if (*(unsigned char *)(v275 + 33) != 1)
    {
LABEL_128:
      swift_bridgeObjectRelease();
      uint64_t v278 = v319;
      if (one-time initialization token for instrumentation != -1) {
        swift_once();
      }
      uint64_t v279 = type metadata accessor for Logger();
      __swift_project_value_buffer(v279, (uint64_t)static Logger.instrumentation);
      uint64_t v280 = Logger.logObject.getter();
      os_log_type_t v281 = static os_log_type_t.debug.getter();
      BOOL v282 = os_log_type_enabled(v280, v281);
      uint64_t v283 = v348;
      if (v282)
      {
        v284 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v284 = 0;
        _os_log_impl(&dword_1B9C64000, v280, v281, "#TaskLoggingService - Skip logging Start for non new client task", v284, 2u);
        MEMORY[0x1BA9E48C0](v284, -1, -1);
      }

      uint64_t v285 = v312;
      if ((v336 & 1) == 0)
      {
LABEL_133:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        return;
      }
      goto LABEL_142;
    }
LABEL_136:
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v286 = type metadata accessor for Logger();
    __swift_project_value_buffer(v286, (uint64_t)static Logger.instrumentation);
    uint64_t v287 = v308;
    uint64_t v288 = v350;
    ((void (*)(char *, char *, uint64_t))v344)(v308, v349, v350);
    swift_retain_n();
    unint64_t v289 = v352;
    swift_bridgeObjectRetain_n();
    uint64_t v290 = v348;
    swift_retain_n();
    uint64_t v291 = Logger.logObject.getter();
    os_log_type_t v292 = static os_log_type_t.debug.getter();
    int v293 = v292;
    if (os_log_type_enabled(v291, v292))
    {
      uint64_t v294 = swift_slowAlloc();
      uint64_t v345 = swift_slowAlloc();
      uint64_t v355 = v345;
      *(_DWORD *)uint64_t v294 = 136315906;
      LODWORD(v344) = v293;
      unint64_t v295 = v322;
      swift_bridgeObjectRetain();
      uint64_t v353 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v321, v295, &v355);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v294 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v353 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v341, v289, &v355);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v294 + 22) = 2080;
      uint64_t v296 = ActivityType.rawValue.getter();
      uint64_t v353 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v296, v297, &v355);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v346(v287, v288);
      *(_WORD *)(v294 + 32) = 2080;
      unint64_t v298 = v340;
      swift_bridgeObjectRetain();
      uint64_t v353 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v317, v298, &v355);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v291, (os_log_type_t)v344, "#TaskLoggingService Usage Log - logging task step for taskId: %s, taskType: %s, stepType: %s for interactionId:%s", (uint8_t *)v294, 0x2Au);
      uint64_t v299 = v345;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v299, -1, -1);
      uint64_t v283 = v348;
      MEMORY[0x1BA9E48C0](v294, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_release_n();
      v346(v287, v288);

      swift_release_n();
      uint64_t v283 = v290;
    }
    unint64_t v300 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    uint64_t v285 = v312;
    TaskLoggingService.logViaSAMetrics(aceServiceInvoker:eventInformation:timings:originalCommandId:)(v283 + 4, (uint64_t)v335, v300, 0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v270 = v339;
    uint64_t v278 = v319;
    if ((v336 & 1) == 0) {
      goto LABEL_133;
    }
LABEL_142:
    uint64_t v302 = v285[10];
    uint64_t v301 = v285[11];
    __swift_project_boxed_opaque_existential_1(v285 + 7, v302);
    (*(void (**)(char *, void *, uint64_t, uint64_t, uint64_t, char *, uint64_t, os_log_t, uint64_t, uint64_t, unint64_t, uint64_t, NSObject *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v301 + 8))(v349, v283, v332, v320, v342, v327, v337, v321, v322, v341, v352, v270, v331, v330, v278, v310, v328, v329, v333,
      v338,
      v343,
      v302,
      v301);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }
  unint64_t v233 = v217;
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v234 = type metadata accessor for Logger();
  __swift_project_value_buffer(v234, (uint64_t)static Logger.instrumentation);
  uint64_t v235 = v309;
  ((void (*)(char *, char *, uint64_t))v344)(v309, v233, v228);
  swift_retain_n();
  uint64_t v236 = v348;
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t v237 = Logger.logObject.getter();
  os_log_type_t v238 = static os_log_type_t.debug.getter();
  int v239 = v238;
  if (os_log_type_enabled(v237, v238))
  {
    uint64_t v240 = swift_slowAlloc();
    LODWORD(v345) = v239;
    uint64_t v241 = v240;
    v349 = (char *)swift_slowAlloc();
    v357[0] = v349;
    *(_DWORD *)uint64_t v241 = 136315906;
    uint64_t v344 = v237;
    unint64_t v242 = v322;
    swift_bridgeObjectRetain();
    *(void *)&long long v358 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v321, v242, (uint64_t *)v357);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v241 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)&long long v358 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v341, v216, (uint64_t *)v357);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v241 + 22) = 2080;
    uint64_t v243 = ActivityType.rawValue.getter();
    *(void *)&long long v358 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v243, v244, (uint64_t *)v357);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v346(v235, v350);
    *(_WORD *)(v241 + 32) = 2080;
    uint64_t v245 = v236[12];
    unint64_t v246 = v236[13];
    swift_bridgeObjectRetain();
    *(void *)&long long v358 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v245, v246, (uint64_t *)v357);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    os_log_t v247 = v344;
    _os_log_impl(&dword_1B9C64000, v344, (os_log_type_t)v345, "#TaskLoggingService - JSON string from the encoding is empty, not logging Task step for taskId: %s, taskType: %s, stepType: %s for interactionId:%s", (uint8_t *)v241, 0x2Au);
    uint64_t v248 = v349;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v248, -1, -1);
    MEMORY[0x1BA9E48C0](v241, -1, -1);
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release();
    v346(v235, v228);

    swift_release_n();
  }
}

uint64_t type metadata accessor for SiriKitFlowActivity()
{
  uint64_t result = type metadata singleton initialization cache for SiriKitFlowActivity;
  if (!type metadata singleton initialization cache for SiriKitFlowActivity) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t SiriKitFlowActivity.init(activityType:app:executionRequestId:responseId:taskStepStartTime:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8 = specialized SiriKitFlowActivity.init(activityType:app:executionRequestId:responseId:taskStepStartTime:)(a1, a2, a3, a4, a5, a6, a7, a8 & 1);
  swift_release();
  return v8;
}

uint64_t SiriKitFlowActivity.errorCodeDescription.setter(uint64_t a1, uint64_t a2)
{
  return ResultCandidateState.conversationUserInputId.setter(a1, a2, &direct field offset for SiriKitFlowActivity.errorCodeDescription);
}

uint64_t specialized static TaskLoggingService.createTaskContentString(taskType:stepType:statusReason:activities:attribute:taskId:)(uint64_t a1, unint64_t a2, char *a3, uint64_t a4, unint64_t a5, uint64_t a6, NSObject *a7, unint64_t a8, NSObject *a9, unint64_t a10)
{
  unint64_t v84 = a7;
  uint64_t v81 = (void *)a6;
  uint64_t v82 = a1;
  uint64_t v15 = type metadata accessor for ActivityType();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for String.Encoding();
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v22 = (char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = a4;
  if (!a10)
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static Logger.instrumentation);
    uint64_t v48 = v16;
    uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    uint64_t v50 = v15;
    v49(v18, a3, v15);
    swift_bridgeObjectRetain_n();
    unint64_t v51 = a8;
    swift_bridgeObjectRetain_n();
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    int v54 = v53;
    if (!os_log_type_enabled(v52, v53))
    {
      (*(void (**)(char *, uint64_t))(v48 + 8))(v18, v50);

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      return 0;
    }
    uint64_t v55 = swift_slowAlloc();
    uint64_t v82 = swift_slowAlloc();
    *(void *)&long long v90 = v82;
    *(_DWORD *)uint64_t v55 = 136315650;
    LODWORD(v81) = v54;
    os_log_t v80 = v52;
    uint64_t v56 = ActivityType.rawValue.getter();
    *(void *)&v86[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, (uint64_t *)&v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v18, v50);
    *(_WORD *)(v55 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)&v86[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, a5, (uint64_t *)&v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v55 + 22) = 2080;
    swift_bridgeObjectRetain();
    *(void *)&v86[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v84, v51, (uint64_t *)&v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_log_t v58 = v80;
    _os_log_impl(&dword_1B9C64000, v80, (os_log_type_t)v81, "#TaskLoggingService - TaskId from MetricsState is Nil, can not be aggregated into a Task. Not logging Task step: %s, Status reason: %s with Task attribute: %s", (uint8_t *)v55, 0x20u);
    uint64_t v59 = v82;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v59, -1, -1);
    MEMORY[0x1BA9E48C0](v55, -1, -1);
LABEL_23:

    return 0;
  }
  uint64_t v78 = v22;
  os_log_t v80 = a9;
  MEMORY[0x1F4188790](v20);
  *(&v78 - 8) = a3;
  *(&v78 - 7) = (char *)a4;
  *(&v78 - 6) = (char *)a5;
  *(&v78 - 5) = v23;
  unint64_t v24 = a2;
  unint64_t v25 = a5;
  uint64_t v26 = v84;
  *(&v78 - 4) = (char *)a10;
  *(&v78 - 3) = (char *)v26;
  *(&v78 - 2) = (char *)a8;
  swift_bridgeObjectRetain();
  uint64_t v79 = specialized Sequence.compactMap<A>(_:)((void *(*)(uint64_t *__return_ptr, uint64_t))partial apply for closure #1 in static TaskLoggingService.createTaskContentString(taskType:stepType:statusReason:activities:attribute:taskId:), (uint64_t)(&v78 - 10), (uint64_t)v81);
  uint64_t v81 = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v27 = ActivityType.rawValue.getter();
  uint64_t v29 = v28;
  unint64_t v30 = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v31 = specialized static SiriKitMetricsUtils.formulateIntentTypeName(intentTypeName:)(v82, v24);
  uint64_t v33 = v32;
  swift_bridgeObjectRelease();
  *(void *)&long long v90 = v79;
  *((void *)&v90 + 1) = v26;
  *(void *)&long long v91 = a8;
  BYTE8(v91) = 0;
  *(void *)&long long v92 = 0;
  *((void *)&v92 + 1) = 0xE000000000000000;
  *(void *)&long long v93 = 0;
  *((void *)&v93 + 1) = 0xE000000000000000;
  *(void *)&long long v94 = v83;
  *((void *)&v94 + 1) = v30;
  *(void *)&long long v95 = v27;
  *((void *)&v95 + 1) = v29;
  *(void *)&long long v96 = v80;
  *((void *)&v96 + 1) = a10;
  *(void *)&long long v97 = v31;
  *((void *)&v97 + 1) = v33;
  uint64_t v98 = 0x3FD999999999999ALL;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  uint64_t v34 = JSONEncoder.init()();
  v86[6] = v96;
  v86[7] = v97;
  uint64_t v87 = v98;
  uint64_t v86[2] = v92;
  v86[3] = v93;
  v86[4] = v94;
  v86[5] = v95;
  v86[0] = v90;
  v86[1] = v91;
  lazy protocol witness table accessor for type TaskData and conformance TaskData();
  uint64_t v35 = v81;
  uint64_t v36 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (v35)
  {
    swift_bridgeObjectRelease();
    outlined release of TaskData((uint64_t)&v90);
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.instrumentation);
    id v39 = v35;
    id v40 = v35;
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      double v43 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      *(void *)&v86[0] = v44;
      *(_DWORD *)double v43 = 136315138;
      swift_getErrorValue();
      uint64_t v45 = Error.localizedDescription.getter();
      uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, (uint64_t *)v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v41, v42, "#TaskLoggingService - JSON encoding error: %s", v43, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v44, -1, -1);
      MEMORY[0x1BA9E48C0](v43, -1, -1);

      swift_release();
    }
    else
    {
      swift_release();
    }
    return 0;
  }
  uint64_t v60 = v36;
  unint64_t v61 = v37;
  outlined release of TaskData((uint64_t)&v90);
  static String.Encoding.utf8.getter();
  uint64_t v62 = String.init(data:encoding:)();
  if (!v63)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v74 = type metadata accessor for Logger();
    __swift_project_value_buffer(v74, (uint64_t)static Logger.instrumentation);
    os_log_t v58 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v75))
    {
      unint64_t v76 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v76 = 0;
      _os_log_impl(&dword_1B9C64000, v58, v75, "#TaskLoggingService - JSON encoding error, taskDataString is Nil", v76, 2u);
      MEMORY[0x1BA9E48C0](v76, -1, -1);
    }
    outlined consume of Data._Representation(v60, v61);
    swift_release();
    goto LABEL_23;
  }
  uint64_t v64 = v62;
  unint64_t v65 = v63;
  uint64_t v88 = v62;
  unint64_t v89 = v63;
  uint64_t v66 = one-time initialization token for instrumentation;
  swift_bridgeObjectRetain();
  if (v66 != -1) {
    swift_once();
  }
  uint64_t v67 = type metadata accessor for Logger();
  __swift_project_value_buffer(v67, (uint64_t)static Logger.instrumentation);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v68 = Logger.logObject.getter();
  os_log_type_t v69 = static os_log_type_t.debug.getter();
  unint64_t v84 = v68;
  if (os_log_type_enabled(v68, v69))
  {
    uint64_t v70 = swift_slowAlloc();
    uint64_t v83 = v34;
    uint64_t v71 = v70;
    uint64_t v72 = swift_slowAlloc();
    *(void *)&v86[0] = v72;
    *(_DWORD *)uint64_t v71 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, (uint64_t *)v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v71 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v80, a10, (uint64_t *)v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v73 = v84;
    _os_log_impl(&dword_1B9C64000, v84, v69, "#TaskLoggingService - created TaskContent:%s, for taskId: %s", (uint8_t *)v71, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v72, -1, -1);
    MEMORY[0x1BA9E48C0](v71, -1, -1);
    outlined consume of Data._Representation(v60, v61);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    outlined consume of Data._Representation(v60, v61);
  }
  swift_release();
  swift_beginAccess();
  return v88;
}

void partial apply for closure #1 in static TaskLoggingService.createTaskContentString(taskType:stepType:statusReason:activities:attribute:taskId:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  closure #1 in static TaskLoggingService.createTaskContentString(taskType:stepType:statusReason:activities:attribute:taskId:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), a2);
}

void closure #1 in static TaskLoggingService.createTaskContentString(taskType:stepType:statusReason:activities:attribute:taskId:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v39 = a7;
  uint64_t v37 = a3;
  uint64_t v38 = a5;
  uint64_t v15 = type metadata accessor for ActivityType();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol(a1, (uint64_t)v40);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowActivity);
  type metadata accessor for DefaultFlowActivity();
  if (swift_dynamicCast())
  {
    uint64_t v19 = v41;
  }
  else
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.instrumentation);
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a2, v15);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    int v23 = v22;
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v24 = swift_slowAlloc();
      int v35 = v23;
      uint64_t v25 = v24;
      uint64_t v36 = swift_slowAlloc();
      v40[0] = v36;
      *(_DWORD *)uint64_t v25 = 136315906;
      unint64_t v32 = a6;
      os_log_t v34 = v21;
      uint64_t v26 = ActivityType.rawValue.getter();
      unint64_t v33 = a8;
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      *(_WORD *)(v25 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, a4, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v25 + 22) = 2080;
      unint64_t v28 = v32;
      swift_bridgeObjectRetain();
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v28, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v25 + 32) = 2080;
      unint64_t v29 = v33;
      swift_bridgeObjectRetain();
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v29, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      os_log_t v30 = v34;
      _os_log_impl(&dword_1B9C64000, v34, (os_log_type_t)v35, "#TaskLoggingService - Skipping unsupported flow activity. Not logging Task step: %s, Status reason: %s for taskId: %s, with attribute: %s", (uint8_t *)v25, 0x2Au);
      uint64_t v31 = v36;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v31, -1, -1);
      MEMORY[0x1BA9E48C0](v25, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    uint64_t v19 = 0;
  }
  *a9 = v19;
}

uint64_t specialized static SiriKitMetricsUtils.formulateIntentTypeName(intentTypeName:)(uint64_t a1, unint64_t a2)
{
  v17[0] = a1;
  v17[1] = a2;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v4 = StringProtocol.components<A>(separatedBy:)();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = v4 + 16 * v5;
    uint64_t v8 = *(void *)(v6 + 16);
    uint64_t v7 = *(void **)(v6 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 20041;
    v9._unint64_t object = (void *)0xE200000000000000;
    if (!String.hasPrefix(_:)(v9))
    {
      v10._uint64_t countAndFlagsBits = v8;
      v10._unint64_t object = v7;
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      return 20041;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v8 = 0x6465737261706E55;
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      v17[0] = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v12, v13, "#SiriKitMetricsUtils - intent name extraction error for intentTypeName: %s, returning UnparsedIntent TaskType", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v15, -1, -1);
      MEMORY[0x1BA9E48C0](v14, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  return v8;
}

unint64_t lazy protocol witness table accessor for type TaskData and conformance TaskData()
{
  unint64_t result = lazy protocol witness table cache variable for type TaskData and conformance TaskData;
  if (!lazy protocol witness table cache variable for type TaskData and conformance TaskData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskData and conformance TaskData);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TaskData(void *a1)
{
  return TaskData.encode(to:)(a1);
}

uint64_t TaskData.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TaskData.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TaskData.CodingKeys and conformance TaskData.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v11 = *v3;
  v10[7] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DefaultFlowActivity]);
  lazy protocol witness table accessor for type [DefaultFlowActivity] and conformance <A> [A]();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t lazy protocol witness table accessor for type TaskData.CodingKeys and conformance TaskData.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TaskData.CodingKeys and conformance TaskData.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskData.CodingKeys and conformance TaskData.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskData.CodingKeys and conformance TaskData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskData.CodingKeys and conformance TaskData.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskData.CodingKeys and conformance TaskData.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskData.CodingKeys and conformance TaskData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskData.CodingKeys and conformance TaskData.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskData.CodingKeys and conformance TaskData.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskData.CodingKeys and conformance TaskData.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TaskData.CodingKeys and conformance TaskData.CodingKeys;
  if (!lazy protocol witness table cache variable for type TaskData.CodingKeys and conformance TaskData.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TaskData.CodingKeys and conformance TaskData.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DefaultFlowActivity] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DefaultFlowActivity] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [DefaultFlowActivity] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DefaultFlowActivity]);
    lazy protocol witness table accessor for type DefaultFlowActivity and conformance DefaultFlowActivity();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DefaultFlowActivity] and conformance <A> [A]);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TaskData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for HomeAutomationAffinityScorer.HomeAutomationNamespace(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t SiriKitFlowActivity.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriKitFlowActivity.CodingKeys>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  BOOL v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys();
  uint64_t v8 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(uint64_t))(class metadata base offset for SiriKitFlowActivity + *v1 + 88))(v8);
  v21[31] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2)
  {
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(class metadata base offset for SiriKitFlowActivity + *v1 + 112))(v9);
    v21[30] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v10 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(class metadata base offset for SiriKitFlowActivity + *v1 + 136))(v10);
    v21[29] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v11 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(class metadata base offset for SiriKitFlowActivity + *v1 + 160))(v11);
    v21[28] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v12 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(class metadata base offset for SiriKitFlowActivity + *v1 + 184))(v12);
    v21[27] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v13 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(class metadata base offset for SiriKitFlowActivity + *v1 + 208))(v13);
    v21[26] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v14 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(class metadata base offset for SiriKitFlowActivity + *v1 + 232))(v14);
    v21[25] = 6;
    uint64_t v15 = KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(uint64_t))(class metadata base offset for SiriKitFlowActivity + *v1 + 256))(v15);
    v21[24] = 7;
    uint64_t v16 = KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(uint64_t))(class metadata base offset for SiriKitFlowActivity + *v1 + 280))(v16);
    v21[15] = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v18 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(class metadata base offset for SiriKitFlowActivity + *v1 + 304))(v18);
    v21[14] = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v19 = swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(class metadata base offset for SiriKitFlowActivity + *v1 + 328))(v19);
    v21[13] = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    swift_bridgeObjectRelease();
    type metadata accessor for DefaultFlowActivity();
    uint64_t v20 = (void (*)(void *))method lookup function for DefaultFlowActivity();
    v20(a1);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

unint64_t lazy protocol witness table accessor for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys);
  }
  return result;
}

uint64_t ResultCandidateState.conversationUserInputId.getter(void *a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *a1);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t SiriKitFlowActivity.appBundleId.getter()
{
  return ResultCandidateState.conversationUserInputId.getter(&direct field offset for SiriKitFlowActivity.appBundleId);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance SiriKitFlowActivity.CodingKeys()
{
  return SiriKitFlowActivity.CodingKeys.stringValue.getter(*v0);
}

unint64_t SiriKitFlowActivity.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x6C646E7542707061;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656D614E707061;
      break;
    case 2:
      unint64_t result = 0x6973726556707061;
      break;
    case 3:
      unint64_t result = 0x646C697562;
      break;
    case 4:
    case 5:
      unint64_t result = 0xD000000000000014;
      break;
    case 6:
      unint64_t result = 0x694B697269537369;
      break;
    case 7:
      unint64_t result = 0xD000000000000015;
      break;
    case 8:
      unint64_t result = 0x65736E6F70736572;
      break;
    case 9:
      unint64_t result = 0x656D614E746F6C73;
      break;
    case 10:
      unint64_t result = 0x64496E727574;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t SiriKitFlowActivity.appName.getter()
{
  return ResultCandidateState.conversationUserInputId.getter(&direct field offset for SiriKitFlowActivity.appName);
}

uint64_t SiriKitFlowActivity.appVersion.getter()
{
  return ResultCandidateState.conversationUserInputId.getter(&direct field offset for SiriKitFlowActivity.appVersion);
}

uint64_t SiriKitFlowActivity.build.getter()
{
  return ResultCandidateState.conversationUserInputId.getter(&direct field offset for SiriKitFlowActivity.build);
}

uint64_t SiriKitFlowActivity.errorCodeDescription.getter()
{
  return ResultCandidateState.conversationUserInputId.getter(&direct field offset for SiriKitFlowActivity.errorCodeDescription);
}

uint64_t SiriKitFlowActivity.eventReliabilityCode.getter()
{
  return ResultCandidateState.conversationUserInputId.getter(&direct field offset for SiriKitFlowActivity.eventReliabilityCode);
}

uint64_t SiriKitFlowActivity.isSiriKit.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + direct field offset for SiriKitFlowActivity.isSiriKit);
  swift_beginAccess();
  return *v1;
}

uint64_t SiriKitFlowActivity.isSiriKitSupportedApp.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + direct field offset for SiriKitFlowActivity.isSiriKitSupportedApp);
  swift_beginAccess();
  return *v1;
}

uint64_t SiriKitFlowActivity.responseId.getter()
{
  return ResultCandidateState.conversationUserInputId.getter(&direct field offset for SiriKitFlowActivity.responseId);
}

uint64_t SiriKitFlowActivity.slotName.getter()
{
  return ResultCandidateState.conversationUserInputId.getter(&direct field offset for SiriKitFlowActivity.slotName);
}

uint64_t SiriKitFlowActivity.executionRequestId.getter()
{
  return ResultCandidateState.conversationUserInputId.getter(&direct field offset for SiriKitFlowActivity.executionRequestId);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TaskData.CodingKeys()
{
  return TaskData.CodingKeys.stringValue.getter(*v0);
}

uint64_t TaskData.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x6974697669746361;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x7475626972747461;
      break;
    case 2:
      uint64_t result = 0x655364726143656DLL;
      break;
    case 3:
      uint64_t result = 0x64656D726F666572;
      break;
    case 4:
      uint64_t result = 0x496B736154666572;
      break;
    case 5:
      uint64_t result = 0x6552737574617473;
      break;
    case 6:
      unsigned int v3 = 1885697139;
      goto LABEL_10;
    case 7:
      uint64_t result = 0x64496B736174;
      break;
    case 8:
      unsigned int v3 = 1802723700;
LABEL_10:
      uint64_t result = v3 | 0x6570795400000000;
      break;
    case 9:
      uint64_t result = 0x6E6F6973726576;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t specialized SiriKitRequestEvent.init(intentName:errorCode:app:eventReliabilityCode:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v53 = a6;
  uint64_t v44 = a5;
  uint64_t v57 = a3;
  uint64_t v48 = a1;
  unint64_t v49 = a2;
  uint64_t v9 = type metadata accessor for SiriKitReliabilityCodes();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void (**)(void))(v10 + 104);
  unsigned int v42 = *MEMORY[0x1E4FA1A00];
  uint64_t v41 = (void (*)(char *, void, uint64_t))v13;
  v13(v12);
  SiriKitReliabilityCodes.rawValue.getter();
  uint64_t v56 = v14;
  uint64_t v15 = *(void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v45 = v9;
  double v43 = v15;
  v15(v12, v9);
  type metadata accessor for AppInformationResolver();
  swift_allocObject();
  swift_retain();
  uint64_t v55 = a4;
  AppInformationResolver.init(app:)();
  uint64_t v16 = dispatch thunk of AppInformationResolver.resolveAppName.getter();
  unint64_t v50 = v17;
  uint64_t v51 = v16;
  if (v17) {
    unint64_t v18 = v17;
  }
  else {
    unint64_t v18 = 0xEE00656C62616369;
  }
  unint64_t v54 = v18;
  swift_bridgeObjectRetain();
  uint64_t v47 = dispatch thunk of AppInformationResolver.resolveAppBundleId.getter();
  unint64_t v20 = v19;
  if (v19) {
    unint64_t v21 = v19;
  }
  else {
    unint64_t v21 = 0xEE00656C62616369;
  }
  unint64_t v52 = v21;
  swift_bridgeObjectRetain();
  uint64_t v46 = dispatch thunk of AppInformationResolver.resolveAppVersion.getter();
  unint64_t v23 = v22;
  if (v22) {
    unint64_t v24 = v22;
  }
  else {
    unint64_t v24 = 0xEE00656C62616369;
  }
  swift_bridgeObjectRetain();
  uint64_t v48 = specialized static SiriKitMetricsUtils.formulateIntentTypeName(intentTypeName:)(v48, v49);
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  if (v53)
  {
    uint64_t v27 = v53;
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    uint64_t v28 = v44;
  }
  else
  {
    v41(v12, v42, v45);
    swift_bridgeObjectRetain();
    uint64_t v29 = SiriKitReliabilityCodes.rawValue.getter();
    uint64_t v31 = v30;
    swift_release();
    uint64_t v28 = v29;
    swift_release();
    unint64_t v32 = v12;
    uint64_t v27 = v31;
    v43(v32, v45);
  }
  swift_bridgeObjectRelease();
  if (v23) {
    uint64_t v33 = v46;
  }
  else {
    uint64_t v33 = 0x6C7070615F746F6ELL;
  }
  if (v20) {
    uint64_t v34 = v47;
  }
  else {
    uint64_t v34 = 0x6C7070615F746F6ELL;
  }
  if (v50) {
    uint64_t v35 = v51;
  }
  else {
    uint64_t v35 = 0x6C7070615F746F6ELL;
  }
  swift_bridgeObjectRelease();
  unint64_t v36 = v54;
  swift_bridgeObjectRelease();
  unint64_t v37 = v52;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a7 = v34;
  a7[1] = v37;
  a7[2] = v35;
  a7[3] = v36;
  a7[4] = v33;
  a7[5] = v24;
  a7[6] = v28;
  a7[7] = v27;
  uint64_t v39 = v48;
  a7[8] = v57;
  a7[9] = v39;
  a7[10] = v26;
  return result;
}

uint64_t specialized TaskLoggingService.createRequestContentString(siriKitRequestEvent:interactionId:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for String.Encoding();
  MEMORY[0x1F4188790](v6 - 8);
  if (!a3)
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.instrumentation);
    outlined retain of SiriKitRequestEvent(a1);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(void *)&v42[0] = v13;
      *(_DWORD *)uint64_t v12 = 136315394;
      uint64_t v14 = *(void *)(a1 + 72);
      unint64_t v15 = *(void *)(a1 + 80);
      swift_bridgeObjectRetain();
      uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, (uint64_t *)v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2080;
      uint64_t v16 = *(void *)(a1 + 48);
      unint64_t v17 = *(void *)(a1 + 56);
      swift_bridgeObjectRetain();
      uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, (uint64_t *)v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of SiriKitRequestEvent(a1);
      _os_log_impl(&dword_1B9C64000, v10, v11, "#TaskLoggingService - interactionId from MetricsState is Nil, not logging this request for intentName: %s, with eventReliabilityCode: %s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v13, -1, -1);
      MEMORY[0x1BA9E48C0](v12, -1, -1);
    }
    else
    {
      outlined release of SiriKitRequestEvent(a1);
    }

    return 0;
  }
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  swift_bridgeObjectRetain();
  JSONEncoder.init()();
  long long v7 = *(_OWORD *)(a1 + 48);
  void v42[2] = *(_OWORD *)(a1 + 32);
  v42[3] = v7;
  v42[4] = *(_OWORD *)(a1 + 64);
  uint64_t v43 = *(void *)(a1 + 80);
  long long v8 = *(_OWORD *)(a1 + 16);
  v42[0] = *(_OWORD *)a1;
  v42[1] = v8;
  lazy protocol witness table accessor for type SiriKitRequestEvent and conformance SiriKitRequestEvent();
  uint64_t v18 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v20 = v19;
  static String.Encoding.utf8.getter();
  uint64_t v21 = String.init(data:encoding:)();
  if (!v22)
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.instrumentation);
    outlined retain of SiriKitRequestEvent(a1);
    swift_bridgeObjectRetain();
    outlined retain of SiriKitRequestEvent(a1);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(void *)&v42[0] = v38;
      *(_DWORD *)uint64_t v35 = 136315394;
      unint64_t v39 = v20;
      uint64_t v41 = a2;
      uint64_t v36 = *(void *)(a1 + 72);
      unint64_t v37 = *(void *)(a1 + 80);
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, (uint64_t *)v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined release of SiriKitRequestEvent(a1);
      outlined release of SiriKitRequestEvent(a1);
      *(_WORD *)(v35 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, a3, (uint64_t *)v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v33, v34, "#TaskLoggingService - JSON encoding error, requestEventString is Nil for intentName: %s, interactionId: %s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v38, -1, -1);
      MEMORY[0x1BA9E48C0](v35, -1, -1);
      outlined consume of Data._Representation(v18, v39);

      swift_release();
    }
    else
    {
      outlined consume of Data._Representation(v18, v20);
      swift_release();
      outlined release of SiriKitRequestEvent(a1);
      outlined release of SiriKitRequestEvent(a1);

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  uint64_t v23 = v21;
  unint64_t v24 = v22;
  uint64_t v40 = a2;
  uint64_t v44 = v21;
  unint64_t v45 = v22;
  uint64_t v25 = one-time initialization token for instrumentation;
  swift_bridgeObjectRetain();
  if (v25 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.instrumentation);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(void *)&v42[0] = v30;
    *(_DWORD *)uint64_t v29 = 136315394;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, (uint64_t *)v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v29 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, a3, (uint64_t *)v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v27, v28, "#TaskLoggingService - created requestEvent: %s, for interactionId: %s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v30, -1, -1);
    MEMORY[0x1BA9E48C0](v29, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  outlined consume of Data._Representation(v18, v20);

  swift_release();
  swift_beginAccess();
  return v44;
}

unint64_t lazy protocol witness table accessor for type SiriKitRequestEvent and conformance SiriKitRequestEvent()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriKitRequestEvent and conformance SiriKitRequestEvent;
  if (!lazy protocol witness table cache variable for type SiriKitRequestEvent and conformance SiriKitRequestEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitRequestEvent and conformance SiriKitRequestEvent);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SiriKitRequestEvent(void *a1)
{
  return SiriKitRequestEvent.encode(to:)(a1);
}

uint64_t SiriKitRequestEvent.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SiriKitRequestEvent.CodingKeys>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t lazy protocol witness table accessor for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys;
  if (!lazy protocol witness table cache variable for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys);
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance SiriKitRequestEvent.CodingKeys()
{
  unint64_t result = 0x6449707061;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6C70736944707061;
      break;
    case 2:
      unint64_t result = 0x6973726556707061;
      break;
    case 3:
      unint64_t result = 0xD000000000000014;
      break;
    case 4:
      unint64_t result = 0x646F43726F727265;
      break;
    case 5:
      unint64_t result = 0x614E746E65746E69;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t MetricsEventInformation.dictionaryRepresentation.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BA052AC0;
  long long v2 = *v0;
  long long v9 = v0[1];
  long long v3 = v9;
  long long v10 = v2;
  *(_OWORD *)(inited + 48) = v2;
  *(_OWORD *)(inited + 80) = v3;
  long long v4 = v0[3];
  long long v8 = v0[4];
  *(_OWORD *)(inited + 112) = v8;
  long long v7 = v0[2];
  *(_OWORD *)(inited + 144) = v7;
  *(void *)(inited + 32) = 0x6B736154776F6C66;
  *(void *)(inited + 40) = 0xE800000000000000;
  *(void *)(inited + 64) = 0xD000000000000010;
  *(void *)(inited + 72) = 0x80000001BA06A720;
  *(void *)(inited + 96) = 0x6C646E7542707061;
  *(void *)(inited + 104) = 0xEB00000000644965;
  strcpy((char *)(inited + 128), "interactionId");
  *(_WORD *)(inited + 142) = -4864;
  *(void *)(inited + 160) = 0xD000000000000011;
  *(void *)(inited + 168) = 0x80000001BA0607B0;
  long long v6 = v4;
  *(_OWORD *)(inited + 176) = v4;
  outlined retain of String((uint64_t)&v10);
  outlined retain of String((uint64_t)&v9);
  outlined retain of String((uint64_t)&v8);
  outlined retain of String((uint64_t)&v7);
  outlined retain of String((uint64_t)&v6);
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

uint64_t outlined retain of String(uint64_t a1)
{
  return a1;
}

uint64_t protocol witness for AceServiceInvokerAsync.submitAndForget(_:setRefId:) in conformance AceServiceInvokerImpl(NSObject *a1, char a2)
{
  uint64_t v4 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  long long v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FA24B8], v4);
  AceServiceInvokerImpl.submitAndForget(_:setRefId:executionSource:)(a1, a2, (uint64_t)v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void protocol witness for AceServiceInvokerAsync.submitAndForget(_:setRefId:) in conformance AceServiceInvokerImpl(Swift::OpaquePointer a1, Swift::Bool a2)
{
}

Swift::Void __swiftcall AceServiceInvokerImpl.submitAndForget(_:setRefId:)(Swift::OpaquePointer _, Swift::Bool setRefId)
{
  uint64_t v4 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  long long v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!((unint64_t)_._rawValue >> 62))
  {
    uint64_t v8 = *(void *)(((unint64_t)_._rawValue & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_3;
    }
LABEL_11:
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  if (!v8) {
    goto LABEL_11;
  }
LABEL_3:
  if (v8 >= 1)
  {
    uint64_t v17 = v8;
    rawValue = (id *)_._rawValue;
    uint64_t v9 = 0;
    unint64_t v10 = (unint64_t)_._rawValue & 0xC000000000000001;
    uint64_t v11 = *MEMORY[0x1E4FA24B8];
    uint64_t v12 = (void (**)(char *, uint64_t, uint64_t))(v5 + 104);
    uint64_t v13 = (void (**)(char *, uint64_t))(v5 + 8);
    Swift::Bool v14 = setRefId;
    do
    {
      if (v10) {
        unint64_t v15 = MEMORY[0x1BA9E3990](v9, rawValue);
      }
      else {
        unint64_t v15 = rawValue[v9 + 4];
      }
      uint64_t v16 = v15;
      ++v9;
      (*v12)(v7, v11, v4);
      AceServiceInvokerImpl.submitAndForget(_:setRefId:executionSource:)(v16, v14, (uint64_t)v7);
      (*v13)(v7, v4);
    }
    while (v17 != v9);
LABEL_13:
    swift_bridgeObjectRelease();
    return;
  }
  __break(1u);
}

uint64_t AceServiceInvokerImpl.submitAndForget(_:setRefId:)(NSObject *a1, char a2)
{
  uint64_t v4 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  long long v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FA24B8], v4);
  AceServiceInvokerImpl.submitAndForget(_:setRefId:executionSource:)(a1, a2, (uint64_t)v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

NSObject *AceServiceInvokerImpl.preparedCommand(_:options:)(NSObject *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4)
  {
    uint64_t v5 = v4 - 1;
    uint64_t v6 = (uint64_t *)(a2 + 40);
    do
    {
      uint64_t v8 = *v6;
      v6 += 2;
      uint64_t v7 = v8;
      char v9 = v8 != 0;
      BOOL v11 = v5-- != 0;
    }
    while (v7 && v11);
  }
  else
  {
    char v9 = 1;
  }
  AceServiceInvokerImpl.addMissingCommandIds(_:setRefId:)(a1, v9);
  specialized AceServiceInvokerImpl.addMissingComponentIds(_:setRefId:)(a1, v9);
  if (AceServiceInvokerImpl.shouldWrapCommandForExecution(_:)(a1))
  {
    uint64_t v12 = swift_retain();
    specialized static AceMetricsLogger.logRemoteAnalytics(service:command:)(v12, a1);
    swift_release();
    id v13 = specialized AceServiceInvokerImpl.wrapCommandForExecution(_:assistantId:)(a1, *(void *)(v2 + 72), *(void *)(v2 + 80));
LABEL_25:
    uint64_t v30 = v13;
    AceServiceInvokerImpl.addMissingCommandIds(_:setRefId:)(v13, v9);

    return v30;
  }
  if (v4)
  {
    Swift::Bool v14 = (unint64_t *)(a2 + 40);
    while (1)
    {
      unint64_t v15 = *v14;
      if (*v14) {
        break;
      }
      v14 += 2;
      if (!--v4) {
        goto LABEL_16;
      }
    }
    uint64_t v17 = *(v14 - 1);
    uint64_t v18 = one-time initialization token for ace;
    swift_bridgeObjectRetain();
    if (v18 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.ace);
    swift_bridgeObjectRetain_n();
    unint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v32 = v17;
      unint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      uint64_t v34 = v31;
      *(_DWORD *)unint64_t v22 = 136315138;
      uint64_t v23 = swift_bridgeObjectRetain();
      uint64_t v24 = MEMORY[0x1BA9E3080](v23, &type metadata for AceServiceInvokerImpl.AceSubmitOptions);
      unint64_t v26 = v25;
      swift_bridgeObjectRelease();
      uint64_t v27 = v24;
      uint64_t v17 = v32;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v26, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v20, v21, "Submitting to remote assistant: %s", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v31, -1, -1);
      MEMORY[0x1BA9E48C0](v22, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v28 = swift_retain();
    specialized static AceMetricsLogger.logRemoteAnalytics(service:command:)(v28, a1);
    swift_release();
    id v29 = specialized AceServiceInvokerImpl.wrapCommandForExecution(_:assistantId:)(a1, v17, v15);
    swift_bridgeObjectRelease();
    id v13 = v29;
    goto LABEL_25;
  }
LABEL_16:
  specialized static AceMetricsLogger.logAnalytics(command:)(a1);

  return a1;
}

void AceServiceInvokerImpl.addMissingCommandIds(_:setRefId:)(void *a1, char a2)
{
  long long v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  char v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = objc_msgSend(a1, sel_aceId);
  if (v10)
  {
    BOOL v11 = v10;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;
  }
  else
  {
    UUID.init()();
    uint64_t v12 = UUID.uuidString.getter();
    uint64_t v14 = v15;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v16 = (void *)MEMORY[0x1BA9E2DD0](v12, v14);
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setAceId_, v16);

  if (a2)
  {
    if (v3[8])
    {
      uint64_t v17 = v3[7];
      uint64_t v18 = v3[8];
    }
    else
    {
      uint64_t v17 = v3[5];
      uint64_t v18 = v3[6];
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    uint64_t v19 = (void *)MEMORY[0x1BA9E2DD0](v17, v18);
    swift_bridgeObjectRelease();
    objc_msgSend(a1, sel_setRefId_, v19);
  }
}

void specialized AceServiceInvokerImpl.addMissingComponentIds(_:setRefId:)(void *a1, char a2)
{
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 16) = a2;
  *(void *)(v4 + 24) = a1;
  self;
  uint64_t v5 = swift_dynamicCastObjCClass();
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    id v7 = a1;
    id v8 = objc_msgSend(v6, sel_dialogs);
    if (v8)
    {
      char v9 = v8;
      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SADialog);
      unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      id v11 = v7;
      _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8SADialogCG_AGs5NeverOTg50140_s14SiriKitRuntime21AceServiceInvokerImplC22addMissingComponentIds33_6F702868F5EE7637FC7805F00DECC893LL_8setRefIdySo13SABaseCommandC_SbtFSo8D7CAJcfU_SbSo13SABaseCommandCTf1cn_nTf4nng_n(v10, a2 & 1, v11);
      swift_bridgeObjectRelease();

      v12.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
    }
    else
    {
      v12.super.Class isa = 0;
    }
    objc_msgSend(v6, sel_setDialogs_, v12.super.isa);
    swift_release();

    return;
  }
  self;
  uint64_t v13 = (void *)swift_dynamicCastObjCClass();
  id v14 = a1;
  if (!v13)
  {
    swift_release();
    return;
  }
  id v26 = v14;
  id v15 = objc_msgSend(v13, sel_views);
  if (!v15)
  {
    Class isa = 0;
    objc_msgSend(v13, sel_setViews_, 0, v23);
LABEL_26:
    swift_release();

    return;
  }
  uint64_t v16 = v15;
  unint64_t v17 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
  unint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v18 >> 62) {
    goto LABEL_23;
  }
  uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v19)
  {
LABEL_24:
    swift_bridgeObjectRelease();
LABEL_25:
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v13, sel_setViews_, isa, v23);
    goto LABEL_26;
  }
  while (1)
  {
    unint64_t v23 = v17;
    id v24 = v13;
    uint64_t v29 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    if (v19 < 0) {
      break;
    }
    uint64_t v20 = 0;
    unint64_t v17 = v18 & 0xC000000000000001;
    while (v19 != v20)
    {
      if (v17) {
        id v21 = (id)MEMORY[0x1BA9E3990](v20, v18);
      }
      else {
        id v21 = *(id *)(v18 + 8 * v20 + 32);
      }
      unint64_t v22 = v21;
      uint64_t v27 = v21;
      closure #2 in AceServiceInvokerImpl.addMissingComponentIds(_:setRefId:)(&v27, a2 & 1, v26, (uint64_t (*)(void))partial apply for closure #1 in AceServiceInvokerImpl.addMissingComponentIds(_:setRefId:), v4, &v28);

      ++v20;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v13 = *(void **)(v29 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v19 == v20)
      {
        swift_bridgeObjectRelease();
        uint64_t v13 = v24;
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v19) {
      goto LABEL_24;
    }
  }
  __break(1u);

  swift_release();
  __break(1u);
}

uint64_t AceServiceInvokerImpl.shouldWrapCommandForExecution(_:)(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v38 = *(void *)(v2 - 8);
  uint64_t v39 = v2;
  MEMORY[0x1F4188790](v2);
  unint64_t v37 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = qword_1F1372AC8;
  if (qword_1F1372AC8)
  {
    uint64_t v5 = &byte_1F1372AD8;
    while (1)
    {
      int v7 = *v5++;
      int v6 = v7;
      switch(v7)
      {
        case 1:
          id v8 = (unint64_t *)&lazy cache variable for type metadata for SACFProvideContext;
          break;
        case 2:
          id v8 = (unint64_t *)&lazy cache variable for type metadata for SAInitiateHandoffOnCompanion;
          break;
        case 3:
          id v8 = (unint64_t *)&lazy cache variable for type metadata for SAPhoneClientCoordinationPhoneCall;
          break;
        case 4:
          id v8 = (unint64_t *)&lazy cache variable for type metadata for SASendCommands;
          break;
        case 5:
          id v8 = (unint64_t *)&lazy cache variable for type metadata for SAUIAddViews;
          break;
        case 6:
          id v8 = (unint64_t *)&lazy cache variable for type metadata for SAUISayIt;
          break;
        case 7:
          id v8 = (unint64_t *)&lazy cache variable for type metadata for SAUpdateReadingState;
          break;
        case 8:
          id v8 = (unint64_t *)&lazy cache variable for type metadata for SALogStringEvent;
          break;
        case 9:
          id v8 = (unint64_t *)&lazy cache variable for type metadata for SARDRemoteExecutionContextUpdate;
          break;
        case 10:
          id v8 = (unint64_t *)&lazy cache variable for type metadata for SAUIShowRequestHandlingStatus;
          break;
        case 11:
          id v8 = (unint64_t *)&lazy cache variable for type metadata for SAUIUpdateVisualResponseSnippet;
          break;
        default:
          id v8 = (unint64_t *)&lazy cache variable for type metadata for SAAceView;
          break;
      }
      type metadata accessor for OS_dispatch_queue(0, v8);
      if (objc_msgSend(a1, sel_isKindOfClass_, swift_getObjCClassFromMetadata())) {
        break;
      }
      if (!--v4) {
        goto LABEL_18;
      }
    }
    int v9 = 1;
    if ((*(unsigned char *)(v40 + 24) & 1) == 0) {
      goto LABEL_21;
    }
LABEL_19:
    unsigned int v36 = v9;
    swift_bridgeObjectRelease();
    int v35 = 1;
    goto LABEL_22;
  }
LABEL_18:
  int v9 = 0;
  int v6 = 12;
  if (*(unsigned char *)(v40 + 24)) {
    goto LABEL_19;
  }
LABEL_21:
  int v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  int v35 = 0;
  unsigned int v36 = v9 & v10;
LABEL_22:
  uint64_t v12 = v38;
  uint64_t v11 = v39;
  uint64_t v13 = v37;
  if (one-time initialization token for ace != -1) {
    swift_once();
  }
  uint64_t v14 = __swift_project_value_buffer(v11, (uint64_t)static Logger.ace);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v13, v14, v11);
  id v15 = a1;
  swift_retain_n();
  id v16 = v15;
  unint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v17, v18))
  {

    swift_release_n();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v13, v11);
    return v36;
  }
  uint64_t v19 = swift_slowAlloc();
  uint64_t v20 = swift_slowAlloc();
  uint64_t v42 = v20;
  *(_DWORD *)uint64_t v19 = 136446978;
  id v21 = objc_msgSend(v16, sel_encodedClassName);
  if (v21)
  {
    unint64_t v22 = v21;
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v25 = v24;

    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    if (v35) {
      uint64_t v26 = 0x6F69747563657845;
    }
    else {
      uint64_t v26 = 0xD000000000000010;
    }
    if (v35) {
      unint64_t v27 = 0xEF6563697665446ELL;
    }
    else {
      unint64_t v27 = 0x80000001BA0606E0;
    }
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 22) = 2080;
    if (v6 == 12) {
      uint64_t v28 = 0x6C61636F4C6E7552;
    }
    else {
      uint64_t v28 = 0x746F6D65526E7552;
    }
    if (v6 == 12) {
      unint64_t v29 = 0xE800000000000000;
    }
    else {
      unint64_t v29 = 0xE900000000000065;
    }
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 32) = 2080;
    uint64_t v30 = v36;
    if (v36) {
      uint64_t v31 = 1163219540;
    }
    else {
      uint64_t v31 = 0x45534C4146;
    }
    if (v36) {
      unint64_t v32 = 0xE400000000000000;
    }
    else {
      unint64_t v32 = 0xE500000000000000;
    }
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v17, v18, "AceServiceInvoker shouldWrapCommand=%{public}s runLocation=%s remoteCmdType=%s returns shouldExecuteRemote=%s", (uint8_t *)v19, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v20, -1, -1);
    MEMORY[0x1BA9E48C0](v19, -1, -1);

    (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v39);
    return v30;
  }

  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void AceServiceInvokerImpl.closeServerRequestIfRequired(givenCommand:)()
{
  uint64_t v1 = v0;
  if (one-time initialization token for ace != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.ace);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "Checking to see if server request should be closed..", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  if (one-time initialization token for userFacingResponseCommandList != -1) {
    swift_once();
  }
  int v6 = (void *)static AceServiceInvokerImpl.userFacingResponseCommandList;
  swift_getObjectType();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand.Type);
  LODWORD(v6) = objc_msgSend(v6, sel_containsObject_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v6)
  {
    int v7 = *(os_unfair_lock_s **)(v1 + 168);
    id v8 = v7 + 4;
    int v9 = v7 + 5;
    os_unfair_lock_lock(v7 + 5);
    partial apply for closure #1 in AceServiceInvokerImpl.closeServerRequest()(v8);
    os_unfair_lock_unlock(v9);
  }
}

uint64_t type metadata accessor for ExecutionOutput()
{
  uint64_t result = type metadata singleton initialization cache for ExecutionOutput;
  if (!type metadata singleton initialization cache for ExecutionOutput) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t ServiceBridgeDelegateXPCWrapper.submit(executionOutput:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  return ServiceBridgeDelegateXPCWrapper.submit(executionOutput:completion:)(a1, a2, a3, (uint64_t)&unk_1F1382D70, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.submit(executionOutput:completion:));
}

uint64_t protocol witness for CurareDonator.donateSiriExecutionTaskStep(activityType:eventContext:eventTime:requestContent:taskContent:taskId:taskName:app:attribute:parameterName:responseId:statusDescription:statusReason:) in conformance SiriKitCurareDonator(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  return SiriKitCurareDonator.donateSiriExecutionTaskStep(activityType:eventContext:eventTime:requestContent:taskContent:taskId:taskName:app:attribute:parameterName:responseId:statusDescription:statusReason:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21);
}

uint64_t SiriKitCurareDonator.donateSiriExecutionTaskStep(activityType:eventContext:eventTime:requestContent:taskContent:taskId:taskName:app:attribute:parameterName:responseId:statusDescription:statusReason:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v90 = a7;
  uint64_t v91 = a8;
  uint64_t v92 = a6;
  uint64_t v87 = a5;
  uint64_t v88 = a4;
  unint64_t v85 = a1;
  unint64_t v86 = a3;
  uint64_t v96 = a2;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  unint64_t v89 = *(void *)(v22 - 8);
  uint64_t v23 = *(void *)(v89 + 64);
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v95 = (uint64_t)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Date();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(void *)(v25 + 64);
  MEMORY[0x1F4188790](v24);
  long long v94 = (char *)&v66 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for ActivityType();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(void *)(v28 + 64);
  MEMORY[0x1F4188790](v27);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t result = MEMORY[0x1F4188790](v30 - 8);
  uint64_t v33 = (char *)&v66 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = *(void **)(v21 + 16);
  if (v34)
  {
    uint64_t v81 = a19;
    uint64_t v82 = a20;
    uint64_t v93 = a18;
    uint64_t v79 = a16;
    uint64_t v80 = a17;
    uint64_t v77 = a15;
    uint64_t v75 = a14;
    uint64_t v74 = a13;
    uint64_t v72 = a12;
    uint64_t v76 = a11;
    uint64_t v73 = a10;
    uint64_t v83 = a9;
    uint64_t v71 = v24;
    uint64_t v35 = (uint64_t)v33;
    id v78 = v34;
    uint64_t v84 = v35;
    static TaskPriority.background.getter();
    uint64_t v36 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 0, 1, v36);
    uint64_t v37 = v28;
    uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v28 + 16);
    uint64_t v70 = (char *)&v66 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v69 = v27;
    v38(v70, v85, v27);
    (*(void (**)(char *, unint64_t, uint64_t))(v25 + 16))(v94, v86, v24);
    outlined init with copy of SiriKitReliabilityCodes?(a21, v95);
    unint64_t v39 = (*(unsigned __int8 *)(v28 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
    unint64_t v40 = (v29 + *(unsigned __int8 *)(v25 + 80) + v39) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    unint64_t v41 = (v26 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v43 = (v42 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v67 = (v43 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v85 = (v67 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v66 = (v85 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v44 = (*(unsigned __int8 *)(v89 + 80) + v66 + 16) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80);
    unint64_t v45 = (v23 + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v68 = (v45 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v86 = (v68 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v89 = (v86 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v46 = (char *)swift_allocObject();
    *((void *)v46 + 2) = 0;
    *((void *)v46 + 3) = 0;
    *((void *)v46 + 4) = v96;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(&v46[v39], v70, v69);
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(&v46[v40], v94, v71);
    *(void *)&v46[v41] = v72;
    uint64_t v47 = &v46[v42];
    uint64_t v48 = v75;
    *(void *)uint64_t v47 = v74;
    *((void *)v47 + 1) = v48;
    unint64_t v49 = &v46[v43];
    uint64_t v50 = v76;
    *(void *)unint64_t v49 = v73;
    *((void *)v49 + 1) = v50;
    uint64_t v51 = &v46[v67];
    uint64_t v52 = v79;
    *(void *)uint64_t v51 = v77;
    *((void *)v51 + 1) = v52;
    uint64_t v53 = &v46[v85];
    uint64_t v54 = v93;
    *(void *)uint64_t v53 = v80;
    *((void *)v53 + 1) = v54;
    uint64_t v55 = &v46[v66];
    uint64_t v56 = v82;
    *(void *)uint64_t v55 = v81;
    *((void *)v55 + 1) = v56;
    outlined init with take of SiriKitReliabilityCodes?(v95, (uint64_t)&v46[v44]);
    uint64_t v57 = &v46[v45];
    uint64_t v58 = v90;
    *(void *)uint64_t v57 = v92;
    *((void *)v57 + 1) = v58;
    uint64_t v59 = &v46[v68];
    uint64_t v60 = v87;
    *(void *)uint64_t v59 = v88;
    *((void *)v59 + 1) = v60;
    unint64_t v61 = &v46[v86];
    uint64_t v62 = v83;
    *(void *)unint64_t v61 = v91;
    *((void *)v61 + 1) = v62;
    unint64_t v63 = v78;
    *(void *)&v46[v89] = v78;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v64 = v63;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v65 = v84;
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v84, (uint64_t)&async function pointer to partial apply for closure #1 in SiriKitCurareDonator.donateSiriExecutionTaskStep(activityType:eventContext:eventTime:requestContent:taskContent:taskId:taskName:app:attribute:parameterName:responseId:statusDescription:statusReason:), (uint64_t)v46);

    swift_release();
    return outlined destroy of ReferenceResolutionClientProtocol?(v65, &demangling cache variable for type metadata for TaskPriority?);
  }
  return result;
}

uint64_t outlined init with take of SiriKitReliabilityCodes?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined release of SiriKitRequestEvent(uint64_t a1)
{
  return a1;
}

uint64_t SiriKitFlowActivity.__deallocating_deinit()
{
  SiriKitFlowActivity.deinit();

  return swift_deallocClassInstance();
}

uint64_t SiriKitFlowActivity.deinit()
{
  uint64_t v0 = DefaultFlowActivity.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for CamBridge.commit(rcId:) in conformance CamBridgeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return CamBridgeImpl.commit(rcId:)(a1, a2);
}

uint64_t CamBridgeImpl.commit(rcId:)()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 152);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](CamBridgeImpl.commit(rcId:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = v0[18];
  uint64_t v2 = v0[16];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[15];
  swift_release();
  uint64_t v5 = type metadata accessor for UUID();
  int v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v1, 1, 1, v5);
  v6(v3, 1, 1, v5);
  v6(v2, 1, 1, v5);
  type metadata accessor for CamBridgeState();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = MEMORY[0x1E4FBC868];
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v1, v7 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v3, v7 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_camLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v2, v7 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_caarLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(void *)(v4 + 240) = v7;
  swift_retain();
  swift_release();
  CamBridgeImpl.camBridgeState.didset();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  NSObject *v17;
  os_log_type_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  void *v24;
  uint64_t v26;
  void *v27;
  uint64_t v28;

  uint64_t v27 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  uint64_t v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[14];
  if (v4)
  {
    int v6 = v0[13];
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    id v8 = swift_slowAlloc();
    uint64_t v26 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v2, v3, "CamBridge: Commit with rcId: %s.", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  int v9 = v0[15];
  swift_beginAccess();
  int v10 = *(void *)(v9 + 240);
  swift_beginAccess();
  uint64_t v11 = *(void *)(v10 + 16);
  if (!*(void *)(v11 + 16))
  {
    swift_retain();
LABEL_11:
    swift_endAccess();
    swift_release();
    swift_bridgeObjectRetain_n();
    unint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    uint64_t v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = v0[14];
    if (v19)
    {
      uint64_t v21 = v0[13];
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v26 = v23;
      *(_DWORD *)uint64_t v22 = 136315138;
      swift_bridgeObjectRetain();
      v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v20, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v17, v18, "CamBridge: Could not find camAction for rcId: %s. Possibly a followup", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v23, -1, -1);
      MEMORY[0x1BA9E48C0](v22, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    id v16 = 0;
    goto LABEL_15;
  }
  uint64_t v13 = v0[13];
  uint64_t v12 = v0[14];
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
  if ((v15 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  id v16 = *(unsigned char *)(*(void *)(v11 + 56) + v14);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
LABEL_15:
  uint64_t v24 = (void *)swift_task_alloc();
  v0[20] = v24;
  void *v24 = v0;
  v24[1] = CamBridgeImpl.commit(rcId:);
  return CamBridgeImpl.commit(action:)(v16);
}

uint64_t CamBridgeImpl.commit(rcId:)(uint64_t a1, uint64_t a2)
{
  v3[14] = a2;
  v3[15] = v2;
  v3[13] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static MessageBusActor.shared;
  v3[19] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](CamBridgeImpl.commit(rcId:), v4, 0);
}

uint64_t CamBridgeImpl.commit(action:)()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 240);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](CamBridgeImpl.commit(action:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  int v3;
  int8x16_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  long long *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  char v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint8_t *v19;
  char v20;
  uint64_t (*v21)(void);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  uint64_t v24 = v0;
  uint64_t v1 = *(void *)(v0 + 232);
  swift_release();
  uint64_t v2 = (uint64_t *)(v1 + 144);
  swift_beginAccess();
  outlined init with copy of CamBridgeImpl.CamState(v2, v0 + 64);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 105);
  if (v3 == 1)
  {
    int v9 = (long long *)(v0 + 16);
    int v10 = v0 + 112;
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 64), v0 + 112);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    uint64_t v12 = Logger.logObject.getter();
    uint64_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = *(unsigned char *)(v0 + 59);
      id v15 = (uint8_t *)swift_slowAlloc();
      id v16 = swift_slowAlloc();
      uint64_t v23 = v16;
      *(_DWORD *)id v15 = 136315138;
      *(unsigned char *)(v0 + 58) = v14;
      unint64_t v17 = String.init<A>(describing:)();
      *(void *)(v0 + 224) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      int v10 = v0 + 112;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v12, v13, "CamBridge: Setting previous cam action to: %s", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v16, -1, -1);
      uint64_t v19 = v15;
      int v9 = (long long *)(v0 + 16);
      MEMORY[0x1BA9E48C0](v19, -1, -1);
    }

    uint64_t v20 = *(unsigned char *)(v0 + 59);
    outlined init with copy of ReferenceResolutionClientProtocol(v10, (uint64_t)v9);
    *(unsigned char *)(v0 + 56) = v20;
    *(unsigned char *)(v0 + 57) = 1;
    swift_beginAccess();
    outlined assign with copy of CamBridgeImpl.CamState(v9, (uint64_t)v2);
    swift_endAccess();
    CamBridgeImpl.camState.didset();
    outlined destroy of CamBridgeImpl.CamState((uint64_t)v9);
    __swift_destroy_boxed_opaque_existential_1Tm(v10);
  }
  else if (v3 != 3 {
         || *(unsigned char *)(v0 + 104)
  }
         || (uint64_t v4 = vorrq_s8(*(int8x16_t *)(v0 + 72), *(int8x16_t *)(v0 + 88)),
             *(void *)&vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)) | *(void *)(v0 + 64)))
  {
    outlined destroy of CamBridgeImpl.CamState(v0 + 64);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
    uint64_t v6 = Logger.logObject.getter();
    uint64_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v8 = 0;
      _os_log_impl(&dword_1B9C64000, v6, v7, "CamBridge: Commit called while CamBridge in uninitialized state. Ignoring.", v8, 2u);
      MEMORY[0x1BA9E48C0](v8, -1, -1);
    }
  }
  uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
  return v21();
}

uint64_t CamBridgeImpl.commit(action:)(char a1)
{
  *(void *)(v2 + 232) = v1;
  *(unsigned char *)(v2 + 59) = a1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  *(void *)(v2 + 240) = static MessageBusActor.shared;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v2 + 248) = v3;
  *uint64_t v3 = v2;
  v3[1] = CamBridgeImpl.commit(action:);
  return CamBridgeImpl.waitForCamWarmup()();
}

uint64_t outlined assign with copy of CamBridgeImpl.CamState(long long *a1, uint64_t a2)
{
  return a2;
}

uint64_t assignWithCopy for CamBridgeImpl.CamState(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 3) {
      unsigned int v4 = *(_DWORD *)a1 + 3;
    }
    switch(v4)
    {
      case 2u:

        break;
      case 1u:
        __swift_destroy_boxed_opaque_existential_1Tm(a1);
        break;
      case 0u:
        swift_release();
        break;
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 41);
    if (v5 >= 3) {
      unsigned int v5 = *(_DWORD *)a2 + 3;
    }
    if (v5 == 2)
    {
      uint64_t v6 = *(void **)a2;
      id v7 = v6;
      *(void *)a1 = v6;
      *(unsigned char *)(a1 + 41) = 2;
    }
    else if (v5 == 1)
    {
      uint64_t v8 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v8;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v8 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
      *(unsigned char *)(a1 + 41) = 1;
    }
    else if (v5)
    {
      long long v9 = *a2;
      long long v10 = a2[1];
      *(_OWORD *)(a1 + 26) = *(long long *)((char *)a2 + 26);
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v10;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 41) = 0;
      swift_retain();
    }
  }
  return a1;
}

void CamBridgeImpl.camState.didset()
{
  uint64_t v1 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  swift_retain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unsigned int v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v10 = v6;
    *(_DWORD *)unsigned int v5 = 136315138;
    swift_beginAccess();
    outlined init with copy of CamBridgeImpl.CamState((uint64_t *)(v1 + 144), (uint64_t)v9);
    uint64_t v7 = String.init<A>(describing:)();
    v9[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v3, v4, "CamBridge: camState set to %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v6, -1, -1);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }
  else
  {

    swift_release_n();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for AnnounceTypeGlobalOverride(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t getEnumTag for CamBridgeImpl.CamState(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 41);
  if (result >= 3) {
    return (*(_DWORD *)a1 + 3);
  }
  return result;
}

ValueMetadata *type metadata accessor for ConversationAction()
{
  return &type metadata for ConversationAction;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnyEncodable()
{
  return (*v0)();
}

uint64_t lazy protocol witness table accessor for type Parse and conformance Parse(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ConversationAction(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t partial apply for closure #2 in ConversationService.bridge(didReceiveCommitResultCandidateId:from:)()
{
  char v2 = *(unsigned char *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = swift_task_alloc();
  long long v5 = *(_OWORD *)(v0 + 16);
  long long v6 = *(_OWORD *)(v0 + 32);
  long long v7 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  *(void *)(v4 + 64) = v3;
  *(unsigned char *)(v4 + 128) = v2;
  *(_OWORD *)(v4 + 32) = v6;
  *(_OWORD *)(v4 + 48) = v7;
  *(_OWORD *)(v4 + 16) = v5;
  return MEMORY[0x1F4188298](closure #2 in ConversationService.bridge(didReceiveCommitResultCandidateId:from:), 0, 0);
}

void ConversationBridgeProcessorDelegate.submit(executionOutput:completion:)(void *a1, void (*a2)(void, void *), uint64_t a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void *, void (*)(void, void *), uint64_t))(*(void *)Strong + 984))(a1, a2, a3);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
    int v8 = a1;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v17 = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v14 = *(void *)&v8[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
      unint64_t v13 = *(void *)&v8[OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v9, v10, "ConversationRequestProcessor already released, ingoring sumbit of %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v12, -1, -1);
      MEMORY[0x1BA9E48C0](v11, -1, -1);
    }
    else
    {
    }
    lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
    id v15 = (void *)swift_allocError();
    *id v16 = 0;
    a2(0, v15);
  }
}

void ConversationRequestProcessor.submit(executionOutput:completion:)(void *a1, void (*a2)(void, void), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v127 = (char *)&v124 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v132 = (char *)&v124 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SelectedUserAttributes();
  uint64_t v130 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v128 = (char *)&v124 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SelectedUserAttributes?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v129 = (char *)&v124 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UserID();
  uint64_t v138 = *(void (***)(char *, uint64_t, uint64_t))(v16 - 8);
  uint64_t v139 = v16;
  MEMORY[0x1F4188790](v16);
  int v136 = (char *)&v124 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for RequestType();
  uint64_t v134 = *(void *)(v18 - 8);
  uint64_t v135 = v18;
  MEMORY[0x1F4188790](v18);
  uint64_t v133 = (char *)&v124 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
  uint64_t v22 = a1;
  unint64_t v140 = (Swift::String *)v21;
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v141 = v22;
  uint64_t v131 = v12;
  if (v25)
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v137 = a2;
    uint64_t v27 = (uint8_t *)v26;
    uint64_t v28 = swift_slowAlloc();
    v144[0] = v28;
    *(_DWORD *)uint64_t v27 = 136315138;
    os_log_t v126 = v27 + 4;
    id v29 = objc_msgSend(v22, sel_debugDescription);
    uint64_t v30 = v4;
    uint64_t v31 = a3;
    id v32 = v29;
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v35 = v34;

    a3 = v31;
    uint64_t v4 = v30;
    uint64_t v22 = v141;
    uint64_t ObjectType = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v23, v24, "<<<--- %s", v27, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v28, -1, -1);
    uint64_t v36 = v27;
    a2 = v137;
    MEMORY[0x1BA9E48C0](v36, -1, -1);
  }
  else
  {
  }
  uint64_t v38 = *(void *)&v22[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
  unint64_t v37 = *(void *)&v22[OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8];
  uint64_t countAndFlagsBits = v4[4]._countAndFlagsBits;
  unint64_t object = (unint64_t)v4[4]._object;
  if ((v38 != countAndFlagsBits || v37 != object)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    && (v38 != v4[5]._countAndFlagsBits || (void *)v37 != v4[5]._object)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v107 = v22;
    swift_retain();
    unint64_t v108 = Logger.logObject.getter();
    uint64_t v109 = v4;
    os_log_type_t v110 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v108, v110))
    {
      uint64_t v111 = swift_slowAlloc();
      unint64_t v140 = v109;
      uint64_t v112 = v111;
      uint64_t v141 = (char *)swift_slowAlloc();
      v144[0] = (uint64_t)v141;
      *(_DWORD *)uint64_t v112 = 136315394;
      os_log_t v126 = (uint8_t *)countAndFlagsBits;
      swift_bridgeObjectRetain();
      uint64_t ObjectType = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v37, v144);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v112 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t ObjectType = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v126, object, v144);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl(&dword_1B9C64000, v108, v110, "Received FlowOutput for requestId:%s on ConversationRequestProcessor with requestId:%s .. dropping it on the floor", (uint8_t *)v112, 0x16u);
      int v113 = v141;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v113, -1, -1);
      MEMORY[0x1BA9E48C0](v112, -1, -1);
    }
    else
    {

      swift_release();
    }

    lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
    uint64_t v62 = (void *)swift_allocError();
    *unint64_t v123 = 0;
LABEL_19:
    a2(0, v62);

    return;
  }
  uint64_t v41 = (*(uint64_t (**)(void))(v4->_countAndFlagsBits + 592))();
  if (!v41)
  {
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      unint64_t v61 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v61 = 0;
      _os_log_impl(&dword_1B9C64000, v59, v60, "Request already canceled. Not submitting flow output", v61, 2u);
      MEMORY[0x1BA9E48C0](v61, -1, -1);
    }

    lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
    uint64_t v62 = (void *)swift_allocError();
    *unint64_t v63 = 1;
    goto LABEL_19;
  }
  uint64_t v42 = v41;
  os_log_t v126 = (uint8_t *)countAndFlagsBits;
  unint64_t v43 = (uint64_t *)(v41 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  uint64_t v44 = *v43;
  if ((unint64_t)*v43 >> 62 == 1)
  {
    uint64_t v137 = a2;
    uint64_t v124 = a3;
    uint64_t v45 = v44 & 0x3FFFFFFFFFFFFFFFLL;
    uint64_t v46 = v42 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v134 + 16))(v133, v46, v135);
    uint64_t v47 = (void **)(v42 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo);
    swift_beginAccess();
    uint64_t v48 = *v47;
    v138[2](v136, v45 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId, v139);
    unint64_t v49 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *(void *)v141) + 0xB0);
    id v50 = v48;
    uint64_t v51 = swift_retain();
    char v52 = v49(v51);
    uint64_t v53 = v129;
    (*(void (**)(void))(*(void *)v45 + 760))();
    uint64_t v54 = (uint64_t)v53;
    uint64_t v55 = v130;
    uint64_t v56 = v131;
    int v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v130 + 48))(v54, 1, v131);
    unint64_t v125 = object;
    if (v57)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v54, &demangling cache variable for type metadata for SelectedUserAttributes?);
      char v58 = 0;
    }
    else
    {
      uint64_t v84 = v54;
      unint64_t v85 = v128;
      (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v128, v84, v56);
      outlined destroy of ReferenceResolutionClientProtocol?(v84, &demangling cache variable for type metadata for SelectedUserAttributes?);
      char v86 = SelectedUserAttributes.meetsUserSessionThreshold.getter();
      uint64_t v87 = v55;
      char v58 = v86;
      (*(void (**)(char *, uint64_t))(v87 + 8))(v85, v56);
    }
    uint64_t v88 = v42;
    type metadata accessor for ConversationContextUpdateMetadata();
    uint64_t v89 = swift_allocObject();
    *(unsigned char *)(v89 + 16) = 0;
    (*(void (**)(uint64_t, char *, uint64_t))(v134 + 32))(v89 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType, v133, v135);
    *(void *)(v89 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo) = v48;
    v138[4]((char *)(v89 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId), (uint64_t)v136, v139);
    *(unsigned char *)(v89 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) = v52 & 1;
    *(unsigned char *)(v89 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_meetsUserSessionThreshold) = v58 & 1;
    uint64_t v90 = v141;
    uint64_t v91 = *(void *)&v141[OBJC_IVAR___SKRExecutionOutput_contextUpdate];
    unint64_t v140 = (Swift::String *)v45;
    swift_bridgeObjectRetain();
    specialized ConversationRequestProcessor.applyEmptyNativeFlowContextUpdateIfRequired(_:selectedResultCandidateId:metadata:)(v91, v89);
    swift_bridgeObjectRelease();
    (*(void (**)(void))(**(void **)((char *)&v4->_countAndFlagsBits
                                                 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_recentDialogTracker)
                                   + 256))(*(void *)&v90[OBJC_IVAR___SKRExecutionOutput_command]);
    if (one-time initialization token for insightRequestSummaryLogger != -1) {
      swift_once();
    }
    uint64_t v92 = type metadata accessor for InsightRequestSummaryLogger();
    uint64_t v93 = __swift_project_value_buffer(v92, (uint64_t)static Logger.insightRequestSummaryLogger);
    long long v94 = v90;
    swift_retain();
    specialized InsightRequestSummaryLogger.emitDebug(_:)(v93, v4, (uint64_t)v94);

    swift_release();
    uint64_t v95 = *(uint64_t *)((char *)&v4->_countAndFlagsBits
                     + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionOutputSubmitter);
    uint64_t v141 = (char *)v4[5]._countAndFlagsBits;
    uint64_t v96 = v4[5]._object;
    uint64_t v138 = (void (**)(char *, uint64_t, uint64_t))((char *)v4
                                                          + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater);
    uint64_t v139 = (uint64_t)v96;
    long long v97 = (char *)v4[6]._countAndFlagsBits;
    uint64_t v135 = (uint64_t)v4[6]._object;
    int v136 = v97;
    uint64_t v98 = (char *)v4 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
    uint64_t v99 = type metadata accessor for UUID();
    int v100 = v4;
    uint64_t v101 = *(void *)(v99 - 8);
    uint64_t v102 = (uint64_t)v132;
    (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v132, v98, v99);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v101 + 56))(v102, 0, 1, v99);
    uint64_t v103 = (void *)swift_allocObject();
    v103[2] = v100;
    v103[3] = v88;
    unint64_t v104 = v137;
    v103[4] = v94;
    v103[5] = v104;
    v103[6] = v124;
    uint64_t v105 = *(void (**)(char *, uint8_t *, unint64_t, char *, uint64_t, void (**)(char *, uint64_t, uint64_t), void, uint64_t, char *, uint64_t, uint64_t, void, void, uint64_t (*)(void *, void *), void *))(*(void *)v95 + 296);
    unint64_t v106 = v94;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v105(v106, v126, v125, v141, v139, v138, 0, v89, v136, v135, v102, 0, 0, partial apply for closure #1 in ConversationRequestProcessor.submit(executionOutput:completion:), v103);
    swift_release();
    swift_release_n();
    swift_release();
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v102, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  else
  {
    id v64 = *(void **)&v141[OBJC_IVAR___SKRExecutionOutput_command];
    if (!v64) {
      goto LABEL_26;
    }
    uint64_t v65 = one-time initialization token for warmUpSignals;
    id v66 = v64;
    if (v65 != -1) {
      swift_once();
    }
    unint64_t v67 = (void *)static ConversationRequestProcessor.warmUpSignals;
    uint64_t ObjectType = (char *)swift_getObjectType();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand.Type);
    LODWORD(v67) = objc_msgSend(v67, sel_containsObject_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_unknownObjectRelease();

    if (v67)
    {
      unint64_t v125 = object;
      unint64_t v68 = v141;
      uint64_t v69 = Logger.logObject.getter();
      os_log_type_t v70 = static os_log_type_t.debug.getter();
      BOOL v71 = os_log_type_enabled(v69, v70);
      uint64_t v141 = v68;
      if (v71)
      {
        uint64_t v72 = (uint8_t *)swift_slowAlloc();
        int v136 = (char *)swift_slowAlloc();
        uint64_t v137 = (void (*)(void, void))v42;
        uint64_t ObjectType = v136;
        *(_DWORD *)uint64_t v72 = 136315138;
        unint64_t v140 = v4;
        uint64_t v142 = (uint64_t)v64;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
        uint64_t v73 = Optional.debugDescription.getter();
        uint64_t v142 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, (uint64_t *)&ObjectType);
        uint64_t v4 = v140;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1B9C64000, v69, v70, "Sending warmUp command: %s", v72, 0xCu);
        uint64_t v75 = v136;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v75, -1, -1);
        MEMORY[0x1BA9E48C0](v72, -1, -1);
      }
      else
      {
      }
      uint64_t v114 = *(uint64_t *)((char *)&v4->_countAndFlagsBits
                        + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionOutputSubmitter);
      uint64_t v115 = v4[5]._countAndFlagsBits;
      uint64_t v116 = v4[5]._object;
      uint64_t v117 = type metadata accessor for UUID();
      uint64_t v118 = (uint64_t)v132;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v117 - 8) + 56))(v132, 1, 1, v117);
      uint64_t v119 = (uint64_t)v127;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v138[7])(v127, 1, 1, v139);
      (*(void (**)(void *, uint8_t *, unint64_t, uint64_t, void *, void, void, void, uint64_t, uint64_t, _BYTE, void (*)(void, void), uint64_t))(*(void *)v114 + 328))(v64, v126, v125, v115, v116, 0, 0, 0, v118, v119, 0, a2, a3);
      outlined destroy of ReferenceResolutionClientProtocol?(v119, (uint64_t *)&demangling cache variable for type metadata for UserID?);
      outlined destroy of ReferenceResolutionClientProtocol?(v118, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      if (one-time initialization token for insightRequestSummaryLogger != -1) {
        swift_once();
      }
      uint64_t v120 = type metadata accessor for InsightRequestSummaryLogger();
      uint64_t v121 = __swift_project_value_buffer(v120, (uint64_t)static Logger.insightRequestSummaryLogger);
      uint64_t v122 = v141;
      swift_retain();
      specialized InsightRequestSummaryLogger.emitDebug(_:)(v121, v4, (uint64_t)v122);

      swift_release();
    }
    else
    {
LABEL_26:
      uint64_t v76 = Logger.logObject.getter();
      os_log_type_t v77 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v76, v77))
      {
        id v78 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v78 = 0;
        _os_log_impl(&dword_1B9C64000, v76, v77, "EXECUTION IS TRYING TO SUBMIT FLOWOUTPUT BEFORE ENDPOINTING!! THIS MUST NOT HAPPEN", v78, 2u);
        MEMORY[0x1BA9E48C0](v78, -1, -1);
      }

      if (one-time initialization token for insightRequestSummaryLogger != -1) {
        swift_once();
      }
      uint64_t v79 = type metadata accessor for InsightRequestSummaryLogger();
      uint64_t v80 = __swift_project_value_buffer(v79, (uint64_t)static Logger.insightRequestSummaryLogger);
      uint64_t v81 = v141;
      swift_retain();
      specialized InsightRequestSummaryLogger.emitDebug(_:)(v80, v4, (uint64_t)v81);

      swift_release();
      lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
      uint64_t v82 = (void *)swift_allocError();
      unsigned char *v83 = 8;
      a2(0, v82);
    }
    swift_release();
  }
}

uint64_t ExecutionOutput.debugDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = 0x3E6C696E3CLL;
  uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  MEMORY[0x1F4188790](v63);
  uint64_t v4 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = 0;
  unint64_t v67 = 0xE000000000000000;
  _StringGuts.grow(_:)(118);
  v5._uint64_t countAndFlagsBits = 538976288;
  v5._unint64_t object = (void *)0xE400000000000000;
  String.append(_:)(v5);
  long long v6 = (objc_class *)type metadata accessor for ExecutionOutput();
  v65.receiver = v0;
  v65.super_class = v6;
  id v7 = objc_msgSendSuper2(&v65, sel_debugDescription, v63);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  v11._uint64_t countAndFlagsBits = v8;
  v11._unint64_t object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 0x20202020207B20;
  v12._unint64_t object = (void *)0xE700000000000000;
  String.append(_:)(v12);
  char v64 = 0;
  _print_unlocked<A, B>(_:_:)();
  v13._uint64_t countAndFlagsBits = 8250;
  v13._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  uint64_t v14 = *(void *)&v1[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
  uint64_t v15 = *(void **)&v1[OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8];
  swift_bridgeObjectRetain();
  v16._uint64_t countAndFlagsBits = v14;
  v16._unint64_t object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._uint64_t countAndFlagsBits = 0x20202020202CLL;
  v17._unint64_t object = (void *)0xE600000000000000;
  String.append(_:)(v17);
  char v64 = 1;
  _print_unlocked<A, B>(_:_:)();
  v18._uint64_t countAndFlagsBits = 8250;
  v18._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v18);
  uint64_t v19 = *(void **)&v1[OBJC_IVAR___SKRExecutionOutput_command];
  if (v19)
  {
    id v20 = objc_msgSend(v19, sel_debugDescription);
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;
  }
  else
  {
    uint64_t v23 = (void *)0xE500000000000000;
    uint64_t v21 = 0x3E6C696E3CLL;
  }
  v24._uint64_t countAndFlagsBits = v21;
  v24._unint64_t object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = 0x20202020202CLL;
  v25._unint64_t object = (void *)0xE600000000000000;
  String.append(_:)(v25);
  char v64 = 2;
  _print_unlocked<A, B>(_:_:)();
  v26._uint64_t countAndFlagsBits = 8250;
  v26._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v26);
  uint64_t v27 = *(void **)&v1[OBJC_IVAR___SKRExecutionOutput_contextUpdate];
  if (v27)
  {
    id v28 = objc_msgSend(v27, sel_debugDescription);
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v31 = v30;
  }
  else
  {
    uint64_t v31 = (void *)0xE500000000000000;
    uint64_t v29 = 0x3E6C696E3CLL;
  }
  v32._uint64_t countAndFlagsBits = v29;
  v32._unint64_t object = v31;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._uint64_t countAndFlagsBits = 0x20202020202CLL;
  v33._unint64_t object = (void *)0xE600000000000000;
  String.append(_:)(v33);
  char v64 = 3;
  _print_unlocked<A, B>(_:_:)();
  v34._uint64_t countAndFlagsBits = 8250;
  v34._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v34);
  if (*(void *)&v1[OBJC_IVAR___SKRExecutionOutput_fullPrint + 8])
  {
    uint64_t v35 = String.debugDescription.getter();
    unint64_t v37 = v36;
  }
  else
  {
    unint64_t v37 = 0xE500000000000000;
    uint64_t v35 = 0x3E6C696E3CLL;
  }
  unint64_t v38 = v37;
  String.append(_:)(*(Swift::String *)&v35);
  swift_bridgeObjectRelease();
  v39._uint64_t countAndFlagsBits = 0x20202020202CLL;
  v39._unint64_t object = (void *)0xE600000000000000;
  String.append(_:)(v39);
  char v64 = 4;
  _print_unlocked<A, B>(_:_:)();
  v40._uint64_t countAndFlagsBits = 8250;
  v40._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v40);
  if (*(void *)&v1[OBJC_IVAR___SKRExecutionOutput_fullSpeak + 8])
  {
    uint64_t v41 = String.debugDescription.getter();
    unint64_t v43 = v42;
  }
  else
  {
    unint64_t v43 = 0xE500000000000000;
    uint64_t v41 = 0x3E6C696E3CLL;
  }
  unint64_t v44 = v43;
  String.append(_:)(*(Swift::String *)&v41);
  swift_bridgeObjectRelease();
  v45._uint64_t countAndFlagsBits = 0x20202020202CLL;
  v45._unint64_t object = (void *)0xE600000000000000;
  String.append(_:)(v45);
  char v64 = 5;
  _print_unlocked<A, B>(_:_:)();
  v46._uint64_t countAndFlagsBits = 8250;
  v46._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v46);
  if (*(void *)&v1[OBJC_IVAR___SKRExecutionOutput_redactedFullPrint + 8])
  {
    uint64_t v47 = String.debugDescription.getter();
    unint64_t v49 = v48;
  }
  else
  {
    unint64_t v49 = 0xE500000000000000;
    uint64_t v47 = 0x3E6C696E3CLL;
  }
  unint64_t v50 = v49;
  String.append(_:)(*(Swift::String *)&v47);
  swift_bridgeObjectRelease();
  v51._uint64_t countAndFlagsBits = 0x20202020202CLL;
  v51._unint64_t object = (void *)0xE600000000000000;
  String.append(_:)(v51);
  char v64 = 6;
  _print_unlocked<A, B>(_:_:)();
  v52._uint64_t countAndFlagsBits = 8250;
  v52._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v52);
  if (*(void *)&v1[OBJC_IVAR___SKRExecutionOutput_redactedFullSpeak + 8])
  {
    uint64_t v2 = String.debugDescription.getter();
    uint64_t v54 = v53;
  }
  else
  {
    uint64_t v54 = (void *)0xE500000000000000;
  }
  v55._uint64_t countAndFlagsBits = v2;
  v55._unint64_t object = v54;
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  v56._uint64_t countAndFlagsBits = 0x20202020202CLL;
  v56._unint64_t object = (void *)0xE600000000000000;
  String.append(_:)(v56);
  char v64 = 7;
  _print_unlocked<A, B>(_:_:)();
  v57._uint64_t countAndFlagsBits = 8250;
  v57._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v57);
  type metadata accessor for RequestSummary.ExecutionSource();
  _print_unlocked<A, B>(_:_:)();
  v58._uint64_t countAndFlagsBits = 538976288;
  v58._unint64_t object = (void *)0xE400000000000000;
  String.append(_:)(v58);
  char v64 = 8;
  _print_unlocked<A, B>(_:_:)();
  v59._uint64_t countAndFlagsBits = 8250;
  v59._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v59);
  outlined init with copy of FlowOutputMessage.InAppResponse?((uint64_t)&v1[OBJC_IVAR___SKRExecutionOutput_inAppResponse], (uint64_t)v4);
  v60._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  v61._uint64_t countAndFlagsBits = 0x7D20202020;
  v61._unint64_t object = (void *)0xE500000000000000;
  String.append(_:)(v61);
  return v66;
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)()
{
  return Optional<A>.encode(to:)();
}

{
  return partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)();
}

{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool?);
  return Optional<A>.encode(to:)();
}

{
  return specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)();
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)(uint64_t a1)
{
  return partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)(a1, &demangling cache variable for type metadata for Parse?, &lazy protocol witness table cache variable for type Parse and conformance Parse, MEMORY[0x1E4FA1F68]);
}

{
  return partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)(a1, &demangling cache variable for type metadata for CamParse?, &lazy protocol witness table cache variable for type CamParse and conformance CamParse, MEMORY[0x1E4F9FA58]);
}

{
  return partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)(a1, &demangling cache variable for type metadata for Int?);
}

{
  return partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)(a1, &demangling cache variable for type metadata for Double?);
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)(uint64_t a1, uint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  return Optional<A>.encode(to:)();
}

unint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
  }
  uint64_t v32 = v1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(v1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v31 = (unint64_t)(63 - v3) >> 6;
  long long v6 = &v37;
  id v7 = &v39;
  unint64_t result = swift_bridgeObjectRetain();
  int64_t i = 0;
  uint64_t v10 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v11 = MEMORY[0x1E4FBB1A0];
  if (v5) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v20 = i + 1;
  if (__OFADD__(i, 1)) {
    goto LABEL_35;
  }
  if (v20 >= v31) {
    goto LABEL_32;
  }
  unint64_t v21 = *(void *)(v32 + 8 * v20);
  int64_t v22 = i + 1;
  if (!v21)
  {
    int64_t v22 = i + 2;
    if (i + 2 >= v31) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v32 + 8 * v22);
    if (!v21)
    {
      int64_t v22 = i + 3;
      if (i + 3 >= v31) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v32 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = i + 4;
        if (i + 4 >= v31) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v32 + 8 * v22);
        if (!v21)
        {
          int64_t v23 = i + 5;
          if (i + 5 < v31)
          {
            unint64_t v21 = *(void *)(v32 + 8 * v23);
            if (v21)
            {
              int64_t v22 = i + 5;
              goto LABEL_26;
            }
            while (1)
            {
              int64_t v22 = v23 + 1;
              if (__OFADD__(v23, 1)) {
                goto LABEL_36;
              }
              if (v22 >= v31) {
                break;
              }
              unint64_t v21 = *(void *)(v32 + 8 * v22);
              ++v23;
              if (v21) {
                goto LABEL_26;
              }
            }
          }
LABEL_32:
          outlined consume of [Int : @Sendable ()].Iterator._Variant();
          return (unint64_t)v2;
        }
      }
    }
  }
LABEL_26:
  uint64_t v34 = (v21 - 1) & v21;
  unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
  for (i = v22; ; unint64_t v19 = __clz(__rbit64(v5)) | (i << 6))
  {
    Swift::String v24 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v19);
    uint64_t v35 = *v24;
    uint64_t v36 = v24[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v6, v7);
    outlined init with take of Any(v7, v40);
    outlined init with take of Any(v40, &v38);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v35, v36);
    unint64_t v25 = result;
    if (v26)
    {
      int64_t v33 = i;
      Swift::String v12 = v7;
      Swift::String v13 = v6;
      uint64_t v14 = v1;
      uint64_t v15 = v11;
      uint64_t v16 = v10;
      Swift::String v17 = (uint64_t *)(v2[6] + 16 * result);
      swift_bridgeObjectRelease();
      *Swift::String v17 = v35;
      v17[1] = v36;
      uint64_t v10 = v16;
      uint64_t v11 = v15;
      uint64_t v1 = v14;
      long long v6 = v13;
      id v7 = v12;
      int64_t i = v33;
      Swift::String v18 = (_OWORD *)(v2[7] + 32 * v25);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
      unint64_t result = (unint64_t)outlined init with take of Any(&v38, v18);
      unint64_t v5 = v34;
      if (!v34) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
    if (v2[2] >= v2[3]) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v27 = (uint64_t *)(v2[6] + 16 * result);
    uint64_t *v27 = v35;
    v27[1] = v36;
    unint64_t result = (unint64_t)outlined init with take of Any(&v38, (_OWORD *)(v2[7] + 32 * result));
    uint64_t v28 = v2[2];
    BOOL v29 = __OFADD__(v28, 1);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_34;
    }
    v2[2] = v30;
    unint64_t v5 = v34;
    if (!v34) {
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v34 = (v5 - 1) & v5;
  }
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = MEMORY[0x1E4FBC868];
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    Swift::String v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    outlined init with take of Any(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    outlined init with take of Any(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    outlined init with take of Any(v36, v37);
    outlined init with take of Any(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
    uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v6 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)(v6 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v6 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = *(void *)(v2 + 48) + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)outlined init with take of Any(&v33, (_OWORD *)(*(void *)(v2 + 56) + 32 * v9));
    ++*(void *)(v2 + 16);
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    outlined consume of [Int : @Sendable ()].Iterator._Variant();
    return v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  unsigned char v65[32];
  unsigned char v66[40];

  Swift::String v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: ConversationSessionKey, value: Any?));
  MEMORY[0x1F4188790](v60);
  Swift::String v59 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationSessionKey, Any?));
  MEMORY[0x1F4188790](v58);
  Swift::String v57 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ConversationSessionKey();
  Swift::String v61 = *(void *)(v4 - 8);
  unint64_t v5 = MEMORY[0x1F4188790](v4);
  id v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  Swift::String v55 = (char *)&v46 - v8;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: ConversationSessionKey, value: Sendable?));
  unint64_t v9 = MEMORY[0x1F4188790](v54);
  uint64_t v53 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  Swift::String v52 = (char *)&v46 - v11;
  uint64_t v62 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ConversationSessionKey, Any?>);
    unint64_t v12 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v12 = MEMORY[0x1E4FBC868];
  }
  int64_t v13 = *(void *)(v62 + 64);
  unint64_t v48 = v62 + 64;
  unint64_t v14 = -1 << *(unsigned char *)(v62 + 32);
  if (-v14 < 64) {
    int64_t v15 = ~(-1 << -(char)v14);
  }
  else {
    int64_t v15 = -1;
  }
  int64_t v16 = v15 & v13;
  Swift::String v46 = -1 << *(unsigned char *)(v62 + 32);
  uint64_t v47 = (unint64_t)(63 - v14) >> 6;
  Swift::String v51 = v61 + 16;
  unint64_t v50 = v61 + 32;
  Swift::String v17 = v12 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  uint64_t v63 = 0;
  Swift::String v56 = v7;
  unint64_t v49 = v12;
  while (1)
  {
    if (v16)
    {
      char v64 = (v16 - 1) & v16;
      uint64_t v20 = __clz(__rbit64(v16)) | (v63 << 6);
      goto LABEL_28;
    }
    unint64_t v21 = v63 + 1;
    if (__OFADD__(v63, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v21 >= v47) {
      goto LABEL_37;
    }
    unint64_t v22 = *(void *)(v48 + 8 * v21);
    char v23 = v63 + 1;
    if (!v22)
    {
      char v23 = v63 + 2;
      if (v63 + 2 >= v47) {
        goto LABEL_37;
      }
      unint64_t v22 = *(void *)(v48 + 8 * v23);
      if (!v22)
      {
        char v23 = v63 + 3;
        if (v63 + 3 >= v47) {
          goto LABEL_37;
        }
        unint64_t v22 = *(void *)(v48 + 8 * v23);
        if (!v22)
        {
          char v23 = v63 + 4;
          if (v63 + 4 >= v47) {
            goto LABEL_37;
          }
          unint64_t v22 = *(void *)(v48 + 8 * v23);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_27:
    uint64_t v63 = v23;
    char v64 = (v22 - 1) & v22;
    uint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
LABEL_28:
    uint64_t v26 = v61;
    BOOL v25 = v62;
    int64_t v27 = *(void *)(v61 + 72);
    uint64_t v28 = (uint64_t)v52;
    (*(void (**)(char *, unint64_t, uint64_t))(v61 + 16))(v52, *(void *)(v62 + 48) + v27 * v20, v4);
    long long v29 = v54;
    outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v25 + 56) + 32 * v20, v28 + *(int *)(v54 + 48), &demangling cache variable for type metadata for Sendable?);
    long long v30 = v53;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v28, v53, &demangling cache variable for type metadata for (key: ConversationSessionKey, value: Sendable?));
    uint64_t v31 = v30 + *(int *)(v29 + 48);
    uint64_t v32 = v59;
    long long v33 = (uint64_t)&v59[*(int *)(v60 + 48)];
    long long v34 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 32);
    v34(v59, v30, v4);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v31, (uint64_t)v66, &demangling cache variable for type metadata for Sendable?);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable?);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
    swift_dynamicCast();
    uint64_t v35 = v57;
    uint64_t v36 = (uint64_t)&v57[*(int *)(v58 + 48)];
    v34(v57, (uint64_t)v32, v4);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v33, v36, (uint64_t *)&demangling cache variable for type metadata for Any?);
    uint64_t v37 = v55;
    v34(v55, (uint64_t)v35, v4);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v36, (uint64_t)v66, (uint64_t *)&demangling cache variable for type metadata for Any?);
    long long v38 = v56;
    v34(v56, (uint64_t)v37, v4);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v66, (uint64_t)v65, (uint64_t *)&demangling cache variable for type metadata for Any?);
    unint64_t v12 = v49;
    lazy protocol witness table accessor for type RequestType and conformance RequestType(&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, MEMORY[0x1E4FA2670]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    long long v39 = -1 << *(unsigned char *)(v12 + 32);
    Swift::String v40 = result & ~v39;
    uint64_t v41 = v40 >> 6;
    if (((-1 << v40) & ~*(void *)(v17 + 8 * (v40 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1 << v40) & ~*(void *)(v17 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v42 = 0;
      unint64_t v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        unint64_t v44 = v41 == v43;
        if (v41 == v43) {
          uint64_t v41 = 0;
        }
        v42 |= v44;
        Swift::String v45 = *(void *)(v17 + 8 * v41);
      }
      while (v45 == -1);
      uint64_t v19 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(void *)(v17 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v34((char *)(*(void *)(v12 + 48) + v19 * v27), (uint64_t)v38, v4);
    uint64_t result = outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v65, *(void *)(v12 + 56) + 32 * v19, (uint64_t *)&demangling cache variable for type metadata for Any?);
    ++*(void *)(v12 + 16);
    int64_t v16 = v64;
  }
  unint64_t v24 = v63 + 5;
  if (v63 + 5 >= v47)
  {
LABEL_37:
    swift_release();
    outlined consume of [Int : @Sendable ()].Iterator._Variant();
    return v12;
  }
  unint64_t v22 = *(void *)(v48 + 8 * v24);
  if (v22)
  {
    char v23 = v63 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    char v23 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v23 >= v47) {
      goto LABEL_37;
    }
    unint64_t v22 = *(void *)(v48 + 8 * v23);
    ++v24;
    if (v22) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  unsigned char v65[32];
  _OWORD v66[2];

  Swift::String v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: ConversationSessionKey, value: Sendable?));
  MEMORY[0x1F4188790](v60);
  Swift::String v59 = (char *)&v46 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationSessionKey, Sendable?));
  MEMORY[0x1F4188790](v58);
  Swift::String v57 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for ConversationSessionKey();
  Swift::String v61 = *(void *)(v4 - 8);
  unint64_t v5 = MEMORY[0x1F4188790](v4);
  id v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  Swift::String v55 = (char *)&v46 - v8;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: ConversationSessionKey, value: Sendable));
  unint64_t v9 = MEMORY[0x1F4188790](v54);
  uint64_t v53 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  Swift::String v52 = (char *)&v46 - v11;
  uint64_t v62 = a1;
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ConversationSessionKey, Sendable?>);
    unint64_t v12 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v12 = MEMORY[0x1E4FBC868];
  }
  int64_t v13 = *(void *)(v62 + 64);
  unint64_t v48 = v62 + 64;
  unint64_t v14 = -1 << *(unsigned char *)(v62 + 32);
  if (-v14 < 64) {
    int64_t v15 = ~(-1 << -(char)v14);
  }
  else {
    int64_t v15 = -1;
  }
  int64_t v16 = v15 & v13;
  Swift::String v46 = -1 << *(unsigned char *)(v62 + 32);
  uint64_t v47 = (unint64_t)(63 - v14) >> 6;
  Swift::String v51 = v61 + 16;
  unint64_t v50 = v61 + 32;
  Swift::String v17 = v12 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  uint64_t v63 = 0;
  Swift::String v56 = v7;
  unint64_t v49 = v12;
  while (1)
  {
    if (v16)
    {
      char v64 = (v16 - 1) & v16;
      uint64_t v20 = __clz(__rbit64(v16)) | (v63 << 6);
      goto LABEL_28;
    }
    unint64_t v21 = v63 + 1;
    if (__OFADD__(v63, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v21 >= v47) {
      goto LABEL_37;
    }
    unint64_t v22 = *(void *)(v48 + 8 * v21);
    char v23 = v63 + 1;
    if (!v22)
    {
      char v23 = v63 + 2;
      if (v63 + 2 >= v47) {
        goto LABEL_37;
      }
      unint64_t v22 = *(void *)(v48 + 8 * v23);
      if (!v22)
      {
        char v23 = v63 + 3;
        if (v63 + 3 >= v47) {
          goto LABEL_37;
        }
        unint64_t v22 = *(void *)(v48 + 8 * v23);
        if (!v22)
        {
          char v23 = v63 + 4;
          if (v63 + 4 >= v47) {
            goto LABEL_37;
          }
          unint64_t v22 = *(void *)(v48 + 8 * v23);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_27:
    uint64_t v63 = v23;
    char v64 = (v22 - 1) & v22;
    uint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
LABEL_28:
    uint64_t v26 = v61;
    BOOL v25 = v62;
    int64_t v27 = *(void *)(v61 + 72);
    uint64_t v28 = (uint64_t)v52;
    (*(void (**)(char *, unint64_t, uint64_t))(v61 + 16))(v52, *(void *)(v62 + 48) + v27 * v20, v4);
    long long v29 = v54;
    outlined init with copy of Any(*(void *)(v25 + 56) + 32 * v20, v28 + *(int *)(v54 + 48));
    long long v30 = v53;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v28, v53, (uint64_t *)&demangling cache variable for type metadata for (key: ConversationSessionKey, value: Sendable));
    uint64_t v31 = (_OWORD *)(v30 + *(int *)(v29 + 48));
    uint64_t v32 = v59;
    long long v33 = (uint64_t)&v59[*(int *)(v60 + 48)];
    long long v34 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 32);
    v34(v59, v30, v4);
    outlined init with take of Any(v31, v66);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Sendable);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Sendable?);
    swift_dynamicCast();
    uint64_t v35 = v57;
    uint64_t v36 = (uint64_t)&v57[*(int *)(v58 + 48)];
    v34(v57, (uint64_t)v32, v4);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v33, v36, &demangling cache variable for type metadata for Sendable?);
    uint64_t v37 = v55;
    v34(v55, (uint64_t)v35, v4);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v36, (uint64_t)v66, &demangling cache variable for type metadata for Sendable?);
    long long v38 = v56;
    v34(v56, (uint64_t)v37, v4);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v66, (uint64_t)v65, &demangling cache variable for type metadata for Sendable?);
    unint64_t v12 = v49;
    lazy protocol witness table accessor for type RequestType and conformance RequestType(&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, MEMORY[0x1E4FA2670]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    long long v39 = -1 << *(unsigned char *)(v12 + 32);
    Swift::String v40 = result & ~v39;
    uint64_t v41 = v40 >> 6;
    if (((-1 << v40) & ~*(void *)(v17 + 8 * (v40 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1 << v40) & ~*(void *)(v17 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v42 = 0;
      unint64_t v43 = (unint64_t)(63 - v39) >> 6;
      do
      {
        if (++v41 == v43 && (v42 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        unint64_t v44 = v41 == v43;
        if (v41 == v43) {
          uint64_t v41 = 0;
        }
        v42 |= v44;
        Swift::String v45 = *(void *)(v17 + 8 * v41);
      }
      while (v45 == -1);
      uint64_t v19 = __clz(__rbit64(~v45)) + (v41 << 6);
    }
    *(void *)(v17 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v34((char *)(*(void *)(v12 + 48) + v19 * v27), (uint64_t)v38, v4);
    uint64_t result = outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v65, *(void *)(v12 + 56) + 32 * v19, &demangling cache variable for type metadata for Sendable?);
    ++*(void *)(v12 + 16);
    int64_t v16 = v64;
  }
  unint64_t v24 = v63 + 5;
  if (v63 + 5 >= v47)
  {
LABEL_37:
    swift_release();
    outlined consume of [Int : @Sendable ()].Iterator._Variant();
    return v12;
  }
  unint64_t v22 = *(void *)(v48 + 8 * v24);
  if (v22)
  {
    char v23 = v63 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    char v23 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v23 >= v47) {
      goto LABEL_37;
    }
    unint64_t v22 = *(void *)(v48 + 8 * v23);
    ++v24;
    if (v22) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

void protocol witness for DecisionEngineStream.insert(jsonStr:interactionId:) in conformance DecisionEngineCurareStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DecisionEngineCurareStream.insert(jsonStr:interactionId:)(Swift::String jsonStr, Swift::String interactionId)
{
  unint64_t object = interactionId._object;
  uint64_t countAndFlagsBits = interactionId._countAndFlagsBits;
  unint64_t v5 = jsonStr._object;
  uint64_t v6 = jsonStr._countAndFlagsBits;
  v19[1] = *(id *)MEMORY[0x1E4F143B8];
  id v7 = objc_allocWithZone(MEMORY[0x1E4F618B0]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int64_t v8 = (void *)MEMORY[0x1BA9E2DD0](v6, v5);
  swift_bridgeObjectRelease();
  unint64_t v9 = (void *)MEMORY[0x1BA9E2DD0](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(v7, sel_initWithJsonStr_interactionId_dataVersion_, v8, v9, 0);

  uint64_t v12 = *(void *)(v2 + 16);
  uint64_t v11 = *(void *)(v2 + 24);
  id v13 = objc_allocWithZone(MEMORY[0x1E4F618B8]);
  swift_bridgeObjectRetain();
  unint64_t v14 = (void *)MEMORY[0x1BA9E2DD0](v12, v11);
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(v13, sel_initWithStreamId_, v14);

  if (!v15) {
    __break(1u);
  }
  v19[0] = 0;
  unsigned __int8 v16 = objc_msgSend(v15, sel_insert_error_, v10, v19);

  if (v16)
  {
    id v17 = v19[0];
  }
  else
  {
    id v18 = v19[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

BOOL ExecutionOutput.hasEmptyNativeFlowContextUpdate.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___SKRExecutionOutput_contextUpdate);
  return v1 && *(void *)(v1 + OBJC_IVAR___SKRExecutionContextUpdate_nativeFlowContextCommand) == 0;
}

uint64_t type metadata accessor for ConversationContextUpdateMetadata()
{
  uint64_t result = type metadata singleton initialization cache for ConversationContextUpdateMetadata;
  if (!type metadata singleton initialization cache for ConversationContextUpdateMetadata) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t specialized ConversationRequestProcessor.applyEmptyNativeFlowContextUpdateIfRequired(_:selectedResultCandidateId:metadata:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v69 = *(void *)(v7 - 8);
  uint64_t v70 = v7;
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  unint64_t v67 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  unint64_t v68 = (char *)&v59 - v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v66 = (uint64_t)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  id v15 = (char *)&v59 - v14;
  uint64_t updated = type metadata accessor for ContextUpdateScope();
  uint64_t v17 = *(void *)(updated - 8);
  MEMORY[0x1F4188790](updated);
  uint64_t v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1F4188790](v20 - 8);
  unint64_t v22 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse.DirectInvocation?);
  uint64_t result = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v26 = (char *)&v59 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1
    && *(unsigned char *)(a2 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) == 1)
  {
    uint64_t v62 = a2;
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    Swift::String v61 = v6;
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.conversationBridge);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      long long v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v30 = 0;
      _os_log_impl(&dword_1B9C64000, v28, v29, "Trying to apply an empty NativeFlowContextUpdate since we received an ExecutionContextUpdate without a nativeFlowContextCommand", v30, 2u);
      MEMORY[0x1BA9E48C0](v30, -1, -1);
    }

    id v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96928]), sel_init);
    uint64_t v32 = type metadata accessor for Parse.DirectInvocation();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v26, 1, 1, v32);
    uint64_t v33 = type metadata accessor for PommesContext();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v22, 1, 1, v33);
    (*(void (**)(char *, void, uint64_t))(v17 + 104))(v19, *MEMORY[0x1E4FA1C90], updated);
    id v34 = objc_allocWithZone((Class)type metadata accessor for ExecutionContextUpdate());
    id v35 = specialized ExecutionContextUpdate.init(provideContextCommand:nativeFlowContextCommand:nluSystemDialogActs:nluActiveTasks:nluCompletedTasks:undoDirectInvocation:rrEntities:pommesContext:contextUpdateScope:restoreSessionForRequestId:)(0, v31, 0, 0, 0, (uint64_t)v26, 0, (uint64_t)v22, (uint64_t)v19, 0, 0);

    uint64_t v36 = v65;
    uint64_t v37 = v65[9];
    uint64_t v63 = v65[8];
    uint64_t v64 = v37;
    uint64_t v38 = type metadata accessor for FlowOutputMessage.InAppResponse();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v15, 1, 1, v38);
    Swift::String v40 = v68;
    uint64_t v39 = v69;
    uint64_t v41 = v70;
    (*(void (**)(char *, void, uint64_t))(v69 + 104))(v68, *MEMORY[0x1E4FA24B8], v70);
    uint64_t v42 = (uint64_t)v67;
    (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v67, v40, v41);
    uint64_t v43 = v66;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v15, v66, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
    id v44 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
    Swift::String v45 = v36;
    uint64_t v46 = (uint64_t)v15;
    id v47 = v35;
    id v60 = v47;
    uint64_t v48 = swift_bridgeObjectRetain();
    id v49 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)(0, v35, 0, 0, 0, 0, 0, 0, 0, 0, v63, v48, v42, v43);

    outlined destroy of ReferenceResolutionClientProtocol?(v46, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v41);
    uint64_t v50 = *(void *)((char *)v45
                    + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionOutputSubmitter);
    uint64_t v51 = v45[11];
    uint64_t v70 = v45[10];
    Swift::String v52 = (char *)v45 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater;
    uint64_t v53 = v45[12];
    uint64_t v54 = v45[13];
    Swift::String v55 = (char *)v45 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
    uint64_t v56 = type metadata accessor for UUID();
    uint64_t v57 = *(void *)(v56 - 8);
    uint64_t v58 = (uint64_t)v61;
    (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v61, v55, v56);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v57 + 56))(v58, 0, 1, v56);
    (*(void (**)(id, uint64_t, uint64_t, uint64_t, uint64_t, char *, void, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void (*)(uint64_t, void *), void))(*(void *)v50 + 296))(v49, v63, v64, v70, v51, v52, 0, v62, v53, v54, v58, 0, 0, closure #1 in ConversationRequestProcessor.applyEmptyNativeFlowContextUpdateIfRequired(_:selectedResultCandidateId:metadata:), 0);

    return outlined destroy of ReferenceResolutionClientProtocol?(v58, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  return result;
}

void RecentDialogTracker.maybeMemorizeDialog(command:)(void *a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v65 = *(void *)(v3 - 8);
  uint64_t v66 = v3;
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = type metadata accessor for DialogPhase();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v61 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DialogPhase?);
  MEMORY[0x1F4188790](v14 - 8);
  unsigned __int8 v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  RecentDialogTracker.filterExpired()();
  if (!a1) {
    return;
  }
  self;
  uint64_t v17 = swift_dynamicCastObjCClass();
  if (!v17) {
    return;
  }
  uint64_t v18 = (void *)v17;
  uint64_t v64 = v1;
  id v19 = a1;
  uint64_t v62 = v18;
  id v63 = v19;
  id v20 = objc_msgSend(v18, sel_dialogPhase);
  if (v20)
  {
    uint64_t v21 = v20;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  DialogPhase.init(aceValue:)();
  int v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v16, 1, v7);
  uint64_t v23 = v64;
  if (v22 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for DialogPhase?);
LABEL_8:
    if (one-time initialization token for conversationBridge != -1) {
LABEL_47:
    }
      swift_once();
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.conversationBridge);
    uint64_t v27 = v63;
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    BOOL v30 = os_log_type_enabled(v28, v29);
    id v31 = v62;
    if (v30)
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      v68[0] = v33;
      *(_DWORD *)uint64_t v32 = 136315138;
      id v34 = objc_msgSend(v31, sel_dialogPhase);
      if (v34)
      {
        id v35 = v34;
        uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v38 = v37;
      }
      else
      {
        unint64_t v38 = 0xE300000000000000;
        uint64_t v36 = 7104878;
      }
      uint64_t v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v28, v29, "RecentDialogTracker: ignoring dialog in phase %s", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v33, -1, -1);
      MEMORY[0x1BA9E48C0](v32, -1, -1);

      goto LABEL_38;
    }

    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v16, v7);
  static DialogPhase.reflection.getter();
  lazy protocol witness table accessor for type RecentDialogsEnvironmentProvider and conformance RecentDialogsEnvironmentProvider(&lazy protocol witness table cache variable for type DialogPhase and conformance DialogPhase, 255, MEMORY[0x1E4FA1A80]);
  char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v8 + 8);
  v25(v11, v7);
  v25(v13, v7);
  v25(v16, v7);
  if (v24) {
    goto LABEL_8;
  }
  if (!*(void *)(v23 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentRequestId + 8))
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    __swift_project_value_buffer(v57, (uint64_t)static Logger.conversationBridge);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v27, v58))
    {

      return;
    }
    uint64_t v59 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v59 = 0;
    _os_log_impl(&dword_1B9C64000, v27, v58, "RecentDialogTracker: currentRequestId is not set when maybeMemorizeDialog is called", v59, 2u);
    MEMORY[0x1BA9E48C0](v59, -1, -1);

LABEL_13:
    return;
  }
  uint64_t v39 = (uint64_t *)(v23 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_recentDialogs);
  swift_bridgeObjectRetain();
  swift_beginAccess();
  while (1)
  {
    if ((unint64_t)*v39 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v46 < 2) {
        goto LABEL_30;
      }
    }
    else if (*(uint64_t *)((*v39 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2)
    {
      goto LABEL_30;
    }
    swift_beginAccess();
    if ((unint64_t)*v39 >> 62) {
      break;
    }
    if (!*(void *)((*v39 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_29;
    }
LABEL_20:
    uint64_t v40 = *v39;
    int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
    *uint64_t v39 = v40;
    if (!isUniquelyReferenced_nonNull_bridgeObject || v40 < 0 || (v40 & 0x4000000000000000) != 0)
    {
      uint64_t v40 = specialized _ArrayBuffer._consumeAndCreateNew()(v40);
      *uint64_t v39 = v40;
    }
    uint64_t v42 = v40 & 0xFFFFFFFFFFFFFF8;
    uint64_t v43 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v43)
    {
      __break(1u);
      goto LABEL_47;
    }
    uint64_t v44 = v43 - 1;
    Swift::String v45 = *(void **)((v40 & 0xFFFFFFFFFFFFFF8) + 8 * v44 + 0x20);
    *(void *)(v42 + 16) = v44;
    specialized Array._endMutation()();
    swift_endAccess();
  }
  swift_bridgeObjectRetain();
  uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v47) {
    goto LABEL_20;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  uint64_t v48 = *(void (**)(void))(v23 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_timeProvider);
  id v49 = v63;
  v48();
  static Date.+ infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v6, v66);
  id v50 = objc_allocWithZone((Class)type metadata accessor for RecentDialog());
  uint64_t v51 = RecentDialog.init(addViews:expiresAt:requestId:)();
  swift_beginAccess();
  uint64_t v52 = v23;
  if ((unint64_t)*v39 >> 62
    && (swift_bridgeObjectRetain(), uint64_t v60 = _CocoaArrayWrapper.endIndex.getter(), swift_bridgeObjectRelease(), v60 < 0))
  {
    __break(1u);
LABEL_50:
    swift_once();
  }
  else
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, 0, v51);
    swift_endAccess();
    *(unsigned char *)(v52 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentRequestHasTrackedDialogs) = 1;
    RecentDialogTracker.updateSiriEnvironment()();
    if (one-time initialization token for conversationBridge != -1) {
      goto LABEL_50;
    }
  }
  uint64_t v53 = type metadata accessor for Logger();
  __swift_project_value_buffer(v53, (uint64_t)static Logger.conversationBridge);
  swift_retain();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v28, v54))
  {

    swift_release();
    return;
  }
  Swift::String v55 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)Swift::String v55 = 134217984;
  if ((unint64_t)*v39 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v56 = *(void *)((*v39 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v67 = v56;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release();
  _os_log_impl(&dword_1B9C64000, v28, v54, "RecentDialogTracker: memorized the last dialog, got %ld in total.", v55, 0xCu);
  MEMORY[0x1BA9E48C0](v55, -1, -1);

LABEL_38:
}

uint8_t *RecentDialogTracker.filterExpired()()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v1);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v0 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_timeProvider))(v3);
  uint64_t v6 = (unint64_t *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_recentDialogs);
  swift_beginAccess();
  unint64_t v7 = *v6;
  char v24 = v5;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized _ArrayProtocol.filter(_:)((uint64_t (*)(id *))partial apply for closure #1 in RecentDialogTracker.filterExpired(), (uint64_t)v23, v7);
  unint64_t v9 = v8;
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (*v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 >= v20) {
      goto LABEL_12;
    }
  }
  else if (v10 >= *(void *)((*v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_12:
    *uint64_t v6 = v9;
    swift_bridgeObjectRelease();
    RecentDialogTracker.updateSiriEnvironment()();
    return (uint8_t *)(*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v12, v13))
  {

    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_12;
  }
  uint64_t result = (uint8_t *)swift_slowAlloc();
  uint64_t v15 = result;
  *(_DWORD *)uint64_t result = 134217984;
  uint64_t v16 = *v6;
  if (*v6 >> 62)
  {
    uint64_t v21 = v16 & 0xFFFFFFFFFFFFFF8;
    if (v16 < 0) {
      uint64_t v21 = *v6;
    }
    v22[0] = v21;
    v22[1] = v16;
    swift_bridgeObjectRetain();
    v22[0] = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = (uint8_t *)swift_bridgeObjectRelease();
    uint64_t v19 = v22[0] - v10;
    if (!__OFSUB__(v22[0], v10)) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v18 = __OFSUB__(v17, v10);
    uint64_t v19 = v17 - v10;
    if (!v18)
    {
LABEL_10:
      uint64_t v25 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl(&dword_1B9C64000, v12, v13, "RecentDialogTracker: removed %ld expired dialog(s)", v15, 0xCu);
      MEMORY[0x1BA9E48C0](v15, -1, -1);

      goto LABEL_12;
    }
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in RecentDialogTracker.filterExpired()()
{
  return closure #1 in RecentDialogTracker.filterExpired()() & 1;
}

uint64_t closure #1 in RecentDialogTracker.filterExpired()()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  RecentDialog.expiresAt.getter();
  char v4 = static Date.> infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4 & 1;
}

uint64_t type metadata accessor for RecentDialogsEnvironmentProvider()
{
  return self;
}

uint64_t RecentDialogsEnvironmentProvider.numCurrentlyTracked.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return result;
}

unint64_t type metadata accessor for SABaseCommand()
{
  unint64_t result = lazy cache variable for type metadata for SABaseCommand;
  if (!lazy cache variable for type metadata for SABaseCommand)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
  }
  return result;
}

uint64_t SABaseCommand.isListenAfterSpeaking.getter()
{
  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  if (!v1)
  {
    self;
    uint64_t v16 = swift_dynamicCastObjCClass();
    if (v16)
    {
      uint64_t v17 = (void *)v16;
      id v18 = v0;
      id v19 = objc_msgSend(v17, sel_listenAfterSpeaking);
      if (v19) {
        goto LABEL_18;
      }
    }
    else
    {
      self;
      uint64_t v22 = swift_dynamicCastObjCClass();
      if (!v22)
      {
        self;
        uint64_t v24 = swift_dynamicCastObjCClass();
        if (!v24) {
          return 0;
        }
        uint64_t v25 = (void *)v24;
        id v26 = v0;
        id v27 = objc_msgSend(v25, sel_callbacks);
        if (v27)
        {
          uint64_t v28 = v27;
          type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAResultCallback);
          unint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
        }
        else
        {
          unint64_t v29 = MEMORY[0x1E4FBC860];
        }
        if (v29 >> 62) {
          goto LABEL_67;
        }
        uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v30)
        {
LABEL_37:
          uint64_t v31 = 0;
          unint64_t v45 = v29;
          unint64_t v47 = v29 & 0xC000000000000001;
          uint64_t v42 = v26;
          unint64_t v43 = v29 + 32;
          id v26 = (id)0x1E4F96000;
          uint64_t v44 = v30;
          while (1)
          {
            if (v47) {
              id v32 = (id)MEMORY[0x1BA9E3990](v31, v29);
            }
            else {
              id v32 = *(id *)(v43 + 8 * v31);
            }
            uint64_t v33 = v32;
            if (__OFADD__(v31++, 1)) {
              goto LABEL_66;
            }
            id v35 = objc_msgSend(v32, sel_commands);
            if (v35)
            {
              uint64_t v36 = v35;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
              unint64_t v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
            }
            else
            {
              unint64_t v37 = MEMORY[0x1E4FBC860];
            }
            if (v37 >> 62)
            {
              swift_bridgeObjectRetain_n();
              uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v38)
              {
LABEL_48:
                uint64_t v39 = 4;
                uint64_t v40 = 0;
                if ((v37 & 0xC000000000000001) != 0)
                {
LABEL_49:
                  MEMORY[0x1BA9E3990](v40, v37);
                  unint64_t v29 = v40 + 1;
                  if (__OFADD__(v40, 1)) {
                    goto LABEL_65;
                  }
                  goto LABEL_53;
                }
                while (1)
                {
                  swift_unknownObjectRetain();
                  unint64_t v29 = v40 + 1;
                  if (__OFADD__(v40, 1)) {
                    break;
                  }
LABEL_53:
                  self;
                  if (swift_dynamicCastObjCClass())
                  {
                    char v41 = SABaseCommand.isListenAfterSpeaking.getter();
                    swift_unknownObjectRelease();
                    if (v41)
                    {

                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      uint64_t v7 = 1;
                      goto LABEL_70;
                    }
                    if (v29 == v38) {
                      goto LABEL_38;
                    }
                  }
                  else
                  {
                    swift_unknownObjectRelease();
                    if (v29 == v38) {
                      goto LABEL_38;
                    }
                  }
                  uint64_t v40 = ++v39 - 4;
                  if ((v37 & 0xC000000000000001) != 0) {
                    goto LABEL_49;
                  }
                }
LABEL_65:
                __break(1u);
LABEL_66:
                __break(1u);
LABEL_67:
                swift_bridgeObjectRetain();
                uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
                if (!v30) {
                  break;
                }
                goto LABEL_37;
              }
            }
            else
            {
              uint64_t v38 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              if (v38) {
                goto LABEL_48;
              }
            }
LABEL_38:
            swift_bridgeObjectRelease_n();

            unint64_t v29 = v45;
            if (v31 == v44) {
              goto LABEL_64;
            }
          }
        }

        goto LABEL_69;
      }
      uint64_t v23 = (void *)v22;
      id v18 = v0;
      id v19 = objc_msgSend(v23, sel_listenAfterSpeaking);
      if (v19)
      {
LABEL_18:
        uint64_t v20 = v19;
        uint64_t v7 = (uint64_t)objc_msgSend(v19, sel_BOOLValue);

        return v7;
      }
    }

    return 0;
  }
  uint64_t v2 = (void *)v1;
  id v3 = v0;
  id v4 = objc_msgSend(v2, sel_views);
  if (v4)
  {
    uint64_t v5 = v4;
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
    unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v6 >> 62)) {
      goto LABEL_4;
    }
LABEL_21:
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7) {
      goto LABEL_5;
    }
LABEL_25:

    swift_bridgeObjectRelease_n();
    return v7;
  }
  unint64_t v6 = MEMORY[0x1E4FBC860];
  if (MEMORY[0x1E4FBC860] >> 62) {
    goto LABEL_21;
  }
LABEL_4:
  uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v7) {
    goto LABEL_25;
  }
LABEL_5:
  id v46 = v3;
  uint64_t v8 = 4;
  uint64_t v9 = 0;
  if ((v6 & 0xC000000000000001) == 0) {
    goto LABEL_7;
  }
LABEL_6:
  for (id i = (id)MEMORY[0x1BA9E3990](v9, v6); ; id i = *(id *)(v6 + 8 * v8))
  {
    uint64_t v11 = i;
    uint64_t v12 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      break;
    }
    id v13 = objc_msgSend(i, sel_listenAfterSpeaking);
    if (v13)
    {
      uint64_t v14 = v13;
      unsigned __int8 v15 = objc_msgSend(v13, sel_BOOLValue);

      if (v15)
      {
        uint64_t v7 = 1;
        goto LABEL_24;
      }
      if (v12 == v7) {
        goto LABEL_19;
      }
    }
    else
    {

      if (v12 == v7)
      {
LABEL_19:
        uint64_t v7 = 0;
LABEL_24:
        id v3 = v46;
        goto LABEL_25;
      }
    }
    uint64_t v9 = ++v8 - 4;
    if ((v6 & 0xC000000000000001) != 0) {
      goto LABEL_6;
    }
LABEL_7:
    ;
  }
  __break(1u);
LABEL_64:

LABEL_69:
  uint64_t v7 = 0;
LABEL_70:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t objectdestroy_2Tm()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t objectdestroy_2Tm_0(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  swift_release();

  return MEMORY[0x1F4186498](v1, 40, 7);
}

uint64_t specialized ConversationService.maybeSubmitRequestHandlingUpdate(activeTurn:rcId:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](specialized ConversationService.maybeSubmitRequestHandlingUpdate(activeTurn:rcId:bridge:), v4, 0);
}

uint64_t specialized ConversationService.maybeSubmitRequestHandlingUpdate(activeTurn:rcId:bridge:)()
{
  uint64_t v18 = v0;
  uint64_t v1 = (*(uint64_t (**)(void, void))(**(void **)(v0 + 48) + 392))(*(void *)(v0 + 56), *(void *)(v0 + 64));
  if (v2)
  {
    uint64_t v3 = v1;
    unint64_t v4 = v2;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v16 = v3;
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v17 = v9;
      *(_DWORD *)uint64_t v8 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v4, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v6, v7, "Sending ACE command to update request handling indicator with value: %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v9, -1, -1);
      uint64_t v10 = v8;
      uint64_t v3 = v16;
      MEMORY[0x1BA9E48C0](v10, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v11 = *(void *)(v0 + 48);
    id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96B70]), sel_init);
    id v13 = (void *)MEMORY[0x1BA9E2DD0](v3, v4);
    swift_bridgeObjectRelease();
    objc_msgSend(v12, sel_setExecutionInputSystem_, v13);

    __swift_project_boxed_opaque_existential_1((void *)(v11 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_aceServiceInvoker), *(void *)(v11 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_aceServiceInvoker + 24));
    AceServiceInvokerAsync.submitAndForget(_:)();
  }
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

Swift::String_optional __swiftcall ConversationService.ActiveTurn.getExecutionInputSystem(rcId:)(Swift::String rcId)
{
  unint64_t object = rcId._object;
  uint64_t countAndFlagsBits = rcId._countAndFlagsBits;
  unint64_t v4 = (uint64_t *)(v1 + OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_executionInputSystem);
  swift_beginAccess();
  uint64_t v5 = *v4;
  if (*(void *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
    if (v7)
    {
      uint64_t v8 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v6);
      uint64_t v9 = *v8;
      uint64_t v10 = (void *)v8[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  uint64_t v11 = v9;
  id v12 = v10;
  result.value._unint64_t object = v12;
  result.value._uint64_t countAndFlagsBits = v11;
  return result;
}

uint64_t type metadata accessor for ConversationCommitResult()
{
  uint64_t result = type metadata singleton initialization cache for ConversationCommitResult;
  if (!type metadata singleton initialization cache for ConversationCommitResult) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t protocol witness for DecisionMaking.commitCorrections() in conformance DecisionEngine()
{
  *(void *)(v1 + 40) = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](protocol witness for DecisionMaking.commitCorrections() in conformance DecisionEngine, v2, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  CorrectionsService.commit()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

Swift::Void __swiftcall CorrectionsService.commit()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "[CorrectionsService] Commit to clear context inside CorrectionsEngine", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  unint64_t v6 = v1 + 2;
  uint64_t v8 = v1[5];
  uint64_t v7 = v1[6];
  __swift_project_boxed_opaque_existential_1(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v8, v7);
}

uint64_t protocol witness for CorrectionsHandling.commit() in conformance CorrectionsPlatformClient()
{
  return dispatch thunk of CorrectionsPlatformClient.commit()();
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.submit(executionOutput:completion:)(void *a1, void *a2)
{
  return closure #1 in ConversationRequestProcessor.submit(executionOutput:completion:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48));
}

uint64_t closure #1 in ConversationRequestProcessor.submit(executionOutput:completion:)(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v32 = a6;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v13 - 8);
  unsigned __int8 v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a3 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_asyncWork);
  uint64_t v17 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v15, 1, 1, v17);
  swift_retain();
  uint64_t v31 = a4;
  swift_retain();
  uint64_t v18 = a2;
  id v19 = a2;
  uint64_t v20 = one-time initialization token for shared;
  id v21 = a5;
  uint64_t v22 = a7;
  swift_retain();
  uint64_t v23 = a1;
  id v24 = a1;
  if (v20 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v25 = static MessageBusActor.shared;
  uint64_t v26 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  id v27 = (void *)swift_allocObject();
  v27[2] = v25;
  v27[3] = v26;
  uint64_t v28 = v31;
  v27[4] = a3;
  void v27[5] = v28;
  v27[6] = v18;
  v27[7] = v21;
  v27[8] = v32;
  v27[9] = v22;
  v27[10] = v23;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v15, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in ConversationRequestProcessor.submit(executionOutput:completion:), (uint64_t)v27);
  (*(void (**)(void))(*(void *)v16 + 120))();
  return swift_release();
}

uint64_t partial apply for closure #1 in RemoteConversationClient.prepare(bridge:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  *uint64_t v10 = v4;
  v10[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in RemoteConversationClient.prepare(bridge:)(a1, a2, a3, v9, v8);
}

uint64_t closure #1 in RemoteConversationClient.prepare(bridge:)()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in RemoteConversationClient.prepare(bridge:), 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  long long v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = swift_allocObject();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 32) = v2;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 64) = v3;
  *(void *)(v3 + 16) = partial apply for closure #1 in closure #1 in RemoteConversationClient.prepare(bridge:);
  *(void *)(v3 + 24) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in RemoteConversationClient.prepare(bridge:);
  uint64_t v5 = *(void *)(v0 + 16);
  unint64_t v6 = MEMORY[0x1E4FBC848] + 8;
  return MEMORY[0x1F4188160](v5, 0, 0, 0xD000000000000028, 0x80000001BA063410, partial apply for specialized closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:), v3, v6);
}

uint64_t closure #1 in RemoteConversationClient.prepare(bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationClient.prepare(bridge:), 0, 0);
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned SABaseCommand?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2)
{
  thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned SABaseCommand?, @unowned NSError?) -> ()(a1, a2, *(void *)(v2 + 16));
}

void thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned SABaseCommand?, @unowned NSError?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

uint64_t ConversationContextUpdateMetadata.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType;
  uint64_t v2 = type metadata accessor for RequestType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  uint64_t v3 = v0 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId;
  uint64_t v4 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocClassInstance();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in RemoteConversationClient.commit(bridge:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v10;
  *uint64_t v10 = v4;
  v10[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in RemoteConversationClient.commit(bridge:)(a1, a2, a3, v9, v8);
}

uint64_t closure #1 in RemoteConversationClient.commit(bridge:)()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in RemoteConversationClient.commit(bridge:), 0, 0);
  }
  else
  {
    swift_release();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  long long v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = swift_allocObject();
  *(void *)(v0 + 56) = v1;
  uint64_t v2 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v1 + 32) = v2;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 64) = v3;
  *(void *)(v3 + 16) = partial apply for closure #1 in closure #1 in RemoteConversationClient.commit(bridge:);
  *(void *)(v3 + 24) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v4;
  uint64_t v5 = type metadata accessor for ConversationCommitResult();
  *uint64_t v4 = v0;
  v4[1] = closure #1 in RemoteConversationClient.commit(bridge:);
  id v6 = *(void *)(v0 + 16);
  return MEMORY[0x1F4188160](v6, 0, 0, 0xD000000000000028, 0x80000001BA063410, partial apply for specialized closure #1 in static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:), v3, v5);
}

uint64_t closure #1 in RemoteConversationClient.commit(bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationClient.commit(bridge:), 0, 0);
}

uint64_t FlowPluginInfo.init(coder:)(void *a1)
{
  id v3 = v1;
  uint64_t v4 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000013, 0x80000001BA069880);
  unsigned int v5 = objc_msgSend(a1, sel_containsValueForKey_, v4);

  if (v5)
  {
    id v6 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000013, 0x80000001BA069880);
    id v7 = objc_msgSend(a1, sel_decodeBoolForKey_, v6);

    uint64_t v8 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000011, 0x80000001BA0698A0);
    unsigned int v9 = objc_msgSend(a1, sel_containsValueForKey_, v8);

    if (v9)
    {
      uint64_t v10 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000011, 0x80000001BA0698A0);
      uint64_t v11 = (uint64_t)objc_msgSend(a1, sel_decodeBoolForKey_, v10);
    }
    else
    {
      uint64_t v11 = 1;
    }
    uint64_t v17 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000011, 0x80000001BA0698C0);
    unsigned int v18 = objc_msgSend(a1, sel_containsValueForKey_, v17);

    if (v18)
    {
      id v19 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000011, 0x80000001BA0698C0);
      id v20 = objc_msgSend(a1, sel_decodeIntegerForKey_, v19);
    }
    else
    {
      id v20 = 0;
    }
    uint64_t ObjectType = swift_getObjectType();

    uint64_t v16 = (*(uint64_t (**)(id, uint64_t, id, void, uint64_t))(ObjectType + 112))(v7, v11, v20, 0, 2);
    swift_deallocPartialClassInstance();
  }
  else
  {

    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      unsigned __int8 v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned __int8 v15 = 0;
      _os_log_impl(&dword_1B9C64000, v13, v14, "Could not deserialize suppportsNLv4Parses in FlowPluginInfo", v15, 2u);
      MEMORY[0x1BA9E48C0](v15, -1, -1);
    }

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v16;
}

uint64_t type metadata accessor for FlowPluginInfo()
{
  return self;
}

uint64_t ServiceBridgeDelegateXPCWrapper.flowPluginWillExecute(flowPluginInfo:)(void *a1)
{
  return ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:)(a1, (uint64_t)&unk_1F1382E10, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.flowPluginWillExecute(flowPluginInfo:));
}

void ConversationBridgeProcessorDelegate.flowPluginWillExecute(flowPluginInfo:)(char *a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    id v3 = (void *)Strong;
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
    unsigned int v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v7 = 0;
      _os_log_impl(&dword_1B9C64000, v5, v6, "Checking if request is sensitive", v7, 2u);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }

    uint64_t v8 = self;
    uint64_t v9 = *(void *)&a1[OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_sensitivityPolicy];
    uint64_t v10 = self;
    id v11 = objc_msgSend(v10, sel_sharedPreferences);
    id v12 = objc_msgSend(v11, sel_siriDataSharingOptInStatus);

    id v13 = objc_msgSend(v10, sel_sharedPreferences);
    id v14 = objc_msgSend(v13, sel_languageCode);

    LODWORD(v8) = objc_msgSend(v8, sel_isRequestSensitiveWithPolicy_optInStatus_siriLanguageCode_, v9, v12, v14);
    if (v8)
    {
      uint64_t v15 = v3[8];
      uint64_t v16 = v3[9];
      uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(**(void **)((char *)v3
                                                                           + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil)
                                                             + 232);
      swift_retain();
      swift_bridgeObjectRetain();
      v17(6, v15, v16);
      swift_release();
      swift_bridgeObjectRelease();
    }
    (*(void (**)(char *))(*v3 + 1056))(a1);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationBridge);
    id v19 = a1;
    id v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 138412290;
      id v24 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v23 = v19;

      _os_log_impl(&dword_1B9C64000, v20, v21, "ConversationRequestProcessor already released, ignoring flowPluginWillExecute of %@", v22, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v23, -1, -1);
      MEMORY[0x1BA9E48C0](v22, -1, -1);
    }
    else
    {
    }
  }
}

void ConversationRequestProcessor.flowPluginWillExecute(flowPluginInfo:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v4 - 8);
  os_log_type_t v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for RequestType();
  uint64_t v60 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v59 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
  id v11 = a1;
  uint64_t v61 = v10;
  id v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    id v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v57 = v7;
    uint64_t v16 = (void *)v15;
    *(_DWORD *)id v14 = 138412290;
    aBlock[0] = v11;
    uint64_t v17 = v11;
    os_log_type_t v58 = v6;
    uint64_t v18 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v16 = v11;

    os_log_type_t v6 = v58;
    _os_log_impl(&dword_1B9C64000, v12, v13, "Received FlowPluginInfo: %@", v14, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    id v19 = v16;
    uint64_t v7 = v57;
    MEMORY[0x1BA9E48C0](v19, -1, -1);
    MEMORY[0x1BA9E48C0](v14, -1, -1);
  }
  else
  {
  }
  uint64_t v20 = (*(uint64_t (**)(void))(*v2 + 592))();
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = (void **)(v20 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo);
    swift_beginAccess();
    uint64_t v23 = *v22;
    *uint64_t v22 = v11;

    id v24 = (void *)(v21 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    uint64_t v25 = swift_beginAccess();
    if (*v24 >> 62 == 1)
    {
      if (*((unsigned char *)v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled) == 1)
      {
        uint64_t v26 = *(void *)((*v24 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
        MEMORY[0x1F4188790](v25);
        *(&v56 - 4) = (uint64_t)v2;
        *(&v56 - 3) = v27;
        uint64_t v54 = v26;
        id v55 = v11;
        id v28 = objc_allocWithZone((Class)type metadata accessor for FlowPluginInfoMessage());
        unint64_t v29 = v11;
        swift_bridgeObjectRetain();
        uint64_t v30 = (void *)FlowPluginInfoMessage.init(build:)();
        swift_bridgeObjectRelease();
        if (v30)
        {
          __swift_project_boxed_opaque_existential_1(v2 + 3, v2[6]);
          dispatch thunk of MessagePublishing.postMessage(_:)();
          uint64_t v31 = Logger.logObject.getter();
          os_log_type_t v32 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v31, v32))
          {
            uint64_t v33 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v33 = 0;
            _os_log_impl(&dword_1B9C64000, v31, v32, "Posted FlowPluginInfo message to the bus", v33, 2u);
            MEMORY[0x1BA9E48C0](v33, -1, -1);
            swift_release();
          }
          else
          {

            swift_release();
          }
          return;
        }
        uint64_t v38 = Logger.logObject.getter();
        os_log_type_t v39 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v38, v39))
        {
          uint64_t v40 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v40 = 0;
          char v41 = "Could not init FlowPluginInfoMessage";
          goto LABEL_17;
        }
      }
      else
      {
        os_log_type_t v58 = (char *)v2[10];
        uint64_t v42 = v11;
        uint64_t v43 = v2[11];
        uint64_t v44 = v21 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
        swift_beginAccess();
        uint64_t v45 = (uint64_t)v59;
        uint64_t v46 = v60;
        (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v59, v44, v7);
        int v47 = v42[OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_isPersonalRequest];
        uint64_t v48 = v42;
        LOBYTE(v44) = ConversationRequestProcessorTurnState.isServerFallback.getter();
        uint64_t v49 = type metadata accessor for UserID();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v6, 1, 1, v49);
        id v50 = specialized static ConversationMUXUtils.voiceIdentificationSignal(withRefId:requestType:isPersonalRequest:isServerFallback:voiceIdClassification:voiceIdOverridden:selectedUserId:)((uint64_t)v58, v43, v45, v47, v44 & 1, 0, 1, 0, (uint64_t)v6);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UserID?);
        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v7);
        if (v50)
        {
          uint64_t v51 = (void *)v2[2];
          aBlock[4] = closure #2 in ConversationRequestProcessor.flowPluginWillExecute(flowPluginInfo:);
          aBlock[5] = 0;
          aBlock[0] = MEMORY[0x1E4F143A8];
          aBlock[1] = 1107296256;
          aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
          aBlock[3] = &block_descriptor_10;
          uint64_t v52 = _Block_copy(aBlock);
          id v53 = v50;
          objc_msgSend(v51, sel_handleCommand_completion_, v53, v52);
          swift_release();
          _Block_release(v52);

          return;
        }
        uint64_t v38 = Logger.logObject.getter();
        os_log_type_t v39 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v38, v39))
        {
          uint64_t v40 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v40 = 0;
          char v41 = "VoiceIdentificationSignal was not initialized. Refer to RequestDispatcher logs to understand why.";
          goto LABEL_17;
        }
      }
    }
    else
    {
      unint64_t v37 = v11;
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v40 = 0;
        char v41 = "Received FlowPluginInfo from Conversation before endpointing. FlowPluginInfo is not supposed to be sent eagerly.";
LABEL_17:
        _os_log_impl(&dword_1B9C64000, v38, v39, v41, v40, 2u);
        MEMORY[0x1BA9E48C0](v40, -1, -1);
        swift_release();

        return;
      }
    }

    swift_release();
    return;
  }
  id v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v36 = 0;
    _os_log_impl(&dword_1B9C64000, v34, v35, "Ignoring FlowPluginInfo as we are not in a turn", v36, 2u);
    MEMORY[0x1BA9E48C0](v36, -1, -1);
  }
}

uint64_t FlowPluginInfo.description.getter()
{
  _StringGuts.grow(_:)(79);
  v1._uint64_t countAndFlagsBits = 0xD000000000000022;
  v1._unint64_t object = (void *)0x80000001BA069810;
  String.append(_:)(v1);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_supportsOnDeviceNL)) {
    uint64_t v2 = 1702195828;
  }
  else {
    uint64_t v2 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_supportsOnDeviceNL)) {
    unint64_t v3 = 0xE400000000000000;
  }
  else {
    unint64_t v3 = 0xE500000000000000;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v5._unint64_t object = (void *)0x80000001BA069840;
  v5._uint64_t countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v5);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_isPersonalRequest)) {
    uint64_t v6 = 1702195828;
  }
  else {
    uint64_t v6 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime14FlowPluginInfo_isPersonalRequest)) {
    unint64_t v7 = 0xE400000000000000;
  }
  else {
    unint64_t v7 = 0xE500000000000000;
  }
  unint64_t v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0xD000000000000014;
  v9._unint64_t object = (void *)0x80000001BA069860;
  String.append(_:)(v9);
  type metadata accessor for AFSiriDataSharingSensitivityPolicy(0);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

void type metadata accessor for AFSiriDataSharingSensitivityPolicy(uint64_t a1)
{
}

uint64_t ConversationRequestProcessorTurnState.isServerFallback.getter()
{
  uint64_t v1 = type metadata accessor for RequestType();
  uint64_t v2 = *(void **)(v1 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v1);
  int v47 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v48 = (char *)&v42 - v6;
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  Swift::String v9 = (char *)&v42 - v8;
  MEMORY[0x1F4188790](v7);
  id v11 = (char *)&v42 - v10;
  uint64_t v43 = v0;
  uint64_t v12 = v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  swift_beginAccess();
  uint64_t v45 = (void (*)(char *, uint64_t, uint64_t))v2[2];
  uint64_t v46 = v12;
  v45(v11, v12, v1);
  uint64_t v13 = *MEMORY[0x1E4FA2428];
  uint64_t v44 = (void (*)(char *, uint64_t, uint64_t))v2[13];
  v44(v9, v13, v1);
  lazy protocol witness table accessor for type RequestType and conformance RequestType();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v50 == v52 && v51 == v53) {
    char v14 = 1;
  }
  else {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = (void (*)(char *, uint64_t))v2[1];
  v15(v9, v1);
  v15(v11, v1);
  if (v14) {
    goto LABEL_10;
  }
  uint64_t v16 = v48;
  v45(v48, v46, v1);
  uint64_t v17 = v47;
  v44(v47, *MEMORY[0x1E4FA2450], v1);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v50 == v52 && v51 == v53)
  {
    swift_bridgeObjectRelease_n();
    v15(v17, v1);
    v15(v16, v1);
LABEL_10:
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.conversationBridge);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_1B9C64000, v20, v21, "Server fallback is always true for this requestType", v22, 2u);
      MEMORY[0x1BA9E48C0](v22, -1, -1);
    }

    char v23 = 1;
    return v23 & 1;
  }
  char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15(v17, v1);
  v15(v16, v1);
  if (v18) {
    goto LABEL_10;
  }
  uint64_t v25 = (void *)(v43 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  if (*v25 >> 62 == 1)
  {
    uint64_t v26 = *v25 & 0x3FFFFFFFFFFFFFFFLL;
    uint64_t v27 = one-time initialization token for conversationBridge;
    swift_retain();
    if (v27 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.conversationBridge);
    swift_retain_n();
    unint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      uint64_t v52 = v32;
      *(_DWORD *)uint64_t v31 = 136315138;
      uint64_t v48 = (char *)(v31 + 4);
      uint64_t v33 = *(uint64_t (**)(uint64_t))(*(void *)v26 + 800);
      uint64_t v34 = swift_retain();
      uint64_t v35 = v33(v34);
      unint64_t v37 = v36;
      swift_release();
      uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v29, v30, "Selected ResultCandidateState: %s", v31, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v32, -1, -1);
      MEMORY[0x1BA9E48C0](v31, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    char v23 = (*(uint64_t (**)(void))(*(void *)v26 + 640))();
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.conversationBridge);
    os_log_type_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      char v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v41 = 0;
      _os_log_impl(&dword_1B9C64000, v39, v40, "No selected RC found", v41, 2u);
      MEMORY[0x1BA9E48C0](v41, -1, -1);
    }

    char v23 = 0;
  }
  return v23 & 1;
}

uint64_t ExecutionOutput.init(coder:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v90 = (uint64_t)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v70 - v7;
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (uint64_t (**)(id, id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t))((char *)&v70 - v9);
  uint64_t v11 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v89 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v70 - v16;
  MEMORY[0x1F4188790](v15);
  long long v94 = (char *)&v70 - v18;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  id v19 = v1;
  uint64_t v20 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v20)
  {

    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.executor);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      unint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v36 = 0;
      _os_log_impl(&dword_1B9C64000, v34, v35, "Could not decode ExecutionOutput: missing executionRequestId", v36, 2u);
      MEMORY[0x1BA9E48C0](v36, -1, -1);
    }

    goto LABEL_21;
  }
  id v91 = v20;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
  id v92 = (id)NSCoder.decodeObject<A>(of:forKey:)();
  type metadata accessor for ExecutionContextUpdate();
  id v93 = (id)NSCoder.decodeObject<A>(of:forKey:)();
  os_log_type_t v21 = NSCoder.decodeObject<A>(of:forKey:)();
  id v97 = (id)NSCoder.decodeObject<A>(of:forKey:)();
  id v96 = (id)NSCoder.decodeObject<A>(of:forKey:)();
  id v95 = (id)NSCoder.decodeObject<A>(of:forKey:)();
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSData);
  uint64_t v22 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v22)
  {
    char v23 = (void *)v22;
    uint64_t v86 = v12;
    uint64_t ObjectType = v10;
    id v88 = v21;
    uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v26 = v25;

    uint64_t v27 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v27)
    {
      uint64_t v28 = (void *)v27;
      id v87 = v19;
      uint64_t v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v31 = v30;

      type metadata accessor for JSONDecoder();
      swift_allocObject();
      uint64_t v32 = JSONDecoder.init()();
      lazy protocol witness table accessor for type RequestSummary.ExecutionSource and conformance RequestSummary.ExecutionSource(&lazy protocol witness table cache variable for type RequestSummary.ExecutionSource and conformance RequestSummary.ExecutionSource, MEMORY[0x1E4FA24D0]);
      uint64_t v84 = v24;
      unint64_t v85 = v26;
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      int v47 = *(void (**)(char *, char *, uint64_t))(v86 + 32);
      uint64_t v77 = v11;
      v47(v94, v17, v11);
      uint64_t v48 = type metadata accessor for FlowOutputMessage.InAppResponse();
      lazy protocol witness table accessor for type RequestSummary.ExecutionSource and conformance RequestSummary.ExecutionSource(&lazy protocol witness table cache variable for type FlowOutputMessage.InAppResponse and conformance FlowOutputMessage.InAppResponse, MEMORY[0x1E4FA2050]);
      uint64_t v80 = v32;
      uint64_t v81 = v29;
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      id v49 = v88;
      unint64_t v82 = v31;
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v8, 0, 1, v48);
      uint64_t v52 = (uint64_t)ObjectType;
      outlined init with take of FlowOutputMessage.InAppResponse?((uint64_t)v8, (uint64_t)ObjectType);
      uint64_t v53 = v87;
      uint64_t ObjectType = (uint64_t (**)(id, id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t))swift_getObjectType();

      if (v49)
      {
        uint64_t v98 = 0;
        uint64_t v99 = 0;
        id v54 = v49;
        static String._conditionallyBridgeFromObjectiveC(_:result:)();

        uint64_t v79 = v98;
        uint64_t v78 = v99;
        id v55 = v97;
        if (v97) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v79 = 0;
        uint64_t v78 = 0;
        id v55 = v97;
        if (v97)
        {
LABEL_25:
          uint64_t v98 = 0;
          uint64_t v99 = 0;
          id v56 = v55;
          static String._conditionallyBridgeFromObjectiveC(_:result:)();

          uint64_t v76 = v98;
          uint64_t v75 = v99;
          id v57 = v96;
          if (v96) {
            goto LABEL_26;
          }
          goto LABEL_30;
        }
      }
      uint64_t v76 = 0;
      uint64_t v75 = 0;
      id v57 = v96;
      if (v96)
      {
LABEL_26:
        uint64_t v98 = 0;
        uint64_t v99 = 0;
        id v58 = v57;
        static String._conditionallyBridgeFromObjectiveC(_:result:)();

        uint64_t v74 = v98;
        uint64_t v73 = v99;
        id v59 = v95;
        if (v95)
        {
LABEL_27:
          uint64_t v60 = v52;
          uint64_t v98 = 0;
          uint64_t v99 = 0;
          id v61 = v59;
          static String._conditionallyBridgeFromObjectiveC(_:result:)();

          uint64_t v72 = v98;
          uint64_t v71 = v99;
LABEL_32:
          id v62 = v91;
          uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v65 = v64;
          uint64_t v66 = v86;
          uint64_t v67 = v89;
          uint64_t v68 = v77;
          (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v89, v94, v77);
          uint64_t v69 = v90;
          outlined init with copy of FlowOutputMessage.InAppResponse?(v60, v90);
          uint64_t v50 = ObjectType[19](v92, v93, v79, v78, v76, v75, v74, v73, v72, v71, v63, v65, v67, v69);
          swift_release();
          outlined consume of Data._Representation(v81, v82);
          outlined consume of Data._Representation(v84, v85);

          outlined destroy of ReferenceResolutionClientProtocol?(v60, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
          (*(void (**)(char *, uint64_t))(v66 + 8))(v94, v68);
          swift_deallocPartialClassInstance();
          return v50;
        }
LABEL_31:
        uint64_t v60 = v52;
        uint64_t v72 = 0;
        uint64_t v71 = 0;
        goto LABEL_32;
      }
LABEL_30:
      uint64_t v74 = 0;
      uint64_t v73 = 0;
      id v59 = v95;
      if (v95) {
        goto LABEL_27;
      }
      goto LABEL_31;
    }

    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.executor);
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    BOOL v44 = os_log_type_enabled(v42, v43);
    id v45 = v88;
    if (v44)
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl(&dword_1B9C64000, v42, v43, "Can't decode InAppResponse data into Data", v46, 2u);
      MEMORY[0x1BA9E48C0](v46, -1, -1);
      outlined consume of Data._Representation(v24, v26);

      goto LABEL_21;
    }

    outlined consume of Data._Representation(v24, v26);
LABEL_20:

    goto LABEL_21;
  }

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  __swift_project_value_buffer(v37, (uint64_t)static Logger.executor);
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v38, v39))
  {

    goto LABEL_20;
  }
  os_log_type_t v40 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)os_log_type_t v40 = 0;
  _os_log_impl(&dword_1B9C64000, v38, v39, "Can't decode ExecutionSource data into Data", v40, 2u);
  MEMORY[0x1BA9E48C0](v40, -1, -1);

LABEL_21:
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return 0;
}

unint64_t type metadata accessor for NSString()
{
  unint64_t result = lazy cache variable for type metadata for NSString;
  if (!lazy cache variable for type metadata for NSString)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSString);
  }
  return result;
}

uint64_t type metadata accessor for ExecutionContextUpdate()
{
  uint64_t result = type metadata singleton initialization cache for ExecutionContextUpdate;
  if (!type metadata singleton initialization cache for ExecutionContextUpdate) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t ExecutionContextUpdate.init(coder:)(id a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ContextUpdateScope?);
  MEMORY[0x1F4188790](v3 - 8);
  id v181 = (char *)&v176 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for ContextUpdateScope();
  uint64_t v206 = *(void *)(updated - 8);
  uint64_t v5 = MEMORY[0x1F4188790](updated);
  uint64_t v185 = (char *)&v176 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  unint64_t v178 = (char *)&v176 - v8;
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v176 - v9;
  uint64_t v179 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse.DirectInvocation?);
  uint64_t v11 = MEMORY[0x1F4188790](v179);
  uint64_t v184 = (uint64_t)&v176 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v180 = (char *)&v176 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v200 = (uint64_t)&v176 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Task?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v203 = (char *)&v176 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  unint64_t v208 = (char *)&v176 - v19;
  uint64_t v222 = type metadata accessor for Siri_Nlu_External_Task();
  uint64_t v219 = *(void *)(v222 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v222);
  unint64_t v216 = (char *)&v176 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v215 = (char *)&v176 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v218 = (char *)&v176 - v25;
  MEMORY[0x1F4188790](v24);
  uint64_t v217 = (char *)&v176 - v26;
  uint64_t v182 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  uint64_t v27 = MEMORY[0x1F4188790](v182);
  uint64_t v183 = (uint64_t)&v176 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v191 = (char *)&v176 - v30;
  MEMORY[0x1F4188790](v29);
  uint64_t v32 = (char *)&v176 - v31;
  uint64_t v33 = type metadata accessor for BinaryDecodingOptions();
  uint64_t v34 = MEMORY[0x1F4188790](v33 - 8);
  unint64_t v202 = (char *)&v176 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  unint64_t v207 = (char *)&v176 - v37;
  MEMORY[0x1F4188790](v36);
  unint64_t v210 = (char *)&v176 - v38;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_SystemDialogAct?);
  MEMORY[0x1F4188790](v39 - 8);
  uint64_t v211 = (char *)&v176 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v212 = *(void *)(v41 - 8);
  uint64_t v42 = MEMORY[0x1F4188790](v41);
  unint64_t v221 = (unint64_t)&v176 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v42);
  id v45 = (char *)&v176 - v44;
  uint64_t v186 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v187 = *(void *)(v186 - 8);
  uint64_t v46 = MEMORY[0x1F4188790](v186);
  uint64_t v209 = (char *)&v176 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = MEMORY[0x1F4188790](v46);
  unint64_t v213 = (char *)&v176 - v49;
  MEMORY[0x1F4188790](v48);
  uint64_t v220 = (char *)&v176 - v50;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SACFProvideContext);
  id v193 = v1;
  id v189 = (id)NSCoder.decodeObject<A>(of:forKey:)();
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SARDNativeFlowContextUpdate);
  id v188 = (id)NSCoder.decodeObject<A>(of:forKey:)();
  uint64_t v205 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  uint64_t v51 = swift_allocObject();
  long long v204 = xmmword_1BA04F9C0;
  *(_OWORD *)(v51 + 16) = xmmword_1BA04F9C0;
  uint64_t v52 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSArray);
  *(void *)(v51 + 32) = v52;
  uint64_t v194 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSData);
  *(void *)(v51 + 40) = v194;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  uint64_t v192 = v32;
  unint64_t v214 = v10;
  id v201 = a1;
  uint64_t v190 = v52;
  if (!*((void *)&v225 + 1))
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v224, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_13;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    unint64_t v223 = 0;
    goto LABEL_16;
  }
  id v177 = (id)v229;
  NSArray.makeIterator()();
  NSFastEnumerationIterator.next()();
  if (v230)
  {
    uint64_t v197 = (void (**)(char *, void, uint64_t, uint64_t))(v212 + 56);
    uint64_t v53 = (void (**)(char *, char *, uint64_t))(v212 + 32);
    os_log_type_t v195 = (void (**)(unint64_t, char *, uint64_t))(v212 + 16);
    uint64_t v196 = v212 + 8;
    unint64_t v223 = MEMORY[0x1E4FBC860];
    uint64_t v199 = MEMORY[0x1E4FBC840] + 8;
    while (1)
    {
      outlined init with take of Any(&v229, &v224);
      if ((swift_dynamicCast() & 1) == 0) {
        break;
      }
      uint64_t v54 = v227;
      unint64_t v55 = v228;
      uint64_t v226 = 0;
      long long v224 = 0u;
      long long v225 = 0u;
      outlined copy of Data._Representation(v227, v228);
      BinaryDecodingOptions.init()();
      lazy protocol witness table accessor for type Parse.DirectInvocation and conformance Parse.DirectInvocation((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_SystemDialogAct and conformance Siri_Nlu_External_SystemDialogAct, MEMORY[0x1E4FA2910]);
      id v56 = v211;
      Message.init<A>(contiguousBytes:extensions:partial:options:)();
      (*v197)(v56, 0, 1, v41);
      id v57 = *v53;
      (*v53)(v45, v56, v41);
      (*v195)(v221, v45, v41);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v223 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v223 + 16) + 1, 1, v223);
      }
      unint64_t v59 = *(void *)(v223 + 16);
      unint64_t v58 = *(void *)(v223 + 24);
      if (v59 >= v58 >> 1) {
        unint64_t v223 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1, v223);
      }
      unint64_t v60 = v223;
      *(void *)(v223 + 16) = v59 + 1;
      uint64_t v61 = v212;
      v57((char *)(v60+ ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))+ *(void *)(v212 + 72) * v59), (char *)v221, v41);
      outlined consume of Data._Representation(v54, v55);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v45, v41);
      NSFastEnumerationIterator.next()();
      if (!v230) {
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRelease();

    id v157 = v201;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v158 = type metadata accessor for Logger();
    __swift_project_value_buffer(v158, (uint64_t)static Logger.executor);
    uint64_t v159 = Logger.logObject.getter();
    os_log_type_t v160 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v159, v160))
    {
      uint64_t v161 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v161 = 0;
      _os_log_impl(&dword_1B9C64000, v159, v160, "Element in decoded array is not Data", v161, 2u);
      MEMORY[0x1BA9E48C0](v161, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v187 + 8))(v220, v186);
    goto LABEL_92;
  }
  unint64_t v223 = MEMORY[0x1E4FBC860];
LABEL_15:
  (*(void (**)(char *, uint64_t))(v187 + 8))(v220, v186);

  a1 = v201;
  uint64_t v32 = v192;
  uint64_t v10 = v214;
LABEL_16:
  uint64_t v62 = v194;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  uint64_t v63 = JSONDecoder.init()();
  uint64_t v64 = NSCoder.decodeObject<A>(of:forKey:)();
  uint64_t v212 = v63;
  if (v64)
  {
    uint64_t v65 = (void *)v64;
    uint64_t v66 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v68 = v67;

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RREntity]);
    lazy protocol witness table accessor for type [RREntity] and conformance <A> [A]();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v66, v68);
    uint64_t v199 = v224;
  }
  else
  {
    uint64_t v199 = 0;
  }
  uint64_t v69 = (uint64_t)v191;
  uint64_t v70 = type metadata accessor for PommesContext();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v32, 1, 1, v70);
  uint64_t v71 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v71)
  {
    uint64_t v72 = (void *)v71;
    uint64_t v73 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v75 = v74;
    lazy protocol witness table accessor for type PommesContext? and conformance <A> A?();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);

    outlined consume of Data._Representation(v73, v75);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v69, (uint64_t)v32, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
    uint64_t v81 = v190;
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v76 = type metadata accessor for Logger();
    __swift_project_value_buffer(v76, (uint64_t)static Logger.executor);
    uint64_t v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.error.getter();
    BOOL v79 = os_log_type_enabled(v77, v78);
    uint64_t v81 = v190;
    if (v79)
    {
      uint64_t v80 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v80 = 0;
      _os_log_impl(&dword_1B9C64000, v77, v78, "Can't decode PommesContext data into Data", v80, 2u);
      MEMORY[0x1BA9E48C0](v80, -1, -1);
    }
  }
  uint64_t v82 = swift_allocObject();
  *(_OWORD *)(v82 + 16) = v204;
  *(void *)(v82 + 32) = v81;
  *(void *)(v82 + 40) = v62;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (!*((void *)&v225 + 1))
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v224, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_38;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_38:
    uint64_t v220 = 0;
    goto LABEL_41;
  }
  uint64_t v197 = (void (**)(char *, void, uint64_t, uint64_t))v229;
  NSArray.makeIterator()();
  NSFastEnumerationIterator.next()();
  if (v230)
  {
    uint64_t v211 = (char *)(v219 + 56);
    uint64_t v83 = (void (**)(char *, char *, uint64_t))(v219 + 32);
    uint64_t v84 = (void (**)(char *, char *, uint64_t))(v219 + 16);
    unint64_t v210 = (char *)(v219 + 8);
    uint64_t v220 = (char *)MEMORY[0x1E4FBC860];
    unint64_t v221 = MEMORY[0x1E4FBC840] + 8;
    while (1)
    {
      outlined init with take of Any(&v229, &v224);
      if ((swift_dynamicCast() & 1) == 0) {
        break;
      }
      uint64_t v85 = v227;
      unint64_t v86 = v228;
      uint64_t v226 = 0;
      long long v224 = 0u;
      long long v225 = 0u;
      outlined copy of Data._Representation(v227, v228);
      BinaryDecodingOptions.init()();
      lazy protocol witness table accessor for type Parse.DirectInvocation and conformance Parse.DirectInvocation(lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task, MEMORY[0x1E4FA2760]);
      id v87 = v208;
      uint64_t v88 = v222;
      Message.init<A>(contiguousBytes:extensions:partial:options:)();
      (*(void (**)(char *, void, uint64_t, uint64_t))v211)(v87, 0, 1, v88);
      uint64_t v89 = *v83;
      uint64_t v90 = v217;
      (*v83)(v217, v87, v88);
      (*v84)(v218, v90, v88);
      unint64_t v91 = (unint64_t)v220;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v91 + 16) + 1, 1, v91);
      }
      unint64_t v93 = *(void *)(v91 + 16);
      unint64_t v92 = *(void *)(v91 + 24);
      if (v93 >= v92 >> 1) {
        unint64_t v91 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v92 > 1, v93 + 1, 1, v91);
      }
      *(void *)(v91 + 16) = v93 + 1;
      long long v94 = (char *)v91;
      uint64_t v95 = v219;
      unint64_t v96 = (*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80);
      uint64_t v220 = v94;
      uint64_t v97 = v222;
      v89(&v94[v96 + *(void *)(v219 + 72) * v93], v218, v222);
      outlined consume of Data._Representation(v85, v86);
      (*(void (**)(char *, uint64_t))(v95 + 8))(v217, v97);
      NSFastEnumerationIterator.next()();
      if (!v230) {
        goto LABEL_40;
      }
    }
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v162 = v201;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v163 = type metadata accessor for Logger();
    __swift_project_value_buffer(v163, (uint64_t)static Logger.executor);
    uint64_t v164 = Logger.logObject.getter();
    os_log_type_t v165 = static os_log_type_t.error.getter();
    BOOL v166 = os_log_type_enabled(v164, v165);
    uint64_t v167 = (uint64_t)v192;
    if (v166)
    {
      uint64_t v168 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v168 = 0;
      _os_log_impl(&dword_1B9C64000, v164, v165, "Element in decoded array is not of type Data", v168, 2u);
      MEMORY[0x1BA9E48C0](v168, -1, -1);
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v187 + 8))(v213, v186);
    goto LABEL_91;
  }
  uint64_t v220 = (char *)MEMORY[0x1E4FBC860];
LABEL_40:
  (*(void (**)(char *, uint64_t))(v187 + 8))(v213, v186);

  a1 = v201;
  uint64_t v10 = v214;
  uint64_t v62 = v194;
  uint64_t v81 = v190;
LABEL_41:
  uint64_t v98 = swift_allocObject();
  *(_OWORD *)(v98 + 16) = v204;
  *(void *)(v98 + 32) = v81;
  *(void *)(v98 + 40) = v62;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (!*((void *)&v225 + 1))
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v224, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_53;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_53:
    unint64_t v221 = 0;
    goto LABEL_56;
  }
  unint64_t v213 = (char *)v229;
  NSArray.makeIterator()();
  NSFastEnumerationIterator.next()();
  if (v230)
  {
    uint64_t v99 = (void (**)(char *, void, uint64_t, uint64_t))(v219 + 56);
    int v100 = (void (**)(char *, char *, uint64_t))(v219 + 32);
    uint64_t v101 = (void (**)(char *, char *, uint64_t))(v219 + 16);
    uint64_t v217 = (char *)(v219 + 8);
    unint64_t v221 = MEMORY[0x1E4FBC860];
    uint64_t v218 = (char *)(MEMORY[0x1E4FBC840] + 8);
    uint64_t v102 = v222;
    while (1)
    {
      outlined init with take of Any(&v229, &v224);
      if ((swift_dynamicCast() & 1) == 0) {
        break;
      }
      uint64_t v103 = v227;
      unint64_t v104 = v228;
      uint64_t v226 = 0;
      long long v224 = 0u;
      long long v225 = 0u;
      outlined copy of Data._Representation(v227, v228);
      BinaryDecodingOptions.init()();
      lazy protocol witness table accessor for type Parse.DirectInvocation and conformance Parse.DirectInvocation(lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task, MEMORY[0x1E4FA2760]);
      uint64_t v105 = v203;
      Message.init<A>(contiguousBytes:extensions:partial:options:)();
      (*v99)(v105, 0, 1, v102);
      unint64_t v106 = v105;
      uint64_t v107 = *v100;
      unint64_t v108 = v215;
      (*v100)(v215, v106, v102);
      (*v101)(v216, v108, v102);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v221 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v221 + 16) + 1, 1, v221);
      }
      unint64_t v110 = *(void *)(v221 + 16);
      unint64_t v109 = *(void *)(v221 + 24);
      if (v110 >= v109 >> 1) {
        unint64_t v221 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v109 > 1, v110 + 1, 1, v221);
      }
      unint64_t v111 = v221;
      *(void *)(v221 + 16) = v110 + 1;
      uint64_t v112 = v219;
      unint64_t v113 = v111
           + ((*(unsigned __int8 *)(v112 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80))
           + *(void *)(v219 + 72) * v110;
      uint64_t v102 = v222;
      v107((char *)v113, v216, v222);
      outlined consume of Data._Representation(v103, v104);
      (*(void (**)(char *, uint64_t))(v112 + 8))(v215, v102);
      NSFastEnumerationIterator.next()();
      uint64_t v10 = v214;
      if (!v230) {
        goto LABEL_55;
      }
    }
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v169 = v201;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v170 = type metadata accessor for Logger();
    __swift_project_value_buffer(v170, (uint64_t)static Logger.executor);
    id v171 = Logger.logObject.getter();
    os_log_type_t v172 = static os_log_type_t.error.getter();
    BOOL v173 = os_log_type_enabled(v171, v172);
    uint64_t v167 = (uint64_t)v192;
    if (v173)
    {
      uint64_t v174 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v174 = 0;
      _os_log_impl(&dword_1B9C64000, v171, v172, "Element in decoded array is not of type Data", v174, 2u);
      MEMORY[0x1BA9E48C0](v174, -1, -1);
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v187 + 8))(v209, v186);
LABEL_91:
    outlined destroy of ReferenceResolutionClientProtocol?(v167, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
LABEL_92:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  unint64_t v221 = MEMORY[0x1E4FBC860];
LABEL_55:
  (*(void (**)(char *, uint64_t))(v187 + 8))(v209, v186);

  a1 = v201;
LABEL_56:
  uint64_t v114 = type metadata accessor for Parse.DirectInvocation();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v114 - 8) + 56))(v200, 1, 1, v114);
  uint64_t v115 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v115)
  {
    uint64_t v116 = v115;
    id v117 = a1;
    uint64_t v118 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v120 = v119;
    lazy protocol witness table accessor for type Parse.DirectInvocation? and conformance <A> A?();
    uint64_t v121 = (uint64_t)v180;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    uint64_t v128 = v200;
    outlined destroy of ReferenceResolutionClientProtocol?(v200, &demangling cache variable for type metadata for Parse.DirectInvocation?);
    outlined consume of Data._Representation(v118, v120);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v121, v128, &demangling cache variable for type metadata for Parse.DirectInvocation?);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v129 = type metadata accessor for Logger();
    __swift_project_value_buffer(v129, (uint64_t)static Logger.executor);
    uint64_t v130 = Logger.logObject.getter();
    os_log_type_t v131 = static os_log_type_t.debug.getter();
    a1 = v117;
    if (os_log_type_enabled(v130, v131))
    {
      uint64_t v132 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v132 = 0;
      _os_log_impl(&dword_1B9C64000, v130, v131, "Successfully decoded undoDirectInvocation data into Optional<Parse.DirectInvocation>", v132, 2u);
      MEMORY[0x1BA9E48C0](v132, -1, -1);
    }

    unint64_t v123 = v116;
    uint64_t v126 = updated;
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v122 = type metadata accessor for Logger();
    __swift_project_value_buffer(v122, (uint64_t)static Logger.executor);
    unint64_t v123 = Logger.logObject.getter();
    os_log_type_t v124 = static os_log_type_t.error.getter();
    BOOL v125 = os_log_type_enabled(v123, v124);
    uint64_t v126 = updated;
    if (v125)
    {
      uint64_t v127 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v127 = 0;
      _os_log_impl(&dword_1B9C64000, v123, v124, "Can't decode undoDirectInvocation data into Data", v127, 2u);
      MEMORY[0x1BA9E48C0](v127, -1, -1);
    }
  }

  uint64_t v133 = *MEMORY[0x1E4FA1C98];
  uint64_t v134 = *(void (**)(char *, uint64_t, uint64_t))(v206 + 104);
  v134(v10, v133, v126);
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  uint64_t v135 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v135)
  {
    int v136 = (void *)v135;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v137 = (uint64_t)v181;
    ContextUpdateScope.init(rawValue:)();

    uint64_t v138 = v206;
    (*(void (**)(char *, uint64_t))(v206 + 8))(v10, v126);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v138 + 48))(v137, 1, v126) == 1)
    {
      uint64_t v139 = v178;
      v134(v178, v133, v126);
      outlined destroy of ReferenceResolutionClientProtocol?(v137, &demangling cache variable for type metadata for ContextUpdateScope?);
      (*(void (**)(char *, char *, uint64_t))(v138 + 32))(v10, v139, v126);
    }
    else
    {
      unint64_t v140 = *(void (**)(char *, uint64_t, uint64_t))(v138 + 32);
      uint64_t v141 = v178;
      v140(v178, v137, v126);
      v140(v10, (uint64_t)v141, v126);
    }
  }
  uint64_t v142 = (void *)MEMORY[0x1BA9E2DD0](0xD00000000000001ALL, 0x80000001BA060AA0);
  unsigned int v143 = objc_msgSend(a1, sel_containsValueForKey_, v142);

  if (v143 && (uint64_t v144 = NSCoder.decodeObject<A>(of:forKey:)()) != 0)
  {
    uint64_t v145 = (void *)v144;
    long long v224 = 0uLL;
    static String._conditionallyBridgeFromObjectiveC(_:result:)();

    uint64_t v219 = *((void *)&v224 + 1);
    uint64_t v222 = v224;
  }
  else
  {
    uint64_t v222 = 0;
    uint64_t v219 = 0;
  }
  id v146 = v193;
  uint64_t ObjectType = swift_getObjectType();

  uint64_t v148 = v200;
  uint64_t v149 = v184;
  outlined init with copy of ReferenceResolutionClientProtocol?(v200, v184, &demangling cache variable for type metadata for Parse.DirectInvocation?);
  uint64_t v150 = (uint64_t)v192;
  uint64_t v151 = v183;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v192, v183, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  uint64_t v152 = v206;
  uint64_t v153 = v185;
  uint64_t v154 = v214;
  uint64_t v155 = updated;
  (*(void (**)(char *, char *, uint64_t))(v206 + 16))(v185, v214, updated);
  uint64_t v156 = (*(uint64_t (**)(id, id, unint64_t, char *, unint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(ObjectType + 160))(v189, v188, v223, v220, v221, v149, v199, v151, v153, v222, v219);

  swift_release();
  (*(void (**)(char *, uint64_t))(v152 + 8))(v154, v155);
  outlined destroy of ReferenceResolutionClientProtocol?(v148, &demangling cache variable for type metadata for Parse.DirectInvocation?);
  outlined destroy of ReferenceResolutionClientProtocol?(v150, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  swift_deallocPartialClassInstance();
  return v156;
}

uint64_t objectdestroy_11Tm(uint64_t *a1, void (*a2)(void, void))
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v6 + 16) & ~v6;
  uint64_t v8 = v6 | 7;
  unint64_t v9 = (*(void *)(v5 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2 + v7, v4);
  a2(*(void *)(v2 + v9), *(unsigned __int8 *)(v2 + v9 + 8));

  return MEMORY[0x1F4186498](v2, v9 + 9, v8);
}

uint64_t objectdestroy_7Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

unint64_t lazy protocol witness table accessor for type [RREntity] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [RREntity] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [RREntity] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [RREntity]);
    lazy protocol witness table accessor for type Parse.DirectInvocation and conformance Parse.DirectInvocation(&lazy protocol witness table cache variable for type RREntity and conformance RREntity, MEMORY[0x1E4FA3E10]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [RREntity] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type [RREntity] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [RREntity] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [RREntity]);
    lazy protocol witness table accessor for type Parse.DirectInvocation and conformance Parse.DirectInvocation((unint64_t *)&lazy protocol witness table cache variable for type RREntity and conformance RREntity, MEMORY[0x1E4FA3E10]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [RREntity] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PommesContext? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type PommesContext? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type PommesContext? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
    lazy protocol witness table accessor for type Parse.DirectInvocation and conformance Parse.DirectInvocation(&lazy protocol witness table cache variable for type PommesContext and conformance PommesContext, MEMORY[0x1E4F9FED8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext? and conformance <A> A?);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PommesContext? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type PommesContext? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
    lazy protocol witness table accessor for type Parse.DirectInvocation and conformance Parse.DirectInvocation(&lazy protocol witness table cache variable for type PommesContext and conformance PommesContext, MEMORY[0x1E4F9FED8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesContext? and conformance <A> A?);
  }
  return result;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

unint64_t lazy protocol witness table accessor for type Parse.DirectInvocation? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type Parse.DirectInvocation? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Parse.DirectInvocation? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Parse.DirectInvocation?);
    lazy protocol witness table accessor for type Parse.DirectInvocation and conformance Parse.DirectInvocation(&lazy protocol witness table cache variable for type Parse.DirectInvocation and conformance Parse.DirectInvocation, MEMORY[0x1E4FA1F20]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Parse.DirectInvocation? and conformance <A> A?);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Parse.DirectInvocation? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Parse.DirectInvocation? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Parse.DirectInvocation?);
    lazy protocol witness table accessor for type Parse.DirectInvocation and conformance Parse.DirectInvocation(&lazy protocol witness table cache variable for type Parse.DirectInvocation and conformance Parse.DirectInvocation, MEMORY[0x1E4FA1F20]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Parse.DirectInvocation? and conformance <A> A?);
  }
  return result;
}

void specialized static ExecutionContextUpdate.synchronizePromptContexts(pommesContext:nativeFlowContextCommand:)(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  unint64_t v69 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v66 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for PommesContext();
  uint64_t v11 = *(void **)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v67 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v11[6];
  int v14 = v67(a1, 1, v10);
  uint64_t v68 = a1;
  if (!v14)
  {
    uint64_t v64 = (void (*)(char *, uint64_t, uint64_t))v11[2];
    v64(v13, a1, v10);
    uint64_t v65 = PommesContext.exportPegasusConversationContext()();
    unint64_t v16 = v15;
    uint64_t v63 = (void (*)(char *, uint64_t))v11[1];
    v63(v13, v10);
    if (v16 >> 60 != 15)
    {
      unint64_t v69 = v16;
      uint64_t v31 = a2;
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)static Logger.executor);
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v35 = 0;
        _os_log_impl(&dword_1B9C64000, v33, v34, "Propagating PommesContext Pegasus conversation context to NativeFlowContextUpdate", v35, 2u);
        MEMORY[0x1BA9E48C0](v35, -1, -1);
      }

      if (v31)
      {
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v31, sel_setPegasusConversationContext_, isa);
      }
      uint64_t v37 = v68;
      if (v67(v68, 1, v10)
        || (v64(v13, v37, v10),
            uint64_t v38 = PommesContext.exportPromptContextData()(),
            unint64_t v40 = v39,
            v63(v13, v10),
            v40 >> 60 == 15))
      {
        id v41 = v31;
        uint64_t v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v42, v43))
        {
          outlined consume of Data?(v65, v69);

          return;
        }
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        uint64_t v45 = swift_slowAlloc();
        uint64_t v70 = v45;
        *(_DWORD *)uint64_t v44 = 136315138;
        if (v31 && (id v46 = objc_msgSend(v41, sel_promptContextProto)) != 0)
        {
          uint64_t v47 = v46;
          uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v50 = v49;
        }
        else
        {
          uint64_t v48 = 0;
          unint64_t v50 = 0xF000000000000000;
        }
        *(void *)&long long v71 = v48;
        *((void *)&v71 + 1) = v50;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
        uint64_t v55 = String.init<A>(describing:)();
        *(void *)&long long v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, &v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v42, v43, "No PommesContext prompt context data. Leaving existing: %s", v44, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v45, -1, -1);
        MEMORY[0x1BA9E48C0](v44, -1, -1);
        uint64_t v57 = v65;
        unint64_t v58 = v69;
      }
      else
      {
        unint64_t v59 = Logger.logObject.getter();
        os_log_type_t v60 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v59, v60))
        {
          uint64_t v61 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v61 = 0;
          _os_log_impl(&dword_1B9C64000, v59, v60, "Propagating PommesContext prompt context data to NativeFlowContextUpdate", v61, 2u);
          MEMORY[0x1BA9E48C0](v61, -1, -1);
        }

        if (!v31)
        {
          outlined consume of Data?(v65, v69);
          outlined consume of Data?(v38, v40);
          return;
        }
        uint64_t v42 = Data._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v31, sel_setPromptContextProto_, v42);
        outlined consume of Data?(v65, v69);
        uint64_t v57 = v38;
        unint64_t v58 = v40;
      }
      outlined consume of Data?(v57, v58);

      return;
    }
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = a2;
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl(&dword_1B9C64000, v18, v19, "Propagating NativeFlowContextUpdate prompt context to PommesContext", v21, 2u);
    uint64_t v22 = v21;
    a2 = v20;
    MEMORY[0x1BA9E48C0](v22, -1, -1);
  }

  if (a2 && (id v23 = objc_msgSend(a2, sel_promptContextProto)) != 0)
  {
    uint64_t v24 = v23;
    uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v27 = v26;

    uint64_t v73 = 0;
    long long v71 = 0u;
    long long v72 = 0u;
    outlined copy of Data._Representation(v25, v27);
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type Parse.DirectInvocation and conformance Parse.DirectInvocation(lazy protocol witness table cache variable for type Com_Apple_Siri_Product_Proto_PromptContext and conformance Com_Apple_Siri_Product_Proto_PromptContext, MEMORY[0x1E4FA2B58]);
    Message.init(serializedData:extensions:partial:options:)();
    unint64_t v51 = v69;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56))(v7, 0, 1, v8);
    (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v66, v7, v8);
    if (!v67(v68, 1, v10)) {
      PommesContext.update(with:)();
    }
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v54 = 0;
      _os_log_impl(&dword_1B9C64000, v52, v53, "Applied NFCU promptContext to PommesContext", v54, 2u);
      MEMORY[0x1BA9E48C0](v54, -1, -1);
    }

    outlined consume of Data._Representation(v25, v27);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v66, v8);
  }
  else
  {
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl(&dword_1B9C64000, v28, v29, "Unable to apply NFCU promptContext to PommesContext; either no NFCU, no promptContextProto, or serialization error",
        v30,
        2u);
      MEMORY[0x1BA9E48C0](v30, -1, -1);
    }
  }
}

uint64_t ExecutionContextUpdate.debugDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse.DirectInvocation?);
  MEMORY[0x1F4188790](v91);
  uint64_t v90 = (uint64_t)&v90 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v90 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (objc_class *)type metadata accessor for ExecutionContextUpdate();
  v94.receiver = v0;
  v94.super_class = v6;
  id v7 = objc_msgSendSuper2(&v94, sel_debugDescription);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v10 = v9;

  uint64_t v95 = v8;
  unint64_t v96 = v10;
  v11._uint64_t countAndFlagsBits = 31520;
  v11._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  uint64_t v13 = v95;
  unint64_t v12 = v96;
  uint64_t v95 = 0;
  unint64_t v96 = 0xE000000000000000;
  LOBYTE(v92) = 0;
  _print_unlocked<A, B>(_:_:)();
  v14._uint64_t countAndFlagsBits = 8250;
  v14._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v14);
  uint64_t v92 = *(void *)&v1[OBJC_IVAR___SKRExecutionContextUpdate_provideContextCommand];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SACFProvideContext?);
  v15._uint64_t countAndFlagsBits = Optional.debugDescription.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 8236;
  v16._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  uint64_t v17 = v95;
  uint64_t v18 = (void *)v96;
  uint64_t v95 = v13;
  unint64_t v96 = v12;
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = v17;
  v19._unint64_t object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v21 = v95;
  unint64_t v20 = v96;
  uint64_t v95 = 0;
  unint64_t v96 = 0xE000000000000000;
  LOBYTE(v92) = 7;
  _print_unlocked<A, B>(_:_:)();
  v22._uint64_t countAndFlagsBits = 8250;
  v22._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v22);
  uint64_t v92 = *(void *)&v1[OBJC_IVAR___SKRExecutionContextUpdate_nluSystemDialogActs];
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_SystemDialogAct]?);
  v23._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._uint64_t countAndFlagsBits = 8236;
  v24._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v24);
  uint64_t v25 = v95;
  unint64_t v26 = (void *)v96;
  uint64_t v95 = v21;
  unint64_t v96 = v20;
  swift_bridgeObjectRetain();
  v27._uint64_t countAndFlagsBits = v25;
  v27._unint64_t object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v29 = v95;
  unint64_t v28 = v96;
  uint64_t v95 = 0;
  unint64_t v96 = 0xE000000000000000;
  LOBYTE(v92) = 2;
  _print_unlocked<A, B>(_:_:)();
  v30._uint64_t countAndFlagsBits = 8250;
  v30._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v30);
  uint64_t v92 = *(void *)&v1[OBJC_IVAR___SKRExecutionContextUpdate_nativeFlowContextCommand];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SARDNativeFlowContextUpdate?);
  v31._uint64_t countAndFlagsBits = Optional.debugDescription.getter();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._uint64_t countAndFlagsBits = 8236;
  v32._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v32);
  uint64_t v33 = v95;
  os_log_type_t v34 = (void *)v96;
  uint64_t v95 = v29;
  unint64_t v96 = v28;
  swift_bridgeObjectRetain();
  v35._uint64_t countAndFlagsBits = v33;
  v35._unint64_t object = v34;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v37 = v95;
  unint64_t v36 = v96;
  uint64_t v95 = 0;
  unint64_t v96 = 0xE000000000000000;
  LOBYTE(v92) = 3;
  _print_unlocked<A, B>(_:_:)();
  v38._uint64_t countAndFlagsBits = 8250;
  v38._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v38);
  uint64_t v92 = *(void *)&v1[OBJC_IVAR___SKRExecutionContextUpdate_rrEntities];
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RREntity]?);
  v39._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  v40._uint64_t countAndFlagsBits = 8236;
  v40._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v40);
  uint64_t v41 = v95;
  uint64_t v42 = (void *)v96;
  uint64_t v95 = v37;
  unint64_t v96 = v36;
  swift_bridgeObjectRetain();
  v43._uint64_t countAndFlagsBits = v41;
  v43._unint64_t object = v42;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v45 = v95;
  unint64_t v44 = v96;
  uint64_t v95 = 0;
  unint64_t v96 = 0xE000000000000000;
  LOBYTE(v92) = 6;
  _print_unlocked<A, B>(_:_:)();
  v46._uint64_t countAndFlagsBits = 8250;
  v46._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v46);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v1[OBJC_IVAR___SKRExecutionContextUpdate_pommesContext], (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  uint64_t v47 = type metadata accessor for PommesContext();
  int v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v47 - 8) + 48))(v5, 1, v47);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  if (v48 == 1) {
    uint64_t v49 = 28526;
  }
  else {
    uint64_t v49 = 7562617;
  }
  if (v48 == 1) {
    unint64_t v50 = 0xE200000000000000;
  }
  else {
    unint64_t v50 = 0xE300000000000000;
  }
  unint64_t v51 = v50;
  String.append(_:)(*(Swift::String *)&v49);
  swift_bridgeObjectRelease();
  v52._uint64_t countAndFlagsBits = 8236;
  v52._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v52);
  uint64_t v53 = v95;
  uint64_t v54 = (void *)v96;
  uint64_t v95 = v45;
  unint64_t v96 = v44;
  swift_bridgeObjectRetain();
  v55._uint64_t countAndFlagsBits = v53;
  v55._unint64_t object = v54;
  String.append(_:)(v55);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v56 = v95;
  unint64_t v57 = v96;
  uint64_t v95 = 0;
  unint64_t v96 = 0xE000000000000000;
  LOBYTE(v92) = 8;
  _print_unlocked<A, B>(_:_:)();
  v58._uint64_t countAndFlagsBits = 8250;
  v58._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v58);
  uint64_t v92 = *(void *)&v1[OBJC_IVAR___SKRExecutionContextUpdate_nluActiveTasks];
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_Task]?);
  v59._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v59);
  swift_bridgeObjectRelease();
  v60._uint64_t countAndFlagsBits = 8236;
  v60._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v60);
  uint64_t v61 = v95;
  uint64_t v62 = (void *)v96;
  uint64_t v95 = v56;
  unint64_t v96 = v57;
  swift_bridgeObjectRetain();
  v63._uint64_t countAndFlagsBits = v61;
  v63._unint64_t object = v62;
  String.append(_:)(v63);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v64 = v95;
  unint64_t v65 = v96;
  uint64_t v95 = 0;
  unint64_t v96 = 0xE000000000000000;
  LOBYTE(v92) = 9;
  _print_unlocked<A, B>(_:_:)();
  v66._uint64_t countAndFlagsBits = 8250;
  v66._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v66);
  uint64_t v92 = *(void *)&v1[OBJC_IVAR___SKRExecutionContextUpdate_nluCompletedTasks];
  swift_bridgeObjectRetain();
  v67._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v67);
  swift_bridgeObjectRelease();
  v68._uint64_t countAndFlagsBits = 8236;
  v68._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v68);
  uint64_t v69 = v95;
  uint64_t v70 = (void *)v96;
  uint64_t v95 = v64;
  unint64_t v96 = v65;
  swift_bridgeObjectRetain();
  v71._uint64_t countAndFlagsBits = v69;
  v71._unint64_t object = v70;
  String.append(_:)(v71);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v73 = v95;
  unint64_t v72 = v96;
  uint64_t v95 = 0;
  unint64_t v96 = 0xE000000000000000;
  LOBYTE(v92) = 10;
  _print_unlocked<A, B>(_:_:)();
  v74._uint64_t countAndFlagsBits = 8250;
  v74._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v74);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v1[OBJC_IVAR___SKRExecutionContextUpdate_undoDirectInvocation], v90, &demangling cache variable for type metadata for Parse.DirectInvocation?);
  v75._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v75);
  swift_bridgeObjectRelease();
  v76._uint64_t countAndFlagsBits = 8236;
  v76._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v76);
  uint64_t v77 = v95;
  os_log_type_t v78 = (void *)v96;
  uint64_t v95 = v73;
  unint64_t v96 = v72;
  swift_bridgeObjectRetain();
  v79._uint64_t countAndFlagsBits = v77;
  v79._unint64_t object = v78;
  String.append(_:)(v79);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v81 = v95;
  unint64_t v80 = v96;
  uint64_t v95 = 0;
  unint64_t v96 = 0xE000000000000000;
  LOBYTE(v92) = 12;
  _print_unlocked<A, B>(_:_:)();
  v82._uint64_t countAndFlagsBits = 8250;
  v82._unint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v82);
  uint64_t v83 = *(void *)&v1[OBJC_IVAR___SKRExecutionContextUpdate_restoreSessionForRequestId + 8];
  uint64_t v92 = *(void *)&v1[OBJC_IVAR___SKRExecutionContextUpdate_restoreSessionForRequestId];
  uint64_t v93 = v83;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  v84._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v84);
  swift_bridgeObjectRelease();
  uint64_t v85 = v95;
  unint64_t v86 = (void *)v96;
  uint64_t v95 = v81;
  unint64_t v96 = v80;
  swift_bridgeObjectRetain();
  v87._uint64_t countAndFlagsBits = v85;
  v87._unint64_t object = v86;
  String.append(_:)(v87);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v88._uint64_t countAndFlagsBits = 125;
  v88._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v88);
  swift_bridgeObjectRelease();
  return v95;
}

uint64_t ConversationOutputSubmitter.isMUXEnabled.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 72);
}

SiriKitRuntime::ExecutionContextUpdateScope __swiftcall ContextUpdateScope.toExecutionContextUpdateScope(isMUXEnabled:)(Swift::Bool isMUXEnabled)
{
  uint64_t updated = type metadata accessor for ContextUpdateScope();
  uint64_t v4 = *(void *)(updated - 8);
  MEMORY[0x1F4188790](updated);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!isMUXEnabled)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
    unint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      unint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v12 = 0;
      _os_log_impl(&dword_1B9C64000, v10, v11, "Forcing context update scope to be .global since MUX is not enabled", v12, 2u);
      MEMORY[0x1BA9E48C0](v12, -1, -1);
    }

    return 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v1, updated);
  int v7 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v6, updated);
  if (v7 == *MEMORY[0x1E4FA1C90]) {
    return 1;
  }
  if (v7 != *MEMORY[0x1E4FA1CA0])
  {
    if (v7 != *MEMORY[0x1E4FA1C98]) {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, updated);
    }
    return 0;
  }
  return 2;
}

uint64_t protocol witness for ContextUpdating.applyContextUpdate(_:metadata:scope:) in conformance MultiUserContextUpdater()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 240))();
}

uint64_t MultiUserContextUpdater.applyContextUpdate(_:metadata:scope:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v6 = v3;
  uint64_t v24 = a1;
  unint64_t v29 = MEMORY[0x1E4FBC868];
  uint64_t v25 = a2;
  unint64_t v26 = &v29;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t), unsigned char *))(*(void *)v3 + 280))(a3, a2 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId, partial apply for closure #1 in MultiUserContextUpdater.applyContextUpdate(_:metadata:scope:), v23);
  if (*(void *)(v7 + 16))
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      unint64_t v28 = v12;
      *(_DWORD *)os_log_type_t v11 = 136315138;
      uint64_t v13 = Dictionary.debugDescription.getter();
      uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, (uint64_t *)&v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v9, v10, "Error while dispatching context: %s", v11, 0xCu);
      swift_arrayDestroy();
      uint64_t v15 = v12;
      uint64_t v5 = v4;
      MEMORY[0x1BA9E48C0](v15, -1, -1);
      MEMORY[0x1BA9E48C0](v11, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v28 = v29;
    unint64_t v29 = 0x8000000000000000;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v7, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v28);
    if (v5)
    {
      unint64_t v29 = v28;
      uint64_t result = swift_bridgeObjectRelease();
      __break(1u);
      return result;
    }
    unint64_t v29 = v28;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, BOOL, void, void))(**(void **)(v6 + 232) + 168))(1, *(void *)(v29 + 16) != 0, *(void *)(v6 + 160), *(void *)(v6 + 168));
  if (!*(void *)(v29 + 16)) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v17 = swift_bridgeObjectRetain();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v17);
  id v18 = objc_allocWithZone(MEMORY[0x1E4F28C58]);
  Swift::String v19 = (void *)MEMORY[0x1BA9E2DD0](0x55747865746E6F43, 0xEE00726574616470);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v21 = objc_msgSend(v18, sel_initWithDomain_code_userInfo_, v19, -1, isa);
  swift_bridgeObjectRelease();

  if (!v21) {
    return swift_bridgeObjectRelease();
  }
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

unint64_t MultiUserContextUpdater.dispatch(forScope:currentUserId:applyContextTo:)(unsigned __int8 a1, uint64_t a2, void (*a3)(uint64_t))
{
  unint64_t v4 = MultiUserContextUpdater.contextUpdaters(forScope:currentUserId:)(a1, a2);
  unint64_t v5 = v4;
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6)
    {
LABEL_3:
      if (v6 >= 1)
      {
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v6; ++i)
        {
          if ((v5 & 0xC000000000000001) != 0)
          {
            uint64_t v8 = MEMORY[0x1BA9E3990](i, v5);
          }
          else
          {
            uint64_t v8 = *(void *)(v5 + 8 * i + 32);
            swift_retain();
          }
          a3(v8);
          swift_release();
        }
        swift_bridgeObjectRelease_n();
        uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
        goto LABEL_15;
      }
      __break(1u);
      goto LABEL_19;
    }
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for conversationBridge != -1) {
LABEL_19:
  }
    swift_once();
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
  os_log_type_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_1B9C64000, v11, v12, "ContextUpdater list was evaluated to be empty. Ignoring the context update.", v13, 2u);
    MEMORY[0x1BA9E48C0](v13, -1, -1);
  }

  uint64_t v9 = &outlined read-only object #0 of MultiUserContextUpdater.dispatch(forScope:currentUserId:applyContextTo:);
LABEL_15:

  return specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v9);
}

uint64_t MultiUserContextUpdater.contextUpdaters(forScope:currentUserId:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v52 = a2;
  uint64_t v5 = type metadata accessor for UserID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  unint64_t v51 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  unint64_t v50 = (char *)&v48 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v10 - 8);
  os_log_type_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationBridge);
  unint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v48 = v5;
    uint64_t v49 = v6;
    Swift::String v16 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    v54[0] = v17;
    *(_DWORD *)Swift::String v16 = 136315138;
    if (a1)
    {
      if (a1 == 1) {
        uint64_t v18 = 0x55746E6572727563;
      }
      else {
        uint64_t v18 = 0x72657355656D6F68;
      }
      if (a1 == 1) {
        unint64_t v19 = 0xEB00000000726573;
      }
      else {
        unint64_t v19 = 0xE900000000000073;
      }
    }
    else
    {
      unint64_t v19 = 0xE600000000000000;
      uint64_t v18 = 0x6C61626F6C67;
    }
    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v14, v15, "ContextUpdateScope received: %s", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v17, -1, -1);
    MEMORY[0x1BA9E48C0](v16, -1, -1);

    uint64_t v5 = v48;
    uint64_t v6 = v49;
    int v20 = a1;
    if (!a1) {
      goto LABEL_20;
    }
  }
  else
  {

    int v20 = a1;
    if (!a1)
    {
LABEL_20:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v12, 1, 1, v5);
      uint64_t v25 = MultiUserContextUpdater.contextUpdater(forUserId:)((uint64_t)v12);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for UserID?);
      if (v25) {
        goto LABEL_21;
      }
      unint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v44, v45))
      {
        Swift::String v46 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Swift::String v46 = 0;
        _os_log_impl(&dword_1B9C64000, v44, v45, "Could not find shared contextUpdater instance", v46, 2u);
        MEMORY[0x1BA9E48C0](v46, -1, -1);
      }

      return MEMORY[0x1E4FBC860];
    }
  }
  if (v20 == 1)
  {
    uint64_t v21 = v52;
    char v22 = specialized Set.contains(_:)(v52, *(void *)(v3 + 240));
    Swift::String v23 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    if (v22)
    {
      v23(v12, v21, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v12, 0, 1, v5);
      uint64_t v24 = v5;
      uint64_t v25 = MultiUserContextUpdater.contextUpdater(forUserId:)((uint64_t)v12);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for UserID?);
      if (v25)
      {
LABEL_21:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t v36 = swift_allocObject();
        *(_OWORD *)(v36 + 16) = xmmword_1BA0578E0;
        *(void *)(v36 + 32) = v25;
        v54[0] = v36;
        specialized Array._endMutation()();
        return v54[0];
      }
      unint64_t v26 = v50;
      v23(v50, v21, v24);
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.error.getter();
      uint64_t v29 = v24;
      if (os_log_type_enabled(v27, v28))
      {
        Swift::String v30 = (uint8_t *)swift_slowAlloc();
        uint64_t v31 = swift_slowAlloc();
        v54[0] = v31;
        *(_DWORD *)Swift::String v30 = 136315138;
        lazy protocol witness table accessor for type UserID and conformance UserID();
        uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v26, v29);
        _os_log_impl(&dword_1B9C64000, v27, v28, "Could not find ContextUpdater for userId: %s", v30, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v31, -1, -1);
        MEMORY[0x1BA9E48C0](v30, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v26, v24);
      }
    }
    else
    {
      uint64_t v37 = v51;
      v23(v51, v21, v5);
      Swift::String v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        Swift::String v40 = (uint8_t *)swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        v54[0] = v41;
        *(_DWORD *)Swift::String v40 = 136315138;
        lazy protocol witness table accessor for type UserID and conformance UserID();
        uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v37, v5);
        _os_log_impl(&dword_1B9C64000, v38, v39, "Current userID: %s does not match any of the userIds in the known userIdSet. This is unexpected!", v40, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v41, -1, -1);
        MEMORY[0x1BA9E48C0](v40, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v37, v5);
      }
    }
    return MEMORY[0x1E4FBC860];
  }
  swift_retain();
  uint64_t v34 = swift_bridgeObjectRetain();
  uint64_t v35 = specialized Sequence.compactMap<A>(_:)(v34, v3);
  swift_bridgeObjectRelease();
  swift_release();
  return v35;
}

uint64_t partial apply for closure #1 in MultiUserContextUpdater.applyContextUpdate(_:metadata:scope:)(uint64_t a1)
{
  return closure #1 in MultiUserContextUpdater.applyContextUpdate(_:metadata:scope:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint64_t **)(v1 + 32));
}

uint64_t closure #1 in MultiUserContextUpdater.applyContextUpdate(_:metadata:scope:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v8);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v20 = a2;
    os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    uint64_t v21 = v19;
    *(_DWORD *)os_log_type_t v12 = 136315138;
    (*(void (**)(void))(*(void *)a1 + 360))();
    uint64_t v13 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v10, v11, "Applying ContextUpdate for userId: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v19, -1, -1);
    os_log_type_t v15 = v12;
    a2 = v20;
    MEMORY[0x1BA9E48C0](v15, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 416))(a2, a3);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *a4;
  *a4 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v16, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v21);
  *a4 = v21;
  return swift_bridgeObjectRelease();
}

uint64_t ContextUpdater.applyContextUpdate(_:metadata:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v82);
  uint64_t v81 = (char *)v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Parse.DirectInvocation?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  os_log_type_t v78 = (char *)v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v74 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v86 = (uint64_t)v74 - v17;
  ContextUpdater.applySystemDialogActs(_:)(*(void *)(a1 + OBJC_IVAR___SKRExecutionContextUpdate_nluSystemDialogActs));
  ContextUpdater.applyNewTasks(_:)(*(void *)(a1 + OBJC_IVAR___SKRExecutionContextUpdate_nluActiveTasks));
  ContextUpdater.applyCompletedTasks(_:)(*(void *)(a1 + OBJC_IVAR___SKRExecutionContextUpdate_nluCompletedTasks));
  uint64_t v18 = *(void **)(a1 + OBJC_IVAR___SKRExecutionContextUpdate_nativeFlowContextCommand);
  uint64_t v84 = v11;
  unint64_t v80 = v16;
  if (v18)
  {
    id v19 = v18;
    objc_msgSend(v19, sel_copy);
    _bridgeAnyObjectToAny(_:)();

    swift_unknownObjectRelease();
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SARDNativeFlowContextUpdate);
    if (swift_dynamicCast()) {
      uint64_t v20 = (void *)v88;
    }
    else {
      uint64_t v20 = 0;
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  uint64_t v21 = *(uint64_t (**)(void))(*v3 + 504);
  id v85 = v20;
  uint64_t v22 = v21();
  uint64_t v23 = MEMORY[0x1E4FBC868];
  uint64_t v24 = &OBJC_METACLASS____TtC14SiriKitRuntime35ConversationBridgeProcessorDelegate;
  if (v22)
  {
    uint64_t v25 = (void *)v22;
    uint64_t v79 = v10;
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.conversationBridge);
    id v27 = v25;
    id v28 = v25;
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc();
      uint64_t v83 = a2;
      uint64_t v32 = (uint8_t *)v31;
      uint64_t v33 = swift_slowAlloc();
      v87[0] = v33;
      *(_DWORD *)uint64_t v32 = 136315138;
      uint64_t v77 = (v32 + 4);
      swift_getErrorValue();
      uint64_t v34 = Error.localizedDescription.getter();
      uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v29, v30, "Applied NativeFlowContext with error: %s", v32, 0xCu);
      swift_arrayDestroy();
      uint64_t v36 = v33;
      uint64_t v23 = MEMORY[0x1E4FBC868];
      MEMORY[0x1BA9E48C0](v36, -1, -1);
      uint64_t v37 = v32;
      a2 = v83;
      MEMORY[0x1BA9E48C0](v37, -1, -1);
    }
    else
    {
    }
    swift_getErrorValue();
    uint64_t v38 = Error.localizedDescription.getter();
    uint64_t v40 = v39;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v87[0] = v23;
    specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(v38, v40, 0xD000000000000024, 0x80000001BA060390, isUniquelyReferenced_nonNull_native);
    uint64_t v23 = v87[0];
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    uint64_t v24 = &OBJC_METACLASS____TtC14SiriKitRuntime35ConversationBridgeProcessorDelegate;
    uint64_t v10 = v79;
  }
  uint64_t v42 = v86;
  ContextUpdater.applyRREntities(_:)(*(void *)(a1 + OBJC_IVAR___SKRExecutionContextUpdate_rrEntities));
  outlined init with copy of ReferenceResolutionClientProtocol?(a1 + OBJC_IVAR___SKRExecutionContextUpdate_undoDirectInvocation, (uint64_t)v9, &demangling cache variable for type metadata for Parse.DirectInvocation?);
  uint64_t v43 = v84;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v84 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, &demangling cache variable for type metadata for Parse.DirectInvocation?);
  }
  else
  {
    uint64_t v76 = a1;
    uint64_t v79 = v23;
    uint64_t v83 = a2;
    (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v42, v9, v10);
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Logger.conversationBridge);
    os_log_type_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
    Swift::String v46 = v80;
    v45(v80, v42, v10);
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.debug.getter();
    uint64_t v77 = v47;
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      uint64_t v75 = swift_slowAlloc();
      v87[0] = v75;
      *(_DWORD *)uint64_t v49 = 136315138;
      v74[1] = v49 + 4;
      v45(v78, (uint64_t)v46, v10);
      uint64_t v50 = String.init<A>(describing:)();
      uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v52 = *(void (**)(char *, uint64_t))(v43 + 8);
      v52(v46, v10);
      uint64_t v53 = v77;
      _os_log_impl(&dword_1B9C64000, v77, v48, "Applying Corrections donation: %s", v49, 0xCu);
      uint64_t v54 = v75;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v54, -1, -1);
      Swift::String v55 = v49;
      uint64_t v24 = &OBJC_METACLASS____TtC14SiriKitRuntime35ConversationBridgeProcessorDelegate;
      MEMORY[0x1BA9E48C0](v55, -1, -1);
    }
    else
    {
      uint64_t v52 = *(void (**)(char *, uint64_t))(v43 + 8);
      v52(v46, v10);
    }
    a2 = v83;
    uint64_t v56 = v86;
    ContextUpdater.applyCorrectionsDonation(_:)(v86);
    v52((char *)v56, v10);
    uint64_t v23 = v79;
    a1 = v76;
  }
  ContextUpdater.applyPommesContext(_:)(a1 + OBJC_IVAR___SKRExecutionContextUpdate_pommesContext);
  unint64_t v57 = *(void *)(a1 + OBJC_IVAR___SKRExecutionContextUpdate_restoreSessionForRequestId + 8);
  if (v57)
  {
    uint64_t v58 = *(void *)(a1 + OBJC_IVAR___SKRExecutionContextUpdate_restoreSessionForRequestId);
    if (v24[92].vtable != (void *)-1) {
      swift_once();
    }
    uint64_t v59 = type metadata accessor for Logger();
    __swift_project_value_buffer(v59, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    Swift::String v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = swift_slowAlloc();
      uint64_t v86 = v58;
      Swift::String v63 = (uint8_t *)v62;
      uint64_t v64 = swift_slowAlloc();
      v87[0] = v64;
      *(_DWORD *)Swift::String v63 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v57, v87);
      uint64_t v24 = &OBJC_METACLASS____TtC14SiriKitRuntime35ConversationBridgeProcessorDelegate;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v60, v61, "Restoring session snapshot to the past request %s. All past and future context updates for this request will be ignored.", v63, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v64, -1, -1);
      unint64_t v65 = v63;
      uint64_t v58 = v86;
      MEMORY[0x1BA9E48C0](v65, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v3[35] = v58;
    v3[36] = v57;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  ContextUpdater.flushSessionStateUpdates(metadata:)(a2);
  if (v24[92].vtable != (void *)-1) {
    swift_once();
  }
  uint64_t v66 = type metadata accessor for Logger();
  __swift_project_value_buffer(v66, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  Swift::String v67 = Logger.logObject.getter();
  os_log_type_t v68 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v67, v68))
  {
    uint64_t v69 = (uint8_t *)swift_slowAlloc();
    uint64_t v70 = swift_slowAlloc();
    v87[0] = v70;
    *(_DWORD *)uint64_t v69 = 136315138;
    (*(void (**)(void))(*v3 + 360))();
    uint64_t v71 = String.init<A>(describing:)();
    uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v67, v68, "Done applying context for userId: %s", v69, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v70, -1, -1);
    MEMORY[0x1BA9E48C0](v69, -1, -1);
  }
  else
  {

    swift_release_n();
  }

  return v23;
}

void SessionStateContextKeysManager.removeKeyIfNotUpdated(_:)()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + 16) + 16);
  os_unfair_lock_lock(v1);
  closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply(v2);
  os_unfair_lock_unlock(v1);
}

void partial apply for closure #1 in SessionStateContextKeysManager.removeKeyIfNotUpdated(_:)()
{
  closure #1 in SessionStateContextKeysManager.removeKeyIfNotUpdated(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void closure #1 in SessionStateContextKeysManager.removeKeyIfNotUpdated(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for ConversationSessionKey();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)&v39 - v11;
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v39 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v44 = (char *)&v39 - v16;
  swift_beginAccess();
  uint64_t v17 = *(void *)(a1 + 24);
  if (*(void *)(v17 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v19)
    {
      outlined init with copy of Any(*(void *)(v17 + 56) + 32 * v18, (uint64_t)&v45);
    }
    else
    {
      long long v45 = 0u;
      long long v46 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v46 + 1))
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v45, &demangling cache variable for type metadata for Sendable?);
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
      uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      v21(v9, a2, v5);
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        uint64_t v42 = swift_slowAlloc();
        *(void *)&long long v45 = v42;
        uint64_t v43 = v2;
        *(_DWORD *)uint64_t v24 = 136315138;
        uint64_t v40 = (void (*)(char *, uint64_t))(v24 + 4);
        uint64_t v41 = v24;
        v21(v44, (uint64_t)v9, v5);
        uint64_t v25 = String.init<A>(describing:)();
        uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, (uint64_t *)&v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
        id v27 = v41;
        _os_log_impl(&dword_1B9C64000, v22, v23, "Not deleting key: %s because it is already updated in the current request", v41, 0xCu);
        uint64_t v28 = v42;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v28, -1, -1);
        MEMORY[0x1BA9E48C0](v27, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      }
      goto LABEL_17;
    }
  }
  else
  {
    long long v45 = 0u;
    long long v46 = 0u;
  }
  uint64_t v43 = v2;
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v45, &demangling cache variable for type metadata for Sendable?);
  uint64_t v29 = v6;
  os_log_type_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v30(v15, a2, v5);
  swift_beginAccess();
  uint64_t v31 = (uint64_t)v44;
  specialized Set._Variant.insert(_:)((uint64_t)v44, v15);
  uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  uint64_t v42 = v29 + 8;
  v32(v31, v5);
  swift_endAccess();
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  __swift_project_value_buffer(v33, (uint64_t)static Logger.conversationBridge);
  v30(v12, a2, v5);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v34))
  {
    unint64_t v35 = (uint8_t *)swift_slowAlloc();
    uint64_t v41 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v45 = v41;
    uint64_t v40 = (void (*)(char *, uint64_t))v32;
    *(_DWORD *)unint64_t v35 = 136315138;
    uint64_t v39 = v35 + 4;
    v30(v44, (uint64_t)v12, v5);
    uint64_t v36 = String.init<A>(describing:)();
    uint64_t v47 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, (uint64_t *)&v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v40(v12, v5);
    _os_log_impl(&dword_1B9C64000, v22, v34, "StateKey: \"%s\" marked for removal from SessionState", v35, 0xCu);
    uint64_t v38 = v41;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v38, -1, -1);
    MEMORY[0x1BA9E48C0](v35, -1, -1);
  }
  else
  {
    v32((uint64_t)v12, v5);
  }
LABEL_17:
}

uint64_t lazy protocol witness table accessor for type Input and conformance Input(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s11SiriKitFlow5InputVACs23CustomStringConvertibleAAWlTm_0(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Input and conformance Input()
{
  unint64_t result = lazy protocol witness table cache variable for type Input and conformance Input;
  if (!lazy protocol witness table cache variable for type Input and conformance Input)
  {
    type metadata accessor for Input();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Input and conformance Input(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Input();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ContextUpdater.applyNativeFlowContext(_:emptyServerContext:)(id a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
  {
    if (a1)
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationBridge);
      swift_retain_n();
      char v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v19, v20))
      {
        unint64_t v57 = v8;
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        uint64_t v22 = swift_slowAlloc();
        v59[0] = v22;
        *(_DWORD *)uint64_t v21 = 136315138;
        os_log_type_t v23 = (void *)(*(uint64_t (**)(void))(*v3 + 264))();
        if (v23)
        {
          uint64_t v24 = v23;
          id v25 = objc_msgSend(v23, sel_debugDescription);

          uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v28 = v27;
        }
        else
        {
          unint64_t v28 = 0xE300000000000000;
          uint64_t v26 = 7104878;
        }
        uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v19, v20, "Current NFCU cache is %s, Updating NativeFlowContextCommand cache with new one", v21, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v22, -1, -1);
        MEMORY[0x1BA9E48C0](v21, -1, -1);

        uint64_t v8 = v57;
      }
      else
      {

        swift_release_n();
      }
      goto LABEL_33;
    }
LABEL_14:
    uint64_t v29 = (void *)(*(uint64_t (**)(uint64_t))(*v3 + 264))(v10);

    if (v29)
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      __swift_project_value_buffer(v30, (uint64_t)static Logger.conversationBridge);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v31, v32)) {
        goto LABEL_25;
      }
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      os_log_type_t v34 = "Received nil nativeFlowContextCommand from execution, but previously cached nativeFlowContextCommand during "
            "this request is not nil. Ignoring this update";
    }
    else
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v35 = type metadata accessor for Logger();
      __swift_project_value_buffer(v35, (uint64_t)static Logger.conversationBridge);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v31, v32)) {
        goto LABEL_25;
      }
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      os_log_type_t v34 = "Both nativeFlowContextCommand cached as well as received from Execution are nil.";
    }
    _os_log_impl(&dword_1B9C64000, v31, v32, v34, v33, 2u);
    MEMORY[0x1BA9E48C0](v33, -1, -1);
LABEL_25:

    goto LABEL_37;
  }
  if (!a1) {
    goto LABEL_14;
  }
  uint64_t v13 = (void *)(*(uint64_t (**)(uint64_t))(*v3 + 264))(v10);

  if (v13)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_1B9C64000, v15, v16, "Not applying an empty nativeFlowContextCommand since we already have a non-nil cached one", v17, 2u);
      MEMORY[0x1BA9E48C0](v17, -1, -1);
    }
    goto LABEL_34;
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v36 = type metadata accessor for Logger();
  __swift_project_value_buffer(v36, (uint64_t)static Logger.conversationBridge);
  unint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v39 = 0;
    _os_log_impl(&dword_1B9C64000, v37, v38, "Applying an empty nativeFlowContextCommand", v39, 2u);
    MEMORY[0x1BA9E48C0](v39, -1, -1);
  }

LABEL_33:
  swift_beginAccess();
  uint64_t v15 = v3[32];
  v3[32] = a1;
  a1 = a1;
LABEL_34:

  id v40 = a1;
  id v41 = objc_msgSend(v40, sel_promptContextProto);
  if (v41)
  {
    uint64_t v42 = v41;
    uint64_t v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v45 = v44;

    outlined copy of Data._Representation(v43, v45);
    uint64_t v46 = ContextUpdater.applyPromptContextProtoData(_:)((uint64_t)v12, v43, v45);

    outlined consume of Data._Representation(v43, v45);
    outlined consume of Data._Representation(v43, v45);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
    return v46;
  }

LABEL_37:
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v47 = type metadata accessor for Logger();
  __swift_project_value_buffer(v47, (uint64_t)static Logger.conversationBridge);
  os_log_type_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v50 = 0;
    _os_log_impl(&dword_1B9C64000, v48, v49, "Either NativeFlowContextUpdate or PromptContextProtoData is nil", v50, 2u);
    MEMORY[0x1BA9E48C0](v50, -1, -1);
  }

  unint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v53 = 0;
    _os_log_impl(&dword_1B9C64000, v51, v52, "PromptContextProtoData is nil", v53, 2u);
    MEMORY[0x1BA9E48C0](v53, -1, -1);
  }

  uint64_t v54 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v8, 1, 1, v54);
  ContextUpdater.applyLegacyNLContext(_:)((uint64_t)v8);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  return 0;
}

void *ContextUpdater.finalNativeFlowContextCommand.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 256);
  id v2 = v1;
  return v1;
}

uint64_t ContextUpdater.applyLegacyNLContext(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ConversationSessionKey();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  os_log_type_t v32 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v31 - v14;
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
    uint64_t v16 = *(void *)(v1 + 232);
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FA2640], v3);
    (*(void (**)(char *))(*(void *)v16 + 160))(v6);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v15, v9, v10);
    uint64_t v17 = *(void *)(v1 + 232);
    v34[3] = v10;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v34);
    char v19 = *(void (**)(uint64_t *, char *, uint64_t))(v11 + 16);
    v19(boxed_opaque_existential_0, v15, v10);
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FA2640], v3);
    (*(void (**)(uint64_t *, char *))(*(void *)v17 + 152))(v34, v6);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v34);
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
    uint64_t v21 = v32;
    v19((uint64_t *)v32, v15, v10);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      v34[0] = v25;
      *(_DWORD *)uint64_t v24 = 136315138;
      v31[1] = v24 + 4;
      lazy protocol witness table accessor for type RequestType and conformance RequestType((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_LegacyNLContext and conformance Siri_Nlu_External_LegacyNLContext, MEMORY[0x1E4FA28F0]);
      uint64_t v26 = Message.debugDescription.getter();
      uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v28 = *(void (**)(char *, uint64_t))(v11 + 8);
      v28(v21, v10);
      _os_log_impl(&dword_1B9C64000, v22, v23, "Applied LegacyNLContext: %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v25, -1, -1);
      MEMORY[0x1BA9E48C0](v24, -1, -1);

      v28(v15, v10);
    }
    else
    {

      uint64_t v29 = *(void (**)(char *, uint64_t))(v11 + 8);
      v29(v21, v10);
      v29(v15, v10);
    }
  }
  return 0;
}

uint64_t ContextUpdater.applyPommesContext(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ConversationSessionKey();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PommesContext();
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v53 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v51 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v51 - v17;
  uint64_t v19 = a1;
  uint64_t v21 = v20;
  outlined init with copy of ReferenceResolutionClientProtocol?(v19, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
    uint64_t v22 = *(void *)(v2 + 232);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FA2628], v4);
    (*(void (**)(char *))(*(void *)v22 + 160))(v7);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationBridge);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl(&dword_1B9C64000, v24, v25, "No PommesContext found", v26, 2u);
      MEMORY[0x1BA9E48C0](v26, -1, -1);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v10, v11);
    Swift::Bool v27 = PommesContext.isWithinMaxSize()();
    uint64_t v28 = v21;
    uint64_t v29 = *(void *)(v2 + 232);
    uint64_t v30 = v18;
    if (v27)
    {
      v55[3] = v11;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v55);
      uint64_t v51 = v28;
      os_log_type_t v32 = *(void (**)(uint64_t *, char *, uint64_t))(v28 + 16);
      v32(boxed_opaque_existential_0, v18, v11);
      (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FA2628], v4);
      (*(void (**)(uint64_t *, char *))(*(void *)v29 + 152))(v55, v7);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v55);
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      __swift_project_value_buffer(v33, (uint64_t)static Logger.conversationBridge);
      os_log_type_t v34 = v53;
      v32((uint64_t *)v53, v18, v11);
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v35, v36))
      {
        unint64_t v37 = (uint8_t *)swift_slowAlloc();
        uint64_t v38 = swift_slowAlloc();
        v55[0] = v38;
        *(_DWORD *)unint64_t v37 = 136315138;
        os_log_type_t v52 = v18;
        uint64_t v39 = PommesContext.description.getter();
        uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        id v41 = *(void (**)(char *, uint64_t))(v51 + 8);
        v41(v34, v11);
        _os_log_impl(&dword_1B9C64000, v35, v36, "Applied PommesContext: %s", v37, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v38, -1, -1);
        MEMORY[0x1BA9E48C0](v37, -1, -1);

        uint64_t v42 = v52;
      }
      else
      {

        id v41 = *(void (**)(char *, uint64_t))(v51 + 8);
        v41(v34, v11);
        uint64_t v42 = v30;
      }
      v41(v42, v11);
    }
    else
    {
      (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FA2628], v4);
      (*(void (**)(char *))(*(void *)v29 + 160))(v7);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v43 = type metadata accessor for Logger();
      __swift_project_value_buffer(v43, (uint64_t)static Logger.conversationBridge);
      unint64_t v44 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
      os_log_type_t v52 = v18;
      v44(v16, v18, v11);
      unint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v47 = 134217984;
        uint64_t v53 = (char *)(v47 + 4);
        Swift::Int v48 = PommesContext.contextSize()();
        os_log_type_t v49 = *(void (**)(char *, uint64_t))(v28 + 8);
        v49(v16, v11);
        v55[0] = v48;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B9C64000, v45, v46, "Not updating PommesContext (size: %ld because it is larger than the max allowed size", v47, 0xCu);
        MEMORY[0x1BA9E48C0](v47, -1, -1);
      }
      else
      {
        os_log_type_t v49 = *(void (**)(char *, uint64_t))(v28 + 8);
        v49(v16, v11);
      }

      v49(v52, v11);
    }
  }
  return 0;
}

uint64_t ContextUpdater.flushSessionStateUpdates(metadata:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ConversationSessionKey();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)v94 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: ConversationSessionKey, value: Any?)?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v94 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (void *)v1[36];
  if (!v20)
  {
    unint64_t v96 = (char *)v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v97 = v18;
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    uint64_t v29 = __swift_project_value_buffer(v28, (uint64_t)static Logger.conversationBridge);
    swift_retain_n();
    swift_retain_n();
    v94[1] = v29;
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    uint64_t v98 = v2;
    uint64_t v110 = v4;
    uint64_t v106 = v5;
    uint64_t v95 = v8;
    if (v32)
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v109 = swift_slowAlloc();
      *(void *)&long long v114 = v109;
      *(_DWORD *)uint64_t v33 = 136315394;
      os_log_type_t v34 = *(void (**)(void))(*v98 + 360);
      uint64_t v108 = (uint64_t)v30;
      v34();
      uint64_t v35 = String.init<A>(describing:)();
      v113[0]._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, (uint64_t *)&v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v33 + 12) = 2080;
      swift_retain();
      uint64_t updated = ConversationContextUpdateMetadata.description.getter();
      os_log_type_t v38 = v31;
      unint64_t v40 = v39;
      swift_release();
      v113[0]._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(updated, v40, (uint64_t *)&v114);
      uint64_t v5 = v106;
      uint64_t v2 = v98;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      id v41 = (void *)v108;
      _os_log_impl(&dword_1B9C64000, (os_log_t)v108, v38, "Flushing all context updates to SessionState for userId: %s. metadata: %s", (uint8_t *)v33, 0x16u);
      uint64_t v42 = v109;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v42, -1, -1);
      uint64_t v43 = v33;
      uint64_t v4 = v110;
      MEMORY[0x1BA9E48C0](v43, -1, -1);
    }
    else
    {

      swift_release_n();
      swift_release_n();
    }
    uint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)v2[29] + 176))(a1);
    ContextUpdater.updateSessionState(withData:)();
    uint64_t v118 = 0;
    unint64_t v119 = 0xE000000000000000;
    uint64_t v46 = *(void *)(v45 + 64);
    uint64_t v99 = v45 + 64;
    uint64_t v47 = 1 << *(unsigned char *)(v45 + 32);
    uint64_t v48 = -1;
    if (v47 < 64) {
      uint64_t v48 = ~(-1 << v47);
    }
    unint64_t v49 = v48 & v46;
    uint64_t v116 = 0;
    unint64_t v117 = 0xE000000000000000;
    uint64_t v103 = v5 + 16;
    uint64_t v2 = (void *)(v5 + 32);
    uint64_t v107 = (void (**)(char *, uint64_t))(v5 + 8);
    int64_t v101 = (unint64_t)(v47 + 63) >> 6;
    v94[0] = v101 - 1;
    uint64_t v105 = v45;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v108 = 0;
    uint64_t v102 = 0;
    uint64_t v109 = 0;
    uint64_t v21 = &demangling cache variable for type metadata for (key: ConversationSessionKey, value: Any?);
    uint64_t v100 = MEMORY[0x1E4FBC840] + 8;
    uint64_t v20 = (void *)0xE000000000000000;
    unint64_t v50 = 0xE000000000000000;
    uint64_t v51 = &v121;
LABEL_45:
    *(v51 - 32) = v50;
    while (!v49)
    {
      int64_t v58 = v109 + 1;
      if (__OFADD__(v109, 1))
      {
        __break(1u);
        goto LABEL_54;
      }
      if (v58 < v101)
      {
        unint64_t v59 = *(void *)(v99 + 8 * v58);
        if (v59) {
          goto LABEL_22;
        }
        uint64_t v60 = v109 + 2;
        ++v109;
        if (v58 + 1 < v101)
        {
          unint64_t v59 = *(void *)(v99 + 8 * v60);
          if (v59) {
            goto LABEL_25;
          }
          uint64_t v109 = v58 + 1;
          if (v58 + 2 < v101)
          {
            unint64_t v59 = *(void *)(v99 + 8 * (v58 + 2));
            if (v59)
            {
              v58 += 2;
              goto LABEL_22;
            }
            uint64_t v109 = v58 + 2;
            if (v58 + 3 < v101)
            {
              unint64_t v59 = *(void *)(v99 + 8 * (v58 + 3));
              if (v59)
              {
                v58 += 3;
                goto LABEL_22;
              }
              uint64_t v60 = v58 + 4;
              uint64_t v109 = v58 + 3;
              if (v58 + 4 < v101)
              {
                unint64_t v59 = *(void *)(v99 + 8 * v60);
                if (!v59)
                {
                  while (1)
                  {
                    int64_t v58 = v60 + 1;
                    if (__OFADD__(v60, 1)) {
                      break;
                    }
                    if (v58 >= v101)
                    {
                      uint64_t v109 = v94[0];
                      goto LABEL_39;
                    }
                    unint64_t v59 = *(void *)(v99 + 8 * v58);
                    ++v60;
                    if (v59) {
                      goto LABEL_22;
                    }
                  }
                  __break(1u);
                  return result;
                }
LABEL_25:
                int64_t v58 = v60;
LABEL_22:
                unint64_t v49 = (v59 - 1) & v59;
                unint64_t v54 = __clz(__rbit64(v59)) + (v58 << 6);
                uint64_t v109 = v58;
LABEL_18:
                uint64_t v55 = v105;
                (*(void (**)(char *, unint64_t, uint64_t))(v106 + 16))(v14, *(void *)(v105 + 48) + *(void *)(v106 + 72) * v54, v4);
                uint64_t v56 = *(void *)(v55 + 56) + 32 * v54;
                uint64_t v21 = &demangling cache variable for type metadata for (key: ConversationSessionKey, value: Any?);
                uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: ConversationSessionKey, value: Any?));
                outlined init with copy of ReferenceResolutionClientProtocol?(v56, (uint64_t)&v14[*(int *)(v57 + 48)], (uint64_t *)&demangling cache variable for type metadata for Any?);
                (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v14, 0, 1, v57);
                goto LABEL_40;
              }
            }
          }
        }
      }
LABEL_39:
      uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: ConversationSessionKey, value: Any?));
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56))(v14, 1, 1, v61);
      unint64_t v49 = 0;
LABEL_40:
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v14, (uint64_t)v16, &demangling cache variable for type metadata for (key: ConversationSessionKey, value: Any?)?);
      uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: ConversationSessionKey, value: Any?));
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v62 - 8) + 48))(v16, 1, v62) == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v68 = v118;
        unint64_t v67 = v119;
        uint64_t v69 = v116;
        unint64_t v70 = v117;
        uint64_t v71 = v98;
        swift_retain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v72 = Logger.logObject.getter();
        os_log_type_t v73 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v72, v73))
        {
          uint64_t v74 = swift_slowAlloc();
          uint64_t v109 = swift_slowAlloc();
          *(void *)&long long v114 = v109;
          *(_DWORD *)uint64_t v74 = 136315906;
          swift_bridgeObjectRetain();
          v113[0]._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v67, (uint64_t *)&v114);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v74 + 12) = 2080;
          swift_bridgeObjectRetain();
          v113[0]._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, (uint64_t *)&v114);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v74 + 22) = 2080;
          uint64_t v75 = v71[18];
          unint64_t v76 = v71[19];
          swift_bridgeObjectRetain();
          v113[0]._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, (uint64_t *)&v114);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          uint64_t v77 = swift_bridgeObjectRelease();
          *(_WORD *)(v74 + 32) = 2080;
          (*(void (**)(uint64_t))(*v71 + 360))(v77);
          uint64_t v78 = String.init<A>(describing:)();
          v113[0]._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, (uint64_t *)&v114);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v72, v73, "Flushed keysToAdd: [%s] and keysToRemove: [%s] for assistantId: %s, userId: %s", (uint8_t *)v74, 0x2Au);
          uint64_t v80 = v109;
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v80, -1, -1);
          MEMORY[0x1BA9E48C0](v74, -1, -1);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();

          swift_release_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        uint64_t v81 = v106;
        uint64_t v82 = (*(uint64_t (**)(void))(*v71 + 264))();
        uint64_t v83 = v110;
        if (v82)
        {
          uint64_t v84 = v82;
          *((void *)&v115 + 1) = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SARDNativeFlowContextUpdate);
          *(void *)&long long v114 = v84;
        }
        else
        {
          long long v114 = 0u;
          long long v115 = 0u;
        }
        id v85 = *(void (**)(char *, void, uint64_t))(v81 + 104);
        uint64_t v86 = v95;
        v85(v95, *MEMORY[0x1E4FA2658], v83);
        ContextUpdater.updateSessionState(withValue:forKey:)();
        Swift::String v87 = *(void (**)(char *, uint64_t))(v81 + 8);
        v87(v86, v83);
        uint64_t v88 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v114, (uint64_t *)&demangling cache variable for type metadata for Any?);
        uint64_t v89 = (*(uint64_t (**)(uint64_t))(*v71 + 288))(v88);
        uint64_t v90 = (*(uint64_t (**)(void))(*v71 + 312))();
        uint64_t v91 = v83;
        uint64_t v92 = type metadata accessor for AnnounceContext();
        uint64_t v93 = swift_allocObject();
        *(void *)(v93 + 16) = v89;
        *(void *)(v93 + 24) = v90;
        *((void *)&v115 + 1) = v92;
        *(void *)&long long v114 = v93;
        v85(v86, *MEMORY[0x1E4FA2638], v91);
        ContextUpdater.updateSessionState(withValue:forKey:)();
        v87(v86, v91);
        return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v114, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      uint64_t v63 = (uint64_t)&v16[*(int *)(v62 + 48)];
      uint64_t v4 = v110;
      ((void (*)(char *, char *, uint64_t))*v2)(v10, v16, v110);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v63, (uint64_t)&v114, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (*((void *)&v115 + 1))
      {
        outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v114, (uint64_t)&v111, (uint64_t *)&demangling cache variable for type metadata for Any?);
        if (v112)
        {
          outlined init with take of Any(&v111, v113);
          v111._uint64_t countAndFlagsBits = 0;
          v111._unint64_t object = (void *)0xE000000000000000;
          v64._uint64_t countAndFlagsBits = v102;
          v64._unint64_t object = v104;
          String.append(_:)(v64);
          swift_bridgeObjectRelease();
          v65._uint64_t countAndFlagsBits = ConversationSessionKey.rawValue.getter();
          String.append(_:)(v65);
          uint64_t v21 = &demangling cache variable for type metadata for (key: ConversationSessionKey, value: Any?);
          swift_bridgeObjectRelease();
          unint64_t v104 = (void *)0xE200000000000000;
          v66._uint64_t countAndFlagsBits = 8250;
          v66._unint64_t object = (void *)0xE200000000000000;
          String.append(_:)(v66);
          _print_unlocked<A, B>(_:_:)();
          String.append(_:)(v111);
          uint64_t v4 = v110;
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v113);
          (*v107)(v10, v4);
          uint64_t result = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v114, (uint64_t *)&demangling cache variable for type metadata for Any?);
          unint64_t v50 = 8236;
          uint64_t v51 = &v120;
          goto LABEL_45;
        }
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v111, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      v113[0]._uint64_t countAndFlagsBits = v108;
      v113[0]._unint64_t object = v20;
      v52._uint64_t countAndFlagsBits = ConversationSessionKey.rawValue.getter();
      String.append(_:)(v52);
      swift_bridgeObjectRelease();
      String.append(_:)(v113[0]);
      swift_bridgeObjectRelease();
      (*v107)(v10, v4);
      uint64_t result = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v114, (uint64_t *)&demangling cache variable for type metadata for Any?);
      uint64_t v20 = (void *)0xE200000000000000;
      uint64_t v108 = 8236;
    }
    unint64_t v53 = __clz(__rbit64(v49));
    v49 &= v49 - 1;
    unint64_t v54 = v53 | (v109 << 6);
    goto LABEL_18;
  }
  uint64_t v21 = (uint64_t *)v1[35];
  uint64_t v22 = one-time initialization token for conversationBridge;
  swift_bridgeObjectRetain();
  if (v22 != -1) {
LABEL_54:
  }
    swift_once();
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(void *)&long long v114 = v27;
    *(_DWORD *)uint64_t v26 = 136315138;
    swift_bridgeObjectRetain();
    v113[0]._uint64_t countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v21, (unint64_t)v20, (uint64_t *)&v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v24, v25, "Not flushing state since snapshot from request %s was requested.", v26, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v27, -1, -1);
    MEMORY[0x1BA9E48C0](v26, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  __swift_project_boxed_opaque_existential_1(v2 + 2, v2[5]);
  dispatch thunk of ConversationSessionState.restoreSnapshot(requestId:)();
  return swift_bridgeObjectRelease();
}

uint64_t ConversationContextUpdateMetadata.description.getter()
{
  _StringGuts.grow(_:)(136);
  v1._unint64_t object = (void *)0x80000001BA065560;
  v1._uint64_t countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v1);
  if (*(unsigned char *)(v0 + 16)) {
    uint64_t v2 = 1702195828;
  }
  else {
    uint64_t v2 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 16)) {
    unint64_t v3 = 0xE400000000000000;
  }
  else {
    unint64_t v3 = 0xE500000000000000;
  }
  unint64_t v4 = v3;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x736575716572202CLL;
  v5._unint64_t object = (void *)0xEF203A6570795474;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = RequestType.rawValue.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = 0xD000000000000012;
  v7._unint64_t object = (void *)0x80000001BA065580;
  String.append(_:)(v7);
  id v8 = *(id *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowPluginInfo?);
  v9._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 0xD000000000000011;
  v10._unint64_t object = (void *)0x80000001BA0655A0;
  String.append(_:)(v10);
  type metadata accessor for UserID();
  lazy protocol witness table accessor for type UserID and conformance UserID();
  v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._unint64_t object = (void *)0x80000001BA0655C0;
  v12._uint64_t countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v12);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext)) {
    uint64_t v13 = 1702195828;
  }
  else {
    uint64_t v13 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext)) {
    unint64_t v14 = 0xE400000000000000;
  }
  else {
    unint64_t v14 = 0xE500000000000000;
  }
  unint64_t v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
  v16._unint64_t object = (void *)0x80000001BA0655E0;
  String.append(_:)(v16);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_meetsUserSessionThreshold)) {
    uint64_t v17 = 1702195828;
  }
  else {
    uint64_t v17 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_meetsUserSessionThreshold)) {
    unint64_t v18 = 0xE400000000000000;
  }
  else {
    unint64_t v18 = 0xE500000000000000;
  }
  unint64_t v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 93;
  v20._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  return 0;
}

uint64_t SessionStateContextKeysManager.provideKeysToFlush(metadata:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1F4188790](v4 - 8);
  Swift::String v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1F4188790](v7 - 8);
  Swift::String v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for RequestType();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(unsigned char *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E4FA2438], v10);
  lazy protocol witness table accessor for type RequestType and conformance RequestType((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, MEMORY[0x1E4FA2460]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v37[0] == v35 && v37[1] == v36)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v14 = (*(uint64_t (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = (*(uint64_t (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v10);
    if ((v15 & 1) == 0) {
      goto LABEL_9;
    }
  }
  if (!*(void *)(a1 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo))
  {
LABEL_9:
    if (*(unsigned char *)(a1 + 16) == 1)
    {
      type metadata accessor for ServerFallbackDisablingUtils();
      uint64_t inited = (void *)swift_initStackObject();
      inited[2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
      inited[3] = closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:);
      inited[4] = 0;
      uint64_t v21 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v9, 1, 1, v21);
      uint64_t v22 = type metadata accessor for ServerFallbackReason();
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v6, 1, 1, v22);
      unsigned __int8 v23 = specialized ServerFallbackDisablingUtils.shouldDisableServerFallbackWithABDecision(isDomainDirected:topNlParse:serverFallbackReason:)(0, (uint64_t)v9, (uint64_t)v6);
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for ServerFallbackReason?);
      uint64_t v24 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
      if ((v23 & 1) == 0)
      {
        MEMORY[0x1F4188790](v24);
        v34[-2] = partial apply for closure #1 in SessionStateContextKeysManager.provideKeysToFlushForServerFallbackRequest();
        v34[-1] = v2;
        uint64_t v30 = v31 + 4;
        os_unfair_lock_lock(v31 + 4);
        partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v37);
        goto LABEL_19;
      }
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationBridge);
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v28 = 0;
        _os_log_impl(&dword_1B9C64000, v26, v27, "Not flushing local context for server fallback request: Server fallback is disabled.", v28, 2u);
        MEMORY[0x1BA9E48C0](v28, -1, -1);
      }
    }
    MEMORY[0x1F4188790](v14);
    v34[-2] = partial apply for closure #1 in SessionStateContextKeysManager.provideKeysToFlushForOnDeviceRequest();
    v34[-1] = v2;
    uint64_t v30 = v29 + 4;
    os_unfair_lock_lock(v29 + 4);
    partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v37);
LABEL_19:
    unint64_t v19 = v30;
    goto LABEL_20;
  }
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = v16 + 4;
  if (v18 == 1) {
    v34[-2] = partial apply for closure #1 in SessionStateContextKeysManager.provideKeysToFlushForOnDeviceRequest();
  }
  else {
    v34[-2] = partial apply for closure #1 in SessionStateContextKeysManager.provideKeysToFlushForServerFallbackRequest();
  }
  v34[-1] = v1;
  os_unfair_lock_lock(v16 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v37);
  unint64_t v19 = v17;
LABEL_20:
  os_unfair_lock_unlock(v19);
  uint64_t v32 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v37[0]);
  swift_bridgeObjectRelease();
  return v32;
}

unint64_t lazy protocol witness table accessor for type RequestType and conformance RequestType()
{
  unint64_t result = lazy protocol witness table cache variable for type RequestType and conformance RequestType;
  if (!lazy protocol witness table cache variable for type RequestType and conformance RequestType)
  {
    type metadata accessor for RequestType();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type RequestType and conformance RequestType(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s16SiriMessageTypes11RequestTypeOACSYAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ContextUpdater.updateSessionState(withData:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v1 - 8);
  unint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UserID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*v0 + 360))(v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
    return dispatch thunk of ConversationSessionState.updateSharedValues(data:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v3, v4);
    __swift_project_boxed_opaque_existential_1(v0 + 2, v0[5]);
    dispatch thunk of ConversationSessionState.updateValues(data:userId:)();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_AsrHypothesis>, MEMORY[0x1E4FA2818], MEMORY[0x1E4FA2818]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, MEMORY[0x1E4F27990], MEMORY[0x1E4F27990]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_Task>, MEMORY[0x1E4FA2760], MEMORY[0x1E4FA2760]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<StubCamBridge.RankCallArgs>, (uint64_t (*)(void))type metadata accessor for StubCamBridge.RankCallArgs, (uint64_t (*)(void))type metadata accessor for StubCamBridge.RankCallArgs);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CamParse>, MEMORY[0x1E4F9FA58], MEMORY[0x1E4F9FA58]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RRDataSourceMetadataValue>, MEMORY[0x1E4FA3DE8], MEMORY[0x1E4FA3DE8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_AsrTokenInformation>, MEMORY[0x1E4FA2958], MEMORY[0x1E4FA2958]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserDialogAct>, MEMORY[0x1E4FA2858], MEMORY[0x1E4FA2858]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<USOParse>, MEMORY[0x1E4FA1F80], MEMORY[0x1E4FA1F80]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<IntentTopic>, MEMORY[0x1E4FA1AB0], MEMORY[0x1E4FA1AB0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RREntity>, MEMORY[0x1E4FA3E10], MEMORY[0x1E4FA3E10]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(topAction: RankedAction, alternativeParses: [CamParse])>, (uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CamFeature>, MEMORY[0x1E4F9FA98], MEMORY[0x1E4F9FA98]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>, MEMORY[0x1E4FA2910], MEMORY[0x1E4FA2910]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Parse>, MEMORY[0x1E4FA1F68], MEMORY[0x1E4FA1F68]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(UUID, Parse)>, &demangling cache variable for type metadata for (UUID, Parse));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<IdentifiedUser>, MEMORY[0x1E4FA1BD8], MEMORY[0x1E4FA1BD8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RRCandidate>, MEMORY[0x1E4FA3DB8], MEMORY[0x1E4FA3DB8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PluginAction>, MEMORY[0x1E4FA1B58], MEMORY[0x1E4FA1B58]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_DelegatedUserDialogAct>, MEMORY[0x1E4FA2990], MEMORY[0x1E4FA2990]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CorrectionsActionOutcome>, MEMORY[0x1E4FA1E20], MEMORY[0x1E4FA1E20]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UsoIdentifier>, MEMORY[0x1E4FA2CF0], MEMORY[0x1E4FA2CF0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler)>, &demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(uuid: UUID, actionCandidate: ActionCandidate)>, (uint64_t *)&demangling cache variable for type metadata for (uuid: UUID, actionCandidate: ActionCandidate));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UsoEntitySpan>, MEMORY[0x1E4FA2CA0], MEMORY[0x1E4FA2CA0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SpanProperty>, MEMORY[0x1E4FA2C80], MEMORY[0x1E4FA2C80]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SiriXActionCandidate>, MEMORY[0x1E4FA2298], MEMORY[0x1E4FA2298]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ParseUserDataAttachment>, (uint64_t (*)(void))type metadata accessor for ParseUserDataAttachment, (uint64_t (*)(void))type metadata accessor for ParseUserDataAttachment);
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3, void *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ExecutionOverride>, &demangling cache variable for type metadata for ExecutionOverride);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UndoingCommand>, &demangling cache variable for type metadata for UndoingCommand);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PluginPackage>, &demangling cache variable for type metadata for PluginPackage);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Output>, &demangling cache variable for type metadata for Output);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<@Sendable ()>, (uint64_t *)&demangling cache variable for type metadata for ());
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AppShortcutTarget>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SiriEnvironmentStringKeyedValueFetching>, &demangling cache variable for type metadata for SiriEnvironmentStringKeyedValueFetching);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<ConversationHandler>, &demangling cache variable for type metadata for ConversationHandler);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<LinkActionMetadata>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PreExecutionRule>, &demangling cache variable for type metadata for PreExecutionRule);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Task<(), Never>>, (void (*)(void, int64_t, void *, void *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int>, (void (*)(void, int64_t, void *, void *))specialized _ArrayBuffer._copyContents(subRange:initializing:));
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v10 = a2;
      }
    }
  }
  else
  {
    uint64_t v10 = a2;
  }
  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    Swift::String v16 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  Swift::String v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (BOOL v18 = v14 == -1) : (BOOL v18 = 0), v18))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  uint64_t v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v16 + v20;
  if (a1)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(void *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      long long v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CandidateRequestMessage>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      long long v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      long long v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(appBundleId: String, userData: [String : Any])>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      long long v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      long long v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AceServiceInvokerImpl.AceSubmitOptions>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      long long v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;
  void *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<GeneralizedAppShortcutTarget>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      long long v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<WorkItem>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      long long v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      specialized getContiguousArrayStorageType<A>(for:)();
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      long long v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;
  void *v13;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Any]>);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      long long v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      size_t v14 = _swift_stdlib_malloc_size(v13);
      v13[2] = v11;
      v13[3] = 2 * ((uint64_t)(v14 - 32) / 40);
      unint64_t v15 = v13 + 4;
      if (v8)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[5 * v11 + 4]) {
          memmove(v15, a4 + 4, 40 * v11);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
      unint64_t v15 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int64_t v14;
  uint64_t v15;
  void *v16;

  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = a4[3];
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = a4[2];
    if (v10 <= v11) {
      uint64_t v12 = a4[2];
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      uint64_t v13 = (void *)swift_allocObject();
      size_t v14 = _swift_stdlib_malloc_size(v13);
      unint64_t v15 = v14 - 32;
      if (v14 < 32) {
        unint64_t v15 = v14 - 17;
      }
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 4);
      Swift::String v16 = v13 + 4;
      if (v8) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
      Swift::String v16 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result)
      {
LABEL_15:
        if (v13 != a4 || v16 >= &a4[2 * v11 + 4]) {
          memmove(v16, a4 + 4, 16 * v11);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, (unint64_t)v16, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    int64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  int64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      int64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * v11 - 64;
      uint64_t v12 = v10 + 32;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32]) {
          memmove(v12, a4 + 32, v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v12 = (char *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, uint64_t *a5)
{
  char v6 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v8 = a2;
    goto LABEL_8;
  }
  unint64_t v7 = a4[3];
  uint64_t v8 = v7 >> 1;
  if ((uint64_t)(v7 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v8 + 0x4000000000000000 >= 0)
  {
    uint64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v8 = a2;
    }
LABEL_8:
    uint64_t v9 = a4[2];
    if (v8 <= v9) {
      uint64_t v10 = a4[2];
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      int64_t v11 = (void *)swift_allocObject();
      size_t v12 = _swift_stdlib_malloc_size(v11);
      v11[2] = v9;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      uint64_t v13 = v11 + 4;
      if (v6)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v9 + 4]) {
          memmove(v13, a4 + 4, 40 * v9);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      int64_t v11 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v13 = (void *)(MEMORY[0x1E4FBC860] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v9, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t ContextUpdater.finalActiveTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ContextUpdater.finalExecutedTasks.getter()
{
  return swift_bridgeObjectRetain();
}

Swift::Void __swiftcall ConversationBridgeInstrumentationUtil.logContextFlowSubmitted(contextUpdateReceived:contextUpdateError:requestId:)(Swift::Bool contextUpdateReceived, Swift::Bool contextUpdateError, Swift::String requestId)
{
  unint64_t object = requestId._object;
  uint64_t countAndFlagsBits = requestId._countAndFlagsBits;
  uint64_t v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0D58]), sel_init);
  if (v8)
  {
    unint64_t v15 = v8;
    [v8 setContextUpdateError:contextUpdateError];
    [v15 setContextUpdateReceived:contextUpdateReceived];
    uint64_t v9 = specialized InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)(countAndFlagsBits, (uint64_t)object, 0, 0, 0);
    if (v9)
    {
      uint64_t v10 = v9;
      [v9 setContextSubmissionMessage:v15];
      objc_msgSend(*(id *)(v3 + 16), sel_emitMessage_, v10);

      int64_t v11 = v10;
      goto LABEL_9;
    }
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationBridge);
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v13))
    {
      size_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)size_t v14 = 0;
      _os_log_impl(&dword_1B9C64000, v15, v13, "Failed to create ORCHSchemaORCHConversationContextSubmitted event", v14, 2u);
      MEMORY[0x1BA9E48C0](v14, -1, -1);
    }
  }
  int64_t v11 = v15;
LABEL_9:
}

uint64_t lazy protocol witness table accessor for type PeerInfoProvider and conformance PeerInfoProvider(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s14SiriKitRuntime16PeerInfoProviderCAC0aB4Flow0dE9ProvidingAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s14SiriKitRuntime16PeerInfoProviderCAC0aB4Flow0dE9ProvidingAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t AnnounceContext.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void closure #1 in ConversationRequestProcessor.applyEmptyNativeFlowContextUpdateIfRequired(_:selectedResultCandidateId:metadata:)(uint64_t a1, void *a2)
{
  if (a2)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
    id v4 = a2;
    id v5 = a2;
    oslog = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      unint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v12 = v8;
      *(_DWORD *)unint64_t v7 = 136315138;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
      uint64_t v9 = Optional.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, oslog, v6, "Error applying empty NativeFlowContextUpdate: %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v8, -1, -1);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }
    else
    {
    }
  }
}

uint64_t ContextUpdater.applyPromptContextProtoData(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v11 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  unint64_t v15 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  size_t v17 = (char *)v36 - v16;
  if (a3 >> 60 == 15)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationBridge);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v21 = 0;
      _os_log_impl(&dword_1B9C64000, v19, v20, "PromptContextProtoData is nil", v21, 2u);
      MEMORY[0x1BA9E48C0](v21, -1, -1);
    }

    uint64_t v22 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v9, 1, 1, v22);
    ContextUpdater.applyLegacyNLContext(_:)((uint64_t)v9);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a1, 1, 1, v11);
  }
  else
  {
    uint64_t v42 = v3;
    uint64_t v45 = 0;
    memset(v44, 0, sizeof(v44));
    outlined copy of Data._Representation(a2, a3);
    outlined copy of Data._Representation(a2, a3);
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type RequestType and conformance RequestType(lazy protocol witness table cache variable for type Com_Apple_Siri_Product_Proto_PromptContext and conformance Com_Apple_Siri_Product_Proto_PromptContext, MEMORY[0x1E4FA2B58]);
    uint64_t v41 = a2;
    Message.init(serializedData:extensions:partial:options:)();
    uint64_t v40 = a1;
    uint64_t v23 = Com_Apple_Siri_Product_Proto_PromptContext.domainHints.getter();
    (*(void (**)(uint64_t))(*(void *)v42 + 392))(v23);
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.conversationBridge);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      os_log_t v39 = v25;
      os_log_type_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      *(void *)&v44[0] = v38;
      unint64_t v37 = v27;
      *(_DWORD *)os_log_type_t v27 = 136315138;
      v36[1] = v27 + 4;
      uint64_t v28 = Message.debugDescription.getter();
      uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, (uint64_t *)v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
      os_log_t v30 = v39;
      os_log_type_t v31 = v37;
      _os_log_impl(&dword_1B9C64000, v39, v26, "Deserialized PromptContextProto: %s", v37, 0xCu);
      uint64_t v32 = v38;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v32, -1, -1);
      MEMORY[0x1BA9E48C0](v31, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    }
    Com_Apple_Siri_Product_Proto_PromptContext.toLegacyNLContext()((uint64_t)v9);
    uint64_t v33 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v9, 0, 1, v33);
    ContextUpdater.applyLegacyNLContext(_:)((uint64_t)v9);
    outlined consume of Data?(v41, a3);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
    uint64_t v34 = v40;
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v40, v17, v11);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v34, 0, 1, v11);
  }
  return 0;
}

uint64_t ContextUpdater.domainHints.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime14ContextUpdater_domainHints);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t ContextUpdater.applyCorrectionsDonation(_:)(uint64_t a1)
{
  uint64_t v23 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CorrectionsContext?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v24 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CorrectionsDirectInvocation();
  uint64_t v25 = *(void *)(v4 - 8);
  uint64_t v26 = v4;
  MEMORY[0x1F4188790](v4);
  os_log_type_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UserID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for CorrectionsContext();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*v1 + 360))(v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7))
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, v13, v7);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    UserID.sharedUserId.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  swift_bridgeObjectRetain();
  CorrectionsContext.init(userId:assistantId:)();
  uint64_t v19 = v1[15];
  uint64_t v20 = v1[16];
  __swift_project_boxed_opaque_existential_1(v1 + 12, v19);
  Parse.DirectInvocation.identifier.getter();
  Parse.DirectInvocation.userData.getter();
  CorrectionsDirectInvocation.init(identifier:userData:)();
  uint64_t v21 = (uint64_t)v24;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v24, v18, v14);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v21, 0, 1, v14);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 40))(v6, v21, v19, v20);
  outlined destroy of ReferenceResolutionClientProtocol?(v21, &demangling cache variable for type metadata for CorrectionsContext?);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v26);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t protocol witness for CorrectionsHandling.setUndoInvocation(directInvocation:context:) in conformance CorrectionsPlatformClient()
{
  return dispatch thunk of CorrectionsPlatformClient.setUndoInvocation(directInvocation:context:)();
}

Swift::Void __swiftcall ServiceBridgeDelegateXPCWrapper.closeServerRequest(forExecutionRequestId:)(Swift::String forExecutionRequestId)
{
  unint64_t object = forExecutionRequestId._object;
  uint64_t countAndFlagsBits = forExecutionRequestId._countAndFlagsBits;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  os_log_type_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = one-time initialization token for shared;
  swift_retain();
  swift_bridgeObjectRetain();
  if (v8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v9 = static MessageBusActor.shared;
  unint64_t v10 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = v9;
  v11[3] = v10;
  v11[4] = v1;
  v11[5] = countAndFlagsBits;
  void v11[6] = object;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.closeServerRequest(forExecutionRequestId:), (uint64_t)v11);
  swift_release();
}

Swift::Void __swiftcall ConversationBridgeProcessorDelegate.closeServerRequest(forExecutionRequestId:)(Swift::String forExecutionRequestId)
{
  unint64_t object = forExecutionRequestId._object;
  uint64_t countAndFlagsBits = forExecutionRequestId._countAndFlagsBits;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t, void *))(*(void *)Strong + 1160))(countAndFlagsBits, object);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v5, v6, "ConversationRequestProcessor already released, ignoring closeServerRequest for request id %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v8, -1, -1);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

Swift::Void __swiftcall ServerFallbackCapableRequestProcessor.closeServerRequest(forExecutionRequestId:)(Swift::String forExecutionRequestId)
{
  uint64_t v2 = v1;
  unint64_t object = forExecutionRequestId._object;
  uint64_t countAndFlagsBits = forExecutionRequestId._countAndFlagsBits;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  os_log_type_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    unint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    v28[0] = v11;
    *(_DWORD *)unint64_t v10 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v8, v9, "Execution asked to close server request. Cannot fallback to server after this point for requestId: %s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v11, -1, -1);
    MEMORY[0x1BA9E48C0](v10, -1, -1);
  }
  else
  {

    uint64_t v12 = swift_bridgeObjectRelease_n();
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 592))(v12);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_asyncWork);
    uint64_t v16 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v6, 1, 1, v16);
    uint64_t v17 = swift_allocObject();
    swift_weakInit();
    uint64_t v18 = one-time initialization token for shared;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    if (v18 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v19 = static MessageBusActor.shared;
    uint64_t v20 = _s16SiriMessageTypes11RequestTypeOACSYAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
    uint64_t v21 = (void *)swift_allocObject();
    void v21[2] = v19;
    v21[3] = v20;
    v21[4] = v17;
    v21[5] = v14;
    v21[6] = countAndFlagsBits;
    v21[7] = object;
    swift_retain();
    swift_release();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in ServerFallbackCapableRequestProcessor.closeServerRequest(forExecutionRequestId:), (uint64_t)v21);
    (*(void (**)(void))(*(void *)v15 + 120))();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_1B9C64000, v22, v23, "ConversationBridge: commit received while we're not in a turn. Ignoring.", v24, 2u);
      MEMORY[0x1BA9E48C0](v24, -1, -1);
    }
  }
}

uint64_t ContextUpdater.applyDisplayHints(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ConversationSessionKey();
  uint64_t v40 = *(void *)(v2 - 8);
  uint64_t v41 = v2;
  MEMORY[0x1F4188790](v2);
  os_log_t v39 = (char *)v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v49 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(type metadata accessor for RREntity() - 8);
    uint64_t v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v8 = *(void *)(v6 + 72);
    v38[0] = a1;
    swift_bridgeObjectRetain();
    uint64_t v9 = 0;
    uint64_t v43 = v7;
    uint64_t v44 = v5;
    uint64_t v42 = v8;
    while (1)
    {
      RREntity.usoEntity.getter();
      uint64_t v10 = UsoEntity.attributes.getter();
      swift_release();
      if (*(void *)(v10 + 16))
      {
        unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(1701667182, 0xE400000000000000);
        if (v12)
        {
          unint64_t v13 = *(void *)(*(void *)(v10 + 56) + 8 * v11);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if (!(v13 >> 62))
          {
            uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v14) {
              break;
            }
            goto LABEL_22;
          }
          swift_bridgeObjectRetain();
          uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v14) {
            break;
          }
        }
      }
LABEL_22:
      swift_bridgeObjectRelease();
LABEL_4:
      if (++v9 == v5)
      {
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
    }
    if (v14 >= 1)
    {
      uint64_t v45 = v9;
      uint64_t v15 = 0;
      while (1)
      {
        if ((v13 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1BA9E3990](v15, v13);
          uint64_t v16 = dispatch thunk of UsoValue.getAsPrimitiveValueString()();
          if (v17) {
            goto LABEL_17;
          }
        }
        else
        {
          swift_retain();
          uint64_t v16 = dispatch thunk of UsoValue.getAsPrimitiveValueString()();
          if (v17)
          {
LABEL_17:
            uint64_t v18 = v16;
            uint64_t v19 = v17;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4[2] + 1, 1, v4);
            }
            unint64_t v21 = v4[2];
            unint64_t v20 = v4[3];
            if (v21 >= v20 >> 1) {
              uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v4);
            }
            v4[2] = v21 + 1;
            uint64_t v22 = &v4[2 * v21];
            v22[4] = v18;
            v22[5] = v19;
            swift_release();
            unint64_t v49 = v4;
            goto LABEL_12;
          }
        }
        swift_release();
LABEL_12:
        if (v14 == ++v15)
        {
          swift_bridgeObjectRelease();
          uint64_t v5 = v44;
          uint64_t v9 = v45;
          goto LABEL_4;
        }
      }
    }
    __break(1u);
  }
  else
  {
LABEL_26:
    uint64_t v23 = *(void *)(v38[1] + 232);
    v48[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    v48[0] = v4;
    uint64_t v25 = v39;
    uint64_t v24 = v40;
    uint64_t v26 = v41;
    (*(void (**)(char *, void, uint64_t))(v40 + 104))(v39, *MEMORY[0x1E4FA2618], v41);
    uint64_t v27 = *(void (**)(void *, char *))(*(void *)v23 + 152);
    swift_bridgeObjectRetain();
    v27(v48, v25);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v26);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v48);
    if (one-time initialization token for conversationBridge == -1) {
      goto LABEL_27;
    }
  }
  swift_once();
LABEL_27:
  uint64_t v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Logger.conversationBridge);
  unint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    os_log_type_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = swift_slowAlloc();
    uint64_t v47 = v32;
    *(_DWORD *)os_log_type_t v31 = 136315138;
    swift_beginAccess();
    uint64_t v33 = swift_bridgeObjectRetain();
    uint64_t v34 = MEMORY[0x1BA9E3080](v33, MEMORY[0x1E4FBB1A0]);
    unint64_t v36 = v35;
    swift_bridgeObjectRelease();
    uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v29, v30, "#ContextUpdater: Saving to SessionState displayHints:%s", v31, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v32, -1, -1);
    MEMORY[0x1BA9E48C0](v31, -1, -1);
  }

  return swift_bridgeObjectRelease();
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  unint64_t v4 = *v2;
  int64_t v5 = *(void *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *(void *)(v4 + 24) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t v12 = *(void *)(type metadata accessor for Siri_Nlu_External_UserDialogAct() - 8);
  unint64_t v13 = v4 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  uint64_t v14 = *(void *)(v12 + 72);
  uint64_t v15 = v14 * a1;
  unint64_t v16 = v13 + v14 * a1;
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_25;
  }
  uint64_t v18 = *(void *)(v4 + 16);
  uint64_t v19 = v18 - a2;
  if (__OFSUB__(v18, a2)) {
    goto LABEL_31;
  }
  if ((v19 & 0x8000000000000000) == 0)
  {
    if (v15 < v14 * a2 || v16 >= v13 + v14 * a2 + v19 * v14)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (v15 != v14 * a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v21 = *(void *)(v4 + 16);
    BOOL v22 = __OFADD__(v21, v8);
    uint64_t v23 = v21 - v7;
    if (!v22)
    {
      *(void *)(v4 + 16) = v23;
LABEL_25:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Task<(), Never>);
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  unint64_t v13 = v4[2];
  uint64_t v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    unint64_t v16 = (char *)&v4[a2 + 4];
    if (a1 != a2 || &v4[a1 + 4] >= (void *)&v16[8 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[a1 + 4], v16, 8 * v15);
    }
    uint64_t v17 = v4[2];
    uint64_t v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  unint64_t v13 = v4[2];
  uint64_t v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    unint64_t v16 = (char *)&v4[4 * a2 + 4];
    if (a1 != a2 || &v4[4 * a1 + 4] >= (void *)&v16[32 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[4 * a1 + 4], v16, 32 * v15);
    }
    uint64_t v17 = v4[2];
    uint64_t v14 = __OFADD__(v17, v8);
    uint64_t v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)uint64_t v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, a3, MEMORY[0x1E4FA1B80]);
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, a3, (void (*)(void))type metadata accessor for FlowTask);
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    uint64_t v4 = a1;
    unint64_t v5 = *v3;
    if (!(*v3 >> 62))
    {
      if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v19 < v2) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v9 = v8 + v6;
    if (!__OFADD__(v8, v6)) {
      goto LABEL_8;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  unint64_t v5 = *v3;
  if (*v3 >> 62) {
    goto LABEL_36;
  }
  uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v9 = v8 - v7;
  if (__OFADD__(v8, v6)) {
    goto LABEL_38;
  }
LABEL_8:
  unint64_t v5 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v3 = v5;
  uint64_t v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    uint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v8 = 1;
  }
  if (v5 >> 62) {
    goto LABEL_39;
  }
  uint64_t v12 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9) {
    uint64_t v12 = v9;
  }
  swift_bridgeObjectRetain();
  unint64_t v5 = MEMORY[0x1BA9E39A0](v8, v12, 1, v5);
  swift_bridgeObjectRelease();
  *uint64_t v3 = v5;
  uint64_t v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  type metadata accessor for ExecutableTask(0);
  swift_arrayDestroy();
  if (v6)
  {
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v14 = v20 - v2;
      if (!__OFSUB__(v20, v2))
      {
LABEL_21:
        if (v14 < 0)
        {
LABEL_46:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v15 = (const void *)(v11 + 32 + 8 * v2);
        if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v15 + 8 * v14) {
          memmove((void *)(v11 + 32 + 8 * v4), v15, 8 * v14);
        }
        if (!(v5 >> 62))
        {
          uint64_t v16 = *(void *)(v11 + 16);
          uint64_t v17 = v16 + v6;
          if (!__OFADD__(v16, v6))
          {
LABEL_27:
            *(void *)(v11 + 16) = v17;
            goto LABEL_28;
          }
          goto LABEL_45;
        }
LABEL_43:
        swift_bridgeObjectRetain();
        uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v17 = v21 + v6;
        if (!__OFADD__(v21, v6)) {
          goto LABEL_27;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v13 = *(void *)(v11 + 16);
      uint64_t v14 = v13 - v2;
      if (!__OFSUB__(v13, v2)) {
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_43;
  }
LABEL_28:

  return specialized Array._endMutation()();
}

void SessionStateContextKeysManager.removeKey(_:)()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + 16) + 16);
  os_unfair_lock_lock(v1);
  closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply(v2);
  os_unfair_lock_unlock(v1);
}

void partial apply for closure #1 in SessionStateContextKeysManager.removeKey(_:)()
{
  closure #1 in SessionStateContextKeysManager.removeKey(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void closure #1 in SessionStateContextKeysManager.removeKey(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ConversationSessionKey();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v26 = (char *)v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v24 - v8;
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v24 - v10;
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(a2, v29);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v29, &demangling cache variable for type metadata for Sendable?);
  swift_endAccess();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v27 = a2;
  v12(v9, a2, v3);
  swift_beginAccess();
  specialized Set._Variant.insert(_:)((uint64_t)v11, v9);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v11, v3);
  swift_endAccess();
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
  uint64_t v15 = v26;
  v12(v26, v27, v3);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    v24[0] = v12;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v25 = v13;
    uint64_t v27 = v20;
    *(void *)&v29[0] = v20;
    *(_DWORD *)uint64_t v19 = 136315138;
    v24[1] = v19 + 4;
    ((void (*)(char *, char *, uint64_t))v24[0])(v11, v15, v3);
    uint64_t v21 = String.init<A>(describing:)();
    uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, (uint64_t *)v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v25(v15, v3);
    _os_log_impl(&dword_1B9C64000, v16, v17, "StateKey: \"%s\" marked for removal from SessionState", v19, 0xCu);
    uint64_t v23 = v27;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v23, -1, -1);
    MEMORY[0x1BA9E48C0](v19, -1, -1);
  }
  else
  {
    v13(v15, v3);
  }
}

id ConversationCommitResultXPC.init(coder:)(void *a1)
{
  uint64_t v3 = type metadata accessor for BinaryDecodingOptions();
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v132 = (char *)&v123 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  unsigned int v143 = (char *)&v123 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Task?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v133 = (char *)&v123 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v123 - v10;
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_Task();
  uint64_t v144 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v137 = (char *)&v123 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  int v136 = (char *)&v123 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v123 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v147 = (uint64_t)&v123 - v20;
  uint64_t v131 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v134 = *(void *)(v131 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v131);
  uint64_t v135 = (char *)&v123 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v145 = (char *)&v123 - v23;
  uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject.Type>);
  uint64_t v24 = swift_allocObject();
  long long v127 = xmmword_1BA04F9C0;
  *(_OWORD *)(v24 + 16) = xmmword_1BA04F9C0;
  uint64_t v25 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSArray);
  *(void *)(v24 + 32) = v25;
  uint64_t v129 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSData);
  *(void *)(v24 + 40) = v129;
  id v26 = v1;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (!*((void *)&v150 + 1))
  {

    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v149, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_14:
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.executor);
    os_log_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v41 = 0;
      _os_log_impl(&dword_1B9C64000, v39, v40, "Could not deserialize proto ActiveTasks array", v41, 2u);
      MEMORY[0x1BA9E48C0](v41, -1, -1);
    }

    goto LABEL_19;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {

    goto LABEL_14;
  }
  uint64_t v124 = v25;
  id v126 = v26;
  id v130 = a1;
  id v125 = (id)v154;
  NSArray.makeIterator()();
  NSFastEnumerationIterator.next()();
  if (v155)
  {
    uint64_t v141 = (void (*)(char *, uint64_t))(v144 + 56);
    id v146 = (void (**)(uint64_t, char *, uint64_t))(v144 + 32);
    uint64_t v139 = (void (**)(char *, uint64_t, uint64_t))(v144 + 16);
    uint64_t v138 = v144 + 8;
    uint64_t v148 = MEMORY[0x1E4FBC860];
    id v142 = (id)(MEMORY[0x1E4FBC840] + 8);
    unint64_t v140 = v19;
    while (1)
    {
      outlined init with take of Any(&v154, &v149);
      if ((swift_dynamicCast() & 1) == 0) {
        break;
      }
      uint64_t v27 = v152;
      unint64_t v28 = v153;
      uint64_t v151 = 0;
      long long v149 = 0u;
      long long v150 = 0u;
      outlined copy of Data._Representation(v152, v153);
      BinaryDecodingOptions.init()();
      lazy protocol witness table accessor for type PrescribedTool and conformance PrescribedTool(lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task, MEMORY[0x1E4FA2760]);
      Message.init<A>(contiguousBytes:extensions:partial:options:)();
      (*(void (**)(char *, void, uint64_t, uint64_t))v141)(v11, 0, 1, v12);
      unint64_t v29 = *v146;
      uint64_t v30 = v12;
      uint64_t v31 = v147;
      (*v146)(v147, v11, v30);
      uint64_t v32 = v31;
      uint64_t v12 = v30;
      (*v139)(v19, v32, v30);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v148 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v148 + 16) + 1, 1, v148);
      }
      unint64_t v34 = *(void *)(v148 + 16);
      unint64_t v33 = *(void *)(v148 + 24);
      if (v34 >= v33 >> 1) {
        uint64_t v148 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, v148);
      }
      uint64_t v35 = v148;
      *(void *)(v148 + 16) = v34 + 1;
      uint64_t v36 = v144;
      unint64_t v37 = v35
          + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))
          + *(void *)(v144 + 72) * v34;
      uint64_t v19 = v140;
      v29(v37, v140, v30);
      outlined consume of Data._Representation(v27, v28);
      (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v147, v30);
      NSFastEnumerationIterator.next()();
      if (!v155) {
        goto LABEL_22;
      }
    }
    swift_bridgeObjectRelease();

    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v60 = type metadata accessor for Logger();
    __swift_project_value_buffer(v60, (uint64_t)static Logger.executor);
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.error.getter();
    BOOL v63 = os_log_type_enabled(v61, v62);
    id v64 = v130;
    uint64_t v65 = v134;
    if (v63)
    {
      Swift::String v66 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v66 = 0;
      _os_log_impl(&dword_1B9C64000, v61, v62, "Element in decoded array is not of type Data", v66, 2u);
      MEMORY[0x1BA9E48C0](v66, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v65 + 8))(v145, v131);
    goto LABEL_19;
  }
  uint64_t v148 = MEMORY[0x1E4FBC860];
LABEL_22:
  uint64_t v44 = v134 + 8;
  uint64_t v45 = *(void (**)(char *, uint64_t))(v134 + 8);
  v45(v145, v131);
  uint64_t v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = v127;
  uint64_t v47 = v129;
  *(void *)(v46 + 32) = v124;
  *(void *)(v46 + 40) = v47;
  NSCoder.decodeObject(of:forKey:)();
  swift_bridgeObjectRelease();
  if (!*((void *)&v150 + 1))
  {

    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v149, (uint64_t *)&demangling cache variable for type metadata for Any?);
    swift_bridgeObjectRelease();
LABEL_40:
    id v67 = v130;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v68 = type metadata accessor for Logger();
    __swift_project_value_buffer(v68, (uint64_t)static Logger.executor);
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v71 = 0;
      _os_log_impl(&dword_1B9C64000, v69, v70, "Could not deserialize proto ActiveTasks array", v71, 2u);
      MEMORY[0x1BA9E48C0](v71, -1, -1);
    }

    goto LABEL_45;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();

    goto LABEL_40;
  }
  uint64_t v141 = v45;
  uint64_t v134 = v44;
  id v142 = (id)v154;
  NSArray.makeIterator()();
  NSFastEnumerationIterator.next()();
  id v48 = v130;
  if (v155)
  {
    uint64_t v145 = (char *)(v144 + 56);
    unint64_t v49 = (void (**)(char *, char *, uint64_t))(v144 + 32);
    unint64_t v50 = (void (**)(char *, char *, uint64_t))(v144 + 16);
    unsigned int v143 = (char *)(v144 + 8);
    uint64_t v147 = MEMORY[0x1E4FBC860];
    id v146 = (void (**)(uint64_t, char *, uint64_t))(MEMORY[0x1E4FBC840] + 8);
    while (1)
    {
      outlined init with take of Any(&v154, &v149);
      if ((swift_dynamicCast() & 1) == 0) {
        break;
      }
      uint64_t v51 = v152;
      unint64_t v52 = v153;
      uint64_t v151 = 0;
      long long v149 = 0u;
      long long v150 = 0u;
      outlined copy of Data._Representation(v152, v153);
      BinaryDecodingOptions.init()();
      lazy protocol witness table accessor for type PrescribedTool and conformance PrescribedTool(lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task, MEMORY[0x1E4FA2760]);
      unint64_t v53 = v133;
      Message.init<A>(contiguousBytes:extensions:partial:options:)();
      (*(void (**)(char *, void, uint64_t, uint64_t))v145)(v53, 0, 1, v12);
      unint64_t v54 = *v49;
      uint64_t v55 = v136;
      (*v49)(v136, v53, v12);
      (*v50)(v137, v55, v12);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v147 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v147 + 16) + 1, 1, v147);
      }
      unint64_t v57 = *(void *)(v147 + 16);
      unint64_t v56 = *(void *)(v147 + 24);
      if (v57 >= v56 >> 1) {
        uint64_t v147 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1, v147);
      }
      uint64_t v58 = v147;
      *(void *)(v147 + 16) = v57 + 1;
      uint64_t v59 = v144;
      v54((char *)(v58+ ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))+ *(void *)(v144 + 72) * v57), v137, v12);
      outlined consume of Data._Representation(v51, v52);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v136, v12);
      NSFastEnumerationIterator.next()();
      id v48 = v130;
      if (!v155) {
        goto LABEL_47;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v82 = type metadata accessor for Logger();
    __swift_project_value_buffer(v82, (uint64_t)static Logger.executor);
    uint64_t v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.error.getter();
    BOOL v85 = os_log_type_enabled(v83, v84);
    uint64_t v86 = v141;
    if (v85)
    {
      Swift::String v87 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v87 = 0;
      _os_log_impl(&dword_1B9C64000, v83, v84, "Element in decoded array is not of type Data", v87, 2u);
      MEMORY[0x1BA9E48C0](v87, -1, -1);
    }

    v86(v135, v131);
    goto LABEL_19;
  }
  uint64_t v147 = MEMORY[0x1E4FBC860];
LABEL_47:
  v141(v135, v131);
  unint64_t v72 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000013, 0x80000001BA0605F0);
  id v73 = objc_msgSend(v48, sel_decodeIntegerForKey_, v72);

  id v74 = 0;
  char v75 = 1;
  if ((unint64_t)v73 >= 4)
  {
    if (v73 == (id)4)
    {
      uint64_t v88 = (void *)MEMORY[0x1BA9E2DD0](0x6269726373657270, 0xEE006C6F6F546465);
      id v89 = v130;
      unsigned int v90 = objc_msgSend(v130, sel_containsValueForKey_, v88);

      if (v90
        && (uint64_t v91 = (void *)MEMORY[0x1BA9E2DD0](0x6269726373657270, 0xEE006C6F6F546465),
            id v74 = objc_msgSend(v89, sel_decodeIntegerForKey_, v91),
            v91,
            (unint64_t)v74 <= 1))
      {
        char v75 = 0;
      }
      else
      {
        id v74 = 0;
      }
    }
    else if (v73 != (id)5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v76 = type metadata accessor for Logger();
      __swift_project_value_buffer(v76, (uint64_t)static Logger.executor);
      uint64_t v77 = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.error.getter();
      BOOL v79 = os_log_type_enabled(v77, v78);
      id v80 = v130;
      if (v79)
      {
        uint64_t v81 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v81 = 0;
        _os_log_impl(&dword_1B9C64000, v77, v78, "Error decoding ConversationCommitResultXPC: Unknown FlowUnhandledReasonXPC", v81, 2u);
        MEMORY[0x1BA9E48C0](v81, -1, -1);
      }

LABEL_45:
LABEL_19:
      swift_getObjectType();
      swift_deallocPartialClassInstance();
      return 0;
    }
  }
  id v92 = v130;
  id v146 = (void (**)(uint64_t, char *, uint64_t))NSCoder.decodeObject<A>(of:forKey:)();
  uint64_t v93 = (void *)MEMORY[0x1BA9E2DD0](1701869940, 0xE400000000000000);
  id v94 = objc_msgSend(v92, sel_decodeIntegerForKey_, v93);

  if ((unint64_t)v94 >= 5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v97 = type metadata accessor for Logger();
    __swift_project_value_buffer(v97, (uint64_t)static Logger.executor);
    uint64_t v98 = Logger.logObject.getter();
    os_log_type_t v99 = static os_log_type_t.error.getter();
    BOOL v100 = os_log_type_enabled(v98, v99);
    id v101 = v130;
    if (v100)
    {
      uint64_t v102 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v102 = 0;
      _os_log_impl(&dword_1B9C64000, v98, v99, "Error decoding ConversationCommitResultXPC: Unknown ConversationCommitResultTypeXPC", v102, 2u);
      MEMORY[0x1BA9E48C0](v102, -1, -1);
    }

    goto LABEL_19;
  }
  uint64_t v95 = (void *)MEMORY[0x1BA9E2DD0](0x726F727265, 0xE500000000000000);
  unsigned int v96 = objc_msgSend(v92, sel_containsValueForKey_, v95);

  if (v96)
  {
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSError);
    uint64_t v145 = (char *)NSCoder.decodeObject<A>(of:forKey:)();
  }
  else
  {
    uint64_t v145 = 0;
  }
  uint64_t v103 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000019, 0x80000001BA060640);
  unsigned int v104 = objc_msgSend(v92, sel_containsValueForKey_, v103);

  if (v104
    && (type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSString), (uint64_t v105 = NSCoder.decodeObject<A>(of:forKey:)()) != 0))
  {
    uint64_t v106 = (void *)v105;
    uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v109 = v108;
  }
  else
  {
    uint64_t v107 = 0;
    uint64_t v109 = 0;
  }
  uint64_t v110 = (void *)MEMORY[0x1BA9E2DD0](0x5565737261706572, 0xED00004449726573);
  unsigned int v111 = objc_msgSend(v130, sel_containsValueForKey_, v110);

  uint64_t v112 = (uint64_t)v74;
  if (v111
    && (type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSString), (uint64_t v113 = NSCoder.decodeObject<A>(of:forKey:)()) != 0))
  {
    long long v114 = (void *)v113;
    char v115 = v75;
    uint64_t v116 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v118 = v117;
  }
  else
  {
    char v115 = v75;
    uint64_t v116 = 0;
    uint64_t v118 = 0;
  }
  id v119 = v126;
  swift_getObjectType();

  uint64_t v120 = v146;
  if (v146)
  {
    uint64_t v122 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v122 = 0;
    uint64_t v121 = 0xF000000000000000;
  }
  id v42 = specialized ConversationCommitResultXPC.__allocating_init(type:activeTasks:completedTasks:flowUnhandledReason:prescribedTool:error:nextPluginActionData:reparseExecutionRequestID:reparseUserID:)((uint64_t)v94, v148, v147, (uint64_t)v73, v112, v115, (uint64_t)v145, v122, v121, v107, v109, v116, v118);

  swift_deallocPartialClassInstance();
  return v42;
}

unint64_t lazy protocol witness table accessor for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task()
{
  unint64_t result = lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task[0];
  if (!lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task[0])
  {
    type metadata accessor for Siri_Nlu_External_Task();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task);
  }
  return result;
}

uint64_t type metadata accessor for ConversationCommitResultXPC()
{
  return self;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.commit(bridge:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions()(a1, &demangling cache variable for type metadata for CheckedContinuation<ConversationCommitResult, Error>, (uint64_t (*)(uint64_t, uint64_t))closure #1 in closure #1 in closure #1 in RemoteConversationClient.commit(bridge:));
}

uint64_t closure #1 in closure #1 in closure #1 in RemoteConversationClient.commit(bridge:)(void *a1)
{
  uint64_t v2 = type metadata accessor for ConversationCommitResult();
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  (*(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *a1) + 0xA0))(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<ConversationCommitResult, Error>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t ConversationCommitResultXPC.swiftRepresentation()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PluginAction();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for FlowUnhandledReason();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)v31 - v12;
  switch(*(void *)(v1 + OBJC_IVAR___SKRConversationCommitResult_type))
  {
    case 0:
      uint64_t v14 = *(void **)(v1 + OBJC_IVAR___SKRConversationCommitResult_error);
      if (!v14) {
        goto LABEL_32;
      }
      v14;
      return swift_willThrow();
    case 1:
      uint64_t v26 = *(void *)(v1 + OBJC_IVAR___SKRConversationCommitResult_activeTasks);
      uint64_t v27 = *(void *)(v1 + OBJC_IVAR___SKRConversationCommitResult_completedTasks);
      *a1 = v26;
      a1[1] = v27;
      type metadata accessor for ConversationCommitResult();
      goto LABEL_13;
    case 2:
      uint64_t v21 = *(void *)(v1 + OBJC_IVAR___SKRConversationCommitResult_flowUnhandledReason);
      switch(v21)
      {
        case 0:
          goto LABEL_31;
        case 1:
          uint64_t v22 = (unsigned int *)MEMORY[0x1E4FA18B0];
          goto LABEL_19;
        case 2:
          uint64_t v22 = (unsigned int *)MEMORY[0x1E4FA18A8];
          goto LABEL_19;
        case 3:
          uint64_t v22 = (unsigned int *)MEMORY[0x1E4FA18B8];
          goto LABEL_19;
        case 4:
          if (*(unsigned char *)(v1 + OBJC_IVAR___SKRConversationCommitResult_prescribedTool + 8))
          {
            uint64_t v28 = type metadata accessor for PrescribedTool();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v11, 1, 1, v28);
            goto LABEL_27;
          }
          uint64_t v29 = *(void *)(v1 + OBJC_IVAR___SKRConversationCommitResult_prescribedTool);
          if (v29 == 1)
          {
            static PrescribedTool.generateKnowledgeResponseIntentTool.getter();
LABEL_26:
            uint64_t v30 = type metadata accessor for PrescribedTool();
            (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v11, 0, 1, v30);
LABEL_27:
            (*(void (**)(char *, void, uint64_t))(v8 + 104))(v11, *MEMORY[0x1E4FA1898], v7);
            (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v11, v7);
LABEL_20:
            (*(void (**)(void *, char *, uint64_t))(v8 + 32))(a1, v13, v7);
            type metadata accessor for ConversationCommitResult();
            return swift_storeEnumTagMultiPayload();
          }
          if (!v29)
          {
            static PrescribedTool.searchTool.getter();
            goto LABEL_26;
          }
          break;
        case 5:
          uint64_t v22 = (unsigned int *)MEMORY[0x1E4FA18A0];
LABEL_19:
          (*(void (**)(char *, void, uint64_t))(v8 + 104))((char *)v31 - v12, *v22, v7);
          goto LABEL_20;
        default:
          goto LABEL_33;
      }
      goto LABEL_35;
    case 3:
      uint64_t v23 = (uint64_t *)(v1 + OBJC_IVAR___SKRConversationCommitResult_nextPluginActionData);
      unint64_t v24 = *(void *)(v1 + OBJC_IVAR___SKRConversationCommitResult_nextPluginActionData + 8);
      if (v24 >> 60 == 15)
      {
        specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000067, 0x80000001BA065360, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/RemoteConversation/XPCTypes/ConversationCommitResult.swift", 127, 2, 184);
        __break(1u);
LABEL_35:
        for (uint64_t i = v29; ; uint64_t i = v21)
        {
LABEL_29:
          _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
          __break(1u);
LABEL_30:
          specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD00000000000006ALL, 0x80000001BA065270, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/RemoteConversation/XPCTypes/ConversationCommitResult.swift", 127, 2, 190);
          __break(1u);
LABEL_31:
          specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000056, 0x80000001BA0653D0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/RemoteConversation/XPCTypes/ConversationCommitResult.swift", 127, 2, 169);
          __break(1u);
LABEL_32:
          specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000057, 0x80000001BA065430, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/RemoteConversation/XPCTypes/ConversationCommitResult.swift", 127, 2, 160);
          __break(1u);
LABEL_33:
          ;
        }
      }
      outlined copy of Data._Representation(*v23, v24);
      uint64_t v25 = v31[1];
      uint64_t result = PluginAction.init(data:)();
      if (!v25)
      {
        (*(void (**)(void *, char *, uint64_t))(v4 + 32))(a1, v6, v3);
        type metadata accessor for ConversationCommitResult();
        return swift_storeEnumTagMultiPayload();
      }
      return result;
    case 4:
      uint64_t v16 = (void *)(v1 + OBJC_IVAR___SKRConversationCommitResult_reparseExecutionRequestID);
      uint64_t v17 = *(void *)(v1 + OBJC_IVAR___SKRConversationCommitResult_reparseExecutionRequestID + 8);
      if (!v17) {
        goto LABEL_30;
      }
      uint64_t v18 = (uint64_t *)(v1 + OBJC_IVAR___SKRConversationCommitResult_reparseUserID);
      uint64_t v19 = *(void *)(v1 + OBJC_IVAR___SKRConversationCommitResult_reparseUserID + 8);
      if (!v19) {
        goto LABEL_30;
      }
      uint64_t v20 = *v18;
      *a1 = *v16;
      a1[1] = v17;
      a1[2] = v20;
      a1[3] = v19;
      type metadata accessor for ConversationCommitResult();
LABEL_13:
      swift_storeEnumTagMultiPayload();
      swift_bridgeObjectRetain();
      return swift_bridgeObjectRetain();
    default:
      uint64_t i = *(void *)(v1 + OBJC_IVAR___SKRConversationCommitResult_type);
      goto LABEL_29;
  }
}

void *initializeWithCopy for ConversationCommitResult(void *a1, void *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v10 = type metadata accessor for FlowUnhandledReason();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      break;
    case 2u:
      uint64_t v6 = type metadata accessor for PluginAction();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      break;
    case 3u:
      uint64_t v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      uint64_t v8 = a2[2];
      uint64_t v9 = a2[3];
      a1[2] = v8;
      a1[3] = v9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t destroy for ConversationCommitResult(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 3:
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 1:
      uint64_t v3 = type metadata accessor for FlowUnhandledReason();
      goto LABEL_4;
    case 2:
      uint64_t v3 = type metadata accessor for PluginAction();
LABEL_4:
      uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
      uint64_t result = v4(a1, v3);
      break;
    default:
      return result;
  }
  return result;
}

Swift::Void __swiftcall ConversationService.ExecutionTaskContext.registerTasks(activeTasks:completedTasks:)(Swift::OpaquePointer activeTasks, Swift::OpaquePointer completedTasks)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    unint64_t v33 = v8;
    uint64_t v13 = v12;
    uint64_t v32 = swift_slowAlloc();
    v35[0] = v32;
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v14 = type metadata accessor for Siri_Nlu_External_Task();
    uint64_t v15 = swift_bridgeObjectRetain();
    uint64_t v16 = MEMORY[0x1BA9E3080](v15, v14);
    unint64_t v18 = v17;
    swift_bridgeObjectRelease();
    uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    uint64_t v19 = swift_bridgeObjectRetain();
    uint64_t v20 = MEMORY[0x1BA9E3080](v19, v14);
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v10, v11, "[ConversationService]: Registering ExecutionTaskContext with activeTasks: %s, completedTasks: %s", (uint8_t *)v13, 0x16u);
    uint64_t v23 = v32;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v23, -1, -1);
    uint64_t v24 = v13;
    uint64_t v8 = v33;
    MEMORY[0x1BA9E48C0](v24, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  v3[2]._rawValue = activeTasks._rawValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v3[3]._rawValue = completedTasks._rawValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v3[4]._rawValue)
  {
    uint64_t v25 = swift_retain();
    MEMORY[0x1BA9E3300](v25, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
    swift_release();
  }
  uint64_t v26 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v8, 1, 1, v26);
  uint64_t v27 = one-time initialization token for shared;
  swift_retain();
  if (v27 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v28 = static MessageBusActor.shared;
  uint64_t v30 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v29, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  uint64_t v31 = (void *)swift_allocObject();
  void v31[2] = v28;
  v31[3] = v30;
  v31[4] = v3;
  swift_retain();
  v3[4]._rawValue = (void *)_sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationService.ExecutionTaskContext.registerTasks(activeTasks:completedTasks:), (uint64_t)v31);
  swift_release();
}

uint64_t protocol witness for DecisionMaking.commitConversation(_:) in conformance DecisionEngine(uint64_t a1)
{
  *(void *)(v2 + 64) = a1;
  *(void *)(v2 + 72) = v1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v3 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](protocol witness for DecisionMaking.commitConversation(_:) in conformance DecisionEngine, v3, 0);
}

uint64_t RemoteConversationClient.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 128);
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return MEMORY[0x1F4188210](v0);
}

uint64_t SharedFlowPluginConnection.__deallocating_deinit()
{
  SharedFlowPluginConnection.deinit();

  return swift_deallocClassInstance();
}

uint64_t SharedFlowPluginConnection.deinit()
{
  (*(void (**)(void))(**(void **)(*(void *)(v0 + 72) + 32) + 128))(*(void *)(v0 + 80));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

Swift::Void __swiftcall SharedFlowPluginServiceClient.LoadedConversationTracker.releaseLoadedConversation(serial:)(Swift::Int serial)
{
  uint64_t v3 = (uint64_t *)(v1 + 16);
  swift_beginAccess();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(serial);
  if (v5)
  {
    unint64_t v6 = v4;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    uint64_t v9 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v8 = v9;
    }
    specialized _NativeDictionary._delete(at:)(v6, v8);
    *uint64_t v3 = v8;
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_release();
  }
  else
  {
    swift_endAccess();
  }
}

uint64_t SendableRemoteConversationXPCWrapper.__deallocating_deinit()
{
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t InterruptibleTaskManager.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t RemoteConversationClient.isEmpty()()
{
  uint64_t v8 = v0;
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v7 = v4;
    *(_DWORD *)uint64_t v3 = 136446210;
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x287974706D457369, 0xE900000000000029, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v1, v2, "Connection to RemoteConversation was invalidated while calling %{public}s. Will return true.", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v4, -1, -1);
    MEMORY[0x1BA9E48C0](v3, -1, -1);
  }

  char v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v5(1);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t (*v9)(void *, void *, void, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[3];
  os_log_type_t v2 = type metadata accessor for Logger();
  v0[4] = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v3 = v1 + 16;
  uint64_t v4 = v1[19];
  char v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  uint64_t v9 = (uint64_t (*)(void *, void *, void, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 16)
                                                                                   + **(int **)(v5 + 16));
  unint64_t v6 = (void *)swift_task_alloc();
  v0[5] = v6;
  *unint64_t v6 = v0;
  v6[1] = RemoteConversationClient.isEmpty();
  uint64_t v7 = MEMORY[0x1E4FBB390];
  return v9(v0 + 6, &async function pointer to closure #1 in RemoteConversationClient.isEmpty(), 0, v7, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 24) = v0;
  return MEMORY[0x1F4188298](RemoteConversationClient.isEmpty(), v0, 0);
}

{
  uint64_t v0;
  int v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  uint64_t v10 = v0;
  uint64_t v1 = *(unsigned __int8 *)(v0 + 48);
  if (v1 == 2)
  {
    os_log_type_t v2 = Logger.logObject.getter();
    uint64_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      char v5 = swift_slowAlloc();
      uint64_t v9 = v5;
      *(_DWORD *)uint64_t v4 = 136446210;
      *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x287974706D457369, 0xE900000000000029, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v2, v3, "Connection to RemoteConversation was invalidated while calling %{public}s. Will return true.", v4, 0xCu);
      unint64_t v6 = 1;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v5, -1, -1);
      MEMORY[0x1BA9E48C0](v4, -1, -1);
    }
    else
    {

      unint64_t v6 = 1;
    }
  }
  else
  {
    unint64_t v6 = v1 & 1;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v7(v6);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  os_log_type_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 24);
  if (v0)
  {

    uint64_t v4 = RemoteConversationClient.isEmpty();
  }
  else
  {
    uint64_t v4 = RemoteConversationClient.isEmpty();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

uint64_t ConversationBridgeProcessorDelegate.__deallocating_deinit()
{
  swift_weakDestroy();
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t closure #1 in RemoteConversationClient.isEmpty()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationClient.isEmpty(), 0, 0);
}

uint64_t closure #1 in RemoteConversationClient.cancel()()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationClient.flexibleExecutionSupportOptions(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  void *v15;
  uint64_t v16;

  uint64_t v15 = v0;
  uint64_t v1 = v0[4];
  if (v1)
  {
    os_log_type_t v2 = v0[5];
    uint64_t v3 = swift_task_alloc();
    v0[6] = v3;
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    swift_unknownObjectRetain();
    uint64_t v4 = (void *)swift_task_alloc();
    v0[7] = v4;
    *uint64_t v4 = v0;
    v4[1] = closure #1 in RemoteConversationClient.cancel();
    char v5 = v0[3];
    unint64_t v6 = MEMORY[0x1E4FBC848] + 8;
    return MEMORY[0x1F41880D8](v5, 0, 0, 0x29286C65636E6163, 0xE800000000000000, partial apply for closure #1 in closure #1 in RemoteConversationClient.cancel(), v3, v6);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
    uint64_t v8 = Logger.logObject.getter();
    uint64_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v11 = swift_slowAlloc();
      uint64_t v14 = v11;
      *(_DWORD *)uint64_t v10 = 136446210;
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x29286C65636E6163, 0xE800000000000000, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v8, v9, "Tried to call %{public}s on an invalid connection to a RemoteConversation. Will not reconnect until a StartTurn comes in.", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v11, -1, -1);
      MEMORY[0x1BA9E48C0](v10, -1, -1);
    }

    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t closure #1 in RemoteConversationClient.isEmpty()()
{
  uint64_t v15 = v0;
  uint64_t v1 = v0[4];
  if (v1)
  {
    uint64_t v2 = v0[5];
    uint64_t v3 = swift_task_alloc();
    v0[6] = v3;
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    swift_unknownObjectRetain();
    uint64_t v4 = (void *)swift_task_alloc();
    v0[7] = v4;
    *uint64_t v4 = v0;
    v4[1] = closure #1 in RemoteConversationClient.cancel();
    uint64_t v5 = v0[3];
    uint64_t v6 = MEMORY[0x1E4FBB390];
    return MEMORY[0x1F41880D8](v5, 0, 0, 0x287974706D457369, 0xE900000000000029, partial apply for closure #1 in closure #1 in RemoteConversationClient.isEmpty(), v3, v6);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v14 = v11;
      *(_DWORD *)uint64_t v10 = 136446210;
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x287974706D457369, 0xE900000000000029, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v8, v9, "Tried to call %{public}s on an invalid connection to a RemoteConversation. Will not reconnect until a StartTurn comes in.", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v11, -1, -1);
      MEMORY[0x1BA9E48C0](v10, -1, -1);
    }

    *(unsigned char *)v0[3] = 1;
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ObjCBool) -> ()(char a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, a1 & 1);
}

uint64_t RemoteConversationClient.isCorrectable()()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = type metadata accessor for Logger();
  v0[4] = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v3 = v1 + 16;
  uint64_t v4 = v1[19];
  uint64_t v5 = v1[20];
  __swift_project_boxed_opaque_existential_1(v3, v4);
  os_log_type_t v9 = (uint64_t (*)(void *, void *, void, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 16)
                                                                                   + **(int **)(v5 + 16));
  uint64_t v6 = (void *)swift_task_alloc();
  v0[5] = v6;
  *uint64_t v6 = v0;
  v6[1] = RemoteConversationClient.isCorrectable();
  uint64_t v7 = MEMORY[0x1E4FBB390];
  return v9(v0 + 6, &async function pointer to closure #1 in RemoteConversationClient.isCorrectable(), 0, v7, v4, v5);
}

{
  uint64_t v0;
  int v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  uint64_t v10 = v0;
  uint64_t v1 = *(unsigned __int8 *)(v0 + 48);
  if (v1 == 2)
  {
    uint64_t v2 = Logger.logObject.getter();
    uint64_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v5 = swift_slowAlloc();
      os_log_type_t v9 = v5;
      *(_DWORD *)uint64_t v4 = 136446210;
      *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x636572726F437369, 0xEF2928656C626174, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v2, v3, "Connection to RemoteConversation was invalidated while calling %{public}s. Will return false.", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v5, -1, -1);
      MEMORY[0x1BA9E48C0](v4, -1, -1);
    }

    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = v1 & 1;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v7(v6);
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 24) = v0;
  return MEMORY[0x1F4188298](RemoteConversationClient.isCorrectable(), v0, 0);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v8 = v0;
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v7 = v4;
    *(_DWORD *)uint64_t v3 = 136446210;
    *(void *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x636572726F437369, 0xEF2928656C626174, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v1, v2, "Connection to RemoteConversation was invalidated while calling %{public}s. Will return false.", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v4, -1, -1);
    MEMORY[0x1BA9E48C0](v3, -1, -1);
  }

  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5(0);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 24);
  if (v0)
  {

    uint64_t v4 = RemoteConversationClient.isCorrectable();
  }
  else
  {
    uint64_t v4 = RemoteConversationClient.isCorrectable();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

uint64_t closure #1 in RemoteConversationClient.isCorrectable()()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationClient.warmup(refId:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  void *v15;
  uint64_t v16;

  uint64_t v15 = v0;
  uint64_t v1 = v0[4];
  if (v1)
  {
    uint64_t v2 = v0[5];
    uint64_t v3 = swift_task_alloc();
    v0[6] = v3;
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    swift_unknownObjectRetain();
    uint64_t v4 = (void *)swift_task_alloc();
    v0[7] = v4;
    *uint64_t v4 = v0;
    v4[1] = closure #1 in RemoteConversationClient.isCorrectable();
    uint64_t v5 = v0[3];
    uint64_t v6 = MEMORY[0x1E4FBB390];
    return MEMORY[0x1F41880D8](v5, 0, 0, 0x636572726F437369, 0xEF2928656C626174, partial apply for closure #1 in closure #1 in RemoteConversationClient.isCorrectable(), v3, v6);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v14 = v11;
      *(_DWORD *)uint64_t v10 = 136446210;
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x636572726F437369, 0xEF2928656C626174, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v8, v9, "Tried to call %{public}s on an invalid connection to a RemoteConversation. Will not reconnect until a StartTurn comes in.", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v11, -1, -1);
      MEMORY[0x1BA9E48C0](v10, -1, -1);
    }

    *(unsigned char *)v0[3] = 0;
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t closure #1 in RemoteConversationClient.isCorrectable()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationClient.isCorrectable(), 0, 0);
}

uint64_t partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.prepareForAudioHandoff()()
{
  return CheckedContinuation.resume(returning:)();
}

void ConversationBridgeProcessorDelegate.close(withExecutionOutput:needsUserInput:)(void *a1, char a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void *, void))(*(void *)Strong + 1016))(a1, a2 & 1);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationBridge);
    uint64_t v6 = a1;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v13 = v10;
      *(_DWORD *)os_log_type_t v9 = 136315138;
      uint64_t v11 = *(void *)&v6[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
      unint64_t v12 = *(void *)&v6[OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v7, v8, "ConversationRequestProcessor already released, ignoring close of %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v10, -1, -1);
      MEMORY[0x1BA9E48C0](v9, -1, -1);
    }
    else
    {
    }
  }
}

void ConversationRequestProcessor.close(withExecutionOutput:needsUserInput:)(void *a1)
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  id v3 = a1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v12 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    id v8 = objc_msgSend(v3, sel_debugDescription);
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v11 = v10;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v4, v5, "<<<--- %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v7, -1, -1);
    MEMORY[0x1BA9E48C0](v6, -1, -1);
  }
  else
  {
  }
  ConversationRequestProcessor.closeInternal(_:_:_:)((char *)v3, 0, 0, 0);
}

uint64_t ServerFallbackCapableRequestProcessor.requestHandledOnServer.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_requestHandledOnServer);
  swift_beginAccess();
  return *v1;
}

uint64_t ResultCandidateState.commitSignpostID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_loggingMetadata;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for ResultCandidateState.LoggingMetadata(0);
  return outlined init with copy of ReferenceResolutionClientProtocol?(v3 + *(int *)(v4 + 20), a1, &demangling cache variable for type metadata for OSSignpostID?);
}

uint64_t ConversationService.cleanupEmptyActiveConversations()()
{
  uint64_t v10 = v0;
  int v1 = *(unsigned __int8 *)(v0 + 232);
  *(unsigned char *)(v0 + 233) = v1;
  if (v1 == 2)
  {
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = swift_slowAlloc();
      uint64_t v5 = swift_slowAlloc();
      uint64_t v9 = v5;
      *(_DWORD *)uint64_t v4 = 136446210;
      *(void *)(v4 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x287974706D457369, 0xE900000000000029, &v9);
      _os_log_impl(&dword_1B9C64000, v2, v3, "Connection to RemoteConversation was invalidated while calling %{public}s. Will return true.", (uint8_t *)v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v5, -1, -1);
      MEMORY[0x1BA9E48C0](v4, -1, -1);
    }

    uint64_t v6 = *(void *)(v0 + 160);
    uint64_t v7 = ConversationService.cleanupEmptyActiveConversations();
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 160);
    uint64_t v7 = ConversationService.cleanupEmptyActiveConversations();
  }
  return MEMORY[0x1F4188298](v7, v6, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v24;

  int v1 = swift_retain();
  MEMORY[0x1BA9E3030](v1);
  if (*(void *)((v0[16] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v0[16] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  uint64_t v2 = (uint64_t (*)())swift_release();
  uint64_t v5 = v0[25];
  uint64_t v6 = v0[26];
  uint64_t v7 = v0[21];
  if (v7 < 0)
  {
    uint64_t v12 = __CocoaSet.Iterator.next()();
    if (!v12) {
      goto LABEL_27;
    }
    v0[18] = v12;
    type metadata accessor for RemoteConversationClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v11 = v0[17];
    swift_unknownObjectRelease();
    uint64_t v10 = v5;
    id v8 = v6;
    goto LABEL_9;
  }
  if (v6)
  {
    id v8 = (v6 - 1) & v6;
    uint64_t v9 = __clz(__rbit64(v6)) | (v5 << 6);
    uint64_t v10 = v0[25];
LABEL_6:
    uint64_t v11 = *(void *)(*(void *)(v7 + 48) + 8 * v9);
    swift_retain();
LABEL_9:
    v0[25] = v10;
    v0[26] = v8;
    v0[24] = v11;
    if (v11)
    {
      uint64_t v2 = ConversationService.cleanupEmptyActiveConversations();
      os_log_type_t v3 = v11;
      uint64_t v4 = 0;
      return MEMORY[0x1F4188298](v2, v3, v4);
    }
    goto LABEL_27;
  }
  uint64_t v13 = v5 + 1;
  if (__OFADD__(v5, 1)) {
    goto LABEL_40;
  }
  uint64_t v14 = (unint64_t)(v0[23] + 64) >> 6;
  if (v13 < v14)
  {
    uint64_t v15 = v0[22];
    uint64_t v16 = *(void *)(v15 + 8 * v13);
    uint64_t v10 = v5 + 1;
    if (!v16)
    {
      uint64_t v10 = v5 + 2;
      if (v5 + 2 >= v14) {
        goto LABEL_27;
      }
      uint64_t v16 = *(void *)(v15 + 8 * v10);
      if (!v16)
      {
        uint64_t v10 = v5 + 3;
        if (v5 + 3 >= v14) {
          goto LABEL_27;
        }
        uint64_t v16 = *(void *)(v15 + 8 * v10);
        if (!v16)
        {
          uint64_t v10 = v5 + 4;
          if (v5 + 4 >= v14) {
            goto LABEL_27;
          }
          uint64_t v16 = *(void *)(v15 + 8 * v10);
          if (!v16)
          {
            unint64_t v17 = v5 + 5;
            while (v14 != v17)
            {
              uint64_t v16 = *(void *)(v15 + 8 * v17++);
              if (v16)
              {
                uint64_t v10 = v17 - 1;
                goto LABEL_16;
              }
            }
            goto LABEL_27;
          }
        }
      }
    }
LABEL_16:
    id v8 = (v16 - 1) & v16;
    uint64_t v9 = __clz(__rbit64(v16)) + (v10 << 6);
    goto LABEL_6;
  }
LABEL_27:
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  uint64_t v2 = (uint64_t (*)())swift_release();
  unint64_t v18 = v0[16];
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = (uint64_t (*)())swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v19)
    {
LABEL_29:
      if (v19 >= 1)
      {
        uint64_t v20 = 0;
        do
        {
          if ((v18 & 0xC000000000000001) != 0)
          {
            unint64_t v21 = MEMORY[0x1BA9E3990](v20, v18);
          }
          else
          {
            unint64_t v21 = *(void *)(v18 + 8 * v20 + 32);
            swift_retain();
          }
          ++v20;
          swift_beginAccess();
          specialized Set._Variant.remove(_:)(v21);
          swift_endAccess();
          swift_release();
          swift_release();
        }
        while (v19 != v20);
        goto LABEL_36;
      }
      __break(1u);
LABEL_40:
      __break(1u);
      return MEMORY[0x1F4188298](v2, v3, v4);
    }
  }
LABEL_36:
  swift_bridgeObjectRelease();
  unint64_t v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v24;

  if (*(unsigned char *)(v0 + 233))
  {
    int v1 = swift_retain();
    MEMORY[0x1BA9E3030](v1);
    if (*(void *)((*(void *)(v0 + 128) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 128) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  uint64_t v2 = (uint64_t (*)())swift_release();
  uint64_t v5 = *(void *)(v0 + 200);
  uint64_t v6 = *(void *)(v0 + 208);
  uint64_t v7 = *(void *)(v0 + 168);
  if (v7 < 0)
  {
    uint64_t v12 = __CocoaSet.Iterator.next()();
    if (!v12) {
      goto LABEL_29;
    }
    *(void *)(v0 + 144) = v12;
    type metadata accessor for RemoteConversationClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v11 = *(void *)(v0 + 136);
    swift_unknownObjectRelease();
    uint64_t v10 = v5;
    id v8 = v6;
    goto LABEL_11;
  }
  if (v6)
  {
    id v8 = (v6 - 1) & v6;
    uint64_t v9 = __clz(__rbit64(v6)) | (v5 << 6);
    uint64_t v10 = *(void *)(v0 + 200);
LABEL_8:
    uint64_t v11 = *(void *)(*(void *)(v7 + 48) + 8 * v9);
    swift_retain();
LABEL_11:
    *(void *)(v0 + 200) = v10;
    *(void *)(v0 + 208) = v8;
    *(void *)(v0 + 192) = v11;
    if (v11)
    {
      uint64_t v2 = ConversationService.cleanupEmptyActiveConversations();
      os_log_type_t v3 = v11;
      uint64_t v4 = 0;
      return MEMORY[0x1F4188298](v2, v3, v4);
    }
    goto LABEL_29;
  }
  uint64_t v13 = v5 + 1;
  if (__OFADD__(v5, 1)) {
    goto LABEL_42;
  }
  uint64_t v14 = (unint64_t)(*(void *)(v0 + 184) + 64) >> 6;
  if (v13 < v14)
  {
    uint64_t v15 = *(void *)(v0 + 176);
    uint64_t v16 = *(void *)(v15 + 8 * v13);
    uint64_t v10 = v5 + 1;
    if (!v16)
    {
      uint64_t v10 = v5 + 2;
      if (v5 + 2 >= v14) {
        goto LABEL_29;
      }
      uint64_t v16 = *(void *)(v15 + 8 * v10);
      if (!v16)
      {
        uint64_t v10 = v5 + 3;
        if (v5 + 3 >= v14) {
          goto LABEL_29;
        }
        uint64_t v16 = *(void *)(v15 + 8 * v10);
        if (!v16)
        {
          uint64_t v10 = v5 + 4;
          if (v5 + 4 >= v14) {
            goto LABEL_29;
          }
          uint64_t v16 = *(void *)(v15 + 8 * v10);
          if (!v16)
          {
            unint64_t v17 = v5 + 5;
            while (v14 != v17)
            {
              uint64_t v16 = *(void *)(v15 + 8 * v17++);
              if (v16)
              {
                uint64_t v10 = v17 - 1;
                goto LABEL_18;
              }
            }
            goto LABEL_29;
          }
        }
      }
    }
LABEL_18:
    id v8 = (v16 - 1) & v16;
    uint64_t v9 = __clz(__rbit64(v16)) + (v10 << 6);
    goto LABEL_8;
  }
LABEL_29:
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  uint64_t v2 = (uint64_t (*)())swift_release();
  unint64_t v18 = *(void *)(v0 + 128);
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = (uint64_t (*)())swift_bridgeObjectRelease();
    if (v19) {
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v19 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v19)
    {
LABEL_31:
      if (v19 >= 1)
      {
        uint64_t v20 = 0;
        do
        {
          if ((v18 & 0xC000000000000001) != 0)
          {
            unint64_t v21 = MEMORY[0x1BA9E3990](v20, v18);
          }
          else
          {
            unint64_t v21 = *(void *)(v18 + 8 * v20 + 32);
            swift_retain();
          }
          ++v20;
          swift_beginAccess();
          specialized Set._Variant.remove(_:)(v21);
          swift_endAccess();
          swift_release();
          swift_release();
        }
        while (v19 != v20);
        goto LABEL_38;
      }
      __break(1u);
LABEL_42:
      __break(1u);
      return MEMORY[0x1F4188298](v2, v3, v4);
    }
  }
LABEL_38:
  swift_bridgeObjectRelease();
  unint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v29;

  v0[16] = MEMORY[0x1E4FBC860];
  int v1 = v0[19];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 104);
  if ((v2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for RemoteConversationClient();
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3(&lazy protocol witness table cache variable for type RemoteConversationClient and conformance RemoteConversationClient, 255, (void (*)(uint64_t))type metadata accessor for RemoteConversationClient);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v0[2];
    uint64_t v6 = v0[3];
    id v8 = v0[4];
    uint64_t v7 = v0[5];
    uint64_t v9 = v0[6];
    v0[22] = v6;
    v0[23] = v8;
    v0[21] = v5;
    if (v5 < 0)
    {
      unint64_t v21 = __CocoaSet.Iterator.next()();
      if (!v21) {
        goto LABEL_30;
      }
      v0[18] = v21;
      swift_unknownObjectRetain();
      swift_dynamicCast();
      uint64_t v13 = v0[17];
      swift_unknownObjectRelease();
      uint64_t v12 = v7;
      uint64_t v10 = v9;
      goto LABEL_6;
    }
    if (v9) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v14 = -1 << *(unsigned char *)(v2 + 32);
    id v8 = ~v14;
    uint64_t v6 = v2 + 56;
    uint64_t v15 = *(void *)(v2 + 56);
    uint64_t v16 = -v14;
    v0[22] = v2 + 56;
    v0[23] = v8;
    if (v16 < 64) {
      unint64_t v17 = ~(-1 << v16);
    }
    else {
      unint64_t v17 = -1;
    }
    uint64_t v9 = v17 & v15;
    v0[21] = v2;
    uint64_t v5 = swift_bridgeObjectRetain();
    uint64_t v7 = 0;
    if (v9)
    {
LABEL_4:
      uint64_t v10 = (v9 - 1) & v9;
      uint64_t v11 = __clz(__rbit64(v9)) | (v7 << 6);
      uint64_t v12 = v7;
LABEL_5:
      uint64_t v13 = *(void *)(*(void *)(v5 + 48) + 8 * v11);
      swift_retain();
LABEL_6:
      v0[25] = v12;
      v0[26] = v10;
      v0[24] = v13;
      if (v13)
      {
        uint64_t v5 = (uint64_t)ConversationService.cleanupEmptyActiveConversations();
        os_log_type_t v3 = v13;
        uint64_t v4 = 0;
        return MEMORY[0x1F4188298](v5, v3, v4);
      }
      goto LABEL_30;
    }
  }
  unint64_t v18 = v7 + 1;
  if (__OFADD__(v7, 1)) {
    goto LABEL_43;
  }
  uint64_t v19 = (unint64_t)(v8 + 64) >> 6;
  if (v18 < v19)
  {
    uint64_t v20 = *(void *)(v6 + 8 * v18);
    uint64_t v12 = v7 + 1;
    if (!v20)
    {
      uint64_t v12 = v7 + 2;
      if (v7 + 2 >= v19) {
        goto LABEL_30;
      }
      uint64_t v20 = *(void *)(v6 + 8 * v12);
      if (!v20)
      {
        uint64_t v12 = v7 + 3;
        if (v7 + 3 >= v19) {
          goto LABEL_30;
        }
        uint64_t v20 = *(void *)(v6 + 8 * v12);
        if (!v20)
        {
          uint64_t v12 = v7 + 4;
          if (v7 + 4 >= v19) {
            goto LABEL_30;
          }
          uint64_t v20 = *(void *)(v6 + 8 * v12);
          if (!v20)
          {
            unint64_t v22 = v7 + 5;
            while (v19 != v22)
            {
              uint64_t v20 = *(void *)(v6 + 8 * v22++);
              if (v20)
              {
                uint64_t v12 = v22 - 1;
                goto LABEL_17;
              }
            }
            goto LABEL_30;
          }
        }
      }
    }
LABEL_17:
    uint64_t v10 = (v20 - 1) & v20;
    uint64_t v11 = __clz(__rbit64(v20)) + (v12 << 6);
    goto LABEL_5;
  }
LABEL_30:
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  uint64_t v5 = swift_release();
  uint64_t v23 = v0[16];
  if (v23 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v5 = swift_bridgeObjectRelease();
    if (v24) {
      goto LABEL_32;
    }
  }
  else
  {
    uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v24)
    {
LABEL_32:
      if (v24 >= 1)
      {
        uint64_t v25 = 0;
        do
        {
          if ((v23 & 0xC000000000000001) != 0)
          {
            uint64_t v26 = MEMORY[0x1BA9E3990](v25, v23);
          }
          else
          {
            uint64_t v26 = *(void *)(v23 + 8 * v25 + 32);
            swift_retain();
          }
          ++v25;
          swift_beginAccess();
          specialized Set._Variant.remove(_:)(v26);
          swift_endAccess();
          swift_release();
          swift_release();
        }
        while (v24 != v25);
        goto LABEL_39;
      }
      __break(1u);
LABEL_43:
      __break(1u);
      return MEMORY[0x1F4188298](v5, v3, v4);
    }
  }
LABEL_39:
  swift_bridgeObjectRelease();
  uint64_t v27 = (uint64_t (*)(void))v0[1];
  return v27();
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  os_log_type_t v3 = *(void *)(v2 + 192);
  if (v0)
  {

    uint64_t v4 = ConversationService.cleanupEmptyActiveConversations();
  }
  else
  {
    uint64_t v4 = ConversationService.cleanupEmptyActiveConversations();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  *(void *)(v1 + 152) = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = static MessageBusActor.shared;
  *(void *)(v1 + 160) = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](ConversationService.cleanupEmptyActiveConversations(), v2, 0);
}

{
  void *v0;
  uint64_t v1;
  os_log_type_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t (*v17)(void *, void *, void, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  void *v19;
  uint64_t v20;

  uint64_t v19 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  int v1 = type metadata accessor for Logger();
  v0[27] = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  uint64_t v2 = static os_log_type_t.debug.getter();
  os_log_type_t v3 = Logger.logObject.getter();
  uint64_t v4 = v2;
  if (os_log_type_enabled(v3, v2))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    unint64_t v18 = v6;
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v7 = StaticString.description.getter();
    *(void *)(v5 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v18);
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2080;
    uint64_t v9 = StaticString.description.getter();
    *(void *)(v5 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v18);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v3, v4, "%s:%s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v6, -1, -1);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  uint64_t v11 = (void *)v0[24];
  uint64_t v12 = v11[19];
  uint64_t v13 = v11[20];
  __swift_project_boxed_opaque_existential_1(v11 + 16, v12);
  unint64_t v17 = (uint64_t (*)(void *, void *, void, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 16)
                                                                                    + **(int **)(v13 + 16));
  uint64_t v14 = (void *)swift_task_alloc();
  v0[28] = v14;
  *uint64_t v14 = v0;
  v14[1] = ConversationService.cleanupEmptyActiveConversations();
  uint64_t v15 = MEMORY[0x1E4FBB390];
  return v17(v0 + 29, &async function pointer to closure #1 in RemoteConversationClient.isEmpty(), 0, v15, v12, v13);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  id v8 = v0;
  int v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v7 = v4;
    *(_DWORD *)os_log_type_t v3 = 136446210;
    *(void *)(v3 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x287974706D457369, 0xE900000000000029, &v7);
    _os_log_impl(&dword_1B9C64000, v1, v2, "Connection to RemoteConversation was invalidated while calling %{public}s. Will return true.", (uint8_t *)v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v4, -1, -1);
    MEMORY[0x1BA9E48C0](v3, -1, -1);
  }

  uint64_t v5 = *(void *)(v0 + 160);
  return MEMORY[0x1F4188298](ConversationService.cleanupEmptyActiveConversations(), v5, 0);
}

uint64_t CommitResultCandidateId.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t closure #1 in JetsamHelper.releaseJetsamTransaction()@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  swift_retain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v16 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v10 = *(void *)(a1 + 16);
    unint64_t v9 = *(void *)(a1 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v5, v6, "os_transaction(%s) end", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }
  else
  {

    swift_release();
  }
  uint64_t v11 = (void *)(a1 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction);
  uint64_t v12 = *(void *)(a1 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction);
  uint64_t v13 = *(void *)(a1 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction + 8);
  BOOL v14 = v13 != 0;
  *uint64_t v11 = 0;
  v11[1] = 0;
  uint64_t result = outlined consume of (transaction: OS_os_transaction?, timer: OS_dispatch_source_timer)?(v12, v13);
  *a2 = v14;
  return result;
}

void ConversationRequestProcessor.synchronizedCloseRequest()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 1184))(v3);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v0 + 456))(v6))
  {
    ConversationRequestProcessor.completeRequest(completion:)(0, 0);
  }
  else
  {
    uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v0 + 592))();
    if (v7)
    {
      uint64_t v8 = (void *)(v7 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
      swift_beginAccess();
      if (*v8 >> 62 == 1)
      {
        uint64_t v9 = *v8 & 0x3FFFFFFFFFFFFFFFLL;
        uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_asyncWork);
        uint64_t v11 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v5, 1, 1, v11);
        uint64_t v12 = one-time initialization token for shared;
        swift_retain_n();
        swift_retain();
        if (v12 != -1) {
          swift_once();
        }
        swift_beginAccess();
        uint64_t v13 = static MessageBusActor.shared;
        uint64_t v14 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
        uint64_t v15 = (void *)swift_allocObject();
        v15[2] = v13;
        v15[3] = v14;
        v15[4] = v1;
        v15[5] = v9;
        swift_retain();
        _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v5, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationRequestProcessor.synchronizedCloseRequest(), (uint64_t)v15);
        (*(void (**)(void))(*(void *)v10 + 120))();
        swift_release();
        swift_release();
      }
      else
      {
        if (one-time initialization token for conversationBridge != -1) {
          swift_once();
        }
        uint64_t v20 = type metadata accessor for Logger();
        __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
        unint64_t v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v23 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v23 = 0;
          _os_log_impl(&dword_1B9C64000, v21, v22, "Close called before an RC was selected.", v23, 2u);
          MEMORY[0x1BA9E48C0](v23, -1, -1);
        }

        ConversationRequestProcessor.completeRequest(completion:)(0, 0);
      }
      swift_release();
    }
    else
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
      os_log_t v25 = (os_log_t)Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v17))
      {
        unint64_t v18 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v18 = 0;
        _os_log_impl(&dword_1B9C64000, v25, v17, "Ignoring synchronizedCloseRequest as we are not in a turn", v18, 2u);
        MEMORY[0x1BA9E48C0](v18, -1, -1);
      }
      os_log_t v19 = v25;
    }
  }
}

Swift::Void __swiftcall ConversationRequestProcessor.safelyCloseContextUpdater()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_asyncWork);
  uint64_t v6 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v4, 1, 1, v6);
  uint64_t v7 = one-time initialization token for shared;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v8 = static MessageBusActor.shared;
  uint64_t v9 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  uint64_t v10 = (void *)swift_allocObject();
  long long v10[2] = v8;
  v10[3] = v9;
  v10[4] = v1;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationRequestProcessor.safelyCloseContextUpdater(), (uint64_t)v10);
  (*(void (**)(void))(*(void *)v5 + 120))();
  swift_release();
}

uint64_t ConversationRequestProcessor.sentResultCandidateSelected.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sentResultCandidateSelected);
  swift_beginAccess();
  return *v1;
}

uint64_t ConversationRequestProcessorTurnState.__deallocating_deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  uint64_t v2 = type metadata accessor for RequestType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  uint64_t v3 = v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin;
  uint64_t v4 = type metadata accessor for InputOrigin();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_nlRoutingDecision, (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);

  outlined consume of ConversationRequestProcessorTurnState.SpeechState(*(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState), *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState + 8));

  return swift_deallocClassInstance();
}

void ConversationRequestProcessor.sendResultCandidateSelected(selectedResultCandidateId:isServerFallback:completion:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v30 = a5;
  HIDWORD(v29) = a3;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96938]), sel_init);
  UUID.init()();
  uint64_t v15 = UUID.uuidString.getter();
  uint64_t v17 = v16;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  unint64_t v18 = (void *)MEMORY[0x1BA9E2DD0](v15, v17);
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_setAceId_, v18);

  uint64_t v19 = v6[10];
  uint64_t v20 = v6[11];
  id v21 = v14;
  os_log_type_t v22 = (void *)MEMORY[0x1BA9E2DD0](v19, v20);
  objc_msgSend(v21, sel_setRefId_, v22);

  uint64_t v23 = (void *)MEMORY[0x1BA9E2DD0](a1, a2);
  objc_msgSend(v21, sel_setSelectedResultCandidateId_, v23);

  objc_msgSend(v21, sel_setServerFallback_, BYTE4(v29) & 1);
  (*(void (**)(uint64_t))(*v6 + 464))(1);
  uint64_t v24 = *(void **)((char *)v6
                 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_requestDispatcherServiceHelper);
  uint64_t v25 = swift_allocObject();
  uint64_t v26 = v30;
  *(void *)(v25 + 16) = a4;
  *(void *)(v25 + 24) = v26;
  aBlock[4] = partial apply for closure #1 in ConversationRequestProcessor.sendResultCandidateSelected(selectedResultCandidateId:isServerFallback:completion:);
  aBlock[5] = v25;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_29;
  uint64_t v27 = _Block_copy(aBlock);
  id v28 = v21;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed SAAceCommand?, @guaranteed Error?) -> ())?(a4);
  swift_release();
  objc_msgSend(v24, sel_handleCommand_completion_, v28, v27);
  _Block_release(v27);
}

uint64_t ConversationRequestProcessor.sentResultCandidateSelected.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sentResultCandidateSelected);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t protocol witness for ContextUpdating.close() in conformance MultiUserContextUpdater()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 272))();
}

Swift::Void __swiftcall MultiUserContextUpdater.close()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "Closing all ContextUpdater instances", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)v1 + 184))();
  specialized Sequence.forEach(_:)(v6);
  uint64_t v7 = swift_bridgeObjectRelease();
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 208))(v7);
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 480))(v8);
    swift_release();
  }
}

uint64_t MultiUserContextUpdater.userIdToContextUpdater.getter()
{
  return swift_bridgeObjectRetain();
}

Swift::Void __swiftcall ContextUpdater.close()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v70 = (uint64_t)&v66 - v6;
  uint64_t v7 = type metadata accessor for ConversationSessionKey();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_1B9C64000, v15, v16, "Closing ContextUpdater", v17, 2u);
    MEMORY[0x1BA9E48C0](v17, -1, -1);
  }

  (*(void (**)(void))(*(void *)v1 + 360))();
  uint64_t v18 = type metadata accessor for UserID();
  int v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v13, 1, v18);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  if (v19 != 1)
  {
    Swift::String v66 = v5;
    uint64_t v24 = *(void (**)(char *, void, uint64_t))(v8 + 104);
    v24(v10, *MEMORY[0x1E4FA2648], v7);
    ContextUpdater.valueFromSessionState(forKey:)(&v75);
    uint64_t v25 = *(void (**)(char *, uint64_t))(v8 + 8);
    v25(v10, v7);
    if (v76)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Siri_Nlu_External_SystemDialogAct]);
      int v26 = swift_dynamicCast();
      uint64_t v27 = v77;
      if (!v26) {
        uint64_t v27 = 0;
      }
      uint64_t v68 = v27;
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v75, (uint64_t *)&demangling cache variable for type metadata for Any?);
      uint64_t v68 = 0;
    }
    v24(v10, *MEMORY[0x1E4FA2610], v7);
    ContextUpdater.valueFromSessionState(forKey:)(&v75);
    v25(v10, v7);
    if (v76)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_Task]);
      int v28 = swift_dynamicCast();
      uint64_t v29 = v77;
      if (!v28) {
        uint64_t v29 = 0;
      }
      id v67 = v29;
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v75, (uint64_t *)&demangling cache variable for type metadata for Any?);
      id v67 = 0;
    }
    v24(v10, *MEMORY[0x1E4FA2620], v7);
    ContextUpdater.valueFromSessionState(forKey:)(&v75);
    v25(v10, v7);
    if (v76)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_Task]);
      if (swift_dynamicCast()) {
        uint64_t v30 = v77;
      }
      else {
        uint64_t v30 = 0;
      }
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v75, (uint64_t *)&demangling cache variable for type metadata for Any?);
      uint64_t v30 = 0;
    }
    uint64_t v31 = *MEMORY[0x1E4FA2668];
    uint64_t v69 = v24;
    v24(v10, v31, v7);
    ContextUpdater.valueFromSessionState(forKey:)(&v75);
    v25(v10, v7);
    if (v76)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RREntity]);
      if (swift_dynamicCast()) {
        uint64_t v32 = v77;
      }
      else {
        uint64_t v32 = 0;
      }
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v75, (uint64_t *)&demangling cache variable for type metadata for Any?);
      uint64_t v32 = 0;
    }
    v69(v10, *MEMORY[0x1E4FA2640], v7);
    ContextUpdater.valueFromSessionState(forKey:)(&v75);
    v25(v10, v7);
    if (v76)
    {
      uint64_t v33 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
      uint64_t v34 = v70;
      int v35 = swift_dynamicCast();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v34, v35 ^ 1u, 1, v33);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v75, (uint64_t *)&demangling cache variable for type metadata for Any?);
      uint64_t v36 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v70, 1, 1, v36);
    }
    uint64_t v37 = swift_beginAccess();
    if (*(void *)(*(void *)(v1 + 240) + 16)) {
      ContextUpdater.flushResponseText(legacyNLContext:)(v70);
    }
    uint64_t v38 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 384))(v37);
    char v39 = specialized Sequence<>.contains(_:)(0xD000000000000017, 0x80000001BA063F80, v38);
    swift_bridgeObjectRelease();
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_44:
      uint64_t v64 = outlined destroy of ReferenceResolutionClientProtocol?(v70, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
      (*(void (**)(uint64_t))(**(void **)(v1 + 232) + 184))(v64);
      *(void *)(v1 + 240) = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRelease();
      uint64_t v23 = (void **)(v1 + 256);
      goto LABEL_45;
    }
    os_log_type_t v40 = (objc_class *)type metadata accessor for ConversationalContextContainer();
    uint64_t v41 = (char *)objc_allocWithZone(v40);
    *(void *)&v41[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_systemDialogActs] = v68;
    *(void *)&v41[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_activeTasks] = v67;
    *(void *)&v41[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_executedTasks] = v30;
    *(void *)&v41[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_entities] = v32;
    v74.receiver = v41;
    v74.super_class = v40;
    uint64_t v68 = v25;
    id v67 = objc_msgSendSuper2(&v74, sel_init);
    uint64_t v42 = (uint64_t)v66;
    outlined init with copy of ReferenceResolutionClientProtocol?(v70, (uint64_t)v66, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
    uint64_t v43 = (objc_class *)type metadata accessor for ServerPromptData();
    id v44 = objc_allocWithZone(v43);
    outlined init with copy of ReferenceResolutionClientProtocol?(v42, (uint64_t)v44 + OBJC_IVAR____TtC14SiriKitRuntime16ServerPromptData_legacyNLContext, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
    v73.receiver = v44;
    v73.super_class = v43;
    id v45 = objc_msgSendSuper2(&v73, sel_init);
    outlined destroy of ReferenceResolutionClientProtocol?(v42, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
    uint64_t v46 = (char *)v45;
    uint64_t v47 = MEMORY[0x1E4FBC868];
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v75 = v47;
    Swift::String v66 = v46;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v46, 1, isUniquelyReferenced_nonNull_native, &v75);
    uint64_t v49 = v75;
    swift_bridgeObjectRelease();
    id v50 = v67;
    char v51 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v75 = v49;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v50, 0, v51, &v75);
    uint64_t v52 = v75;
    swift_bridgeObjectRelease();
    v69(v10, *MEMORY[0x1E4FA2658], v7);
    ContextUpdater.valueFromSessionState(forKey:)(&v75);
    v68(v10, v7);
    if (v76)
    {
      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SARDNativeFlowContextUpdate);
      if (swift_dynamicCast())
      {
        id v53 = v71;
        objc_msgSend(v71, sel_copy);
        _bridgeAnyObjectToAny(_:)();

        swift_unknownObjectRelease();
        if (swift_dynamicCast()) {
          id v54 = v71;
        }
        else {
          id v54 = 0;
        }
        goto LABEL_43;
      }
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v75, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    id v54 = 0;
LABEL_43:
    uint64_t v55 = v66;
    uint64_t updated = (objc_class *)type metadata accessor for ServerBoundContextUpdateContainer();
    unint64_t v57 = (char *)objc_allocWithZone(updated);
    *(void *)&v57[OBJC_IVAR____TtC14SiriKitRuntime33ServerBoundContextUpdateContainer_contextUpdate] = v54;
    v72.receiver = v57;
    v72.super_class = updated;
    id v58 = v54;
    id v59 = objc_msgSendSuper2(&v72, sel_init);
    char v60 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v75 = v52;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v59, 2, v60, &v75);
    uint64_t v61 = v75;
    swift_bridgeObjectRelease();
    uint64_t v62 = *(void *)(v1 + 216);
    uint64_t v63 = *(void *)(v1 + 224);
    __swift_project_boxed_opaque_existential_1((void *)(v1 + 192), v62);
    (*(void (**)(uint64_t, void (*)(), void, uint64_t, uint64_t))(v63 + 8))(v61, closure #1 in ContextUpdater.close(), 0, v62, v63);
    swift_bridgeObjectRelease();

    goto LABEL_44;
  }
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v22 = 0;
    _os_log_impl(&dword_1B9C64000, v20, v21, "Closing shared instance of ContextUpdater without further operations", v22, 2u);
    MEMORY[0x1BA9E48C0](v22, -1, -1);
  }

  (*(void (**)(void))(**(void **)(v1 + 232) + 184))();
  swift_beginAccess();
  *(void *)(v1 + 240) = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRelease();
  uint64_t v23 = (void **)(v1 + 256);
LABEL_45:
  swift_beginAccess();
  uint64_t v65 = *v23;
  void *v23 = 0;
}

Swift::Void __swiftcall SessionStateContextKeysManager.reset()()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + 16) + 16);
  os_unfair_lock_lock(v1);
  closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply(v2);
  os_unfair_lock_unlock(v1);
}

uint64_t partial apply for closure #1 in SessionStateContextKeysManager.reset()()
{
  return closure #1 in SessionStateContextKeysManager.reset()(v0);
}

uint64_t closure #1 in SessionStateContextKeysManager.reset()(uint64_t a1)
{
  *(void *)(a1 + 24) = MEMORY[0x1E4FBC868];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(a1 + 32) = MEMORY[0x1E4FBC870];
  return swift_bridgeObjectRelease();
}

void partial apply for closure #1 in ConversationRequestProcessor.sendResultCandidateSelected(selectedResultCandidateId:isServerFallback:completion:)(uint64_t a1, void *a2)
{
  closure #1 in ConversationRequestProcessor.sendResultCandidateSelected(selectedResultCandidateId:isServerFallback:completion:)(a1, a2, *(void (**)(uint64_t, void *))(v2 + 16));
}

void closure #1 in ConversationRequestProcessor.sendResultCandidateSelected(selectedResultCandidateId:isServerFallback:completion:)(uint64_t a1, void *a2, void (*a3)(uint64_t, void *))
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
  id v7 = a2;
  id v8 = a2;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v9, v10))
  {

    if (!a3) {
      return;
    }
    goto LABEL_7;
  }
  uint64_t v11 = (uint8_t *)swift_slowAlloc();
  uint64_t v12 = swift_slowAlloc();
  uint64_t v15 = v12;
  *(_DWORD *)uint64_t v11 = 136315138;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
  uint64_t v13 = Optional.debugDescription.getter();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v15);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();

  _os_log_impl(&dword_1B9C64000, v9, v10, "Sent ResultCandidateSelected to server, error: %s", v11, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1BA9E48C0](v12, -1, -1);
  MEMORY[0x1BA9E48C0](v11, -1, -1);

  if (a3) {
LABEL_7:
  }
    a3(a1, a2);
}

uint64_t ResultCandidateState.deinit()
{
  swift_bridgeObjectRelease();
  _s14SiriKitRuntime15RoutingDecisionOWOhTm_0(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_resultCandidateType, type metadata accessor for ResultCandidateType);
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId;
  uint64_t v2 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_asrLocation, &demangling cache variable for type metadata for ExecutionLocation?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlLanguageVariantResult, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_mitigationDecision, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  _s14SiriKitRuntime15RoutingDecisionOWOhTm_0(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_routingDecision, type metadata accessor for RoutingDecision);
  uint64_t v3 = v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_nlResponseStatusCode;
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_fallbackParse, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_serverFallbackReason, &demangling cache variable for type metadata for ServerFallbackReason?);
  _s14SiriKitRuntime15RoutingDecisionOWOhTm_0(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_loggingMetadata, type metadata accessor for ResultCandidateState.LoggingMetadata);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_selectedUserAttribute, &demangling cache variable for type metadata for SelectedUserAttributes?);
  return v0;
}

void ConversationRequestAwareBridgeBase.handleEndRequestInternal(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v70 = *(void *)(v4 - 8);
  uint64_t v71 = v4;
  MEMORY[0x1F4188790]();
  uint64_t v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = RequestMessageBase.requestId.getter();
  unint64_t v9 = v8;
  os_log_type_t v10 = *(uint64_t (**)(void))(*v1 + 376);
  uint64_t v11 = v10();
  if (!v11) {
    goto LABEL_7;
  }
  uint64_t v13 = *(void *)(v11 + 64);
  uint64_t v12 = *(void *)(v11 + 72);
  swift_bridgeObjectRetain();
  swift_release();
  if (v13 == v7 && v12 == v9)
  {
    uint64_t v16 = swift_bridgeObjectRelease();
  }
  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v16 = swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
LABEL_7:
      if ((*((unsigned char *)v2
            + direct field offset for ConversationRequestAwareBridgeBase.hasAutoRegisteredStartRequestMessageBase) & 1) != 0
        || (uint64_t v17 = v10(), swift_release(), v17))
      {
        id v18 = a1;
        swift_retain_n();
        unint64_t v19 = v9;
        id v20 = v18;
        swift_bridgeObjectRetain();
        objc_super v72 = Logger.logObject.getter();
        int v21 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v72, (os_log_type_t)v21))
        {
          int v67 = v21;
          uint64_t v22 = swift_slowAlloc();
          uint64_t v66 = swift_slowAlloc();
          uint64_t v74 = v66;
          *(_DWORD *)uint64_t v22 = 136315906;
          uint64_t v68 = v22 + 4;
          MessageBase.messageId.getter();
          _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
          uint64_t v23 = v71;
          uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v69 = v7;
          unint64_t v26 = v25;
          (*(void (**)(char *, uint64_t))(v70 + 8))(v6, v23);
          uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, &v74);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v22 + 12) = 2080;
          swift_getObjectType();
          uint64_t v27 = _typeName(_:qualified:)();
          uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v74);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v22 + 22) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v19, &v74);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v29 = swift_bridgeObjectRelease_n();
          *(_WORD *)(v22 + 32) = 2080;
          uint64_t v30 = ((uint64_t (*)(uint64_t))v10)(v29);
          if (v30)
          {
            uint64_t v32 = *(void *)(v30 + 64);
            unint64_t v31 = *(void *)(v30 + 72);
            swift_bridgeObjectRetain();
            swift_release();
          }
          else
          {
            unint64_t v31 = 0xE700000000000000;
            uint64_t v32 = 0x74657320746F6ELL;
          }
          os_log_type_t v62 = v67;
          uint64_t v63 = v66;
          uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v31, &v74);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v72, v62, "Got end request message to non exists request, messageId: %s type: %s requestId: %s, current requestId: %s dropping the message", (uint8_t *)v22, 0x2Au);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v63, -1, -1);
          uint64_t v45 = v22;
          goto LABEL_34;
        }
        swift_release_n();
        swift_bridgeObjectRelease_n();

        goto LABEL_37;
      }
      id v52 = a1;
      swift_bridgeObjectRetain();
      objc_super v72 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v72, v53))
      {
        uint64_t v54 = swift_slowAlloc();
        uint64_t v68 = swift_slowAlloc();
        uint64_t v74 = v68;
        *(_DWORD *)uint64_t v54 = 136315650;
        uint64_t v69 = v7;
        MessageBase.messageId.getter();
        _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v55 = v71;
        uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v58 = v57;
        (*(void (**)(char *, uint64_t))(v70 + 8))(v6, v55);
        uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v58, &v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v54 + 12) = 2080;
        swift_getObjectType();
        uint64_t v59 = _typeName(_:qualified:)();
        uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, &v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v54 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v9, &v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B9C64000, v72, v53, "Got end request message for non-existing request, messageId: %s type: %s requestId: %s, current requestId is not set. Dropping the message", (uint8_t *)v54, 0x20u);
        uint64_t v61 = v68;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v61, -1, -1);
        uint64_t v45 = v54;
        goto LABEL_34;
      }
      swift_bridgeObjectRelease_n();

      goto LABEL_37;
    }
  }
  uint64_t v33 = v7;
  uint64_t v34 = ((uint64_t (*)(uint64_t))v10)(v16);
  if (v34)
  {
    (*(void (**)(void *, uint64_t))(*v2 + 496))(a1, v34);
    uint64_t v34 = swift_release();
  }
  uint64_t v35 = ((uint64_t (*)(uint64_t))v10)(v34);
  if (v35)
  {
    uint64_t v37 = *(void *)(v35 + 64);
    uint64_t v36 = *(void *)(v35 + 72);
    swift_bridgeObjectRetain();
    swift_release();
    if (v7 == v37 && v9 == v36)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v39 & 1) == 0) {
        goto LABEL_21;
      }
    }
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      uint64_t v74 = v49;
      *(_DWORD *)uint64_t v48 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v9, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v48 + 12) = 2080;
      uint64_t v50 = v2[2];
      unint64_t v51 = v2[3];
      swift_bridgeObjectRetain();
      uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v46, v47, "Setting request processor of requestId %s for bridge %s to 'nil'", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v49, -1, -1);
      MEMORY[0x1BA9E48C0](v48, -1, -1);
    }
    else
    {
      swift_release_n();
      swift_bridgeObjectRelease_n();
    }

    (*(void (**)(void))(*v2 + 384))(0);
    return;
  }
LABEL_21:
  swift_retain_n();
  swift_bridgeObjectRetain();
  objc_super v72 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v72, v40))
  {
    uint64_t v41 = swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    uint64_t v74 = v42;
    *(_DWORD *)uint64_t v41 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v9, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v41 + 12) = 2080;
    uint64_t v43 = v2[2];
    unint64_t v44 = v2[3];
    swift_bridgeObjectRetain();
    uint64_t v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v72, v40, "Request %s for bridge %s was already changed, not setting processor to 'nil'", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v42, -1, -1);
    uint64_t v45 = v41;
LABEL_34:
    MEMORY[0x1BA9E48C0](v45, -1, -1);

    return;
  }
  swift_release_n();
  swift_bridgeObjectRelease_n();
LABEL_37:
  uint64_t v64 = v72;
}

void ConversationRequestProcessor.handleEndRequest(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRFilter?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RREntity?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v56 = (uint64_t)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RREntity();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationBridge);
  id v15 = a1;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v57 = v10;
  uint64_t v55 = v12;
  if (v18)
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v54 = v6;
    id v20 = (uint8_t *)v19;
    v53[0] = swift_slowAlloc();
    *(_DWORD *)id v20 = 138412290;
    v59[0] = (uint64_t)v15;
    id v21 = v15;
    v53[1] = v14;
    id v22 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v23 = v53[0];
    *(void *)v53[0] = v15;

    _os_log_impl(&dword_1B9C64000, v16, v17, "ConversationBridge received message: %@", v20, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v23, -1, -1);
    uint64_t v24 = v20;
    uint64_t v6 = v54;
    MEMORY[0x1BA9E48C0](v24, -1, -1);
  }
  else
  {
  }
  uint64_t v25 = *(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_recentDialogTracker);
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v2 + 408))(v59);
  (*(void (**)(uint64_t *))(*(void *)v25 + 232))(v59);
  uint64_t v26 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v59);
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 592))(v26);
  if (v27)
  {
    uint64_t v28 = v27;
    type metadata accessor for RequestCompletedMessage();
    if (!swift_dynamicCastClass()) {
      goto LABEL_19;
    }
    uint64_t v29 = (void *)(v28 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    if (*v29 >> 62 != 1) {
      goto LABEL_19;
    }
    uint64_t v30 = (void *)v29[1];
    if (!v30) {
      goto LABEL_19;
    }
    id v31 = v30;
    id v32 = objc_msgSend(v31, sel_af_userUtteranceValue);
    if (v32)
    {
      uint64_t v33 = v32;
      id v34 = objc_msgSend(v32, sel_bestTextInterpretation);

      if (v34)
      {
        type metadata accessor for ConversationRequestProcessor();
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v35 = v56;
        static ConversationRequestProcessor.createUtteranceRREntity(utterance:)(v56);
        swift_bridgeObjectRelease();
        uint64_t v36 = v57;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v35, 1, v9) == 1)
        {

          outlined destroy of ReferenceResolutionClientProtocol?(v35, &demangling cache variable for type metadata for RREntity?);
        }
        else
        {
          uint64_t v46 = v55;
          (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v55, v35, v9);
          uint64_t v47 = v9;
          uint64_t v48 = *(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rrClient + 24);
          uint64_t v56 = *(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rrClient + 32);
          uint64_t v54 = (char *)__swift_project_boxed_opaque_existential_1((void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rrClient), v48);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RREntity>);
          unint64_t v49 = (*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
          uint64_t v50 = swift_allocObject();
          *(_OWORD *)(v50 + 16) = xmmword_1BA04FD90;
          (*(void (**)(unint64_t, char *, uint64_t))(v36 + 16))(v50 + v49, v46, v47);
          uint64_t v51 = type metadata accessor for RRFilter();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v6, 1, 1, v51);
          dispatch thunk of ReferenceResolutionClientProtocol.siriMentioned(entities:configuration:completion:)();
          swift_bridgeObjectRelease();
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for RRFilter?);

          (*(void (**)(char *, uint64_t))(v36 + 8))(v46, v47);
        }
LABEL_19:
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)v2 + 392))(1, 0, 3);
        swift_release();
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    swift_retain_n();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      char v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      v59[0] = v40;
      *(_DWORD *)char v39 = 136315138;
      uint64_t v41 = (*(uint64_t (**)(void))(*(void *)v2 + 384))();
      switch(v43)
      {
        case 1:
          outlined consume of ConversationRequestProcessor.State(v41, (void *)v42, 1);
          uint64_t v44 = 0xD00000000000001DLL;
          uint64_t v45 = "awaiting request context data";
          goto LABEL_21;
        case 2:
          outlined consume of ConversationRequestProcessor.State(v41, (void *)v42, 2);
          unint64_t v52 = 0xEC00000064657472;
          uint64_t v44 = 0x617473206E727574;
          break;
        case 3:
          if (v41 | v42) {
            uint64_t v44 = 0x6574656C706D6F63;
          }
          else {
            uint64_t v44 = 1701602409;
          }
          if (v41 | v42) {
            unint64_t v52 = 0xE800000000000000;
          }
          else {
            unint64_t v52 = 0xE400000000000000;
          }
          break;
        default:
          uint64_t v44 = 0xD000000000000011;
          outlined consume of ConversationRequestProcessor.State(v41, (void *)v42, 0);
          uint64_t v45 = "candidate request";
LABEL_21:
          unint64_t v52 = (unint64_t)(v45 - 32) | 0x8000000000000000;
          break;
      }
      uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v52, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v37, v38, "ConversationBridge ignoring EndRequest: Not in a turn. State = %s", v39, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v40, -1, -1);
      MEMORY[0x1BA9E48C0](v39, -1, -1);
    }
    else
    {
      swift_release_n();
    }
  }
}

void RecentDialogTracker.handleEndRequest(sessionState:)(void *a1)
{
  unint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentRequestId + 8);
  if (v2)
  {
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentRequestHasTrackedDialogs) == 1)
    {
      uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime19RecentDialogTracker_currentRequestId);
      uint64_t v5 = one-time initialization token for conversationBridge;
      swift_bridgeObjectRetain();
      if (v5 != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
      swift_bridgeObjectRetain_n();
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        uint64_t v10 = swift_slowAlloc();
        uint64_t v15 = v10;
        *(_DWORD *)uint64_t v9 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v2, &v15);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B9C64000, v7, v8, "RecentDialogTracker: requesting session snapshot for request %s", v9, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v10, -1, -1);
        MEMORY[0x1BA9E48C0](v9, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      dispatch thunk of ConversationSessionState.createSnapshot(requestId:)();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
    oslog = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_1B9C64000, oslog, v12, "RecentDialogTracker: handleEndRequest called when currentRequestId is not set", v13, 2u);
      MEMORY[0x1BA9E48C0](v13, -1, -1);
    }
  }
}

uint64_t ServerFallbackCapableRequestProcessor.__deallocating_deinit()
{
  uint64_t v0 = ConversationRequestProcessor.deinit();
  swift_release();
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_executeNLOnServerMessage));
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t ConversationRequestProcessor.deinit()
{
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  outlined consume of ConversationRequestProcessor.State(*(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_state), *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_state + 8), *(unsigned char *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_state + 16));
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionState);
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_featureChecker);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  uint64_t v3 = v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionUserId;
  uint64_t v4 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rrClient);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_correctionsPlatformClient);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater, &demangling cache variable for type metadata for ContextUpdating?);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextDonator);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of UserSessionState(*(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_userSessionState), *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_userSessionState + 8));
  return v0;
}

uint64_t ConcurrentTaskPool.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t MultiUserContextUpdater.__deallocating_deinit()
{
  MultiUserContextUpdater.deinit();

  return swift_deallocClassInstance();
}

uint64_t MultiUserContextUpdater.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 192);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t ContextUpdater.__deallocating_deinit()
{
  ContextUpdater.deinit();

  return swift_deallocClassInstance();
}

uint64_t ContextUpdater.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 192);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime14ContextUpdater_userId, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SessionStateContextKeysManager.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t USOSerializedIdentifier.isEmergencyNumber.getter()
{
  id v1 = objc_msgSend(v0, sel_namespaceString);
  if (!v1) {
    goto LABEL_5;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  if (v3 == 0xD000000000000014 && v5 == 0x80000001BA0607E0)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v6 & 1) == 0)
  {
LABEL_5:
    uint64_t result = (uint64_t)objc_msgSend(v0, sel_namespaceString);
    if (!result) {
      return result;
    }
    os_log_type_t v8 = (void *)result;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    if (v9 != 0x6D754E656E6F6870 || v11 != 0xEB00000000726562)
    {
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t result = 0;
      if ((v13 & 1) == 0) {
        return result;
      }
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_13:
  id v14 = objc_msgSend(v0, sel_value);
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  if (v15 == 0x636E656772656D65 && v17 == 0xEF7265626D754E79)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v18 & 1;
  }
}

uint64_t specialized MessagesAffinityScorer.score(input:environment:)()
{
  uint64_t v0 = type metadata accessor for UsoEntity_common_MessageMode.DefinedValues();
  uint64_t v60 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v57 = (char *)&v54 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MessageMode.DefinedValues?, UsoEntity_common_MessageMode.DefinedValues?));
  MEMORY[0x1F4188790](v58);
  uint64_t v61 = (uint64_t)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MessageMode.DefinedValues?);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v59 = (uint64_t)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  os_log_type_t v8 = (char *)&v54 - v7;
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v54 - v9;
  uint64_t v11 = type metadata accessor for USOParse();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  id v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Parse();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  char v18 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v16 + 88))(v18, v15) != *MEMORY[0x1E4FA1F48])
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.executor);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_1B9C64000, v23, v24, "MessagesAffinityScorer returning default because this is not a usoParse", v25, 2u);
      MEMORY[0x1BA9E48C0](v25, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    return 2;
  }
  (*(void (**)(char *, uint64_t))(v16 + 96))(v18, v15);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v18, v11);
  uint64_t v19 = specialized MessagesAffinityScorer.extractCommonMessageFromUsoParse(usoParse:)();
  uint64_t v55 = v14;
  uint64_t v56 = v12;
  uint64_t v54 = v11;
  if (v19 && (swift_retain(), uint64_t v20 = dispatch thunk of UsoEntity_common_Message.mode.getter(), swift_release(), v20))
  {
    dispatch thunk of UsoEntity_common_MessageMode.definedValue.getter();
    swift_release();
    uint64_t v21 = v60;
  }
  else
  {
    uint64_t v21 = v60;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v60 + 56))(v10, 1, 1, v0);
  }
  uint64_t v27 = v58;
  (*(void (**)(char *, void, uint64_t))(v21 + 104))(v8, *MEMORY[0x1E4FA3278], v0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v8, 0, 1, v0);
  uint64_t v28 = v61;
  uint64_t v29 = v61 + *(int *)(v27 + 48);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v10, v61, &demangling cache variable for type metadata for UsoEntity_common_MessageMode.DefinedValues?);
  uint64_t v30 = v28;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v8, v29, &demangling cache variable for type metadata for UsoEntity_common_MessageMode.DefinedValues?);
  id v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
  int v32 = v31(v28, 1, v0);
  uint64_t v33 = v59;
  if (v32 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for UsoEntity_common_MessageMode.DefinedValues?);
    uint64_t v30 = v61;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for UsoEntity_common_MessageMode.DefinedValues?);
    int v34 = v31(v29, 1, v0);
    uint64_t v35 = v54;
    uint64_t v36 = v55;
    uint64_t v37 = v56;
    if (v34 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v30, &demangling cache variable for type metadata for UsoEntity_common_MessageMode.DefinedValues?);
LABEL_26:
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v50 = type metadata accessor for Logger();
      __swift_project_value_buffer(v50, (uint64_t)static Logger.executor);
      uint64_t v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v51, v52))
      {
        os_log_type_t v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v53 = 0;
        _os_log_impl(&dword_1B9C64000, v51, v52, "MessagesAffinityScorer override to .low because this a mail task", v53, 2u);
        MEMORY[0x1BA9E48C0](v53, -1, -1);
      }

      swift_release();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v36, v35);
      return 1;
    }
  }
  else
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v28, v59, &demangling cache variable for type metadata for UsoEntity_common_MessageMode.DefinedValues?);
    if (v31(v29, 1, v0) != 1)
    {
      uint64_t v44 = v60;
      uint64_t v45 = v19;
      uint64_t v46 = v57;
      (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v57, v29, v0);
      lazy protocol witness table accessor for type UsoEntity_common_MessageMode.DefinedValues and conformance UsoEntity_common_MessageMode.DefinedValues();
      char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v48 = *(void (**)(char *, uint64_t))(v44 + 8);
      unint64_t v49 = v46;
      uint64_t v19 = v45;
      v48(v49, v0);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for UsoEntity_common_MessageMode.DefinedValues?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for UsoEntity_common_MessageMode.DefinedValues?);
      v48((char *)v33, v0);
      outlined destroy of ReferenceResolutionClientProtocol?(v61, &demangling cache variable for type metadata for UsoEntity_common_MessageMode.DefinedValues?);
      uint64_t v35 = v54;
      uint64_t v36 = v55;
      uint64_t v37 = v56;
      if (v47) {
        goto LABEL_26;
      }
      goto LABEL_17;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for UsoEntity_common_MessageMode.DefinedValues?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for UsoEntity_common_MessageMode.DefinedValues?);
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v33, v0);
    uint64_t v35 = v54;
    uint64_t v36 = v55;
    uint64_t v37 = v56;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v30, &demangling cache variable for type metadata for (UsoEntity_common_MessageMode.DefinedValues?, UsoEntity_common_MessageMode.DefinedValues?));
LABEL_17:
  if (v19)
  {
    swift_retain();
    dispatch thunk of UsoEntity_common_Message.subject.getter();
    uint64_t v39 = v38;
    swift_release();
    if (v39)
    {
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v40 = type metadata accessor for Logger();
  __swift_project_value_buffer(v40, (uint64_t)static Logger.executor);
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v41, v42))
  {
    char v43 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v43 = 0;
    _os_log_impl(&dword_1B9C64000, v41, v42, "MessagesAffinityScorer override to .high because this a messaging task", v43, 2u);
    MEMORY[0x1BA9E48C0](v43, -1, -1);
  }

  swift_release();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v36, v35);
  return 3;
}

uint64_t specialized MessagesAffinityScorer.extractCommonMessageFromUsoParse(usoParse:)()
{
  if (!specialized static AffinityScorerUtils.getTask(_:)())
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1B9C64000, v2, v3, "MessagesAffinityScorer Could not extract usoTask from parse", v4, 2u);
      MEMORY[0x1BA9E48C0](v4, -1, -1);
    }

    return 0;
  }
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v14)
  {
LABEL_31:
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v8 = 0;
      _os_log_impl(&dword_1B9C64000, v6, v7, "MessagesAffinityScorer Unrecognized task", v8, 2u);
      MEMORY[0x1BA9E48C0](v8, -1, -1);
    }

    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v13, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
  type metadata accessor for UsoTask_send_common_Message();
  if (swift_dynamicCast()
    || (type metadata accessor for UsoTask_share_common_Message(), swift_dynamicCast()))
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_Target.target.getter();
    goto LABEL_6;
  }
  type metadata accessor for UsoTask_unshare_common_Message();
  if (swift_dynamicCast())
  {
LABEL_14:
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
    goto LABEL_6;
  }
  type metadata accessor for UsoTask_reply_common_Message();
  if (!swift_dynamicCast())
  {
    type metadata accessor for UsoTask_update_common_Message();
    if (swift_dynamicCast())
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
      goto LABEL_6;
    }
    type metadata accessor for UsoTask_read_common_Message();
    if (swift_dynamicCast()) {
      goto LABEL_14;
    }
    type metadata accessor for UsoTask_summarise_common_Message();
    if (swift_dynamicCast()) {
      goto LABEL_14;
    }
    type metadata accessor for UsoTask_delete_common_Message();
    if (swift_dynamicCast()) {
      goto LABEL_14;
    }
    type metadata accessor for UsoTask_unsend_common_Message();
    if (swift_dynamicCast()) {
      goto LABEL_14;
    }
    type metadata accessor for UsoTask_request_common_Message();
    if (swift_dynamicCast())
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
      goto LABEL_6;
    }
    type metadata accessor for UsoTask_checkExistence_common_Message();
    if (swift_dynamicCast()) {
      goto LABEL_14;
    }
    type metadata accessor for UsoTask_noVerb_common_Message();
    if (swift_dynamicCast())
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      goto LABEL_6;
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
    goto LABEL_31;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
  swift_release();
  uint64_t v0 = v10;
  if (v10)
  {
    swift_release();
    swift_release();
    goto LABEL_7;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter();
LABEL_6:
  swift_release_n();
  swift_release();
  uint64_t v0 = v11;
LABEL_7:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v0;
}

uint64_t protocol witness for AffinityScoring.score(input:environment:) in conformance AffinityScorerManager.DefaultAffinityScorer(uint64_t a1)
{
  return specialized AffinityScorerManager.DefaultAffinityScorer.score(input:environment:)(a1, *(unsigned __int8 *)(v1 + 16));
}

uint64_t specialized AffinityScorerManager.DefaultAffinityScorer.score(input:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Parse();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (void **)((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  Input.parse.getter();
  if ((*(unsigned int (**)(void **, uint64_t))(v4 + 88))(v6, v3) == *MEMORY[0x1E4FA1F18])
  {
    (*(void (**)(void **, uint64_t))(v4 + 96))(v6, v3);
    os_log_type_t v7 = *v6;
    dispatch thunk of PommesResponse.primaryQueryConfidence()();
    if (v8 <= 0.5)
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl(&dword_1B9C64000, v14, v15, "Detected low confidence pommes result", v16, 2u);
        MEMORY[0x1BA9E48C0](v16, -1, -1);
      }

      return 0;
    }
    else
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl(&dword_1B9C64000, v10, v11, "Detected high confidence pommes result", v12, 2u);
        MEMORY[0x1BA9E48C0](v12, -1, -1);
      }
    }
  }
  else
  {
    (*(void (**)(void **, uint64_t))(v4 + 8))(v6, v3);
  }
  return a2;
}

uint64_t outlined destroy of ConversationHandlerLocator.ScoredHandler(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ConversationHandlerLocator.ScoredHandler();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void ConversationOutputSubmitter.sendSiriWillPrompt(assistantId:sessionId:requestId:)()
{
  uint64_t v1 = v0;
  id v2 = objc_allocWithZone((Class)type metadata accessor for SiriWillPromptMessage());
  uint64_t v3 = SiriWillPromptMessage.init(build:)();
  if (v3)
  {
    uint64_t v4 = v3;
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationBridge);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      double v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v8 = 0;
      _os_log_impl(&dword_1B9C64000, v6, v7, "Going to post SiriWillPromptMessage", v8, 2u);
      MEMORY[0x1BA9E48C0](v8, -1, -1);
    }

    __swift_project_boxed_opaque_existential_1((void *)(v1 + 32), *(void *)(v1 + 56));
    dispatch thunk of MessagePublishing.postMessage(_:)();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v10))
    {
      os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v11 = 0;
      _os_log_impl(&dword_1B9C64000, v4, v10, "Could not create SiriWillPromptMessage", v11, 2u);
      MEMORY[0x1BA9E48C0](v11, -1, -1);
    }
  }
}

uint64_t ConversationRequestProcessor.handleStartSpeechRequestMessage(_:)(void *a1)
{
  return ConversationRequestProcessor.handleStartSpeechRequestMessage(_:)(a1, (uint64_t (*)(void))specialized ConversationRequestProcessorTurnState.__allocating_init(startSpeechRequestMessage:));
}

uint64_t ServerFallbackCapableRequestProcessor.handleCancelRequestMessage(_:)(void *a1)
{
  uint64_t v2 = ConversationRequestProcessor.handleCancelRequestMessage(_:)(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 1456))(v2);
  if (result)
  {
    (*(void (**)(uint64_t))(*(void *)result + 496))(result);
    return swift_release();
  }
  return result;
}

uint64_t ConversationRequestProcessor.handleCancelRequestMessage(_:)(void *a1)
{
  uint64_t v89 = type metadata accessor for RequestType();
  uint64_t v91 = *(void *)(v89 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v89);
  uint64_t v88 = (char *)&v84 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  Swift::String v87 = (char *)&v84 - v4;
  uint64_t v5 = type metadata accessor for TTResponseMessage.MitigationDecision();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  os_log_type_t v84 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (TTResponseMessage.MitigationDecision?, TTResponseMessage.MitigationDecision?));
  MEMORY[0x1F4188790](v90);
  os_log_type_t v99 = (char **)((char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v85 = (uint64_t)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v84 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v84 - v15;
  uint64_t v17 = type metadata accessor for InputOrigin();
  uint64_t v97 = *(char **)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  unsigned int v96 = (char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v20 = __swift_project_value_buffer(v19, (uint64_t)static Logger.conversationBridge);
  id v21 = a1;
  uint64_t v100 = v20;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v92 = v6;
  id v93 = v21;
  id v94 = v14;
  if (v24)
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v101 = v5;
    uint64_t v95 = (void *)v26;
    *(_DWORD *)uint64_t v25 = 138412290;
    v105[2] = (uint64_t)v21;
    id v27 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v28 = v95;
    void *v95 = v21;

    _os_log_impl(&dword_1B9C64000, v22, v23, "ConversationBridge handling message: %@", v25, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v5 = v101;
    MEMORY[0x1BA9E48C0](v28, -1, -1);
    MEMORY[0x1BA9E48C0](v25, -1, -1);
  }
  else
  {
  }
  uint64_t v29 = v98;
  uint64_t v101 = (*(uint64_t (**)(void))(*v98 + 592))();
  id v31 = v96;
  uint64_t v30 = v97;
  if (v101)
  {
    int v32 = (unint64_t *)(v101 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    uint64_t v33 = 0;
    uint64_t v86 = v32;
    if (*v32 >> 62 == 1)
    {
      uint64_t v33 = *v32 & 0x3FFFFFFFFFFFFFFFLL;
      swift_retain();
    }
    (*((void (**)(char *, void, uint64_t))v30 + 13))(v31, *MEMORY[0x1E4FA2390], v17);
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type InputOrigin and conformance InputOrigin, MEMORY[0x1E4FA23A0]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v95 = (void *)v33;
    if (v103 == v105[0] && v104 == v105[1])
    {
      swift_bridgeObjectRelease_n();
      uint64_t v34 = (*((uint64_t (**)(char *, uint64_t))v30 + 1))(v31, v17);
      uint64_t v35 = v92;
    }
    else
    {
      char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v34 = (*((uint64_t (**)(char *, uint64_t))v30 + 1))(v31, v17);
      uint64_t v35 = v92;
      if ((v39 & 1) == 0) {
        goto LABEL_26;
      }
    }
    if (v33) {
      (*(void (**)(uint64_t))(*(void *)v33 + 544))(v34);
    }
    else {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56))(v16, 1, 1, v5);
    }
    uint64_t v40 = v90;
    uint64_t v41 = (uint64_t)v94;
    (*(void (**)(char *, void, uint64_t))(v35 + 104))(v94, *MEMORY[0x1E4FA2078], v5);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v41, 0, 1, v5);
    os_log_type_t v42 = (void (*)(void, void, void))v99;
    uint64_t v43 = (uint64_t)v99 + *(int *)(v40 + 48);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v16, (uint64_t)v99, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    outlined init with copy of ReferenceResolutionClientProtocol?(v41, v43, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    uint64_t v44 = v16;
    uint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
    if (v45((uint64_t)v42, 1, v5) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v41, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v44, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      int v46 = v45(v43, 1, v5);
      uint64_t v33 = (uint64_t)v95;
      if (v46 == 1)
      {
        uint64_t v34 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v99, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v97 = v44;
      uint64_t v47 = v85;
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v99, v85, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      if (v45(v43, 1, v5) != 1)
      {
        uint64_t v81 = v84;
        (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v84, v43, v5);
        _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2(&lazy protocol witness table cache variable for type TTResponseMessage.MitigationDecision and conformance TTResponseMessage.MitigationDecision, MEMORY[0x1E4FA2088]);
        char v82 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v83 = *(void (**)(char *, uint64_t))(v35 + 8);
        v83(v81, v5);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v94, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v97, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
        v83((char *)v47, v5);
        uint64_t v34 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v99, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
        uint64_t v33 = (uint64_t)v95;
        if (v82)
        {
LABEL_26:
          if (!v33)
          {
            (*(void (**)(uint64_t))(*v29 + 1184))(v34);
            uint64_t v51 = v101 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
            swift_beginAccess();
            uint64_t v52 = v91;
            os_log_type_t v53 = v87;
            uint64_t v54 = v89;
            os_log_type_t v99 = *(char ***)(v91 + 16);
            ((void (*)(char *, uint64_t, uint64_t))v99)(v87, v51, v89);
            uint64_t v55 = *MEMORY[0x1E4FA2428];
            uint64_t v56 = v88;
            uint64_t v97 = *(char **)(v52 + 104);
            ((void (*)(char *, uint64_t, uint64_t))v97)(v88, v55, v54);
            unsigned int v96 = (char *)_s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2(&lazy protocol witness table cache variable for type RequestType and conformance RequestType, MEMORY[0x1E4FA2460]);
            char v57 = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v58 = *(void (**)(char *, uint64_t))(v52 + 8);
            v58(v56, v54);
            uint64_t v91 = v52 + 8;
            v58(v53, v54);
            if ((v57 & 1) == 0) {
              goto LABEL_29;
            }
            uint64_t v59 = v87;
            uint64_t v60 = v89;
            ((void (*)(char *, uint64_t, uint64_t))v99)(v87, v51, v89);
            uint64_t v61 = v88;
            ((void (*)(char *, void, uint64_t))v97)(v88, *MEMORY[0x1E4FA2438], v60);
            char v62 = dispatch thunk of static Equatable.== infix(_:_:)();
            v58(v61, v60);
            v58(v59, v60);
            if ((v62 & 1) == 0)
            {
LABEL_29:
              uint64_t v63 = Logger.logObject.getter();
              os_log_type_t v64 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v63, v64))
              {
                uint64_t v65 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)uint64_t v65 = 0;
                _os_log_impl(&dword_1B9C64000, v63, v64, "Request cancelled before receiving ResultSelectedMessage", v65, 2u);
                MEMORY[0x1BA9E48C0](v65, -1, -1);
              }
            }
          }
          uint64_t v66 = RequestMessageBase.requestId.getter();
          uint64_t v68 = v67;
          type metadata accessor for CancelExecutionTurn();
          uint64_t v69 = swift_allocObject();
          *(void *)(v69 + 16) = v66;
          *(void *)(v69 + 24) = v68;
          uint64_t v70 = *(void *)((char *)v29
                          + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient
                          + 24);
          uint64_t v71 = *(void *)((char *)v29
                          + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient
                          + 32);
          __swift_project_boxed_opaque_existential_1((void *)((char *)v29 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient), v70);
          (*(void (**)(uint64_t, void, _UNKNOWN **, uint64_t, uint64_t))(v71 + 40))(v69, *(void *)((char *)v29+ OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionBridgeProcessorDelegate), &protocol witness table for ConversationBridgeProcessorDelegate, v70, v71);
          swift_retain_n();
          objc_super v72 = Logger.logObject.getter();
          os_log_type_t v73 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v72, v73))
          {
            uint64_t v74 = (uint8_t *)swift_slowAlloc();
            uint64_t v75 = swift_slowAlloc();
            v105[0] = v75;
            *(_DWORD *)uint64_t v74 = 136315138;
            uint64_t v76 = CancelExecutionTurn.debugDescription.getter();
            uint64_t v102 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, v105);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1B9C64000, v72, v73, "Successfully sent: %s", v74, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1BA9E48C0](v75, -1, -1);
            MEMORY[0x1BA9E48C0](v74, -1, -1);
          }
          else
          {

            swift_release_n();
          }
          unint64_t v78 = *v86;
          BOOL v79 = (void *)v86[1];
          outlined copy of ConversationRequestProcessorTurnState.SpeechState(*v86, v79);
          ConversationRequestProcessorTurnState.SpeechState.cancelAll(exceptResultCandidateId:)((Swift::String_optional)0);
          outlined consume of ConversationRequestProcessorTurnState.SpeechState(v78, v79);
          swift_release();
          swift_release();
          swift_release();
          return (*(uint64_t (**)(uint64_t, void, uint64_t))(*v29 + 392))(1, 0, 3);
        }
LABEL_25:
        uint64_t v48 = *(void *)((char *)v29
                        + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil);
        uint64_t v49 = v29[8];
        uint64_t v50 = v29[9];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v48 + 176))(v49, v50, 2);
        uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v48 + 232))(5, v49, v50);
        goto LABEL_26;
      }
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v94, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v97, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v47, v5);
      uint64_t v33 = (uint64_t)v95;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v99, (uint64_t *)&demangling cache variable for type metadata for (TTResponseMessage.MitigationDecision?, TTResponseMessage.MitigationDecision?));
    goto LABEL_25;
  }
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v38 = 0;
    _os_log_impl(&dword_1B9C64000, v36, v37, "Not sending CancelExecutionTurn to Execution since StartExecutionTurn was not sent either", v38, 2u);
    MEMORY[0x1BA9E48C0](v38, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*v29 + 392))(1, 0, 3);
}

uint64_t type metadata accessor for CancelExecutionTurn()
{
  return self;
}

uint64_t protocol witness for ConversationRuntimeClientProtocol.sendCancelExecutionTurn(_:withBridgeDelegate:) in conformance ConversationRuntimeClient()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176))();
}

uint64_t ConversationRuntimeClient.sendCancelExecutionTurn(_:withBridgeDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = v3[3];
  uint64_t v7 = v3[4];
  uint64_t v9 = v3[5];
  uint64_t v10 = (void *)swift_allocObject();
  long long v10[2] = v8;
  v10[3] = v7;
  v10[4] = v9;
  v10[5] = a1;
  v10[6] = a2;
  v10[7] = a3;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  uint64_t v11 = StaticString.description.getter();
  uint64_t v13 = v12;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = &async function pointer to partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCancelRequest:from:);
  *(void *)(v14 + 24) = v10;
  *(void *)(v14 + 32) = "bridge(didReceiveCancelRequest:from:)";
  *(void *)(v14 + 40) = 37;
  *(unsigned char *)(v14 + 48) = 2;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v7 + 208);
  swift_retain();
  v15(v11, v13, &closure #1 in ConversationServiceSerialFacade.doStartTurnWork(function:work:)partial apply, v14);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t CancelExecutionTurn.debugDescription.getter()
{
  _StringGuts.grow(_:)(27);
  uint64_t v1 = _typeName(_:qualified:)();
  swift_bridgeObjectRelease();
  uint64_t v8 = v1;
  v2._unint64_t object = (void *)0x80000001BA063CA0;
  v2._uint64_t countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v2);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = v4;
  v5._unint64_t object = v3;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 125;
  v6._unint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return v8;
}

uint64_t ServerFallbackCapableRequestProcessor.runSiriKitExecutorProcessor.getter()
{
  return swift_retain();
}

uint64_t partial apply for closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCancelRequest:from:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  Swift::String v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *Swift::String v6 = v1;
  v6[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCancelRequest:from:)(v2, v3, v4, v5);
}

uint64_t closure #1 in ConversationServiceSerialFacade.bridge(didReceiveCancelRequest:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized ConversationService.bridge(didReceiveCancelRequest:from:)
                                       + async function pointer to specialized ConversationService.bridge(didReceiveCancelRequest:from:));
  Swift::String v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  *Swift::String v6 = v4;
  v6[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v8(a4);
}

uint64_t specialized ConversationService.bridge(didReceiveCancelRequest:from:)(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v3 = static MessageBusActor.shared;
  v2[10] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](specialized ConversationService.bridge(didReceiveCancelRequest:from:), v3, 0);
}

uint64_t specialized ConversationService.bridge(didReceiveCancelRequest:from:)()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](specialized ConversationService.bridge(didReceiveCancelRequest:from:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 80);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](specialized ConversationService.bridge(didReceiveCancelRequest:from:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  NSObject *v16;
  uint64_t v17;
  uint8_t *v18;
  const char *v19;
  void *v20;
  uint64_t (*v21)(void);
  uint64_t v23;

  uint64_t v1 = v0[9];
  swift_beginAccess();
  uint64_t v3 = *(unsigned char *)(v1 + 120);
  if ((v3 & 0xC0) != 0x80) {
    goto LABEL_22;
  }
  uint64_t v4 = *(char **)(v1 + 112);
  uint64_t v5 = v0[8];
  Swift::String v6 = *(void *)&v4[OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData];
  uint64_t v7 = *(void *)&v4[OBJC_IVAR____TtCC14SiriKitRuntime19ConversationService10ActiveTurn_turnData + 8];
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v6 == v8 && v7 == v9;
  if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v11 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (v11)
  {
    if ((v9 & 0x2000000000000000) != 0) {
      uint64_t v12 = HIBYTE(v9) & 0xF;
    }
    else {
      uint64_t v12 = v8 & 0xFFFFFFFFFFFFLL;
    }
    swift_retain();
    if (v12)
    {
      swift_release();
      uint64_t v13 = Logger.logObject.getter();
      uint64_t v14 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl(&dword_1B9C64000, v13, v14, "Received CancelExecutionTurn for turn that is not currently executing. Will ignore.", v15, 2u);
        MEMORY[0x1BA9E48C0](v15, -1, -1);

        outlined consume of ConversationService.State(v4, v3);
      }
      else
      {
        outlined consume of ConversationService.State(v4, v3);
      }
      id v21 = (uint64_t (*)(void))v0[1];
      return v21();
    }
    uint64_t v16 = Logger.logObject.getter();
    uint64_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, (os_log_type_t)v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      uint64_t v19 = "Got a CancelExecutionTurn, but its executionRequestId is empty. Will proceed with cancellation.";
      goto LABEL_20;
    }
LABEL_21:
    outlined consume of ConversationService.State(v4, v3);

    goto LABEL_22;
  }
  swift_retain();
  uint64_t v16 = Logger.logObject.getter();
  LOBYTE(v17) = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v16, (os_log_type_t)v17)) {
    goto LABEL_21;
  }
  uint64_t v18 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v18 = 0;
  uint64_t v19 = "Got a CancelExecutionTurn, but the current turn's executionRequestId is empty. Will proceed with cancellation.";
LABEL_20:
  _os_log_impl(&dword_1B9C64000, v16, (os_log_type_t)v17, v19, v18, 2u);
  MEMORY[0x1BA9E48C0](v18, -1, -1);

  outlined consume of ConversationService.State(v4, v3);
LABEL_22:
  v0[14] = static MessageBusActor.shared;
  _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v2, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  swift_retain();
  uint64_t v20 = (void *)swift_task_alloc();
  v0[15] = v20;
  *uint64_t v20 = v0;
  v20[1] = specialized ConversationService.bridge(didReceiveCancelRequest:from:);
  return MEMORY[0x1F4187F28]();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v6)(void);
  uint64_t v7;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = v0[9];
  uint64_t v2 = type metadata accessor for Logger();
  v0[11] = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v3 = *(void *)(v1 + 216);
  v0[12] = v3;
  Swift::String v6 = (uint64_t (*)(void))(*(void *)(*(void *)v3 + 216) + **(int **)(*(void *)v3 + 216));
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[13] = v4;
  *uint64_t v4 = v0;
  v4[1] = specialized ConversationService.bridge(didReceiveCancelRequest:from:);
  return v6();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v8)(void);
  uint64_t v10;

  uint64_t v1 = *(void *)(v0 + 72);
  swift_release();
  uint64_t v2 = *(void *)(v1 + 88);
  uint64_t v3 = *(void *)(v1 + 96);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 64), v2);
  (*(void (**)(uint64_t, uint64_t))(v3 + 72))(v2, v3);
  uint64_t v4 = *(unsigned __int8 *)(v1 + 120);
  if (v4 >> 6)
  {
    LOBYTE(v5) = v4 & 0x3F;
    if (v4 >> 6 != 1) {
      LOBYTE(v5) = 0;
    }
  }
  else
  {
    uint64_t v5 = *(void *)(*(void *)(v0 + 72) + 112);
  }
  Swift::String v6 = *(void *)(v0 + 72);
  uint64_t v7 = *(void **)(v6 + 112);
  *(void *)(v6 + 112) = v5 & 1;
  *(unsigned char *)(v6 + 120) = 0;
  outlined consume of ConversationService.State(v7, v4);
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t AsyncSerialQueue.wait()()
{
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](AsyncSerialQueue.wait(), 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v9;
  void *v10;
  uint64_t v11;

  uint64_t v10 = v0;
  uint64_t v1 = v0[2];
  uint64_t v2 = *(os_unfair_lock_s **)(v1 + 48);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 16) = partial apply for closure #1 in AsyncSerialQueue.wait();
  *(void *)(v3 + 24) = v1;
  os_unfair_lock_lock(v2 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(&v9);
  os_unfair_lock_unlock(v2 + 4);
  uint64_t v4 = v9;
  v0[3] = v9;
  swift_task_dealloc();
  if (v4)
  {
    swift_retain();
    uint64_t v5 = (void *)swift_task_alloc();
    v0[4] = v5;
    *uint64_t v5 = v0;
    v5[1] = AsyncSerialQueue.wait();
    Swift::String v6 = MEMORY[0x1E4FBC848] + 8;
    return MEMORY[0x1F4187DC0](v5, v4, v6);
  }
  else
  {
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

{
  uint64_t v0;
  uint64_t v1;

  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](AsyncSerialQueue.wait(), 0, 0);
}

uint64_t partial apply for closure #1 in AsyncSerialQueue.wait()@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 24);
  return swift_retain();
}

uint64_t closure #1 in ConversationService.bridge(didReceiveCancelRequest:from:)()
{
  uint64_t v1 = *(void *)(v0 + 184);
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 104);
  if ((v2 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for RemoteConversationClient();
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3(&lazy protocol witness table cache variable for type RemoteConversationClient and conformance RemoteConversationClient, 255, (void (*)(uint64_t))type metadata accessor for RemoteConversationClient);
    uint64_t v3 = Set.Iterator.init(_cocoa:)();
    uint64_t v2 = *(void *)(v0 + 16);
    uint64_t v41 = *(void *)(v0 + 24);
    uint64_t v6 = *(void *)(v0 + 32);
    uint64_t v7 = *(void *)(v0 + 40);
    unint64_t v8 = *(void *)(v0 + 48);
  }
  else
  {
    uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
    uint64_t v41 = v2 + 56;
    uint64_t v6 = ~v9;
    uint64_t v10 = -v9;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    unint64_t v8 = v11 & *(void *)(v2 + 56);
    uint64_t v3 = swift_bridgeObjectRetain();
    uint64_t v7 = 0;
  }
  int64_t v40 = (unint64_t)(v6 + 64) >> 6;
  while (v2 < 0)
  {
    uint64_t v16 = __CocoaSet.Iterator.next()();
    if (!v16) {
      goto LABEL_37;
    }
    *(void *)(v0 + 168) = v16;
    type metadata accessor for RemoteConversationClient();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    uint64_t v17 = *(void *)(v0 + 160);
    swift_unknownObjectRelease();
    uint64_t v15 = v7;
    uint64_t v13 = v8;
    if (!v17) {
      goto LABEL_37;
    }
LABEL_30:
    unint64_t v42 = v13;
    uint64_t v43 = v15;
    uint64_t v21 = v2;
    uint64_t v23 = *(void *)(v0 + 192);
    uint64_t v22 = *(void *)(v0 + 200);
    uint64_t v24 = type metadata accessor for TaskPriority();
    uint64_t v25 = *(void *)(v24 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v22, 1, 1, v24);
    uint64_t v26 = (void *)swift_allocObject();
    void v26[2] = 0;
    id v27 = v26 + 2;
    v26[3] = 0;
    v26[4] = v17;
    outlined init with copy of ReferenceResolutionClientProtocol?(v22, v23, &demangling cache variable for type metadata for TaskPriority?);
    LODWORD(v23) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24);
    swift_retain();
    uint64_t v28 = *(void *)(v0 + 192);
    if (v23 == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 192), &demangling cache variable for type metadata for TaskPriority?);
      if (*v27) {
        goto LABEL_32;
      }
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v28, v24);
      if (*v27)
      {
LABEL_32:
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v29 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v31 = v30;
        swift_unknownObjectRelease();
        goto LABEL_35;
      }
    }
    uint64_t v29 = 0;
    uint64_t v31 = 0;
LABEL_35:
    uint64_t v32 = **(void **)(v0 + 176);
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in ConversationService.bridge(didReceiveCancelRequest:from:);
    *(void *)(v33 + 24) = v26;
    uint64_t v34 = v31 | v29;
    if (v31 | v29)
    {
      uint64_t v34 = v0 + 56;
      *(void *)(v0 + 56) = 0;
      *(void *)(v0 + 64) = 0;
      *(void *)(v0 + 72) = v29;
      *(void *)(v0 + 80) = v31;
    }
    uint64_t v2 = v21;
    uint64_t v12 = *(void *)(v0 + 200);
    *(void *)(v0 + 136) = 1;
    *(void *)(v0 + 144) = v34;
    *(void *)(v0 + 152) = v32;
    swift_task_create();
    swift_release();
    swift_release();
    uint64_t v3 = outlined destroy of ReferenceResolutionClientProtocol?(v12, &demangling cache variable for type metadata for TaskPriority?);
    uint64_t v7 = v43;
    unint64_t v8 = v42;
  }
  if (v8)
  {
    uint64_t v13 = (v8 - 1) & v8;
    unint64_t v14 = __clz(__rbit64(v8)) | (v7 << 6);
    uint64_t v15 = v7;
    goto LABEL_29;
  }
  int64_t v18 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    return MEMORY[0x1F4187C40](v3, v4, v5);
  }
  if (v18 >= v40) {
    goto LABEL_37;
  }
  unint64_t v19 = *(void *)(v41 + 8 * v18);
  uint64_t v15 = v7 + 1;
  if (v19) {
    goto LABEL_28;
  }
  uint64_t v15 = v7 + 2;
  if (v7 + 2 >= v40) {
    goto LABEL_37;
  }
  unint64_t v19 = *(void *)(v41 + 8 * v15);
  if (v19) {
    goto LABEL_28;
  }
  uint64_t v15 = v7 + 3;
  if (v7 + 3 >= v40) {
    goto LABEL_37;
  }
  unint64_t v19 = *(void *)(v41 + 8 * v15);
  if (v19) {
    goto LABEL_28;
  }
  uint64_t v15 = v7 + 4;
  if (v7 + 4 >= v40) {
    goto LABEL_37;
  }
  unint64_t v19 = *(void *)(v41 + 8 * v15);
  if (v19)
  {
LABEL_28:
    uint64_t v13 = (v19 - 1) & v19;
    unint64_t v14 = __clz(__rbit64(v19)) + (v15 << 6);
LABEL_29:
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    swift_retain();
    if (!v17) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
  uint64_t v20 = v7 + 5;
  while (v40 != v20)
  {
    unint64_t v19 = *(void *)(v41 + 8 * v20++);
    if (v19)
    {
      uint64_t v15 = v20 - 1;
      goto LABEL_28;
    }
  }
LABEL_37:
  outlined consume of [Int : @Sendable ()].Iterator._Variant();
  uint64_t v35 = static MessageBusActor.shared;
  *(void *)(v0 + 216) = static MessageBusActor.shared;
  uint64_t v37 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, v36, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  swift_retain();
  uint64_t v38 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v38;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskGroup<()>);
  *uint64_t v38 = v0;
  v38[1] = closure #1 in ConversationService.bridge(didReceiveCancelRequest:from:);
  uint64_t v3 = v35;
  uint64_t v4 = v37;
  return MEMORY[0x1F4187C40](v3, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 208);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](closure #1 in ConversationService.bridge(didReceiveCancelRequest:from:), v1, 0);
}

uint64_t closure #1 in ConversationService.bridge(didReceiveCancelRequest:from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[22] = a2;
  v3[23] = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[24] = swift_task_alloc();
  v3[25] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v4 = static MessageBusActor.shared;
  v3[26] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](closure #1 in ConversationService.bridge(didReceiveCancelRequest:from:), v4, 0);
}

uint64_t closure #1 in RemoteConversationClient.cancel()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return MEMORY[0x1F4188298](closure #1 in RemoteConversationClient.cancel(), 0, 0);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t thunk for @escaping @callee_unowned @convention(block) @Sendable () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

void protocol witness for CamBridge.cancel() in conformance CamBridgeImpl()
{
}

Swift::Void __swiftcall CamBridgeImpl.cancel()()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v3);
  unint64_t v8 = (char *)&v18 - v7;
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - v9;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v14 = 0;
    _os_log_impl(&dword_1B9C64000, v12, v13, "CamBridge: Cancel signal received. Clearing CamBridge State.", v14, 2u);
    MEMORY[0x1BA9E48C0](v14, -1, -1);
  }

  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  v16(v10, 1, 1, v15);
  v16(v8, 1, 1, v15);
  v16(v5, 1, 1, v15);
  type metadata accessor for CamBridgeState();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = MEMORY[0x1E4FBC868];
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v10, v17 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v8, v17 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_camLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v5, v17 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_caarLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_beginAccess();
  *(void *)(v1 + 240) = v17;
  swift_retain();
  swift_release();
  CamBridgeImpl.camBridgeState.didset();
  swift_release();
}

uint64_t CancelExecutionTurn.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t Siri_Nlu_External_UserParse.preferredUserDialogAct.getter@<X0>(char *a1@<X8>)
{
  uint64_t v52 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v49 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  os_log_type_t v53 = (char *)&v48 - v5;
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v55 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v48 = (char *)&v48 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  unint64_t v14 = (char *)&v48 - v13;
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v50 = (char *)&v48 - v16;
  uint64_t v51 = v1;
  uint64_t v54 = MEMORY[0x1BA9DE000](v15);
  uint64_t v17 = *(void *)(v54 + 16);
  if (v17)
  {
    uint64_t v18 = *(void (**)(char *, unint64_t, uint64_t))(v55 + 16);
    unint64_t v19 = v54 + ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80));
    uint64_t v20 = (void (**)(char *, uint64_t))(v55 + 8);
    uint64_t v21 = *(void *)(v55 + 72);
    while (1)
    {
      v18(v14, v19, v6);
      if (Siri_Nlu_External_UserDialogAct.hasAccepted.getter()) {
        break;
      }
      (*v20)(v14, v6);
      v19 += v21;
      if (!--v17) {
        goto LABEL_5;
      }
    }
    uint64_t v22 = v55;
    uint64_t v24 = (uint64_t)v53;
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v53, v14, v6);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56);
    v23(v24, 0, 1, v6);
  }
  else
  {
LABEL_5:
    uint64_t v22 = v55;
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56);
    uint64_t v24 = (uint64_t)v53;
    v23((uint64_t)v53, 1, 1, v6);
  }
  swift_bridgeObjectRelease();
  uint64_t v25 = *(char **)(v22 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v25)(v24, 1, v6) == 1)
  {
    uint64_t v26 = outlined destroy of ReferenceResolutionClientProtocol?(v24, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    uint64_t v27 = MEMORY[0x1BA9DE000](v26);
    uint64_t v28 = *(void *)(v27 + 16);
    if (v28)
    {
      os_log_type_t v53 = v25;
      uint64_t v54 = (uint64_t)v23;
      uint64_t v31 = *(void (**)(char *, unint64_t, uint64_t))(v22 + 16);
      uint64_t v30 = v22 + 16;
      uint64_t v29 = v31;
      unint64_t v32 = (*(unsigned __int8 *)(v30 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 64);
      uint64_t v50 = (char *)v27;
      unint64_t v33 = v27 + v32;
      uint64_t v34 = *(void *)(v30 + 56);
      while (1)
      {
        v29(v9, v33, v6);
        if (Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter()) {
          break;
        }
        (*(void (**)(char *, uint64_t))(v30 - 8))(v9, v6);
        v33 += v34;
        if (!--v28)
        {
          uint64_t v35 = 1;
          uint64_t v36 = v52;
          uint64_t v22 = v55;
          uint64_t v37 = (uint64_t)v49;
          goto LABEL_16;
        }
      }
      uint64_t v22 = v55;
      uint64_t v37 = (uint64_t)v49;
      (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v49, v9, v6);
      uint64_t v35 = 0;
      uint64_t v36 = v52;
LABEL_16:
      uint64_t v25 = v53;
      uint64_t v23 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v54;
    }
    else
    {
      uint64_t v35 = 1;
      uint64_t v36 = v52;
      uint64_t v37 = (uint64_t)v49;
    }
    v23(v37, v35, 1, v6);
    swift_bridgeObjectRelease();
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v25)(v37, 1, v6) == 1)
    {
      uint64_t v42 = outlined destroy of ReferenceResolutionClientProtocol?(v37, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      uint64_t v43 = MEMORY[0x1BA9DE000](v42);
      if (*(void *)(v43 + 16))
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v22 + 16))(v36, v43 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80)), v6);
        uint64_t v44 = v36;
        uint64_t v45 = 0;
      }
      else
      {
        uint64_t v44 = v36;
        uint64_t v45 = 1;
      }
      v23((uint64_t)v44, v45, 1, v6);
      return swift_bridgeObjectRelease();
    }
    else
    {
      int v46 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 32);
      uint64_t v47 = v48;
      v46(v48, v37, v6);
      v46(v36, (uint64_t)v47, v6);
      return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v23)(v36, 0, 1, v6);
    }
  }
  else
  {
    uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 32);
    char v39 = v50;
    v38(v50, v24, v6);
    int64_t v40 = v52;
    v38(v52, (uint64_t)v39, v6);
    return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v23)(v40, 0, 1, v6);
  }
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t specialized PlaybackControlsAffinityScorer.score(input:environment:)()
{
  uint64_t v0 = type metadata accessor for Parse();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for USOParse();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v1 + 88))(v3, v0) != *MEMORY[0x1E4FA1F48])
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v12 = 2;
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_1B9C64000, v14, v15, "PlaybackControlsAffinityScorer Got unexpected parse", v16, 2u);
      MEMORY[0x1BA9E48C0](v16, -1, -1);

      return v12;
    }

    return 2;
  }
  (*(void (**)(char *, uint64_t))(v1 + 96))(v3, v0);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  unint64_t v8 = specialized static AffinityScorerUtils.getTask(_:)();
  if (!v8)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_1B9C64000, v18, v19, "PlaybackControlsAffinityScorer Could not extract usoTask from parse", v20, 2u);
      MEMORY[0x1BA9E48C0](v20, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return 2;
  }
  uint64_t v9 = v8;
  __int16 v10 = specialized static PlaybackControlsAffinityScorer.ParseAttributes.from(usoParse:)();
  unsigned __int8 v11 = v10;
  if (specialized PlaybackControlsAffinityScorer.controlsShouldSkip(usoTask:parseAttributes:)(v9, HIBYTE(v10) & 1))
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_release();
    return 1;
  }
  else
  {
    unsigned __int8 v21 = specialized PlaybackControlsAffinityScorer.controlsShouldTakeAFirstPass(at:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if ((v21 | v11)) {
      return 3;
    }
    else {
      return 2;
    }
  }
}

uint64_t specialized static PlaybackControlsAffinityScorer.ParseAttributes.from(usoParse:)()
{
  uint64_t v0 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v44 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v48 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v55 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  unint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v52 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v54 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v47 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  os_log_type_t v53 = (char *)&v44 - v18;
  __int16 v56 = 0;
  uint64_t v19 = USOParse.userParse.getter();
  uint64_t v20 = MEMORY[0x1BA9DE000](v19);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v21 = *(void *)(v20 + 16);
  uint64_t v51 = v15;
  if (v21)
  {
    uint64_t v45 = v1;
    uint64_t v46 = v0;
    uint64_t v22 = *(void (**)(char *, unint64_t, uint64_t))(v55 + 16);
    unint64_t v23 = v20 + ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80));
    uint64_t v24 = (void (**)(char *, uint64_t))(v55 + 8);
    uint64_t v25 = *(void *)(v55 + 72);
    uint64_t v44 = v20;
    swift_bridgeObjectRetain();
    while (1)
    {
      v22(v8, v23, v6);
      if (Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter()) {
        break;
      }
      (*v24)(v8, v6);
      v23 += v25;
      if (!--v21)
      {
        swift_bridgeObjectRelease();
        uint64_t v26 = 1;
        uint64_t v1 = v45;
        uint64_t v0 = v46;
        uint64_t v15 = v51;
        uint64_t v27 = v55;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = v55;
    uint64_t v28 = (uint64_t)v52;
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v52, v8, v6);
    uint64_t v26 = 0;
    uint64_t v1 = v45;
    uint64_t v0 = v46;
    uint64_t v15 = v51;
  }
  else
  {
    uint64_t v26 = 1;
    uint64_t v27 = v55;
LABEL_7:
    uint64_t v28 = (uint64_t)v52;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v28, v26, 1, v6);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v28, 1, v6) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v28, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.executor);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      unint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v32 = 0;
      _os_log_impl(&dword_1B9C64000, v30, v31, "PlaybackControlsAffinityScorer Could not extract userStatedTask", v32, 2u);
      MEMORY[0x1BA9E48C0](v32, -1, -1);
    }
  }
  else
  {
    unint64_t v33 = v48;
    Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v6);
    uint64_t v34 = v47;
    Siri_Nlu_External_UserStatedTask.task.getter();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v33, v50);
    (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v53, v34, v15);
    uint64_t v35 = Siri_Nlu_External_UsoGraph.identifiers.getter();
    uint64_t v36 = *(void *)(v35 + 16);
    if (v36)
    {
      char v39 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
      uint64_t v38 = v1 + 16;
      uint64_t v37 = v39;
      unint64_t v40 = v35 + ((*(unsigned __int8 *)(v38 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 64));
      uint64_t v41 = *(void *)(v38 + 56);
      swift_bridgeObjectRetain();
      do
      {
        v37(v3, v40, v0);
        closure #2 in static PlaybackControlsAffinityScorer.ParseAttributes.from(usoParse:)((uint64_t)v3, &v56);
        (*(void (**)(char *, uint64_t))(v38 - 8))(v3, v0);
        v40 += v41;
        --v36;
      }
      while (v36);
      swift_bridgeObjectRelease_n();
      uint64_t v15 = v51;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    (*(void (**)(char *, uint64_t))(v54 + 8))(v53, v15);
  }
  if (HIBYTE(v56)) {
    int v42 = 256;
  }
  else {
    int v42 = 0;
  }
  return v42 | v56;
}

void closure #2 in static PlaybackControlsAffinityScorer.ParseAttributes.from(usoParse:)(uint64_t a1, unsigned char *a2)
{
  uint64_t v51 = a2;
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v55 = v4;
  uint64_t v56 = v5;
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v52 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v50 = (char *)&v44 - v9;
  MEMORY[0x1F4188790](v8);
  os_log_type_t v53 = (char *)&v44 - v10;
  uint64_t v11 = type metadata accessor for Google_Protobuf_StringValue();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v44 - v16;
  if (one-time initialization token for kSupportedIdentifierNamespaces != -1) {
    swift_once();
  }
  uint64_t v18 = (void *)static PlaybackControlsAffinityScorer.ParseAttributes.kSupportedIdentifierNamespaces;
  swift_bridgeObjectRetain();
  uint64_t v54 = a1;
  Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
  uint64_t v19 = Google_Protobuf_StringValue.value.getter();
  uint64_t v21 = v20;
  uint64_t v22 = *(void (**)(char *, uint64_t))(v12 + 8);
  v22(v17, v11);
  LOBYTE(v19) = specialized Sequence<>.contains(_:)(v19, v21, v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = v55;
  if (v19)
  {
    uint64_t v49 = v2;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.executor);
    uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v56 + 16);
    v25(v53, v54, v23);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    int v48 = v27;
    if (os_log_type_enabled(v26, v27))
    {
      os_log_t v47 = v26;
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      uint64_t v58 = v46;
      uint64_t v45 = v28;
      *(_DWORD *)uint64_t v28 = 136315138;
      uint64_t v44 = v28 + 4;
      v25(v50, (uint64_t)v53, v55);
      uint64_t v29 = String.init<A>(describing:)();
      uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v58);
      uint64_t v23 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v56 + 8))(v53, v23);
      os_log_t v31 = v47;
      unint64_t v32 = v45;
      _os_log_impl(&dword_1B9C64000, v47, (os_log_type_t)v48, "PlaybackControlsAffinityScorer Found matching identifier %s", v45, 0xCu);
      uint64_t v33 = v46;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v33, -1, -1);
      MEMORY[0x1BA9E48C0](v32, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v56 + 8))(v53, v23);
    }
    *uint64_t v51 = 1;
  }
  uint64_t v34 = v54;
  Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
  Google_Protobuf_StringValue.init(stringLiteral:)();
  char v35 = static Google_Protobuf_StringValue.== infix(_:_:)();
  v22(v15, v11);
  v22(v17, v11);
  uint64_t v36 = v56;
  uint64_t v37 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v52, v34, v23);
  if ((v35 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v23);
    return;
  }
  if (Siri_Nlu_External_UsoEntityIdentifier.value.getter() == 0x79616C70726961 && v38 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v23);
  }
  else
  {
    char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v23);
    if ((v39 & 1) == 0) {
      return;
    }
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v40 = type metadata accessor for Logger();
  __swift_project_value_buffer(v40, (uint64_t)static Logger.executor);
  uint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v43 = 0;
    _os_log_impl(&dword_1B9C64000, v41, v42, "PlaybackControlsAffinityScorer Task has \"AirPlay\" setting", v43, 2u);
    MEMORY[0x1BA9E48C0](v43, -1, -1);
  }

  v51[1] = 1;
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized PlaybackControlsAffinityScorer.controlsShouldSkip(usoTask:parseAttributes:)(uint64_t a1, char a2)
{
  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of Any?((uint64_t)v14, (uint64_t)v12);
  if (!v13)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_8:
    outlined init with copy of Any?((uint64_t)v14, (uint64_t)v12);
    if (v13)
    {
      type metadata accessor for UsoTask_play_common_MediaItem();
      if (swift_dynamicCast())
      {
        swift_release();
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v8 = type metadata accessor for Logger();
        __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
        uint64_t v4 = Logger.logObject.getter();
        os_log_type_t v5 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v4, v5)) {
          goto LABEL_23;
        }
        uint64_t v6 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v6 = 0;
        uint64_t v7 = "PlaybackControlsAffinityScorer Task is play::common_MediaItem, controls should *NOT* take a first pass";
        goto LABEL_22;
      }
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of Any?((uint64_t)v14, (uint64_t)v12);
    if (v13)
    {
      type metadata accessor for UsoTask_noVerb_common_Setting();
      if (swift_dynamicCast())
      {
        swift_release();
        if (a2)
        {
          if (one-time initialization token for executor != -1) {
            swift_once();
          }
          uint64_t v9 = type metadata accessor for Logger();
          __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
          uint64_t v4 = Logger.logObject.getter();
          os_log_type_t v5 = static os_log_type_t.debug.getter();
          if (!os_log_type_enabled(v4, v5)) {
            goto LABEL_23;
          }
          uint64_t v6 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v6 = 0;
          uint64_t v7 = "PlaybackControlsAffinityScorer Task is an \"AirPlay\" task, controls should *NOT* take a first pass";
          goto LABEL_22;
        }
      }
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    uint64_t v10 = 0;
    goto LABEL_26;
  }
  type metadata accessor for UsoTask_play_uso_NoEntity();
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_8;
  }
  swift_release();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v4, v5)) {
    goto LABEL_23;
  }
  uint64_t v6 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v6 = 0;
  uint64_t v7 = "PlaybackControlsAffinityScorer Task is play::noEntity, controls should *NOT* take a first pass";
LABEL_22:
  _os_log_impl(&dword_1B9C64000, v4, v5, v7, v6, 2u);
  MEMORY[0x1BA9E48C0](v6, -1, -1);
LABEL_23:

  uint64_t v10 = 1;
LABEL_26:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v10;
}

uint64_t specialized PlaybackControlsAffinityScorer.controlsShouldTakeAFirstPass(at:)()
{
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v6)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
  type metadata accessor for UsoTask_restart_uso_NoEntity();
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  swift_release();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1B9C64000, v1, v2, "PlaybackControlsAffinityScorer Task is repeat::noEntity, controls should take a first pass", v3, 2u);
    MEMORY[0x1BA9E48C0](v3, -1, -1);
  }

  return 1;
}

uint64_t protocol witness for AffinityScoring.score(input:environment:) in conformance HomeAutomationAffinityScorer(uint64_t a1, uint64_t a2)
{
  return HomeAutomationAffinityScorer.score(input:environment:)(a1, a2, *v2, v2[1]);
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UserID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  Swift::Int v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (lazy protocol witness table accessor for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType(&lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E4FA26E0]), v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), uint64_t v8 = -1 << *(unsigned char *)(a2 + 32), v9 = v7 & ~v8, v10 = a2 + 56, ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    BOOL v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    uint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      lazy protocol witness table accessor for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType(&lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E4FA26E0]);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t);
  uint64_t v13;
  void (**v14)(char *, uint64_t);
  char v15;
  uint64_t v17;
  uint64_t v18;

  uint64_t v3 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  Swift::Int v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (lazy protocol witness table accessor for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType(&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, MEMORY[0x1E4FA27B0]), v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), uint64_t v8 = -1 << *(unsigned char *)(a2 + 32), v9 = v7 & ~v8, v10 = a2 + 56, ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    uint64_t v18 = a2;
    uint64_t v11 = v4 + 16;
    BOOL v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    uint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      lazy protocol witness table accessor for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, MEMORY[0x1E4FA27B0]);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

uint64_t specialized EmergencyAffinityScorer.score(input:environment:)()
{
  uint64_t v134 = type metadata accessor for Google_Protobuf_StringValue();
  uint64_t v125 = *(void *)(v134 - 8);
  uint64_t v0 = MEMORY[0x1F4188790](v134);
  long long v127 = (char *)&v123 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v0);
  uint64_t v133 = (char *)&v123 - v2;
  uint64_t v142 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  uint64_t v126 = *(void *)(v142 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v142);
  uint64_t v128 = (char *)&v123 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v141 = (char *)&v123 - v5;
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v131 = *(void *)(v6 - 8);
  uint64_t v132 = v6;
  MEMORY[0x1F4188790](v6);
  id v130 = (char *)&v123 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  unsigned int v143 = *(char **)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v123 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v138 = *(void *)(v11 - 8);
  uint64_t v139 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v123 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v137 = (char *)&v123 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v135 = v16;
  uint64_t v136 = v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v129 = (char *)&v123 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  unint64_t v140 = (char *)&v123 - v20;
  uint64_t v21 = type metadata accessor for USOParse();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v123 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for Parse();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v123 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v26 + 88))(v28, v25) != *MEMORY[0x1E4FA1F48])
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.executor);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl(&dword_1B9C64000, v41, v42, "EmergencyAffinityScorer Got unexpected parse", v43, 2u);
      MEMORY[0x1BA9E48C0](v43, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
    return 2;
  }
  (*(void (**)(char *, uint64_t))(v26 + 96))(v28, v25);
  uint64_t v29 = v22;
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v24, v28, v21);
  unint64_t v30 = specialized static AffinityScorerUtils.getTask(_:)();
  if (!v30)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Logger.executor);
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      os_log_t v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_t v47 = 0;
      _os_log_impl(&dword_1B9C64000, v45, v46, "EmergencyAffinityScorer Could not extract usoTask from parse", v47, 2u);
      MEMORY[0x1BA9E48C0](v47, -1, -1);
    }

    goto LABEL_27;
  }
  unint64_t v31 = v30;
  uint64_t v124 = v24;
  uint64_t v32 = USOParse.userParse.getter();
  uint64_t v33 = MEMORY[0x1BA9DE000](v32);
  (*(void (**)(char *, uint64_t))(v138 + 8))(v13, v139);
  uint64_t v34 = *(void *)(v33 + 16);
  if (v34)
  {
    unint64_t v123 = v31;
    uint64_t v138 = v21;
    uint64_t v139 = v29;
    char v35 = (void (*)(char *, unint64_t, uint64_t))*((void *)v143 + 2);
    unint64_t v36 = v33 + ((v143[80] + 32) & ~(unint64_t)v143[80]);
    uint64_t v37 = (void (**)(char *, uint64_t))(v143 + 8);
    uint64_t v38 = *((void *)v143 + 9);
    swift_bridgeObjectRetain();
    while (1)
    {
      v35(v10, v36, v8);
      if (Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter()) {
        break;
      }
      (*v37)(v10, v8);
      v36 += v38;
      if (!--v34)
      {
        swift_bridgeObjectRelease();
        uint64_t v39 = 1;
        uint64_t v21 = v138;
        uint64_t v29 = v139;
        unint64_t v31 = v123;
        goto LABEL_19;
      }
    }
    swift_bridgeObjectRelease();
    int v48 = v143;
    uint64_t v49 = (uint64_t)v137;
    (*((void (**)(char *, char *, uint64_t))v143 + 4))(v137, v10, v8);
    uint64_t v39 = 0;
    uint64_t v21 = v138;
    uint64_t v29 = v139;
    unint64_t v31 = v123;
  }
  else
  {
    uint64_t v39 = 1;
LABEL_19:
    int v48 = v143;
    uint64_t v49 = (uint64_t)v137;
  }
  (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v48 + 7))(v49, v39, 1, v8);
  swift_bridgeObjectRelease();
  if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v48 + 6))(v49, 1, v8) == 1)
  {
    outlined destroy of Siri_Nlu_External_UserDialogAct?(v49);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Logger.executor);
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    BOOL v53 = os_log_type_enabled(v51, v52);
    uint64_t v24 = v124;
    if (v53)
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v54 = 0;
      _os_log_impl(&dword_1B9C64000, v51, v52, "EmergencyAffinityScorer Could not extract userStatedTask", v54, 2u);
      MEMORY[0x1BA9E48C0](v54, -1, -1);
    }

    swift_release();
LABEL_27:
    (*(void (**)(char *, uint64_t))(v29 + 8))(v24, v21);
    return 2;
  }
  uint64_t v56 = v130;
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
  (*((void (**)(uint64_t, uint64_t))v48 + 1))(v49, v8);
  uint64_t v57 = v129;
  Siri_Nlu_External_UserStatedTask.task.getter();
  (*(void (**)(char *, uint64_t))(v131 + 8))(v56, v132);
  (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v140, v57, v135);
  if (UsoTask.baseEntityAsString.getter() == 0xD000000000000014 && v58 == 0x80000001BA067E90)
  {
    swift_bridgeObjectRelease();
    uint64_t v59 = v124;
LABEL_33:
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v61 = type metadata accessor for Logger();
    __swift_project_value_buffer(v61, (uint64_t)static Logger.executor);
    char v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v62, v63))
    {
      os_log_type_t v64 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v64 = 0;
      _os_log_impl(&dword_1B9C64000, v62, v63, "EmergencyAffinityScorer Detected common_CrisisSupport entity", v64, 2u);
      MEMORY[0x1BA9E48C0](v64, -1, -1);
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v136 + 8))(v140, v135);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v59, v21);
    return 3;
  }
  char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t v59 = v124;
  if (v60) {
    goto LABEL_33;
  }
  if (UsoTask.baseEntityAsString.getter() == 0x535F6E6F6D6D6F63 && v65 == 0xEE00676E69747465)
  {
    swift_bridgeObjectRelease();
LABEL_42:
    uint64_t v67 = Siri_Nlu_External_UsoGraph.identifiers.getter();
    uint64_t v68 = *(void *)(v67 + 16);
    if (v68)
    {
      unint64_t v123 = v31;
      uint64_t v138 = v21;
      uint64_t v139 = v29;
      uint64_t v69 = *(void (**)(char *, unint64_t, uint64_t))(v126 + 16);
      unint64_t v70 = v67 + ((*(unsigned __int8 *)(v126 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80));
      uint64_t v71 = (void (**)(char *, uint64_t))(v125 + 8);
      objc_super v72 = (void (**)(char *, uint64_t))(v126 + 8);
      uint64_t v73 = *(void *)(v126 + 72);
      uint64_t v132 = v67;
      swift_bridgeObjectRetain();
      unsigned int v143 = "logDialogAnalytics";
      uint64_t v137 = (char *)0x80000001BA067E70;
      uint64_t v74 = v133;
      while (1)
      {
        v69(v141, v70, v142);
        Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
        uint64_t v75 = Google_Protobuf_StringValue.value.getter();
        unint64_t v77 = v76;
        (*v71)(v74, v134);
        if (v75 == 0xD000000000000012 && v77 == v137) {
          break;
        }
        char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        (*v72)(v141, v142);
        if (v78) {
          goto LABEL_59;
        }
        v70 += v73;
        if (!--v68)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v21 = v138;
          uint64_t v29 = v139;
          goto LABEL_50;
        }
      }
      swift_bridgeObjectRelease();
      (*v72)(v141, v142);
LABEL_59:
      swift_bridgeObjectRelease_n();
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v85 = type metadata accessor for Logger();
      __swift_project_value_buffer(v85, (uint64_t)static Logger.executor);
      uint64_t v86 = Logger.logObject.getter();
      os_log_type_t v87 = static os_log_type_t.debug.getter();
      BOOL v88 = os_log_type_enabled(v86, v87);
      uint64_t v89 = v138;
      if (v88)
      {
        uint64_t v90 = (uint8_t *)swift_slowAlloc();
        uint64_t v91 = swift_slowAlloc();
        v145[0] = v91;
        *(_DWORD *)uint64_t v90 = 136315138;
        uint64_t v144 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, (unint64_t)v143 | 0x8000000000000000, v145);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B9C64000, v86, v87, "EmergencyAffinityScorer Detected supported identifier: %s", v90, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v91, -1, -1);
        MEMORY[0x1BA9E48C0](v90, -1, -1);
      }

      swift_release();
      (*(void (**)(char *, uint64_t))(v136 + 8))(v140, v135);
      (*(void (**)(char *, uint64_t))(v139 + 8))(v124, v89);
      return 3;
    }
    swift_bridgeObjectRelease();
LABEL_50:
    BOOL v79 = v124;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v80 = type metadata accessor for Logger();
    __swift_project_value_buffer(v80, (uint64_t)static Logger.executor);
    uint64_t v81 = Logger.logObject.getter();
    os_log_type_t v82 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v81, v82))
    {
      uint64_t v83 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v83 = 0;
      _os_log_impl(&dword_1B9C64000, v81, v82, "EmergencyAffinityScorer No matching identifiers found", v83, 2u);
      MEMORY[0x1BA9E48C0](v83, -1, -1);
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v136 + 8))(v140, v135);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v79, v21);
    return 0;
  }
  char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v66) {
    goto LABEL_42;
  }
  if (UsoTask.baseEntityAsString.getter() == 0x505F6E6F6D6D6F63 && v84 == 0xED00006E6F737265)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v24 = v124;
    if ((v92 & 1) == 0)
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v108 = type metadata accessor for Logger();
      __swift_project_value_buffer(v108, (uint64_t)static Logger.executor);
      uint64_t v109 = Logger.logObject.getter();
      os_log_type_t v110 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v109, v110))
      {
        unsigned int v111 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unsigned int v111 = 0;
        _os_log_impl(&dword_1B9C64000, v109, v110, "EmergencyAffinityScorer Didn't detect any supported entities", v111, 2u);
        MEMORY[0x1BA9E48C0](v111, -1, -1);
      }

      swift_release();
      (*(void (**)(char *, uint64_t))(v136 + 8))(v140, v135);
      goto LABEL_27;
    }
  }
  uint64_t v139 = v29;
  uint64_t v93 = UsoTask.verbString.getter();
  int v95 = specialized Sequence<>.contains(_:)(v93, v94, outlined read-only object #0 of EmergencyAffinityScorer.score(input:environment:));
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  uint64_t v96 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  uint64_t v97 = *(void *)(v96 + 16);
  if (v97)
  {
    LODWORD(v133) = v95;
    unint64_t v123 = v31;
    uint64_t v137 = (char *)v96;
    uint64_t v138 = v21;
    uint64_t v98 = *(void (**)(char *, unint64_t, uint64_t))(v126 + 16);
    unint64_t v99 = v96 + ((*(unsigned __int8 *)(v126 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80));
    uint64_t v100 = (void (**)(char *, uint64_t))(v125 + 8);
    uint64_t v101 = (void (**)(char *, uint64_t))(v126 + 8);
    uint64_t v102 = *(void *)(v126 + 72);
    swift_bridgeObjectRetain();
    unsigned int v143 = "Name";
    uint64_t v141 = (char *)0x80000001BA060810;
    uint64_t v103 = v127;
    while (1)
    {
      v98(v128, v99, v142);
      Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
      uint64_t v104 = Google_Protobuf_StringValue.value.getter();
      uint64_t v106 = v105;
      (*v100)(v103, v134);
      if (v104 == 0xD000000000000015 && v106 == v141) {
        break;
      }
      char v107 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*v101)(v128, v142);
      if (v107) {
        goto LABEL_80;
      }
      v99 += v102;
      if (!--v97)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v21 = v138;
        goto LABEL_86;
      }
    }
    swift_bridgeObjectRelease();
    (*v101)(v128, v142);
LABEL_80:
    swift_bridgeObjectRelease_n();
    uint64_t v21 = v138;
    if (v133)
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v112 = type metadata accessor for Logger();
      __swift_project_value_buffer(v112, (uint64_t)static Logger.executor);
      uint64_t v113 = Logger.logObject.getter();
      os_log_type_t v114 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v113, v114))
      {
        char v115 = (uint8_t *)swift_slowAlloc();
        uint64_t v116 = swift_slowAlloc();
        v145[0] = v116;
        *(_DWORD *)char v115 = 136315138;
        uint64_t v144 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000015, (unint64_t)v143 | 0x8000000000000000, v145);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B9C64000, v113, v114, "EmergencyAffinityScorer Detected supported identifier: %s", v115, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v116, -1, -1);
        MEMORY[0x1BA9E48C0](v115, -1, -1);
      }

      swift_release();
      (*(void (**)(char *, uint64_t))(v136 + 8))(v140, v135);
      (*(void (**)(char *, uint64_t))(v139 + 8))(v124, v21);
      return 3;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
LABEL_86:
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v117 = type metadata accessor for Logger();
  __swift_project_value_buffer(v117, (uint64_t)static Logger.executor);
  uint64_t v118 = Logger.logObject.getter();
  os_log_type_t v119 = static os_log_type_t.debug.getter();
  BOOL v120 = os_log_type_enabled(v118, v119);
  uint64_t v121 = v139;
  if (v120)
  {
    uint64_t v122 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v122 = 0;
    _os_log_impl(&dword_1B9C64000, v118, v119, "EmergencyAffinityScorer No matching identifiers found", v122, 2u);
    MEMORY[0x1BA9E48C0](v122, -1, -1);
  }

  swift_release();
  (*(void (**)(char *, uint64_t))(v136 + 8))(v140, v135);
  (*(void (**)(char *, uint64_t))(v121 + 8))(v124, v21);
  return 0;
}