uint64_t specialized Sequence.min(by:)@<X0>(uint64_t (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  void (**v25)(char *, uint64_t);
  unint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (**v39)(char *, char *, uint64_t);
  uint64_t v40;
  uint64_t (*v41)(char *, char *);
  uint64_t v42;
  uint64_t v43;

  v41 = a1;
  v42 = a2;
  v7 = type metadata accessor for UsoEntitySpan();
  v8 = *(void *)(v7 - 8);
  v9 = MEMORY[0x1F4188790](v7);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  v14 = (char *)&v35 - v13;
  v15 = *(void *)(a3 + 16);
  if (!v15) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 56))(a4, 1, 1);
  }
  v17 = v8 + 16;
  v16 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  v35 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v43 = v12;
  v16((char *)&v35 - v13, a3 + v35, v12);
  swift_bridgeObjectRetain();
  v18 = v15 - 1;
  v36 = v8;
  v37 = a4;
  v38 = a3;
  if (v18)
  {
    v24 = *(void *)(v8 + 72);
    v25 = (void (**)(char *, uint64_t))(v8 + 8);
    v39 = (void (**)(char *, char *, uint64_t))(v8 + 32);
    v40 = v24;
    v26 = a3 + v24 + v35;
    v27 = v16;
    v28 = v17;
    v19 = v43;
    while (1)
    {
      v29 = v27;
      v30 = v28;
      v27(v11, v26, v19);
      v31 = v41(v11, v14);
      if (v4) {
        break;
      }
      v32 = *v25;
      v19 = v43;
      if (v31)
      {
        v32(v14, v43);
        (*v39)(v14, v11, v19);
      }
      else
      {
        v32(v11, v43);
      }
      v26 += v40;
      --v18;
      v27 = v29;
      v28 = v30;
      if (!v18) {
        goto LABEL_4;
      }
    }
    v33 = *v25;
    v34 = v43;
    (*v25)(v11, v43);
    v33(v14, v34);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v19 = v43;
LABEL_4:
    swift_bridgeObjectRelease();
    v20 = v36;
    v21 = v19;
    v22 = v37;
    (*(void (**)(uint64_t, char *, uint64_t))(v36 + 32))(v37, v14, v21);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v22, 0, 1, v21);
  }
}

uint64_t UsoTask.firstAppContaining(names:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SpanProperty();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  v5 = (char *)v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpanProperty?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (uint64_t)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = UsoTask.arguments.getter();
  if (!*(void *)(v9 + 16)) {
    goto LABEL_13;
  }
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(0x636E657265666572, 0xE900000000000065);
  if ((v11 & 1) == 0) {
    goto LABEL_13;
  }
  unint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v12 >> 62) {
    goto LABEL_61;
  }
  if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_5:
  if ((v12 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1BA9E3990](0, v12);
  }
  else
  {
    if (!*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_65:
      LODWORD(vars0) = 0;
      uint64_t v56 = 1092;
      LOBYTE(v55) = 2;
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    swift_retain();
  }
  swift_bridgeObjectRelease();
  uint64_t v13 = dispatch thunk of UsoValue.getAsEntity()();
  swift_release();
  if (!v13) {
    return 0;
  }
  type metadata accessor for UsoEntity_common_App();
  swift_retain();
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
  swift_release();
  uint64_t v14 = v54;
  if (!v54)
  {
    swift_release();
    return v14;
  }
  uint64_t v49 = a1;
  uint64_t v15 = dispatch thunk of CodeGenGlobalArgs.getEntitySpansFor(attributeName:)();
  if (!v15)
  {
LABEL_38:
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, 1, 1, v2);
    goto LABEL_55;
  }
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(v15 + 16);
  uint64_t v53 = v3;
  uint64_t v47 = v14;
  uint64_t v48 = v8;
  v46[1] = v13;
  if (!v17)
  {
    swift_bridgeObjectRelease();
    unint64_t v19 = MEMORY[0x1E4FBC860];
    goto LABEL_40;
  }
  uint64_t v18 = *(void *)(type metadata accessor for UsoEntitySpan() - 8);
  unint64_t v12 = v16 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  uint64_t v3 = *(void *)(v18 + 72);
  uint64_t v52 = v16;
  swift_bridgeObjectRetain();
  unint64_t v19 = MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v21 = UsoEntitySpan.properties.getter();
    uint64_t v8 = *(void *)(v21 + 16);
    a1 = *(void *)(v19 + 16);
    uint64_t v22 = a1 + v8;
    if (__OFADD__(a1, v8))
    {
      __break(1u);
LABEL_58:
      __break(1u);
LABEL_59:
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      swift_bridgeObjectRetain();
      uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v45) {
        goto LABEL_13;
      }
      goto LABEL_5;
    }
    uint64_t v23 = v21;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v22 <= *(void *)(v19 + 24) >> 1)
    {
      if (!*(void *)(v23 + 16)) {
        goto LABEL_16;
      }
    }
    else
    {
      if (a1 <= v22) {
        int64_t v25 = a1 + v8;
      }
      else {
        int64_t v25 = a1;
      }
      unint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v25, 1, v19);
      if (!*(void *)(v23 + 16))
      {
LABEL_16:
        if (v8) {
          goto LABEL_58;
        }
        goto LABEL_17;
      }
    }
    uint64_t v26 = *(void *)(v19 + 16);
    if ((*(void *)(v19 + 24) >> 1) - v26 < v8) {
      goto LABEL_59;
    }
    unint64_t v27 = (*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
    uint64_t v28 = *(void *)(v53 + 72);
    unint64_t v29 = v19 + v27 + v28 * v26;
    if (v23 + v27 < v29 + v28 * v8 && v29 < v23 + v27 + v28 * v8) {
      goto LABEL_65;
    }
    swift_arrayInitWithCopy();
    if (v8)
    {
      uint64_t v31 = *(void *)(v19 + 16);
      BOOL v32 = __OFADD__(v31, v8);
      uint64_t v33 = v31 + v8;
      if (v32) {
        goto LABEL_60;
      }
      *(void *)(v19 + 16) = v33;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    v12 += v3;
    --v17;
  }
  while (v17);
  swift_bridgeObjectRelease_n();
  uint64_t v3 = v53;
  uint64_t v14 = v47;
  uint64_t v8 = v48;
  if (!v19) {
    goto LABEL_38;
  }
LABEL_40:
  uint64_t v34 = *(void *)(v19 + 16);
  if (!v34)
  {
    uint64_t v44 = 1;
    goto LABEL_54;
  }
  v51 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
  uint64_t v52 = v3 + 16;
  unint64_t v35 = v19 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v36 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v50 = *(void *)(v3 + 72);
  swift_bridgeObjectRetain();
  while (2)
  {
    v51(v5, v35, v2);
    uint64_t v37 = SpanProperty.valueString.getter();
    if (v38)
    {
      uint64_t v39 = v37;
      uint64_t v40 = v38;
      if (SpanProperty.key.getter() == 0x656D614E707061 && v41 == 0xE700000000000000)
      {
        swift_bridgeObjectRelease();
LABEL_49:
        char v43 = specialized Set.contains(_:)(v39, v40, v49);
        swift_bridgeObjectRelease();
        if (v43)
        {
          swift_bridgeObjectRelease();
          uint64_t v3 = v53;
          uint64_t v8 = v48;
          (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))(v48, v5, v2);
          uint64_t v44 = 0;
          goto LABEL_52;
        }
      }
      else
      {
        char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v42) {
          goto LABEL_49;
        }
        swift_bridgeObjectRelease();
      }
    }
    (*v36)(v5, v2);
    v35 += v50;
    if (--v34) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  uint64_t v44 = 1;
  uint64_t v3 = v53;
  uint64_t v8 = v48;
LABEL_52:
  uint64_t v14 = v47;
LABEL_54:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v8, v44, 1, v2);
  swift_bridgeObjectRelease();
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
LABEL_55:
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v8, &demangling cache variable for type metadata for SpanProperty?);
    return 0;
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v8, &demangling cache variable for type metadata for SpanProperty?);
  }
  return v14;
}

uint64_t closure #1 in UsoTask.userEntityNamesNodes()(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x1E4FBC860];
  if (!a1) {
    return v1;
  }
  swift_retain();
  uint64_t v2 = UsoEntity.attributes.getter();
  if (!*(void *)(v2 + 16)
    || (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(0x73656D616ELL, 0xE500000000000000), (v4 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_release();
    return v1;
  }
  unint64_t v5 = *(void *)(*(void *)(v2 + 56) + 8 * v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = v1;
  if (!(v5 >> 62))
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_6;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    uint64_t v1 = MEMORY[0x1E4FBC860];
LABEL_20:
    swift_release();
    swift_bridgeObjectRelease();
    return v1;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v6 = result;
  if (!result) {
    goto LABEL_19;
  }
LABEL_6:
  if (v6 >= 1)
  {
    for (uint64_t i = 0; i != v6; ++i)
    {
      if ((v5 & 0xC000000000000001) != 0) {
        MEMORY[0x1BA9E3990](i, v5);
      }
      else {
        swift_retain();
      }
      uint64_t v9 = dispatch thunk of UsoValue.getAsEntity()();
      uint64_t v10 = swift_release();
      if (v9)
      {
        MEMORY[0x1BA9E3030](v10);
        if (*(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v1 = v11;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t (*a2)(char *, char *), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v38 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntitySpan?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UsoEntitySpan();
  uint64_t v32 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v37 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v31 = (char *)&v28 - v13;
  if (a1 >> 62)
  {
LABEL_22:
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    if (v14) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v14 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v14)
    {
LABEL_3:
      unint64_t v36 = a1 & 0xC000000000000001;
      uint64_t v33 = v32 + 32;
      uint64_t v34 = (unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
      unint64_t v39 = MEMORY[0x1E4FBC860];
      uint64_t v15 = 4;
      uint64_t v29 = a3;
      unint64_t v30 = a1;
      uint64_t v35 = v14;
      uint64_t v16 = (void (**)(char *, char *, uint64_t))(v32 + 32);
      while (1)
      {
        uint64_t v17 = v10;
        uint64_t v18 = v15 - 4;
        if (v36)
        {
          uint64_t v10 = MEMORY[0x1BA9E3990](v15 - 4, a1);
          BOOL v19 = __OFADD__(v18, 1);
          uint64_t v20 = v15 - 3;
          if (v19) {
            goto LABEL_21;
          }
        }
        else
        {
          uint64_t v10 = *(void *)(a1 + 8 * v15);
          swift_retain();
          BOOL v19 = __OFADD__(v18, 1);
          uint64_t v20 = v15 - 3;
          if (v19)
          {
LABEL_21:
            __break(1u);
            goto LABEL_22;
          }
        }
        uint64_t v40 = v10;
        closure #2 in UsoTask.namesNodeAttachmentInfo()(v38, a3, (uint64_t)v9);
        if (v4)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return swift_release();
        }
        swift_release();
        uint64_t v10 = v17;
        if ((*v34)(v9, 1, v17) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, &demangling cache variable for type metadata for UsoEntitySpan?);
        }
        else
        {
          uint64_t v21 = *v16;
          uint64_t v22 = v31;
          (*v16)(v31, v9, v17);
          v21(v37, v22, v17);
          if (swift_isUniquelyReferenced_nonNull_native()) {
            unint64_t v23 = v39;
          }
          else {
            unint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v39 + 16) + 1, 1, v39);
          }
          unint64_t v25 = *(void *)(v23 + 16);
          unint64_t v24 = *(void *)(v23 + 24);
          if (v25 >= v24 >> 1) {
            unint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, v23);
          }
          *(void *)(v23 + 16) = v25 + 1;
          unint64_t v26 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
          unint64_t v39 = v23;
          uint64_t v10 = v17;
          v21((char *)(v23 + v26 + *(void *)(v32 + 72) * v25), v37, v17);
          a3 = v29;
          a1 = v30;
        }
        ++v15;
        if (v20 == v35)
        {
          swift_bridgeObjectRelease();
          return v39;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E4FBC860];
}

uint64_t specialized CarCommandsAffinityScorer.hasHighProbabilityMatch(on:with:in:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpanProperty?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CarCommandsAffinityScoringData();
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v35 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v35 - v16;
  int v18 = *a1;
  outlined init with copy of CarCommandsAffinityScoringData((uint64_t)a1, (uint64_t)&v35 - v16);
  if (v18)
  {
    outlined destroy of CarCommandsAffinityScoringData((uint64_t)v17);
    return 0;
  }
  int v20 = v17[16];
  outlined init with copy of CarCommandsAffinityScoringData((uint64_t)v17, (uint64_t)v15);
  if (v20)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v15[*(int *)(v9 + 28)], (uint64_t)v8, &demangling cache variable for type metadata for SpanProperty?);
    outlined destroy of CarCommandsAffinityScoringData((uint64_t)v15);
    uint64_t v21 = type metadata accessor for SpanProperty();
    int v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v8, 1, v21);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for SpanProperty?);
    outlined destroy of CarCommandsAffinityScoringData((uint64_t)v17);
    if (v22 == 1) {
      return 0;
    }
  }
  else
  {
    outlined destroy of CarCommandsAffinityScoringData((uint64_t)v15);
    outlined destroy of CarCommandsAffinityScoringData((uint64_t)v17);
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.executor);
  outlined init with copy of CarCommandsAffinityScoringData((uint64_t)a1, (uint64_t)v12);
  swift_bridgeObjectRetain_n();
  unint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    uint64_t v37 = a3;
    uint64_t v38 = v27;
    *(_DWORD *)uint64_t v26 = 136315394;
    uint64_t v36 = a2;
    swift_bridgeObjectRetain();
    uint64_t v28 = String.init<A>(describing:)();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    uint64_t v30 = type metadata accessor for UsoEntitySpan();
    uint64_t v31 = swift_bridgeObjectRetain();
    uint64_t v32 = MEMORY[0x1BA9E3080](v31, v30);
    unint64_t v34 = v33;
    swift_bridgeObjectRelease();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of CarCommandsAffinityScoringData((uint64_t)v12);
    _os_log_impl(&dword_1B9C64000, v24, v25, "%s found basic carCommandsUserEntityNoun match (%s)", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v27, -1, -1);
    MEMORY[0x1BA9E48C0](v26, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    outlined destroy of CarCommandsAffinityScoringData((uint64_t)v12);
  }

  return 1;
}

uint64_t specialized CarCommandsAffinityScorer.hasMediumProbabilityMatch(on:with:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v66 = a2;
  uint64_t v67 = a3;
  uint64_t v4 = type metadata accessor for SpanProperty();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  v63 = &v60[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  v64 = &v60[-v9];
  MEMORY[0x1F4188790](v8);
  v65 = &v60[-v10];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpanProperty?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = &v60[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = &v60[-v15];
  uint64_t v17 = type metadata accessor for CarCommandsAffinityScoringData();
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  int v20 = &v60[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = MEMORY[0x1F4188790](v18);
  uint64_t v23 = &v60[-v22];
  MEMORY[0x1F4188790](v21);
  os_log_type_t v25 = &v60[-v24];
  int v26 = *a1;
  outlined init with copy of CarCommandsAffinityScoringData((uint64_t)a1, (uint64_t)&v60[-v24]);
  if (v26 != 1)
  {
    outlined destroy of CarCommandsAffinityScoringData((uint64_t)v25);
    goto LABEL_6;
  }
  int v27 = v25[16];
  outlined init with copy of CarCommandsAffinityScoringData((uint64_t)v25, (uint64_t)v23);
  if (v27 == 1)
  {
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v23[*(int *)(v17 + 28)], (uint64_t)v16, &demangling cache variable for type metadata for SpanProperty?);
    outlined destroy of CarCommandsAffinityScoringData((uint64_t)v23);
    int v28 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48))(v16, 1, v4);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for SpanProperty?);
    outlined destroy of CarCommandsAffinityScoringData((uint64_t)v25);
    if (v28 != 1) {
      goto LABEL_12;
    }
LABEL_6:
    if (*a1 == 4 && a1[16] == 1)
    {
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&a1[*(int *)(v17 + 28)], (uint64_t)v14, &demangling cache variable for type metadata for SpanProperty?);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4) != 1)
      {
        char v43 = v65;
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 32))(v65, v14, v4);
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v44 = type metadata accessor for Logger();
        __swift_project_value_buffer(v44, (uint64_t)static Logger.executor);
        uint64_t v45 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 16);
        v46 = v64;
        v45(v64, v43, v4);
        uint64_t v47 = v67;
        swift_bridgeObjectRetain_n();
        uint64_t v48 = Logger.logObject.getter();
        os_log_type_t v49 = static os_log_type_t.debug.getter();
        int v50 = v49;
        if (os_log_type_enabled(v48, v49))
        {
          uint64_t v51 = swift_slowAlloc();
          uint64_t v62 = swift_slowAlloc();
          uint64_t v69 = v47;
          uint64_t v70 = v62;
          *(_DWORD *)uint64_t v51 = 136315394;
          int v61 = v50;
          uint64_t v68 = v66;
          swift_bridgeObjectRetain();
          uint64_t v52 = String.init<A>(describing:)();
          uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, &v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v51 + 12) = 2080;
          uint64_t v54 = v64;
          v45(v63, v64, v4);
          uint64_t v55 = String.init<A>(describing:)();
          uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, &v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v57 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
          v57(v54, v4);
          _os_log_impl(&dword_1B9C64000, v48, (os_log_type_t)v61, "%s found basic setting match (%s)", (uint8_t *)v51, 0x16u);
          uint64_t v58 = v62;
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v58, -1, -1);
          MEMORY[0x1BA9E48C0](v51, -1, -1);

          v57(v65, v4);
        }
        else
        {

          v59 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
          v59(v46, v4);
          swift_bridgeObjectRelease_n();
          v59(v43, v4);
        }
        return 1;
      }
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for SpanProperty?);
    }
    return 0;
  }
  outlined destroy of CarCommandsAffinityScoringData((uint64_t)v23);
  outlined destroy of CarCommandsAffinityScoringData((uint64_t)v25);
LABEL_12:
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.executor);
  outlined init with copy of CarCommandsAffinityScoringData((uint64_t)a1, (uint64_t)v20);
  uint64_t v31 = v67;
  swift_bridgeObjectRetain_n();
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v69 = v31;
    uint64_t v70 = v35;
    *(_DWORD *)uint64_t v34 = 136315394;
    uint64_t v68 = v66;
    swift_bridgeObjectRetain();
    uint64_t v36 = String.init<A>(describing:)();
    uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v34 + 12) = 2080;
    uint64_t v38 = type metadata accessor for UsoEntitySpan();
    uint64_t v39 = swift_bridgeObjectRetain();
    uint64_t v40 = MEMORY[0x1BA9E3080](v39, v38);
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of CarCommandsAffinityScoringData((uint64_t)v20);
    _os_log_impl(&dword_1B9C64000, v32, v33, "%s found carCommandsUserEntityNoun with partial attachment (%s)", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v35, -1, -1);
    MEMORY[0x1BA9E48C0](v34, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    outlined destroy of CarCommandsAffinityScoringData((uint64_t)v20);
  }

  return 1;
}

uint64_t specialized CarCommandsAffinityScorer.hasLowProbabilityMatch(on:)(unsigned __int8 *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpanProperty?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v3);
  uint64_t v8 = (char *)&v34 - v7;
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v34 - v9;
  uint64_t v11 = type metadata accessor for CarCommandsAffinityScoringData();
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v17 = (char *)&v34 - v16;
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  int v20 = (char *)&v34 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v34 - v21;
  int v23 = *a1;
  if (v23 != 2)
  {
    outlined init with copy of CarCommandsAffinityScoringData((uint64_t)a1, (uint64_t)&v34 - v21);
    if (!v23)
    {
      int v25 = v22[16];
      outlined init with copy of CarCommandsAffinityScoringData((uint64_t)v22, (uint64_t)v20);
      if (v25 == 1)
      {
        outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v20[*(int *)(v11 + 28)], (uint64_t)v10, &demangling cache variable for type metadata for SpanProperty?);
        outlined destroy of CarCommandsAffinityScoringData((uint64_t)v20);
        uint64_t v26 = type metadata accessor for SpanProperty();
        BOOL v24 = 1;
        int v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v10, 1, v26);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for SpanProperty?);
        outlined destroy of CarCommandsAffinityScoringData((uint64_t)v22);
        if (v27 == 1) {
          return v24;
        }
LABEL_9:
        int v28 = *a1;
        outlined init with copy of CarCommandsAffinityScoringData((uint64_t)a1, (uint64_t)v17);
        if (v28 == 1)
        {
          int v29 = v17[16];
          outlined init with copy of CarCommandsAffinityScoringData((uint64_t)v17, (uint64_t)v14);
          if (v29 == 1)
          {
            outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v14[*(int *)(v11 + 28)], (uint64_t)v8, &demangling cache variable for type metadata for SpanProperty?);
            outlined destroy of CarCommandsAffinityScoringData((uint64_t)v14);
            uint64_t v30 = type metadata accessor for SpanProperty();
            BOOL v24 = 1;
            int v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48))(v8, 1, v30);
            outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for SpanProperty?);
            outlined destroy of CarCommandsAffinityScoringData((uint64_t)v17);
            if (v31 == 1) {
              return v24;
            }
            goto LABEL_15;
          }
          outlined destroy of CarCommandsAffinityScoringData((uint64_t)v14);
        }
        outlined destroy of CarCommandsAffinityScoringData((uint64_t)v17);
LABEL_15:
        outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&a1[*(int *)(v11 + 28)], (uint64_t)v5, &demangling cache variable for type metadata for SpanProperty?);
        uint64_t v32 = type metadata accessor for SpanProperty();
        BOOL v24 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v5, 1, v32) != 1;
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, &demangling cache variable for type metadata for SpanProperty?);
        return v24;
      }
      outlined destroy of CarCommandsAffinityScoringData((uint64_t)v20);
    }
    outlined destroy of CarCommandsAffinityScoringData((uint64_t)v22);
    goto LABEL_9;
  }
  return 1;
}

uint64_t outlined destroy of CarCommandsAffinityScoringData(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CarCommandsAffinityScoringData();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of CarCommandsAffinityScoringData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CarCommandsAffinityScoringData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type CarCommandsAffinityScoringData.NamesNodeAttachmentType and conformance CarCommandsAffinityScoringData.NamesNodeAttachmentType()
{
  unint64_t result = lazy protocol witness table cache variable for type CarCommandsAffinityScoringData.NamesNodeAttachmentType and conformance CarCommandsAffinityScoringData.NamesNodeAttachmentType;
  if (!lazy protocol witness table cache variable for type CarCommandsAffinityScoringData.NamesNodeAttachmentType and conformance CarCommandsAffinityScoringData.NamesNodeAttachmentType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CarCommandsAffinityScoringData.NamesNodeAttachmentType and conformance CarCommandsAffinityScoringData.NamesNodeAttachmentType);
  }
  return result;
}

ValueMetadata *type metadata accessor for CarCommandsAffinityScorer()
{
  return &type metadata for CarCommandsAffinityScorer;
}

void *initializeBufferWithCopyOfBuffer for CarCommandsAffinityScoringData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v5 = *(int *)(a3 + 28);
    uint64_t v6 = (void *)(a1 + v5);
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for SpanProperty();
    uint64_t v9 = *(void *)(v8 - 8);
    uint64_t v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
    swift_bridgeObjectRetain();
    if (v10(v7, 1, v8))
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpanProperty?);
      memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
    }
  }
  return v3;
}

uint64_t destroy for CarCommandsAffinityScoringData(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for SpanProperty();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t initializeWithCopy for CarCommandsAffinityScoringData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = type metadata accessor for SpanProperty();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  swift_bridgeObjectRetain();
  if (v9(v6, 1, v7))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpanProperty?);
    memcpy(v5, v6, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v5, v6, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t assignWithCopy for CarCommandsAffinityScoringData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for SpanProperty();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpanProperty?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t initializeWithTake for CarCommandsAffinityScoringData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = type metadata accessor for SpanProperty();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpanProperty?);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t assignWithTake for CarCommandsAffinityScoringData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for SpanProperty();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpanProperty?);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CarCommandsAffinityScoringData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B9DB9194);
}

uint64_t sub_1B9DB9194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpanProperty?);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CarCommandsAffinityScoringData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B9DB925C);
}

uint64_t sub_1B9DB925C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SpanProperty?);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void type metadata completion function for CarCommandsAffinityScoringData()
{
  type metadata accessor for SpanProperty?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for SpanProperty?()
{
  if (!lazy cache variable for type metadata for SpanProperty?)
  {
    type metadata accessor for SpanProperty();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SpanProperty?);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for CarCommandsAffinityScoringData.NamesNodeAttachmentType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9DB94DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CarCommandsAffinityScoringData.NamesNodeAttachmentType()
{
  return &type metadata for CarCommandsAffinityScoringData.NamesNodeAttachmentType;
}

uint64_t outlined consume of Set<String>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType()
{
  unint64_t result = lazy protocol witness table cache variable for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType;
  if (!lazy protocol witness table cache variable for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType)
  {
    type metadata accessor for PayloadAttachmentInfo.AttachmentType();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PayloadAttachmentInfo.AttachmentType and conformance PayloadAttachmentInfo.AttachmentType);
  }
  return result;
}

uint64_t outlined init with take of PayloadAttachmentInfo.AttachmentType?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PayloadAttachmentInfo.AttachmentType?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ClearExecutionContext.deinit()
{
  return v0;
}

uint64_t ClearExecutionContext.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t ClearExecutionContext.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t ClearExecutionContext.init()()
{
  return v0;
}

uint64_t type metadata accessor for ClearExecutionContext()
{
  return self;
}

uint64_t method lookup function for ClearExecutionContext(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ClearExecutionContext);
}

uint64_t dispatch thunk of ClearExecutionContext.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t ResultSelected.isMitigated.getter()
{
  return *v0;
}

uint64_t ResultSelected.endpointMode.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t ResultSelected.init(isMitigated:endpointMode:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(unsigned char *)a4 = result;
  *(void *)(a4 + 8) = a2;
  *(unsigned char *)(a4 + 16) = a3 & 1;
  return result;
}

uint64_t CommitResultCandidate.resultCandidateId.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

void CommitResultCandidate.resultSelectedMessage.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 40);
  char v3 = *(unsigned char *)(v1 + 48);
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 32);
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
}

uint64_t CommitResultCandidate.__allocating_init(resultCandidateId:resultSelectedMessage:)(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t result = swift_allocObject();
  char v7 = *a3;
  uint64_t v8 = *((void *)a3 + 1);
  char v9 = a3[16];
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  *(unsigned char *)(result + 32) = v7;
  *(void *)(result + 40) = v8;
  *(unsigned char *)(result + 48) = v9;
  return result;
}

uint64_t CommitResultCandidate.init(resultCandidateId:resultSelectedMessage:)(uint64_t a1, uint64_t a2, char *a3)
{
  char v4 = *a3;
  uint64_t v5 = *((void *)a3 + 1);
  char v6 = a3[16];
  *(void *)(v3 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  *(unsigned char *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = v5;
  *(unsigned char *)(v3 + 48) = v6;
  return v3;
}

uint64_t CommitResultCandidate.debugDescription.getter()
{
  _StringGuts.grow(_:)(26);
  uint64_t v1 = _typeName(_:qualified:)();
  swift_bridgeObjectRelease();
  uint64_t v8 = v1;
  v2._object = (void *)0x80000001BA063D60;
  v2._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v2);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v4;
  v5._object = v3;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 125;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return v8;
}

uint64_t CommitResultCandidate.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t CommitResultCandidate.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CommitResultCandidate()
{
  return CommitResultCandidate.debugDescription.getter();
}

uint64_t getEnumTagSinglePayload for ResultSelected(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[17]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ResultSelected(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ResultSelected()
{
  return &type metadata for ResultSelected;
}

uint64_t type metadata accessor for CommitResultCandidate()
{
  return self;
}

uint64_t method lookup function for CommitResultCandidate(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CommitResultCandidate);
}

uint64_t dispatch thunk of CommitResultCandidate.__allocating_init(resultCandidateId:resultSelectedMessage:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t CommitResultCandidateId.resultCandidateId.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CommitResultCandidateId.conversationUserInputId.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

void *CommitResultCandidateId.__allocating_init(resultCandidateId:conversationUserInputId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = (void *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  return result;
}

void *CommitResultCandidateId.init(resultCandidateId:conversationUserInputId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a2;
  v4[4] = a3;
  v4[5] = a4;
  return v4;
}

uint64_t CommitResultCandidateId.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CommitResultCandidateId()
{
  return CommitResultCandidateId.debugDescription.getter();
}

uint64_t method lookup function for CommitResultCandidateId(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CommitResultCandidateId);
}

uint64_t dispatch thunk of CommitResultCandidateId.__allocating_init(resultCandidateId:conversationUserInputId:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

void ComponentIdGeneratorImpl.derivedIdentifier(for:from:)(uint64_t a1)
{
  Swift::String v2 = self;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v4 = objc_msgSend(v2, sel_derivedIdentifierForComponent_fromSourceIdentifier_, a1, isa);

  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

void protocol witness for ComponentIdGenerator.derivedIdentifier(for:from:) in conformance ComponentIdGeneratorImpl(uint64_t a1)
{
  Swift::String v2 = self;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v4 = objc_msgSend(v2, sel_derivedIdentifierForComponent_fromSourceIdentifier_, a1, isa);

  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t dispatch thunk of ComponentIdGenerator.derivedIdentifier(for:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

ValueMetadata *type metadata accessor for ComponentIdGeneratorImpl()
{
  return &type metadata for ComponentIdGeneratorImpl;
}

uint64_t CompositeExecutionOverrides.overrides.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t static CompositeExecutionOverrides.newBuilder()()
{
  type metadata accessor for CompositeExecutionOverrides.Builder();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = MEMORY[0x1E4FBC860];
  return result;
}

uint64_t CompositeExecutionOverrides.Builder.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = MEMORY[0x1E4FBC860];
  return result;
}

uint64_t CompositeExecutionOverrides.Builder.add(rule:)(uint64_t a1)
{
  outlined init with copy of ReferenceResolutionClientProtocol(a1, (uint64_t)v15);
  Swift::String v2 = (void *)(v1 + 16);
  swift_beginAccess();
  unsigned int v3 = *(void **)(v1 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v1 + 16) = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unsigned int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    *Swift::String v2 = v3;
  }
  unint64_t v6 = v3[2];
  unint64_t v5 = v3[3];
  if (v6 >= v5 >> 1) {
    *Swift::String v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v3);
  }
  uint64_t v7 = v16;
  uint64_t v8 = v17;
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v15, v16);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0) + 22;
  (*(void (**)(unsigned char *))(v12 + 16))(v11);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, (uint64_t)v11, (uint64_t *)(v1 + 16), v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
  swift_endAccess();
  return swift_retain();
}

uint64_t CompositeExecutionOverrides.Builder.addAll(rules:)()
{
  swift_beginAccess();
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v0);
  swift_endAccess();
  return swift_retain();
}

uint64_t CompositeExecutionOverrides.Builder.build()()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  type metadata accessor for CompositeExecutionOverrides();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CompositeExecutionOverrides.Builder.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t CompositeExecutionOverrides.Builder.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC860];
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_0, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return outlined init with take of ReferenceResolutionClientProtocol(&v12, v10 + 40 * a1 + 32);
}

uint64_t method lookup function for CompositeExecutionOverrides(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CompositeExecutionOverrides);
}

uint64_t method lookup function for CompositeExecutionOverrides.Builder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CompositeExecutionOverrides.Builder);
}

uint64_t dispatch thunk of CompositeExecutionOverrides.Builder.add(rule:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of CompositeExecutionOverrides.Builder.addAll(rules:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of CompositeExecutionOverrides.Builder.build()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of CompositeExecutionOverrides.Builder.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t CompositePreExecutionRules.rules.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t static CompositePreExecutionRules.newBuilder()()
{
  type metadata accessor for CompositePreExecutionRules.Builder();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = MEMORY[0x1E4FBC860];
  return result;
}

uint64_t CompositePreExecutionRules.Builder.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = MEMORY[0x1E4FBC860];
  return result;
}

uint64_t CompositePreExecutionRules.Builder.add(rule:)(uint64_t a1)
{
  outlined init with copy of ReferenceResolutionClientProtocol(a1, (uint64_t)v15);
  uint64_t v2 = (void *)(v1 + 16);
  swift_beginAccess();
  unsigned int v3 = *(void **)(v1 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v1 + 16) = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unsigned int v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3[2] + 1, 1, v3);
    *uint64_t v2 = v3;
  }
  unint64_t v6 = v3[2];
  unint64_t v5 = v3[3];
  if (v6 >= v5 >> 1) {
    *uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1, v3);
  }
  uint64_t v7 = v16;
  uint64_t v8 = v17;
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v15, v16);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0) + 22;
  (*(void (**)(unsigned char *))(v12 + 16))(v11);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, (uint64_t)v11, (uint64_t *)(v1 + 16), v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
  swift_endAccess();
  return swift_retain();
}

uint64_t CompositePreExecutionRules.Builder.addAll(rules:)()
{
  swift_beginAccess();
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v0);
  swift_endAccess();
  return swift_retain();
}

uint64_t CompositePreExecutionRules.Builder.build()()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  type metadata accessor for CompositePreExecutionRules();
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t CompositePreExecutionRules.Builder.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t CompositePreExecutionRules.Builder.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC860];
  return result;
}

uint64_t method lookup function for CompositePreExecutionRules(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CompositePreExecutionRules);
}

uint64_t method lookup function for CompositePreExecutionRules.Builder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CompositePreExecutionRules.Builder);
}

uint64_t dispatch thunk of CompositePreExecutionRules.Builder.add(rule:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of CompositePreExecutionRules.Builder.addAll(rules:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of CompositePreExecutionRules.Builder.build()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of CompositePreExecutionRules.Builder.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t closure #1 in ConcurrentTaskPool.add(work:)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  void *v5 = v4;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v7();
}

uint64_t ConcurrentTaskPool.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t ConcurrentTaskPool.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC860];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v0 + 24) = v1;
  return v0;
}

uint64_t ConcurrentTaskPool.init()()
{
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC860];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v0 + 24) = v1;
  return v0;
}

uint64_t _s2os21OSAllocatedUnfairLockVAAytRszlE04withD0yqd__qd__yYbKXEKs8SendableRd__lFqd__ytz_tYbKXEfU_yt_Tg5TA_0(uint64_t a1)
{
  return specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1B9DBA5EC()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in ConcurrentTaskPool.add(work:)()
{
  uint64_t v2 = *(int **)(v0 + 32);
  unsigned int v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unsigned int v3 = v1;
  v3[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  unint64_t v6 = (uint64_t (*)(void))((char *)v2 + *v2);
  uint64_t v4 = (void *)swift_task_alloc();
  v3[2] = v4;
  *uint64_t v4 = v3;
  v4[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v6();
}

void *_s2os21OSAllocatedUnfairLockVAAytRszlE04withD0yqd__qd__yYbKXEKs8SendableRd__lFqd__ytz_tYbKXEfU_ScTyyts5NeverOGSg_TG5TA_0@<X0>(void *a1@<X8>)
{
  return specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t method lookup function for ConcurrentTaskPool(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConcurrentTaskPool);
}

uint64_t dispatch thunk of ConcurrentTaskPool.add(task:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of ConcurrentTaskPool.add(work:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of ConcurrentTaskPool.wait()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 136) + **(int **)(*(void *)v0 + 136));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v4();
}

uint64_t dispatch thunk of ConcurrentTaskPool.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of Waitable.wait()(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 8) + **(int **)(a2 + 8));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v7(a1, a2);
}

SiriKitRuntime::ContactsAffinityScorer __swiftcall ContactsAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA0628E0;
  uint64_t v1 = 0xD000000000000029;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._countAndFlagsBits = v1;
  return result;
}

uint64_t ContactsAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

void one-time initialization function for localesToExclude()
{
  static ContactsAffinityScorer.localesToExclude = &outlined read-only object #0 of one-time initialization function for localesToExclude;
}

uint64_t USOParse.usoIdentifiers.getter()
{
  uint64_t v19 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v0 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  USOParse.userParse.getter();
  Siri_Nlu_External_UserParse.preferredUserDialogAct.getter(v13);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v14 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    return MEMORY[0x1E4FBC860];
  }
  else
  {
    Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
    Siri_Nlu_External_UserStatedTask.task.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v16 = Siri_Nlu_External_UsoGraph.identifiers.getter();
    (*(void (**)(char *, uint64_t))(v0 + 8))(v2, v19);
  }
  return v16;
}

uint64_t Array<A>.containsContactIdentifier.getter(uint64_t a1)
{
  uint64_t v35 = type metadata accessor for Google_Protobuf_StringValue();
  uint64_t v2 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v34 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  unint64_t v37 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v32 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    return 0;
  }
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v12 = v5 + 16;
  uint64_t v11 = v13;
  uint64_t v14 = a1 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
  uint64_t v15 = a1;
  uint64_t v16 = (void (**)(char *, uint64_t))(v12 - 8);
  uint64_t v32 = v15;
  os_log_type_t v33 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v36 = *(void *)(v12 + 56);
  swift_bridgeObjectRetain();
  while (1)
  {
    v11(v9, v14, v4);
    if (Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter() == 0x73746361746E6F43
      && v19 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
      v11(v37, (uint64_t)v9, v4);
    }
    else
    {
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v21 = v37;
      v11(v37, (uint64_t)v9, v4);
      if ((v20 & 1) == 0)
      {
        int v27 = v21;
        int v28 = *v16;
        (*v16)(v27, v4);
        v28(v9, v4);
        goto LABEL_4;
      }
    }
    uint64_t v22 = v11;
    int v23 = v34;
    Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
    uint64_t v24 = Google_Protobuf_StringValue.value.getter();
    uint64_t v26 = v25;
    (*v33)(v23, v35);
    if (v24 == 0x64695F6D657469 && v26 == 0xE700000000000000) {
      break;
    }
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v18 = *v16;
    (*v16)(v37, v4);
    v18(v9, v4);
    uint64_t v11 = v22;
    if (v17) {
      goto LABEL_15;
    }
LABEL_4:
    v14 += v36;
    if (!--v10)
    {
      uint64_t v29 = 0;
      goto LABEL_16;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v30 = *v16;
  (*v16)(v37, v4);
  v30(v9, v4);
LABEL_15:
  uint64_t v29 = 1;
LABEL_16:
  swift_bridgeObjectRelease();
  return v29;
}

uint64_t UsoTask.isAgeRequest.getter()
{
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v9) {
    goto LABEL_17;
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v8, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Any?);
  type metadata accessor for UsoTask_noVerb_common_Person();
  if (!swift_dynamicCast())
  {
    type metadata accessor for UsoTask_checkExistence_common_Person();
    if (swift_dynamicCast())
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
      swift_release();
      if (!v6 || (uint64_t v1 = dispatch thunk of UsoEntity_common_Person.age.getter(), swift_release(), !v1))
      {
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
        goto LABEL_19;
      }
LABEL_15:
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
      char v4 = 1;
      goto LABEL_23;
    }
    type metadata accessor for UsoTask_request_common_Person();
    if (swift_dynamicCast())
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
      swift_release();
      if (!v6 || (uint64_t v2 = dispatch thunk of UsoEntity_common_Person.age.getter(), swift_release(), !v2))
      {
        dispatch thunk of Uso_VerbTemplate_ReferenceSelect.select.getter();
        if (!v6 || (uint64_t v3 = dispatch thunk of UsoEntity_common_Person.age.getter(), swift_release(), !v3))
        {
          swift_retain();
          dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
          goto LABEL_19;
        }
      }
      goto LABEL_15;
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
LABEL_17:
    char v4 = 0;
    goto LABEL_23;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  swift_release();
  if (v6)
  {
    uint64_t v0 = dispatch thunk of UsoEntity_common_Person.age.getter();
    swift_release();
    if (v0) {
      goto LABEL_15;
    }
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
LABEL_19:
  swift_release();
  if (v6)
  {
    char v4 = UsoEntity_common_Person.isAgeRequestPerson.getter();
    swift_release();
  }
  else
  {
    char v4 = 0;
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v7);
LABEL_23:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v4 & 1;
}

uint64_t UsoTask.hasPartialContactsSpanMatches.getter()
{
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v6) {
    goto LABEL_27;
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Any?);
  type metadata accessor for UsoTask_summarise_common_Person();
  if (swift_dynamicCast()) {
    goto LABEL_3;
  }
  type metadata accessor for UsoTask_noVerb_common_Person();
  if (swift_dynamicCast())
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    goto LABEL_6;
  }
  type metadata accessor for UsoTask_read_common_Person();
  if (swift_dynamicCast()) {
    goto LABEL_3;
  }
  type metadata accessor for UsoTask_update_common_Person();
  if (swift_dynamicCast())
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter();
    swift_release();
    if (v3)
    {
      char v1 = UsoEntity_common_Person.hasOnlyPartialContactsSpans.getter();
      swift_release();
    }
    else
    {
      char v1 = 0;
    }
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
    goto LABEL_21;
  }
  type metadata accessor for UsoTask_checkExistence_common_Person();
  if (swift_dynamicCast())
  {
LABEL_3:
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
LABEL_6:
    swift_release();
    if (v3)
    {
      char v0 = UsoEntity_common_Person.hasOnlyPartialContactsSpans.getter();
      swift_release();
    }
    else
    {
      char v0 = 0;
    }
    swift_release();
    goto LABEL_10;
  }
  type metadata accessor for UsoTask_request_common_Person();
  if (!swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
LABEL_27:
    char v0 = 0;
    goto LABEL_28;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
  swift_release();
  if (v3)
  {
    char v1 = UsoEntity_common_Person.hasOnlyPartialContactsSpans.getter();
    swift_release();
  }
  else
  {
    char v1 = 0;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_ReferenceSelect.select.getter();
LABEL_21:
  swift_release();
  if (!v3)
  {
    swift_release();
    if ((v1 & 1) == 0)
    {
      char v0 = 0;
      goto LABEL_10;
    }
    goto LABEL_25;
  }
  char v0 = UsoEntity_common_Person.hasOnlyPartialContactsSpans.getter();
  swift_release();
  swift_release();
  if (v1) {
LABEL_25:
  }
    char v0 = 1;
LABEL_10:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v4);
LABEL_28:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v0 & 1;
}

BOOL UsoTask.hasContactIDs.getter()
{
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v11) {
    goto LABEL_26;
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for Any?);
  type metadata accessor for UsoTask_summarise_common_Person();
  if (!swift_dynamicCast())
  {
    type metadata accessor for UsoTask_noVerb_common_Person();
    if (swift_dynamicCast())
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      goto LABEL_6;
    }
    type metadata accessor for UsoTask_read_common_Person();
    if (!swift_dynamicCast())
    {
      type metadata accessor for UsoTask_update_common_Person();
      if (swift_dynamicCast())
      {
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter();
        swift_release();
        if (v8)
        {
          uint64_t v3 = UsoEntity_common_Person.contactIDs.getter();
          swift_release();
        }
        else
        {
          uint64_t v3 = MEMORY[0x1E4FBC860];
        }
        uint64_t v5 = *(void *)(v3 + 16);
        swift_bridgeObjectRelease();
        swift_retain();
        dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
LABEL_21:
        swift_release();
        if (v8)
        {
          uint64_t v6 = UsoEntity_common_Person.contactIDs.getter();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          uint64_t v6 = MEMORY[0x1E4FBC860];
        }
        uint64_t v1 = v5 | *(void *)(v6 + 16);
        goto LABEL_10;
      }
      type metadata accessor for UsoTask_checkExistence_common_Person();
      if (!swift_dynamicCast())
      {
        type metadata accessor for UsoTask_request_common_Person();
        if (swift_dynamicCast())
        {
          swift_retain();
          dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
          swift_release();
          if (v8)
          {
            uint64_t v4 = UsoEntity_common_Person.contactIDs.getter();
            swift_release();
          }
          else
          {
            uint64_t v4 = MEMORY[0x1E4FBC860];
          }
          uint64_t v5 = *(void *)(v4 + 16);
          swift_bridgeObjectRelease();
          swift_retain();
          dispatch thunk of Uso_VerbTemplate_ReferenceSelect.select.getter();
          goto LABEL_21;
        }
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v9);
LABEL_26:
        BOOL v2 = 0;
        goto LABEL_27;
      }
    }
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
LABEL_6:
  swift_release();
  if (v8)
  {
    uint64_t v0 = UsoEntity_common_Person.contactIDs.getter();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v0 = MEMORY[0x1E4FBC860];
  }
  uint64_t v1 = *(void *)(v0 + 16);
LABEL_10:
  swift_bridgeObjectRelease();
  BOOL v2 = v1 != 0;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v9);
LABEL_27:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v2;
}

uint64_t UsoTask.isMeCardTask.getter()
{
  uint64_t v193 = type metadata accessor for UsoEntity_common_Person.DefinedValues();
  uint64_t v0 = *(void *)(v193 - 8);
  MEMORY[0x1F4188790](v193);
  v190 = (char *)&v165 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v192 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
  uint64_t v2 = MEMORY[0x1F4188790](v192);
  v169 = (char *)&v165 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  v171 = (char *)&v165 - v5;
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  v178 = (char *)&v165 - v7;
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v181 = (uint64_t)&v165 - v9;
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  v183 = (char *)&v165 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  v188 = (char *)&v165 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v189 = (char *)&v165 - v15;
  MEMORY[0x1F4188790](v14);
  char v17 = (char *)&v165 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  uint64_t v19 = MEMORY[0x1F4188790](v18 - 8);
  uint64_t v166 = (uint64_t)&v165 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  v170 = (char *)&v165 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  v168 = (char *)&v165 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v167 = (uint64_t)&v165 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v174 = (uint64_t)&v165 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v175 = (uint64_t)&v165 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v172 = (uint64_t)&v165 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  v176 = (char *)&v165 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  v177 = (char *)&v165 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v173 = (uint64_t)&v165 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  v180 = (char *)&v165 - v40;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  v182 = (char *)&v165 - v42;
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  uint64_t v179 = (uint64_t)&v165 - v44;
  uint64_t v45 = MEMORY[0x1F4188790](v43);
  uint64_t v186 = (uint64_t)&v165 - v46;
  uint64_t v47 = MEMORY[0x1F4188790](v45);
  v185 = (uint64_t *)((char *)&v165 - v48);
  uint64_t v49 = MEMORY[0x1F4188790](v47);
  v184 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v165 - v50);
  uint64_t v51 = MEMORY[0x1F4188790](v49);
  unint64_t v53 = (char *)&v165 - v52;
  uint64_t v54 = MEMORY[0x1F4188790](v51);
  v187 = (char *)&v165 - v55;
  uint64_t v56 = MEMORY[0x1F4188790](v54);
  uint64_t v58 = (char *)&v165 - v57;
  uint64_t v59 = MEMORY[0x1F4188790](v56);
  int v61 = (char *)&v165 - v60;
  uint64_t v62 = MEMORY[0x1F4188790](v59);
  v64 = (char *)&v165 - v63;
  uint64_t v65 = MEMORY[0x1F4188790](v62);
  uint64_t v67 = (char *)&v165 - v66;
  uint64_t v68 = MEMORY[0x1F4188790](v65);
  uint64_t v70 = (char *)&v165 - v69;
  MEMORY[0x1F4188790](v68);
  v72 = (char *)&v165 - v71;
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v198) {
    goto LABEL_72;
  }
  uint64_t v191 = v0;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v197, (uint64_t)v196, (uint64_t *)&demangling cache variable for type metadata for Any?);
  type metadata accessor for UsoTask_summarise_common_Person();
  if (swift_dynamicCast())
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
    swift_release();
    if (v194)
    {
      dispatch thunk of UsoEntity_common_Person.definedValue.getter();
      swift_release();
      uint64_t v73 = v193;
      uint64_t v74 = v191;
    }
    else
    {
      uint64_t v74 = v191;
      uint64_t v73 = v193;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v191 + 56))(v72, 1, 1, v193);
    }
    (*(void (**)(char *, void, uint64_t))(v74 + 104))(v70, *MEMORY[0x1E4FA3110], v73);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v74 + 56))(v70, 0, 1, v73);
    uint64_t v81 = (uint64_t)&v17[*(int *)(v192 + 48)];
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v72, (uint64_t)v17, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v70, v81, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
    v82 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
    if (v82((uint64_t)v17, 1, v73) == 1)
    {
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v70, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v72, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      int v83 = v82(v81, 1, v73);
      if (v83 == 1) {
        v84 = &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?;
      }
      else {
        v84 = &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?);
      }
      if (v83 == 1) {
        char v85 = -1;
      }
      else {
        char v85 = 0;
      }
    }
    else
    {
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v17, (uint64_t)v67, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      if (v82(v81, 1, v73) == 1)
      {
        swift_release();
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v70, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v72, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        (*(void (**)(char *, uint64_t))(v191 + 8))(v67, v73);
        char v85 = 0;
        v84 = &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?);
      }
      else
      {
        v90 = v190;
        uint64_t v89 = v191;
        (*(void (**)(char *, uint64_t, uint64_t))(v191 + 32))(v190, v81, v73);
        lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues();
        char v85 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        v91 = *(void (**)(char *, uint64_t))(v89 + 8);
        v91(v90, v73);
        v84 = &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?;
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v70, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v72, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        v91(v67, v73);
      }
    }
    uint64_t v92 = (uint64_t)v17;
    v93 = v84;
    goto LABEL_59;
  }
  type metadata accessor for UsoTask_noVerb_common_Person();
  if (swift_dynamicCast())
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    swift_release();
    if (v194)
    {
      dispatch thunk of UsoEntity_common_Person.definedValue.getter();
      swift_release();
      uint64_t v75 = v193;
      uint64_t v76 = v191;
    }
    else
    {
      uint64_t v76 = v191;
      uint64_t v75 = v193;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v191 + 56))(v64, 1, 1, v193);
    }
    uint64_t v94 = (uint64_t)v189;
    (*(void (**)(char *, void, uint64_t))(v76 + 104))(v61, *MEMORY[0x1E4FA3110], v75);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v76 + 56))(v61, 0, 1, v75);
    uint64_t v95 = v94 + *(int *)(v192 + 48);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v64, v94, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v61, v95, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
    v96 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 48);
    if (v96(v94, 1, v75) == 1)
    {
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v61, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v64, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      int v97 = v96(v95, 1, v75);
      if (v97 == 1) {
        v98 = &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?;
      }
      else {
        v98 = &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?);
      }
      if (v97 == 1) {
        char v85 = -1;
      }
      else {
        char v85 = 0;
      }
    }
    else
    {
      outlined init with copy of ReferenceResolutionClientProtocol?(v94, (uint64_t)v58, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      if (v96(v95, 1, v75) == 1)
      {
        swift_release();
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v61, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v64, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        (*(void (**)(char *, uint64_t))(v191 + 8))(v58, v75);
        char v85 = 0;
        v98 = &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?);
      }
      else
      {
        v102 = v190;
        uint64_t v101 = v191;
        (*(void (**)(char *, uint64_t, uint64_t))(v191 + 32))(v190, v95, v75);
        lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues();
        char v85 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        v103 = *(void (**)(char *, uint64_t))(v101 + 8);
        v103(v102, v75);
        v98 = &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?;
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v61, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v64, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        v103(v58, v75);
      }
    }
    uint64_t v92 = v94;
    goto LABEL_58;
  }
  type metadata accessor for UsoTask_read_common_Person();
  int v77 = swift_dynamicCast();
  uint64_t v78 = v193;
  if (!v77)
  {
    type metadata accessor for UsoTask_update_common_Person();
    if (swift_dynamicCast())
    {
      v86 = v195;
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter();
      swift_release();
      v189 = v86;
      if (v194)
      {
        v87 = (void (*)(void, void, void))v185;
        dispatch thunk of UsoEntity_common_Person.definedValue.getter();
        swift_release();
        v88 = (void *)v191;
      }
      else
      {
        v88 = (void *)v191;
        v87 = (void (*)(void, void, void))v185;
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v191 + 56))(v185, 1, 1, v78);
      }
      uint64_t v116 = (uint64_t)v183;
      uint64_t v117 = v186;
      v118 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v88[13];
      LODWORD(v187) = *MEMORY[0x1E4FA3110];
      v184 = v118;
      ((void (*)(uint64_t))v118)(v186);
      v188 = (char *)v88[7];
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v188)(v117, 0, 1, v78);
      uint64_t v119 = v116 + *(int *)(v192 + 48);
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v87, v116, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      outlined init with copy of ReferenceResolutionClientProtocol?(v117, v119, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      v120 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v88[6];
      if (v120(v116, 1, v78) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v117, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v87, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        if (v120(v119, 1, v78) == 1)
        {
          uint64_t v121 = v116;
LABEL_65:
          outlined destroy of ReferenceResolutionClientProtocol?(v121, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          swift_release();
LABEL_106:
          char v85 = 1;
          goto LABEL_60;
        }
        goto LABEL_68;
      }
      uint64_t v122 = v179;
      outlined init with copy of ReferenceResolutionClientProtocol?(v116, v179, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      if (v120(v119, 1, v78) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v186, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v87, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        (*(void (**)(uint64_t, uint64_t))(v191 + 8))(v122, v78);
LABEL_68:
        outlined destroy of ReferenceResolutionClientProtocol?(v116, &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
        uint64_t v123 = (uint64_t)v182;
LABEL_69:
        dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter();
        if (v194)
        {
          dispatch thunk of UsoEntity_common_Person.definedValue.getter();
          swift_release();
          uint64_t v124 = v193;
          v125 = (void (*)(uint64_t, void, uint64_t, uint64_t))v188;
        }
        else
        {
          uint64_t v124 = v193;
          v125 = (void (*)(uint64_t, void, uint64_t, uint64_t))v188;
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v188)(v123, 1, 1, v193);
        }
        uint64_t v132 = (uint64_t)v180;
        v184((uint64_t)v180, v187, v124);
        v125(v132, 0, 1, v124);
        uint64_t v133 = v181;
        uint64_t v134 = v181 + *(int *)(v192 + 48);
        outlined init with copy of ReferenceResolutionClientProtocol?(v123, v181, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        outlined init with copy of ReferenceResolutionClientProtocol?(v132, v134, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        if (v120(v133, 1, v124) == 1)
        {
          swift_release();
          outlined destroy of ReferenceResolutionClientProtocol?(v132, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          outlined destroy of ReferenceResolutionClientProtocol?(v123, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          if (v120(v134, 1, v124) == 1)
          {
            uint64_t v135 = v133;
LABEL_105:
            outlined destroy of ReferenceResolutionClientProtocol?(v135, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
            goto LABEL_106;
          }
        }
        else
        {
          uint64_t v136 = v173;
          outlined init with copy of ReferenceResolutionClientProtocol?(v133, v173, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          if (v120(v134, 1, v124) != 1)
          {
            uint64_t v140 = v191;
            v141 = v190;
            (*(void (**)(char *, uint64_t, uint64_t))(v191 + 32))(v190, v134, v124);
            lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues();
            char v85 = dispatch thunk of static Equatable.== infix(_:_:)();
            swift_release();
            v142 = *(void (**)(char *, uint64_t))(v140 + 8);
            v142(v141, v124);
            v98 = &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?;
            outlined destroy of ReferenceResolutionClientProtocol?(v132, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
            outlined destroy of ReferenceResolutionClientProtocol?(v123, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
            v142((char *)v136, v124);
            uint64_t v92 = v133;
            goto LABEL_58;
          }
          swift_release();
          outlined destroy of ReferenceResolutionClientProtocol?(v132, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          outlined destroy of ReferenceResolutionClientProtocol?(v123, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          (*(void (**)(uint64_t, uint64_t))(v191 + 8))(v136, v124);
        }
        uint64_t v137 = v133;
        goto LABEL_110;
      }
      uint64_t v127 = v116;
      uint64_t v128 = v191;
      uint64_t v129 = v122;
      v130 = v190;
      (*(void (**)(char *, uint64_t, uint64_t))(v191 + 32))(v190, v119, v78);
      lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues();
      LODWORD(v183) = dispatch thunk of static Equatable.== infix(_:_:)();
      v131 = *(void (**)(char *, uint64_t))(v128 + 8);
      v131(v130, v78);
      outlined destroy of ReferenceResolutionClientProtocol?(v186, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v185, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      v131((char *)v129, v78);
      outlined destroy of ReferenceResolutionClientProtocol?(v127, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      uint64_t v123 = (uint64_t)v182;
      if ((v183 & 1) == 0) {
        goto LABEL_69;
      }
LABEL_75:
      swift_release();
      goto LABEL_106;
    }
    type metadata accessor for UsoTask_checkExistence_common_Person();
    if (swift_dynamicCast())
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
      swift_release();
      if (v194)
      {
        uint64_t v99 = (uint64_t)v177;
        dispatch thunk of UsoEntity_common_Person.definedValue.getter();
        swift_release();
        uint64_t v100 = v191;
      }
      else
      {
        uint64_t v100 = v191;
        uint64_t v99 = (uint64_t)v177;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v191 + 56))(v177, 1, 1, v78);
      }
      uint64_t v104 = (uint64_t)v178;
      uint64_t v138 = (uint64_t)v176;
      (*(void (**)(char *, void, uint64_t))(v100 + 104))(v176, *MEMORY[0x1E4FA3110], v78);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v100 + 56))(v138, 0, 1, v78);
      uint64_t v105 = v104 + *(int *)(v192 + 48);
      outlined init with copy of ReferenceResolutionClientProtocol?(v99, v104, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      outlined init with copy of ReferenceResolutionClientProtocol?(v138, v105, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      v106 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48);
      if (v106(v104, 1, v78) == 1)
      {
        swift_release();
        outlined destroy of ReferenceResolutionClientProtocol?(v138, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        uint64_t v107 = v99;
        goto LABEL_44;
      }
      uint64_t v139 = v172;
      outlined init with copy of ReferenceResolutionClientProtocol?(v104, v172, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      if (v106(v105, 1, v78) != 1)
      {
        v144 = v190;
        uint64_t v143 = v191;
        (*(void (**)(char *, uint64_t, uint64_t))(v191 + 32))(v190, v105, v78);
        lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues();
        char v85 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        v145 = *(void (**)(char *, uint64_t))(v143 + 8);
        v145(v144, v78);
        v98 = &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?;
        outlined destroy of ReferenceResolutionClientProtocol?(v138, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        outlined destroy of ReferenceResolutionClientProtocol?(v99, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        v145((char *)v139, v78);
        goto LABEL_57;
      }
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?(v138, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      outlined destroy of ReferenceResolutionClientProtocol?(v99, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      (*(void (**)(uint64_t, uint64_t))(v191 + 8))(v139, v78);
      goto LABEL_52;
    }
    type metadata accessor for UsoTask_request_common_Person();
    if (swift_dynamicCast())
    {
      v110 = v195;
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
      swift_release();
      v189 = v110;
      if (v194)
      {
        uint64_t v111 = v175;
        dispatch thunk of UsoEntity_common_Person.definedValue.getter();
        swift_release();
        uint64_t v112 = v191;
      }
      else
      {
        uint64_t v112 = v191;
        uint64_t v111 = v175;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v191 + 56))(v175, 1, 1, v78);
      }
      uint64_t v146 = (uint64_t)v171;
      uint64_t v147 = v174;
      v148 = *(void (**)(void))(v112 + 104);
      LODWORD(v186) = *MEMORY[0x1E4FA3110];
      v187 = (char *)(v112 + 104);
      v185 = v148;
      v148(v174);
      v188 = *(char **)(v112 + 56);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v188)(v147, 0, 1, v78);
      uint64_t v149 = v146 + *(int *)(v192 + 48);
      outlined init with copy of ReferenceResolutionClientProtocol?(v111, v146, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      uint64_t v150 = v191;
      outlined init with copy of ReferenceResolutionClientProtocol?(v147, v149, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
      v151 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v150 + 48);
      if (v151(v146, 1, v78) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v147, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        outlined destroy of ReferenceResolutionClientProtocol?(v111, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        if (v151(v149, 1, v78) == 1)
        {
          uint64_t v121 = v146;
          goto LABEL_65;
        }
      }
      else
      {
        uint64_t v152 = v167;
        outlined init with copy of ReferenceResolutionClientProtocol?(v146, v167, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        v184 = v151;
        if (v151(v149, 1, v78) != 1)
        {
          v156 = v190;
          (*(void (**)(char *, uint64_t, uint64_t))(v150 + 32))(v190, v149, v78);
          lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues();
          LODWORD(v183) = dispatch thunk of static Equatable.== infix(_:_:)();
          v157 = *(void (**)(char *, uint64_t))(v150 + 8);
          v157(v156, v78);
          outlined destroy of ReferenceResolutionClientProtocol?(v174, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          outlined destroy of ReferenceResolutionClientProtocol?(v175, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          v157((char *)v152, v78);
          outlined destroy of ReferenceResolutionClientProtocol?(v146, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          v153 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v188;
          v151 = v184;
          if (v183) {
            goto LABEL_75;
          }
LABEL_97:
          dispatch thunk of Uso_VerbTemplate_ReferenceSelect.select.getter();
          uint64_t v154 = (uint64_t)v168;
          if (v194)
          {
            dispatch thunk of UsoEntity_common_Person.definedValue.getter();
            swift_release();
            uint64_t v155 = v193;
          }
          else
          {
            uint64_t v155 = v193;
            v153(v168, 1, 1, v193);
          }
          uint64_t v158 = (uint64_t)v169;
          uint64_t v159 = (uint64_t)v170;
          ((void (*)(char *, void, uint64_t))v185)(v170, v186, v155);
          v153((char *)v159, 0, 1, v155);
          uint64_t v160 = v158 + *(int *)(v192 + 48);
          outlined init with copy of ReferenceResolutionClientProtocol?(v154, v158, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          outlined init with copy of ReferenceResolutionClientProtocol?(v159, v160, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
          if (v151(v158, 1, v155) == 1)
          {
            swift_release();
            outlined destroy of ReferenceResolutionClientProtocol?(v159, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
            outlined destroy of ReferenceResolutionClientProtocol?(v154, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
            if (v151(v160, 1, v155) == 1)
            {
              uint64_t v135 = v158;
              goto LABEL_105;
            }
          }
          else
          {
            uint64_t v161 = v166;
            outlined init with copy of ReferenceResolutionClientProtocol?(v158, v166, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
            if (v151(v160, 1, v155) != 1)
            {
              v163 = v190;
              uint64_t v162 = v191;
              (*(void (**)(char *, uint64_t, uint64_t))(v191 + 32))(v190, v160, v155);
              lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues();
              char v85 = dispatch thunk of static Equatable.== infix(_:_:)();
              swift_release();
              v164 = *(void (**)(char *, uint64_t))(v162 + 8);
              v164(v163, v155);
              v98 = &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?;
              outlined destroy of ReferenceResolutionClientProtocol?(v159, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
              outlined destroy of ReferenceResolutionClientProtocol?(v154, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
              v164((char *)v161, v155);
              uint64_t v92 = v158;
              goto LABEL_58;
            }
            swift_release();
            outlined destroy of ReferenceResolutionClientProtocol?(v159, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
            outlined destroy of ReferenceResolutionClientProtocol?(v154, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
            (*(void (**)(uint64_t, uint64_t))(v191 + 8))(v161, v155);
          }
          uint64_t v137 = v158;
LABEL_110:
          outlined destroy of ReferenceResolutionClientProtocol?(v137, &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
          char v85 = 0;
          goto LABEL_60;
        }
        outlined destroy of ReferenceResolutionClientProtocol?(v174, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        outlined destroy of ReferenceResolutionClientProtocol?(v175, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
        (*(void (**)(uint64_t, uint64_t))(v150 + 8))(v152, v78);
        v151 = v184;
      }
      outlined destroy of ReferenceResolutionClientProtocol?(v146, &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?));
      v153 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v188;
      goto LABEL_97;
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v196);
LABEL_72:
    char v85 = 0;
    goto LABEL_73;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
  swift_release();
  if (v194)
  {
    uint64_t v79 = (uint64_t)v187;
    dispatch thunk of UsoEntity_common_Person.definedValue.getter();
    swift_release();
    uint64_t v80 = v191;
  }
  else
  {
    uint64_t v80 = v191;
    uint64_t v79 = (uint64_t)v187;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v191 + 56))(v187, 1, 1, v78);
  }
  uint64_t v104 = (uint64_t)v188;
  (*(void (**)(char *, void, uint64_t))(v80 + 104))(v53, *MEMORY[0x1E4FA3110], v78);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v80 + 56))(v53, 0, 1, v78);
  uint64_t v105 = v104 + *(int *)(v192 + 48);
  outlined init with copy of ReferenceResolutionClientProtocol?(v79, v104, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v53, v105, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  v106 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48);
  if (v106(v104, 1, v78) == 1)
  {
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v53, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
    uint64_t v107 = v79;
LABEL_44:
    outlined destroy of ReferenceResolutionClientProtocol?(v107, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
    unsigned int v108 = v106(v105, 1, v78);
    if (v108 == 1) {
      v98 = &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?;
    }
    else {
      v98 = &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?);
    }
    if (v108 == 1) {
      char v85 = -1;
    }
    else {
      char v85 = 0;
    }
    goto LABEL_57;
  }
  v109 = (char *)v184;
  outlined init with copy of ReferenceResolutionClientProtocol?(v104, (uint64_t)v184, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  if (v106(v105, 1, v78) != 1)
  {
    v114 = v190;
    uint64_t v113 = v191;
    (*(void (**)(char *, uint64_t, uint64_t))(v191 + 32))(v190, v105, v78);
    lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues();
    char v85 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    v115 = *(void (**)(char *, uint64_t))(v113 + 8);
    v115(v114, v78);
    v98 = &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v53, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
    outlined destroy of ReferenceResolutionClientProtocol?(v79, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
    v115(v109, v78);
    goto LABEL_57;
  }
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v53, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  outlined destroy of ReferenceResolutionClientProtocol?(v79, &demangling cache variable for type metadata for UsoEntity_common_Person.DefinedValues?);
  (*(void (**)(char *, uint64_t))(v191 + 8))(v109, v78);
LABEL_52:
  char v85 = 0;
  v98 = &demangling cache variable for type metadata for (UsoEntity_common_Person.DefinedValues?, UsoEntity_common_Person.DefinedValues?);
LABEL_57:
  uint64_t v92 = v104;
LABEL_58:
  v93 = v98;
LABEL_59:
  outlined destroy of ReferenceResolutionClientProtocol?(v92, v93);
LABEL_60:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v196);
LABEL_73:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v197, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v85 & 1;
}

uint64_t UsoEntity_common_Person.contactIDs.getter()
{
  uint64_t v54 = type metadata accessor for IdentifierAppBundle();
  uint64_t v0 = *(void *)(v54 - 8);
  MEMORY[0x1F4188790](v54);
  unint64_t v53 = (char *)&v46 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for UsoIdentifier();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v55 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v49 = (char *)&v46 - v7;
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v46 - v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v46 - v11;
  uint64_t result = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  uint64_t v14 = MEMORY[0x1E4FBC860];
  if (!result) {
    uint64_t result = MEMORY[0x1E4FBC860];
  }
  uint64_t v59 = MEMORY[0x1E4FBC860];
  uint64_t v52 = *(void *)(result + 16);
  if (v52)
  {
    unint64_t v15 = 0;
    uint64_t v58 = (void (*)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v50 = (void (**)(char *, uint64_t))(v0 + 8);
    uint64_t v51 = result;
    uint64_t v56 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v47 = v3;
    uint64_t v48 = (void (**)(char *, char *, uint64_t))(v3 + 32);
    while (1)
    {
      if (v15 >= *(void *)(result + 16))
      {
        __break(1u);
        return result;
      }
      char v17 = v10;
      unint64_t v18 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      uint64_t v57 = *(void *)(v3 + 72);
      uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
      v19(v12, result + v18 + v57 * v15, v2);
      uint64_t v20 = v53;
      UsoIdentifier.appBundleSemantic.getter();
      uint64_t v21 = IdentifierAppBundle.rawValue.getter();
      uint64_t v23 = v22;
      (*v50)(v20, v54);
      if (v21 == 0x73746361746E6F43 && v23 == 0xE800000000000000)
      {
        swift_bridgeObjectRelease();
        uint64_t v10 = v17;
        v19(v17, (unint64_t)v12, v2);
      }
      else
      {
        char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v10 = v17;
        v19(v17, (unint64_t)v12, v2);
        if ((v24 & 1) == 0) {
          goto LABEL_5;
        }
      }
      uint64_t v25 = UsoIdentifier.namespace.getter();
      if (!v26)
      {
LABEL_5:
        uint64_t v16 = *v56;
        (*v56)(v10, v2);
        goto LABEL_6;
      }
      if (v25 == 0x64695F6D657469 && v26 == 0xE700000000000000)
      {
        swift_bridgeObjectRelease();
        (*v56)(v10, v2);
LABEL_18:
        uint64_t v28 = *v48;
        (*v48)(v49, v12, v2);
        uint64_t v29 = v59;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v29 + 16) + 1, 1);
          uint64_t v29 = v59;
        }
        unint64_t v31 = *(void *)(v29 + 16);
        unint64_t v30 = *(void *)(v29 + 24);
        if (v31 >= v30 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
          uint64_t v29 = v59;
        }
        *(void *)(v29 + 16) = v31 + 1;
        v28((char *)(v29 + v18 + v31 * v57), v49, v2);
        uint64_t v59 = v29;
        uint64_t v3 = v47;
        goto LABEL_7;
      }
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      uint64_t v16 = *v56;
      (*v56)(v10, v2);
      if (v27) {
        goto LABEL_18;
      }
LABEL_6:
      v16(v12, v2);
LABEL_7:
      ++v15;
      uint64_t result = v51;
      if (v52 == v15)
      {
        uint64_t v32 = v59;
        uint64_t v14 = MEMORY[0x1E4FBC860];
        goto LABEL_26;
      }
    }
  }
  uint64_t v32 = MEMORY[0x1E4FBC860];
LABEL_26:
  swift_bridgeObjectRelease();
  int64_t v33 = *(void *)(v32 + 16);
  if (v33)
  {
    uint64_t v59 = v14;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33, 0);
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v34 = v3 + 16;
    uint64_t v36 = *(unsigned __int8 *)(v34 + 64);
    uint64_t v56 = (void (**)(char *, uint64_t))v32;
    uint64_t v37 = v32 + ((v36 + 32) & ~v36);
    uint64_t v57 = *(void *)(v34 + 56);
    uint64_t v58 = v35;
    uint64_t v38 = (void (**)(char *, uint64_t))(v34 - 8);
    do
    {
      uint64_t v39 = v55;
      v58(v55, v37, v2);
      uint64_t v40 = UsoIdentifier.value.getter();
      uint64_t v42 = v41;
      (*v38)(v39, v2);
      uint64_t v14 = v59;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v14 + 16) + 1, 1);
        uint64_t v14 = v59;
      }
      unint64_t v44 = *(void *)(v14 + 16);
      unint64_t v43 = *(void *)(v14 + 24);
      if (v44 >= v43 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1);
        uint64_t v14 = v59;
      }
      *(void *)(v14 + 16) = v44 + 1;
      uint64_t v45 = v14 + 16 * v44;
      *(void *)(v45 + 32) = v40;
      *(void *)(v45 + 40) = v42;
      v37 += v57;
      --v33;
    }
    while (v33);
  }
  swift_release();
  return v14;
}

uint64_t UsoEntity_common_Person.hasOnlyPartialContactsSpans.getter()
{
  uint64_t matched = type metadata accessor for MatchInfo.MatchSignals();
  uint64_t v0 = *(void *)(matched - 8);
  MEMORY[0x1F4188790](matched);
  uint64_t v65 = (char *)&v56 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MatchInfo?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v67 = (char *)&v56 - v6;
  uint64_t v7 = type metadata accessor for MatchInfo();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v60 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  int v61 = (char *)&v56 - v11;
  uint64_t v12 = type metadata accessor for UsoEntitySpan();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v59 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  unint64_t v18 = (char *)&v56 - v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v56 - v19;
  uint64_t v21 = dispatch thunk of CodeGenGlobalArgs.getEntitySpansFor(attributeName:)();
  if (!v21) {
    uint64_t v21 = MEMORY[0x1E4FBC860];
  }
  uint64_t v22 = *(void *)(v21 + 16);
  uint64_t v69 = v21;
  if (v22)
  {
    uint64_t v68 = v7;
    uint64_t v56 = v13;
    uint64_t v23 = v13 + 16;
    uint64_t v73 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
    uint64_t v74 = v13 + 16;
    unint64_t v57 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    uint64_t v58 = v5;
    uint64_t v24 = v0;
    unint64_t v25 = v21 + v57;
    uint64_t v70 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    uint64_t v63 = (void (**)(char *, uint64_t))(v24 + 8);
    v64 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
    uint64_t v62 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v26 = (void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v75 = *(void *)(v23 + 56);
    uint64_t v27 = swift_bridgeObjectRetain();
    unint64_t v28 = v25;
    uint64_t v71 = v22;
    v72 = v18;
    uint64_t v29 = v27;
    while (1)
    {
      v73(v20, v28, v12);
      uint64_t v31 = UsoEntitySpan.originAppId.getter();
      if (v32)
      {
        if (v31 == 0x73746361746E6F43 && v32 == 0xE800000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v33 & 1) == 0) {
            goto LABEL_6;
          }
        }
        uint64_t v34 = (uint64_t)v67;
        UsoEntitySpan.matchInfo.getter();
        uint64_t v35 = v68;
        if ((*v70)(v34, 1, v68) != 1)
        {
          uint64_t v36 = v61;
          (*v64)(v61, v34, v35);
          uint64_t v37 = v65;
          static MatchInfo.MatchSignals.exactMatch.getter();
          char v38 = MatchInfo.hasMatchSignals(_:)();
          (*v63)(v37, matched);
          (*v62)(v36, v35);
          (*v26)(v20, v12);
          uint64_t v29 = v69;
          if (v38)
          {
            swift_bridgeObjectRelease_n();
            return 0;
          }
          goto LABEL_7;
        }
        outlined destroy of ReferenceResolutionClientProtocol?(v34, &demangling cache variable for type metadata for MatchInfo?);
        uint64_t v29 = v69;
      }
LABEL_6:
      (*v26)(v20, v12);
LABEL_7:
      v28 += v75;
      --v22;
      unint64_t v30 = v72;
      if (!v22)
      {
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v40 = 0;
        uint64_t v76 = MEMORY[0x1E4FBC860];
        uint64_t v67 = (char *)(v56 + 32);
        uint64_t v41 = (uint64_t)v58;
        uint64_t v42 = v68;
        while (1)
        {
          if (v40 >= *(void *)(v29 + 16))
          {
            __break(1u);
            return result;
          }
          v73(v30, v25, v12);
          uint64_t v43 = UsoEntitySpan.originAppId.getter();
          if (!v44) {
            goto LABEL_18;
          }
          if (v43 == 0x73746361746E6F43 && v44 == 0xE800000000000000)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v45 & 1) == 0) {
              goto LABEL_18;
            }
          }
          UsoEntitySpan.matchInfo.getter();
          if ((*v70)(v41, 1, v42) == 1)
          {
            outlined destroy of ReferenceResolutionClientProtocol?(v41, &demangling cache variable for type metadata for MatchInfo?);
          }
          else
          {
            uint64_t v46 = v60;
            (*v64)(v60, v41, v42);
            uint64_t v47 = v65;
            static MatchInfo.MatchSignals.partialMatch.getter();
            char v48 = MatchInfo.hasMatchSignals(_:)();
            (*v63)(v47, matched);
            uint64_t v49 = v46;
            uint64_t v29 = v69;
            (*v62)(v49, v42);
            if (v48)
            {
              uint64_t v50 = *(uint64_t (**)(unint64_t, char *, uint64_t))v67;
              (*(void (**)(char *, char *, uint64_t))v67)(v59, v30, v12);
              uint64_t v51 = v76;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v51 + 16) + 1, 1);
                uint64_t v51 = v76;
              }
              unint64_t v53 = *(void *)(v51 + 16);
              unint64_t v52 = *(void *)(v51 + 24);
              if (v53 >= v52 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1);
                uint64_t v51 = v76;
              }
              *(void *)(v51 + 16) = v53 + 1;
              uint64_t result = v50(v51 + v57 + v53 * v75, v59, v12);
              uint64_t v76 = v51;
              uint64_t v41 = (uint64_t)v58;
              uint64_t v42 = v68;
              goto LABEL_19;
            }
          }
LABEL_18:
          uint64_t result = ((uint64_t (*)(char *, uint64_t))*v26)(v30, v12);
LABEL_19:
          ++v40;
          v25 += v75;
          if (v71 == v40)
          {
            uint64_t v54 = v76;
            goto LABEL_35;
          }
        }
      }
    }
  }
  uint64_t v54 = MEMORY[0x1E4FBC860];
LABEL_35:
  swift_bridgeObjectRelease();
  uint64_t v55 = *(void *)(v54 + 16);
  swift_release();
  return v55 != 0;
}

uint64_t UsoEntity_common_Person.isAgeRequestPerson.getter()
{
  uint64_t v0 = type metadata accessor for DateComponents();
  uint64_t v75 = *(void *)(v0 - 8);
  uint64_t v76 = v0;
  MEMORY[0x1F4188790](v0);
  uint64_t v70 = (char *)v66 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v68 = (char *)v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v69 = (uint64_t)v66 - v6;
  MEMORY[0x1F4188790](v5);
  uint64_t v71 = (char *)v66 - v7;
  uint64_t v8 = type metadata accessor for DateTimeResolver();
  uint64_t v88 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  v87 = (char *)v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<DateTime>?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v89 = (char *)v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<DateTime>);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v92 = v12;
  uint64_t v93 = v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  int v77 = (char *)v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v78 = (char *)v66 - v16;
  uint64_t v86 = type metadata accessor for DateTimeResolutionSpec.DateTimeConvergenceStrategy();
  uint64_t v84 = *(void *)(v86 - 8);
  MEMORY[0x1F4188790](v86);
  char v85 = (char *)v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DateTimeResolutionSpec.ExpandToType();
  uint64_t v81 = *(void *)(v18 - 8);
  uint64_t v82 = v18;
  MEMORY[0x1F4188790](v18);
  int v83 = (char *)v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DateTimeResolutionSpec();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v79 = v20;
  uint64_t v80 = v21;
  MEMORY[0x1F4188790](v20);
  v91 = (char *)v66 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Date();
  MEMORY[0x1F4188790](v23 - 8);
  uint64_t v24 = type metadata accessor for Calendar();
  uint64_t v74 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  v90 = (char *)v66 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for DateTimeResolutionContext.Hemisphere();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)v66 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = type metadata accessor for TimeZone();
  uint64_t v72 = *(void *)(v73 - 8);
  MEMORY[0x1F4188790](v73);
  uint64_t v94 = (char *)v66 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for Locale();
  uint64_t v32 = MEMORY[0x1F4188790](v31 - 8);
  uint64_t v33 = MEMORY[0x1F4188790](v32);
  MEMORY[0x1F4188790](v33);
  uint64_t v34 = dispatch thunk of UsoEntity_common_Person.associatedDate.getter();
  if (!v34) {
    return 0;
  }
  uint64_t v67 = v8;
  v66[0] = v24;
  uint64_t v35 = v34;
  if (!UsoEntity_common_Date.toDate()())
  {
    swift_release();
    return 0;
  }
  v66[1] = v35;
  type metadata accessor for DateTime.Time();
  swift_allocObject();
  swift_retain();
  DateTime.Time.init(withHour:)();
  type metadata accessor for DateTime();
  swift_allocObject();
  uint64_t v36 = DateTime.init(withDate:time:)();
  static Locale.autoupdatingCurrent.getter();
  static Locale.autoupdatingCurrent.getter();
  static Locale.autoupdatingCurrent.getter();
  static TimeZone.autoupdatingCurrent.getter();
  (*(void (**)(char *, void, uint64_t))(v27 + 104))(v29, *MEMORY[0x1E4F9FE00], v26);
  uint64_t v37 = v36;
  char v38 = v90;
  static Calendar.autoupdatingCurrent.getter();
  static Date.now.getter();
  type metadata accessor for DateTimeResolutionContext();
  swift_allocObject();
  uint64_t v39 = DateTimeResolutionContext.init(with:regionFormat:regionAwareLanguage:timeZone:hemisphere:calendar:date:)();
  (*(void (**)(char *, void, uint64_t))(v81 + 104))(v83, *MEMORY[0x1E4F9FDE8], v82);
  (*(void (**)(char *, void, uint64_t))(v84 + 104))(v85, *MEMORY[0x1E4F9FDD8], v86);
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v40 = v91;
  DateTimeResolutionSpec.init(expandToType:dateTimeConvergenceStrategy:overridesForDefinedDateTimeRanges:inferDurationAsInterval:witchingHourRoundOffEnabled:convergeToOperatingHours:)();
  uint64_t v41 = v87;
  DateTimeResolver.init()();
  uint64_t v42 = v89;
  DateTimeResolver.makeRecommendation(value:context:spec:)();
  uint64_t v86 = v37;
  (*(void (**)(char *, uint64_t))(v88 + 8))(v41, v67);
  uint64_t v46 = v92;
  uint64_t v45 = v93;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v93 + 56))(v42, 0, 1, v92);
  uint64_t v47 = v78;
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v78, v42, v46);
  char v48 = v77;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v77, v47, v46);
  int v49 = (*(uint64_t (**)(char *, uint64_t))(v45 + 88))(v48, v46);
  if (v49 == *MEMORY[0x1E4F9FDA8] || v49 == *MEMORY[0x1E4F9FD98])
  {
    (*(void (**)(char *, uint64_t))(v45 + 96))(v48, v46);
    static Calendar.current.getter();
    uint64_t v56 = v94;
    static TimeZone.current.getter();
    unint64_t v57 = (void *)DateTime.toINDateComponentsRange(calendar:timeZone:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v56, v73);
    (*(void (**)(char *, void))(v74 + 8))(v38, v66[0]);
    unint64_t v43 = (unint64_t)objc_msgSend(v57, sel_startDateComponents);

    if (!v43)
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v46);
      (*(void (**)(char *, uint64_t))(v80 + 8))(v40, v79);
      uint64_t v61 = (uint64_t)v71;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56))(v71, 1, 1, v76);
LABEL_24:
      outlined destroy of ReferenceResolutionClientProtocol?(v61, &demangling cache variable for type metadata for DateComponents?);
      return v43;
    }
    uint64_t v58 = v70;
    static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();
    swift_release();

    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v46);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v40, v79);
    uint64_t v60 = v75;
    uint64_t v59 = v76;
    uint64_t v61 = (uint64_t)v71;
    (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v71, v58, v76);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v60 + 56))(v61, 0, 1, v59);
LABEL_23:
    unint64_t v43 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v61, 1, v59) != 1;
    goto LABEL_24;
  }
  uint64_t v89 = (char *)v39;
  uint64_t v50 = v94;
  if (v49 != *MEMORY[0x1E4F9FDA0])
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v62 = *(void (**)(char *, uint64_t))(v45 + 8);
    v62(v47, v46);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v40, v79);
    v62(v48, v46);
    return 0;
  }
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v45 + 96))(v48, v46);
  uint64_t v51 = *(void *)v48;
  if (!(*(void *)v48 >> 62))
  {
    if (*(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v65)
  {
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v46);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v40, v79);
    return 0;
  }
LABEL_12:
  if ((v51 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1BA9E3990](0, v51);
    goto LABEL_15;
  }
  if (*(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
LABEL_15:
    swift_bridgeObjectRelease();
    static Calendar.current.getter();
    static TimeZone.current.getter();
    unint64_t v52 = (void *)DateTime.toINDateComponentsRange(calendar:timeZone:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v50, v73);
    (*(void (**)(char *, void))(v74 + 8))(v38, v66[0]);
    id v53 = objc_msgSend(v52, sel_startDateComponents);

    if (v53)
    {
      uint64_t v54 = v68;
      static DateComponents._unconditionallyBridgeFromObjectiveC(_:)();
      swift_release();

      uint64_t v55 = 0;
    }
    else
    {
      swift_release();
      uint64_t v55 = 1;
      uint64_t v54 = v68;
    }
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v46);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v40, v79);
    uint64_t v60 = v75;
    uint64_t v63 = v55;
    uint64_t v59 = v76;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56))(v54, v63, 1, v76);
    uint64_t v64 = (uint64_t)v54;
    uint64_t v61 = v69;
    outlined init with take of DateComponents?(v64, v69);
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

unint64_t specialized ContactsAffinityScorer.getContactTask(from:)()
{
  unint64_t v0 = specialized static AffinityScorerUtils.getTask(_:)();
  if (!v0)
  {
    long long v3 = 0u;
    long long v4 = 0u;
    goto LABEL_16;
  }
  swift_retain();
  static UsoTask_CodegenConverter.convert(task:)();
  swift_release();
  if (!*((void *)&v4 + 1))
  {
    swift_release();
LABEL_15:
    unint64_t v0 = 0;
    goto LABEL_16;
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)&v3, (uint64_t)v2, (uint64_t *)&demangling cache variable for type metadata for Any?);
  type metadata accessor for UsoTask_summarise_common_Person();
  if (!swift_dynamicCast())
  {
    type metadata accessor for UsoTask_noVerb_common_Person();
    if (!swift_dynamicCast())
    {
      type metadata accessor for UsoTask_read_common_Person();
      if (!swift_dynamicCast())
      {
        type metadata accessor for UsoTask_update_common_Person();
        if (!swift_dynamicCast())
        {
          type metadata accessor for UsoTask_checkExistence_common_Person();
          if (!swift_dynamicCast())
          {
            type metadata accessor for UsoTask_request_common_Person();
            if (!swift_dynamicCast())
            {
              type metadata accessor for UsoTask_create_common_Person();
              if (!swift_dynamicCast())
              {
                type metadata accessor for UsoTask_delete_common_Person();
                if (!swift_dynamicCast())
                {
                  type metadata accessor for UsoTask_update_common_Communication();
                  if (!swift_dynamicCast())
                  {
                    swift_release();
                    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
                    goto LABEL_15;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
LABEL_16:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v3, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v0;
}

uint64_t specialized ContactsAffinityScorer.score(input:environment:)()
{
  uint64_t v0 = type metadata accessor for Locale();
  uint64_t v61 = *(char **)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v2 = (char *)&v58 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for USOParse();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Parse();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v8 + 88))(v10, v7) != *MEMORY[0x1E4FA1F48])
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.executor);
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = 2;
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl(&dword_1B9C64000, v29, v30, "#ContactsAffinityScorer returning default affinity score.", v32, 2u);
      MEMORY[0x1BA9E48C0](v32, -1, -1);

      return v31;
    }

    return 2;
  }
  (*(void (**)(char *, uint64_t))(v8 + 96))(v10, v7);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v10, v3);
  uint64_t v11 = v6;
  if (one-time initialization token for localesToExclude != -1) {
    swift_once();
  }
  uint64_t v12 = (char *)static ContactsAffinityScorer.localesToExclude;
  uint64_t v13 = *((void *)static ContactsAffinityScorer.localesToExclude + 2);
  if (!v13)
  {
LABEL_13:
    if (!specialized ContactsAffinityScorer.getContactTask(from:)())
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v38 = type metadata accessor for Logger();
      __swift_project_value_buffer(v38, (uint64_t)static Logger.executor);
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v41 = 0;
        _os_log_impl(&dword_1B9C64000, v39, v40, "#ContactsAffinityScorer did not find any relevant usoIdentifiers or tasks, returning low affinity score.", v41, 2u);
        MEMORY[0x1BA9E48C0](v41, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v3);
      return 1;
    }
    if (UsoTask.isAgeRequest.getter() & 1) != 0 && (UsoTask.hasPartialContactsSpanMatches.getter())
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v23 = type metadata accessor for Logger();
      __swift_project_value_buffer(v23, (uint64_t)static Logger.executor);
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v24, v25)) {
        goto LABEL_59;
      }
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      uint64_t v27 = "#ContactsAffinityScorer found recognized task but with partial span matches, returning default affinity score.";
LABEL_58:
      _os_log_impl(&dword_1B9C64000, v24, v25, v27, v26, 2u);
      MEMORY[0x1BA9E48C0](v26, -1, -1);
LABEL_59:
      swift_release();

      (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v3);
      return 2;
    }
    if (UsoTask.hasContactIDs.getter())
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      __swift_project_value_buffer(v33, (uint64_t)static Logger.executor);
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v34, v35)) {
        goto LABEL_53;
      }
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      uint64_t v37 = "#ContactsAffinityScorer found recognized task with contact IDs, returning high affinity score.";
    }
    else
    {
      if ((UsoTask.isMeCardTask.getter() & 1) == 0)
      {
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v56 = type metadata accessor for Logger();
        __swift_project_value_buffer(v56, (uint64_t)static Logger.executor);
        uint64_t v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v24, v25)) {
          goto LABEL_59;
        }
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v26 = 0;
        uint64_t v27 = "#ContactsAffinityScorer found recognized task but no contact IDs, returning default affinity score.";
        goto LABEL_58;
      }
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v55 = type metadata accessor for Logger();
      __swift_project_value_buffer(v55, (uint64_t)static Logger.executor);
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v34, v35))
      {
LABEL_53:
        swift_release();

        (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v3);
        return 3;
      }
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      uint64_t v37 = "#ContactsAffinityScorer found recognized task for user, returning high affinity score.";
    }
    _os_log_impl(&dword_1B9C64000, v34, v35, v37, v36, 2u);
    MEMORY[0x1BA9E48C0](v36, -1, -1);
    goto LABEL_53;
  }
  uint64_t v58 = v3;
  uint64_t v59 = v6;
  uint64_t v60 = v4;
  uint64_t v14 = (void (**)(char *, uint64_t))(v61 + 8);
  swift_bridgeObjectRetain_n();
  uint64_t v61 = v12;
  uint64_t v15 = (uint64_t *)(v12 + 40);
  while (1)
  {
    uint64_t v17 = *(v15 - 1);
    uint64_t v16 = *v15;
    swift_bridgeObjectRetain();
    SiriEnvironment.currentDevice.getter();
    dispatch thunk of CurrentDevice.siriLocale.getter();
    swift_release();
    uint64_t v18 = Locale.identifier.getter();
    uint64_t v20 = v19;
    (*v14)(v2, v0);
    if (v17 == v18 && v16 == v20) {
      break;
    }
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v22) {
      goto LABEL_36;
    }
    v15 += 2;
    if (!--v13)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v11 = v59;
      uint64_t v4 = v60;
      uint64_t v3 = v58;
      goto LABEL_13;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_36:
  uint64_t v42 = v58;
  swift_bridgeObjectRelease_n();
  unint64_t v43 = v59;
  uint64_t v44 = USOParse.usoIdentifiers.getter();
  char v45 = Array<A>.containsContactIdentifier.getter(v44);
  swift_bridgeObjectRelease();
  uint64_t v46 = v60;
  if (v45)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static Logger.executor);
    char v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl(&dword_1B9C64000, v48, v49, "#ContactsAffinityScorer preventing any domain boosting logic from executing in reported locale, returning .default", v50, 2u);
      MEMORY[0x1BA9E48C0](v50, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v46 + 8))(v43, v42);
    return 2;
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v51 = type metadata accessor for Logger();
  __swift_project_value_buffer(v51, (uint64_t)static Logger.executor);
  unint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v54 = 0;
    _os_log_impl(&dword_1B9C64000, v52, v53, "#ContactsAffinityScorer did not find any relevant usoIdentifier, returning low affinity score.", v54, 2u);
    MEMORY[0x1BA9E48C0](v54, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v46 + 8))(v43, v42);
  return 1;
}

ValueMetadata *type metadata accessor for ContactsAffinityScorer()
{
  return &type metadata for ContactsAffinityScorer;
}

unint64_t lazy protocol witness table accessor for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues()
{
  unint64_t result = lazy protocol witness table cache variable for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues;
  if (!lazy protocol witness table cache variable for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues)
  {
    type metadata accessor for UsoEntity_common_Person.DefinedValues();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_Person.DefinedValues and conformance UsoEntity_common_Person.DefinedValues);
  }
  return result;
}

uint64_t outlined init with take of DateComponents?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *static ContextTypeKey.allCases.getter()
{
  return &outlined read-only object #0 of static ContextTypeKey.allCases.getter;
}

uint64_t ContextTypeKey.rawValue.getter(char a1)
{
  uint64_t result = 0xD000000000000019;
  if (a1)
  {
    if (a1 == 1) {
      return 0x4C4E79636167656CLL;
    }
    else {
      return 0xD00000000000001ALL;
    }
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContextTypeKey(unsigned char *a1, unsigned char *a2)
{
  int v2 = *a1;
  unint64_t v3 = 0x4C4E79636167656CLL;
  unint64_t v4 = 0xEF747865746E6F43;
  unint64_t v5 = 0x80000001BA060330;
  if (v2 != 1)
  {
    unint64_t v3 = 0xD00000000000001ALL;
    unint64_t v4 = 0x80000001BA060330;
  }
  if (*a1) {
    unint64_t v6 = v3;
  }
  else {
    unint64_t v6 = 0xD000000000000019;
  }
  if (v2) {
    unint64_t v7 = v4;
  }
  else {
    unint64_t v7 = 0x80000001BA060300;
  }
  unint64_t v8 = 0x4C4E79636167656CLL;
  if (*a2 == 1) {
    unint64_t v5 = 0xEF747865746E6F43;
  }
  else {
    unint64_t v8 = 0xD00000000000001ALL;
  }
  if (*a2) {
    unint64_t v9 = v8;
  }
  else {
    unint64_t v9 = 0xD000000000000019;
  }
  if (*a2) {
    unint64_t v10 = v5;
  }
  else {
    unint64_t v10 = 0x80000001BA060300;
  }
  if (v6 == v9 && v7 == v10) {
    char v11 = 1;
  }
  else {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ContextTypeKey()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ContextTypeKey()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContextTypeKey()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ContextTypeKey@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized ContextTypeKey.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ContextTypeKey(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xD000000000000019;
  unint64_t v3 = 0xEF747865746E6F43;
  unint64_t v4 = 0x4C4E79636167656CLL;
  if (*v1 != 1)
  {
    unint64_t v4 = 0xD00000000000001ALL;
    unint64_t v3 = 0x80000001BA060330;
  }
  if (*v1)
  {
    unint64_t v2 = v4;
    unint64_t v5 = v3;
  }
  else
  {
    unint64_t v5 = 0x80000001BA060300;
  }
  *a1 = v2;
  a1[1] = v5;
}

void protocol witness for static CaseIterable.allCases.getter in conformance ContextTypeKey(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance ContextTypeKey;
}

unint64_t specialized ContextTypeKey.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ContextTypeKey.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type ContextTypeKey and conformance ContextTypeKey()
{
  unint64_t result = lazy protocol witness table cache variable for type ContextTypeKey and conformance ContextTypeKey;
  if (!lazy protocol witness table cache variable for type ContextTypeKey and conformance ContextTypeKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContextTypeKey and conformance ContextTypeKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [ContextTypeKey] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [ContextTypeKey] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ContextTypeKey] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [ContextTypeKey]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ContextTypeKey] and conformance [A]);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ContextTypeKey(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9DC0418);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContextTypeKey()
{
  return &type metadata for ContextTypeKey;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for ConversationSessionKey();
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  char v48 = (char *)&v43 - v9;
  uint64_t v49 = v8;
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v44 = a1 + 56;
  uint64_t v11 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  uint64_t v50 = a1;
  uint64_t v51 = v8 + 16;
  uint64_t v47 = v8 + 32;
  int64_t v45 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v46 = (void (**)(char *, uint64_t))(v8 + 8);
  swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v53)
  {
    if (v13)
    {
      uint64_t v52 = (v13 - 1) & v13;
      int64_t v53 = i;
      unint64_t v16 = __clz(__rbit64(v13)) | (i << 6);
    }
    else
    {
      int64_t v17 = i + 1;
      if (__OFADD__(i, 1)) {
        goto LABEL_36;
      }
      if (v17 >= v45) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v44 + 8 * v17);
      int64_t v19 = i + 1;
      if (!v18)
      {
        int64_t v19 = i + 2;
        if (i + 2 >= v45) {
          return swift_release();
        }
        unint64_t v18 = *(void *)(v44 + 8 * v19);
        if (!v18)
        {
          int64_t v19 = i + 3;
          if (i + 3 >= v45) {
            return swift_release();
          }
          unint64_t v18 = *(void *)(v44 + 8 * v19);
          if (!v18)
          {
            int64_t v19 = i + 4;
            if (i + 4 >= v45) {
              return swift_release();
            }
            unint64_t v18 = *(void *)(v44 + 8 * v19);
            if (!v18)
            {
              uint64_t v20 = i + 5;
              if (i + 5 >= v45) {
                return swift_release();
              }
              unint64_t v18 = *(void *)(v44 + 8 * v20);
              if (!v18)
              {
                while (1)
                {
                  int64_t v19 = v20 + 1;
                  if (__OFADD__(v20, 1)) {
                    goto LABEL_37;
                  }
                  if (v19 >= v45) {
                    return swift_release();
                  }
                  unint64_t v18 = *(void *)(v44 + 8 * v19);
                  ++v20;
                  if (v18) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v19 = i + 5;
            }
          }
        }
      }
LABEL_23:
      uint64_t v52 = (v18 - 1) & v18;
      int64_t v53 = v19;
      unint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
    }
    uint64_t v21 = v49;
    uint64_t v22 = *(void *)(v49 + 72);
    uint64_t v23 = *(void (**)(char *, unint64_t, uint64_t))(v49 + 16);
    uint64_t v24 = v48;
    v23(v48, *(void *)(v50 + 48) + v22 * v16, v4);
    uint64_t v25 = v4;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v7, v24, v4);
    memset(v54, 0, sizeof(v54));
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v56 = (void *)*a2;
    uint64_t v27 = v56;
    uint64_t v28 = a2;
    *a2 = 0x8000000000000000;
    uint64_t v29 = (uint64_t)v7;
    unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
    uint64_t v32 = v27[2];
    BOOL v33 = (v30 & 1) == 0;
    uint64_t v34 = v32 + v33;
    if (__OFADD__(v32, v33)) {
      break;
    }
    char v35 = v30;
    if (v27[3] >= v34)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, isUniquelyReferenced_nonNull_native);
      unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v29);
      if ((v35 & 1) != (v37 & 1)) {
        goto LABEL_38;
      }
      unint64_t v31 = v36;
    }
    uint64_t v4 = v25;
    uint64_t v38 = v56;
    if (v35)
    {
      uint64_t v15 = 32 * v31;
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v56[7] + v15, (uint64_t)v55, &demangling cache variable for type metadata for Sendable?);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v54, v38[7] + v15, &demangling cache variable for type metadata for Sendable?);
      unint64_t v7 = (char *)v29;
    }
    else
    {
      v56[(v31 >> 6) + 8] |= 1 << v31;
      unint64_t v7 = (char *)v29;
      v23((char *)(v38[6] + v31 * v22), v29, v25);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v54, v38[7] + 32 * v31, &demangling cache variable for type metadata for Sendable?);
      uint64_t v39 = v38[2];
      BOOL v40 = __OFADD__(v39, 1);
      uint64_t v41 = v39 + 1;
      if (v40) {
        goto LABEL_35;
      }
      v38[2] = v41;
      memset(v55, 0, 24);
      v55[3] = 1;
    }
    a2 = v28;
    *uint64_t v28 = v38;
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v55, &demangling cache variable for type metadata for Sendable??);
    (*v46)(v7, v25);
    unint64_t v13 = v52;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.toLegacyNLContext()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v29 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue();
  uint64_t v2 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v4 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_LegacyNLContext.LegacyContextSource();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Siri_Nlu_External_LegacyNLContext.init()();
  Com_Apple_Siri_Product_Proto_PromptContext.dictationPrompt.getter();
  Siri_Nlu_External_LegacyNLContext.dictationPrompt.setter();
  Com_Apple_Siri_Product_Proto_PromptContext.strictPrompt.getter();
  Siri_Nlu_External_LegacyNLContext.strictPrompt.setter();
  Com_Apple_Siri_Product_Proto_PromptContext.previousDomainName.getter();
  Siri_Nlu_External_LegacyNLContext.previousDomainName.setter();
  Com_Apple_Siri_Product_Proto_PromptContext.listenAfterSpeaking.getter();
  Siri_Nlu_External_LegacyNLContext.listenAfterSpeaking.setter();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E4FA28D0], v5);
  Siri_Nlu_External_LegacyNLContext.legacyContextSource.setter();
  uint64_t v9 = Com_Apple_Siri_Product_Proto_PromptContext.responseOptions.getter();
  int64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    v26[1] = a1;
    uint64_t v30 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
    uint64_t v11 = v2 + 16;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    v26[0] = v9;
    uint64_t v14 = v9 + ((v13 + 32) & ~v13);
    uint64_t v27 = *(void *)(v11 + 56);
    uint64_t v28 = v12;
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      uint64_t v16 = v29;
      uint64_t v17 = v11;
      v28(v4, v14, v29);
      uint64_t v18 = Com_Apple_Siri_Product_Proto_SemanticValue.serializedValue.getter();
      uint64_t v20 = v19;
      (*v15)(v4, v16);
      uint64_t v21 = v30;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v21 + 16) + 1, 1);
        uint64_t v21 = v30;
      }
      unint64_t v23 = *(void *)(v21 + 16);
      unint64_t v22 = *(void *)(v21 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        uint64_t v21 = v30;
      }
      *(void *)(v21 + 16) = v23 + 1;
      uint64_t v24 = v21 + 16 * v23;
      *(void *)(v24 + 32) = v18;
      *(void *)(v24 + 40) = v20;
      v14 += v27;
      --v10;
      uint64_t v11 = v17;
    }
    while (v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = MEMORY[0x1E4FBC860];
  }
  return MEMORY[0x1BA9DE2B0](v21);
}

void key path setter for ContextUpdater.finalNativeFlowContextCommand : ContextUpdater(void **a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  uint64_t v4 = *(void **)(v3 + 256);
  *(void *)(v3 + 256) = v2;
  id v5 = v2;
}

uint64_t key path setter for ContextUpdater.finalActiveTasks : ContextUpdater(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 264) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t key path setter for ContextUpdater.finalExecutedTasks : ContextUpdater(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 272) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t key path setter for ContextUpdater.userId : ContextUpdater(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 368))(v6);
}

uint64_t ContextUpdater.userId.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime14ContextUpdater_userId;
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)(a1, v3, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  return swift_endAccess();
}

uint64_t (*ContextUpdater.userId.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*ContextUpdater.domainHints.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t ContextUpdater.__allocating_init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v21 = swift_allocObject();
  ContextUpdater.init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userId:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  return v21;
}

void *ContextUpdater.init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v19 = MEMORY[0x1E4FBC860];
  v13[30] = MEMORY[0x1E4FBC860];
  v13[32] = 0;
  v13[33] = v19;
  v13[35] = 0;
  v13[36] = 0;
  uint64_t v20 = (char *)v13 + OBJC_IVAR____TtC14SiriKitRuntime14ContextUpdater_userId;
  v13[34] = v19;
  uint64_t v21 = type metadata accessor for UserID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  *(void *)((char *)v13 + OBJC_IVAR____TtC14SiriKitRuntime14ContextUpdater_domainHints) = v19;
  outlined init with copy of ReferenceResolutionClientProtocol(a1, (uint64_t)(v13 + 2));
  outlined init with copy of ReferenceResolutionClientProtocol(a2, (uint64_t)(v13 + 7));
  outlined init with copy of ReferenceResolutionClientProtocol(a3, (uint64_t)(v13 + 12));
  v13[17] = a4;
  v13[18] = a5;
  v13[19] = a6;
  v13[20] = a7;
  v13[21] = a8;
  v13[22] = a9;
  v13[23] = a10;
  outlined init with copy of ReferenceResolutionClientProtocol(a11, (uint64_t)(v13 + 24));
  v13[31] = a12;
  type metadata accessor for SessionStateContextKeysManager();
  unint64_t v22 = (void *)swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v23 = swift_allocObject();
  *(_DWORD *)(v23 + 16) = 0;
  v22[2] = v23;
  unint64_t v24 = specialized Dictionary.init(dictionaryLiteral:)(v19);
  uint64_t v25 = MEMORY[0x1E4FBC870];
  v22[3] = v24;
  v22[4] = v25;
  __swift_destroy_boxed_opaque_existential_1Tm(a11);
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  __swift_destroy_boxed_opaque_existential_1Tm(a2);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  v13[29] = v22;
  uint64_t v26 = (uint64_t)v13 + OBJC_IVAR____TtC14SiriKitRuntime14ContextUpdater_userId;
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)(a13, v26, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  swift_endAccess();
  return v13;
}

void *SessionStateContextKeysManager.__allocating_init()()
{
  uint64_t v0 = (void *)swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  v0[2] = v1;
  unint64_t v2 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v3 = MEMORY[0x1E4FBC870];
  v0[3] = v2;
  v0[4] = v3;
  return v0;
}

void closure #1 in ContextUpdater.close()()
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    unint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v2 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, oslog, v1, "Synced=%{BOOL}d the context to context collector", v2, 8u);
    MEMORY[0x1BA9E48C0](v2, -1, -1);
  }
  else
  {
  }
}

uint64_t ContextUpdater.applySystemDialogActs(_:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ConversationSessionKey();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 && *(void *)(a1 + 16))
  {
    uint64_t v7 = *(void *)(v1 + 232);
    v20[3] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Siri_Nlu_External_SystemDialogAct]);
    v20[0] = a1;
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FA2648], v3);
    uint64_t v8 = *(void (**)(uint64_t *, char *))(*(void *)v7 + 152);
    swift_bridgeObjectRetain_n();
    v8(v20, v6);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain();
    int64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      v20[0] = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      uint64_t v14 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
      uint64_t v15 = MEMORY[0x1BA9E30C0](a1, v14);
      v19[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v10, v11, "Applied SDA: %s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v13, -1, -1);
      MEMORY[0x1BA9E48C0](v12, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    uint64_t v17 = *(void *)(v1 + 232);
    (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FA2648], v3);
    (*(void (**)(char *))(*(void *)v17 + 160))(v6);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return 0;
}

uint64_t ContextUpdater.applyNewTasks(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ConversationSessionKey();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v16[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (*(void *)(a1 + 16))
    {
      swift_beginAccess();
      *(void *)(v1 + 264) = a1;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRelease();
      uint64_t v8 = *(void *)(v1 + 232);
      v16[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_Task]);
      v16[0] = a1;
      (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FA2610], v4);
      (*(void (**)(void *, char *))(*(void *)v8 + 152))(v16, v7);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
    }
    else
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
      int64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl(&dword_1B9C64000, v10, v11, "Removing activeTasks as instructed by execution", v12, 2u);
        MEMORY[0x1BA9E48C0](v12, -1, -1);
      }

      uint64_t v13 = *(void *)(v2 + 232);
      (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FA2610], v4);
      (*(void (**)(char *))(*(void *)v13 + 168))(v7);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
  return 0;
}

uint64_t ContextUpdater.applyCompletedTasks(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ConversationSessionKey();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v16[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (*(void *)(a1 + 16))
    {
      swift_beginAccess();
      *(void *)(v1 + 272) = a1;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRelease();
      uint64_t v8 = *(void *)(v1 + 232);
      v16[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Siri_Nlu_External_Task]);
      v16[0] = a1;
      (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FA2620], v4);
      (*(void (**)(void *, char *))(*(void *)v8 + 152))(v16, v7);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
    }
    else
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
      int64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl(&dword_1B9C64000, v10, v11, "Removing executedTasks as instructed by execution", v12, 2u);
        MEMORY[0x1BA9E48C0](v12, -1, -1);
      }

      uint64_t v13 = *(void *)(v2 + 232);
      (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E4FA2620], v4);
      (*(void (**)(char *))(*(void *)v13 + 168))(v7);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
  return 0;
}

uint64_t ContextUpdater.applyRREntities(_:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRFilter?);
  uint64_t result = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (*(void *)(a1 + 16))
    {
      __swift_project_boxed_opaque_existential_1((void *)(v1 + 56), *(void *)(v1 + 80));
      uint64_t v7 = type metadata accessor for RRFilter();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
      uint64_t v8 = swift_allocObject();
      swift_weakInit();
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v8;
      *(void *)(v9 + 24) = a1;
      swift_retain();
      swift_bridgeObjectRetain();
      dispatch thunk of ReferenceResolutionClientProtocol.siriMentioned(entities:configuration:completion:)();
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for RRFilter?);
      return swift_release();
    }
  }
  return result;
}

void closure #1 in ContextUpdater.applyRREntities(_:)(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ConversationSessionKey();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    id v28 = a1;
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.conversationBridge);
    id v30 = a1;
    id v31 = a1;
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v32))
    {
      BOOL v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      v43[0] = v34;
      *(_DWORD *)BOOL v33 = 136315138;
      swift_getErrorValue();
      uint64_t v35 = Error.localizedDescription.getter();
      v43[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Result<(), Error>(a1, 1);
      outlined consume of Result<(), Error>(a1, 1);
      _os_log_impl(&dword_1B9C64000, v42, v32, "#ContextUpdater: Entity donation to RRaaS was unsuccessful as %s.", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v34, -1, -1);
      MEMORY[0x1BA9E48C0](v33, -1, -1);

      outlined consume of Result<(), Error>(a1, 1);
    }
    else
    {
      outlined consume of Result<(), Error>(a1, 1);
      outlined consume of Result<(), Error>(a1, 1);

      char v37 = v42;
    }
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_1B9C64000, v15, v16, "#ContextUpdater: Entity donation to RRaaS was successful", v17, 2u);
      MEMORY[0x1BA9E48C0](v17, -1, -1);
    }

    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v19 = Strong;
      swift_beginAccess();
      uint64_t v20 = swift_weakLoadStrong();
      if (v20)
      {
        uint64_t v21 = *(void *)(v20 + 232);
        swift_retain();
        swift_release();
        v43[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [RREntity]);
        v43[0] = a4;
        (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, *MEMORY[0x1E4FA2668], v10);
        unint64_t v22 = *(void (**)(uint64_t *, char *))(*(void *)v21 + 152);
        swift_bridgeObjectRetain();
        v22(v43, v13);
        swift_release();
        (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v43);
      }
      uint64_t v23 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v9, 1, 1, v23);
      uint64_t v24 = one-time initialization token for shared;
      swift_bridgeObjectRetain();
      swift_retain();
      if (v24 != -1) {
        swift_once();
      }
      swift_beginAccess();
      uint64_t v25 = static MessageBusActor.shared;
      uint64_t v26 = lazy protocol witness table accessor for type RequestType and conformance RequestType((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
      uint64_t v27 = (void *)swift_allocObject();
      v27[2] = v25;
      v27[3] = v26;
      v27[4] = v19;
      v27[5] = a4;
      swift_retain();
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in ContextUpdater.applyRREntities(_:), (uint64_t)v27);
      swift_release();
      swift_release();
    }
    else
    {
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        BOOL v40 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)BOOL v40 = 0;
        _os_log_impl(&dword_1B9C64000, v38, v39, "#ContextUpdater: Entity donation to RRaaS was unsuccessful as self is no more.", v40, 2u);
        MEMORY[0x1BA9E48C0](v40, -1, -1);
      }
    }
  }
}

uint64_t closure #1 in closure #1 in ContextUpdater.applyRREntities(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 40) = a4;
  *(void *)(v5 + 48) = a5;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ContextUpdater.applyRREntities(_:), v6, 0);
}

uint64_t closure #1 in closure #1 in ContextUpdater.applyRREntities(_:)()
{
  ContextUpdater.applyDisplayHints(_:)(*(void *)(v0 + 48));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void SessionStateContextKeysManager.updateValue(_:forKey:)()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + 16) + 16);
  os_unfair_lock_lock(v1);
  _s2os21OSAllocatedUnfairLockVAAytRszlE04withD0yqd__qd__yYbKXEKs8SendableRd__lFqd__ytz_tYbKXEfU_yt_Tg5TA_0(v2);
  os_unfair_lock_unlock(v1);
}

void closure #1 in SessionStateContextKeysManager.updateValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationSessionKey?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ConversationSessionKey();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v24 - v13;
  uint64_t v26 = v9;
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v15((char *)&v24 - v13, a2, v8);
  outlined init with copy of Any(a3, (uint64_t)v28);
  swift_beginAccess();
  specialized Dictionary.subscript.setter((uint64_t)v28, (uint64_t)v14);
  swift_endAccess();
  swift_beginAccess();
  specialized Set._Variant.remove(_:)(a2, (uint64_t)v7);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for ConversationSessionKey?);
  swift_endAccess();
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
  v15(v12, a2, v8);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (void (*)(char *, char *, uint64_t))v15;
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    v28[0] = v25;
    *(_DWORD *)uint64_t v20 = 136315138;
    uint64_t v24 = v20 + 4;
    v19(v14, v12, v8);
    uint64_t v21 = String.init<A>(describing:)();
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v8);
    _os_log_impl(&dword_1B9C64000, v17, v18, "StateKey: \"%s\" appended for update", v20, 0xCu);
    uint64_t v23 = v25;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v23, -1, -1);
    MEMORY[0x1BA9E48C0](v20, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v8);
  }
}

uint64_t closure #1 in SessionStateContextKeysManager.provideKeysToFlushForOnDeviceRequest()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ConversationSessionKey();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)v15 - v9;
  swift_beginAccess();
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v11);
  swift_bridgeObjectRelease();
  uint64_t v16 = v12;
  swift_beginAccess();
  v15[4] = *(void *)(a1 + 32);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E4FA2640], v4);
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)v10, v8);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  uint64_t v13 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v13, &v16);
  uint64_t result = swift_bridgeObjectRelease_n();
  *a2 = v16;
  return result;
}

uint64_t closure #1 in SessionStateContextKeysManager.provideKeysToFlushForServerFallbackRequest()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v16[0] = a2;
  uint64_t v3 = type metadata accessor for ConversationSessionKey();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v16 - v8;
  swift_beginAccess();
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v10);
  swift_bridgeObjectRelease();
  uint64_t v17 = v11;
  swift_beginAccess();
  void v16[4] = *(void *)(a1 + 32);
  uint64_t v12 = *(void (**)(char *, void, uint64_t))(v4 + 104);
  v12(v7, *MEMORY[0x1E4FA2648], v3);
  swift_bridgeObjectRetain();
  specialized Set._Variant.insert(_:)((uint64_t)v9, v7);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v4 + 8);
  v13(v9, v3);
  v12(v7, *MEMORY[0x1E4FA2610], v3);
  specialized Set._Variant.insert(_:)((uint64_t)v9, v7);
  v13(v9, v3);
  v12(v7, *MEMORY[0x1E4FA2620], v3);
  specialized Set._Variant.insert(_:)((uint64_t)v9, v7);
  v13(v9, v3);
  uint64_t v14 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v14, &v17);
  uint64_t result = swift_bridgeObjectRelease_n();
  *(void *)v16[0] = v17;
  return result;
}

uint64_t SessionStateContextKeysManager.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

void *SessionStateContextKeysManager.init()()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  v0[2] = v1;
  unint64_t v2 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v3 = MEMORY[0x1E4FBC870];
  v0[3] = v2;
  v0[4] = v3;
  return v0;
}

uint64_t specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  uint64_t v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    char v18 = v13;
    uint64_t v19 = v12[3];
    if (v19 >= v17 && (a5 & 1) != 0)
    {
LABEL_7:
      uint64_t v20 = *v6;
      if (v18)
      {
LABEL_8:
        uint64_t v21 = (uint64_t *)(v20[7] + 16 * v14);
        uint64_t result = *v21;
        *uint64_t v21 = a1;
        v21[1] = a2;
        return result;
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      uint64_t v20 = *v6;
      if (v18) {
        goto LABEL_8;
      }
LABEL_11:
      specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);
      swift_bridgeObjectRetain();
      return 0;
    }
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, char a3, void *a4)
{
  uint64_t v8 = (void *)*a4;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
LABEL_7:
    BOOL v16 = (void *)*a4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_unknownObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(unsigned char *)(v16[6] + v10) = a2;
    *(void *)(v16[7] + 8 * v10) = a1;
    uint64_t v19 = v16[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) == (v18 & 1))
  {
    unint64_t v10 = result;
    BOOL v16 = (void *)*a4;
    if (v14) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void partial apply for closure #1 in SessionStateContextKeysManager.updateValue(_:forKey:)()
{
  closure #1 in SessionStateContextKeysManager.updateValue(_:forKey:)(v0[2], v0[3], v0[4]);
}

uint64_t partial apply for closure #1 in SessionStateContextKeysManager.provideKeysToFlushForOnDeviceRequest()@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in SessionStateContextKeysManager.provideKeysToFlushForOnDeviceRequest()(v1, a1);
}

uint64_t partial apply for closure #1 in SessionStateContextKeysManager.provideKeysToFlushForServerFallbackRequest()@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in SessionStateContextKeysManager.provideKeysToFlushForServerFallbackRequest()(v1, a1);
}

uint64_t sub_1B9DC3DD0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 264))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9DC3E28@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 288))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9DC3E80@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 312))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9DC3ED8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 360))();
}

uint64_t sub_1B9DC3F28@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 384))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9DC3F7C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 392);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t ObjC metadata update function for ContextUpdater()
{
  return type metadata accessor for ContextUpdater();
}

void type metadata completion function for ContextUpdater()
{
  type metadata accessor for UserID?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for ContextUpdater(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ContextUpdater);
}

uint64_t dispatch thunk of ContextUpdater.finalNativeFlowContextCommand.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of ContextUpdater.finalActiveTasks.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of ContextUpdater.finalExecutedTasks.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of ContextUpdater.userId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of ContextUpdater.userId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of ContextUpdater.userId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of ContextUpdater.domainHints.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of ContextUpdater.domainHints.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of ContextUpdater.domainHints.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of ContextUpdater.__allocating_init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userId:)()
{
  return (*(uint64_t (**)(void))(v0 + 408))();
}

uint64_t dispatch thunk of ContextUpdater.applyContextUpdate(_:metadata:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of ContextUpdater.applyServerContextUpdateCandidate(_:metadata:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

uint64_t dispatch thunk of ContextUpdater.updateServerContext()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 472))();
}

uint64_t dispatch thunk of ContextUpdater.close()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 480))();
}

uint64_t dispatch thunk of ContextUpdater.applyResponseText(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 488))();
}

uint64_t dispatch thunk of ContextUpdater.applyNativeFlowContext(_:emptyServerContext:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

void type metadata accessor for UserID?()
{
  if (!lazy cache variable for type metadata for UserID?)
  {
    type metadata accessor for UserID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UserID?);
    }
  }
}

uint64_t method lookup function for SessionStateContextKeysManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SessionStateContextKeysManager);
}

uint64_t dispatch thunk of SessionStateContextKeysManager.updateValue(_:forKey:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of SessionStateContextKeysManager.removeKeyIfNotUpdated(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of SessionStateContextKeysManager.removeKey(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of SessionStateContextKeysManager.provideKeysToFlush(metadata:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of SessionStateContextKeysManager.reset()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of SessionStateContextKeysManager.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t sub_1B9DC44DC()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

void partial apply for closure #1 in ContextUpdater.applyRREntities(_:)(void *a1, char a2)
{
  closure #1 in ContextUpdater.applyRREntities(_:)(a1, a2 & 1, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t specialized ContextUpdater.convertPayloadToUsoEntity(payload:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v5 = type metadata accessor for Siri_Nl_Core_Protocol_UsoGraph();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = 0;
  memset(&v12[16], 0, 32);
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type RequestType and conformance RequestType(&lazy protocol witness table cache variable for type Siri_Nl_Core_Protocol_UsoGraph and conformance Siri_Nl_Core_Protocol_UsoGraph, MEMORY[0x1E4FA2C00]);
  Message.init(serializedData:extensions:partial:options:)();
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for USOSerializedGraph);
  char v9 = (void *)MEMORY[0x1BA9E3540](v8);
  if (USOSerializedGraph.usoSerializedGraphToUsoGraphSiriNl()())
  {
    uint64_t v10 = static UsoConversionUtils.extractFirstEntityFromGraph(graph:)();

    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);

    return 0;
  }
  return v10;
}

uint64_t sub_1B9DC47E8()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in closure #1 in ContextUpdater.applyRREntities(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #1 in ContextUpdater.applyRREntities(_:)(a1, v4, v5, v7, v6);
}

uint64_t objectdestroy_50Tm()
{
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)specialized partial apply(uint64_t a1)
{
  return _s2os21OSAllocatedUnfairLockVAAytRszlE04withD0yqd__qd__yYbKXEKs8SendableRd__lFqd__ytz_tYbKXEfU_yt_Tg5TA_0(a1);
}

uint64_t ExecutionContextUpdateScope.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x6C61626F6C67;
  }
  if (a1 == 1) {
    return 0x55746E6572727563;
  }
  return 0x72657355656D6F68;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ExecutionContextUpdateScope(unsigned char *a1, unsigned char *a2)
{
  int v2 = *a1;
  uint64_t v3 = 0x55746E6572727563;
  unint64_t v4 = 0xEB00000000726573;
  if (v2 != 1)
  {
    uint64_t v3 = 0x72657355656D6F68;
    unint64_t v4 = 0xE900000000000073;
  }
  if (*a1) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = 0x6C61626F6C67;
  }
  if (v2) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = 0xE600000000000000;
  }
  uint64_t v7 = 0x55746E6572727563;
  unint64_t v8 = 0xEB00000000726573;
  if (*a2 != 1)
  {
    uint64_t v7 = 0x72657355656D6F68;
    unint64_t v8 = 0xE900000000000073;
  }
  if (*a2) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = 0x6C61626F6C67;
  }
  if (*a2) {
    unint64_t v10 = v8;
  }
  else {
    unint64_t v10 = 0xE600000000000000;
  }
  if (v5 == v9 && v6 == v10) {
    char v11 = 1;
  }
  else {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ExecutionContextUpdateScope()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ExecutionContextUpdateScope()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ExecutionContextUpdateScope()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ExecutionContextUpdateScope@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized ExecutionContextUpdateScope.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ExecutionContextUpdateScope(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE600000000000000;
  unint64_t v4 = 0xEB00000000726573;
  uint64_t v5 = 0x55746E6572727563;
  if (v2 != 1)
  {
    uint64_t v5 = 0x72657355656D6F68;
    unint64_t v4 = 0xE900000000000073;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6C61626F6C67;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

unint64_t specialized ExecutionContextUpdateScope.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ExecutionContextUpdateScope.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type ExecutionContextUpdateScope and conformance ExecutionContextUpdateScope()
{
  unint64_t result = lazy protocol witness table cache variable for type ExecutionContextUpdateScope and conformance ExecutionContextUpdateScope;
  if (!lazy protocol witness table cache variable for type ExecutionContextUpdateScope and conformance ExecutionContextUpdateScope)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExecutionContextUpdateScope and conformance ExecutionContextUpdateScope);
  }
  return result;
}

uint64_t dispatch thunk of ContextUpdating.applyContextUpdate(_:metadata:scope:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of ContextUpdating.applyServerContextUpdateCandidate(_:metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of ContextUpdating.updateServerContext()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ContextUpdating.applyResponseText(_:scope:userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of ContextUpdating.close()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

unsigned char *storeEnumTagSinglePayload for ExecutionContextUpdateScope(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9DC4F3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExecutionContextUpdateScope()
{
  return &type metadata for ExecutionContextUpdateScope;
}

uint64_t Conversation.taskObserver.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  swift_beginAccess();
  return MEMORY[0x1BA9E49F0](v1);
}

uint64_t Conversation.taskObserver.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*Conversation.taskObserver.modify(void *a1))(uint64_t a1, char a2)
{
  int v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x1BA9E49F0](v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return Conversation.taskObserver.modify;
}

void Conversation.taskObserver.modify(uint64_t a1, char a2)
{
  int v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

uint64_t Conversation.rootEnvironment.getter()
{
  return swift_retain();
}

uint64_t key path setter for Conversation.rcId : Conversation(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = (void *)(*a2 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rcId);
  swift_beginAccess();
  *uint64_t v4 = v3;
  v4[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t Conversation.rcId.getter()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rcId);
  swift_beginAccess();
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t Conversation.rcId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rcId);
  swift_beginAccess();
  void *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*Conversation.rcId.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for Conversation.hypothesisId : Conversation(uint64_t a1, void *a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v7 = *a2 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_hypothesisId;
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)((uint64_t)v6, v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  return swift_endAccess();
}

uint64_t Conversation.hypothesisId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_hypothesisId;
  swift_beginAccess();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v3, a1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t Conversation.hypothesisId.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_hypothesisId;
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)(a1, v3, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  return swift_endAccess();
}

uint64_t (*Conversation.hypothesisId.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t Conversation.isPaused.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_isPaused);
  swift_beginAccess();
  return *v1;
}

uint64_t Conversation.isPaused.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_isPaused);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*Conversation.isPaused.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t Conversation.correctionsFlow.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC14SiriKitRuntime12Conversation____lazy_storage___correctionsFlow;
  if (*(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation____lazy_storage___correctionsFlow))
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation____lazy_storage___correctionsFlow);
  }
  else
  {
    uint64_t v2 = closure #1 in Conversation.correctionsFlow.getter(v0);
    *(void *)(v0 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t closure #1 in Conversation.correctionsFlow.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_pluginId);
  uint64_t v2 = *(void *)(a1 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_pluginId + 8);
  type metadata accessor for ResponseFactory();
  swift_allocObject();
  swift_bridgeObjectRetain();
  uint64_t v4 = ResponseFactory.init()();
  static OutputPublisherFactory.makeOutputPublisherAsync()();
  outlined init with copy of ReferenceResolutionClientProtocol(a1 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_correctionsEngine, (uint64_t)v14);
  static SiriKitEventSender.current.getter();
  type metadata accessor for SiriCorrectionsFlow();
  uint64_t v5 = (void *)swift_allocObject();
  uint64_t v6 = (char *)v5 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_followupPluginAction;
  uint64_t v7 = type metadata accessor for PluginAction();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  unint64_t v8 = (char *)v5 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_steeringInput;
  uint64_t v9 = type metadata accessor for Input();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  unint64_t v10 = (char *)v5 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_state;
  *(_OWORD *)unint64_t v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((void *)v10 + 4) = 0;
  v5[2] = v3;
  v5[3] = v2;
  v5[4] = v4;
  outlined init with take of ReferenceResolutionClientProtocol(&v15, (uint64_t)(v5 + 5));
  outlined init with take of ReferenceResolutionClientProtocol(v14, (uint64_t)(v5 + 10));
  outlined init with take of ReferenceResolutionClientProtocol(&v13, (uint64_t)v5 + OBJC_IVAR____TtC14SiriKitRuntime19SiriCorrectionsFlow_siriKitEventSender);
  *(void *)&long long v15 = v5;
  lazy protocol witness table accessor for type Conversation and conformance Conversation((unint64_t *)&lazy protocol witness table cache variable for type SiriCorrectionsFlow and conformance SiriCorrectionsFlow, (void (*)(uint64_t))type metadata accessor for SiriCorrectionsFlow);
  uint64_t v11 = Flow.eraseToAnyFlow()();
  swift_release();
  return v11;
}

uint64_t Conversation.correctionsFlow.setter(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation____lazy_storage___correctionsFlow) = a1;
  return swift_release();
}

uint64_t (*Conversation.correctionsFlow.modify(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = Conversation.correctionsFlow.getter();
  return Conversation.correctionsFlow.modify;
}

uint64_t Conversation.correctionsFlow.modify(void *a1)
{
  *(void *)(a1[1] + OBJC_IVAR____TtC14SiriKitRuntime12Conversation____lazy_storage___correctionsFlow) = *a1;
  return swift_release();
}

uint64_t Conversation.__allocating_init(initialFlow:taskService:pluginId:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  uint64_t v24 = a4;
  uint64_t v15 = *(void *)(a9 + 24);
  uint64_t v16 = *(void *)(a9 + 32);
  uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1(a9, v15);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v19);
  uint64_t v21 = specialized Conversation.__allocating_init(initialFlow:taskService:pluginId:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(a1, a2, a3, v24, a5, v25, v26, a8, (uint64_t)v19, v9, v15, v16);
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(a9);
  return v21;
}

uint64_t Conversation.__allocating_init(initialFlow:taskService:pluginId:correctionsEngine:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16 = *(void *)(a5 + 24);
  uint64_t v17 = *(void *)(a5 + 32);
  uint64_t v18 = __swift_mutable_project_boxed_opaque_existential_1(a5, v16);
  uint64_t v19 = specialized Conversation.__allocating_init(initialFlow:taskService:pluginId:correctionsEngine:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(a1, a2, a3, a4, v18, a6, a7, a8, a9, a10, v10, v16, v17);
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(a5);
  return v19;
}

uint64_t Conversation.init(initialFlow:taskService:pluginId:correctionsEngine:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v24 = a4;
  uint64_t v25 = a7;
  uint64_t v26 = a8;
  uint64_t v15 = *(void *)(a5 + 24);
  uint64_t v16 = *(void *)(a5 + 32);
  uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1(a5, v15);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v20 + 16))(v19);
  uint64_t v21 = specialized Conversation.init(initialFlow:taskService:pluginId:correctionsEngine:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(a1, a2, a3, v24, (uint64_t)v19, a6, v25, v26, a9, a10, v23, v15, v16);
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(a5);
  return v21;
}

uint64_t Conversation.cancel()()
{
  *(void *)(v1 + 40) = v0;
  return MEMORY[0x1F4188298](Conversation.cancel(), v0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0[5] + 112) + 192))();
  if (v1)
  {
    uint64_t v2 = v1;
    v0[6] = v1;
    v0[7] = swift_weakLoadStrong();
    uint64_t v3 = *(void *)(v2 + 16);
    v0[8] = v3;
    swift_retain();
    return MEMORY[0x1F4188298](Conversation.cancel(), v3, 0);
  }
  else
  {
    swift_beginAccess();
    Conversation.State.cancel()();
    swift_endAccess();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 40);
  FlowAgent.cancel()();
  swift_release();
  return MEMORY[0x1F4188298](Conversation.cancel(), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = v0[7];
  swift_release();
  if (v1)
  {
    uint64_t v2 = v0[7];
    v0[6] = v2;
    v0[7] = swift_weakLoadStrong();
    uint64_t v3 = *(void *)(v2 + 16);
    v0[8] = v3;
    swift_retain();
    return MEMORY[0x1F4188298](Conversation.cancel(), v3, 0);
  }
  else
  {
    swift_beginAccess();
    Conversation.State.cancel()();
    swift_endAccess();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
}

Swift::Void __swiftcall Conversation.State.cancel()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Conversation.State(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (uint64_t *)((char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with take of Conversation.State(v1, (uint64_t)v4, type metadata accessor for Conversation.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v5 = *v4;
      swift_release();
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl(&dword_1B9C64000, v7, v8, "[Conversation] Cancelling speculation task.", v9, 2u);
        MEMORY[0x1BA9E48C0](v9, -1, -1);
      }

      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Node<FlowAgent>?);
      goto LABEL_14;
    case 2u:
      swift_release();
      break;
    case 3u:
      uint64_t v5 = *v4;
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
      BOOL v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v13))
      {
        char v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)char v14 = 0;
        _os_log_impl(&dword_1B9C64000, v12, v13, "[Conversation] Cancelling execution task.", v14, 2u);
        MEMORY[0x1BA9E48C0](v14, -1, -1);
      }

      uint64_t v10 = type metadata accessor for ConversationCommitResult();
LABEL_14:
      uint64_t v15 = v10;
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      MEMORY[0x1BA9E3300](v5, v15, v16, MEMORY[0x1E4FBC0F0]);
      swift_release();
      break;
    case 4u:
      break;
    case 5u:
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl(&dword_1B9C64000, v18, v19, "[Conversation] cancel() was called on an already cancelled conversation", v20, 2u);
        MEMORY[0x1BA9E48C0](v20, -1, -1);
      }

      break;
    default:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, selectedFlow: Node<FlowAgent>));
      swift_release();
      outlined destroy of SiriRequest((uint64_t)v4, type metadata accessor for SiriRequest);
      break;
  }
  swift_storeEnumTagMultiPayload();
}

BOOL Conversation.isCancelled.getter()
{
  uint64_t v1 = type metadata accessor for Conversation.State(0);
  uint64_t v2 = MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v10 - v5;
  uint64_t v7 = v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  swift_beginAccess();
  outlined init with copy of Conversation.State(v7, (uint64_t)v6, type metadata accessor for Conversation.State);
  outlined init with copy of Conversation.State((uint64_t)v6, (uint64_t)v4, type metadata accessor for Conversation.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 5) {
    outlined destroy of SiriRequest((uint64_t)v4, type metadata accessor for Conversation.State);
  }
  outlined destroy of SiriRequest((uint64_t)v6, type metadata accessor for Conversation.State);
  return EnumCaseMultiPayload == 5;
}

BOOL Conversation.State.isCancelled.getter()
{
  uint64_t v1 = type metadata accessor for Conversation.State(0);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Conversation.State(v0, (uint64_t)v3, type metadata accessor for Conversation.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 5) {
    outlined destroy of SiriRequest((uint64_t)v3, type metadata accessor for Conversation.State);
  }
  return EnumCaseMultiPayload == 5;
}

uint64_t Conversation.ensureReady(timeout:)(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  uint64_t v3 = type metadata accessor for TimeoutError();
  v2[14] = v3;
  v2[15] = *(void *)(v3 - 8);
  v2[16] = swift_task_alloc();
  v2[17] = type metadata accessor for ConversationCommitResult();
  v2[18] = swift_task_alloc();
  v2[19] = type metadata accessor for Conversation.State(0);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return MEMORY[0x1F4188298](Conversation.ensureReady(timeout:), v1, 0);
}

uint64_t Conversation.ensureReady(timeout:)()
{
  uint64_t v46 = v0;
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[13] + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  swift_beginAccess();
  outlined init with copy of Conversation.State(v2, v1, type metadata accessor for Conversation.State);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      swift_release();
      goto LABEL_4;
    case 2u:
LABEL_4:
      swift_release();
      goto LABEL_5;
    case 3u:
      uint64_t v22 = v0[13];
      uint64_t v23 = *(void *)v0[21];
      uint64_t v24 = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_isPaused;
      v0[22] = v23;
      v0[23] = v24;
      uint64_t v25 = (unsigned char *)(v22 + v24);
      swift_beginAccess();
      *uint64_t v25 = 1;
      swift_retain();
      double v26 = DispatchTimeInterval.seconds.getter();
      swift_retain();
      uint64_t v27 = (void *)swift_task_alloc();
      v0[24] = v27;
      *uint64_t v27 = v0;
      v27[1] = Conversation.ensureReady(timeout:);
      uint64_t v29 = v0[17];
      uint64_t v28 = v0[18];
      v30.n128_f64[0] = v26;
      return MEMORY[0x1F415AC08](v28, &async function pointer to partial apply for closure #1 in Conversation.ensureReady(timeout:), v23, v29, v30);
    case 4u:
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      __swift_project_value_buffer(v31, (uint64_t)static Logger.executor);
      os_log_type_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl(&dword_1B9C64000, v32, v33, "Conversation ensured Ready.", v34, 2u);
        MEMORY[0x1BA9E48C0](v34, -1, -1);
      }

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v35 = (uint64_t (*)(void))v0[1];
      goto LABEL_25;
    case 5u:
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      __swift_project_value_buffer(v36, (uint64_t)static Logger.executor);
      char v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        os_log_type_t v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v39 = 0;
        _os_log_impl(&dword_1B9C64000, v37, v38, "[Conversation] Conversation was cancelled and couldn't be ready again.", v39, 2u);
        MEMORY[0x1BA9E48C0](v39, -1, -1);
      }

      uint64_t v44 = _typeName(_:qualified:)();
      unint64_t v45 = v40;
      v41._countAndFlagsBits = 0x6C6C65636E616320;
      v41._object = (void *)0xEB000000002E6465;
      String.append(_:)(v41);
      uint64_t v21 = v44;
      unint64_t v20 = v45;
      lazy protocol witness table accessor for type CancelledError and conformance CancelledError();
      goto LABEL_24;
    default:
      uint64_t v3 = v0[21];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, selectedFlow: Node<FlowAgent>));
      swift_release();
      outlined destroy of SiriRequest(v3, type metadata accessor for SiriRequest);
LABEL_5:
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
      swift_retain_n();
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = v0[20];
        os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
        uint64_t v9 = swift_slowAlloc();
        uint64_t v44 = v9;
        *(_DWORD *)os_log_type_t v8 = 136315138;
        outlined init with copy of Conversation.State(v2, v7, type metadata accessor for Conversation.State);
        uint64_t v10 = Conversation.State.description.getter();
        unint64_t v12 = v11;
        outlined destroy of SiriRequest(v7, type metadata accessor for Conversation.State);
        v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v5, v6, "[Conversation] ensureReady can only be called for commited conversation, not state %s.", v8, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v9, -1, -1);
        MEMORY[0x1BA9E48C0](v8, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      uint64_t v13 = v0[20];
      uint64_t v44 = 0;
      unint64_t v45 = 0xE000000000000000;
      _StringGuts.grow(_:)(71);
      v14._object = (void *)0x80000001BA064200;
      v14._countAndFlagsBits = 0xD000000000000044;
      String.append(_:)(v14);
      outlined init with copy of Conversation.State(v2, v13, type metadata accessor for Conversation.State);
      uint64_t v15 = Conversation.State.description.getter();
      uint64_t v17 = v16;
      outlined destroy of SiriRequest(v13, type metadata accessor for Conversation.State);
      v18._countAndFlagsBits = v15;
      v18._object = v17;
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      v19._countAndFlagsBits = 46;
      v19._object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      uint64_t v21 = v44;
      unint64_t v20 = v45;
      lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
LABEL_24:
      swift_allocError();
      *uint64_t v42 = v21;
      v42[1] = v20;
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v35 = (uint64_t (*)(void))v0[1];
LABEL_25:
      return v35();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 200) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 104);
    uint64_t v4 = Conversation.ensureReady(timeout:);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 144);
    os_log_type_t v6 = *(void *)(v2 + 104);
    outlined destroy of SiriRequest(v5, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
    swift_release();
    uint64_t v4 = Conversation.ensureReady(timeout:);
    uint64_t v3 = v6;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  swift_release();
  *(unsigned char *)(v0[13] + v0[23]) = 0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "Conversation ensured Ready.", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);

    swift_release();
  }
  else
  {
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  void *v8;
  uint64_t (*v9)(void);
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  BOOL v17;
  void *v18;
  uint8_t *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  uint8_t *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v29;
  void *v30;
  uint64_t v31;

  __n128 v30 = v0;
  uint64_t v1 = (void *)v0[25];
  swift_release();
  v0[8] = v1;
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {
    (*(void (**)(void, void))(v0[15] + 8))(v0[16], v0[14]);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
    uint64_t v4 = Logger.logObject.getter();
    uint64_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v6 = 0;
      _os_log_impl(&dword_1B9C64000, v4, v5, "[Conversation] Failed to ensure conversation is ready to handle next request within a time limit.\nMostly due to long running execution or flow forgets to call completion.", v6, 2u);
      MEMORY[0x1BA9E48C0](v6, -1, -1);
    }
    uint64_t v7 = (void *)v0[25];

    lazy protocol witness table accessor for type TimedOutError and conformance TimedOutError();
    swift_allocError();
    *os_log_type_t v8 = 0xD00000000000009BLL;
    v8[1] = 0x80000001BA064160;
    swift_willThrow();
    swift_release_n();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    uint64_t v10 = &unk_1EB9D8000;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    unint64_t v11 = (void *)v0[25];
    unint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
    uint64_t v13 = v11;
    Swift::String v14 = v11;
    uint64_t v15 = Logger.logObject.getter();
    uint64_t v16 = static os_log_type_t.debug.getter();
    uint64_t v17 = os_log_type_enabled(v15, v16);
    Swift::String v18 = (void *)v0[25];
    if (v17)
    {
      Swift::String v19 = (uint8_t *)swift_slowAlloc();
      unint64_t v20 = swift_slowAlloc();
      uint64_t v29 = v20;
      *(_DWORD *)Swift::String v19 = 136315138;
      v0[9] = v18;
      uint64_t v21 = v18;
      uint64_t v22 = String.init<A>(describing:)();
      v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v15, v16, "[Conversation] error in running speculation/commit task while ensuring the runtime is ready (will ignore): %s", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v20, -1, -1);
      uint64_t v24 = v19;
      uint64_t v10 = (void *)&unk_1EB9D8000;
      MEMORY[0x1BA9E48C0](v24, -1, -1);

      swift_release();
    }
    else
    {
      swift_release();
    }
    *(unsigned char *)(v0[13] + v0[23]) = 0;
    if (v10[24] != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
    uint64_t v25 = Logger.logObject.getter();
    double v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_1B9C64000, v25, v26, "Conversation ensured Ready.", v27, 2u);
      MEMORY[0x1BA9E48C0](v27, -1, -1);

      swift_release();
    }
    else
    {
      swift_release();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
  }
  return v9();
}

uint64_t Conversation.State.description.getter()
{
  uint64_t v1 = type metadata accessor for Conversation.State(0);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Conversation.State(v0, (uint64_t)v3, type metadata accessor for Conversation.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t result = 0x7964616572;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      outlined destroy of SiriRequest((uint64_t)v3, type metadata accessor for Conversation.State);
      uint64_t result = 0x74616C7563657073;
      break;
    case 2:
      outlined destroy of SiriRequest((uint64_t)v3, type metadata accessor for Conversation.State);
      uint64_t result = 0x456F547964616572;
      break;
    case 3:
      outlined destroy of SiriRequest((uint64_t)v3, type metadata accessor for Conversation.State);
      uint64_t result = 0x6E69747563657865;
      break;
    case 4:
      return result;
    case 5:
      uint64_t result = 0x656C6C65636E6163;
      break;
    default:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, selectedFlow: Node<FlowAgent>));
      swift_release();
      outlined destroy of SiriRequest((uint64_t)v3, type metadata accessor for SiriRequest);
      uint64_t result = 0x6465747065636361;
      break;
  }
  return result;
}

uint64_t closure #1 in Conversation.ensureReady(timeout:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  uint64_t v6 = type metadata accessor for ConversationCommitResult();
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  void *v5 = v2;
  v5[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  uint64_t v8 = MEMORY[0x1E4FBC0F0];
  return MEMORY[0x1F4187D90](a1, a2, v6, v7, v8);
}

uint64_t Conversation.accept(request:)(uint64_t a1, uint64_t a2)
{
  v3[15] = a2;
  v3[16] = v2;
  v3[14] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  v3[19] = type metadata accessor for Conversation.State(0);
  v3[20] = swift_task_alloc();
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OSSignpostID();
  v3[23] = v4;
  v3[24] = *(void *)(v4 - 8);
  v3[25] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[26] = v5;
  v3[27] = *(void *)(v5 - 8);
  v3[28] = swift_task_alloc();
  return MEMORY[0x1F4188298](Conversation.accept(request:), v2, 0);
}

uint64_t Conversation.accept(request:)()
{
  static os_signpost_type_t.event.getter();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 176);
  uint64_t v24 = *(void *)(v0 + 184);
  uint64_t v25 = *(void *)(v0 + 128);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1BA04FD90;
  *(_DWORD *)(v0 + 328) = *(_DWORD *)(type metadata accessor for SiriRequest(0) + 20);
  Input.identifier.getter();
  uint64_t v8 = UUID.uuidString.getter();
  uint64_t v10 = v9;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  *(void *)(v7 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v7 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v24);
  uint64_t v11 = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  *(void *)(v0 + 232) = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  uint64_t v12 = v25 + v11;
  swift_beginAccess();
  outlined init with copy of Conversation.State(v12, v6, type metadata accessor for Conversation.State);
  Conversation.State.assertReady(function:)();
  uint64_t v13 = *(void *)(v0 + 216);
  uint64_t v26 = *(void *)(v0 + 208);
  uint64_t v14 = *(void *)(v0 + 136);
  uint64_t v15 = *(void *)(v0 + 144);
  uint64_t v16 = *(uint64_t **)(v0 + 120);
  uint64_t v17 = *(void *)(v0 + 128);
  outlined destroy of SiriRequest(*(void *)(v0 + 176), type metadata accessor for Conversation.State);
  uint64_t v18 = *v16;
  uint64_t v19 = v16[1];
  unint64_t v20 = (void *)(v17 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rcId);
  swift_beginAccess();
  *unint64_t v20 = v18;
  v20[1] = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  Input.identifier.getter();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v15, 0, 1, v26);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v15, v14, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v21 = v17 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_hypothesisId;
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v14, v21, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_endAccess();
  *(void *)(v0 + 240) = SiriEnvironment.callState.getter();
  uint64_t v27 = (uint64_t (*)(void))((int)*MEMORY[0x1E4FA1E50] + MEMORY[0x1E4FA1E50]);
  uint64_t v22 = (void *)swift_task_alloc();
  *(void *)(v0 + 248) = v22;
  *uint64_t v22 = v0;
  v22[1] = Conversation.accept(request:);
  return v27();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 128);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](Conversation.accept(request:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;

  uint64_t v1 = *(void *)(*(void *)(v0 + 128) + 112);
  *(void *)(v0 + 256) = v1;
  if ((*(uint64_t (**)(void))(*(void *)v1 + 184))())
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1B9C64000, v3, v4, "Checking if corrections flow accepts input", v5, 2u);
      MEMORY[0x1BA9E48C0](v5, -1, -1);
    }

    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 264) = v6;
    *uint64_t v6 = v0;
    v6[1] = Conversation.accept(request:);
    uint64_t v7 = *(void *)(v0 + 128);
    v6[2] = *(void *)(v0 + 120);
    v6[3] = v7;
    return MEMORY[0x1F4188298](Conversation.attemptCorrectionsOn(request:), v7, 0);
  }
  else
  {
    uint64_t v8 = (*(uint64_t (**)(void))(*(void *)v1 + 192))();
    if (v8)
    {
      uint64_t v9 = v8;
      *(void *)(v0 + 280) = v8;
      *(void *)(v0 + 288) = swift_weakLoadStrong();
      uint64_t v10 = *(void *)(v9 + 16);
      *(void *)(v0 + 296) = v10;
      swift_retain();
      uint64_t v11 = (void *)swift_task_alloc();
      *(void *)(v0 + 304) = v11;
      *uint64_t v11 = v0;
      v11[1] = Conversation.accept(request:);
      uint64_t v12 = *(void *)(v0 + 120);
      return Conversation.updateFlowEnvironment(flowAgent:request:)(v10, v12);
    }
    else
    {
      **(unsigned char **)(v0 + 112) = 0;
      type metadata accessor for UserInputResult();
      swift_storeEnumTagMultiPayload();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
      return v13();
    }
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v11 = v0;
  if (*(void *)(v0 + 272))
  {
    uint64_t v1 = *(void *)(v0 + 256);
    uint64_t v10 = *(void *)(v0 + 272);
    uint64_t v2 = (*(uint64_t (**)(uint64_t *, void))(*(void *)v1 + 208))(&v10, 0);
    swift_release();
    uint64_t v4 = *(void *)(v0 + 160);
    uint64_t v3 = *(void *)(v0 + 168);
    uint64_t v5 = *(void *)(v0 + 120);
    uint64_t v6 = *(void *)(v0 + 128) + *(void *)(v0 + 232);
    uint64_t v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, selectedFlow: Node<FlowAgent>))
                + 48);
    outlined init with copy of Conversation.State(v5, v3, type metadata accessor for SiriRequest);
    *(void *)(v3 + v7) = v2;
    swift_storeEnumTagMultiPayload();
    outlined init with take of Conversation.State(v3, v4, type metadata accessor for Conversation.State);
    swift_beginAccess();
    outlined assign with take of Conversation.State(v4, v6);
    swift_endAccess();
    type metadata accessor for UserInputResult();
  }
  else
  {
    **(unsigned char **)(v0 + 112) = 0;
    type metadata accessor for UserInputResult();
  }
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 128);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](Conversation.accept(request:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v5;

  uint64_t v1 = *(int *)(v0 + 328);
  uint64_t v2 = *(void *)(v0 + 120);
  *(void *)(v0 + 312) = *(void *)(*(void *)(v0 + 280) + 16);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 320) = v3;
  *uint64_t v3 = v0;
  v3[1] = Conversation.accept(request:);
  return FlowAgent.on(input:)(v2 + v1);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t (*v13)(void);
  uint64_t v14;

  if (*(unsigned char *)(v0 + 332) == 1)
  {
    swift_release();
    uint64_t v1 = *(void *)(v0 + 280);
    uint64_t v3 = *(void *)(v0 + 160);
    uint64_t v2 = *(void *)(v0 + 168);
    uint64_t v4 = *(void *)(v0 + 120);
    uint64_t v5 = *(void *)(v0 + 128) + *(void *)(v0 + 232);
    uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, selectedFlow: Node<FlowAgent>))
                + 48);
    outlined init with copy of Conversation.State(v4, v2, type metadata accessor for SiriRequest);
    *(void *)(v2 + v6) = v1;
    swift_storeEnumTagMultiPayload();
    outlined init with take of Conversation.State(v2, v3, type metadata accessor for Conversation.State);
    swift_beginAccess();
    outlined assign with take of Conversation.State(v3, v5);
    swift_endAccess();
    type metadata accessor for UserInputResult();
LABEL_8:
    swift_storeEnumTagMultiPayload();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
  uint64_t v7 = *(void *)(v0 + 288);
  swift_release();
  if (!v7)
  {
    **(unsigned char **)(v0 + 112) = 0;
    type metadata accessor for UserInputResult();
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)(v0 + 288);
  *(void *)(v0 + 280) = v8;
  *(void *)(v0 + 288) = swift_weakLoadStrong();
  uint64_t v9 = *(void *)(v8 + 16);
  *(void *)(v0 + 296) = v9;
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 304) = v10;
  *uint64_t v10 = v0;
  v10[1] = Conversation.accept(request:);
  uint64_t v11 = *(void *)(v0 + 120);
  return Conversation.updateFlowEnvironment(flowAgent:request:)(v9, v11);
}

uint64_t Conversation.accept(request:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128);
  *(void *)(*(void *)v1 + 272) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](Conversation.accept(request:), v2, 0);
}

uint64_t Conversation.accept(request:)(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128);
  *(unsigned char *)(*(void *)v1 + 332) = a1;
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](Conversation.accept(request:), v2, 0);
}

uint64_t Conversation.State.assertReady(function:)()
{
  uint64_t v1 = type metadata accessor for Conversation.State(0);
  uint64_t v2 = MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)v18 - v5;
  outlined init with copy of Conversation.State(v0, (uint64_t)v18 - v5, type metadata accessor for Conversation.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  outlined destroy of SiriRequest((uint64_t)v6, type metadata accessor for Conversation.State);
  if (EnumCaseMultiPayload == 5)
  {
    v18[0] = 0;
    v18[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    strcpy((char *)v18, "Cannot call ");
    BYTE5(v18[1]) = 0;
    HIWORD(v18[1]) = -5120;
    v8._countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._object = (void *)0x80000001BA0642D0;
    v9._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v9);
    uint64_t v11 = v18[0];
    uint64_t v10 = v18[1];
    lazy protocol witness table accessor for type CancelledError and conformance CancelledError();
  }
  else
  {
    outlined init with copy of Conversation.State(v0, (uint64_t)v4, type metadata accessor for Conversation.State);
    int v12 = swift_getEnumCaseMultiPayload();
    uint64_t result = outlined destroy of SiriRequest((uint64_t)v4, type metadata accessor for Conversation.State);
    if (v12 == 4) {
      return result;
    }
    v18[0] = 0;
    v18[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(57);
    v14._countAndFlagsBits = 0x6320746F6E6E6143;
    v14._object = (void *)0xEC000000206C6C61;
    String.append(_:)(v14);
    v15._countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 0xD00000000000002BLL;
    v16._object = (void *)0x80000001BA0642A0;
    String.append(_:)(v16);
    uint64_t v11 = v18[0];
    uint64_t v10 = v18[1];
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
  }
  swift_allocError();
  *uint64_t v17 = v11;
  v17[1] = v10;
  return swift_willThrow();
}

uint64_t Conversation.paraphrase()(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for OSSignpostID();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OSSignposter();
  v2[10] = v4;
  v2[11] = *(void *)(v4 - 8);
  v2[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[13] = swift_task_alloc();
  type metadata accessor for Conversation.State(0);
  v2[14] = swift_task_alloc();
  type metadata accessor for SiriRequest(0);
  v2[15] = swift_task_alloc();
  return MEMORY[0x1F4188298](Conversation.paraphrase(), v1, 0);
}

uint64_t Conversation.paraphrase()()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[6] + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  swift_beginAccess();
  outlined init with copy of Conversation.State(v3, v1, type metadata accessor for Conversation.State);
  uint64_t v4 = Conversation.State.assertAcceptedInput(function:)(v2, (uint64_t)"paraphrase()", 12, 2);
  v0[16] = v4;
  uint64_t v5 = v4;
  uint64_t v6 = v0[15];
  uint64_t v7 = v0[13];
  outlined destroy of SiriRequest(v0[14], type metadata accessor for Conversation.State);
  outlined destroy of SiriRequest(v6, type metadata accessor for SiriRequest);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  Swift::String v9 = (void *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v5;
  swift_retain();
  v0[17] = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime28ConversationParaphraseResultO_Tgm5(v7, (uint64_t)&async function pointer to partial apply for closure #1 in Conversation.paraphrase(), (uint64_t)v9);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v11 = v0[11];
  uint64_t v10 = v0[12];
  uint64_t v12 = v0[10];
  uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static Signposter.executor);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v13, v12);
  static OSSignpostID.exclusive.getter();
  return MEMORY[0x1F4188298](Conversation.paraphrase(), 0, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0[18] = OSSignposter.beginIntervalTelemetryEnabled(_:id:)("ParaphraseTime", 14, 2, v0[9]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[19] = v1;
  uint64_t v2 = type metadata accessor for ConversationParaphraseResult(0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  *uint64_t v1 = v0;
  v1[1] = Conversation.paraphrase();
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[5];
  uint64_t v6 = MEMORY[0x1E4FBC0F0];
  return MEMORY[0x1F4187D90](v5, v4, v2, v3, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 160) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = Conversation.paraphrase();
  }
  else {
    uint64_t v2 = Conversation.paraphrase();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v4 = v0[9];
  uint64_t v3 = v0[10];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[8];
  uint64_t v7 = v0[6];
  $defer #1 <A>() in OSSignposter.withIntervalSignpostTelemetryEnabledAsync<A>(_:id:around:)(v1, "ParaphraseTime", 14, 2, v0[18]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return MEMORY[0x1F4188298](Conversation.paraphrase(), v7, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v2 = v0[11];
  uint64_t v1 = v0[12];
  uint64_t v4 = v0[9];
  uint64_t v3 = v0[10];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[8];
  uint64_t v7 = v0[6];
  $defer #1 <A>() in OSSignposter.withIntervalSignpostTelemetryEnabledAsync<A>(_:id:around:)(v1, "ParaphraseTime", 14, 2, v0[18]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return MEMORY[0x1F4188298](Conversation.paraphrase(), v7, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t Conversation.State.assertAcceptedInput(function:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = v4;
  int v24 = a4;
  uint64_t v7 = type metadata accessor for Conversation.State(0);
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)v23 - v11;
  outlined init with copy of Conversation.State(v5, (uint64_t)v23 - v11, type metadata accessor for Conversation.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  outlined destroy of SiriRequest((uint64_t)v12, type metadata accessor for Conversation.State);
  if (EnumCaseMultiPayload == 5)
  {
    v23[0] = 0;
    v23[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    strcpy((char *)v23, "Cannot call ");
    BYTE5(v23[1]) = 0;
    HIWORD(v23[1]) = -5120;
    v14._countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._object = (void *)0x80000001BA0642D0;
    v15._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v15);
    uint64_t v17 = v23[0];
    uint64_t v16 = v23[1];
    lazy protocol witness table accessor for type CancelledError and conformance CancelledError();
  }
  else
  {
    outlined init with copy of Conversation.State(v5, (uint64_t)v10, type metadata accessor for Conversation.State);
    if (!swift_getEnumCaseMultiPayload())
    {
      uint64_t v17 = *(void *)&v10[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, selectedFlow: Node<FlowAgent>))
                                   + 48)];
      outlined init with take of Conversation.State((uint64_t)v10, a1, type metadata accessor for SiriRequest);
      return v17;
    }
    outlined destroy of SiriRequest((uint64_t)v10, type metadata accessor for Conversation.State);
    v23[0] = 0;
    v23[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(52);
    v18._countAndFlagsBits = 0x6320746F6E6E6143;
    v18._object = (void *)0xEC000000206C6C61;
    String.append(_:)(v18);
    v19._countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._countAndFlagsBits = 0xD000000000000026;
    v20._object = (void *)0x80000001BA064330;
    String.append(_:)(v20);
    uint64_t v17 = v23[0];
    uint64_t v16 = v23[1];
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
  }
  swift_allocError();
  *uint64_t v21 = v17;
  v21[1] = v16;
  swift_willThrow();
  return v17;
}

uint64_t closure #1 in Conversation.paraphrase()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a1;
  v4[3] = a4;
  uint64_t v5 = type metadata accessor for ActionParaphrase();
  v4[4] = v5;
  v4[5] = *(void *)(v5 - 8);
  v4[6] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in Conversation.paraphrase(), 0, 0);
}

uint64_t closure #1 in Conversation.paraphrase()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v1;
  *uint64_t v1 = v0;
  v1[1] = closure #1 in Conversation.paraphrase();
  uint64_t v2 = *(void *)(v0 + 48);
  return FlowAgent.paraphrase()(v2);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in Conversation.paraphrase(), 0, 0);
}

{
  void *v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  (*(void (**)(void, void, void))(v0[5] + 32))(v0[2], v0[6], v0[4]);
  type metadata accessor for ConversationParaphraseResult(0);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t Conversation.prepare()()
{
  v1[10] = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v1[11] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for UUID();
  v1[12] = v2;
  v1[13] = *(void *)(v2 - 8);
  v1[14] = swift_task_alloc();
  v1[15] = type metadata accessor for Conversation.State(0);
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for SiriRequest(0);
  v1[19] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[20] = v4;
  v1[21] = *(void *)(v4 + 64);
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  v1[24] = swift_task_alloc();
  return MEMORY[0x1F4188298](Conversation.prepare(), v0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t type;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[2];
  void *v43;
  uint64_t v44;

  uint64_t v43 = v0;
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[10] + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  swift_beginAccess();
  outlined init with copy of Conversation.State(v3, v2, type metadata accessor for Conversation.State);
  unint64_t v40 = Conversation.State.assertAcceptedInput(function:)(v1, (uint64_t)"prepare()", 9, 2);
  outlined destroy of SiriRequest(v0[18], type metadata accessor for Conversation.State);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  Swift::String v41 = v3;
  uint64_t v5 = v0[23];
  uint64_t v4 = v0[24];
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
  outlined init with copy of Conversation.State(v4, v5, type metadata accessor for SiriRequest);
  swift_retain_n();
  uint64_t v7 = Logger.logObject.getter();
  uint64_t v8 = static os_log_type_t.debug.getter();
  uint64_t v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[23];
  if (v9)
  {
    type = v8;
    uint64_t v11 = v0[13];
    uint64_t v12 = v0[14];
    uint64_t v13 = v0[12];
    Swift::String v14 = swift_slowAlloc();
    os_log_type_t v38 = swift_slowAlloc();
    v42[0] = v38;
    *(_DWORD *)Swift::String v14 = 136315394;
    Input.identifier.getter();
    lazy protocol witness table accessor for type Conversation and conformance Conversation((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    Swift::String v15 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of SiriRequest(v10, type metadata accessor for SiriRequest);
    *(_WORD *)(v14 + 12) = 2080;
    Swift::String v18 = ObjectIdentifier.debugDescription.getter();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v7, type, "[Conversation] Submits speculation task %s. %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v38, -1, -1);
    MEMORY[0x1BA9E48C0](v14, -1, -1);
  }
  else
  {
    outlined destroy of SiriRequest(v0[23], type metadata accessor for SiriRequest);

    swift_release_n();
  }
  Swift::String v20 = v0[24];
  uint64_t v21 = v0[21];
  uint64_t v22 = v0[22];
  uint64_t v23 = v0[20];
  int v24 = (uint64_t *)v0[17];
  char v37 = v0[16];
  uint64_t v25 = v0[10];
  uint64_t v26 = v0[11];
  uint64_t v35 = v20;
  uint64_t v36 = v26;
  uint64_t v27 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 1, 1, v27);
  outlined init with copy of Conversation.State(v20, v22, type metadata accessor for SiriRequest);
  uint64_t v28 = lazy protocol witness table accessor for type Conversation and conformance Conversation(&lazy protocol witness table cache variable for type Conversation and conformance Conversation, (void (*)(uint64_t))type metadata accessor for Conversation);
  uint64_t v29 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  __n128 v30 = (v21 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v25;
  *(void *)(v31 + 24) = v28;
  outlined init with take of Conversation.State(v22, v31 + v29, type metadata accessor for SiriRequest);
  *(void *)(v31 + v30) = v25;
  *(void *)(v31 + ((v30 + 15) & 0xFFFFFFFFFFFFFFF8)) = v40;
  swift_retain_n();
  swift_retain();
  os_log_type_t v32 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime4NodeCyAF9FlowAgentCGSg_Tgm5(v36, (uint64_t)&async function pointer to partial apply for closure #1 in Conversation.prepare(), v31);
  outlined destroy of SiriRequest(v35, type metadata accessor for SiriRequest);
  *int v24 = v32;
  v24[1] = v40;
  swift_storeEnumTagMultiPayload();
  outlined init with take of Conversation.State((uint64_t)v24, v37, type metadata accessor for Conversation.State);
  swift_beginAccess();
  outlined assign with take of Conversation.State(v37, v41);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v33 = (uint64_t (*)(void))v0[1];
  return v33();
}

uint64_t closure #1 in Conversation.prepare()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[11] = a5;
  v6[12] = a6;
  v6[9] = a1;
  v6[10] = a4;
  uint64_t v8 = type metadata accessor for UUID();
  v6[13] = v8;
  v6[14] = *(void *)(v8 - 8);
  v6[15] = swift_task_alloc();
  v6[16] = type metadata accessor for SiriRequest(0);
  v6[17] = swift_task_alloc();
  v6[18] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in Conversation.prepare(), a5, 0);
}

uint64_t closure #1 in Conversation.prepare()()
{
  uint64_t v22 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[10];
  uint64_t v3 = type metadata accessor for Logger();
  v0[19] = __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  outlined init with copy of Conversation.State(v2, v1, type metadata accessor for SiriRequest);
  swift_retain_n();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[18];
  if (v6)
  {
    uint64_t v8 = v0[15];
    uint64_t v9 = v0[13];
    uint64_t v10 = v0[14];
    uint64_t v11 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v21 = v20;
    *(_DWORD *)uint64_t v11 = 136315394;
    Input.identifier.getter();
    lazy protocol witness table accessor for type Conversation and conformance Conversation((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of SiriRequest(v7, type metadata accessor for SiriRequest);
    *(_WORD *)(v11 + 12) = 2080;
    uint64_t v15 = ObjectIdentifier.debugDescription.getter();
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v4, v5, "[Conversation] Running queued speculation task %s. %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v20, -1, -1);
    MEMORY[0x1BA9E48C0](v11, -1, -1);
  }
  else
  {
    outlined destroy of SiriRequest(v0[18], type metadata accessor for SiriRequest);

    swift_release_n();
  }
  uint64_t v17 = (void *)swift_task_alloc();
  v0[20] = v17;
  *uint64_t v17 = v0;
  v17[1] = closure #1 in Conversation.prepare();
  uint64_t v18 = v0[12];
  return Conversation.speculativelyExecute(from:)(v18);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  uint64_t v17 = v0;
  outlined init with copy of Conversation.State(*(void *)(v0 + 80), *(void *)(v0 + 136), type metadata accessor for SiriRequest);
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 136);
    uint64_t v4 = *(void *)(v0 + 112);
    os_log_type_t v5 = *(void *)(v0 + 120);
    BOOL v6 = *(void *)(v0 + 104);
    uint64_t v7 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    unint64_t v16 = v15;
    *(_DWORD *)uint64_t v7 = 136315394;
    Input.identifier.getter();
    lazy protocol witness table accessor for type Conversation and conformance Conversation((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v10 = v9;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
    *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of SiriRequest(v3, type metadata accessor for SiriRequest);
    *(_WORD *)(v7 + 12) = 2080;
    uint64_t v11 = ObjectIdentifier.debugDescription.getter();
    *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B9C64000, v1, v2, "[Conversation] Done running queued speculation task %s. %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v15, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }
  else
  {
    outlined destroy of SiriRequest(*(void *)(v0 + 136), type metadata accessor for SiriRequest);
    swift_release_n();
  }

  **(void **)(v0 + 72) = *(void *)(v0 + 24);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

uint64_t closure #1 in Conversation.prepare()(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[2] = v2;
  v3[3] = a1;
  v3[4] = v1;
  uint64_t v4 = (void *)*v2;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v5 = (uint64_t (*)(void))v4[1];
    return v5();
  }
  else
  {
    uint64_t v7 = v3[11];
    return MEMORY[0x1F4188298](closure #1 in Conversation.prepare(), v7, 0);
  }
}

uint64_t Conversation.flexibleExecutionSupport()(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = type metadata accessor for FlexibleExecutionSupportOptions();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = *(void *)(v4 + 64);
  v2[7] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v2[8] = v5;
  v2[9] = *(void *)(v5 - 8);
  v2[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
  v2[11] = swift_task_alloc();
  return MEMORY[0x1F4188298](Conversation.flexibleExecutionSupport(), v1, 0);
}

uint64_t Conversation.flexibleExecutionSupport()()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = v0[3];
  uint64_t v2 = __swift_project_value_buffer(v0[8], (uint64_t)static Logger.executor);
  v0[12] = v2;
  Logger.debugF(file:function:)();
  uint64_t v3 = (*(uint64_t (**)(void))(**(void **)(v1 + 112) + 216))();
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 16);
    v0[13] = v4;
    swift_retain();
    swift_release();
    return MEMORY[0x1F4188298](Conversation.flexibleExecutionSupport(), v4, 0);
  }
  else
  {
    specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/Conversation.swift", 33, 2, (uint64_t)"flexibleExecutionSupport()", 26, 2, v2);
    if (one-time initialization token for none != -1) {
      swift_once();
    }
    uint64_t v5 = v0[4];
    uint64_t v6 = v0[5];
    uint64_t v7 = v0[2];
    uint64_t v8 = __swift_project_value_buffer(v5, (uint64_t)static FlexibleExecutionSupportOptions.none);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v8, v5);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = v0[3];
  v0[14] = *(void *)(v0[13] + 112);
  swift_retain();
  swift_release();
  return MEMORY[0x1F4188298](Conversation.flexibleExecutionSupport(), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(unint64_t, uint64_t, uint64_t);
  unint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  uint64_t v21;
  uint64_t v22;

  uint64_t v1 = v0[11];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  dispatch thunk of AnyFlow.flexibleExecutionSupport.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v4 = v0[12];
    outlined destroy of ReferenceResolutionClientProtocol?(v0[11], &demangling cache variable for type metadata for FlexibleExecutionSupportOptions?);
    specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/Conversation.swift", 33, 2, (uint64_t)"flexibleExecutionSupport()", 26, 2, v4);
    if (one-time initialization token for none != -1) {
      swift_once();
    }
    uint64_t v5 = v0[4];
    uint64_t v6 = v0[5];
    uint64_t v7 = v0[2];
    uint64_t v8 = __swift_project_value_buffer(v5, (uint64_t)static FlexibleExecutionSupportOptions.none);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v8, v5);
    swift_release();
  }
  else
  {
    uint64_t v9 = v0[12];
    uint64_t v11 = v0[9];
    uint64_t v10 = v0[10];
    uint64_t v12 = v0[8];
    unint64_t v13 = v0[5];
    uint64_t v21 = v0[7];
    unint64_t v14 = v0[4];
    uint64_t v15 = v0[2];
    unint64_t v16 = *(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 32);
    v16(v15, v0[11], v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v9, v12);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v13 + 16))(v21, v15, v14);
    uint64_t v17 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    uint64_t v18 = swift_allocObject();
    v16(v18 + v17, v21, v14);
    specialized Logger.debugF(_:_:_:_:)((uint64_t (*)(uint64_t))partial apply for implicit closure #3 in Conversation.flexibleExecutionSupport());
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t implicit closure #3 in Conversation.flexibleExecutionSupport()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FlexibleExecutionSupportOptions();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[0] = 0;
  v10[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(70);
  v6._object = (void *)0x80000001BA0646E0;
  v6._countAndFlagsBits = 0xD000000000000044;
  String.append(_:)(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v7._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  String.append(_:)(v8);
  return v10[0];
}

uint64_t Conversation.commit()(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  uint64_t v3 = type metadata accessor for OSSignpostID();
  v2[11] = v3;
  v2[12] = *(void *)(v3 - 8);
  v2[13] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OSSignposter();
  v2[14] = v4;
  v2[15] = *(void *)(v4 - 8);
  v2[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[17] = swift_task_alloc();
  v2[18] = type metadata accessor for Conversation.State(0);
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return MEMORY[0x1F4188298](Conversation.commit(), v1, 0);
}

uint64_t Conversation.commit()()
{
  uint64_t v42 = v0;
  uint64_t v1 = *(void *)(v0[10] + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_jetsamHelper);
  OS_dispatch_semaphore.wait()();
  closure #1 in JetsamHelper.ensureJetsamTransaction()(v1);
  OS_dispatch_semaphore.signal()();
  uint64_t v2 = (void *)SiriEnvironment.currentProcess.getter();
  uint64_t v3 = (void *)dispatch thunk of CurrentProcess.idleTracker.getter();

  if (v3)
  {
    uint64_t v4 = dispatch thunk of IdleTracker.track(name:)();
  }
  else
  {
    uint64_t v4 = 0;
  }
  *(void *)(v0[10] + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_idleTrackerActivity) = v4;
  swift_release();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    Swift::String v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v40 = v9;
    *(_DWORD *)Swift::String v8 = 136315138;
    uint64_t v10 = ObjectIdentifier.debugDescription.getter();
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v6, v7, "[Conversation] Submits commit task. %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v9, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v12 = v0[21];
  uint64_t v13 = v0[10] + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  swift_beginAccess();
  outlined init with copy of Conversation.State(v13, v12, type metadata accessor for Conversation.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 5:
      uint64_t v40 = 0;
      unint64_t v41 = 0xE000000000000000;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type CancelledError and conformance CancelledError();
      swift_allocError();
      *uint64_t v18 = 0xD00000000000002FLL;
      v18[1] = 0x80000001BA064410;
      swift_willThrow();
      break;
    case 2:
      uint64_t v16 = 0;
      uint64_t v17 = *(void *)v0[21];
      goto LABEL_15;
    case 1:
      uint64_t v15 = (uint64_t *)v0[21];
      uint64_t v16 = *v15;
      uint64_t v17 = v15[1];
LABEL_15:
      v0[22] = v17;
      v0[23] = v16;
      uint64_t v19 = v0[19];
      uint64_t v20 = (uint64_t *)v0[20];
      uint64_t v21 = v0[17];
      uint64_t v22 = v0[10];
      uint64_t v23 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v21, 1, 1, v23);
      uint64_t v24 = lazy protocol witness table accessor for type Conversation and conformance Conversation(&lazy protocol witness table cache variable for type Conversation and conformance Conversation, (void (*)(uint64_t))type metadata accessor for Conversation);
      uint64_t v25 = (void *)swift_allocObject();
      v25[2] = v22;
      v25[3] = v24;
      v25[4] = v22;
      v25[5] = v16;
      v25[6] = v17;
      swift_retain();
      swift_retain_n();
      swift_retain();
      uint64_t v26 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC14SiriKitRuntime24ConversationCommitResultO_Tgm5(v21, (uint64_t)&async function pointer to partial apply for closure #1 in Conversation.commit(), (uint64_t)v25);
      v0[24] = v26;
      *uint64_t v20 = v26;
      swift_storeEnumTagMultiPayload();
      outlined init with take of Conversation.State((uint64_t)v20, v19, type metadata accessor for Conversation.State);
      swift_beginAccess();
      swift_retain();
      outlined assign with take of Conversation.State(v19, v13);
      swift_endAccess();
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v28 = v0[15];
      uint64_t v27 = v0[16];
      uint64_t v29 = v0[14];
      uint64_t v30 = __swift_project_value_buffer(v29, (uint64_t)static Signposter.executor);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v27, v30, v29);
      static OSSignpostID.exclusive.getter();
      return MEMORY[0x1F4188298](Conversation.commit(), 0, 0);
    default:
      uint64_t v31 = v0[21];
      uint64_t v40 = 0;
      unint64_t v41 = 0xE000000000000000;
      _StringGuts.grow(_:)(59);
      v32._countAndFlagsBits = 0x6320746F6E6E6143;
      v32._object = (void *)0xEC000000206C6C61;
      String.append(_:)(v32);
      v33._countAndFlagsBits = 0x292874696D6D6F63;
      v33._object = (void *)0xE800000000000000;
      String.append(_:)(v33);
      v34._countAndFlagsBits = 0xD00000000000002DLL;
      v34._object = (void *)0x80000001BA0643E0;
      String.append(_:)(v34);
      uint64_t v35 = v40;
      unint64_t v36 = v41;
      lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
      swift_allocError();
      *char v37 = v35;
      v37[1] = v36;
      swift_willThrow();
      outlined destroy of SiriRequest(v31, type metadata accessor for Conversation.State);
      break;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v38 = (uint64_t (*)(void))v0[1];
  return v38();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0[25] = OSSignposter.beginIntervalTelemetryEnabled(_:id:)("execution_time", 14, 2, v0[13]);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[26] = v1;
  uint64_t v2 = type metadata accessor for ConversationCommitResult();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  *uint64_t v1 = v0;
  v1[1] = Conversation.commit();
  uint64_t v4 = v0[24];
  uint64_t v5 = v0[9];
  uint64_t v6 = MEMORY[0x1E4FBC0F0];
  return MEMORY[0x1F4187D90](v5, v4, v2, v3, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = Conversation.commit();
  }
  else {
    uint64_t v2 = Conversation.commit();
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  uint64_t v4 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v5 = v0[11];
  uint64_t v6 = v0[12];
  os_log_type_t v7 = v0[10];
  $defer #1 <A>() in OSSignposter.withIntervalSignpostTelemetryEnabledAsync<A>(_:id:around:)(v1, "execution_time", 14, 2, v0[25]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return MEMORY[0x1F4188298](Conversation.commit(), v7, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  uint64_t v4 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v5 = v0[11];
  uint64_t v6 = v0[12];
  os_log_type_t v7 = v0[10];
  $defer #1 <A>() in OSSignposter.withIntervalSignpostTelemetryEnabledAsync<A>(_:id:around:)(v1, "execution_time", 14, 2, v0[25]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return MEMORY[0x1F4188298](Conversation.commit(), v7, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in Conversation.commit()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[16] = a5;
  v6[17] = a6;
  v6[14] = a1;
  v6[15] = a4;
  v6[18] = type metadata accessor for Conversation.State(0);
  v6[19] = swift_task_alloc();
  v6[20] = type metadata accessor for ConversationCommitResult();
  v6[21] = swift_task_alloc();
  v6[22] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in Conversation.commit(), a4, 0);
}

uint64_t closure #1 in Conversation.commit()()
{
  uint64_t v21 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[23] = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_retain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v20 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v6 = ObjectIdentifier.debugDescription.getter();
    v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v2, v3, "[Conversation] Running queued commit task. %s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v5, -1, -1);
    MEMORY[0x1BA9E48C0](v4, -1, -1);

    uint64_t v8 = v0[16];
    if (v8)
    {
LABEL_5:
      swift_retain();
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v9, v10))
      {
        unint64_t v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v11 = 0;
        _os_log_impl(&dword_1B9C64000, v9, v10, "[Conversation] Speculation task is still running, will wait for it to complete.", v11, 2u);
        MEMORY[0x1BA9E48C0](v11, -1, -1);
      }

      uint64_t v12 = (void *)swift_task_alloc();
      v0[24] = v12;
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Node<FlowAgent>?);
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      *uint64_t v12 = v0;
      v12[1] = closure #1 in Conversation.commit();
      uint64_t v15 = MEMORY[0x1E4FBC0F0];
      return MEMORY[0x1F4187D90](v0 + 12, v8, v13, v14, v15);
    }
  }
  else
  {

    swift_release_n();
    uint64_t v8 = v0[16];
    if (v8) {
      goto LABEL_5;
    }
  }
  uint64_t v16 = v0[17];
  v0[26] = v16;
  swift_retain();
  uint64_t v17 = (void *)swift_task_alloc();
  v0[27] = v17;
  *uint64_t v17 = v0;
  v17[1] = closure #1 in Conversation.commit();
  uint64_t v18 = v0[14];
  return Conversation.execute(from:)(v18, v16);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 200) = v0;
  swift_task_dealloc();
  os_log_type_t v3 = *(void *)(v2 + 120);
  if (v0) {
    uint64_t v4 = closure #1 in Conversation.commit();
  }
  else {
    uint64_t v4 = closure #1 in Conversation.commit();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  swift_release();
  uint64_t v1 = v0[12];
  v0[26] = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  v0[27] = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in Conversation.commit();
  os_log_type_t v3 = v0[14];
  return Conversation.execute(from:)(v3, v1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 224) = v0;
  swift_task_dealloc();
  os_log_type_t v3 = *(void *)(v2 + 120);
  if (v0) {
    uint64_t v4 = closure #1 in Conversation.commit();
  }
  else {
    uint64_t v4 = closure #1 in Conversation.commit();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  unsigned char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  void *v25;
  uint64_t v26;

  uint64_t v25 = v0;
  uint64_t v1 = v0[28];
  static Task<>.checkCancellation()();
  if (v1)
  {
    uint64_t v2 = v0[19];
    os_log_type_t v3 = v0[14];
    uint64_t v4 = v0[15];
    swift_storeEnumTagMultiPayload();
    uint64_t v5 = v4 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
    swift_beginAccess();
    outlined assign with take of Conversation.State(v2, v5);
    swift_endAccess();
    swift_willThrow();
    swift_release();
    outlined destroy of SiriRequest(v3, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    unint64_t v7 = (unsigned char *)(v0[15] + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_isPaused);
    swift_beginAccess();
    if (*v7 == 1)
    {
      uint64_t v8 = Logger.logObject.getter();
      uint64_t v9 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v8, v9))
      {
        os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v10 = 0;
        _os_log_impl(&dword_1B9C64000, v8, v9, "[Conversation] commit paused.", v10, 2u);
        MEMORY[0x1BA9E48C0](v10, -1, -1);
      }

      swift_release();
    }
    else
    {
      outlined init with copy of Conversation.State(v0[14], v0[22], (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
      unint64_t v11 = Logger.logObject.getter();
      uint64_t v12 = static os_log_type_t.debug.getter();
      uint64_t v13 = os_log_type_enabled(v11, v12);
      uint64_t v14 = v0[22];
      if (v13)
      {
        uint64_t v15 = v0[21];
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        uint64_t v17 = swift_slowAlloc();
        uint64_t v24 = v17;
        *(_DWORD *)uint64_t v16 = 136315138;
        outlined init with copy of Conversation.State(v14, v15, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
        uint64_t v18 = String.init<A>(describing:)();
        v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of SiriRequest(v14, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
        _os_log_impl(&dword_1B9C64000, v11, v12, "[Conversation] commit done, result: %s.", v16, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v17, -1, -1);
        MEMORY[0x1BA9E48C0](v16, -1, -1);

        swift_release();
      }
      else
      {
        swift_release();
        outlined destroy of SiriRequest(v14, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
      }
    }
    uint64_t v20 = v0[19];
    uint64_t v21 = v0[15];
    swift_storeEnumTagMultiPayload();
    uint64_t v22 = v21 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
    swift_beginAccess();
    outlined assign with take of Conversation.State(v20, v22);
    swift_endAccess();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
  }
  return v6();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

Swift::Bool __swiftcall Conversation.isEmpty()()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + 112) + 184))() & 1;
}

Swift::Bool __swiftcall Conversation.isCorrectable()()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_correctionsEngine + 24);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_correctionsEngine + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_correctionsEngine), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2) & 1;
}

uint64_t Conversation.stackCount.getter()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + 112) + 160))();
}

uint64_t Conversation.topFlowAgent.getter()
{
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 112) + 216))();
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 16);
  swift_retain();
  swift_release();
  return v2;
}

BOOL Conversation.isReady.getter()
{
  uint64_t v1 = type metadata accessor for Conversation.State(0);
  uint64_t v2 = MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v10 - v5;
  uint64_t v7 = v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  swift_beginAccess();
  outlined init with copy of Conversation.State(v7, (uint64_t)v6, type metadata accessor for Conversation.State);
  outlined init with copy of Conversation.State((uint64_t)v6, (uint64_t)v4, type metadata accessor for Conversation.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 4) {
    outlined destroy of SiriRequest((uint64_t)v4, type metadata accessor for Conversation.State);
  }
  outlined destroy of SiriRequest((uint64_t)v6, type metadata accessor for Conversation.State);
  return EnumCaseMultiPayload == 4;
}

BOOL Conversation.State.isReady.getter()
{
  uint64_t v1 = type metadata accessor for Conversation.State(0);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Conversation.State(v0, (uint64_t)v3, type metadata accessor for Conversation.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 4) {
    outlined destroy of SiriRequest((uint64_t)v3, type metadata accessor for Conversation.State);
  }
  return EnumCaseMultiPayload == 4;
}

uint64_t Conversation.speculativelyExecute(from:)(uint64_t a1)
{
  v2[27] = a1;
  v2[28] = v1;
  uint64_t v3 = type metadata accessor for PrepareResponseType();
  v2[29] = v3;
  v2[30] = *(void *)(v3 - 8);
  v2[31] = swift_task_alloc();
  unsigned char v2[32] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for PrepareResponse();
  v2[33] = v4;
  v2[34] = *(void *)(v4 - 8);
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  v2[37] = type metadata accessor for Conversation.State(0);
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  v2[43] = swift_task_alloc();
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  return MEMORY[0x1F4188298](Conversation.speculativelyExecute(from:), v1, 0);
}

uint64_t Conversation.speculativelyExecute(from:)()
{
  uint64_t v38 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void *)(v0 + 224);
  uint64_t v6 = &metadata instantiation cache for protocol conformance descriptor for AceServiceInvokerImpl;
  if (v4)
  {
    uint64_t v7 = swift_slowAlloc();
    v37[0] = swift_slowAlloc();
    uint64_t v8 = v37[0];
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v9 = (uint64_t *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rcId);
    swift_beginAccess();
    uint64_t v10 = *v9;
    unint64_t v11 = v9[1];
    swift_bridgeObjectRetain();
    *(void *)(v0 + 200) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    uint64_t v12 = *(void *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_pluginId);
    unint64_t v13 = *(void *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_pluginId + 8);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 208) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v37);
    uint64_t v6 = (void *)&metadata instantiation cache for protocol conformance descriptor for AceServiceInvokerImpl;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v2, v3, "[Conversation] Speculatively executing rcId: %s, plugin: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }
  else
  {

    swift_release();
  }
  uint64_t v14 = *(void *)(v0 + 216);
  *(void *)(v0 + 368) = type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  *(void *)(v0 + 376) = v6[149];
  swift_beginAccess();
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.emitEagerExecutionContextStarted(rcId:fromPlugin:)();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v15 = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_isPaused;
  *(void *)(v0 + 384) = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  *(void *)(v0 + 392) = v15;
  swift_retain();
  swift_beginAccess();
  swift_beginAccess();
  *(_DWORD *)(v0 + 520) = *MEMORY[0x1E4FA1D80];
  *(_DWORD *)(v0 + 524) = *MEMORY[0x1E4FA1D88];
  uint64_t v17 = *(void *)(v0 + 352);
  uint64_t v16 = *(void *)(v0 + 360);
  outlined init with copy of Conversation.State(*(void *)(v0 + 224) + *(void *)(v0 + 384), v16, type metadata accessor for Conversation.State);
  outlined init with copy of Conversation.State(v16, v17, type metadata accessor for Conversation.State);
  int v18 = (swift_getEnumCaseMultiPayload() - 1) & 0xFFFFFFFD;
  outlined destroy of SiriRequest(v17, type metadata accessor for Conversation.State);
  outlined destroy of SiriRequest(v16, type metadata accessor for Conversation.State);
  if (v18) {
    goto LABEL_11;
  }
  uint64_t v19 = *(void *)(v0 + 224);
  if (*(unsigned char *)(v19 + *(void *)(v0 + 392))) {
    goto LABEL_11;
  }
  uint64_t v21 = *(void *)(v0 + 336);
  uint64_t v20 = *(void *)(v0 + 344);
  outlined init with copy of Conversation.State(v19 + *(void *)(v0 + 384), v20, type metadata accessor for Conversation.State);
  outlined init with copy of Conversation.State(v20, v21, type metadata accessor for Conversation.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v23 = *(void *)(v0 + 344);
  if (EnumCaseMultiPayload == 5)
  {
    outlined destroy of SiriRequest(*(void *)(v0 + 344), type metadata accessor for Conversation.State);
    goto LABEL_11;
  }
  outlined destroy of SiriRequest(*(void *)(v0 + 336), type metadata accessor for Conversation.State);
  outlined destroy of SiriRequest(v23, type metadata accessor for Conversation.State);
  if (static Task<>.isCancelled.getter())
  {
LABEL_11:
    outlined init with copy of Conversation.State(*(void *)(v0 + 224) + *(void *)(v0 + 384), *(void *)(v0 + 304), type metadata accessor for Conversation.State);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v24 = *(void *)(v0 + 392);
      uint64_t v25 = *(void *)(v0 + 224);
      swift_release();
      swift_release();
      if (*(unsigned char *)(v25 + v24) == 1)
      {
        uint64_t v27 = *(void *)(v0 + 312);
        uint64_t v26 = *(uint64_t **)(v0 + 320);
        uint64_t v28 = *(void *)(v0 + 224) + *(void *)(v0 + 384);
        *uint64_t v26 = v14;
        swift_storeEnumTagMultiPayload();
        outlined init with take of Conversation.State((uint64_t)v26, v27, type metadata accessor for Conversation.State);
        swift_beginAccess();
        swift_retain();
        outlined assign with take of Conversation.State(v27, v28);
        swift_endAccess();
        uint64_t v36 = v14;
LABEL_17:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v30 = *(uint64_t (**)(uint64_t))(v0 + 8);
        return v30(v36);
      }
      swift_release();
    }
    else
    {
      uint64_t v29 = *(void *)(v0 + 304);
      swift_release();
      outlined destroy of SiriRequest(v29, type metadata accessor for Conversation.State);
    }
    uint64_t v36 = 0;
    goto LABEL_17;
  }
  if (v14 || (uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v0 + 224) + 112) + 216))()) != 0)
  {
    *(void *)(v0 + 400) = v14;
    *(void *)(v0 + 408) = *(void *)(v14 + 16);
    swift_retain();
    Swift::String v32 = (void *)swift_task_alloc();
    *(void *)(v0 + 416) = v32;
    *Swift::String v32 = v0;
    v32[1] = Conversation.speculativelyExecute(from:);
    uint64_t v33 = *(void *)(v0 + 288);
    return FlowAgent.prepare()(v33);
  }
  else
  {
    static ConversationSELFHelper.shared.getter();
    swift_bridgeObjectRetain();
    dispatch thunk of ConversationSELFHelper.emitEagerExecutionContextFailed(rcId:reason:)();
    swift_release();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
    swift_allocError();
    *Swift::String v34 = 0xD00000000000002FLL;
    v34[1] = 0x80000001BA0646B0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v35 = *(uint64_t (**)(void))(v0 + 8);
    return v35();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 224);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](Conversation.speculativelyExecute(from:), v1, 0);
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  Swift::String v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  uint64_t v1 = *(_DWORD *)(v0 + 520);
  uint64_t v2 = *(void *)(v0 + 256);
  os_log_type_t v3 = *(void *)(v0 + 232);
  BOOL v4 = *(void *)(v0 + 240);
  PrepareResponse.type.getter();
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 88))(v2, v3);
  if (v5 == v1)
  {
    uint64_t v6 = (uint64_t *)(*(void *)(v0 + 224) + *(void *)(v0 + 376));
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    *(void *)(v0 + 424) = v8;
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v9 = PrepareResponse.next.getter();
    *(void *)(v0 + 432) = v9;
    uint64_t v10 = PrepareResponse.onChildFlowCompletion.getter();
    *(void *)(v0 + 440) = v10;
    unint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 448) = v11;
    *unint64_t v11 = v0;
    v11[1] = Conversation.speculativelyExecute(from:);
    uint64_t v12 = *(void *)(v0 + 400);
    return Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:)(v7, v8, v12, v9, 0, 0, v10);
  }
  else if (v5 == *(_DWORD *)(v0 + 524))
  {
    uint64_t v14 = *(void *)(v0 + 408);
    return MEMORY[0x1F4188298](Conversation.speculativelyExecute(from:), v14, 0);
  }
  else
  {
    uint64_t v16 = *(void *)(v0 + 240);
    uint64_t v15 = *(void *)(v0 + 248);
    uint64_t v17 = *(void *)(v0 + 232);
    static ConversationSELFHelper.shared.getter();
    swift_bridgeObjectRetain();
    dispatch thunk of ConversationSELFHelper.emitEagerExecutionContextFailed(rcId:reason:)();
    swift_release();
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(33);
    *(void *)(v0 + 184) = 0;
    *(void *)(v0 + 192) = 0xE000000000000000;
    int v18 = (uint64_t *)(v0 + 184);
    v19._object = (void *)0x80000001BA064570;
    v19._countAndFlagsBits = 0xD00000000000001FLL;
    String.append(_:)(v19);
    PrepareResponse.type.getter();
    _print_unlocked<A, B>(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    uint64_t v20 = *v18;
    uint64_t v21 = v18[1];
    return specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Runtime/Conversation.swift", 95, 2, 437);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 224);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return MEMORY[0x1F4188298](Conversation.speculativelyExecute(from:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v8)(uint64_t, uint64_t);
  void (*v9)(uint64_t, uint64_t);
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int EnumCaseMultiPayload;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t (*v37)(void);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  uint64_t v1 = v0[35];
  uint64_t v2 = v0[36];
  os_log_type_t v3 = v0[33];
  BOOL v4 = v0[34];
  uint64_t v5 = PrepareResponse.next.getter();
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  uint64_t v6 = v0[35];
  uint64_t v7 = v0[33];
  uint64_t v8 = (void (**)(uint64_t, uint64_t))(v0[34] + 8);
  if (v5)
  {
    uint64_t v9 = *v8;
    (*v8)(v0[35], v0[33]);
  }
  else
  {
    uint64_t v10 = PrepareResponse.needsExecute.getter();
    uint64_t v9 = *v8;
    (*v8)(v6, v7);
    if (v10)
    {
      unint64_t v11 = v0[41];
      uint64_t v12 = v0[28] + v0[48];
      swift_beginAccess();
      outlined init with copy of Conversation.State(v12, v11, type metadata accessor for Conversation.State);
      if (swift_getEnumCaseMultiPayload() != 3)
      {
        unint64_t v13 = v0[50];
        uint64_t v14 = (void *)(v0[28] + v0[48]);
        swift_retain();
        outlined destroy of SiriRequest((uint64_t)v14, type metadata accessor for Conversation.State);
        *uint64_t v14 = v13;
        swift_storeEnumTagMultiPayload();
      }
      uint64_t v15 = v0[41];
      uint64_t v39 = v0[36];
      uint64_t v16 = v0[33];
      swift_retain();
      outlined destroy of SiriRequest(v15, type metadata accessor for Conversation.State);
      swift_endAccess();
      swift_release();
      static ConversationSELFHelper.shared.getter();
      swift_bridgeObjectRetain();
      dispatch thunk of ConversationSELFHelper.emitEagerExecutionContextEnded(rcId:)();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      v9(v39, v16);
      uint64_t v38 = v0[50];
      goto LABEL_17;
    }
  }
  v9(v0[36], v0[33]);
  swift_release();
  swift_release();
  uint64_t v17 = v0[44];
  int v18 = v0[45];
  outlined init with copy of Conversation.State(v0[28] + v0[48], v18, type metadata accessor for Conversation.State);
  outlined init with copy of Conversation.State(v18, v17, type metadata accessor for Conversation.State);
  uint64_t v19 = (swift_getEnumCaseMultiPayload() - 1) & 0xFFFFFFFD;
  outlined destroy of SiriRequest(v17, type metadata accessor for Conversation.State);
  outlined destroy of SiriRequest(v18, type metadata accessor for Conversation.State);
  uint64_t v20 = v0[28];
  if (v19 || (*(unsigned char *)(v20 + v0[49]) & 1) != 0)
  {
LABEL_12:
    outlined init with copy of Conversation.State(v20 + v0[48], v0[38], type metadata accessor for Conversation.State);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v26 = v0[49];
      uint64_t v27 = v0[28];
      swift_release();
      swift_release();
      if (*(unsigned char *)(v27 + v26) == 1)
      {
        uint64_t v29 = v0[39];
        uint64_t v28 = (void *)v0[40];
        uint64_t v30 = v0[28] + v0[48];
        *uint64_t v28 = 0;
        swift_storeEnumTagMultiPayload();
        outlined init with take of Conversation.State((uint64_t)v28, v29, type metadata accessor for Conversation.State);
        swift_beginAccess();
        outlined assign with take of Conversation.State(v29, v30);
        swift_endAccess();
      }
    }
    else
    {
      outlined destroy of SiriRequest(v0[38], type metadata accessor for Conversation.State);
    }
    uint64_t v38 = 0;
LABEL_17:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v31 = (uint64_t (*)(uint64_t))v0[1];
    return v31(v38);
  }
  uint64_t v21 = v0[42];
  uint64_t v22 = v0[43];
  outlined init with copy of Conversation.State(v20 + v0[48], v22, type metadata accessor for Conversation.State);
  outlined init with copy of Conversation.State(v22, v21, type metadata accessor for Conversation.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v24 = v0[43];
  if (EnumCaseMultiPayload == 5)
  {
    outlined destroy of SiriRequest(v0[43], type metadata accessor for Conversation.State);
    uint64_t v20 = v0[28];
    goto LABEL_12;
  }
  outlined destroy of SiriRequest(v0[42], type metadata accessor for Conversation.State);
  outlined destroy of SiriRequest(v24, type metadata accessor for Conversation.State);
  uint64_t v25 = static Task<>.isCancelled.getter();
  uint64_t v20 = v0[28];
  if (v25) {
    goto LABEL_12;
  }
  uint64_t v33 = (*(uint64_t (**)(void))(**(void **)(v20 + 112) + 216))();
  if (v33)
  {
    v0[50] = v33;
    v0[51] = *(void *)(v33 + 16);
    swift_retain();
    Swift::String v34 = (void *)swift_task_alloc();
    v0[52] = v34;
    *Swift::String v34 = v0;
    v34[1] = Conversation.speculativelyExecute(from:);
    uint64_t v35 = v0[36];
    return FlowAgent.prepare()(v35);
  }
  else
  {
    static ConversationSELFHelper.shared.getter();
    swift_bridgeObjectRetain();
    dispatch thunk of ConversationSELFHelper.emitEagerExecutionContextFailed(rcId:reason:)();
    swift_release();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
    swift_allocError();
    *uint64_t v36 = 0xD00000000000002FLL;
    v36[1] = 0x80000001BA0646B0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v37 = (uint64_t (*)(void))v0[1];
    return v37();
  }
}

{
  void *v0;
  uint64_t v1;

  uint64_t v1 = v0[28];
  v0[57] = *(void *)(v0[51] + 112);
  return MEMORY[0x1F4188298](Conversation.speculativelyExecute(from:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 408);
  *(void *)(v0 + 464) = dispatch thunk of AnyFlow.siriEnvironment.getter();
  return MEMORY[0x1F4188298](Conversation.speculativelyExecute(from:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 224);
  FlowAgent.complete()();
  return MEMORY[0x1F4188298](Conversation.speculativelyExecute(from:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int EnumCaseMultiPayload;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t (*v28)(void);
  uint64_t v30;
  uint64_t v31;

  uint64_t v1 = PrepareResponse.next.getter();
  v0[59] = v1;
  if (v1)
  {
    uint64_t v2 = v0[50];
    os_log_type_t v3 = (void *)swift_task_alloc();
    v0[60] = v3;
    *os_log_type_t v3 = v0;
    v3[1] = Conversation.speculativelyExecute(from:);
    BOOL v4 = v0[28];
    v3[14] = v2;
    v3[15] = v4;
    return MEMORY[0x1F4188298](Conversation.removeNode(node:), v4, 0);
  }
  uint64_t v6 = v0[39];
  uint64_t v5 = (void *)v0[40];
  uint64_t v7 = v0[28] + v0[48];
  char *v5 = v0[50];
  swift_storeEnumTagMultiPayload();
  outlined init with take of Conversation.State((uint64_t)v5, v6, type metadata accessor for Conversation.State);
  swift_beginAccess();
  swift_retain();
  outlined assign with take of Conversation.State(v6, v7);
  swift_endAccess();
  uint64_t v30 = v0[36];
  uint64_t v9 = v0[33];
  uint64_t v8 = v0[34];
  static ConversationSELFHelper.shared.getter();
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.emitEagerExecutionContextEnded(rcId:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v30, v9);
  unint64_t v11 = v0[44];
  uint64_t v10 = v0[45];
  outlined init with copy of Conversation.State(v0[28] + v0[48], v10, type metadata accessor for Conversation.State);
  outlined init with copy of Conversation.State(v10, v11, type metadata accessor for Conversation.State);
  LODWORD(v5) = (swift_getEnumCaseMultiPayload() - 1) & 0xFFFFFFFD;
  outlined destroy of SiriRequest(v11, type metadata accessor for Conversation.State);
  outlined destroy of SiriRequest(v10, type metadata accessor for Conversation.State);
  uint64_t v12 = v0[28];
  if v5 || (*(unsigned char *)(v12 + v0[49])) {
    goto LABEL_10;
  }
  unint64_t v13 = v0[42];
  uint64_t v14 = v0[43];
  outlined init with copy of Conversation.State(v12 + v0[48], v14, type metadata accessor for Conversation.State);
  outlined init with copy of Conversation.State(v14, v13, type metadata accessor for Conversation.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v16 = v0[43];
  if (EnumCaseMultiPayload == 5)
  {
    outlined destroy of SiriRequest(v0[43], type metadata accessor for Conversation.State);
    uint64_t v12 = v0[28];
LABEL_10:
    outlined init with copy of Conversation.State(v12 + v0[48], v0[38], type metadata accessor for Conversation.State);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      int v18 = v0[49];
      uint64_t v19 = v0[28];
      swift_release();
      swift_release();
      if (*(unsigned char *)(v19 + v18) == 1)
      {
        uint64_t v21 = v0[39];
        uint64_t v20 = (void *)v0[40];
        uint64_t v22 = v0[28] + v0[48];
        *uint64_t v20 = 0;
        swift_storeEnumTagMultiPayload();
        outlined init with take of Conversation.State((uint64_t)v20, v21, type metadata accessor for Conversation.State);
        swift_beginAccess();
        outlined assign with take of Conversation.State(v21, v22);
        swift_endAccess();
      }
    }
    else
    {
      outlined destroy of SiriRequest(v0[38], type metadata accessor for Conversation.State);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = (uint64_t (*)(void))v0[1];
    return v23(0);
  }
  outlined destroy of SiriRequest(v0[42], type metadata accessor for Conversation.State);
  outlined destroy of SiriRequest(v16, type metadata accessor for Conversation.State);
  uint64_t v17 = static Task<>.isCancelled.getter();
  uint64_t v12 = v0[28];
  if (v17) {
    goto LABEL_10;
  }
  uint64_t v24 = (*(uint64_t (**)(void))(**(void **)(v12 + 112) + 216))();
  if (v24)
  {
    v0[50] = v24;
    v0[51] = *(void *)(v24 + 16);
    swift_retain();
    uint64_t v25 = (void *)swift_task_alloc();
    v0[52] = v25;
    *uint64_t v25 = v0;
    v25[1] = Conversation.speculativelyExecute(from:);
    uint64_t v26 = v0[36];
    return FlowAgent.prepare()(v26);
  }
  else
  {
    static ConversationSELFHelper.shared.getter();
    swift_bridgeObjectRetain();
    dispatch thunk of ConversationSELFHelper.emitEagerExecutionContextFailed(rcId:reason:)();
    swift_release();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
    swift_allocError();
    *uint64_t v27 = 0xD00000000000002FLL;
    v27[1] = 0x80000001BA0646B0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v28 = (uint64_t (*)(void))v0[1];
    return v28();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 224);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](Conversation.speculativelyExecute(from:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t v1 = v0[58];
  uint64_t v2 = v0[51];
  os_log_type_t v3 = (uint64_t *)(v0[28] + v0[47]);
  BOOL v4 = *v3;
  uint64_t v5 = v3[1];
  v0[61] = v5;
  uint64_t v6 = *(void *)(v2 + 152);
  v0[62] = v6;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v7 = PrepareResponse.onChildFlowCompletion.getter();
  v0[63] = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[64] = v8;
  *uint64_t v8 = v0;
  v8[1] = Conversation.speculativelyExecute(from:);
  uint64_t v9 = v0[59];
  return Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:)(v4, v5, 0, v9, v6, v1, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 224);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return MEMORY[0x1F4188298](Conversation.speculativelyExecute(from:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int EnumCaseMultiPayload;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t (*v24)(void);
  uint64_t v25;

  swift_release();
  uint64_t v1 = v0[36];
  uint64_t v2 = v0[33];
  os_log_type_t v3 = v0[34];
  static ConversationSELFHelper.shared.getter();
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.emitEagerExecutionContextEnded(rcId:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  BOOL v4 = v0[44];
  uint64_t v5 = v0[45];
  outlined init with copy of Conversation.State(v0[28] + v0[48], v5, type metadata accessor for Conversation.State);
  outlined init with copy of Conversation.State(v5, v4, type metadata accessor for Conversation.State);
  uint64_t v6 = (swift_getEnumCaseMultiPayload() - 1) & 0xFFFFFFFD;
  outlined destroy of SiriRequest(v4, type metadata accessor for Conversation.State);
  outlined destroy of SiriRequest(v5, type metadata accessor for Conversation.State);
  uint64_t v7 = v0[28];
  if (v6 || (*(unsigned char *)(v7 + v0[49]) & 1) != 0) {
    goto LABEL_6;
  }
  uint64_t v8 = v0[42];
  uint64_t v9 = v0[43];
  outlined init with copy of Conversation.State(v7 + v0[48], v9, type metadata accessor for Conversation.State);
  outlined init with copy of Conversation.State(v9, v8, type metadata accessor for Conversation.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  unint64_t v11 = v0[43];
  if (EnumCaseMultiPayload == 5)
  {
    outlined destroy of SiriRequest(v0[43], type metadata accessor for Conversation.State);
    uint64_t v7 = v0[28];
LABEL_6:
    outlined init with copy of Conversation.State(v7 + v0[48], v0[38], type metadata accessor for Conversation.State);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      unint64_t v13 = v0[49];
      uint64_t v14 = v0[28];
      swift_release();
      swift_release();
      if (*(unsigned char *)(v14 + v13) == 1)
      {
        uint64_t v16 = v0[39];
        uint64_t v15 = (void *)v0[40];
        uint64_t v17 = v0[28] + v0[48];
        *uint64_t v15 = 0;
        swift_storeEnumTagMultiPayload();
        outlined init with take of Conversation.State((uint64_t)v15, v16, type metadata accessor for Conversation.State);
        swift_beginAccess();
        outlined assign with take of Conversation.State(v16, v17);
        swift_endAccess();
      }
    }
    else
    {
      outlined destroy of SiriRequest(v0[38], type metadata accessor for Conversation.State);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int v18 = (uint64_t (*)(void))v0[1];
    return v18(0);
  }
  outlined destroy of SiriRequest(v0[42], type metadata accessor for Conversation.State);
  outlined destroy of SiriRequest(v11, type metadata accessor for Conversation.State);
  uint64_t v12 = static Task<>.isCancelled.getter();
  uint64_t v7 = v0[28];
  if (v12) {
    goto LABEL_6;
  }
  uint64_t v20 = (*(uint64_t (**)(void))(**(void **)(v7 + 112) + 216))();
  if (v20)
  {
    v0[50] = v20;
    v0[51] = *(void *)(v20 + 16);
    swift_retain();
    uint64_t v21 = (void *)swift_task_alloc();
    v0[52] = v21;
    *uint64_t v21 = v0;
    v21[1] = Conversation.speculativelyExecute(from:);
    uint64_t v22 = v0[36];
    return FlowAgent.prepare()(v22);
  }
  else
  {
    static ConversationSELFHelper.shared.getter();
    swift_bridgeObjectRetain();
    dispatch thunk of ConversationSELFHelper.emitEagerExecutionContextFailed(rcId:reason:)();
    swift_release();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError();
    swift_allocError();
    *uint64_t v23 = 0xD00000000000002FLL;
    v23[1] = 0x80000001BA0646B0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (uint64_t (*)(void))v0[1];
    return v24();
  }
}

BOOL Conversation.State.shouldContinueSpeculating.getter()
{
  uint64_t v1 = type metadata accessor for Conversation.State(0);
  MEMORY[0x1F4188790](v1);
  os_log_type_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Conversation.State(v0, (uint64_t)v3, type metadata accessor for Conversation.State);
  BOOL v4 = ((swift_getEnumCaseMultiPayload() - 1) & 0xFFFFFFFD) == 0;
  outlined destroy of SiriRequest((uint64_t)v3, type metadata accessor for Conversation.State);
  return v4;
}

uint64_t Conversation.State.prepareComplete(selectedFlow:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Conversation.State(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Conversation.State((uint64_t)v1, (uint64_t)v5, type metadata accessor for Conversation.State);
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    outlined destroy of SiriRequest((uint64_t)v1, type metadata accessor for Conversation.State);
    *uint64_t v1 = a1;
    swift_storeEnumTagMultiPayload();
    swift_retain();
  }
  return outlined destroy of SiriRequest((uint64_t)v5, type metadata accessor for Conversation.State);
}

uint64_t Conversation.execute(from:)(uint64_t a1, uint64_t a2)
{
  v3[46] = a2;
  v3[47] = v2;
  v3[45] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationCommitResult?);
  v3[48] = swift_task_alloc();
  v3[49] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for ConversationCommitResult();
  v3[50] = v4;
  v3[51] = *(void *)(v4 - 8);
  v3[52] = swift_task_alloc();
  v3[53] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowUnhandledReason?);
  v3[54] = swift_task_alloc();
  v3[55] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for FlowUnhandledReason();
  v3[56] = v5;
  v3[57] = *(void *)(v5 - 8);
  v3[58] = swift_task_alloc();
  v3[59] = swift_task_alloc();
  v3[60] = swift_task_alloc();
  v3[61] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PluginAction?);
  v3[62] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for PluginAction();
  v3[63] = v6;
  v3[64] = *(void *)(v6 - 8);
  v3[65] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ExecuteResponseType();
  v3[66] = v7;
  v3[67] = *(void *)(v7 - 8);
  v3[68] = swift_task_alloc();
  v3[69] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DispatchTimeInterval();
  v3[70] = v8;
  v3[71] = *(void *)(v8 - 8);
  v3[72] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for ExecuteResponse();
  v3[73] = v9;
  v3[74] = *(void *)(v9 - 8);
  v3[75] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for PrepareResponseType();
  v3[76] = v10;
  v3[77] = *(void *)(v10 - 8);
  v3[78] = swift_task_alloc();
  v3[79] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for PrepareResponse();
  v3[80] = v11;
  v3[81] = *(void *)(v11 - 8);
  v3[82] = swift_task_alloc();
  v3[83] = swift_task_alloc();
  v3[84] = type metadata accessor for Conversation.State(0);
  v3[85] = swift_task_alloc();
  v3[86] = swift_task_alloc();
  v3[87] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v3[88] = swift_task_alloc();
  return MEMORY[0x1F4188298](Conversation.execute(from:), v2, 0);
}

uint64_t Conversation.execute(from:)()
{
  uint64_t v86 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 712) = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void *)(v0 + 376);
  uint64_t v6 = &metadata instantiation cache for protocol conformance descriptor for AceServiceInvokerImpl;
  if (v4)
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v85 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v9 = (uint64_t *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rcId);
    swift_beginAccess();
    uint64_t v10 = *v9;
    unint64_t v11 = v9[1];
    swift_bridgeObjectRetain();
    *(void *)(v0 + 352) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    uint64_t v6 = (void *)&metadata instantiation cache for protocol conformance descriptor for AceServiceInvokerImpl;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v2, v3, "[Conversation] Finally executing rcId: %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }
  else
  {

    swift_release();
  }
  uint64_t v12 = *(void *)(v0 + 704);
  uint64_t v13 = *(void *)(v0 + 376);
  uint64_t v83 = *(void *)(v0 + 368);
  *(void *)(v0 + 720) = type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  uint64_t v14 = v6[149];
  *(void *)(v0 + 728) = v14;
  uint64_t v15 = (uint64_t *)(v13 + v14);
  swift_beginAccess();
  uint64_t v16 = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_hypothesisId;
  *(void *)(v0 + 736) = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_hypothesisId;
  uint64_t v17 = v13 + v16;
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v17, v12, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v18 = *(void *)(v13 + 112);
  *(void *)(v0 + 744) = v18;
  uint64_t v19 = *(void (**)(uint64_t))(*(void *)v18 + 160);
  uint64_t v20 = swift_bridgeObjectRetain();
  v19(v20);
  dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextStarted(rcId:hypothesisId:fromPlugin:stackDepth:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v12, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(void *)(v0 + 344) = 0;
  if (v83)
  {
    uint64_t v21 = *(void *)(v83 + 16);
    uint64_t v22 = *(void *)(v0 + 376) + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
    swift_beginAccess();
    uint64_t v23 = MEMORY[0x1BA9E49F0](v22);
    *(void *)(v0 + 752) = v23;
    if (v23)
    {
      uint64_t v24 = *(void *)(v22 + 8);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v28 = v21 + 152;
      uint64_t v27 = *(void *)(v21 + 152);
      uint64_t v26 = *(void *)(v28 + 8);
      uint64_t v30 = *v15;
      uint64_t v29 = v15[1];
      *(void *)(v0 + 760) = v29;
      uint64_t v80 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 + 8)
                                                                                         + **(int **)(v24 + 8));
      swift_bridgeObjectRetain();
      uint64_t v31 = (void *)swift_task_alloc();
      *(void *)(v0 + 768) = v31;
      *uint64_t v31 = v0;
      v31[1] = Conversation.execute(from:);
      return v80(v26, v27, v30, v29, ObjectType, v24);
    }
  }
  uint64_t v33 = *(void *)(v0 + 696);
  uint64_t v34 = *(void *)(v0 + 688);
  uint64_t v35 = *(void *)(v0 + 376);
  uint64_t v36 = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  *(void *)(v0 + 776) = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  uint64_t v37 = v35 + v36;
  *(void *)(v0 + 784) = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_isPaused;
  swift_retain();
  swift_beginAccess();
  swift_beginAccess();
  outlined init with copy of Conversation.State(v37, v33, type metadata accessor for Conversation.State);
  outlined init with copy of Conversation.State(v33, v34, type metadata accessor for Conversation.State);
  int v38 = swift_getEnumCaseMultiPayload() & 0xFFFFFFFE;
  outlined destroy of SiriRequest(v34, type metadata accessor for Conversation.State);
  outlined destroy of SiriRequest(v33, type metadata accessor for Conversation.State);
  if (v38 == 2)
  {
    *(_DWORD *)(v0 + 1120) = *MEMORY[0x1E4FA1D80];
    *(_DWORD *)(v0 + 1124) = *MEMORY[0x1E4FA1D88];
    uint64_t v39 = (_DWORD *)MEMORY[0x1E4FA1D68];
    *(_DWORD *)(v0 + 1128) = *MEMORY[0x1E4FBCAE8];
    *(_DWORD *)(v0 + 1132) = *v39;
    *(_DWORD *)(v0 + 1136) = *MEMORY[0x1E4FA1D70];
    *(_DWORD *)(v0 + 1140) = *MEMORY[0x1E4FA1D60];
    uint64_t v40 = *(void *)(v0 + 368);
    if ((static Task<>.isCancelled.getter() & 1) == 0
      && (*(unsigned char *)(*(void *)(v0 + 376) + *(void *)(v0 + 784)) & 1) == 0)
    {
      if (v40 || (uint64_t v40 = (*(uint64_t (**)(void))(**(void **)(v0 + 744) + 216))()) != 0)
      {
        *(void *)(v0 + 792) = v40;
        *(void *)(v0 + 800) = *(void *)(v40 + 16);
        swift_retain();
        unint64_t v41 = (void *)swift_task_alloc();
        *(void *)(v0 + 808) = v41;
        *unint64_t v41 = v0;
        v41[1] = Conversation.execute(from:);
        uint64_t v42 = *(void *)(v0 + 664);
        return FlowAgent.prepare()(v42);
      }
      uint64_t v78 = *(void *)(v0 + 680);
      uint64_t v79 = *(void *)(v0 + 376) + *(void *)(v0 + 776);
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      outlined assign with take of Conversation.State(v78, v79);
      swift_endAccess();
      uint64_t v40 = 0;
    }
  }
  else
  {
    uint64_t v40 = *(void *)(v0 + 368);
  }
  *(void *)(v0 + 1096) = v40;
  uint64_t v43 = *(void *)(v0 + 704);
  uint64_t v44 = *(void *)(v0 + 376);
  uint64_t v45 = v44 + *(void *)(v0 + 736);
  static ConversationSELFHelper.shared.getter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v45, v43, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextEnded(rcId:hypothesisId:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v43, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v46 = v44 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  swift_beginAccess();
  uint64_t v47 = MEMORY[0x1BA9E49F0](v46);
  *(void *)(v0 + 1104) = v47;
  if (v47)
  {
    uint64_t v48 = *(void *)(v46 + 8);
    uint64_t v49 = swift_getObjectType();
    uint64_t v81 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v48 + 16) + **(int **)(v48 + 16));
    uint64_t v50 = (void *)swift_task_alloc();
    *(void *)(v0 + 1112) = v50;
    *uint64_t v50 = v0;
    v50[1] = Conversation.execute(from:);
    return v81(v49, v48);
  }
  else
  {
    uint64_t v51 = (*(uint64_t (**)(void))(**(void **)(v0 + 744) + 216))();
    if (v51)
    {
      uint64_t v52 = v51;
      swift_retain_n();
      int64_t v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = swift_slowAlloc();
        uint64_t v84 = swift_slowAlloc();
        uint64_t v85 = v84;
        *(_DWORD *)uint64_t v55 = 136315394;
        *(void *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v55 + 12) = 2080;
        uint64_t v56 = type metadata accessor for Siri_Nlu_External_Task();
        uint64_t v57 = swift_bridgeObjectRetain();
        uint64_t v58 = MEMORY[0x1BA9E3080](v57, v56);
        unint64_t v60 = v59;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v60, &v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v53, v54, "[Conversation] %s: flow was handled, stack is non-empty. Active tasks: %s", (uint8_t *)v55, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v84, -1, -1);
        MEMORY[0x1BA9E48C0](v55, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      uint64_t v67 = *(void **)(v0 + 360);
      uint64_t v68 = *(void *)(*(void *)(v52 + 16) + 152);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      uint64_t v69 = MEMORY[0x1E4FBC860];
      *uint64_t v67 = v68;
      v67[1] = v69;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v61 = v0 + 344;
      uint64_t v62 = Logger.logObject.getter();
      os_log_type_t v63 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v62, v63))
      {
        uint64_t v64 = swift_slowAlloc();
        uint64_t v65 = swift_slowAlloc();
        uint64_t v85 = v65;
        *(_DWORD *)uint64_t v64 = 136315394;
        *(void *)(v0 + 336) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v64 + 12) = 2080;
        swift_beginAccess();
        uint64_t v82 = v65;
        if (*(void *)v61)
        {
          uint64_t v66 = *(void *)(*(void *)(*(void *)v61 + 16) + 152);
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v66 = MEMORY[0x1E4FBC860];
        }
        uint64_t v70 = type metadata accessor for Siri_Nlu_External_Task();
        uint64_t v71 = MEMORY[0x1BA9E3080](v66, v70);
        unint64_t v73 = v72;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 328) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v73, &v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v62, v63, "[Conversation] %s: flow was handled, stack is empty. Completed tasks: %s", (uint8_t *)v64, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v82, -1, -1);
        MEMORY[0x1BA9E48C0](v64, -1, -1);
      }
      else
      {
      }
      swift_beginAccess();
      uint64_t v74 = MEMORY[0x1E4FBC860];
      if (*(void *)v61)
      {
        uint64_t v75 = *(void *)(*(void *)(*(void *)v61 + 16) + 152);
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v75 = MEMORY[0x1E4FBC860];
      }
      uint64_t v76 = *(void **)(v0 + 360);
      swift_release();
      *uint64_t v76 = v74;
      v76[1] = v75;
      swift_storeEnumTagMultiPayload();
    }
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    int v77 = *(uint64_t (**)(void))(v0 + 8);
    return v77();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 376);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return MEMORY[0x1F4188298](Conversation.execute(from:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t (*v46)(void);
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  int64_t v53 = v0;
  uint64_t v1 = *(void *)(v0 + 696);
  uint64_t v2 = *(void *)(v0 + 688);
  os_log_type_t v3 = *(void *)(v0 + 376);
  BOOL v4 = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  *(void *)(v0 + 776) = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state;
  uint64_t v5 = v3 + v4;
  *(void *)(v0 + 784) = OBJC_IVAR____TtC14SiriKitRuntime12Conversation_isPaused;
  swift_retain();
  swift_beginAccess();
  swift_beginAccess();
  outlined init with copy of Conversation.State(v5, v1, type metadata accessor for Conversation.State);
  outlined init with copy of Conversation.State(v1, v2, type metadata accessor for Conversation.State);
  uint64_t v6 = swift_getEnumCaseMultiPayload() & 0xFFFFFFFE;
  outlined destroy of SiriRequest(v2, type metadata accessor for Conversation.State);
  outlined destroy of SiriRequest(v1, type metadata accessor for Conversation.State);
  if (v6 == 2)
  {
    *(_DWORD *)(v0 + 1120) = *MEMORY[0x1E4FA1D80];
    *(_DWORD *)(v0 + 1124) = *MEMORY[0x1E4FA1D88];
    uint64_t v7 = (_DWORD *)MEMORY[0x1E4FA1D68];
    *(_DWORD *)(v0 + 1128) = *MEMORY[0x1E4FBCAE8];
    *(_DWORD *)(v0 + 1132) = *v7;
    *(_DWORD *)(v0 + 1136) = *MEMORY[0x1E4FA1D70];
    *(_DWORD *)(v0 + 1140) = *MEMORY[0x1E4FA1D60];
    uint64_t v8 = *(void *)(v0 + 368);
    if ((static Task<>.isCancelled.getter() & 1) == 0
      && (*(unsigned char *)(*(void *)(v0 + 376) + *(void *)(v0 + 784)) & 1) == 0)
    {
      if (v8 || (uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(v0 + 744) + 216))()) != 0)
      {
        *(void *)(v0 + 792) = v8;
        *(void *)(v0 + 800) = *(void *)(v8 + 16);
        swift_retain();
        uint64_t v9 = (void *)swift_task_alloc();
        *(void *)(v0 + 808) = v9;
        *uint64_t v9 = v0;
        v9[1] = Conversation.execute(from:);
        uint64_t v10 = *(void *)(v0 + 664);
        return FlowAgent.prepare()(v10);
      }
      uint64_t v47 = *(void *)(v0 + 680);
      uint64_t v48 = *(void *)(v0 + 376) + *(void *)(v0 + 776);
      swift_storeEnumTagMultiPayload();
      swift_beginAccess();
      outlined assign with take of Conversation.State(v47, v48);
      swift_endAccess();
      uint64_t v8 = 0;
    }
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 368);
  }
  *(void *)(v0 + 1096) = v8;
  uint64_t v12 = *(void *)(v0 + 704);
  uint64_t v13 = *(void *)(v0 + 376);
  uint64_t v14 = v13 + *(void *)(v0 + 736);
  static ConversationSELFHelper.shared.getter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v14, v12, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextEnded(rcId:hypothesisId:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v12, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v15 = v13 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  swift_beginAccess();
  uint64_t v16 = MEMORY[0x1BA9E49F0](v15);
  *(void *)(v0 + 1104) = v16;
  if (v16)
  {
    uint64_t v17 = *(void *)(v15 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v49 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v17 + 16) + **(int **)(v17 + 16));
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 1112) = v19;
    *uint64_t v19 = v0;
    v19[1] = Conversation.execute(from:);
    return v49(ObjectType, v17);
  }
  else
  {
    uint64_t v20 = (*(uint64_t (**)(void))(**(void **)(v0 + 744) + 216))();
    if (v20)
    {
      uint64_t v21 = v20;
      swift_retain_n();
      uint64_t v22 = Logger.logObject.getter();
      uint64_t v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = swift_slowAlloc();
        uint64_t v51 = swift_slowAlloc();
        uint64_t v52 = v51;
        *(_DWORD *)uint64_t v24 = 136315394;
        *(void *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v24 + 12) = 2080;
        uint64_t v25 = type metadata accessor for Siri_Nlu_External_Task();
        uint64_t v26 = swift_bridgeObjectRetain();
        uint64_t v27 = MEMORY[0x1BA9E3080](v26, v25);
        uint64_t v29 = v28;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v22, v23, "[Conversation] %s: flow was handled, stack is non-empty. Active tasks: %s", (uint8_t *)v24, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v51, -1, -1);
        MEMORY[0x1BA9E48C0](v24, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      uint64_t v36 = *(void **)(v0 + 360);
      uint64_t v37 = *(void *)(*(void *)(v21 + 16) + 152);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      int v38 = MEMORY[0x1E4FBC860];
      *uint64_t v36 = v37;
      v36[1] = v38;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v30 = v0 + 344;
      uint64_t v31 = Logger.logObject.getter();
      Swift::String v32 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = swift_slowAlloc();
        uint64_t v34 = swift_slowAlloc();
        uint64_t v52 = v34;
        *(_DWORD *)uint64_t v33 = 136315394;
        *(void *)(v0 + 336) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v33 + 12) = 2080;
        swift_beginAccess();
        uint64_t v50 = v34;
        if (*(void *)v30)
        {
          uint64_t v35 = *(void *)(*(void *)(*(void *)v30 + 16) + 152);
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v35 = MEMORY[0x1E4FBC860];
        }
        uint64_t v39 = type metadata accessor for Siri_Nlu_External_Task();
        uint64_t v40 = MEMORY[0x1BA9E3080](v35, v39);
        uint64_t v42 = v41;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 328) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v31, v32, "[Conversation] %s: flow was handled, stack is empty. Completed tasks: %s", (uint8_t *)v33, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v50, -1, -1);
        MEMORY[0x1BA9E48C0](v33, -1, -1);
      }
      else
      {
      }
      swift_beginAccess();
      uint64_t v43 = MEMORY[0x1E4FBC860];
      if (*(void *)v30)
      {
        uint64_t v44 = *(void *)(*(void *)(*(void *)v30 + 16) + 152);
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v44 = MEMORY[0x1E4FBC860];
      }
      uint64_t v45 = *(void **)(v0 + 360);
      swift_release();
      *uint64_t v45 = v43;
      v45[1] = v44;
      swift_storeEnumTagMultiPayload();
    }
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v46 = *(uint64_t (**)(void))(v0 + 8);
    return v46();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 376);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](Conversation.execute(from:), v1, 0);
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  uint64_t v1 = *(_DWORD *)(v0 + 1120);
  uint64_t v2 = *(void *)(v0 + 632);
  os_log_type_t v3 = *(void *)(v0 + 616);
  BOOL v4 = *(void *)(v0 + 608);
  PrepareResponse.type.getter();
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v2, v4);
  if (v5 == v1)
  {
    uint64_t v6 = (uint64_t *)(*(void *)(v0 + 376) + *(void *)(v0 + 728));
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    *(void *)(v0 + 816) = v8;
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v9 = PrepareResponse.next.getter();
    *(void *)(v0 + 824) = v9;
    uint64_t v10 = PrepareResponse.onChildFlowCompletion.getter();
    *(void *)(v0 + 832) = v10;
    unint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 840) = v11;
    *unint64_t v11 = v0;
    v11[1] = Conversation.execute(from:);
    uint64_t v12 = *(void *)(v0 + 792);
    return Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:)(v7, v8, v12, v9, 0, 0, v10);
  }
  else if (v5 == *(_DWORD *)(v0 + 1124))
  {
    uint64_t v14 = *(void *)(v0 + 800);
    return MEMORY[0x1F4188298](Conversation.execute(from:), v14, 0);
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 624);
    uint64_t v16 = *(void *)(v0 + 616);
    uint64_t v17 = *(void *)(v0 + 608);
    _StringGuts.grow(_:)(33);
    *(void *)(v0 + 280) = 0;
    *(void *)(v0 + 288) = 0xE000000000000000;
    v18._object = (void *)0x80000001BA064570;
    v18._countAndFlagsBits = 0xD00000000000001FLL;
    String.append(_:)(v18);
    PrepareResponse.type.getter();
    _print_unlocked<A, B>(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    uint64_t v19 = *(void *)(v0 + 280);
    uint64_t v20 = *(void *)(v0 + 288);
    return specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(v19, v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Runtime/Conversation.swift", 95, 2, 494);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 376);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return MEMORY[0x1F4188298](Conversation.execute(from:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ObjectType;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t (*v57)(void);
  uint64_t (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  uint64_t v62 = v0;
  uint64_t v1 = *(void *)(v0 + 664);
  uint64_t v2 = *(void *)(v0 + 656);
  os_log_type_t v3 = *(void *)(v0 + 648);
  BOOL v4 = *(void *)(v0 + 640);
  uint64_t v5 = PrepareResponse.needsExecute.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = *(void *)(v0 + 656);
  uint64_t v7 = *(void *)(v0 + 640);
  uint64_t v8 = *(void *)(v0 + 648) + 8;
  if (v5)
  {
    uint64_t v9 = PrepareResponse.next.getter();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))v8;
    *(void *)(v0 + 848) = *(void *)v8;
    *(void *)(v0 + 856) = v8 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v10(v6, v7);
    swift_release();
    if (!v9)
    {
      unint64_t v11 = *(void *)(v0 + 568);
      **(void **)(v0 + 576) = 300;
      (*(void (**)(void))(v11 + 104))();
      uint64_t v12 = (void *)swift_task_alloc();
      *(void *)(v0 + 864) = v12;
      *uint64_t v12 = v0;
      v12[1] = Conversation.execute(from:);
      uint64_t v13 = *(void *)(v0 + 600);
      uint64_t v14 = *(void *)(v0 + 576);
      return FlowAgent.execute(timeout:)(v13, v14);
    }
  }
  else
  {
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))v8;
    (*(void (**)(void, void))v8)(*(void *)(v0 + 656), *(void *)(v0 + 640));
  }
  v10(*(void *)(v0 + 664), *(void *)(v0 + 640));
  swift_release();
  swift_release();
  uint64_t v16 = *(void *)(v0 + 696);
  uint64_t v17 = *(void *)(v0 + 688);
  outlined init with copy of Conversation.State(*(void *)(v0 + 376) + *(void *)(v0 + 776), v16, type metadata accessor for Conversation.State);
  outlined init with copy of Conversation.State(v16, v17, type metadata accessor for Conversation.State);
  uint64_t v18 = swift_getEnumCaseMultiPayload() & 0xFFFFFFFE;
  outlined destroy of SiriRequest(v17, type metadata accessor for Conversation.State);
  outlined destroy of SiriRequest(v16, type metadata accessor for Conversation.State);
  if (v18 == 2
    && (static Task<>.isCancelled.getter() & 1) == 0
    && (*(unsigned char *)(*(void *)(v0 + 376) + *(void *)(v0 + 784)) & 1) == 0)
  {
    uint64_t v19 = (*(uint64_t (**)(void))(**(void **)(v0 + 744) + 216))();
    if (v19)
    {
      *(void *)(v0 + 792) = v19;
      *(void *)(v0 + 800) = *(void *)(v19 + 16);
      swift_retain();
      uint64_t v20 = (void *)swift_task_alloc();
      *(void *)(v0 + 808) = v20;
      *uint64_t v20 = v0;
      v20[1] = Conversation.execute(from:);
      uint64_t v21 = *(void *)(v0 + 664);
      return FlowAgent.prepare()(v21);
    }
    uint64_t v22 = *(void *)(v0 + 680);
    uint64_t v23 = *(void *)(v0 + 376) + *(void *)(v0 + 776);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    outlined assign with take of Conversation.State(v22, v23);
    swift_endAccess();
  }
  *(void *)(v0 + 1096) = 0;
  uint64_t v24 = *(void *)(v0 + 704);
  uint64_t v25 = *(void *)(v0 + 376);
  uint64_t v26 = v25 + *(void *)(v0 + 736);
  static ConversationSELFHelper.shared.getter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v26, v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextEnded(rcId:hypothesisId:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v27 = v25 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  swift_beginAccess();
  uint64_t v28 = MEMORY[0x1BA9E49F0](v27);
  *(void *)(v0 + 1104) = v28;
  if (v28)
  {
    uint64_t v29 = *(void *)(v27 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v58 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v29 + 16) + **(int **)(v29 + 16));
    uint64_t v31 = (void *)swift_task_alloc();
    *(void *)(v0 + 1112) = v31;
    *uint64_t v31 = v0;
    v31[1] = Conversation.execute(from:);
    return v58(ObjectType, v29);
  }
  else
  {
    Swift::String v32 = (*(uint64_t (**)(void))(**(void **)(v0 + 744) + 216))();
    if (v32)
    {
      uint64_t v33 = v32;
      swift_retain_n();
      uint64_t v34 = Logger.logObject.getter();
      uint64_t v35 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = swift_slowAlloc();
        unint64_t v60 = swift_slowAlloc();
        uint64_t v61 = v60;
        *(_DWORD *)uint64_t v36 = 136315394;
        *(void *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v36 + 12) = 2080;
        uint64_t v37 = type metadata accessor for Siri_Nlu_External_Task();
        int v38 = swift_bridgeObjectRetain();
        uint64_t v39 = MEMORY[0x1BA9E3080](v38, v37);
        unint64_t v41 = v40;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v34, v35, "[Conversation] %s: flow was handled, stack is non-empty. Active tasks: %s", (uint8_t *)v36, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v60, -1, -1);
        MEMORY[0x1BA9E48C0](v36, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      uint64_t v47 = *(void **)(v0 + 360);
      uint64_t v48 = *(void *)(*(void *)(v33 + 16) + 152);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      uint64_t v49 = MEMORY[0x1E4FBC860];
      *uint64_t v47 = v48;
      v47[1] = v49;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v42 = v0 + 344;
      uint64_t v43 = Logger.logObject.getter();
      uint64_t v44 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = swift_slowAlloc();
        unint64_t v59 = swift_slowAlloc();
        uint64_t v61 = v59;
        *(_DWORD *)uint64_t v45 = 136315394;
        *(void *)(v0 + 336) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v45 + 12) = 2080;
        swift_beginAccess();
        if (*(void *)v42)
        {
          uint64_t v46 = *(void *)(*(void *)(*(void *)v42 + 16) + 152);
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v46 = MEMORY[0x1E4FBC860];
        }
        uint64_t v50 = type metadata accessor for Siri_Nlu_External_Task();
        uint64_t v51 = MEMORY[0x1BA9E3080](v46, v50);
        int64_t v53 = v52;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 328) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v53, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v43, v44, "[Conversation] %s: flow was handled, stack is empty. Completed tasks: %s", (uint8_t *)v45, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v59, -1, -1);
        MEMORY[0x1BA9E48C0](v45, -1, -1);
      }
      else
      {
      }
      swift_beginAccess();
      os_log_type_t v54 = MEMORY[0x1E4FBC860];
      if (*(void *)v42)
      {
        uint64_t v55 = *(void *)(*(void *)(*(void *)v42 + 16) + 152);
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v55 = MEMORY[0x1E4FBC860];
      }
      uint64_t v56 = *(void **)(v0 + 360);
      swift_release();
      *uint64_t v56 = v54;
      v56[1] = v55;
      swift_storeEnumTagMultiPayload();
    }
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v57 = *(uint64_t (**)(void))(v0 + 8);
    return v57();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 872) = v0;
  swift_task_dealloc();
  os_log_type_t v3 = v2[72];
  BOOL v4 = v2[71];
  uint64_t v5 = v2[70];
  uint64_t v6 = v2[47];
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v7 = Conversation.execute(from:);
  }
  else {
    uint64_t v7 = Conversation.execute(from:);
  }
  return MEMORY[0x1F4188298](v7, v6, 0);
}

{
  void *v0;
  uint64_t v1;

  uint64_t v1 = v0[47];
  v0[110] = *(void *)(v0[100] + 112);
  return MEMORY[0x1F4188298](Conversation.execute(from:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 800);
  *(void *)(v0 + 888) = dispatch thunk of AnyFlow.siriEnvironment.getter();
  return MEMORY[0x1F4188298](Conversation.execute(from:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = v0[99];
  FlowAgent.complete()();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[112] = v2;
  *uint64_t v2 = v0;
  v2[1] = Conversation.execute(from:);
  os_log_type_t v3 = v0[47];
  v2[14] = v1;
  v2[15] = v3;
  return MEMORY[0x1F4188298](Conversation.removeNode(node:), v3, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  uint64_t v1 = v0[113];
  uint64_t v2 = v0[111];
  os_log_type_t v3 = v0[100];
  BOOL v4 = (uint64_t *)(v0[47] + v0[91]);
  swift_release();
  v0[43] = v1;
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  v0[114] = v6;
  swift_bridgeObjectRetain();
  uint64_t v7 = PrepareResponse.next.getter();
  v0[115] = v7;
  uint64_t v8 = *(void *)(v3 + 152);
  v0[116] = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v9 = PrepareResponse.onChildFlowCompletion.getter();
  v0[117] = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[118] = v10;
  *uint64_t v10 = v0;
  v10[1] = Conversation.execute(from:);
  return Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:)(v5, v6, 0, v7, v8, v2, v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 376);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return MEMORY[0x1F4188298](Conversation.execute(from:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t (*v46)(void);
  uint64_t (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  uint64_t v51 = v0;
  uint64_t v1 = *(void *)(v0 + 664);
  uint64_t v2 = *(void *)(v0 + 648);
  os_log_type_t v3 = *(void *)(v0 + 640);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  BOOL v4 = *(void *)(v0 + 696);
  uint64_t v5 = *(void *)(v0 + 688);
  outlined init with copy of Conversation.State(*(void *)(v0 + 376) + *(void *)(v0 + 776), v4, type metadata accessor for Conversation.State);
  outlined init with copy of Conversation.State(v4, v5, type metadata accessor for Conversation.State);
  LODWORD(v3) = swift_getEnumCaseMultiPayload() & 0xFFFFFFFE;
  outlined destroy of SiriRequest(v5, type metadata accessor for Conversation.State);
  outlined destroy of SiriRequest(v4, type metadata accessor for Conversation.State);
  if (v3 == 2
    && (static Task<>.isCancelled.getter() & 1) == 0
    && (*(unsigned char *)(*(void *)(v0 + 376) + *(void *)(v0 + 784)) & 1) == 0)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)(v0 + 744) + 216))();
    if (v6)
    {
      *(void *)(v0 + 792) = v6;
      *(void *)(v0 + 800) = *(void *)(v6 + 16);
      swift_retain();
      uint64_t v7 = (void *)swift_task_alloc();
      *(void *)(v0 + 808) = v7;
      *uint64_t v7 = v0;
      v7[1] = Conversation.execute(from:);
      uint64_t v8 = *(void *)(v0 + 664);
      return FlowAgent.prepare()(v8);
    }
    uint64_t v10 = *(void *)(v0 + 680);
    unint64_t v11 = *(void *)(v0 + 376) + *(void *)(v0 + 776);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    outlined assign with take of Conversation.State(v10, v11);
    swift_endAccess();
  }
  *(void *)(v0 + 1096) = 0;
  uint64_t v12 = *(void *)(v0 + 704);
  uint64_t v13 = *(void *)(v0 + 376);
  uint64_t v14 = v13 + *(void *)(v0 + 736);
  static ConversationSELFHelper.shared.getter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v14, v12, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextEnded(rcId:hypothesisId:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v12, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v15 = v13 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  swift_beginAccess();
  uint64_t v16 = MEMORY[0x1BA9E49F0](v15);
  *(void *)(v0 + 1104) = v16;
  if (v16)
  {
    uint64_t v17 = *(void *)(v15 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v47 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v17 + 16) + **(int **)(v17 + 16));
    uint64_t v19 = (void *)swift_task_alloc();
    *(void *)(v0 + 1112) = v19;
    *uint64_t v19 = v0;
    v19[1] = Conversation.execute(from:);
    return v47(ObjectType, v17);
  }
  else
  {
    uint64_t v20 = (*(uint64_t (**)(void))(**(void **)(v0 + 744) + 216))();
    if (v20)
    {
      uint64_t v21 = v20;
      swift_retain_n();
      uint64_t v22 = Logger.logObject.getter();
      uint64_t v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        uint64_t v50 = v49;
        *(_DWORD *)uint64_t v24 = 136315394;
        *(void *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v24 + 12) = 2080;
        uint64_t v25 = type metadata accessor for Siri_Nlu_External_Task();
        uint64_t v26 = swift_bridgeObjectRetain();
        uint64_t v27 = MEMORY[0x1BA9E3080](v26, v25);
        uint64_t v29 = v28;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v22, v23, "[Conversation] %s: flow was handled, stack is non-empty. Active tasks: %s", (uint8_t *)v24, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v49, -1, -1);
        MEMORY[0x1BA9E48C0](v24, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      uint64_t v36 = *(void **)(v0 + 360);
      uint64_t v37 = *(void *)(*(void *)(v21 + 16) + 152);
      swift_bridgeObjectRetain();
      swift_release();
      swift_release();
      int v38 = MEMORY[0x1E4FBC860];
      *uint64_t v36 = v37;
      v36[1] = v38;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v30 = v0 + 344;
      uint64_t v31 = Logger.logObject.getter();
      Swift::String v32 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = swift_slowAlloc();
        uint64_t v34 = swift_slowAlloc();
        uint64_t v50 = v34;
        *(_DWORD *)uint64_t v33 = 136315394;
        *(void *)(v0 + 336) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v33 + 12) = 2080;
        swift_beginAccess();
        uint64_t v48 = v34;
        if (*(void *)v30)
        {
          uint64_t v35 = *(void *)(*(void *)(*(void *)v30 + 16) + 152);
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v35 = MEMORY[0x1E4FBC860];
        }
        uint64_t v39 = type metadata accessor for Siri_Nlu_External_Task();
        uint64_t v40 = MEMORY[0x1BA9E3080](v35, v39);
        uint64_t v42 = v41;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 328) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v31, v32, "[Conversation] %s: flow was handled, stack is empty. Completed tasks: %s", (uint8_t *)v33, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v48, -1, -1);
        MEMORY[0x1BA9E48C0](v33, -1, -1);
      }
      else
      {
      }
      swift_beginAccess();
      uint64_t v43 = MEMORY[0x1E4FBC860];
      if (*(void *)v30)
      {
        uint64_t v44 = *(void *)(*(void *)(*(void *)v30 + 16) + 152);
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v44 = MEMORY[0x1E4FBC860];
      }
      uint64_t v45 = *(void **)(v0 + 360);
      swift_release();
      *uint64_t v45 = v43;
      v45[1] = v44;
      swift_storeEnumTagMultiPayload();
    }
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v46 = *(uint64_t (**)(void))(v0 + 8);
    return v46();
  }
}

{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::String v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(void);
  void (*v72)(void, void);
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, void, uint64_t);
  uint64_t v86;
  uint64_t v87;

  uint64_t v1 = *(_DWORD *)(v0 + 1132);
  uint64_t v2 = *(void *)(v0 + 552);
  os_log_type_t v3 = *(void *)(v0 + 536);
  BOOL v4 = *(void *)(v0 + 528);
  ExecuteResponse.type.getter();
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 88))(v2, v4);
  if (v5 == v1)
  {
    uint64_t v6 = (uint64_t *)(*(void *)(v0 + 376) + *(void *)(v0 + 728));
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    *(void *)(v0 + 952) = v8;
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v9 = ExecuteResponse.next.getter();
    *(void *)(v0 + 960) = v9;
    uint64_t v10 = ExecuteResponse.onChildFlowCompletion.getter();
    *(void *)(v0 + 968) = v10;
    unint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 976) = v11;
    *unint64_t v11 = v0;
    v11[1] = Conversation.execute(from:);
    uint64_t v12 = *(void *)(v0 + 792);
    uint64_t v13 = v7;
    uint64_t v14 = v8;
    uint64_t v15 = v9;
    uint64_t v16 = 0;
    uint64_t v17 = v10;
LABEL_3:
    return Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:)(v13, v14, v12, v15, v16, 0, v17);
  }
  if (v5 == *(_DWORD *)(v0 + 1136))
  {
    uint64_t v19 = *(void *)(v0 + 800);
    return MEMORY[0x1F4188298](Conversation.execute(from:), v19, 0);
  }
  if (v5 == *(_DWORD *)(v0 + 1140))
  {
    uint64_t v20 = *(void *)(v0 + 800);
    uint64_t v21 = (uint64_t *)(*(void *)(v0 + 376) + *(void *)(v0 + 728));
    (*(void (**)(void))(**(void **)(v0 + 744) + 232))(*(void *)(v0 + 792));
    swift_release();
    flushProcessWideSiriEnvironmentCache()();
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    *(void *)(v0 + 984) = v23;
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v24 = ExecuteResponse.next.getter();
    *(void *)(v0 + 992) = v24;
    uint64_t v25 = *(void *)(v20 + 152);
    *(void *)(v0 + 1000) = v25;
    swift_bridgeObjectRetain();
    uint64_t v26 = ExecuteResponse.onChildFlowCompletion.getter();
    *(void *)(v0 + 1008) = v26;
    uint64_t v27 = (void *)swift_task_alloc();
    *(void *)(v0 + 1016) = v27;
    *uint64_t v27 = v0;
    v27[1] = Conversation.execute(from:);
    uint64_t v12 = *(void *)(v0 + 792);
    uint64_t v13 = v22;
    uint64_t v14 = v23;
    uint64_t v15 = v24;
    uint64_t v16 = v25;
    uint64_t v17 = v26;
    goto LABEL_3;
  }
  if (v5 != *MEMORY[0x1E4FA1D78])
  {
    uint64_t v34 = *(void *)(v0 + 704);
    uint64_t v35 = *(void *)(v0 + 544);
    uint64_t v36 = *(void *)(v0 + 536);
    uint64_t v86 = *(void *)(v0 + 528);
    uint64_t v37 = *(void *)(v0 + 376) + *(void *)(v0 + 736);
    static ConversationSELFHelper.shared.getter();
    outlined init with copy of ReferenceResolutionClientProtocol?(v37, v34, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    swift_bridgeObjectRetain();
    dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextFailed(rcId:hypothesisId:reason:)();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v34, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    _StringGuts.grow(_:)(35);
    *(void *)(v0 + 296) = 0;
    *(void *)(v0 + 304) = 0xE000000000000000;
    v38._object = (void *)0x80000001BA0645F0;
    v38._countAndFlagsBits = 0xD000000000000021;
    String.append(_:)(v38);
    ExecuteResponse.type.getter();
    _print_unlocked<A, B>(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v86);
    uint64_t v31 = *(void *)(v0 + 296);
    Swift::String v32 = *(void *)(v0 + 304);
    uint64_t v33 = 558;
    goto LABEL_16;
  }
  uint64_t v28 = *(void *)(v0 + 448);
  uint64_t v29 = *(void *)(v0 + 456);
  uint64_t v30 = *(void *)(v0 + 432);
  ExecuteResponse.unhandledReason.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v30, 1, v28) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 432), &demangling cache variable for type metadata for FlowUnhandledReason?);
    uint64_t v31 = 0xD000000000000080;
    Swift::String v32 = 0x80000001BA064620;
    uint64_t v33 = 538;
LABEL_16:
    return specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(v31, v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Runtime/Conversation.swift", 95, 2, v33);
  }
  uint64_t v39 = *(void *)(v0 + 704);
  uint64_t v40 = *(void *)(v0 + 464);
  unint64_t v41 = *(void *)(v0 + 472);
  uint64_t v42 = *(void *)(v0 + 448);
  uint64_t v43 = *(void *)(v0 + 456);
  uint64_t v44 = *(void *)(v0 + 376) + *(void *)(v0 + 736);
  uint64_t v85 = *(void (**)(uint64_t, void, uint64_t))(v43 + 32);
  v85(v41, *(void *)(v0 + 432), v42);
  static ConversationSELFHelper.shared.getter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v44, v39, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextFailed(rcId:hypothesisId:reason:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v39, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v40, v41, v42);
  uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 88))(v40, v42);
  uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
  if (v45 == *MEMORY[0x1E4FA18B0])
  {
    uint64_t v80 = *(void *)(v0 + 640);
    uint64_t v81 = *(void *)(v0 + 664);
    uint64_t v75 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
    uint64_t v76 = *(void *)(v0 + 592);
    int v77 = *(void *)(v0 + 584);
    uint64_t v78 = *(void *)(v0 + 600);
    uint64_t v79 = *(void *)(v0 + 408);
    uint64_t v47 = *(void *)(v0 + 376);
    uint64_t v82 = *(void *)(v0 + 400);
    uint64_t v83 = *(void *)(v0 + 384);
    uint64_t v48 = (uint64_t *)(v47 + *(void *)(v0 + 728));
    unint64_t v72 = *(void (**)(void, void))(*(void *)(v0 + 456) + 8);
    v72(*(void *)(v0 + 464), *(void *)(v0 + 448));
    SiriEnvironment.currentRequest.getter();
    uint64_t v49 = CurrentRequest.executionRequestId.getter();
    uint64_t v51 = v50;
    swift_release();
    if (v51) {
      uint64_t v52 = v49;
    }
    else {
      uint64_t v52 = 0;
    }
    uint64_t v74 = v52;
    if (v51) {
      int64_t v53 = v51;
    }
    else {
      int64_t v53 = 0xE000000000000000;
    }
    SiriEnvironment.currentRequest.getter();
    unint64_t v73 = CurrentRequest.rootRequestId.getter();
    uint64_t v55 = v54;
    swift_release();
    uint64_t v57 = *(void *)(v47 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_serverFallbackDisablingUtils + 24);
    uint64_t v56 = *(void *)(v47 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_serverFallbackDisablingUtils + 32);
    __swift_project_boxed_opaque_existential_1((void *)(v47 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_serverFallbackDisablingUtils), v57);
    uint64_t v58 = *v48;
    unint64_t v59 = v48[1];
    unint64_t v60 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 40);
    swift_bridgeObjectRetain();
    v60(v74, v53, v73, v55, v58, v59, v57, v56);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v78, v77);
    v75(v81, v80);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v83, 1, v82) != 1)
    {
      uint64_t v68 = *(void *)(v0 + 416);
      uint64_t v69 = *(void *)(v0 + 384);
      uint64_t v70 = *(void *)(v0 + 360);
      v72(*(void *)(v0 + 472), *(void *)(v0 + 448));
      outlined init with take of Conversation.State(v69, v68, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
      outlined init with take of Conversation.State(v68, v70, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
      goto LABEL_31;
    }
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 384), &demangling cache variable for type metadata for ConversationCommitResult?);
  }
  else
  {
    uint64_t v61 = *(void *)(v0 + 664);
    uint64_t v62 = *(void *)(v0 + 640);
    os_log_type_t v63 = *(void *)(v0 + 600);
    uint64_t v64 = *(void *)(v0 + 592);
    uint64_t v65 = *(void *)(v0 + 584);
    uint64_t v66 = *(void *)(v0 + 456);
    uint64_t v84 = *(void *)(v0 + 464);
    uint64_t v67 = *(void *)(v0 + 448);
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v63, v65);
    v46(v61, v62);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v84, v67);
  }
  v85(*(void *)(v0 + 360), *(void *)(v0 + 472), *(void *)(v0 + 448));
  swift_storeEnumTagMultiPayload();
LABEL_31:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v71 = *(uint64_t (**)(void))(v0 + 8);
  return v71();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 376);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return MEMORY[0x1F4188298](Conversation.execute(from:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ObjectType;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  uint64_t v68 = v0;
  uint64_t v1 = ExecuteResponse.retriggerNL.getter();
  uint64_t v5 = *(void *)(v0 + 664);
  uint64_t v6 = *(void *)(v0 + 600);
  uint64_t v7 = *(void *)(v0 + 592);
  uint64_t v8 = *(void *)(v0 + 584);
  if (v2)
  {
    uint64_t v9 = v2;
    unint64_t v60 = v1;
    uint64_t v10 = *(uint64_t **)(v0 + 360);
    unint64_t v11 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
    uint64_t v12 = *(void *)(v0 + 640);
    uint64_t v61 = v3;
    uint64_t v62 = v4;
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v11(v5, v12);
    *uint64_t v10 = v60;
    v10[1] = v9;
    void v10[2] = v61;
    v10[3] = v62;
    goto LABEL_3;
  }
  uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
  uint64_t v15 = *(void *)(v0 + 640);
  uint64_t v16 = ExecuteResponse.requireInput.getter();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v65(v5, v15);
  uint64_t v17 = *(void *)(v0 + 776);
  if ((v16 & 1) == 0)
  {
    uint64_t v20 = *(void *)(v0 + 696);
    uint64_t v21 = *(void *)(v0 + 688);
    outlined init with copy of Conversation.State(*(void *)(v0 + 376) + v17, v20, type metadata accessor for Conversation.State);
    outlined init with copy of Conversation.State(v20, v21, type metadata accessor for Conversation.State);
    uint64_t v22 = swift_getEnumCaseMultiPayload() & 0xFFFFFFFE;
    outlined destroy of SiriRequest(v21, type metadata accessor for Conversation.State);
    outlined destroy of SiriRequest(v20, type metadata accessor for Conversation.State);
    if (v22 != 2
      || (static Task<>.isCancelled.getter() & 1) != 0
      || (*(unsigned char *)(*(void *)(v0 + 376) + *(void *)(v0 + 784)) & 1) != 0)
    {
      goto LABEL_12;
    }
    uint64_t v50 = (*(uint64_t (**)(void))(**(void **)(v0 + 744) + 216))();
    if (v50)
    {
      *(void *)(v0 + 792) = v50;
      *(void *)(v0 + 800) = *(void *)(v50 + 16);
      swift_retain();
      uint64_t v51 = (void *)swift_task_alloc();
      *(void *)(v0 + 808) = v51;
      *uint64_t v51 = v0;
      v51[1] = Conversation.execute(from:);
      uint64_t v52 = *(void *)(v0 + 664);
      return FlowAgent.prepare()(v52);
    }
    uint64_t v17 = *(void *)(v0 + 776);
  }
  uint64_t v18 = *(void *)(v0 + 680);
  uint64_t v19 = *(void *)(v0 + 376) + v17;
  swift_storeEnumTagMultiPayload();
  swift_beginAccess();
  outlined assign with take of Conversation.State(v18, v19);
  swift_endAccess();
LABEL_12:
  *(void *)(v0 + 1096) = 0;
  uint64_t v23 = *(void *)(v0 + 704);
  uint64_t v24 = *(void *)(v0 + 376);
  uint64_t v25 = v24 + *(void *)(v0 + 736);
  static ConversationSELFHelper.shared.getter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v25, v23, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextEnded(rcId:hypothesisId:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v23, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v26 = v24 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  swift_beginAccess();
  uint64_t v27 = MEMORY[0x1BA9E49F0](v26);
  *(void *)(v0 + 1104) = v27;
  if (!v27)
  {
    uint64_t v31 = (*(uint64_t (**)(void))(**(void **)(v0 + 744) + 216))();
    if (!v31)
    {
      unint64_t v41 = v0 + 344;
      uint64_t v42 = Logger.logObject.getter();
      uint64_t v43 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = swift_slowAlloc();
        uint64_t v45 = swift_slowAlloc();
        uint64_t v67 = v45;
        *(_DWORD *)uint64_t v44 = 136315394;
        *(void *)(v0 + 336) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v44 + 12) = 2080;
        swift_beginAccess();
        uint64_t v64 = v45;
        if (*(void *)v41)
        {
          uint64_t v46 = *(void *)(*(void *)(*(void *)v41 + 16) + 152);
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v46 = MEMORY[0x1E4FBC860];
        }
        int64_t v53 = type metadata accessor for Siri_Nlu_External_Task();
        os_log_type_t v54 = MEMORY[0x1BA9E3080](v46, v53);
        uint64_t v56 = v55;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 328) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v56, &v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v42, v43, "[Conversation] %s: flow was handled, stack is empty. Completed tasks: %s", (uint8_t *)v44, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v64, -1, -1);
        MEMORY[0x1BA9E48C0](v44, -1, -1);
      }
      else
      {
      }
      swift_beginAccess();
      uint64_t v57 = MEMORY[0x1E4FBC860];
      if (*(void *)v41)
      {
        uint64_t v58 = *(void *)(*(void *)(*(void *)v41 + 16) + 152);
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v58 = MEMORY[0x1E4FBC860];
      }
      unint64_t v59 = *(void **)(v0 + 360);
      swift_release();
      *unint64_t v59 = v57;
      v59[1] = v58;
      swift_storeEnumTagMultiPayload();
      goto LABEL_4;
    }
    Swift::String v32 = v31;
    swift_retain_n();
    uint64_t v33 = Logger.logObject.getter();
    uint64_t v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      uint64_t v67 = v66;
      *(_DWORD *)uint64_t v35 = 136315394;
      *(void *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v35 + 12) = 2080;
      uint64_t v36 = type metadata accessor for Siri_Nlu_External_Task();
      uint64_t v37 = swift_bridgeObjectRetain();
      int v38 = MEMORY[0x1BA9E3080](v37, v36);
      uint64_t v40 = v39;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v33, v34, "[Conversation] %s: flow was handled, stack is non-empty. Active tasks: %s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v66, -1, -1);
      MEMORY[0x1BA9E48C0](v35, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    uint64_t v47 = *(void **)(v0 + 360);
    uint64_t v48 = *(void *)(*(void *)(v32 + 16) + 152);
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    uint64_t v49 = MEMORY[0x1E4FBC860];
    *uint64_t v47 = v48;
    v47[1] = v49;
LABEL_3:
    swift_storeEnumTagMultiPayload();
LABEL_4:
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
  uint64_t v28 = *(void *)(v26 + 8);
  uint64_t ObjectType = swift_getObjectType();
  os_log_type_t v63 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v28 + 16) + **(int **)(v28 + 16));
  uint64_t v30 = (void *)swift_task_alloc();
  *(void *)(v0 + 1112) = v30;
  *uint64_t v30 = v0;
  v30[1] = Conversation.execute(from:);
  return v63(ObjectType, v28);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 376);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return MEMORY[0x1F4188298](Conversation.execute(from:), v1, 0);
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  void *v20;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t (*v51)(void);
  uint64_t (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  uint64_t v56 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
  uint64_t v2 = *(void *)(v0 + 664);
  os_log_type_t v3 = *(void *)(v0 + 640);
  BOOL v4 = *(void *)(v0 + 600);
  uint64_t v5 = *(void *)(v0 + 592);
  uint64_t v6 = *(void *)(v0 + 584);
  uint64_t v7 = ExecuteResponse.requireInput.getter();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v1(v2, v3);
  if (v7) {
    goto LABEL_2;
  }
  uint64_t v10 = *(void *)(v0 + 696);
  unint64_t v11 = *(void *)(v0 + 688);
  outlined init with copy of Conversation.State(*(void *)(v0 + 376) + *(void *)(v0 + 776), v10, type metadata accessor for Conversation.State);
  outlined init with copy of Conversation.State(v10, v11, type metadata accessor for Conversation.State);
  uint64_t v12 = swift_getEnumCaseMultiPayload() & 0xFFFFFFFE;
  outlined destroy of SiriRequest(v11, type metadata accessor for Conversation.State);
  outlined destroy of SiriRequest(v10, type metadata accessor for Conversation.State);
  if (v12 != 2
    || (static Task<>.isCancelled.getter() & 1) != 0
    || (*(unsigned char *)(*(void *)(v0 + 376) + *(void *)(v0 + 784)) & 1) != 0)
  {
LABEL_6:
    *(void *)(v0 + 1096) = 0;
    uint64_t v13 = *(void *)(v0 + 704);
    uint64_t v14 = *(void *)(v0 + 376);
    uint64_t v15 = v14 + *(void *)(v0 + 736);
    static ConversationSELFHelper.shared.getter();
    outlined init with copy of ReferenceResolutionClientProtocol?(v15, v13, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    swift_bridgeObjectRetain();
    dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextEnded(rcId:hypothesisId:)();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v13, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v16 = v14 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
    swift_beginAccess();
    uint64_t v17 = MEMORY[0x1BA9E49F0](v16);
    *(void *)(v0 + 1104) = v17;
    if (v17)
    {
      uint64_t v18 = *(void *)(v16 + 8);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v18 + 16) + **(int **)(v18 + 16));
      uint64_t v20 = (void *)swift_task_alloc();
      *(void *)(v0 + 1112) = v20;
      *uint64_t v20 = v0;
      v20[1] = Conversation.execute(from:);
      return v52(ObjectType, v18);
    }
    else
    {
      uint64_t v22 = (*(uint64_t (**)(void))(**(void **)(v0 + 744) + 216))();
      if (v22)
      {
        uint64_t v23 = v22;
        swift_retain_n();
        uint64_t v24 = Logger.logObject.getter();
        uint64_t v25 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v24, v25))
        {
          uint64_t v26 = swift_slowAlloc();
          os_log_type_t v54 = swift_slowAlloc();
          uint64_t v55 = v54;
          *(_DWORD *)uint64_t v26 = 136315394;
          *(void *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v55);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v26 + 12) = 2080;
          uint64_t v27 = type metadata accessor for Siri_Nlu_External_Task();
          uint64_t v28 = swift_bridgeObjectRetain();
          uint64_t v29 = MEMORY[0x1BA9E3080](v28, v27);
          uint64_t v31 = v30;
          swift_bridgeObjectRelease();
          *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v55);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v24, v25, "[Conversation] %s: flow was handled, stack is non-empty. Active tasks: %s", (uint8_t *)v26, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v54, -1, -1);
          MEMORY[0x1BA9E48C0](v26, -1, -1);
        }
        else
        {

          swift_release_n();
        }
        int v38 = *(void **)(v0 + 360);
        uint64_t v39 = *(void *)(*(void *)(v23 + 16) + 152);
        swift_bridgeObjectRetain();
        swift_release();
        swift_release();
        uint64_t v40 = MEMORY[0x1E4FBC860];
        *int v38 = v39;
        v38[1] = v40;
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        Swift::String v32 = v0 + 344;
        uint64_t v33 = Logger.logObject.getter();
        uint64_t v34 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v35 = swift_slowAlloc();
          uint64_t v36 = swift_slowAlloc();
          uint64_t v55 = v36;
          *(_DWORD *)uint64_t v35 = 136315394;
          *(void *)(v0 + 336) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v55);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v35 + 12) = 2080;
          swift_beginAccess();
          int64_t v53 = v36;
          if (*(void *)v32)
          {
            uint64_t v37 = *(void *)(*(void *)(*(void *)v32 + 16) + 152);
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v37 = MEMORY[0x1E4FBC860];
          }
          uint64_t v44 = type metadata accessor for Siri_Nlu_External_Task();
          uint64_t v45 = MEMORY[0x1BA9E3080](v37, v44);
          uint64_t v47 = v46;
          swift_bridgeObjectRelease();
          *(void *)(v0 + 328) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, &v55);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v33, v34, "[Conversation] %s: flow was handled, stack is empty. Completed tasks: %s", (uint8_t *)v35, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v53, -1, -1);
          MEMORY[0x1BA9E48C0](v35, -1, -1);
        }
        else
        {
        }
        swift_beginAccess();
        uint64_t v48 = MEMORY[0x1E4FBC860];
        if (*(void *)v32)
        {
          uint64_t v49 = *(void *)(*(void *)(*(void *)v32 + 16) + 152);
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v49 = MEMORY[0x1E4FBC860];
        }
        uint64_t v50 = *(void **)(v0 + 360);
        swift_release();
        *uint64_t v50 = v48;
        v50[1] = v49;
        swift_storeEnumTagMultiPayload();
      }
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v51 = *(uint64_t (**)(void))(v0 + 8);
      return v51();
    }
  }
  unint64_t v41 = (*(uint64_t (**)(void))(**(void **)(v0 + 744) + 216))();
  if (!v41)
  {
LABEL_2:
    uint64_t v8 = *(void *)(v0 + 680);
    uint64_t v9 = *(void *)(v0 + 376) + *(void *)(v0 + 776);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    outlined assign with take of Conversation.State(v8, v9);
    swift_endAccess();
    goto LABEL_6;
  }
  *(void *)(v0 + 792) = v41;
  *(void *)(v0 + 800) = *(void *)(v41 + 16);
  swift_retain();
  uint64_t v42 = (void *)swift_task_alloc();
  *(void *)(v0 + 808) = v42;
  *uint64_t v42 = v0;
  v42[1] = Conversation.execute(from:);
  uint64_t v43 = *(void *)(v0 + 664);
  return FlowAgent.prepare()(v43);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = v0[100];
  uint64_t v2 = v0[47];
  FlowAgent.complete()();
  v0[128] = *(void *)(v1 + 112);
  return MEMORY[0x1F4188298](Conversation.execute(from:), v2, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = v0[99];
  v0[129] = dispatch thunk of AnyFlow.siriEnvironment.getter();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[130] = v2;
  *uint64_t v2 = v0;
  v2[1] = Conversation.execute(from:);
  os_log_type_t v3 = v0[47];
  v2[14] = v1;
  v2[15] = v3;
  return MEMORY[0x1F4188298](Conversation.removeNode(node:), v3, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, void, uint64_t);
  int v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(void);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(void, void);
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(void, void, void);
  uint64_t v75;

  uint64_t v1 = v0[131];
  uint64_t v2 = v0[63];
  os_log_type_t v3 = v0[64];
  BOOL v4 = v0[62];
  swift_release();
  v0[43] = v1;
  ExecuteResponse.nextPluginAction.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
  {
    uint64_t v5 = v0[56];
    uint64_t v6 = v0[57];
    uint64_t v7 = v0[55];
    outlined destroy of ReferenceResolutionClientProtocol?(v0[62], &demangling cache variable for type metadata for PluginAction?);
    ExecuteResponse.unhandledReason.getter();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5) == 1)
    {
      uint64_t v8 = v0[129];
      uint64_t v9 = v0[100];
      uint64_t v10 = (uint64_t *)(v0[47] + v0[91]);
      outlined destroy of ReferenceResolutionClientProtocol?(v0[55], &demangling cache variable for type metadata for FlowUnhandledReason?);
      unint64_t v11 = *v10;
      uint64_t v12 = v10[1];
      v0[132] = v12;
      swift_bridgeObjectRetain();
      uint64_t v13 = ExecuteResponse.next.getter();
      v0[133] = v13;
      uint64_t v14 = *(void *)(v9 + 152);
      v0[134] = v14;
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v15 = ExecuteResponse.onChildFlowCompletion.getter();
      v0[135] = v15;
      uint64_t v16 = (void *)swift_task_alloc();
      v0[136] = v16;
      *uint64_t v16 = v0;
      v16[1] = Conversation.execute(from:);
      return Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:)(v11, v12, 0, v13, v14, v8, v15);
    }
    uint64_t v26 = v0[60];
    uint64_t v27 = v0[61];
    uint64_t v28 = v0[56];
    uint64_t v29 = v0[57];
    uint64_t v30 = *(void (**)(uint64_t, void, uint64_t))(v29 + 32);
    v30(v27, v0[55], v28);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v26, v27, v28);
    uint64_t v31 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 88))(v26, v28);
    Swift::String v32 = (void (*)(uint64_t, uint64_t))v0[106];
    uint64_t v74 = v30;
    if (v31 == *MEMORY[0x1E4FA18B0])
    {
      uint64_t v67 = v0[83];
      uint64_t v58 = v0[74];
      unint64_t v59 = v0[73];
      unint64_t v60 = v0[75];
      uint64_t v62 = v0[51];
      uint64_t v64 = v0[80];
      uint64_t v70 = v0[50];
      unint64_t v72 = v0[49];
      uint64_t v33 = v0[47];
      uint64_t v34 = (uint64_t *)(v33 + v0[91]);
      uint64_t v57 = (void (*)(uint64_t, uint64_t))v0[106];
      os_log_type_t v54 = *(void (**)(void, void))(v0[57] + 8);
      v54(v0[60], v0[56]);
      SiriEnvironment.currentRequest.getter();
      uint64_t v35 = CurrentRequest.executionRequestId.getter();
      uint64_t v37 = v36;
      swift_release();
      if (v37) {
        int v38 = v35;
      }
      else {
        int v38 = 0;
      }
      uint64_t v56 = v38;
      if (!v37) {
        uint64_t v37 = 0xE000000000000000;
      }
      SiriEnvironment.currentRequest.getter();
      uint64_t v55 = CurrentRequest.rootRequestId.getter();
      uint64_t v40 = v39;
      swift_release();
      uint64_t v42 = *(void *)(v33 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_serverFallbackDisablingUtils + 24);
      unint64_t v41 = *(void *)(v33 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_serverFallbackDisablingUtils + 32);
      __swift_project_boxed_opaque_existential_1((void *)(v33 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_serverFallbackDisablingUtils), v42);
      uint64_t v43 = *v34;
      uint64_t v44 = v34[1];
      uint64_t v45 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 40);
      swift_bridgeObjectRetain();
      v45(v56, v37, v55, v40, v43, v44, v42, v41);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v60, v59);
      v57(v67, v64);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v72, 1, v70) != 1)
      {
        uint64_t v51 = v0[53];
        uint64_t v52 = v0[49];
        int64_t v53 = v0[45];
        v54(v0[61], v0[56]);
        outlined init with take of Conversation.State(v52, v51, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
        outlined init with take of Conversation.State(v51, v53, (uint64_t (*)(void))type metadata accessor for ConversationCommitResult);
        goto LABEL_18;
      }
      outlined destroy of ReferenceResolutionClientProtocol?(v0[49], &demangling cache variable for type metadata for ConversationCommitResult?);
    }
    else
    {
      uint64_t v68 = v0[83];
      uint64_t v65 = v0[80];
      uint64_t v46 = v0[75];
      uint64_t v47 = v0[74];
      uint64_t v48 = v0[73];
      uint64_t v49 = v0[57];
      uint64_t v71 = v0[56];
      unint64_t v73 = v0[60];
      swift_release();
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
      v32(v68, v65);
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v73, v71);
    }
    v74(v0[45], v0[61], v0[56]);
  }
  else
  {
    uint64_t v69 = (void (*)(uint64_t, uint64_t))v0[106];
    uint64_t v66 = v0[83];
    uint64_t v18 = v0[75];
    uint64_t v19 = v0[74];
    uint64_t v20 = v0[73];
    uint64_t v21 = v0[65];
    uint64_t v22 = v0[63];
    uint64_t v23 = v0[64];
    uint64_t v61 = v0[62];
    os_log_type_t v63 = v0[80];
    uint64_t v24 = v0[45];
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    v69(v66, v63);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 32);
    v25(v21, v61, v22);
    v25(v24, v21, v22);
  }
  swift_storeEnumTagMultiPayload();
LABEL_18:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v50 = (uint64_t (*)(void))v0[1];
  return v50();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 376);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return MEMORY[0x1F4188298](Conversation.execute(from:), v1, 0);
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t ObjectType;
  void *v20;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t (*v51)(void);
  uint64_t (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  uint64_t v56 = v0;
  swift_release();
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 848);
  uint64_t v2 = *(void *)(v0 + 664);
  os_log_type_t v3 = *(void *)(v0 + 640);
  BOOL v4 = *(void *)(v0 + 600);
  uint64_t v5 = *(void *)(v0 + 592);
  uint64_t v6 = *(void *)(v0 + 584);
  uint64_t v7 = ExecuteResponse.requireInput.getter();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v1(v2, v3);
  if (v7) {
    goto LABEL_2;
  }
  uint64_t v10 = *(void *)(v0 + 696);
  unint64_t v11 = *(void *)(v0 + 688);
  outlined init with copy of Conversation.State(*(void *)(v0 + 376) + *(void *)(v0 + 776), v10, type metadata accessor for Conversation.State);
  outlined init with copy of Conversation.State(v10, v11, type metadata accessor for Conversation.State);
  uint64_t v12 = swift_getEnumCaseMultiPayload() & 0xFFFFFFFE;
  outlined destroy of SiriRequest(v11, type metadata accessor for Conversation.State);
  outlined destroy of SiriRequest(v10, type metadata accessor for Conversation.State);
  if (v12 != 2
    || (static Task<>.isCancelled.getter() & 1) != 0
    || (*(unsigned char *)(*(void *)(v0 + 376) + *(void *)(v0 + 784)) & 1) != 0)
  {
LABEL_6:
    *(void *)(v0 + 1096) = 0;
    uint64_t v13 = *(void *)(v0 + 704);
    uint64_t v14 = *(void *)(v0 + 376);
    uint64_t v15 = v14 + *(void *)(v0 + 736);
    static ConversationSELFHelper.shared.getter();
    outlined init with copy of ReferenceResolutionClientProtocol?(v15, v13, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    swift_bridgeObjectRetain();
    dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextEnded(rcId:hypothesisId:)();
    swift_release();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v13, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v16 = v14 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
    swift_beginAccess();
    uint64_t v17 = MEMORY[0x1BA9E49F0](v16);
    *(void *)(v0 + 1104) = v17;
    if (v17)
    {
      uint64_t v18 = *(void *)(v16 + 8);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v18 + 16) + **(int **)(v18 + 16));
      uint64_t v20 = (void *)swift_task_alloc();
      *(void *)(v0 + 1112) = v20;
      *uint64_t v20 = v0;
      v20[1] = Conversation.execute(from:);
      return v52(ObjectType, v18);
    }
    else
    {
      uint64_t v22 = (*(uint64_t (**)(void))(**(void **)(v0 + 744) + 216))();
      if (v22)
      {
        uint64_t v23 = v22;
        swift_retain_n();
        uint64_t v24 = Logger.logObject.getter();
        uint64_t v25 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v24, v25))
        {
          uint64_t v26 = swift_slowAlloc();
          os_log_type_t v54 = swift_slowAlloc();
          uint64_t v55 = v54;
          *(_DWORD *)uint64_t v26 = 136315394;
          *(void *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v55);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v26 + 12) = 2080;
          uint64_t v27 = type metadata accessor for Siri_Nlu_External_Task();
          uint64_t v28 = swift_bridgeObjectRetain();
          uint64_t v29 = MEMORY[0x1BA9E3080](v28, v27);
          uint64_t v31 = v30;
          swift_bridgeObjectRelease();
          *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v55);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v24, v25, "[Conversation] %s: flow was handled, stack is non-empty. Active tasks: %s", (uint8_t *)v26, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v54, -1, -1);
          MEMORY[0x1BA9E48C0](v26, -1, -1);
        }
        else
        {

          swift_release_n();
        }
        int v38 = *(void **)(v0 + 360);
        uint64_t v39 = *(void *)(*(void *)(v23 + 16) + 152);
        swift_bridgeObjectRetain();
        swift_release();
        swift_release();
        uint64_t v40 = MEMORY[0x1E4FBC860];
        *int v38 = v39;
        v38[1] = v40;
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        Swift::String v32 = v0 + 344;
        uint64_t v33 = Logger.logObject.getter();
        uint64_t v34 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v33, v34))
        {
          uint64_t v35 = swift_slowAlloc();
          uint64_t v36 = swift_slowAlloc();
          uint64_t v55 = v36;
          *(_DWORD *)uint64_t v35 = 136315394;
          *(void *)(v0 + 336) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v55);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v35 + 12) = 2080;
          swift_beginAccess();
          int64_t v53 = v36;
          if (*(void *)v32)
          {
            uint64_t v37 = *(void *)(*(void *)(*(void *)v32 + 16) + 152);
            swift_bridgeObjectRetain();
          }
          else
          {
            uint64_t v37 = MEMORY[0x1E4FBC860];
          }
          uint64_t v44 = type metadata accessor for Siri_Nlu_External_Task();
          uint64_t v45 = MEMORY[0x1BA9E3080](v37, v44);
          uint64_t v47 = v46;
          swift_bridgeObjectRelease();
          *(void *)(v0 + 328) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v47, &v55);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v33, v34, "[Conversation] %s: flow was handled, stack is empty. Completed tasks: %s", (uint8_t *)v35, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v53, -1, -1);
          MEMORY[0x1BA9E48C0](v35, -1, -1);
        }
        else
        {
        }
        swift_beginAccess();
        uint64_t v48 = MEMORY[0x1E4FBC860];
        if (*(void *)v32)
        {
          uint64_t v49 = *(void *)(*(void *)(*(void *)v32 + 16) + 152);
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v49 = MEMORY[0x1E4FBC860];
        }
        uint64_t v50 = *(void **)(v0 + 360);
        swift_release();
        *uint64_t v50 = v48;
        v50[1] = v49;
        swift_storeEnumTagMultiPayload();
      }
      swift_release();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v51 = *(uint64_t (**)(void))(v0 + 8);
      return v51();
    }
  }
  unint64_t v41 = (*(uint64_t (**)(void))(**(void **)(v0 + 744) + 216))();
  if (!v41)
  {
LABEL_2:
    uint64_t v8 = *(void *)(v0 + 680);
    uint64_t v9 = *(void *)(v0 + 376) + *(void *)(v0 + 776);
    swift_storeEnumTagMultiPayload();
    swift_beginAccess();
    outlined assign with take of Conversation.State(v8, v9);
    swift_endAccess();
    goto LABEL_6;
  }
  *(void *)(v0 + 792) = v41;
  *(void *)(v0 + 800) = *(void *)(v41 + 16);
  swift_retain();
  uint64_t v42 = (void *)swift_task_alloc();
  *(void *)(v0 + 808) = v42;
  *uint64_t v42 = v0;
  v42[1] = Conversation.execute(from:);
  uint64_t v43 = *(void *)(v0 + 664);
  return FlowAgent.prepare()(v43);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 376);
  swift_task_dealloc();
  swift_unknownObjectRelease();
  return MEMORY[0x1F4188298](Conversation.execute(from:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t (*v26)(void);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v31 = v0;
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0 + 744) + 216))();
  if (v1)
  {
    uint64_t v2 = v1;
    swift_retain_n();
    os_log_type_t v3 = Logger.logObject.getter();
    BOOL v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      uint64_t v30 = v29;
      *(_DWORD *)uint64_t v5 = 136315394;
      *(void *)(v0 + 320) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v5 + 12) = 2080;
      uint64_t v6 = type metadata accessor for Siri_Nlu_External_Task();
      uint64_t v7 = swift_bridgeObjectRetain();
      uint64_t v8 = MEMORY[0x1BA9E3080](v7, v6);
      uint64_t v10 = v9;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 312) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v3, v4, "[Conversation] %s: flow was handled, stack is non-empty. Active tasks: %s", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v29, -1, -1);
      MEMORY[0x1BA9E48C0](v5, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    uint64_t v16 = *(void **)(v0 + 360);
    uint64_t v17 = *(void *)(*(void *)(v2 + 16) + 152);
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    uint64_t v18 = MEMORY[0x1E4FBC860];
    *uint64_t v16 = v17;
    v16[1] = v18;
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    unint64_t v11 = v0 + 344;
    uint64_t v12 = Logger.logObject.getter();
    uint64_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v30 = v28;
      *(_DWORD *)uint64_t v14 = 136315394;
      *(void *)(v0 + 336) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x2865747563657865, 0xEE00293A6D6F7266, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2080;
      swift_beginAccess();
      if (*(void *)v11)
      {
        uint64_t v15 = *(void *)(*(void *)(*(void *)v11 + 16) + 152);
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v15 = MEMORY[0x1E4FBC860];
      }
      uint64_t v19 = type metadata accessor for Siri_Nlu_External_Task();
      uint64_t v20 = MEMORY[0x1BA9E3080](v15, v19);
      uint64_t v22 = v21;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 328) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v12, v13, "[Conversation] %s: flow was handled, stack is empty. Completed tasks: %s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v28, -1, -1);
      MEMORY[0x1BA9E48C0](v14, -1, -1);
    }
    else
    {
    }
    swift_beginAccess();
    uint64_t v23 = MEMORY[0x1E4FBC860];
    if (*(void *)v11)
    {
      uint64_t v24 = *(void *)(*(void *)(*(void *)v11 + 16) + 152);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v24 = MEMORY[0x1E4FBC860];
    }
    uint64_t v25 = *(void **)(v0 + 360);
    swift_release();
    *uint64_t v25 = v23;
    v25[1] = v24;
    swift_storeEnumTagMultiPayload();
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
  return v26();
}

{
  void *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[106];
  uint64_t v2 = v0[83];
  os_log_type_t v3 = v0[80];
  swift_release();
  swift_release();
  v1(v2, v3);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t Conversation.execute(from:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 376);
  *(void *)(*(void *)v1 + 904) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](Conversation.execute(from:), v2, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v2 = *(void *)(*(void *)v1 + 376);
  *(void *)(*(void *)v1 + 1048) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](Conversation.execute(from:), v2, 0);
}

BOOL Conversation.State.shouldContinueExecuting.getter()
{
  uint64_t v1 = type metadata accessor for Conversation.State(0);
  MEMORY[0x1F4188790](v1);
  os_log_type_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Conversation.State(v0, (uint64_t)v3, type metadata accessor for Conversation.State);
  BOOL v4 = (swift_getEnumCaseMultiPayload() & 0xFFFFFFFE) == 2;
  outlined destroy of SiriRequest((uint64_t)v3, type metadata accessor for Conversation.State);
  return v4;
}

uint64_t Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[11] = a7;
  v8[12] = v7;
  v8[9] = a5;
  v8[10] = a6;
  v8[7] = a3;
  v8[8] = a4;
  v8[5] = a1;
  v8[6] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequest?);
  v8[13] = swift_task_alloc();
  return MEMORY[0x1F4188298](Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:), v7, 0);
}

uint64_t Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:)()
{
  Swift::String v32 = v0;
  uint64_t v1 = v0[8];
  if (!v1) {
    goto LABEL_30;
  }
  swift_retain();
  if ((static Task<>.isCancelled.getter() & 1) == 0)
  {
    uint64_t v2 = v0[10];
    if (v2)
    {
      uint64_t v3 = v0[11];
      if (!v3) {
        goto LABEL_13;
      }
      goto LABEL_8;
    }
    if (v0[7])
    {
      swift_retain();
      uint64_t v2 = dispatch thunk of AnyFlow.siriEnvironment.getter();
      swift_release();
      uint64_t v3 = v0[11];
      if (v3)
      {
LABEL_8:
        if (v2)
        {
          uint64_t v4 = swift_allocObject();
          *(void *)(v4 + 16) = v2;
          *(void *)(v4 + 24) = v3;
          type metadata accessor for AnyChildCompletion();
          swift_allocObject();
          swift_retain();
          swift_retain();
          swift_retain();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
          uint64_t v3 = AnyChildCompletion.init<A>(_:)();
          goto LABEL_14;
        }
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v3 = v0[11];
      if (v3)
      {
LABEL_11:
        swift_retain();
        swift_retain();
        uint64_t v2 = 0;
        goto LABEL_14;
      }
      uint64_t v2 = 0;
    }
LABEL_13:
    swift_retain();
    uint64_t v3 = 0;
LABEL_14:
    v0[14] = v2;
    v0[15] = v3;
    uint64_t v6 = v0[12];
    uint64_t v5 = v0[13];
    uint64_t v7 = type metadata accessor for SiriRequest(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v5, 1, 1, v7);
    Conversation.createEnvironment(parentEnvironment:siriRequest:flowTask:)(v2, v5, 0);
    outlined destroy of ReferenceResolutionClientProtocol?(v5, &demangling cache variable for type metadata for SiriRequest?);
    dispatch thunk of AnyFlow.siriEnvironment.setter();
    uint64_t v8 = *(void *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_jetsamHelper);
    OS_dispatch_semaphore.wait()();
    closure #1 in JetsamHelper.ensureJetsamTransaction()(v8);
    OS_dispatch_semaphore.signal()();
    uint64_t v9 = (void *)SiriEnvironment.currentProcess.getter();
    uint64_t v10 = (void *)dispatch thunk of CurrentProcess.idleTracker.getter();

    if (v10)
    {
      uint64_t v11 = dispatch thunk of IdleTracker.track(name:)();
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v12 = v0[7];
    *(void *)(v0[12] + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_idleTrackerActivity) = v11;
    swift_release();
    uint64_t v13 = v0[9];
    if (v12)
    {
      uint64_t v14 = *(void *)(*(void *)(v0[7] + 16) + 152);
      swift_bridgeObjectRetain();
      if (!v13)
      {
        swift_bridgeObjectRetain();
LABEL_22:
        uint64_t v15 = v14;
LABEL_23:
        v0[16] = v15;
        uint64_t v16 = v0[12];
        uint64_t v30 = v0[7];
        uint64_t v17 = *(void *)(v16 + 112);
        uint64_t v18 = *(void **)(v16 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_pluginInfo);
        type metadata accessor for FlowAgent();
        swift_allocObject();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v31 = FlowAgent.init(flow:tasks:pluginInfo:completion:)(v1, v15, (uint64_t)v18, v3);
        (*(void (**)(uint64_t *, uint64_t))(*(void *)v17 + 208))(&v31, v30);
        swift_release();
        swift_release();
        char v19 = specialized static Array<A>.== infix(_:_:)(v15, v14);
        swift_bridgeObjectRelease();
        if ((v19 & 1) == 0)
        {
          uint64_t v20 = v0[12] + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
          swift_beginAccess();
          uint64_t v21 = MEMORY[0x1BA9E49F0](v20);
          v0[17] = v21;
          if (v21)
          {
            uint64_t v22 = *(void *)(v20 + 8);
            uint64_t ObjectType = swift_getObjectType();
            uint64_t v29 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 + 24)
                                                                                      + **(int **)(v22 + 24));
            uint64_t v24 = (void *)swift_task_alloc();
            v0[18] = v24;
            *uint64_t v24 = v0;
            v24[1] = Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:);
            uint64_t v25 = v0[5];
            uint64_t v26 = v0[6];
            return v29(v15, v25, v26, ObjectType, v22);
          }
        }
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v14 = MEMORY[0x1E4FBC860];
      if (!v13) {
        goto LABEL_22;
      }
    }
    uint64_t v15 = v13;
    goto LABEL_23;
  }
LABEL_29:
  swift_release();
LABEL_30:
  swift_task_dealloc();
  uint64_t v28 = (uint64_t (*)(void))v0[1];
  return v28();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 96);
  swift_task_dealloc();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:), v1, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:)()
{
  return static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)();
}

uint64_t Conversation.removeNode(node:)(uint64_t a1)
{
  *(void *)(v2 + 112) = a1;
  *(void *)(v2 + 120) = v1;
  return MEMORY[0x1F4188298](Conversation.removeNode(node:), v1, 0);
}

uint64_t Conversation.removeNode(node:)()
{
  unint64_t v41 = v0;
  uint64_t v1 = *(void *)(v0[15] + 112);
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 216);
  uint64_t v3 = v2();
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 16);
    swift_retain();
    swift_release();
    uint64_t v5 = *(void *)(v4 + 152);
    swift_bridgeObjectRetain();
    swift_release();
  }
  else
  {
    uint64_t v5 = MEMORY[0x1E4FBC860];
  }
  v0[16] = (*(uint64_t (**)(void))(*(void *)v1 + 240))(v0[14]);
  flushProcessWideSiriEnvironmentCache()();
  uint64_t v6 = v2();
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 16);
    v0[17] = v7;
    swift_retain();
    swift_release();
    uint64_t v8 = swift_bridgeObjectRetain();
    char v9 = specialized static Array<A>.== infix(_:_:)(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v9 & 1) == 0)
    {
      uint64_t v10 = v0[15] + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
      swift_beginAccess();
      uint64_t v11 = MEMORY[0x1BA9E49F0](v10);
      v0[18] = v11;
      if (v11)
      {
        uint64_t v12 = v0[15];
        uint64_t v13 = *(void *)(v10 + 8);
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v15 = *(void *)(v7 + 152);
        v0[19] = v15;
        uint64_t v16 = (uint64_t *)(v12 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rcId);
        swift_beginAccess();
        uint64_t v17 = *v16;
        uint64_t v18 = v16[1];
        v0[20] = v18;
        uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 + 24)
                                                                                  + **(int **)(v13 + 24));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v19 = (void *)swift_task_alloc();
        v0[21] = v19;
        *char v19 = v0;
        v19[1] = Conversation.removeNode(node:);
        uint64_t v20 = v15;
        uint64_t v21 = v17;
        uint64_t v22 = v18;
        uint64_t v23 = ObjectType;
        uint64_t v24 = v13;
LABEL_14:
        return v39(v20, v21, v22, v23, v24);
      }
    }
  }
  else
  {
    uint64_t v28 = *(void *)(v5 + 16);
    swift_bridgeObjectRelease();
    if (v28)
    {
      uint64_t v29 = v0[15] + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
      swift_beginAccess();
      uint64_t v30 = MEMORY[0x1BA9E49F0](v29);
      v0[22] = v30;
      if (v30)
      {
        uint64_t v31 = v0[15];
        uint64_t v32 = *(void *)(v29 + 8);
        uint64_t v33 = swift_getObjectType();
        uint64_t v34 = (uint64_t *)(v31 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rcId);
        swift_beginAccess();
        uint64_t v35 = *v34;
        uint64_t v36 = v34[1];
        v0[23] = v36;
        uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 + 24)
                                                                                  + **(int **)(v32 + 24));
        swift_bridgeObjectRetain();
        uint64_t v37 = (void *)swift_task_alloc();
        v0[24] = v37;
        *uint64_t v37 = v0;
        v37[1] = Conversation.removeNode(node:);
        uint64_t v20 = MEMORY[0x1E4FBC860];
        uint64_t v21 = v35;
        uint64_t v22 = v36;
        uint64_t v23 = v33;
        uint64_t v24 = v32;
        goto LABEL_14;
      }
    }
    uint64_t v38 = *(void *)(v0[15] + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_jetsamHelper);
    OS_dispatch_semaphore.wait()();
    closure #1 in JetsamHelper.releaseJetsamTransaction()(v38, &v40);
    OS_dispatch_semaphore.signal()();
    *(void *)(v0[15] + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_idleTrackerActivity) = 0;
  }
  swift_release();
  uint64_t v25 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v26 = v0[16];
  return v25(v26);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 120);
  swift_task_dealloc();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](Conversation.removeNode(node:), v1, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 128);
  return v1(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 120);
  swift_task_dealloc();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](Conversation.removeNode(node:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  BOOL v5;
  void *v6;
  uint64_t v7;

  uint64_t v6 = v0;
  uint64_t v1 = *(void *)(v0[15] + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_jetsamHelper);
  OS_dispatch_semaphore.wait()();
  closure #1 in JetsamHelper.releaseJetsamTransaction()(v1, &v5);
  OS_dispatch_semaphore.signal()();
  *(void *)(v0[15] + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_idleTrackerActivity) = 0;
  swift_release();
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v3 = v0[16];
  return v2(v3);
}

uint64_t Conversation.createEnvironment(parentEnvironment:siriRequest:flowTask:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLRoutingDecisionMessage.GenAIFallbackSuppressReason?);
  MEMORY[0x1F4188790](v7);
  v103 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v107 = (uint64_t)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v105 = (uint64_t)&v96 - v13;
  MEMORY[0x1F4188790](v12);
  unsigned int v108 = (char *)&v96 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  v106 = (char *)&v96 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  v109 = (char *)&v96 - v18;
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v110 = *(void *)(v19 - 8);
  uint64_t v111 = v19;
  MEMORY[0x1F4188790](v19);
  uint64_t v112 = (char *)&v96 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowTaskMetadata?);
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v104 = (char *)&v96 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequest?);
  MEMORY[0x1F4188790](v23 - 8);
  uint64_t v25 = (char *)&v96 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for SiriRequest(0);
  uint64_t v26 = *(void *)(v116 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v116);
  uint64_t v29 = (char *)&v96 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x1F4188790](v27);
  uint64_t v32 = (char *)&v96 - v31;
  uint64_t v33 = MEMORY[0x1F4188790](v30);
  uint64_t v35 = (char *)&v96 - v34;
  MEMORY[0x1F4188790](v33);
  uint64_t v113 = (uint64_t)&v96 - v36;
  uint64_t v114 = a3;
  if (a1)
  {
    uint64_t v37 = a1;
  }
  else
  {
    uint64_t v37 = *(void *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rootEnvironment);
    swift_retain();
  }
  uint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
  if (v38((char *)a2, 1, v116) != 1 || v114)
  {
    uint64_t v101 = v7;
    type metadata accessor for SiriEnvironment();
    swift_allocObject();
    swift_retain();
    swift_retain();
    uint64_t v102 = v37;
    uint64_t v115 = SiriEnvironment.init(parent:)();
    outlined init with copy of ReferenceResolutionClientProtocol?(a2, (uint64_t)v25, &demangling cache variable for type metadata for SiriRequest?);
    if (v38(v25, 1, v116) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v25, &demangling cache variable for type metadata for SiriRequest?);
      uint64_t v39 = v114;
      if (v114)
      {
LABEL_9:
        type metadata accessor for FlowTaskProvider();
        (*(void (**)(char *, uint64_t, uint64_t))(v110 + 16))(v112, v39 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime, v111);
        swift_retain();
        swift_bridgeObjectRetain();
        dispatch thunk of FlowTaskProvider.__allocating_init(id:isClientInitiated:creationTime:)();
        uint64_t v37 = v115;
        SiriEnvironment.flowTask.setter();
        swift_release();
        swift_release();
        return v37;
      }
    }
    else
    {
      uint64_t v40 = (uint64_t)v25;
      uint64_t v41 = v113;
      outlined init with take of Conversation.State(v40, v113, type metadata accessor for SiriRequest);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v42 = type metadata accessor for Logger();
      uint64_t v43 = __swift_project_value_buffer(v42, (uint64_t)static Logger.executor);
      outlined init with copy of Conversation.State(v41, (uint64_t)v35, type metadata accessor for SiriRequest);
      outlined init with copy of Conversation.State(v41, (uint64_t)v32, type metadata accessor for SiriRequest);
      outlined init with copy of Conversation.State(v41, (uint64_t)v29, type metadata accessor for SiriRequest);
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.debug.getter();
      int v46 = v45;
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v47 = swift_slowAlloc();
        uint64_t v99 = swift_slowAlloc();
        v118[0] = v99;
        *(_DWORD *)uint64_t v47 = 136315650;
        os_log_t v97 = v44;
        uint64_t v48 = v116;
        int v98 = v46;
        uint64_t v49 = CurrentRequest.executionRequestId.getter();
        if (v50)
        {
          unint64_t v51 = v50;
        }
        else
        {
          uint64_t v49 = 7104878;
          unint64_t v51 = 0xE300000000000000;
        }
        uint64_t v117 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v51, v118);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of SiriRequest((uint64_t)v35, type metadata accessor for SiriRequest);
        *(_WORD *)(v47 + 12) = 2080;
        uint64_t v52 = CurrentRequest.rootRequestId.getter();
        if (v53)
        {
          unint64_t v54 = v53;
        }
        else
        {
          uint64_t v52 = 7104878;
          unint64_t v54 = 0xE300000000000000;
        }
        uint64_t v117 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v54, v118);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of SiriRequest((uint64_t)v32, type metadata accessor for SiriRequest);
        *(_WORD *)(v47 + 22) = 2080;
        uint64_t v55 = CurrentRequest.sessionId.getter();
        if (v56)
        {
          unint64_t v57 = v56;
        }
        else
        {
          uint64_t v55 = 7104878;
          unint64_t v57 = 0xE300000000000000;
        }
        uint64_t v117 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v57, v118);
        uint64_t v41 = v113;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of SiriRequest((uint64_t)v29, type metadata accessor for SiriRequest);
        os_log_t v58 = v97;
        _os_log_impl(&dword_1B9C64000, v97, (os_log_type_t)v98, "creating environment with SiriRequest having executionRequestId - %s, rootRequestId - %s, sessionId - %s", (uint8_t *)v47, 0x20u);
        uint64_t v59 = v99;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v59, -1, -1);
        MEMORY[0x1BA9E48C0](v47, -1, -1);

        uint64_t v39 = v114;
      }
      else
      {
        outlined destroy of SiriRequest((uint64_t)v35, type metadata accessor for SiriRequest);
        outlined destroy of SiriRequest((uint64_t)v32, type metadata accessor for SiriRequest);
        outlined destroy of SiriRequest((uint64_t)v29, type metadata accessor for SiriRequest);

        uint64_t v39 = v114;
        uint64_t v48 = v116;
      }
      swift_retain();
      SiriEnvironment.currentRequest.setter();
      uint64_t v60 = (uint64_t)v108;
      uint64_t v61 = (uint64_t)v109;
      uint64_t v100 = v43;
      if (v39)
      {
        swift_retain();
        uint64_t v62 = Logger.logObject.getter();
        os_log_type_t v63 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v62, v63))
        {
          uint64_t v64 = (uint8_t *)swift_slowAlloc();
          uint64_t v65 = swift_slowAlloc();
          v118[0] = v65;
          *(_DWORD *)uint64_t v64 = 136315138;
          uint64_t v67 = *(void *)(v39 + 16);
          unint64_t v66 = *(void *)(v39 + 24);
          swift_bridgeObjectRetain();
          uint64_t v68 = v67;
          uint64_t v41 = v113;
          uint64_t v117 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v66, v118);
          uint64_t v60 = (uint64_t)v108;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v61 = (uint64_t)v109;
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v62, v63, "Setting flowTaskMetadata.id to %s", v64, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v65, -1, -1);
          MEMORY[0x1BA9E48C0](v64, -1, -1);
        }

        SiriEnvironment.currentRequest.getter();
        (*(void (**)(char *, uint64_t, uint64_t))(v110 + 16))(v112, v39 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime, v111);
        swift_bridgeObjectRetain();
        uint64_t v69 = v104;
        FlowTaskMetadata.init(id:isClientInitiated:creationTime:)();
        uint64_t v70 = type metadata accessor for FlowTaskMetadata();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v69, 0, 1, v70);
        CurrentRequest.flowTaskMetadata.setter();
        swift_release();
        swift_release();
        uint64_t v71 = (uint64_t)v106;
        uint64_t v72 = v116;
      }
      else
      {
        uint64_t v72 = v48;
        unint64_t v73 = Logger.logObject.getter();
        os_log_type_t v74 = static os_log_type_t.debug.getter();
        BOOL v75 = os_log_type_enabled(v73, v74);
        uint64_t v71 = (uint64_t)v106;
        if (v75)
        {
          uint64_t v76 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v76 = 0;
          _os_log_impl(&dword_1B9C64000, v73, v74, "Not setting flowTaskMetadata.id", v76, 2u);
          MEMORY[0x1BA9E48C0](v76, -1, -1);
        }
      }
      SiriEnvironment.userIdentity.getter();
      uint64_t v77 = v41 + *(int *)(v72 + 40);
      outlined init with copy of ReferenceResolutionClientProtocol?(v77, v60, &demangling cache variable for type metadata for SiriRequestIdentities?);
      uint64_t v78 = type metadata accessor for SiriRequestIdentities(0);
      uint64_t v79 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 48);
      if (v79(v60, 1, v78) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v60, &demangling cache variable for type metadata for SiriRequestIdentities?);
        uint64_t v80 = type metadata accessor for IdentifiedUser();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56))(v61, 1, 1, v80);
      }
      else
      {
        outlined init with copy of ReferenceResolutionClientProtocol?(v60, v61, &demangling cache variable for type metadata for IdentifiedUser?);
        outlined destroy of SiriRequest(v60, type metadata accessor for SiriRequestIdentities);
      }
      dispatch thunk of UserIdentityProvider.identityForCurrentRequest.setter();
      swift_release();
      SiriEnvironment.userIdentity.getter();
      uint64_t v81 = v105;
      outlined init with copy of ReferenceResolutionClientProtocol?(v77, v105, &demangling cache variable for type metadata for SiriRequestIdentities?);
      if (v79(v81, 1, v78) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v81, &demangling cache variable for type metadata for SiriRequestIdentities?);
        uint64_t v82 = type metadata accessor for IdentifiedUser();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v71, 1, 1, v82);
      }
      else
      {
        outlined init with copy of ReferenceResolutionClientProtocol?(v81 + *(int *)(v78 + 20), v71, &demangling cache variable for type metadata for IdentifiedUser?);
        outlined destroy of SiriRequest(v81, type metadata accessor for SiriRequestIdentities);
      }
      dispatch thunk of UserIdentityProvider.identityMeetingUserSessionThreshold.setter();
      swift_release();
      SiriEnvironment.userIdentity.getter();
      uint64_t v83 = v107;
      outlined init with copy of ReferenceResolutionClientProtocol?(v77, v107, &demangling cache variable for type metadata for SiriRequestIdentities?);
      if (v79(v83, 1, v78) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v83, &demangling cache variable for type metadata for SiriRequestIdentities?);
      }
      else
      {
        swift_bridgeObjectRetain();
        outlined destroy of SiriRequest(v83, type metadata accessor for SiriRequestIdentities);
      }
      uint64_t v84 = (int *)v116;
      dispatch thunk of UserIdentityProvider.knownHomeMembers.setter();
      swift_release();
      uint64_t v85 = v41 + v84[7];
      unint64_t v86 = *(void *)(v85 + 8);
      if (v86 >> 60 != 15)
      {
        uint64_t v87 = *(void *)v85;
        outlined copy of Data._Representation(*(void *)v85, *(void *)(v85 + 8));
        SiriEnvironment.scopedReferenceResolutionData.getter();
        outlined copy of Data._Representation(v87, v86);
        dispatch thunk of ScopedReferenceResolutionDataProvider.dataForCurrentRequest.setter();
        swift_release();
        outlined consume of Data?(v87, v86);
      }
      if (*(void *)(v41 + v84[8]))
      {
        swift_retain();
        SiriEnvironment.currentTCU.setter();
      }
      if (*(void *)(v41 + v84[9]))
      {
        swift_retain_n();
        SiriEnvironment.nlRoutingDecision.setter();
        swift_retain_n();
        uint64_t v88 = Logger.logObject.getter();
        os_log_type_t v89 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v88, v89))
        {
          v90 = (uint8_t *)swift_slowAlloc();
          uint64_t v91 = swift_slowAlloc();
          v118[0] = v91;
          *(_DWORD *)v90 = 136315138;
          uint64_t v116 = (uint64_t)(v90 + 4);
          SiriEnvironment.nlRoutingDecision.getter();
          dispatch thunk of NLRoutingDecisionProvider.genAIFallbackSuppressReason.getter();
          swift_release();
          uint64_t v92 = String.init<A>(describing:)();
          uint64_t v117 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v93, v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v88, v89, "Set environment's NLRoutingDecisionProvider with genAIFallbackSuppressReason: %s", v90, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v91, -1, -1);
          MEMORY[0x1BA9E48C0](v90, -1, -1);
          swift_release();
        }
        else
        {
          swift_release();
          swift_release_n();
        }

        uint64_t v94 = v113;
      }
      else
      {
        uint64_t v94 = v41;
      }
      outlined destroy of SiriRequest(v94, type metadata accessor for SiriRequest);
      if (v39) {
        goto LABEL_9;
      }
    }
    swift_release();
    return v115;
  }
  swift_retain();
  return v37;
}

uint64_t Conversation.updateFlowEnvironment(flowAgent:request:)(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  v3[15] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLRoutingDecisionMessage.GenAIFallbackSuppressReason?);
  v3[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowTaskMetadata?);
  v3[17] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Date();
  v3[18] = v5;
  v3[19] = *(void *)(v5 - 8);
  v3[20] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
  v3[21] = swift_task_alloc();
  v3[22] = swift_task_alloc();
  v3[23] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
  v3[24] = swift_task_alloc();
  v3[25] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ResponseMode();
  v3[26] = v6;
  v3[27] = *(void *)(v6 - 8);
  v3[28] = swift_task_alloc();
  v3[29] = type metadata accessor for SiriRequest(0);
  v3[30] = swift_task_alloc();
  v3[31] = swift_task_alloc();
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  v3[34] = swift_task_alloc();
  return MEMORY[0x1F4188298](Conversation.updateFlowEnvironment(flowAgent:request:), a1, 0);
}

uint64_t Conversation.updateFlowEnvironment(flowAgent:request:)()
{
  uint64_t v1 = v0[14];
  v0[35] = *(void *)(v0[12] + 112);
  return MEMORY[0x1F4188298](Conversation.updateFlowEnvironment(flowAgent:request:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t);
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  os_log_type_t v62;
  uint64_t type;
  uint64_t v64;
  void *v65;
  uint64_t v66;

  uint64_t v65 = v0;
  v0[36] = dispatch thunk of AnyFlow.siriEnvironment.getter();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[34];
  uint64_t v3 = v0[13];
  uint64_t v4 = type metadata accessor for Logger();
  v0[37] = __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  outlined init with copy of Conversation.State(v3, v2, type metadata accessor for SiriRequest);
  outlined init with copy of Conversation.State(v3, v1, type metadata accessor for SiriRequest);
  swift_retain_n();
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.debug.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v9 = v0[33];
  uint64_t v8 = v0[34];
  if (v7)
  {
    uint64_t v60 = v0[27];
    os_log_t v58 = v0[28];
    uint64_t v59 = v0[26];
    uint64_t v10 = swift_slowAlloc();
    uint64_t v61 = swift_slowAlloc();
    uint64_t v64 = v61;
    *(_DWORD *)uint64_t v10 = 136315650;
    uint64_t v11 = ObjectIdentifier.debugDescription.getter();
    v0[9] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v13 = ObjectIdentifier.debugDescription.getter();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of SiriRequest(v8, type metadata accessor for SiriRequest);
    *(_WORD *)(v10 + 22) = 2080;
    CurrentRequest.responseMode.getter();
    lazy protocol witness table accessor for type Conversation and conformance Conversation(&lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode, MEMORY[0x1E4FA51C0]);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v58, v59);
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of SiriRequest(v9, type metadata accessor for SiriRequest);
    _os_log_impl(&dword_1B9C64000, v5, v6, "Setting environment %s currentRequest to %s with responseMode %s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v61, -1, -1);
    MEMORY[0x1BA9E48C0](v10, -1, -1);
  }
  else
  {
    swift_release_n();
    outlined destroy of SiriRequest(v8, type metadata accessor for SiriRequest);
    outlined destroy of SiriRequest(v9, type metadata accessor for SiriRequest);
  }
  uint64_t v18 = v0[31];
  uint64_t v19 = v0[30];
  uint64_t v20 = v0[13];
  outlined init with copy of Conversation.State(v20, v0[32], type metadata accessor for SiriRequest);
  outlined init with copy of Conversation.State(v20, v18, type metadata accessor for SiriRequest);
  outlined init with copy of Conversation.State(v20, v19, type metadata accessor for SiriRequest);
  uint64_t v21 = Logger.logObject.getter();
  uint64_t v22 = static os_log_type_t.debug.getter();
  uint64_t v23 = os_log_type_enabled(v21, v22);
  uint64_t v25 = v0[31];
  uint64_t v24 = v0[32];
  uint64_t v26 = v0[30];
  if (v23)
  {
    uint64_t v27 = swift_slowAlloc();
    type = swift_slowAlloc();
    uint64_t v64 = type;
    *(_DWORD *)uint64_t v27 = 136315650;
    uint64_t v62 = v22;
    uint64_t v28 = CurrentRequest.executionRequestId.getter();
    if (v29)
    {
      uint64_t v30 = v29;
    }
    else
    {
      uint64_t v28 = 7104878;
      uint64_t v30 = 0xE300000000000000;
    }
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of SiriRequest(v24, type metadata accessor for SiriRequest);
    *(_WORD *)(v27 + 12) = 2080;
    uint64_t v31 = CurrentRequest.rootRequestId.getter();
    if (v32)
    {
      uint64_t v33 = v32;
    }
    else
    {
      uint64_t v31 = 7104878;
      uint64_t v33 = 0xE300000000000000;
    }
    v0[7] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of SiriRequest(v25, type metadata accessor for SiriRequest);
    *(_WORD *)(v27 + 22) = 2080;
    uint64_t v34 = CurrentRequest.sessionId.getter();
    if (v35)
    {
      uint64_t v36 = v35;
    }
    else
    {
      uint64_t v34 = 7104878;
      uint64_t v36 = 0xE300000000000000;
    }
    v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, &v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of SiriRequest(v26, type metadata accessor for SiriRequest);
    _os_log_impl(&dword_1B9C64000, v21, v62, "updating environment with SiriRequest having executionRequestId - %s, rootRequestId - %s, sessionId - %s", (uint8_t *)v27, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](type, -1, -1);
    MEMORY[0x1BA9E48C0](v27, -1, -1);
  }
  else
  {
    outlined destroy of SiriRequest(v0[32], type metadata accessor for SiriRequest);
    outlined destroy of SiriRequest(v25, type metadata accessor for SiriRequest);
    outlined destroy of SiriRequest(v26, type metadata accessor for SiriRequest);
  }

  uint64_t v37 = v0[29];
  uint64_t v38 = v0[23];
  uint64_t v39 = v0[13];
  swift_retain();
  SiriEnvironment.currentRequest.setter();
  SiriEnvironment.userIdentity.getter();
  uint64_t v40 = v39 + *(int *)(v37 + 40);
  outlined init with copy of ReferenceResolutionClientProtocol?(v40, v38, &demangling cache variable for type metadata for SiriRequestIdentities?);
  uint64_t v41 = type metadata accessor for SiriRequestIdentities(0);
  uint64_t v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 48);
  uint64_t v43 = v42(v38, 1, v41);
  uint64_t v44 = v0[25];
  os_log_type_t v45 = v0[23];
  if (v43 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0[23], &demangling cache variable for type metadata for SiriRequestIdentities?);
    int v46 = type metadata accessor for IdentifiedUser();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v44, 1, 1, v46);
  }
  else
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v0[23], v0[25], &demangling cache variable for type metadata for IdentifiedUser?);
    outlined destroy of SiriRequest(v45, type metadata accessor for SiriRequestIdentities);
  }
  uint64_t v47 = v0[22];
  dispatch thunk of UserIdentityProvider.identityForCurrentRequest.setter();
  swift_release();
  SiriEnvironment.userIdentity.getter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v40, v47, &demangling cache variable for type metadata for SiriRequestIdentities?);
  uint64_t v48 = v42(v47, 1, v41);
  uint64_t v49 = v0[24];
  unint64_t v50 = v0[22];
  if (v48 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0[22], &demangling cache variable for type metadata for SiriRequestIdentities?);
    unint64_t v51 = type metadata accessor for IdentifiedUser();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v49, 1, 1, v51);
  }
  else
  {
    outlined init with copy of ReferenceResolutionClientProtocol?(v50 + *(int *)(v41 + 20), v0[24], &demangling cache variable for type metadata for IdentifiedUser?);
    outlined destroy of SiriRequest(v50, type metadata accessor for SiriRequestIdentities);
  }
  uint64_t v52 = v0[21];
  dispatch thunk of UserIdentityProvider.identityMeetingUserSessionThreshold.setter();
  swift_release();
  SiriEnvironment.userIdentity.getter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v40, v52, &demangling cache variable for type metadata for SiriRequestIdentities?);
  unint64_t v53 = v42(v52, 1, v41);
  unint64_t v54 = v0[21];
  if (v53 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0[21], &demangling cache variable for type metadata for SiriRequestIdentities?);
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined destroy of SiriRequest(v54, type metadata accessor for SiriRequestIdentities);
  }
  uint64_t v55 = v0[14];
  dispatch thunk of UserIdentityProvider.knownHomeMembers.setter();
  swift_release();
  v0[38] = *(void *)(v55 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskService);
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  unint64_t v56 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](Conversation.updateFlowEnvironment(flowAgent:request:), v56, 0);
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v11;

  uint64_t v1 = v0[38];
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 32);
  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v8 = v0[14];
    swift_bridgeObjectRelease();
    uint64_t v9 = Conversation.updateFlowEnvironment(flowAgent:request:);
    goto LABEL_9;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v4 = swift_bridgeObjectRetain();
  if (!v3) {
    goto LABEL_8;
  }
LABEL_3:
  if ((v2 & 0xC000000000000001) != 0)
  {
    uint64_t v7 = MEMORY[0x1BA9E3990](0, v2);
  }
  else
  {
    if (!*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return MEMORY[0x1F4188298](v4, v5, v6);
    }
    uint64_t v7 = swift_retain();
  }
  v0[39] = v7;
  uint64_t v8 = v0[14];
  swift_bridgeObjectRelease();
  uint64_t v9 = Conversation.updateFlowEnvironment(flowAgent:request:);
LABEL_9:
  uint64_t v4 = (uint64_t)v9;
  uint64_t v5 = v8;
  uint64_t v6 = 0;
  return MEMORY[0x1F4188298](v4, v5, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;
  void *v12;
  uint64_t v13;

  uint64_t v12 = v0;
  uint64_t v1 = v0[29];
  uint64_t v2 = v0[13];
  SiriEnvironment.scopedReferenceResolutionData.getter();
  outlined copy of Data?(*(void *)(v2 + *(int *)(v1 + 28)), *(void *)(v2 + *(int *)(v1 + 28) + 8));
  dispatch thunk of ScopedReferenceResolutionDataProvider.dataForCurrentRequest.setter();
  swift_release();
  if (*(void *)(v2 + *(int *)(v1 + 36)))
  {
    swift_retain_n();
    SiriEnvironment.nlRoutingDecision.setter();
    swift_retain_n();
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = swift_slowAlloc();
      uint64_t v11 = v6;
      *(_DWORD *)uint64_t v5 = 136315138;
      SiriEnvironment.nlRoutingDecision.getter();
      dispatch thunk of NLRoutingDecisionProvider.genAIFallbackSuppressReason.getter();
      swift_release();
      uint64_t v7 = String.init<A>(describing:)();
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v3, v4, "Set environment's NLRoutingDecisionProvider with genAIFallbackSuppressReason: %s", v5, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v6, -1, -1);
      MEMORY[0x1BA9E48C0](v5, -1, -1);

      swift_release();
      swift_release();
    }
    else
    {
      swift_release_n();
      swift_release();
    }
  }
  else
  {
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  uint64_t v20 = v0;
  uint64_t v1 = v0[39];
  uint64_t v3 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v4 = v0[18];
  uint64_t v18 = v0[17];
  type metadata accessor for FlowTaskProvider();
  uint64_t v5 = v1 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v6(v2, v1 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime, v4);
  swift_retain();
  swift_bridgeObjectRetain();
  dispatch thunk of FlowTaskProvider.__allocating_init(id:isClientInitiated:creationTime:)();
  SiriEnvironment.flowTask.setter();
  SiriEnvironment.currentRequest.getter();
  v6(v2, v5, v4);
  swift_bridgeObjectRetain();
  FlowTaskMetadata.init(id:isClientInitiated:creationTime:)();
  uint64_t v7 = type metadata accessor for FlowTaskMetadata();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v18, 0, 1, v7);
  CurrentRequest.flowTaskMetadata.setter();
  swift_release();
  swift_release_n();
  uint64_t v8 = v0[29];
  uint64_t v9 = v0[13];
  SiriEnvironment.scopedReferenceResolutionData.getter();
  outlined copy of Data?(*(void *)(v9 + *(int *)(v8 + 28)), *(void *)(v9 + *(int *)(v8 + 28) + 8));
  dispatch thunk of ScopedReferenceResolutionDataProvider.dataForCurrentRequest.setter();
  swift_release();
  if (*(void *)(v9 + *(int *)(v8 + 36)))
  {
    swift_retain_n();
    SiriEnvironment.nlRoutingDecision.setter();
    swift_retain_n();
    uint64_t v10 = Logger.logObject.getter();
    uint64_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v19 = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      SiriEnvironment.nlRoutingDecision.getter();
      dispatch thunk of NLRoutingDecisionProvider.genAIFallbackSuppressReason.getter();
      swift_release();
      uint64_t v14 = String.init<A>(describing:)();
      v0[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v10, v11, "Set environment's NLRoutingDecisionProvider with genAIFallbackSuppressReason: %s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v13, -1, -1);
      MEMORY[0x1BA9E48C0](v12, -1, -1);

      swift_release();
      swift_release();
    }
    else
    {
      swift_release_n();
      swift_release();
    }
  }
  else
  {
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t Conversation.attemptCorrectionsOn(request:)(uint64_t a1)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v1;
  return MEMORY[0x1F4188298](Conversation.attemptCorrectionsOn(request:), v1, 0);
}

uint64_t Conversation.attemptCorrectionsOn(request:)()
{
  uint64_t v1 = (void *)(v0[3] + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_correctionsEngine);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3))
  {
    uint64_t v4 = v0[3];
    uint64_t v5 = Conversation.correctionsFlow.getter();
    uint64_t v6 = *(void **)(v4 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_pluginInfo);
    type metadata accessor for FlowAgent();
    swift_allocObject();
    id v7 = v6;
    uint64_t v8 = FlowAgent.init(flow:tasks:pluginInfo:completion:)(v5, MEMORY[0x1E4FBC860], (uint64_t)v7, 0);
    v0[4] = v8;
    uint64_t v9 = (void *)swift_task_alloc();
    v0[5] = v9;
    *uint64_t v9 = v0;
    v9[1] = Conversation.attemptCorrectionsOn(request:);
    uint64_t v10 = v0[2];
    return Conversation.updateFlowEnvironment(flowAgent:request:)(v8, v10);
  }
  else
  {
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12(0);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v7;

  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 16);
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v4 = v2 + *(int *)(type metadata accessor for SiriRequest(0) + 20);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 48) = v5;
  char *v5 = v3;
  v5[1] = Conversation.attemptCorrectionsOn(request:);
  return FlowAgent.on(input:)(v4);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 32);
  if (*(unsigned char *)(v0 + 56) != 1)
  {
    swift_release();
    uint64_t v1 = 0;
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t Conversation.attemptCorrectionsOn(request:)(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *(unsigned char *)(*(void *)v1 + 56) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](Conversation.attemptCorrectionsOn(request:), v2, 0);
}

uint64_t Conversation.State.assertNotCancelled(function:)()
{
  uint64_t v1 = type metadata accessor for Conversation.State(0);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Conversation.State(v0, (uint64_t)v3, type metadata accessor for Conversation.State);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t result = outlined destroy of SiriRequest((uint64_t)v3, type metadata accessor for Conversation.State);
  if (EnumCaseMultiPayload == 5)
  {
    v11[0] = 0;
    v11[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    strcpy((char *)v11, "Cannot call ");
    BYTE5(v11[1]) = 0;
    HIWORD(v11[1]) = -5120;
    v6._countAndFlagsBits = StaticString.description.getter();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    v7._object = (void *)0x80000001BA0642D0;
    v7._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v7);
    uint64_t v8 = v11[0];
    uint64_t v9 = v11[1];
    lazy protocol witness table accessor for type CancelledError and conformance CancelledError();
    swift_allocError();
    *uint64_t v10 = v8;
    v10[1] = v9;
    return swift_willThrow();
  }
  return result;
}

uint64_t Conversation.deinit()
{
  swift_release();
  outlined destroy of SiriRequest(v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_state, type metadata accessor for Conversation.State);
  swift_bridgeObjectRelease();

  outlined destroy of weak ConversationTaskObservationDelegate?(v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver);
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_correctionsEngine);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_serverFallbackDisablingUtils);
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_hypothesisId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t Conversation.__deallocating_deinit()
{
  Conversation.deinit();

  return MEMORY[0x1F4188210](v0);
}

uint64_t Conversation.unownedExecutor.getter()
{
  return v0;
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance Conversation()
{
  return v0;
}

uint64_t protocol witness for Conversational.cancel() in conformance Conversation()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  v3[5] = v2;
  return MEMORY[0x1F4188298](Conversation.cancel(), v2, 0);
}

uint64_t protocol witness for Conversational.ensureReady(timeout:) in conformance Conversation(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return Conversation.ensureReady(timeout:)(a1);
}

uint64_t protocol witness for Conversational.accept(request:) in conformance Conversation(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return Conversation.accept(request:)(a1, a2);
}

uint64_t protocol witness for Conversational.paraphrase() in conformance Conversation(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return Conversation.paraphrase()(a1);
}

uint64_t protocol witness for Conversational.prepare() in conformance Conversation()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return Conversation.prepare()();
}

uint64_t protocol witness for Conversational.commit() in conformance Conversation(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return Conversation.commit()(a1);
}

uint64_t protocol witness for Conversational.isEmpty() in conformance Conversation()
{
  uint64_t v2 = *v0;
  *(void *)(v1 + 16) = *v0;
  return MEMORY[0x1F4188298](protocol witness for Conversational.isEmpty() in conformance Conversation, v2, 0);
}

{
  uint64_t v0;
  char v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v0 + 16) + 112) + 184))();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v3 = v1 & 1;
  return v2(v3);
}

uint64_t protocol witness for Conversational.isCorrectable() in conformance Conversation()
{
  uint64_t v2 = *v0;
  *(void *)(v1 + 16) = *v0;
  return MEMORY[0x1F4188298](protocol witness for Conversational.isCorrectable() in conformance Conversation, v2, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = (void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_correctionsEngine);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v2);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  Swift::String v6 = v4 & 1;
  return v5(v6);
}

uint64_t protocol witness for Conversational.flexibleExecutionSupport() in conformance Conversation(uint64_t a1)
{
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return Conversation.flexibleExecutionSupport()(a1);
}

uint64_t SiriRequest.requestId.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriRequest.input.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for SiriRequest(0) + 20);
  uint64_t v4 = type metadata accessor for Input();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t SiriRequest.environmentData.getter()
{
  type metadata accessor for SiriRequest(0);

  return swift_retain();
}

uint64_t SiriRequest.scopedRRData.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for SiriRequest(0) + 28);
  uint64_t v2 = *(void *)v1;
  outlined copy of Data?(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t SiriRequest.currentTCUProvider.getter()
{
  type metadata accessor for SiriRequest(0);

  return swift_retain();
}

uint64_t SiriRequest.nlRoutingDecisionProvider.getter()
{
  type metadata accessor for SiriRequest(0);

  return swift_retain();
}

uint64_t SiriRequest.identities.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SiriRequest(0);
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + *(int *)(v3 + 40), a1, &demangling cache variable for type metadata for SiriRequestIdentities?);
}

uint64_t SiriRequest.init(requestId:input:environmentData:scopedRRData:currentTCUProvider:nlRoutingDecisionProvider:identities:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  *a9 = a1;
  a9[1] = a2;
  uint64_t v17 = (int *)type metadata accessor for SiriRequest(0);
  uint64_t v18 = (char *)a9 + v17[5];
  uint64_t v19 = type metadata accessor for Input();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v18, a3, v19);
  *(void *)((char *)a9 + v17[6]) = a4;
  uint64_t result = outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a10, (uint64_t)a9 + v17[10], &demangling cache variable for type metadata for SiriRequestIdentities?);
  uint64_t v21 = (void *)((char *)a9 + v17[7]);
  *uint64_t v21 = a5;
  v21[1] = a6;
  *(void *)((char *)a9 + v17[8]) = a7;
  *(void *)((char *)a9 + v17[9]) = a8;
  return result;
}

uint64_t SiriRequestIdentities.proposedIdentity.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1, a1, &demangling cache variable for type metadata for IdentifiedUser?);
}

uint64_t SiriRequestIdentities.identityMeetingUserSessionThreshold.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for SiriRequestIdentities(0);
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + *(int *)(v3 + 20), a1, &demangling cache variable for type metadata for IdentifiedUser?);
}

uint64_t SiriRequestIdentities.otherHomeMembers.getter()
{
  type metadata accessor for SiriRequestIdentities(0);

  return swift_bridgeObjectRetain();
}

uint64_t SiriRequestIdentities.init(proposedIdentity:identityMeetingUserSessionThreshold:otherHomeMembers:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a1, a4, &demangling cache variable for type metadata for IdentifiedUser?);
  uint64_t v7 = type metadata accessor for SiriRequestIdentities(0);
  uint64_t result = outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a2, a4 + *(int *)(v7 + 20), &demangling cache variable for type metadata for IdentifiedUser?);
  *(void *)(a4 + *(int *)(v7 + 24)) = a3;
  return result;
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_Task();
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v28 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10 == *(void *)(a2 + 16))
  {
    if (!v10 || a1 == a2)
    {
      char v23 = 1;
    }
    else
    {
      uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
      uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
      uint64_t v12 = v6 + 16;
      uint64_t v31 = v7;
      uint64_t v32 = v13;
      uint64_t v14 = (v11 + 32) & ~v11;
      uint64_t v15 = *(void *)(v12 + 56);
      uint64_t v33 = v12;
      uint64_t v29 = v15;
      uint64_t v30 = (void (**)(uint64_t, uint64_t))(v12 - 8);
      uint64_t v16 = v10 - 1;
      uint64_t v17 = v7;
      do
      {
        uint64_t v18 = a1;
        uint64_t v19 = v9;
        uint64_t v20 = v9;
        uint64_t v21 = v32;
        v32((uint64_t)v19, a1 + v14, v4);
        uint64_t v22 = a2;
        v21(v17, a2 + v14, v4);
        uint64_t v9 = v20;
        lazy protocol witness table accessor for type Conversation and conformance Conversation(&lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task, MEMORY[0x1E4FA2760]);
        char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v24 = *v30;
        (*v30)(v17, v4);
        v24((uint64_t)v20, v4);
        BOOL v26 = v16-- != 0;
        if ((v23 & 1) == 0) {
          break;
        }
        v14 += v29;
        a2 = v22;
        a1 = v18;
      }
      while (v26);
    }
  }
  else
  {
    char v23 = 0;
  }
  return v23 & 1;
}

uint64_t specialized Conversation.init(initialFlow:taskService:pluginId:correctionsEngine:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v57 = a8;
  uint64_t v53 = a7;
  uint64_t v54 = a6;
  uint64_t v56 = a4;
  uint64_t v55 = a3;
  uint64_t v51 = a2;
  uint64_t v50 = a9;
  uint64_t v52 = type metadata accessor for DispatchTimeInterval();
  uint64_t v58 = *(void *)(v52 - 8);
  MEMORY[0x1F4188790](v52);
  uint64_t v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64[3] = a12;
  v64[4] = a13;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v64);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a12 - 8) + 32))(boxed_opaque_existential_0, a10, a12);
  uint64_t v62 = type metadata accessor for CorrectionsUndoManager();
  uint64_t v63 = lazy protocol witness table accessor for type Conversation and conformance Conversation(&lazy protocol witness table cache variable for type CorrectionsUndoManager and conformance CorrectionsUndoManager, (void (*)(uint64_t))type metadata accessor for CorrectionsUndoManager);
  v61[0] = a5;
  swift_defaultActor_initialize();
  type metadata accessor for Conversation.State(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v18 = a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  *(void *)(v18 + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_idleTrackerActivity) = 0;
  uint64_t v19 = (void *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rcId);
  *uint64_t v19 = 12589;
  v19[1] = 0xE200000000000000;
  uint64_t v20 = a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_hypothesisId;
  uint64_t v21 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  *(unsigned char *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_isPaused) = 0;
  *(void *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation____lazy_storage___correctionsFlow) = 0;
  type metadata accessor for InstrumentedStack(0);
  uint64_t v22 = (void *)swift_allocObject();
  v22[5] = MEMORY[0x1E4FBC868];
  v22[3] = 0;
  v22[4] = 0;
  v22[2] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Node<FlowAgent>);
  char v23 = (void *)swift_allocObject();
  swift_weakInit();
  swift_weakInit();
  v23[6] = 0;
  void v23[2] = a1;
  swift_beginAccess();
  swift_weakAssign();
  v23[4] = MEMORY[0x1E4FBC860];
  swift_weakAssign();
  v23[6] = 0;
  swift_retain_n();
  swift_retain();
  swift_release();
  specialized OrderedForest._push(_:)((uint64_t)v23);
  uint64_t v24 = v23[2];
  type metadata accessor for InstrumentedStack.TrackedFlowAgent(0);
  swift_allocObject();
  uint64_t v25 = swift_retain();
  BOOL v26 = InstrumentedStack.TrackedFlowAgent.init(agent:parent:)(v25, 0);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v60 = v22[5];
  v22[5] = 0x8000000000000000;
  uint64_t v28 = (uint64_t)v26;
  uint64_t v29 = v51;
  uint64_t v30 = v24;
  uint64_t v31 = v50;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v28, v30, isUniquelyReferenced_nonNull_native);
  v22[5] = v60;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_release();
  *(void *)(a11 + 112) = v22;
  uint64_t v32 = v58;
  uint64_t v33 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v16, v57, v52);
  type metadata accessor for OS_dispatch_queue();
  uint64_t v34 = static OS_dispatch_queue.main.getter();
  type metadata accessor for JetsamHelper();
  uint64_t v35 = (void *)swift_allocObject();
  uint64_t v36 = (void *)((char *)v35 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction);
  *uint64_t v36 = 0;
  v36[1] = 0;
  v35[2] = 0xD000000000000023;
  v35[3] = 0x80000001BA064730;
  v35[4] = dispatch_semaphore_create(1);
  v35[5] = v34;
  uint64_t v37 = v16;
  uint64_t v38 = v33;
  (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))((uint64_t)v35 + OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_timeout, v37, v33);
  *(void *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_jetsamHelper) = v35;
  swift_beginAccess();
  *(void *)(v18 + 8) = v53;
  swift_unknownObjectWeakAssign();
  *(void *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskService) = v29;
  uint64_t v39 = (void *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_pluginId);
  uint64_t v40 = v56;
  *uint64_t v39 = v55;
  v39[1] = v40;
  uint64_t v41 = *(void **)(a1 + 160);
  *(void *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_pluginInfo) = v41;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v61, a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_correctionsEngine);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v64, a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_serverFallbackDisablingUtils);
  if (v31)
  {
    swift_retain();
    id v42 = v41;
  }
  else
  {
    type metadata accessor for SiriEnvironment();
    swift_retain();
    id v43 = v41;
    static SiriEnvironment.default.getter();
  }
  type metadata accessor for SiriEnvironment();
  swift_allocObject();
  swift_retain();
  *(void *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rootEnvironment) = SiriEnvironment.init(parent:)();
  type metadata accessor for SiriCorrectionsClientProvider();
  swift_allocObject();
  swift_retain();
  SiriCorrectionsClientProvider.init()();
  SiriEnvironment.correctionsClientProvider.setter();
  swift_release();
  SiriEnvironment.correctionsClientProvider.getter();
  uint64_t v44 = v62;
  uint64_t v45 = v63;
  int v46 = __swift_project_boxed_opaque_existential_1(v61, v62);
  v59[3] = v44;
  v59[4] = *(void *)(v45 + 8);
  uint64_t v47 = __swift_allocate_boxed_opaque_existential_0(v59);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v44 - 8) + 16))(v47, v46, v44);
  dispatch thunk of SiriCorrectionsClientProvider.correctionsClient.setter();
  swift_release();
  type metadata accessor for UserIdentityProvider();
  lazy protocol witness table accessor for type Conversation and conformance Conversation(&lazy protocol witness table cache variable for type UserIdentityProvider and conformance UserIdentityProvider, MEMORY[0x1E4FA1DD0]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for FlowTaskProvider();
  lazy protocol witness table accessor for type Conversation and conformance Conversation(&lazy protocol witness table cache variable for type FlowTaskProvider and conformance FlowTaskProvider, MEMORY[0x1E4FA1890]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for CallStateEnvironmentProvider();
  lazy protocol witness table accessor for type Conversation and conformance Conversation(&lazy protocol witness table cache variable for type CallStateEnvironmentProvider and conformance CallStateEnvironmentProvider, MEMORY[0x1E4FA1E60]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for ScopedReferenceResolutionDataProvider();
  lazy protocol witness table accessor for type Conversation and conformance Conversation((unint64_t *)&lazy protocol witness table cache variable for type ScopedReferenceResolutionDataProvider and conformance ScopedReferenceResolutionDataProvider, MEMORY[0x1E4FA3D90]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for AceServiceContextProvider();
  lazy protocol witness table accessor for type Conversation and conformance Conversation(&lazy protocol witness table cache variable for type AceServiceContextProvider and conformance AceServiceContextProvider, MEMORY[0x1E4FA1E30]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  swift_retain();
  dispatch thunk of AnyFlow.siriEnvironment.setter();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v64);
  (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v57, v38);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v61);
  return a11;
}

{
  uint64_t v15;
  uint64_t v16;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t *v45;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58[5];
  uint64_t v59;
  uint64_t v60[3];
  uint64_t v61;
  uint64_t v62;

  uint64_t v55 = a8;
  uint64_t v51 = a7;
  uint64_t v52 = a6;
  uint64_t v53 = a3;
  uint64_t v54 = a4;
  uint64_t v49 = a2;
  uint64_t v50 = a10;
  uint64_t v15 = type metadata accessor for DispatchTimeInterval();
  uint64_t v56 = *(void *)(v15 - 8);
  uint64_t v57 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v48 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = a12;
  uint64_t v62 = a13;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v60);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a12 - 8) + 32))(boxed_opaque_existential_0, a5, a12);
  swift_defaultActor_initialize();
  type metadata accessor for Conversation.State(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v18 = a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  *(void *)(v18 + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_idleTrackerActivity) = 0;
  uint64_t v19 = (void *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rcId);
  *uint64_t v19 = 12589;
  v19[1] = 0xE200000000000000;
  uint64_t v20 = a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_hypothesisId;
  uint64_t v21 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  *(unsigned char *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_isPaused) = 0;
  *(void *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation____lazy_storage___correctionsFlow) = 0;
  type metadata accessor for InstrumentedStack(0);
  uint64_t v22 = (void *)swift_allocObject();
  v22[5] = MEMORY[0x1E4FBC868];
  v22[3] = 0;
  v22[4] = 0;
  v22[2] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Node<FlowAgent>);
  char v23 = (void *)swift_allocObject();
  swift_weakInit();
  swift_weakInit();
  v23[6] = 0;
  void v23[2] = a1;
  swift_beginAccess();
  swift_weakAssign();
  v23[4] = MEMORY[0x1E4FBC860];
  swift_weakAssign();
  v23[6] = 0;
  swift_retain_n();
  swift_retain();
  swift_release();
  specialized OrderedForest._push(_:)((uint64_t)v23);
  uint64_t v24 = v23[2];
  type metadata accessor for InstrumentedStack.TrackedFlowAgent(0);
  swift_allocObject();
  uint64_t v25 = swift_retain();
  BOOL v26 = InstrumentedStack.TrackedFlowAgent.init(agent:parent:)(v25, 0);
  swift_beginAccess();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v59 = v22[5];
  v22[5] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v26, v24, isUniquelyReferenced_nonNull_native);
  v22[5] = v59;
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  uint64_t v28 = v49;
  swift_release();
  swift_release();
  *(void *)(a11 + 112) = v22;
  uint64_t v29 = v56;
  uint64_t v30 = v48;
  uint64_t v31 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v48, v55, v57);
  type metadata accessor for OS_dispatch_queue();
  uint64_t v32 = static OS_dispatch_queue.main.getter();
  type metadata accessor for JetsamHelper();
  uint64_t v33 = (char *)swift_allocObject();
  uint64_t v34 = &v33[OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_transaction];
  *(void *)uint64_t v34 = 0;
  *((void *)v34 + 1) = 0;
  *((void *)v33 + 2) = 0xD000000000000023;
  *((void *)v33 + 3) = 0x80000001BA064730;
  *((void *)v33 + 4) = dispatch_semaphore_create(1);
  *((void *)v33 + 5) = v32;
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
  uint64_t v36 = v50;
  v35(&v33[OBJC_IVAR____TtC14SiriKitRuntime12JetsamHelper_timeout], v30, v31);
  *(void *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_jetsamHelper) = v33;
  swift_beginAccess();
  *(void *)(v18 + 8) = v51;
  swift_unknownObjectWeakAssign();
  *(void *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskService) = v28;
  uint64_t v37 = (void *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_pluginId);
  uint64_t v38 = v54;
  *uint64_t v37 = v53;
  v37[1] = v38;
  uint64_t v39 = *(void **)(a1 + 160);
  *(void *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_pluginInfo) = v39;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v60, a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_correctionsEngine);
  outlined init with copy of ReferenceResolutionClientProtocol(v36, a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_serverFallbackDisablingUtils);
  if (a9)
  {
    swift_retain();
    uint64_t v40 = v39;
  }
  else
  {
    type metadata accessor for SiriEnvironment();
    swift_retain();
    uint64_t v41 = v39;
    static SiriEnvironment.default.getter();
  }
  type metadata accessor for SiriEnvironment();
  swift_allocObject();
  swift_retain();
  *(void *)(a11 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rootEnvironment) = SiriEnvironment.init(parent:)();
  type metadata accessor for SiriCorrectionsClientProvider();
  swift_allocObject();
  swift_retain();
  SiriCorrectionsClientProvider.init()();
  SiriEnvironment.correctionsClientProvider.setter();
  swift_release();
  SiriEnvironment.correctionsClientProvider.getter();
  id v42 = v61;
  id v43 = v62;
  uint64_t v44 = __swift_project_boxed_opaque_existential_1(v60, v61);
  v58[3] = v42;
  v58[4] = *(void *)(v43 + 8);
  uint64_t v45 = __swift_allocate_boxed_opaque_existential_0(v58);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v42 - 8) + 16))(v45, v44, v42);
  dispatch thunk of SiriCorrectionsClientProvider.correctionsClient.setter();
  swift_release();
  type metadata accessor for UserIdentityProvider();
  lazy protocol witness table accessor for type Conversation and conformance Conversation(&lazy protocol witness table cache variable for type UserIdentityProvider and conformance UserIdentityProvider, MEMORY[0x1E4FA1DD0]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for FlowTaskProvider();
  lazy protocol witness table accessor for type Conversation and conformance Conversation(&lazy protocol witness table cache variable for type FlowTaskProvider and conformance FlowTaskProvider, MEMORY[0x1E4FA1890]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for CallStateEnvironmentProvider();
  lazy protocol witness table accessor for type Conversation and conformance Conversation(&lazy protocol witness table cache variable for type CallStateEnvironmentProvider and conformance CallStateEnvironmentProvider, MEMORY[0x1E4FA1E60]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for ScopedReferenceResolutionDataProvider();
  lazy protocol witness table accessor for type Conversation and conformance Conversation((unint64_t *)&lazy protocol witness table cache variable for type ScopedReferenceResolutionDataProvider and conformance ScopedReferenceResolutionDataProvider, MEMORY[0x1E4FA3D90]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  type metadata accessor for AceServiceContextProvider();
  lazy protocol witness table accessor for type Conversation and conformance Conversation(&lazy protocol witness table cache variable for type AceServiceContextProvider and conformance AceServiceContextProvider, MEMORY[0x1E4FA1E30]);
  swift_retain();
  dispatch thunk of SiriEnvironment.requireProvider<A>(of:)();
  swift_release();
  swift_retain();
  dispatch thunk of AnyFlow.siriEnvironment.setter();
  __swift_destroy_boxed_opaque_existential_1Tm(v36);
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v60);
  return a11;
}

uint64_t specialized Conversation.__allocating_init(initialFlow:taskService:pluginId:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v33 = a8;
  uint64_t v34 = a4;
  uint64_t v35 = a5;
  uint64_t v36 = a6;
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v29 = a12;
  uint64_t v30 = a1;
  uint64_t v13 = type metadata accessor for DispatchTimeInterval();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(a11 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v15);
  uint64_t v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  char v23 = (char *)&v28 - v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))((char *)&v28 - v22, a9, a11);
  type metadata accessor for CorrectionsUndoManager();
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 40) = 0u;
  *(void *)(v24 + 56) = 0;
  *(_OWORD *)(v24 + 24) = 0u;
  *(void *)(v24 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v38 = 0;
  memset(v37, 0, sizeof(v37));
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)((uint64_t)v37, v24 + 24, &demangling cache variable for type metadata for CorrectingFlow?);
  swift_endAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, a7, v13);
  type metadata accessor for Conversation(0);
  uint64_t v25 = swift_allocObject();
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, v23, a11);
  uint64_t v26 = specialized Conversation.init(initialFlow:taskService:pluginId:correctionsEngine:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(v30, v31, v32, v34, v24, v35, v36, (uint64_t)v17, v33, (uint64_t)v21, v25, a11, v29);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v23, a11);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a7, v13);
  return v26;
}

uint64_t specialized Conversation.__allocating_init(initialFlow:taskService:pluginId:correctionsEngine:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v25 = a7;
  uint64_t v26 = a8;
  uint64_t v23 = a4;
  uint64_t v24 = a6;
  uint64_t v22 = a3;
  uint64_t v16 = *(void *)(a12 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Conversation(0);
  uint64_t v19 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a5, a12);
  return specialized Conversation.init(initialFlow:taskService:pluginId:correctionsEngine:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)(a1, a2, v22, v23, (uint64_t)v18, v24, v25, v26, a9, a10, v19, a12, a13);
}

uint64_t type metadata accessor for Conversation.State(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for Conversation.State);
}

uint64_t type metadata accessor for SiriRequest(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for SiriRequest);
}

uint64_t outlined destroy of SiriRequest(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in Conversation.ensureReady(timeout:)(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in Conversation.ensureReady(timeout:)(a1, v1);
}

unint64_t lazy protocol witness table accessor for type TimedOutError and conformance TimedOutError()
{
  unint64_t result = lazy protocol witness table cache variable for type TimedOutError and conformance TimedOutError;
  if (!lazy protocol witness table cache variable for type TimedOutError and conformance TimedOutError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimedOutError and conformance TimedOutError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IllegalStateError and conformance IllegalStateError()
{
  unint64_t result = lazy protocol witness table cache variable for type IllegalStateError and conformance IllegalStateError;
  if (!lazy protocol witness table cache variable for type IllegalStateError and conformance IllegalStateError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IllegalStateError and conformance IllegalStateError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CancelledError and conformance CancelledError()
{
  unint64_t result = lazy protocol witness table cache variable for type CancelledError and conformance CancelledError;
  if (!lazy protocol witness table cache variable for type CancelledError and conformance CancelledError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CancelledError and conformance CancelledError);
  }
  return result;
}

uint64_t outlined init with copy of Conversation.State(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined assign with take of Conversation.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Conversation.State(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B9DDD96C()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in Conversation.paraphrase()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in Conversation.paraphrase()(a1, v4, v5, v6);
}

uint64_t outlined init with take of Conversation.State(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for Conversation(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for Conversation);
}

uint64_t sub_1B9DDDAE8()
{
  uint64_t v1 = (int *)type metadata accessor for SiriRequest(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_release();
  uint64_t v7 = (uint64_t *)(v0 + v3 + v1[7]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    outlined consume of Data._Representation(*v7, v8);
  }
  swift_release();
  swift_release();
  uint64_t v9 = v0 + v3 + v1[10];
  uint64_t v10 = type metadata accessor for SiriRequestIdentities(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    uint64_t v16 = v4;
    uint64_t v11 = type metadata accessor for IdentifiedUser();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    if (!v13(v9, 1, v11)) {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v9, v11);
    }
    uint64_t v14 = v9 + *(int *)(v10 + 20);
    if (!v13(v14, 1, v11)) {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v14, v11);
    }
    swift_bridgeObjectRelease();
    uint64_t v4 = v16;
  }
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t type metadata accessor for SiriRequestIdentities(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for SiriRequestIdentities);
}

uint64_t partial apply for closure #1 in Conversation.prepare()(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for SiriRequest(0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in Conversation.prepare()(a1, v7, v8, v9, v10, v11);
}

uint64_t lazy protocol witness table accessor for type Conversation and conformance Conversation(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B9DDDF2C()
{
  uint64_t v1 = type metadata accessor for FlexibleExecutionSupportOptions();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t partial apply for implicit closure #3 in Conversation.flexibleExecutionSupport()()
{
  uint64_t v1 = *(void *)(type metadata accessor for FlexibleExecutionSupportOptions() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return implicit closure #3 in Conversation.flexibleExecutionSupport()(v2);
}

uint64_t sub_1B9DDE01C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #1 in Conversation.commit()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in Conversation.commit()(a1, v4, v5, v6, v7, v8);
}

uint64_t outlined destroy of weak ConversationTaskObservationDelegate?(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B9DDE15C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  swift_beginAccess();
  uint64_t result = MEMORY[0x1BA9E49F0](v3);
  uint64_t v5 = *(void *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_1B9DDE1B8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_taskObserver;
  swift_beginAccess();
  *(void *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1B9DDE21C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (void *)(*a1 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_rcId);
  swift_beginAccess();
  uint64_t v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B9DDE278@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_hypothesisId;
  swift_beginAccess();
  return outlined init with copy of ReferenceResolutionClientProtocol?(v3, a2, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t sub_1B9DDE2DC@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = (unsigned char *)(*a1 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_isPaused);
  uint64_t result = swift_beginAccess();
  *a2 = *v3;
  return result;
}

uint64_t sub_1B9DDE330(char *a1, void *a2)
{
  char v2 = *a1;
  uint64_t v3 = (unsigned char *)(*a2 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation_isPaused);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = v2;
  return result;
}

uint64_t sub_1B9DDE380@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Conversation.correctionsFlow.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1B9DDE3AC(void *a1, void *a2)
{
  *(void *)(*a2 + OBJC_IVAR____TtC14SiriKitRuntime12Conversation____lazy_storage___correctionsFlow) = *a1;
  swift_retain();

  return swift_release();
}

uint64_t dispatch thunk of Conversational.cancel()(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 8) + **(int **)(a2 + 8));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v7(a1, a2);
}

uint64_t dispatch thunk of Conversational.ensureReady(timeout:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 16) + **(int **)(a3 + 16));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of Conversational.accept(request:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 24) + **(int **)(a4 + 24));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of Conversational.paraphrase()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 32) + **(int **)(a3 + 32));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of Conversational.prepare()(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 40) + **(int **)(a2 + 40));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v7(a1, a2);
}

uint64_t dispatch thunk of Conversational.commit()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 48) + **(int **)(a3 + 48));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v9(a1, a2, a3);
}

uint64_t dispatch thunk of Conversational.isEmpty()(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 56) + **(int **)(a2 + 56));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = protocol witness for AppShortcutStateProviding.intentsStates(appShortcutTargets:conditionalIntentMetadata:) in conformance AppShortcutStateProvider;
  return v7(a1, a2);
}

uint64_t dispatch thunk of Conversational.isCorrectable()(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 64) + **(int **)(a2 + 64));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v7(a1, a2);
}

uint64_t dispatch thunk of Conversational.flexibleExecutionSupport()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 72) + **(int **)(a3 + 72));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v9(a1, a2, a3);
}

uint64_t ObjC metadata update function for Conversation()
{
  return type metadata accessor for Conversation(0);
}

void type metadata completion function for Conversation()
{
  type metadata accessor for Conversation.State(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID?(319, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for Conversation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for Conversation);
}

uint64_t dispatch thunk of Conversation.taskObserver.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of Conversation.taskObserver.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of Conversation.taskObserver.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of Conversation.rcId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of Conversation.rcId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of Conversation.rcId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of Conversation.hypothesisId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of Conversation.hypothesisId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of Conversation.hypothesisId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of Conversation.isPaused.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of Conversation.isPaused.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of Conversation.isPaused.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of Conversation.correctionsFlow.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of Conversation.correctionsFlow.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of Conversation.correctionsFlow.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of Conversation.__allocating_init(initialFlow:taskService:pluginId:correctionsEngine:taskObserver:jetsamTransactionTimeout:rootEnvironment:serverFallbackDisablingUtils:)()
{
  return (*(uint64_t (**)(void))(v0 + 376))();
}

uint64_t dispatch thunk of Conversation.cancel()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 384) + **(int **)(*(void *)v0 + 384));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v4();
}

uint64_t dispatch thunk of Conversation.isCancelled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of Conversation.ensureReady(timeout:)(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 400) + **(int **)(*(void *)v1 + 400));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v6(a1);
}

uint64_t dispatch thunk of Conversation.accept(request:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(*(void *)v2 + 408) + **(int **)(*(void *)v2 + 408));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of Conversation.paraphrase()(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 416) + **(int **)(*(void *)v1 + 416));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v6(a1);
}

uint64_t dispatch thunk of Conversation.prepare()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 424) + **(int **)(*(void *)v0 + 424));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v4();
}

uint64_t dispatch thunk of Conversation.flexibleExecutionSupport()(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 432) + **(int **)(*(void *)v1 + 432));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v6(a1);
}

uint64_t dispatch thunk of Conversation.commit()(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 440) + **(int **)(*(void *)v1 + 440));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v6(a1);
}

uint64_t dispatch thunk of Conversation.isEmpty()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 448))();
}

uint64_t dispatch thunk of Conversation.isCorrectable()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 456))();
}

uint64_t dispatch thunk of Conversation.stackCount.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 464))();
}

uint64_t dispatch thunk of Conversation.topFlowAgent.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 472))();
}

uint64_t dispatch thunk of Conversation.isReady.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 480))();
}

uint64_t *initializeBufferWithCopyOfBuffer for Conversation.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        uint64_t v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        uint64_t v8 = (int *)type metadata accessor for SiriRequest(0);
        uint64_t v9 = v8[5];
        uint64_t v10 = (char *)a1 + v9;
        uint64_t v11 = (char *)a2 + v9;
        uint64_t v12 = type metadata accessor for Input();
        uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
        swift_bridgeObjectRetain();
        v13(v10, v11, v12);
        *(uint64_t *)((char *)a1 + v8[6]) = *(uint64_t *)((char *)a2 + v8[6]);
        uint64_t v14 = v8[7];
        uint64_t v15 = (char *)a1 + v14;
        uint64_t v16 = (_OWORD *)((char *)a2 + v14);
        unint64_t v17 = *(uint64_t *)((char *)a2 + v14 + 8);
        swift_retain();
        if (v17 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v15 = *v16;
        }
        else
        {
          uint64_t v22 = *(void *)v16;
          outlined copy of Data._Representation(v22, v17);
          *(void *)uint64_t v15 = v22;
          *((void *)v15 + 1) = v17;
        }
        *(uint64_t *)((char *)a1 + v8[8]) = *(uint64_t *)((char *)a2 + v8[8]);
        *(uint64_t *)((char *)a1 + v8[9]) = *(uint64_t *)((char *)a2 + v8[9]);
        uint64_t v23 = v8[10];
        __dst = (char *)a1 + v23;
        uint64_t v24 = (char *)a2 + v23;
        uint64_t v25 = type metadata accessor for SiriRequestIdentities(0);
        uint64_t v26 = *(void *)(v25 - 8);
        uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
        swift_retain();
        swift_retain();
        if (v27(v24, 1, v25))
        {
          uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(__dst, v24, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          uint64_t v29 = type metadata accessor for IdentifiedUser();
          uint64_t v30 = *(void *)(v29 - 8);
          uint64_t v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
          uint64_t v38 = v30;
          if (v39(v24, 1, v29))
          {
            uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(__dst, v24, *(void *)(*(void *)(v31 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v30 + 16))(__dst, v24, v29);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(__dst, 0, 1, v29);
          }
          uint64_t v32 = *(int *)(v25 + 20);
          uint64_t v33 = &__dst[v32];
          uint64_t v34 = &v24[v32];
          if (v39(&v24[v32], 1, v29))
          {
            uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v33, v34, v29);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v33, 0, 1, v29);
          }
          *(void *)&__dst[*(int *)(v25 + 24)] = *(void *)&v24[*(int *)(v25 + 24)];
          uint64_t v36 = *(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56);
          swift_bridgeObjectRetain();
          v36(__dst, 0, 1, v25);
        }
        uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, selectedFlow: Node<FlowAgent>));
        *(uint64_t *)((char *)a1 + *(int *)(v37 + 48)) = *(uint64_t *)((char *)a2 + *(int *)(v37 + 48));
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        uint64_t v20 = *a2;
        uint64_t v21 = a2[1];
        *a1 = v20;
        a1[1] = v21;
        swift_retain();
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      case 2u:
      case 3u:
        *a1 = *a2;
        swift_retain();
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for Conversation.State(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if ((result - 2) >= 2)
  {
    if (result == 1)
    {
      swift_release();
    }
    else
    {
      if (result) {
        return result;
      }
      swift_bridgeObjectRelease();
      uint64_t v3 = (int *)type metadata accessor for SiriRequest(0);
      uint64_t v4 = a1 + v3[5];
      uint64_t v5 = type metadata accessor for Input();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
      swift_release();
      uint64_t v6 = (uint64_t *)(a1 + v3[7]);
      unint64_t v7 = v6[1];
      if (v7 >> 60 != 15) {
        outlined consume of Data._Representation(*v6, v7);
      }
      swift_release();
      swift_release();
      uint64_t v8 = a1 + v3[10];
      uint64_t v9 = type metadata accessor for SiriRequestIdentities(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
      {
        uint64_t v10 = type metadata accessor for IdentifiedUser();
        uint64_t v11 = *(void *)(v10 - 8);
        uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
        if (!v12(v8, 1, v10)) {
          (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v8, v10);
        }
        uint64_t v13 = v8 + *(int *)(v9 + 20);
        if (!v12(v13, 1, v10)) {
          (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
        }
        swift_bridgeObjectRelease();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, selectedFlow: Node<FlowAgent>));
    }
  }

  return swift_release();
}

void *initializeWithCopy for Conversation.State(void *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      unint64_t v7 = (int *)type metadata accessor for SiriRequest(0);
      uint64_t v8 = v7[5];
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = type metadata accessor for Input();
      uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
      swift_bridgeObjectRetain();
      v12(v9, v10, v11);
      *(void *)((char *)a1 + v7[6]) = *(void *)((char *)a2 + v7[6]);
      uint64_t v13 = v7[7];
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (_OWORD *)((char *)a2 + v13);
      unint64_t v16 = *(void *)((char *)a2 + v13 + 8);
      swift_retain();
      if (v16 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v14 = *v15;
      }
      else
      {
        uint64_t v19 = *(void *)v15;
        outlined copy of Data._Representation(v19, v16);
        *(void *)uint64_t v14 = v19;
        *((void *)v14 + 1) = v16;
      }
      *(void *)((char *)a1 + v7[8]) = *(void *)((char *)a2 + v7[8]);
      *(void *)((char *)a1 + v7[9]) = *(void *)((char *)a2 + v7[9]);
      uint64_t v20 = v7[10];
      __dst = (char *)a1 + v20;
      uint64_t v21 = (char *)a2 + v20;
      uint64_t v22 = type metadata accessor for SiriRequestIdentities(0);
      uint64_t v23 = *(void *)(v22 - 8);
      uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
      swift_retain();
      swift_retain();
      if (v24(v21, 1, v22))
      {
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
        memcpy(__dst, v21, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        uint64_t v26 = type metadata accessor for IdentifiedUser();
        uint64_t v27 = *(void *)(v26 - 8);
        uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
        uint64_t v36 = v27;
        if (v37(v21, 1, v26))
        {
          uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(__dst, v21, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v27 + 16))(__dst, v21, v26);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
        }
        uint64_t v29 = *(int *)(v22 + 20);
        uint64_t v30 = &__dst[v29];
        uint64_t v31 = &v21[v29];
        if (v37(&v21[v29], 1, v26))
        {
          uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v30, v31, v26);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v30, 0, 1, v26);
        }
        *(void *)&__dst[*(int *)(v22 + 24)] = *(void *)&v21[*(int *)(v22 + 24)];
        uint64_t v33 = *(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56);
        swift_bridgeObjectRetain();
        v33(__dst, 0, 1, v22);
      }
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, selectedFlow: Node<FlowAgent>));
      *(void *)((char *)a1 + *(int *)(v34 + 48)) = *(void *)((char *)a2 + *(int *)(v34 + 48));
      swift_retain();
      goto LABEL_18;
    case 1u:
      uint64_t v17 = *a2;
      uint64_t v18 = a2[1];
      *a1 = v17;
      a1[1] = v18;
      swift_retain();
      swift_retain();
      goto LABEL_18;
    case 2u:
    case 3u:
      *a1 = *a2;
      swift_retain();
LABEL_18:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

void *assignWithCopy for Conversation.State(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of SiriRequest((uint64_t)a1, type metadata accessor for Conversation.State);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v6 = (int *)type metadata accessor for SiriRequest(0);
        uint64_t v7 = v6[5];
        uint64_t v8 = (char *)a1 + v7;
        uint64_t v9 = (char *)a2 + v7;
        uint64_t v10 = type metadata accessor for Input();
        uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
        swift_bridgeObjectRetain();
        v11(v8, v9, v10);
        *(void *)((char *)a1 + v6[6]) = *(void *)((char *)a2 + v6[6]);
        uint64_t v12 = v6[7];
        uint64_t v13 = (char *)a1 + v12;
        uint64_t v14 = (_OWORD *)((char *)a2 + v12);
        unint64_t v15 = *(void *)((char *)a2 + v12 + 8);
        swift_retain();
        if (v15 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v13 = *v14;
        }
        else
        {
          uint64_t v16 = *(void *)v14;
          outlined copy of Data._Representation(v16, v15);
          *(void *)uint64_t v13 = v16;
          *((void *)v13 + 1) = v15;
        }
        *(void *)((char *)a1 + v6[8]) = *(void *)((char *)a2 + v6[8]);
        *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
        uint64_t v17 = v6[10];
        __dst = (char *)a1 + v17;
        uint64_t v18 = (char *)a2 + v17;
        uint64_t v19 = type metadata accessor for SiriRequestIdentities(0);
        uint64_t v20 = *(void *)(v19 - 8);
        uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
        swift_retain();
        swift_retain();
        if (v21(v18, 1, v19))
        {
          uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
          memcpy(__dst, v18, *(void *)(*(void *)(v22 - 8) + 64));
        }
        else
        {
          uint64_t v23 = type metadata accessor for IdentifiedUser();
          uint64_t v24 = *(void *)(v23 - 8);
          uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
          uint64_t v33 = v24;
          if (v34(v18, 1, v23))
          {
            uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(__dst, v18, *(void *)(*(void *)(v25 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v24 + 16))(__dst, v18, v23);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(__dst, 0, 1, v23);
          }
          uint64_t v26 = *(int *)(v19 + 20);
          uint64_t v27 = &__dst[v26];
          uint64_t v28 = &v18[v26];
          if (v34(&v18[v26], 1, v23))
          {
            uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
            memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v27, v28, v23);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v27, 0, 1, v23);
          }
          *(void *)&__dst[*(int *)(v19 + 24)] = *(void *)&v18[*(int *)(v19 + 24)];
          uint64_t v30 = *(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56);
          swift_bridgeObjectRetain();
          v30(__dst, 0, 1, v19);
        }
        uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, selectedFlow: Node<FlowAgent>));
        *(void *)((char *)a1 + *(int *)(v31 + 48)) = *(void *)((char *)a2 + *(int *)(v31 + 48));
        swift_retain();
        goto LABEL_19;
      case 1u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_retain();
        swift_retain();
        goto LABEL_19;
      case 2u:
      case 3u:
        *a1 = *a2;
        swift_retain();
LABEL_19:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_OWORD *initializeWithTake for Conversation.State(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    uint64_t v6 = (int *)type metadata accessor for SiriRequest(0);
    uint64_t v7 = v6[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Input();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    *(void *)((char *)a1 + v6[6]) = *(void *)((char *)a2 + v6[6]);
    *(_OWORD *)((char *)a1 + v6[7]) = *(_OWORD *)((char *)a2 + v6[7]);
    *(void *)((char *)a1 + v6[8]) = *(void *)((char *)a2 + v6[8]);
    *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
    uint64_t v11 = v6[10];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for SiriRequestIdentities(0);
    uint64_t v15 = *(void *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
      memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      uint64_t v17 = type metadata accessor for IdentifiedUser();
      uint64_t v18 = *(void *)(v17 - 8);
      uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
      uint64_t v25 = v18;
      if (v26(v13, 1, v17))
      {
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
        memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v12, v13, v17);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v12, 0, 1, v17);
      }
      uint64_t v20 = *(int *)(v14 + 20);
      __dst = &v12[v20];
      uint64_t v21 = &v13[v20];
      if (v26(&v13[v20], 1, v17))
      {
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
        memcpy(__dst, v21, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 32))(__dst, v21, v17);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(__dst, 0, 1, v17);
      }
      *(void *)&v12[*(int *)(v14 + 24)] = *(void *)&v13[*(int *)(v14 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, selectedFlow: Node<FlowAgent>));
    *(void *)((char *)a1 + *(int *)(v23 + 48)) = *(void *)((char *)a2 + *(int *)(v23 + 48));
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *assignWithTake for Conversation.State(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of SiriRequest((uint64_t)a1, type metadata accessor for Conversation.State);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      *a1 = *a2;
      uint64_t v6 = (int *)type metadata accessor for SiriRequest(0);
      uint64_t v7 = v6[5];
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for Input();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
      *(void *)((char *)a1 + v6[6]) = *(void *)((char *)a2 + v6[6]);
      *(_OWORD *)((char *)a1 + v6[7]) = *(_OWORD *)((char *)a2 + v6[7]);
      *(void *)((char *)a1 + v6[8]) = *(void *)((char *)a2 + v6[8]);
      *(void *)((char *)a1 + v6[9]) = *(void *)((char *)a2 + v6[9]);
      uint64_t v11 = v6[10];
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for SiriRequestIdentities(0);
      uint64_t v15 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
      {
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
        memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
      }
      else
      {
        uint64_t v17 = type metadata accessor for IdentifiedUser();
        uint64_t v18 = *(void *)(v17 - 8);
        uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
        uint64_t v25 = v18;
        if (v26(v13, 1, v17))
        {
          uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v12, v13, v17);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v12, 0, 1, v17);
        }
        uint64_t v20 = *(int *)(v14 + 20);
        __dst = &v12[v20];
        uint64_t v21 = &v13[v20];
        if (v26(&v13[v20], 1, v17))
        {
          uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
          memcpy(__dst, v21, *(void *)(*(void *)(v22 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v25 + 32))(__dst, v21, v17);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(__dst, 0, 1, v17);
        }
        *(void *)&v12[*(int *)(v14 + 24)] = *(void *)&v13[*(int *)(v14 + 24)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      }
      uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SiriRequest, selectedFlow: Node<FlowAgent>));
      *(void *)((char *)a1 + *(int *)(v23 + 48)) = *(void *)((char *)a2 + *(int *)(v23 + 48));
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for Conversation.State()
{
  uint64_t result = type metadata accessor for SiriRequest(319);
  if (v1 <= 0x3F)
  {
    uint64_t v2 = MEMORY[0x1E4FBADB0] + 64;
    swift_getTupleTypeLayout2();
    v3[4] = v3;
    v3[5] = &unk_1BA052580;
    v3[6] = &unk_1BA0525B0;
    v3[7] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t dispatch thunk of ConversationTaskObservationDelegate.conversationWillExecute(flowPluginInfo:activeTasks:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a6 + 8)
                                                                                     + **(int **)(a6 + 8));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of ConversationTaskObservationDelegate.executionDidComplete()(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(a2 + 16) + **(int **)(a2 + 16));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v7(a1, a2);
}

uint64_t dispatch thunk of ConversationTaskObservationDelegate.activeTasksDidChange(activeTasks:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a5 + 24) + **(int **)(a5 + 24));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v13(a1, a2, a3, a4, a5);
}

uint64_t *initializeBufferWithCopyOfBuffer for SiriRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Input();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[7];
    *(uint64_t *)((char *)v4 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (_OWORD *)((char *)a2 + v13);
    unint64_t v16 = *(uint64_t *)((char *)a2 + v13 + 8);
    swift_retain();
    if (v16 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v14 = *v15;
    }
    else
    {
      uint64_t v18 = *(void *)v15;
      outlined copy of Data._Representation(v18, v16);
      *(void *)uint64_t v14 = v18;
      *((void *)v14 + 1) = v16;
    }
    uint64_t v19 = a3[9];
    *(uint64_t *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)v4 + v19) = *(uint64_t *)((char *)a2 + v19);
    uint64_t v20 = a3[10];
    uint64_t v21 = (char *)v4 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = type metadata accessor for SiriRequestIdentities(0);
    uint64_t v24 = *(void *)(v23 - 8);
    uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
    swift_retain();
    swift_retain();
    if (v25(v22, 1, v23))
    {
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
      memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      uint64_t v27 = type metadata accessor for IdentifiedUser();
      uint64_t v28 = *(void *)(v27 - 8);
      uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
      uint64_t v37 = v28;
      if (v29(v22, 1, v27))
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
        memcpy(v21, v22, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v21, v22, v27);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v21, 0, 1, v27);
      }
      uint64_t v31 = *(int *)(v23 + 20);
      uint64_t v32 = &v21[v31];
      uint64_t v33 = &v22[v31];
      if (v29(&v22[v31], 1, v27))
      {
        uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
        memcpy(v32, v33, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v32, v33, v27);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v32, 0, 1, v27);
      }
      *(void *)&v21[*(int *)(v23 + 24)] = *(void *)&v22[*(int *)(v23 + 24)];
      uint64_t v35 = *(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56);
      swift_bridgeObjectRetain();
      v35(v21, 0, 1, v23);
    }
  }
  return v4;
}

uint64_t destroy for SiriRequest(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  uint64_t v6 = (uint64_t *)(a1 + a2[7]);
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    outlined consume of Data._Representation(*v6, v7);
  }
  swift_release();
  swift_release();
  uint64_t v8 = a1 + a2[10];
  uint64_t v9 = type metadata accessor for SiriRequestIdentities(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  if (!result)
  {
    uint64_t v11 = type metadata accessor for IdentifiedUser();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    if (!v13(v8, 1, v11)) {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v8, v11);
    }
    uint64_t v14 = v8 + *(int *)(v9 + 20);
    if (!v13(v14, 1, v11)) {
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v14, v11);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for SiriRequest(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Input();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (_OWORD *)((char *)a2 + v12);
  unint64_t v15 = *(void *)((char *)a2 + v12 + 8);
  swift_retain();
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v13 = *v14;
  }
  else
  {
    uint64_t v16 = *(void *)v14;
    outlined copy of Data._Representation(v16, v15);
    *(void *)uint64_t v13 = v16;
    *((void *)v13 + 1) = v15;
  }
  uint64_t v17 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v17) = *(void *)((char *)a2 + v17);
  uint64_t v18 = a3[10];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for SiriRequestIdentities(0);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  swift_retain();
  swift_retain();
  if (v23(v20, 1, v21))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    uint64_t v25 = type metadata accessor for IdentifiedUser();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    uint64_t v35 = v26;
    if (v27(v20, 1, v25))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
      memcpy(v19, v20, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v19, v20, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v19, 0, 1, v25);
    }
    uint64_t v29 = *(int *)(v21 + 20);
    uint64_t v30 = &v19[v29];
    uint64_t v31 = &v20[v29];
    if (v27(&v20[v29], 1, v25))
    {
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
      memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v30, v31, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v30, 0, 1, v25);
    }
    *(void *)&v19[*(int *)(v21 + 24)] = *(void *)&v20[*(int *)(v21 + 24)];
    uint64_t v33 = *(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56);
    swift_bridgeObjectRetain();
    v33(v19, 0, 1, v21);
  }
  return a1;
}

void *assignWithCopy for SiriRequest(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Input();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_retain();
  swift_release();
  uint64_t v10 = a3[7];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  unint64_t v13 = *(void *)((char *)a2 + v10 + 8);
  if (*(void *)((char *)a1 + v10 + 8) >> 60 == 15)
  {
    if (v13 >> 60 != 15)
    {
      uint64_t v14 = *v12;
      outlined copy of Data._Representation(v14, v13);
      *uint64_t v11 = v14;
      v11[1] = v13;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
    outlined destroy of Data((uint64_t)v11);
LABEL_6:
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    goto LABEL_8;
  }
  uint64_t v15 = *v12;
  outlined copy of Data._Representation(v15, v13);
  uint64_t v16 = *v11;
  unint64_t v17 = v11[1];
  *uint64_t v11 = v15;
  v11[1] = v13;
  outlined consume of Data._Representation(v16, v17);
LABEL_8:
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_retain();
  swift_release();
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_retain();
  swift_release();
  uint64_t v18 = a3[10];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for SiriRequestIdentities(0);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (v25)
    {
      outlined destroy of SiriRequest((uint64_t)v19, type metadata accessor for SiriRequestIdentities);
      goto LABEL_14;
    }
    uint64_t v31 = type metadata accessor for IdentifiedUser();
    uint64_t v32 = *(void *)(v31 - 8);
    uint64_t v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
    int v34 = v33(v19, 1, v31);
    int v35 = v33(v20, 1, v31);
    uint64_t v50 = v32;
    if (v34)
    {
      if (!v35)
      {
        (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v19, v20, v31);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v19, 0, 1, v31);
        goto LABEL_26;
      }
    }
    else
    {
      if (!v35)
      {
        (*(void (**)(char *, char *, uint64_t))(v32 + 24))(v19, v20, v31);
LABEL_26:
        uint64_t v42 = *(int *)(v21 + 20);
        id v43 = &v19[v42];
        uint64_t v44 = &v20[v42];
        int v45 = v33(&v19[v42], 1, v31);
        int v46 = v33(v44, 1, v31);
        if (v45)
        {
          if (!v46)
          {
            (*(void (**)(char *, char *, uint64_t))(v50 + 16))(v43, v44, v31);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v43, 0, 1, v31);
LABEL_32:
            *(void *)&v19[*(int *)(v21 + 24)] = *(void *)&v20[*(int *)(v21 + 24)];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            return a1;
          }
        }
        else
        {
          if (!v46)
          {
            (*(void (**)(char *, char *, uint64_t))(v50 + 24))(v43, v44, v31);
            goto LABEL_32;
          }
          (*(void (**)(char *, uint64_t))(v50 + 8))(v43, v31);
        }
        uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
        memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
        goto LABEL_32;
      }
      (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v31);
    }
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
    memcpy(v19, v20, *(void *)(*(void *)(v41 - 8) + 64));
    goto LABEL_26;
  }
  if (v25)
  {
LABEL_14:
    uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
    memcpy(v19, v20, *(void *)(*(void *)(v30 - 8) + 64));
    return a1;
  }
  uint64_t v26 = type metadata accessor for IdentifiedUser();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  uint64_t v49 = v27;
  if (v28(v20, 1, v26))
  {
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
    memcpy(v19, v20, *(void *)(*(void *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v19, v20, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v19, 0, 1, v26);
  }
  uint64_t v36 = *(int *)(v21 + 20);
  uint64_t v37 = &v19[v36];
  uint64_t v38 = &v20[v36];
  if (v28(&v20[v36], 1, v26))
  {
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
    memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v37, v38, v26);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v37, 0, 1, v26);
  }
  *(void *)&v19[*(int *)(v21 + 24)] = *(void *)&v20[*(int *)(v21 + 24)];
  uint64_t v40 = *(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56);
  swift_bridgeObjectRetain();
  v40(v19, 0, 1, v21);
  return a1;
}

uint64_t outlined destroy of Data(uint64_t a1)
{
  return a1;
}

_OWORD *initializeWithTake for SiriRequest(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Input();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  uint64_t v11 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  uint64_t v12 = a3[10];
  unint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for SiriRequestIdentities(0);
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = type metadata accessor for IdentifiedUser();
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
    uint64_t v27 = v19;
    if (v20(v14, 1, v18))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
      memcpy(v13, v14, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v13, v14, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v13, 0, 1, v18);
    }
    uint64_t v22 = *(int *)(v15 + 20);
    uint64_t v23 = &v13[v22];
    int v24 = &v14[v22];
    if (v20(&v14[v22], 1, v18))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
      memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v23, v24, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v23, 0, 1, v18);
    }
    *(void *)&v13[*(int *)(v15 + 24)] = *(void *)&v14[*(int *)(v15 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  return a1;
}

void *assignWithTake for SiriRequest(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Input();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_release();
  uint64_t v11 = a3[7];
  uint64_t v12 = (uint64_t)a1 + v11;
  unint64_t v13 = (char *)a2 + v11;
  unint64_t v14 = *(void *)((char *)a1 + v11 + 8);
  if (v14 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v15 = *((void *)v13 + 1);
  if (v15 >> 60 == 15)
  {
    outlined destroy of Data(v12);
LABEL_4:
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    goto LABEL_6;
  }
  uint64_t v16 = *(void *)v12;
  *(void *)uint64_t v12 = *(void *)v13;
  *(void *)(v12 + 8) = v15;
  outlined consume of Data._Representation(v16, v14);
LABEL_6:
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_release();
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  swift_release();
  uint64_t v17 = a3[10];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = type metadata accessor for SiriRequestIdentities(0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  int v23 = v22(v18, 1, v20);
  int v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (v24)
    {
      outlined destroy of SiriRequest((uint64_t)v18, type metadata accessor for SiriRequestIdentities);
      goto LABEL_12;
    }
    uint64_t v30 = type metadata accessor for IdentifiedUser();
    uint64_t v31 = *(void *)(v30 - 8);
    uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
    int v33 = v32(v18, 1, v30);
    int v34 = v32(v19, 1, v30);
    uint64_t v48 = v31;
    if (v33)
    {
      if (!v34)
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v18, v19, v30);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v18, 0, 1, v30);
        goto LABEL_24;
      }
    }
    else
    {
      if (!v34)
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 40))(v18, v19, v30);
LABEL_24:
        uint64_t v40 = *(int *)(v20 + 20);
        uint64_t v41 = &v18[v40];
        uint64_t v42 = &v19[v40];
        int v43 = v32(&v18[v40], 1, v30);
        int v44 = v32(v42, 1, v30);
        if (v43)
        {
          if (!v44)
          {
            (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v41, v42, v30);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(v41, 0, 1, v30);
LABEL_30:
            *(void *)&v18[*(int *)(v20 + 24)] = *(void *)&v19[*(int *)(v20 + 24)];
            swift_bridgeObjectRelease();
            return a1;
          }
        }
        else
        {
          if (!v44)
          {
            (*(void (**)(char *, char *, uint64_t))(v48 + 40))(v41, v42, v30);
            goto LABEL_30;
          }
          (*(void (**)(char *, uint64_t))(v48 + 8))(v41, v30);
        }
        uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
        memcpy(v41, v42, *(void *)(*(void *)(v45 - 8) + 64));
        goto LABEL_30;
      }
      (*(void (**)(char *, uint64_t))(v31 + 8))(v18, v30);
    }
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
    memcpy(v18, v19, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_24;
  }
  if (v24)
  {
LABEL_12:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
    memcpy(v18, v19, *(void *)(*(void *)(v29 - 8) + 64));
    return a1;
  }
  uint64_t v25 = type metadata accessor for IdentifiedUser();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
  uint64_t v47 = v26;
  if (v27(v19, 1, v25))
  {
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
    memcpy(v18, v19, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v18, v19, v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v18, 0, 1, v25);
  }
  uint64_t v35 = *(int *)(v20 + 20);
  uint64_t v36 = &v18[v35];
  uint64_t v37 = &v19[v35];
  if (v27(&v19[v35], 1, v25))
  {
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
    memcpy(v36, v37, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v36, v37, v25);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v36, 0, 1, v25);
  }
  *(void *)&v18[*(int *)(v20 + 24)] = *(void *)&v19[*(int *)(v20 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B9DE2E78);
}

uint64_t sub_1B9DE2E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Input();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
      unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 40);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for SiriRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B9DE2FBC);
}

uint64_t sub_1B9DE2FBC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Input();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriRequestIdentities?);
      unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 40);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for SiriRequest()
{
  type metadata accessor for Input();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID?(319, &lazy cache variable for type metadata for SiriRequestIdentities?, (void (*)(uint64_t))type metadata accessor for SiriRequestIdentities);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for UUID?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for SiriRequestIdentities(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for IdentifiedUser();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v12 = *(int *)(a3 + 20);
    uint64_t v13 = (char *)a1 + v12;
    unint64_t v14 = (char *)a2 + v12;
    if (v9((uint64_t *)((char *)a2 + v12), 1, v7))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    }
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for SiriRequestIdentities(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IdentifiedUser();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 20);
  if (!v6(v7, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
  }

  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for SiriRequestIdentities(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IdentifiedUser();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for SiriRequestIdentities(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IdentifiedUser();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  unint64_t v14 = &a2[v12];
  int v15 = v8(&a1[v12], 1, v6);
  int v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v13, v14, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
LABEL_13:
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for SiriRequestIdentities(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IdentifiedUser();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  return a1;
}

char *assignWithTake for SiriRequestIdentities(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IdentifiedUser();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  unint64_t v14 = &a2[v12];
  int v15 = v8(&a1[v12], 1, v6);
  int v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v13, v14, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
LABEL_13:
  *(void *)&a1[*(int *)(a3 + 24)] = *(void *)&a2[*(int *)(a3 + 24)];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriRequestIdentities(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B9DE3E90);
}

uint64_t sub_1B9DE3E90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for SiriRequestIdentities(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B9DE3F68);
}

uint64_t sub_1B9DE3F68(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IdentifiedUser?);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

void type metadata completion function for SiriRequestIdentities()
{
  type metadata accessor for UUID?(319, &lazy cache variable for type metadata for IdentifiedUser?, MEMORY[0x1E4FA1BD8]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_1B9DE40E0()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:)()
{
  return closure #1 in Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:)();
}

uint64_t partial apply for closure #1 in closure #1 in Conversation.push(rcId:parentNode:flow:continuedTasks:parentEnvironment:completion:)()
{
  return dispatch thunk of AnyChildCompletion.completion(exitValue:)();
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

id ConversationalContextContainer.__allocating_init(dialogActs:activeTasks:executedTasks:entities:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (char *)objc_allocWithZone(v4);
  *(void *)&v9[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_systemDialogActs] = a1;
  *(void *)&v9[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_activeTasks] = a2;
  *(void *)&v9[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_executedTasks] = a3;
  *(void *)&v9[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_entities] = a4;
  v11.receiver = v9;
  v11.super_class = v4;
  return objc_msgSendSuper2(&v11, sel_init);
}

void *ConversationalContextContainer.supportsSecureCoding.unsafeMutableAddressor()
{
  return &static ConversationalContextContainer.supportsSecureCoding;
}

uint64_t static ConversationalContextContainer.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t ConversationalContextContainer.systemDialogActs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConversationalContextContainer.activeTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConversationalContextContainer.executedTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConversationalContextContainer.entities.getter()
{
  return swift_bridgeObjectRetain();
}

id ConversationalContextContainer.init(dialogActs:activeTasks:executedTasks:entities:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)&v4[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_systemDialogActs] = a1;
  *(void *)&v4[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_activeTasks] = a2;
  *(void *)&v4[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_executedTasks] = a3;
  *(void *)&v4[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_entities] = a4;
  v6.receiver = v4;
  v6.super_class = (Class)type metadata accessor for ConversationalContextContainer();
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t type metadata accessor for ConversationalContextContainer()
{
  return self;
}

Swift::Void __swiftcall ConversationalContextContainer.encode(with:)(NSCoder with)
{
  uint64_t v3 = type metadata accessor for RREntity();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v36 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Class isa = *(Class *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_systemDialogActs);
  if (isa)
  {
    uint64_t v7 = swift_bridgeObjectRetain();
    specialized Array<A>.serializeProtobufElementsAsData<A>(swiftType:objects:)(v7, MEMORY[0x1E4FA2910], (unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_SystemDialogAct and conformance Siri_Nlu_External_SystemDialogAct, MEMORY[0x1E4FA2910], MEMORY[0x1E4FA2908]);
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000010, 0x80000001BA0609B0);
  uint64_t v9 = &off_1E61F1000;
  [(objc_class *)with.super.isa encodeObject:isa forKey:v8];
  swift_unknownObjectRelease();

  Class v10 = *(Class *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_activeTasks);
  if (v10)
  {
    uint64_t v11 = swift_bridgeObjectRetain();
    specialized Array<A>.serializeProtobufElementsAsData<A>(swiftType:objects:)(v11, MEMORY[0x1E4FA2760], lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task, MEMORY[0x1E4FA2760], MEMORY[0x1E4FA2758]);
    swift_bridgeObjectRelease();
    Class v10 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = (void *)MEMORY[0x1BA9E2DD0](0x6154657669746361, 0xEB00000000736B73);
  [(objc_class *)with.super.isa encodeObject:v10 forKey:v12];
  swift_unknownObjectRelease();

  Class v13 = *(Class *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_executedTasks);
  if (v13)
  {
    uint64_t v14 = swift_bridgeObjectRetain();
    specialized Array<A>.serializeProtobufElementsAsData<A>(swiftType:objects:)(v14, MEMORY[0x1E4FA2760], lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task, MEMORY[0x1E4FA2760], MEMORY[0x1E4FA2758]);
    swift_bridgeObjectRelease();
    Class v13 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  int v15 = (void *)MEMORY[0x1BA9E2DD0](0x6465747563657865, 0xED0000736B736154);
  [(objc_class *)with.super.isa encodeObject:v13 forKey:v15];
  swift_unknownObjectRelease();

  uint64_t v16 = *(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_entities);
  if (v16)
  {
    uint64_t v17 = *(void *)(v16 + 16);
    if (v17)
    {
      v32[1] = *(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_entities);
      int v33 = with.super.isa;
      uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
      uint64_t v18 = v4 + 16;
      uint64_t v20 = v16 + ((*(unsigned __int8 *)(v18 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 64));
      uint64_t v37 = (void (**)(char *, uint64_t))(v18 - 8);
      uint64_t v38 = *(void *)(v18 + 56);
      uint64_t v39 = v19;
      swift_bridgeObjectRetain_n();
      uint64_t v40 = (void *)MEMORY[0x1E4FBC860];
      *(void *)&long long v21 = 136315138;
      long long v35 = v21;
      uint64_t v34 = MEMORY[0x1E4FBC840] + 8;
      uint64_t v22 = v36;
      do
      {
        v39(v22, v20, v3);
        type metadata accessor for JSONEncoder();
        swift_allocObject();
        JSONEncoder.init()();
        lazy protocol witness table accessor for type RREntity and conformance RREntity((unint64_t *)&lazy protocol witness table cache variable for type RREntity and conformance RREntity, MEMORY[0x1E4FA3E10]);
        uint64_t v23 = dispatch thunk of JSONEncoder.encode<A>(_:)();
        uint64_t v25 = v24;
        swift_release();
        (*v37)(v22, v3);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          uint64_t v26 = v40;
        }
        else {
          uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v40[2] + 1, 1, v40);
        }
        unint64_t v28 = v26[2];
        unint64_t v27 = v26[3];
        if (v28 >= v27 >> 1) {
          uint64_t v26 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v26);
        }
        void v26[2] = v28 + 1;
        uint64_t v40 = v26;
        uint64_t v29 = &v26[2 * v28];
        v29[4] = v23;
        v29[5] = v25;
        v20 += v38;
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease_n();
      with.super.Class isa = v33;
      uint64_t v9 = &off_1E61F1000;
    }
    Class v30 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    Class v30 = 0;
  }
  uint64_t v31 = (void *)MEMORY[0x1BA9E2DD0](0x7365697469746E65, 0xE800000000000000);
  objc_msgSend(with.super.isa, (SEL)v9[225], v30, v31);
  swift_unknownObjectRelease();
}

id ConversationalContextContainer.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return ConversationalContextContainer.init(coder:)(a1);
}

id ConversationalContextContainer.init(coder:)(void *a1)
{
  uint64_t v3 = type metadata accessor for RREntity();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v65 = (char *)v60 - v9;
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v67 = (char *)v60 - v11;
  MEMORY[0x1F4188790](v10);
  unint64_t v66 = (char *)v60 - v12;
  Class v13 = v1;
  uint64_t v14 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000010, 0x80000001BA0609B0);
  id v70 = a1;
  id v15 = objc_msgSend(a1, sel_decodeObjectForKey_, v14);

  if (v15)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v74 = 0u;
    long long v75 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v74, (uint64_t)v76);
  uint64_t v16 = MEMORY[0x1E4FBC840];
  if (v77)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
    if (!swift_dynamicCast())
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
      long long v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v23 = 0;
        _os_log_impl(&dword_1B9C64000, v21, v22, "Failed to decode the SystemDialogAct", v23, 2u);
        MEMORY[0x1BA9E48C0](v23, -1, -1);
      }

      goto LABEL_58;
    }
    uint64_t v71 = v7;
    unint64_t v17 = specialized Array<A>.deserializeDataElementsAsProtobuf<A>(swiftType:)(v72);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v71 = v7;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v76, (uint64_t *)&demangling cache variable for type metadata for Any?);
    unint64_t v17 = 0;
  }
  *(void *)&v13[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_systemDialogActs] = v17;
  uint64_t v18 = (void *)MEMORY[0x1BA9E2DD0](0x6154657669746361, 0xEB00000000736B73);
  id v19 = objc_msgSend(v70, sel_decodeObjectForKey_, v18);

  if (v19)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v74 = 0u;
    long long v75 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v74, (uint64_t)v76);
  if (v77)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
    if (!swift_dynamicCast())
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)static Logger.conversationBridge);
      unint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        Class v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)Class v30 = 0;
        _os_log_impl(&dword_1B9C64000, v28, v29, "Failed to decode the Active Tasks", v30, 2u);
        MEMORY[0x1BA9E48C0](v30, -1, -1);
      }

      goto LABEL_39;
    }
    unint64_t v24 = specialized Array<A>.deserializeDataElementsAsProtobuf<A>(swiftType:)(v72);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v76, (uint64_t *)&demangling cache variable for type metadata for Any?);
    unint64_t v24 = 0;
  }
  *(void *)&v13[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_activeTasks] = v24;
  uint64_t v25 = (void *)MEMORY[0x1BA9E2DD0](0x6465747563657865, 0xED0000736B736154);
  id v26 = objc_msgSend(v70, sel_decodeObjectForKey_, v25);

  if (v26)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v74 = 0u;
    long long v75 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v74, (uint64_t)v76);
  if (!v77)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v76, (uint64_t *)&demangling cache variable for type metadata for Any?);
    unint64_t v31 = 0;
    goto LABEL_32;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
  if (!swift_dynamicCast())
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.conversationBridge);
    long long v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl(&dword_1B9C64000, v35, v36, "Failed to decode the Executed Tasks", v37, 2u);
      MEMORY[0x1BA9E48C0](v37, -1, -1);
    }

    swift_bridgeObjectRelease();
LABEL_39:
    swift_bridgeObjectRelease();

    goto LABEL_58;
  }
  unint64_t v31 = specialized Array<A>.deserializeDataElementsAsProtobuf<A>(swiftType:)(v72);
  swift_bridgeObjectRelease();
LABEL_32:
  *(void *)&v13[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_executedTasks] = v31;
  uint64_t v32 = (void *)MEMORY[0x1BA9E2DD0](0x7365697469746E65, 0xE800000000000000);
  id v33 = objc_msgSend(v70, sel_decodeObjectForKey_, v32);

  if (v33)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v74 = 0u;
    long long v75 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v74, (uint64_t)v76);
  if (!v77)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v76, (uint64_t *)&demangling cache variable for type metadata for Any?);
    unint64_t v52 = 0;
LABEL_62:
    *(void *)&v13[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_entities] = v52;

    uint64_t v58 = (objc_class *)type metadata accessor for ConversationalContextContainer();
    v73.receiver = v13;
    v73.super_class = v58;
    id v57 = objc_msgSendSuper2(&v73, sel_init);

    return v57;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
  if (swift_dynamicCast())
  {
    uint64_t v61 = v13;
    uint64_t v38 = v72;
    uint64_t v39 = *(char **)(v72 + 16);
    if (v39)
    {
      uint64_t v68 = type metadata accessor for JSONDecoder();
      uint64_t v40 = v4;
      uint64_t v64 = (void (**)(char *, char *, uint64_t))(v4 + 32);
      swift_bridgeObjectRetain();
      v60[1] = v38;
      uint64_t v41 = v38 + 40;
      unint64_t v69 = MEMORY[0x1E4FBC860];
      *(void *)&long long v42 = 136315138;
      long long v63 = v42;
      uint64_t v62 = v16 + 8;
      int v43 = v71;
      int v44 = v65;
      do
      {
        uint64_t v71 = v39;
        swift_allocObject();
        JSONDecoder.init()();
        lazy protocol witness table accessor for type RREntity and conformance RREntity(&lazy protocol witness table cache variable for type RREntity and conformance RREntity, MEMORY[0x1E4FA3E10]);
        dispatch thunk of JSONDecoder.decode<A>(_:from:)();
        swift_release();
        uint64_t v45 = *v64;
        int v46 = v67;
        (*v64)(v67, v44, v3);
        uint64_t v47 = v66;
        v45(v66, v46, v3);
        v45(v43, v47, v3);
        if (swift_isUniquelyReferenced_nonNull_native()) {
          unint64_t v48 = v69;
        }
        else {
          unint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v69 + 16) + 1, 1, v69);
        }
        unint64_t v50 = *(void *)(v48 + 16);
        unint64_t v49 = *(void *)(v48 + 24);
        if (v50 >= v49 >> 1) {
          unint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1, v48);
        }
        *(void *)(v48 + 16) = v50 + 1;
        unint64_t v51 = (*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
        unint64_t v69 = v48;
        v45((char *)(v48 + v51 + *(void *)(v40 + 72) * v50), v43, v3);
        v41 += 16;
        uint64_t v39 = v71 - 1;
      }
      while (v71 != (char *)1);
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v69 = MEMORY[0x1E4FBC860];
    }
    swift_bridgeObjectRelease();
    Class v13 = v61;
    unint64_t v52 = v69;
    goto LABEL_62;
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v53 = type metadata accessor for Logger();
  __swift_project_value_buffer(v53, (uint64_t)static Logger.conversationBridge);
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v56 = 0;
    _os_log_impl(&dword_1B9C64000, v54, v55, "Failed to decode the entities", v56, 2u);
    MEMORY[0x1BA9E48C0](v56, -1, -1);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
LABEL_58:
  type metadata accessor for ConversationalContextContainer();
  swift_deallocPartialClassInstance();
  return 0;
}

unint64_t specialized Array<A>.deserializeDataElementsAsProtobuf<A>(swiftType:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_SystemDialogAct?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  Class v30 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v27 = (char *)&v24 - v12;
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13) {
    return MEMORY[0x1E4FBC860];
  }
  unint64_t v28 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  os_log_type_t v29 = (void (**)(char *, void, uint64_t, uint64_t))(v11 + 56);
  uint64_t v25 = v11;
  uint64_t v14 = (void (**)(char *, char *, uint64_t))(v11 + 32);
  swift_bridgeObjectRetain();
  unint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t v24 = a1;
  uint64_t v16 = (unint64_t *)(a1 + 40);
  id v26 = v4;
  do
  {
    uint64_t v17 = *(v16 - 1);
    unint64_t v18 = *v16;
    uint64_t v33 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    outlined copy of Data._Representation(v17, v18);
    outlined copy of Data._Representation(v17, v18);
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type RREntity and conformance RREntity((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_SystemDialogAct and conformance Siri_Nlu_External_SystemDialogAct, MEMORY[0x1E4FA2910]);
    Message.init(serializedData:extensions:partial:options:)();
    (*v29)(v7, 0, 1, v8);
    outlined consume of Data._Representation(v17, v18);
    if ((*v28)(v7, 1, v8) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for Siri_Nlu_External_SystemDialogAct?);
    }
    else
    {
      id v19 = *v14;
      uint64_t v20 = v27;
      (*v14)(v27, v7, v8);
      v19(v30, v20, v8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1, v15);
      }
      unint64_t v22 = *(void *)(v15 + 16);
      unint64_t v21 = *(void *)(v15 + 24);
      if (v22 >= v21 >> 1) {
        unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1, v15);
      }
      *(void *)(v15 + 16) = v22 + 1;
      v19((char *)(v15+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(void *)(v25 + 72) * v22), v30, v8);
    }
    v16 += 2;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v15;
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (**v14)(char *, char *, uint64_t);
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unsigned int (**v28)(char *, uint64_t, uint64_t);
  void (**v29)(char *, void, uint64_t, uint64_t);
  char *v30;
  long long v31;
  long long v32;
  uint64_t v33;

  uint64_t v2 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Task?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Siri_Nlu_External_Task();
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  Class v30 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v27 = (char *)&v24 - v12;
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13) {
    return MEMORY[0x1E4FBC860];
  }
  unint64_t v28 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  os_log_type_t v29 = (void (**)(char *, void, uint64_t, uint64_t))(v11 + 56);
  uint64_t v25 = v11;
  uint64_t v14 = (void (**)(char *, char *, uint64_t))(v11 + 32);
  swift_bridgeObjectRetain();
  unint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t v24 = a1;
  uint64_t v16 = (unint64_t *)(a1 + 40);
  id v26 = v4;
  do
  {
    uint64_t v17 = *(v16 - 1);
    unint64_t v18 = *v16;
    uint64_t v33 = 0;
    long long v31 = 0u;
    long long v32 = 0u;
    outlined copy of Data._Representation(v17, v18);
    outlined copy of Data._Representation(v17, v18);
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type RREntity and conformance RREntity(lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task, MEMORY[0x1E4FA2760]);
    Message.init(serializedData:extensions:partial:options:)();
    (*v29)(v7, 0, 1, v8);
    outlined consume of Data._Representation(v17, v18);
    if ((*v28)(v7, 1, v8) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for Siri_Nlu_External_Task?);
    }
    else
    {
      id v19 = *v14;
      uint64_t v20 = v27;
      (*v14)(v27, v7, v8);
      v19(v30, v20, v8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1, v15);
      }
      unint64_t v22 = *(void *)(v15 + 16);
      unint64_t v21 = *(void *)(v15 + 24);
      if (v22 >= v21 >> 1) {
        unint64_t v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1, v15);
      }
      *(void *)(v15 + 16) = v22 + 1;
      v19((char *)(v15+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(void *)(v25 + 72) * v22), v30, v8);
    }
    v16 += 2;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v15;
}

id ConversationalContextContainer.__allocating_init(serializedBackingStore:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return ConversationalContextContainer.init(serializedBackingStore:)(a1);
}

id ConversationalContextContainer.init(serializedBackingStore:)(uint64_t a1)
{
  outlined init with copy of Any(a1, (uint64_t)v29);
  id v3 = v1;
  uint64_t v4 = &demangling cache variable for type metadata for _ContiguousArrayStorage<[Any]>;
  uint64_t v5 = &demangling cache variable for type metadata for _ContiguousArrayStorage<[Any]>;
  uint64_t v6 = &demangling cache variable for type metadata for _ContiguousArrayStorage<[Any]>;
  if ((swift_dynamicCast() & 1) == 0)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_1B9C64000, v8, v9, "The backing store for conversational context is not of type Data", v10, 2u);
      uint64_t v11 = v10;
      uint64_t v4 = &demangling cache variable for type metadata for _ContiguousArrayStorage<[Any]>;
      MEMORY[0x1BA9E48C0](v11, -1, -1);
    }

    goto LABEL_14;
  }
  type metadata accessor for NSKeyedUnarchiver();
  static NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(_:)();
  if (!v29[3])
  {
    outlined consume of Data._Representation((uint64_t)v27, v28);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_14:
    uint64_t v16 = 0;
    uint64_t v15 = 0;
    uint64_t v14 = 0;
    uint64_t v13 = 0;
    goto LABEL_15;
  }
  type metadata accessor for ConversationalContextContainer();
  if ((swift_dynamicCast() & 1) == 0)
  {
    outlined consume of Data._Representation((uint64_t)v27, v28);
    goto LABEL_14;
  }
  unint64_t v24 = v28;
  uint64_t v25 = (uint64_t)v27;
  id v12 = v27;
  uint64_t v13 = *(void *)&v27[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_systemDialogActs];
  uint64_t v14 = *(void *)&v27[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_activeTasks];
  uint64_t v15 = *(void *)&v27[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_executedTasks];
  uint64_t v16 = *(void *)&v27[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_entities];
  uint64_t v17 = one-time initialization token for conversationBridge;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v17 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationBridge);
  id v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    unint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v21 = 0;
    _os_log_impl(&dword_1B9C64000, v19, v20, "Decoded the ConversationalContextContainer", v21, 2u);
    MEMORY[0x1BA9E48C0](v21, -1, -1);
    outlined consume of Data._Representation(v25, v24);
  }
  else
  {
    outlined consume of Data._Representation((uint64_t)v27, v28);
  }
  uint64_t v6 = &demangling cache variable for type metadata for _ContiguousArrayStorage<[Any]>;
  uint64_t v5 = &demangling cache variable for type metadata for _ContiguousArrayStorage<[Any]>;
  uint64_t v4 = &demangling cache variable for type metadata for _ContiguousArrayStorage<[Any]>;
LABEL_15:
  *(void *)&v3[OBJC_IVAR____TtC14SiriKitRuntime30ConversationalContextContainer_systemDialogActs] = v13;
  *(void *)&v3[v4[249]] = v14;
  *(void *)&v3[v5[250]] = v15;
  *(void *)&v3[v6[251]] = v16;

  v26.receiver = v3;
  v26.super_class = (Class)type metadata accessor for ConversationalContextContainer();
  id v22 = objc_msgSendSuper2(&v26, sel_init);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v22;
}

void ConversationalContextContainer.serializedBackingStore()(uint64_t *a1@<X8>)
{
  v20[1] = *(id *)MEMORY[0x1E4F143B8];
  v20[0] = 0;
  id v3 = objc_msgSend(self, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v1, 1, v20);
  id v4 = v20[0];
  if (v3)
  {
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v7 = v6;
  }
  else
  {
    uint64_t v8 = v4;
    os_log_type_t v9 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
    id v11 = v9;
    id v12 = v9;
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      v20[0] = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      id v17 = v9;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v18 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, (uint64_t *)v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v13, v14, "Failed to encode the context: %s", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v16, -1, -1);
      MEMORY[0x1BA9E48C0](v15, -1, -1);
    }
    else
    {
    }
    uint64_t v5 = 0;
    unint64_t v7 = 0xC000000000000000;
  }
  a1[3] = MEMORY[0x1E4F277C0];
  *a1 = v5;
  a1[1] = v7;
}

id ConversationalContextContainer.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void ConversationalContextContainer.init()()
{
}

id ConversationalContextContainer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationalContextContainer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void *specialized Array<A>.serializeProtobufElementsAsData<A>(swiftType:objects:)(uint64_t a1, uint64_t (*a2)(void), unint64_t *a3, void (*a4)(uint64_t), uint64_t a5)
{
  long long v31 = a3;
  uint64_t v8 = a2(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  id v11 = (char *)v25 - v10;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  os_log_type_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v13 = v9 + 16;
  uint64_t v15 = a1 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
  uint64_t v29 = *(void *)(v13 + 56);
  Class v30 = v14;
  unint64_t v28 = (void (**)(char *, uint64_t))(v13 - 8);
  v25[1] = a1;
  swift_bridgeObjectRetain();
  long long v32 = (void *)MEMORY[0x1E4FBC860];
  objc_super v26 = a4;
  uint64_t v27 = a5;
  do
  {
    uint64_t v16 = v13;
    v30(v11, v15, v8);
    lazy protocol witness table accessor for type RREntity and conformance RREntity(v31, a4);
    uint64_t v17 = Message.serializedData(partial:)();
    uint64_t v19 = v18;
    (*v28)(v11, v8);
    if (swift_isUniquelyReferenced_nonNull_native()) {
      os_log_type_t v20 = v32;
    }
    else {
      os_log_type_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32[2] + 1, 1, v32);
    }
    unint64_t v22 = v20[2];
    unint64_t v21 = v20[3];
    if (v22 >= v21 >> 1) {
      os_log_type_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1, v20);
    }
    id v20[2] = v22 + 1;
    long long v32 = v20;
    uint64_t v23 = &v20[2 * v22];
    v23[4] = v17;
    v23[5] = v19;
    a4 = v26;
    v15 += v29;
    --v12;
    uint64_t v13 = v16;
  }
  while (v12);
  swift_bridgeObjectRelease();
  return v32;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for NSKeyedUnarchiver()
{
  unint64_t result = lazy cache variable for type metadata for NSKeyedUnarchiver;
  if (!lazy cache variable for type metadata for NSKeyedUnarchiver)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSKeyedUnarchiver);
  }
  return result;
}

uint64_t method lookup function for ConversationalContextContainer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationalContextContainer);
}

uint64_t dispatch thunk of ConversationalContextContainer.__allocating_init(dialogActs:activeTasks:executedTasks:entities:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of ConversationalContextContainer.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of ConversationalContextContainer.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of ConversationalContextContainer.__allocating_init(serializedBackingStore:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of ConversationalContextContainer.serializedBackingStore()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90))();
}

uint64_t lazy protocol witness table accessor for type RREntity and conformance RREntity(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t (*specialized closure #1 in ConversationRequestAwareBridgeBase.registerMessages()())(uint64_t a1)
{
  return partial apply for specialized closure #1 in closure #1 in ConversationRequestAwareBridgeBase.registerMessages();
}

uint64_t (*specialized closure #2 in ConversationRequestAwareBridgeBase.registerMessages()())(uint64_t a1)
{
  return partial apply for specialized closure #1 in closure #2 in ConversationRequestAwareBridgeBase.registerMessages();
}

uint64_t specialized ConversationMessageDispatchingBridgeBase.deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + direct field offset for ConversationMessageDispatchingBridgeBase.logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t static ConversationBridgeSPI.isEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  uint64_t v0 = (unsigned __int8 *)(static ConversationBridgeFeatureFlag.forceEnabled + 16);
  uint64_t v1 = (os_unfair_lock_s *)(static ConversationBridgeFeatureFlag.forceEnabled + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static ConversationBridgeFeatureFlag.forceEnabled + 20));
  partial apply for closure #1 in ConversationBridgeFeatureFlag.isEnabled.getter(v0, &v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

uint64_t ConversationBridgeSPI.asyncQueue.getter()
{
  return swift_retain();
}

uint64_t ConversationBridgeSPI.impl.getter()
{
  return swift_retain();
}

id ConversationBridgeSPI.queue.getter()
{
  return *(id *)(v0 + 32);
}

void *ConversationBridgeSPI.__allocating_init(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  swift_allocObject();
  uint64_t v12 = specialized ConversationBridgeSPI.init(_:_:_:_:_:)(a1, a2, a3, a4, a5, a6);
  swift_unknownObjectRelease();

  return v12;
}

void *ConversationBridgeSPI.init(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  unint64_t v7 = specialized ConversationBridgeSPI.init(_:_:_:_:_:)(a1, a2, a3, a4, a5, a6);
  swift_unknownObjectRelease();

  return v7;
}

void *ConversationBridge.__allocating_init(name:messagePublisher:serviceHelper:conversationSessionsManaging:rrClient:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = *(void *)(a7 + 24);
  uint64_t v16 = *(void *)(a7 + 32);
  uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1(a7, v15);
  uint64_t v18 = specialized ConversationBridge.__allocating_init(name:messagePublisher:serviceHelper:conversationSessionsManaging:rrClient:featureChecker:)(a1, a2, a3, a4, a5, a6, v17, v7, v15, v16);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(a7);
  return v18;
}

uint64_t ConversationBridgeSPI.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ConversationBridgeSPI.messageTypesForSubscription()()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + 24) + 232))();
}

uint64_t ConversationBridgeSPI.aceCommandsGroups()()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + 24) + 240))();
}

uint64_t ConversationBridgeSPI.aceCommands(forGroup:)()
{
  return (*(uint64_t (**)(void))(**(void **)(v0 + 24) + 248))();
}

uint64_t ConversationBridgeSPI.deinit()
{
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ConversationBridgeSPI.__deallocating_deinit()
{
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for QueueIsolatedBridge.init(_:_:_:_:_:) in conformance ConversationBridgeSPI()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t protocol witness for Bridge.messageTypesForSubscription() in conformance ConversationBridgeSPI()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t protocol witness for Bridge.aceCommandsGroups() in conformance ConversationBridgeSPI()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t protocol witness for Bridge.aceCommands(forGroup:) in conformance ConversationBridgeSPI()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t ConversationBridge.executionOutputSubmitter.getter()
{
  return swift_retain();
}

uint64_t ConversationBridge.overrideExecutionClient.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + direct field offset for ConversationBridge.overrideExecutionClient, a1, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
}

uint64_t key path setter for ConversationBridge.runSiriKitExecutorProcessor : ConversationBridge(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  unsigned __int8 v3 = (void *)(*a2 + direct field offset for ConversationBridge.runSiriKitExecutorProcessor);
  swift_beginAccess();
  *unsigned __int8 v3 = v2;
  swift_retain();
  return swift_release();
}

uint64_t ConversationBridge.runSiriKitExecutorProcessor.getter()
{
  return ConversationBridge.runSiriKitExecutorProcessor.getter();
}

{
  swift_beginAccess();
  return swift_retain();
}

void *closure #1 in ConversationBridge.executionClient.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  outlined init with copy of ReferenceResolutionClientProtocol?(a1 + direct field offset for ConversationBridge.overrideExecutionClient, (uint64_t)&v6, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
  if (v7)
  {
    outlined init with take of ReferenceResolutionClientProtocol(&v6, (uint64_t)v8);
    return (void *)outlined init with take of ReferenceResolutionClientProtocol(v8, (uint64_t)a2);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v6, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
    uint64_t v4 = swift_allocObject();
    swift_weakInit();
    uint64_t v5 = type metadata accessor for ConversationRuntimeClient();
    swift_allocObject();
    uint64_t result = ConversationRuntimeClient.init(onConnectionInterrupted:)((uint64_t)partial apply for closure #1 in closure #1 in ConversationBridge.executionClient.getter, v4);
    a2[3] = v5;
    a2[4] = &protocol witness table for ConversationRuntimeClient;
    *a2 = result;
  }
  return result;
}

uint64_t closure #1 in closure #1 in ConversationBridge.executionClient.getter(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    uint64_t v7 = type metadata accessor for TaskPriority();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v4, 1, 1, v7);
    swift_retain();
    id v8 = a1;
    if (one-time initialization token for shared != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v9 = static MessageBusActor.shared;
    uint64_t v10 = lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, 255, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
    id v11 = (void *)swift_allocObject();
    void v11[2] = v9;
    v11[3] = v10;
    v11[4] = v6;
    v11[5] = a1;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in closure #1 in ConversationBridge.executionClient.getter, (uint64_t)v11);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in ConversationBridge.executionClient.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 40) = a4;
  *(void *)(v5 + 48) = a5;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in closure #1 in ConversationBridge.executionClient.getter, v6, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in ConversationBridge.executionClient.getter()
{
  (*(void (**)(void))(**(void **)(v0 + 40) + 1184))(*(void *)(v0 + 48));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ConversationBridge.executionClient.setter(long long *a1)
{
  outlined init with take of ReferenceResolutionClientProtocol(a1, (uint64_t)v4);
  uint64_t v2 = v1 + direct field offset for ConversationBridge.$__lazy_storage_$_executionClient;
  swift_beginAccess();
  outlined assign with take of (Input, AnyFlow, SiriEnvironment)((uint64_t)v4, v2, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
  return swift_endAccess();
}

void (*ConversationBridge.executionClient.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x98uLL);
  *a1 = v3;
  v3[18] = v1;
  ConversationBridge.executionClient.getter(v3);
  return ConversationBridge.executionClient.modify;
}

void ConversationBridge.executionClient.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  uint64_t v3 = (long long *)(*a1 + 40);
  uint64_t v4 = *a1 + 80;
  if (a2)
  {
    uint64_t v5 = v2[18];
    outlined init with copy of ReferenceResolutionClientProtocol(*a1, (uint64_t)v3);
    outlined init with take of ReferenceResolutionClientProtocol(v3, v4);
    uint64_t v6 = v5 + direct field offset for ConversationBridge.$__lazy_storage_$_executionClient;
    swift_beginAccess();
    outlined assign with take of (Input, AnyFlow, SiriEnvironment)(v4, v6, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
  }
  else
  {
    uint64_t v7 = v2[18];
    outlined init with take of ReferenceResolutionClientProtocol((long long *)*a1, (uint64_t)v3);
    uint64_t v8 = v7 + direct field offset for ConversationBridge.$__lazy_storage_$_executionClient;
    swift_beginAccess();
    outlined assign with take of (Input, AnyFlow, SiriEnvironment)((uint64_t)v3, v8, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
    swift_endAccess();
  }

  free(v2);
}

uint64_t NonRequestExecutionBridgeDelegate.__allocating_init(executionOutputSubmitter:userId:serviceHelper:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a2, v6 + OBJC_IVAR____TtC14SiriKitRuntime33NonRequestExecutionBridgeDelegate_userId, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  *(void *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime33NonRequestExecutionBridgeDelegate_serviceHelper) = a3;
  return v6;
}

uint64_t ConversationBridge.nonRequestBridgePublisher.setter(uint64_t a1)
{
  *(void *)(v1 + direct field offset for ConversationBridge.$__lazy_storage_$_nonRequestBridgePublisher) = a1;
  return swift_release();
}

uint64_t (*ConversationBridge.nonRequestBridgePublisher.modify(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = ConversationBridge.nonRequestBridgePublisher.getter();
  return ConversationBridge.nonRequestBridgePublisher.modify;
}

uint64_t ConversationBridge.nonRequestBridgePublisher.modify(void *a1)
{
  *(void *)(a1[1] + direct field offset for ConversationBridge.$__lazy_storage_$_nonRequestBridgePublisher) = *a1;
  return swift_release();
}

uint64_t ConversationBridge.rraasClient.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &direct field offset for ConversationBridge.rraasClient, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
}

uint64_t (*ConversationBridge.rraasClient.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t ConversationBridge.correctionsPlatformClient.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &direct field offset for ConversationBridge.correctionsPlatformClient, &demangling cache variable for type metadata for CorrectionsHandling?);
}

uint64_t (*ConversationBridge.correctionsPlatformClient.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationBridge.networkAvailabilityProvider.setter(uint64_t a1)
{
  return ConversationBridge.networkAvailabilityProvider.setter(a1, &direct field offset for ConversationBridge.networkAvailabilityProvider);
}

uint64_t (*ConversationBridge.networkAvailabilityProvider.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationBridge.coreTelephonyServiceProvider.setter(uint64_t a1)
{
  return ConversationBridge.networkAvailabilityProvider.setter(a1, &direct field offset for ConversationBridge.coreTelephonyServiceProvider);
}

uint64_t ConversationBridge.networkAvailabilityProvider.setter(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(v2 + *a2);
  swift_beginAccess();
  *uint64_t v4 = a1;
  return swift_release();
}

uint64_t (*ConversationBridge.coreTelephonyServiceProvider.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for ConversationBridge.currentSessionId : ConversationBridge(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 904))(v6);
}

uint64_t ConversationBridge.currentSessionId.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &direct field offset for ConversationBridge.currentSessionId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t (*ConversationBridge.currentSessionId.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationBridge.sessionState.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &direct field offset for ConversationBridge.sessionState, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
}

uint64_t (*ConversationBridge.sessionState.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t key path setter for ConversationBridge.sessionUserId : ConversationBridge(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  return (*(uint64_t (**)(char *))(**(void **)a2 + 952))(v6);
}

uint64_t ConversationBridge.sessionUserId.setter(uint64_t a1)
{
  return ConversationBridge.rraasClient.setter(a1, &direct field offset for ConversationBridge.sessionUserId, (uint64_t *)&demangling cache variable for type metadata for UserID?);
}

uint64_t (*ConversationBridge.sessionUserId.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationBridge.isMUXEnabled.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + direct field offset for ConversationBridge.isMUXEnabled);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*ConversationBridge.isMUXEnabled.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

void ConversationBridge.muxContextMessage.setter(void *a1)
{
  uint64_t v3 = (void **)(v1 + direct field offset for ConversationBridge.muxContextMessage);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
}

uint64_t (*ConversationBridge.muxContextMessage.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationBridge.userSessionState.getter()
{
  uint64_t v1 = v0 + direct field offset for ConversationBridge.userSessionState;
  swift_beginAccess();
  uint64_t v2 = *(void *)v1;
  outlined copy of UserSessionState?(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t ConversationBridge.userSessionState.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + direct field offset for ConversationBridge.userSessionState);
  swift_beginAccess();
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  uint64_t *v5 = a1;
  v5[1] = a2;
  outlined copy of UserSessionState?(a1, a2);
  outlined consume of UserSessionState?(v6, v7);
  return outlined consume of UserSessionState?(a1, a2);
}

uint64_t (*ConversationBridge.userSessionState.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationBridge.recentDialogTracker.getter()
{
  return swift_retain();
}

void *ConversationBridge.init(name:messagePublisher:serviceHelper:conversationSessionsManaging:rrClient:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = *(void *)(a7 + 24);
  uint64_t v14 = *(void *)(a7 + 32);
  uint64_t v16 = __swift_mutable_project_boxed_opaque_existential_1(a7, v15);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v19 + 16))(v18);
  os_log_type_t v20 = specialized ConversationBridge.init(name:messagePublisher:serviceHelper:conversationSessionsManaging:rrClient:featureChecker:)(a1, a2, a3, a4, a5, a6, (uint64_t)v18, v22[1], v15, v14);
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(a7);
  return v20;
}

void *ConversationBridge.__allocating_init(name:messagePublisher:serviceHelper:conversationSessionsManaging:conversationClient:rrClient:correctionsPlatformClient:networkAvailabilityProvider:coreTelephonyServiceProvider:recentDialogTracker:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return ConversationBridge.init(name:messagePublisher:serviceHelper:conversationSessionsManaging:conversationClient:rrClient:correctionsPlatformClient:networkAvailabilityProvider:coreTelephonyServiceProvider:recentDialogTracker:featureChecker:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void *ConversationBridge.init(name:messagePublisher:serviceHelper:conversationSessionsManaging:conversationClient:rrClient:correctionsPlatformClient:networkAvailabilityProvider:coreTelephonyServiceProvider:recentDialogTracker:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void (*v57)(long long *__return_ptr, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  id v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned char v81[40];
  long long v82;

  uint64_t v13 = v12;
  objc_super v73 = a4;
  uint64_t v72 = a2;
  uint64_t v71 = a1;
  id v70 = type metadata accessor for Logger();
  uint64_t v68 = *(void *)(v70 - 8);
  MEMORY[0x1F4188790](v70);
  unint64_t v69 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v20 = (uint64_t *)(v12 + direct field offset for ConversationBridge.contextDonator);
  uint64_t v21 = one-time initialization token for sharedInstance;
  swift_retain();
  if (v21 != -1) {
    swift_once();
  }
  long long v74 = a8;
  long long v75 = a7;
  uint64_t v76 = a5;
  uint64_t v77 = (void *)a12;
  uint64_t v79 = a10;
  uint64_t v80 = a11;
  uint64_t v78 = a9;
  uint64_t v22 = static DeviceContextHelper.sharedInstance;
  v20[3] = type metadata accessor for DeviceContextHelper();
  uint64_t v20[4] = (uint64_t)&protocol witness table for DeviceContextHelper;
  *os_log_type_t v20 = v22;
  *(void *)(v13 + direct field offset for ConversationBridge.runSiriKitExecutorProcessor) = 0;
  *(unsigned char *)(v13 + direct field offset for ConversationBridge.isFirstRequestInSession) = 1;
  uint64_t v23 = v13 + direct field offset for ConversationBridge.$__lazy_storage_$_executionClient;
  *(_OWORD *)uint64_t v23 = 0u;
  *(_OWORD *)(v23 + 16) = 0u;
  *(void *)(v23 + 32) = 0;
  *(void *)(v13 + direct field offset for ConversationBridge.$__lazy_storage_$_nonRequestBridgePublisher) = 0;
  uint64_t v24 = v13 + direct field offset for ConversationBridge.rraasClient;
  *(_OWORD *)uint64_t v24 = 0u;
  *(_OWORD *)(v24 + 16) = 0u;
  *(void *)(v24 + 32) = 0;
  uint64_t v25 = v13 + direct field offset for ConversationBridge.correctionsPlatformClient;
  *(_OWORD *)uint64_t v25 = 0u;
  *(_OWORD *)(v25 + 16) = 0u;
  uint64_t v65 = v25;
  *(void *)(v25 + 32) = 0;
  unint64_t v66 = (void *)(v13 + direct field offset for ConversationBridge.networkAvailabilityProvider);
  *(void *)(v13 + direct field offset for ConversationBridge.networkAvailabilityProvider) = 0;
  uint64_t v67 = (void *)(v13 + direct field offset for ConversationBridge.coreTelephonyServiceProvider);
  *(void *)(v13 + direct field offset for ConversationBridge.coreTelephonyServiceProvider) = 0;
  uint64_t v26 = v13 + direct field offset for ConversationBridge.currentSessionId;
  uint64_t v27 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 1, 1, v27);
  uint64_t v28 = v13 + direct field offset for ConversationBridge.sessionState;
  *(_OWORD *)uint64_t v28 = 0u;
  *(_OWORD *)(v28 + 16) = 0u;
  *(void *)(v28 + 32) = 0;
  uint64_t v29 = v13 + direct field offset for ConversationBridge.sessionUserId;
  uint64_t v30 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 1, 1, v30);
  long long v31 = (char *)(v13 + direct field offset for ConversationBridge.isMUXEnabled);
  swift_retain();
  *long long v31 = AFDeviceSupportsSiriMUX();
  *(void *)(v13 + direct field offset for ConversationBridge.muxContextMessage) = 0;
  *(_OWORD *)(v13 + direct field offset for ConversationBridge.userSessionState) = xmmword_1BA0526B0;
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }
  uint64_t v32 = direct field offset for ConversationBridge.instrumentationUtil;
  *(void *)(v13 + direct field offset for ConversationBridge.instrumentationUtil) = static ConversationBridgeInstrumentationUtil.sharedInstance;
  outlined init with copy of ReferenceResolutionClientProtocol(a6, v13 + direct field offset for ConversationBridge.overrideExecutionClient);
  swift_beginAccess();
  char v33 = *v31;
  outlined init with copy of ReferenceResolutionClientProtocol(a3, (uint64_t)&v82);
  type metadata accessor for FeatureChecker();
  swift_allocObject();
  swift_retain();
  uint64_t v34 = v73;
  swift_unknownObjectRetain();
  long long v35 = FeatureChecker.init()();
  type metadata accessor for ConversationOutputSubmitter();
  uint64_t v36 = swift_allocObject();
  uint64_t v37 = specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:muxContextMessage:messagePublisher:featureChecker:)(v34, v33, 0, &v82, (uint64_t)v35, v36);
  *(void *)(v13 + direct field offset for ConversationBridge.executionOutputSubmitter) = v37;
  type metadata accessor for PreExecutionDecisionMaker();
  *(void *)(v13 + direct field offset for ConversationBridge.decisionMaker) = swift_allocObject();
  id v38 = objc_msgSend(self, sel_sharedPreferences);
  type metadata accessor for PreExecutionActionHandler();
  swift_getObjectType();
  uint64_t v39 = *(void *)(v13 + v32);
  type metadata accessor for PreExecutionDialogHandler();
  uint64_t v40 = swift_allocObject();
  uint64_t v64 = a6;
  uint64_t v41 = a3;
  uint64_t v42 = v40;
  *(void *)(v40 + 16) = v37;
  *(void *)(v40 + 24) = v38;
  swift_retain_n();
  id v43 = v38;
  swift_unknownObjectRetain();
  id v44 = v43;
  swift_retain();
  long long v63 = v44;
  *(void *)(v13 + direct field offset for ConversationBridge.preExecutionActionHandler) = specialized PreExecutionActionHandler.__allocating_init(serviceHelper:instrumentationUtil:executionOutputSubmitter:preferences:dialogHandler:)(v34, v39, v37, (uint64_t)v44, v42);
  swift_beginAccess();
  uint64_t v45 = v75;
  outlined assign with copy of ReferenceResolutionClientProtocol?(v75, v24, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  swift_endAccess();
  uint64_t v46 = v65;
  swift_beginAccess();
  uint64_t v47 = v74;
  outlined assign with copy of ReferenceResolutionClientProtocol?(v74, v46, &demangling cache variable for type metadata for CorrectionsHandling?);
  swift_endAccess();
  unint64_t v48 = v66;
  swift_beginAccess();
  *unint64_t v48 = v78;
  swift_retain();
  swift_release();
  unint64_t v49 = v67;
  swift_beginAccess();
  *unint64_t v49 = v79;
  swift_retain();
  swift_release();
  *(void *)(v13 + direct field offset for ConversationBridge.recentDialogTracker) = v80;
  unint64_t v50 = v77;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v77, v13 + direct field offset for ConversationBridge.featureChecker);
  swift_retain();
  swift_release();
  uint64_t v67 = (void *)v41;
  outlined init with copy of ReferenceResolutionClientProtocol(v41, (uint64_t)&v82);
  uint64_t v51 = v76;
  outlined init with copy of ReferenceResolutionClientProtocol(v76, (uint64_t)v81);
  uint64_t v52 = one-time initialization token for conversationBridge;
  swift_unknownObjectRetain();
  if (v52 != -1) {
    swift_once();
  }
  uint64_t v53 = v70;
  uint64_t v54 = __swift_project_value_buffer(v70, (uint64_t)static Logger.conversationBridge);
  uint64_t v55 = (uint64_t)v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v69, v54, v53);
  uint64_t v56 = specialized ConversationRequestAwareBridgeBase.init(withName:messagePublisher:serviceHelper:conversationSessionsManaging:autoRegisterStartRequestMessageBase:logger:)(v71, v72, (uint64_t)&v82, v34, (uint64_t)v81, 1, v55);
  swift_unknownObjectRelease();
  id v57 = *(void (**)(long long *__return_ptr, uint64_t))(*v56 + 752);
  uint64_t v58 = swift_retain();
  v57(&v82, v58);
  (*(void (**)(long long *))(*v56 + 760))(&v82);
  uint64_t v59 = v50[3];
  uint64_t v60 = v50[4];
  __swift_project_boxed_opaque_existential_1(v50, v59);
  uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 8))(v59, v60);
  ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(v61 & 1);

  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v47, &demangling cache variable for type metadata for CorrectionsHandling?);
  outlined destroy of ReferenceResolutionClientProtocol?(v45, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  __swift_destroy_boxed_opaque_existential_1Tm(v64);
  __swift_destroy_boxed_opaque_existential_1Tm(v51);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v67);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v50);
  return v56;
}

uint64_t ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(char a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void (**)(uint64_t (*(*)())(uint64_t), void, uint64_t))(*(void *)v1 + 288);
  uint64_t v5 = type metadata accessor for SessionStartedMessage();
  v4(closure #1 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v5);
  uint64_t v6 = type metadata accessor for SessionEndedMessage();
  v4(closure #2 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v6);
  uint64_t v7 = type metadata accessor for MUXContextMessage();
  v4(closure #3 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v7);
  uint64_t v8 = type metadata accessor for ExecutionSystemSwitchedMessage();
  v4(closure #4 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v8);
  uint64_t v9 = *(void (**)(uint64_t (*(*)())(uint64_t), void, uint64_t))(*(void *)v1 + 464);
  uint64_t v10 = type metadata accessor for FlowOutputResponseMessage();
  v9(closure #5 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v10);
  uint64_t v11 = type metadata accessor for RequestContextMessage();
  v9(closure #6 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v11);
  uint64_t v12 = type metadata accessor for AsrResultCandidateMessage();
  v9(closure #7 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v12);
  uint64_t v13 = type metadata accessor for MUXAsrResultCandidateMessage();
  v9(closure #8 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v13);
  uint64_t v14 = type metadata accessor for NLResultCandidateMessage();
  v9(closure #9 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v14);
  uint64_t v15 = type metadata accessor for PommesResultCandidateMessage();
  v9(closure #10 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v15);
  uint64_t v16 = type metadata accessor for ResultSelectedMessage();
  v9(closure #11 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v16);
  uint64_t v17 = type metadata accessor for CancelRequestMessage();
  v9(closure #12 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v17);
  uint64_t v18 = type metadata accessor for ExecuteNLOnServerMessage();
  v9(closure #13 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v18);
  uint64_t started = type metadata accessor for StartTextRequestMessage();
  v9(closure #14 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, started);
  uint64_t v20 = type metadata accessor for StartDirectActionRequestMessage();
  v9(closure #15 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v20);
  uint64_t v21 = type metadata accessor for StartLocalRequestMessage();
  v9(closure #16 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v21);
  uint64_t v22 = type metadata accessor for StartUnderstandingOnServerRequestMessage();
  v9(closure #17 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v22);
  uint64_t v23 = type metadata accessor for StartUnderstandingOnServerTextRequestMessage();
  v9(closure #18 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v23);
  uint64_t v24 = type metadata accessor for StartCandidateRequestMessage();
  v9(closure #19 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v24);
  uint64_t v25 = type metadata accessor for TextBasedResultCandidateMessage();
  v9(closure #20 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v25);
  uint64_t v26 = type metadata accessor for GestureBasedResultCandidateMessage();
  v9(closure #21 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v26);
  uint64_t v27 = type metadata accessor for DirectActionResultCandidateMessage();
  v9(closure #22 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v27);
  uint64_t v28 = type metadata accessor for NLRepetitionMessage();
  v9(closure #23 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v28);
  uint64_t v29 = type metadata accessor for StartCorrectedSpeechRequestMessage();
  v9(closure #24 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v29);
  uint64_t v30 = type metadata accessor for StartSpeechRequestMessage();
  v9(closure #25 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v30);
  uint64_t v31 = type metadata accessor for StartChildTextRequestMessage();
  v9(closure #26 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v31);
  uint64_t v32 = type metadata accessor for StartChildSpeechRequestMessage();
  v9(closure #27 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v32);
  uint64_t v33 = type metadata accessor for StartIFRequestMessage();
  v9(closure #28 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v33);
  uint64_t v34 = type metadata accessor for TRPCandidateRequestMessage();
  v9(closure #29 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v34);
  uint64_t v35 = type metadata accessor for TextBasedTRPCandidateMessage();
  v9(closure #30 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v35);
  uint64_t v36 = type metadata accessor for TTResponseMessage();
  v9(closure #31 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v36);
  uint64_t v37 = *(void *)(v1 + direct field offset for ConversationBridge.featureChecker + 24);
  uint64_t v38 = *(void *)(v1 + direct field offset for ConversationBridge.featureChecker + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + direct field offset for ConversationBridge.featureChecker), v37);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v38 + 32))(v37, v38))
  {
    uint64_t v39 = type metadata accessor for NLRoutingDecisionMessage();
    v9(closure #32 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v39);
  }
  uint64_t v40 = type metadata accessor for SpeechStopDetectedMessage();
  v9(closure #33 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v40);
  uint64_t v41 = type metadata accessor for MultiUserStoppedListeningForSpeechContinuationMessage();
  v9(closure #34 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v41);
  uint64_t v42 = type metadata accessor for StoppedListeningForSpeechContinuationMessage();
  v9(closure #35 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v42);
  uint64_t v43 = type metadata accessor for StoppedListeningForTextContinuationMessage();
  v9(closure #36 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v43);
  uint64_t v44 = type metadata accessor for RunPommesResponseMessage();
  v9(closure #37 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v44);
  uint64_t v45 = type metadata accessor for PommesTRPCandidateMessage();
  v9(closure #38 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v45);
  uint64_t active = type metadata accessor for ActiveUserSessionDetectedMessage();
  v4(closure #39 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, active);
  if (a1)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static Logger.conversationBridge);
    unint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v48, v49))
    {
      unint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v50 = 0;
      _os_log_impl(&dword_1B9C64000, v48, v49, "AssistantEngine feature flag is enabled, listening for RunSiriKitExecutorMessage on message bus instead of RunSiriKitExecutor ACE command", v50, 2u);
      MEMORY[0x1BA9E48C0](v50, -1, -1);
    }

    uint64_t v51 = type metadata accessor for RunSiriKitExecutorMessage();
    v4(closure #40 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v51);
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    __swift_project_value_buffer(v52, (uint64_t)static Logger.conversationBridge);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v55 = 0;
      _os_log_impl(&dword_1B9C64000, v53, v54, "AssistantEngine feature flag is disabled, listening for RunSiriKitExecutor ACE command instead of RunSiriKitExecutorMessage from message bus", v55, 2u);
      MEMORY[0x1BA9E48C0](v55, -1, -1);
    }

    uint64_t v56 = *(void (**)(uint64_t (*(*)())(uint64_t, uint64_t, uint64_t, uint64_t), void, uint64_t))(*(void *)v2 + 296);
    uint64_t v57 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor);
    v56(closure #41 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v57);
  }
  uint64_t v64 = *(void (**)(uint64_t (*(*)())(uint64_t, uint64_t, uint64_t, uint64_t), void, uint64_t))(*(void *)v2 + 296);
  uint64_t v58 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SARDServerContextUpdateCandidate);
  v64(closure #42 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v58);
  uint64_t v59 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SARDFlowOutputCandidate);
  v64(closure #43 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v59);
  uint64_t v60 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAIntentGroupSiriKitPluginSignal);
  v64(closure #44 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v60);
  uint64_t v61 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupSiriKitClearContext);
  v64(closure #45 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v61);
  uint64_t v62 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SARDRemoteExecutionContextUpdate);

  return ((uint64_t (*)(uint64_t (*(*)())(uint64_t, uint64_t, uint64_t, uint64_t), void, uint64_t))v64)(closure #46 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:), 0, v62);
}

uint64_t (*closure #1 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #2 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #2 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #3 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #3 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #4 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #4 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #5 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #5 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #6 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #6 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #7 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #7 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #8 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #8 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #9 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #9 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #10 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #10 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #11 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #11 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #12 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #12 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #13 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #13 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #14 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #14 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #15 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #15 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #16 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #16 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #17 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #17 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #18 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #18 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #19 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #19 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #20 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #20 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #21 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #21 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #22 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #22 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #23 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #23 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #24 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #24 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #25 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #25 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #26 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #26 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #27 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #27 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #28 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #28 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #29 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #29 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #30 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #30 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #31 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #31 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #32 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #32 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #33 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #33 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #34 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #34 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #35 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #35 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #36 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #36 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #37 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #37 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #38 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #38 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #39 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #39 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #40 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1)
{
  return partial apply for closure #1 in closure #40 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #41 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return partial apply for closure #1 in closure #41 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #42 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return partial apply for closure #1 in closure #42 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #43 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return partial apply for closure #1 in closure #43 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #44 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return partial apply for closure #1 in closure #44 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #45 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return partial apply for closure #1 in closure #45 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t (*closure #46 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)())(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return partial apply for closure #1 in closure #46 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:);
}

uint64_t closure #1 in ConversationBridge.asyncInit()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a4;
  uint64_t v5 = type metadata accessor for OSSignpostID();
  v4[11] = v5;
  v4[12] = *(void *)(v5 - 8);
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  v4[15] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ConversationBridge.asyncInit(), v6, 0);
}

uint64_t closure #1 in ConversationBridge.asyncInit()()
{
  uint64_t v26 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = v0[10];
  id v2 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  uint64_t v3 = os_signpost(_:dso:log:name:signpostID:_:_:)();
  (*(void (**)(uint64_t))(*(void *)v1 + 800))(v3);
  uint64_t v4 = v0[5];
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v0 + 2), &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  if (!v4)
  {
    uint64_t v5 = v0[10];
    uint64_t v6 = type metadata accessor for ReferenceResolutionClient();
    uint64_t v7 = ReferenceResolutionClient.__allocating_init()();
    uint64_t v24 = v6;
    uint64_t v25 = (_UNKNOWN **)MEMORY[0x1E4FA1F98];
    v23[0] = v7;
    (*(void (**)(void *))(*(void *)v5 + 808))(v23);
  }
  uint64_t v8 = v0[14];
  uint64_t v10 = v0[12];
  uint64_t v9 = v0[13];
  uint64_t v11 = v0[10];
  uint64_t v21 = v0[15];
  uint64_t v22 = v0[11];
  static os_signpost_type_t.end.getter();
  uint64_t v12 = (void *)static Log.executor;
  os_signpost(_:dso:log:name:signpostID:)();
  id v13 = v12;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  uint64_t v14 = type metadata accessor for CorrectionsPlatformClient();
  swift_allocObject();
  uint64_t v15 = CorrectionsPlatformClient.init()();
  uint64_t v24 = v14;
  uint64_t v25 = &protocol witness table for CorrectionsPlatformClient;
  v23[0] = v15;
  (*(void (**)(void *))(*(void *)v11 + 832))(v23);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  id v16 = v13;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  uint64_t v17 = SiriEnvironment.networkAvailability.getter();
  swift_release();
  (*(void (**)(uint64_t))(*(void *)v11 + 856))(v17);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v18(v9, v22);
  v18(v8, v22);
  v18(v21, v22);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

void ConversationBridge.handleMUXContextMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v31 - v8;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
  id v12 = a1;
  id v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v31 = v11;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v33 = v9;
    id v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v32 = v7;
    uint64_t v18 = (void *)v17;
    *(_DWORD *)id v16 = 138412290;
    id v34 = v12;
    id v19 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v18 = v12;

    _os_log_impl(&dword_1B9C64000, v13, v14, "ExecutionBridge received message: %@", v16, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v20 = v18;
    uint64_t v7 = v32;
    MEMORY[0x1BA9E48C0](v20, -1, -1);
    uint64_t v21 = v16;
    uint64_t v9 = v33;
    MEMORY[0x1BA9E48C0](v21, -1, -1);
  }
  else
  {
  }
  if ((*(uint64_t (**)(void))(*(void *)v2 + 968))())
  {
    uint64_t v22 = *(void (**)(id))(*(void *)v2 + 1000);
    id v23 = v12;
    v22(v12);
    uint64_t v24 = *(void (**)(id))(**(void **)(v2
                                                  + direct field offset for ConversationBridge.executionOutputSubmitter)
                                    + 184);
    id v25 = v23;
    v24(v12);
    MUXContextMessage.userIdOfPrimaryUser()((uint64_t)v7);
    uint64_t v26 = type metadata accessor for UserID();
    uint64_t v27 = *(void *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v7, 1, v26) == 1)
    {
      (*(void (**)(void))(*(void *)v2 + 944))();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v9, v7, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v9, 0, 1, v26);
    }
    (*(void (**)(char *))(*(void *)v2 + 952))(v9);
  }
  else
  {
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl(&dword_1B9C64000, v28, v29, "Ignoring MUXContextMessage since MUX is not enabled", v30, 2u);
      MEMORY[0x1BA9E48C0](v30, -1, -1);
    }
  }
}

uint64_t ConversationBridge.handleActiveUserSessionDetectedMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v5;

    _os_log_impl(&dword_1B9C64000, v6, v7, "ExecutionBridge received message: %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v9, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  else
  {
  }
  uint64_t active = ActiveUserSessionDetectedMessage.activeUserPersonaId.getter();
  uint64_t v13 = v12;
  if (one-time initialization token for guestPersonaId != -1) {
    swift_once();
  }
  if (active == static UserSessionState.guestPersonaId && v13 == *(void *)algn_1E9F3D6D8
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t active = 0;
    uint64_t v13 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 1024))(active, v13);
}

uint64_t ConversationBridge.handleRunSiriKitExecutorMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = v2;
  id v5 = a1;
  swift_retain();
  uint64_t v6 = (void *)RunSiriKitExecutorMessage.command.getter();
  os_log_type_t v7 = (void *)RunSiriKitExecutorMessage.commandExecutionInfo.getter();
  uint64_t v8 = RunSiriKitExecutorMessage.invocationId.getter();
  uint64_t v10 = v9;
  swift_retain();
  ConversationBridge.doHandleAceRunSiriKitExecutor(command:executionContext:plannerInvocationId:reply:)((uint64_t)v6, v7, v8, v10, (uint64_t)partial apply for closure #1 in ConversationBridge.handleRunSiriKitExecutorMessage(_:), v4);
  swift_release_n();

  return swift_bridgeObjectRelease();
}

void closure #1 in ConversationBridge.handleRunSiriKitExecutorMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = &v24[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v25 = a3;
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  id v11 = objc_allocWithZone((Class)type metadata accessor for RunSiriKitExecutorResponseMessage());
  uint64_t v12 = RunSiriKitExecutorResponseMessage.init(build:)();
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    uint64_t v14 = type metadata accessor for TaskPriority();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v10, 1, 1, v14);
    uint64_t v15 = one-time initialization token for shared;
    swift_retain();
    id v16 = v13;
    if (v15 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v17 = static MessageBusActor.shared;
    uint64_t v18 = lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, 255, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
    id v19 = (void *)swift_allocObject();
    void v19[2] = v17;
    v19[3] = v18;
    v19[4] = a4;
    v19[5] = v16;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCSb_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in ConversationBridge.handleRunSiriKitExecutorMessage(_:), (uint64_t)v19);

    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      id v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v23 = 0;
      _os_log_impl(&dword_1B9C64000, v21, v22, "Could not build RunSiriKitExecutorResponseMessage: missing fields?", v23, 2u);
      MEMORY[0x1BA9E48C0](v23, -1, -1);
    }
  }
}

uint64_t closure #1 in closure #1 in ConversationBridge.handleRunSiriKitExecutorMessage(_:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v9 - 8);
  id v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MessageBase.assistantId.getter();
  RunSiriKitExecutorResponseMessage.Builder.assistantId.setter();
  RequestMessageBase.requestId.getter();
  RunSiriKitExecutorResponseMessage.Builder.requestId.setter();
  SessionMessageBase.sessionId.getter();
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 0, 1, v12);
  RunSiriKitExecutorResponseMessage.Builder.sessionId.setter();
  uint64_t v13 = *MEMORY[0x1E4FA2328];
  uint64_t v14 = type metadata accessor for MessageSource();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 104))(v8, v13, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v8, 0, 1, v14);
  RunSiriKitExecutorResponseMessage.Builder.source.setter();
  id v16 = a3;
  RunSiriKitExecutorResponseMessage.Builder.response.setter();
  id v17 = a4;
  RunSiriKitExecutorResponseMessage.Builder.error.setter();
  RunSiriKitExecutorMessage.invocationId.getter();
  return RunSiriKitExecutorResponseMessage.Builder.invocationId.setter();
}

uint64_t closure #2 in closure #1 in ConversationBridge.handleRunSiriKitExecutorMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[6] = a4;
  v5[7] = a5;
  v5[5] = a1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #2 in closure #1 in ConversationBridge.handleRunSiriKitExecutorMessage(_:), v6, 0);
}

uint64_t closure #2 in closure #1 in ConversationBridge.handleRunSiriKitExecutorMessage(_:)()
{
  uint64_t v1 = (unsigned char *)v0[5];
  __swift_project_boxed_opaque_existential_1((void *)(v0[6] + 32), *(void *)(v0[6] + 56));
  *uint64_t v1 = dispatch thunk of MessagePublishing.postMessage(_:)() & 1;
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t ConversationBridge.handleStartSessionMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  v36[1] = *v2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v39 = *(void *)(v4 - 8);
  uint64_t v40 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v38 = (char *)v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v37 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
  id v12 = a1;
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    v36[0] = v10;
    id v16 = (uint8_t *)v15;
    id v17 = (void *)swift_slowAlloc();
    *(_DWORD *)id v16 = 138412290;
    v41[0] = v12;
    id v18 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v17 = v12;

    _os_log_impl(&dword_1B9C64000, v13, v14, "ExecutionBridge received message: %@", v16, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v17, -1, -1);
    uint64_t v19 = v16;
    uint64_t v10 = (char *)v36[0];
    MEMORY[0x1BA9E48C0](v19, -1, -1);
  }
  else
  {
  }
  type metadata accessor for ClearExecutionContext();
  uint64_t v20 = swift_allocObject();
  SessionStartedMessage.userId.getter();
  uint64_t v21 = type metadata accessor for UserID();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v10, 0, 1, v21);
  uint64_t v22 = (*(uint64_t (**)(char *))(*v2 + 952))(v10);
  (*(void (**)(void *__return_ptr, uint64_t))(*v2 + 752))(v41, v22);
  uint64_t v23 = v42;
  uint64_t v24 = v43;
  __swift_project_boxed_opaque_existential_1(v41, v42);
  uint64_t v25 = (*(uint64_t (**)(void))(*v2 + 776))();
  (*(void (**)(uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v24 + 32))(v20, v25, &protocol witness table for NonRequestExecutionBridgeDelegate, v23, v24);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v41);
  if (AFIsInternalInstall() && (SessionStartedMessage.understandingOnDevice.getter() & 1) == 0)
  {
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v28 = v27;
    os_log_type_t v29 = (void *)v2[9];
    swift_getObjectType();
    specialized static ConversationBridge.sendShowRequestHandlingStatus(withStatus:serviceHelper:requestId:completion:)(v26, v28, v29, 0, 0, 0, 0);
    swift_bridgeObjectRelease();
  }
  uint64_t v30 = (char *)v2 + direct field offset for ConversationBridge.isFirstRequestInSession;
  swift_beginAccess();
  *uint64_t v30 = 1;
  uint64_t v31 = v37;
  SessionMessageBase.sessionId.getter();
  uint64_t v33 = v39;
  uint64_t v32 = v40;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v31, 0, 1, v40);
  (*(void (**)(char *))(*v2 + 904))(v31);
  __swift_project_boxed_opaque_existential_1(v2 + 10, v2[13]);
  id v34 = v38;
  SessionMessageBase.sessionId.getter();
  dispatch thunk of ConversationSessionsManaging.conversationSessionState(forConversationSessionId:)();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v32);
  (*(void (**)(void *))(*v2 + 928))(v41);
  return swift_release();
}

void static ConversationBridge.sendShowRequestHandlingStatus(withStatus:serviceHelper:requestId:completion:)(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void ConversationBridge.handleSessionEndedMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v47 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v46 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  unint64_t v50 = (char *)&v45 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  id v18 = (char *)&v45 - v17;
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v45 - v20;
  (*(void (**)(uint64_t))(*(void *)v1 + 896))(v19);
  id v48 = a1;
  SessionMessageBase.sessionId.getter();
  uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v45(v18, 0, 1, v4);
  uint64_t v22 = (uint64_t)&v10[*(int *)(v8 + 56)];
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v21, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v18, v22, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v49 = v5;
  uint64_t v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v23((uint64_t)v10, 1, v4) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    uint64_t v24 = v4;
    if (v23(v22, 1, v4) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_13:
      uint64_t v40 = (void (*)(_OWORD *, void))(*(uint64_t (**)(_OWORD *))(*(void *)v2 + 416))(v51);
      uint64_t v42 = v41;
      swift_bridgeObjectRelease();
      *uint64_t v42 = MEMORY[0x1E4FBC868];
      v40(v51, 0);
      uint64_t v43 = v46;
      v45(v46, 1, 1, v24);
      (*(void (**)(char *))(*(void *)v2 + 904))(v43);
      uint64_t v52 = 0;
      memset(v51, 0, sizeof(v51));
      (*(void (**)(_OWORD *))(*(void *)v2 + 928))(v51);
      uint64_t v44 = (*(uint64_t (**)(void, uint64_t))(*(void *)v2 + 1024))(0, 2);
      (*(void (**)(uint64_t))(**(void **)(v2 + direct field offset for ConversationBridge.recentDialogTracker)
                                      + 240))(v44);
      return;
    }
    goto LABEL_6;
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t)v50, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if (v23(v22, 1, v4) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v4);
    uint64_t v24 = v4;
LABEL_6:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for (UUID?, UUID?));
    goto LABEL_7;
  }
  uint64_t v36 = v49;
  uint64_t v37 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 32))(v47, v22, v4);
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
  char v38 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v39 = *(void (**)(char *, uint64_t))(v36 + 8);
  v39(v37, v4);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v18, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v39(v50, v4);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v24 = v4;
  if (v38) {
    goto LABEL_13;
  }
LABEL_7:
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationBridge);
  id v26 = v48;
  unint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v27, v28))
  {
    os_log_type_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(void *)&v51[0] = v30;
    *(_DWORD *)os_log_type_t v29 = 136315138;
    uint64_t v31 = v47;
    SessionMessageBase.sessionId.getter();
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
    uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v33 = v24;
    unint64_t v35 = v34;
    (*(void (**)(char *, uint64_t))(v49 + 8))(v31, v33);
    uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v35, (uint64_t *)v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v27, v28, "SessionId: %s is not the current session, ignoring", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v30, -1, -1);
    MEMORY[0x1BA9E48C0](v29, -1, -1);
  }
  else
  {
  }
}

void ConversationBridge.handleExecutionSystemSwitchedMessage(_:)(void *a1)
{
  uint64_t v100 = type metadata accessor for UserID();
  uint64_t v99 = *(void *)(v100 - 8);
  MEMORY[0x1F4188790](v100);
  int v98 = &v95[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v3 = type metadata accessor for ExecutionSystemSwitchedMessage.SwitchType();
  uint64_t v105 = *(void *)(v3 - 8);
  uint64_t v106 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v104 = &v95[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v112 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = &v95[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = &v95[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  v103 = &v95[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = &v95[-v15];
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v19 = &v95[-v18];
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = &v95[-v20];
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v110 = __swift_project_value_buffer(v22, (uint64_t)static Logger.conversationBridge);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v111 = v5;
  v109 = v7;
  uint64_t v107 = v16;
  if (v25)
  {
    uint64_t v26 = swift_slowAlloc();
    unsigned int v108 = a1;
    unint64_t v27 = (uint8_t *)v26;
    uint64_t v28 = swift_slowAlloc();
    v117[0] = v28;
    *(_DWORD *)unint64_t v27 = 136315138;
    *(void *)&long long v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000028, 0x80000001BA064860, v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v23, v24, "%s", v27, 0xCu);
    swift_arrayDestroy();
    uint64_t v29 = v28;
    uint64_t v5 = v111;
    MEMORY[0x1BA9E48C0](v29, -1, -1);
    uint64_t v30 = v27;
    a1 = v108;
    MEMORY[0x1BA9E48C0](v30, -1, -1);
  }

  uint64_t v31 = (void (**)(void))(*v113 + 896);
  uint64_t v102 = *v31;
  uint64_t v101 = v31;
  v102();
  SessionMessageBase.sessionId.getter();
  uint64_t v32 = v112;
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v112 + 56))(v19, 0, 1, v5);
  uint64_t v33 = (uint64_t)&v10[*(int *)(v8 + 48)];
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v21, (uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v19, v33, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  unint64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
  if (v34((uint64_t)v10, 1, v5) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (v34(v33, 1, v5) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      unint64_t v35 = v113;
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  uint64_t v36 = v34;
  uint64_t v37 = (uint64_t)v107;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t)v107, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  os_log_t v97 = v36;
  if (v36(v33, 1, v5) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v37, v5);
    unint64_t v34 = v97;
LABEL_10:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for (UUID?, UUID?));
    goto LABEL_18;
  }
  char v38 = v109;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v32 + 32))(v109, v33, v5);
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
  int v96 = dispatch thunk of static Equatable.== infix(_:_:)();
  unsigned int v108 = a1;
  uint64_t v39 = *(void (**)(unsigned char *, uint64_t))(v32 + 8);
  v39(v38, v5);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v39((unsigned char *)v37, v5);
  a1 = v108;
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  unint64_t v35 = v113;
  unint64_t v34 = v97;
  if ((v96 & 1) == 0)
  {
LABEL_18:
    swift_retain_n();
    id v76 = a1;
    uint64_t v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v77, v78))
    {
      uint64_t v79 = swift_slowAlloc();
      uint64_t v110 = swift_slowAlloc();
      v117[0] = v110;
      *(_DWORD *)uint64_t v79 = 136315394;
      uint64_t v80 = (uint64_t)v103;
      v102();
      uint64_t v81 = v111;
      if (v34(v80, 1, v111))
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v80, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        unint64_t v82 = 0xE500000000000000;
        uint64_t v83 = 0x3E6C696E3CLL;
        uint64_t v84 = v112;
        uint64_t v85 = v109;
      }
      else
      {
        uint64_t v84 = v112;
        uint64_t v85 = v109;
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v112 + 16))(v109, v80, v81);
        outlined destroy of ReferenceResolutionClientProtocol?(v80, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        uint64_t v83 = UUID.uuidString.getter();
        unint64_t v82 = v86;
        (*(void (**)(unsigned char *, uint64_t))(v84 + 8))(v85, v81);
      }
      *(void *)&long long v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v82, v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v79 + 12) = 2080;
      SessionMessageBase.sessionId.getter();
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
      uint64_t v87 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v88 = v81;
      unint64_t v90 = v89;
      (*(void (**)(unsigned char *, uint64_t))(v84 + 8))(v85, v88);
      *(void *)&long long v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v90, v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v77, v78, "SessionId mismatch. CurrentSessionId: %s, executionSystemSwitchedMessage.sessionId: %s", (uint8_t *)v79, 0x16u);
      uint64_t v91 = v110;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v91, -1, -1);
      MEMORY[0x1BA9E48C0](v79, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    return;
  }
LABEL_12:
  uint64_t v40 = v104;
  ExecutionSystemSwitchedMessage.switchType.getter();
  uint64_t v42 = v105;
  uint64_t v41 = v106;
  int v43 = (*(uint64_t (**)(unsigned char *, uint64_t))(v105 + 88))(v40, v106);
  int v44 = *MEMORY[0x1E4FA21B0];
  (*(void (**)(unsigned char *, uint64_t))(v42 + 8))(v40, v41);
  if (v43 == v44)
  {
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v47 = 0;
      _os_log_impl(&dword_1B9C64000, v45, v46, "Sending ClearExecutionContext to Conversation", v47, 2u);
      MEMORY[0x1BA9E48C0](v47, -1, -1);
    }

    type metadata accessor for ClearExecutionContext();
    uint64_t v48 = swift_allocObject();
    (*(void (**)(uint64_t *__return_ptr))(*v35 + 752))(v117);
    uint64_t v49 = v118;
    uint64_t v50 = v119;
    __swift_project_boxed_opaque_existential_1(v117, v118);
    uint64_t v51 = (*(uint64_t (**)(void))(*v35 + 776))();
    (*(void (**)(uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v50 + 32))(v48, v51, &protocol witness table for NonRequestExecutionBridgeDelegate, v49, v50);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v117);
    __swift_project_boxed_opaque_existential_1(v35 + 10, v35[13]);
    uint64_t v52 = v109;
    SessionMessageBase.sessionId.getter();
    dispatch thunk of ConversationSessionsManaging.conversationSessionState(forConversationSessionId:)();
    (*(void (**)(unsigned char *, uint64_t))(v112 + 8))(v52, v111);
    if (v116)
    {
      uint64_t v113 = (void *)v48;
      outlined init with take of ReferenceResolutionClientProtocol(&v115, (uint64_t)v117);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(ConversationSessionKey, Any?)>);
      uint64_t v53 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ConversationSessionKey, Any?))
                  - 8);
      uint64_t v54 = *(void *)(*(void *)v53 + 72);
      unint64_t v55 = (*(unsigned __int8 *)(*(void *)v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v53 + 80);
      uint64_t v56 = swift_allocObject();
      *(_OWORD *)(v56 + 16) = xmmword_1BA0526C0;
      unint64_t v57 = v56 + v55;
      uint64_t v58 = (_OWORD *)(v57 + v53[14]);
      uint64_t v59 = *MEMORY[0x1E4FA2610];
      uint64_t v60 = type metadata accessor for ConversationSessionKey();
      uint64_t v61 = *(void (**)(void))(*(void *)(v60 - 8) + 104);
      ((void (*)(unint64_t, uint64_t, uint64_t))v61)(v57, v59, v60);
      *uint64_t v58 = 0u;
      v58[1] = 0u;
      uint64_t v62 = (_OWORD *)(v57 + v54 + v53[14]);
      v61();
      *uint64_t v62 = 0u;
      v62[1] = 0u;
      long long v63 = (_OWORD *)(v57 + 2 * v54 + v53[14]);
      v61();
      _OWORD *v63 = 0u;
      v63[1] = 0u;
      uint64_t v64 = (_OWORD *)(v57 + 3 * v54 + v53[14]);
      v61();
      _OWORD *v64 = 0u;
      v64[1] = 0u;
      uint64_t v65 = (_OWORD *)(v57 + 4 * v54 + v53[14]);
      v61();
      _OWORD *v65 = 0u;
      v65[1] = 0u;
      unint64_t v66 = (_OWORD *)(v57 + 5 * v54 + v53[14]);
      v61();
      *unint64_t v66 = 0u;
      v66[1] = 0u;
      uint64_t v67 = (_OWORD *)(v57 + 6 * v54 + v53[14]);
      v61();
      *uint64_t v67 = 0u;
      v67[1] = 0u;
      specialized Dictionary.init(dictionaryLiteral:)(v56);
      __swift_project_boxed_opaque_existential_1(v117, v118);
      uint64_t v68 = v98;
      ExecutionSystemSwitchedMessage.userId.getter();
      dispatch thunk of ConversationSessionState.updateValues(data:userId:)();
      (*(void (**)(unsigned char *, uint64_t))(v99 + 8))(v68, v100);
      swift_bridgeObjectRetain();
      unint64_t v69 = Logger.logObject.getter();
      os_log_type_t v70 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v69, v70))
      {
        uint64_t v71 = (uint8_t *)swift_slowAlloc();
        uint64_t v72 = swift_slowAlloc();
        *(void *)&long long v115 = v72;
        *(_DWORD *)uint64_t v71 = 136315138;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
        lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, 255, MEMORY[0x1E4FA2670]);
        uint64_t v73 = Dictionary.Keys.description.getter();
        unint64_t v75 = v74;
        swift_bridgeObjectRelease();
        uint64_t v114 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v75, (uint64_t *)&v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v69, v70, "Cleared following keys from ConversationSessionState: %s", v71, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v72, -1, -1);
        MEMORY[0x1BA9E48C0](v71, -1, -1);

        swift_release();
      }
      else
      {

        swift_release();
        swift_bridgeObjectRelease_n();
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v117);
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v115, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
      uint64_t v92 = Logger.logObject.getter();
      os_log_type_t v93 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v92, v93))
      {
        uint64_t v94 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v94 = 0;
        _os_log_impl(&dword_1B9C64000, v92, v93, "Could not find a ConversationSessionState for given sessionId", v94, 2u);
        MEMORY[0x1BA9E48C0](v94, -1, -1);
      }

      swift_release();
    }
  }
}

void *ConversationBridge.createRequestProcessor(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void (*v95)(void *__return_ptr, uint64_t);
  uint64_t v96;
  char *v97;
  void (*v98)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v99)(uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(uint64_t);
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned char *v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  unsigned char *v114;
  char *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v123;
  NSObject *v124;
  os_log_type_t v125;
  uint8_t *v126;
  uint64_t v127;
  NSObject *v128;
  os_log_type_t v129;
  uint8_t *v130;
  long long v131;
  long long v132;
  uint64_t v133;
  id v134;
  uint64_t v135;
  void (*v136)(void);
  unsigned int (*v137)(uint64_t, uint64_t, uint64_t);
  uint64_t v138;
  void (*v139)(uint64_t, uint64_t, uint64_t);
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unsigned char v158[40];
  unsigned char v159[40];
  unsigned char v160[40];
  void v161[5];
  long long v162;
  uint64_t v163;
  long long v164;
  uint64_t v165;
  long long v166;
  uint64_t v167;
  unsigned char v168[48];

  uint64_t v8 = v7;
  v144 = a6;
  v145 = a7;
  uint64_t v155 = a5;
  v156 = a3;
  v151 = a4;
  v142 = a1;
  uint64_t v143 = a2;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v150 = (uint64_t)&v133 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UserID();
  v153 = *(void *)(v11 - 8);
  uint64_t v154 = v11;
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v147 = (uint64_t)&v133 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v152 = (char *)&v133 - v14;
  uint64_t v15 = type metadata accessor for UUID();
  v157 = *(void *)(v15 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v133 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v146 = (uint64_t)&v133 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v149 = (char *)&v133 - v21;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x1F4188790](v22);
  os_log_type_t v24 = (char *)&v133 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v26 = MEMORY[0x1F4188790](v25 - 8);
  v148 = (char *)&v133 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v30 = (char *)&v133 - v29;
  uint64_t v31 = MEMORY[0x1F4188790](v28);
  uint64_t v33 = (char *)&v133 - v32;
  uint64_t v34 = MEMORY[0x1F4188790](v31);
  uint64_t v36 = (char *)&v133 - v35;
  (*(void (**)(long long *__return_ptr, uint64_t))(*v7 + 800))(&v166, v34);
  if (!v167)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v166, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    __swift_project_value_buffer(v53, (uint64_t)static Logger.conversationBridge);
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v56 = 0;
      _os_log_impl(&dword_1B9C64000, v54, v55, "Did not finish initializing ReferenceResolutionClient before receiving a new request. THIS SHOULD NOT HAPPEN!", v56, 2u);
      MEMORY[0x1BA9E48C0](v56, -1, -1);
    }

    goto LABEL_53;
  }
  uint64_t v37 = outlined init with take of ReferenceResolutionClientProtocol(&v166, (uint64_t)v168);
  (*(void (**)(long long *__return_ptr, uint64_t))(*v7 + 824))(&v164, v37);
  if (!v165)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v164, &demangling cache variable for type metadata for CorrectionsHandling?);
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v57 = type metadata accessor for Logger();
    __swift_project_value_buffer(v57, (uint64_t)static Logger.conversationBridge);
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v60 = 0;
      _os_log_impl(&dword_1B9C64000, v58, v59, "Did not finish initializing CorrectionsPlatformClient before receiving a new request. THIS SHOULD NOT HAPPEN!", v60, 2u);
      MEMORY[0x1BA9E48C0](v60, -1, -1);
    }

    goto LABEL_52;
  }
  uint64_t v38 = outlined init with take of ReferenceResolutionClientProtocol(&v164, (uint64_t)&v166);
  uint64_t v39 = (*(uint64_t (**)(uint64_t))(*v7 + 848))(v38);
  if (!v39)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v61 = type metadata accessor for Logger();
    __swift_project_value_buffer(v61, (uint64_t)static Logger.conversationBridge);
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v64 = 0;
      _os_log_impl(&dword_1B9C64000, v62, v63, "Did not finish initializing NetworkAvailabilityProvider before receiving a new request. THIS SHOULD NOT HAPPEN!", v64, 2u);
      MEMORY[0x1BA9E48C0](v64, -1, -1);
    }

    goto LABEL_51;
  }
  uint64_t v140 = v39;
  v141 = v18;
  uint64_t v40 = *(void (**)(void))(*v7 + 896);
  uint64_t v135 = *v7 + 896;
  uint64_t v136 = v40;
  v40();
  uint64_t v41 = v15;
  uint64_t v42 = v157;
  int v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v157 + 16);
  uint64_t v138 = v157 + 16;
  uint64_t v139 = v43;
  v43((uint64_t)v33, v156, v41);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v33, 0, 1, v41);
  uint64_t v44 = (uint64_t)&v24[*(int *)(v22 + 48)];
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v36, (uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v33, v44, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v45 = v42;
  uint64_t v46 = v41;
  uint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
  uint64_t v48 = (void *)(v45 + 48);
  uint64_t v47 = v49;
  if (v49((uint64_t)v24, 1, v46) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v36, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    unsigned int v50 = v47(v44, 1, v46);
    uint64_t v51 = (uint64_t)v141;
    if (v50 == 1)
    {
      uint64_t v52 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      goto LABEL_32;
    }
    goto LABEL_24;
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v24, (uint64_t)v30, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if (v47(v44, 1, v46) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v36, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    (*(void (**)(char *, uint64_t))(v157 + 8))(v30, v46);
    uint64_t v51 = (uint64_t)v141;
LABEL_24:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v24, &demangling cache variable for type metadata for (UUID?, UUID?));
LABEL_25:
    uint64_t v137 = v47;
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v65 = type metadata accessor for Logger();
    __swift_project_value_buffer(v65, (uint64_t)static Logger.conversationBridge);
    v139(v51, v156, v46);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    uint64_t v66 = v51;
    uint64_t v67 = Logger.logObject.getter();
    int v68 = static os_log_type_t.error.getter();
    BOOL v69 = os_log_type_enabled(v67, (os_log_type_t)v68);
    uint64_t v70 = v157;
    if (!v69)
    {
      swift_bridgeObjectRelease_n();

      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v66, v46);
      swift_release_n();
LABEL_51:
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v166);
LABEL_52:
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v168);
LABEL_53:
      uint64_t v114 = (char *)v8 + direct field offset for ConversationBridge.isFirstRequestInSession;
      swift_beginAccess();
      uint64_t v113 = 0;
      goto LABEL_54;
    }
    LODWORD(v156) = v68;
    uint64_t v71 = swift_slowAlloc();
    uint64_t v154 = swift_slowAlloc();
    *(void *)&v164 = v154;
    *(_DWORD *)uint64_t v71 = 136315650;
    uint64_t v72 = (uint64_t)v148;
    v136();
    if (v137(v72, 1, v46))
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v72, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      unint64_t v73 = 0xE300000000000000;
      uint64_t v74 = 7104878;
    }
    else
    {
      long long v115 = v149;
      v139((uint64_t)v149, v72, v46);
      outlined destroy of ReferenceResolutionClientProtocol?(v72, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v74 = UUID.uuidString.getter();
      unint64_t v73 = v116;
      (*(void (**)(char *, uint64_t))(v70 + 8))(v115, v46);
    }
    *(void *)&uint64_t v162 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v73, (uint64_t *)&v164);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v71 + 12) = 2080;
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
    uint64_t v117 = (uint64_t)v141;
    uint64_t v118 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&uint64_t v162 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, v119, (uint64_t *)&v164);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v117, v46);
    *(_WORD *)(v71 + 22) = 2080;
    v120 = v155;
    swift_bridgeObjectRetain();
    *(void *)&uint64_t v162 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v151, v120, (uint64_t *)&v164);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v67, (os_log_type_t)v156, "Request does not belong to current session id: %s, request session id: %s for request id: %s", (uint8_t *)v71, 0x20u);
    uint64_t v121 = v154;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v121, -1, -1);
    MEMORY[0x1BA9E48C0](v71, -1, -1);

LABEL_50:
    swift_release();
    goto LABEL_51;
  }
  uint64_t v134 = v48;
  uint64_t v75 = v157;
  id v76 = *(void (**)(char *, uint64_t, uint64_t))(v157 + 32);
  uint64_t v137 = v47;
  uint64_t v77 = v149;
  v76(v149, v44, v46);
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, 255, MEMORY[0x1E4F27990]);
  LODWORD(v133) = dispatch thunk of static Equatable.== infix(_:_:)();
  os_log_type_t v78 = *(void (**)(char *, uint64_t))(v75 + 8);
  uint64_t v79 = v77;
  uint64_t v47 = v137;
  v78(v79, v46);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v36, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v78(v30, v46);
  uint64_t v52 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v51 = (uint64_t)v141;
  if ((v133 & 1) == 0) {
    goto LABEL_25;
  }
LABEL_32:
  uint64_t v80 = v150;
  (*(void (**)(uint64_t))(*v8 + 944))(v52);
  uint64_t v82 = v153;
  uint64_t v81 = v154;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v153 + 48))(v80, 1, v154) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v80, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v83 = type metadata accessor for Logger();
    __swift_project_value_buffer(v83, (uint64_t)static Logger.conversationBridge);
    uint64_t v84 = Logger.logObject.getter();
    os_log_type_t v85 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v84, v85))
    {
      unint64_t v86 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v86 = 0;
      _os_log_impl(&dword_1B9C64000, v84, v85, "UserId has not been set for current session", v86, 2u);
      MEMORY[0x1BA9E48C0](v86, -1, -1);
    }

    goto LABEL_50;
  }
  uint64_t v87 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v82 + 32))(v152, v80, v81);
  (*(void (**)(long long *__return_ptr, uint64_t))(*v8 + 920))(&v162, v87);
  if (!v163)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v162, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v123 = type metadata accessor for Logger();
    __swift_project_value_buffer(v123, (uint64_t)static Logger.conversationBridge);
    uint64_t v124 = Logger.logObject.getter();
    v125 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v124, v125))
    {
      v126 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v126 = 0;
      _os_log_impl(&dword_1B9C64000, v124, v125, "Unable to find SessionState to pass to RequestProcessor", v126, 2u);
      MEMORY[0x1BA9E48C0](v126, -1, -1);
    }

    swift_release();
    goto LABEL_65;
  }
  uint64_t v88 = outlined init with take of ReferenceResolutionClientProtocol(&v162, (uint64_t)&v164);
  unint64_t v89 = (void (**)(void))(*v8 + 968);
  unint64_t v90 = *v89;
  uint64_t v91 = v89;
  if (((uint64_t (*)(uint64_t))*v89)(v88))
  {
    uint64_t v92 = (void *)(*(uint64_t (**)(void))(*v8 + 992))();

    if (!v92)
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v127 = type metadata accessor for Logger();
      __swift_project_value_buffer(v127, (uint64_t)static Logger.conversationBridge);
      uint64_t v128 = Logger.logObject.getter();
      uint64_t v129 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v128, v129))
      {
        v130 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v130 = 0;
        _os_log_impl(&dword_1B9C64000, v128, v129, "MUX is enabled but MUXContextMessage is not received. Cannot create a RequestProcessor", v130, 2u);
        MEMORY[0x1BA9E48C0](v130, -1, -1);
      }

      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v164);
LABEL_65:
      (*(void (**)(char *, uint64_t))(v82 + 8))(v152, v81);
      goto LABEL_51;
    }
  }
  v139(v146, v156, v46);
  uint64_t v93 = v8[3];
  v156 = v8[2];
  uint64_t v150 = v93;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v8 + 4), (uint64_t)&v162);
  uint64_t v94 = *v8;
  uint64_t v136 = v90;
  uint64_t v95 = *(void (**)(void *__return_ptr, uint64_t))(v94 + 752);
  int v96 = swift_bridgeObjectRetain();
  v95(v161, v96);
  os_log_t v97 = *(char **)((char *)v8 + direct field offset for ConversationBridge.executionOutputSubmitter);
  v148 = *(char **)((char *)v8 + direct field offset for ConversationBridge.decisionMaker);
  uint64_t v149 = v97;
  uint64_t v135 = (uint64_t)v91;
  v141 = *(char **)((char *)v8 + direct field offset for ConversationBridge.preExecutionActionHandler);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v164, (uint64_t)v160);
  int v98 = *(void (**)(uint64_t, uint64_t, uint64_t))((char *)v8
                                                         + direct field offset for ConversationBridge.instrumentationUtil);
  uint64_t v138 = v8[9];
  uint64_t v139 = v98;
  uint64_t v99 = *(uint64_t (**)(uint64_t))(*v8 + 728);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v100 = swift_unknownObjectRetain();
  LODWORD(v137) = v99(v100);
  v157 = (*(uint64_t (**)(void))(*v8 + 872))();
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v168, (uint64_t)v159);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v166, (uint64_t)v158);
  (*(void (**)(uint64_t, char *, uint64_t))(v153 + 16))(v147, v152, v154);
  uint64_t v101 = *(void *)((char *)v8 + direct field offset for ConversationBridge.recentDialogTracker);
  uint64_t v102 = *(uint64_t (**)(uint64_t))(*v8 + 992);
  uint64_t v133 = v101;
  v103 = swift_retain();
  uint64_t v104 = (void *)v102(v103);
  uint64_t v134 = v104;
  LODWORD(v136) = ((uint64_t (*)(void))v136)();
  uint64_t v105 = (*(uint64_t (**)(void))(*v8 + 1016))();
  if (v106 == 2) {
    uint64_t v107 = 0;
  }
  else {
    uint64_t v107 = v105;
  }
  if (v106 == 2) {
    unsigned int v108 = 0;
  }
  else {
    unsigned int v108 = v106;
  }
  type metadata accessor for FeatureChecker();
  swift_allocObject();
  v109 = FeatureChecker.init()();
  type metadata accessor for ServerFallbackCapableRequestProcessor();
  uint64_t v110 = (void *)swift_allocObject();
  uint64_t v111 = v145;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v112 = v143;
  swift_bridgeObjectRetain();
  *(void *)&uint64_t v132 = v107;
  *((void *)&v132 + 1) = v108;
  *((void *)&v131 + 1) = v148;
  *(void *)&v131 = v149;
  uint64_t v113 = specialized ServerFallbackCapableRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(v142, v112, v146, v151, v155, v144, v111, v156, v150, (uint64_t)&v162, (uint64_t)v161, v131, (uint64_t)v141, (uint64_t)v160, (uint64_t)v139, v138, v137 & 1, v140, v157,
           (uint64_t)v159,
           (uint64_t)v158,
           v147,
           v101,
           v104,
           v136 & 1,
           v132,
           (uint64_t)v109,
           v110);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v164);
  (*(void (**)(char *, uint64_t))(v153 + 8))(v152, v154);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v166);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v168);
  uint64_t v114 = (char *)v8 + direct field offset for ConversationBridge.isFirstRequestInSession;
  swift_beginAccess();
LABEL_54:
  char *v114 = 0;
  return v113;
}

uint64_t ConversationBridge.createRunSiriKitExecutorProcessor(command:executionContext:reply:source:userId:sessionId:plannerInvocationId:)(void *a1, void *a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void (*v30)(uint64_t *__return_ptr, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, char *, uint64_t);
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  void v71[5];
  void v72[5];
  long long v73;
  long long v74;
  char v75[8];
  _OWORD v76[2];
  uint64_t v77;
  uint64_t v78;

  uint64_t v10 = v9;
  uint64_t v64 = a8;
  uint64_t v56 = a7;
  os_log_type_t v55 = a6;
  uint64_t v66 = a4;
  os_log_type_t v59 = a3;
  uint64_t v61 = a2;
  os_log_type_t v63 = a1;
  uint64_t v53 = type metadata accessor for ConversationSessionKey();
  uint64_t v12 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  uint64_t v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v70 = (uint64_t)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  int v68 = (uint64_t)&v53 - v21;
  uint64_t v22 = type metadata accessor for RequestType();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v67 = (uint64_t)&v53 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  BOOL v69 = (char *)&v53 - v26;
  uint64_t v65 = a5;
  if (a5 == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v27 = (unsigned int *)MEMORY[0x1E4FA2440];
  }
  else
  {
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v27 = (unsigned int *)MEMORY[0x1E4FA2428];
    if (v28) {
      uint64_t v27 = (unsigned int *)MEMORY[0x1E4FA2440];
    }
  }
  uint64_t v58 = a9;
  uint64_t v29 = v69;
  (*(void (**)(char *, void, uint64_t))(v23 + 104))(v69, *v27, v22);
  uint64_t v30 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*v10 + 752);
  uint64_t v60 = *(void *)((char *)v10 + direct field offset for ConversationBridge.executionOutputSubmitter);
  uint64_t v31 = swift_retain();
  v30(&v78, v31);
  uint64_t v77 = 0;
  memset(v76, 0, sizeof(v76));
  uint64_t v32 = *(void *)((char *)v10 + direct field offset for ConversationBridge.instrumentationUtil);
  uint64_t v33 = v10[9];
  uint64_t v34 = *(void (**)(uint64_t, char *, uint64_t))(v23 + 16);
  uint64_t v62 = v22;
  v34(v67, v29, v22);
  outlined init with copy of ReferenceResolutionClientProtocol?(v55, v68, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v56, v70, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v10 + 4), (uint64_t)v75);
  uint64_t v35 = *(uint64_t (**)(uint64_t))(*v10 + 968);
  uint64_t v56 = v32;
  swift_retain();
  uint64_t v36 = swift_unknownObjectRetain();
  LODWORD(v55) = v35(v36);
  uint64_t v54 = (void *)(*(uint64_t (**)(void))(*v10 + 992))();
  (*(void (**)(void *__return_ptr))(*v10 + 920))(v72);
  uint64_t v57 = v33;
  if (v72[3])
  {
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v72, (uint64_t)v71);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v72, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
    __swift_project_boxed_opaque_existential_1(v71, v71[3]);
    uint64_t v37 = v53;
    (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E4FA2630], v53);
    dispatch thunk of ConversationSessionState.sharedValue(forKey:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v37);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v71);
    if (*((void *)&v74 + 1))
    {
      uint64_t v38 = type metadata accessor for UserID();
      uint64_t v39 = swift_dynamicCast();
      uint64_t v40 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v20, v39 ^ 1u, 1, v38);
      goto LABEL_10;
    }
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v72, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
    unint64_t v73 = 0u;
    uint64_t v74 = 0u;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v73, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v41 = type metadata accessor for UserID();
  uint64_t v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v20, 1, 1, v41);
LABEL_10:
  uint64_t v42 = (*(uint64_t (**)(uint64_t))(*v10 + 1016))(v40);
  if (v43 == 2) {
    uint64_t v44 = 0;
  }
  else {
    uint64_t v44 = v42;
  }
  if (v43 == 2) {
    uint64_t v45 = 0;
  }
  else {
    uint64_t v45 = v43;
  }
  type metadata accessor for RunSiriKitExecutorProcessor();
  swift_allocObject();
  uint64_t v46 = v58;
  swift_bridgeObjectRetain();
  uint64_t v47 = v59;
  uint64_t v48 = v66;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed SAAceCommand?, @guaranteed Error?) -> ())?(v59);
  uint64_t v49 = v61;
  unsigned int v50 = v63;
  uint64_t v51 = specialized RunSiriKitExecutorProcessor.init(command:executionContextInfo:reply:executionOutputSubmitter:executionClient:contextUpdater:assistantId:source:requestId:instrumentationUtil:requestDispatcherServiceHelper:resultCandidateId:flowPluginInfo:requestType:userId:meetsUserSessionThreshold:sessionId:plannerInvocationId:messagePublisher:isMuxEnabled:muxContextMessage:previousUserId:userSessionState:)(v50, v49, v47, v48, v60, (uint64_t)&v78, (uint64_t)v76, 0, 0, v65, 0, 0, v56, v57, 0, 0, 0, v67, v68,
          0,
          v70,
          v64,
          v46,
          (uint64_t)v75,
          v55 & 1,
          v54,
          (uint64_t)v20,
          v44,
          v45);
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(v47);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v69, v62);
  return v51;
}

uint64_t (*_s14SiriKitRuntime37ServerFallbackCapableRequestProcessorCSo23SARDFlowOutputCandidateCSo22AFCommandExecutionInfoCSo13SABaseCommandCSgs5Error_pSgIeghgg_SgIegggg_Iggo_ACxAgMRlzCRi_zRi0_zlyAEIsegggg_Ieggo_TR04_s14ab40Runtime18ConversationBridgeC25handleFlowj32CandidateyySo08SARDFlowhI0C_So22lmn6CySo13op6CSg_s5q47_pSgtYbcSgtFyAF_AhNtAA15MessageBusActorCYccAA37defgH5Ccfu_Tf3npf_n())()
{
  return partial apply for implicit closure #2 in implicit closure #1 in ConversationBridge.handleFlowOutputCandidate(_:_:_:);
}

uint64_t ConversationBridge.handleServerContextUpdateCandidate(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ConversationBridge.handleFlowOutputCandidate(_:_:_:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for SARDServerContextUpdateCandidate, 0x1E4F96950, (uint64_t)_s14SiriKitRuntime37ServerFallbackCapableRequestProcessorCSo32SARDServerContextUpdateCandidateCSo22AFCommandExecutionInfoCSo13SABaseCommandCSgs5Error_pSgIeghgg_SgIegggg_Iggo_ACxAgMRlzCRi_zRi0_zlyAEIsegggg_Ieggo_TR04_s14ab36Runtime18ConversationBridgeC34handledjk36CandidateyySo010SARDServerhiJ0C_So22mno6CySo13pq6CSg_s5r49_pSgtYbcSgtFyAF_AhNtAA15MessageBusActorCYccAA0G31efgH5Ccfu_Tf3npf_n);
}

uint64_t (*_s14SiriKitRuntime37ServerFallbackCapableRequestProcessorCSo32SARDServerContextUpdateCandidateCSo22AFCommandExecutionInfoCSo13SABaseCommandCSgs5Error_pSgIeghgg_SgIegggg_Iggo_ACxAgMRlzCRi_zRi0_zlyAEIsegggg_Ieggo_TR04_s14ab36Runtime18ConversationBridgeC34handledjk36CandidateyySo010SARDServerhiJ0C_So22mno6CySo13pq6CSg_s5r49_pSgtYbcSgtFyAF_AhNtAA15MessageBusActorCYccAA0G31efgH5Ccfu_Tf3npf_n())()
{
  return partial apply for implicit closure #2 in implicit closure #1 in ConversationBridge.handleServerContextUpdateCandidate(_:_:_:);
}

uint64_t ConversationBridge.doHandleAceRunSiriKitExecutor(command:executionContext:plannerInvocationId:reply:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v34 = a3;
  uint64_t v35 = a1;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = a2;
  id v16 = objc_msgSend(a2, sel_originPeerInfo);
  id v17 = v16;
  if (v16) {

  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationBridge);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 67109120;
    BOOL v39 = v17 != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v19, v20, "RSKE isRemote=%{BOOL}d", v21, 8u);
    MEMORY[0x1BA9E48C0](v21, -1, -1);
  }

  if (v17
    || (MEMORY[0x1F4188790](v22),
        uint64_t v23 = a4,
        uint64_t v24 = *(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t (*(*)(uint64_t))(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t *, uint64_t))(*(void *)v7 + 480),
        v25 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAIntentGroupRunSiriKitExecutor), uint64_t result = v24(v35, v36, v37, v38, partial apply for closure #1 in ConversationBridge.doHandleAceRunSiriKitExecutor(command:executionContext:plannerInvocationId:reply:), &v34 - 4, v25), a4 = v23, (result & 1) == 0))
  {
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl(&dword_1B9C64000, v27, v28, "Handing RSKE outside of any request processor", v29, 2u);
      MEMORY[0x1BA9E48C0](v29, -1, -1);
    }

    uint64_t v30 = (*(uint64_t (**)(void))(*(void *)v7 + 944))();
    (*(void (**)(uint64_t))(*(void *)v7 + 896))(v30);
    if (v17) {
      uint64_t v31 = 1;
    }
    else {
      uint64_t v31 = 2;
    }
    uint64_t v32 = (*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t, char *, char *, uint64_t, uint64_t))(*(void *)v7 + 1120))(v35, v36, v37, v38, v31, v15, v12, v34, a4);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    uint64_t v33 = (uint64_t *)(v7 + direct field offset for ConversationBridge.runSiriKitExecutorProcessor);
    swift_beginAccess();
    *uint64_t v33 = v32;
    swift_retain();
    swift_release();
    (*(void (**)(uint64_t, void))(*(void *)v32 + 488))(1, 0);
    return swift_release();
  }
  return result;
}

uint64_t (*closure #1 in ConversationBridge.doHandleAceRunSiriKitExecutor(command:executionContext:plannerInvocationId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = a3;
  swift_retain();
  swift_bridgeObjectRetain();
  return partial apply for closure #1 in closure #1 in ConversationBridge.doHandleAceRunSiriKitExecutor(command:executionContext:plannerInvocationId:reply:);
}

uint64_t ConversationBridge.handleSiriKitClearContext(_:_:_:)(void *a1, uint64_t a2, void (*a3)(id, id))
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationBridge);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_1B9C64000, v6, v7, "Received SiriKitClearContext. Ignoring since this command is deprecated in Siri X", v8, 2u);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }

  return specialized static ConversationBridgeUtils.replyCommandIgnored(forCommand:errorCode:reason:replyHandler:)(a1, -1, 0xD00000000000002BLL, 0x80000001BA064890, a3);
}

uint64_t ConversationBridge.handleRemoteExecutionContextUpdate(_:_:_:)(void *a1, uint64_t a2, void (*a3)(id, id), uint64_t a4)
{
  uint64_t v5 = v4;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = a2;
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_1B9C64000, v11, v12, "Received RemoteExecutionContextUpdate command", v14, 2u);
    uint64_t v15 = v14;
    a2 = v13;
    MEMORY[0x1BA9E48C0](v15, -1, -1);
  }

  id v16 = objc_msgSend(a1, sel_refId);
  if (v16)
  {
  }
  else
  {
    uint64_t v17 = (*(uint64_t (**)(void))(*(void *)v5 + 376))();
    if (v17)
    {
      uint64_t v36 = a3;
      uint64_t v18 = *(void *)(v17 + 80);
      unint64_t v19 = *(void *)(v17 + 88);
      swift_bridgeObjectRetain_n();
      os_log_type_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v35 = v18;
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        uint64_t v34 = swift_slowAlloc();
        uint64_t v37 = v34;
        *(_DWORD *)uint64_t v22 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v19, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B9C64000, v20, v21, "RemoteExecutionContextUpdate refId is nil. Setting to current rootRequestId: %s", v22, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v34, -1, -1);
        uint64_t v23 = v22;
        uint64_t v18 = v35;
        MEMORY[0x1BA9E48C0](v23, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v27 = (void *)MEMORY[0x1BA9E2DD0](v18, v19);
      swift_bridgeObjectRelease();
      objc_msgSend(a1, sel_setRefId_, v27);
      swift_release();

      a3 = v36;
    }
    else
    {
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v26 = 0;
        _os_log_impl(&dword_1B9C64000, v24, v25, "RemoteExecutionContextUpdate refId is nil, and there is no currentRequestProcessor, so we don't know the current refId.", v26, 2u);
        MEMORY[0x1BA9E48C0](v26, -1, -1);
      }
    }
  }
  os_log_type_t v28 = *(uint64_t (**)(void *, uint64_t, void (*)(id, id), uint64_t, uint64_t (*(*)())(), void, uint64_t))(*(void *)v5 + 480);
  uint64_t v29 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SARDRemoteExecutionContextUpdate);
  uint64_t result = v28(a1, a2, a3, a4, _s14SiriKitRuntime37ServerFallbackCapableRequestProcessorCSo32SARDRemoteExecutionContextUpdateCSo09AFCommandJ4InfoCSo13SABaseCommandCSgs5Error_pSgIeghgg_SgIegggg_Iggo_ACxAgMRlzCRi_zRi0_zlyAEIsegggg_Ieggo_TR04_s14ab42Runtime18ConversationBridgeC34handleRemotejk33UpdateyySo010SARDRemotehiJ0C_So09m2H4n6CySo13op6CSg_s5q47_pSgtYbcSgtFyAF_AhNtAA15MessageBusActorCYccAA37defgH6Ccfu0_Tf3npf_n, 0, v29);
  if ((result & 1) == 0)
  {
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl(&dword_1B9C64000, v31, v32, "Could not handle RemoteExecutionContextUpdate", v33, 2u);
      MEMORY[0x1BA9E48C0](v33, -1, -1);
    }

    return specialized static ConversationBridgeUtils.replyCommandIgnored(forCommand:errorCode:reason:replyHandler:)(a1, -1, 0xD00000000000002DLL, 0x80000001BA0648C0, a3);
  }
  return result;
}

uint64_t (*_s14SiriKitRuntime37ServerFallbackCapableRequestProcessorCSo32SARDRemoteExecutionContextUpdateCSo09AFCommandJ4InfoCSo13SABaseCommandCSgs5Error_pSgIeghgg_SgIegggg_Iggo_ACxAgMRlzCRi_zRi0_zlyAEIsegggg_Ieggo_TR04_s14ab42Runtime18ConversationBridgeC34handleRemotejk33UpdateyySo010SARDRemotehiJ0C_So09m2H4n6CySo13op6CSg_s5q47_pSgtYbcSgtFyAF_AhNtAA15MessageBusActorCYccAA37defgH6Ccfu0_Tf3npf_n())()
{
  return partial apply for implicit closure #3 in implicit closure #2 in ConversationBridge.handleRemoteExecutionContextUpdate(_:_:_:);
}

void ConversationBridge.handleExecutionServiceRuntimeError(error:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  id v5 = a1;
  id v6 = a1;
  os_log_type_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v32 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    id v11 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v7, v8, "Runtime error occurred in Execution service: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v10, -1, -1);
    MEMORY[0x1BA9E48C0](v9, -1, -1);
  }
  else
  {
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 376))(v14, v15);
  if (v16)
  {
    uint64_t v18 = v16;
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      os_log_type_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v21 = 0;
      _os_log_impl(&dword_1B9C64000, v19, v20, "Dispatching runtime error to the request processor", v21, 2u);
      MEMORY[0x1BA9E48C0](v21, -1, -1);
    }

    uint64_t v22 = _convertErrorToNSError(_:)();
    (*(void (**)(NSObject *, uint64_t))(*(void *)v18 + 1136))(v22, v23);
    swift_release();
  }
  else
  {
    uint64_t v24 = (*(uint64_t (**)(void, uint64_t))(*(void *)v2 + 704))(0, v17);
    if (v24)
    {
      uint64_t v25 = v24;
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v28 = 0;
        _os_log_impl(&dword_1B9C64000, v26, v27, "Dispatching runtime error to RSKE processor", v28, 2u);
        MEMORY[0x1BA9E48C0](v28, -1, -1);
      }

      uint64_t v22 = _convertErrorToNSError(_:)();
      (*(void (**)(NSObject *, uint64_t))(*(void *)v25 + 504))(v22, v29);
      swift_release();
    }
    else
    {
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v31 = 0;
        _os_log_impl(&dword_1B9C64000, v22, v30, "There is no request processor to send the runtime error to", v31, 2u);
        MEMORY[0x1BA9E48C0](v31, -1, -1);
      }
    }
  }
}

void ConversationBridge.__allocating_init(withName:messagePublisher:serviceHelper:conversationSessionsManaging:autoRegisterStartRequestMessageBase:logger:)()
{
}

void ConversationBridge.init(withName:messagePublisher:serviceHelper:conversationSessionsManaging:autoRegisterStartRequestMessageBase:logger:)()
{
}

uint64_t ConversationBridge.__ivar_destroyer()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + direct field offset for ConversationBridge.featureChecker);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + direct field offset for ConversationBridge.contextDonator);
  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.overrideExecutionClient, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.$__lazy_storage_$_executionClient, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.rraasClient, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.correctionsPlatformClient, &demangling cache variable for type metadata for CorrectionsHandling?);
  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.currentSessionId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.sessionState, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.sessionUserId, (uint64_t *)&demangling cache variable for type metadata for UserID?);

  outlined consume of UserSessionState?(*(void *)(v0 + direct field offset for ConversationBridge.userSessionState), *(void *)(v0 + direct field offset for ConversationBridge.userSessionState + 8));

  return swift_release();
}

uint64_t ConversationBridge.deinit()
{
  uint64_t v0 = specialized ConversationMessageDispatchingBridgeBase.deinit();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v1 = v0 + direct field offset for ConversationRequestAwareBridgeBase.previousProcessorTimeout;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + direct field offset for ConversationBridge.featureChecker);
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + direct field offset for ConversationBridge.contextDonator);
  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.overrideExecutionClient, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.$__lazy_storage_$_executionClient, &demangling cache variable for type metadata for ConversationRuntimeClientProtocol?);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.rraasClient, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.correctionsPlatformClient, &demangling cache variable for type metadata for CorrectionsHandling?);
  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.currentSessionId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.sessionState, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + direct field offset for ConversationBridge.sessionUserId, (uint64_t *)&demangling cache variable for type metadata for UserID?);

  outlined consume of UserSessionState?(*(void *)(v0 + direct field offset for ConversationBridge.userSessionState), *(void *)(v0 + direct field offset for ConversationBridge.userSessionState + 8));
  swift_release();
  return v0;
}

uint64_t ConversationBridge.__deallocating_deinit()
{
  ConversationBridge.deinit();

  return swift_deallocClassInstance();
}

uint64_t NonRequestExecutionBridgeDelegate.executionOutputSubmitter.getter()
{
  return swift_retain();
}

uint64_t NonRequestExecutionBridgeDelegate.userId.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime33NonRequestExecutionBridgeDelegate_userId, a1, (uint64_t *)&demangling cache variable for type metadata for UserID?);
}

uint64_t NonRequestExecutionBridgeDelegate.serviceHelper.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t NonRequestExecutionBridgeDelegate.init(executionOutputSubmitter:userId:serviceHelper:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 16) = a1;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a2, v3 + OBJC_IVAR____TtC14SiriKitRuntime33NonRequestExecutionBridgeDelegate_userId, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  *(void *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime33NonRequestExecutionBridgeDelegate_serviceHelper) = a3;
  return v3;
}

void NonRequestExecutionBridgeDelegate.submit(executionOutput:completion:)(void *a1, void (*a2)(void, id), uint64_t a3)
{
  uint64_t v41 = a1;
  uint64_t v42 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v40 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for RequestType();
  uint64_t v7 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UserID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  unint64_t v19 = (char *)&v35 - v18;
  uint64_t v39 = v3;
  outlined init with copy of ReferenceResolutionClientProtocol?(v3 + OBJC_IVAR____TtC14SiriKitRuntime33NonRequestExecutionBridgeDelegate_userId, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
    os_log_type_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl(&dword_1B9C64000, v21, v22, "UserID is nil. Cannot process ExecutionOutput", v23, 2u);
      MEMORY[0x1BA9E48C0](v23, -1, -1);
    }

    id v24 = objc_allocWithZone(MEMORY[0x1E4F28C58]);
    uint64_t v25 = (void *)MEMORY[0x1BA9E2DD0](0x6920444972657355, 0xED00006C696E2073);
    id v26 = objc_msgSend(v24, sel_initWithDomain_code_userInfo_, v25, -1, 0);

    a2(0, v26);
  }
  else
  {
    uint64_t v36 = (void (*)(void, void))a2;
    uint64_t v37 = v19;
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    os_log_type_t v27 = v19;
    v35(v19, v12, v13);
    uint64_t v28 = v38;
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4FA2438], v38);
    uint64_t v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 16))(v17, v27, v13);
    os_log_type_t v30 = v41;
    LOBYTE(v27) = (*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v41) + 0xB0))(v29);
    type metadata accessor for ConversationContextUpdateMetadata();
    uint64_t v31 = swift_allocObject();
    *(unsigned char *)(v31 + 16) = 0;
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v31 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType, v9, v28);
    *(void *)(v31 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo) = 0;
    v35((char *)(v31 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId), v17, v13);
    *(unsigned char *)(v31 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) = v27 & 1;
    *(unsigned char *)(v31 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_meetsUserSessionThreshold) = 0;
    uint64_t v32 = *(void *)(v39 + 16);
    uint64_t v33 = type metadata accessor for UUID();
    memset(v43, 0, sizeof(v43));
    uint64_t v44 = 0;
    uint64_t v34 = (uint64_t)v40;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v40, 1, 1, v33);
    (*(void (**)(void *, void, void, void, void, _OWORD *, void, uint64_t, void, void, uint64_t, void, void, void (*)(void, void), uint64_t))(*(void *)v32 + 296))(v30, 0, 0, 0, 0, v43, 0, v31, 0, 0, v34, 0, 0, v36, v42);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v34, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v43, &demangling cache variable for type metadata for ContextUpdating?);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v37, v13);
  }
}

uint64_t NonRequestExecutionBridgeDelegate.close(withExecutionOutput:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t (*)(), void))(*(void *)v1 + 112))(a1, destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions, 0);
}

uint64_t NonRequestExecutionBridgeDelegate.close(withExecutionOutput:needsUserInput:)(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t (*)(), void))(*(void *)v1 + 112))(a1, destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions, 0);
}

uint64_t NonRequestExecutionBridgeDelegate.close(withExecutionOutput:errorString:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v14 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v9, v10, "There was an error while running execution: %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v12, -1, -1);
    MEMORY[0x1BA9E48C0](v11, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t (*)(), void))(*(void *)v4 + 112))(a1, destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions, 0);
}

void NonRequestExecutionBridgeDelegate.close(withExecutionOutput:errorString:shouldFailRequest:)()
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v3 = swift_slowAlloc();
    uint64_t v5 = v3;
    *(_DWORD *)uint64_t v2 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000039, 0x80000001BA0649A0, &v5);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, oslog, v1, "Ignoring %s outside of a request", v2, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v3, -1, -1);
    MEMORY[0x1BA9E48C0](v2, -1, -1);
  }
  else
  {
  }
}

void NonRequestExecutionBridgeDelegate.fallbackToServer(forResultCandidateId:serverFallbackReason:)()
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1B9C64000, oslog, v1, "Server-fallback not supported outside of a request", v2, 2u);
    MEMORY[0x1BA9E48C0](v2, -1, -1);
  }
}

Swift::Void __swiftcall NonRequestExecutionBridgeDelegate.fallbackToInfoDomainResults(forResultCandidateId:)(Swift::String_optional forResultCandidateId)
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1B9C64000, oslog, v2, "Fallback to info domain not yet supported: Incomplete feature work", v3, 2u);
    MEMORY[0x1BA9E48C0](v3, -1, -1);
  }
}

void NonRequestExecutionBridgeDelegate.fallbackToIntelligenceFlow(prescribedTool:)()
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    os_log_type_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v2 = 0;
    _os_log_impl(&dword_1B9C64000, oslog, v1, "Fallback to IntelligenceFlow not yet supported: Incomplete feature work", v2, 2u);
    MEMORY[0x1BA9E48C0](v2, -1, -1);
  }
}

Swift::Void __swiftcall NonRequestExecutionBridgeDelegate.fallbackToSiriX(rcId:)(Swift::String rcId)
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1B9C64000, oslog, v2, "Fallback to SiriX not supported outside of a request", v3, 2u);
    MEMORY[0x1BA9E48C0](v3, -1, -1);
  }
}

uint64_t NonRequestExecutionBridgeDelegate.prepareForAudioHandoff(completion:)(uint64_t (*a1)(void))
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "prepareForAudioHandoff not supported outside of a request", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  return a1(0);
}

uint64_t NonRequestExecutionBridgeDelegate.prepareForAudioHandoffFailed(completion:)(uint64_t (*a1)(void))
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "prepareForAudioHandoffFailed not supported outside of a request", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  return a1();
}

uint64_t NonRequestExecutionBridgeDelegate.fetchContexts(for:includesNearByDevices:completion:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_1B9C64000, v5, v6, "fetchContext() not supported outside of a request", v7, 2u);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }

  return a3(0);
}

uint64_t NonRequestExecutionBridgeDelegate.fetchSpeechInfo(reply:)(uint64_t (*a1)(void))
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v8 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000017, 0x80000001BA0649E0, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v3, v4, "%s: There is no SpeechInfo outside of a request", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v6, -1, -1);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  return a1(0);
}

void NonRequestExecutionBridgeDelegate.flowPluginWillExecute(flowPluginInfo:)()
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1B9C64000, oslog, v1, "Ignoring FlowPluginInfo outside of a request", v2, 2u);
    MEMORY[0x1BA9E48C0](v2, -1, -1);
  }
}

uint64_t NonRequestExecutionBridgeDelegate.acquireConversationUserInput(forUserId:requestId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v12 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000038, 0x80000001BA064A00, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v7, v8, "Ignoring %s outside of a request", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v10, -1, -1);
    MEMORY[0x1BA9E48C0](v9, -1, -1);
  }

  return a5(0);
}

uint64_t NonRequestExecutionBridgeDelegate.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void))
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v14 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000060, 0x80000001BA064A40, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v9, v10, "Ignoring %s outside of a request", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v12, -1, -1);
    MEMORY[0x1BA9E48C0](v11, -1, -1);
  }

  return a7(0);
}

Swift::Void __swiftcall NonRequestExecutionBridgeDelegate.closeServerRequest(forExecutionRequestId:)(Swift::String forExecutionRequestId)
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    uint64_t v6 = v4;
    *(_DWORD *)uint64_t v3 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002ALL, 0x80000001BA064AB0, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, oslog, v2, "Ignoring %s outside of a request", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v4, -1, -1);
    MEMORY[0x1BA9E48C0](v3, -1, -1);
  }
  else
  {
  }
}

uint64_t NonRequestExecutionBridgeDelegate.fetchRecentDialogs(reply:)(uint64_t (*a1)(void))
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v8 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x80000001BA064AE0, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v3, v4, "Ignoring %s outside of a request", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v6, -1, -1);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  return a1(MEMORY[0x1E4FBC860]);
}

Swift::Void __swiftcall NonRequestExecutionBridgeDelegate.actionCandidatesGenerated(_:rcId:)(Swift::OpaquePointer _, Swift::String rcId)
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v7 = v5;
    *(_DWORD *)os_log_type_t v4 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000022, 0x80000001BA064B00, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, oslog, v3, "Ignoring %s outside of a request", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v5, -1, -1);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }
  else
  {
  }
}

void NonRequestExecutionBridgeDelegate.willExecute(executionInputInfo:)()
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v3 = swift_slowAlloc();
    uint64_t v5 = v3;
    *(_DWORD *)uint64_t v2 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000020, 0x80000001BA064B30, &v5);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, oslog, v1, "Ignoring %s outside of a request", v2, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v3, -1, -1);
    MEMORY[0x1BA9E48C0](v2, -1, -1);
  }
  else
  {
  }
}

uint64_t NonRequestExecutionBridgeDelegate.fetchSelfReflectionDecision(reply:)(uint64_t (*a1)(uint64_t *))
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v8 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000023, 0x80000001BA064B60, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v3, v4, "Ignoring %s outside of a request", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v6, -1, -1);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  LOBYTE(v8) = 2;
  return a1(&v8);
}

uint64_t NonRequestExecutionBridgeDelegate.submitExternalActivationRequest(withRequestInfo:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ServiceBridgeDelegate.defaultSubmitExternalActivationRequest(withRequestInfo:serviceHelper:completion:)(a1, *(id *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime33NonRequestExecutionBridgeDelegate_serviceHelper), a2, a3);
}

void NonRequestExecutionBridgeDelegate.postToMessageBus(message:completion:)()
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v3 = swift_slowAlloc();
    uint64_t v5 = v3;
    *(_DWORD *)uint64_t v2 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000001BA064B90, &v5);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, oslog, v1, "Ignoring %s outside of a request", v2, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v3, -1, -1);
    MEMORY[0x1BA9E48C0](v2, -1, -1);
  }
  else
  {
  }
}

uint64_t NonRequestExecutionBridgeDelegate.deinit()
{
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime33NonRequestExecutionBridgeDelegate_userId, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  swift_unknownObjectRelease();
  return v0;
}

uint64_t NonRequestExecutionBridgeDelegate.__deallocating_deinit()
{
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime33NonRequestExecutionBridgeDelegate_userId, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for ServiceBridgeDelegate.submit(executionOutput:completion:) in conformance NonRequestExecutionBridgeDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t protocol witness for ServiceBridgeDelegate.close(withExecutionOutput:needsUserInput:) in conformance NonRequestExecutionBridgeDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t protocol witness for ServiceBridgeDelegate.close(withExecutionOutput:) in conformance NonRequestExecutionBridgeDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t protocol witness for ServiceBridgeDelegate.close(withExecutionOutput:errorString:) in conformance NonRequestExecutionBridgeDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t protocol witness for ServiceBridgeDelegate.close(withExecutionOutput:errorString:shouldFailRequest:) in conformance NonRequestExecutionBridgeDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t protocol witness for ServiceBridgeDelegate.fallbackToServer(forResultCandidateId:serverFallbackReason:) in conformance NonRequestExecutionBridgeDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t protocol witness for ServiceBridgeDelegate.fallbackToInfoDomainResults(forResultCandidateId:) in conformance NonRequestExecutionBridgeDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t protocol witness for ServiceBridgeDelegate.fallbackToIntelligenceFlow(prescribedTool:) in conformance NonRequestExecutionBridgeDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t protocol witness for ServiceBridgeDelegate.fallbackToSiriX(rcId:) in conformance NonRequestExecutionBridgeDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t protocol witness for ServiceBridgeDelegate.flowPluginWillExecute(flowPluginInfo:) in conformance NonRequestExecutionBridgeDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t protocol witness for ServiceBridgeDelegate.prepareForAudioHandoff(completion:) in conformance NonRequestExecutionBridgeDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t protocol witness for ServiceBridgeDelegate.prepareForAudioHandoffFailed(completion:) in conformance NonRequestExecutionBridgeDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t protocol witness for ServiceBridgeDelegate.fetchContexts(for:includesNearByDevices:completion:) in conformance NonRequestExecutionBridgeDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t protocol witness for ServiceBridgeDelegate.fetchSpeechInfo(reply:) in conformance NonRequestExecutionBridgeDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t protocol witness for ServiceBridgeDelegate.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:) in conformance NonRequestExecutionBridgeDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t protocol witness for ServiceBridgeDelegate.closeServerRequest(forExecutionRequestId:) in conformance NonRequestExecutionBridgeDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t protocol witness for ServiceBridgeDelegate.fetchRecentDialogs(reply:) in conformance NonRequestExecutionBridgeDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t protocol witness for ServiceBridgeDelegate.actionCandidatesGenerated(_:rcId:) in conformance NonRequestExecutionBridgeDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t protocol witness for ServiceBridgeDelegate.willExecute(executionInputInfo:) in conformance NonRequestExecutionBridgeDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t protocol witness for ServiceBridgeDelegate.fetchSelfReflectionDecision(reply:) in conformance NonRequestExecutionBridgeDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t protocol witness for ServiceBridgeDelegate.submitExternalActivationRequest(withRequestInfo:completion:) in conformance NonRequestExecutionBridgeDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t protocol witness for ServiceBridgeDelegate.postToMessageBus(message:completion:) in conformance NonRequestExecutionBridgeDelegate()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

unsigned __int8 *partial apply for closure #1 in ConversationBridgeFeatureFlag.isEnabled.getter@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  return closure #1 in ConversationBridgeFeatureFlag.isEnabled.getter(a1, a2);
}

uint64_t specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:muxContextMessage:messagePublisher:featureChecker:)(uint64_t a1, char a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v18 = type metadata accessor for FeatureChecker();
  unint64_t v19 = &protocol witness table for FeatureChecker;
  *(void *)&long long v17 = a5;
  type metadata accessor for ConcurrentTaskPool();
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = MEMORY[0x1E4FBC860];
  *(void *)(v12 + 16) = MEMORY[0x1E4FBC860];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v14 = swift_allocObject();
  *(_DWORD *)(v14 + 16) = 0;
  *(void *)(v12 + 24) = v14;
  *(void *)(a6 + 16) = v12;
  *(void *)(a6 + 88) = 0;
  *(void *)(a6 + 80) = 0;
  *(void *)(a6 + 96) = specialized Dictionary.init(dictionaryLiteral:)(v13);
  *(void *)(a6 + 104) = 30000000000;
  *(void *)(a6 + 24) = a1;
  *(unsigned char *)(a6 + 72) = a2;
  swift_beginAccess();
  uint64_t v15 = *(void **)(a6 + 80);
  *(void *)(a6 + 80) = a3;

  outlined init with take of ReferenceResolutionClientProtocol(a4, a6 + 32);
  outlined init with take of ReferenceResolutionClientProtocol(&v17, a6 + 112);
  return a6;
}

void *specialized ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,unsigned __int8 a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30)
{
  uint64_t v106 = a7;
  uint64_t v105 = a6;
  uint64_t v110 = a4;
  uint64_t v111 = a5;
  uint64_t v113 = a3;
  uint64_t v104 = a2;
  uint64_t v103 = a1;
  uint64_t v96 = a28;
  uint64_t v95 = a27;
  int v94 = a26;
  uint64_t v112 = a25;
  uint64_t v100 = a24;
  uint64_t v109 = a23;
  uint64_t v118 = a21;
  uint64_t v119 = a22;
  uint64_t v97 = a20;
  LODWORD(v93) = a18;
  uint64_t v99 = a17;
  uint64_t v117 = a15;
  uint64_t v108 = a14;
  uint64_t v98 = a13;
  uint64_t v115 = a11;
  uint64_t v116 = a10;
  uint64_t v102 = a9;
  uint64_t v107 = type metadata accessor for UUID();
  uint64_t v114 = *(void *)(v107 - 8);
  MEMORY[0x1F4188790](v107);
  uint64_t v101 = (char *)&v89 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v122 = type metadata accessor for FeatureChecker();
  uint64_t v123 = &protocol witness table for FeatureChecker;
  uint64_t v92 = v122;
  uint64_t v121 = a29;
  uint64_t v31 = OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_asyncWork;
  type metadata accessor for ConcurrentTaskPool();
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = MEMORY[0x1E4FBC860];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v33 = swift_allocObject();
  *(void *)((char *)a30 + v31) = v32;
  uint64_t v34 = (char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_state;
  v34[16] = 3;
  *(void *)uint64_t v34 = 0;
  *((void *)v34 + 1) = 0;
  *(void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rraasCollectionTask) = 0;
  *((unsigned char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sentResultCandidateSelected) = 0;
  *(_DWORD *)(v33 + 16) = 0;
  *((unsigned char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_didCommitExecution) = 0;
  *(void *)(v32 + 24) = v33;
  *((unsigned char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_entitiesCollected) = 2;
  uint64_t v35 = (void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_gestureRCID);
  *uint64_t v35 = 0;
  v35[1] = 0;
  uint64_t v36 = self;
  swift_retain();
  swift_retain();
  swift_retain();
  id v37 = objc_msgSend(v36, sel_sharedPreferences);
  char v38 = AFDeviceSupportsSAE();
  id v39 = objc_msgSend(self, sel_clientWithIdentifier_, 125);
  type metadata accessor for TrialExperimentationAssetManager();
  uint64_t v40 = swift_allocObject();
  id v41 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  *(void *)(v40 + 16) = v39;
  *(void *)(v40 + 24) = v41;
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v42 = static SelfReflectionCurareDonator.instance;
  type metadata accessor for SelfReflectionAgent();
  uint64_t v43 = swift_allocObject();
  swift_retain();
  uint64_t v90 = a19;
  uint64_t v44 = specialized SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(a16, a19, (uint64_t)v37, v38, v40, v42, 0, v43);
  *(void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_selfReflectionAgent) = v44;
  outlined init with copy of ReferenceResolutionClientProtocol(v115, (uint64_t)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient);
  uint64_t v45 = a12[3];
  uint64_t v46 = *(uint64_t (**)(uint64_t))(*a12 + 152);
  uint64_t v47 = swift_unknownObjectRetain();
  LOBYTE(v43) = v46(v47);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(a12 + 4), (uint64_t)&v120);
  swift_allocObject();
  uint64_t v48 = (uint64_t)v112;
  id v91 = v112;
  swift_retain();
  uint64_t v49 = FeatureChecker.init()();
  type metadata accessor for ConversationOutputSubmitter();
  uint64_t v50 = swift_allocObject();
  *(void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionOutputSubmitter) = specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:muxContextMessage:messagePublisher:selfReflection:featureChecker:)(v45, v43 & 1, v48, &v120, v44, (uint64_t)v49, v50);
  *(void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_decisionMaker) = v98;
  *(void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_preExecutionActionHandler) = v108;
  uint64_t v51 = v99;
  *(void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_requestDispatcherServiceHelper) = v99;
  outlined init with copy of ReferenceResolutionClientProtocol(v117, (uint64_t)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionState);
  *(void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil) = a16;
  *((unsigned char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isFirstRequestInSession) = v93 & 1;
  *(void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_networkAvailabilityProvider) = v90;
  *(void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_coreTelephonyServiceProvider) = v97;
  outlined init with copy of ReferenceResolutionClientProtocol(v118, (uint64_t)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rrClient);
  outlined init with copy of ReferenceResolutionClientProtocol(v119, (uint64_t)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_correctionsPlatformClient);
  *(void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_muxContextMessage) = v48;
  uint64_t v52 = (char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionUserId;
  uint64_t v53 = type metadata accessor for UserID();
  uint64_t v92 = *(void *)(v53 - 8);
  uint64_t v54 = *(void (**)(char *, uint64_t))(v92 + 16);
  uint64_t v55 = v109;
  uint64_t v93 = v53;
  v54(v52, v109);
  v94 &= 1u;
  *((unsigned char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled) = v94;
  uint64_t v56 = (void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_userSessionState);
  uint64_t v57 = v96;
  *uint64_t v56 = v95;
  v56[1] = v57;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v121, (uint64_t)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_featureChecker);
  uint64_t v58 = v100;
  *(void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_recentDialogTracker) = v100;
  os_log_type_t v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v58 + 224);
  swift_retain();
  swift_retain();
  swift_retain();
  id v60 = v91;
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v62 = v110;
  uint64_t v61 = v111;
  v59(v110, v111, v113);
  uint64_t v63 = v55;
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }
  uint64_t v64 = static DeviceContextHelper.sharedInstance;
  uint64_t v65 = (void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextDonator);
  v65[3] = type metadata accessor for DeviceContextHelper();
  v65[4] = (uint64_t)&protocol witness table for DeviceContextHelper;
  uint64_t *v65 = v64;
  type metadata accessor for ConversationBridgeProcessorDelegate();
  uint64_t v66 = swift_allocObject();
  swift_weakInit();
  *(void *)(v66 + 24) = v51;
  *(void *)((char *)a30
            + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionBridgeProcessorDelegate) = v66;
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v67 = v106;
  uint64_t v68 = v105;
  uint64_t v88 = v62;
  uint64_t v69 = v104;
  uint64_t v70 = v51;
  uint64_t v71 = v51;
  uint64_t v72 = v103;
  closure #1 in ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(v94, v112, v63, v117, v118, v119, v71, v103, (uint64_t)&v120, v104, v88, v61, v105, v106, v64, a16);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v120, (uint64_t)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater, &demangling cache variable for type metadata for ContextUpdating?);
  swift_release();
  uint64_t v74 = v113;
  uint64_t v73 = v114;
  uint64_t v75 = v101;
  uint64_t v76 = v107;
  (*(void (**)(char *, uint64_t, uint64_t))(v114 + 16))(v101, v113, v107);
  outlined init with copy of ReferenceResolutionClientProtocol(v116, (uint64_t)&v120);
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  a30[12] = v72;
  a30[13] = v69;
  (*(void (**)(uint64_t, char *, uint64_t))(v73 + 32))((uint64_t)a30 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId, v75, v76);
  uint64_t v77 = v111;
  a30[8] = v110;
  a30[9] = v77;
  a30[10] = v68;
  a30[11] = v67;
  outlined init with take of ReferenceResolutionClientProtocol(&v120, (uint64_t)(a30 + 3));
  a30[2] = v70;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  swift_retain();
  swift_release();
  uint64_t v79 = v74;
  uint64_t v80 = v118;
  uint64_t v81 = v119;
  uint64_t v82 = v117;
  if (Strong)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v83 = type metadata accessor for Logger();
    __swift_project_value_buffer(v83, (uint64_t)static Logger.conversationBridge);
    uint64_t v84 = Logger.logObject.getter();
    os_log_type_t v85 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v84, v85))
    {
      unint64_t v86 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v86 = 0;
      _os_log_impl(&dword_1B9C64000, v84, v85, "executionProcessor was already set on ExecutionBridgeProcessorDelegate ignoring this operation", v86, 2u);
      uint64_t v76 = v107;
      MEMORY[0x1BA9E48C0](v86, -1, -1);
    }
    swift_release();
  }
  else
  {
    swift_weakAssign();
    swift_release();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v121);
  (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v109, v93);
  __swift_destroy_boxed_opaque_existential_1Tm(v81);
  __swift_destroy_boxed_opaque_existential_1Tm(v80);
  __swift_destroy_boxed_opaque_existential_1Tm(v82);
  __swift_destroy_boxed_opaque_existential_1Tm(v115);
  __swift_destroy_boxed_opaque_existential_1Tm(v116);
  (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v79, v76);
  return a30;
}

void *specialized ServerFallbackCapableRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,unsigned __int8 a25,long long a26,uint64_t a27,void *a28)
{
  uint64_t v67 = a8;
  uint64_t v66 = a7;
  uint64_t v65 = a6;
  uint64_t v64 = a5;
  uint64_t v63 = a4;
  uint64_t v47 = a3;
  uint64_t v62 = a2;
  uint64_t v61 = a1;
  long long v60 = a12;
  uint64_t v59 = a15;
  uint64_t v58 = a16;
  int v57 = a17;
  uint64_t v56 = a18;
  uint64_t v55 = a19;
  uint64_t v52 = a24;
  int v50 = a25;
  long long v49 = a26;
  uint64_t v51 = a23;
  uint64_t v45 = a21;
  uint64_t v44 = a20;
  uint64_t v53 = a13;
  uint64_t v42 = a14;
  uint64_t v41 = a11;
  uint64_t v54 = a9;
  uint64_t v43 = a10;
  uint64_t v48 = a27;
  uint64_t v29 = type metadata accessor for UserID();
  uint64_t v30 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v32 = (char *)&v41 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for UUID();
  uint64_t v33 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  uint64_t v35 = (char *)&v41 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((unsigned char *)a28 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_requestHandledOnServer) = 0;
  *(void *)((char *)a28
            + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_runSiriKitExecutorProcessor) = 0;
  *(void *)((char *)a28
            + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_executeNLOnServerMessage) = 0;
  *((unsigned char *)a28 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_isUserOnActivePhoneCall) = 2;
  *(void *)((char *)a28
            + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_gatedExecuteNLOnServer) = MEMORY[0x1E4FBC860];
  (*(void (**)(char *, uint64_t))(v33 + 16))(v35, a3);
  outlined init with copy of ReferenceResolutionClientProtocol(a10, (uint64_t)v72);
  outlined init with copy of ReferenceResolutionClientProtocol(a11, (uint64_t)v71);
  uint64_t v36 = v42;
  outlined init with copy of ReferenceResolutionClientProtocol(v42, (uint64_t)v70);
  uint64_t v37 = v44;
  outlined init with copy of ReferenceResolutionClientProtocol(v44, (uint64_t)v69);
  uint64_t v38 = v45;
  outlined init with copy of ReferenceResolutionClientProtocol(v45, (uint64_t)v68);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v32, a22, v29);
  id v39 = specialized ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(v61, v62, (uint64_t)v35, v63, v64, v65, v66, v67, v54, (uint64_t)v72, (uint64_t)v71, (void *)v60, *((uint64_t *)&v60 + 1), v53, (uint64_t)v70, v59, v58, v57, v56,
          v55,
          (uint64_t)v69,
          (uint64_t)v68,
          (uint64_t)v32,
          v51,
          v52,
          v50,
          v49,
          *((uint64_t *)&v49 + 1),
          v48,
          a28);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(a22, v29);
  __swift_destroy_boxed_opaque_existential_1Tm(v38);
  __swift_destroy_boxed_opaque_existential_1Tm(v37);
  __swift_destroy_boxed_opaque_existential_1Tm(v36);
  __swift_destroy_boxed_opaque_existential_1Tm(v41);
  __swift_destroy_boxed_opaque_existential_1Tm(v43);
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v47, v46);
  return v39;
}

void *specialized ConversationBridge.init(name:messagePublisher:serviceHelper:conversationSessionsManaging:rrClient:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v70 = a6;
  uint64_t v71 = a5;
  uint64_t v65 = a2;
  uint64_t v64 = a1;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v66 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = type metadata accessor for Logger();
  uint64_t v61 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  uint64_t v62 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = type metadata accessor for OSSignpostID();
  uint64_t v68 = *(void *)(v69 - 8);
  MEMORY[0x1F4188790](v69);
  uint64_t v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74[3] = type metadata accessor for FeatureChecker();
  v74[4] = &protocol witness table for FeatureChecker;
  v74[0] = a7;
  long long v17 = (uint64_t *)(a8 + direct field offset for ConversationBridge.contextDonator);
  uint64_t v18 = one-time initialization token for sharedInstance;
  swift_retain();
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v19 = static DeviceContextHelper.sharedInstance;
  v17[3] = type metadata accessor for DeviceContextHelper();
  v17[4] = (uint64_t)&protocol witness table for DeviceContextHelper;
  *long long v17 = v19;
  *(void *)(a8 + direct field offset for ConversationBridge.runSiriKitExecutorProcessor) = 0;
  *(unsigned char *)(a8 + direct field offset for ConversationBridge.isFirstRequestInSession) = 1;
  uint64_t v20 = a8 + direct field offset for ConversationBridge.$__lazy_storage_$_executionClient;
  *(_OWORD *)uint64_t v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(void *)(v20 + 32) = 0;
  *(void *)(a8 + direct field offset for ConversationBridge.$__lazy_storage_$_nonRequestBridgePublisher) = 0;
  uint64_t v21 = a8 + direct field offset for ConversationBridge.rraasClient;
  *(_OWORD *)uint64_t v21 = 0u;
  *(_OWORD *)(v21 + 16) = 0u;
  *(void *)(v21 + 32) = 0;
  uint64_t v22 = a8 + direct field offset for ConversationBridge.correctionsPlatformClient;
  *(_OWORD *)uint64_t v22 = 0u;
  *(_OWORD *)(v22 + 16) = 0u;
  *(void *)(v22 + 32) = 0;
  *(void *)(a8 + direct field offset for ConversationBridge.networkAvailabilityProvider) = 0;
  *(void *)(a8 + direct field offset for ConversationBridge.coreTelephonyServiceProvider) = 0;
  uint64_t v23 = a8 + direct field offset for ConversationBridge.currentSessionId;
  uint64_t v24 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  uint64_t v25 = a8 + direct field offset for ConversationBridge.sessionState;
  *(_OWORD *)uint64_t v25 = 0u;
  *(_OWORD *)(v25 + 16) = 0u;
  *(void *)(v25 + 32) = 0;
  uint64_t v26 = a8 + direct field offset for ConversationBridge.sessionUserId;
  uint64_t v27 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 1, 1, v27);
  uint64_t v28 = (char *)(a8 + direct field offset for ConversationBridge.isMUXEnabled);
  swift_retain();
  *uint64_t v28 = AFDeviceSupportsSiriMUX();
  *(void *)(a8 + direct field offset for ConversationBridge.muxContextMessage) = 0;
  *(_OWORD *)(a8 + direct field offset for ConversationBridge.userSessionState) = xmmword_1BA0526B0;
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }
  uint64_t v29 = direct field offset for ConversationBridge.instrumentationUtil;
  *(void *)(a8 + direct field offset for ConversationBridge.instrumentationUtil) = static ConversationBridgeInstrumentationUtil.sharedInstance;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v74, a8 + direct field offset for ConversationBridge.featureChecker);
  uint64_t v30 = one-time initialization token for executor;
  swift_retain();
  if (v30 != -1) {
    swift_once();
  }
  id v31 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  uint64_t v67 = v16;
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_beginAccess();
  char v32 = *v28;
  outlined init with copy of ReferenceResolutionClientProtocol(a3, (uint64_t)v73);
  swift_allocObject();
  swift_unknownObjectRetain();
  uint64_t v33 = FeatureChecker.init()();
  type metadata accessor for ConversationOutputSubmitter();
  uint64_t v34 = swift_allocObject();
  uint64_t v35 = specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:muxContextMessage:messagePublisher:featureChecker:)(a4, v32, 0, v73, (uint64_t)v33, v34);
  *(void *)(a8 + direct field offset for ConversationBridge.executionOutputSubmitter) = v35;
  type metadata accessor for PreExecutionDecisionMaker();
  *(void *)(a8 + direct field offset for ConversationBridge.decisionMaker) = swift_allocObject();
  id v36 = objc_msgSend(self, sel_sharedPreferences);
  type metadata accessor for PreExecutionActionHandler();
  swift_getObjectType();
  uint64_t v37 = *(void *)(a8 + v29);
  type metadata accessor for PreExecutionDialogHandler();
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v35;
  *(void *)(v38 + 24) = v36;
  swift_retain_n();
  id v39 = v36;
  swift_unknownObjectRetain();
  id v40 = v39;
  swift_retain();
  id v60 = v40;
  uint64_t v41 = v38;
  uint64_t v42 = a3;
  *(void *)(a8 + direct field offset for ConversationBridge.preExecutionActionHandler) = specialized PreExecutionActionHandler.__allocating_init(serviceHelper:instrumentationUtil:executionOutputSubmitter:preferences:dialogHandler:)(a4, v37, v35, (uint64_t)v40, v41);
  uint64_t v43 = a8 + direct field offset for ConversationBridge.overrideExecutionClient;
  *(_OWORD *)uint64_t v43 = 0u;
  *(_OWORD *)(v43 + 16) = 0u;
  *(void *)(v43 + 32) = 0;
  swift_beginAccess();
  uint64_t v44 = v70;
  outlined assign with copy of ReferenceResolutionClientProtocol?(v70, v21, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  swift_endAccess();
  type metadata accessor for RecentDialogTracker();
  swift_allocObject();
  *(void *)(a8 + direct field offset for ConversationBridge.recentDialogTracker) = RecentDialogTracker.init(timeProvider:)((uint64_t)closure #1 in RecentDialogTracker.init(), 0);
  swift_release();
  outlined init with copy of ReferenceResolutionClientProtocol(v42, (uint64_t)v73);
  uint64_t v45 = v71;
  outlined init with copy of ReferenceResolutionClientProtocol(v71, (uint64_t)v72);
  uint64_t v46 = one-time initialization token for conversationBridge;
  swift_unknownObjectRetain();
  if (v46 != -1) {
    swift_once();
  }
  uint64_t v47 = v63;
  uint64_t v48 = __swift_project_value_buffer(v63, (uint64_t)static Logger.conversationBridge);
  uint64_t v49 = (uint64_t)v62;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v62, v48, v47);
  int v50 = specialized ConversationRequestAwareBridgeBase.init(withName:messagePublisher:serviceHelper:conversationSessionsManaging:autoRegisterStartRequestMessageBase:logger:)(v64, v65, (uint64_t)v73, a4, (uint64_t)v72, 1, v49);
  swift_unknownObjectRelease();
  LOBYTE(v47) = *(unsigned char *)(v74[0] + 16);
  swift_retain();
  ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(v47);
  uint64_t v51 = type metadata accessor for TaskPriority();
  uint64_t v52 = (uint64_t)v66;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v66, 1, 1, v51);
  uint64_t v53 = one-time initialization token for shared;
  swift_retain();
  if (v53 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v54 = static MessageBusActor.shared;
  uint64_t v55 = lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, 255, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  uint64_t v56 = (void *)swift_allocObject();
  v56[2] = v54;
  v56[3] = v55;
  v56[4] = v50;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v52, (uint64_t)&closure #1 in ConversationBridge.asyncInit()partial apply, (uint64_t)v56);

  swift_release();
  static os_signpost_type_t.end.getter();
  int v57 = v67;
  os_signpost(_:dso:log:name:signpostID:)();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v44, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  __swift_destroy_boxed_opaque_existential_1Tm(v45);
  __swift_destroy_boxed_opaque_existential_1Tm(v42);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v57, v69);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v74);
  return v50;
}

void *specialized ConversationBridgeSPI.init(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v26 = a4;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v17 = __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationBridge);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v17, v13);
  type metadata accessor for AsyncSerialQueue();
  uint64_t v18 = (void *)swift_allocObject();
  void v18[2] = MEMORY[0x1E4FBC860];
  v18[3] = 0;
  v18[4] = 0;
  v18[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v19 = swift_allocObject();
  *(_DWORD *)(v19 + 16) = 0;
  v18[6] = v19;
  v18[7] = 0xD000000000000012;
  v18[8] = 0x80000001BA0527C0;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))((uint64_t)v18 + OBJC_IVAR____TtC14SiriKitRuntime16AsyncSerialQueue_logger, v16, v13);
  v7[2] = v18;
  v7[4] = a5;
  v7[5] = a1;
  v7[6] = a2;
  outlined init with copy of ReferenceResolutionClientProtocol(a3, (uint64_t)v30);
  outlined init with copy of ReferenceResolutionClientProtocol(a6, (uint64_t)v29);
  type metadata accessor for FeatureChecker();
  memset(v27, 0, sizeof(v27));
  uint64_t v28 = 0;
  swift_allocObject();
  id v20 = a5;
  swift_bridgeObjectRetain();
  uint64_t v21 = FeatureChecker.init()();
  type metadata accessor for ConversationBridge(0);
  uint64_t v22 = swift_allocObject();
  uint64_t v23 = specialized ConversationBridge.init(name:messagePublisher:serviceHelper:conversationSessionsManaging:rrClient:featureChecker:)(a1, a2, (uint64_t)v30, v26, (uint64_t)v29, (uint64_t)v27, (uint64_t)v21, v22);
  __swift_destroy_boxed_opaque_existential_1Tm(a6);
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  v7[3] = v23;
  return v7;
}

void *specialized ConversationBridge.init(name:messagePublisher:serviceHelper:conversationSessionsManaging:rrClient:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v80 = a6;
  uint64_t v73 = a2;
  uint64_t v72 = a1;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for Logger();
  uint64_t v69 = *(void *)(v71 - 8);
  MEMORY[0x1F4188790](v71);
  uint64_t v70 = (char *)v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for OSSignpostID();
  uint64_t v78 = *(void *)(v79 - 8);
  MEMORY[0x1F4188790](v79);
  id v20 = (char *)v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84[3] = a9;
  v84[4] = a10;
  uint64_t v75 = a10;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v84);
  uint64_t v22 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a9 - 8) + 32);
  v68[1] = boxed_opaque_existential_0;
  uint64_t v74 = a9;
  v22(boxed_opaque_existential_0, a7, a9);
  uint64_t v23 = (uint64_t *)(a8 + direct field offset for ConversationBridge.contextDonator);
  uint64_t v24 = one-time initialization token for sharedInstance;
  swift_retain();
  if (v24 != -1) {
    swift_once();
  }
  uint64_t v25 = static DeviceContextHelper.sharedInstance;
  void v23[3] = type metadata accessor for DeviceContextHelper();
  v23[4] = (uint64_t)&protocol witness table for DeviceContextHelper;
  *uint64_t v23 = v25;
  *(void *)(a8 + direct field offset for ConversationBridge.runSiriKitExecutorProcessor) = 0;
  *(unsigned char *)(a8 + direct field offset for ConversationBridge.isFirstRequestInSession) = 1;
  uint64_t v26 = a8 + direct field offset for ConversationBridge.$__lazy_storage_$_executionClient;
  *(_OWORD *)uint64_t v26 = 0u;
  *(_OWORD *)(v26 + 16) = 0u;
  *(void *)(v26 + 32) = 0;
  *(void *)(a8 + direct field offset for ConversationBridge.$__lazy_storage_$_nonRequestBridgePublisher) = 0;
  uint64_t v27 = a8 + direct field offset for ConversationBridge.rraasClient;
  *(_OWORD *)uint64_t v27 = 0u;
  *(_OWORD *)(v27 + 16) = 0u;
  *(void *)(v27 + 32) = 0;
  uint64_t v28 = a8 + direct field offset for ConversationBridge.correctionsPlatformClient;
  *(_OWORD *)uint64_t v28 = 0u;
  *(_OWORD *)(v28 + 16) = 0u;
  *(void *)(v28 + 32) = 0;
  *(void *)(a8 + direct field offset for ConversationBridge.networkAvailabilityProvider) = 0;
  *(void *)(a8 + direct field offset for ConversationBridge.coreTelephonyServiceProvider) = 0;
  uint64_t v29 = a8 + direct field offset for ConversationBridge.currentSessionId;
  uint64_t v30 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 1, 1, v30);
  uint64_t v31 = a8 + direct field offset for ConversationBridge.sessionState;
  *(_OWORD *)uint64_t v31 = 0u;
  *(_OWORD *)(v31 + 16) = 0u;
  *(void *)(v31 + 32) = 0;
  uint64_t v32 = a8 + direct field offset for ConversationBridge.sessionUserId;
  uint64_t v33 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v32, 1, 1, v33);
  uint64_t v34 = (char *)(a8 + direct field offset for ConversationBridge.isMUXEnabled);
  swift_retain();
  *uint64_t v34 = AFDeviceSupportsSiriMUX();
  *(void *)(a8 + direct field offset for ConversationBridge.muxContextMessage) = 0;
  *(_OWORD *)(a8 + direct field offset for ConversationBridge.userSessionState) = xmmword_1BA0526B0;
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }
  uint64_t v76 = v17;
  uint64_t v81 = a5;
  uint64_t v35 = direct field offset for ConversationBridge.instrumentationUtil;
  *(void *)(a8 + direct field offset for ConversationBridge.instrumentationUtil) = static ConversationBridgeInstrumentationUtil.sharedInstance;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v84, a8 + direct field offset for ConversationBridge.featureChecker);
  uint64_t v36 = one-time initialization token for executor;
  swift_retain();
  if (v36 != -1) {
    swift_once();
  }
  id v37 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  uint64_t v77 = v20;
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  swift_beginAccess();
  char v38 = *v34;
  outlined init with copy of ReferenceResolutionClientProtocol(a3, (uint64_t)v83);
  type metadata accessor for FeatureChecker();
  swift_allocObject();
  swift_unknownObjectRetain();
  id v39 = FeatureChecker.init()();
  type metadata accessor for ConversationOutputSubmitter();
  uint64_t v40 = swift_allocObject();
  uint64_t v41 = specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:muxContextMessage:messagePublisher:featureChecker:)(a4, v38, 0, v83, (uint64_t)v39, v40);
  *(void *)(a8 + direct field offset for ConversationBridge.executionOutputSubmitter) = v41;
  type metadata accessor for PreExecutionDecisionMaker();
  *(void *)(a8 + direct field offset for ConversationBridge.decisionMaker) = swift_allocObject();
  id v42 = objc_msgSend(self, sel_sharedPreferences);
  type metadata accessor for PreExecutionActionHandler();
  swift_getObjectType();
  uint64_t v43 = *(void *)(a8 + v35);
  type metadata accessor for PreExecutionDialogHandler();
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = v41;
  *(void *)(v44 + 24) = v42;
  swift_retain_n();
  id v45 = v42;
  swift_unknownObjectRetain();
  id v46 = v45;
  swift_retain();
  uint64_t v47 = v43;
  uint64_t v48 = a3;
  *(void *)(a8 + direct field offset for ConversationBridge.preExecutionActionHandler) = specialized PreExecutionActionHandler.__allocating_init(serviceHelper:instrumentationUtil:executionOutputSubmitter:preferences:dialogHandler:)(a4, v47, v41, (uint64_t)v46, v44);
  uint64_t v49 = a8 + direct field offset for ConversationBridge.overrideExecutionClient;
  *(_OWORD *)uint64_t v49 = 0u;
  *(_OWORD *)(v49 + 16) = 0u;
  *(void *)(v49 + 32) = 0;
  swift_beginAccess();
  uint64_t v50 = v80;
  outlined assign with copy of ReferenceResolutionClientProtocol?(v80, v27, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  swift_endAccess();
  type metadata accessor for RecentDialogTracker();
  swift_allocObject();
  *(void *)(a8 + direct field offset for ConversationBridge.recentDialogTracker) = RecentDialogTracker.init(timeProvider:)((uint64_t)closure #1 in RecentDialogTracker.init(), 0);
  swift_release();
  outlined init with copy of ReferenceResolutionClientProtocol(v48, (uint64_t)v83);
  uint64_t v51 = v81;
  outlined init with copy of ReferenceResolutionClientProtocol(v81, (uint64_t)v82);
  uint64_t v52 = one-time initialization token for conversationBridge;
  swift_unknownObjectRetain();
  if (v52 != -1) {
    swift_once();
  }
  uint64_t v53 = v71;
  uint64_t v54 = __swift_project_value_buffer(v71, (uint64_t)static Logger.conversationBridge);
  uint64_t v55 = (uint64_t)v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v70, v54, v53);
  uint64_t v56 = specialized ConversationRequestAwareBridgeBase.init(withName:messagePublisher:serviceHelper:conversationSessionsManaging:autoRegisterStartRequestMessageBase:logger:)(v72, v73, (uint64_t)v83, a4, (uint64_t)v82, 1, v55);
  swift_unknownObjectRelease();
  uint64_t v57 = v75;
  uint64_t v58 = *(uint64_t (**)(uint64_t, uint64_t))(v75 + 8);
  swift_retain();
  char v59 = v58(v74, v57);
  ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(v59 & 1);
  uint64_t v60 = type metadata accessor for TaskPriority();
  uint64_t v61 = (uint64_t)v76;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v76, 1, 1, v60);
  uint64_t v62 = one-time initialization token for shared;
  swift_retain();
  if (v62 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v63 = static MessageBusActor.shared;
  uint64_t v64 = lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, 255, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  uint64_t v65 = (void *)swift_allocObject();
  v65[2] = v63;
  v65[3] = v64;
  v65[4] = v56;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v61, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationBridge.asyncInit(), (uint64_t)v65);
  swift_release();

  static os_signpost_type_t.end.getter();
  uint64_t v66 = v77;
  os_signpost(_:dso:log:name:signpostID:)();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v50, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  __swift_destroy_boxed_opaque_existential_1Tm(v51);
  __swift_destroy_boxed_opaque_existential_1Tm(v48);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v66, v79);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v84);
  return v56;
}

void *specialized ConversationBridge.__allocating_init(name:messagePublisher:serviceHelper:conversationSessionsManaging:rrClient:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v15 = *(void *)(a9 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ConversationBridge(0);
  uint64_t v18 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a7, a9);
  return specialized ConversationBridge.init(name:messagePublisher:serviceHelper:conversationSessionsManaging:rrClient:featureChecker:)(a1, a2, a3, a4, v20, v21, (uint64_t)v17, v18, a9, a10);
}

uint64_t sub_1B9DF55F0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B9DF5630()
{
  swift_release();

  if (*(void *)(v0 + 40)) {
    swift_release();
  }

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t type metadata accessor for NonRequestExecutionBridgeDelegate(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for NonRequestExecutionBridgeDelegate);
}

uint64_t outlined copy of UserSessionState?(uint64_t a1, unint64_t a2)
{
  if (a2 != 2) {
    return outlined copy of UserSessionState(a1, a2);
  }
  return a1;
}

uint64_t outlined copy of UserSessionState(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of UserSessionState?(uint64_t a1, unint64_t a2)
{
  if (a2 != 2) {
    return outlined consume of UserSessionState(a1, a2);
  }
  return a1;
}

uint64_t outlined consume of UserSessionState(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B9DF56F0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #1 in ConversationBridge.handleRunSiriKitExecutorMessage(_:)(uint64_t a1, uint64_t a2)
{
  closure #1 in ConversationBridge.handleRunSiriKitExecutorMessage(_:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t base witness table accessor for Bridge in ConversationBridgeSPI(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type ConversationBridgeSPI and conformance ConversationBridgeSPI, a2, (void (*)(uint64_t))type metadata accessor for ConversationBridgeSPI);
}

uint64_t type metadata accessor for ConversationBridgeSPI()
{
  return self;
}

uint64_t sub_1B9DF57A4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 704))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9DF57FC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 728))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B9DF5854(char *a1, void *a2)
{
  char v2 = *a1;
  uint64_t v3 = (unsigned char *)(*a2 + direct field offset for ConversationBridge.isFirstRequestInSession);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = v2;
  return result;
}

uint64_t sub_1B9DF58A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 752))();
}

uint64_t sub_1B9DF58F0(uint64_t a1, uint64_t a2)
{
  outlined init with copy of ReferenceResolutionClientProtocol(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))(**(void **)a2 + 760))(v4);
}

uint64_t sub_1B9DF5954@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 776))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9DF59A8(uint64_t a1, uint64_t a2)
{
  char v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 784);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B9DF5A04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 800))();
}

uint64_t sub_1B9DF5A50(uint64_t a1, uint64_t a2)
{
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v4, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  return (*(uint64_t (**)(unsigned char *))(**(void **)a2 + 808))(v4);
}

uint64_t sub_1B9DF5AC8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 824))();
}

uint64_t sub_1B9DF5B14(uint64_t a1, uint64_t a2)
{
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v4, &demangling cache variable for type metadata for CorrectionsHandling?);
  return (*(uint64_t (**)(unsigned char *))(**(void **)a2 + 832))(v4);
}

uint64_t sub_1B9DF5B8C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 848))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9DF5BE0(uint64_t a1, uint64_t a2)
{
  char v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 856);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B9DF5C3C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 872))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9DF5C90(uint64_t a1, uint64_t a2)
{
  char v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 880);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B9DF5CEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 896))();
}

uint64_t sub_1B9DF5D3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 920))();
}

uint64_t sub_1B9DF5D88(uint64_t a1, uint64_t a2)
{
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
  return (*(uint64_t (**)(unsigned char *))(**(void **)a2 + 928))(v4);
}

uint64_t sub_1B9DF5E00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 944))();
}

uint64_t sub_1B9DF5E50@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 968))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B9DF5EA8(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 976))(*a1);
}

uint64_t sub_1B9DF5EF8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 992))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9DF5F4C(id *a1, uint64_t a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))(**(void **)a2 + 1000);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_1B9DF5FAC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1016))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B9DF6000(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, unint64_t))(**(void **)a2 + 1024);
  outlined copy of UserSessionState?(*a1, v3);
  return v4(v2, v3);
}

uint64_t method lookup function for ConversationBridgeSPI(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationBridgeSPI);
}

uint64_t dispatch thunk of ConversationBridgeSPI.__allocating_init(_:_:_:_:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of ConversationBridgeSPI.messageTypesForSubscription()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of ConversationBridgeSPI.aceCommandsGroups()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of ConversationBridgeSPI.aceCommands(forGroup:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of ConversationBridgeSPI.handleMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of ConversationBridgeSPI.handle(_:executionContextInfo:reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

void type metadata completion function for ConversationBridge()
{
  _s10Foundation4UUIDVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990]);
  if (v0 <= 0x3F)
  {
    _s10Foundation4UUIDVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for UserID?, MEMORY[0x1E4FA26E0]);
    if (v1 <= 0x3F) {
      swift_initClassMetadata2();
    }
  }
}

uint64_t method lookup function for ConversationBridge(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationBridge);
}

uint64_t dispatch thunk of ConversationBridge.runSiriKitExecutorProcessor.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 704))();
}

uint64_t dispatch thunk of ConversationBridge.isFirstRequestInSession.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 728))();
}

uint64_t dispatch thunk of ConversationBridge.executionClient.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 752))();
}

uint64_t dispatch thunk of ConversationBridge.executionClient.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 760))();
}

uint64_t dispatch thunk of ConversationBridge.executionClient.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 768))();
}

uint64_t dispatch thunk of ConversationBridge.nonRequestBridgePublisher.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 776))();
}

uint64_t dispatch thunk of ConversationBridge.nonRequestBridgePublisher.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 784))();
}

uint64_t dispatch thunk of ConversationBridge.nonRequestBridgePublisher.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 792))();
}

uint64_t dispatch thunk of ConversationBridge.rraasClient.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 800))();
}

uint64_t dispatch thunk of ConversationBridge.rraasClient.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 808))();
}

uint64_t dispatch thunk of ConversationBridge.rraasClient.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 816))();
}

uint64_t dispatch thunk of ConversationBridge.correctionsPlatformClient.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 824))();
}

uint64_t dispatch thunk of ConversationBridge.correctionsPlatformClient.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 832))();
}

uint64_t dispatch thunk of ConversationBridge.correctionsPlatformClient.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 840))();
}

uint64_t dispatch thunk of ConversationBridge.networkAvailabilityProvider.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 848))();
}

uint64_t dispatch thunk of ConversationBridge.networkAvailabilityProvider.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 856))();
}

uint64_t dispatch thunk of ConversationBridge.networkAvailabilityProvider.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 864))();
}

uint64_t dispatch thunk of ConversationBridge.coreTelephonyServiceProvider.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 872))();
}

uint64_t dispatch thunk of ConversationBridge.coreTelephonyServiceProvider.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 880))();
}

uint64_t dispatch thunk of ConversationBridge.coreTelephonyServiceProvider.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 888))();
}

uint64_t dispatch thunk of ConversationBridge.currentSessionId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 896))();
}

uint64_t dispatch thunk of ConversationBridge.currentSessionId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 904))();
}

uint64_t dispatch thunk of ConversationBridge.currentSessionId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 912))();
}

uint64_t dispatch thunk of ConversationBridge.sessionState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 920))();
}

uint64_t dispatch thunk of ConversationBridge.sessionState.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 928))();
}

uint64_t dispatch thunk of ConversationBridge.sessionState.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 936))();
}

uint64_t dispatch thunk of ConversationBridge.sessionUserId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 944))();
}

uint64_t dispatch thunk of ConversationBridge.sessionUserId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 952))();
}

uint64_t dispatch thunk of ConversationBridge.sessionUserId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 960))();
}

uint64_t dispatch thunk of ConversationBridge.isMUXEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 968))();
}

uint64_t dispatch thunk of ConversationBridge.isMUXEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 976))();
}

uint64_t dispatch thunk of ConversationBridge.isMUXEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 984))();
}

uint64_t dispatch thunk of ConversationBridge.muxContextMessage.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 992))();
}

uint64_t dispatch thunk of ConversationBridge.muxContextMessage.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1000))();
}

uint64_t dispatch thunk of ConversationBridge.muxContextMessage.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1008))();
}

uint64_t dispatch thunk of ConversationBridge.userSessionState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1016))();
}

uint64_t dispatch thunk of ConversationBridge.userSessionState.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1024))();
}

uint64_t dispatch thunk of ConversationBridge.userSessionState.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1032))();
}

uint64_t dispatch thunk of ConversationBridge.__allocating_init(name:messagePublisher:serviceHelper:conversationSessionsManaging:rrClient:featureChecker:)()
{
  return (*(uint64_t (**)(void))(v0 + 1040))();
}

uint64_t dispatch thunk of ConversationBridge.__allocating_init(name:messagePublisher:serviceHelper:conversationSessionsManaging:conversationClient:rrClient:correctionsPlatformClient:networkAvailabilityProvider:coreTelephonyServiceProvider:recentDialogTracker:featureChecker:)()
{
  return (*(uint64_t (**)(void))(v0 + 1048))();
}

uint64_t dispatch thunk of ConversationBridge.handleMUXContextMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1072))();
}

uint64_t dispatch thunk of ConversationBridge.handleActiveUserSessionDetectedMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1080))();
}

uint64_t dispatch thunk of ConversationBridge.handleRunSiriKitExecutorMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1088))();
}

uint64_t dispatch thunk of ConversationBridge.handleStartSessionMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1096))();
}

uint64_t dispatch thunk of ConversationBridge.handleSessionEndedMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1104))();
}

uint64_t dispatch thunk of ConversationBridge.handleExecutionSystemSwitchedMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1112))();
}

uint64_t dispatch thunk of ConversationBridge.createRunSiriKitExecutorProcessor(command:executionContext:reply:source:userId:sessionId:plannerInvocationId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1120))();
}

uint64_t dispatch thunk of ConversationBridge.handleFlowOutputCandidate(_:_:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1128))();
}

uint64_t dispatch thunk of ConversationBridge.handleServerContextUpdateCandidate(_:_:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1136))();
}

uint64_t dispatch thunk of ConversationBridge.handleRunSiriKitExecutor(_:_:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1144))();
}

uint64_t dispatch thunk of ConversationBridge.handleSiriKitPluginSignal(_:_:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1160))();
}

uint64_t dispatch thunk of ConversationBridge.handleSiriKitClearContext(_:_:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1168))();
}

uint64_t dispatch thunk of ConversationBridge.handleRemoteExecutionContextUpdate(_:_:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1176))();
}

uint64_t dispatch thunk of ConversationBridge.handleExecutionServiceRuntimeError(error:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1184))();
}

void _s10Foundation4UUIDVSgMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t ObjC metadata update function for NonRequestExecutionBridgeDelegate()
{
  return type metadata accessor for NonRequestExecutionBridgeDelegate(0);
}

void type metadata completion function for NonRequestExecutionBridgeDelegate()
{
  _s10Foundation4UUIDVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for UserID?, MEMORY[0x1E4FA26E0]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for NonRequestExecutionBridgeDelegate(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for NonRequestExecutionBridgeDelegate);
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.__allocating_init(executionOutputSubmitter:userId:serviceHelper:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.submit(executionOutput:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.close(withExecutionOutput:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.close(withExecutionOutput:needsUserInput:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.close(withExecutionOutput:errorString:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.close(withExecutionOutput:errorString:shouldFailRequest:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.fallbackToServer(forResultCandidateId:serverFallbackReason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.fallbackToInfoDomainResults(forResultCandidateId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.fallbackToIntelligenceFlow(prescribedTool:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.fallbackToSiriX(rcId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.prepareForAudioHandoff(completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.prepareForAudioHandoffFailed(completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.fetchContexts(for:includesNearByDevices:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.fetchSpeechInfo(reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.flowPluginWillExecute(flowPluginInfo:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.acquireConversationUserInput(forUserId:requestId:reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.closeServerRequest(forExecutionRequestId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.fetchRecentDialogs(reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.actionCandidatesGenerated(_:rcId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.willExecute(executionInputInfo:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.fetchSelfReflectionDecision(reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.submitExternalActivationRequest(withRequestInfo:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of NonRequestExecutionBridgeDelegate.postToMessageBus(message:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t partial apply for implicit closure #3 in implicit closure #2 in ConversationBridge.handleRemoteExecutionContextUpdate(_:_:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 968))();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in ConversationBridge.handleServerContextUpdateCandidate(_:_:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1608))();
}

uint64_t sub_1B9DF7124()
{
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t (*partial apply for closure #1 in ConversationBridge.doHandleAceRunSiriKitExecutor(command:executionContext:plannerInvocationId:reply:)(uint64_t a1))(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #1 in ConversationBridge.doHandleAceRunSiriKitExecutor(command:executionContext:plannerInvocationId:reply:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1B9DF7174()
{
  return objectdestroy_57Tm(MEMORY[0x1E4FBC8D0], MEMORY[0x1E4FBC898]);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationBridge.doHandleAceRunSiriKitExecutor(command:executionContext:plannerInvocationId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t))(**(void **)(v4 + 16) + 1600))(a1, a2, *(void *)(v4 + 24), *(void *)(v4 + 32), a3, a4);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationBridge.handleRunSiriKitExecutorMessage(_:)(uint64_t a1)
{
  return closure #1 in closure #1 in ConversationBridge.handleRunSiriKitExecutorMessage(_:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_1B9DF7208()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #2 in closure #1 in ConversationBridge.handleRunSiriKitExecutorMessage(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #2 in closure #1 in ConversationBridge.handleRunSiriKitExecutorMessage(_:)(a1, v4, v5, v7, v6);
}

uint64_t partial apply for closure #1 in closure #32 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 848);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #40 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 1088);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #46 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 1176);
  swift_retain();
  v9(a1, a2, a3, a4);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #45 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 1168);
  swift_retain();
  v9(a1, a2, a3, a4);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #44 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 1160);
  swift_retain();
  v9(a1, a2, a3, a4);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #43 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 1128);
  swift_retain();
  v9(a1, a2, a3, a4);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #42 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 1136);
  swift_retain();
  v9(a1, a2, a3, a4);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #41 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 1144);
  swift_retain();
  v9(a1, a2, a3, a4);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #39 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 1080);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #38 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 920);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #37 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  swift_retain();
  ConversationRequestProcessor.handleRunPommesResponseMessage(_:)(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #36 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 880);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #35 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 872);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #34 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 864);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #33 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 824);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #31 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 856);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #30 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 840);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #29 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 832);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #28 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 688);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #27 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 624);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #26 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 616);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #25 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 608);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #24 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 680);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #23 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 784);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #22 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 768);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #21 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 760);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #20 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 752);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #19 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 696);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #18 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 656);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #17 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 648);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #16 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 672);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #15 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 640);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #14 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 632);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #13 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 1552);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #12 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 960);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #11 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 936);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #10 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 816);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #9 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 776);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #8 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 744);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #7 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 736);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #6 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 712);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #5 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 976);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #4 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 1112);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #3 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 1072);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #2 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 1104);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for closure #1 in closure #1 in ConversationBridge.registerAllHandlers(isSystemAssistantExperienceSupported:)(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 1096);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for specialized closure #1 in closure #1 in ConversationRequestAwareBridgeBase.registerMessages()(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 136);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t partial apply for specialized closure #1 in closure #2 in ConversationRequestAwareBridgeBase.registerMessages()(uint64_t a1)
{
  unint64_t v3 = *(void (**)(uint64_t))(*(void *)v1 + 144);
  swift_retain();
  v3(a1);

  return swift_release();
}

uint64_t sub_1B9DF8980()
{
  return objectdestroy_57Tm(MEMORY[0x1E4FBC8F8], MEMORY[0x1E4FBC8D0]);
}

uint64_t partial apply for closure #1 in ConversationBridge.asyncInit()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationBridge.asyncInit()(a1, v4, v5, v6);
}

uint64_t sub_1B9DF8A60()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationBridge.executionClient.getter(void *a1)
{
  return closure #1 in closure #1 in ConversationBridge.executionClient.getter(a1);
}

uint64_t sub_1B9DF8AA0()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ConversationBridge.executionClient.getter(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in closure #1 in ConversationBridge.executionClient.getter(a1, v4, v5, v7, v6);
}

uint64_t sub_1B9DF8BA8()
{
  return objectdestroy_57Tm(MEMORY[0x1E4FBC8F8], MEMORY[0x1E4FBC8D0]);
}

uint64_t objectdestroy_57Tm(void (*a1)(void), void (*a2)(void))
{
  a1(*(void *)(v2 + 16));
  a2(*(void *)(v2 + 32));

  return MEMORY[0x1F4186498](v2, 40, 7);
}

unint64_t ConversationOutputError.rawValue.getter(char a1)
{
  unint64_t result = 0x5464696C61766E69;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x636E61436E727574;
      break;
    case 2:
      unint64_t result = 0xD000000000000024;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0xD000000000000015;
      break;
    case 5:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 6:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 7:
      unint64_t result = 0xD000000000000021;
      break;
    case 8:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 9:
      unint64_t result = 0xD000000000000021;
      break;
    case 10:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 11:
      unint64_t result = 0xD000000000000023;
      break;
    case 12:
    case 15:
    case 17:
      unint64_t result = 0xD000000000000014;
      break;
    case 13:
      unint64_t result = 0x426567617373656DLL;
      break;
    case 14:
      unint64_t result = 0x7553746F4E697061;
      break;
    case 16:
      unint64_t result = 0xD000000000000019;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConversationOutputError(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = ConversationOutputError.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == ConversationOutputError.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConversationOutputError()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  ConversationOutputError.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ConversationOutputError()
{
  ConversationOutputError.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConversationOutputError()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  ConversationOutputError.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ConversationOutputError@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = specialized ConversationOutputError.init(rawValue:)();
  *a1 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ConversationOutputError@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = ConversationOutputError.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t specialized ConversationOutputError.init(rawValue:)()
{
  unint64_t v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x12) {
    return 18;
  }
  else {
    return v0;
  }
}

uint64_t getEnumTagSinglePayload for ConversationOutputError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEF) {
    goto LABEL_17;
  }
  if (a2 + 17 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 17) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 17;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x12;
  int v8 = v6 - 18;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ConversationOutputError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEE)
  {
    unsigned int v6 = ((a2 - 239) >> 8) + 1;
    *unint64_t result = a2 + 17;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9DF9220);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 17;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConversationOutputError()
{
  return &type metadata for ConversationOutputError;
}

uint64_t ConversationBridgeFeatureFlag.isEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  unint64_t v0 = (unsigned __int8 *)(static ConversationBridgeFeatureFlag.forceEnabled + 16);
  char v1 = (os_unfair_lock_s *)(static ConversationBridgeFeatureFlag.forceEnabled + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static ConversationBridgeFeatureFlag.forceEnabled + 20));
  partial apply for closure #1 in ConversationBridgeFeatureFlag.isEnabled.getter(v0, &v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

uint64_t *ConversationBridgeFeatureFlag.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  return &static ConversationBridgeFeatureFlag.forceEnabled;
}

uint64_t static ConversationBridgeFeatureFlag.forceEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }

  return swift_retain();
}

const char *ConversationBridgeFeatureFlag.domain.getter()
{
  return "Siri";
}

const char *ConversationBridgeFeatureFlag.feature.getter()
{
  return "conversationBridge";
}

unsigned __int8 *closure #1 in ConversationBridgeFeatureFlag.isEnabled.getter@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  if (v3 == 2)
  {
    BOOL v7 = &type metadata for ConversationBridgeFeatureFlag;
    unint64_t v8 = lazy protocol witness table accessor for type ConversationBridgeFeatureFlag and conformance ConversationBridgeFeatureFlag();
    char v4 = isFeatureEnabled(_:)();
    unint64_t result = (unsigned __int8 *)__swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v6);
    char v5 = v4 & 1;
  }
  else
  {
    char v5 = v3 & 1;
  }
  *a2 = v5;
  return result;
}

uint64_t static ConversationBridgeFeatureFlag.== infix(_:_:)()
{
  return 1;
}

void ConversationBridgeFeatureFlag.hash(into:)()
{
}

Swift::Int ConversationBridgeFeatureFlag.hashValue.getter()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type ConversationBridgeFeatureFlag and conformance ConversationBridgeFeatureFlag()
{
  unint64_t result = lazy protocol witness table cache variable for type ConversationBridgeFeatureFlag and conformance ConversationBridgeFeatureFlag;
  if (!lazy protocol witness table cache variable for type ConversationBridgeFeatureFlag and conformance ConversationBridgeFeatureFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationBridgeFeatureFlag and conformance ConversationBridgeFeatureFlag);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConversationBridgeFeatureFlag and conformance ConversationBridgeFeatureFlag;
  if (!lazy protocol witness table cache variable for type ConversationBridgeFeatureFlag and conformance ConversationBridgeFeatureFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationBridgeFeatureFlag and conformance ConversationBridgeFeatureFlag);
  }
  return result;
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance ConversationBridgeFeatureFlag()
{
  return "conversationBridge";
}

unsigned char *storeEnumTagSinglePayload for ConversationBridgeFeatureFlag(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B9DF95F4);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConversationBridgeFeatureFlag()
{
  return &type metadata for ConversationBridgeFeatureFlag;
}

uint64_t *ConversationBridgeInstrumentationUtil.sharedInstance.unsafeMutableAddressor()
{
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }
  return &static ConversationBridgeInstrumentationUtil.sharedInstance;
}

uint64_t one-time initialization function for sharedInstance()
{
  uint64_t v0 = type metadata accessor for FeatureChecker();
  swift_allocObject();
  uint64_t v5 = v0;
  unsigned int v6 = &protocol witness table for FeatureChecker;
  *(void *)&long long v4 = FeatureChecker.init()();
  type metadata accessor for ConversationBridgeInstrumentationUtil();
  char v1 = (void *)swift_allocObject();
  int v2 = self;
  swift_retain();
  v1[2] = objc_msgSend(v2, sel_sharedStream);
  type metadata accessor for InstrumentationUtil();
  v1[3] = swift_allocObject();
  v1[7] = &type metadata for ComponentIdGeneratorImpl;
  v1[8] = &protocol witness table for ComponentIdGeneratorImpl;
  v1[9] = objc_msgSend(v2, sel_sharedAnalytics);
  outlined init with take of ReferenceResolutionClientProtocol(&v4, (uint64_t)(v1 + 10));
  uint64_t result = swift_release();
  static ConversationBridgeInstrumentationUtil.sharedInstance = (uint64_t)v1;
  return result;
}

uint64_t static ConversationBridgeInstrumentationUtil.sharedInstance.getter()
{
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t ConversationBridgeInstrumentationUtil.stream.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ConversationBridgeInstrumentationUtil.commonInstrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t ConversationBridgeInstrumentationUtil.componentIdGenerator.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 32, a1);
}

id ConversationBridgeInstrumentationUtil.analyticsClient.getter()
{
  return *(id *)(v0 + 72);
}

void *ConversationBridgeInstrumentationUtil.__allocating_init(_:_:_:_:_:)(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5)
{
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = a1;
  v10[3] = a2;
  outlined init with take of ReferenceResolutionClientProtocol(a3, (uint64_t)(v10 + 4));
  v10[9] = a4;
  outlined init with take of ReferenceResolutionClientProtocol(a5, (uint64_t)(v10 + 10));
  return v10;
}

void *ConversationBridgeInstrumentationUtil.init(_:_:_:_:_:)(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5)
{
  v5[2] = a1;
  v5[3] = a2;
  outlined init with take of ReferenceResolutionClientProtocol(a3, (uint64_t)(v5 + 4));
  v5[9] = a4;
  outlined init with take of ReferenceResolutionClientProtocol(a5, (uint64_t)(v5 + 10));
  return v5;
}

Swift::Void __swiftcall ConversationBridgeInstrumentationUtil.logExecutionRequestStarted(executionForRSKE:source:preExecutionType:rootRequestId:requestId:resultCandidateId:triggerlessFollowupHandledLocally:)(Swift::Bool executionForRSKE, SiriKitRuntime::RSKESource_optional source, SiriKitRuntime::PreExecutionRuleType_optional preExecutionType, Swift::String rootRequestId, Swift::String requestId, Swift::String_optional resultCandidateId, Swift::Bool triggerlessFollowupHandledLocally)
{
  uint64_t v8 = v7;
  object = rootRequestId._object;
  countAndFlagsBits = resultCandidateId.value._countAndFlagsBits;
  uint64_t v55 = requestId._object;
  uint64_t v53 = requestId._countAndFlagsBits;
  uint64_t v9 = rootRequestId._countAndFlagsBits;
  uint64_t v10 = *(void *)&preExecutionType;
  uint64_t v11 = *(void *)&source;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v54 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v51 - v16;
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v56 = *(void *)(v18 - 8);
  uint64_t v57 = v18;
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  uint64_t v52 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v51 - v21;
  uint64_t v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0D78]), sel_init);
  if (!v23)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.conversationBridge);
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl(&dword_1B9C64000, v60, v33, "Failed to create ORCHSchemaORCHExecutionRequestReceived event", v34, 2u);
      MEMORY[0x1BA9E48C0](v34, -1, -1);
    }
    goto LABEL_24;
  }
  uint64_t v60 = v23;
  if (executionForRSKE)
  {
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 256))(v11);
    [v60 setCommandSource:v24];
    uint64_t v23 = v60;
  }
  [v23 setExecutionForRSKE:executionForRSKE];
  uint64_t v25 = (*(uint64_t (**)(uint64_t, Swift::Bool))(*(void *)v8 + 264))(v10, triggerlessFollowupHandledLocally);
  if ((v25 & 0x100000000) == 0) {
    [v60 setPreExecutionDecision:v25];
  }
  id v26 = specialized InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)(v9, (uint64_t)object, (uint64_t)countAndFlagsBits, (uint64_t)resultCandidateId.value._object, 1);
  if (!v26)
  {
LABEL_24:
    char v38 = v60;
    goto LABEL_25;
  }
  uint64_t v27 = v26;
  id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0D60]), sel_init);
  if (v28)
  {
    uint64_t v29 = v28;
    objc_msgSend(v28, sel_setStartedOrChanged_, v60);
    if (resultCandidateId.value._object)
    {
      UUID.init(uuidString:)();
      uint64_t v31 = v56;
      uint64_t v30 = v57;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v17, 1, v57) == 1)
      {
        outlined destroy of UUID?((uint64_t)v17);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v22, v17, v30);
        id v39 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        id v41 = objc_msgSend(v39, sel_initWithNSUUID_, isa);

        objc_msgSend(v29, sel_setTrpId_, v41);
        (*(void (**)(char *, uint64_t))(v31 + 8))(v22, v30);
      }
    }
    uint64_t v42 = *(void *)(v8 + 104);
    uint64_t v43 = *(void *)(v8 + 112);
    __swift_project_boxed_opaque_existential_1((void *)(v8 + 80), v42);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v43 + 16))(v42, v43))
    {
      uint64_t v44 = (uint64_t)v54;
      UUID.init(uuidString:)();
      uint64_t v46 = v56;
      uint64_t v45 = v57;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v44, 1, v57) == 1)
      {
        outlined destroy of UUID?(v44);
      }
      else
      {
        uint64_t v47 = v52;
        (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(v52, v44, v45);
        id v48 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
        Class v49 = UUID._bridgeToObjectiveC()().super.isa;
        id v50 = objc_msgSend(v48, sel_initWithNSUUID_, v49);

        objc_msgSend(v29, sel_setSubRequestId_, v50);
        (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v45);
      }
    }
    objc_msgSend(v27, sel_setExecutionBridgeContext_, v29);
    objc_msgSend(*(id *)(v8 + 16), sel_emitMessage_, v27);

    return;
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  __swift_project_value_buffer(v35, (uint64_t)static Logger.conversationBridge);
  countAndFlagsBits = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(countAndFlagsBits, v36))
  {

    goto LABEL_24;
  }
  id v37 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)id v37 = 0;
  _os_log_impl(&dword_1B9C64000, countAndFlagsBits, v36, "Failed to create ORCHSchemaORCHExecutionBridgeContext event", v37, 2u);
  MEMORY[0x1BA9E48C0](v37, -1, -1);

  char v38 = countAndFlagsBits;
LABEL_25:
}

Swift::Void __swiftcall ConversationBridgeInstrumentationUtil.logExecutionRequestEnded(rootRequestId:requestId:resultCandidateId:)(Swift::String rootRequestId, Swift::String requestId, Swift::String resultCandidateId)
{
  Swift::String v43 = requestId;
  object = resultCandidateId._object;
  uint64_t countAndFlagsBits = resultCandidateId._countAndFlagsBits;
  uint64_t v5 = rootRequestId._object;
  uint64_t v6 = rootRequestId._countAndFlagsBits;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&isa - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&isa - v11;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v45 = *(NSObject **)(v13 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&isa - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&isa - v17;
  uint64_t v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0D68]), sel_init);
  if (!v19)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationBridge);
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_1B9C64000, v46, v26, "Failed to create ORCHSchemaORCHExecutionEnded event", v27, 2u);
      MEMORY[0x1BA9E48C0](v27, -1, -1);
    }
    goto LABEL_19;
  }
  uint64_t v46 = v19;
  [v19 setExists:1];
  id v20 = specialized InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)(v6, (uint64_t)v5, countAndFlagsBits, (uint64_t)object, 1);
  if (!v20)
  {
LABEL_19:
    uint64_t v31 = v46;
    goto LABEL_20;
  }
  uint64_t v21 = v20;
  id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0D60]), sel_init);
  if (v22)
  {
    uint64_t v23 = v22;
    UUID.init(uuidString:)();
    uint64_t v24 = v45;
    Class isa = (unsigned int (*)(char *, uint64_t, uint64_t))v45[6].isa;
    if (isa(v12, 1, v13) == 1)
    {
      outlined destroy of UUID?((uint64_t)v12);
    }
    else
    {
      ((void (*)(char *, char *, uint64_t))v24[4].isa)(v18, v12, v13);
      id v32 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
      Class v33 = UUID._bridgeToObjectiveC()().super.isa;
      id v34 = objc_msgSend(v32, sel_initWithNSUUID_, v33);

      objc_msgSend(v23, sel_setTrpId_, v34);
      ((void (*)(char *, uint64_t))v24[1].isa)(v18, v13);
    }
    uint64_t v35 = v44;
    uint64_t v36 = v44[13];
    uint64_t v37 = v44[14];
    __swift_project_boxed_opaque_existential_1(v44 + 10, v36);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v37 + 16))(v36, v37))
    {
      UUID.init(uuidString:)();
      if (isa(v10, 1, v13) == 1)
      {
        outlined destroy of UUID?((uint64_t)v10);
      }
      else
      {
        char v38 = v45;
        ((void (*)(char *, char *, uint64_t))v45[4].isa)(v16, v10, v13);
        id v39 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
        Class v40 = UUID._bridgeToObjectiveC()().super.isa;
        id v41 = objc_msgSend(v39, sel_initWithNSUUID_, v40);

        objc_msgSend(v23, sel_setSubRequestId_, v41);
        ((void (*)(char *, uint64_t))v38[1].isa)(v16, v13);
      }
    }
    objc_msgSend(v23, sel_setEnded_, v46);
    objc_msgSend(v21, sel_setExecutionBridgeContext_, v23);
    objc_msgSend((id)v35[2], sel_emitMessage_, v21);

    return;
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Logger.conversationBridge);
  uint64_t v45 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v45, v29))
  {

    goto LABEL_19;
  }
  uint64_t v30 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v30 = 0;
  _os_log_impl(&dword_1B9C64000, v45, v29, "Failed to create ORCHSchemaORCHExecutionBridgeContext event", v30, 2u);
  MEMORY[0x1BA9E48C0](v30, -1, -1);

  uint64_t v31 = v45;
LABEL_20:
}

Swift::Void __swiftcall ConversationBridgeInstrumentationUtil.logExecutionRequestFailed(error:rootRequestId:requestId:resultCandidateId:)(Swift::String error, Swift::String rootRequestId, Swift::String requestId, Swift::String_optional resultCandidateId)
{
  Swift::String v50 = requestId;
  object = resultCandidateId.value._object;
  uint64_t countAndFlagsBits = resultCandidateId.value._countAndFlagsBits;
  uint64_t v6 = rootRequestId._object;
  uint64_t v7 = rootRequestId._countAndFlagsBits;
  uint64_t v8 = error._object;
  uint64_t v9 = error._countAndFlagsBits;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v48 - v14;
  uint64_t v16 = type metadata accessor for UUID();
  Class isa = v16[-1].isa;
  uint64_t v53 = v16;
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  Class v49 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  id v20 = (char *)&v48 - v19;
  uint64_t v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0D70]), sel_init);
  if (!v21)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.conversationBridge);
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v31))
    {
      id v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v32 = 0;
      _os_log_impl(&dword_1B9C64000, v54, v31, "Failed to create ORCHSchemaORCHExecutionFailed event", v32, 2u);
      MEMORY[0x1BA9E48C0](v32, -1, -1);
    }
    goto LABEL_20;
  }
  uint64_t v54 = v21;
  id v22 = (void *)MEMORY[0x1BA9E2DD0](v9, v8);
  [v54 setErrorString:v22];

  id v23 = specialized InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)(v7, (uint64_t)v6, countAndFlagsBits, (uint64_t)object, 1);
  if (!v23)
  {
LABEL_20:
    uint64_t v36 = v54;
    goto LABEL_21;
  }
  uint64_t v24 = v23;
  id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0D60]), sel_init);
  if (v25)
  {
    os_log_type_t v26 = v25;
    uint64_t v27 = v51;
    if (object)
    {
      UUID.init(uuidString:)();
      Class v29 = isa;
      uint64_t v28 = v53;
      if ((*((unsigned int (**)(char *, uint64_t, NSObject *))isa + 6))(v15, 1, v53) == 1)
      {
        outlined destroy of UUID?((uint64_t)v15);
      }
      else
      {
        (*((void (**)(char *, char *, NSObject *))v29 + 4))(v20, v15, v28);
        id v37 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
        Class v38 = UUID._bridgeToObjectiveC()().super.isa;
        id v39 = objc_msgSend(v37, sel_initWithNSUUID_, v38);

        objc_msgSend(v26, sel_setTrpId_, v39);
        (*((void (**)(char *, NSObject *))v29 + 1))(v20, v28);
      }
    }
    uint64_t v40 = *(void *)(v27 + 104);
    uint64_t v41 = *(void *)(v27 + 112);
    __swift_project_boxed_opaque_existential_1((void *)(v27 + 80), v40);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v41 + 16))(v40, v41))
    {
      UUID.init(uuidString:)();
      Class v43 = isa;
      uint64_t v42 = v53;
      if ((*((unsigned int (**)(char *, uint64_t, NSObject *))isa + 6))(v13, 1, v53) == 1)
      {
        outlined destroy of UUID?((uint64_t)v13);
      }
      else
      {
        uint64_t v44 = v49;
        (*((void (**)(char *, char *, NSObject *))v43 + 4))(v49, v13, v42);
        id v45 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
        Class v46 = UUID._bridgeToObjectiveC()().super.isa;
        id v47 = objc_msgSend(v45, sel_initWithNSUUID_, v46);

        objc_msgSend(v26, sel_setSubRequestId_, v47);
        (*((void (**)(char *, NSObject *))v43 + 1))(v44, v42);
      }
    }
    objc_msgSend(v26, sel_setFailed_, v54);
    objc_msgSend(v24, sel_setExecutionBridgeContext_, v26);
    objc_msgSend(*(id *)(v27 + 16), sel_emitMessage_, v24);

    return;
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  __swift_project_value_buffer(v33, (uint64_t)static Logger.conversationBridge);
  uint64_t v53 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v53, v34))
  {

    goto LABEL_20;
  }
  uint64_t v35 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v35 = 0;
  _os_log_impl(&dword_1B9C64000, v53, v34, "Failed to create ORCHSchemaORCHExecutionBridgeContext event", v35, 2u);
  MEMORY[0x1BA9E48C0](v35, -1, -1);

  uint64_t v36 = v53;
LABEL_21:
}

void ConversationBridgeInstrumentationUtil.logFlowOutputSubmitted(outputSubmissionId:flowCommandReceived:flowCommandResponseError:requestId:rootRequestId:executionOutput:)(uint64_t a1, char a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v98 = a4;
  unint64_t v99 = a5;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v93 = (char *)v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)v89 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)v89 - v20;
  uint64_t v103 = type metadata accessor for UUID();
  Class isa = v103[-1].isa;
  uint64_t v22 = MEMORY[0x1F4188790](v103);
  uint64_t v92 = (char *)v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v100 = (char *)v89 - v25;
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)v89 - v26;
  unint64_t v28 = a7;
  if (!a7)
  {
    unint64_t v28 = v99;
    swift_bridgeObjectRetain();
    a6 = v98;
  }
  swift_bridgeObjectRetain();
  Class v29 = specialized InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)(a6, v28, 0, 0, 0);
  if (!v29)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain();
    Class v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      uint64_t v105 = v41;
      *(_DWORD *)uint64_t v40 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a6, v28, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v38, v39, "Failed to create wrapper event with rootRequestId = %s for logFlowOutputSubmitted", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v41, -1, -1);
      MEMORY[0x1BA9E48C0](v40, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return;
  }
  uint64_t v101 = v29;
  swift_bridgeObjectRelease();
  id v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0D80]), sel_init);
  if (!v30)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)static Logger.conversationBridge);
    uint64_t v103 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v103, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl(&dword_1B9C64000, v103, v43, "Failed to create ORCHSchemaORCHFlowOutputSubmitted event", v44, 2u);
      MEMORY[0x1BA9E48C0](v44, -1, -1);

      id v45 = v103;
    }
    else
    {

      id v45 = v101;
    }

    return;
  }
  os_log_type_t v31 = v30;
  objc_msgSend(v30, sel_setFlowOutputSubmissionId_, a1);
  objc_msgSend(v31, sel_setFlowCommandReceived_, a2 & 1);
  objc_msgSend(v31, sel_setFlowCommandResponseError_, a3 & 1);
  id v32 = *(void **)(a8 + OBJC_IVAR___SKRExecutionOutput_command);
  id v97 = v31;
  uint64_t v33 = v103;
  if (!v32) {
    goto LABEL_53;
  }
  id v34 = objc_msgSend(v32, sel_aceId);
  if (v34)
  {
    uint64_t v35 = v34;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    UUID.init(uuidString:)();
    Class v36 = isa;
    if ((*((unsigned int (**)(char *, uint64_t, NSObject *))isa + 6))(v21, 1, v33) == 1)
    {
      outlined destroy of UUID?((uint64_t)v21);
      swift_bridgeObjectRelease();
    }
    else
    {
      (*((void (**)(char *, char *, NSObject *))v36 + 4))(v27, v21, v33);
      id v46 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
      Class v47 = UUID._bridgeToObjectiveC()().super.isa;
      id v48 = objc_msgSend(v46, sel_initWithNSUUID_, v47);

      (*((void (**)(char *, NSObject *))v36 + 1))(v27, v33);
      swift_bridgeObjectRelease();
      if (v48)
      {
        objc_msgSend(v31, sel_setAceCommandId_, v48);
      }
    }
  }
  self;
  uint64_t v49 = swift_dynamicCastObjCClass();
  if (!v49)
  {
LABEL_53:
    uint64_t v73 = v95;
    uint64_t v74 = v95[13];
    uint64_t v75 = v95[14];
    __swift_project_boxed_opaque_existential_1(v95 + 10, v74);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v75 + 16))(v74, v75))
    {
      uint64_t v76 = (uint64_t)v93;
      UUID.init(uuidString:)();
      Class v77 = isa;
      if ((*((unsigned int (**)(uint64_t, uint64_t, NSObject *))isa + 6))(v76, 1, v33) == 1)
      {
        outlined destroy of UUID?(v76);
LABEL_59:
        if (one-time initialization token for conversationBridge != -1) {
          swift_once();
        }
        uint64_t v83 = type metadata accessor for Logger();
        __swift_project_value_buffer(v83, (uint64_t)static Logger.conversationBridge);
        uint64_t v84 = Logger.logObject.getter();
        os_log_type_t v85 = static os_log_type_t.error.getter();
        BOOL v86 = os_log_type_enabled(v84, v85);
        id v87 = v97;
        if (v86)
        {
          uint64_t v88 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v88 = 0;
          _os_log_impl(&dword_1B9C64000, v84, v85, "Failed to convert subRequestLogId for logFlowOutputSubmitted", v88, 2u);
          MEMORY[0x1BA9E48C0](v88, -1, -1);
        }
        else
        {
        }
        return;
      }
      uint64_t v78 = v92;
      (*((void (**)(char *, uint64_t, NSObject *))v77 + 4))(v92, v76, v33);
      id v79 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
      Class v80 = UUID._bridgeToObjectiveC()().super.isa;
      id v81 = objc_msgSend(v79, sel_initWithNSUUID_, v80);

      (*((void (**)(char *, NSObject *))v77 + 1))(v78, v33);
      if (!v81) {
        goto LABEL_59;
      }
      objc_msgSend(v97, sel_setSubRequestId_, v81);
    }
    id v82 = v97;
    [v101 setFlowOutputSubmitted:v97];
    objc_msgSend((id)v73[2], sel_emitMessage_, v101);

    return;
  }
  Swift::String v50 = (void *)v49;
  id v51 = v32;
  id v52 = objc_msgSend(v50, sel_views);
  if (!v52)
  {

    goto LABEL_53;
  }
  uint64_t v53 = v52;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
  unint64_t v54 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v89[1] = (id)type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
  Class v55 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v31, sel_setAceViewIds_, v55);

  if (v54 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v56 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v57 = &off_1E61F1000;
    if (v56) {
      goto LABEL_28;
    }
    goto LABEL_51;
  }
  uint64_t v56 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v57 = &off_1E61F1000;
  if (!v56)
  {
LABEL_51:

LABEL_52:
    swift_bridgeObjectRelease();
    goto LABEL_53;
  }
LABEL_28:
  v89[0] = v51;
  if (v56 >= 1)
  {
    uint64_t v58 = 0;
    unint64_t v102 = v54 & 0xC000000000000001;
    int v94 = (unsigned int (**)(char *, uint64_t, NSObject *))((char *)isa + 48);
    uint64_t v90 = (void (**)(char *, NSObject *))((char *)isa + 8);
    id v91 = (void (**)(char *, char *, NSObject *))((char *)isa + 32);
    while (1)
    {
      if (v102) {
        id v60 = (id)MEMORY[0x1BA9E3990](v58, v54);
      }
      else {
        id v60 = *(id *)(v54 + 8 * v58 + 32);
      }
      uint64_t v61 = v60;
      id v62 = objc_msgSend(v60, (SEL)v57[173], v89[0]);
      if (v62)
      {
        uint64_t v63 = v62;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        UUID.init(uuidString:)();
        if ((*v94)(v19, 1, v33) == 1)
        {
          outlined destroy of UUID?((uint64_t)v19);

          swift_bridgeObjectRelease();
          goto LABEL_33;
        }
        uint64_t v64 = v100;
        (*v91)(v100, v19, v33);
        id v65 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
        Class v66 = UUID._bridgeToObjectiveC()().super.isa;
        id v67 = objc_msgSend(v65, sel_initWithNSUUID_, v66);

        uint64_t v33 = v103;
        (*v90)(v64, v103);
        swift_bridgeObjectRelease();
        if (!v67) {
          goto LABEL_47;
        }
        id v68 = v97;
        id v69 = objc_msgSend(v97, sel_aceViewIds);
        if (!v69)
        {
          objc_msgSend(v68, sel_setAceViewIds_, 0);
          swift_bridgeObjectRelease();

LABEL_47:
          uint64_t v57 = &off_1E61F1000;
          goto LABEL_33;
        }
        uint64_t v70 = v69;
        uint64_t v71 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v105 = v71;
        id v72 = v67;
        MEMORY[0x1BA9E3030]();
        if (*(void *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v105 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        uint64_t v57 = &off_1E61F1000;
        if (v105)
        {
          v59.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
        }
        else
        {
          v59.super.Class isa = 0;
        }
        objc_msgSend(v97, sel_setAceViewIds_, v59.super.isa);
      }
LABEL_33:
      if (v56 == ++v58)
      {

        goto LABEL_52;
      }
    }
  }
  __break(1u);
}

uint64_t ConversationBridgeInstrumentationUtil.logRequestCancelledForMitigation(requestId:mitigationSource:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(void *)v3 + 184))();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v3 + 192);

  return v7(a3, a1, a2);
}

Swift::Void __swiftcall ConversationBridgeInstrumentationUtil.logRequestCancelled(requestId:)(Swift::String requestId)
{
  int v2 = specialized InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)(requestId._countAndFlagsBits, (uint64_t)requestId._object, 0, 0, 0);
  if (!v2)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
    oslog = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_1B9C64000, oslog, v8, "Failed to create wrapper for ORCHSchemaORCHRequestCancelled event", v9, 2u);
      MEMORY[0x1BA9E48C0](v9, -1, -1);
    }
    goto LABEL_18;
  }
  uint64_t v3 = v2;
  long long v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0E20]), sel_init);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0E08]), sel_init);
    if (v6)
    {
      oslog = v6;
      [v6 setReason:1];
      [v5 setCancelled:oslog];
      [v3 setRequestContext:v5];
      objc_msgSend(*(id *)(v1 + 16), sel_emitMessage_, v3);

LABEL_18:
      uint64_t v16 = oslog;
      goto LABEL_19;
    }
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationBridge);
    oslog = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_1B9C64000, oslog, v14, "Failed to create ORCHSchemaORCHRequestCancelled event", v15, 2u);
      MEMORY[0x1BA9E48C0](v15, -1, -1);

      goto LABEL_17;
    }

    uint64_t v16 = v5;
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
    oslog = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_1B9C64000, oslog, v11, "Failed to create ORCHSchemaORCHRequestContext event", v12, 2u);
      MEMORY[0x1BA9E48C0](v12, -1, -1);
LABEL_17:

      goto LABEL_18;
    }

    uint64_t v16 = v3;
  }
LABEL_19:
}

void ConversationBridgeInstrumentationUtil.logRequestMitigated(mitigationSource:requestId:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  id v8 = specialized InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)(a2, a3, 0, 0, 0);
  if (v8)
  {
    uint64_t v9 = v8;
    id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0E40]), sel_init);
    objc_msgSend(v10, sel_setMitigationSource_, a1);
    objc_msgSend(v9, sel_setRequestMitigated_, v10);
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v20 = v15;
      *(_DWORD *)os_log_type_t v14 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v12, v13, "Sending SELF RequestMitigated event for requestId %s", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v15, -1, -1);
      MEMORY[0x1BA9E48C0](v14, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    objc_msgSend(*(id *)(v4 + 16), sel_emitMessage_, v9);
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
    oslog = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_1B9C64000, oslog, v17, "Could not build wrapper when logging requestMitigatedEvent", v18, 2u);
      MEMORY[0x1BA9E48C0](v18, -1, -1);
    }
  }
}

Swift::Void __swiftcall ConversationBridgeInstrumentationUtil.logServerFallbackFailed(errorCode:requestId:)(Swift::Int32 errorCode, Swift::String requestId)
{
  object = requestId._object;
  uint64_t countAndFlagsBits = requestId._countAndFlagsBits;
  uint64_t v5 = *(void *)&errorCode;
  uint64_t v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0E78]), sel_init);
  if (!v6)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationBridge);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_1B9C64000, v21, v14, "Failed to create ORCHSchemaORCHServerFallbackFailed event", v15, 2u);
      MEMORY[0x1BA9E48C0](v15, -1, -1);
    }
    goto LABEL_18;
  }
  uint64_t v21 = v6;
  [v6 setErrorCode:v5];
  id v7 = specialized InstrumentationUtil.buildWrapperEventMessage(_:_:logResourceUtilization:)(countAndFlagsBits, (uint64_t)object, 0, 0, 1);
  if (!v7)
  {
LABEL_18:
    uint64_t v19 = v21;
    goto LABEL_19;
  }
  id v8 = v7;
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0E70]), sel_init);
  if (v9)
  {
    id v10 = v9;
    objc_msgSend(v9, sel_setFailed_, v21);
    objc_msgSend(v8, sel_setServerFallbackContext_, v10);
    objc_msgSend(*(id *)(v2 + 16), sel_emitMessage_, v8);
    if (one-time initialization token for insightRequestSummaryLogger != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for InsightRequestSummaryLogger();
    uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)static Logger.insightRequestSummaryLogger);
    swift_bridgeObjectRetain();
    specialized InsightRequestSummaryLogger.emitDebug(_:)(v12, countAndFlagsBits, (uint64_t)object, v5);

    swift_bridgeObjectRelease();
    return;
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
  os_log_t oslog = (os_log_t)Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(oslog, v17))
  {

    goto LABEL_18;
  }
  uint64_t v18 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v18 = 0;
  _os_log_impl(&dword_1B9C64000, oslog, v17, "Failed to create ORCHSchemaORCHServerFallbackContext event", v18, 2u);
  MEMORY[0x1BA9E48C0](v18, -1, -1);

  uint64_t v19 = oslog;
LABEL_19:
}

Swift::Void __swiftcall ConversationBridgeInstrumentationUtil.logRequestLinkEvent(requestId:)(Swift::String requestId)
{
  uint64_t v2 = v1;
  object = requestId._object;
  uint64_t countAndFlagsBits = requestId._countAndFlagsBits;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v5 - 8);
  id v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  os_log_type_t v14 = (char *)&v28 - v13;
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    outlined destroy of UUID?((uint64_t)v7);
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v29 = v19;
      *(_DWORD *)uint64_t v18 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v16, v17, "RequestId=%s isn't in the right format of a uuid string", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v19, -1, -1);
      MEMORY[0x1BA9E48C0](v18, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
    uint64_t v20 = *(void *)(v2 + 56);
    uint64_t v21 = *(void *)(v2 + 64);
    __swift_project_boxed_opaque_existential_1((void *)(v2 + 32), v20);
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(v21 + 8))(3, v14, v20, v21);
    uint64_t v22 = specialized InstrumentationUtil.buildRequestLinkEvent(sourceComponent:sourceUUID:targetComponent:targetUUID:)(1, (uint64_t)v14, 3);
    if (v22)
    {
      uint64_t v23 = v22;
      objc_msgSend(*(id *)(v2 + 16), sel_emitMessage_, v22);
    }
    else
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      __swift_project_value_buffer(v24, (uint64_t)static Logger.conversationBridge);
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v25))
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v26 = 0;
        _os_log_impl(&dword_1B9C64000, v23, v25, "Failed to create RequestLink event for ExecutionBridge", v26, 2u);
        MEMORY[0x1BA9E48C0](v26, -1, -1);
      }
    }

    uint64_t v27 = *(void (**)(char *, uint64_t))(v9 + 8);
    v27(v12, v8);
    v27(v14, v8);
  }
}

void ConversationBridgeInstrumentationUtil.logSensitiveCondition(forSensitiveCondition:requestId:)(unsigned int a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v42 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  os_log_type_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  unsigned int v41 = a1;
  if (v16)
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v39 = v10;
    uint64_t v18 = v17;
    uint64_t v37 = swift_slowAlloc();
    aBlock[0] = v37;
    *(_DWORD *)uint64_t v18 = 136315394;
    uint64_t v38 = v13;
    uint64_t v19 = SISchemaDeviceSensitivityState.description.getter();
    uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v14, v15, "Logging SiriAnalytics sensitive condition: %s for requestId: %s", (uint8_t *)v18, 0x16u);
    uint64_t v21 = v37;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v21, -1, -1);
    uint64_t v22 = v18;
    uint64_t v10 = v39;
    MEMORY[0x1BA9E48C0](v22, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    uint64_t v23 = a2;
    outlined destroy of UUID?((uint64_t)v8);
    swift_bridgeObjectRetain_n();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      aBlock[0] = v27;
      *(_DWORD *)uint64_t v26 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, a3, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v24, v25, "Failed to redact SiriAnalytics since requestId %s is malformed", v26, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v27, -1, -1);
      MEMORY[0x1BA9E48C0](v26, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    uint64_t v28 = v42;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v42, v8, v9);
    id v29 = objc_allocWithZone(MEMORY[0x1E4F9F9C0]);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    unsigned int v31 = v41;
    id v32 = objc_msgSend(v29, sel_initWithConditionType_requestId_joined_, v41, isa, 1);

    uint64_t v33 = *(void **)(v40 + 72);
    uint64_t v34 = swift_allocObject();
    *(_DWORD *)(v34 + 16) = v31;
    *(void *)(v34 + 24) = a2;
    *(void *)(v34 + 32) = a3;
    aBlock[4] = (uint64_t)partial apply for closure #1 in ConversationBridgeInstrumentationUtil.logSensitiveCondition(forSensitiveCondition:requestId:);
    aBlock[5] = v34;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
    aBlock[3] = (uint64_t)&block_descriptor_5;
    uint64_t v35 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_release();
    objc_msgSend(v33, sel_createTag_completion_, v32, v35);
    _Block_release(v35);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v28, v9);
  }
}

void closure #1 in ConversationBridgeInstrumentationUtil.logSensitiveCondition(forSensitiveCondition:requestId:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  v20[1] = *MEMORY[0x1E4F143B8];
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain();
  id v9 = a2;
  swift_bridgeObjectRetain();
  id v10 = a2;
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    v20[0] = v18;
    *(_DWORD *)uint64_t v12 = 136315906;
    uint64_t v14 = SISchemaDeviceSensitivityState.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 22) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 28) = 2112;
    if (a2)
    {
      id v16 = a2;
      uint64_t v17 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v17 = 0;
    }
    *uint64_t v13 = v17;

    _os_log_impl(&dword_1B9C64000, oslog, v11, "Logged sensitive condition: %s for requestId: %s successfully: %{BOOL}d. Error: %@", (uint8_t *)v12, 0x26u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v13, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v18, -1, -1);
    MEMORY[0x1BA9E48C0](v12, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
}

void ConversationBridgeInstrumentationUtil.logSREvent(requestId:strategy:predictedErrorType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v8 - 8);
  id v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of UUID?((uint64_t)v10);
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
    id v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_1B9C64000, v16, v17, "The requestId is not a valid UUID.", v18, 2u);
      MEMORY[0x1BA9E48C0](v18, -1, -1);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    id v19 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v21 = objc_msgSend(v19, sel_initWithNSUUID_, isa);

    id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA13B8]), sel_init);
    uint64_t v23 = v22;
    if (v22) {
      objc_msgSend(v22, sel_setRequestId_, v21);
    }
    id v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA13A8]), sel_init);
    objc_msgSend(v24, sel_setSelectedRecoveryStrategy_, a3);
    objc_msgSend(v24, sel_setPredictedErrorType_, a4);
    id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA13C0]), sel_init);
    objc_msgSend(v25, sel_setCheckErrorResponse_, v24);
    id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA13B0]), sel_init);
    if (v26)
    {
      uint64_t v27 = v26;
      objc_msgSend(v26, sel_setEventMetadata_, v23);
      objc_msgSend(v27, sel_setErrorChecked_, v25);
      objc_msgSend(*(id *)(v5 + 16), sel_emitMessage_, v27);
    }
    else
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Logger.conversationBridge);
      id v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        unsigned int v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unsigned int v31 = 0;
        _os_log_impl(&dword_1B9C64000, v29, v30, "Failed to create SRSchemaSRClientEvent.", v31, 2u);
        MEMORY[0x1BA9E48C0](v31, -1, -1);
      }
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

void ConversationBridgeInstrumentationUtil.logSearchRequestClassifierExecutedEvent(isPegasusSearchPerformed:mitigationResponseDecision:)(char a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v17 = v10;
    *(_DWORD *)uint64_t v9 = 67109378;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 8) = 2080;
    uint64_t v11 = POMMESSchemaPOMMESSelfReflectionAgentDecision.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v7, v8, "Search query classifier ran: (isPegasusSearchPerformed: %{BOOL}d, mitigationResponseDecision: %s)", (uint8_t *)v9, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v10, -1, -1);
    MEMORY[0x1BA9E48C0](v9, -1, -1);
  }

  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA11B8]), sel_init);
  if (v13)
  {
    uint64_t v14 = v13;
    id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1068]), sel_init);
    if (v15)
    {
      id v16 = v15;
      objc_msgSend(v14, sel_setIsPegasusSearchPerformed_, a1 & 1);
      objc_msgSend(v14, sel_setMitigationResponseDecision_, a2);
      objc_msgSend(v16, sel_setPommesSearchRequestClassifierExecuted_, v14);
      objc_msgSend(*(id *)(v3 + 16), sel_emitMessage_, v16);

      uint64_t v14 = v16;
    }
  }
}

uint64_t ConversationBridgeInstrumentationUtil.deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 80);
  return v0;
}

uint64_t ConversationBridgeInstrumentationUtil.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 80);

  return swift_deallocClassInstance();
}

uint64_t sub_1B9DFD4E8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for ServerFallbackReason();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return MEMORY[0x1F4186498](v0, v10, v11);
}

uint64_t sub_1B9DFD648()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return MEMORY[0x1F4186498](v0, v5, v6);
}

uint64_t sub_1B9DFD71C()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

void partial apply for closure #1 in ConversationBridgeInstrumentationUtil.logSensitiveCondition(forSensitiveCondition:requestId:)(uint64_t a1, void *a2)
{
  closure #1 in ConversationBridgeInstrumentationUtil.logSensitiveCondition(forSensitiveCondition:requestId:)(a1, a2, *(unsigned int *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t type metadata accessor for ConversationBridgeInstrumentationUtil()
{
  return self;
}

uint64_t method lookup function for ConversationBridgeInstrumentationUtil(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationBridgeInstrumentationUtil);
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.__allocating_init(_:_:_:_:_:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logExecutionRequestStarted(executionForRSKE:source:preExecutionType:rootRequestId:requestId:resultCandidateId:triggerlessFollowupHandledLocally:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logExecutionRequestEnded(rootRequestId:requestId:resultCandidateId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logExecutionRequestFailed(error:rootRequestId:requestId:resultCandidateId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logFlowOutputSubmitted(outputSubmissionId:flowCommandReceived:flowCommandResponseError:requestId:rootRequestId:executionOutput:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logContextFlowSubmitted(contextUpdateReceived:contextUpdateError:requestId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logRequestCancelledForMitigation(requestId:mitigationSource:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logRequestCancelled(requestId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logRequestMitigated(mitigationSource:requestId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logServerFallbackInitiated(requestId:resultCandidateId:contextId:fallbackReason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logServerFallbackResponseReceived(requestId:contextId:rcId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logServerFallbackFailed(errorCode:requestId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logRequestLinkEvent(requestId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logSensitiveCondition(forSensitiveCondition:requestId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logSREvent(requestId:strategy:predictedErrorType:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.logSearchRequestClassifierExecutedEvent(isPegasusSearchPerformed:mitigationResponseDecision:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.mapRSKESourceToLogRSKESource(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.mapPreExecutionRuleTypeToLogRuleType(_:_:)()
{
  unint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 264))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of ConversationBridgeInstrumentationUtil.mapServerFallbackReasonToLoggingReason(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t ConversationBridgeProcessorDelegate.executionProcessor.getter()
{
  return swift_weakLoadStrong();
}

uint64_t ConversationBridgeProcessorDelegate.__allocating_init(requestDispatcherServiceHelper:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  swift_weakInit();
  *(void *)(v2 + 24) = a1;
  return v2;
}

uint64_t ConversationBridgeProcessorDelegate.init(requestDispatcherServiceHelper:)(uint64_t a1)
{
  swift_weakInit();
  *(void *)(v1 + 24) = a1;
  return v1;
}

void ConversationBridgeProcessorDelegate.setExecutionProcessor(executionProcessor:)()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  swift_release();
  if (Strong)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.conversationBridge);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1B9C64000, v2, v3, "executionProcessor was already set on ExecutionBridgeProcessorDelegate ignoring this operation", v4, 2u);
      MEMORY[0x1BA9E48C0](v4, -1, -1);
    }
  }
  else
  {
    swift_weakAssign();
  }
}

void ConversationBridgeProcessorDelegate.close(withExecutionOutput:)(void *a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void *))(*(void *)Strong + 992))(a1);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
    uint64_t v4 = a1;
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v11 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      uint64_t v9 = *(void *)&v4[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
      unint64_t v10 = *(void *)&v4[OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v5, v6, "ConversationRequestProcessor already released, ignoring close of %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v8, -1, -1);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }
    else
    {
    }
  }
}

void ConversationBridgeProcessorDelegate.close(withExecutionOutput:errorString:)(void *a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)Strong + 1000))(a1, a2, a3);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
    uint64_t v8 = a1;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v15 = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v13 = *(void *)&v8[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
      unint64_t v14 = *(void *)&v8[OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v9, v10, "ConversationRequestProcessor already released, ignoring close of %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v12, -1, -1);
      MEMORY[0x1BA9E48C0](v11, -1, -1);
    }
    else
    {
    }
  }
}

void ConversationBridgeProcessorDelegate.close(withExecutionOutput:errorString:shouldFailRequest:)(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void *, uint64_t, uint64_t, void))(*(void *)Strong + 1008))(a1, a2, a3, a4 & 1);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
    os_log_type_t v10 = a1;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v17 = v14;
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v15 = *(void *)&v10[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
      unint64_t v16 = *(void *)&v10[OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v11, v12, "ConversationRequestProcessor already released, ignoring close of %s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v14, -1, -1);
      MEMORY[0x1BA9E48C0](v13, -1, -1);
    }
    else
    {
    }
  }
}

void ConversationBridgeProcessorDelegate.fallbackToServer(forResultCandidateId:serverFallbackReason:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)Strong + 1024))(a1, a2, a3);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v13 = v11;
      *(_DWORD *)os_log_type_t v10 = 136315138;
      if (a2)
      {
        unint64_t v12 = a2;
      }
      else
      {
        a1 = 7104878;
        unint64_t v12 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, v12, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v8, v9, "ConversationRequestProcessor already released, ignoring fallbackToServer of %s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v11, -1, -1);
      MEMORY[0x1BA9E48C0](v10, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

Swift::Void __swiftcall ConversationBridgeProcessorDelegate.fallbackToInfoDomainResults(forResultCandidateId:)(Swift::String_optional forResultCandidateId)
{
  object = forResultCandidateId.value._object;
  uint64_t countAndFlagsBits = forResultCandidateId.value._countAndFlagsBits;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t, void *))(*(void *)Strong + 1032))(countAndFlagsBits, object);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v10 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      if (object)
      {
        unint64_t v9 = (unint64_t)object;
      }
      else
      {
        uint64_t countAndFlagsBits = 7104878;
        unint64_t v9 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, v9, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v5, v6, "ConversationRequestProcessor already released, ignoring fallbackToInfoDomainResults of %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v8, -1, -1);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
}

void ConversationBridgeProcessorDelegate.fallbackToIntelligenceFlow(prescribedTool:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t))(*(void *)Strong + 800))(a1);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v6 = 0;
      _os_log_impl(&dword_1B9C64000, v4, v5, "ConversationRequestProcessor already released, ignoring fallbackToIntelligenceFlow", v6, 2u);
      MEMORY[0x1BA9E48C0](v6, -1, -1);
    }
  }
}

Swift::Void __swiftcall ConversationBridgeProcessorDelegate.fallbackToSiriX(rcId:)(Swift::String rcId)
{
  object = rcId._object;
  uint64_t countAndFlagsBits = rcId._countAndFlagsBits;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t, void *))(*(void *)Strong + 808))(countAndFlagsBits, object);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
    os_log_type_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1B9C64000, v5, v6, "ConversationRequestProcessor already released, ignoring fallbackToSiriX", v7, 2u);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }
  }
}

uint64_t ConversationBridgeProcessorDelegate.prepareForAudioHandoff(completion:)(uint64_t a1, uint64_t a2)
{
  return ConversationBridgeProcessorDelegate.prepareForAudioHandoff(completion:)(a1, a2, (uint64_t (*)(void, uint64_t, uint64_t, void, _UNKNOWN **))static ServiceBridgeDelegate.prepareForAudioHandoffDefault(_:completion:));
}

uint64_t ConversationBridgeProcessorDelegate.prepareForAudioHandoffFailed(completion:)(uint64_t a1, uint64_t a2)
{
  return ConversationBridgeProcessorDelegate.prepareForAudioHandoff(completion:)(a1, a2, (uint64_t (*)(void, uint64_t, uint64_t, void, _UNKNOWN **))static ServiceBridgeDelegate.prepareForAudioHandoffFailedDefault(_:completion:));
}

uint64_t ConversationBridgeProcessorDelegate.prepareForAudioHandoff(completion:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, uint64_t, uint64_t, void, _UNKNOWN **))
{
  return a3(v3[3], a1, a2, *v3, &protocol witness table for ConversationBridgeProcessorDelegate);
}

uint64_t ConversationBridgeProcessorDelegate.fetchSpeechInfo(reply:)(uint64_t (*a1)(void), uint64_t a2)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t (*)(void), uint64_t))(*(void *)Strong + 1040))(a1, a2);
    return swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      unint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v9 = 0;
      _os_log_impl(&dword_1B9C64000, v7, v8, "ConversationRequestProcessor already released, ignoring fetchSpeechInfo", v9, 2u);
      MEMORY[0x1BA9E48C0](v9, -1, -1);
    }

    return a1(0);
  }
}

void ConversationBridgeProcessorDelegate.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void), uint64_t a8)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void (*)(void), uint64_t))(*(void *)Strong + 1152))(a1, a2, a3, a4, a5, a6, a7, a8);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v24 = v21;
      *(_DWORD *)unint64_t v20 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v18, v19, "ConversationRequestProcessor already released, ignoring retriggerOriginalRequest for request id %s", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v21, -1, -1);
      MEMORY[0x1BA9E48C0](v20, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
    id v22 = (void *)swift_allocError();
    *uint64_t v23 = 0;
    a7();
  }
}

uint64_t ConversationBridgeProcessorDelegate.fetchRecentDialogs(reply:)(void (*a1)(void))
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void))(*(void *)Strong + 1048))();
    a1();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
    os_log_type_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1B9C64000, v5, v6, "ConversationRequestProcessor already released, ignoring fetchRecentDialogs", v7, 2u);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }

    return ((uint64_t (*)(void))a1)(MEMORY[0x1E4FBC860]);
  }
}

Swift::Void __swiftcall ConversationBridgeProcessorDelegate.actionCandidatesGenerated(_:rcId:)(Swift::OpaquePointer _, Swift::String rcId)
{
  object = rcId._object;
  uint64_t countAndFlagsBits = rcId._countAndFlagsBits;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void *, uint64_t, void *))(*(void *)Strong + 1344))(_._rawValue, countAndFlagsBits, object);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      unint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v9 = 0;
      _os_log_impl(&dword_1B9C64000, v7, v8, "ConversationRequestProcessor already released, ignoring actionCandidatesGenerated", v9, 2u);
      MEMORY[0x1BA9E48C0](v9, -1, -1);
    }
  }
}

void ConversationBridgeProcessorDelegate.willExecute(executionInputInfo:)(void *a1)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void *))(*(void *)Strong + 1064))(a1);
    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
    id v4 = a1;
    os_log_type_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v8 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138412290;
      id v9 = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v8 = v4;

      _os_log_impl(&dword_1B9C64000, v5, v6, "ConversationRequestProcessor already released, ignoring willExecute for request id %@", v7, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v8, -1, -1);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }
    else
    {
    }
  }
}

uint64_t ConversationBridgeProcessorDelegate.fetchSelfReflectionDecision(reply:)(void (*a1)(void *))
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void *__return_ptr))(*(void *)Strong + 1072))(v8);
    a1(v8);
    return swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
    os_log_type_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1B9C64000, v5, v6, "ConversationRequestProcessor already released, ignoring fetchSelfReflectionDecision", v7, 2u);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }

    LOBYTE(v8[0]) = 2;
    return ((uint64_t (*)(void *))a1)(v8);
  }
}

uint64_t ConversationBridgeProcessorDelegate.submitExternalActivationRequest(withRequestInfo:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)Strong + 1080))(a1, a2, a3);
    return swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_1B9C64000, v11, v12, "ConversationRequestProcessor not in scope. Routing the external activation request directly", v13, 2u);
      MEMORY[0x1BA9E48C0](v13, -1, -1);
    }

    return static ServiceBridgeDelegate.defaultSubmitExternalActivationRequest(withRequestInfo:serviceHelper:completion:)(a1, *(id *)(v4 + 24), a2, a3);
  }
}

uint64_t ConversationBridgeProcessorDelegate.postToMessageBus(message:completion:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void), uint64_t a4)
{
  uint64_t v28 = a1;
  uint64_t v29 = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageXPCTransporter?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for MessageXPCTransporter();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationBridge);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = v8;
    unint64_t v16 = a3;
    uint64_t v17 = v15;
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_1B9C64000, v13, v14, "Decoding and posting message to message bus", v15, 2u);
    uint64_t v18 = v17;
    a3 = v16;
    uint64_t v8 = v27;
    MEMORY[0x1BA9E48C0](v18, -1, -1);
  }

  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v20 = Strong;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    lazy protocol witness table accessor for type MessageXPCTransporter and conformance MessageXPCTransporter((unint64_t *)&lazy protocol witness table cache variable for type MessageXPCTransporter and conformance MessageXPCTransporter, MEMORY[0x1E4FA22D0]);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    uint64_t v24 = (void *)MessageXPCTransporter.toMessageBase()();
    (*(void (**)(void *, uint64_t (*)(void, void), uint64_t))(*(void *)v20 + 1088))(v24, a3, v29);
    swift_release();
    swift_release();

    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl(&dword_1B9C64000, v21, v22, "Not publising flow message because ConversationRequestProcessor is not in scope", v23, 2u);
      MEMORY[0x1BA9E48C0](v23, -1, -1);
    }

    return a3(0, 0);
  }
}

uint64_t ConversationBridgeProcessorDelegate.deinit()
{
  swift_weakDestroy();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t protocol witness for ServiceBridgeDelegate.prepareForAudioHandoffFailed(completion:) in conformance ConversationBridgeProcessorDelegate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for ServiceBridgeDelegate.prepareForAudioHandoff(completion:) in conformance ConversationBridgeProcessorDelegate(a1, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t, void, _UNKNOWN **))static ServiceBridgeDelegate.prepareForAudioHandoffFailedDefault(_:completion:));
}

uint64_t outlined destroy of MessageXPCTransporter?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageXPCTransporter?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B9DFFC30@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t sub_1B9DFFC80()
{
  return swift_weakAssign();
}

uint64_t method lookup function for ConversationBridgeProcessorDelegate(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationBridgeProcessorDelegate);
}

uint64_t dispatch thunk of ConversationBridgeProcessorDelegate.__allocating_init(requestDispatcherServiceHelper:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t lazy protocol witness table accessor for type MessageXPCTransporter and conformance MessageXPCTransporter(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static ConversationBridgeUtils.replyCommandSucceeded(forCommand:replyHandler:)(void *a1, void (*a2)(id, void))
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    id v9 = objc_allocWithZone(MEMORY[0x1E4F965B8]);
    swift_retain();
    id v10 = objc_msgSend(v9, sel_init);
    UUID.init()();
    uint64_t v11 = UUID.uuidString.getter();
    uint64_t v13 = v12;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    os_log_type_t v14 = (void *)MEMORY[0x1BA9E2DD0](v11, v13);
    swift_bridgeObjectRelease();
    objc_msgSend(v10, sel_setAceId_, v14);

    id v15 = v10;
    id v16 = objc_msgSend(a1, sel_aceId);
    objc_msgSend(v15, sel_setRefId_, v16);

    id v17 = v15;
    a2(v15, 0);

    return _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)a2);
  }
  return result;
}

void closure #1 in static ConversationBridgeUtils.failRequest(serviceHelper:executionRequestId:reason:)()
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationBridge);
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1B9C64000, oslog, v1, "Sent CommandFailed to fail this request", v2, 2u);
    MEMORY[0x1BA9E48C0](v2, -1, -1);
  }
}

uint64_t specialized static ConversationBridgeUtils.replyCommandFailed(forCommand:errorCode:reason:replyHandler:)(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(id, id), uint64_t a6)
{
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t result = MEMORY[0x1F4188790](v12);
  id v16 = (char *)v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a5)
  {
    v37[0] = a3;
    uint64_t v17 = a2;
    id v18 = objc_allocWithZone(MEMORY[0x1E4F965A8]);
    v37[1] = a6;
    swift_retain();
    id v19 = objc_msgSend(v18, sel_init);
    UUID.init()();
    uint64_t v20 = UUID.uuidString.getter();
    uint64_t v22 = v21;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    uint64_t v23 = (void *)MEMORY[0x1BA9E2DD0](v20, v22);
    swift_bridgeObjectRelease();
    objc_msgSend(v19, sel_setAceId_, v23);

    uint64_t v24 = v17;
    id v25 = v19;
    id v26 = objc_msgSend(a1, sel_aceId);
    objc_msgSend(v25, sel_setRefId_, v26);

    objc_msgSend(v25, sel_setErrorCode_, v17);
    if (a4)
    {
      unint64_t v27 = v37[0];
      uint64_t v28 = (void *)MEMORY[0x1BA9E2DD0](v37[0], a4);
    }
    else
    {
      uint64_t v28 = 0;
      unint64_t v27 = 0xD000000000000017;
    }
    objc_msgSend(v25, sel_setReason_, v28);

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    uint64_t v30 = inited;
    *(_OWORD *)(inited + 16) = xmmword_1BA04FD90;
    *(void *)(inited + 32) = 0x6567617373654DLL;
    *(void *)(inited + 40) = 0xE700000000000000;
    *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
    unint64_t v31 = 0x80000001BA0650F0;
    if (a4) {
      unint64_t v31 = a4;
    }
    *(void *)(inited + 48) = v27;
    *(void *)(inited + 56) = v31;
    id v32 = v25;
    swift_bridgeObjectRetain();
    specialized Dictionary.init(dictionaryLiteral:)(v30);
    id v33 = objc_allocWithZone(MEMORY[0x1E4F28C58]);
    uint64_t v34 = (void *)MEMORY[0x1BA9E2DD0](0x6F69747563657845, 0xEF6567646972426ELL);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v36 = objc_msgSend(v33, sel_initWithDomain_code_userInfo_, v34, v24, isa);

    a5(v25, v36);
    return _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)a5);
  }
  return result;
}

uint64_t specialized static ConversationBridgeUtils.replyCommandIgnored(forCommand:errorCode:reason:replyHandler:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(id, id))
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t result = MEMORY[0x1F4188790](v10);
  os_log_type_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a5)
  {
    id v15 = objc_allocWithZone(MEMORY[0x1E4F965B0]);
    uint64_t v30 = a3;
    id v16 = v15;
    swift_retain();
    id v17 = objc_msgSend(v16, sel_init);
    UUID.init()();
    uint64_t v18 = UUID.uuidString.getter();
    uint64_t v31 = a2;
    uint64_t v20 = v19;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    uint64_t v21 = (void *)MEMORY[0x1BA9E2DD0](v18, v20);
    swift_bridgeObjectRelease();
    objc_msgSend(v17, sel_setAceId_, v21);

    id v22 = v17;
    id v23 = objc_msgSend(a1, sel_aceId);
    objc_msgSend(v22, sel_setRefId_, v23);

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1BA04FD90;
    *(void *)(inited + 32) = 0x6567617373654DLL;
    *(void *)(inited + 40) = 0xE700000000000000;
    *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
    *(void *)(inited + 48) = v30;
    *(void *)(inited + 56) = a4;
    id v25 = v22;
    swift_bridgeObjectRetain();
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    id v26 = objc_allocWithZone(MEMORY[0x1E4F28C58]);
    unint64_t v27 = (void *)MEMORY[0x1BA9E2DD0](0x6F69747563657845, 0xEF6567646972426ELL);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v29 = objc_msgSend(v26, sel_initWithDomain_code_userInfo_, v27, v31, isa);

    a5(v22, v29);
    return _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)a5);
  }
  return result;
}

void specialized static ConversationBridgeUtils.failRequest(serviceHelper:executionRequestId:reason:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v27 = a1;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationBridge);
  os_log_type_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    id v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v16 = 0;
    _os_log_impl(&dword_1B9C64000, v14, v15, "Sending CommandFailed to fail this request.", v16, 2u);
    MEMORY[0x1BA9E48C0](v16, -1, -1);
  }

  id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F965A8]), sel_init);
  UUID.init()();
  uint64_t v18 = UUID.uuidString.getter();
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v21 = (void *)MEMORY[0x1BA9E2DD0](v18, v20);
  swift_bridgeObjectRelease();
  objc_msgSend(v17, sel_setAceId_, v21);

  id v22 = v17;
  id v23 = (void *)MEMORY[0x1BA9E2DD0](a2, a3);
  objc_msgSend(v22, sel_setRefId_, v23);

  if (a5) {
    a5 = (void *)MEMORY[0x1BA9E2DD0](a4, a5);
  }
  objc_msgSend(v22, sel_setReason_, a5);

  aBlock[4] = closure #1 in static ConversationBridgeUtils.failRequest(serviceHelper:executionRequestId:reason:);
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_6;
  uint64_t v24 = _Block_copy(aBlock);
  id v25 = v22;
  objc_msgSend(v27, sel_handleCommand_completion_, v25, v24);
  _Block_release(v24);
}

ValueMetadata *type metadata accessor for ConversationBridgeUtils()
{
  return &type metadata for ConversationBridgeUtils;
}

uint64_t static ConversationCanHandleResult.supportsSecureCoding.getter()
{
  return static ConversationCanHandleResult.supportsSecureCoding;
}

uint64_t static ConversationCanHandleResult.supportsSecureCoding.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static ConversationCanHandleResult.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static ConversationCanHandleResult.supportsSecureCoding.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t ConversationCanHandleResult.directlySupported.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported);
}

uint64_t ConversationCanHandleResult.exclude.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude);
}

uint64_t ConversationCanHandleResult.reformedInput.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput, a1, &demangling cache variable for type metadata for Input?);
}

uint64_t ConversationCanHandleResult.flowIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier, a1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t one-time initialization function for unsupported()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Input();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v2, 1, 1, v7);
  CanHandleResult = (objc_class *)type metadata accessor for ConversationCanHandleResult();
  uint64_t v9 = objc_allocWithZone(CanHandleResult);
  v9[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported] = 0;
  v9[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude] = 1;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t)&v9[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput], &demangling cache variable for type metadata for Input?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v2, (uint64_t)&v9[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier], (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v12.receiver = v9;
  v12.super_class = CanHandleResult;
  id v10 = objc_msgSendSuper2(&v12, sel_init);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v2, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t result = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, &demangling cache variable for type metadata for Input?);
  static ConversationCanHandleResult.unsupported = (uint64_t)v10;
  return result;
}

uint64_t *ConversationCanHandleResult.unsupported.unsafeMutableAddressor()
{
  if (one-time initialization token for unsupported != -1) {
    swift_once();
  }
  return &static ConversationCanHandleResult.unsupported;
}

id static ConversationCanHandleResult.unsupported.getter()
{
  if (one-time initialization token for unsupported != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static ConversationCanHandleResult.unsupported;

  return v0;
}

id static ConversationCanHandleResult.supported(flowIdentifier:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Input();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  CanHandleResult = (objc_class *)type metadata accessor for ConversationCanHandleResult();
  id v10 = objc_allocWithZone(CanHandleResult);
  v10[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported] = 1;
  v10[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude] = 1;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t)&v10[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput], &demangling cache variable for type metadata for Input?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v4, (uint64_t)&v10[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier], (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v13.receiver = v10;
  v13.super_class = CanHandleResult;
  id v11 = objc_msgSendSuper2(&v13, sel_init);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for Input?);
  return v11;
}

id ConversationCanHandleResult.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return ConversationCanHandleResult.init(coder:)(a1);
}

unint64_t ConversationCanHandleResult.CodingKeys.rawValue.getter(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6564756C637865;
      break;
    case 3:
      unint64_t result = 0x6E656449776F6C66;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Void __swiftcall ConversationCanHandleResult.encode(with:)(NSCoder with)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Input();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v30 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v10 - 8);
  objc_super v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  id v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(v2 + OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    uint64_t v18 = (void *)MEMORY[0x1BA9E2DD0](0x6E656449776F6C66, 0xEE00726569666974);
    [(objc_class *)with.super.isa encodeObject:isa forKey:v18];

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  uint64_t v19 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported);
  uint64_t v20 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000011, 0x80000001BA060580);
  [(objc_class *)with.super.isa encodeBool:v19 forKey:v20];

  uint64_t v21 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude);
  id v22 = (void *)MEMORY[0x1BA9E2DD0](0x6564756C637865, 0xE700000000000000);
  [(objc_class *)with.super.isa encodeBool:v21 forKey:v22];

  outlined init with copy of ReferenceResolutionClientProtocol?(v2 + OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput, (uint64_t)v6, &demangling cache variable for type metadata for Input?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for Input?);
  }
  else
  {
    id v23 = v30;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v30, v6, v7);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    lazy protocol witness table accessor for type Input and conformance Input((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input);
    uint64_t v24 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v26 = v25;
    swift_release();
    Class v27 = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v28 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000011, 0x80000001BA0605A0);
    [(objc_class *)with.super.isa encodeObject:v27 forKey:v28];
    outlined consume of Data._Representation(v24, v26);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v23, v7);
  }
}

SiriKitRuntime::ConversationCanHandleResult::CodingKeys_optional __swiftcall ConversationCanHandleResult.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  object = stringValue._object;
  v2._uint64_t countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ConversationCanHandleResult.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return (SiriKitRuntime::ConversationCanHandleResult::CodingKeys_optional)4;
  }
  else {
    return (SiriKitRuntime::ConversationCanHandleResult::CodingKeys_optional)v3;
  }
}

SiriKitRuntime::ConversationCanHandleResult::CodingKeys_optional __swiftcall ConversationCanHandleResult.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (SiriKitRuntime::ConversationCanHandleResult::CodingKeys_optional)4;
}

uint64_t ConversationCanHandleResult.CodingKeys.intValue.getter()
{
  return 0;
}

unint64_t ConversationCanHandleResult.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6564756C637865;
      break;
    case 3:
      unint64_t result = 0x6E656449776F6C66;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConversationCanHandleResult.CodingKeys(unsigned __int8 *a1, unsigned char *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0x80000001BA060580;
  unint64_t v4 = 0xD000000000000011;
  switch(v2)
  {
    case 1:
      unint64_t v3 = 0xE700000000000000;
      unint64_t v4 = 0x6564756C637865;
      break;
    case 2:
      unint64_t v3 = 0x80000001BA0605A0;
      break;
    case 3:
      unint64_t v4 = 0x6E656449776F6C66;
      unint64_t v3 = 0xEE00726569666974;
      break;
    default:
      break;
  }
  unint64_t v5 = 0x80000001BA060580;
  switch(*a2)
  {
    case 1:
      unint64_t v5 = 0xE700000000000000;
      if (v4 == 0x6564756C637865) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v5 = 0x80000001BA0605A0;
      goto LABEL_9;
    case 3:
      unint64_t v5 = 0xEE00726569666974;
      if (v4 == 0x6E656449776F6C66) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v4 != 0xD000000000000011) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v5) {
        char v6 = 1;
      }
      else {
LABEL_14:
      }
        char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6 & 1;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConversationCanHandleResult.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ConversationCanHandleResult.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConversationCanHandleResult.CodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ConversationCanHandleResult.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized ConversationCanHandleResult.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ConversationCanHandleResult.CodingKeys(uint64_t a1@<X8>)
{
  unint64_t v2 = 0x80000001BA060580;
  unint64_t v3 = 0xD000000000000011;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE700000000000000;
      unint64_t v3 = 0x6564756C637865;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0xD000000000000011;
      *(void *)(a1 + 8) = 0x80000001BA0605A0;
      break;
    case 3:
      strcpy((char *)a1, "flowIdentifier");
      *(unsigned char *)(a1 + 15) = -18;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance ConversationCanHandleResult.CodingKeys()
{
  unint64_t result = 0xD000000000000011;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6564756C637865;
      break;
    case 3:
      unint64_t result = 0x6E656449776F6C66;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance ConversationCanHandleResult.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized ConversationCanHandleResult.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ConversationCanHandleResult.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ConversationCanHandleResult.CodingKeys(uint64_t a1)
{
  unint64_t CanHandle = lazy protocol witness table accessor for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys();

  return MEMORY[0x1F41862A8](a1, CanHandle);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConversationCanHandleResult.CodingKeys(uint64_t a1)
{
  unint64_t CanHandle = lazy protocol witness table accessor for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys();

  return MEMORY[0x1F41862B0](a1, CanHandle);
}

id ConversationCanHandleResult.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void ConversationCanHandleResult.init()()
{
}

id ConversationCanHandleResult.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationCanHandleResult();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id specialized static ConversationCanHandleResult.reformTo(input:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v2 - 8);
  unint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Input?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Input();
  uint64_t v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v7, a1, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v4, 1, 1, v10);
  CanHandleResult = (objc_class *)type metadata accessor for ConversationCanHandleResult();
  objc_super v12 = objc_allocWithZone(CanHandleResult);
  v12[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_directlySupported] = 0;
  v12[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_exclude] = 1;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t)&v12[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_reformedInput], &demangling cache variable for type metadata for Input?);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v4, (uint64_t)&v12[OBJC_IVAR____TtC14SiriKitRuntime27ConversationCanHandleResult_flowIdentifier], (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v15.receiver = v12;
  v15.super_class = CanHandleResult;
  id v13 = objc_msgSendSuper2(&v15, sel_init);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, &demangling cache variable for type metadata for Input?);
  return v13;
}

unint64_t specialized ConversationCanHandleResult.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ConversationCanHandleResult.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationCanHandleResult.CodingKeys and conformance ConversationCanHandleResult.CodingKeys);
  }
  return result;
}

uint64_t ObjC metadata update function for ConversationCanHandleResult()
{
  return type metadata accessor for ConversationCanHandleResult();
}

void type metadata completion function for ConversationCanHandleResult()
{
  _s11SiriKitFlow5InputVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for Input?, MEMORY[0x1E4FA1EE0]);
  if (v0 <= 0x3F)
  {
    _s11SiriKitFlow5InputVSgMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for ConversationCanHandleResult(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationCanHandleResult);
}

uint64_t dispatch thunk of ConversationCanHandleResult.toConversationSearchResult(remoteConversationClient:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of ConversationCanHandleResult.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of ConversationCanHandleResult.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

void _s11SiriKitFlow5InputVSgMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for ConversationCanHandleResult.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9E0244CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConversationCanHandleResult.CodingKeys()
{
  return &type metadata for ConversationCanHandleResult.CodingKeys;
}

id ConversationCommitResult.xpcRepresentation.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PluginAction();
  uint64_t v30 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unsigned int v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PrescribedTool?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v29 = (uint64_t)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for FlowUnhandledReason();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v29 - v13;
  MEMORY[0x1F4188790](v12);
  id v16 = (char *)&v29 - v15;
  uint64_t v17 = type metadata accessor for ConversationCommitResult();
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (uint64_t *)((char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ConversationCommitResult(v1, (uint64_t)v19);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*(void (**)(char *, uint64_t *, uint64_t))(v8 + 32))(v16, v19, v7);
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v14, v16, v7);
      uint64_t v23 = (*(uint64_t (**)(char *, uint64_t))(v8 + 88))(v14, v7);
      if (v23 == *MEMORY[0x1E4FA1898])
      {
        uint64_t v24 = v23;
        (*(void (**)(char *, uint64_t))(v8 + 96))(v14, v7);
        uint64_t v25 = v29;
        outlined init with take of PrescribedTool?((uint64_t)v14, v29);
        outlined init with copy of PrescribedTool?(v25, (uint64_t)v11);
        (*(void (**)(char *, uint64_t, uint64_t))(v8 + 104))(v11, v24, v7);
        id v22 = specialized static ConversationCommitResultXPC.flowWasNotHandled(flowUnhandledReason:)((uint64_t)v11);
        unint64_t v26 = *(void (**)(char *, uint64_t))(v8 + 8);
        v26(v11, v7);
        outlined destroy of ReferenceResolutionClientProtocol?(v25, (uint64_t *)&demangling cache variable for type metadata for PrescribedTool?);
        v26(v16, v7);
      }
      else
      {
        id v22 = specialized static ConversationCommitResultXPC.flowWasNotHandled(flowUnhandledReason:)((uint64_t)v16);
        Class v27 = *(void (**)(char *, uint64_t))(v8 + 8);
        v27(v16, v7);
        v27(v14, v7);
      }
      break;
    case 2u:
      uint64_t v21 = v30;
      (*(void (**)(char *, uint64_t *, uint64_t))(v30 + 32))(v4, v19, v2);
      id v22 = specialized static ConversationCommitResultXPC.flowWantsToRedirect(nextPluginAction:)();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v4, v2);
      break;
    case 3u:
      id v20 = specialized ConversationCommitResultXPC.__allocating_init(type:activeTasks:completedTasks:flowUnhandledReason:prescribedTool:error:nextPluginActionData:reparseExecutionRequestID:reparseUserID:)(4, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], 0, 0, 1, 0, 0, 0xF000000000000000, *v19, v19[1], v19[2], v19[3]);
      goto LABEL_5;
    default:
      id v20 = specialized ConversationCommitResultXPC.__allocating_init(type:activeTasks:completedTasks:flowUnhandledReason:prescribedTool:error:nextPluginActionData:reparseExecutionRequestID:reparseUserID:)(1, *v19, v19[1], 0, 0, 1, 0, 0, 0xF000000000000000, 0, 0, 0, 0);
LABEL_5:
      id v22 = v20;
      break;
  }
  return v22;
}

id static ConversationCommitResultXPC.flowWasHandled(activeTasks:completedTasks:)(uint64_t a1, uint64_t a2)
{
  return specialized ConversationCommitResultXPC.__allocating_init(type:activeTasks:completedTasks:flowUnhandledReason:prescribedTool:error:nextPluginActionData:reparseExecutionRequestID:reparseUserID:)(1, a1, a2, 0, 0, 1, 0, 0, 0xF000000000000000, 0, 0, 0, 0);
}

uint64_t outlined init with copy of ConversationCommitResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConversationCommitResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id static ConversationCommitResultXPC.flowNeedsReparse(executionRequestID:userID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized ConversationCommitResultXPC.__allocating_init(type:activeTasks:completedTasks:flowUnhandledReason:prescribedTool:error:nextPluginActionData:reparseExecutionRequestID:reparseUserID:)(4, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], 0, 0, 1, 0, 0, 0xF000000000000000, a1, a2, a3, a4);
}

uint64_t ConversationCommitResultXPC.type.getter()
{
  return *(void *)(v0 + OBJC_IVAR___SKRConversationCommitResult_type);
}

uint64_t ConversationCommitResultXPC.activeTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConversationCommitResultXPC.completedTasks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConversationCommitResultXPC.flowUnhandledReason.getter()
{
  return *(void *)(v0 + OBJC_IVAR___SKRConversationCommitResult_flowUnhandledReason);
}

uint64_t ConversationCommitResultXPC.prescribedTool.getter()
{
  return *(void *)(v0 + OBJC_IVAR___SKRConversationCommitResult_prescribedTool);
}

void *ConversationCommitResultXPC.error.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___SKRConversationCommitResult_error);
  id v2 = v1;
  return v1;
}

uint64_t ConversationCommitResultXPC.nextPluginActionData.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___SKRConversationCommitResult_nextPluginActionData);
  outlined copy of Data?(v1, *(void *)(v0 + OBJC_IVAR___SKRConversationCommitResult_nextPluginActionData + 8));
  return v1;
}

uint64_t ConversationCommitResultXPC.reparseExecutionRequestID.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR___SKRConversationCommitResult_reparseExecutionRequestID);
}

uint64_t ConversationCommitResultXPC.reparseUserID.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR___SKRConversationCommitResult_reparseUserID);
}

uint64_t ConversationCommitResultXPC.reparseExecutionRequestID.getter(void *a1)
{
  uint64_t v2 = *(void *)(v1 + *a1);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t FlowUnhandledReason.xpcRepresentation.getter()
{
  uint64_t v1 = type metadata accessor for FlowUnhandledReason();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0, v1);
  int v5 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v4, v1);
  if (v5 == *MEMORY[0x1E4FA1898])
  {
    (*(void (**)(char *, uint64_t))(v2 + 96))(v4, v1);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for PrescribedTool?);
    return 4;
  }
  else if (v5 == *MEMORY[0x1E4FA18B0])
  {
    return 1;
  }
  else if (v5 == *MEMORY[0x1E4FA18A8])
  {
    return 2;
  }
  else if (v5 == *MEMORY[0x1E4FA18B8])
  {
    return 3;
  }
  else if (v5 == *MEMORY[0x1E4FA18A0])
  {
    return 5;
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_1B9C64000, v8, v9, "Unknown FlowUnhandledReason, returning nil", v10, 2u);
      MEMORY[0x1BA9E48C0](v10, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    return 0;
  }
}

uint64_t PrescribedTool.xpcRepresentation.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for PrescribedTool();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v17 - v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v17 - v7, v1, v2);
  static PrescribedTool.searchTool.getter();
  lazy protocol witness table accessor for type PrescribedTool and conformance PrescribedTool((unint64_t *)&lazy protocol witness table cache variable for type PrescribedTool and conformance PrescribedTool, MEMORY[0x1E4FA1BE8]);
  char v9 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v6, v2);
  if (v9)
  {
    v10(v8, v2);
    return 0;
  }
  else
  {
    static PrescribedTool.generateKnowledgeResponseIntentTool.getter();
    char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
    v10(v6, v2);
    v10(v8, v2);
    if (v12)
    {
      return 1;
    }
    else
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        id v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v16 = 0;
        _os_log_impl(&dword_1B9C64000, v14, v15, "Unknown PrescribedToolXPC, returning nil", v16, 2u);
        MEMORY[0x1BA9E48C0](v16, -1, -1);
      }

      return 0;
    }
  }
}

uint64_t PrescribedToolXPC.swiftRepresentation.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (a1 == 1)
  {
    static PrescribedTool.generateKnowledgeResponseIntentTool.getter();
  }
  else
  {
    if (a1)
    {
      uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      return result;
    }
    static PrescribedTool.searchTool.getter();
  }
  uint64_t v3 = type metadata accessor for PrescribedTool();
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 0, 1, v3);
}

uint64_t static ConversationCommitResultXPC.supportsSecureCoding.getter()
{
  return static ConversationCommitResultXPC.supportsSecureCoding;
}

uint64_t static ConversationCommitResultXPC.supportsSecureCoding.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static ConversationCommitResultXPC.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static ConversationCommitResultXPC.supportsSecureCoding.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

Swift::Void __swiftcall ConversationCommitResultXPC.encode(with:)(NSCoder with)
{
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_Task();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v64 = (char *)v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v60 - v7;
  uint64_t v9 = *(void *)(v1 + OBJC_IVAR___SKRConversationCommitResult_type);
  uint64_t v10 = (void *)MEMORY[0x1BA9E2DD0](1701869940, 0xE400000000000000);
  [(objc_class *)with.super.isa encodeInteger:v9 forKey:v10];

  uint64_t v11 = *(void *)(v1 + OBJC_IVAR___SKRConversationCommitResult_activeTasks);
  uint64_t v12 = *(void *)(v11 + 16);
  uint64_t v61 = v1;
  Class isa = with.super.isa;
  uint64_t v65 = v4;
  if (v12)
  {
    uint64_t v14 = v4 + 16;
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    uint64_t v15 = v11 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v67 = *(void *)(v4 + 72);
    id v68 = v13;
    Class v66 = (void (**)(char *, uint64_t))(v4 + 8);
    v60[1] = v11;
    swift_bridgeObjectRetain_n();
    id v16 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v63 = v14;
    do
    {
      v68(v8, v15, v3);
      lazy protocol witness table accessor for type PrescribedTool and conformance PrescribedTool(lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task, MEMORY[0x1E4FA2760]);
      uint64_t v17 = Message.serializedData(partial:)();
      uint64_t v19 = v18;
      (*v66)(v8, v3);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
      }
      unint64_t v21 = v16[2];
      unint64_t v20 = v16[3];
      id v22 = v16;
      if (v21 >= v20 >> 1) {
        id v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v16);
      }
      uint64_t v22[2] = v21 + 1;
      id v16 = v22;
      uint64_t v23 = &v22[2 * v21];
      v23[4] = v17;
      v23[5] = v19;
      v15 += v67;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease_n();
    uint64_t v1 = v61;
    with.super.Class isa = isa;
  }
  Class v24 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v25 = (void *)MEMORY[0x1BA9E2DD0](0x6154657669746361, 0xEB00000000736B73);
  unint64_t v26 = &off_1E61F1000;
  [(objc_class *)with.super.isa encodeObject:v24 forKey:v25];

  uint64_t v27 = *(void *)(v1 + OBJC_IVAR___SKRConversationCommitResult_completedTasks);
  uint64_t v28 = *(void *)(v27 + 16);
  uint64_t v29 = v64;
  if (v28)
  {
    uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 16);
    uint64_t v30 = v65 + 16;
    uint64_t v32 = v27 + ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80));
    uint64_t v67 = *(void *)(v65 + 72);
    id v68 = v31;
    id v33 = (void (**)(char *, uint64_t))(v65 + 8);
    Class v66 = (void (**)(char *, uint64_t))v27;
    swift_bridgeObjectRetain_n();
    uint64_t v34 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v65 = v30;
    do
    {
      v68(v29, v32, v3);
      lazy protocol witness table accessor for type PrescribedTool and conformance PrescribedTool(lazy protocol witness table cache variable for type Siri_Nlu_External_Task and conformance Siri_Nlu_External_Task, MEMORY[0x1E4FA2760]);
      uint64_t v35 = Message.serializedData(partial:)();
      uint64_t v37 = v36;
      (*v33)(v29, v3);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
      }
      unint64_t v39 = v34[2];
      unint64_t v38 = v34[3];
      if (v39 >= v38 >> 1) {
        uint64_t v34 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v38 > 1), v39 + 1, 1, v34);
      }
      v34[2] = v39 + 1;
      uint64_t v40 = &v34[2 * v39];
      v40[4] = v35;
      v40[5] = v37;
      uint64_t v29 = v64;
      v32 += v67;
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease_n();
    uint64_t v1 = v61;
    with.super.Class isa = isa;
    unint64_t v26 = &off_1E61F1000;
  }
  Class v41 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v42 = (void *)MEMORY[0x1BA9E2DD0](0x6574656C706D6F63, 0xEE00736B73615464);
  objc_msgSend(with.super.isa, (SEL)v26[225], v41, v42);

  uint64_t v43 = *(void *)(v1 + OBJC_IVAR___SKRConversationCommitResult_flowUnhandledReason);
  switch(v43)
  {
    case 0:
      goto LABEL_22;
    case 1:
    case 2:
    case 3:
    case 5:
      unint64_t v44 = 0x80000001BA0605F0;
      unint64_t v45 = 0xD000000000000013;
      goto LABEL_21;
    case 4:
      NSArray v59 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000013, 0x80000001BA0605F0);
      [(objc_class *)with.super.isa encodeInteger:4 forKey:v59];

      if (*(unsigned char *)(v1 + OBJC_IVAR___SKRConversationCommitResult_prescribedTool + 8)) {
        goto LABEL_22;
      }
      uint64_t v43 = *(void *)(v1 + OBJC_IVAR___SKRConversationCommitResult_prescribedTool);
      unint64_t v45 = 0x6269726373657270;
      unint64_t v44 = 0xEE006C6F6F546465;
LABEL_21:
      id v46 = (void *)MEMORY[0x1BA9E2DD0](v45, v44);
      [(objc_class *)with.super.isa encodeInteger:v43 forKey:v46];

LABEL_22:
      Class v47 = *(void **)(v1 + OBJC_IVAR___SKRConversationCommitResult_error);
      if (v47)
      {
        id v48 = v47;
        uint64_t v49 = (void *)MEMORY[0x1BA9E2DD0](0x726F727265, 0xE500000000000000);
        objc_msgSend(with.super.isa, (SEL)v26[225], v48, v49);
      }
      Swift::String v50 = (uint64_t *)(v1 + OBJC_IVAR___SKRConversationCommitResult_nextPluginActionData);
      unint64_t v51 = *(void *)(v1 + OBJC_IVAR___SKRConversationCommitResult_nextPluginActionData + 8);
      if (v51 >> 60 != 15)
      {
        uint64_t v52 = *v50;
        outlined copy of Data._Representation(*v50, *(void *)(v1 + OBJC_IVAR___SKRConversationCommitResult_nextPluginActionData + 8));
        Class v53 = Data._bridgeToObjectiveC()().super.isa;
        unint64_t v54 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000014, 0x80000001BA060620);
        objc_msgSend(with.super.isa, (SEL)v26[225], v53, v54);

        outlined consume of Data?(v52, v51);
      }
      if (*(void *)(v1 + OBJC_IVAR___SKRConversationCommitResult_reparseExecutionRequestID + 8))
      {
        Class v55 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v1
                                                    + OBJC_IVAR___SKRConversationCommitResult_reparseExecutionRequestID));
        uint64_t v56 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000019, 0x80000001BA060640);
        objc_msgSend(with.super.isa, (SEL)v26[225], v55, v56);
      }
      if (*(void *)(v1 + OBJC_IVAR___SKRConversationCommitResult_reparseUserID + 8))
      {
        uint64_t v57 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v1 + OBJC_IVAR___SKRConversationCommitResult_reparseUserID));
        uint64_t v58 = (void *)MEMORY[0x1BA9E2DD0](0x5565737261706572, 0xED00004449726573);
        objc_msgSend(with.super.isa, (SEL)v26[225], v57, v58);
      }
      return;
    default:
      uint64_t v69 = *(void *)(v1 + OBJC_IVAR___SKRConversationCommitResult_flowUnhandledReason);
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      JUMPOUT(0x1B9E03AF4);
  }
}

unint64_t ConversationCommitResultXPC.CodingKeys.rawValue.getter(char a1)
{
  unint64_t result = 1701869940;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6154657669746361;
      break;
    case 2:
      unint64_t result = 0x6574656C706D6F63;
      break;
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    case 4:
      unint64_t result = 0x6269726373657270;
      break;
    case 5:
      unint64_t result = 0x726F727265;
      break;
    case 6:
      unint64_t result = 0xD000000000000014;
      break;
    case 7:
      unint64_t result = 0xD000000000000019;
      break;
    case 8:
      unint64_t result = 0x5565737261706572;
      break;
    default:
      return result;
  }
  return result;
}

id ConversationCommitResultXPC.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return ConversationCommitResultXPC.init(coder:)(a1);
}

unint64_t FlowUnhandledReasonXPC.init(rawValue:)(unint64_t a1)
{
  return specialized FlowUnhandledReasonXPC.init(rawValue:)(a1);
}

BOOL PrescribedToolXPC.init(rawValue:)(uint64_t a1)
{
  return a1 && a1 == 1;
}

unint64_t ConversationCommitResultTypeXPC.init(rawValue:)(unint64_t a1)
{
  return specialized ConversationCommitResultTypeXPC.init(rawValue:)(a1);
}

SiriKitRuntime::ConversationCommitResultXPC::CodingKeys_optional __swiftcall ConversationCommitResultXPC.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (SiriKitRuntime::ConversationCommitResultXPC::CodingKeys_optional)9;
}

uint64_t ConversationCommitResultXPC.CodingKeys.intValue.getter()
{
  return 0;
}

unint64_t ConversationCommitResultXPC.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 1701869940;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6154657669746361;
      break;
    case 2:
      unint64_t result = 0x6574656C706D6F63;
      break;
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    case 4:
      unint64_t result = 0x6269726373657270;
      break;
    case 5:
      unint64_t result = 0x726F727265;
      break;
    case 6:
      unint64_t result = 0xD000000000000014;
      break;
    case 7:
      unint64_t result = 0xD000000000000019;
      break;
    case 8:
      unint64_t result = 0x5565737261706572;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConversationCommitResultXPC.CodingKeys(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = ConversationCommitResultXPC.CodingKeys.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == ConversationCommitResultXPC.CodingKeys.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConversationCommitResultXPC.CodingKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  ConversationCommitResultXPC.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ConversationCommitResultXPC.CodingKeys()
{
  ConversationCommitResultXPC.CodingKeys.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConversationCommitResultXPC.CodingKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  ConversationCommitResultXPC.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ConversationCommitResultXPC.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized ConversationCommitResultXPC.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ConversationCommitResultXPC.CodingKeys@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = ConversationCommitResultXPC.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance ConversationCommitResultXPC.CodingKeys()
{
  return ConversationCommitResultXPC.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance ConversationCommitResultXPC.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized ConversationCommitResultXPC.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ConversationCommitResultXPC.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ConversationCommitResultXPC.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConversationCommitResultXPC.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

id ConversationCommitResultXPC.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void ConversationCommitResultXPC.init()()
{
}

id ConversationCommitResultXPC.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationCommitResultXPC();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for XPCRepresentation.swiftRepresentation() in conformance ConversationCommitResultXPC()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ConversationCommitResultTypeXPC@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = specialized ConversationCommitResultTypeXPC.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

void protocol witness for Hashable.hash(into:) in conformance PrescribedToolXPC()
{
  Hasher._combine(_:)(*v0);
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance PrescribedToolXPC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result != 1 && *result != 0;
  *(void *)a2 = *result == 1;
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

uint64_t FlowUnhandledReasonXPC.swiftRepresentation.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 0:
      uint64_t v3 = type metadata accessor for FlowUnhandledReason();
      char v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
      uint64_t v5 = v3;
      uint64_t v6 = a2;
      uint64_t v7 = 1;
      goto LABEL_10;
    case 1:
      uint64_t v11 = (unsigned int *)MEMORY[0x1E4FA18B0];
      goto LABEL_8;
    case 2:
      uint64_t v11 = (unsigned int *)MEMORY[0x1E4FA18A8];
      goto LABEL_8;
    case 3:
      uint64_t v11 = (unsigned int *)MEMORY[0x1E4FA18B8];
      goto LABEL_8;
    case 4:
      uint64_t v8 = type metadata accessor for PrescribedTool();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a2, 1, 1, v8);
      uint64_t v9 = *MEMORY[0x1E4FA1898];
      uint64_t v10 = type metadata accessor for FlowUnhandledReason();
      uint64_t v14 = *(void *)(v10 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 104))(a2, v9, v10);
      goto LABEL_9;
    case 5:
      uint64_t v11 = (unsigned int *)MEMORY[0x1E4FA18A0];
LABEL_8:
      uint64_t v12 = *v11;
      uint64_t v10 = type metadata accessor for FlowUnhandledReason();
      uint64_t v14 = *(void *)(v10 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 104))(a2, v12, v10);
LABEL_9:
      char v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
      uint64_t v6 = a2;
      uint64_t v7 = 0;
      uint64_t v5 = v10;
LABEL_10:
      return v4(v6, v7, 1, v5);
    default:
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
      __break(1u);
      JUMPOUT(0x1B9E04548);
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConversationCommitResultTypeXPC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConversationCommitResultTypeXPC()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FlowUnhandledReasonXPC@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = specialized FlowUnhandledReasonXPC.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

id specialized ConversationCommitResultXPC.__allocating_init(type:activeTasks:completedTasks:flowUnhandledReason:prescribedTool:error:nextPluginActionData:reparseExecutionRequestID:reparseUserID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  unint64_t v20 = (objc_class *)type metadata accessor for ConversationCommitResultXPC();
  unint64_t v21 = (char *)objc_allocWithZone(v20);
  *(void *)&v21[OBJC_IVAR___SKRConversationCommitResult_type] = a1;
  *(void *)&v21[OBJC_IVAR___SKRConversationCommitResult_activeTasks] = a2;
  *(void *)&v21[OBJC_IVAR___SKRConversationCommitResult_completedTasks] = a3;
  *(void *)&v21[OBJC_IVAR___SKRConversationCommitResult_flowUnhandledReason] = a4;
  id v22 = &v21[OBJC_IVAR___SKRConversationCommitResult_prescribedTool];
  *(void *)id v22 = a5;
  v22[8] = a6 & 1;
  *(void *)&v21[OBJC_IVAR___SKRConversationCommitResult_error] = a7;
  uint64_t v23 = &v21[OBJC_IVAR___SKRConversationCommitResult_nextPluginActionData];
  *(void *)uint64_t v23 = a8;
  *((void *)v23 + 1) = a9;
  Class v24 = &v21[OBJC_IVAR___SKRConversationCommitResult_reparseExecutionRequestID];
  *(void *)Class v24 = a10;
  *((void *)v24 + 1) = a11;
  uint64_t v25 = &v21[OBJC_IVAR___SKRConversationCommitResult_reparseUserID];
  *(void *)uint64_t v25 = a12;
  *((void *)v25 + 1) = a13;
  v28.receiver = v21;
  v28.super_class = v20;
  return objc_msgSendSuper2(&v28, sel_init);
}

id specialized static ConversationCommitResultXPC.flowWasNotHandled(flowUnhandledReason:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PrescribedTool();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for FlowUnhandledReason();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PrescribedTool?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  if ((*(unsigned int (**)(char *, uint64_t))(v7 + 88))(v9, v6) == *MEMORY[0x1E4FA1898])
  {
    (*(void (**)(char *, uint64_t))(v7 + 96))(v9, v6);
    outlined init with take of PrescribedTool?((uint64_t)v9, (uint64_t)v12);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v12, 1, 1, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  uint64_t v13 = FlowUnhandledReason.xpcRepresentation.getter();
  char v14 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v12, 1, v2))
  {
    uint64_t v15 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v12, v2);
    uint64_t v15 = PrescribedTool.xpcRepresentation.getter();
    char v14 = v16 & 1;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  id v17 = specialized ConversationCommitResultXPC.__allocating_init(type:activeTasks:completedTasks:flowUnhandledReason:prescribedTool:error:nextPluginActionData:reparseExecutionRequestID:reparseUserID:)(2, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], v13, v15, v14, 0, 0, 0xF000000000000000, 0, 0, 0, 0);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for PrescribedTool?);
  return v17;
}

id specialized static ConversationCommitResultXPC.flowWantsToRedirect(nextPluginAction:)()
{
  uint64_t v0 = PluginAction.serialize()();
  return specialized ConversationCommitResultXPC.__allocating_init(type:activeTasks:completedTasks:flowUnhandledReason:prescribedTool:error:nextPluginActionData:reparseExecutionRequestID:reparseUserID:)(3, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], 0, 0, 1, 0, v0, v1, 0, 0, 0, 0);
}

uint64_t outlined init with take of PrescribedTool?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PrescribedTool?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of PrescribedTool?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PrescribedTool?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id specialized static ConversationCommitResultXPC.error(_:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BA04FD90;
  *(void *)(inited + 32) = 0x7470697263736564;
  *(void *)(inited + 40) = 0xEB000000006E6F69;
  id v3 = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v4 = String.init<A>(describing:)();
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 48) = v4;
  *(void *)(inited + 56) = v5;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  id v6 = objc_allocWithZone(MEMORY[0x1E4F28C58]);
  uint64_t v7 = (void *)MEMORY[0x1BA9E2DD0](0xD00000000000001DLL, 0x80000001BA065500);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(v6, sel_initWithDomain_code_userInfo_, v7, -1, isa);

  return specialized ConversationCommitResultXPC.__allocating_init(type:activeTasks:completedTasks:flowUnhandledReason:prescribedTool:error:nextPluginActionData:reparseExecutionRequestID:reparseUserID:)(0, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860], 0, 0, 1, (uint64_t)v9, 0, 0xF000000000000000, 0, 0, 0, 0);
}

uint64_t lazy protocol witness table accessor for type PrescribedTool and conformance PrescribedTool(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t specialized FlowUnhandledReasonXPC.init(rawValue:)(unint64_t result)
{
  if (result > 5) {
    return 0;
  }
  return result;
}

unint64_t specialized ConversationCommitResultTypeXPC.init(rawValue:)(unint64_t result)
{
  if (result > 4) {
    return 0;
  }
  return result;
}

unint64_t specialized ConversationCommitResultXPC.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ConversationCommitResultXPC.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return 9;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationCommitResultXPC.CodingKeys and conformance ConversationCommitResultXPC.CodingKeys);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for XPCRepresentation.SwiftRepresentation : XPCConvertible in ConversationCommitResultXPC()
{
  return &protocol witness table for ConversationCommitResult;
}

unint64_t lazy protocol witness table accessor for type ConversationCommitResultTypeXPC and conformance ConversationCommitResultTypeXPC()
{
  unint64_t result = lazy protocol witness table cache variable for type ConversationCommitResultTypeXPC and conformance ConversationCommitResultTypeXPC;
  if (!lazy protocol witness table cache variable for type ConversationCommitResultTypeXPC and conformance ConversationCommitResultTypeXPC)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationCommitResultTypeXPC and conformance ConversationCommitResultTypeXPC);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrescribedToolXPC and conformance PrescribedToolXPC()
{
  unint64_t result = lazy protocol witness table cache variable for type PrescribedToolXPC and conformance PrescribedToolXPC;
  if (!lazy protocol witness table cache variable for type PrescribedToolXPC and conformance PrescribedToolXPC)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrescribedToolXPC and conformance PrescribedToolXPC);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FlowUnhandledReasonXPC and conformance FlowUnhandledReasonXPC()
{
  unint64_t result = lazy protocol witness table cache variable for type FlowUnhandledReasonXPC and conformance FlowUnhandledReasonXPC;
  if (!lazy protocol witness table cache variable for type FlowUnhandledReasonXPC and conformance FlowUnhandledReasonXPC)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlowUnhandledReasonXPC and conformance FlowUnhandledReasonXPC);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ConversationCommitResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v13 = type metadata accessor for FlowUnhandledReason();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
        break;
      case 2u:
        uint64_t v9 = type metadata accessor for PluginAction();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        break;
      case 3u:
        uint64_t v10 = a2[1];
        *a1 = *a2;
        a1[1] = v10;
        uint64_t v11 = a2[2];
        uint64_t v12 = a2[3];
        a1[2] = v11;
        a1[3] = v12;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v6 = *a2;
        uint64_t v7 = a2[1];
        *a1 = v6;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for ConversationCommitResult(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of ConversationCommitResult((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v4 = type metadata accessor for FlowUnhandledReason();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
        break;
      case 2u:
        uint64_t v5 = type metadata accessor for PluginAction();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
        break;
      case 3u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of ConversationCommitResult(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ConversationCommitResult();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for ConversationCommitResult(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v8 = type metadata accessor for PluginAction();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = type metadata accessor for FlowUnhandledReason();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for ConversationCommitResult(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ConversationCommitResult((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v8 = type metadata accessor for PluginAction();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = type metadata accessor for FlowUnhandledReason();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for ConversationCommitResult()
{
  uint64_t result = type metadata accessor for FlowUnhandledReason();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for PluginAction();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for ConversationCommitResultXPC(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationCommitResultXPC);
}

uint64_t dispatch thunk of ConversationCommitResultXPC.swiftRepresentation()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of ConversationCommitResultXPC.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of ConversationCommitResultXPC.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t getEnumTagSinglePayload for ConversationCommitResultXPC.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ConversationCommitResultXPC.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9E05924);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConversationCommitResultXPC.CodingKeys()
{
  return &type metadata for ConversationCommitResultXPC.CodingKeys;
}

ValueMetadata *type metadata accessor for ConversationCommitResultTypeXPC()
{
  return &type metadata for ConversationCommitResultTypeXPC;
}

ValueMetadata *type metadata accessor for PrescribedToolXPC()
{
  return &type metadata for PrescribedToolXPC;
}

ValueMetadata *type metadata accessor for FlowUnhandledReasonXPC()
{
  return &type metadata for FlowUnhandledReasonXPC;
}

uint64_t ConversationContextUpdateMetadata.__allocating_init(didFallbackToServer:requestType:flowPluginInfo:currentUserId:emptyServerContext:meetsUserSessionThreshold:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v12 = swift_allocObject();
  *(unsigned char *)(v12 + 16) = a1;
  uint64_t v13 = v12 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType;
  uint64_t v14 = type metadata accessor for RequestType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v13, a2, v14);
  *(void *)(v12 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo) = a3;
  uint64_t v15 = v12 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId;
  uint64_t v16 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v15, a4, v16);
  *(unsigned char *)(v12 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) = a5;
  *(unsigned char *)(v12 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_meetsUserSessionThreshold) = a6;
  return v12;
}

uint64_t ConversationContextUpdateMetadata.didFallbackToServer.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t ConversationContextUpdateMetadata.requestType.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationContextUpdateMetadata.requestType.getter(&OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType, MEMORY[0x1E4FA2460], a1);
}

void *ConversationContextUpdateMetadata.flowPluginInfo.getter()
{
  unint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo);
  id v2 = v1;
  return v1;
}

uint64_t ConversationContextUpdateMetadata.currentUserId.getter@<X0>(uint64_t a1@<X8>)
{
  return ConversationContextUpdateMetadata.requestType.getter(&OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId, MEMORY[0x1E4FA26E0], a1);
}

uint64_t ConversationContextUpdateMetadata.requestType.getter@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3 + *a1;
  uint64_t v6 = a2(0);
  BOOL v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);

  return v7(a3, v5, v6);
}

uint64_t ConversationContextUpdateMetadata.emptyServerContext.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext);
}

uint64_t ConversationContextUpdateMetadata.meetsUserSessionThreshold.getter()
{
  return *(unsigned __int8 *)(v0
                            + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_meetsUserSessionThreshold);
}

uint64_t ConversationContextUpdateMetadata.init(didFallbackToServer:requestType:flowPluginInfo:currentUserId:emptyServerContext:meetsUserSessionThreshold:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  *(unsigned char *)(v6 + 16) = a1;
  uint64_t v12 = v6 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType;
  uint64_t v13 = type metadata accessor for RequestType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v12, a2, v13);
  *(void *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo) = a3;
  uint64_t v14 = v6 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId;
  uint64_t v15 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v14, a4, v15);
  *(unsigned char *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) = a5;
  *(unsigned char *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_meetsUserSessionThreshold) = a6;
  return v6;
}

uint64_t ConversationContextUpdateMetadata.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType;
  uint64_t v2 = type metadata accessor for RequestType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  uint64_t v3 = v0 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId;
  uint64_t v4 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ConversationContextUpdateMetadata()
{
  return ConversationContextUpdateMetadata.description.getter();
}

uint64_t ObjC metadata update function for ConversationContextUpdateMetadata()
{
  return type metadata accessor for ConversationContextUpdateMetadata();
}

uint64_t type metadata completion function for ConversationContextUpdateMetadata()
{
  uint64_t result = type metadata accessor for RequestType();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UserID();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_updateClassMetadata2();
      if (!result) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t method lookup function for ConversationContextUpdateMetadata(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationContextUpdateMetadata);
}

uint64_t dispatch thunk of ConversationContextUpdateMetadata.__allocating_init(didFallbackToServer:requestType:flowPluginInfo:currentUserId:emptyServerContext:meetsUserSessionThreshold:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t FlexibleExecutionSupportOptions.none.unsafeMutableAddressor()
{
  return FlexibleExecutionSupportOptions.none.unsafeMutableAddressor(&one-time initialization token for none, (uint64_t)static FlexibleExecutionSupportOptions.none);
}

id FlexibleExecutionSupportOptions.xpcRepresentation.getter()
{
  uint64_t v0 = FlexibleExecutionSupportOptions.rawValue.getter();
  unint64_t v1 = (objc_class *)type metadata accessor for ConversationFlexibleExecutionSupportXPC();
  unint64_t v2 = (char *)objc_allocWithZone(v1);
  *(void *)&v2[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = v0;
  v4.receiver = v2;
  v4.super_class = v1;
  return objc_msgSendSuper2(&v4, sel_init);
}

id ConversationFlexibleExecutionSupportXPC.__allocating_init(rawValue:)(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

uint64_t one-time initialization function for all()
{
  uint64_t v0 = type metadata accessor for FlexibleExecutionSupportOptions();
  __swift_allocate_value_buffer(v0, static FlexibleExecutionSupportOptions.all);
  __swift_project_value_buffer(v0, (uint64_t)static FlexibleExecutionSupportOptions.all);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<FlexibleExecutionSupportOptions>);
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1BA04F9C0;
  static FlexibleExecutionSupportOptions.executeBeforeEndpoint.getter();
  static FlexibleExecutionSupportOptions.inputContinuation.getter();
  lazy protocol witness table accessor for type FlexibleExecutionSupportOptions and conformance FlexibleExecutionSupportOptions();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [FlexibleExecutionSupportOptions]);
  lazy protocol witness table accessor for type [FlexibleExecutionSupportOptions] and conformance [A]();
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t FlexibleExecutionSupportOptions.all.unsafeMutableAddressor()
{
  return FlexibleExecutionSupportOptions.none.unsafeMutableAddressor(&one-time initialization token for all, (uint64_t)static FlexibleExecutionSupportOptions.all);
}

uint64_t FlexibleExecutionSupportOptions.none.unsafeMutableAddressor(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for FlexibleExecutionSupportOptions();

  return __swift_project_value_buffer(v3, a2);
}

uint64_t static FlexibleExecutionSupportOptions.all.getter@<X0>(uint64_t a1@<X8>)
{
  return static FlexibleExecutionSupportOptions.all.getter(&one-time initialization token for all, (uint64_t)static FlexibleExecutionSupportOptions.all, a1);
}

uint64_t one-time initialization function for none()
{
  uint64_t v0 = type metadata accessor for FlexibleExecutionSupportOptions();
  __swift_allocate_value_buffer(v0, static FlexibleExecutionSupportOptions.none);
  __swift_project_value_buffer(v0, (uint64_t)static FlexibleExecutionSupportOptions.none);
  lazy protocol witness table accessor for type FlexibleExecutionSupportOptions and conformance FlexibleExecutionSupportOptions();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [FlexibleExecutionSupportOptions]);
  lazy protocol witness table accessor for type [FlexibleExecutionSupportOptions] and conformance [A]();
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t static FlexibleExecutionSupportOptions.none.getter@<X0>(uint64_t a1@<X8>)
{
  return static FlexibleExecutionSupportOptions.all.getter(&one-time initialization token for none, (uint64_t)static FlexibleExecutionSupportOptions.none, a1);
}

uint64_t static FlexibleExecutionSupportOptions.all.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for FlexibleExecutionSupportOptions();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  BOOL v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

id protocol witness for XPCConvertible.xpcRepresentation.getter in conformance FlexibleExecutionSupportOptions()
{
  uint64_t v0 = FlexibleExecutionSupportOptions.rawValue.getter();
  unint64_t v1 = (objc_class *)type metadata accessor for ConversationFlexibleExecutionSupportXPC();
  unint64_t v2 = (char *)objc_allocWithZone(v1);
  *(void *)&v2[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = v0;
  v4.receiver = v2;
  v4.super_class = v1;
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t ConversationFlexibleExecutionSupportXPC.rawValue.getter()
{
  return *(void *)(v0 + OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue);
}

id ConversationFlexibleExecutionSupportXPC.init(rawValue:)(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for ConversationFlexibleExecutionSupportXPC();
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t static ConversationFlexibleExecutionSupportXPC.supportsSecureCoding.getter()
{
  return static ConversationFlexibleExecutionSupportXPC.supportsSecureCoding;
}

uint64_t static ConversationFlexibleExecutionSupportXPC.supportsSecureCoding.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static ConversationFlexibleExecutionSupportXPC.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static ConversationFlexibleExecutionSupportXPC.supportsSecureCoding.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

Swift::Void __swiftcall ConversationFlexibleExecutionSupportXPC.encode(with:)(NSCoder with)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue);
  id v4 = (id)MEMORY[0x1BA9E2DD0](0x6E6F6974706FLL, 0xE600000000000000);
  [(objc_class *)with.super.isa encodeInteger:v3 forKey:v4];
}

id ConversationFlexibleExecutionSupportXPC.__allocating_init(coder:)(void *a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  id v4 = (void *)MEMORY[0x1BA9E2DD0](0x6E6F6974706FLL, 0xE600000000000000);
  id v5 = objc_msgSend(a1, sel_decodeIntegerForKey_, v4);

  *(void *)&v3[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = v5;
  v8.receiver = v3;
  v8.super_class = v1;
  id v6 = objc_msgSendSuper2(&v8, sel_init);

  return v6;
}

id ConversationFlexibleExecutionSupportXPC.init(coder:)(void *a1)
{
  uint64_t v3 = v1;
  id v4 = (void *)MEMORY[0x1BA9E2DD0](0x6E6F6974706FLL, 0xE600000000000000);
  id v5 = objc_msgSend(a1, sel_decodeIntegerForKey_, v4);

  *(void *)&v3[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = v5;
  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for ConversationFlexibleExecutionSupportXPC();
  id v6 = objc_msgSendSuper2(&v8, sel_init);

  return v6;
}

id static ConversationFlexibleExecutionSupportXPC.error(_:)()
{
  uint64_t v0 = (objc_class *)type metadata accessor for ConversationFlexibleExecutionSupportXPC();
  uint64_t v1 = (char *)objc_allocWithZone(v0);
  *(void *)&v1[OBJC_IVAR___SKRConversationFlexibleExecutionSupport_rawValue] = -1;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

id ConversationFlexibleExecutionSupportXPC.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void ConversationFlexibleExecutionSupportXPC.init()()
{
}

id ConversationFlexibleExecutionSupportXPC.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConversationFlexibleExecutionSupportXPC();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

_UNKNOWN **associated type witness table accessor for XPCRepresentation.SwiftRepresentation : XPCConvertible in ConversationFlexibleExecutionSupportXPC()
{
  return &protocol witness table for FlexibleExecutionSupportOptions;
}

uint64_t protocol witness for XPCRepresentation.swiftRepresentation() in conformance ConversationFlexibleExecutionSupportXPC()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t method lookup function for ConversationFlexibleExecutionSupportXPC(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationFlexibleExecutionSupportXPC);
}

uint64_t dispatch thunk of ConversationFlexibleExecutionSupportXPC.__allocating_init(rawValue:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of ConversationFlexibleExecutionSupportXPC.swiftRepresentation()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ConversationFlexibleExecutionSupportXPC.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of ConversationFlexibleExecutionSupportXPC.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

unint64_t lazy protocol witness table accessor for type FlexibleExecutionSupportOptions and conformance FlexibleExecutionSupportOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type FlexibleExecutionSupportOptions and conformance FlexibleExecutionSupportOptions;
  if (!lazy protocol witness table cache variable for type FlexibleExecutionSupportOptions and conformance FlexibleExecutionSupportOptions)
  {
    type metadata accessor for FlexibleExecutionSupportOptions();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlexibleExecutionSupportOptions and conformance FlexibleExecutionSupportOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [FlexibleExecutionSupportOptions] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [FlexibleExecutionSupportOptions] and conformance [A];
  if (!lazy protocol witness table cache variable for type [FlexibleExecutionSupportOptions] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [FlexibleExecutionSupportOptions]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [FlexibleExecutionSupportOptions] and conformance [A]);
  }
  return result;
}

uint64_t dispatch thunk of ConversationHandler.id.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ConversationHandler.warmup(refId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 24) + **(int **)(a4 + 24));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v11(a1, a2, a3, a4);
}

uint64_t dispatch thunk of ConversationHandler.startTurn(turnData:rcId:hypothesisId:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a8 + 32) + **(int **)(a8 + 32));
  id v17 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v17;
  *id v17 = v8;
  v17[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v19(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t dispatch thunk of ConversationHandler.findConversation(for:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a6 + 40)
                                                                                     + **(int **)(a6 + 40));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v13;
  *uint64_t v13 = v6;
  v13[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v15(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of ConversationHandler.affinityScore(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t specialized Sequence.flatMap<A>(_:)(void (*a1)(unint64_t *__return_ptr, char *), uint64_t a2, uint64_t a3)
{
  void (*v28)(unint64_t *__return_ptr, char *);
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;

  objc_super v28 = a1;
  uint64_t v29 = a2;
  uint64_t v5 = type metadata accessor for IntentTopic();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v32 = MEMORY[0x1E4FBC860];
  uint64_t v12 = *(void *)(a3 + 56);
  uint64_t v24 = a3 + 56;
  uint64_t v13 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  uint64_t v27 = v6 + 16;
  int64_t v25 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v26 = v6 + 32;
  uint64_t v16 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v30 = a3;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v18 = 0;
  if (!v15) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v19 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v19 | (v18 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v18 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v11, *(void *)(v30 + 48) + *(void *)(v6 + 72) * i, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v11, v5);
    v28(&v31, v9);
    if (v3)
    {
      (*v16)(v9, v5);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    (*v16)(v9, v5);
    uint64_t result = specialized Array.append<A>(contentsOf:)(v31);
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v18++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v25) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v24 + 8 * v18);
    if (!v22) {
      break;
    }
LABEL_17:
    unint64_t v15 = (v22 - 1) & v22;
  }
  int64_t v23 = v18 + 1;
  if (v18 + 1 >= v25) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v24 + 8 * v23);
  if (v22) {
    goto LABEL_16;
  }
  int64_t v23 = v18 + 2;
  if (v18 + 2 >= v25) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v24 + 8 * v23);
  if (v22) {
    goto LABEL_16;
  }
  int64_t v23 = v18 + 3;
  if (v18 + 3 >= v25) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v24 + 8 * v23);
  if (v22) {
    goto LABEL_16;
  }
  int64_t v23 = v18 + 4;
  if (v18 + 4 >= v25)
  {
LABEL_26:
    swift_release();
    return v32;
  }
  unint64_t v22 = *(void *)(v24 + 8 * v23);
  if (v22)
  {
LABEL_16:
    int64_t v18 = v23;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v18 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v18 >= v25) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v24 + 8 * v18);
    ++v23;
    if (v22) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedContinuation<SABaseCommand?>);
  uint64_t v5 = swift_allocObject();
  v2[3] = v5;
  uint64_t v6 = v5 + *(void *)(*(void *)v5 + 88);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = v5 + *(void *)(*(void *)v5 + 96);
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = -1;
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E08]), sel_init);
  *(void *)(v5 + *(void *)(*(void *)v5 + 104)) = v9;
  id v10 = v9;
  uint64_t v11 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000027, 0x80000001BA063490);
  objc_msgSend(v10, sel_setName_, v11);

  uint64_t v12 = (void *)swift_task_alloc();
  v2[4] = v12;
  v12[2] = v5;
  v12[3] = a1;
  v12[4] = a2;
  uint64_t v13 = (void *)swift_task_alloc();
  v2[5] = v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
  *uint64_t v13 = v2;
  v13[1] = specialized withCancellableContinuation<A>(body:);
  return MEMORY[0x1F4188150](v2 + 2, &async function pointer to partial apply for specialized closure #2 in withCancellableContinuation<A>(body:), v12, partial apply for specialized closure #1 in withCancellableContinuation<A>(body:), v5, v14);
}

{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v16;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedContinuation<RemoteConversation?>);
  uint64_t v5 = swift_allocObject();
  v2[4] = v5;
  uint64_t v6 = v5 + *(void *)(*(void *)v5 + 88);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  uint64_t v8 = v5 + *(void *)(*(void *)v5 + 96);
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  *(unsigned char *)(v8 + 16) = -1;
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E08]), sel_init);
  *(void *)(v5 + *(void *)(*(void *)v5 + 104)) = v9;
  id v10 = v9;
  uint64_t v11 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000027, 0x80000001BA063490);
  objc_msgSend(v10, sel_setName_, v11);

  uint64_t v12 = (void *)swift_task_alloc();
  v2[5] = v12;
  v12[2] = v5;
  v12[3] = a1;
  v12[4] = a2;
  uint64_t v13 = (void *)swift_task_alloc();
  v2[6] = v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteConversation?);
  *uint64_t v13 = v2;
  v13[1] = specialized withCancellableContinuation<A>(body:);
  return MEMORY[0x1F4188150](v2 + 2, &async function pointer to partial apply for specialized closure #2 in withCancellableContinuation<A>(body:), v12, partial apply for specialized closure #1 in withCancellableContinuation<A>(body:), v5, v14);
}

uint64_t specialized withCancellableContinuation<A>(body:)()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 16);
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(uint64_t))(v3 + 8);
    return v7(v6);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;

  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  swift_release();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v7 = *(void *)(v2 + 16);
    uint64_t v6 = *(void *)(v2 + 24);
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
    return v8(v7, v6);
  }
}

uint64_t specialized withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedContinuation<()>);
  uint64_t v7 = swift_allocObject();
  v3[2] = v7;
  uint64_t v8 = v7 + *(void *)(*(void *)v7 + 88);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = v7 + *(void *)(*(void *)v7 + 96);
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = -1;
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28E08]), sel_init);
  *(void *)(v7 + *(void *)(*(void *)v7 + 104)) = v11;
  id v12 = v11;
  uint64_t v13 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000027, 0x80000001BA063490);
  objc_msgSend(v12, sel_setName_, v13);

  uint64_t v14 = (void *)swift_task_alloc();
  v3[3] = v14;
  long long v14[2] = v7;
  v14[3] = a2;
  v14[4] = a3;
  unint64_t v15 = (void *)swift_task_alloc();
  v3[4] = v15;
  *unint64_t v15 = v3;
  v15[1] = withCancellableContinuation<A>(body:);
  uint64_t v16 = MEMORY[0x1E4FBC848] + 8;
  return MEMORY[0x1F4188150](a1, &async function pointer to partial apply for specialized closure #2 in withCancellableContinuation<A>(body:), v14, partial apply for specialized closure #1 in withCancellableContinuation<A>(body:), v7, v16);
}

uint64_t ConversationHandlerLocator.allHandlers(for:)(uint64_t a1, uint64_t a2)
{
  v3[49] = a2;
  v3[50] = v2;
  v3[48] = a1;
  uint64_t v4 = type metadata accessor for IntentTopic();
  v3[51] = v4;
  v3[52] = *(void *)(v4 - 8);
  v3[53] = swift_task_alloc();
  v3[54] = swift_task_alloc();
  v3[55] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UserParse();
  v3[56] = v5;
  v3[57] = *(void *)(v5 - 8);
  v3[58] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for USOParse();
  v3[59] = v6;
  v3[60] = *(void *)(v6 - 8);
  v3[61] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Input();
  v3[62] = v7;
  v3[63] = *(void *)(v7 - 8);
  v3[64] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Parse();
  v3[65] = v8;
  v3[66] = *(void *)(v8 - 8);
  v3[67] = swift_task_alloc();
  v3[68] = swift_task_alloc();
  v3[69] = swift_task_alloc();
  v3[70] = swift_task_alloc();
  v3[71] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  v3[72] = v9;
  v3[73] = *(void *)(v9 - 8);
  v3[74] = swift_task_alloc();
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, Parse));
  v3[75] = v10;
  v3[76] = *(void *)(v10 - 8);
  v3[77] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v11 = static MessageBusActor.shared;
  v3[78] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](ConversationHandlerLocator.allHandlers(for:), v11, 0);
}

uint64_t ConversationHandlerLocator.allHandlers(for:)()
{
  uint64_t v98 = v0;
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v2 = *(void *)(v0 + 392);
  *(void *)(v0 + 360) = MEMORY[0x1E4FBC860];
  unint64_t v3 = specialized ImmutableSimpleOrderedDictionary.items()(v1, v2);
  *(void *)(v0 + 632) = v3;
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(v0 + 640) = v4;
  if (v4)
  {
    unint64_t v5 = 0;
    uint64_t v6 = *(void *)(v0 + 608);
    *(_DWORD *)(v0 + 752) = *(_DWORD *)(*(void *)(v0 + 600) + 48);
    uint64_t v7 = (_DWORD *)MEMORY[0x1E4FA1F48];
    *(_DWORD *)(v0 + 756) = *(_DWORD *)(v6 + 80);
    *(_DWORD *)(v0 + 760) = *v7;
    while (1)
    {
      *(void *)(v0 + 656) = v5;
      *(void *)(v0 + 648) = 0;
      uint64_t v18 = *(void *)(v0 + 632);
      if (v5 >= *(void *)(v18 + 16))
      {
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
        return _fatalErrorMessage(_:_:file:line:flags:)();
      }
      int v94 = *(_DWORD *)(v0 + 760);
      uint64_t v19 = *(void *)(v0 + 616);
      uint64_t v20 = *(void *)(v0 + 592);
      uint64_t v21 = *(void *)(v0 + 584);
      uint64_t v22 = *(void *)(v0 + 576);
      uint64_t v23 = *(void *)(v0 + 568);
      uint64_t v24 = *(void *)(v0 + 560);
      uint64_t v25 = *(void *)(v0 + 528);
      uint64_t v26 = *(void *)(v0 + 520);
      uint64_t v92 = *(void *)(v0 + 552);
      uint64_t v27 = v19 + *(int *)(v0 + 752);
      outlined init with copy of ReferenceResolutionClientProtocol?(v18+ ((*(unsigned __int8 *)(v0 + 756) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 756))+ *(void *)(*(void *)(v0 + 608) + 72) * v5, v19, &demangling cache variable for type metadata for (UUID, Parse));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v20, v19, v22);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v23, v27, v26);
      objc_super v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16);
      *(void *)(v0 + 664) = v28;
      *(void *)(v0 + 672) = (v25 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v28(v24, v23, v26);
      Input.init(parse:)();
      id v91 = v28;
      v28(v92, v23, v26);
      int v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 88))(v92, v26);
      uint64_t v30 = *(void *)(v0 + 552);
      uint64_t v31 = *(void *)(v0 + 528);
      uint64_t v32 = *(void *)(v0 + 520);
      if (v29 != v94)
      {
        (*(void (**)(void, uint64_t))(v31 + 8))(*(void *)(v0 + 552), v32);
        goto LABEL_14;
      }
      uint64_t v34 = *(void *)(v0 + 480);
      uint64_t v33 = *(void *)(v0 + 488);
      uint64_t v36 = *(void *)(v0 + 464);
      uint64_t v35 = *(void *)(v0 + 472);
      uint64_t v37 = *(void *)(v0 + 448);
      uint64_t v38 = *(void *)(v0 + 456);
      (*(void (**)(void, uint64_t))(v31 + 96))(*(void *)(v0 + 552), v32);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v33, v30, v35);
      USOParse.userParse.getter();
      char v39 = Siri_Nlu_External_UserParse.isSNLC.getter();
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
      if ((v39 & 1) == 0) {
        break;
      }
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v40 = *(void *)(v0 + 568);
      uint64_t v41 = *(void *)(v0 + 544);
      uint64_t v42 = *(void *)(v0 + 520);
      uint64_t v43 = type metadata accessor for Logger();
      __swift_project_value_buffer(v43, (uint64_t)static Logger.executor);
      v91(v41, v40, v42);
      unint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.debug.getter();
      BOOL v46 = os_log_type_enabled(v44, v45);
      uint64_t v47 = *(void *)(v0 + 568);
      if (v46)
      {
        uint64_t v48 = *(void *)(v0 + 560);
        uint64_t v49 = *(void *)(v0 + 544);
        uint64_t v95 = *(void *)(v0 + 568);
        uint64_t v50 = *(void *)(v0 + 520);
        uint64_t v93 = *(void *)(v0 + 488);
        uint64_t v88 = *(void *)(v0 + 528);
        uint64_t v89 = *(void *)(v0 + 480);
        uint64_t v90 = *(void *)(v0 + 472);
        uint64_t v51 = swift_slowAlloc();
        uint64_t v52 = (void *)swift_slowAlloc();
        v97[0] = v52;
        *(_DWORD *)uint64_t v51 = 136315138;
        v91(v48, v49, v50);
        uint64_t v53 = String.init<A>(describing:)();
        *(void *)(v51 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, (uint64_t *)v97);
        swift_bridgeObjectRelease();
        Class v55 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
        v55(v49, v50);
        _os_log_impl(&dword_1B9C64000, v44, v45, "allHandlers(for:) Skipping SNLC parse %s", (uint8_t *)v51, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v52, -1, -1);
        MEMORY[0x1BA9E48C0](v51, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v93, v90);
        v55(v95, v50);
      }
      else
      {
        uint64_t v8 = *(void *)(v0 + 544);
        uint64_t v9 = *(void *)(v0 + 528);
        uint64_t v10 = *(void *)(v0 + 520);
        uint64_t v12 = *(void *)(v0 + 480);
        uint64_t v11 = *(void *)(v0 + 488);
        uint64_t v13 = *(void *)(v0 + 472);

        uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
        v14(v8, v10);
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
        v14(v47, v10);
      }
      uint64_t v15 = *(void *)(v0 + 592);
      uint64_t v16 = *(void *)(v0 + 584);
      uint64_t v17 = *(void *)(v0 + 576);
      (*(void (**)(void, void))(*(void *)(v0 + 504) + 8))(*(void *)(v0 + 512), *(void *)(v0 + 496));
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
      unint64_t v5 = *(void *)(v0 + 656) + 1;
      if (v5 == *(void *)(v0 + 640)) {
        goto LABEL_37;
      }
    }
    (*(void (**)(void, void))(*(void *)(v0 + 480) + 8))(*(void *)(v0 + 488), *(void *)(v0 + 472));
LABEL_14:
    uint64_t v56 = static IntentTopic.make(from:)();
    uint64_t v57 = *(void *)(v56 + 16);
    if (v57)
    {
      uint64_t v58 = *(void *)(v0 + 416);
      unint64_t v59 = (*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
      unint64_t v60 = v56 + v59;
      uint64_t v61 = *(void *)(v58 + 72);
      uint64_t v96 = *(void (**)(uint64_t, unint64_t, uint64_t))(v58 + 16);
      swift_bridgeObjectRetain();
      uint64_t v62 = MEMORY[0x1E4FBC860];
      while (1)
      {
        uint64_t v63 = *(void *)(v0 + 440);
        uint64_t v65 = *(void *)(v0 + 408);
        uint64_t v64 = *(void *)(v0 + 416);
        v96(v63, v60, v65);
        uint64_t v66 = IntentTopic.makeWildcardFallbacks()();
        (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v63, v65);
        uint64_t v67 = *(void *)(v66 + 16);
        int64_t v68 = *(void *)(v62 + 16);
        int64_t v69 = v68 + v67;
        if (__OFADD__(v68, v67))
        {
LABEL_50:
          __break(1u);
          goto LABEL_51;
        }
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if (isUniquelyReferenced_nonNull_native && v69 <= *(void *)(v62 + 24) >> 1)
        {
          if (*(void *)(v66 + 16)) {
            goto LABEL_27;
          }
        }
        else
        {
          if (v68 <= v69) {
            int64_t v71 = v68 + v67;
          }
          else {
            int64_t v71 = v68;
          }
          uint64_t v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v71, 1, v62);
          if (*(void *)(v66 + 16))
          {
LABEL_27:
            uint64_t v72 = *(void *)(v62 + 16);
            if ((*(void *)(v62 + 24) >> 1) - v72 < v67) {
              goto LABEL_52;
            }
            unint64_t v73 = v62 + v59 + v72 * v61;
            if (v66 + v59 < v73 + v67 * v61 && v73 < v66 + v59 + v67 * v61) {
              return _fatalErrorMessage(_:_:file:line:flags:)();
            }
            swift_arrayInitWithCopy();
            if (v67)
            {
              uint64_t v75 = *(void *)(v62 + 16);
              BOOL v76 = __OFADD__(v75, v67);
              uint64_t v77 = v75 + v67;
              if (v76) {
                goto LABEL_53;
              }
              *(void *)(v62 + 16) = v77;
            }
            goto LABEL_17;
          }
        }
        if (v67)
        {
          __break(1u);
          goto LABEL_50;
        }
LABEL_17:
        swift_bridgeObjectRelease();
        v60 += v61;
        if (!--v57)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_46;
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v62 = MEMORY[0x1E4FBC860];
LABEL_46:
    *(void *)(v0 + 680) = specialized Set.init<A>(_:)(v62);
    swift_bridgeObjectRelease();
    uint64_t v87 = static MessageBusActor.shared;
    *(void *)(v0 + 688) = static MessageBusActor.shared;
    swift_retain();
    return MEMORY[0x1F4188298](ConversationHandlerLocator.allHandlers(for:), v87, 0);
  }
  else
  {
LABEL_37:
    swift_bridgeObjectRelease();
    uint64_t v78 = (void *)(v0 + 360);
    swift_release();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v79 = type metadata accessor for Logger();
    __swift_project_value_buffer(v79, (uint64_t)static Logger.executor);
    Class v80 = (void *)*v78;
    swift_bridgeObjectRetain();
    id v81 = Logger.logObject.getter();
    os_log_type_t v82 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v81, v82))
    {
      uint64_t v83 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v83 = 134217984;
      *(void *)(v0 + 368) = v80[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v81, v82, "allHandlers(for:) Total handlers found: %ld", v83, 0xCu);
      MEMORY[0x1BA9E48C0](v83, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    swift_beginAccess();
    v97[0] = *(void **)v78;
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)(v97);
    swift_bridgeObjectRelease_n();
    uint64_t v84 = v97[0];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v85 = *(uint64_t (**)(void *))(v0 + 8);
    return v85(v84);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *(void *)(*(void *)(v0 + 400) + 16);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 696) = v2;
  unint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PluginLookupByIntentTopic);
  *uint64_t v2 = v0;
  v2[1] = ConversationHandlerLocator.allHandlers(for:);
  return MEMORY[0x1F4187DC0](v0 + 96, v1, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 688);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](ConversationHandlerLocator.allHandlers(for:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 624);
  swift_release();
  return MEMORY[0x1F4188298](ConversationHandlerLocator.allHandlers(for:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  void *v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t, uint64_t);
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  NSObject *v126;
  os_log_type_t v127;
  BOOL v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  unint64_t v136;
  void (*v137)(uint64_t, uint64_t);
  void *v138;
  uint64_t (*v139)(void *);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int64_t v152;
  int64_t v153;
  int isUniquelyReferenced_nonNull_native;
  int64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v159;
  BOOL v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint8_t *v173;
  long long *v174;
  void (*v175)(uint64_t, uint64_t, uint64_t);
  uint64_t v176;
  uint64_t v177;
  void (*v178)(uint64_t, uint64_t, uint64_t);
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  void (*v187)(uint64_t, unint64_t, uint64_t);
  void *v188[2];
  void *v189;
  uint64_t v190;

  v189 = v0;
  uint64_t v1 = (uint64_t)(v0 + 12);
  uint64_t v2 = v0[85];
  unint64_t v3 = v0[81];
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = v0 + 12;
  unint64_t v5 = specialized Sequence.flatMap<A>(_:)((void (*)(unint64_t *__return_ptr, char *))partial apply for closure #2 in ConversationHandlerLocator.allHandlers(for:), v4, v2);
  v0[88] = v5;
  v0[89] = v3;
  swift_task_dealloc();
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v43 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v43) {
      goto LABEL_9;
    }
  }
  else if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_9;
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v6 = (void (*)(uint64_t, uint64_t, uint64_t))v0[83];
  uint64_t v7 = v0[71];
  uint64_t v8 = v0[67];
  uint64_t v9 = v0[65];
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
  v6(v8, v7, v9);
  uint64_t v11 = Logger.logObject.getter();
  uint64_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v175 = (void (*)(uint64_t, uint64_t, uint64_t))v0[83];
    uint64_t v13 = v0[70];
    uint64_t v14 = v0[67];
    uint64_t v15 = v0[66];
    uint64_t v16 = v0[65];
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = (void *)swift_slowAlloc();
    v188[0] = v18;
    *(_DWORD *)uint64_t v17 = 136315138;
    uint64_t v173 = v17 + 4;
    v175(v13, v14, v16);
    uint64_t v19 = String.init<A>(describing:)();
    v0[47] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, (uint64_t *)v188);
    uint64_t v1 = (uint64_t)(v0 + 12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    _os_log_impl(&dword_1B9C64000, v11, v12, "allHandlers(for:) Found no plugins for parse: %s", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v18, -1, -1);
    MEMORY[0x1BA9E48C0](v17, -1, -1);
  }
  else
  {
    (*(void (**)(void, void))(v0[66] + 8))(v0[67], v0[65]);
  }

LABEL_9:
  uint64_t v21 = v0[85];
  uint64_t v22 = *(unsigned char *)(v21 + 32);
  *((unsigned char *)v0 + 764) = v22;
  uint64_t v23 = -1;
  uint64_t v24 = -1 << v22;
  uint64_t v25 = *(void *)(v21 + 56);
  if (-v24 < 64) {
    uint64_t v23 = ~(-1 << -(char)v24);
  }
  uint64_t v26 = MEMORY[0x1E4FBC860];
  v0[90] = MEMORY[0x1E4FBC860];
  uint64_t v27 = v23 & v25;
  if (v27)
  {
    objc_super v28 = 0;
    int v29 = __clz(__rbit64(v27));
    uint64_t v30 = (v27 - 1) & v27;
LABEL_13:
    v0[92] = v30;
    v0[91] = v28;
    uint64_t v32 = v0[53];
    uint64_t v31 = v0[54];
    uint64_t v34 = v0[51];
    uint64_t v33 = v0[52];
    uint64_t v35 = v0[50];
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v33 + 16))(v31, *(void *)(v21 + 48) + *(void *)(v33 + 72) * v29, v34);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v32, v31, v34);
    uint64_t v36 = *(void *)(v35 + 40);
    uint64_t v37 = *(void *)(v35 + 48);
    uint64_t v38 = (void *)swift_task_alloc();
    v0[93] = v38;
    *uint64_t v38 = v0;
    v38[1] = ConversationHandlerLocator.allHandlers(for:);
    char v39 = v0[53];
    return FlowExtensionDiscoverer.findConversationHandler(topic:onConnectionInterrupted:)((uint64_t)(v0 + 2), v39, v36, v37);
  }
  uint64_t v41 = 63 - v24;
  if (v41 > 0x7F)
  {
    uint64_t v42 = *(void *)(v21 + 64);
    if (v42)
    {
      objc_super v28 = 1;
LABEL_19:
      uint64_t v30 = (v42 - 1) & v42;
      int v29 = __clz(__rbit64(v42)) + (v28 << 6);
      goto LABEL_13;
    }
    if (v41 >= 0xC0)
    {
      uint64_t v42 = *(void *)(v21 + 72);
      if (v42)
      {
        objc_super v28 = 2;
        goto LABEL_19;
      }
      if (v41 >= 0x100)
      {
        uint64_t v42 = *(void *)(v21 + 80);
        if (v42)
        {
          objc_super v28 = 3;
          goto LABEL_19;
        }
        if (v41 >= 0x140)
        {
          uint64_t v42 = *(void *)(v21 + 88);
          if (v42)
          {
            objc_super v28 = 4;
          }
          else
          {
            unint64_t v44 = 0;
            os_log_type_t v45 = v41 >> 6;
            if (v45 <= 5) {
              os_log_type_t v45 = 5;
            }
            BOOL v46 = v45 - 5;
            do
            {
              if (v46 == v44) {
                goto LABEL_37;
              }
              uint64_t v42 = *(void *)(v21 + 96 + 8 * v44++);
            }
            while (!v42);
            objc_super v28 = v44 + 4;
          }
          goto LABEL_19;
        }
      }
    }
  }
LABEL_37:
  uint64_t v47 = v0[88];
  swift_release();
  if (v47 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v164 = v1;
    if (v48) {
      goto LABEL_39;
    }
  }
  else
  {
    uint64_t v48 = *(void *)((v0[88] & 0xFFFFFFFFFFFFFF8) + 0x10);
    v164 = v1;
    if (v48)
    {
LABEL_39:
      v0[43] = v26;
      uint64_t v179 = v0 + 43;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48 & ~(v48 >> 63), 0);
      if (v48 < 0)
      {
        __break(1u);
LABEL_112:
        swift_once();
LABEL_56:
        os_log_type_t v85 = type metadata accessor for Logger();
        __swift_project_value_buffer(v85, (uint64_t)static Logger.executor);
        BOOL v86 = (void *)*v163;
        swift_bridgeObjectRetain();
        uint64_t v87 = Logger.logObject.getter();
        uint64_t v88 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v87, v88))
        {
          uint64_t v89 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v89 = 134217984;
          v0[46] = v86[2];
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v87, v88, "allHandlers(for:) Total handlers found: %ld", v89, 0xCu);
          MEMORY[0x1BA9E48C0](v89, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        swift_beginAccess();
        v188[0] = *(void **)v163;
        swift_bridgeObjectRetain_n();
        specialized MutableCollection<>.sort(by:)(v188);
        if (v173)
        {
          return swift_release();
        }
        else
        {
          swift_bridgeObjectRelease_n();
          uint64_t v138 = v188[0];
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v139 = (uint64_t (*)(void *))v0[1];
          return v139(v138);
        }
      }
      uint64_t v49 = v0;
      uint64_t v50 = 0;
      v170 = (uint64_t)(v49 + 22);
      uint64_t v174 = (long long *)(v49 + 7);
      v183 = v49;
      uint64_t v51 = v49[88];
      uint64_t v165 = v51 + 32;
      uint64_t v167 = v51 & 0xC000000000000001;
      v176 = v48;
      do
      {
        if (v167)
        {
          uint64_t v52 = (void *)MEMORY[0x1BA9E3990](v50, v183[88]);
        }
        else
        {
          uint64_t v52 = *(void **)(v165 + 8 * v50);
          swift_retain();
        }
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v53 = type metadata accessor for Logger();
        unint64_t v54 = __swift_project_value_buffer(v53, (uint64_t)static Logger.executor);
        specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/RemoteFlowPluginPackage.swift", 44, 2, (uint64_t)"loadRemoteConversationHandler()", 31, 2, v54);
        Class v55 = v52[2];
        uint64_t v56 = v52[3];
        uint64_t v58 = v52[6];
        uint64_t v57 = v52[7];
        outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v52 + 8), (uint64_t)v174);
        unint64_t v59 = v52[4];
        unint64_t v60 = type metadata accessor for RemoteFlowPluginBundleConversationHandler();
        uint64_t v61 = (void *)swift_allocObject();
        v61[12] = 0;
        v61[13] = 0;
        v61[2] = v55;
        void v61[3] = v56;
        v61[4] = v58;
        v61[5] = v57;
        outlined init with take of ReferenceResolutionClientProtocol(v174, (uint64_t)(v61 + 7));
        v61[6] = v59;
        v183[25] = v60;
        v183[26] = lazy protocol witness table accessor for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler(&lazy protocol witness table cache variable for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler, (void (*)(uint64_t))type metadata accessor for RemoteFlowPluginBundleConversationHandler);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_release();
        v183[22] = v61;
        uint64_t v62 = v183[43];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v62 + 16) + 1, 1);
          uint64_t v62 = *v179;
        }
        uint64_t v64 = *(void *)(v62 + 16);
        uint64_t v63 = *(void *)(v62 + 24);
        if (v64 >= v63 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v63 > 1, v64 + 1, 1);
        }
        ++v50;
        uint64_t v66 = v183[25];
        uint64_t v65 = v183[26];
        uint64_t v67 = __swift_mutable_project_boxed_opaque_existential_1(v170, v66);
        int64_t v68 = *(void *)(v66 - 8);
        int64_t v69 = swift_task_alloc();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 16))(v69, v67, v66);
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v64, v69, v179, v66, v65);
        __swift_destroy_boxed_opaque_existential_1Tm(v170);
        swift_task_dealloc();
      }
      while (v176 != v50);
      uint64_t v0 = v183;
      uint64_t v70 = (void *)v183[43];
      swift_bridgeObjectRelease();
      goto LABEL_54;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v70 = (void *)MEMORY[0x1E4FBC860];
LABEL_54:
  int64_t v71 = (uint8_t *)v0[89];
  uint64_t v72 = v0[74];
  unint64_t v73 = v0[73];
  v184 = v0[72];
  v188[0] = v70;
  v177 = v0[71];
  uint64_t v74 = v0[66];
  uint64_t v75 = v0[63];
  BOOL v76 = v0[64];
  v168 = v76;
  v171 = v0[65];
  v180 = v0[62];
  uint64_t v77 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v77);
  uint64_t v78 = v188[0];
  uint64_t v79 = swift_task_alloc();
  *(void *)(v79 + 16) = v76;
  Class v80 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t))partial apply for closure #4 in ConversationHandlerLocator.allHandlers(for:), v79, (uint64_t)v78);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  id v81 = swift_task_alloc();
  os_log_type_t v82 = v72;
  *(void *)(v81 + 16) = v72;
  uint64_t v83 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime26ConversationHandlerLocatorC06ScoredH0VG_10Foundation4UUIDV4uuid_AJ06scoredH0ts5NeverOTg5((void (*)(uint64_t))partial apply for closure #5 in ConversationHandlerLocator.allHandlers(for:), v81, v80);
  uint64_t v173 = v71;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  v163 = v0 + 45;
  specialized Array.append<A>(contentsOf:)(v83);
  (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v177, v171);
  __swift_destroy_boxed_opaque_existential_1Tm(v164);
  (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v168, v180);
  (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v82, v184);
  uint64_t v84 = v0[82] + 1;
  if (v84 == v0[80])
  {
LABEL_55:
    swift_bridgeObjectRelease();
    swift_release();
    if (one-time initialization token for executor == -1) {
      goto LABEL_56;
    }
    goto LABEL_112;
  }
  while (1)
  {
    v0[82] = v84;
    v0[81] = v173;
    uint64_t v100 = v0[79];
    if (v84 >= *(void *)(v100 + 16))
    {
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
      return _fatalErrorMessage(_:_:file:line:flags:)();
    }
    v185 = *((_DWORD *)v0 + 190);
    uint64_t v101 = v0[77];
    unint64_t v102 = v0[74];
    uint64_t v103 = v0[73];
    uint64_t v104 = v0[72];
    uint64_t v105 = v0[71];
    uint64_t v106 = v0[70];
    uint64_t v181 = v0[69];
    uint64_t v107 = v0[66];
    uint64_t v108 = v0[65];
    uint64_t v109 = v101 + *((int *)v0 + 188);
    outlined init with copy of ReferenceResolutionClientProtocol?(v100+ ((*((unsigned __int8 *)v0 + 756) + 32) & ~(unint64_t)*((unsigned __int8 *)v0 + 756))+ *(void *)(v0[76] + 72) * v84, v101, &demangling cache variable for type metadata for (UUID, Parse));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v103 + 32))(v102, v101, v104);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 32))(v105, v109, v108);
    uint64_t v110 = *(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 16);
    v0[83] = v110;
    v0[84] = (v107 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v110(v106, v105, v108);
    Input.init(parse:)();
    v178 = v110;
    v110(v181, v105, v108);
    uint64_t v111 = (*(uint64_t (**)(uint64_t, uint64_t))(v107 + 88))(v181, v108);
    uint64_t v112 = v0[69];
    uint64_t v113 = v0[66];
    uint64_t v114 = v0[65];
    if (v111 != v185)
    {
      (*(void (**)(void, uint64_t))(v113 + 8))(v0[69], v114);
      goto LABEL_78;
    }
    uint64_t v116 = v0[60];
    uint64_t v115 = v0[61];
    uint64_t v118 = v0[58];
    uint64_t v117 = v0[59];
    uint64_t v119 = v0[56];
    long long v120 = v0[57];
    (*(void (**)(void, uint64_t))(v113 + 96))(v0[69], v114);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v116 + 32))(v115, v112, v117);
    USOParse.userParse.getter();
    uint64_t v121 = Siri_Nlu_External_UserParse.isSNLC.getter();
    (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v118, v119);
    if ((v121 & 1) == 0) {
      break;
    }
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v122 = v0[71];
    uint64_t v123 = v0[68];
    uint64_t v124 = v0[65];
    v125 = type metadata accessor for Logger();
    __swift_project_value_buffer(v125, (uint64_t)static Logger.executor);
    v178(v123, v122, v124);
    v126 = Logger.logObject.getter();
    uint64_t v127 = static os_log_type_t.debug.getter();
    uint64_t v128 = os_log_type_enabled(v126, v127);
    uint64_t v129 = v0[71];
    if (v128)
    {
      v130 = v0[70];
      v131 = v0[68];
      uint64_t v166 = v0[66];
      uint64_t v132 = v0[65];
      uint64_t v186 = v0[61];
      uint64_t v172 = v0[60];
      v182 = v0[59];
      uint64_t v133 = swift_slowAlloc();
      v169 = v129;
      uint64_t v134 = (void *)swift_slowAlloc();
      v188[0] = v134;
      *(_DWORD *)uint64_t v133 = 136315138;
      v178(v130, v131, v132);
      uint64_t v135 = String.init<A>(describing:)();
      *(void *)(v133 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v135, v136, (uint64_t *)v188);
      swift_bridgeObjectRelease();
      uint64_t v137 = *(void (**)(uint64_t, uint64_t))(v166 + 8);
      v137(v131, v132);
      _os_log_impl(&dword_1B9C64000, v126, v127, "allHandlers(for:) Skipping SNLC parse %s", (uint8_t *)v133, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v134, -1, -1);
      MEMORY[0x1BA9E48C0](v133, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v172 + 8))(v186, v182);
      v137(v169, v132);
    }
    else
    {
      uint64_t v90 = v0[68];
      id v91 = v0[66];
      uint64_t v92 = v0[65];
      int v94 = v0[60];
      uint64_t v93 = v0[61];
      uint64_t v95 = v0[59];

      uint64_t v96 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
      v96(v90, v92);
      (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v93, v95);
      v96(v129, v92);
    }
    id v97 = v0[74];
    uint64_t v98 = v0[73];
    uint64_t v99 = v0[72];
    (*(void (**)(void, void))(v0[63] + 8))(v0[64], v0[62]);
    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v97, v99);
    uint64_t v84 = v0[82] + 1;
    if (v84 == v0[80]) {
      goto LABEL_55;
    }
  }
  (*(void (**)(void, void))(v0[60] + 8))(v0[61], v0[59]);
LABEL_78:
  uint64_t v140 = static IntentTopic.make(from:)();
  v141 = *(void *)(v140 + 16);
  if (v141)
  {
    v142 = v0[52];
    uint64_t v143 = (*(unsigned __int8 *)(v142 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80);
    v144 = v140 + v143;
    v145 = *(void *)(v142 + 72);
    v187 = *(void (**)(uint64_t, unint64_t, uint64_t))(v142 + 16);
    swift_bridgeObjectRetain();
    uint64_t v146 = MEMORY[0x1E4FBC860];
    while (1)
    {
      uint64_t v147 = v0[55];
      uint64_t v149 = v0[51];
      v148 = v0[52];
      v187(v147, v144, v149);
      uint64_t v150 = IntentTopic.makeWildcardFallbacks()();
      (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v147, v149);
      v151 = *(void *)(v150 + 16);
      uint64_t v152 = *(void *)(v146 + 16);
      v153 = v152 + v151;
      if (__OFADD__(v152, v151))
      {
LABEL_106:
        __break(1u);
        goto LABEL_107;
      }
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && v153 <= *(void *)(v146 + 24) >> 1)
      {
        if (*(void *)(v150 + 16)) {
          goto LABEL_91;
        }
      }
      else
      {
        if (v152 <= v153) {
          uint64_t v155 = v152 + v151;
        }
        else {
          uint64_t v155 = v152;
        }
        uint64_t v146 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v155, 1, v146);
        if (*(void *)(v150 + 16))
        {
LABEL_91:
          v156 = *(void *)(v146 + 16);
          if ((*(void *)(v146 + 24) >> 1) - v156 < v151) {
            goto LABEL_108;
          }
          v157 = v146 + v143 + v156 * v145;
          if (v150 + v143 < v157 + v151 * v145 && v157 < v150 + v143 + v151 * v145) {
            return _fatalErrorMessage(_:_:file:line:flags:)();
          }
          swift_arrayInitWithCopy();
          if (v151)
          {
            uint64_t v159 = *(void *)(v146 + 16);
            uint64_t v160 = __OFADD__(v159, v151);
            uint64_t v161 = v159 + v151;
            if (v160) {
              goto LABEL_109;
            }
            *(void *)(v146 + 16) = v161;
          }
          goto LABEL_81;
        }
      }
      if (v151)
      {
        __break(1u);
        goto LABEL_106;
      }
LABEL_81:
      swift_bridgeObjectRelease();
      v144 += v145;
      if (!--v141)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_102;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v146 = MEMORY[0x1E4FBC860];
LABEL_102:
  v0[85] = specialized Set.init<A>(_:)(v146);
  swift_bridgeObjectRelease();
  uint64_t v162 = static MessageBusActor.shared;
  v0[86] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](ConversationHandlerLocator.allHandlers(for:), v162, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 624);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](ConversationHandlerLocator.allHandlers(for:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t (*v27)();
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  int64_t v38;
  int64_t v39;
  char *v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  void (*v80)(uint64_t, long long *);
  unint64_t v81;
  uint64_t v82;
  void *v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t, uint64_t);
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  os_log_type_t v123;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  unint64_t v130;
  void (*v131)(uint64_t, uint64_t);
  void *v132;
  uint64_t (*v133)(void *);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int64_t v143;
  int64_t v144;
  int v145;
  int64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v150;
  BOOL v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  long long *v166;
  uint64_t v167;
  void (*v168)(uint64_t, uint64_t, uint64_t);
  uint64_t v169;
  uint64_t *v170;
  uint64_t v171;
  uint64_t v172;
  long long *v173;
  void *v174;
  int v175;
  void *v176[2];
  void *v177;
  uint64_t v178;

  v177 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (!v0[5])
  {
    (*(void (**)(void, void))(v0[52] + 8))(v0[53], v0[51]);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)(v0 + 2), &demangling cache variable for type metadata for ConversationHandler?);
    uint64_t v16 = (void *)v0[90];
    goto LABEL_12;
  }
  uint64_t v2 = (uint64_t)(v0 + 17);
  unint64_t v3 = v0 + 27;
  uint64_t v173 = (long long *)(v0 + 32);
  outlined init with take of ReferenceResolutionClientProtocol((long long *)v0 + 1, (uint64_t)(v0 + 17));
  if (one-time initialization token for executor != -1) {
    goto LABEL_103;
  }
LABEL_3:
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol(v2, (uint64_t)v3);
  unint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    v169 = v1;
    uint64_t v8 = (void *)swift_slowAlloc();
    v176[0] = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v9 = v0[30];
    uint64_t v10 = v0[31];
    __swift_project_boxed_opaque_existential_1(v3, v9);
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(v9, v10);
    *(void *)(v7 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, (uint64_t *)v176);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v3);
    _os_log_impl(&dword_1B9C64000, v5, v6, "allHandlers(for:) Found extension with id: %s", (uint8_t *)v7, 0xCu);
    swift_arrayDestroy();
    uint64_t v13 = v8;
    uint64_t v1 = v169;
    MEMORY[0x1BA9E48C0](v13, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v3);
  }

  outlined init with copy of ReferenceResolutionClientProtocol(v2, (uint64_t)v173);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = (void *)v0[90];
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, (void *)v0[90]);
  }
  uint64_t v19 = v16[2];
  uint64_t v18 = v16[3];
  if (v19 >= v18 >> 1) {
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v16);
  }
  uint64_t v21 = v0[52];
  uint64_t v20 = v0[53];
  uint64_t v22 = v0[51];
  v16[2] = v19 + 1;
  outlined init with take of ReferenceResolutionClientProtocol(v173, (uint64_t)&v16[5 * v19 + 4]);
  __swift_destroy_boxed_opaque_existential_1Tm(v2);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
LABEL_12:
  uint64_t v23 = v0[92];
  uint64_t v24 = v0[91];
  v0[90] = v16;
  if (v23)
  {
    uint64_t v25 = (v23 - 1) & v23;
    uint64_t v26 = __clz(__rbit64(v23)) | (v24 << 6);
    uint64_t v27 = (uint64_t (*)())v0[85];
    goto LABEL_14;
  }
  uint64_t v38 = v24 + 1;
  if (__OFADD__(v24, 1))
  {
    __break(1u);
LABEL_107:
    swift_once();
LABEL_50:
    os_log_type_t v82 = type metadata accessor for Logger();
    __swift_project_value_buffer(v82, (uint64_t)static Logger.executor);
    uint64_t v83 = (void *)*v154;
    swift_bridgeObjectRetain();
    uint64_t v84 = Logger.logObject.getter();
    os_log_type_t v85 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v84, v85))
    {
      BOOL v86 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)BOOL v86 = 134217984;
      v0[46] = v83[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v84, v85, "allHandlers(for:) Total handlers found: %ld", v86, 0xCu);
      MEMORY[0x1BA9E48C0](v86, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    swift_beginAccess();
    v176[0] = *(void **)v154;
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)(v176);
    if (v164)
    {
      return swift_release();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      uint64_t v132 = v176[0];
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v133 = (uint64_t (*)(void *))v0[1];
      return v133(v132);
    }
  }
  char v39 = (unint64_t)((1 << *((unsigned char *)v0 + 764)) + 63) >> 6;
  uint64_t v27 = (uint64_t (*)())v0[85];
  if (v38 < v39)
  {
    uint64_t v40 = (char *)v27 + 56;
    uint64_t v41 = *((void *)v27 + v38 + 7);
    ++v24;
    if (v41) {
      goto LABEL_20;
    }
    uint64_t v24 = v38 + 1;
    if (v38 + 1 < v39)
    {
      uint64_t v41 = *(void *)&v40[8 * v24];
      if (v41) {
        goto LABEL_20;
      }
      uint64_t v24 = v38 + 2;
      if (v38 + 2 < v39)
      {
        uint64_t v41 = *(void *)&v40[8 * v24];
        if (v41) {
          goto LABEL_20;
        }
        uint64_t v42 = v38 + 3;
        if (v42 < v39)
        {
          uint64_t v41 = *(void *)&v40[8 * v42];
          if (v41)
          {
            uint64_t v24 = v42;
LABEL_20:
            uint64_t v25 = (v41 - 1) & v41;
            uint64_t v26 = __clz(__rbit64(v41)) + (v24 << 6);
LABEL_14:
            v0[92] = v25;
            v0[91] = v24;
            int v29 = v0[53];
            objc_super v28 = v0[54];
            uint64_t v31 = v0[51];
            uint64_t v30 = v0[52];
            uint64_t v32 = v0[50];
            (*(void (**)(uint64_t, unint64_t, uint64_t))(v30 + 16))(v28, *((void *)v27 + 6) + *(void *)(v30 + 72) * v26, v31);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32))(v29, v28, v31);
            uint64_t v33 = *(void *)(v32 + 40);
            uint64_t v34 = *(void *)(v32 + 48);
            uint64_t v35 = (void *)swift_task_alloc();
            v0[93] = v35;
            *uint64_t v35 = v0;
            v35[1] = ConversationHandlerLocator.allHandlers(for:);
            uint64_t v36 = v0[53];
            return FlowExtensionDiscoverer.findConversationHandler(topic:onConnectionInterrupted:)(v1, v36, v33, v34);
          }
          while (1)
          {
            uint64_t v24 = v42 + 1;
            if (__OFADD__(v42, 1)) {
              break;
            }
            if (v24 >= v39) {
              goto LABEL_31;
            }
            uint64_t v41 = *(void *)&v40[8 * v24];
            ++v42;
            if (v41) {
              goto LABEL_20;
            }
          }
LABEL_109:
          __break(1u);
          return MEMORY[0x1F4188298](v27, v14, v15);
        }
      }
    }
  }
LABEL_31:
  uint64_t v43 = v0[88];
  swift_release();
  if (v43 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v44 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v44) {
      goto LABEL_33;
    }
LABEL_47:
    swift_bridgeObjectRelease();
    uint64_t v66 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_48;
  }
  unint64_t v44 = *(void *)((v0[88] & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v44) {
    goto LABEL_47;
  }
LABEL_33:
  v0[43] = MEMORY[0x1E4FBC860];
  v170 = v0 + 43;
  uint64_t v27 = (uint64_t (*)())specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44 & ~(v44 >> 63), 0);
  if (v44 < 0)
  {
    __break(1u);
    goto LABEL_109;
  }
  os_log_type_t v45 = v0;
  BOOL v46 = 0;
  uint64_t v165 = (uint64_t)(v45 + 22);
  uint64_t v166 = (long long *)(v45 + 7);
  uint64_t v174 = v45;
  uint64_t v47 = v45[88];
  uint64_t v158 = v44;
  uint64_t v161 = v47 & 0xC000000000000001;
  uint64_t v155 = v47 + 32;
  do
  {
    if (v161)
    {
      uint64_t v48 = (void *)MEMORY[0x1BA9E3990](v46, v174[88]);
    }
    else
    {
      uint64_t v48 = *(void **)(v155 + 8 * v46);
      swift_retain();
    }
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v49 = type metadata accessor for Logger();
    uint64_t v50 = __swift_project_value_buffer(v49, (uint64_t)static Logger.executor);
    specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/RemoteFlowPluginPackage.swift", 44, 2, (uint64_t)"loadRemoteConversationHandler()", 31, 2, v50);
    uint64_t v51 = v48[2];
    uint64_t v52 = v48[3];
    uint64_t v53 = v48[6];
    unint64_t v54 = v48[7];
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v48 + 8), (uint64_t)v166);
    Class v55 = v48[4];
    uint64_t v56 = type metadata accessor for RemoteFlowPluginBundleConversationHandler();
    uint64_t v57 = (void *)swift_allocObject();
    v57[12] = 0;
    v57[13] = 0;
    v57[2] = v51;
    v57[3] = v52;
    v57[4] = v53;
    v57[5] = v54;
    outlined init with take of ReferenceResolutionClientProtocol(v166, (uint64_t)(v57 + 7));
    v57[6] = v55;
    v174[25] = v56;
    v174[26] = lazy protocol witness table accessor for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler(&lazy protocol witness table cache variable for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler, (void (*)(uint64_t))type metadata accessor for RemoteFlowPluginBundleConversationHandler);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_release();
    v174[22] = v57;
    uint64_t v58 = v174[43];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v58 + 16) + 1, 1);
      uint64_t v58 = *v170;
    }
    unint64_t v60 = *(void *)(v58 + 16);
    unint64_t v59 = *(void *)(v58 + 24);
    if (v60 >= v59 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1);
    }
    ++v46;
    uint64_t v62 = v174[25];
    uint64_t v61 = v174[26];
    uint64_t v63 = __swift_mutable_project_boxed_opaque_existential_1(v165, v62);
    uint64_t v64 = *(void *)(v62 - 8);
    uint64_t v65 = swift_task_alloc();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 16))(v65, v63, v62);
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v60, v65, v170, v62, v61);
    __swift_destroy_boxed_opaque_existential_1Tm(v165);
    swift_task_dealloc();
  }
  while (v158 != v46);
  uint64_t v0 = v174;
  uint64_t v66 = (void *)v174[43];
  swift_bridgeObjectRelease();
LABEL_48:
  uint64_t v2 = v0[89];
  uint64_t v154 = v0 + 45;
  uint64_t v67 = v0[74];
  int64_t v68 = v0[73];
  uint64_t v173 = (long long *)v0[72];
  v176[0] = v66;
  int64_t v69 = v0[66];
  uint64_t v159 = v0[65];
  uint64_t v162 = v0[71];
  uint64_t v70 = v0[63];
  int64_t v71 = v0[64];
  v156 = v71;
  uint64_t v167 = v0[62];
  uint64_t v72 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v72);
  unint64_t v73 = v176[0];
  uint64_t v74 = swift_task_alloc();
  *(void *)(v74 + 16) = v71;
  uint64_t v75 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t))partial apply for closure #4 in ConversationHandlerLocator.allHandlers(for:), v74, (uint64_t)v73);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  BOOL v76 = swift_task_alloc();
  uint64_t v77 = v67;
  *(void *)(v76 + 16) = v67;
  uint64_t v78 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14SiriKitRuntime26ConversationHandlerLocatorC06ScoredH0VG_10Foundation4UUIDV4uuid_AJ06scoredH0ts5NeverOTg5((void (*)(uint64_t))partial apply for closure #5 in ConversationHandlerLocator.allHandlers(for:), v76, v75);
  v164 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  specialized Array.append<A>(contentsOf:)(v78);
  uint64_t v79 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
  unint64_t v3 = (void *)(v69 + 8);
  v79(v162, v159);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 12));
  (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v156, v167);
  Class v80 = *(void (**)(uint64_t, long long *))(v68 + 8);
  uint64_t v1 = v68 + 8;
  v80(v77, v173);
  id v81 = v0[82] + 1;
  if (v81 == v0[80])
  {
LABEL_49:
    swift_bridgeObjectRelease();
    swift_release();
    if (one-time initialization token for executor == -1) {
      goto LABEL_50;
    }
    goto LABEL_107;
  }
  while (1)
  {
    v0[82] = v81;
    v0[81] = v164;
    id v97 = v0[79];
    if (v81 >= *(void *)(v97 + 16))
    {
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      swift_once();
      goto LABEL_3;
    }
    uint64_t v175 = *((_DWORD *)v0 + 190);
    uint64_t v98 = v0[77];
    uint64_t v99 = v0[74];
    uint64_t v100 = v0[73];
    uint64_t v101 = v0[72];
    unint64_t v102 = v0[71];
    uint64_t v103 = v0[70];
    uint64_t v104 = v0[66];
    uint64_t v105 = v0[65];
    v171 = v0[69];
    uint64_t v106 = v98 + *((int *)v0 + 188);
    outlined init with copy of ReferenceResolutionClientProtocol?(v97+ ((*((unsigned __int8 *)v0 + 756) + 32) & ~(unint64_t)*((unsigned __int8 *)v0 + 756))+ *(void *)(v0[76] + 72) * v81, v98, &demangling cache variable for type metadata for (UUID, Parse));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 32))(v99, v98, v101);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v104 + 32))(v102, v106, v105);
    uint64_t v107 = *(void (**)(uint64_t, uint64_t, uint64_t))(v104 + 16);
    v0[83] = v107;
    v0[84] = (v104 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v107(v103, v102, v105);
    Input.init(parse:)();
    v168 = v107;
    v107(v171, v102, v105);
    uint64_t v108 = (*(uint64_t (**)(uint64_t, uint64_t))(v104 + 88))(v171, v105);
    uint64_t v109 = v0[69];
    uint64_t v110 = v0[66];
    uint64_t v111 = v0[65];
    if (v108 != v175)
    {
      (*(void (**)(void, uint64_t))(v110 + 8))(v0[69], v111);
      goto LABEL_72;
    }
    uint64_t v113 = v0[60];
    uint64_t v112 = v0[61];
    uint64_t v115 = v0[58];
    uint64_t v114 = v0[59];
    uint64_t v116 = v0[56];
    uint64_t v117 = v0[57];
    (*(void (**)(void, uint64_t))(v110 + 96))(v0[69], v111);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v113 + 32))(v112, v109, v114);
    USOParse.userParse.getter();
    uint64_t v118 = Siri_Nlu_External_UserParse.isSNLC.getter();
    (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v115, v116);
    if ((v118 & 1) == 0) {
      break;
    }
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v119 = v0[71];
    long long v120 = v0[68];
    uint64_t v121 = v0[65];
    uint64_t v122 = type metadata accessor for Logger();
    __swift_project_value_buffer(v122, (uint64_t)static Logger.executor);
    v168(v120, v119, v121);
    uint64_t v1 = Logger.logObject.getter();
    uint64_t v123 = static os_log_type_t.debug.getter();
    uint64_t v124 = os_log_type_enabled((os_log_t)v1, v123);
    uint64_t v173 = (long long *)v0[71];
    if (v124)
    {
      v125 = v0[70];
      v126 = v0[68];
      uint64_t v127 = v0[65];
      uint64_t v172 = v0[61];
      v157 = v0[66];
      uint64_t v160 = v0[60];
      v163 = v0[59];
      unint64_t v3 = (void *)swift_slowAlloc();
      uint64_t v128 = (void *)swift_slowAlloc();
      v176[0] = v128;
      *(_DWORD *)unint64_t v3 = 136315138;
      v168(v125, v126, v127);
      uint64_t v129 = String.init<A>(describing:)();
      *(void *)((char *)v3 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v129, v130, (uint64_t *)v176);
      swift_bridgeObjectRelease();
      v131 = *(void (**)(uint64_t, uint64_t))(v157 + 8);
      v131(v126, v127);
      _os_log_impl(&dword_1B9C64000, (os_log_t)v1, v123, "allHandlers(for:) Skipping SNLC parse %s", (uint8_t *)v3, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v128, -1, -1);
      MEMORY[0x1BA9E48C0](v3, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v172, v163);
      v131((uint64_t)v173, v127);
    }
    else
    {
      uint64_t v87 = v0[68];
      uint64_t v88 = v0[66];
      uint64_t v89 = v0[65];
      uint64_t v90 = v0[60];
      unint64_t v3 = (void *)v0[61];
      id v91 = v0[59];

      uint64_t v92 = *(void (**)(uint64_t, uint64_t))(v88 + 8);
      v92(v87, v89);
      (*(void (**)(void *, uint64_t))(v90 + 8))(v3, v91);
      v92((uint64_t)v173, v89);
    }
    uint64_t v93 = v0[74];
    int v94 = v0[73];
    uint64_t v95 = v0[72];
    (*(void (**)(void, void))(v0[63] + 8))(v0[64], v0[62]);
    uint64_t v96 = *(void (**)(uint64_t, uint64_t))(v94 + 8);
    uint64_t v2 = v94 + 8;
    v96(v93, v95);
    id v81 = v0[82] + 1;
    if (v81 == v0[80]) {
      goto LABEL_49;
    }
  }
  (*(void (**)(void, void))(v0[60] + 8))(v0[61], v0[59]);
LABEL_72:
  uint64_t v134 = static IntentTopic.make(from:)();
  uint64_t v135 = *(void *)(v134 + 16);
  if (!v135)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = MEMORY[0x1E4FBC860];
LABEL_96:
    v0[85] = specialized Set.init<A>(_:)(v2);
    swift_bridgeObjectRelease();
    v153 = static MessageBusActor.shared;
    v0[86] = static MessageBusActor.shared;
    swift_retain();
    uint64_t v27 = ConversationHandlerLocator.allHandlers(for:);
    uint64_t v14 = v153;
    uint64_t v15 = 0;
    return MEMORY[0x1F4188298](v27, v14, v15);
  }
  uint64_t v136 = v0[52];
  uint64_t v137 = (*(unsigned __int8 *)(v136 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v136 + 80);
  unint64_t v3 = (void *)(v134 + v137);
  uint64_t v1 = *(void *)(v136 + 72);
  uint64_t v173 = *(long long **)(v136 + 16);
  swift_bridgeObjectRetain();
  uint64_t v2 = MEMORY[0x1E4FBC860];
  while (2)
  {
    uint64_t v138 = v0[55];
    uint64_t v140 = v0[51];
    uint64_t v139 = v0[52];
    ((void (*)(uint64_t, void *, uint64_t))v173)(v138, v3, v140);
    v141 = IntentTopic.makeWildcardFallbacks()();
    (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v138, v140);
    v142 = *(void *)(v141 + 16);
    uint64_t v143 = *(void *)(v2 + 16);
    v144 = v143 + v142;
    if (__OFADD__(v143, v142))
    {
      __break(1u);
LABEL_100:
      __break(1u);
      goto LABEL_101;
    }
    v145 = swift_isUniquelyReferenced_nonNull_native();
    if (v145 && v144 <= *(void *)(v2 + 24) >> 1)
    {
      if (!*(void *)(v141 + 16))
      {
LABEL_74:
        if (v142) {
          goto LABEL_100;
        }
        goto LABEL_75;
      }
    }
    else
    {
      if (v143 <= v144) {
        uint64_t v146 = v143 + v142;
      }
      else {
        uint64_t v146 = v143;
      }
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v145, v146, 1, v2);
      if (!*(void *)(v141 + 16)) {
        goto LABEL_74;
      }
    }
    uint64_t v147 = *(void *)(v2 + 16);
    if ((*(void *)(v2 + 24) >> 1) - v147 < v142) {
      goto LABEL_102;
    }
    v148 = v2 + v137 + v147 * v1;
    if (v141 + v137 < v148 + v142 * v1 && v148 < v141 + v137 + v142 * v1) {
      return _fatalErrorMessage(_:_:file:line:flags:)();
    }
    swift_arrayInitWithCopy();
    if (!v142) {
      goto LABEL_75;
    }
    uint64_t v150 = *(void *)(v2 + 16);
    v151 = __OFADD__(v150, v142);
    uint64_t v152 = v150 + v142;
    if (!v151)
    {
      *(void *)(v2 + 16) = v152;
LABEL_75:
      swift_bridgeObjectRelease();
      unint64_t v3 = (void *)((char *)v3 + v1);
      if (!--v135)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_96;
      }
      continue;
    }
    break;
  }
  __break(1u);
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

void specialized closure #1 in withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t *a2, uint64_t *a3, void (*a4)(char *, void *, uint64_t))
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CancellationError();
  lazy protocol witness table accessor for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler((unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, MEMORY[0x1E4FBCF50]);
  uint64_t v10 = (void *)swift_allocError();
  CancellationError.init()();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v9, 1, 1, v11);
  id v12 = v10;
  a4(v9, v10, 1);

  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, a2);
}

void specialized closure #1 in withCancellableContinuation<A>(body:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CancellationError();
  lazy protocol witness table accessor for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler((unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, MEMORY[0x1E4FBCF50]);
  unint64_t v3 = (void *)swift_allocError();
  CancellationError.init()();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 1, 1, v4);
  id v5 = v3;
  specialized ManagedContinuation.updateState(continuation:result:)((uint64_t)v2, v3, 0, 1u);

  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v2, &demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
}

uint64_t specialized closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x1F4188298](specialized closure #2 in withCancellableContinuation<A>(body:), 0, 0);
}

{
  void *v4;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  return MEMORY[0x1F4188298](specialized closure #2 in withCancellableContinuation<A>(body:), 0, 0);
}

{
  void *v4;

  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  return MEMORY[0x1F4188298](specialized closure #2 in withCancellableContinuation<A>(body:), 0, 0);
}

uint64_t specialized closure #2 in withCancellableContinuation<A>(body:)()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  *(void *)(v2 + 32) = v1;
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  *unint64_t v3 = v0;
  v3[1] = static AsyncTaskUtils.withCheckedRethrowingContinuation<A>(body:);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = MEMORY[0x1E4FBC848] + 8;
  return MEMORY[0x1F4188160](v4, 0, 0, 0xD000000000000022, 0x80000001BA063460, partial apply for specialized closure #1 in closure #2 in withCancellableContinuation<A>(body:), v2, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 56) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 32);
  *(void *)(v2 + 32) = v1;
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
  *unint64_t v3 = v0;
  v3[1] = specialized closure #2 in withCancellableContinuation<A>(body:);
  return MEMORY[0x1F4188160](v0 + 16, 0, 0, 0xD000000000000022, 0x80000001BA063460, partial apply for specialized closure #1 in closure #2 in withCancellableContinuation<A>(body:), v2, v4);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = (void *)*v1;
  v2[9] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in AceServiceInvokerImpl.createSerialSubmissionTask(_:options:executionSource:), 0, 0);
  }
  else
  {
    unint64_t v3 = (void *)v2[3];
    swift_task_dealloc();
    *unint64_t v3 = v2[2];
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 64) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + 32) = v1;
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RemoteConversation?);
  *unint64_t v3 = v0;
  v3[1] = specialized closure #2 in withCancellableContinuation<A>(body:);
  return MEMORY[0x1F4188160](v0 + 16, 0, 0, 0xD000000000000022, 0x80000001BA063460, partial apply for specialized closure #1 in closure #2 in withCancellableContinuation<A>(body:), v2, v4);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  uint64_t v2 = *v1;
  *(void *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](specialized closure #2 in withCancellableContinuation<A>(body:), 0, 0);
  }
  else
  {
    unint64_t v3 = *(_OWORD **)(v2 + 32);
    swift_task_dealloc();
    *unint64_t v3 = *(_OWORD *)(v2 + 16);
    uint64_t v4 = *(uint64_t (**)(void))(v2 + 8);
    return v4();
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t one-time initialization function for lastSeenFlowPluginServiceClient()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<SharedFlowPluginServiceClient?, os_unfair_lock_s>);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = 0;
  static ConversationHandlerLocator.lastSeenFlowPluginServiceClient = result;
  return result;
}

uint64_t *ConversationHandlerLocator.lastSeenFlowPluginServiceClient.unsafeMutableAddressor()
{
  if (one-time initialization token for lastSeenFlowPluginServiceClient != -1) {
    swift_once();
  }
  return &static ConversationHandlerLocator.lastSeenFlowPluginServiceClient;
}

uint64_t static ConversationHandlerLocator.lastSeenFlowPluginServiceClient.getter()
{
  if (one-time initialization token for lastSeenFlowPluginServiceClient != -1) {
    swift_once();
  }

  return swift_retain();
}

void *ConversationHandlerLocator.__allocating_init(pluginCatalogTask:flowExtensionDiscoverer:sharedFlowPluginServiceClient:onConnectionInterrupted:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = (void *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  result[6] = a5;
  return result;
}

void *ConversationHandlerLocator.init(pluginCatalogTask:flowExtensionDiscoverer:sharedFlowPluginServiceClient:onConnectionInterrupted:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a1;
  v5[3] = a2;
  v5[4] = a3;
  v5[5] = a4;
  v5[6] = a5;
  return v5;
}

void *ConversationHandlerLocator.__allocating_init(onConnectionInterrupted:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v95 = (char *)v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OSSignpostError();
  uint64_t v88 = *(void *)(v7 - 8);
  uint64_t v89 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v87 = (char *)v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v93 = *(void *)(v9 - 8);
  int v94 = (void *)v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v92 = (char *)v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for OSSignpostID();
  uint64_t v11 = *(void *)(v100 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v100);
  id v91 = (char *)v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v86 - v15;
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)v86 - v17;
  type metadata accessor for SharedFlowPluginServiceClient();
  uint64_t v19 = (void *)swift_allocObject();
  uint64_t v97 = a1;
  uint64_t v20 = specialized SharedFlowPluginServiceClient.init(connectionProvider:onConnectionInterrupted:)(a1, a2, v19);
  uint64_t v21 = one-time initialization token for executor;
  uint64_t v98 = a2;
  swift_retain();
  if (v21 != -1) {
    swift_once();
  }
  uint64_t v96 = v2;
  uint64_t v22 = type metadata accessor for OSSignposter();
  uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Signposter.executor);
  static OSSignpostID.exclusive.getter();
  uint64_t v90 = v23;
  uint64_t v24 = OSSignposter.logHandle.getter();
  os_signpost_type_t v25 = static os_signpost_type_t.begin.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v99 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v26 = v100;
    v99(v16, v18, v100);
    uint64_t v27 = v20;
    objc_super v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)objc_super v28 = 0;
    os_signpost_id_t v29 = OSSignpostID.rawValue.getter();
    os_signpost_type_t v30 = v25;
    uint64_t v31 = v11;
    _os_signpost_emit_with_name_impl(&dword_1B9C64000, v24, v30, v29, "LoadPluginCatalog", "", v28, 2u);
    uint64_t v32 = v28;
    uint64_t v20 = v27;
    MEMORY[0x1BA9E48C0](v32, -1, -1);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v26);
    uint64_t v33 = v99;
  }
  else
  {

    uint64_t v31 = v11;
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v26 = v100;
  }
  uint64_t v99 = v33;
  v33(v16, v18, v26);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  uint64_t v34 = OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v37 = *(void (**)(char *, uint64_t))(v31 + 8);
  uint64_t v36 = v31 + 8;
  uint64_t v35 = v37;
  v37(v18, v26);
  uint64_t v38 = (uint64_t)v92;
  static ConversationHandlerLocator.conversationHandlerCacheURL.getter();
  uint64_t v39 = specialized static CachedPluginCatalog.load(cacheUrl:sharedFlowPluginServiceClient:ignoreOSVersion:)(v38, (uint64_t)v20, 0);
  uint64_t v41 = v40;
  (*(void (**)(uint64_t, void *))(v93 + 8))(v38, v94);
  if (v39)
  {
    uint64_t v92 = v41;
    uint64_t v93 = v39;
    uint64_t v42 = v16;
    int v94 = v20;
    uint64_t v43 = OSSignposter.logHandle.getter();
    unint64_t v44 = v91;
    OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v45 = static os_signpost_type_t.end.getter();
    char v46 = OS_os_log.signpostsEnabled.getter();
    v86[1] = v34;
    if (v46)
    {
      swift_retain();
      uint64_t v47 = v87;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v49 = v88;
      uint64_t v48 = v89;
      int v50 = (*(uint64_t (**)(char *, uint64_t))(v88 + 88))(v47, v89);
      int v51 = *MEMORY[0x1E4FBD340];
      v86[0] = v36;
      if (v50 == v51)
      {
        uint64_t v52 = "[Error] Interval already ended";
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v49 + 8))(v47, v48);
        uint64_t v52 = "";
      }
      uint64_t v66 = v91;
      uint64_t v67 = v100;
      v99(v42, v91, v100);
      int64_t v68 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v68 = 0;
      os_signpost_id_t v69 = OSSignpostID.rawValue.getter();
      uint64_t v70 = v52;
      uint64_t v26 = v67;
      _os_signpost_emit_with_name_impl(&dword_1B9C64000, v43, v45, v69, "LoadPluginCatalog", v70, v68, 2u);
      MEMORY[0x1BA9E48C0](v68, -1, -1);

      v35(v66, v67);
    }
    else
    {

      uint64_t v42 = v44;
    }
    uint64_t v72 = (uint64_t)v95;
    uint64_t v71 = v96;
    v35(v42, v26);
    uint64_t v73 = v93;
    uint64_t v20 = v94;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v74 = type metadata accessor for Logger();
    __swift_project_value_buffer(v74, (uint64_t)static Logger.executor);
    uint64_t v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v77 = 0;
      _os_log_impl(&dword_1B9C64000, v75, v76, "ConversationHandlerLocator: Found plugin catalog from cache", v77, 2u);
      MEMORY[0x1BA9E48C0](v77, -1, -1);
    }

    uint64_t v78 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56))(v72, 1, 1, v78);
    uint64_t v79 = one-time initialization token for shared;
    swift_retain();
    if (v79 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v80 = static MessageBusActor.shared;
    uint64_t v81 = lazy protocol witness table accessor for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
    os_log_type_t v82 = (void *)swift_allocObject();
    v82[2] = v80;
    v82[3] = v81;
    v82[4] = v20;
    v82[5] = v73;
    v82[6] = v92;
    v82[7] = v71;
    swift_retain();
    uint64_t v65 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime25PluginLookupByIntentTopic_p_Tgm5(v72, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationHandlerLocator.init(onConnectionInterrupted:), (uint64_t)v82);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v53 = type metadata accessor for Logger();
    __swift_project_value_buffer(v53, (uint64_t)static Logger.executor);
    unint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.debug.getter();
    BOOL v56 = os_log_type_enabled(v54, v55);
    uint64_t v57 = (uint64_t)v95;
    uint64_t v58 = v96;
    if (v56)
    {
      unint64_t v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v59 = 0;
      _os_log_impl(&dword_1B9C64000, v54, v55, "ConversationHandlerLocator: No plugin catalog cache found, will construct a new one", v59, 2u);
      MEMORY[0x1BA9E48C0](v59, -1, -1);
    }

    uint64_t v60 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v57, 1, 1, v60);
    uint64_t v61 = one-time initialization token for shared;
    swift_retain();
    swift_retain();
    if (v61 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v62 = static MessageBusActor.shared;
    uint64_t v63 = lazy protocol witness table accessor for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
    uint64_t v64 = (void *)swift_allocObject();
    v64[2] = v62;
    v64[3] = v63;
    v64[4] = v34;
    v64[5] = v20;
    uint64_t v64[6] = v58;
    swift_retain();
    uint64_t v65 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC14SiriKitRuntime25PluginLookupByIntentTopic_p_Tgm5(v57, (uint64_t)&async function pointer to partial apply for closure #2 in ConversationHandlerLocator.init(onConnectionInterrupted:), (uint64_t)v64);
  }
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v83 = static FlowExtensionDiscoverer.shared;
  swift_retain();
  swift_release();
  uint64_t result = (void *)swift_allocObject();
  result[2] = v65;
  result[3] = v83;
  uint64_t v85 = v97;
  result[4] = v20;
  result[5] = v85;
  result[6] = v98;
  return result;
}

uint64_t static ConversationHandlerLocator.conversationHandlerCacheURL.getter()
{
  v11[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  unint64_t v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v4 = objc_msgSend(self, sel_defaultManager);
  v11[0] = 0;
  id v5 = objc_msgSend(v4, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 13, 1, 0, 0, v11);

  id v6 = v11[0];
  if (v5)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    id v7 = v6;

    URL.appendingPathComponent(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  else
  {
    id v9 = v11[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    uint64_t result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD00000000000001ELL, 0x80000001BA0657E0, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/ConversationHandler/ConversationHandlerLocator.swift", 121, 2, 99);
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in ConversationHandlerLocator.init(onConnectionInterrupted:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[7] = a5;
  v6[8] = a6;
  v6[5] = a1;
  v6[6] = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v7 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ConversationHandlerLocator.init(onConnectionInterrupted:), v7, 0);
}

uint64_t closure #1 in ConversationHandlerLocator.init(onConnectionInterrupted:)()
{
  if (one-time initialization token for lastSeenFlowPluginServiceClient != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)(static ConversationHandlerLocator.lastSeenFlowPluginServiceClient + 16);
  uint64_t v2 = (os_unfair_lock_s *)(static ConversationHandlerLocator.lastSeenFlowPluginServiceClient + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(static ConversationHandlerLocator.lastSeenFlowPluginServiceClient + 24));
  partial apply for closure #1 in closure #1 in ConversationHandlerLocator.init(onConnectionInterrupted:)(v1);
  uint64_t v4 = v0[7];
  uint64_t v3 = v0[8];
  id v5 = (void *)v0[5];
  os_unfair_lock_unlock(v2);
  v5[3] = &type metadata for CachedPluginCatalog;
  v5[4] = &protocol witness table for CachedPluginCatalog;
  void *v5 = v4;
  v5[1] = v3;
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v7();
}

uint64_t closure #2 in ConversationHandlerLocator.init(onConnectionInterrupted:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[32] = a5;
  v6[33] = a6;
  v6[30] = a1;
  v6[31] = a4;
  uint64_t v7 = type metadata accessor for OSSignpostError();
  v6[34] = v7;
  v6[35] = *(void *)(v7 - 8);
  v6[36] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OSSignpostID();
  v6[37] = v8;
  v6[38] = *(void *)(v8 - 8);
  v6[39] = swift_task_alloc();
  v6[40] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v6[41] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for URL();
  v6[42] = v9;
  v6[43] = *(void *)(v9 - 8);
  v6[44] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v10 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #2 in ConversationHandlerLocator.init(onConnectionInterrupted:), v10, 0);
}

uint64_t closure #2 in ConversationHandlerLocator.init(onConnectionInterrupted:)()
{
  if (one-time initialization token for lastSeenFlowPluginServiceClient != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)(static ConversationHandlerLocator.lastSeenFlowPluginServiceClient + 16);
  uint64_t v2 = (os_unfair_lock_s *)(static ConversationHandlerLocator.lastSeenFlowPluginServiceClient + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(static ConversationHandlerLocator.lastSeenFlowPluginServiceClient + 24));
  partial apply for closure #1 in closure #1 in ConversationHandlerLocator.init(onConnectionInterrupted:)(v1);
  os_unfair_lock_unlock(v2);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v3 = *(void *)(v0 + 352);
  uint64_t v6 = *(void *)(v0 + 328);
  uint64_t v5 = *(void *)(v0 + 336);
  uint64_t v30 = *(void *)(v0 + 256);
  uint64_t v31 = *(uint64_t **)(v0 + 240);
  id v7 = (id)MEMORY[0x1BA9E3F70]();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(fileURLWithPath:isDirectory:)();
  swift_bridgeObjectRelease();
  uint64_t v8 = MEMORY[0x1E4FA5028];
  *(void *)(v0 + 80) = v5;
  *(void *)(v0 + 88) = v8;
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 56));
  URL.appendingPathComponent(_:isDirectory:)();
  *(void *)(v0 + 120) = v5;
  *(void *)(v0 + 128) = v8;
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v0 + 96));
  URL.appendingPathComponent(_:isDirectory:)();
  <+> infix(_:_:)();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  outlined init with copy of ReferenceResolutionClientProtocol(v0 + 16, v0 + 136);
  uint64_t v9 = type metadata accessor for FlowPluginPackageFinder();
  uint64_t v10 = swift_allocObject();
  outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 136), v10 + 16);
  *(void *)(v10 + 56) = v30;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PluginCapabilityCatalog<RemoteFlowPluginPackage>);
  *(void *)(v0 + 200) = v9;
  *(void *)(v0 + 208) = lazy protocol witness table accessor for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler(&lazy protocol witness table cache variable for type FlowPluginPackageFinder and conformance FlowPluginPackageFinder, (void (*)(uint64_t))type metadata accessor for FlowPluginPackageFinder);
  *(void *)(v0 + 176) = v10;
  swift_retain();
  swift_retain();
  static ConversationHandlerLocator.conversationHandlerCacheURL.getter();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v6, 0, 1, v5);
  uint64_t v12 = static PluginCapabilityCatalog.load<A>(finder:cache:)();
  outlined destroy of ReferenceResolutionClientProtocol?(v6, &demangling cache variable for type metadata for URL?);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 176);
  v31[3] = v11;
  v31[4] = (uint64_t)&protocol witness table for <> PluginCapabilityCatalog<A>;
  swift_release();
  *uint64_t v31 = v12;
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v13, (uint64_t)static Signposter.executor);
  uint64_t v14 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  os_signpost_type_t v15 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    uint64_t v17 = *(void *)(v0 + 280);
    uint64_t v16 = *(void *)(v0 + 288);
    uint64_t v18 = *(void *)(v0 + 272);
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v17 + 88))(v16, v18) == *MEMORY[0x1E4FBD340])
    {
      uint64_t v19 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 280) + 8))(*(void *)(v0 + 288), *(void *)(v0 + 272));
      uint64_t v19 = "";
    }
    uint64_t v20 = (uint64_t *)(v0 + 312);
    uint64_t v23 = *(void *)(v0 + 320);
    uint64_t v24 = *(void *)(v0 + 296);
    uint64_t v25 = *(void *)(v0 + 304);
    (*(void (**)(void, uint64_t, uint64_t))(v25 + 16))(*(void *)(v0 + 312), v23, v24);
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    os_signpost_id_t v27 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1B9C64000, v14, v15, v27, "LoadPluginCatalog", v19, v26, 2u);
    MEMORY[0x1BA9E48C0](v26, -1, -1);

    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v22(v23, v24);
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v0 + 320);
    uint64_t v21 = *(void *)(v0 + 304);

    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  }
  v22(*v20, *(void *)(v0 + 296));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  objc_super v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

unint64_t specialized ImmutableSimpleOrderedDictionary.items()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, Parse));
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v49 = (uint64_t)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for Parse();
  uint64_t v6 = *(void *)(v48 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v48);
  uint64_t v42 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v47 = (char *)v32 - v9;
  uint64_t v45 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  uint64_t v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a2 + 16);
  if (!v13) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v16 = *(void (**)(void))(v10 + 16);
  uint64_t v14 = v10 + 16;
  os_signpost_type_t v15 = v16;
  uint64_t v17 = a2 + ((*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64));
  uint64_t v18 = *(void *)(v14 + 56);
  uint64_t v36 = v6 + 16;
  uint64_t v33 = (void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v34 = v6 + 32;
  int v50 = (void (**)(char *, uint64_t))(v14 - 8);
  v32[1] = a2;
  swift_bridgeObjectRetain();
  unint64_t v51 = MEMORY[0x1E4FBC860];
  uint64_t v19 = v45;
  uint64_t v40 = v14;
  uint64_t v41 = v6;
  uint64_t v38 = a1;
  uint64_t v39 = v16;
  uint64_t v37 = v18;
  uint64_t v35 = v12;
  uint64_t v20 = v47;
  do
  {
    ((void (*)(char *, uint64_t, uint64_t))v15)(v12, v17, v19);
    if (*(void *)(a1 + 16))
    {
      unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12);
      if (v23)
      {
        unint64_t v24 = *(void *)(a1 + 56) + *(void *)(v6 + 72) * v22;
        char v46 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
        uint64_t v25 = v42;
        uint64_t v26 = v48;
        v46(v42, v24, v48);
        os_signpost_id_t v27 = v25;
        uint64_t v19 = v45;
        (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v20, v27, v26);
        objc_super v28 = (char *)(v49 + *(int *)(v44 + 48));
        v15();
        v46(v28, (unint64_t)v20, v26);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v51 + 16) + 1, 1, v51);
        }
        unint64_t v30 = *(void *)(v51 + 16);
        unint64_t v29 = *(void *)(v51 + 24);
        a1 = v38;
        os_signpost_type_t v15 = v39;
        uint64_t v18 = v37;
        uint64_t v12 = v35;
        if (v30 >= v29 >> 1) {
          unint64_t v51 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, v51);
        }
        unint64_t v21 = v51;
        *(void *)(v51 + 16) = v30 + 1;
        outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v49, v21+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(void *)(v43 + 72) * v30, &demangling cache variable for type metadata for (UUID, Parse));
        (*v33)(v47, v48);
        uint64_t v6 = v41;
      }
    }
    (*v50)(v12, v19);
    v17 += v18;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v51;
}

uint64_t closure #4 in ConversationHandlerLocator.allHandlers(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Input();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v12[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol(a1, (uint64_t)v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  return ConversationHandlerLocator.ScoredHandler.init(handler:input:)(v12, v9, a3);
}

uint64_t closure #5 in ConversationHandlerLocator.allHandlers(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a3
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (uuid: UUID, scoredHandler: ConversationHandlerLocator.ScoredHandler))
              + 48);
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a3, a2, v7);
  return outlined init with copy of RemoteConversationTurnData(a1, v6, (uint64_t (*)(void))type metadata accessor for ConversationHandlerLocator.ScoredHandler);
}

uint64_t ConversationHandlerLocator.handler(id:)(uint64_t a1)
{
  *(void *)(*(void *)v1 + 216) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](ConversationHandlerLocator.handler(id:), 0, 0);
}

uint64_t ConversationHandlerLocator.sendStartTurnHint(turnData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v5 = *(void *)(type metadata accessor for RemoteConversationTurnData(0) - 8);
  v4[9] = v5;
  v4[10] = *(void *)(v5 + 64);
  v4[11] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  v4[12] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](ConversationHandlerLocator.sendStartTurnHint(turnData:bridge:), v6, 0);
}

uint64_t ConversationHandlerLocator.sendStartTurnHint(turnData:bridge:)()
{
  uint64_t v1 = static MessageBusActor.shared;
  v0[13] = *(void *)(v0[8] + 32);
  v0[14] = v1;
  swift_retain();
  return MEMORY[0x1F4188298](ConversationHandlerLocator.sendStartTurnHint(turnData:bridge:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  long long v9;
  uint64_t v10;

  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v9 = *(_OWORD *)(v0 + 48);
  outlined init with copy of RemoteConversationTurnData(*(void *)(v0 + 40), v2, type metadata accessor for RemoteConversationTurnData);
  uint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v1 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 120) = v6;
  outlined init with take of ConversationHandlerLocator.ScoredHandler(v2, v6 + v4, type metadata accessor for RemoteConversationTurnData);
  *(_OWORD *)(v6 + v5) = v9;
  swift_unknownObjectRetain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v7;
  *uint64_t v7 = v0;
  v7[1] = ConversationHandlerLocator.sendStartTurnHint(turnData:bridge:);
  return specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in SharedFlowPluginServiceClient.startTurn(turnData:bridge:), v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 112);
    uint64_t v4 = ConversationHandlerLocator.sendStartTurnHint(turnData:bridge:);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 112);
    swift_release();
    uint64_t v4 = ConversationHandlerLocator.sendStartTurnHint(turnData:bridge:);
    uint64_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 96);
  swift_release();
  return MEMORY[0x1F4188298](ConversationHandlerLocator.sendStartTurnHint(turnData:bridge:), v1, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 96);
  swift_release();
  swift_release();
  return MEMORY[0x1F4188298](ConversationHandlerLocator.sendStartTurnHint(turnData:bridge:), v1, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t ConversationHandlerLocator.ScoredHandler.affinity.getter()
{
  return *(void *)v0;
}

uint64_t ConversationHandlerLocator.ScoredHandler.handler.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 8, a1);
}

uint64_t ConversationHandlerLocator.ScoredHandler.input.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for ConversationHandlerLocator.ScoredHandler() + 24);
  uint64_t v4 = type metadata accessor for Input();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t ConversationHandlerLocator.deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t ConversationHandlerLocator.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

void thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t specialized closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v13 - 8);
  os_signpost_type_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = a2;
  v17[5] = a3;
  v17[6] = a1;
  v17[7] = a4;
  v17[8] = a5;
  swift_retain();
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v15, a7, (uint64_t)v17);
  return swift_release();
}

uint64_t specialized closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[9] = a7;
  v8[10] = a8;
  v8[7] = a5;
  v8[8] = a6;
  v8[6] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  v8[11] = swift_task_alloc();
  return MEMORY[0x1F4188298](specialized closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:), 0, 0);
}

{
  void *v8;
  uint64_t v10;

  v8[11] = a7;
  v8[12] = a8;
  v8[9] = a5;
  v8[10] = a6;
  v8[8] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
  v8[13] = swift_task_alloc();
  return MEMORY[0x1F4188298](specialized closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:), 0, 0);
}

uint64_t specialized closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)()
{
  uint64_t v14 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[12] = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[6];
    uint64_t v11 = v0[7];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v13 = v6;
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v8 = *(void *)(v4 + 16);
    unint64_t v7 = *(void *)(v4 + 24);
    swift_bridgeObjectRetain();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v5 + 12) = 2048;
    v0[5] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v2, v3, "%s: task %lu begin", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v6, -1, -1);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }
  else
  {
    swift_release();
  }

  uint64_t v12 = (uint64_t (*)(void))(v0[9] + *(int *)v0[9]);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[13] = v9;
  *uint64_t v9 = v0;
  v9[1] = specialized closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:);
  return v12();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:);
  }
  else {
    uint64_t v2 = specialized closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v13;
  void *v14;
  uint64_t v15;

  uint64_t v14 = v0;
  uint64_t v1 = v0[11];
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  specialized ManagedContinuation.updateState(continuation:result:)(v1, 0, 0);
  outlined destroy of ReferenceResolutionClientProtocol?(v1, &demangling cache variable for type metadata for CheckedContinuation<(), Error>?);
  swift_retain();
  os_log_type_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = v0[6];
    uint64_t v6 = v0[7];
    unint64_t v7 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v13 = v8;
    *(_DWORD *)unint64_t v7 = 136315394;
    uint64_t v9 = *(void *)(v5 + 16);
    uint64_t v10 = *(void *)(v5 + 24);
    swift_bridgeObjectRetain();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v7 + 12) = 2048;
    v0[3] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v3, v4, "%s: task %lu succeeded", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }
  else
  {
    swift_release();
  }

  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String *v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = (void *)v0[14];
  uint64_t v2 = v0[11];
  os_log_type_t v3 = v0[12];
  uint64_t v4 = v0[7];
  uint64_t v5 = (Swift::String *)v0[6];
  swift_retain();
  uint64_t v6 = v1;
  specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/InterruptibleTaskManager.swift", 45, 2, (uint64_t)"perform(_:)", 11, 2, v3, v5, v4, v1);

  swift_release();
  unint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v2, 1, 1, v7);
  uint64_t v8 = v1;
  specialized ManagedContinuation.updateState(continuation:result:)(v2, (char *)v1, 1u);
  outlined destroy of ReferenceResolutionClientProtocol?(v2, &demangling cache variable for type metadata for CheckedContinuation<(), Error>?);

  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11;
  uint64_t (*v12)(void *);
  uint64_t v13;
  void *v14;
  uint64_t v15;

  uint64_t v14 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[14] = __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[8];
    uint64_t v11 = v0[9];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v13 = v6;
    *(_DWORD *)uint64_t v5 = 136315394;
    uint64_t v8 = *(void *)(v4 + 16);
    unint64_t v7 = *(void *)(v4 + 24);
    swift_bridgeObjectRetain();
    v0[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v5 + 12) = 2048;
    v0[7] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v2, v3, "%s: task %lu begin", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v6, -1, -1);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }
  else
  {
    swift_release();
  }

  uint64_t v12 = (uint64_t (*)(void *))(v0[11] + *(int *)v0[11]);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[15] = v9;
  *uint64_t v9 = v0;
  v9[1] = specialized closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:);
  return v12(v0 + 2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 128) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:);
  }
  else {
    uint64_t v2 = specialized closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  void *v16;
  uint64_t v17;

  uint64_t v16 = v0;
  uint64_t v1 = v0[13];
  uint64_t v2 = (void *)v0[2];
  os_log_type_t v3 = v0[3];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v1, 1, 1, v4);
  swift_unknownObjectRetain();
  specialized ManagedContinuation.updateState(continuation:result:)(v1, v2, v3, 0);
  outlined destroy of ReferenceResolutionClientProtocol?(v1, &demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_retain();
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    unint64_t v7 = v0[8];
    uint64_t v8 = v0[9];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v15 = v10;
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v11 = *(void *)(v7 + 16);
    uint64_t v12 = *(void *)(v7 + 24);
    swift_bridgeObjectRetain();
    v0[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v9 + 12) = 2048;
    v0[5] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v5, v6, "%s: task %lu succeeded", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v10, -1, -1);
    MEMORY[0x1BA9E48C0](v9, -1, -1);
  }
  else
  {
    swift_release();
  }

  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String *v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v1 = (void *)v0[16];
  uint64_t v2 = v0[13];
  os_log_type_t v3 = v0[14];
  uint64_t v4 = v0[9];
  uint64_t v5 = (Swift::String *)v0[8];
  swift_retain();
  uint64_t v6 = v1;
  specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/InterruptibleTaskManager.swift", 45, 2, (uint64_t)"perform(_:)", 11, 2, v3, v5, v4, v1);

  swift_release();
  unint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v2, 1, 1, v7);
  uint64_t v8 = v1;
  specialized ManagedContinuation.updateState(continuation:result:)(v2, v1, 0, 1u);
  outlined destroy of ReferenceResolutionClientProtocol?(v2, &demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Error>?);

  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t specialized closure #2 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  swift_retain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v13 = v8;
    *(_DWORD *)unint64_t v7 = 136315138;
    uint64_t v9 = *(void *)(a1 + 16);
    unint64_t v10 = *(void *)(a1 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v5, v6, "%s: task cancelled", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }
  else
  {

    swift_release();
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for InterruptibleTaskResult<()>);
  return MEMORY[0x1BA9E3300](a2, v11, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
}

{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  swift_retain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v13 = v8;
    *(_DWORD *)unint64_t v7 = 136315138;
    uint64_t v9 = *(void *)(a1 + 16);
    unint64_t v10 = *(void *)(a1 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v5, v6, "%s: task cancelled", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }
  else
  {

    swift_release();
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InterruptibleTaskResult<RemoteConversation?>);
  return MEMORY[0x1BA9E3300](a2, v11, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
}

uint64_t specialized closure #1 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)a2 + *a2);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v8;
  *uint64_t v8 = v5;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v10(a1, a5);
}

{
  uint64_t v5;
  void *v7;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;

  *(void *)(v5 + 32) = a1;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)a2 + *a2);
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 40) = v7;
  *unint64_t v7 = v5;
  v7[1] = specialized closure #1 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
  return v9(v5 + 16, a5);
}

uint64_t specialized closure #5 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)a2 + *a2);
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v7;
  *unint64_t v7 = v4;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v9(a1, a4);
}

{
  uint64_t v4;
  void *v6;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;

  *(void *)(v4 + 32) = a1;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)a2 + *a2);
  os_log_type_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 40) = v6;
  *os_log_type_t v6 = v4;
  v6[1] = specialized closure #5 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
  return v8(v4 + 16, a4);
}

void *specialized SharedFlowPluginServiceClient.init(connectionProvider:onConnectionInterrupted:)(uint64_t a1, uint64_t a2, void *a3)
{
  a3[10] = &type metadata for SharedFlowPluginServiceXPCConnectionProvider;
  a3[11] = &protocol witness table for SharedFlowPluginServiceXPCConnectionProvider;
  type metadata accessor for SharedFlowPluginServiceClient.LoadedConversationTracker();
  a3[2] = 0;
  a3[3] = 0;
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = MEMORY[0x1E4FBC868];
  *(void *)(v6 + 16) = MEMORY[0x1E4FBC868];
  a3[4] = v6;
  a3[5] = 0;
  type metadata accessor for InterruptibleTaskManager();
  uint64_t v8 = (void *)swift_allocObject();
  v8[4] = v7;
  v8[5] = 0;
  long long v8[2] = 0xD00000000000001DLL;
  void v8[3] = 0x80000001BA065A50;
  a3[6] = v8;
  a3[12] = a1;
  a3[13] = a2;
  return a3;
}

uint64_t specialized closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 16) = a1;
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v12;
  *uint64_t v12 = v7;
  v12[1] = specialized closure #1 in InterruptibleTaskManager.perform<A>(_:);
  return specialized closure #1 in InterruptibleTaskManager.perform<A>(_:)(a4, a5, a6, a7);
}

{
  uint64_t v7;
  void *v12;
  uint64_t v14;

  *(void *)(v7 + 16) = a1;
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v12;
  *uint64_t v12 = v7;
  v12[1] = specialized closure #1 in InterruptibleTaskManager.perform<A>(_:);
  return specialized closure #1 in InterruptibleTaskManager.perform<A>(_:)(a4, a5, a6, a7);
}

uint64_t specialized closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, char a2)
{
  uint64_t v5 = *(void *)(*v2 + 16);
  uint64_t v8 = *v2;
  swift_task_dealloc();
  *(void *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 8) = a2;
  uint64_t v6 = *(uint64_t (**)(void))(v8 + 8);
  return v6();
}

uint64_t specialized closure #1 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)()
{
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized closure #1 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
  }
  else {
    uint64_t v2 = specialized closure #1 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

uint64_t specialized closure #5 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)()
{
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = specialized closure #5 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
  }
  else {
    uint64_t v2 = specialized closure #5 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;

  *(_OWORD *)*(void *)(v0 + 32) = *(_OWORD *)(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = *(void *)(*v3 + 16);
  uint64_t v10 = *v3;
  swift_task_dealloc();
  *(void *)uint64_t v7 = a1;
  *(void *)(v7 + 8) = a2;
  *(unsigned char *)(v7 + 16) = a3;
  uint64_t v8 = *(uint64_t (**)(void))(v10 + 8);
  return v8();
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v2 = type metadata accessor for AppShortcutGeneralizedInvocation();
  os_log_type_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  Swift::Int v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler(&lazy protocol witness table cache variable for type AppShortcutGeneralizedInvocation and conformance AppShortcutGeneralizedInvocation, MEMORY[0x1E4FA1E98]);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v17 = result;
  if (v9)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v15 = *(void *)(v11 + 56);
    do
    {
      v12(v6, v14, v2);
      specialized Set._Variant.insert(_:)((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v11 - 8))(v8, v2);
      v14 += v15;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  void (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v2 = type metadata accessor for IntentTopic();
  os_log_type_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  Swift::Int v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  lazy protocol witness table accessor for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler(&lazy protocol witness table cache variable for type IntentTopic and conformance IntentTopic, MEMORY[0x1E4FA1AB0]);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v17 = result;
  if (v9)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v12 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v11 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 64));
    uint64_t v15 = *(void *)(v11 + 56);
    do
    {
      v12(v6, v14, v2);
      specialized Set._Variant.insert(_:)((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v11 - 8))(v8, v2);
      v14 += v15;
      --v9;
    }
    while (v9);
    return v17;
  }
  return result;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for LNSystemProtocol();
  lazy protocol witness table accessor for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler((unint64_t *)&lazy protocol witness table cache variable for type LNSystemProtocol and conformance NSObject, (void (*)(uint64_t))type metadata accessor for LNSystemProtocol);
  uint64_t result = Set.init(minimumCapacity:)();
  uint64_t v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v4) {
      return v10;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      return v10;
    }
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        Swift::Int v6 = (void *)MEMORY[0x1BA9E3990](i, a1);
        specialized Set._Variant.insert(_:)(&v9, v6);
      }
    }
    else
    {
      Swift::Int v7 = (void **)(a1 + 32);
      do
      {
        uint64_t v8 = *v7++;
        specialized Set._Variant.insert(_:)(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t partial apply for closure #2 in ConversationHandlerLocator.allHandlers(for:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  Swift::Int v5 = *(void **)(v2 + 16);
  uint64_t v6 = v5[3];
  uint64_t v7 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v6);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 8))(a1, v6, v7);
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #4 in ConversationHandlerLocator.allHandlers(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #4 in ConversationHandlerLocator.allHandlers(for:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t partial apply for closure #5 in ConversationHandlerLocator.allHandlers(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #5 in ConversationHandlerLocator.allHandlers(for:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1B9E1234C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #2 in ConversationHandlerLocator.init(onConnectionInterrupted:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  id v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *id v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #2 in ConversationHandlerLocator.init(onConnectionInterrupted:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1B9E1245C()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #1 in ConversationHandlerLocator.init(onConnectionInterrupted:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  id v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *id v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationHandlerLocator.init(onConnectionInterrupted:)(a1, v4, v5, v6, v7, v8);
}

unint64_t lazy protocol witness table accessor for type FlowExtensionConversationHandler and conformance FlowExtensionConversationHandler()
{
  unint64_t result = lazy protocol witness table cache variable for type FlowExtensionConversationHandler and conformance FlowExtensionConversationHandler;
  if (!lazy protocol witness table cache variable for type FlowExtensionConversationHandler and conformance FlowExtensionConversationHandler)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlowExtensionConversationHandler and conformance FlowExtensionConversationHandler);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FlowExtensionConversationHandler and conformance FlowExtensionConversationHandler;
  if (!lazy protocol witness table cache variable for type FlowExtensionConversationHandler and conformance FlowExtensionConversationHandler)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlowExtensionConversationHandler and conformance FlowExtensionConversationHandler);
  }
  return result;
}

uint64_t sub_1B9E125D4()
{
  uint64_t v1 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v13 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + v1[6];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }

  uint64_t v9 = v4 + v1[8];
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_release();

  uint64_t v10 = (uint64_t *)(v4 + v1[12]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    outlined consume of Data._Representation(*v10, v11);
  }
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, ((v13 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t type metadata accessor for ConversationHandlerLocator()
{
  return self;
}

uint64_t method lookup function for ConversationHandlerLocator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationHandlerLocator);
}

uint64_t dispatch thunk of ConversationHandlerLocator.__allocating_init(pluginCatalogTask:flowExtensionDiscoverer:sharedFlowPluginServiceClient:onConnectionInterrupted:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

void *initializeBufferWithCopyOfBuffer for ConversationHandlerLocator.ScoredHandler(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    long long v7 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v7;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 8, (uint64_t)(a2 + 1));
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = (char *)v4 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = type metadata accessor for Input();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return v4;
}

void *assignWithCopy for ConversationHandlerLocator.ScoredHandler(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  uint64_t v6 = *(int *)(a3 + 24);
  long long v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Input();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for ConversationHandlerLocator.ScoredHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for ConversationHandlerLocator.ScoredHandler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  __swift_destroy_boxed_opaque_existential_1Tm(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Input();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_1B9E12AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Input();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1B9E12B94(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 32) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Input();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for ConversationHandlerLocator.ScoredHandler()
{
  uint64_t result = type metadata accessor for Input();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SharedFlowPluginServiceConnectionError and conformance SharedFlowPluginServiceConnectionError()
{
  unint64_t result = lazy protocol witness table cache variable for type SharedFlowPluginServiceConnectionError and conformance SharedFlowPluginServiceConnectionError;
  if (!lazy protocol witness table cache variable for type SharedFlowPluginServiceConnectionError and conformance SharedFlowPluginServiceConnectionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharedFlowPluginServiceConnectionError and conformance SharedFlowPluginServiceConnectionError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SharedFlowPluginServiceConnectionError and conformance SharedFlowPluginServiceConnectionError;
  if (!lazy protocol witness table cache variable for type SharedFlowPluginServiceConnectionError and conformance SharedFlowPluginServiceConnectionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharedFlowPluginServiceConnectionError and conformance SharedFlowPluginServiceConnectionError);
  }
  return result;
}

uint64_t sub_1B9E12D34()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #2 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)()
{
  return closure #2 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)();
}

uint64_t partial apply for closure #3 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)()
{
  return closure #3 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)();
}

void *outlined consume of SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection?(void *result)
{
  if (result)
  {

    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t partial apply for specialized closure #5 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)(uint64_t a1)
{
  unint64_t v4 = (int *)v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v8 = (uint64_t (*)(uint64_t, int *, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #5 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)
                                                                + async function pointer to specialized closure #5 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:));
  return v8(a1, v4, v5, v6);
}

{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;

  unint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v4 + *v4);
  uint64_t v7 = (void *)swift_task_alloc();
  v6[2] = v7;
  *uint64_t v7 = v6;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v9(a1, v5);
}

uint64_t partial apply for specialized closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in InterruptibleTaskManager.perform<A>(_:)
                                                                                              + async function pointer to specialized closure #1 in InterruptibleTaskManager.perform<A>(_:));
  return v11(a1, v4, v5, v6, v7, v9, v8);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in InterruptibleTaskManager.perform<A>(_:)
                                                                                              + async function pointer to specialized closure #1 in InterruptibleTaskManager.perform<A>(_:));
  return v11(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t partial apply for specialized closure #2 in InterruptibleTaskManager.perform<A>(_:)()
{
  return specialized closure #2 in InterruptibleTaskManager.perform<A>(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

{
  uint64_t v0;

  return specialized closure #2 in InterruptibleTaskManager.perform<A>(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t specialized closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[8] = a3;
  v4[9] = a4;
  v4[6] = a1;
  v4[7] = a2;
  uint64_t v5 = type metadata accessor for CancellationError();
  v4[10] = v5;
  v4[11] = *(void *)(v5 - 8);
  v4[12] = swift_task_alloc();
  v4[13] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  v4[14] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](specialized closure #1 in InterruptibleTaskManager.perform<A>(_:), v6, 0);
}

{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4[8] = a3;
  v4[9] = a4;
  v4[6] = a1;
  v4[7] = a2;
  uint64_t v5 = type metadata accessor for CancellationError();
  v4[10] = v5;
  v4[11] = *(void *)(v5 - 8);
  v4[12] = swift_task_alloc();
  v4[13] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  v4[14] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](specialized closure #1 in InterruptibleTaskManager.perform<A>(_:), v6, 0);
}

uint64_t specialized closure #1 in InterruptibleTaskManager.perform<A>(_:)()
{
  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v5 = (void *)swift_allocObject();
  v0[15] = v5;
  v5[2] = v3;
  v5[3] = v4;
  v5[4] = v2;
  v5[5] = v1;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized withCancellableContinuation<A>(body:)
                                                         + async function pointer to specialized withCancellableContinuation<A>(body:));
  swift_retain();
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[16] = v6;
  *uint64_t v6 = v0;
  v6[1] = specialized closure #1 in InterruptibleTaskManager.perform<A>(_:);
  return v8((uint64_t)v8, (uint64_t)partial apply for specialized closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:), (uint64_t)v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 112);
    uint64_t v4 = specialized closure #1 in InterruptibleTaskManager.perform<A>(_:);
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 112);
    swift_release();
    uint64_t v4 = specialized closure #1 in InterruptibleTaskManager.perform<A>(_:);
    uint64_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void, void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void, void))(v0 + 8);
  return v1(0, 0);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t);
  uint64_t v14;

  uint64_t v1 = *(void **)(v0 + 136);
  swift_release();
  swift_release();
  *(void *)(v0 + 40) = v1;
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v3 = swift_dynamicCast();
  uint64_t v4 = *(void **)(v0 + 136);
  if (v3)
  {
    uint64_t v6 = *(void *)(v0 + 96);
    uint64_t v5 = *(void *)(v0 + 104);
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 88);

    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
    v9(v6, v5, v7);
    lazy protocol witness table accessor for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler((unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, MEMORY[0x1E4FBCF50]);
    uint64_t v4 = (void *)swift_allocError();
    v9(v10, v6, v7);
    uint64_t v11 = 2;
  }
  else
  {
    uint64_t v11 = 1;
  }

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t))(v0 + 8);
  return v12(v4, v11);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;

  uint64_t v2 = v0[8];
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v5 = (void *)swift_allocObject();
  v0[15] = v5;
  v5[2] = v3;
  v5[3] = v4;
  v5[4] = v2;
  v5[5] = v1;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized withCancellableContinuation<A>(body:)
                                                + async function pointer to specialized withCancellableContinuation<A>(body:));
  swift_retain();
  swift_retain();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[16] = v6;
  *uint64_t v6 = v0;
  v6[1] = specialized closure #1 in InterruptibleTaskManager.perform<A>(_:);
  return v8((uint64_t)partial apply for specialized closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:), (uint64_t)v5);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, void);
  uint64_t v5;

  swift_release();
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[19];
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, void))v0[1];
  return v3(v2, v1, 0);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, void, uint64_t);
  uint64_t v14;

  uint64_t v1 = *(void **)(v0 + 136);
  swift_release();
  swift_release();
  *(void *)(v0 + 40) = v1;
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  uint64_t v3 = swift_dynamicCast();
  uint64_t v4 = *(void **)(v0 + 136);
  if (v3)
  {
    uint64_t v6 = *(void *)(v0 + 96);
    uint64_t v5 = *(void *)(v0 + 104);
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 88);

    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
    v9(v6, v5, v7);
    lazy protocol witness table accessor for type RemoteFlowPluginBundleConversationHandler and conformance RemoteFlowPluginBundleConversationHandler((unint64_t *)&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, MEMORY[0x1E4FBCF50]);
    uint64_t v4 = (void *)swift_allocError();
    v9(v10, v6, v7);
    uint64_t v11 = 2;
  }
  else
  {
    uint64_t v11 = 1;
  }

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void *, void, uint64_t))(v0 + 8);
  return v12(v4, 0, v11);
}

uint64_t specialized closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void **)v3;
  *(void *)(*(void *)v3 + 136) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = v6[14];
    uint64_t v8 = specialized closure #1 in InterruptibleTaskManager.perform<A>(_:);
  }
  else
  {
    uint64_t v9 = v6[14];
    swift_release();
    v6[18] = a2;
    v6[19] = a1;
    uint64_t v8 = specialized closure #1 in InterruptibleTaskManager.perform<A>(_:);
    uint64_t v7 = v9;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

uint64_t partial apply for specialized closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1)
{
  return specialized closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)&unk_1F137A718, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:));
}

{
  uint64_t *v1;

  return specialized closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)&unk_1F137A880, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:));
}

void partial apply for specialized closure #1 in withCancellableContinuation<A>(body:)()
{
}

{
  uint64_t v0;

  specialized closure #1 in withCancellableContinuation<A>(body:)(v0, &demangling cache variable for type metadata for CheckedContinuation<(), Error>?, &demangling cache variable for type metadata for CheckedContinuation<(), Error>, (void (*)(char *, void *, uint64_t))specialized ManagedContinuation.updateState(continuation:result:));
}

{
  uint64_t v0;

  specialized closure #1 in withCancellableContinuation<A>(body:)(v0, &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?, &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>, (void (*)(char *, void *, uint64_t))specialized ManagedContinuation.updateState(continuation:result:));
}

uint64_t partial apply for specialized closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #2 in withCancellableContinuation<A>(body:)
                                                                  + async function pointer to specialized closure #2 in withCancellableContinuation<A>(body:));
  return v8(a1, v4, v5, v6);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  long long v6;
  uint64_t v8;

  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = swift_task_alloc();
  uint64_t v6 = *(_OWORD *)(v1 + 16);
  *(void *)(v2 + 16) = v5;
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  *(void *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(void *)(v5 + 16) = a1;
  return MEMORY[0x1F4188298](specialized closure #2 in withCancellableContinuation<A>(body:), 0, 0);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #2 in withCancellableContinuation<A>(body:)
                                                                  + async function pointer to specialized closure #2 in withCancellableContinuation<A>(body:));
  return v8(a1, v4, v5, v6);
}

void partial apply for specialized closure #1 in closure #2 in withCancellableContinuation<A>(body:)(uint64_t a1)
{
  specialized closure #1 in closure #2 in withCancellableContinuation<A>(body:)(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24));
}

{
  uint64_t v1;

  specialized closure #1 in closure #2 in withCancellableContinuation<A>(body:)(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32), &demangling cache variable for type metadata for CheckedContinuation<(), Error>?, &demangling cache variable for type metadata for CheckedContinuation<(), Error>, (void (*)(char *, void *, uint64_t))specialized ManagedContinuation.updateState(continuation:result:));
}

{
  uint64_t v1;

  specialized closure #1 in closure #2 in withCancellableContinuation<A>(body:)(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32), &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>?, &demangling cache variable for type metadata for CheckedContinuation<SABaseCommand?, Error>, (void (*)(char *, void *, uint64_t))specialized ManagedContinuation.updateState(continuation:result:));
}

uint64_t partial apply for specialized closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return specialized closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

{
  void *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v13;

  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return specialized closure #1 in closure #1 in closure #1 in InterruptibleTaskManager.perform<A>(_:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t objectdestroy_30Tm()
{
  swift_release();
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t objectdestroy_36Tm()
{
  swift_release();

  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t objectdestroy_43Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t objectdestroy_47Tm()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t objectdestroy_52Tm()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t objectdestroy_61Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationHandlerLocator.init(onConnectionInterrupted:)(void *a1)
{
  return partial apply for closure #1 in closure #1 in ConversationHandlerLocator.init(onConnectionInterrupted:)(a1);
}

{
  uint64_t v1;

  swift_release();
  *a1 = v1;
  return swift_retain();
}

id ConversationHelperInput.speechData.getter()
{
  return *v0;
}

uint64_t ConversationHelperInput.turnData.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ConversationHelperInput(0);
  return outlined init with copy of RemoteConversationOrReformedInput(v1 + *(int *)(v3 + 20), a1, type metadata accessor for RemoteConversationTurnData);
}

uint64_t ConversationHelperInput.bridge.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ConversationHelperInput.init(speechData:turnData:bridge:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  uint64_t v9 = type metadata accessor for ConversationHelperInput(0);
  uint64_t result = outlined init with take of RemoteConversationOrReformedInput(a2, (uint64_t)a5 + *(int *)(v9 + 20), type metadata accessor for RemoteConversationTurnData);
  uint64_t v11 = (void *)((char *)a5 + *(int *)(v9 + 24));
  *uint64_t v11 = a3;
  v11[1] = a4;
  return result;
}

uint64_t ConversationHelper.__allocating_init(conversationHandlerLocator:preFlowBlockingWork:)(uint64_t a1, long long *a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  outlined init with take of ReferenceResolutionClientProtocol(a2, v4 + 24);
  return v4;
}

uint64_t ConversationHelper.init(conversationHandlerLocator:preFlowBlockingWork:)(uint64_t a1, long long *a2)
{
  *(void *)(v2 + 16) = a1;
  outlined init with take of ReferenceResolutionClientProtocol(a2, v2 + 24);
  return v2;
}

uint64_t ConversationHelper.deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);
  return v0;
}

uint64_t ConversationHelper.__deallocating_deinit()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 24);

  return swift_deallocClassInstance();
}

uint64_t RemoteConversationOrReformedInput.remoteConversationOrNil.getter()
{
  uint64_t v1 = type metadata accessor for RemoteConversationOrReformedInput(0);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of RemoteConversationOrReformedInput(v0, (uint64_t)v3, type metadata accessor for RemoteConversationOrReformedInput);
  if (swift_getEnumCaseMultiPayload() != 1) {
    return *(void *)v3;
  }
  outlined destroy of RemoteConversationOrReformedInput((uint64_t)v3, type metadata accessor for RemoteConversationOrReformedInput);
  return 0;
}

void **initializeBufferWithCopyOfBuffer for ConversationHelperInput(void **a1, void **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = (char *)*a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v17 = (void **)&v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (void **)((char *)a1 + v5);
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = *(uint64_t *)((char *)a2 + v5 + 8);
    *uint64_t v6 = *(void **)((char *)a2 + v5);
    v6[1] = v8;
    uint64_t v9 = *(uint64_t *)((char *)a2 + v5 + 24);
    v6[2] = *(void **)((char *)a2 + v5 + 16);
    v6[3] = v9;
    uint64_t v10 = (int *)type metadata accessor for RemoteConversationTurnData(0);
    uint64_t v11 = v10[6];
    __dst = (char *)v6 + v11;
    uint64_t v12 = &v7[v11];
    uint64_t v13 = type metadata accessor for UUID();
    uint64_t v37 = *(void *)(v13 - 8);
    uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
    uint64_t v15 = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v14(v12, 1, v13))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      memcpy(__dst, v12, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(__dst, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(__dst, 0, 1, v13);
    }
    uint64_t v18 = v10[7];
    uint64_t v19 = *(void **)&v7[v18];
    *(void *)((char *)v6 + v18) = v19;
    uint64_t v20 = v10[8];
    unint64_t v21 = (char *)v6 + v20;
    unint64_t v22 = &v7[v20];
    id v23 = v19;
    if (v14(v22, 1, v13))
    {
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      memcpy(v21, v22, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v21, v22, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v21, 0, 1, v13);
    }
    *(void *)((char *)v6 + v10[9]) = *(void *)&v7[v10[9]];
    *((unsigned char *)v6 + v10[10]) = v7[v10[10]];
    uint64_t v25 = v10[11];
    uint64_t v26 = *(void **)&v7[v25];
    *(void *)((char *)v6 + v25) = v26;
    uint64_t v27 = v10[12];
    objc_super v28 = (char *)v6 + v27;
    unint64_t v29 = (uint64_t *)&v7[v27];
    unint64_t v30 = *(void *)&v7[v27 + 8];
    swift_retain();
    id v31 = v26;
    if (v30 >> 60 == 15)
    {
      *(_OWORD *)objc_super v28 = *(_OWORD *)v29;
    }
    else
    {
      uint64_t v32 = *v29;
      outlined copy of Data._Representation(*v29, v30);
      *(void *)objc_super v28 = v32;
      *((void *)v28 + 1) = v30;
    }
    uint64_t v17 = a1;
    *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
    swift_unknownObjectRetain();
  }
  return v17;
}

void **initializeWithCopy for ConversationHelperInput(void **a1, void **a2, uint64_t a3)
{
  int v3 = *a2;
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (void **)((char *)a1 + v4);
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = *(uint64_t *)((char *)a2 + v4 + 8);
  void *v5 = *(void **)((char *)a2 + v4);
  v5[1] = v7;
  uint64_t v8 = *(uint64_t *)((char *)a2 + v4 + 24);
  v5[2] = *(void **)((char *)a2 + v4 + 16);
  v5[3] = v8;
  uint64_t v9 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  uint64_t v10 = v9[6];
  __dst = (char *)v5 + v10;
  uint64_t v11 = &v6[v10];
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v35 = *(void *)(v12 - 8);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
  id v14 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v11, 1, v12))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(__dst, v11, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(__dst, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v12);
  }
  uint64_t v16 = v9[7];
  uint64_t v17 = *(void **)&v6[v16];
  *(void *)((char *)v5 + v16) = v17;
  uint64_t v18 = v9[8];
  uint64_t v19 = (char *)v5 + v18;
  uint64_t v20 = &v6[v18];
  id v21 = v17;
  if (v13(v20, 1, v12))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v19, v20, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v19, v20, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v19, 0, 1, v12);
  }
  *(void *)((char *)v5 + v9[9]) = *(void *)&v6[v9[9]];
  *((unsigned char *)v5 + v9[10]) = v6[v9[10]];
  uint64_t v23 = v9[11];
  uint64_t v24 = *(void **)&v6[v23];
  *(void *)((char *)v5 + v23) = v24;
  uint64_t v25 = v9[12];
  uint64_t v26 = (char *)v5 + v25;
  uint64_t v27 = (uint64_t *)&v6[v25];
  unint64_t v28 = *(void *)&v6[v25 + 8];
  swift_retain();
  id v29 = v24;
  if (v28 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
  }
  else
  {
    uint64_t v30 = *v27;
    outlined copy of Data._Representation(*v27, v28);
    *(void *)uint64_t v26 = v30;
    *((void *)v26 + 1) = v28;
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  swift_unknownObjectRetain();
  return a1;
}

void **assignWithCopy for ConversationHelperInput(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  id v8 = v6;

  uint64_t v49 = a3;
  uint64_t v9 = *(int *)(a3 + 20);
  int v50 = a1;
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  *(void *)uint64_t v10 = *(void **)((char *)a2 + v9);
  *((void *)v10 + 1) = *(void **)((char *)a2 + v9 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v10 + 2) = *((void *)v11 + 2);
  *((void *)v10 + 3) = *((void *)v11 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  uint64_t v13 = v12[6];
  id v14 = &v10[v13];
  uint64_t v15 = &v11[v13];
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v16);
LABEL_6:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 24))(v14, v15, v16);
LABEL_7:
  uint64_t v22 = v12[7];
  uint64_t v23 = *(void **)&v11[v22];
  uint64_t v24 = *(void **)&v10[v22];
  *(void *)&v10[v22] = v23;
  id v25 = v23;

  uint64_t v26 = v12[8];
  uint64_t v27 = &v10[v26];
  unint64_t v28 = &v11[v26];
  int v29 = v18(&v10[v26], 1, v16);
  int v30 = v18(v28, 1, v16);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v27, v28, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v27, 0, 1, v16);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v27, v16);
LABEL_12:
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 24))(v27, v28, v16);
LABEL_13:
  *(void *)&v10[v12[9]] = *(void *)&v11[v12[9]];
  swift_retain();
  swift_release();
  v10[v12[10]] = v11[v12[10]];
  uint64_t v32 = v12[11];
  uint64_t v33 = *(void **)&v10[v32];
  uint64_t v34 = *(void **)&v11[v32];
  *(void *)&v10[v32] = v34;
  id v35 = v34;

  uint64_t v36 = v12[12];
  uint64_t v37 = (uint64_t *)&v10[v36];
  uint64_t v38 = (uint64_t *)&v11[v36];
  unint64_t v39 = *(void *)&v11[v36 + 8];
  if (*(void *)&v10[v36 + 8] >> 60 != 15)
  {
    if (v39 >> 60 != 15)
    {
      uint64_t v41 = *v38;
      outlined copy of Data._Representation(*v38, v39);
      uint64_t v42 = *v37;
      unint64_t v43 = v37[1];
      *uint64_t v37 = v41;
      v37[1] = v39;
      outlined consume of Data._Representation(v42, v43);
      goto LABEL_20;
    }
    outlined destroy of Data((uint64_t)v37);
    goto LABEL_18;
  }
  if (v39 >> 60 == 15)
  {
LABEL_18:
    *(_OWORD *)uint64_t v37 = *(_OWORD *)v38;
    goto LABEL_20;
  }
  uint64_t v40 = *v38;
  outlined copy of Data._Representation(*v38, v39);
  *uint64_t v37 = v40;
  v37[1] = v39;
LABEL_20:
  uint64_t v44 = *(int *)(v49 + 24);
  uint64_t v45 = (void **)((char *)v50 + v44);
  char v46 = (void **)((char *)a2 + v44);
  uint64_t v47 = v46[1];
  *uint64_t v45 = *v46;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v45[1] = v47;
  return v50;
}

void *initializeWithTake for ConversationHelperInput(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (_OWORD *)((char *)a1 + v4);
  uint64_t v6 = (char *)a2 + v4;
  long long v7 = *(_OWORD *)((char *)a2 + v4 + 16);
  _OWORD *v5 = *(_OWORD *)((char *)a2 + v4);
  v5[1] = v7;
  id v8 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  uint64_t v9 = v8[6];
  uint64_t v10 = (char *)v5 + v9;
  uint64_t v11 = &v6[v9];
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  id v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v14(v11, 1, v12))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  *(void *)((char *)v5 + v8[7]) = *(void *)&v6[v8[7]];
  uint64_t v16 = v8[8];
  uint64_t v17 = (char *)v5 + v16;
  uint64_t v18 = &v6[v16];
  if (v14(&v6[v16], 1, v12))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v17, v18, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v12);
  }
  *(void *)((char *)v5 + v8[9]) = *(void *)&v6[v8[9]];
  *((unsigned char *)v5 + v8[10]) = v6[v8[10]];
  *(void *)((char *)v5 + v8[11]) = *(void *)&v6[v8[11]];
  *(_OWORD *)((char *)v5 + v8[12]) = *(_OWORD *)&v6[v8[12]];
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void **assignWithTake for ConversationHelperInput(void **a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;

  unint64_t v43 = a2;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v44 = a1;
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = *(uint64_t *)((char *)a2 + v7 + 8);
  *(void *)id v8 = *(void **)((char *)a2 + v7);
  *((void *)v8 + 1) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *((void *)v9 + 3);
  *((void *)v8 + 2) = *((void *)v9 + 2);
  *((void *)v8 + 3) = v11;
  swift_bridgeObjectRelease();
  uint64_t v12 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  uint64_t v13 = v12[6];
  id v14 = &v8[v13];
  uint64_t v15 = &v9[v13];
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  int v19 = v18(v14, 1, v16);
  int v20 = v18(v15, 1, v16);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v16);
LABEL_6:
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v14, v15, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 40))(v14, v15, v16);
LABEL_7:
  uint64_t v22 = v12[7];
  uint64_t v23 = *(void **)&v8[v22];
  *(void *)&v8[v22] = *(void *)&v9[v22];

  uint64_t v24 = v12[8];
  id v25 = &v8[v24];
  uint64_t v26 = &v9[v24];
  int v27 = v18(&v8[v24], 1, v16);
  int v28 = v18(v26, 1, v16);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v25, v26, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v25, 0, 1, v16);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v25, v16);
LABEL_12:
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 40))(v25, v26, v16);
LABEL_13:
  *(void *)&v8[v12[9]] = *(void *)&v9[v12[9]];
  swift_release();
  v8[v12[10]] = v9[v12[10]];
  uint64_t v30 = v12[11];
  uint64_t v31 = *(void **)&v8[v30];
  *(void *)&v8[v30] = *(void *)&v9[v30];

  uint64_t v32 = v12[12];
  uint64_t v33 = (uint64_t *)&v8[v32];
  uint64_t v34 = (uint64_t *)&v9[v32];
  unint64_t v35 = *(void *)&v8[v32 + 8];
  if (v35 >> 60 != 15)
  {
    unint64_t v36 = v34[1];
    if (v36 >> 60 != 15)
    {
      uint64_t v37 = *v33;
      *uint64_t v33 = *v34;
      v33[1] = v36;
      outlined consume of Data._Representation(v37, v35);
      goto LABEL_18;
    }
    outlined destroy of Data((uint64_t)v33);
  }
  *(_OWORD *)uint64_t v33 = *(_OWORD *)v34;
LABEL_18:
  uint64_t v38 = *(int *)(a3 + 24);
  unint64_t v39 = (void **)((char *)v44 + v38);
  uint64_t v40 = (void **)((char *)v43 + v38);
  uint64_t v41 = v40[1];
  *unint64_t v39 = *v40;
  swift_unknownObjectRelease();
  v39[1] = v41;
  return v44;
}

uint64_t getEnumTagSinglePayload for ConversationHelperInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B9E156A4);
}

uint64_t sub_1B9E156A4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for RemoteConversationTurnData(0);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ConversationHelperInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B9E15768);
}

void *sub_1B9E15768(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for RemoteConversationTurnData(0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for ConversationHelperInput()
{
  uint64_t result = type metadata accessor for RemoteConversationTurnData(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for ConversationHelper()
{
  return self;
}

uint64_t method lookup function for ConversationHelper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationHelper);
}

uint64_t dispatch thunk of ConversationHelper.__allocating_init(conversationHandlerLocator:preFlowBlockingWork:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t *initializeBufferWithCopyOfBuffer for RemoteConversationOrReformedInput(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Input();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for RemoteConversationOrReformedInput(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of RemoteConversationOrReformedInput((uint64_t)a1, type metadata accessor for RemoteConversationOrReformedInput);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for Input();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for RemoteConversationOrReformedInput(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of RemoteConversationOrReformedInput((uint64_t)a1, type metadata accessor for RemoteConversationOrReformedInput);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Input();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for RemoteConversationOrReformedInput()
{
  uint64_t result = type metadata accessor for Input();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void MUXContextMessage.userIdOfPrimaryUser()(uint64_t a1@<X8>)
{
  uint64_t v1 = MUXContextMessage.userIdToHomeMember.getter();
  uint64_t v2 = v1;
  uint64_t v3 = v1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  int64_t v8 = 0;
  uint64_t v9 = &off_1E61F1000;
  uint64_t v34 = swift_bridgeObjectRetain();
  int64_t v31 = v7;
  uint64_t v32 = v3;
  while (1)
  {
    while (1)
    {
LABEL_5:
      if (v6)
      {
        unint64_t v10 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        unint64_t v11 = v10 | (v8 << 6);
      }
      else
      {
        int64_t v12 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
          __break(1u);
          goto LABEL_52;
        }
        if (v12 >= v7) {
          goto LABEL_48;
        }
        unint64_t v13 = *(void *)(v3 + 8 * v12);
        ++v8;
        if (!v13)
        {
          int64_t v8 = v12 + 1;
          if (v12 + 1 >= v7) {
            goto LABEL_48;
          }
          unint64_t v13 = *(void *)(v3 + 8 * v8);
          if (!v13)
          {
            int64_t v8 = v12 + 2;
            if (v12 + 2 >= v7) {
              goto LABEL_48;
            }
            unint64_t v13 = *(void *)(v3 + 8 * v8);
            if (!v13)
            {
              int64_t v8 = v12 + 3;
              if (v12 + 3 >= v7) {
                goto LABEL_48;
              }
              unint64_t v13 = *(void *)(v3 + 8 * v8);
              if (!v13)
              {
                int64_t v8 = v12 + 4;
                if (v12 + 4 >= v7) {
                  goto LABEL_48;
                }
                unint64_t v13 = *(void *)(v3 + 8 * v8);
                if (!v13)
                {
                  int64_t v14 = v12 + 5;
                  if (v14 >= v7)
                  {
LABEL_48:
                    swift_release();
                    swift_bridgeObjectRelease();
                    goto LABEL_49;
                  }
                  unint64_t v13 = *(void *)(v3 + 8 * v14);
                  if (!v13)
                  {
                    while (1)
                    {
                      int64_t v8 = v14 + 1;
                      if (__OFADD__(v14, 1)) {
                        break;
                      }
                      if (v8 >= v7) {
                        goto LABEL_48;
                      }
                      unint64_t v13 = *(void *)(v3 + 8 * v8);
                      ++v14;
                      if (v13) {
                        goto LABEL_24;
                      }
                    }
LABEL_52:
                    __break(1u);
                    return;
                  }
                  int64_t v8 = v14;
                }
              }
            }
          }
        }
LABEL_24:
        unint64_t v6 = (v13 - 1) & v13;
        unint64_t v11 = __clz(__rbit64(v13)) + (v8 << 6);
      }
      id v15 = *(id *)(*(void *)(v2 + 56) + 8 * v11);
      id v16 = [v15 (SEL)v9[291]];
      if (v16) {
        break;
      }
    }
    uint64_t v17 = v16;
    int64_t v35 = v8;
    uint64_t v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v19 = *(void *)(v18 + 16);
    if (v19) {
      break;
    }

    swift_bridgeObjectRelease();
    int64_t v8 = v35;
  }
  uint64_t v20 = v18 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of Any(v20, (uint64_t)v39);
    outlined init with copy of Any((uint64_t)v39, (uint64_t)v38);
    int v21 = swift_dynamicCast();
    if (v21) {
      uint64_t v22 = v36;
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (v21) {
      BOOL v25 = v37 == 0;
    }
    else {
      BOOL v25 = 1;
    }
    if (v25)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v39);
      goto LABEL_29;
    }
    if (v22 == v23 && v37 == v24) {
      break;
    }
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v39);
    if (v27) {
      goto LABEL_46;
    }
LABEL_29:
    v20 += 32;
    if (!--v19)
    {

      swift_bridgeObjectRelease_n();
      uint64_t v2 = v34;
      int64_t v7 = v31;
      uint64_t v3 = v32;
      uint64_t v9 = &off_1E61F1000;
      int64_t v8 = v35;
      goto LABEL_5;
    }
  }
  swift_bridgeObjectRelease_n();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v39);
LABEL_46:
  swift_bridgeObjectRelease_n();
  swift_release();
  swift_bridgeObjectRelease();
  id v28 = objc_msgSend(v15, sel_sharedUserId);

  if (v28)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    UserID.init(sharedUserId:)();
    uint64_t v29 = type metadata accessor for UserID();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(a1, 0, 1, v29);
    return;
  }
LABEL_49:
  uint64_t v30 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(a1, 1, 1, v30);
}

uint64_t static ConversationMUXUtils.userAttribute(from:)@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t result = specialized static ConversationMUXUtils.isOwner(_:)(a1);
  if (result)
  {
    char v5 = 0;
  }
  else
  {
    uint64_t result = specialized static ConversationMUXUtils.isOwner(_:)(a1);
    if (result) {
      char v5 = 1;
    }
    else {
      char v5 = 2;
    }
  }
  *a2 = v5;
  return result;
}

uint64_t static ConversationMUXUtils.isOwner(_:)(void *a1)
{
  return specialized static ConversationMUXUtils.isOwner(_:)(a1) & 1;
}

uint64_t static ConversationMUXUtils.isUnknownUser(_:)(void *a1)
{
  return specialized static ConversationMUXUtils.isOwner(_:)(a1) & 1;
}

unint64_t static ConversationMUXUtils.toUserIdentityClassification(from:)@<X0>(unint64_t result@<X0>, char a2@<W1>, unsigned char *a3@<X8>)
{
  BOOL v3 = result < 5 && (a2 & 1) == 0;
  unint64_t v4 = 0x1030204uLL >> (8 * result);
  if (!v3) {
    LOBYTE(v4) = 4;
  }
  *a3 = v4;
  return result;
}

uint64_t static ConversationMUXUtils.isUnknownUser(withUserId:fromMUXContextMessage:)(uint64_t a1)
{
  uint64_t v2 = MUXContextMessage.userIdToHomeMember.getter();
  if (*(void *)(v2 + 16) && (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v4 & 1) != 0))
  {
    id v5 = *(id *)(*(void *)(v2 + 56) + 8 * v3);
    swift_bridgeObjectRelease();
    char v6 = specialized static ConversationMUXUtils.isOwner(_:)(v5);
  }
  else
  {
    swift_bridgeObjectRelease();
    char v6 = 1;
  }
  return v6 & 1;
}

uint64_t static ConversationMUXUtils.getAllUserIds(from:)(void *a1)
{
  uint64_t v21 = type metadata accessor for UserID();
  uint64_t v2 = *(void *)(v21 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v21);
  uint64_t v20 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v19 = (uint64_t)&v19 - v5;
  id v6 = objc_msgSend(a1, sel_homeMembers);
  if (!v6) {
    return MEMORY[0x1E4FBC870];
  }
  int64_t v7 = v6;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAHomeMemberInfo);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t result = MEMORY[0x1E4FBC870];
  uint64_t v22 = MEMORY[0x1E4FBC870];
  if (!v8) {
    return result;
  }
  if (!(v8 >> 62))
  {
    uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v10 = result;
  if (!result)
  {
LABEL_16:
    swift_bridgeObjectRelease_n();
    return MEMORY[0x1E4FBC870];
  }
LABEL_5:
  if (v10 < 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = 0;
    int64_t v12 = (void (**)(uint64_t, uint64_t))(v2 + 8);
    unint64_t v13 = v20;
    do
    {
      if ((v8 & 0xC000000000000001) != 0) {
        id v14 = (id)MEMORY[0x1BA9E3990](v11, v8);
      }
      else {
        id v14 = *(id *)(v8 + 8 * v11 + 32);
      }
      id v15 = v14;
      id v16 = objc_msgSend(v14, sel_sharedUserId);
      if (v16)
      {
        uint64_t v17 = v16;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        UserID.init(sharedUserId:)();
        uint64_t v18 = v19;
        specialized Set._Variant.insert(_:)(v19, v13);

        (*v12)(v18, v21);
      }
      else
      {
      }
      ++v11;
    }
    while (v10 != v11);
    swift_bridgeObjectRelease_n();
    return v22;
  }
  return result;
}

uint64_t static ConversationMUXUtils.getUserIdToLoggableSharedUserIdDict(from:)()
{
  uint64_t v0 = type metadata accessor for UserID();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v59 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo)?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  int64_t v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v59 - v8;
  uint64_t v10 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v11 = MUXContextMessage.userIdToHomeMember.getter();
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v61 = v11 + 64;
  uint64_t v67 = v1;
  uint64_t v68 = v11;
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  uint64_t v65 = v3;
  uint64_t v66 = v1 + 16;
  uint64_t v70 = (void (**)(char *, char *, uint64_t))(v1 + 32);
  int64_t v71 = 0;
  os_signpost_id_t v69 = (void (**)(char *, uint64_t))(v1 + 8);
  int64_t v62 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v63 = v9;
  int64_t v60 = v62 - 1;
  uint64_t v64 = v7;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      uint64_t v18 = (v15 - 1) & v15;
      unint64_t v19 = v17 | (v71 << 6);
LABEL_10:
      uint64_t v20 = v68;
      (*(void (**)(char *, unint64_t, uint64_t))(v67 + 16))(v7, *(void *)(v68 + 48) + *(void *)(v67 + 72) * v19, v0);
      uint64_t v21 = *(void *)(v20 + 56);
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
      uint64_t v23 = *(void **)(v21 + 8 * v19);
      *(void *)&v7[*(int *)(v22 + 48)] = v23;
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v7, 0, 1, v22);
      id v24 = v23;
      goto LABEL_29;
    }
    int64_t v25 = v71 + 1;
    if (__OFADD__(v71, 1)) {
      goto LABEL_49;
    }
    if (v25 < v62)
    {
      unint64_t v26 = *(void *)(v61 + 8 * v25);
      if (v26) {
        goto LABEL_14;
      }
      int64_t v27 = v71 + 2;
      ++v71;
      if (v25 + 1 < v62)
      {
        unint64_t v26 = *(void *)(v61 + 8 * v27);
        if (v26) {
          goto LABEL_17;
        }
        int64_t v71 = v25 + 1;
        if (v25 + 2 < v62)
        {
          unint64_t v26 = *(void *)(v61 + 8 * (v25 + 2));
          if (v26)
          {
            v25 += 2;
            goto LABEL_14;
          }
          int64_t v27 = v25 + 3;
          int64_t v71 = v25 + 2;
          if (v25 + 3 < v62) {
            break;
          }
        }
      }
    }
LABEL_28:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v7, 1, 1, v28);
    uint64_t v18 = 0;
LABEL_29:
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v7, (uint64_t)v9, &demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo)?);
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v9, 1, v29) == 1)
    {
      swift_release();
      return (uint64_t)v10;
    }
    unint64_t v73 = v18;
    uint64_t v30 = *(void **)&v9[*(int *)(v29 + 48)];
    (*v70)(v3, v9, v0);
    uint64_t v31 = UserID.sharedUserId.getter();
    uint64_t v33 = v32;
    id v72 = v30;
    id v34 = objc_msgSend(v30, sel_loggableMultiUserSharedUserId);
    if (v34)
    {
      int64_t v35 = v34;
      uint64_t v36 = v0;
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v39 = v38;

      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v74 = v10;
      unint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v33);
      uint64_t v43 = v10[2];
      BOOL v44 = (v41 & 1) == 0;
      uint64_t v45 = v43 + v44;
      if (__OFADD__(v43, v44))
      {
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
      char v46 = v41;
      if (v10[3] >= v45)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v10 = v74;
          if ((v41 & 1) == 0) {
            goto LABEL_42;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          uint64_t v10 = v74;
          if ((v46 & 1) == 0) {
            goto LABEL_42;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v45, isUniquelyReferenced_nonNull_native);
        unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v33);
        if ((v46 & 1) != (v48 & 1)) {
          goto LABEL_52;
        }
        unint64_t v42 = v47;
        uint64_t v10 = v74;
        if ((v46 & 1) == 0)
        {
LABEL_42:
          v10[(v42 >> 6) + 8] |= 1 << v42;
          uint64_t v53 = (uint64_t *)(v10[6] + 16 * v42);
          *uint64_t v53 = v31;
          v53[1] = v33;
          unint64_t v54 = (uint64_t *)(v10[7] + 16 * v42);
          *unint64_t v54 = v37;
          v54[1] = v39;
          uint64_t v55 = v10[2];
          BOOL v56 = __OFADD__(v55, 1);
          uint64_t v57 = v55 + 1;
          if (v56) {
            goto LABEL_50;
          }
          void v10[2] = v57;
          swift_bridgeObjectRetain();
LABEL_5:

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v0 = v36;
          int64_t v7 = v64;
          uint64_t v3 = v65;
          uint64_t v9 = v63;
LABEL_6:
          unint64_t v15 = v73;
          goto LABEL_7;
        }
      }
      id v16 = (uint64_t *)(v10[7] + 16 * v42);
      swift_bridgeObjectRelease();
      *id v16 = v37;
      v16[1] = v39;
      goto LABEL_5;
    }
    swift_bridgeObjectRetain();
    unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(v31, v33);
    char v51 = v50;
    swift_bridgeObjectRelease();
    if ((v51 & 1) == 0)
    {

      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    char v52 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v74 = v10;
    unint64_t v15 = v73;
    if ((v52 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v10 = v74;
    }
    swift_bridgeObjectRelease();
    specialized _NativeDictionary._delete(at:)(v49, (uint64_t)v10);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_7:
    (*v69)(v3, v0);
  }
  unint64_t v26 = *(void *)(v61 + 8 * v27);
  if (v26)
  {
LABEL_17:
    int64_t v25 = v27;
LABEL_14:
    uint64_t v18 = (v26 - 1) & v26;
    unint64_t v19 = __clz(__rbit64(v26)) + (v25 << 6);
    int64_t v71 = v25;
    goto LABEL_10;
  }
  while (1)
  {
    int64_t v25 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v25 >= v62)
    {
      int64_t v71 = v60;
      goto LABEL_28;
    }
    unint64_t v26 = *(void *)(v61 + 8 * v25);
    ++v27;
    if (v26) {
      goto LABEL_14;
    }
  }
LABEL_51:
  __break(1u);
LABEL_52:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t static ConversationMUXUtils.getUserIdFor(personaId:muxContextMessage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v48 = a1;
  uint64_t v49 = a2;
  BOOL v44 = a3;
  uint64_t v3 = type metadata accessor for UserID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v55 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo)?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v42 - v10;
  uint64_t result = MUXContextMessage.userIdToHomeMember.getter();
  int64_t v13 = 0;
  uint64_t v14 = *(void *)(result + 64);
  uint64_t v45 = result + 64;
  uint64_t v15 = 1 << *(unsigned char *)(result + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  uint64_t v50 = v4 + 16;
  uint64_t v51 = result;
  uint64_t v52 = v4;
  uint64_t v53 = (uint64_t (**)(char *, uint64_t))(v4 + 8);
  unint64_t v54 = (void (**)(char *, char *, uint64_t))(v4 + 32);
  int64_t v46 = (unint64_t)(v15 + 63) >> 6;
  int64_t v43 = v46 - 1;
  while (1)
  {
    if (v17)
    {
      unint64_t v18 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v19 = v18 | (v13 << 6);
LABEL_8:
      uint64_t v20 = v51;
      (*(void (**)(char *, unint64_t, uint64_t))(v52 + 16))(v9, *(void *)(v51 + 48) + *(void *)(v52 + 72) * v19, v3);
      uint64_t v21 = *(void *)(v20 + 56);
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
      uint64_t v23 = *(void **)(v21 + 8 * v19);
      *(void *)&v9[*(int *)(v22 + 48)] = v23;
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v9, 0, 1, v22);
      id v24 = v23;
      goto LABEL_27;
    }
    int64_t v25 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v25 < v46)
    {
      unint64_t v26 = *(void *)(v45 + 8 * v25);
      if (v26) {
        goto LABEL_12;
      }
      int64_t v27 = v13 + 2;
      ++v13;
      if (v25 + 1 < v46)
      {
        unint64_t v26 = *(void *)(v45 + 8 * v27);
        if (v26) {
          goto LABEL_15;
        }
        int64_t v13 = v25 + 1;
        if (v25 + 2 < v46)
        {
          unint64_t v26 = *(void *)(v45 + 8 * (v25 + 2));
          if (v26)
          {
            v25 += 2;
            goto LABEL_12;
          }
          int64_t v27 = v25 + 3;
          int64_t v13 = v25 + 2;
          if (v25 + 3 < v46) {
            break;
          }
        }
      }
    }
LABEL_26:
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v9, 1, 1, v28);
    unint64_t v17 = 0;
LABEL_27:
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v9, (uint64_t)v11, &demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo)?);
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v11, 1, v29) == 1)
    {
      swift_release();
      uint64_t v40 = 1;
      char v41 = v44;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v41, v40, 1, v3);
    }
    uint64_t v30 = *(void **)&v11[*(int *)(v29 + 48)];
    uint64_t v31 = *v54;
    (*v54)(v55, v11, v3);
    id v32 = objc_msgSend(v30, sel_personaIdentifier);
    if (v32)
    {
      uint64_t v33 = v32;
      unint64_t v47 = v31;
      uint64_t v34 = v3;
      uint64_t v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v37 = v36;

      if (v35 == v48 && v37 == v49)
      {
        swift_release();
        swift_bridgeObjectRelease();

        uint64_t v3 = v34;
LABEL_37:
        char v41 = v44;
        v47(v44, v55, v3);
        uint64_t v40 = 0;
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v41, v40, 1, v3);
      }
      char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();

      uint64_t v3 = v34;
      if (v39)
      {
        swift_release();
        goto LABEL_37;
      }
    }
    else
    {
    }
    uint64_t result = (*v53)(v55, v3);
  }
  unint64_t v26 = *(void *)(v45 + 8 * v27);
  if (v26)
  {
LABEL_15:
    int64_t v25 = v27;
LABEL_12:
    unint64_t v17 = (v26 - 1) & v26;
    unint64_t v19 = __clz(__rbit64(v26)) + (v25 << 6);
    int64_t v13 = v25;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v25 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v25 >= v46)
    {
      int64_t v13 = v43;
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v45 + 8 * v25);
    ++v27;
    if (v26) {
      goto LABEL_12;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t static ConversationMUXUtils.getUserIdForPrimaryUser(from:)(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_35;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v2)
  {
LABEL_36:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_3:
  uint64_t v3 = 0;
  unint64_t v4 = v1 & 0xC000000000000001;
  unint64_t v5 = v1 + 32;
  uint64_t v6 = &off_1E61F1000;
  unint64_t v28 = v1;
  unint64_t v26 = v1 & 0xC000000000000001;
  uint64_t v27 = v2;
  unint64_t v25 = v1 + 32;
  while (1)
  {
    if (v4) {
      id v7 = (id)MEMORY[0x1BA9E3990](v3, v1);
    }
    else {
      id v7 = *(id *)(v5 + 8 * v3);
    }
    uint64_t v8 = v7;
    if (__OFADD__(v3++, 1))
    {
      __break(1u);
LABEL_35:
      swift_bridgeObjectRetain();
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2) {
        goto LABEL_36;
      }
      goto LABEL_3;
    }
    id v10 = [v7 (SEL)v6[291]];
    if (v10) {
      break;
    }

LABEL_5:
    if (v3 == v2) {
      goto LABEL_36;
    }
  }
  uint64_t v11 = v10;
  id v29 = v8;
  uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v13 = *(void *)(v12 + 16);
  if (!v13)
  {

    swift_bridgeObjectRelease();
LABEL_30:
    uint64_t v6 = &off_1E61F1000;
    goto LABEL_5;
  }
  uint64_t v14 = v12 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of Any(v14, (uint64_t)v33);
    outlined init with copy of Any((uint64_t)v33, (uint64_t)v32);
    int v15 = swift_dynamicCast();
    if (v15) {
      uint64_t v16 = v30;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (v15) {
      BOOL v19 = v31 == 0;
    }
    else {
      BOOL v19 = 1;
    }
    if (v19)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v33);
      goto LABEL_14;
    }
    if (v16 == v17 && v31 == v18) {
      break;
    }
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v33);
    if (v21) {
      goto LABEL_32;
    }
LABEL_14:
    v14 += 32;
    if (!--v13)
    {

      swift_bridgeObjectRelease_n();
      uint64_t v2 = v27;
      unint64_t v1 = v28;
      unint64_t v5 = v25;
      unint64_t v4 = v26;
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRelease_n();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v33);
LABEL_32:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  id v22 = objc_msgSend(v29, sel_sharedUserId);

  if (!v22) {
    return 0;
  }
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v23;
}

uint64_t static ConversationMUXUtils.getUserIdForUnknownUser(fromHomeMemberInfo:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  specialized static ConversationMUXUtils.getUserIdForUnknownUserAsString(from:)(a1);
  if (v3)
  {
    UserID.init(sharedUserId:)();
    uint64_t v4 = type metadata accessor for UserID();
    unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
    uint64_t v6 = v4;
    uint64_t v7 = a2;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v9 = type metadata accessor for UserID();
    unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
    uint64_t v6 = v9;
    uint64_t v7 = a2;
    uint64_t v8 = 1;
  }

  return v5(v7, v8, 1, v6);
}

uint64_t static ConversationMUXUtils.getUserIdForUnknownUser(fromHomeMemberInfoDict:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
  swift_bridgeObjectRelease();
  specialized static ConversationMUXUtils.getUserIdForUnknownUserAsString(from:)((unint64_t)v3);
  if (v4)
  {
    UserID.init(sharedUserId:)();
    uint64_t v5 = type metadata accessor for UserID();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a1, 0, 1, v5);
  }
  else
  {
    uint64_t v6 = type metadata accessor for UserID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a1, 1, 1, v6);
  }

  return swift_release();
}

uint64_t static ConversationMUXUtils.isMUXEnabled()()
{
  return AFDeviceSupportsSiriMUX();
}

uint64_t static ConversationMUXUtils.convertToUserIDToSpeechPackageDict(sharedUserIdToSpeechRecognitionDict:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UserID();
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v59 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)&v51 - v6;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v52 = v5;
  uint64_t v53 = a1 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v8;
  uint64_t v58 = (void (**)(uint64_t, char *, uint64_t))(v5 + 16);
  int64_t v54 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v55 = (void (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v56 = a1;
  swift_bridgeObjectRetain();
  int64_t v12 = 0;
  uint64_t v13 = (void *)MEMORY[0x1E4FBC868];
  while (1)
  {
    if (v11)
    {
      unint64_t v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_23;
    }
    int64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_43;
    }
    if (v19 >= v54)
    {
LABEL_41:
      swift_release();
      return (uint64_t)v13;
    }
    unint64_t v20 = *(void *)(v53 + 8 * v19);
    ++v12;
    if (!v20)
    {
      int64_t v12 = v19 + 1;
      if (v19 + 1 >= v54) {
        goto LABEL_41;
      }
      unint64_t v20 = *(void *)(v53 + 8 * v12);
      if (!v20)
      {
        int64_t v12 = v19 + 2;
        if (v19 + 2 >= v54) {
          goto LABEL_41;
        }
        unint64_t v20 = *(void *)(v53 + 8 * v12);
        if (!v20) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v11 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_23:
    id v22 = *(void **)(*(void *)(v56 + 56) + 8 * v18);
    swift_bridgeObjectRetain();
    id v23 = v22;
    UserID.init(sharedUserId:)();
    id v24 = objc_allocWithZone(MEMORY[0x1E4F4E5E0]);
    id v25 = v23;
    id v26 = objc_msgSend(v24, sel_init);
    id v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4E608]), sel_initWithRecognition_rawRecognition_audioAnalytics_isFinal_utteranceStart_, v25, v25, v26, 1, 0.0);

    uint64_t v28 = (uint64_t)v59;
    id v29 = *v58;
    (*v58)((uint64_t)v59, v7, v2);
    if (v27)
    {
      unint64_t v57 = v11;
      int64_t v30 = v12;
      uint64_t v31 = v7;
      uint64_t v32 = v2;
      id v33 = v27;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      int64_t v60 = v13;
      unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v28);
      uint64_t v37 = v13[2];
      BOOL v38 = (v35 & 1) == 0;
      uint64_t v39 = v37 + v38;
      if (__OFADD__(v37, v38))
      {
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      char v40 = v35;
      if (v13[3] < v39)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v39, isUniquelyReferenced_nonNull_native, &demangling cache variable for type metadata for _DictionaryStorage<UserID, AFSpeechPackage>);
        unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v59);
        if ((v40 & 1) != (v42 & 1)) {
          goto LABEL_46;
        }
        unint64_t v36 = v41;
        uint64_t v13 = v60;
        if ((v40 & 1) == 0) {
          goto LABEL_35;
        }
LABEL_4:
        uint64_t v14 = v13[7];

        *(void *)(v14 + 8 * v36) = v33;
        uint64_t v15 = (uint64_t)v59;
LABEL_5:
        swift_bridgeObjectRelease();
        uint64_t v16 = *v55;
        uint64_t v2 = v32;
        (*v55)(v15, v32);
        uint64_t v7 = v31;
        int64_t v12 = v30;
        unint64_t v11 = v57;
        goto LABEL_6;
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v13 = v60;
        if (v35) {
          goto LABEL_4;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UserID, AFSpeechPackage>);
        uint64_t v13 = v60;
        if (v40) {
          goto LABEL_4;
        }
      }
LABEL_35:
      v13[(v36 >> 6) + 8] |= 1 << v36;
      uint64_t v15 = (uint64_t)v59;
      v29(v13[6] + *(void *)(v52 + 72) * v36, v59, v32);
      *(void *)(v13[7] + 8 * v36) = v33;
      uint64_t v47 = v13[2];
      BOOL v48 = __OFADD__(v47, 1);
      uint64_t v49 = v47 + 1;
      if (v48) {
        goto LABEL_44;
      }
      v13[2] = v49;
      goto LABEL_5;
    }
    swift_bridgeObjectRetain();
    unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v28);
    char v45 = v44;
    swift_bridgeObjectRelease();
    if (v45)
    {
      int v46 = swift_isUniquelyReferenced_nonNull_native();
      int64_t v60 = v13;
      if (!v46)
      {
        specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UserID, AFSpeechPackage>);
        uint64_t v13 = v60;
      }
      uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
      v16(v13[6] + *(void *)(v52 + 72) * v43, v2);
      uint64_t v13 = v60;
      id v33 = *(id *)(v60[7] + 8 * v43);
      specialized _NativeDictionary._delete(at:)(v43, (uint64_t)v60);
      swift_bridgeObjectRelease();
    }
    else
    {
      id v33 = 0;
      uint64_t v16 = *v55;
    }
    v16((uint64_t)v59, v2);
LABEL_6:

    v16((uint64_t)v7, v2);
  }
  int64_t v21 = v19 + 3;
  if (v21 >= v54) {
    goto LABEL_41;
  }
  unint64_t v20 = *(void *)(v53 + 8 * v21);
  if (v20)
  {
    int64_t v12 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v54) {
      goto LABEL_41;
    }
    unint64_t v20 = *(void *)(v53 + 8 * v12);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_45:
  __break(1u);
LABEL_46:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id static ConversationMUXUtils.voiceIdentificationSignal(withRefId:requestType:isPersonalRequest:isServerFallback:voiceIdClassification:voiceIdOverridden:selectedUserId:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, uint64_t a6, char a7, int a8, uint64_t a9)
{
  return specialized static ConversationMUXUtils.voiceIdentificationSignal(withRefId:requestType:isPersonalRequest:isServerFallback:voiceIdClassification:voiceIdOverridden:selectedUserId:)(a1, a2, a3, a4, a5, a6, a7 & 1, a8, a9);
}

uint64_t Dictionary<>.toEncodableDictionary()(uint64_t a1, uint64_t a2)
{
  v91[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v81 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UserID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v90 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  unint64_t v11 = (char *)&v67 - v10;
  uint64_t v86 = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v84 = type metadata accessor for Optional();
  uint64_t v13 = MEMORY[0x1F4188790](v84);
  uint64_t v15 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  unint64_t v18 = (char *)&v67 - v17;
  uint64_t v19 = *(void *)(a1 + 64);
  uint64_t v69 = a1 + 64;
  uint64_t v20 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & v19;
  uint64_t v83 = TupleTypeMetadata2 - 8;
  uint64_t v89 = (void (**)(uint64_t, char *, uint64_t))(v7 + 16);
  uint64_t v71 = v4 + 16;
  os_log_type_t v82 = (void (**)(char *, char *, uint64_t))(v16 + 32);
  uint64_t v79 = (void (**)(char *, char *, uint64_t))(v4 + 32);
  uint64_t v80 = (void (**)(char *, char *, uint64_t))(v7 + 32);
  uint64_t v72 = v4;
  uint64_t v85 = v7;
  uint64_t v77 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v78 = (void (**)(char *, uint64_t))(v4 + 8);
  int64_t v70 = (unint64_t)(v20 + 63) >> 6;
  int64_t v68 = v70 - 1;
  uint64_t v73 = a1;
  swift_bridgeObjectRetain();
  int64_t v23 = 0;
  id v24 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v74 = v15;
  uint64_t v75 = TupleTypeMetadata2;
  os_log_type_t v76 = v18;
  while (1)
  {
    if (v22)
    {
      uint64_t v88 = (v22 - 1) & v22;
      unint64_t v27 = __clz(__rbit64(v22)) | (v23 << 6);
LABEL_8:
      uint64_t v28 = v73;
      (*(void (**)(char *, unint64_t, uint64_t))(v85 + 16))(v15, *(void *)(v73 + 48) + *(void *)(v85 + 72) * v27, v6);
      (*(void (**)(char *, unint64_t, uint64_t))(v72 + 16))(&v15[*(int *)(TupleTypeMetadata2 + 48)], *(void *)(v28 + 56) + *(void *)(v72 + 72) * v27, v86);
      uint64_t v29 = 0;
      goto LABEL_21;
    }
    int64_t v30 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      goto LABEL_42;
    }
    if (v30 >= v70) {
      goto LABEL_20;
    }
    unint64_t v31 = *(void *)(v69 + 8 * v30);
    if (v31) {
      goto LABEL_12;
    }
    v23 += 2;
    if (v30 + 1 >= v70)
    {
      uint64_t v88 = 0;
      uint64_t v29 = 1;
      int64_t v23 = v30;
      goto LABEL_21;
    }
    unint64_t v31 = *(void *)(v69 + 8 * v23);
    if (v31)
    {
      ++v30;
LABEL_12:
      uint64_t v88 = (v31 - 1) & v31;
      unint64_t v27 = __clz(__rbit64(v31)) + (v30 << 6);
      int64_t v23 = v30;
      goto LABEL_8;
    }
    int64_t v32 = v30 + 2;
    if (v30 + 2 >= v70)
    {
LABEL_20:
      uint64_t v88 = 0;
      uint64_t v29 = 1;
    }
    else
    {
      unint64_t v31 = *(void *)(v69 + 8 * v32);
      if (v31)
      {
        v30 += 2;
        goto LABEL_12;
      }
      while (1)
      {
        int64_t v30 = v32 + 1;
        if (__OFADD__(v32, 1)) {
          goto LABEL_43;
        }
        if (v30 >= v70) {
          break;
        }
        unint64_t v31 = *(void *)(v69 + 8 * v30);
        ++v32;
        if (v31) {
          goto LABEL_12;
        }
      }
      uint64_t v88 = 0;
      uint64_t v29 = 1;
      int64_t v23 = v68;
    }
LABEL_21:
    uint64_t v33 = *(void *)(TupleTypeMetadata2 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v15, v29, 1, TupleTypeMetadata2);
    (*v82)(v18, v15, v84);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v18, 1, TupleTypeMetadata2) == 1)
    {
      swift_release();
      return (uint64_t)v24;
    }
    int64_t v87 = v23;
    uint64_t v34 = &v18[*(int *)(TupleTypeMetadata2 + 48)];
    (*v80)(v11, v18, v6);
    char v35 = self;
    unint64_t v36 = v81;
    uint64_t v37 = v34;
    uint64_t v38 = v86;
    (*v79)(v81, v37, v86);
    uint64_t v39 = v6;
    uint64_t v40 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*v78)(v36, v38);
    v91[0] = 0;
    id v41 = objc_msgSend(v35, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v40, 1, v91);
    swift_unknownObjectRelease();
    id v42 = v91[0];
    if (!v41)
    {
      uint64_t v65 = v42;
      swift_bridgeObjectRelease();
      _convertNSErrorToError(_:)();

      swift_willThrow();
      (*v77)(v11, v39);
      swift_release();
      return (uint64_t)v24;
    }
    uint64_t v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v45 = v44;

    uint64_t v46 = (uint64_t)v90;
    uint64_t v47 = v11;
    BOOL v48 = v11;
    uint64_t v49 = v39;
    uint64_t v50 = v39;
    uint64_t v51 = *v89;
    (*v89)((uint64_t)v90, v48, v50);
    outlined copy of Data._Representation(v43, v45);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v91[0] = v24;
    unint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)(v46);
    uint64_t v55 = v24[2];
    BOOL v56 = (v53 & 1) == 0;
    uint64_t v57 = v55 + v56;
    if (__OFADD__(v55, v56))
    {
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
    }
    char v58 = v53;
    if (v24[3] < v57) {
      break;
    }
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      specialized _NativeDictionary.copy()();
    }
LABEL_29:
    uint64_t v6 = v49;
    id v24 = v91[0];
    unint64_t v11 = v47;
    if (v58)
    {
      uint64_t v25 = *((void *)v91[0] + 7) + 16 * v54;
      outlined consume of Data._Representation(*(void *)v25, *(void *)(v25 + 8));
      *(void *)uint64_t v25 = v43;
      *(void *)(v25 + 8) = v45;
      unint64_t v18 = v76;
    }
    else
    {
      *((void *)v91[0] + (v54 >> 6) + 8) |= 1 << v54;
      v51(v24[6] + *(void *)(v85 + 72) * v54, v90, v6);
      uint64_t v61 = (uint64_t *)(v24[7] + 16 * v54);
      *uint64_t v61 = v43;
      v61[1] = v45;
      uint64_t v62 = v24[2];
      BOOL v63 = __OFADD__(v62, 1);
      uint64_t v64 = v62 + 1;
      unint64_t v18 = v76;
      if (v63) {
        goto LABEL_41;
      }
      v24[2] = v64;
    }
    swift_bridgeObjectRelease();
    id v26 = *v77;
    (*v77)(v90, v6);
    outlined consume of Data._Representation(v43, v45);
    v26(v11, v6);
    uint64_t v15 = v74;
    TupleTypeMetadata2 = v75;
    int64_t v23 = v87;
    unint64_t v22 = v88;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v57, isUniquelyReferenced_nonNull_native);
  unint64_t v59 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v90);
  if ((v58 & 1) == (v60 & 1))
  {
    unint64_t v54 = v59;
    goto LABEL_29;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t Dictionary<>.decodeWithValueAs<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v62 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v62 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v62);
  uint64_t v61 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v73 = (char *)&v51 - v9;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v8);
  char v60 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UserID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  unint64_t v59 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v75 = (char *)&v51 - v16;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: UserID, value: Data)?);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  uint64_t v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v69 = (char *)&v51 - v21;
  uint64_t v58 = lazy protocol witness table accessor for type UserID and conformance UserID(&lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E4FA26E0]);
  uint64_t v22 = Dictionary.init()();
  uint64_t v23 = *(void *)(a2 + 64);
  uint64_t v52 = a2 + 64;
  uint64_t v24 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v25 = -1;
  uint64_t v76 = v22;
  if (v24 < 64) {
    uint64_t v25 = ~(-1 << v24);
  }
  unint64_t v26 = v25 & v23;
  int64_t v70 = (void (**)(char *, char *, uint64_t))(v13 + 16);
  uint64_t v66 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  uint64_t v63 = v13;
  uint64_t v67 = (void (**)(char *, uint64_t))(v13 + 8);
  int64_t v68 = (void (**)(char *, uint64_t, uint64_t))(v13 + 32);
  uint64_t v57 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
  BOOL v56 = (void (**)(char *, char *, uint64_t))(v10 + 32);
  uint64_t v55 = (void (**)(char *, char *, uint64_t))(v10 + 16);
  unint64_t v54 = (void (**)(char *, uint64_t))(v10 + 8);
  int64_t v53 = (unint64_t)(v24 + 63) >> 6;
  int64_t v51 = v53 - 1;
  uint64_t v64 = a2;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v28 = 0;
  uint64_t v65 = v20;
  while (1)
  {
    if (v26)
    {
      int64_t v71 = v28;
      uint64_t v72 = (v26 - 1) & v26;
      unint64_t v29 = __clz(__rbit64(v26)) | (v28 << 6);
      uint64_t v30 = (uint64_t)v69;
LABEL_8:
      uint64_t v31 = v64;
      (*(void (**)(char *, unint64_t, uint64_t))(v63 + 16))(v20, *(void *)(v64 + 48) + *(void *)(v63 + 72) * v29, v12);
      int64_t v32 = (uint64_t *)(*(void *)(v31 + 56) + 16 * v29);
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: Data));
      uint64_t v34 = (uint64_t *)&v20[*(int *)(v33 + 48)];
      uint64_t v35 = *v32;
      unint64_t v36 = v32[1];
      *uint64_t v34 = v35;
      v34[1] = v36;
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v20, 0, 1, v33);
      outlined copy of Data._Representation(v35, v36);
      goto LABEL_21;
    }
    int64_t v37 = v28 + 1;
    uint64_t v30 = (uint64_t)v69;
    if (__OFADD__(v28, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v37 < v53)
    {
      unint64_t v38 = *(void *)(v52 + 8 * v37);
      if (v38) {
        goto LABEL_12;
      }
      v28 += 2;
      if (v37 + 1 >= v53)
      {
LABEL_33:
        int64_t v71 = v37;
        goto LABEL_20;
      }
      unint64_t v38 = *(void *)(v52 + 8 * v28);
      if (v38) {
        goto LABEL_15;
      }
      if (v37 + 2 < v53) {
        break;
      }
    }
    int64_t v71 = v28;
LABEL_20:
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: Data));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v20, 1, 1, v39);
    uint64_t v72 = 0;
LABEL_21:
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v20, v30, (uint64_t *)&demangling cache variable for type metadata for (key: UserID, value: Data)?);
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: Data));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 48))(v30, 1, v40) == 1)
    {
      swift_release();
      return v76;
    }
    id v41 = (uint64_t *)(v30 + *(int *)(v40 + 48));
    uint64_t v42 = v30;
    uint64_t v44 = *v41;
    unint64_t v43 = v41[1];
    (*v68)(v75, v42, v12);
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSKeyedUnarchiver);
    uint64_t v45 = v74;
    static NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(_:)();
    uint64_t v74 = v45;
    if (v45)
    {
      outlined consume of Data._Representation(v44, v43);
      (*v67)(v75, v12);
      swift_release();
      return swift_bridgeObjectRelease();
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
    char v46 = swift_dynamicCast();
    uint64_t v47 = *v66;
    BOOL v48 = v73;
    if (v46)
    {
      v47(v73, 0, 1, a3);
      uint64_t v49 = v60;
      (*v56)(v60, v48, a3);
      (*v70)(v59, v75, v12);
      uint64_t v50 = v61;
      (*v55)(v61, v49, a3);
      v47(v50, 0, 1, a3);
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      outlined consume of Data._Representation(v44, v43);
      (*v54)(v49, a3);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))*v67)(v75, v12);
    }
    else
    {
      v47(v73, 1, 1, a3);
      outlined consume of Data._Representation(v44, v43);
      (*v67)(v75, v12);
      uint64_t result = (*v57)(v48, v62);
    }
    uint64_t v20 = v65;
    int64_t v28 = v71;
    unint64_t v26 = v72;
  }
  unint64_t v38 = *(void *)(v52 + 8 * (v37 + 2));
  if (v38)
  {
    v37 += 2;
    goto LABEL_12;
  }
  int64_t v28 = v37 + 3;
  if (v37 + 3 >= v53)
  {
    int64_t v71 = v37 + 2;
    goto LABEL_20;
  }
  unint64_t v38 = *(void *)(v52 + 8 * v28);
  if (v38)
  {
LABEL_15:
    int64_t v37 = v28;
LABEL_12:
    int64_t v71 = v37;
    uint64_t v72 = (v38 - 1) & v38;
    unint64_t v29 = __clz(__rbit64(v38)) + (v37 << 6);
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v37 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v37 >= v53)
    {
      int64_t v37 = v51;
      goto LABEL_33;
    }
    unint64_t v38 = *(void *)(v52 + 8 * v37);
    ++v28;
    if (v38) {
      goto LABEL_12;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

Swift::OpaquePointer_optional __swiftcall SAMultiUserInfo.toUserIdToHomeMemberDictionary()()
{
  uint64_t v42 = type metadata accessor for UserID();
  uint64_t v40 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  uint64_t v2 = (char *)&v38 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v3 = objc_msgSend(v0, sel_homeMembers);
  if (v3)
  {
    uint64_t v5 = v3;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAHomeMemberInfo);
    unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v6 >> 62)
    {
LABEL_34:
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v8) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v8 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v8)
      {
LABEL_4:
        unint64_t v44 = v6 & 0xC000000000000001;
        uint64_t v39 = v40 + 16;
        uint64_t v9 = (void (**)(char *, uint64_t))(v40 + 8);
        uint64_t v10 = (void *)MEMORY[0x1E4FBC868];
        uint64_t v11 = 4;
        *(void *)&long long v7 = 138412290;
        long long v38 = v7;
        unint64_t v41 = v6;
        uint64_t v43 = v8;
        while (1)
        {
          if (v44) {
            id v14 = (id)MEMORY[0x1BA9E3990](v11 - 4, v6);
          }
          else {
            id v14 = *(id *)(v6 + 8 * v11);
          }
          uint64_t v15 = v14;
          uint64_t v16 = v11 - 3;
          if (__OFADD__(v11 - 4, 1))
          {
            __break(1u);
LABEL_32:
            __break(1u);
LABEL_33:
            __break(1u);
            goto LABEL_34;
          }
          id v17 = objc_msgSend(v14, sel_sharedUserId);
          if (!v17)
          {
            if (one-time initialization token for conversationBridge != -1) {
              swift_once();
            }
            uint64_t v28 = type metadata accessor for Logger();
            __swift_project_value_buffer(v28, (uint64_t)static Logger.conversationBridge);
            unint64_t v29 = v15;
            uint64_t v19 = Logger.logObject.getter();
            os_log_type_t v30 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v19, v30))
            {
              uint64_t v31 = swift_slowAlloc();
              int64_t v32 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v31 = v38;
              *(void *)(v31 + 4) = v29;
              *int64_t v32 = v29;
              _os_log_impl(&dword_1B9C64000, v19, v30, "Ignoring HomeMemberInfo: %@ for lack of sharedUserId", (uint8_t *)v31, 0xCu);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
              swift_arrayDestroy();
              uint64_t v33 = v32;
              unint64_t v6 = v41;
              MEMORY[0x1BA9E48C0](v33, -1, -1);
              MEMORY[0x1BA9E48C0](v31, -1, -1);
            }
            else
            {

              uint64_t v19 = v29;
            }
            goto LABEL_7;
          }
          uint64_t v18 = v17;
          unint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();

          UserID.init(sharedUserId:)();
          uint64_t v19 = v15;
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v45 = v10;
          unint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v2);
          uint64_t v23 = v10[2];
          BOOL v24 = (v21 & 1) == 0;
          uint64_t v25 = v23 + v24;
          if (__OFADD__(v23, v24)) {
            goto LABEL_32;
          }
          unint64_t v6 = v21;
          if (v10[3] >= v25)
          {
            if (isUniquelyReferenced_nonNull_native)
            {
              uint64_t v10 = v45;
              if ((v21 & 1) == 0) {
                goto LABEL_24;
              }
            }
            else
            {
              specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UserID, SAHomeMemberInfo>);
              uint64_t v10 = v45;
              if ((v6 & 1) == 0) {
                goto LABEL_24;
              }
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v25, isUniquelyReferenced_nonNull_native, &demangling cache variable for type metadata for _DictionaryStorage<UserID, SAHomeMemberInfo>);
            unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v2);
            if ((v6 & 1) != (v27 & 1))
            {
              int64_t v37 = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              goto LABEL_38;
            }
            unint64_t v22 = v26;
            uint64_t v10 = v45;
            if ((v6 & 1) == 0)
            {
LABEL_24:
              v10[(v22 >> 6) + 8] |= 1 << v22;
              (*(void (**)(unint64_t, char *, uint64_t))(v40 + 16))(v10[6] + *(void *)(v40 + 72) * v22, v2, v42);
              *(void *)(v10[7] + 8 * v22) = v19;
              uint64_t v34 = v10[2];
              BOOL v35 = __OFADD__(v34, 1);
              uint64_t v36 = v34 + 1;
              if (v35) {
                goto LABEL_33;
              }
              void v10[2] = v36;
              goto LABEL_6;
            }
          }
          uint64_t v12 = v10[7];

          *(void *)(v12 + 8 * v22) = v19;
LABEL_6:
          swift_bridgeObjectRelease();
          (*v9)(v2, v42);
          unint64_t v6 = v41;
LABEL_7:
          uint64_t v13 = v43;

          ++v11;
          if (v16 == v13)
          {
            swift_bridgeObjectRelease();
            goto LABEL_36;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v10 = (void *)MEMORY[0x1E4FBC868];
  }
  else
  {
    uint64_t v10 = 0;
  }
LABEL_36:
  int64_t v37 = v10;
LABEL_38:
  result.value._rawValue = v37;
  result.is_nil = v4;
  return result;
}

Swift::String __swiftcall AFUserIdentityClassfication.toAceUserIdentityClassification()()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

id SAConfidenceScores.toVoiceIdScoreCard()()
{
  objc_msgSend(v0, sel_processedAudioDurationMilliseconds);
  v22.super.super.Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  v21.super.super.Class isa = NSNumber.init(integerLiteral:)(-1).super.super.isa;
  uint64_t v1 = SAConfidenceScores.scoresDict()();
  id v2 = objc_msgSend(v0, sel_scoringSchemeVersion);
  id v3 = objc_msgSend(v0, sel_thresholdType);
  if (v3)
  {
    Swift::Bool v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  id v8 = objc_msgSend(v0, sel_assetVersion);
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v12 = 0;
  }
  id v13 = objc_msgSend(v0, sel_classifiedUser);
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v17 = 0;
  }
  uint64_t v18 = SAConfidenceScores.af_userIdentityClassification()();
  id v19 = objc_allocWithZone(MEMORY[0x1E4F4E678]);
  return @nonobjc AFVoiceIdScoreCard.init(spIdAudioProcessedDuration:spIdUnknownUserScore:spIdKnownUserScores:spIdUserScoresVersion:spIdScoreThresholdingType:spIdAssetVersion:userClassified:userIdentityClassification:)(v22.super.super.isa, v21.super.super.isa, v1, v2, v5, v7, v10, v12, v15, v17, v18);
}

uint64_t SAConfidenceScores.scoresDict()()
{
  uint64_t v1 = v0;
  id v2 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  id v3 = objc_msgSend(v1, sel_scores);
  if (!v3) {
    return (uint64_t)v2;
  }
  Swift::Bool v4 = v3;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAUserConfidenceScore);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62)
  {
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_4;
    }
    goto LABEL_28;
  }
  uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v6)
  {
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v2;
  }
LABEL_4:
  unint64_t v32 = v5;
  unint64_t v33 = v5 & 0xC000000000000001;
  uint64_t v7 = 4;
  uint64_t v31 = v6;
  while (1)
  {
    if (v33) {
      id v8 = (id)MEMORY[0x1BA9E3990](v7 - 4, v5);
    }
    else {
      id v8 = *(id *)(v5 + 8 * v7);
    }
    uint64_t v9 = v8;
    uint64_t v10 = v7 - 3;
    if (__OFADD__(v7 - 4, 1))
    {
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    id v11 = objc_msgSend(v8, sel_sharedUserId);
    if (v11) {
      break;
    }

LABEL_6:
    ++v7;
    if (v10 == v6) {
      goto LABEL_28;
    }
  }
  uint64_t v12 = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v5 = v14;

  objc_msgSend(v9, sel_confidenceScore);
  v15.super.super.Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v5);
  uint64_t v19 = v2[2];
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20)) {
    goto LABEL_25;
  }
  char v22 = v17;
  if (v2[3] >= v21)
  {
    if (isUniquelyReferenced_nonNull_native)
    {
      if (v17) {
        goto LABEL_19;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, NSNumber>);
      if (v22) {
        goto LABEL_19;
      }
    }
LABEL_21:
    v2[(v18 >> 6) + 8] |= 1 << v18;
    unint64_t v26 = (uint64_t *)(v2[6] + 16 * v18);
    *unint64_t v26 = v13;
    v26[1] = v5;
    *(NSNumber *)(v2[7] + 8 * v18) = v15;
    uint64_t v27 = v2[2];
    BOOL v28 = __OFADD__(v27, 1);
    uint64_t v29 = v27 + 1;
    if (v28) {
      goto LABEL_26;
    }
    v2[2] = v29;
    swift_bridgeObjectRetain();
    goto LABEL_23;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native, &demangling cache variable for type metadata for _DictionaryStorage<String, NSNumber>);
  unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v13, v5);
  if ((v22 & 1) == (v24 & 1))
  {
    unint64_t v18 = v23;
    if ((v22 & 1) == 0) {
      goto LABEL_21;
    }
LABEL_19:
    uint64_t v25 = v2[7];

    *(NSNumber *)(v25 + 8 * v18) = v15;
LABEL_23:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = v31;
    unint64_t v5 = v32;
    goto LABEL_6;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t SAConfidenceScores.af_userIdentityClassification()()
{
  id v1 = objc_msgSend(v0, sel_userIdentityClassification);
  if (v1)
  {
    id v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;

    if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v3 && v6 == v5)
    {
      uint64_t v9 = 4;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8)
      {
        uint64_t v9 = 4;
LABEL_11:
        swift_bridgeObjectRelease();
        return v9;
      }
      if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v3 && v11 == v5)
      {
        uint64_t v9 = 3;
      }
      else
      {
        char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v13)
        {
          uint64_t v9 = 3;
          goto LABEL_11;
        }
        if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v3 && v14 == v5)
        {
          uint64_t v9 = 1;
        }
        else
        {
          char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v15)
          {
            uint64_t v9 = 1;
            goto LABEL_11;
          }
          if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v3 && v16 == v5)
          {
            uint64_t v9 = 2;
          }
          else
          {
            char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v17)
            {
              uint64_t v9 = 2;
              goto LABEL_11;
            }
            if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v3 && v18 == v5)
            {
              uint64_t v9 = 0;
            }
            else
            {
              _stringCompareWithSmolCheck(_:_:expecting:)();
              uint64_t v9 = 0;
            }
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  return 0;
}

id AFVoiceIdScoreCard.toSAConfidenceScores()()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F965C0]), sel_init);
  id v2 = objc_msgSend(v0, sel_spIdAudioProcessedDuration);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = (uint64_t)objc_msgSend(v2, sel_integerValue);
  }
  else
  {
    uint64_t v4 = -1;
  }
  objc_msgSend(v1, sel_setProcessedAudioDurationMilliseconds_, v4);
  id v5 = objc_msgSend(v0, sel_spIdUserScoresVersion);
  objc_msgSend(v1, sel_setScoringSchemeVersion_, v5);

  uint64_t v6 = AFVoiceIdScoreCard.thresholdType()();
  uint64_t v7 = (void *)MEMORY[0x1BA9E2DD0](v6);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setThresholdType_, v7);

  id v8 = objc_msgSend(v0, sel_spIdAssetVersion);
  objc_msgSend(v1, sel_setAssetVersion_, v8);

  id v9 = objc_msgSend(v0, sel_userClassified);
  objc_msgSend(v1, sel_setClassifiedUser_, v9);

  objc_msgSend(v0, sel_userIdentityClassification);
  uint64_t countAndFlagsBits = AFUserIdentityClassfication.toAceUserIdentityClassification()()._countAndFlagsBits;
  uint64_t v11 = (void *)MEMORY[0x1BA9E2DD0](countAndFlagsBits);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setUserIdentityClassification_, v11);

  AFVoiceIdScoreCard.scoresArray()();
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAUserConfidenceScore);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setScores_, isa);

  return v1;
}

uint64_t AFVoiceIdScoreCard.thresholdType()()
{
  id v1 = objc_msgSend(v0, sel_spIdScoreThresholdingType);
  if (v1)
  {
    id v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;

    if (v3 == 0xD000000000000025 && v5 == 0x80000001BA065CA0
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
      || v3 == 0xD000000000000028 && v5 == 0x80000001BA065CD0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
    }
  }

  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

void AFVoiceIdScoreCard.scoresArray()()
{
  uint64_t v24 = MEMORY[0x1E4FBC860];
  id v1 = objc_msgSend(v0, sel_spIdKnownUserScores);
  if (!v1) {
    return;
  }
  id v2 = v1;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  int64_t v4 = 0;
  uint64_t v5 = v3 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(v3 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  if (!v8) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v10 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    char v15 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    uint64_t v18 = *(void **)(*(void *)(v3 + 56) + 8 * i);
    id v19 = objc_allocWithZone(MEMORY[0x1E4F96BB0]);
    swift_bridgeObjectRetain();
    id v20 = v18;
    id v21 = objc_msgSend(v19, sel_init);
    objc_msgSend(v21, sel_setConfidenceScore_, objc_msgSend(v20, sel_integerValue));
    char v22 = (void *)MEMORY[0x1BA9E2DD0](v16, v17);
    swift_bridgeObjectRelease();
    objc_msgSend(v21, sel_setSharedUserId_, v22);

    id v23 = v21;
    MEMORY[0x1BA9E3030]();
    if (*(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    if (v8) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v12 >= v9) {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v9) {
        goto LABEL_24;
      }
      unint64_t v13 = *(void *)(v5 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v9) {
          goto LABEL_24;
        }
        unint64_t v13 = *(void *)(v5 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v8 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v9)
  {
LABEL_24:
    swift_release();
    return;
  }
  unint64_t v13 = *(void *)(v5 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v9) {
      goto LABEL_24;
    }
    unint64_t v13 = *(void *)(v5 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_19;
    }
  }
LABEL_27:
  __break(1u);
}

id @nonobjc AFVoiceIdScoreCard.init(spIdAudioProcessedDuration:spIdUnknownUserScore:spIdKnownUserScores:spIdUserScoresVersion:spIdScoreThresholdingType:spIdAssetVersion:userClassified:userIdentityClassification:)(void *a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int64_t v12 = v11;
  if (a3)
  {
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v20.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    if (a6) {
      goto LABEL_3;
    }
  }
  else
  {
    v20.super.Class isa = 0;
    if (a6)
    {
LABEL_3:
      id v21 = (void *)MEMORY[0x1BA9E2DD0](a5, a6);
      swift_bridgeObjectRelease();
      uint64_t v22 = a10;
      if (a8) {
        goto LABEL_4;
      }
LABEL_8:
      id v23 = 0;
      uint64_t v24 = a11;
      if (v22) {
        goto LABEL_5;
      }
LABEL_9:
      uint64_t v25 = 0;
      goto LABEL_10;
    }
  }
  id v21 = 0;
  uint64_t v22 = a10;
  if (!a8) {
    goto LABEL_8;
  }
LABEL_4:
  id v23 = (void *)MEMORY[0x1BA9E2DD0](a7, a8);
  swift_bridgeObjectRelease();
  uint64_t v24 = a11;
  if (!v22) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v25 = (void *)MEMORY[0x1BA9E2DD0](a9, v22);
  swift_bridgeObjectRelease();
LABEL_10:
  id v26 = objc_msgSend(v12, sel_initWithSpIdAudioProcessedDuration_spIdUnknownUserScore_spIdKnownUserScores_spIdUserScoresVersion_spIdScoreThresholdingType_spIdAssetVersion_userClassified_userIdentityClassification_, a1, a2, v20.super.isa, a4, v21, v23, v25, v24);

  return v26;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (a2)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      id v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      uint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        outlined init with take of Any(v24, v35);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      char v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *char v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Bool>);
  int64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  BOOL v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    id v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    uint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      uint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        uint64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            uint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    int64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    BOOL v30 = v29[1];
    uint64_t v32 = *(unsigned char *)(*(void *)(v5 + 56) + v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    char v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        char v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    int64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *int64_t v18 = v31;
    v18[1] = v30;
    *(unsigned char *)(*(void *)(v7 + 56) + v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  int64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [String : Bool]>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [String : NSNumber]>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt32 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  void *v35;
  char v36;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UInt32?, [UsoIdentifier]>);
  uint64_t v36 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0;
    BOOL v35 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      unint64_t v10 = ~(-1 << v9);
    }
    else {
      unint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v34 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v18 >= v34) {
          goto LABEL_36;
        }
        unint64_t v19 = v35[v18];
        ++v8;
        if (!v19)
        {
          uint64_t v8 = v18 + 1;
          if (v18 + 1 >= v34) {
            goto LABEL_36;
          }
          unint64_t v19 = v35[v8];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v34)
            {
LABEL_36:
              if ((v36 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v2;
                goto LABEL_43;
              }
              int64_t v33 = 1 << *(unsigned char *)(v5 + 32);
              if (v33 >= 64) {
                bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *BOOL v35 = -1 << v33;
              }
              uint64_t v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v19 = v35[v20];
            if (!v19)
            {
              while (1)
              {
                uint64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_45;
                }
                if (v8 >= v34) {
                  goto LABEL_36;
                }
                unint64_t v19 = v35[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v8 = v20;
          }
        }
LABEL_21:
        uint64_t v11 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      id v21 = 8 * v17;
      uint64_t v22 = *(void *)(v5 + 48) + v21;
      uint64_t v23 = *(_DWORD *)v22;
      uint64_t v24 = *(unsigned __int8 *)(v22 + 4);
      uint64_t v25 = *(void *)(*(void *)(v5 + 56) + v21);
      if ((v36 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      if (v24)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v23);
      }
      uint64_t result = Hasher._finalize()();
      unint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v27 = result & ~v26;
      char v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        int64_t v13 = __clz(__rbit64((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v29 = 0;
        BOOL v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          uint64_t v31 = v28 == v30;
          if (v28 == v30) {
            char v28 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        int64_t v13 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      unint64_t v14 = 8 * v13;
      char v15 = *(void *)(v7 + 48) + v14;
      *(_DWORD *)char v15 = v23;
      *(unsigned char *)(v15 + 4) = v24;
      *(void *)(*(void *)(v7 + 56) + v14) = v25;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_43:
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [RRCandidate]>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, AffinityScoring>, (void (*)(uint64_t, unsigned char *))outlined init with take of ReferenceResolutionClientProtocol);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, ConversationAction>);
  int64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  BOOL v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    id v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    uint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      uint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        uint64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            uint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    int64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    BOOL v30 = v29[1];
    uint64_t v32 = *(unsigned char *)(*(void *)(v5 + 56) + v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    char v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        char v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    int64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *int64_t v18 = v31;
    v18[1] = v30;
    *(unsigned char *)(*(void *)(v7 + 56) + v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  int64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, ResultCandidateState>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, SASRecognition>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  uint64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      id v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    uint64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    uint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      uint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        unint64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            uint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    int64_t v33 = v32[1];
    BOOL v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    int64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    char v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v27 = 0;
      char v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        BOOL v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    int64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v19 = v34;
    v19[1] = v33;
    int64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *int64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  long long v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [IntentTopic]>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, RemoteFlowPluginPackage>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UInt, ()>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  char v33;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ContextTypeKey, AFContextSnapshot>);
  int64_t v33 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v32 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v31 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      int64_t v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v19 = v18 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v20 >= v31) {
      break;
    }
    id v21 = (void *)(v5 + 64);
    uint64_t v22 = *(void *)(v32 + 8 * v20);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v20 + 1;
      if (v20 + 1 >= v31) {
        goto LABEL_33;
      }
      uint64_t v22 = *(void *)(v32 + 8 * v13);
      if (!v22)
      {
        uint64_t v23 = v20 + 2;
        if (v23 >= v31)
        {
LABEL_33:
          swift_release();
          if ((v33 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v22 = *(void *)(v32 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            int64_t v13 = v23 + 1;
            if (__OFADD__(v23, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v31) {
              goto LABEL_33;
            }
            uint64_t v22 = *(void *)(v32 + 8 * v13);
            ++v23;
            if (v22) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v23;
      }
    }
LABEL_30:
    unint64_t v10 = (v22 - 1) & v22;
    unint64_t v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_31:
    char v28 = *(unsigned char *)(*(void *)(v5 + 48) + v19);
    unint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
    if ((v33 & 1) == 0) {
      swift_unknownObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    char v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v26 = v16 == v25;
        if (v16 == v25) {
          unint64_t v16 = 0;
        }
        v24 |= v26;
        unint64_t v27 = *(void *)(v11 + 8 * v16);
      }
      while (v27 == -1);
      unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(unsigned char *)(*(void *)(v7 + 48) + v17) = v28;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v29;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v21 = (void *)(v5 + 64);
  if ((v33 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  BOOL v30 = 1 << *(unsigned char *)(v5 + 32);
  if (v30 >= 64) {
    bzero(v21, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *id v21 = -1 << v30;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Task<ConversationService.EagerResult, Error>>);
  uint64_t v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  BOOL v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    id v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    uint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      uint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        uint64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            uint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    int64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    unint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    BOOL v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    char v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        char v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    int64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *int64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  int64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  void *v36;
  long long v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AnyEncodable>);
  uint64_t v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      unint64_t v10 = ~(-1 << v9);
    }
    else {
      unint64_t v10 = -1;
    }
    uint64_t v11 = v10 & *(void *)(v5 + 64);
    BOOL v35 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    unint64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        id v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v22 = v21 | (v14 << 6);
      }
      else
      {
        uint64_t v23 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v23 >= v35) {
          goto LABEL_33;
        }
        uint64_t v24 = v36[v23];
        ++v14;
        if (!v24)
        {
          unint64_t v14 = v23 + 1;
          if (v23 + 1 >= v35) {
            goto LABEL_33;
          }
          uint64_t v24 = v36[v14];
          if (!v24)
          {
            uint64_t v25 = v23 + 2;
            if (v25 >= v35)
            {
LABEL_33:
              swift_release();
              uint64_t v3 = v2;
              if (v6)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v24 = v36[v25];
            if (!v24)
            {
              while (1)
              {
                unint64_t v14 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_40;
                }
                if (v14 >= v35) {
                  goto LABEL_33;
                }
                uint64_t v24 = v36[v14];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            unint64_t v14 = v25;
          }
        }
LABEL_30:
        uint64_t v11 = (v24 - 1) & v24;
        uint64_t v22 = __clz(__rbit64(v24)) + (v14 << 6);
      }
      BOOL v30 = 16 * v22;
      uint64_t v31 = (uint64_t *)(*(void *)(v5 + 48) + v30);
      int64_t v33 = *v31;
      uint64_t v32 = v31[1];
      int64_t v37 = *(_OWORD *)(*(void *)(v5 + 56) + v30);
      if ((v6 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_retain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      char v15 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v16 = result & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        int64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v26 = 0;
        unint64_t v27 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          char v28 = v17 == v27;
          if (v17 == v27) {
            unint64_t v17 = 0;
          }
          v26 |= v28;
          unint64_t v29 = *(void *)(v12 + 8 * v17);
        }
        while (v29 == -1);
        int64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      unint64_t v19 = 16 * v18;
      int64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
      *int64_t v20 = v33;
      v20[1] = v32;
      *(_OWORD *)(*(void *)(v8 + 56) + v19) = v37;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  char v33;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<ContextTypeKey, AFContextSnapshot?>);
  int64_t v33 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v32 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v31 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      int64_t v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v19 = v18 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v20 >= v31) {
      break;
    }
    id v21 = (void *)(v5 + 64);
    uint64_t v22 = *(void *)(v32 + 8 * v20);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v20 + 1;
      if (v20 + 1 >= v31) {
        goto LABEL_33;
      }
      uint64_t v22 = *(void *)(v32 + 8 * v13);
      if (!v22)
      {
        uint64_t v23 = v20 + 2;
        if (v23 >= v31)
        {
LABEL_33:
          swift_release();
          if ((v33 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v22 = *(void *)(v32 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            int64_t v13 = v23 + 1;
            if (__OFADD__(v23, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v31) {
              goto LABEL_33;
            }
            uint64_t v22 = *(void *)(v32 + 8 * v13);
            ++v23;
            if (v22) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v23;
      }
    }
LABEL_30:
    unint64_t v10 = (v22 - 1) & v22;
    unint64_t v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_31:
    char v28 = *(unsigned char *)(*(void *)(v5 + 48) + v19);
    unint64_t v29 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
    if ((v33 & 1) == 0) {
      swift_unknownObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    char v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        unint64_t v26 = v16 == v25;
        if (v16 == v25) {
          unint64_t v16 = 0;
        }
        v24 |= v26;
        unint64_t v27 = *(void *)(v11 + 8 * v16);
      }
      while (v27 == -1);
      unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(unsigned char *)(*(void *)(v7 + 48) + v17) = v28;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v29;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v21 = (void *)(v5 + 64);
  if ((v33 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  BOOL v30 = 1 << *(unsigned char *)(v5 + 32);
  if (v30 >= 64) {
    bzero(v21, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *id v21 = -1 << v30;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, InstrumentedStack.TrackedFlowAgent>);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    unint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v10;
    uint64_t v32 = v10;
    if (v10 < 64) {
      uint64_t v11 = ~(-1 << v10);
    }
    else {
      uint64_t v11 = -1;
    }
    int64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v10 + 63) >> 6;
    int64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        int64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        id v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33) {
          goto LABEL_33;
        }
        uint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          uint64_t v8 = v21 + 1;
          if (v21 + 1 >= v33) {
            goto LABEL_33;
          }
          uint64_t v22 = v9[v8];
          if (!v22)
          {
            uint64_t v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v33);
                }
                else {
                  *uint64_t v9 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                uint64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                uint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v8 = v23;
          }
        }
LABEL_30:
        int64_t v12 = (v22 - 1) & v22;
        int64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      char v28 = 8 * v20;
      unint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      BOOL v30 = *(void *)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      char v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          unint64_t v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          unint64_t v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      int64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, NSExtensionProtocol>, (void (*)(uint64_t, unsigned char *))outlined init with take of ReferenceResolutionClientProtocol);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [LNSystemProtocol : [LinkActionMetadata]]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<LNSystemProtocol, [LinkActionMetadata]>);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  BOOL v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  int64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  unint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      int64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      id v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    uint64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    uint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      unint64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      uint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        uint64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            unint64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            uint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        unint64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    id v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    BOOL v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      int64_t v33 = v31;
      swift_bridgeObjectRetain();
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    char v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      int64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        char v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        unint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      int64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  uint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<String>>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<String, [UsoIdentifier]>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<Int, @Sendable ()>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  void *v15;
  _OWORD *v16;
  long long v17;
  long long v18;
  long long v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  long long *v29;
  long long v30;
  long long v31;
  long long v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, FlowPluginAndBundle>);
  uint64_t v43 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v42 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v41 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      int64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      id v21 = v20 | (v13 << 6);
      goto LABEL_22;
    }
    uint64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v41) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    uint64_t v24 = *(void *)(v42 + 8 * v22);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v41) {
        goto LABEL_34;
      }
      uint64_t v24 = *(void *)(v42 + 8 * v13);
      if (!v24)
      {
        uint64_t v25 = v22 + 2;
        if (v25 >= v41)
        {
LABEL_34:
          swift_release();
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        uint64_t v24 = *(void *)(v42 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v41) {
              goto LABEL_34;
            }
            uint64_t v24 = *(void *)(v42 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        int64_t v13 = v25;
      }
    }
LABEL_21:
    unint64_t v10 = (v24 - 1) & v24;
    id v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_22:
    unint64_t v26 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    char v28 = *v26;
    unint64_t v27 = v26[1];
    unint64_t v29 = (long long *)(*(void *)(v5 + 56) + 80 * v21);
    if (v43)
    {
      unint64_t v44 = *v29;
      BOOL v30 = v29[1];
      uint64_t v31 = v29[2];
      uint64_t v32 = v29[3];
      BOOL v48 = v29[4];
      char v46 = v31;
      uint64_t v47 = v32;
      uint64_t v45 = v30;
    }
    else
    {
      outlined init with copy of FlowPluginAndBundle((uint64_t)v29, (uint64_t)&v44);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    int64_t v33 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v34 = result & ~v33;
    BOOL v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v11 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v34) & ~*(void *)(v11 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v36 = 0;
      int64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        long long v38 = v35 == v37;
        if (v35 == v37) {
          BOOL v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v11 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v14 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    char v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *char v15 = v28;
    v15[1] = v27;
    unint64_t v16 = (_OWORD *)(*(void *)(v7 + 56) + 80 * v14);
    *unint64_t v16 = v44;
    unint64_t v17 = v45;
    int64_t v18 = v46;
    unint64_t v19 = v48;
    v16[3] = v47;
    void v16[4] = v19;
    v16[1] = v17;
    v16[2] = v18;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v23 = (void *)(v5 + 64);
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v5 + 32);
  if (v40 >= 64) {
    bzero(v23, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v40;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2)
{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, [String : Any]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  void *v39;
  void (**v40)(char *, unint64_t, uint64_t);
  uint64_t i;
  int v42;
  void (**v43)(char *, unint64_t, uint64_t);
  uint64_t v44;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, Int>);
  uint64_t v42 = a2;
  unint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (*(void *)(v9 + 16))
  {
    int64_t v37 = v2;
    int64_t v12 = 1 << *(unsigned char *)(v9 + 32);
    int64_t v13 = *(void *)(v9 + 64);
    uint64_t v39 = (void *)(v9 + 64);
    if (v12 < 64) {
      unint64_t v14 = ~(-1 << v12);
    }
    else {
      unint64_t v14 = -1;
    }
    char v15 = v14 & v13;
    long long v38 = (unint64_t)(v12 + 63) >> 6;
    uint64_t v40 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
    unint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    int64_t v18 = 0;
    unint64_t v44 = v5;
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v15)
      {
        int64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        id v21 = v20 | (v18 << 6);
      }
      else
      {
        uint64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v38) {
          goto LABEL_34;
        }
        uint64_t v23 = v39[v22];
        ++v18;
        if (!v23)
        {
          int64_t v18 = v22 + 1;
          if (v22 + 1 >= v38) {
            goto LABEL_34;
          }
          uint64_t v23 = v39[v18];
          if (!v23)
          {
            uint64_t v24 = v22 + 2;
            if (v24 >= v38)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v37;
              if (v42)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v9 + 32);
                if (v36 >= 64) {
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v39 = -1 << v36;
                }
                *(void *)(v9 + 16) = 0;
              }
              break;
            }
            uint64_t v23 = v39[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v38) {
                  goto LABEL_34;
                }
                uint64_t v23 = v39[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v18 = v24;
          }
        }
LABEL_21:
        char v15 = (v23 - 1) & v23;
        id v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      uint64_t v25 = *(void *)(v6 + 72);
      unint64_t v26 = *(void *)(v9 + 48) + v25 * v21;
      if (v42) {
        (*v43)(v8, v26, v44);
      }
      else {
        (*v40)(v8, v26, v44);
      }
      unint64_t v27 = v9;
      char v28 = *(void *)(*(void *)(v9 + 56) + 8 * v21);
      lazy protocol witness table accessor for type UserID and conformance UserID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      unint64_t v29 = -1 << *(unsigned char *)(v11 + 32);
      BOOL v30 = result & ~v29;
      uint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v30) & ~*(void *)(v16 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v32 = 0;
        int64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v34 = v31 == v33;
          if (v31 == v33) {
            uint64_t v31 = 0;
          }
          v32 |= v34;
          BOOL v35 = *(void *)(v16 + 8 * v31);
        }
        while (v35 == -1);
        unint64_t v19 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v43)(*(void *)(v11 + 48) + v25 * v19, v8, v44);
      *(void *)(*(void *)(v11 + 56) + 8 * v19) = v28;
      ++*(void *)(v11 + 16);
      uint64_t v9 = v27;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, MEMORY[0x1E4FA1F68], &demangling cache variable for type metadata for _DictionaryStorage<UUID, Parse>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  void *v41;
  uint64_t v42;
  int v43;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for StringKeyedValue();
  uint64_t v42 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, StringKeyedValue>);
  uint64_t v43 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  unint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  int64_t v12 = *(void *)(v8 + 64);
  unint64_t v41 = (void *)(v8 + 64);
  if (v11 < 64) {
    int64_t v13 = ~(-1 << v11);
  }
  else {
    int64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  uint64_t v39 = v2;
  uint64_t v40 = (unint64_t)(v11 + 63) >> 6;
  char v15 = v9 + 64;
  uint64_t result = swift_retain();
  unint64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      int64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      id v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    uint64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40) {
      break;
    }
    uint64_t v23 = v41;
    uint64_t v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      unint64_t v17 = v22 + 1;
      if (v22 + 1 >= v40) {
        goto LABEL_34;
      }
      uint64_t v24 = v41[v17];
      if (!v24)
      {
        uint64_t v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        uint64_t v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            unint64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v40) {
              goto LABEL_34;
            }
            uint64_t v24 = v41[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v14 = (v24 - 1) & v24;
    id v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    unint64_t v26 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v21);
    char v28 = *v26;
    unint64_t v27 = v26[1];
    unint64_t v29 = *(void *)(v42 + 72);
    BOOL v30 = *(void *)(v8 + 56) + v29 * v21;
    if (v43)
    {
      outlined init with take of StringKeyedValue(v30, (uint64_t)v7);
    }
    else
    {
      outlined init with copy of StringKeyedValue(v30, (uint64_t)v7);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v31 = -1 << *(unsigned char *)(v10 + 32);
    uint64_t v32 = result & ~v31;
    int64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      int64_t v18 = __clz(__rbit64((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v34 = 0;
      BOOL v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v36 = v33 == v35;
        if (v33 == v35) {
          int64_t v33 = 0;
        }
        v34 |= v36;
        int64_t v37 = *(void *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      int64_t v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v10 + 48) + 16 * v18);
    *unint64_t v19 = v28;
    v19[1] = v27;
    uint64_t result = outlined init with take of StringKeyedValue((uint64_t)v7, *(void *)(v10 + 56) + v29 * v18);
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  uint64_t v23 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  long long v38 = 1 << *(unsigned char *)(v8 + 32);
  if (v38 >= 64) {
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v38;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for _DictionaryStorage<UUID, [UUID]>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  void *v41;
  uint64_t v42;
  int v43;

  uint64_t v3 = v2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
  uint64_t v42 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, (topAction: RankedAction, alternativeParses: [CamParse])>);
  uint64_t v43 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  unint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_41;
  }
  uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
  int64_t v12 = *(void *)(v8 + 64);
  unint64_t v41 = (void *)(v8 + 64);
  if (v11 < 64) {
    int64_t v13 = ~(-1 << v11);
  }
  else {
    int64_t v13 = -1;
  }
  unint64_t v14 = v13 & v12;
  uint64_t v39 = v2;
  uint64_t v40 = (unint64_t)(v11 + 63) >> 6;
  char v15 = v9 + 64;
  uint64_t result = swift_retain();
  unint64_t v17 = 0;
  while (1)
  {
    if (v14)
    {
      int64_t v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      id v21 = v20 | (v17 << 6);
      goto LABEL_22;
    }
    uint64_t v22 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v40) {
      break;
    }
    uint64_t v23 = v41;
    uint64_t v24 = v41[v22];
    ++v17;
    if (!v24)
    {
      unint64_t v17 = v22 + 1;
      if (v22 + 1 >= v40) {
        goto LABEL_34;
      }
      uint64_t v24 = v41[v17];
      if (!v24)
      {
        uint64_t v25 = v22 + 2;
        if (v25 >= v40)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v39;
          if ((v43 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        uint64_t v24 = v41[v25];
        if (!v24)
        {
          while (1)
          {
            unint64_t v17 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v17 >= v40) {
              goto LABEL_34;
            }
            uint64_t v24 = v41[v17];
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v17 = v25;
      }
    }
LABEL_21:
    unint64_t v14 = (v24 - 1) & v24;
    id v21 = __clz(__rbit64(v24)) + (v17 << 6);
LABEL_22:
    unint64_t v26 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v21);
    unint64_t v27 = *v26;
    char v28 = v26[1];
    unint64_t v29 = *(void *)(v42 + 72);
    BOOL v30 = *(void *)(v8 + 56) + v29 * v21;
    if (v43)
    {
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v30, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    }
    else
    {
      outlined init with copy of ReferenceResolutionClientProtocol?(v30, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v31 = -1 << *(unsigned char *)(v10 + 32);
    uint64_t v32 = result & ~v31;
    int64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6))) != 0)
    {
      int64_t v18 = __clz(__rbit64((-1 << v32) & ~*(void *)(v15 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v34 = 0;
      BOOL v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v36 = v33 == v35;
        if (v33 == v35) {
          int64_t v33 = 0;
        }
        v34 |= v36;
        int64_t v37 = *(void *)(v15 + 8 * v33);
      }
      while (v37 == -1);
      int64_t v18 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v10 + 48) + 16 * v18);
    *unint64_t v19 = v27;
    v19[1] = v28;
    uint64_t result = outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v7, *(void *)(v10 + 56) + v29 * v18, (uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    ++*(void *)(v10 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  uint64_t v23 = v41;
  if ((v43 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  long long v38 = 1 << *(unsigned char *)(v8 + 32);
  if (v38 >= 64) {
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v38;
  }
  *(void *)(v8 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (**v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  void *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  void *v42;
  void (**v43)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t v45;
  int v46;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UserID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UserID, ContextUpdater>);
  char v46 = a2;
  unint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v9;
  int64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  int64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  unint64_t v14 = *(void *)(v11 + 64);
  uint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    char v15 = ~(-1 << v13);
  }
  else {
    char v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  unint64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  unint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  int64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      uint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      uint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    uint64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    uint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        unint64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    uint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    char v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      BOOL v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      BOOL v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_retain();
    }
    lazy protocol witness table accessor for type UserID and conformance UserID(&lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E4FA26E0]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    uint64_t v32 = result & ~v31;
    int64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      id v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v34 = 0;
      BOOL v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v36 = v33 == v35;
        if (v33 == v35) {
          int64_t v33 = 0;
        }
        v34 |= v36;
        int64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      id v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  uint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  long long v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  void *v40;
  void (**v41)(char *, unint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  void (**v46)(char *, unint64_t, uint64_t);
  _OWORD v47[2];

  uint64_t v3 = v2;
  unint64_t v44 = type metadata accessor for CodingUserInfoKey();
  uint64_t v5 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>);
  uint64_t v45 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  unint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    long long v38 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    int64_t v12 = *(void *)(v8 + 64);
    uint64_t v40 = (void *)(v8 + 64);
    if (v11 < 64) {
      int64_t v13 = ~(-1 << v11);
    }
    else {
      int64_t v13 = -1;
    }
    unint64_t v14 = v13 & v12;
    uint64_t v39 = (unint64_t)(v11 + 63) >> 6;
    unint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    char v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    char v15 = v9 + 64;
    uint64_t result = swift_retain();
    unint64_t v17 = 0;
    uint64_t v42 = v8;
    uint64_t v43 = v7;
    while (1)
    {
      if (v14)
      {
        unint64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        int64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        id v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v39) {
          goto LABEL_34;
        }
        uint64_t v22 = v40[v21];
        ++v17;
        if (!v22)
        {
          unint64_t v17 = v21 + 1;
          if (v21 + 1 >= v39) {
            goto LABEL_34;
          }
          uint64_t v22 = v40[v17];
          if (!v22)
          {
            uint64_t v23 = v21 + 2;
            if (v23 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v45)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v40, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v40 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            uint64_t v22 = v40[v23];
            if (!v22)
            {
              while (1)
              {
                unint64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v39) {
                  goto LABEL_34;
                }
                uint64_t v22 = v40[v17];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            unint64_t v17 = v23;
          }
        }
LABEL_21:
        unint64_t v14 = (v22 - 1) & v22;
        int64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      uint64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 72);
      unint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
      unint64_t v27 = v43;
      char v28 = v44;
      if (v45)
      {
        (*v46)(v43, v26, v44);
        outlined init with take of Any((_OWORD *)(*(void *)(v8 + 56) + 32 * v20), v47);
      }
      else
      {
        (*v41)(v43, v26, v44);
        outlined init with copy of Any(*(void *)(v8 + 56) + 32 * v20, (uint64_t)v47);
      }
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      unint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
      BOOL v30 = result & ~v29;
      uint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
      {
        int64_t v18 = __clz(__rbit64((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v32 = 0;
        int64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v34 = v31 == v33;
          if (v31 == v33) {
            uint64_t v31 = 0;
          }
          v32 |= v34;
          BOOL v35 = *(void *)(v15 + 8 * v31);
        }
        while (v35 == -1);
        int64_t v18 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      (*v46)((char *)(*(void *)(v10 + 48) + v25 * v18), (unint64_t)v27, v28);
      uint64_t result = (uint64_t)outlined init with take of Any(v47, (_OWORD *)(*(void *)(v10 + 56) + 32 * v18));
      ++*(void *)(v10 + 16);
      uint64_t v5 = v24;
      uint64_t v8 = v42;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  void *v40;
  void (**v41)(char *, unint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  void (**v46)(char *, unint64_t, uint64_t);
  _OWORD v47[2];

  uint64_t v3 = v2;
  unint64_t v44 = type metadata accessor for ConversationSessionKey();
  uint64_t v5 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ConversationSessionKey, Sendable>);
  uint64_t v45 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  unint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    long long v38 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    int64_t v12 = *(void *)(v8 + 64);
    uint64_t v40 = (void *)(v8 + 64);
    if (v11 < 64) {
      int64_t v13 = ~(-1 << v11);
    }
    else {
      int64_t v13 = -1;
    }
    unint64_t v14 = v13 & v12;
    uint64_t v39 = (unint64_t)(v11 + 63) >> 6;
    unint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    char v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    char v15 = v9 + 64;
    uint64_t result = swift_retain();
    unint64_t v17 = 0;
    uint64_t v42 = v8;
    uint64_t v43 = v7;
    while (1)
    {
      if (v14)
      {
        unint64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        int64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        id v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v39) {
          goto LABEL_34;
        }
        uint64_t v22 = v40[v21];
        ++v17;
        if (!v22)
        {
          unint64_t v17 = v21 + 1;
          if (v21 + 1 >= v39) {
            goto LABEL_34;
          }
          uint64_t v22 = v40[v17];
          if (!v22)
          {
            uint64_t v23 = v21 + 2;
            if (v23 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v45)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v40, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v40 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            uint64_t v22 = v40[v23];
            if (!v22)
            {
              while (1)
              {
                unint64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v39) {
                  goto LABEL_34;
                }
                uint64_t v22 = v40[v17];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            unint64_t v17 = v23;
          }
        }
LABEL_21:
        unint64_t v14 = (v22 - 1) & v22;
        int64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      uint64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 72);
      unint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
      unint64_t v27 = v43;
      char v28 = v44;
      if (v45)
      {
        (*v46)(v43, v26, v44);
        outlined init with take of Any((_OWORD *)(*(void *)(v8 + 56) + 32 * v20), v47);
      }
      else
      {
        (*v41)(v43, v26, v44);
        outlined init with copy of Any(*(void *)(v8 + 56) + 32 * v20, (uint64_t)v47);
      }
      lazy protocol witness table accessor for type UserID and conformance UserID(&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, MEMORY[0x1E4FA2670]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      unint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
      BOOL v30 = result & ~v29;
      uint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
      {
        int64_t v18 = __clz(__rbit64((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v32 = 0;
        int64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v34 = v31 == v33;
          if (v31 == v33) {
            uint64_t v31 = 0;
          }
          v32 |= v34;
          BOOL v35 = *(void *)(v15 + 8 * v31);
        }
        while (v35 == -1);
        int64_t v18 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      (*v46)((char *)(*(void *)(v10 + 48) + v25 * v18), (unint64_t)v27, v28);
      uint64_t result = (uint64_t)outlined init with take of Any(v47, (_OWORD *)(*(void *)(v10 + 56) + 32 * v18));
      ++*(void *)(v10 + 16);
      uint64_t v5 = v24;
      uint64_t v8 = v42;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  void *v40;
  void (**v41)(char *, unint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  void (**v46)(char *, unint64_t, uint64_t);
  unsigned char v47[32];

  uint64_t v3 = v2;
  unint64_t v44 = type metadata accessor for ConversationSessionKey();
  uint64_t v5 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ConversationSessionKey, Sendable?>);
  uint64_t v45 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  unint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    long long v38 = v2;
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    int64_t v12 = *(void *)(v8 + 64);
    uint64_t v40 = (void *)(v8 + 64);
    if (v11 < 64) {
      int64_t v13 = ~(-1 << v11);
    }
    else {
      int64_t v13 = -1;
    }
    unint64_t v14 = v13 & v12;
    uint64_t v39 = (unint64_t)(v11 + 63) >> 6;
    unint64_t v41 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    char v46 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    char v15 = v9 + 64;
    uint64_t result = swift_retain();
    unint64_t v17 = 0;
    uint64_t v42 = v8;
    uint64_t v43 = v7;
    while (1)
    {
      if (v14)
      {
        unint64_t v19 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        int64_t v20 = v19 | (v17 << 6);
      }
      else
      {
        id v21 = v17 + 1;
        if (__OFADD__(v17, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v39) {
          goto LABEL_34;
        }
        uint64_t v22 = v40[v21];
        ++v17;
        if (!v22)
        {
          unint64_t v17 = v21 + 1;
          if (v21 + 1 >= v39) {
            goto LABEL_34;
          }
          uint64_t v22 = v40[v17];
          if (!v22)
          {
            uint64_t v23 = v21 + 2;
            if (v23 >= v39)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v38;
              if (v45)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v8 + 32);
                if (v36 >= 64) {
                  bzero(v40, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v40 = -1 << v36;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            uint64_t v22 = v40[v23];
            if (!v22)
            {
              while (1)
              {
                unint64_t v17 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v17 >= v39) {
                  goto LABEL_34;
                }
                uint64_t v22 = v40[v17];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            unint64_t v17 = v23;
          }
        }
LABEL_21:
        unint64_t v14 = (v22 - 1) & v22;
        int64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
      }
      uint64_t v24 = v5;
      uint64_t v25 = *(void *)(v5 + 72);
      unint64_t v26 = *(void *)(v8 + 48) + v25 * v20;
      unint64_t v27 = v43;
      char v28 = v44;
      if (v45)
      {
        (*v46)(v43, v26, v44);
        outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(*(void *)(v8 + 56) + 32 * v20, (uint64_t)v47, &demangling cache variable for type metadata for Sendable?);
      }
      else
      {
        (*v41)(v43, v26, v44);
        outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v8 + 56) + 32 * v20, (uint64_t)v47, &demangling cache variable for type metadata for Sendable?);
      }
      lazy protocol witness table accessor for type UserID and conformance UserID(&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, MEMORY[0x1E4FA2670]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      unint64_t v29 = -1 << *(unsigned char *)(v10 + 32);
      BOOL v30 = result & ~v29;
      uint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6))) != 0)
      {
        int64_t v18 = __clz(__rbit64((-1 << v30) & ~*(void *)(v15 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v32 = 0;
        int64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v34 = v31 == v33;
          if (v31 == v33) {
            uint64_t v31 = 0;
          }
          v32 |= v34;
          BOOL v35 = *(void *)(v15 + 8 * v31);
        }
        while (v35 == -1);
        int64_t v18 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      (*v46)((char *)(*(void *)(v10 + 48) + v25 * v18), (unint64_t)v27, v28);
      uint64_t result = outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v47, *(void *)(v10 + 56) + 32 * v18, &demangling cache variable for type metadata for Sendable?);
      ++*(void *)(v10 + 16);
      uint64_t v5 = v24;
      uint64_t v8 = v42;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  int64_t v42;
  void *v43;
  void (**v44)(char *, unint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  int v47;
  void (**v48)(char *, unint64_t, uint64_t);
  char *v49;
  uint64_t v50;

  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UserID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UserID, Data>);
  uint64_t v47 = a2;
  unint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_41;
  }
  unint64_t v41 = v2;
  int64_t v12 = 1 << *(unsigned char *)(v9 + 32);
  int64_t v13 = *(void *)(v9 + 64);
  uint64_t v43 = (void *)(v9 + 64);
  if (v12 < 64) {
    unint64_t v14 = ~(-1 << v12);
  }
  else {
    unint64_t v14 = -1;
  }
  char v15 = v14 & v13;
  uint64_t v42 = (unint64_t)(v12 + 63) >> 6;
  unint64_t v44 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  BOOL v48 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v49 = v8;
  unint64_t v16 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v18 = 0;
  uint64_t v45 = v9;
  char v46 = v6;
  uint64_t v50 = v5;
  while (1)
  {
    if (v15)
    {
      id v21 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      uint64_t v22 = v21 | (v18 << 6);
      goto LABEL_22;
    }
    uint64_t v23 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v23 >= v42) {
      break;
    }
    uint64_t v24 = v43;
    uint64_t v25 = v43[v23];
    ++v18;
    if (!v25)
    {
      int64_t v18 = v23 + 1;
      if (v23 + 1 >= v42) {
        goto LABEL_34;
      }
      uint64_t v25 = v43[v18];
      if (!v25)
      {
        unint64_t v26 = v23 + 2;
        if (v26 >= v42)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v41;
          if ((v47 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        uint64_t v25 = v43[v26];
        if (!v25)
        {
          while (1)
          {
            int64_t v18 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_43;
            }
            if (v18 >= v42) {
              goto LABEL_34;
            }
            uint64_t v25 = v43[v18];
            ++v26;
            if (v25) {
              goto LABEL_21;
            }
          }
        }
        int64_t v18 = v26;
      }
    }
LABEL_21:
    char v15 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v18 << 6);
LABEL_22:
    unint64_t v27 = *(void *)(v6 + 72);
    char v28 = *(void *)(v9 + 48) + v27 * v22;
    if (v47)
    {
      (*v48)(v49, v28, v50);
      unint64_t v29 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      BOOL v30 = *v29;
      uint64_t v31 = v29[1];
    }
    else
    {
      (*v44)(v49, v28, v50);
      uint64_t v32 = (uint64_t *)(*(void *)(v9 + 56) + 16 * v22);
      BOOL v30 = *v32;
      uint64_t v31 = v32[1];
      outlined copy of Data._Representation(*v32, v31);
    }
    lazy protocol witness table accessor for type UserID and conformance UserID(&lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E4FA26E0]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    int64_t v33 = -1 << *(unsigned char *)(v11 + 32);
    uint64_t v34 = result & ~v33;
    BOOL v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v19 = __clz(__rbit64((-1 << v34) & ~*(void *)(v16 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
      uint64_t v6 = v46;
    }
    else
    {
      uint64_t v36 = 0;
      int64_t v37 = (unint64_t)(63 - v33) >> 6;
      uint64_t v6 = v46;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        long long v38 = v35 == v37;
        if (v35 == v37) {
          BOOL v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v16 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v19 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v48)(*(void *)(v11 + 48) + v27 * v19, v49, v50);
    int64_t v20 = (uint64_t *)(*(void *)(v11 + 56) + 16 * v19);
    *int64_t v20 = v30;
    v20[1] = v31;
    ++*(void *)(v11 + 16);
    uint64_t v9 = v45;
  }
  swift_release();
  uint64_t v3 = v41;
  uint64_t v24 = v43;
  if ((v47 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v9 + 32);
  if (v40 >= 64) {
    bzero(v24, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v24 = -1 << v40;
  }
  *(void *)(v9 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v11;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, MEMORY[0x1E4F9FAB8], &demangling cache variable for type metadata for _DictionaryStorage<UUID, ActionCandidate>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, MEMORY[0x1E4FA2880], &demangling cache variable for type metadata for _DictionaryStorage<String, Siri_Nlu_External_ResponseStatus.StatusCode>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, MEMORY[0x1E4FA1EE0], &demangling cache variable for type metadata for _DictionaryStorage<String, Input>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment), &demangling cache variable for type metadata for _DictionaryStorage<UUID, (Input, ActingFlow, SiriEnvironment)>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, &demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment), &demangling cache variable for type metadata for _DictionaryStorage<UUID, (Input, AnyFlow, SiriEnvironment)>);
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  int v48 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = *(void *)(v13 + 64);
  unint64_t v44 = (void *)(v13 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v16;
  uint64_t v42 = v5;
  int64_t v43 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v45 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v47 = v8;
  unint64_t v19 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v20 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  for (i = v13; ; uint64_t v13 = i)
  {
    if (v18)
    {
      unint64_t v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v43) {
      break;
    }
    unint64_t v27 = v44;
    unint64_t v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v28 = v44[v22];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v42;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v22 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v22 >= v43) {
              goto LABEL_34;
            }
            unint64_t v28 = v44[v22];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v22 = v29;
      }
    }
LABEL_21:
    unint64_t v18 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v47 + 72);
    unint64_t v31 = *(void *)(v13 + 48) + v30 * v25;
    if (v48)
    {
      (*v19)(v10, v31, v7);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
    }
    else
    {
      (*v45)(v10, v31, v7);
      uint64_t v32 = *(void *)(*(void *)(v13 + 56) + 8 * v25);
      swift_bridgeObjectRetain();
    }
    lazy protocol witness table accessor for type UserID and conformance UserID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v20 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v23 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v19)(*(void *)(v14 + 48) + v30 * v23, v10, v7);
    *(void *)(*(void *)(v14 + 56) + 8 * v23) = v32;
    ++*(void *)(v14 + 16);
  }
  swift_release();
  uint64_t v5 = v42;
  unint64_t v27 = v44;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v13 + 32);
  if (v40 >= 64) {
    bzero(v27, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v27 = -1 << v40;
  }
  *(void *)(v13 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v5 = v14;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (**v19)(char *, unint64_t, uint64_t);
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  void *v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int64_t v43;
  void *v44;
  void (**v45)(char *, unint64_t, uint64_t);
  uint64_t i;
  uint64_t v47;
  int v48;

  uint64_t v5 = v3;
  uint64_t v7 = type metadata accessor for UserID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  int v48 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v13 = v11;
  uint64_t v14 = v12;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = *(void *)(v13 + 64);
  unint64_t v44 = (void *)(v13 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1 << v15);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v16;
  uint64_t v42 = v5;
  int64_t v43 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v45 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v47 = v8;
  unint64_t v19 = (void (**)(char *, unint64_t, uint64_t))(v8 + 32);
  uint64_t v20 = v12 + 64;
  uint64_t result = swift_retain();
  int64_t v22 = 0;
  for (i = v13; ; uint64_t v13 = i)
  {
    if (v18)
    {
      unint64_t v24 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v26 >= v43) {
      break;
    }
    unint64_t v27 = v44;
    unint64_t v28 = v44[v26];
    ++v22;
    if (!v28)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_34;
      }
      unint64_t v28 = v44[v22];
      if (!v28)
      {
        int64_t v29 = v26 + 2;
        if (v29 >= v43)
        {
LABEL_34:
          swift_release();
          uint64_t v5 = v42;
          if ((v48 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v28 = v44[v29];
        if (!v28)
        {
          while (1)
          {
            int64_t v22 = v29 + 1;
            if (__OFADD__(v29, 1)) {
              goto LABEL_43;
            }
            if (v22 >= v43) {
              goto LABEL_34;
            }
            unint64_t v28 = v44[v22];
            ++v29;
            if (v28) {
              goto LABEL_21;
            }
          }
        }
        int64_t v22 = v29;
      }
    }
LABEL_21:
    unint64_t v18 = (v28 - 1) & v28;
    unint64_t v25 = __clz(__rbit64(v28)) + (v22 << 6);
LABEL_22:
    uint64_t v30 = *(void *)(v47 + 72);
    unint64_t v31 = *(void *)(v13 + 48) + v30 * v25;
    if (v48)
    {
      (*v19)(v10, v31, v7);
      uint64_t v32 = *(id *)(*(void *)(v13 + 56) + 8 * v25);
    }
    else
    {
      (*v45)(v10, v31, v7);
      uint64_t v32 = *(id *)(*(void *)(v13 + 56) + 8 * v25);
    }
    lazy protocol witness table accessor for type UserID and conformance UserID(&lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E4FA26E0]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v33 = -1 << *(unsigned char *)(v14 + 32);
    unint64_t v34 = result & ~v33;
    unint64_t v35 = v34 >> 6;
    if (((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v34) & ~*(void *)(v20 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v36 = 0;
      unint64_t v37 = (unint64_t)(63 - v33) >> 6;
      do
      {
        if (++v35 == v37 && (v36 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v38 = v35 == v37;
        if (v35 == v37) {
          unint64_t v35 = 0;
        }
        v36 |= v38;
        uint64_t v39 = *(void *)(v20 + 8 * v35);
      }
      while (v39 == -1);
      unint64_t v23 = __clz(__rbit64(~v39)) + (v35 << 6);
    }
    *(void *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v19)(*(void *)(v14 + 48) + v30 * v23, v10, v7);
    *(void *)(*(void *)(v14 + 56) + 8 * v23) = v32;
    ++*(void *)(v14 + 16);
  }
  swift_release();
  uint64_t v5 = v42;
  unint64_t v27 = v44;
  if ((v48 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v40 = 1 << *(unsigned char *)(v13 + 32);
  if (v40 >= 64) {
    bzero(v27, ((unint64_t)(v40 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v27 = -1 << v40;
  }
  *(void *)(v13 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  uint64_t *v5 = v14;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3)
{
  int64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *int64_t v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;

  int64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  BOOL v38 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  uint64_t v36 = v3;
  char v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          int64_t v4 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v37) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void **)(*(void *)(v6 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v34 = v33;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  int64_t v4 = v36;
  unint64_t v23 = (void *)(v6 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  int64_t v35 = 1 << *(unsigned char *)(v6 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v35;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *int64_t v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  int64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  char v37 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *unint64_t v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *int64_t v4 = v8;
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  long long v33;

  int64_t v4 = v3;
  uint64_t v6 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v8 = result;
  if (*(void *)(v6 + 16))
  {
    uint64_t v9 = 0;
    uint64_t v10 = (uint64_t *)(v6 + 64);
    unint64_t v11 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v30 = -1 << v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    uint64_t v13 = v12 & *(void *)(v6 + 64);
    uint64_t v31 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v32 = v4;
    int64_t v14 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v21 = v20 | (v9 << 6);
      }
      else
      {
        int64_t v22 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v22 >= v14) {
          goto LABEL_33;
        }
        unint64_t v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          uint64_t v9 = v22 + 1;
          if (v22 + 1 >= v14) {
            goto LABEL_33;
          }
          unint64_t v23 = v10[v9];
          if (!v23)
          {
            unint64_t v24 = v22 + 2;
            if (v24 >= v14)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                int64_t v4 = v32;
                goto LABEL_40;
              }
              if (v31 >= 64) {
                bzero((void *)(v6 + 64), 8 * v14);
              }
              else {
                *uint64_t v10 = v30;
              }
              int64_t v4 = v32;
              *(void *)(v6 + 16) = 0;
              break;
            }
            unint64_t v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                uint64_t v9 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_42;
                }
                if (v9 >= v14) {
                  goto LABEL_33;
                }
                unint64_t v23 = v10[v9];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v9 = v24;
          }
        }
LABEL_30:
        uint64_t v13 = (v23 - 1) & v23;
        unint64_t v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }
      uint64_t v29 = *(void *)(*(void *)(v6 + 48) + 8 * v21);
      uint64_t v33 = *(_OWORD *)(*(void *)(v6 + 56) + 16 * v21);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v16 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v17 = result & ~v16;
      unint64_t v18 = v17 >> 6;
      if (((-1 << v17) & ~*(void *)(v15 + 8 * (v17 >> 6))) != 0)
      {
        unint64_t v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v15 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int64_t v25 = 0;
        char v26 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v27 = v18 == v26;
          if (v18 == v26) {
            unint64_t v18 = 0;
          }
          v25 |= v27;
          BOOL v28 = *(void *)(v15 + 8 * v18);
        }
        while (v28 == -1);
        unint64_t v19 = __clz(__rbit64(~v28)) + (v18 << 6);
      }
      *(void *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(void *)(*(void *)(v8 + 48) + 8 * v19) = v29;
      *(_OWORD *)(*(void *)(v8 + 56) + 16 * v19) = v33;
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *int64_t v4 = v8;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v56 = a3(0);
  uint64_t v8 = *(void *)(v56 - 8);
  MEMORY[0x1F4188790](v56);
  uint64_t v55 = (char *)&v45 - v9;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  int v53 = a2;
  uint64_t v15 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v16 = v15;
  if (!*(void *)(v14 + 16)) {
    goto LABEL_41;
  }
  uint64_t v17 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v18 = *(void *)(v14 + 64);
  uint64_t v47 = (void *)(v14 + 64);
  if (v17 < 64) {
    uint64_t v19 = ~(-1 << v17);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v18;
  uint64_t v45 = v4;
  int64_t v46 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v48 = v8 + 16;
  uint64_t v49 = (void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  uint64_t v51 = v8;
  uint64_t v52 = v11;
  unint64_t v21 = (void (**)(char *, unint64_t, uint64_t))(v11 + 32);
  unint64_t v54 = (uint64_t (**)(unint64_t, char *, uint64_t))(v8 + 32);
  uint64_t v22 = v15 + 64;
  uint64_t result = swift_retain();
  int64_t v24 = 0;
  for (i = v14; ; uint64_t v14 = i)
  {
    if (v20)
    {
      unint64_t v26 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v27 = v26 | (v24 << 6);
      goto LABEL_22;
    }
    int64_t v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v28 >= v46) {
      break;
    }
    uint64_t v29 = v47;
    unint64_t v30 = v47[v28];
    ++v24;
    if (!v30)
    {
      int64_t v24 = v28 + 1;
      if (v28 + 1 >= v46) {
        goto LABEL_34;
      }
      unint64_t v30 = v47[v24];
      if (!v30)
      {
        int64_t v31 = v28 + 2;
        if (v31 >= v46)
        {
LABEL_34:
          swift_release();
          uint64_t v6 = v45;
          if ((v53 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v30 = v47[v31];
        if (!v30)
        {
          while (1)
          {
            int64_t v24 = v31 + 1;
            if (__OFADD__(v31, 1)) {
              goto LABEL_43;
            }
            if (v24 >= v46) {
              goto LABEL_34;
            }
            unint64_t v30 = v47[v24];
            ++v31;
            if (v30) {
              goto LABEL_21;
            }
          }
        }
        int64_t v24 = v31;
      }
    }
LABEL_21:
    unint64_t v20 = (v30 - 1) & v30;
    unint64_t v27 = __clz(__rbit64(v30)) + (v24 << 6);
LABEL_22:
    uint64_t v32 = *(void *)(v52 + 72);
    unint64_t v33 = *(void *)(v14 + 48) + v32 * v27;
    if (v53)
    {
      (*v21)(v13, v33, v10);
      uint64_t v34 = *(void *)(v14 + 56);
      uint64_t v35 = *(void *)(v51 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v51 + 32))(v55, v34 + v35 * v27, v56);
    }
    else
    {
      (*v49)(v13, v33, v10);
      uint64_t v36 = *(void *)(v14 + 56);
      uint64_t v35 = *(void *)(v51 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v51 + 16))(v55, v36 + v35 * v27, v56);
    }
    lazy protocol witness table accessor for type UserID and conformance UserID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v37 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v38 = result & ~v37;
    unint64_t v39 = v38 >> 6;
    if (((-1 << v38) & ~*(void *)(v22 + 8 * (v38 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v38) & ~*(void *)(v22 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v40 = 0;
      unint64_t v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v42 = v39 == v41;
        if (v39 == v41) {
          unint64_t v39 = 0;
        }
        v40 |= v42;
        uint64_t v43 = *(void *)(v22 + 8 * v39);
      }
      while (v43 == -1);
      unint64_t v25 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(void *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    (*v21)((char *)(*(void *)(v16 + 48) + v32 * v25), (unint64_t)v13, v10);
    uint64_t result = (*v54)(*(void *)(v16 + 56) + v35 * v25, v55, v56);
    ++*(void *)(v16 + 16);
  }
  swift_release();
  uint64_t v6 = v45;
  uint64_t v29 = v47;
  if ((v53 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v44 = 1 << *(unsigned char *)(v14 + 32);
  if (v44 >= 64) {
    bzero(v29, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v29 = -1 << v44;
  }
  *(void *)(v14 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v6 = v16;
  return result;
}

{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (**v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  void *v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  void *v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  int64_t v46;
  void *v47;
  void (**v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  int v50;
  char *v51;
  uint64_t v52;

  uint64_t v6 = v4;
  uint64_t v52 = a3(0);
  uint64_t v8 = *(void *)(v52 - 8);
  MEMORY[0x1F4188790](v52);
  uint64_t v51 = (char *)&v44 - v9;
  uint64_t v10 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  uint64_t v50 = a2;
  uint64_t v11 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 64);
  uint64_t v47 = (void *)(v10 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  uint64_t v16 = v15 & v14;
  uint64_t v45 = v4;
  int64_t v46 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v48 = (void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v49 = v8;
  uint64_t v17 = (void (**)(char *, uint64_t, uint64_t))(v8 + 32);
  uint64_t v18 = v11 + 64;
  uint64_t result = swift_retain();
  unint64_t v20 = 0;
  while (1)
  {
    if (v16)
    {
      unint64_t v23 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      int64_t v24 = v23 | (v20 << 6);
      goto LABEL_22;
    }
    unint64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v25 >= v46) {
      break;
    }
    unint64_t v26 = v47;
    unint64_t v27 = v47[v25];
    ++v20;
    if (!v27)
    {
      unint64_t v20 = v25 + 1;
      if (v25 + 1 >= v46) {
        goto LABEL_34;
      }
      unint64_t v27 = v47[v20];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v46)
        {
LABEL_34:
          swift_release();
          uint64_t v6 = v45;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v27 = v47[v28];
        if (!v27)
        {
          while (1)
          {
            unint64_t v20 = v28 + 1;
            if (__OFADD__(v28, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v46) {
              goto LABEL_34;
            }
            unint64_t v27 = v47[v20];
            ++v28;
            if (v27) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v20 = v28;
      }
    }
LABEL_21:
    uint64_t v16 = (v27 - 1) & v27;
    int64_t v24 = __clz(__rbit64(v27)) + (v20 << 6);
LABEL_22:
    uint64_t v29 = *(void *)(v10 + 56);
    unint64_t v30 = v10;
    int64_t v31 = (uint64_t *)(*(void *)(v10 + 48) + 16 * v24);
    uint64_t v32 = *v31;
    unint64_t v33 = v31[1];
    uint64_t v34 = *(void *)(v49 + 72);
    uint64_t v35 = v29 + v34 * v24;
    if (v50)
    {
      (*v17)(v51, v35, v52);
    }
    else
    {
      (*v48)(v51, v35, v52);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v36 = -1 << *(unsigned char *)(v12 + 32);
    uint64_t v37 = result & ~v36;
    unint64_t v38 = v37 >> 6;
    if (((-1 << v37) & ~*(void *)(v18 + 8 * (v37 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v37) & ~*(void *)(v18 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v39 = 0;
      char v40 = (unint64_t)(63 - v36) >> 6;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        unint64_t v41 = v38 == v40;
        if (v38 == v40) {
          unint64_t v38 = 0;
        }
        v39 |= v41;
        BOOL v42 = *(void *)(v18 + 8 * v38);
      }
      while (v42 == -1);
      unint64_t v21 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t v22 = (void *)(*(void *)(v12 + 48) + 16 * v21);
    *uint64_t v22 = v32;
    v22[1] = v33;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 56) + v34 * v21, v51, v52);
    ++*(void *)(v12 + 16);
    uint64_t v10 = v30;
  }
  swift_release();
  uint64_t v6 = v45;
  unint64_t v26 = v47;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v43 = 1 << *(unsigned char *)(v10 + 32);
  if (v43 >= 64) {
    bzero(v26, ((unint64_t)(v43 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v26 = -1 << v43;
  }
  *(void *)(v10 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v6 = v12;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2, uint64_t *a3, void (*a4)(uint64_t, unsigned char *))
{
  uint64_t v6 = v4;
  uint64_t v8 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a3);
  char v38 = a2;
  uint64_t v9 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v10 = v9;
  if (*(void *)(v8 + 16))
  {
    uint64_t v11 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v37 = (void *)(v8 + 64);
    if (v11 < 64) {
      uint64_t v12 = ~(-1 << v11);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & *(void *)(v8 + 64);
    int64_t v36 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = v9 + 64;
    uint64_t result = swift_retain();
    int64_t v16 = 0;
    while (1)
    {
      if (v13)
      {
        unint64_t v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v20 = v19 | (v16 << 6);
      }
      else
      {
        int64_t v21 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v36) {
          goto LABEL_34;
        }
        unint64_t v22 = v37[v21];
        ++v16;
        if (!v22)
        {
          int64_t v16 = v21 + 1;
          if (v21 + 1 >= v36) {
            goto LABEL_34;
          }
          unint64_t v22 = v37[v16];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v36)
            {
LABEL_34:
              swift_release();
              uint64_t v6 = v4;
              if (v38)
              {
                uint64_t v35 = 1 << *(unsigned char *)(v8 + 32);
                if (v35 >= 64) {
                  bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v35;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v37[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v16 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v16 >= v36) {
                  goto LABEL_34;
                }
                unint64_t v22 = v37[v16];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v16 = v23;
          }
        }
LABEL_21:
        unint64_t v13 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v16 << 6);
      }
      int64_t v24 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v20);
      uint64_t v26 = *v24;
      uint64_t v25 = v24[1];
      uint64_t v27 = *(void *)(v8 + 56) + 40 * v20;
      if (v38)
      {
        a4(v27, v39);
      }
      else
      {
        outlined init with copy of ReferenceResolutionClientProtocol(v27, (uint64_t)v39);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v28 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v14 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v29) & ~*(void *)(v14 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v14 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v17 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = (void *)(*(void *)(v10 + 48) + 16 * v17);
      *uint64_t v18 = v26;
      v18[1] = v25;
      uint64_t result = ((uint64_t (*)(unsigned char *, unint64_t))a4)(v39, *(void *)(v10 + 56) + 40 * v17);
      ++*(void *)(v10 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v6 = v10;
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v57 = a3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(a3);
  uint64_t v51 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v56 = (uint64_t)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  int v53 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v4;
  __swift_instantiateConcreteTypeFromMangledName(a4);
  int v52 = a2;
  uint64_t v14 = v13;
  uint64_t v15 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v16 = v15;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v17 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v18 = *(void *)(v13 + 64);
  uint64_t v48 = (void *)(v13 + 64);
  if (v17 < 64) {
    uint64_t v19 = ~(-1 << v17);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v18;
  int64_t v46 = v4;
  int64_t v47 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v49 = (void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  unint64_t v54 = (void (**)(char *, unint64_t, uint64_t))(v11 + 32);
  uint64_t v55 = v10;
  uint64_t v21 = v15 + 64;
  uint64_t result = swift_retain();
  int64_t v23 = 0;
  uint64_t v50 = v14;
  int64_t v24 = v53;
  while (1)
  {
    if (v20)
    {
      unint64_t v26 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v27 = v26 | (v23 << 6);
      goto LABEL_22;
    }
    int64_t v28 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v28 >= v47) {
      break;
    }
    unint64_t v29 = v48;
    unint64_t v30 = v48[v28];
    ++v23;
    if (!v30)
    {
      int64_t v23 = v28 + 1;
      if (v28 + 1 >= v47) {
        goto LABEL_34;
      }
      unint64_t v30 = v48[v23];
      if (!v30)
      {
        int64_t v31 = v28 + 2;
        if (v31 >= v47)
        {
LABEL_34:
          swift_release();
          uint64_t v6 = v46;
          if ((v52 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v30 = v48[v31];
        if (!v30)
        {
          while (1)
          {
            int64_t v23 = v31 + 1;
            if (__OFADD__(v31, 1)) {
              goto LABEL_43;
            }
            if (v23 >= v47) {
              goto LABEL_34;
            }
            unint64_t v30 = v48[v23];
            ++v31;
            if (v30) {
              goto LABEL_21;
            }
          }
        }
        int64_t v23 = v31;
      }
    }
LABEL_21:
    unint64_t v20 = (v30 - 1) & v30;
    unint64_t v27 = __clz(__rbit64(v30)) + (v23 << 6);
    int64_t v24 = v53;
LABEL_22:
    uint64_t v32 = v11;
    uint64_t v33 = *(void *)(v11 + 72);
    unint64_t v34 = *(void *)(v14 + 48) + v33 * v27;
    if (v52)
    {
      (*v54)(v24, v34, v55);
      uint64_t v35 = *(void *)(v14 + 56);
      uint64_t v36 = *(void *)(v51 + 72);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v35 + v36 * v27, v56, v57);
    }
    else
    {
      (*v49)(v24, v34, v55);
      uint64_t v37 = *(void *)(v14 + 56);
      uint64_t v36 = *(void *)(v51 + 72);
      outlined init with copy of ReferenceResolutionClientProtocol?(v37 + v36 * v27, v56, v57);
    }
    lazy protocol witness table accessor for type UserID and conformance UserID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v38 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v39 = result & ~v38;
    unint64_t v40 = v39 >> 6;
    if (((-1 << v39) & ~*(void *)(v21 + 8 * (v39 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v39) & ~*(void *)(v21 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
      int64_t v24 = v53;
    }
    else
    {
      char v41 = 0;
      unint64_t v42 = (unint64_t)(63 - v38) >> 6;
      int64_t v24 = v53;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v43 = v40 == v42;
        if (v40 == v42) {
          unint64_t v40 = 0;
        }
        v41 |= v43;
        uint64_t v44 = *(void *)(v21 + 8 * v40);
      }
      while (v44 == -1);
      unint64_t v25 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(void *)(v21 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    (*v54)((char *)(*(void *)(v16 + 48) + v33 * v25), (unint64_t)v24, v55);
    uint64_t result = outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v56, *(void *)(v16 + 56) + v36 * v25, v57);
    ++*(void *)(v16 + 16);
    uint64_t v14 = v50;
    uint64_t v11 = v32;
  }
  swift_release();
  uint64_t v6 = v46;
  unint64_t v29 = v48;
  if ((v52 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v45 = 1 << *(unsigned char *)(v14 + 32);
  if (v45 >= 64) {
    bzero(v29, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v29 = -1 << v45;
  }
  *(void *)(v14 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v6 = v16;
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          uint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          uint64_t v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *uint64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *uint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        long long v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        Swift::Int v10 = v9 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        unint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
        uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          *uint64_t v12 = *v13;
        }
        uint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]))
                                    - 8)
                        + 72);
        uint64_t v16 = v15 * v3;
        uint64_t result = v14 + v15 * v3;
        uint64_t v17 = v15 * v6;
        uint64_t v18 = v14 + v15 * v6 + v15;
        if (v16 < v17 || result >= v18)
        {
          uint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v16 == v17) {
            goto LABEL_6;
          }
          uint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    BOOL v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    BOOL v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  int64_t v24 = __OFSUB__(v23, 1);
  unint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        long long v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        Swift::Int v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          unint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  BOOL v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        long long v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        Swift::Int v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          unint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    uint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  BOOL v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned char *v11;
  unsigned char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t result = Hasher._finalize()();
        long long v9 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v9 < v8) {
            goto LABEL_5;
          }
        }
        else if (v9 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v9)
        {
LABEL_11:
          Swift::Int v10 = *(void *)(a2 + 48);
          unint64_t v11 = (unsigned char *)(v10 + v3);
          uint64_t v12 = (unsigned char *)(v10 + v6);
          if (v3 != v6 || v11 >= v12 + 1) {
            *unint64_t v11 = *v12;
          }
          uint64_t v13 = *(void *)(a2 + 56);
          uint64_t v14 = (void *)(v13 + 8 * v3);
          uint64_t v15 = (void *)(v13 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v14 >= v15 + 1))
          {
            *uint64_t v14 = *v15;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v17 = *v16;
    uint64_t v18 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v18 = *v16;
    uint64_t v17 = (-1 << result) - 1;
  }
  *uint64_t v16 = v18 & v17;
  uint64_t v19 = *(void *)(a2 + 16);
  uint64_t v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(void *)(a2 + 48);
        Swift::Int v10 = (void *)(v9 + 8 * v6);
        uint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *uint64_t v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            uint64_t v16 = (void *)(v15 + 8 * v3);
            uint64_t v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *uint64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  long long v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  long long *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        unint64_t v11 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        uint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          uint64_t v13 = *(void *)(a2 + 48);
          uint64_t v14 = (_OWORD *)(v13 + 16 * v3);
          uint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *uint64_t v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          uint64_t v17 = v16 + 40 * v3;
          uint64_t v18 = (long long *)(v16 + 40 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= (unint64_t)v18 + 40))
          {
            long long v9 = *v18;
            Swift::Int v10 = v18[1];
            *(void *)(v17 + 32) = *((void *)v18 + 4);
            *(_OWORD *)uint64_t v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  BOOL v22 = *(void *)(a2 + 16);
  uint64_t v23 = __OFSUB__(v22, 1);
  int64_t v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  void *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(void *)(a2 + 48);
        Swift::Int v10 = (void *)(v9 + 8 * v6);
        uint64_t result = static Hasher._hash(seed:_:)();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            uint64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *uint64_t v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            uint64_t v16 = (_OWORD *)(v15 + 16 * v3);
            uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *uint64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *uint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  const void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        long long v9 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease();
        Swift::Int v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          unint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          uint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          uint64_t v14 = *(void *)(a2 + 56);
          uint64_t result = v14 + 80 * v3;
          uint64_t v15 = (const void *)(v14 + 80 * v6);
          if (v3 != v6 || (int64_t v3 = v6, result >= (unint64_t)v15 + 80))
          {
            uint64_t result = (unint64_t)memmove((void *)result, v15, 0x50uLL);
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v17 = *v16;
    uint64_t v18 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v18 = *v16;
    uint64_t v17 = (-1 << result) - 1;
  }
  *uint64_t v16 = v18 & v17;
  uint64_t v19 = *(void *)(a2 + 16);
  uint64_t v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1F4188790](v4);
  unint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a2 + 64;
  uint64_t v10 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v11 = (a1 + 1) & ~v10;
  if (((1 << v11) & *(void *)(a2 + 64 + 8 * (v11 >> 6))) != 0)
  {
    uint64_t v12 = ~v10;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v9 + 8 * (v11 >> 6)) & (1 << v11)) != 0)
    {
      unint64_t v39 = (result + 1) & v12;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v40 = v13;
      uint64_t v37 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      uint64_t v38 = v14;
      uint64_t v36 = v12;
      do
      {
        uint64_t v16 = v9;
        uint64_t v17 = v15;
        int64_t v18 = v15 * v11;
        v38(v8, *(void *)(a2 + 48) + v15 * v11, v4);
        lazy protocol witness table accessor for type UserID and conformance UserID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v37)(v8, v4);
        unint64_t v20 = v19 & v12;
        if (a1 >= (uint64_t)v39)
        {
          if (v20 >= v39 && a1 >= (uint64_t)v20)
          {
LABEL_16:
            if (v17 * a1 < v18
              || *(void *)(a2 + 48) + v17 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v18 + v17))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v17 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v23 = *(void *)(a2 + 56);
            uint64_t v24 = *(void *)(*(void *)(type metadata accessor for Parse() - 8) + 72);
            int64_t v25 = v24 * a1;
            unint64_t result = v23 + v24 * a1;
            int64_t v26 = v24 * v11;
            unint64_t v27 = v23 + v24 * v11 + v24;
            BOOL v28 = v25 < v26 || result >= v27;
            uint64_t v9 = v16;
            if (v28)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v11;
              uint64_t v12 = v36;
            }
            else
            {
              a1 = v11;
              uint64_t v12 = v36;
              if (v25 != v26)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v11;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v20 >= v39 || a1 >= (uint64_t)v20)
        {
          goto LABEL_16;
        }
        uint64_t v9 = v16;
LABEL_5:
        unint64_t v11 = (v11 + 1) & v12;
        uint64_t v15 = v17;
      }
      while (((*(void *)(v9 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
    }
    unint64_t v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    unint64_t v29 = (uint64_t *)(v9 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  *unint64_t v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;

  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1F4188790](v4);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  uint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    unint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      uint64_t v31 = (result + 1) & v11;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      BOOL v33 = v5 + 16;
      uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        uint64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        lazy protocol witness table accessor for type UserID and conformance UserID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        int64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            BOOL v22 = *(void *)(a2 + 56);
            uint64_t v23 = (void *)(v22 + 8 * a1);
            uint64_t v24 = (void *)(v22 + 8 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              *uint64_t v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        uint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    int64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    int64_t v26 = *v25;
    unint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    int64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    unint64_t v27 = *v25;
    int64_t v26 = (-1 << a1) - 1;
  }
  *int64_t v25 = v27 & v26;
  BOOL v28 = *(void *)(a2 + 16);
  unint64_t v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  uint64_t (**v16)(char *, uint64_t);
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  long long v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  void (*v35)(char *, unint64_t, uint64_t);
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1F4188790](v4);
  unint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  uint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    unint64_t v11 = ~v9;
    uint64_t v38 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v38;
    if ((*(void *)(v38 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      uint64_t v36 = (result + 1) & v11;
      uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v35 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v37 = v13;
      uint64_t v16 = (uint64_t (**)(char *, uint64_t))(v13 - 8);
      do
      {
        uint64_t v17 = v15 * v10;
        v35(v8, *(void *)(a2 + 48) + v15 * v10, v4);
        int64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v16)(v8, v4);
        uint64_t v19 = v18 & v11;
        if (a1 >= (uint64_t)v36)
        {
          if (v19 >= v36 && a1 >= (uint64_t)v19)
          {
LABEL_17:
            BOOL v22 = *(void *)(a2 + 48);
            unint64_t result = v22 + v15 * a1;
            uint64_t v23 = v22 + v17 + v15;
            if (v15 * a1 < v17 || result >= v23)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v17)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            int64_t v25 = *(void *)(a2 + 56);
            int64_t v26 = (_OWORD *)(v25 + 32 * a1);
            unint64_t v27 = (_OWORD *)(v25 + 32 * v10);
            uint64_t v12 = v38;
            if (a1 != v10 || (a1 = v10, v26 >= v27 + 2))
            {
              BOOL v28 = v27[1];
              *int64_t v26 = *v27;
              v26[1] = v28;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v36 || a1 >= (uint64_t)v19)
        {
          goto LABEL_17;
        }
        uint64_t v12 = v38;
LABEL_5:
        uint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    unint64_t v29 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v30 = *v29;
    uint64_t v31 = (-1 << a1) - 1;
  }
  else
  {
    unint64_t v29 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v29;
    uint64_t v30 = (-1 << a1) - 1;
  }
  *unint64_t v29 = v31 & v30;
  uint64_t v32 = *(void *)(a2 + 16);
  BOOL v33 = __OFSUB__(v32, 1);
  uint64_t v34 = v32 - 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v34;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  long long v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;

  uint64_t v4 = type metadata accessor for ConversationSessionKey();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1F4188790](v4);
  unint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  uint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    unint64_t v11 = ~v9;
    uint64_t v35 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v35;
    if ((*(void *)(v35 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      uint64_t v32 = (result + 1) & v11;
      BOOL v33 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v34 = v5 + 16;
      uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        uint64_t v16 = v14 * v10;
        v33(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        lazy protocol witness table accessor for type UserID and conformance UserID(&lazy protocol witness table cache variable for type ConversationSessionKey and conformance ConversationSessionKey, MEMORY[0x1E4FA2670]);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        int64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v32)
        {
          if (v18 >= v32 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            BOOL v22 = *(void *)(a2 + 56);
            uint64_t v23 = (_OWORD *)(v22 + 32 * a1);
            uint64_t v24 = (_OWORD *)(v22 + 32 * v10);
            uint64_t v12 = v35;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 2))
            {
              int64_t v25 = v24[1];
              *uint64_t v23 = *v24;
              v23[1] = v25;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v32 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v35;
        uint64_t v14 = v15;
LABEL_5:
        uint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    int64_t v26 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    unint64_t v27 = *v26;
    BOOL v28 = (-1 << a1) - 1;
  }
  else
  {
    int64_t v26 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    BOOL v28 = *v26;
    unint64_t v27 = (-1 << a1) - 1;
  }
  *int64_t v26 = v28 & v27;
  unint64_t v29 = *(void *)(a2 + 16);
  uint64_t v30 = __OFSUB__(v29, 1);
  uint64_t v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v31;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;

  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1F4188790](v4);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  uint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    unint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      uint64_t v31 = (result + 1) & v11;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      BOOL v33 = v5 + 16;
      uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        uint64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        lazy protocol witness table accessor for type UserID and conformance UserID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        int64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            BOOL v22 = *(void *)(a2 + 56);
            uint64_t v23 = (_OWORD *)(v22 + 16 * a1);
            uint64_t v24 = (_OWORD *)(v22 + 16 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              *uint64_t v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        uint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    int64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    int64_t v26 = *v25;
    unint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    int64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    unint64_t v27 = *v25;
    int64_t v26 = (-1 << a1) - 1;
  }
  *int64_t v25 = v27 & v26;
  BOOL v28 = *(void *)(a2 + 16);
  unint64_t v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;

  uint64_t v4 = type metadata accessor for UserID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t result = MEMORY[0x1F4188790](v4);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(a2 + 32);
  uint64_t v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(void *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    unint64_t v11 = ~v9;
    uint64_t v34 = a2 + 64;
    unint64_t result = _HashTable.previousHole(before:)();
    uint64_t v12 = v34;
    if ((*(void *)(v34 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      uint64_t v31 = (result + 1) & v11;
      uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      BOOL v33 = v5 + 16;
      uint64_t v13 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
      uint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        uint64_t v16 = v14 * v10;
        v32(v8, *(void *)(a2 + 48) + v14 * v10, v4);
        lazy protocol witness table accessor for type UserID and conformance UserID(&lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E4FA26E0]);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v13)(v8, v4);
        int64_t v18 = v17 & v11;
        if (a1 >= (uint64_t)v31)
        {
          if (v18 >= v31 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            uint64_t v21 = *(void *)(a2 + 48);
            uint64_t v14 = v15;
            unint64_t result = v21 + v15 * a1;
            if (v15 * a1 < v16 || result >= v21 + v16 + v15)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
            }
            BOOL v22 = *(void *)(a2 + 56);
            uint64_t v23 = (void *)(v22 + 8 * a1);
            uint64_t v24 = (void *)(v22 + 8 * v10);
            uint64_t v12 = v34;
            if (a1 != v10 || (a1 = v10, v23 >= v24 + 1))
            {
              *uint64_t v23 = *v24;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v31 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v34;
        uint64_t v14 = v15;
LABEL_5:
        uint64_t v10 = (v10 + 1) & v11;
      }
      while (((*(void *)(v12 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    int64_t v25 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    int64_t v26 = *v25;
    unint64_t v27 = (-1 << a1) - 1;
  }
  else
  {
    int64_t v25 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    unint64_t v27 = *v25;
    int64_t v26 = (-1 << a1) - 1;
  }
  *int64_t v25 = v27 & v26;
  BOOL v28 = *(void *)(a2 + 16);
  unint64_t v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  return specialized _NativeDictionary._delete(at:)(a1, a2, &demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment));
}

{
  return specialized _NativeDictionary._delete(at:)(a1, a2, &demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment));
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t a1, uint64_t a2)
{
  return specialized _NativeDictionary._delete(at:)(a1, a2, MEMORY[0x1E4FA2880]);
}

{
  return specialized _NativeDictionary._delete(at:)(a1, a2, MEMORY[0x1E4FA1EE0]);
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2, uint64_t (*a3)(void))
{
  int64_t v4 = result;
  uint64_t v5 = a2 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(void *)(a2 + 64 + 8 * (v7 >> 6))) != 0)
  {
    uint64_t v9 = ~v6;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      unint64_t v10 = (result + 1) & v9;
      while (1)
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v11 = Hasher._finalize()();
        unint64_t result = swift_bridgeObjectRelease();
        unint64_t v12 = v11 & v9;
        if (v4 >= (uint64_t)v10) {
          break;
        }
        if (v12 < v10) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v13 = *(void *)(a2 + 48);
        uint64_t v14 = (_OWORD *)(v13 + 16 * v4);
        uint64_t v15 = (_OWORD *)(v13 + 16 * v7);
        if (v4 != v7 || v14 >= v15 + 1) {
          *uint64_t v14 = *v15;
        }
        uint64_t v16 = *(void *)(a2 + 56);
        uint64_t v17 = *(void *)(*(void *)(a3(0) - 8) + 72);
        int64_t v18 = v17 * v4;
        unint64_t result = v16 + v17 * v4;
        int64_t v19 = v17 * v7;
        unint64_t v20 = v16 + v17 * v7 + v17;
        if (v18 < v19 || result >= v20)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v4 = v7;
          if (v18 == v19) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v4 = v7;
LABEL_6:
        unint64_t v7 = (v7 + 1) & v9;
        if (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
          goto LABEL_21;
        }
      }
      if (v12 < v10) {
        goto LABEL_6;
      }
LABEL_11:
      if (v4 < (uint64_t)v12) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_21:
    BOOL v22 = (uint64_t *)(v5 + 8 * ((unint64_t)v4 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1 << v4) - 1;
  }
  else
  {
    BOOL v22 = (uint64_t *)(v5 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1 << result) - 1;
  }
  *BOOL v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v37 = a3;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t result = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2 + 64;
  uint64_t v11 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v12 = (a1 + 1) & ~v11;
  if (((1 << v12) & *(void *)(a2 + 64 + 8 * (v12 >> 6))) != 0)
  {
    uint64_t v13 = ~v11;
    unint64_t result = _HashTable.previousHole(before:)();
    if ((*(void *)(v10 + 8 * (v12 >> 6)) & (1 << v12)) != 0)
    {
      unint64_t v40 = (result + 1) & v13;
      uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
      uint64_t v14 = v6 + 16;
      uint64_t v16 = *(void *)(v14 + 56);
      uint64_t v41 = v14;
      uint64_t v38 = (uint64_t (**)(char *, uint64_t))(v14 - 8);
      unint64_t v39 = v15;
      uint64_t v36 = v13;
      do
      {
        uint64_t v17 = v10;
        uint64_t v18 = v16;
        int64_t v19 = v16 * v12;
        v39(v9, *(void *)(a2 + 48) + v16 * v12, v5);
        lazy protocol witness table accessor for type UserID and conformance UserID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)();
        unint64_t result = (*v38)(v9, v5);
        unint64_t v21 = v20 & v13;
        if (a1 >= (uint64_t)v40)
        {
          if (v21 >= v40 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            if (v18 * a1 < v19
              || *(void *)(a2 + 48) + v18 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v19 + v18))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v18 * a1 != v19)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v24 = *(void *)(a2 + 56);
            uint64_t v25 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(v37) - 8) + 72);
            int64_t v26 = v25 * a1;
            unint64_t result = v24 + v25 * a1;
            int64_t v27 = v25 * v12;
            unint64_t v28 = v24 + v25 * v12 + v25;
            BOOL v29 = v26 < v27 || result >= v28;
            uint64_t v10 = v17;
            if (v29)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack();
              a1 = v12;
              uint64_t v13 = v36;
            }
            else
            {
              a1 = v12;
              uint64_t v13 = v36;
              if (v26 != v27)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront();
                a1 = v12;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v40 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        uint64_t v10 = v17;
LABEL_5:
        unint64_t v12 = (v12 + 1) & v13;
        uint64_t v16 = v18;
      }
      while (((*(void *)(v10 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
    }
    uint64_t v30 = (uint64_t *)(v10 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v30 = (uint64_t *)(v10 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1 << a1) - 1;
  }
  *uint64_t v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  unint64_t result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  *(unsigned char *)(a5[7] + result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for Parse();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a3, v11);
  uint64_t v13 = a4[2];
  uint64_t v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UserID();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, MEMORY[0x1E4FBBC50], (uint64_t (*)(uint64_t, uint64_t))outlined init with take of Any);
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, MEMORY[0x1E4FA2670], (uint64_t (*)(uint64_t, uint64_t))outlined init with take of Any);
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, &demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment));
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, &demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment));
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = (void *)(a5[6] + 16 * a1);
  *uint64_t v8 = a2;
  v8[1] = a3;
  uint64_t v9 = a5[7];
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
  uint64_t result = outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a4, v9 + *(void *)(*(void *)(v10 - 8) + 72) * a1, (uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
  uint64_t v12 = a5[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a5[2] = v14;
  }
  return result;
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, a5, MEMORY[0x1E4FA2880]);
}

{
  return specialized _NativeDictionary._insert(at:key:value:)(a1, a2, a3, a4, a5, MEMORY[0x1E4FA1EE0]);
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  uint64_t v6 = (void *)(a6[6] + 16 * result);
  *uint64_t v6 = a2;
  v6[1] = a3;
  BOOL v7 = (void *)(a6[7] + 16 * result);
  *BOOL v7 = a4;
  v7[1] = a5;
  uint64_t v8 = a6[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a6[2] = v10;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

{
  void *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(void *)(a5[6] + 8 * result) = a2;
  uint64_t v5 = (void *)(a5[7] + 16 * result);
  void *v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(void), uint64_t (*a6)(uint64_t, uint64_t))
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v11 = a4[6];
  uint64_t v12 = a5(0);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v11 + *(void *)(*(void *)(v12 - 8) + 72) * a1, a2, v12);
  uint64_t result = a6(a3, a4[7] + 32 * a1);
  uint64_t v14 = a4[2];
  BOOL v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    a4[2] = v16;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(void))
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  BOOL v9 = (void *)(a5[6] + 16 * a1);
  *BOOL v9 = a2;
  v9[1] = a3;
  uint64_t v10 = a5[7];
  uint64_t v11 = a6(0);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a4, v11);
  uint64_t v13 = a5[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a5[2] = v15;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a4[6] + result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = 8 * result;
  *(void *)(a4[6] + v4) = a2;
  *(void *)(a4[7] + v4) = a3;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2] = v7;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, long long *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  BOOL v6 = (void *)(a5[6] + 16 * a1);
  *BOOL v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of ReferenceResolutionClientProtocol(a4, a5[7] + 40 * a1);
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v10 = a4[6];
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * a1, a2, v11);
  uint64_t v12 = a4[7];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t result = outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(a3, v12 + *(void *)(*(void *)(v13 - 8) + 72) * a1, a5);
  uint64_t v15 = a4[2];
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    a4[2] = v17;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  void *v5 = a2;
  v5[1] = a3;
  BOOL v6 = (_OWORD *)(a5[7] + 80 * result);
  long long v7 = a4[4];
  long long v8 = a4[2];
  v6[3] = a4[3];
  v6[4] = v7;
  long long v9 = a4[1];
  *BOOL v6 = *a4;
  v6[1] = v9;
  v6[2] = v8;
  uint64_t v10 = a5[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a5[2] = v12;
  }
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *id v1 = v4;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    id v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Bool>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *id v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    LOBYTE(v16) = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + 16 * v15);
    *uint64_t v19 = v18;
    v19[1] = v17;
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = (_BYTE)v16;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, [String : Bool]>);
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [String : NSNumber]>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, [String : Any]>);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  id v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, Int>);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    *unint64_t v23 = v7;
    return result;
  }
  uint64_t result = (void *)(v6 + 64);
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v24 = v5 + 64;
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v27 = v2 + 16;
  uint64_t v25 = (unint64_t)(v11 + 63) >> 6;
  int64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    uint64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      uint64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      uint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    uint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + v17);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  uint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    uint64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(MEMORY[0x1E4FA1F68], &demangling cache variable for type metadata for _DictionaryStorage<UUID, Parse>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  id v1 = v0;
  uint64_t v2 = type metadata accessor for StringKeyedValue();
  BOOL v29 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, StringKeyedValue>);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *id v1 = v7;
    return result;
  }
  int64_t v27 = v1;
  uint64_t result = (void *)(v6 + 64);
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  unint64_t v28 = v5 + 64;
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v5 + 64);
  unint64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v16 = v15 | (v10 << 6);
      goto LABEL_9;
    }
    unint64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v23 >= v14) {
      goto LABEL_23;
    }
    int64_t v24 = *(void *)(v28 + 8 * v23);
    ++v10;
    if (!v24)
    {
      uint64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_23;
      }
      int64_t v24 = *(void *)(v28 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v24 - 1) & v24;
    uint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_9:
    uint64_t v17 = 16 * v16;
    uint64_t v18 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v16);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    unint64_t v21 = *(void *)(v29 + 72) * v16;
    outlined init with copy of StringKeyedValue(*(void *)(v5 + 56) + v21, (uint64_t)v4);
    int64_t v22 = (void *)(*(void *)(v7 + 48) + v17);
    *int64_t v22 = v19;
    v22[1] = v20;
    outlined init with take of StringKeyedValue((uint64_t)v4, *(void *)(v7 + 56) + v21);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v25 = v23 + 2;
  if (v25 >= v14)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    id v1 = v27;
    goto LABEL_25;
  }
  int64_t v24 = *(void *)(v28 + 8 * v25);
  if (v24)
  {
    uint64_t v10 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_23;
    }
    int64_t v24 = *(void *)(v28 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, AffinityScoring>, (void (*)(unsigned char *, uint64_t))outlined init with take of ReferenceResolutionClientProtocol);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UUID, [UUID]>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;

  id v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
  unint64_t v28 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, (topAction: RankedAction, alternativeParses: [CamParse])>);
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *id v1 = v7;
    return result;
  }
  uint64_t v25 = v1;
  uint64_t result = (void *)(v6 + 64);
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  int64_t v26 = v5 + 64;
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v27 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v22 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v27) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v22);
    ++v10;
    if (!v23)
    {
      uint64_t v10 = v22 + 1;
      if (v22 + 1 >= v27) {
        goto LABEL_23;
      }
      unint64_t v23 = *(void *)(v26 + 8 * v10);
      if (!v23) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v10 << 6);
LABEL_9:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v15);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    uint64_t v20 = *(void *)(v28 + 72) * v15;
    outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v5 + 56) + v20, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    unint64_t v21 = (void *)(*(void *)(v7 + 48) + v16);
    *unint64_t v21 = v18;
    v21[1] = v19;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v4, *(void *)(v7 + 56) + v20, (uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v27)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    id v1 = v25;
    goto LABEL_25;
  }
  unint64_t v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
    uint64_t v10 = v24;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v10 >= v27) {
      goto LABEL_23;
    }
    unint64_t v23 = *(void *)(v26 + 8 * v10);
    ++v24;
    if (v23) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, ConversationAction>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *id v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    LOBYTE(v16) = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + 16 * v15);
    *uint64_t v19 = v18;
    v19[1] = v17;
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = (_BYTE)v16;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  id v1 = type metadata accessor for UserID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UserID, ContextUpdater>);
  unint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    *unint64_t v23 = v7;
    return result;
  }
  uint64_t result = (void *)(v6 + 64);
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    uint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v5 + 64);
  int64_t v24 = v5 + 64;
  uint64_t v25 = (unint64_t)(v11 + 63) >> 6;
  int64_t v26 = v2 + 32;
  int64_t v27 = v2 + 16;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    uint64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      uint64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      uint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    int64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    uint64_t v16 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v16, v1);
    uint64_t v17 = 8 * v15;
    uint64_t v18 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v16, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v17) = v18;
    uint64_t result = (void *)swift_retain();
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  uint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    uint64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, ResultCandidateState>);
}

{
  return specialized _NativeDictionary.copy()(MEMORY[0x1E4FBBC50], &demangling cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>, (uint64_t (*)(unsigned char *, uint64_t))outlined init with take of Any);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *id v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    int64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    unint64_t v21 = *v20;
    int64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v23 = v19;
    v23[1] = v18;
    int64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *int64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  int64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, [IntentTopic]>);
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, RemoteFlowPluginPackage>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<UInt, ()>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ContextTypeKey, AFContextSnapshot>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *id v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    uint64_t result = (void *)swift_unknownObjectRetain();
  }
  uint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(MEMORY[0x1E4FA2670], &demangling cache variable for type metadata for _DictionaryStorage<ConversationSessionKey, Sendable>, (uint64_t (*)(unsigned char *, uint64_t))outlined init with take of Any);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned char v28[32];

  id v1 = v0;
  uint64_t v2 = type metadata accessor for ConversationSessionKey();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ConversationSessionKey, Sendable?>);
  uint64_t v6 = *v0;
  unint64_t v7 = static _DictionaryStorage.copy(original:)();
  long long v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *id v1 = v8;
    return result;
  }
  unint64_t v23 = v1;
  uint64_t result = (void *)(v7 + 64);
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  unint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v13 = -1;
  if (v12 < 64) {
    int64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  int64_t v24 = v6 + 64;
  uint64_t v25 = (unint64_t)(v12 + 63) >> 6;
  int64_t v26 = v3 + 32;
  int64_t v27 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      uint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    uint64_t v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v11;
    if (!v20)
    {
      uint64_t v11 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      uint64_t v20 = *(void *)(v24 + 8 * v11);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v20 - 1) & v20;
    uint64_t v16 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_9:
    uint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t v18 = 32 * v16;
    outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v6 + 56) + v18, (uint64_t)v28, &demangling cache variable for type metadata for Sendable?);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v17, v5, v2);
    uint64_t result = (void *)outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v28, *(void *)(v8 + 56) + v18, &demangling cache variable for type metadata for Sendable?);
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v25)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    id v1 = v23;
    goto LABEL_25;
  }
  uint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    uint64_t v11 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v11 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v11 >= v25) {
      goto LABEL_23;
    }
    uint64_t v20 = *(void *)(v24 + 8 * v11);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void (*v20)(unint64_t, char *, uint64_t);
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  long long v28;

  id v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<UUID, @MessageBusActor (_:_:)>);
  uint64_t v6 = *v0;
  unint64_t v7 = static _DictionaryStorage.copy(original:)();
  long long v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_25:
    *id v1 = v8;
    return result;
  }
  int64_t v24 = v1;
  uint64_t result = (void *)(v7 + 64);
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    uint64_t result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v25 = v6 + 64;
  uint64_t v11 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  unint64_t v12 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v13 = -1;
  if (v12 < 64) {
    int64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v6 + 64);
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  int64_t v27 = v3 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      uint64_t v16 = v15 | (v11 << 6);
      goto LABEL_9;
    }
    unint64_t v21 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v26) {
      goto LABEL_23;
    }
    int64_t v22 = *(void *)(v25 + 8 * v21);
    ++v11;
    if (!v22)
    {
      uint64_t v11 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_23;
      }
      int64_t v22 = *(void *)(v25 + 8 * v11);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v14 = (v22 - 1) & v22;
    uint64_t v16 = __clz(__rbit64(v22)) + (v11 << 6);
LABEL_9:
    uint64_t v17 = *(void *)(v3 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v17, v2);
    uint64_t v18 = 16 * v16;
    uint64_t v19 = *(void *)(v8 + 48) + v17;
    uint64_t v20 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    unint64_t v28 = *(_OWORD *)(*(void *)(v6 + 56) + v18);
    v20(v19, v5, v2);
    *(_OWORD *)(*(void *)(v8 + 56) + v18) = v28;
    uint64_t result = (void *)swift_retain();
  }
  unint64_t v23 = v21 + 2;
  if (v23 >= v26)
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    id v1 = v24;
    goto LABEL_25;
  }
  int64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    uint64_t v11 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v11 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_23;
    }
    int64_t v22 = *(void *)(v25 + 8 * v11);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(MEMORY[0x1E4F9FAB8], &demangling cache variable for type metadata for _DictionaryStorage<UUID, ActionCandidate>);
}

{
  return specialized _NativeDictionary.copy()(MEMORY[0x1E4FA2880], &demangling cache variable for type metadata for _DictionaryStorage<String, Siri_Nlu_External_ResponseStatus.StatusCode>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Task<ConversationService.EagerResult, Error>>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *id v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(MEMORY[0x1E4FA1EE0], &demangling cache variable for type metadata for _DictionaryStorage<String, Input>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AnyEncodable>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *id v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<ContextTypeKey, AFContextSnapshot?>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *id v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    uint64_t result = (void *)swift_unknownObjectRetain();
  }
  uint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  uint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, InstrumentedStack.TrackedFlowAgent>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *id v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    uint64_t result = (void *)swift_retain();
  }
  uint64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, NSExtensionProtocol>, (void (*)(unsigned char *, uint64_t))outlined init with take of ReferenceResolutionClientProtocol);
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [LNSystemProtocol : [LinkActionMetadata]]>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<LNSystemProtocol, [LinkActionMetadata]>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *id v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    uint64_t v19 = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, Set<String>>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment), &demangling cache variable for type metadata for _DictionaryStorage<UUID, (Input, ActingFlow, SiriEnvironment)>);
}

{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment), &demangling cache variable for type metadata for _DictionaryStorage<UUID, (Input, AnyFlow, SiriEnvironment)>);
}

{
  return specialized _NativeDictionary.copy()((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<Int, @Sendable ()>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _OWORD *v22;
  long long v23;
  long long v24;
  long long v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t *v29;
  _OWORD v30[5];

  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, FlowPluginAndBundle>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    *id v1 = v4;
    return result;
  }
  BOOL v29 = v1;
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    int64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 80 * v15;
    outlined init with copy of FlowPluginAndBundle(*(void *)(v2 + 56) + 80 * v15, (uint64_t)v30);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    int64_t v22 = (_OWORD *)(*(void *)(v4 + 56) + v20);
    *int64_t v22 = v30[0];
    unint64_t v23 = v30[1];
    int64_t v24 = v30[2];
    uint64_t v25 = v30[4];
    v22[3] = v30[3];
    v22[4] = v25;
    v22[1] = v23;
    uint64_t v22[2] = v24;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v28 = v26 + 2;
  if (v28 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    id v1 = v29;
    goto LABEL_28;
  }
  int64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  int64_t v26 = v1;
  uint64_t v7 = *v1;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *int64_t v26 = v9;
    return result;
  }
  uint64_t result = (void *)(v8 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    uint64_t result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  int64_t v13 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  uint64_t v27 = v7 + 64;
  int64_t v28 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v29 = v4 + 32;
  uint64_t v30 = v4 + 16;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v27 + 8 * v13);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v16 = (v23 - 1) & v23;
    unint64_t v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    unint64_t v19 = *(void *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 48) + v19, v3);
    uint64_t v20 = 8 * v18;
    uint64_t v21 = *(void *)(*(void *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v9 + 48) + v19, v6, v3);
    *(void *)(*(void *)(v9 + 56) + v20) = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v28) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v27 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  uint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  uint64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  unint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v3 + 64);
  uint64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      uint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    unint64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    int64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      uint64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      int64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    int64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    unint64_t v17 = 16 * v16;
    unint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    unint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_retain();
  }
  uint64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  int64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    uint64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    int64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  uint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  uint64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  unint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v3 + 64);
  uint64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      uint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    unint64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    int64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      uint64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      int64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    int64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    unint64_t v17 = 16 * v16;
    unint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    unint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void *)(*(void *)(v3 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  int64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    uint64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    int64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  uint64_t result = (void *)(v4 + 64);
  uint64_t v7 = v3 + 64;
  uint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    uint64_t result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  uint64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  unint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v3 + 64);
  uint64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      uint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    uint64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14) {
      goto LABEL_26;
    }
    int64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      uint64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_26;
      }
      int64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    int64_t v13 = (v22 - 1) & v22;
    unint64_t v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    unint64_t v17 = 8 * v16;
    unint64_t v18 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    unint64_t v19 = 16 * v16;
    uint64_t v20 = *(_OWORD *)(*(void *)(v3 + 56) + v19);
    *(void *)(*(void *)(v5 + 48) + v17) = v18;
    *(_OWORD *)(*(void *)(v5 + 56) + v19) = v20;
    uint64_t result = (void *)swift_retain();
  }
  unint64_t v23 = v21 + 2;
  if (v23 >= v14) {
    goto LABEL_26;
  }
  int64_t v22 = *(void *)(v7 + 8 * v23);
  if (v22)
  {
    uint64_t v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v10 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    int64_t v22 = *(void *)(v7 + 8 * v10);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()()
{
  return specialized _NativeDictionary.copy()(&demangling cache variable for type metadata for _DictionaryStorage<String, SASRecognition>);
}

void *specialized _NativeDictionary.copy()(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(unsigned char *, uint64_t))
{
  uint64_t v32 = a3;
  uint64_t v5 = v3;
  uint64_t v6 = a1(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v27 - v8;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v10 = *v3;
  uint64_t v11 = static _DictionaryStorage.copy(original:)();
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v5 = v12;
    return result;
  }
  int64_t v28 = v5;
  uint64_t result = (void *)(v11 + 64);
  unint64_t v14 = (unint64_t)((1 << *(unsigned char *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)result >= v10 + 64 + 8 * v14) {
    uint64_t result = memmove(result, (const void *)(v10 + 64), 8 * v14);
  }
  int64_t v16 = 0;
  *(void *)(v12 + 16) = *(void *)(v10 + 16);
  uint64_t v17 = 1 << *(unsigned char *)(v10 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & *(void *)(v10 + 64);
  uint64_t v29 = v10 + 64;
  int64_t v30 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v31 = v7 + 16;
  while (1)
  {
    if (v19)
    {
      unint64_t v20 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v21 = v20 | (v16 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v30) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v24);
    ++v16;
    if (!v25)
    {
      int64_t v16 = v24 + 1;
      if (v24 + 1 >= v30) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v29 + 8 * v16);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v19 = (v25 - 1) & v25;
    unint64_t v21 = __clz(__rbit64(v25)) + (v16 << 6);
LABEL_12:
    unint64_t v22 = *(void *)(v7 + 72) * v21;
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v9, *(void *)(v10 + 48) + v22, v6);
    uint64_t v23 = 32 * v21;
    outlined init with copy of Any(*(void *)(v10 + 56) + v23, (uint64_t)v33);
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(void *)(v12 + 48) + v22, v9, v6);
    uint64_t result = (void *)v32(v33, *(void *)(v12 + 56) + v23);
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v30)
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t v5 = v28;
    goto LABEL_28;
  }
  unint64_t v25 = *(void *)(v29 + 8 * v26);
  if (v25)
  {
    int64_t v16 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v16 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v16 >= v30) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v16);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

char *specialized _NativeDictionary.copy()()
{
  uint64_t v39 = type metadata accessor for UserID();
  uint64_t v1 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  uint64_t v38 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UserID, Data>);
  uint64_t v33 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  uint64_t v41 = v4;
  if (!v5)
  {
    uint64_t result = (char *)swift_release();
    uint64_t v31 = v41;
    int64_t v30 = v33;
LABEL_25:
    *int64_t v30 = v31;
    return result;
  }
  uint64_t v6 = v4;
  uint64_t result = (char *)(v4 + 64);
  uint64_t v8 = (char *)(v3 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  uint64_t v34 = v3 + 64;
  if (v6 != v3 || result >= &v8[8 * v9])
  {
    uint64_t result = (char *)memmove(result, v8, 8 * v9);
    uint64_t v6 = v41;
  }
  int64_t v10 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v40 = v3;
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  uint64_t v37 = v1 + 16;
  int64_t v35 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v36 = v1 + 32;
  uint64_t v15 = v38;
  uint64_t v14 = v39;
  uint64_t v16 = v41;
  while (1)
  {
    if (v13)
    {
      unint64_t v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v18 = v17 | (v10 << 6);
      uint64_t v19 = v40;
      goto LABEL_9;
    }
    int64_t v27 = v10 + 1;
    uint64_t v19 = v40;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v27 >= v35) {
      goto LABEL_23;
    }
    unint64_t v28 = *(void *)(v34 + 8 * v27);
    ++v10;
    if (!v28)
    {
      int64_t v10 = v27 + 1;
      if (v27 + 1 >= v35) {
        goto LABEL_23;
      }
      unint64_t v28 = *(void *)(v34 + 8 * v10);
      if (!v28) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v28 - 1) & v28;
    unint64_t v18 = __clz(__rbit64(v28)) + (v10 << 6);
LABEL_9:
    unint64_t v20 = *(void *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v15, *(void *)(v19 + 48) + v20, v14);
    uint64_t v21 = *(void *)(v19 + 56);
    uint64_t v22 = 16 * v18;
    uint64_t v23 = (uint64_t *)(v21 + 16 * v18);
    uint64_t v24 = *v23;
    unint64_t v25 = v23[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v16 + 48) + v20, v15, v14);
    int64_t v26 = (uint64_t *)(*(void *)(v16 + 56) + v22);
    *int64_t v26 = v24;
    v26[1] = v25;
    uint64_t result = (char *)outlined copy of Data._Representation(v24, v25);
  }
  int64_t v29 = v27 + 2;
  if (v29 >= v35)
  {
LABEL_23:
    uint64_t result = (char *)swift_release();
    int64_t v30 = v33;
    uint64_t v31 = v41;
    goto LABEL_25;
  }
  unint64_t v28 = *(void *)(v34 + 8 * v29);
  if (v28)
  {
    int64_t v10 = v29;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v10 >= v35) {
      goto LABEL_23;
    }
    unint64_t v28 = *(void *)(v34 + 8 * v10);
    ++v29;
    if (v28) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()(uint64_t *a1)
{
  uint64_t v3 = type metadata accessor for UserID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a1);
  int64_t v26 = v1;
  uint64_t v7 = *v1;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *int64_t v26 = v9;
    return result;
  }
  id result = (id)(v8 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  uint64_t v27 = v7 + 64;
  int64_t v13 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  uint64_t v30 = v4 + 16;
  int64_t v28 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v29 = v4 + 32;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v27 + 8 * v13);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v16 = (v23 - 1) & v23;
    unint64_t v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    unint64_t v19 = *(void *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 48) + v19, v3);
    uint64_t v20 = 8 * v18;
    uint64_t v21 = *(void **)(*(void *)(v7 + 56) + v20);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v9 + 48) + v19, v6, v3);
    *(void *)(*(void *)(v9 + 56) + v20) = v21;
    id result = v21;
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v28) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v27 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *uint64_t v2 = v5;
    return result;
  }
  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  uint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8) {
    id result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  }
  int64_t v10 = 0;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  unint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v3 + 64);
  uint64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      uint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    unint64_t v23 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v14) {
      goto LABEL_26;
    }
    int64_t v24 = *(void *)(v7 + 8 * v23);
    ++v10;
    if (!v24)
    {
      int64_t v10 = v23 + 1;
      if (v23 + 1 >= v14) {
        goto LABEL_26;
      }
      int64_t v24 = *(void *)(v7 + 8 * v10);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    int64_t v13 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    unint64_t v17 = 16 * v16;
    unint64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    unint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void **)(*(void *)(v3 + 56) + v20);
    int64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *int64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain();
    id result = v21;
  }
  uint64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  int64_t v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    int64_t v10 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    int64_t v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v45 = a1(0);
  uint64_t v48 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  uint64_t v44 = (char *)&v35 - v4;
  uint64_t v43 = type metadata accessor for UUID();
  uint64_t v47 = *(void *)(v43 - 8);
  MEMORY[0x1F4188790](v43);
  unint64_t v42 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  int64_t v35 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = *(void *)(v6 + 16);
  uint64_t v49 = v7;
  if (!v8)
  {
    id result = (void *)swift_release();
    uint64_t v34 = v49;
    uint64_t v33 = v35;
LABEL_25:
    *uint64_t v33 = v34;
    return result;
  }
  uint64_t v9 = v7;
  id result = (void *)(v7 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v6 || (unint64_t)result >= v6 + 64 + 8 * v11)
  {
    id result = memmove(result, (const void *)(v6 + 64), 8 * v11);
    uint64_t v9 = v49;
  }
  int64_t v12 = 0;
  *(void *)(v9 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v14 = -1;
  uint64_t v46 = v6;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  uint64_t v36 = v6 + 64;
  int64_t v37 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v16 = v48;
  uint64_t v17 = v47;
  uint64_t v40 = v48 + 16;
  uint64_t v41 = v47 + 16;
  uint64_t v38 = v48 + 32;
  uint64_t v39 = v47 + 32;
  unint64_t v18 = v42;
  uint64_t v19 = v43;
  uint64_t v20 = v45;
  uint64_t v21 = v49;
  while (1)
  {
    if (v15)
    {
      unint64_t v22 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      int64_t v50 = v12;
      unint64_t v23 = v22 | (v12 << 6);
      uint64_t v24 = v46;
      goto LABEL_9;
    }
    int64_t v29 = v12 + 1;
    uint64_t v24 = v46;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v29 >= v37) {
      goto LABEL_23;
    }
    unint64_t v30 = *(void *)(v36 + 8 * v29);
    int64_t v31 = v12 + 1;
    if (!v30)
    {
      int64_t v31 = v29 + 1;
      if (v29 + 1 >= v37) {
        goto LABEL_23;
      }
      unint64_t v30 = *(void *)(v36 + 8 * v31);
      if (!v30) {
        break;
      }
    }
LABEL_22:
    unint64_t v15 = (v30 - 1) & v30;
    int64_t v50 = v31;
    unint64_t v23 = __clz(__rbit64(v30)) + (v31 << 6);
LABEL_9:
    unint64_t v25 = *(void *)(v17 + 72) * v23;
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v18, *(void *)(v24 + 48) + v25, v19);
    unint64_t v26 = *(void *)(v16 + 72) * v23;
    unint64_t v27 = *(void *)(v24 + 56) + v26;
    int64_t v28 = v44;
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v44, v27, v20);
    (*(void (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(void *)(v21 + 48) + v25, v18, v19);
    id result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v16 + 32))(*(void *)(v21 + 56) + v26, v28, v20);
    int64_t v12 = v50;
  }
  int64_t v32 = v29 + 2;
  if (v32 >= v37)
  {
LABEL_23:
    id result = (void *)swift_release();
    uint64_t v33 = v35;
    uint64_t v34 = v49;
    goto LABEL_25;
  }
  unint64_t v30 = *(void *)(v36 + 8 * v32);
  if (v30)
  {
    int64_t v31 = v32;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v31 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v31 >= v37) {
      goto LABEL_23;
    }
    unint64_t v30 = *(void *)(v36 + 8 * v31);
    ++v32;
    if (v30) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  unint64_t v12;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  uint64_t v39 = a1(0);
  uint64_t v4 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  uint64_t v6 = (char *)&v33 - v5;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v34 = v2;
  uint64_t v7 = *v2;
  uint64_t v8 = static _DictionaryStorage.copy(original:)();
  uint64_t v9 = *(void *)(v7 + 16);
  uint64_t v40 = v8;
  if (!v9)
  {
    id result = (void *)swift_release();
    int64_t v32 = v40;
    int64_t v31 = v34;
LABEL_28:
    *int64_t v31 = v32;
    return result;
  }
  int64_t v10 = v8;
  id result = (void *)(v8 + 64);
  int64_t v12 = (unint64_t)((1 << *(unsigned char *)(v10 + 32)) + 63) >> 6;
  if (v10 != v7 || (unint64_t)result >= v7 + 64 + 8 * v12)
  {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v12);
    int64_t v10 = v40;
  }
  uint64_t v14 = 0;
  *(void *)(v10 + 16) = *(void *)(v7 + 16);
  unint64_t v15 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  uint64_t v17 = v16 & *(void *)(v7 + 64);
  int64_t v35 = v7 + 64;
  uint64_t v36 = (unint64_t)(v15 + 63) >> 6;
  int64_t v37 = v4 + 32;
  uint64_t v38 = v4 + 16;
  unint64_t v18 = v39;
  while (1)
  {
    if (v17)
    {
      uint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      uint64_t v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }
    int64_t v28 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v36) {
      goto LABEL_26;
    }
    int64_t v29 = *(void *)(v35 + 8 * v28);
    ++v14;
    if (!v29)
    {
      uint64_t v14 = v28 + 1;
      if (v28 + 1 >= v36) {
        goto LABEL_26;
      }
      int64_t v29 = *(void *)(v35 + 8 * v14);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    uint64_t v17 = (v29 - 1) & v29;
    uint64_t v20 = __clz(__rbit64(v29)) + (v14 << 6);
LABEL_12:
    uint64_t v21 = 16 * v20;
    unint64_t v22 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v20);
    unint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    unint64_t v25 = *(void *)(v4 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 56) + v25, v18);
    unint64_t v26 = v40;
    unint64_t v27 = (void *)(*(void *)(v40 + 48) + v21);
    *unint64_t v27 = v23;
    v27[1] = v24;
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v26 + 56) + v25, v6, v18);
    id result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v30 = v28 + 2;
  if (v30 >= v36)
  {
LABEL_26:
    id result = (void *)swift_release();
    int64_t v31 = v34;
    int64_t v32 = v40;
    goto LABEL_28;
  }
  int64_t v29 = *(void *)(v35 + 8 * v30);
  if (v29)
  {
    uint64_t v14 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v14 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v14 >= v36) {
      goto LABEL_26;
    }
    int64_t v29 = *(void *)(v35 + 8 * v14);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t *a1, void (*a2)(unsigned char *, uint64_t))
{
  uint64_t v4 = v2;
  __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v5 = *v2;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    id result = (void *)swift_release();
LABEL_28:
    *uint64_t v4 = v7;
    return result;
  }
  unint64_t v27 = v4;
  id result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    id result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v28 = v5 + 64;
  int64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  int64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v15) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v24);
    ++v11;
    if (!v25)
    {
      int64_t v11 = v24 + 1;
      if (v24 + 1 >= v15) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v28 + 8 * v11);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v14 = (v25 - 1) & v25;
    unint64_t v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_12:
    uint64_t v18 = 16 * v17;
    uint64_t v19 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    uint64_t v22 = 40 * v17;
    outlined init with copy of ReferenceResolutionClientProtocol(*(void *)(v5 + 56) + 40 * v17, (uint64_t)v29);
    unint64_t v23 = (void *)(*(void *)(v7 + 48) + v18);
    *unint64_t v23 = v20;
    v23[1] = v21;
    a2(v29, *(void *)(v7 + 56) + v22);
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t v4 = v27;
    goto LABEL_28;
  }
  unint64_t v25 = *(void *)(v28 + 8 * v26);
  if (v25)
  {
    int64_t v11 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v11 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v11);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.copy()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v43 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(a1);
  uint64_t v42 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v41 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40);
  uint64_t v39 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(a2);
  uint64_t v34 = v2;
  uint64_t v8 = *v2;
  uint64_t v9 = static _DictionaryStorage.copy(original:)();
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t v45 = v9;
  if (!v10)
  {
    id result = (void *)swift_release();
    uint64_t v33 = v45;
    int64_t v32 = v34;
LABEL_25:
    *int64_t v32 = v33;
    return result;
  }
  uint64_t v11 = v9;
  id result = (void *)(v9 + 64);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  if (v11 != v8 || (unint64_t)result >= v8 + 64 + 8 * v13)
  {
    id result = memmove(result, (const void *)(v8 + 64), 8 * v13);
    uint64_t v11 = v45;
  }
  uint64_t v35 = v8 + 64;
  int64_t v14 = 0;
  *(void *)(v11 + 16) = *(void *)(v8 + 16);
  uint64_t v15 = 1 << *(unsigned char *)(v8 + 32);
  uint64_t v44 = v8;
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & *(void *)(v8 + 64);
  uint64_t v38 = v6 + 16;
  int64_t v36 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v37 = v6 + 32;
  uint64_t v19 = v39;
  uint64_t v18 = v40;
  uint64_t v20 = (uint64_t)v41;
  for (uint64_t i = v45;
        ;
        id result = (void *)outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v20, *(void *)(i + 56) + v28, v27))
  {
    if (v17)
    {
      unint64_t v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v23 = v22 | (v14 << 6);
      uint64_t v24 = v44;
      goto LABEL_9;
    }
    int64_t v29 = v14 + 1;
    uint64_t v24 = v44;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v29 >= v36) {
      goto LABEL_23;
    }
    unint64_t v30 = *(void *)(v35 + 8 * v29);
    ++v14;
    if (!v30)
    {
      int64_t v14 = v29 + 1;
      if (v29 + 1 >= v36) {
        goto LABEL_23;
      }
      unint64_t v30 = *(void *)(v35 + 8 * v14);
      if (!v30) {
        break;
      }
    }
LABEL_22:
    unint64_t v17 = (v30 - 1) & v30;
    unint64_t v23 = __clz(__rbit64(v30)) + (v14 << 6);
LABEL_9:
    unint64_t v25 = *(void *)(v6 + 72) * v23;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v19, *(void *)(v24 + 48) + v25, v18);
    uint64_t v26 = *(void *)(v24 + 56);
    unint64_t v27 = v43;
    unint64_t v28 = *(void *)(v42 + 72) * v23;
    outlined init with copy of ReferenceResolutionClientProtocol?(v26 + v28, v20, v43);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(i + 48) + v25, v19, v18);
  }
  int64_t v31 = v29 + 2;
  if (v31 >= v36)
  {
LABEL_23:
    id result = (void *)swift_release();
    int64_t v32 = v34;
    uint64_t v33 = v45;
    goto LABEL_25;
  }
  unint64_t v30 = *(void *)(v35 + 8 * v31);
  if (v30)
  {
    int64_t v14 = v31;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v14 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v14 >= v36) {
      goto LABEL_23;
    }
    unint64_t v30 = *(void *)(v35 + 8 * v14);
    ++v31;
    if (v30) {
      goto LABEL_22;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized static ConversationMUXUtils.getAllUserIds(from:)()
{
  uint64_t v0 = type metadata accessor for UserID();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v0);
  uint64_t v46 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v45 = (char *)&v36 - v5;
  MEMORY[0x1F4188790](v4);
  uint64_t v44 = (char *)&v36 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo)?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v36 - v11;
  uint64_t v13 = MUXContextMessage.userIdToHomeMember.getter();
  uint64_t v49 = MEMORY[0x1E4FBC870];
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v38 = v13 + 64;
  uint64_t v15 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v16 = -1;
  if (v15 < 64) {
    uint64_t v16 = ~(-1 << v15);
  }
  unint64_t v17 = v16 & v14;
  uint64_t v48 = (void (**)(char *, char *, uint64_t))(v1 + 16);
  int64_t v39 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v40 = v1;
  uint64_t v42 = (void (**)(uint64_t, uint64_t))(v1 + 8);
  uint64_t v43 = (void (**)(char *, char *, uint64_t))(v1 + 32);
  int64_t v37 = v39 - 1;
  uint64_t v41 = v13;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v47 = 0;
  uint64_t v20 = v44;
  uint64_t v19 = (uint64_t)v45;
  if (!v17) {
    goto LABEL_8;
  }
LABEL_6:
  unint64_t v24 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  unint64_t v25 = v24 | (v47 << 6);
  while (2)
  {
    uint64_t v26 = v41;
    (*(void (**)(char *, unint64_t, uint64_t))(v40 + 16))(v10, *(void *)(v41 + 48) + *(void *)(v40 + 72) * v25, v0);
    uint64_t v27 = *(void *)(v26 + 56);
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
    int64_t v29 = *(void **)(v27 + 8 * v25);
    *(void *)&v10[*(int *)(v28 + 48)] = v29;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v10, 0, 1, v28);
    id v30 = v29;
    while (1)
    {
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v10, (uint64_t)v12, &demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo)?);
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v12, 1, v35) == 1)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return v49;
      }
      uint64_t v21 = *(void **)&v12[*(int *)(v35 + 48)];
      (*v43)(v20, v12, v0);
      unint64_t v22 = v46;
      (*v48)(v46, v20, v0);
      specialized Set._Variant.insert(_:)(v19, v22);

      unint64_t v23 = *v42;
      (*v42)(v19, v0);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v23)(v20, v0);
      if (v17) {
        goto LABEL_6;
      }
LABEL_8:
      int64_t v31 = v47 + 1;
      if (__OFADD__(v47, 1))
      {
        __break(1u);
        goto LABEL_32;
      }
      if (v31 < v39)
      {
        unint64_t v32 = *(void *)(v38 + 8 * v31);
        if (v32) {
          goto LABEL_11;
        }
        int64_t v33 = v47 + 2;
        ++v47;
        if (v31 + 1 < v39)
        {
          unint64_t v32 = *(void *)(v38 + 8 * v33);
          if (v32) {
            goto LABEL_14;
          }
          int64_t v47 = v31 + 1;
          if (v31 + 2 < v39)
          {
            unint64_t v32 = *(void *)(v38 + 8 * (v31 + 2));
            if (v32)
            {
              v31 += 2;
              goto LABEL_11;
            }
            int64_t v47 = v31 + 2;
            if (v31 + 3 < v39)
            {
              unint64_t v32 = *(void *)(v38 + 8 * (v31 + 3));
              if (v32)
              {
                v31 += 3;
                goto LABEL_11;
              }
              int64_t v33 = v31 + 4;
              int64_t v47 = v31 + 3;
              if (v31 + 4 < v39) {
                break;
              }
            }
          }
        }
      }
LABEL_28:
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v10, 1, 1, v34);
      unint64_t v17 = 0;
    }
    unint64_t v32 = *(void *)(v38 + 8 * v33);
    if (v32)
    {
LABEL_14:
      int64_t v31 = v33;
LABEL_11:
      unint64_t v17 = (v32 - 1) & v32;
      unint64_t v25 = __clz(__rbit64(v32)) + (v31 << 6);
      int64_t v47 = v31;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v31 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v31 >= v39)
    {
      int64_t v47 = v37;
      goto LABEL_28;
    }
    unint64_t v32 = *(void *)(v38 + 8 * v31);
    ++v33;
    if (v32) {
      goto LABEL_11;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

void specialized static ConversationMUXUtils.getAllKnownUserIds(from:)()
{
  uint64_t v0 = type metadata accessor for UserID();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v2);
  uint64_t v63 = (uint64_t)&v51 - v6;
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v51 - v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo)?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v51 - v13;
  uint64_t v15 = MUXContextMessage.userIdToHomeMember.getter();
  uint64_t v16 = *(void *)(v15 + 64);
  uint64_t v55 = v15 + 64;
  uint64_t v75 = MEMORY[0x1E4FBC870];
  uint64_t v17 = 1 << *(unsigned char *)(v15 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v16;
  unint64_t v20 = (unint64_t)(v17 + 63) >> 6;
  int64_t v68 = (void (**)(char *, char *, uint64_t))(v1 + 16);
  uint64_t v66 = (void (**)(char *, char *, uint64_t))(v1 + 32);
  uint64_t v65 = (void (**)(uint64_t, uint64_t))(v1 + 8);
  unint64_t v52 = v20 - 1;
  uint64_t v21 = swift_bridgeObjectRetain();
  unint64_t v22 = 0;
  int64_t v60 = v20;
  unint64_t v54 = v20 - 6;
  uint64_t v64 = v21;
  uint64_t v53 = v21 + 112;
  uint64_t v62 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v59 = v0;
  uint64_t v58 = v1;
  uint64_t v57 = v4;
  uint64_t v56 = v8;
  uint64_t v61 = v12;
  uint64_t v67 = v14;
  while (v19)
  {
    uint64_t v69 = (v19 - 1) & v19;
    unint64_t v70 = v22;
    unint64_t v25 = __clz(__rbit64(v19)) | (v22 << 6);
LABEL_10:
    uint64_t v26 = v64;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v12, *(void *)(v64 + 48) + *(void *)(v1 + 72) * v25, v0);
    uint64_t v27 = *(void *)(v26 + 56);
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
    int64_t v29 = *(void **)(v27 + 8 * v25);
    *(void *)&v12[*(int *)(v28 + 48)] = v29;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v12, 0, 1, v28);
    id v30 = v29;
LABEL_17:
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v12, (uint64_t)v14, &demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo)?);
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v14, 1, v35) == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v36 = *(void **)&v14[*(int *)(v35 + 48)];
    (*v66)(v8, v14, v0);
    id v37 = objc_msgSend(v36, sel_attributes);
    if (!v37) {
      goto LABEL_6;
    }
    uint64_t v38 = v37;
    uint64_t v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v40 = *(void *)(v39 + 16);
    if (!v40)
    {
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v12 = v61;
LABEL_6:
      (*v68)(v4, v8, v0);
      uint64_t v23 = v63;
      specialized Set._Variant.insert(_:)(v63, v4);

      unint64_t v24 = *v65;
      (*v65)(v23, v0);
      v24((uint64_t)v8, v0);
      goto LABEL_7;
    }
    uint64_t v41 = v39 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of Any(v41, (uint64_t)v74);
      outlined init with copy of Any((uint64_t)v74, (uint64_t)v73);
      int v42 = swift_dynamicCast();
      uint64_t v43 = v72;
      if (v42) {
        uint64_t v44 = v71;
      }
      else {
        uint64_t v44 = 0;
      }
      uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (v42) {
        BOOL v47 = v43 == 0;
      }
      else {
        BOOL v47 = 1;
      }
      if (v47)
      {
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v74);
        goto LABEL_22;
      }
      if (v44 == v45 && v43 == v46) {
        break;
      }
      char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v74);
      if (v49) {
        goto LABEL_38;
      }
LABEL_22:
      v41 += 32;
      if (!--v40)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v0 = v59;
        uint64_t v1 = v58;
        uint64_t v4 = v57;
        uint64_t v8 = v56;
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease_n();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v74);
LABEL_38:
    swift_bridgeObjectRelease_n();
    uint64_t v8 = v56;
    uint64_t v0 = v59;
    (*v65)((uint64_t)v56, v59);

    uint64_t v1 = v58;
    uint64_t v4 = v57;
    uint64_t v12 = v61;
LABEL_7:
    uint64_t v14 = v67;
    unint64_t v19 = v69;
    unint64_t v22 = v70;
  }
  int64_t v31 = v22 + 1;
  if (!__OFADD__(v22, 1))
  {
    if (v31 >= v60)
    {
      unint64_t v33 = v22;
LABEL_16:
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v12, 1, 1, v34);
      uint64_t v69 = 0;
      unint64_t v70 = v33;
      goto LABEL_17;
    }
    unint64_t v32 = *(void *)(v55 + 8 * v31);
    if (v32) {
      goto LABEL_14;
    }
    int64_t v50 = v22 + 2;
    unint64_t v33 = v22 + 1;
    if ((uint64_t)(v22 + 2) >= v60) {
      goto LABEL_16;
    }
    unint64_t v32 = *(void *)(v55 + 8 * v50);
    if (!v32)
    {
      unint64_t v33 = v22 + 2;
      if ((uint64_t)(v22 + 3) >= v60) {
        goto LABEL_16;
      }
      unint64_t v32 = *(void *)(v55 + 8 * (v22 + 3));
      if (v32)
      {
        int64_t v31 = v22 + 3;
        goto LABEL_14;
      }
      int64_t v50 = v22 + 4;
      unint64_t v33 = v22 + 3;
      if ((uint64_t)(v22 + 4) >= v60) {
        goto LABEL_16;
      }
      unint64_t v32 = *(void *)(v55 + 8 * v50);
      if (!v32)
      {
        int64_t v31 = v22 + 5;
        unint64_t v33 = v22 + 4;
        if ((uint64_t)(v22 + 5) >= v60) {
          goto LABEL_16;
        }
        unint64_t v32 = *(void *)(v55 + 8 * v31);
        if (!v32)
        {
          while (v54 != v22)
          {
            unint64_t v32 = *(void *)(v53 + 8 * v22++);
            if (v32)
            {
              int64_t v31 = v22 + 5;
              goto LABEL_14;
            }
          }
          unint64_t v33 = v52;
          goto LABEL_16;
        }
        goto LABEL_14;
      }
    }
    int64_t v31 = v50;
LABEL_14:
    uint64_t v69 = (v32 - 1) & v32;
    unint64_t v70 = v31;
    unint64_t v25 = __clz(__rbit64(v32)) + (v31 << 6);
    goto LABEL_10;
  }
  __break(1u);
}

id specialized static ConversationMUXUtils.voiceIdentificationSignal(withRefId:requestType:isPersonalRequest:isServerFallback:voiceIdClassification:voiceIdOverridden:selectedUserId:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char a5, uint64_t a6, int a7, int a8, uint64_t a9)
{
  int v55 = a7;
  uint64_t v54 = a6;
  int v53 = a4;
  uint64_t v51 = a1;
  uint64_t v52 = a2;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = &v49[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = &v49[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = type metadata accessor for RequestType();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = &v49[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((a5 & 1) == 0)
  {
    int v50 = a8;
    (*(void (**)(unsigned char *, void, uint64_t))(v19 + 104))(v21, *MEMORY[0x1E4FA2448], v18);
    lazy protocol witness table accessor for type UserID and conformance UserID((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, MEMORY[0x1E4FA2460]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v58 == v56 && v59 == v57)
    {
      swift_bridgeObjectRelease_n();
      (*(void (**)(unsigned char *, uint64_t))(v19 + 8))(v21, v18);
    }
    else
    {
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v19 + 8))(v21, v18);
      if ((v27 & 1) == 0)
      {
        if (one-time initialization token for conversationBridge != -1) {
          swift_once();
        }
        uint64_t v43 = type metadata accessor for Logger();
        __swift_project_value_buffer(v43, (uint64_t)static Logger.conversationBridge);
        uint64_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v23, v24)) {
          goto LABEL_26;
        }
        unint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v25 = 0;
        uint64_t v26 = "Not sending VoiceIdentification since this is not a speech request";
        goto LABEL_25;
      }
    }
    id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F969E0]), sel_init);
    UUID.init()();
    uint64_t v29 = UUID.uuidString.getter();
    uint64_t v31 = v30;
    (*(void (**)(unsigned char *, uint64_t))(v15 + 8))(v17, v14);
    unint64_t v32 = (void *)MEMORY[0x1BA9E2DD0](v29, v31);
    swift_bridgeObjectRelease();
    objc_msgSend(v28, sel_setAceId_, v32);

    id v33 = v28;
    uint64_t v34 = (void *)MEMORY[0x1BA9E2DD0](v51, v52);
    objc_msgSend(v33, sel_setRefId_, v34);

    objc_msgSend(v33, sel_setRecordUserAudio_, (v53 & 1) == 0);
    BOOL v36 = (v55 & 1) == 0 && (unint64_t)(v54 - 3) < 2;
    outlined init with copy of ReferenceResolutionClientProtocol?(a9, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    uint64_t v37 = type metadata accessor for UserID();
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v38 + 48))(v13, 1, v37) == 1)
    {
      outlined destroy of UserID?((uint64_t)v13);
    }
    else
    {
      uint64_t v39 = UserID.sharedUserId.getter();
      uint64_t v41 = v40;
      (*(void (**)(unsigned char *, uint64_t))(v38 + 8))(v13, v37);
      if (v36)
      {
        char v42 = v50;
        if ((v50 & 1) == 0)
        {
          uint64_t v45 = MEMORY[0x1BA9E2DD0](v39, v41);
          swift_bridgeObjectRelease();
          objc_msgSend(v33, sel_setSelectedSharedUserId_, v45);
LABEL_34:

          return v33;
        }
        swift_bridgeObjectRelease();
LABEL_29:
        if (one-time initialization token for conversationBridge != -1) {
          swift_once();
        }
        uint64_t v44 = type metadata accessor for Logger();
        __swift_project_value_buffer(v44, (uint64_t)static Logger.conversationBridge);
        uint64_t v45 = Logger.logObject.getter();
        os_log_type_t v46 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v45, v46))
        {
          uint64_t v47 = swift_slowAlloc();
          *(_DWORD *)uint64_t v47 = 67109376;
          LODWORD(v58) = v36;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v47 + 8) = 1024;
          LODWORD(v58) = v42 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1B9C64000, v45, v46, "Not updating selectedSharedUserId in VoiceIdentificationSignal because either selectedUserId is nil or isConfidentEnough: %{BOOL}d, voiceIDOverridden: %{BOOL}d", (uint8_t *)v47, 0xEu);
          MEMORY[0x1BA9E48C0](v47, -1, -1);
        }
        goto LABEL_34;
      }
      swift_bridgeObjectRelease();
    }
    char v42 = v50;
    goto LABEL_29;
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.conversationBridge);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v23, v24)) {
    goto LABEL_26;
  }
  unint64_t v25 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)unint64_t v25 = 0;
  uint64_t v26 = "Not sending VoiceIdenfiticationSignal in case of server fallback";
LABEL_25:
  _os_log_impl(&dword_1B9C64000, v23, v24, v26, v25, 2u);
  MEMORY[0x1BA9E48C0](v25, -1, -1);
LABEL_26:

  return 0;
}

uint64_t specialized static ConversationMUXUtils.isOwner(_:)(void *a1)
{
  return specialized static ConversationMUXUtils.isOwner(_:)(a1);
}

{
  uint64_t result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned char v15[32];
  unsigned char v16[32];

  uint64_t result = (uint64_t)objc_msgSend(a1, sel_attributes);
  if (!result) {
    return result;
  }
  uint64_t v2 = (void *)result;
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v5 = v3 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of Any(v5, (uint64_t)v16);
    outlined init with copy of Any((uint64_t)v16, (uint64_t)v15);
    uint64_t v6 = swift_dynamicCast();
    if (v6) {
      uint64_t v7 = v13;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (v6) {
      uint64_t v10 = v14 == 0;
    }
    else {
      uint64_t v10 = 1;
    }
    if (v10)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
      goto LABEL_5;
    }
    if (v7 == v8 && v14 == v9) {
      break;
    }
    uint64_t v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
    if (v12) {
      goto LABEL_23;
    }
LABEL_5:
    v5 += 32;
    if (!--v4)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRelease_n();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v16);
LABEL_23:
  swift_bridgeObjectRelease_n();
  return 1;
}

uint64_t specialized static ConversationMUXUtils.isUnknownUser(_:)(void *a1)
{
  return specialized static ConversationMUXUtils.isOwner(_:)(a1);
}

uint64_t specialized static ConversationMUXUtils.getUserIdForUnknownUserAsString(from:)(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_35;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v2)
  {
LABEL_36:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_3:
  uint64_t v3 = 0;
  unint64_t v4 = v1 & 0xC000000000000001;
  unint64_t v5 = v1 + 32;
  uint64_t v6 = &off_1E61F1000;
  unint64_t v28 = v1;
  unint64_t v26 = v1 & 0xC000000000000001;
  uint64_t v27 = v2;
  unint64_t v25 = v1 + 32;
  while (1)
  {
    if (v4) {
      id v7 = (id)MEMORY[0x1BA9E3990](v3, v1);
    }
    else {
      id v7 = *(id *)(v5 + 8 * v3);
    }
    uint64_t v8 = v7;
    if (__OFADD__(v3++, 1))
    {
      __break(1u);
LABEL_35:
      swift_bridgeObjectRetain();
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2) {
        goto LABEL_36;
      }
      goto LABEL_3;
    }
    id v10 = [v7 (SEL)v6[291]];
    if (v10) {
      break;
    }

LABEL_5:
    if (v3 == v2) {
      goto LABEL_36;
    }
  }
  uint64_t v11 = v10;
  id v29 = v8;
  uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v13 = *(void *)(v12 + 16);
  if (!v13)
  {

    swift_bridgeObjectRelease();
LABEL_30:
    uint64_t v6 = &off_1E61F1000;
    goto LABEL_5;
  }
  uint64_t v14 = v12 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of Any(v14, (uint64_t)v33);
    outlined init with copy of Any((uint64_t)v33, (uint64_t)v32);
    int v15 = swift_dynamicCast();
    if (v15) {
      uint64_t v16 = v30;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (v15) {
      BOOL v19 = v31 == 0;
    }
    else {
      BOOL v19 = 1;
    }
    if (v19)
    {
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v33);
      goto LABEL_14;
    }
    if (v16 == v17 && v31 == v18) {
      break;
    }
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v33);
    if (v21) {
      goto LABEL_32;
    }
LABEL_14:
    v14 += 32;
    if (!--v13)
    {

      swift_bridgeObjectRelease_n();
      uint64_t v2 = v27;
      unint64_t v1 = v28;
      unint64_t v5 = v25;
      unint64_t v4 = v26;
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRelease_n();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v33);
LABEL_32:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  id v22 = objc_msgSend(v29, sel_sharedUserId);

  if (!v22) {
    return 0;
  }
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v23;
}

void *specialized static ConversationMUXUtils.homeMember(withUserId:from:)(uint64_t a1)
{
  uint64_t v2 = MUXContextMessage.userIdToHomeMember.getter();
  if (*(void *)(v2 + 16) && (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v4 & 1) != 0))
  {
    unint64_t v5 = *(void **)(*(void *)(v2 + 56) + 8 * v3);
    id v6 = v5;
  }
  else
  {
    unint64_t v5 = 0;
  }
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t specialized static ConversationMUXUtils.singleKnownUserInHome(muxContextMessage:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo)?);
  uint64_t v1 = MEMORY[0x1F4188790](v0 - 8);
  unint64_t v3 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v1);
  unint64_t v5 = (char *)&v45 - v4;
  uint64_t result = MUXContextMessage.userIdToHomeMember.getter();
  int v53 = 0;
  int64_t v7 = 0;
  uint64_t v8 = *(void *)(result + 64);
  uint64_t v48 = result + 64;
  uint64_t v9 = 1 << *(unsigned char *)(result + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v8;
  int64_t v49 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v50 = result;
  int64_t v45 = v49 - 1;
  int64_t v46 = v49 - 5;
  uint64_t v47 = result + 104;
  uint64_t v51 = v3;
  uint64_t v52 = MEMORY[0x1E4FBC840] + 8;
  if ((v10 & v8) == 0) {
    goto LABEL_7;
  }
LABEL_25:
  unint64_t v18 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  unint64_t v15 = v18 | (v7 << 6);
LABEL_26:
  uint64_t v19 = v50;
  uint64_t v20 = *(void *)(v50 + 48);
  uint64_t v21 = type metadata accessor for UserID();
  (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v3, v20 + *(void *)(*(void *)(v21 - 8) + 72) * v15, v21);
  uint64_t v22 = *(void *)(v19 + 56);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
  os_log_type_t v24 = *(void **)(v22 + 8 * v15);
  *(void *)&v3[*(int *)(v23 + 48)] = v24;
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v3, 0, 1, v23);
  id v25 = v24;
  while (1)
  {
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v3, (uint64_t)v5, &demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo)?);
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v5, 1, v26) == 1)
    {
      swift_release();
      char v43 = v53;
      return v43 & 1;
    }
    uint64_t v27 = *(void **)&v5[*(int *)(v26 + 48)];
    id v28 = objc_msgSend(v27, sel_attributes);
    if (!v28)
    {

      if (v53) {
        goto LABEL_54;
      }
LABEL_48:
      uint64_t v42 = type metadata accessor for UserID();
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v42 - 8) + 8))(v5, v42);
      int v53 = 1;
      if (!v11) {
        goto LABEL_7;
      }
      goto LABEL_25;
    }
    id v29 = v28;
    unint64_t v54 = v11;
    int64_t v55 = v7;
    uint64_t v30 = v5;
    uint64_t v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v32 = *(void *)(v31 + 16);
    if (!v32)
    {

      swift_bridgeObjectRelease();
LABEL_47:
      unint64_t v5 = v30;
      unint64_t v3 = v51;
      unint64_t v11 = v54;
      int64_t v7 = v55;
      if ((v53 & 1) == 0) {
        goto LABEL_48;
      }
LABEL_54:
      swift_release();
      uint64_t v44 = type metadata accessor for UserID();
      (*(void (**)(char *, uint64_t))(*(void *)(v44 - 8) + 8))(v5, v44);
      char v43 = 0;
      return v43 & 1;
    }
    uint64_t v33 = v31 + 32;
    swift_bridgeObjectRetain();
    while (1)
    {
      outlined init with copy of Any(v33, (uint64_t)v59);
      outlined init with copy of Any((uint64_t)v59, (uint64_t)v58);
      int v34 = swift_dynamicCast();
      uint64_t v35 = v57;
      if (v34) {
        uint64_t v36 = v56;
      }
      else {
        uint64_t v36 = 0;
      }
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (v34) {
        BOOL v39 = v35 == 0;
      }
      else {
        BOOL v39 = 1;
      }
      if (v39)
      {
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v59);
        goto LABEL_32;
      }
      if (v36 == v37 && v35 == v38) {
        break;
      }
      char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v59);
      if (v41) {
        goto LABEL_6;
      }
LABEL_32:
      v33 += 32;
      if (!--v32)
      {

        swift_bridgeObjectRelease_n();
        goto LABEL_47;
      }
    }
    swift_bridgeObjectRelease_n();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v59);
LABEL_6:
    swift_bridgeObjectRelease_n();

    uint64_t v12 = type metadata accessor for UserID();
    unint64_t v5 = v30;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v30, v12);
    unint64_t v3 = v51;
    unint64_t v11 = v54;
    int64_t v7 = v55;
    if (v54) {
      goto LABEL_25;
    }
LABEL_7:
    int64_t v13 = v7 + 1;
    if (__OFADD__(v7, 1)) {
      break;
    }
    if (v13 >= v49)
    {
      int64_t v16 = v7;
      goto LABEL_12;
    }
    unint64_t v14 = *(void *)(v48 + 8 * v13);
    if (v14) {
      goto LABEL_10;
    }
    int64_t v16 = v7 + 1;
    if (v7 + 2 < v49)
    {
      unint64_t v14 = *(void *)(v48 + 8 * (v7 + 2));
      if (v14)
      {
        int64_t v13 = v7 + 2;
        goto LABEL_10;
      }
      int64_t v16 = v7 + 2;
      if (v7 + 3 < v49)
      {
        unint64_t v14 = *(void *)(v48 + 8 * (v7 + 3));
        if (v14)
        {
          int64_t v13 = v7 + 3;
          goto LABEL_10;
        }
        int64_t v13 = v7 + 4;
        int64_t v16 = v7 + 3;
        if (v7 + 4 < v49)
        {
          unint64_t v14 = *(void *)(v48 + 8 * v13);
          if (!v14)
          {
            while (v46 != v7)
            {
              unint64_t v14 = *(void *)(v47 + 8 * v7++);
              if (v14)
              {
                int64_t v13 = v7 + 4;
                goto LABEL_10;
              }
            }
            int64_t v16 = v45;
            goto LABEL_12;
          }
LABEL_10:
          unint64_t v11 = (v14 - 1) & v14;
          unint64_t v15 = __clz(__rbit64(v14)) + (v13 << 6);
          int64_t v7 = v13;
          goto LABEL_26;
        }
      }
    }
LABEL_12:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v3, 1, 1, v17);
    unint64_t v11 = 0;
    int64_t v7 = v16;
  }
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for ConversationMUXUtils()
{
  return &type metadata for ConversationMUXUtils;
}

uint64_t outlined init with copy of StringKeyedValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for StringKeyedValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of StringKeyedValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for StringKeyedValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of FlowPluginAndBundle(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ConversationOutputSubmitter.__allocating_init(requestDispatcherServiceHelper:isMUXEnabled:muxContextMessage:messagePublisher:featureChecker:)(uint64_t a1, char a2, uint64_t a3, long long *a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = *(void *)(a5 + 24);
  uint64_t v12 = *(void *)(a5 + 32);
  uint64_t v13 = __swift_mutable_project_boxed_opaque_existential_1(a5, v11);
  MEMORY[0x1F4188790](v13);
  unint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  uint64_t v17 = specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:muxContextMessage:messagePublisher:featureChecker:)(a1, a2, a3, a4, (uint64_t)v15, v10, v11, v12);
  __swift_destroy_boxed_opaque_existential_1Tm(a5);
  return v17;
}

uint64_t ConversationOutputSubmitter.asyncWork.getter()
{
  return swift_retain();
}

uint64_t ConversationOutputSubmitter.requestDispatcherServiceHelper.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ConversationOutputSubmitter.messagePublisher.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 32, a1);
}

uint64_t ConversationOutputSubmitter.isMUXEnabled.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 72) = a1;
  return result;
}

uint64_t (*ConversationOutputSubmitter.isMUXEnabled.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

void *ConversationOutputSubmitter.muxContextMessage.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 80);
  id v2 = v1;
  return v1;
}

void ConversationOutputSubmitter.muxContextMessage.setter(uint64_t a1)
{
  swift_beginAccess();
  unint64_t v3 = *(void **)(v1 + 80);
  *(void *)(v1 + 80) = a1;
}

uint64_t (*ConversationOutputSubmitter.muxContextMessage.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationOutputSubmitter.selfReflectionAgent.getter()
{
  return swift_retain();
}

uint64_t ConversationOutputSubmitter.selfReflectionAgent.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 88) = a1;
  return swift_release();
}

uint64_t (*ConversationOutputSubmitter.selfReflectionAgent.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationOutputSubmitter.flowCommandCompletions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ConversationOutputSubmitter.flowCommandCompletions.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 96) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ConversationOutputSubmitter.flowCommandCompletions.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationOutputSubmitter.plannerTimeout.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 104);
}

uint64_t ConversationOutputSubmitter.plannerTimeout.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 104) = a1;
  return result;
}

uint64_t (*ConversationOutputSubmitter.plannerTimeout.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:muxContextMessage:messagePublisher:featureChecker:)(uint64_t a1, char a2, uint64_t a3, long long *a4, uint64_t a5)
{
  uint64_t v11 = *(void *)(a5 + 24);
  uint64_t v12 = *(void *)(a5 + 32);
  uint64_t v13 = __swift_mutable_project_boxed_opaque_existential_1(a5, v11);
  MEMORY[0x1F4188790](v13);
  unint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  uint64_t v17 = specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:muxContextMessage:messagePublisher:featureChecker:)(a1, a2, a3, a4, (uint64_t)v15, v5, v11, v12);
  __swift_destroy_boxed_opaque_existential_1Tm(a5);
  return v17;
}

uint64_t ConversationOutputSubmitter.__allocating_init(requestDispatcherServiceHelper:isMUXEnabled:muxContextMessage:messagePublisher:selfReflection:featureChecker:)(uint64_t a1, char a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = *(void *)(a6 + 24);
  uint64_t v14 = *(void *)(a6 + 32);
  uint64_t v15 = __swift_mutable_project_boxed_opaque_existential_1(a6, v13);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v17);
  uint64_t v19 = specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:muxContextMessage:messagePublisher:selfReflection:featureChecker:)(a1, a2, a3, a4, a5, (uint64_t)v17, v12, v13, v14);
  __swift_destroy_boxed_opaque_existential_1Tm(a6);
  return v19;
}

uint64_t ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:muxContextMessage:messagePublisher:selfReflection:featureChecker:)(uint64_t a1, char a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = *(void *)(a6 + 24);
  uint64_t v14 = *(void *)(a6 + 32);
  uint64_t v15 = __swift_mutable_project_boxed_opaque_existential_1(a6, v13);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v17);
  uint64_t v19 = specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:muxContextMessage:messagePublisher:selfReflection:featureChecker:)(a1, a2, a3, a4, a5, (uint64_t)v17, v6, v13, v14);
  __swift_destroy_boxed_opaque_existential_1Tm(a6);
  return v19;
}

uint64_t ConversationOutputSubmitter.handleMitigation(mitigationResult:executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(id, void), uint64_t a16)
{
  uint64_t v130 = a6;
  v131 = (void *)a8;
  uint64_t v125 = a7;
  uint64_t v126 = a3;
  uint64_t v127 = a5;
  uint64_t v129 = a4;
  uint64_t v124 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v19 = *(void *)(v124 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v124);
  uint64_t v122 = (char *)v101 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v123 = (char *)v101 - v22;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  uint64_t v24 = MEMORY[0x1F4188790](v23 - 8);
  uint64_t v120 = (uint64_t)v101 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v121 = (char *)v101 - v26;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v132 = *(void *)(v27 - 8);
  uint64_t v28 = *(void *)(v132 + 64);
  uint64_t v29 = MEMORY[0x1F4188790](v27 - 8);
  int v30 = *a1;
  uint64_t v31 = *(uint64_t (**)(uint64_t))(*(void *)v16 + 200);
  uint64_t v128 = v16;
  uint64_t result = v31(v29);
  if (result)
  {
    uint64_t v33 = result;
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    uint64_t v113 = __swift_project_value_buffer(v34, (uint64_t)static Logger.conversationBridge);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    BOOL v37 = os_log_type_enabled(v35, v36);
    uint64_t v105 = a15;
    if (v37)
    {
      uint64_t v38 = swift_slowAlloc();
      uint64_t v119 = v19;
      uint64_t v103 = a2;
      uint64_t v39 = v38;
      uint64_t v118 = swift_slowAlloc();
      uint64_t v134 = v118;
      *(_DWORD *)uint64_t v39 = 136315394;
      uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000BFLL, 0x80000001BA065D40, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v39 + 12) = 2080;
      LOBYTE(v133) = v30;
      unint64_t v40 = SelfReflectionAgentDecision.description.getter();
      uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v35, v36, "ConversationOutputSubmitter.%s self reflection decision: <%s>", (uint8_t *)v39, 0x16u);
      uint64_t v42 = v118;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v42, -1, -1);
      uint64_t v43 = v39;
      a2 = v103;
      uint64_t v19 = v119;
      MEMORY[0x1BA9E48C0](v43, -1, -1);
    }

    uint64_t v117 = a14;
    uint64_t v116 = a13;
    uint64_t v114 = a12;
    uint64_t v118 = a11;
    uint64_t v115 = a10;
    uint64_t v119 = a9;
    uint64_t v44 = v105;
    switch(v30)
    {
      case 2:
        return swift_release();
      case 3:
      case 6:
        if (!*(void *)(a2 + OBJC_IVAR___SKRExecutionOutput_command)) {
          goto LABEL_20;
        }
        id v45 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F965B8]), sel_init);
        int64_t v46 = v44;
        uint64_t v47 = v45;
        v46(v45, 0);

        break;
      case 4:
        uint64_t v102 = a16;
        specialized Logger.debugF(_:_:_:_:)((uint64_t)"SiriKitRuntime/ConversationOutputSubmitter.swift", 48, 2, (uint64_t)"handleMitigation(mitigationResult:executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)", 191, 2, v113);
        uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v67 = a2;
        id v68 = SelfReflectionAgent.createCloseAssitantAction(closeAssistantReason:)(v65, v66);
        swift_bridgeObjectRelease();
        v101[1] = v33;
        id v69 = SelfReflectionAgent.createCancelRequestAction()();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1BA0534A0;
        *(void *)(inited + 32) = v68;
        *(void *)(inited + 40) = v69;
        uint64_t v134 = inited;
        specialized Array._endMutation()();
        uint64_t v103 = v67;
        uint64_t v71 = *(void *)(v67 + OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8);
        uint64_t v113 = *(void *)(v67 + OBJC_IVAR___SKRExecutionOutput_executionRequestId);
        uint64_t v112 = v71;
        unint64_t v111 = v134 & 0xC000000000000001;
        if ((v134 & 0xC000000000000001) == 0 && *(void *)((v134 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
        {
          __break(1u);
          JUMPOUT(0x1B9E2B058);
        }
        int v72 = 0;
        uint64_t v73 = 0;
        uint64_t v106 = v134;
        uint64_t v104 = v134 + 32;
        unsigned int v110 = *MEMORY[0x1E4FA24B8];
        uint64_t v109 = (void (**)(char *, void, uint64_t))(v19 + 104);
        uint64_t v108 = (void (**)(uint64_t, char *, uint64_t))(v19 + 16);
        uint64_t v107 = (void (**)(char *, uint64_t))(v19 + 8);
        uint64_t v74 = (uint64_t)v121;
        uint64_t v75 = v123;
        uint64_t v76 = v124;
        uint64_t v77 = (uint64_t)v122;
        uint64_t v78 = v120;
        do
        {
          LODWORD(v132) = v72;
          if (v111) {
            id v79 = (id)MEMORY[0x1BA9E3990]();
          }
          else {
            id v79 = *(id *)(v104 + 8 * v73);
          }
          uint64_t v80 = v79;
          uint64_t v81 = type metadata accessor for FlowOutputMessage.InAppResponse();
          int v72 = 1;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v74, 1, 1, v81);
          (*v109)(v75, v110, v76);
          (*v108)(v77, v75, v76);
          outlined init with copy of ReferenceResolutionClientProtocol?(v74, v78, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
          id v82 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
          id v83 = v80;
          uint64_t v84 = swift_bridgeObjectRetain();
          id v85 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)(v80, 0, 0, 0, 0, 0, 0, 0, 0, 0, v113, v84, v77, v78);

          outlined destroy of ReferenceResolutionClientProtocol?(v74, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
          (*v107)(v75, v76);
          specialized ConversationOutputSubmitter.doSubmit(executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)((uint64_t)v85, v126, v129, v127, v130, v125, (uint64_t)v131, v119, v115, v118, v114, v116, v117, v128);

          uint64_t v73 = 1;
        }
        while ((v132 & 1) == 0);
        swift_bridgeObjectRelease();
        if (*(void *)(v103 + OBJC_IVAR___SKRExecutionOutput_command))
        {
          id v100 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F965B8]), sel_init);
          v105(v100, 0);
        }
        else
        {
LABEL_20:
          v105(0, 0);
        }
        break;
      case 5:
        ConversationOutputSubmitter.doSubmit(executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)(a2, v126, v129, v127, v130, v125, (uint64_t)v131, v119, v115, v118, v114, v116, v117, (uint64_t)v105, a16);
        SelfReflectionAgent.createRevealRecognizedSpeech()();
        int64_t v87 = v86;
        uint64_t v88 = *(void *)(a2 + OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8);
        uint64_t v132 = *(void *)(a2 + OBJC_IVAR___SKRExecutionOutput_executionRequestId);
        uint64_t v113 = v88;
        uint64_t v89 = type metadata accessor for FlowOutputMessage.InAppResponse();
        uint64_t v90 = (uint64_t)v121;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v89 - 8) + 56))(v121, 1, 1, v89);
        id v91 = *(void (**)(char *, void, uint64_t))(v19 + 104);
        uint64_t v92 = v19;
        uint64_t v93 = v123;
        uint64_t v94 = v124;
        v91(v123, *MEMORY[0x1E4FA24B8], v124);
        uint64_t v95 = (uint64_t)v122;
        (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v122, v93, v94);
        uint64_t v96 = v120;
        outlined init with copy of ReferenceResolutionClientProtocol?(v90, v120, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
        objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
        id v97 = v87;
        uint64_t v98 = swift_bridgeObjectRetain();
        id v99 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)(v87, 0, 0, 0, 0, 0, 0, 0, 0, 0, v132, v98, v95, v96);

        outlined destroy of ReferenceResolutionClientProtocol?(v90, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
        (*(void (**)(char *, uint64_t))(v92 + 8))(v93, v94);
        specialized ConversationOutputSubmitter.doSubmit(executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)((uint64_t)v99, v126, v129, v127, v130, v125, (uint64_t)v131, v119, v115, v118, v114, v116, v117, v128);

        break;
      default:
        LODWORD(v124) = v30 & 1;
        outlined init with copy of ReferenceResolutionClientProtocol?(v125, (uint64_t)&v134, &demangling cache variable for type metadata for ContextUpdating?);
        outlined init with copy of ReferenceResolutionClientProtocol?(v114, (uint64_t)v101 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for UUID?);
        uint64_t v48 = *(unsigned __int8 *)(v132 + 80);
        uint64_t v132 = (uint64_t)v101 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
        uint64_t v49 = (v48 + 152) & ~v48;
        uint64_t v102 = a16;
        unint64_t v50 = (v28 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v51 = (void *)swift_allocObject();
        _OWORD v51[2] = v105;
        v51[3] = a16;
        uint64_t v53 = v128;
        uint64_t v52 = v129;
        v51[4] = a2;
        v51[5] = v53;
        v51[6] = v126;
        v51[7] = v52;
        unint64_t v54 = (void *)a2;
        uint64_t v55 = v130;
        v51[8] = v127;
        v51[9] = v55;
        outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v134, (uint64_t)(v51 + 10), &demangling cache variable for type metadata for ContextUpdating?);
        uint64_t v57 = v131;
        uint64_t v56 = v132;
        uint64_t v58 = v119;
        v51[15] = v131;
        v51[16] = v58;
        uint64_t v59 = (uint64_t)v51 + v49;
        uint64_t v60 = v118;
        v51[17] = v115;
        v51[18] = v60;
        outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v56, v59, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        uint64_t v61 = (void *)((char *)v51 + v50);
        uint64_t v62 = v117;
        *uint64_t v61 = v116;
        v61[1] = v62;
        swift_bridgeObjectRetain();
        swift_retain();
        id v63 = v54;
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v64 = v57;
        swift_retain();
        swift_bridgeObjectRetain();
        SelfReflectionAgent.createAskToRepeatAction(revealSpeech:_:)(v124, (void (*)(void, void, void, void *))partial apply for closure #1 in ConversationOutputSubmitter.handleMitigation(mitigationResult:executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:), (uint64_t)v51);
        swift_release();
        break;
    }
    return swift_release();
  }
  return result;
}

void closure #1 in ConversationOutputSubmitter.handleMitigation(mitigationResult:executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)(void *a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v118 = a7;
  unint64_t v111 = (void (*)(id, void))a5;
  uint64_t v112 = a6;
  id v110 = a4;
  id v97 = a2;
  id v119 = a1;
  uint64_t v22 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v114 = v22;
  uint64_t v115 = v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = &v94[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v24);
  uint64_t v28 = &v94[-v27];
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  uint64_t v30 = MEMORY[0x1F4188790](v29 - 8);
  uint64_t v120 = &v94[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v30);
  uint64_t v116 = &v94[-v32];
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  __swift_project_value_buffer(v33, (uint64_t)static Logger.conversationBridge);
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  uint64_t v117 = a3;
  uint64_t v113 = v26;
  if (v36)
  {
    BOOL v37 = (uint8_t *)swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    *(_DWORD *)BOOL v37 = 136315138;
    uint64_t v122 = v38;
    uint64_t v121 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000BFLL, 0x80000001BA065D40, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v34, v35, "ConversationOutputSubmitter.%s handling ask to repeat action", v37, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v38, -1, -1);
    MEMORY[0x1BA9E48C0](v37, -1, -1);
  }

  uint64_t v39 = v120;
  uint64_t v40 = v118;
  if (v119)
  {
    id v110 = a8;
    uint64_t v109 = a14;
    uint64_t v108 = a13;
    uint64_t v107 = a12;
    uint64_t v106 = a11;
    uint64_t v105 = a10;
    uint64_t v103 = a9;
    uint64_t v102 = a20;
    uint64_t v101 = a19;
    uint64_t v100 = a18;
    uint64_t v99 = a17;
    uint64_t v104 = a15;
    uint64_t v98 = a16;
    id v41 = v97;
    if (v97)
    {
      uint64_t v42 = *(void *)(v118 + OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8);
      uint64_t v96 = *(void *)(v118 + OBJC_IVAR___SKRExecutionOutput_executionRequestId);
      id v43 = v97;
      uint64_t v44 = type metadata accessor for FlowOutputMessage.InAppResponse();
      id v45 = v116;
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v116, 1, 1, v44);
      unsigned int v95 = *MEMORY[0x1E4FA24B8];
      uint64_t v46 = v114;
      uint64_t v47 = v115;
      (*(void (**)(unsigned char *))(v115 + 104))(v28);
      uint64_t v48 = (uint64_t)v113;
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v47 + 16))(v113, v28, v46);
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v45, (uint64_t)v39, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
      id v49 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
      id v50 = v41;
      uint64_t v51 = v28;
      id v52 = v119;
      outlined copy of (SAUIAddViews, SAUIRevealRecognizedSpeech?, ExecutionContextUpdate)?(v119, v43, v117);
      swift_bridgeObjectRetain();
      id v53 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)(v43, 0, 0, 0, 0, 0, 0, 0, 0, 0, v96, v42, v48, (uint64_t)v120);

      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v45, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
      unint64_t v54 = *(void (**)(unsigned char *, uint64_t))(v47 + 8);
      uint64_t v55 = v51;
      uint64_t v56 = v46;
      uint64_t v57 = v95;
      v54(v51, v56);
      specialized ConversationOutputSubmitter.doSubmit(executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)((uint64_t)v53, v103, v105, v106, v107, v108, v109, v104, v98, v99, v100, v101, v102, (uint64_t)v110);
      id v97 = v50;

      uint64_t v40 = v118;
      uint64_t v39 = v120;
    }
    else
    {
      uint64_t v57 = *MEMORY[0x1E4FA24B8];
      id v70 = v119;
      id v71 = v119;
      uint64_t v55 = v28;
      id v52 = v70;
      id v72 = v117;
      id v97 = 0;
      id v45 = v116;
    }
    uint64_t v73 = *(unsigned char **)(v40 + OBJC_IVAR___SKRExecutionOutput_executionRequestId);
    id v119 = *(id *)(v40 + OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8);
    uint64_t v120 = v73;
    uint64_t v74 = type metadata accessor for FlowOutputMessage.InAppResponse();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56))(v45, 1, 1, v74);
    uint64_t v75 = v115;
    uint64_t v76 = v55;
    uint64_t v77 = v55;
    uint64_t v78 = v114;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v115 + 104))(v77, v57, v114);
    uint64_t v79 = (uint64_t)v113;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v75 + 16))(v113, v76, v78);
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v45, (uint64_t)v39, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
    id v80 = objc_allocWithZone((Class)type metadata accessor for ExecutionOutput());
    uint64_t v81 = v52;
    id v82 = v52;
    id v83 = v117;
    uint64_t v84 = v117;
    uint64_t v85 = swift_bridgeObjectRetain();
    id v86 = specialized ExecutionOutput.init(command:contextUpdate:fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionRequestId:executionSource:inAppResponse:)(v81, v83, 0, 0, 0, 0, 0, 0, 0, 0, (uint64_t)v120, v85, v79, (uint64_t)v39);

    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v116, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
    (*(void (**)(unsigned char *, uint64_t))(v75 + 8))(v76, v78);
    ConversationOutputSubmitter.doSubmit(executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)((uint64_t)v86, v103, v105, v106, v107, v108, v109, v104, v98, v99, v100, v101, v102, (uint64_t)v111, v112);
  }
  else
  {
    unint64_t v58 = 0xD000000000000037;
    id v59 = v110;
    id v60 = v110;
    id v61 = v59;
    uint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = swift_slowAlloc();
      uint64_t v65 = swift_slowAlloc();
      uint64_t v122 = v65;
      *(_DWORD *)uint64_t v64 = 136315394;
      uint64_t v121 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD0000000000000BFLL, 0x80000001BA065D40, &v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v64 + 12) = 2080;
      uint64_t v66 = v111;
      if (v59)
      {
        swift_getErrorValue();
        unint64_t v67 = Error.localizedDescription.getter();
        unint64_t v69 = v68;
      }
      else
      {
        unint64_t v69 = 0x80000001BA065EA0;
        unint64_t v67 = 0xD000000000000037;
      }
      uint64_t v121 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v69, &v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v62, v63, "ConversationOutputSubmitter.%s error: %s", (uint8_t *)v64, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v65, -1, -1);
      MEMORY[0x1BA9E48C0](v64, -1, -1);
    }
    else
    {

      uint64_t v66 = v111;
    }
    uint64_t v122 = 0;
    unint64_t v123 = 0xE000000000000000;
    if (v59)
    {
      swift_getErrorValue();
      unint64_t v58 = Error.localizedDescription.getter();
      uint64_t v88 = v87;
    }
    else
    {
      uint64_t v88 = (void *)0x80000001BA065EA0;
    }
    v89._uint64_t countAndFlagsBits = v58;
    v89._object = v88;
    String.append(_:)(v89);
    swift_bridgeObjectRelease();
    uint64_t v90 = v122;
    unint64_t v91 = v123;
    id v92 = objc_allocWithZone(MEMORY[0x1E4F965A8]);
    uint64_t v93 = (void *)MEMORY[0x1BA9E2DD0](v90, v91);
    swift_bridgeObjectRelease();
    id v86 = objc_msgSend(v92, sel_initWithReason_, v93);

    v66(v86, 0);
  }
}

uint64_t ConversationOutputSubmitter.submit(executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16 = v15;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  uint64_t v21 = a1;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v55 = a7;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    v64[0] = v25;
    *(_DWORD *)uint64_t v24 = 136315394;
    uint64_t v26 = *(void **)&v21[OBJC_IVAR___SKRExecutionOutput_command];
    uint64_t v57 = v16;
    if (v26)
    {
      id v27 = objc_msgSend(v26, sel_aceId);
      if (v27)
      {
        uint64_t v28 = v27;
        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v31 = v30;
      }
      else
      {
        unint64_t v31 = 0xE300000000000000;
        uint64_t v29 = 7104878;
      }
    }
    else
    {
      uint64_t v29 = 7104878;
      unint64_t v31 = 0xE300000000000000;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2080;
    if (a3) {
      uint64_t v32 = a2;
    }
    else {
      uint64_t v32 = 7104878;
    }
    if (a3) {
      unint64_t v33 = a3;
    }
    else {
      unint64_t v33 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v22, v23, "About to submit ExecutionOutput with AceCommand aceId: %s for requestId:<%s>", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v25, -1, -1);
    MEMORY[0x1BA9E48C0](v24, -1, -1);

    a7 = v55;
    uint64_t v16 = v57;
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v34 = a12;
  uint64_t v35 = a10;
  uint64_t v36 = a11;
  uint64_t v37 = (*(uint64_t (**)(void))(*(void *)v16 + 200))();
  if (!v37) {
    return ConversationOutputSubmitter.doSubmit(executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)((uint64_t)v21, a2, a3, a4, a5, a6, a7, a8, a9, v35, v36, v34, a13, a14, a15);
  }
  (*(void (**)(uint64_t *__return_ptr, char *))(*(void *)v37 + 424))(v64, v21);
  int v54 = LOBYTE(v64[0]);
  uint64_t v38 = v21;
  swift_bridgeObjectRetain_n();
  uint64_t v39 = v38;
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v56 = a7;
    uint64_t v42 = swift_slowAlloc();
    id v52 = (void *)swift_slowAlloc();
    uint64_t v53 = swift_slowAlloc();
    v64[0] = v53;
    *(_DWORD *)uint64_t v42 = 136315650;
    os_log_type_t type = v41;
    unint64_t v43 = SelfReflectionAgentDecision.description.getter();
    uint64_t v58 = v16;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v42 + 12) = 2080;
    if (a3) {
      uint64_t v45 = a2;
    }
    else {
      uint64_t v45 = 7104878;
    }
    if (a3) {
      unint64_t v46 = a3;
    }
    else {
      unint64_t v46 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v42 + 22) = 2112;
    uint64_t v47 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v52 = v39;

    uint64_t v16 = v58;
    _os_log_impl(&dword_1B9C64000, v40, type, "Self reflection decision: <%s> for requestId:<%s> execution output: %@", (uint8_t *)v42, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v52, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v53, -1, -1);
    uint64_t v48 = v42;
    a7 = v56;
    MEMORY[0x1BA9E48C0](v48, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v49 = v39;
  uint64_t v36 = a11;
  uint64_t v35 = a10;
  uint64_t v34 = a12;
  if (v54 == 2)
  {
    swift_release();
    return ConversationOutputSubmitter.doSubmit(executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)((uint64_t)v21, a2, a3, a4, a5, a6, a7, a8, a9, v35, v36, v34, a13, a14, a15);
  }
  LOBYTE(v64[0]) = v54;
  (*(void (**)(uint64_t *, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 288))(v64, v49, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  return swift_release();
}

uint64_t specialized ConversationOutputSubmitter.doSubmit(executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v22 = a14;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v23 - 8);
  uint64_t v55 = (char *)&v52 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a6, (uint64_t)&v57, &demangling cache variable for type metadata for ContextUpdating?);
  uint64_t v56 = a2;
  if (v58)
  {
    outlined init with take of ReferenceResolutionClientProtocol(&v57, (uint64_t)v59);
    if (a8)
    {
      uint64_t v25 = *(void **)(a1 + OBJC_IVAR___SKRExecutionOutput_contextUpdate);
      if (v25)
      {
        uint64_t v53 = a3;
        uint64_t v54 = a4;
        uint64_t v26 = *(uint64_t (**)(void))(*(void *)a14 + 152);
        swift_retain();
        id v27 = v25;
        char v28 = v26();
        uint64_t v29 = ContextUpdateScope.toExecutionContextUpdateScope(isMUXEnabled:)(v28 & 1);
        uint64_t v30 = v60;
        uint64_t v31 = v61;
        __swift_project_boxed_opaque_existential_1(v59, v60);
        (*(void (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 8))(v27, a8, v29, v30, v31);

        a3 = v53;
        a4 = v54;
        a2 = v56;
      }
      else
      {
        swift_retain();
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v59);
      swift_release();
      goto LABEL_14;
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v59);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v57, &demangling cache variable for type metadata for ContextUpdating?);
  }
  uint64_t v32 = a3;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  __swift_project_value_buffer(v33, (uint64_t)static Logger.conversationBridge);
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v36 = 0;
    _os_log_impl(&dword_1B9C64000, v34, v35, "Not applying any context but just submitting ExecutionOutput since ContextUpdater or metadata or both are nil", v36, 2u);
    MEMORY[0x1BA9E48C0](v36, -1, -1);
  }

  a3 = v32;
  a2 = v56;
LABEL_14:
  uint64_t v37 = a11;
  uint64_t v53 = a9;
  uint64_t v54 = a10;
  ConversationOutputSubmitter.sendOutputMessagesIfNecessary(output:requestId:commandExecutionInfo:assistantId:sessionId:invocationId:)(a1, a2, a3, a7, a9, a10, a11, a12, a13);
  uint64_t v38 = *(void *)(a1 + OBJC_IVAR___SKRExecutionOutput_command);
  if (a8)
  {
    uint64_t v39 = a3;
    uint64_t v40 = a4;
    uint64_t v41 = type metadata accessor for UserID();
    uint64_t v42 = *(void *)(v41 - 8);
    uint64_t v52 = a11;
    uint64_t v43 = a5;
    uint64_t v44 = a8;
    uint64_t v45 = a7;
    uint64_t v46 = v42;
    uint64_t v47 = (uint64_t)v55;
    (*(void (**)(void))(v42 + 16))();
    uint64_t v48 = v41;
    a4 = v40;
    a3 = v39;
    a2 = v56;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v46 + 56))(v47, 0, 1, v48);
    a7 = v45;
    char v49 = *(unsigned char *)(v44 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_meetsUserSessionThreshold);
    a5 = v43;
    uint64_t v22 = a14;
    uint64_t v37 = v52;
  }
  else
  {
    uint64_t v50 = type metadata accessor for UserID();
    uint64_t v47 = (uint64_t)v55;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v55, 1, 1, v50);
    char v49 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t (*)(), void))(*(void *)v22 + 328))(v38, a2, a3, a4, a5, a7, v53, v54, v37, v47, v49, destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions, 0);
  return outlined destroy of ReferenceResolutionClientProtocol?(v47, (uint64_t *)&demangling cache variable for type metadata for UserID?);
}

uint64_t ConversationOutputSubmitter.doSubmit(executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16 = v15;
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  uint64_t v24 = a14;
  uint64_t v23 = a15;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v25 - 8);
  uint64_t v52 = (char *)&v50 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ReferenceResolutionClientProtocol?(a6, (uint64_t)&v57, &demangling cache variable for type metadata for ContextUpdating?);
  uint64_t v53 = a4;
  uint64_t v54 = a5;
  if (v58)
  {
    outlined init with take of ReferenceResolutionClientProtocol(&v57, (uint64_t)v59);
    if (a8)
    {
      id v27 = *(void **)(a1 + OBJC_IVAR___SKRExecutionOutput_contextUpdate);
      if (v27)
      {
        uint64_t v51 = a7;
        char v28 = *(uint64_t (**)(void))(*(void *)v16 + 152);
        swift_retain();
        id v29 = v27;
        char v30 = v28();
        uint64_t v31 = ContextUpdateScope.toExecutionContextUpdateScope(isMUXEnabled:)(v30 & 1);
        uint64_t v32 = v60;
        uint64_t v33 = v61;
        __swift_project_boxed_opaque_existential_1(v59, v60);
        (*(void (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 8))(v29, a8, v31, v32, v33);

        a7 = v51;
      }
      else
      {
        swift_retain();
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v59);
      swift_release();
      goto LABEL_14;
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v59);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v57, &demangling cache variable for type metadata for ContextUpdating?);
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v34 = type metadata accessor for Logger();
  __swift_project_value_buffer(v34, (uint64_t)static Logger.conversationBridge);
  os_log_type_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v37 = 0;
    _os_log_impl(&dword_1B9C64000, v35, v36, "Not applying any context but just submitting ExecutionOutput since ContextUpdater or metadata or both are nil", v37, 2u);
    MEMORY[0x1BA9E48C0](v37, -1, -1);
  }

LABEL_14:
  uint64_t v38 = a10;
  uint64_t v39 = a11;
  uint64_t v40 = a9;
  ConversationOutputSubmitter.sendOutputMessagesIfNecessary(output:requestId:commandExecutionInfo:assistantId:sessionId:invocationId:)(a1, v55, v56, a7, a9, a10, a11, a12, a13);
  uint64_t v41 = *(void *)(a1 + OBJC_IVAR___SKRExecutionOutput_command);
  uint64_t v42 = type metadata accessor for UserID();
  if (a8)
  {
    uint64_t v50 = v41;
    uint64_t v51 = v16;
    uint64_t v43 = a7;
    uint64_t v44 = v42;
    uint64_t v45 = *(void *)(v42 - 8);
    uint64_t v46 = (uint64_t)v52;
    (*(void (**)(void))(v45 + 16))();
    uint64_t v47 = v44;
    a7 = v43;
    uint64_t v38 = a10;
    uint64_t v40 = a9;
    uint64_t v39 = a11;
    uint64_t v41 = v50;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v45 + 56))(v46, 0, 1, v47);
    uint64_t v24 = a14;
    uint64_t v23 = a15;
    char v48 = *(unsigned char *)(a8 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_meetsUserSessionThreshold);
    uint64_t v16 = v51;
  }
  else
  {
    uint64_t v46 = (uint64_t)v52;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v52, 1, 1, v42);
    char v48 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t))(*(void *)v16 + 328))(v41, v55, v56, v53, v54, a7, v40, v38, v39, v46, v48, v24, v23);
  return outlined destroy of ReferenceResolutionClientProtocol?(v46, (uint64_t *)&demangling cache variable for type metadata for UserID?);
}

void ConversationOutputSubmitter.flowOutputCompleted(flowOutputMessageId:result:)(uint64_t a1, void *a2, void *a3)
{
  void v55[4] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v42 - v11;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = __swift_project_value_buffer(v13, (uint64_t)static Logger.conversationBridge);
  char v48 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v49 = v7 + 16;
  v48(v12, a1, v6);
  id v15 = a2;
  id v16 = a3;
  id v17 = v15;
  id v18 = a3;
  id v19 = v17;
  id v20 = a3;
  id v21 = v19;
  id v22 = a3;
  uint64_t v50 = v14;
  uint64_t v23 = Logger.logObject.getter();
  int v51 = static os_log_type_t.debug.getter();
  BOOL v24 = os_log_type_enabled(v23, (os_log_type_t)v51);
  uint64_t v53 = (uint64_t)a2;
  if (v24)
  {
    os_log_t v44 = v23;
    uint64_t v45 = a1;
    uint64_t v46 = v10;
    uint64_t v25 = swift_slowAlloc();
    uint64_t v42 = (void *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    v55[0] = v43;
    *(_DWORD *)uint64_t v25 = 136315650;
    lazy protocol witness table accessor for type UUID and conformance UUID();
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v47 = *(void (**)(char *, uint64_t))(v7 + 8);
    v47(v12, v6);
    *(_WORD *)(v25 + 12) = 2112;
    if (a2)
    {
      uint64_t v54 = (uint64_t)v21;
      id v28 = v21;
    }
    else
    {
      uint64_t v54 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v29 = v42;
    *uint64_t v42 = v53;

    *(_WORD *)(v25 + 22) = 2112;
    a1 = v45;
    if (a3)
    {
      id v30 = a3;
      uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v54 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
    }
    else
    {
      uint64_t v54 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v31 = 0;
    }
    v29[1] = v31;

    os_log_t v32 = v44;
    _os_log_impl(&dword_1B9C64000, v44, (os_log_type_t)v51, "Flow output completed for messageId: %s result: (%@, %@)", (uint8_t *)v25, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v29, -1, -1);
    uint64_t v33 = v43;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v33, -1, -1);
    MEMORY[0x1BA9E48C0](v25, -1, -1);

    uint64_t v10 = v46;
  }
  else
  {
    uint64_t v47 = *(void (**)(char *, uint64_t))(v7 + 8);
    v47(v12, v6);
  }
  uint64_t v34 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v52 + 240))(v55);
  os_log_type_t v35 = (void (*)(uint64_t *, uint64_t *))specialized Dictionary._Variant.removeValue(forKey:)(a1);
  v34(v55, 0);
  if (v35)
  {
    uint64_t v54 = (uint64_t)a3;
    v55[0] = v53;
    v35(v55, &v54);
    _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)v35);
  }
  else
  {
    v48(v10, a1, v6);
    os_log_type_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      v55[0] = v39;
      *(_DWORD *)uint64_t v38 = 136315138;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v47(v10, v6);
      _os_log_impl(&dword_1B9C64000, v36, v37, "Could not find flow command completion. commandId: %s", v38, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v39, -1, -1);
      MEMORY[0x1BA9E48C0](v38, -1, -1);
    }
    else
    {
      v47(v10, v6);
    }
  }
}

void ConversationOutputSubmitter.sendFlowCommand(_:requestId:requestIdOverride:executionContextMatchingInfo:assistantId:sessionId:currentUserId:meetsUserSessionThreshold:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void (*a12)(void, void), uint64_t a13)
{
  id v152 = a6;
  uint64_t v145 = a7;
  uint64_t v146 = a10;
  uint64_t v154 = a8;
  id v155 = (id)a9;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v18 - 8);
  v151 = (char *)&v137 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  uint64_t v142 = (uint64_t)&v137 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v144 = (uint64_t)&v137 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v143 = (uint64_t)&v137 - v26;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  id v29 = (char *)&v137 - v28;
  uint64_t v30 = MEMORY[0x1F4188790](v27);
  uint64_t v150 = (uint64_t)&v137 - v31;
  MEMORY[0x1F4188790](v30);
  uint64_t v33 = (char *)&v137 - v32;
  uint64_t v153 = type metadata accessor for UUID();
  uint64_t v34 = MEMORY[0x1F4188790](v153);
  MEMORY[0x1F4188790](v34);
  uint64_t v38 = (char *)&v137 - v37;
  if (!a1)
  {
    a12(0, 0);
    return;
  }
  uint64_t v140 = v36;
  uint64_t v141 = v35;
  uint64_t v147 = a12;
  uint64_t v149 = a13;
  id v148 = a1;
  id v39 = SABaseCommand.copyWithFilledInIdentifiers(requestId:requestIdOverride:)(a2, a3, a4, a5);
  if (v39)
  {
    uint64_t v40 = v39;
    char v41 = SABaseCommand.isListenAfterSpeaking.getter();
    uint64_t v43 = v153;
    unint64_t v42 = v154;
    if ((v41 & 1) == 0) {
      goto LABEL_31;
    }
    if (v154)
    {
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v155, (uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v44 = v141;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48))(v33, 1, v43) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v33, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v38, v33, v43);
        if (a3)
        {
          ConversationOutputSubmitter.sendSiriWillPrompt(assistantId:sessionId:requestId:)();
          (*(void (**)(char *, uint64_t))(v44 + 8))(v38, v43);
          goto LABEL_31;
        }
        (*(void (**)(char *, uint64_t))(v44 + 8))(v38, v43);
      }
    }
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v48 = type metadata accessor for Logger();
    __swift_project_value_buffer(v48, (uint64_t)static Logger.conversationBridge);
    uint64_t v49 = v150;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v155, v150, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v50 = Logger.logObject.getter();
    int v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, (os_log_type_t)v51))
    {
      int v138 = v51;
      os_log_t v139 = v50;
      uint64_t v52 = 0x3E6C696E3CLL;
      unint64_t v53 = v42;
      uint64_t v54 = swift_slowAlloc();
      uint64_t v137 = swift_slowAlloc();
      uint64_t aBlock = v137;
      *(_DWORD *)uint64_t v54 = 136315650;
      if (v53)
      {
        uint64_t v52 = v145;
        unint64_t v55 = v53;
      }
      else
      {
        unint64_t v55 = 0xE500000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v157 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v55, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v54 + 12) = 2080;
      outlined init with copy of ReferenceResolutionClientProtocol?(v150, (uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v56 = v141;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48))(v29, 1, v43) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        unint64_t v57 = 0xE500000000000000;
        uint64_t v58 = 0x3E6C696E3CLL;
      }
      else
      {
        uint64_t v58 = UUID.uuidString.getter();
        unint64_t v57 = v59;
        (*(void (**)(char *, uint64_t))(v56 + 8))(v29, v43);
      }
      uint64_t v157 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v57, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ReferenceResolutionClientProtocol?(v150, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      *(_WORD *)(v54 + 22) = 2080;
      if (a3) {
        uint64_t v60 = a2;
      }
      else {
        uint64_t v60 = 0x3E6C696E3CLL;
      }
      if (a3) {
        unint64_t v61 = a3;
      }
      else {
        unint64_t v61 = 0xE500000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v157 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      os_log_t v62 = v139;
      _os_log_impl(&dword_1B9C64000, v139, (os_log_type_t)v138, "Cannot send SiriWillPrompt: one of assistantId(%s), sessionId(%s), or requestId(%s) is nil", (uint8_t *)v54, 0x20u);
      uint64_t v63 = v137;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v63, -1, -1);
      MEMORY[0x1BA9E48C0](v54, -1, -1);

      unint64_t v42 = v154;
    }
    else
    {
      swift_bridgeObjectRelease_n();
      outlined destroy of ReferenceResolutionClientProtocol?(v49, (uint64_t *)&demangling cache variable for type metadata for UUID?);

      swift_bridgeObjectRelease_n();
    }
LABEL_31:
    if (SABaseCommand.isConfirmation.getter())
    {
      if (!v42)
      {
LABEL_38:
        uint64_t v154 = a2;
        if (one-time initialization token for conversationBridge != -1) {
          swift_once();
        }
        uint64_t v67 = type metadata accessor for Logger();
        __swift_project_value_buffer(v67, (uint64_t)static Logger.conversationBridge);
        uint64_t v68 = v144;
        outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v155, v144, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        unint64_t v69 = Logger.logObject.getter();
        int v70 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v69, (os_log_type_t)v70))
        {
          LODWORD(v155) = v70;
          unint64_t v71 = a3;
          uint64_t v72 = 0x3E6C696E3CLL;
          unint64_t v73 = v42;
          uint64_t v74 = swift_slowAlloc();
          uint64_t v150 = swift_slowAlloc();
          uint64_t aBlock = v150;
          *(_DWORD *)uint64_t v74 = 136315650;
          if (v73)
          {
            uint64_t v72 = v145;
            unint64_t v75 = v73;
          }
          else
          {
            unint64_t v75 = 0xE500000000000000;
          }
          swift_bridgeObjectRetain();
          uint64_t v157 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v75, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v74 + 12) = 2080;
          uint64_t v76 = v142;
          outlined init with copy of ReferenceResolutionClientProtocol?(v68, v142, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          uint64_t v77 = v141;
          uint64_t v78 = v153;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v141 + 48))(v76, 1, v153) == 1)
          {
            outlined destroy of ReferenceResolutionClientProtocol?(v76, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            unint64_t v79 = 0xE500000000000000;
            uint64_t v80 = 0x3E6C696E3CLL;
          }
          else
          {
            uint64_t v80 = UUID.uuidString.getter();
            unint64_t v79 = v81;
            (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v76, v78);
          }
          uint64_t v157 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v79, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of ReferenceResolutionClientProtocol?(v68, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          *(_WORD *)(v74 + 22) = 2080;
          if (v71) {
            uint64_t v82 = v154;
          }
          else {
            uint64_t v82 = 0x3E6C696E3CLL;
          }
          if (v71) {
            unint64_t v83 = v71;
          }
          else {
            unint64_t v83 = 0xE500000000000000;
          }
          swift_bridgeObjectRetain();
          uint64_t v157 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v83, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v69, (os_log_type_t)v155, "Cannot send SiriWillAskForConfirmation: one of assistantId(%s), sessionId(%s), or requestId(%s) is nil", (uint8_t *)v74, 0x20u);
          uint64_t v84 = v150;
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v84, -1, -1);
          MEMORY[0x1BA9E48C0](v74, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n();
          outlined destroy of ReferenceResolutionClientProtocol?(v68, (uint64_t *)&demangling cache variable for type metadata for UUID?);

          swift_bridgeObjectRelease_n();
        }
        goto LABEL_55;
      }
      uint64_t v64 = v143;
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v155, v143, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v65 = v141;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v141 + 48))(v64, 1, v43) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v64, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        goto LABEL_38;
      }
      uint64_t v66 = v140;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 32))(v140, v64, v43);
      if (!a3)
      {
        (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v66, v43);
        goto LABEL_38;
      }
      ConversationOutputSubmitter.sendSiriWillAskForConfirmation(assistantId:sessionId:requestId:)();
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v66, v43);
    }
LABEL_55:
    self;
    uint64_t v85 = swift_dynamicCastObjCClass();
    uint64_t v86 = (uint64_t)v151;
    if (v85)
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v87 = type metadata accessor for Logger();
      __swift_project_value_buffer(v87, (uint64_t)static Logger.conversationBridge);
      uint64_t v88 = Logger.logObject.getter();
      os_log_type_t v89 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v88, v89))
      {
        uint64_t v90 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v90 = 0;
        _os_log_impl(&dword_1B9C64000, v88, v89, "Execution is sending SACFProvideContext which is deprecated in SKY since the handling of this command on server races with a new request. Please use ContextUpdater.SARDNativeFlowContextUpdate instead to ensure consistency of state management on server.", v90, 2u);
        MEMORY[0x1BA9E48C0](v90, -1, -1);
      }
    }
    swift_getObjectType();
    if (swift_conformsToProtocol2()) {
      unint64_t v91 = v40;
    }
    else {
      unint64_t v91 = 0;
    }
    if (v91)
    {
      outlined init with copy of ReferenceResolutionClientProtocol?(v146, v86, (uint64_t *)&demangling cache variable for type metadata for UserID?);
      uint64_t v92 = type metadata accessor for UserID();
      uint64_t v93 = *(void *)(v92 - 8);
      int v94 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v93 + 48))(v86, 1, v92);
      id v95 = v40;
      if (v94 == 1)
      {
        uint64_t v96 = outlined destroy of ReferenceResolutionClientProtocol?(v86, (uint64_t *)&demangling cache variable for type metadata for UserID?);
      }
      else
      {
        UserID.sharedUserId.getter();
        uint64_t v96 = (*(uint64_t (**)(uint64_t, uint64_t))(v93 + 8))(v86, v92);
      }
      id v97 = (void *)(*(uint64_t (**)(uint64_t))(*v156 + 176))(v96);
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v98 = type metadata accessor for Logger();
      __swift_project_value_buffer(v98, (uint64_t)static Logger.conversationBridge);
      uint64_t v99 = Logger.logObject.getter();
      os_log_type_t v100 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v99, v100))
      {
        uint64_t v101 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v101 = 0;
        _os_log_impl(&dword_1B9C64000, v99, v100, "Unable to attach personaUniqueIdentifier on this platform.", v101, 2u);
        MEMORY[0x1BA9E48C0](v101, -1, -1);
      }

      swift_bridgeObjectRelease();
    }
    if (v152)
    {
      uint64_t v102 = one-time initialization token for conversationBridge;
      id v103 = v152;
      if (v102 != -1) {
        swift_once();
      }
      uint64_t v104 = type metadata accessor for Logger();
      __swift_project_value_buffer(v104, (uint64_t)static Logger.conversationBridge);
      id v105 = v40;
      uint64_t v106 = Logger.logObject.getter();
      os_log_type_t v107 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v106, v107))
      {
        uint64_t v108 = (uint8_t *)swift_slowAlloc();
        uint64_t v109 = swift_slowAlloc();
        uint64_t aBlock = v109;
        id v155 = v103;
        *(_DWORD *)uint64_t v108 = 136315138;
        id v110 = objc_msgSend(v105, sel_debugDescription);
        uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v113 = v112;

        uint64_t v157 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v113, &aBlock);
        id v103 = v155;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v106, v107, "Submitting FlowCommand: %s with commandExecutionInfo", v108, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v109, -1, -1);
        MEMORY[0x1BA9E48C0](v108, -1, -1);
      }
      else
      {
      }
      uint64_t v124 = v149;
      uint64_t v125 = v147;
      uint64_t v126 = (void *)v156[3];
      uint64_t v127 = (void *)swift_allocObject();
      v127[2] = v105;
      v127[3] = v125;
      v127[4] = v124;
      uint64_t v162 = (uint64_t (*)(void *, void *))partial apply for closure #1 in ConversationOutputSubmitter.sendFlowCommand(_:requestId:requestIdOverride:executionContextMatchingInfo:assistantId:sessionId:currentUserId:meetsUserSessionThreshold:completion:);
      v163 = v127;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v159 = 1107296256;
      uint64_t v160 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
      uint64_t v161 = &block_descriptor_9;
      uint64_t v128 = _Block_copy(&aBlock);
      id v129 = v105;
      id v130 = v103;
      swift_retain();
      swift_release();
      objc_msgSend(v126, sel_handleCommand_withExecutionContextMatchingInfo_completion_, v129, v130, v128);

      _Block_release(v128);
    }
    else
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v114 = type metadata accessor for Logger();
      __swift_project_value_buffer(v114, (uint64_t)static Logger.conversationBridge);
      id v115 = v40;
      uint64_t v116 = Logger.logObject.getter();
      os_log_type_t v117 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v116, v117))
      {
        uint64_t v118 = (uint8_t *)swift_slowAlloc();
        uint64_t v119 = swift_slowAlloc();
        uint64_t aBlock = v119;
        *(_DWORD *)uint64_t v118 = 136315138;
        id v120 = objc_msgSend(v115, sel_debugDescription);
        uint64_t v121 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v123 = v122;

        uint64_t v157 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v121, v123, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v116, v117, "Submitting FlowCommand: %s", v118, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v119, -1, -1);
        MEMORY[0x1BA9E48C0](v118, -1, -1);
      }
      else
      {
      }
      uint64_t v131 = v149;
      uint64_t v132 = (void *)v156[3];
      uint64_t v133 = (void *)swift_allocObject();
      uint64_t v134 = v147;
      v133[2] = v115;
      v133[3] = v134;
      v133[4] = v131;
      uint64_t v162 = partial apply for closure #2 in ConversationOutputSubmitter.sendFlowCommand(_:requestId:requestIdOverride:executionContextMatchingInfo:assistantId:sessionId:currentUserId:meetsUserSessionThreshold:completion:);
      v163 = v133;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v159 = 1107296256;
      uint64_t v160 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
      uint64_t v161 = &block_descriptor_8;
      uint64_t v135 = _Block_copy(&aBlock);
      id v136 = v115;
      swift_retain();
      swift_release();
      objc_msgSend(v132, sel_handleCommand_completion_, v136, v135);

      _Block_release(v135);
    }
    return;
  }
  lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
  uint64_t v45 = (void *)swift_allocError();
  unsigned char *v46 = 15;
  v147(0, v45);

  id v47 = v148;
}

id SABaseCommand.copyWithFilledInIdentifiers(requestId:requestIdOverride:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_msgSend(v5, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
  if (swift_dynamicCast())
  {
    id v14 = v28;
    id v15 = objc_msgSend(v28, sel_aceId);
    uint64_t v27 = a1;
    if (v15)
    {
      id v16 = v15;
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v18;
    }
    else
    {
      UUID.init()();
      uint64_t v17 = UUID.uuidString.getter();
      uint64_t v19 = v20;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
    uint64_t v21 = (void *)MEMORY[0x1BA9E2DD0](v17, v19);
    swift_bridgeObjectRelease();
    objc_msgSend(v14, sel_setAceId_, v21);

    if (a4)
    {
      a2 = a4;
    }
    else
    {
      id v22 = objc_msgSend(v14, sel_refId);
      if (v22)
      {
        uint64_t v23 = v22;
        a3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        a2 = v24;
      }
      else
      {
        if (!a2)
        {
          uint64_t v25 = 0;
          goto LABEL_13;
        }
        swift_bridgeObjectRetain();
        a3 = v27;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v25 = (void *)MEMORY[0x1BA9E2DD0](a3, a2);
    swift_bridgeObjectRelease();
LABEL_13:
    objc_msgSend(v14, sel_setRefId_, v25, v27);

    return v14;
  }
  return 0;
}

uint64_t closure #1 in ConversationOutputSubmitter.sendFlowCommand(_:requestId:requestIdOverride:executionContextMatchingInfo:assistantId:sessionId:currentUserId:meetsUserSessionThreshold:completion:)(void *a1, void *a2, void *a3, uint64_t (*a4)(void *, void *))
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
  id v8 = a3;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v33 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v13 = a1;
    id v14 = objc_msgSend(v8, sel_debugDescription);
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v31 = a2;
    unint64_t v17 = v16;

    a1 = v13;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a2 = v31;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v9, v10, "Submitted FlowCommand: %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v12, -1, -1);
    MEMORY[0x1BA9E48C0](v11, -1, -1);

    if (!v31) {
      return a4(a1, a2);
    }
  }
  else
  {

    if (!a2) {
      return a4(a1, a2);
    }
  }
  id v18 = a1;
  id v19 = a2;
  id v20 = v18;
  id v21 = a2;
  id v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v33 = v25;
    *(_DWORD *)uint64_t v24 = 136315394;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
    uint64_t v26 = Optional.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2080;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
    uint64_t v28 = Optional.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v22, v23, "Error while submitting command. Response received: %s, error: %s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v25, -1, -1);
    MEMORY[0x1BA9E48C0](v24, -1, -1);
  }
  else
  {
  }
  return a4(a1, a2);
}

void ConversationOutputSubmitter.publishDialogEngineOutput(fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionSource:requestId:assistantId:sessionId:)()
{
  uint64_t v1 = v0;
  id v2 = objc_allocWithZone((Class)type metadata accessor for DialogEngineOutputMessage());
  uint64_t v3 = DialogEngineOutputMessage.init(build:)();
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    __swift_project_boxed_opaque_existential_1((void *)(v1 + 32), *(void *)(v1 + 56));
    uint64_t v5 = v4;
    if ((dispatch thunk of MessagePublishing.postMessage(_:)() & 1) == 0)
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl(&dword_1B9C64000, v7, v8, "Could not post DialogEngineOutputMessage", v9, 2u);
        MEMORY[0x1BA9E48C0](v9, -1, -1);

        goto LABEL_13;
      }
    }
    uint64_t v7 = v5;
    goto LABEL_13;
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_1B9C64000, v7, v11, "Could not construct DialogEngineOutputMessage. Missing fields?", v12, 2u);
    MEMORY[0x1BA9E48C0](v12, -1, -1);
  }
LABEL_13:
}

uint64_t closure #1 in ConversationOutputSubmitter.publishDialogEngineOutput(fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionSource:requestId:assistantId:sessionId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v43 = a7;
  uint64_t v44 = a8;
  uint64_t v39 = a4;
  uint64_t v40 = a5;
  uint64_t v38 = a2;
  uint64_t v48 = a14;
  uint64_t v49 = a15;
  uint64_t v46 = a12;
  uint64_t v47 = a13;
  uint64_t v45 = a11;
  uint64_t v41 = a9;
  uint64_t v42 = a10;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestSummary.ExecutionSource?);
  MEMORY[0x1F4188790](v17 - 8);
  id v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v20 - 8);
  id v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for UUID();
  uint64_t v36 = *(void *)(v23 - 8);
  uint64_t v37 = v23;
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v35 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v26 - 8);
  uint64_t v28 = (char *)&v35 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *MEMORY[0x1E4FA2328];
  uint64_t v30 = type metadata accessor for MessageSource();
  uint64_t v31 = *(void *)(v30 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 104))(v28, v29, v30);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  DialogEngineOutputMessage.Builder.source.setter();
  if (!a3)
  {
    UUID.init()();
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v25, v37);
  }
  swift_bridgeObjectRetain();
  DialogEngineOutputMessage.Builder.assistantId.setter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v39, (uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  DialogEngineOutputMessage.Builder.sessionId.setter();
  if (!a6)
  {
    UUID.init()();
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v25, v37);
  }
  swift_bridgeObjectRetain();
  DialogEngineOutputMessage.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  DialogEngineOutputMessage.Builder.fullPrint.setter();
  swift_bridgeObjectRetain();
  DialogEngineOutputMessage.Builder.fullSpeak.setter();
  swift_bridgeObjectRetain();
  DialogEngineOutputMessage.Builder.redactedFullPrint.setter();
  swift_bridgeObjectRetain();
  DialogEngineOutputMessage.Builder.redactedFullSpeak.setter();
  uint64_t v32 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v33 = *(void *)(v32 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v19, v49, v32);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v19, 0, 1, v32);
  return DialogEngineOutputMessage.Builder.executionSource.setter();
}

void ConversationOutputSubmitter.sendOutputMessagesIfNecessary(output:requestId:commandExecutionInfo:assistantId:sessionId:invocationId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  uint64_t v42 = a8;
  uint64_t v43 = a4;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v36 = (uint64_t)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = v9[17];
  uint64_t v20 = v9[18];
  __swift_project_boxed_opaque_existential_1(v9 + 14, v19);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v20 + 16))(v19, v20))
  {
    uint64_t v40 = a9;
    ConversationOutputSubmitter.sendDialogEngineOutputMessageIfNecessary(output:requestId:assistantId:sessionId:)(a1, a2, a3, a5, a6, a7);
    uint64_t v21 = *(void **)(a1 + OBJC_IVAR___SKRExecutionOutput_command);
    uint64_t v41 = a3;
    if (!v21) {
      goto LABEL_14;
    }
    v44[1] = &unk_1F139DE78;
    uint64_t v22 = swift_dynamicCastObjCProtocolConditional();
    if (!v22) {
      goto LABEL_14;
    }
    unint64_t v23 = v22;
    uint64_t v35 = a1;
    uint64_t v38 = a2;
    v44[0] = MEMORY[0x1E4FBC860];
    id v34 = v21;
    uint64_t v39 = v10;
    ConversationOutputSubmitter.extractAllCommands(inside:results:)(v23, v44);
    uint64_t v24 = v44[0];
    uint64_t v37 = a7;
    if (v44[0] >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v25) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t v25 = *(void *)((v44[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v25)
      {
LABEL_6:
        if (v25 < 1)
        {
          __break(1u);
          return;
        }
        uint64_t v26 = 0;
        uint64_t v27 = v35 + OBJC_IVAR___SKRExecutionOutput_executionSource;
        uint64_t v28 = v35 + OBJC_IVAR___SKRExecutionOutput_inAppResponse;
        do
        {
          if ((v24 & 0xC000000000000001) != 0)
          {
            uint64_t v29 = MEMORY[0x1BA9E3990](v26, v24);
          }
          else
          {
            uint64_t v29 = *(void *)(v24 + 8 * v26 + 32);
            swift_unknownObjectRetain();
          }
          ++v26;
          ConversationOutputSubmitter.sendFlowOutputMessage(command:commandExecutionInfo:executionSource:inAppResponse:requestId:assistantId:sessionId:invocationId:)(v29, v43, v27, v28, v38, v41);
          swift_unknownObjectRelease();
        }
        while (v25 != v26);
      }
    }

    swift_bridgeObjectRelease();
    a2 = v38;
    a1 = v35;
LABEL_14:
    uint64_t v30 = a1 + OBJC_IVAR___SKRExecutionOutput_inAppResponse;
    uint64_t v31 = v36;
    outlined init with copy of ReferenceResolutionClientProtocol?(a1 + OBJC_IVAR___SKRExecutionOutput_inAppResponse, v36, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
    uint64_t v32 = type metadata accessor for FlowOutputMessage.InAppResponse();
    int v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v31, 1, v32);
    outlined destroy of ReferenceResolutionClientProtocol?(v31, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
    if (v33 != 1) {
      ConversationOutputSubmitter.sendFlowOutputMessage(command:commandExecutionInfo:executionSource:inAppResponse:requestId:assistantId:sessionId:invocationId:)(0, v43, a1 + OBJC_IVAR___SKRExecutionOutput_executionSource, v30, a2, v41);
    }
  }
}

void ConversationOutputSubmitter.sendDialogEngineOutputMessageIfNecessary(output:requestId:assistantId:sessionId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v48 = a6;
  uint64_t v49 = a5;
  uint64_t v11 = type metadata accessor for CharacterSet();
  uint64_t v47 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1F4188790](v14 - 8);
  unint64_t v16 = (char *)v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for PommesContext();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + OBJC_IVAR___SKRExecutionOutput_command)
    && *(void *)(a1 + OBJC_IVAR___SKRExecutionOutput_fullPrint + 8) | *(void *)(a1
                                                                                  + OBJC_IVAR___SKRExecutionOutput_fullSpeak
                                                                                  + 8))
  {
    ConversationOutputSubmitter.publishDialogEngineOutput(fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionSource:requestId:assistantId:sessionId:)();
    return;
  }
  uint64_t v21 = *(void *)(a1 + OBJC_IVAR___SKRExecutionOutput_contextUpdate);
  if (!v21)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
    goto LABEL_13;
  }
  uint64_t v46 = v20;
  outlined init with copy of ReferenceResolutionClientProtocol?(v21 + OBJC_IVAR___SKRExecutionContextUpdate_pommesContext, (uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
LABEL_13:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
    return;
  }
  _OWORD v43[2] = a4;
  v43[3] = a3;
  v43[1] = v6;
  uint64_t v22 = *(void (**)(char *, char *))(v18 + 32);
  uint64_t v23 = v17;
  uint64_t v24 = v46;
  v43[4] = a2;
  uint64_t v44 = v23;
  v22(v46, v16);
  v51[0] = PommesContext.renderedTexts.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v25 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v45 = v18;
  unint64_t v27 = v26;
  swift_bridgeObjectRelease();
  v51[0] = PommesContext.redactedRenderedTexts.getter();
  unint64_t v28 = v27;
  uint64_t v29 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v31 = v30;
  swift_bridgeObjectRelease();
  v51[0] = v25;
  v51[1] = v28;
  static CharacterSet.whitespacesAndNewlines.getter();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v32 = StringProtocol.trimmingCharacters(in:)();
  unint64_t v34 = v33;
  (*(void (**)(char *, uint64_t))(v47 + 8))(v13, v11);
  swift_bridgeObjectRelease();
  uint64_t v35 = HIBYTE(v34) & 0xF;
  if ((v34 & 0x2000000000000000) == 0) {
    uint64_t v35 = v32 & 0xFFFFFFFFFFFFLL;
  }
  if (v35)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      v43[0] = v29;
      uint64_t v41 = v40;
      v51[0] = v40;
      uint64_t v47 = v31;
      *(_DWORD *)uint64_t v39 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v28, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v37, v38, "Publishing DialogEngineOutput for Pommes using renderedText: %s", v39, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v41, -1, -1);
      MEMORY[0x1BA9E48C0](v39, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v42 = v45;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    ConversationOutputSubmitter.publishDialogEngineOutput(fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionSource:requestId:assistantId:sessionId:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v46, v44);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v24, v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void ConversationOutputSubmitter.sendFlowOutputMessage(command:commandExecutionInfo:executionSource:inAppResponse:requestId:assistantId:sessionId:invocationId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  unint64_t v27 = 0;
  if (a1
    && (self, swift_dynamicCastObjCClass())
    && ((self, swift_dynamicCastObjCClass())
     || (self, swift_dynamicCastObjCClass())
     || (self, swift_dynamicCastObjCClass())
     || (self, swift_dynamicCastObjCClass())
     || (self, swift_dynamicCastObjCClass())))
  {
    swift_unknownObjectRetain();
    id v11 = SABaseCommand.copyWithFilledInIdentifiers(requestId:requestIdOverride:)(a5, a6, 0, 0);
    uint64_t v12 = swift_unknownObjectRelease();
    unint64_t v27 = v11;
  }
  else
  {
    uint64_t v13 = type metadata accessor for FlowOutputMessage.InAppResponse();
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(a4, 1, v13);
    if (v12 == 1) {
      return;
    }
  }
  MEMORY[0x1F4188790](v12);
  id v14 = objc_allocWithZone((Class)type metadata accessor for FlowOutputMessage());
  uint64_t v15 = (void *)FlowOutputMessage.init(build:)();
  if (v15)
  {
    uint64_t v16 = one-time initialization token for conversationBridge;
    uint64_t v17 = v15;
    if (v16 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationBridge);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 138412290;
      swift_beginAccess();
      if (v27) {
        id v23 = v27;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v22 = v27;
      _os_log_impl(&dword_1B9C64000, v19, v20, "Mirroring FlowOutputMessage with command %@ to IntelligenceFlowBridge, but will also submit command directly.", v21, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v22, -1, -1);
      MEMORY[0x1BA9E48C0](v21, -1, -1);
    }

    __swift_project_boxed_opaque_existential_1((void *)(v7 + 32), *(void *)(v7 + 56));
    dispatch thunk of MessagePublishing.postMessage(_:)();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.conversationBridge);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v25))
    {
      unint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v26 = 0;
      _os_log_impl(&dword_1B9C64000, v17, v25, "Could not construct FlowOutputMessage. Missing fields?", v26, 2u);
      MEMORY[0x1BA9E48C0](v26, -1, -1);
    }
  }
}

uint64_t closure #1 in ConversationOutputSubmitter.sendFlowOutputMessage(command:commandExecutionInfo:executionSource:inAppResponse:requestId:assistantId:sessionId:invocationId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id *a9, void *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v41 = a7;
  uint64_t v42 = a8;
  uint64_t v39 = a6;
  uint64_t v40 = a5;
  v37[1] = a2;
  uint64_t v38 = a4;
  id v43 = a10;
  uint64_t v44 = a9;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v45 = (uint64_t)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RequestSummary.ExecutionSource?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v18 - 8);
  os_log_type_t v20 = (char *)v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for UUID();
  v37[0] = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  id v23 = (char *)v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v24 - 8);
  unint64_t v26 = (char *)v37 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *MEMORY[0x1E4FA2328];
  uint64_t v28 = type metadata accessor for MessageSource();
  uint64_t v29 = *(void *)(v28 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 104))(v26, v27, v28);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  FlowOutputMessage.Builder.source.setter();
  if (!a3)
  {
    UUID.init()();
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v37[0] + 8))(v23, v21);
  }
  swift_bridgeObjectRetain();
  FlowOutputMessage.Builder.assistantId.setter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v38, (uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  FlowOutputMessage.Builder.sessionId.setter();
  if (!v39)
  {
    UUID.init()();
    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v37[0] + 8))(v23, v21);
  }
  swift_bridgeObjectRetain();
  FlowOutputMessage.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  FlowOutputMessage.Builder.invocationId.setter();
  uint64_t v30 = v44;
  id v31 = *v44;
  FlowOutputMessage.Builder.command.setter();
  id v32 = v43;
  FlowOutputMessage.Builder.commandExecutionInfo.setter();
  if (*v30)
  {
    id v33 = *v30;
    SABaseCommand.isListenAfterSpeaking.getter();
  }
  FlowOutputMessage.Builder.listenAfterSpeaking.setter();
  uint64_t v34 = type metadata accessor for RequestSummary.ExecutionSource();
  uint64_t v35 = *(void *)(v34 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v17, a11, v34);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v17, 0, 1, v34);
  FlowOutputMessage.Builder.executionSource.setter();
  outlined init with copy of ReferenceResolutionClientProtocol?(a12, v45, &demangling cache variable for type metadata for FlowOutputMessage.InAppResponse?);
  return FlowOutputMessage.Builder.inAppResponse.setter();
}

id ConversationOutputSubmitter.extractAllCommands(inside:results:)(unint64_t a1, void *a2)
{
  uint64_t v4 = swift_unknownObjectRetain();
  MEMORY[0x1BA9E3030](v4);
  if (*(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    goto LABEL_29;
  }
  while (1)
  {
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    id result = objc_msgSend((id)a1, sel_callbacks);
    if (!result) {
      return result;
    }
    uint64_t v6 = result;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAResultCallback);
    a1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v7)
      {
LABEL_31:
        return (id)swift_bridgeObjectRelease();
      }
    }
    else
    {
      uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v7) {
        goto LABEL_31;
      }
    }
    unint64_t v8 = 0;
    unint64_t v9 = a1 & 0xC000000000000001;
    unint64_t v19 = a1 + 32;
    uint64_t v20 = a1 & 0xFFFFFFFFFFFFFF8;
    uint64_t v22 = v7;
    unint64_t v23 = a1;
    unint64_t v21 = a1 & 0xC000000000000001;
    while (1)
    {
      if (v9)
      {
        id v10 = (id)MEMORY[0x1BA9E3990](v8, a1);
      }
      else
      {
        if (v8 >= *(void *)(v20 + 16)) {
          goto LABEL_28;
        }
        id v10 = *(id *)(v19 + 8 * v8);
      }
      id v11 = v10;
      if (__OFADD__(v8++, 1)) {
        break;
      }
      id v13 = objc_msgSend(v10, sel_commands);
      if (v13)
      {
        uint64_t v14 = v13;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAClientBoundCommand);
        unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v15 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v16)
          {
LABEL_24:

            swift_bridgeObjectRelease();
            goto LABEL_7;
          }
        }
        else
        {
          uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (!v16) {
            goto LABEL_24;
          }
        }
        if (v16 < 1) {
          goto LABEL_27;
        }
        for (uint64_t i = 0; i != v16; ++i)
        {
          if ((v15 & 0xC000000000000001) != 0)
          {
            uint64_t v18 = MEMORY[0x1BA9E3990](i, v15);
          }
          else
          {
            uint64_t v18 = *(void *)(v15 + 8 * i + 32);
            swift_unknownObjectRetain();
          }
          ConversationOutputSubmitter.extractAllCommands(inside:results:)(v18, a2);
          swift_unknownObjectRelease();
        }

        swift_bridgeObjectRelease();
        uint64_t v7 = v22;
        a1 = v23;
        unint64_t v9 = v21;
      }
      else
      {
      }
LABEL_7:
      if (v8 == v7) {
        goto LABEL_31;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
}

void ConversationOutputSubmitter.sendSiriWillAskForConfirmation(assistantId:sessionId:requestId:)()
{
  uint64_t v1 = v0;
  id v2 = objc_allocWithZone((Class)type metadata accessor for SiriWillAskForConfirmationMessage());
  uint64_t v3 = SiriWillAskForConfirmationMessage.init(build:)();
  if (v3)
  {
    uint64_t v4 = v3;
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationBridge);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      unint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v8 = 0;
      _os_log_impl(&dword_1B9C64000, v6, v7, "Going to post SiriWillAskForConfirmationMessage", v8, 2u);
      MEMORY[0x1BA9E48C0](v8, -1, -1);
    }

    __swift_project_boxed_opaque_existential_1((void *)(v1 + 32), *(void *)(v1 + 56));
    dispatch thunk of MessagePublishing.postMessage(_:)();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v10))
    {
      id v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v11 = 0;
      _os_log_impl(&dword_1B9C64000, v4, v10, "Could not create SiriWillAskForConfirmationMessage", v11, 2u);
      MEMORY[0x1BA9E48C0](v11, -1, -1);
    }
  }
}

uint64_t closure #1 in ConversationOutputSubmitter.sendSiriWillPrompt(assistantId:sessionId:requestId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(char *), void (*a8)(uint64_t, uint64_t), void (*a9)(char *), uint64_t (*a10)(uint64_t, uint64_t))
{
  uint64_t v27 = a8;
  uint64_t v28 = a4;
  uint64_t v30 = a10;
  uint64_t v31 = a5;
  uint64_t v29 = a9;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v17 - 8);
  unint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *MEMORY[0x1E4FA2328];
  uint64_t v21 = type metadata accessor for MessageSource();
  uint64_t v22 = *(void *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 104))(v19, v20, v21);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  a7(v19);
  swift_bridgeObjectRetain();
  v27(a2, a3);
  uint64_t v23 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v16, v28, v23);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v16, 0, 1, v23);
  v29(v16);
  swift_bridgeObjectRetain();
  return v30(v31, a6);
}

uint64_t ConversationOutputSubmitter.deinit()
{
  swift_release();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);

  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 112);
  return v0;
}

uint64_t ConversationOutputSubmitter.__deallocating_deinit()
{
  swift_release();
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);

  swift_release();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 112);

  return swift_deallocClassInstance();
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(void *)(v11 + 56) + 32 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  _OWORD *v12;
  long long v13;
  long long v14;
  double result;
  uint64_t v16;
  uint64_t vars8;

  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v16 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v16;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = (_OWORD *)(*(void *)(v11 + 56) + 80 * v8);
    uint64_t v13 = v12[3];
    a3[2] = v12[2];
    a3[3] = v13;
    a3[4] = v12[4];
    uint64_t v14 = v12[1];
    *a3 = *v12;
    a3[1] = v14;
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    a3[3] = 0u;
    a3[4] = 0u;
    a3[1] = 0u;
    a3[2] = 0u;
    *a3 = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v21 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v21;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    uint64_t v12 = *(void *)(v9 + 56);
    uint64_t v13 = type metadata accessor for Parse();
    uint64_t v20 = *(void *)(v13 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 32))(a2, v12 + *(void *)(v20 + 72) * v6, v13);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a2;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = type metadata accessor for Parse();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a2;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, &demangling cache variable for type metadata for (Input, ActingFlow, SiriEnvironment), (void (*)(unint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy(), a2);
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, &demangling cache variable for type metadata for (Input, AnyFlow, SiriEnvironment), (void (*)(unint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy(), a2);
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v21 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v21;
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void *)(v11 + 56);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    uint64_t v20 = *(void *)(v13 - 8);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v12 + *(void *)(v20 + 72) * v8, a3, (uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
    uint64_t v15 = a3;
    uint64_t v16 = 0;
    uint64_t v17 = v13;
  }
  else
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (topAction: RankedAction, alternativeParses: [CamParse]));
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v17 = v18;
    uint64_t v15 = a3;
    uint64_t v16 = 1;
  }

  return v14(v15, v16, 1, v17);
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, a2, MEMORY[0x1E4FA2880], (void (*)(unint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy(), a3);
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, a2, MEMORY[0x1E4FA1EE0], (void (*)(unint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy(), a3);
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    outlined init with take of Any((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  uint64_t vars8;

  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v13 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v13;
    }
    uint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for ConversationSessionKey();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    outlined init with take of Any((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v3 & 1) == 0) {
    return 0;
  }
  uint64_t v4 = v2;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *v0;
  uint64_t v9 = *v1;
  *uint64_t v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v6 = v9;
  }
  uint64_t v7 = *(void *)(*(void *)(v6 + 56) + 16 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v6);
  *uint64_t v1 = v6;
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_bridgeObjectRetain();
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  uint64_t v12 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v12;
  }
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * v4, v9);
  uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 16 * v4);
  specialized _NativeDictionary._delete(at:)(v4, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v2 = v1;
  char v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v4 & 1) == 0) {
    return 0;
  }
  char v5 = v3;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v1;
  uint64_t v10 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v7 = v10;
  }
  uint64_t v8 = *(void *)(*(void *)(v7 + 56) + 8 * v5);
  specialized _NativeDictionary._delete(at:)(v5, v7);
  *uint64_t v2 = v7;
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void)@<X2>, void (*a4)(unint64_t, uint64_t)@<X3>, void (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10 = v6;
  swift_bridgeObjectRetain();
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v15;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = *v10;
    uint64_t v27 = *v10;
    *uint64_t v10 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a5();
      uint64_t v17 = v27;
    }
    swift_bridgeObjectRelease();
    uint64_t v18 = *(void *)(v17 + 56);
    uint64_t v19 = a3(0);
    uint64_t v26 = *(void *)(v19 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v26 + 32))(a6, v18 + *(void *)(v26 + 72) * v14, v19);
    a4(v14, v17);
    *uint64_t v10 = v17;
    swift_bridgeObjectRelease();
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56);
    uint64_t v21 = a6;
    uint64_t v22 = 0;
    uint64_t v23 = v19;
  }
  else
  {
    uint64_t v24 = a3(0);
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
    uint64_t v23 = v24;
    uint64_t v21 = a6;
    uint64_t v22 = 1;
  }

  return v20(v21, v22, 1, v23);
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *unint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(*(void *)(v11 + 56) + 40 * v8), a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *unint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(unint64_t, uint64_t)@<X2>, void (*a4)(void)@<X3>, uint64_t a5@<X8>)
{
  char v9 = v5;
  swift_bridgeObjectRetain();
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v13;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v9;
    uint64_t v27 = *v9;
    *char v9 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      a4();
      uint64_t v15 = v27;
    }
    uint64_t v16 = *(void *)(v15 + 48);
    uint64_t v17 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16 + *(void *)(*(void *)(v17 - 8) + 72) * v12, v17);
    uint64_t v18 = *(void *)(v15 + 56);
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(a2);
    uint64_t v26 = *(void *)(v19 - 8);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v18 + *(void *)(v26 + 72) * v12, a5, a2);
    a3(v12, v15);
    *char v9 = v15;
    swift_bridgeObjectRelease();
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56);
    uint64_t v21 = a5;
    uint64_t v22 = 0;
    uint64_t v23 = v19;
  }
  else
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(a2);
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
    uint64_t v23 = v24;
    uint64_t v21 = a5;
    uint64_t v22 = 1;
  }

  return v20(v21, v22, 1, v23);
}

uint64_t specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:muxContextMessage:messagePublisher:selfReflection:featureChecker:)(uint64_t a1, char a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v23);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32))(boxed_opaque_existential_0, a6, a8);
  type metadata accessor for ConcurrentTaskPool();
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = MEMORY[0x1E4FBC860];
  *(void *)(v18 + 16) = MEMORY[0x1E4FBC860];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v20 = swift_allocObject();
  *(_DWORD *)(v20 + 16) = 0;
  *(void *)(v18 + 24) = v20;
  *(void *)(a7 + 16) = v18;
  *(void *)(a7 + 88) = 0;
  *(void *)(a7 + 80) = 0;
  *(void *)(a7 + 96) = specialized Dictionary.init(dictionaryLiteral:)(v19);
  *(void *)(a7 + 104) = 30000000000;
  *(void *)(a7 + 24) = a1;
  *(unsigned char *)(a7 + 72) = a2;
  swift_beginAccess();
  uint64_t v21 = *(void **)(a7 + 80);
  *(void *)(a7 + 80) = a3;

  outlined init with take of ReferenceResolutionClientProtocol(a4, a7 + 32);
  swift_beginAccess();
  *(void *)(a7 + 88) = a5;
  swift_release();
  outlined init with take of ReferenceResolutionClientProtocol(&v23, a7 + 112);
  return a7;
}

uint64_t specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:muxContextMessage:messagePublisher:featureChecker:)(uint64_t a1, char a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v22 = a7;
  uint64_t v23 = a8;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v21);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(boxed_opaque_existential_0, a5, a7);
  type metadata accessor for ConcurrentTaskPool();
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = MEMORY[0x1E4FBC860];
  *(void *)(v16 + 16) = MEMORY[0x1E4FBC860];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v18 = swift_allocObject();
  *(_DWORD *)(v18 + 16) = 0;
  *(void *)(v16 + 24) = v18;
  *(void *)(a6 + 16) = v16;
  *(void *)(a6 + 88) = 0;
  *(void *)(a6 + 80) = 0;
  *(void *)(a6 + 96) = specialized Dictionary.init(dictionaryLiteral:)(v17);
  *(void *)(a6 + 104) = 30000000000;
  *(void *)(a6 + 24) = a1;
  *(unsigned char *)(a6 + 72) = a2;
  swift_beginAccess();
  uint64_t v19 = *(void **)(a6 + 80);
  *(void *)(a6 + 80) = a3;

  outlined init with take of ReferenceResolutionClientProtocol(a4, a6 + 32);
  outlined init with take of ReferenceResolutionClientProtocol(&v21, a6 + 112);
  return a6;
}

uint64_t sub_1B9E32170()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 152) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 104)) {
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 80);
  }

  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

void partial apply for closure #1 in ConversationOutputSubmitter.handleMitigation(mitigationResult:executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v9 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 152) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  closure #1 in ConversationOutputSubmitter.handleMitigation(mitigationResult:executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32), *(void **)(v4 + 40), *(void *)(v4 + 48), *(void *)(v4 + 56), *(void *)(v4 + 64), *(void *)(v4 + 72), v4 + 80, *(void *)(v4 + 120), *(void *)(v4 + 128), *(void *)(v4 + 136), *(void *)(v4 + 144), v4 + v10, *(void *)(v4 + v11),
    *(void *)(v4 + v11 + 8));
}

uint64_t partial apply for closure #2 in ConversationOutputSubmitter.sendFlowCommand(_:requestId:requestIdOverride:executionContextMatchingInfo:assistantId:sessionId:currentUserId:meetsUserSessionThreshold:completion:)(void *a1, void *a2)
{
  return closure #1 in ConversationOutputSubmitter.sendFlowCommand(_:requestId:requestIdOverride:executionContextMatchingInfo:assistantId:sessionId:currentUserId:meetsUserSessionThreshold:completion:)(a1, a2, *(void **)(v2 + 16), *(uint64_t (**)(void *, void *))(v2 + 24));
}

uint64_t sub_1B9E32428@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 152))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B9E32478(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 160))(*a1);
}

uint64_t sub_1B9E324C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 176))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9E3250C(id *a1, uint64_t a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))(**(void **)a2 + 184);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_1B9E32564@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9E325B0(uint64_t a1, uint64_t a2)
{
  id v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 208);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B9E32604@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 224))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9E32650(uint64_t a1, uint64_t a2)
{
  id v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 232);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1B9E326A4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 248))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9E326F0(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 256))(*a1);
}

uint64_t type metadata accessor for ConversationOutputSubmitter()
{
  return self;
}

uint64_t method lookup function for ConversationOutputSubmitter(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationOutputSubmitter);
}

uint64_t dispatch thunk of ConversationOutputSubmitter.isMUXEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.isMUXEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.isMUXEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.muxContextMessage.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.muxContextMessage.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.muxContextMessage.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.selfReflectionAgent.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.selfReflectionAgent.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.selfReflectionAgent.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.flowCommandCompletions.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.flowCommandCompletions.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.flowCommandCompletions.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.plannerTimeout.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.plannerTimeout.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.plannerTimeout.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.__allocating_init(requestDispatcherServiceHelper:isMUXEnabled:muxContextMessage:messagePublisher:featureChecker:)()
{
  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.__allocating_init(requestDispatcherServiceHelper:isMUXEnabled:muxContextMessage:messagePublisher:selfReflection:featureChecker:)()
{
  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.handleMitigation(mitigationResult:executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)()
{
  id v2 = *(uint64_t (**)(void))(*(void *)v0 + 288);
  return v2();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.submit(executionOutput:requestId:requestIdOverride:contextUpdater:executionContextMatchingInfo:executionContextUpdateMetadata:assistantId:sessionId:invocationId:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.flowOutputCompleted(flowOutputMessageId:result:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of ConversationOutputSubmitter.sendFlowCommand(_:requestId:requestIdOverride:executionContextMatchingInfo:assistantId:sessionId:currentUserId:meetsUserSessionThreshold:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t partial apply for closure #1 in ConversationOutputSubmitter.sendFlowOutputMessage(command:commandExecutionInfo:executionSource:inAppResponse:requestId:assistantId:sessionId:invocationId:)(uint64_t a1)
{
  return closure #1 in ConversationOutputSubmitter.sendFlowOutputMessage(command:commandExecutionInfo:executionSource:inAppResponse:requestId:assistantId:sessionId:invocationId:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(id **)(v1 + 72), *(void **)(v1 + 80), *(void *)(v1 + 88), *(void *)(v1 + 96));
}

uint64_t partial apply for closure #1 in ConversationOutputSubmitter.publishDialogEngineOutput(fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionSource:requestId:assistantId:sessionId:)(uint64_t a1)
{
  return closure #1 in ConversationOutputSubmitter.publishDialogEngineOutput(fullPrint:fullSpeak:redactedFullPrint:redactedFullSpeak:executionSource:requestId:assistantId:sessionId:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10], v1[11], v1[12], v1[13], v1[14], v1[15]);
}

uint64_t partial apply for closure #1 in ConversationOutputSubmitter.sendSiriWillPrompt(assistantId:sessionId:requestId:)(uint64_t a1)
{
  return partial apply for closure #1 in ConversationOutputSubmitter.sendSiriWillPrompt(assistantId:sessionId:requestId:)(a1, MEMORY[0x1E4FA2338], MEMORY[0x1E4FA2330], MEMORY[0x1E4FA2348], MEMORY[0x1E4FA2340]);
}

uint64_t partial apply for closure #1 in ConversationOutputSubmitter.sendSiriWillAskForConfirmation(assistantId:sessionId:requestId:)(uint64_t a1)
{
  return partial apply for closure #1 in ConversationOutputSubmitter.sendSiriWillPrompt(assistantId:sessionId:requestId:)(a1, MEMORY[0x1E4FA2358], MEMORY[0x1E4FA2350], MEMORY[0x1E4FA2368], MEMORY[0x1E4FA2360]);
}

uint64_t partial apply for closure #1 in ConversationOutputSubmitter.sendSiriWillPrompt(assistantId:sessionId:requestId:)(uint64_t a1, void (*a2)(char *), void (*a3)(uint64_t, uint64_t), void (*a4)(char *), uint64_t (*a5)(uint64_t, uint64_t))
{
  return closure #1 in ConversationOutputSubmitter.sendSiriWillPrompt(assistantId:sessionId:requestId:)(a1, v5[2], v5[3], v5[4], v5[5], v5[6], a2, a3, a4, a5);
}

id outlined copy of (SAUIAddViews, SAUIRevealRecognizedSpeech?, ExecutionContextUpdate)?(id result, void *a2, void *a3)
{
  if (result)
  {
    id v6 = result;
    id v4 = a2;
    id v5 = a3;
    return v6;
  }
  return result;
}

id ConversationParaphraseResult.xpcRepresentation.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  MEMORY[0x1F4188790](v2 - 8);
  id v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for ActionParaphrase();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ConversationParaphraseResult(0);
  MEMORY[0x1F4188790](v9);
  unint64_t v11 = (uint64_t *)((char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of ConversationParaphraseResult(v1, (uint64_t)v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
    unint64_t v14 = (objc_class *)type metadata accessor for ConversationParaphraseResultXPC(0);
    uint64_t v15 = (char *)objc_allocWithZone(v14);
    outlined init with copy of ActionParaphrase?((uint64_t)v4, (uint64_t)&v15[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_paraphrase]);
    uint64_t v16 = &v15[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_errorMsg];
    *(void *)uint64_t v16 = v13;
    *((void *)v16 + 1) = v12;
    v23.receiver = v15;
    v23.super_class = v14;
    swift_bridgeObjectRetain();
    id v17 = objc_msgSendSuper2(&v23, sel_init);
    outlined destroy of ActionParaphrase?((uint64_t)v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 32))(v8, v11, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v4, v8, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    uint64_t v18 = (objc_class *)type metadata accessor for ConversationParaphraseResultXPC(0);
    uint64_t v19 = (char *)objc_allocWithZone(v18);
    outlined init with copy of ActionParaphrase?((uint64_t)v4, (uint64_t)&v19[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_paraphrase]);
    uint64_t v20 = &v19[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_errorMsg];
    *(void *)uint64_t v20 = 0;
    *((void *)v20 + 1) = 0;
    v22.receiver = v19;
    v22.super_class = v18;
    id v17 = objc_msgSendSuper2(&v22, sel_init);
    outlined destroy of ActionParaphrase?((uint64_t)v4);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v17;
}

id static ConversationParaphraseResultXPC.paraphrase(paraphrase:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ActionParaphrase();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v5, a1, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  unint64_t v8 = (char *)objc_allocWithZone(v1);
  outlined init with copy of ActionParaphrase?((uint64_t)v5, (uint64_t)&v8[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_paraphrase]);
  uint64_t v9 = &v8[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_errorMsg];
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  v12.receiver = v8;
  v12.super_class = v1;
  id v10 = objc_msgSendSuper2(&v12, sel_init);
  outlined destroy of ActionParaphrase?((uint64_t)v5);
  return v10;
}

uint64_t type metadata accessor for ConversationParaphraseResult(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for ConversationParaphraseResult);
}

uint64_t outlined init with copy of ConversationParaphraseResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ConversationParaphraseResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id static ConversationParaphraseResultXPC.error(errorMsg:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ActionParaphrase();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = (char *)objc_allocWithZone(v2);
  outlined init with copy of ActionParaphrase?((uint64_t)v7, (uint64_t)&v9[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_paraphrase]);
  id v10 = &v9[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_errorMsg];
  *(void *)id v10 = a1;
  *((void *)v10 + 1) = a2;
  v13.receiver = v9;
  v13.super_class = v2;
  swift_bridgeObjectRetain();
  id v11 = objc_msgSendSuper2(&v13, sel_init);
  outlined destroy of ActionParaphrase?((uint64_t)v7);
  return v11;
}

uint64_t type metadata accessor for ConversationParaphraseResultXPC(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for ConversationParaphraseResultXPC);
}

uint64_t outlined destroy of ActionParaphrase?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ConversationParaphraseResultXPC.swiftRepresentation()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_errorMsg + 8);
  if (v6)
  {
    *a1 = *(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_errorMsg);
    a1[1] = v6;
    type metadata accessor for ConversationParaphraseResult(0);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    outlined init with copy of ActionParaphrase?(v1 + OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_paraphrase, (uint64_t)v5);
    uint64_t v7 = type metadata accessor for ActionParaphrase();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) == 1)
    {
      static ActionParaphrase.noParaphrase()();
      outlined destroy of ActionParaphrase?((uint64_t)v5);
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v8 + 32))(a1, v5, v7);
    }
    type metadata accessor for ConversationParaphraseResult(0);
    swift_storeEnumTagMultiPayload();
  }
  return swift_bridgeObjectRetain();
}

uint64_t static ConversationParaphraseResultXPC.supportsSecureCoding.getter()
{
  return static ConversationParaphraseResultXPC.supportsSecureCoding;
}

uint64_t static ConversationParaphraseResultXPC.supportsSecureCoding.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static ConversationParaphraseResultXPC.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static ConversationParaphraseResultXPC.supportsSecureCoding.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

Swift::Void __swiftcall ConversationParaphraseResultXPC.encode(with:)(NSCoder with)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ActionParaphrase();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ActionParaphrase?(v2 + OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_paraphrase, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of ActionParaphrase?((uint64_t)v6);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    lazy protocol witness table accessor for type ActionParaphrase and conformance ActionParaphrase(&lazy protocol witness table cache variable for type ActionParaphrase and conformance ActionParaphrase);
    uint64_t v11 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v13 = v12;
    swift_release();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v15 = (void *)MEMORY[0x1BA9E2DD0](0x6172687061726170, 0xEA00000000006573);
    [(objc_class *)with.super.isa encodeObject:isa forKey:v15];
    outlined consume of Data._Representation(v11, v13);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  if (*(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_errorMsg + 8))
  {
    uint64_t v16 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v2
                                                + OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_errorMsg));
    id v17 = (void *)MEMORY[0x1BA9E2DD0](0x67734D726F727265, 0xE800000000000000);
    [(objc_class *)with.super.isa encodeObject:v16 forKey:v17];
  }
}

uint64_t ConversationParaphraseResultXPC.CodingKeys.rawValue.getter(char a1)
{
  if (a1) {
    return 0x67734D726F727265;
  }
  else {
    return 0x6172687061726170;
  }
}

id ConversationParaphraseResultXPC.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = specialized ConversationParaphraseResultXPC.init(coder:)(a1);

  return v4;
}

id ConversationParaphraseResultXPC.init(coder:)(void *a1)
{
  id v2 = specialized ConversationParaphraseResultXPC.init(coder:)(a1);

  return v2;
}

SiriKitRuntime::ConversationParaphraseResultXPC::CodingKeys_optional __swiftcall ConversationParaphraseResultXPC.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ConversationParaphraseResultXPC.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = SiriKitRuntime_ConversationParaphraseResultXPC_CodingKeys_errorMsg;
  }
  else {
    v4.value = SiriKitRuntime_ConversationParaphraseResultXPC_CodingKeys_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

SiriKitRuntime::ConversationParaphraseResultXPC::CodingKeys_optional __swiftcall ConversationParaphraseResultXPC.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  object = stringValue._object;
  v2._uint64_t countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ConversationParaphraseResultXPC.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1) {
    v4.value = SiriKitRuntime_ConversationParaphraseResultXPC_CodingKeys_errorMsg;
  }
  else {
    v4.value = SiriKitRuntime_ConversationParaphraseResultXPC_CodingKeys_unknownDefault;
  }
  if (v3) {
    return v4;
  }
  else {
    return 0;
  }
}

SiriKitRuntime::ConversationParaphraseResultXPC::CodingKeys_optional __swiftcall ConversationParaphraseResultXPC.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (SiriKitRuntime::ConversationParaphraseResultXPC::CodingKeys_optional)2;
}

uint64_t ConversationParaphraseResultXPC.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t ConversationParaphraseResultXPC.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 0x67734D726F727265;
  }
  else {
    return 0x6172687061726170;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConversationParaphraseResultXPC.CodingKeys(unsigned char *a1, unsigned char *a2)
{
  BOOL v2 = *a1 == 0;
  if (*a1) {
    uint64_t v3 = 0x67734D726F727265;
  }
  else {
    uint64_t v3 = 0x6172687061726170;
  }
  if (v2) {
    unint64_t v4 = 0xEA00000000006573;
  }
  else {
    unint64_t v4 = 0xE800000000000000;
  }
  if (*a2) {
    uint64_t v5 = 0x67734D726F727265;
  }
  else {
    uint64_t v5 = 0x6172687061726170;
  }
  if (*a2) {
    unint64_t v6 = 0xE800000000000000;
  }
  else {
    unint64_t v6 = 0xEA00000000006573;
  }
  if (v3 == v5 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConversationParaphraseResultXPC.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ConversationParaphraseResultXPC.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConversationParaphraseResultXPC.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ConversationParaphraseResultXPC.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ConversationParaphraseResultXPC.CodingKeys.init(rawValue:), *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ConversationParaphraseResultXPC.CodingKeys(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x6172687061726170;
  if (*v1) {
    uint64_t v2 = 0x67734D726F727265;
  }
  unint64_t v3 = 0xEA00000000006573;
  if (*v1) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ConversationParaphraseResultXPC.CodingKeys()
{
  if (*v0) {
    return 0x67734D726F727265;
  }
  else {
    return 0x6172687061726170;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ConversationParaphraseResultXPC.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ConversationParaphraseResultXPC.CodingKeys.init(rawValue:), v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance ConversationParaphraseResultXPC.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ConversationParaphraseResultXPC.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ConversationParaphraseResultXPC.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

id ConversationParaphraseResultXPC.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void ConversationParaphraseResultXPC.init()()
{
}

id ConversationParaphraseResultXPC.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for XPCRepresentation.swiftRepresentation() in conformance ConversationParaphraseResultXPC@<X0>(void *a1@<X8>)
{
  return ConversationParaphraseResultXPC.swiftRepresentation()(a1);
}

id specialized ConversationParaphraseResultXPC.init(coder:)(void *a1)
{
  objc_super v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  MEMORY[0x1F4188790](v5 - 8);
  char v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v8 = v2;
  uint64_t v9 = (void *)MEMORY[0x1BA9E2DD0](0x67734D726F727265, 0xE800000000000000);
  unsigned int v10 = objc_msgSend(a1, sel_containsValueForKey_, v9);

  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if (v10)
  {
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
    uint64_t v13 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v13)
    {
      unint64_t v14 = (void *)v13;
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v12 = v15;
    }
    else
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
    }
  }
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSData);
  uint64_t v16 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v16)
  {
    id v17 = (void *)v16;
    uint64_t v27 = ObjectType;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    uint64_t v18 = type metadata accessor for ActionParaphrase();
    id v19 = v17;
    uint64_t v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v22 = v21;

    lazy protocol witness table accessor for type ActionParaphrase and conformance ActionParaphrase((unint64_t *)&lazy protocol witness table cache variable for type ActionParaphrase and conformance ActionParaphrase);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();

    outlined consume of Data._Representation(v20, v22);
    swift_release();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v7, 0, 1, v18);
    outlined init with take of ActionParaphrase?((uint64_t)v7, (uint64_t)&v8[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_paraphrase]);
    uint64_t ObjectType = v27;
  }
  else
  {
    objc_super v23 = &v8[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_paraphrase];
    uint64_t v24 = type metadata accessor for ActionParaphrase();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  }
  uint64_t v25 = (uint64_t *)&v8[OBJC_IVAR____TtC14SiriKitRuntime31ConversationParaphraseResultXPC_errorMsg];
  *uint64_t v25 = v11;
  v25[1] = v12;

  v28.receiver = v8;
  v28.super_class = ObjectType;
  return objc_msgSendSuper2(&v28, sel_init);
}

unint64_t lazy protocol witness table accessor for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationParaphraseResultXPC.CodingKeys and conformance ConversationParaphraseResultXPC.CodingKeys);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for XPCRepresentation.SwiftRepresentation : XPCConvertible in ConversationParaphraseResultXPC()
{
  return &protocol witness table for ConversationParaphraseResult;
}

uint64_t *initializeBufferWithCopyOfBuffer for ConversationParaphraseResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v8 = type metadata accessor for ActionParaphrase();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for ConversationParaphraseResult(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = type metadata accessor for ActionParaphrase();
    unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
}

void *initializeWithCopy for ConversationParaphraseResult(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v5 = type metadata accessor for ActionParaphrase();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for ConversationParaphraseResult(void *a1, void *a2)
{
  if (a1 != a2)
  {
    outlined destroy of ConversationParaphraseResult((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v4 = type metadata accessor for ActionParaphrase();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of ConversationParaphraseResult(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ConversationParaphraseResult(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *initializeWithTake for ConversationParaphraseResult(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for ActionParaphrase();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for ConversationParaphraseResult(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ConversationParaphraseResult((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for ActionParaphrase();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for ConversationParaphraseResult()
{
  uint64_t result = type metadata accessor for ActionParaphrase();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t ObjC metadata update function for ConversationParaphraseResultXPC()
{
  return type metadata accessor for ConversationParaphraseResultXPC(0);
}

void type metadata completion function for ConversationParaphraseResultXPC()
{
  type metadata accessor for ActionParaphrase?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for ConversationParaphraseResultXPC(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationParaphraseResultXPC);
}

uint64_t dispatch thunk of ConversationParaphraseResultXPC.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

void type metadata accessor for ActionParaphrase?()
{
  if (!lazy cache variable for type metadata for ActionParaphrase?)
  {
    type metadata accessor for ActionParaphrase();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ActionParaphrase?);
    }
  }
}

uint64_t getEnumTagSinglePayload for ConversationParaphraseResultXPC.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ConversationParaphraseResultXPC.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9E34F80);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for ConversationParaphraseResultXPC.CodingKeys(unsigned char *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ConversationParaphraseResultXPC.CodingKeys()
{
  return &type metadata for ConversationParaphraseResultXPC.CodingKeys;
}

uint64_t lazy protocol witness table accessor for type ActionParaphrase and conformance ActionParaphrase(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ActionParaphrase();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of ActionParaphrase?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleASRResultCandidateMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleMUXASRResultCandidateMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleNLResultCandidateMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handlePommesResultCandidateMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleResultSelectedMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleCancelRequestMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleRequestContextMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleStartTextRequestMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleStartDirectActionRequestMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleStartLocalRequestMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleStartUnderstandingOnServerRequestMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleStartUnderstandingOnServerTextRequestMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleTextBasedResultCandidateMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleGestureBasedResultCandidateMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleDirectActionResultCandidateMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleNLRepetitionMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleStartCorrectedSpeechRequestMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 136))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleStartSpeechRequestMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 144))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleRuntimeError(error:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 152))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handleAceRemoteExecutionContextUpdate(_:executionContext:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 160))();
}

uint64_t dispatch thunk of ConversationRequestProcessing.handlePommesTRPCandidateMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 168))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessing.handleExecuteNLOnServerMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessing.handleAceFlowOutputCandidate(_:executionContextInfo:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessing.handleAceRunSiriKitExecutor(_:executionContextInfo:plannerInvocationId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 32))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessing.handleAceServerContextUpdateCandidate(_:executionContextInfo:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 40))();
}

void ConversationRequestProcessor.handleRunPommesResponseMessage(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RunPommesResponseMessage.UserInput();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  BOOL v7 = (void **)((char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  unsigned int v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v25 = v9;
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v26 = v5;
    uint64_t v14 = v4;
    uint64_t v15 = v13;
    uint64_t v28 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000022, 0x80000001BA065F60, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v10, v11, "%s", v12, 0xCu);
    swift_arrayDestroy();
    uint64_t v16 = v15;
    uint64_t v4 = v14;
    uint64_t v5 = v26;
    MEMORY[0x1BA9E48C0](v16, -1, -1);
    MEMORY[0x1BA9E48C0](v12, -1, -1);
  }

  if ((*(uint64_t (**)(void))(*(void *)v2 + 592))())
  {
    RunPommesResponseMessage.userInput.getter();
    int v17 = (*(uint64_t (**)(void **, uint64_t))(v5 + 88))(v7, v4);
    if (v17 == *MEMORY[0x1E4FA2150])
    {
      (*(void (**)(void **, uint64_t))(v5 + 96))(v7, v4);
      uint64_t v18 = *v7;
      ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(*v7, a1);

LABEL_13:
      swift_release();
      return;
    }
    if (v17 == *MEMORY[0x1E4FA2148])
    {
      (*(void (**)(void **, uint64_t))(v5 + 96))(v7, v4);
      ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)((uint64_t)*v7, v7[1], a1);
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    unint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl(&dword_1B9C64000, v22, v23, "Unknown UserInput type received with RunPommesResponseMessage", v24, 2u);
      MEMORY[0x1BA9E48C0](v24, -1, -1);
    }

    swift_release();
    (*(void (**)(void **, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    id v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v21 = 0;
      _os_log_impl(&dword_1B9C64000, v19, v20, "PommesTRPCandidateMessage received for an inactive request. Dropping it on the floor.", v21, 2u);
      MEMORY[0x1BA9E48C0](v21, -1, -1);
    }
  }
}

uint64_t ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(void *a1, uint64_t a2)
{
  id v72 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UserID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v14 = UUID.uuidString.getter();
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v73 = a2;
  RunPommesResponseMessage.userId.getter();
  uint64_t v17 = v7;
  int v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  uint64_t v69 = v7;
  uint64_t v70 = v6;
  if (v18 == 1)
  {
    uint64_t v19 = (uint64_t)v71;
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v9, &v71[OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionUserId], v6);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    os_log_type_t v20 = v9;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    os_log_type_t v20 = v9;
    uint64_t v19 = (uint64_t)v71;
  }
  unint64_t v21 = (void *)swift_allocObject();
  v21[2] = v14;
  v21[3] = v16;
  uint64_t v22 = v16;
  id v23 = v72;
  v21[4] = v72;
  id v24 = objc_allocWithZone(MEMORY[0x1E4FA2708]);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = partial apply for closure #1 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:);
  *(void *)(v25 + 24) = v21;
  aBlock[4] = partial apply for thunk for @callee_guaranteed (@guaranteed SMTTCUPackageMutating?) -> ();
  aBlock[5] = v25;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed SMTTCUPackageMutating?) -> ();
  aBlock[3] = &block_descriptor_9;
  uint64_t v26 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  id v27 = v23;
  swift_release();
  id v28 = objc_msgSend(v24, sel_initWithBuilder_, v26);
  _Block_release(v26);
  uint64_t v30 = v73;
  if (!v28)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    __swift_project_value_buffer(v46, (uint64_t)static Logger.conversationBridge);
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v49 = 0;
      _os_log_impl(&dword_1B9C64000, v47, v48, "Could not construct TCUPackage", v49, 2u);
      MEMORY[0x1BA9E48C0](v49, -1, -1);
    }

    goto LABEL_32;
  }
  MEMORY[0x1F4188790](v29);
  *(&v68 - 6) = v19;
  *(&v68 - 5) = v14;
  *(&v68 - 4) = v22;
  *(&v68 - 3) = (uint64_t)v20;
  *(&v68 - 2) = (uint64_t)v28;
  id v31 = objc_allocWithZone((Class)type metadata accessor for TRPCandidateRequestMessage());
  uint64_t v32 = TRPCandidateRequestMessage.init(build:)();
  if (!v32)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Logger.conversationBridge);
    int v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      unint64_t v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v53 = 0;
      _os_log_impl(&dword_1B9C64000, v51, v52, "Could not construct TRPCandidateRequestMessage", v53, 2u);
      MEMORY[0x1BA9E48C0](v53, -1, -1);
    }

    goto LABEL_31;
  }
  id v33 = (void *)v32;
  swift_retain();
  id v72 = v33;
  specialized ConversationRequestProcessor.postToConversationBridge<A>(message:handler:)((uint64_t)v33, v19);
  uint64_t v34 = swift_release();
  MEMORY[0x1F4188790](v34);
  *(&v68 - 6) = v19;
  *(&v68 - 5) = v14;
  *(&v68 - 4) = v22;
  *(&v68 - 3) = (uint64_t)v20;
  *(&v68 - 2) = (uint64_t)v28;
  *(&v68 - 1) = v30;
  id v35 = objc_allocWithZone((Class)type metadata accessor for TTResponseMessage());
  uint64_t v36 = TTResponseMessage.init(build:)();
  if (!v36)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    __swift_project_value_buffer(v54, (uint64_t)static Logger.conversationBridge);
    unint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      unint64_t v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v57 = 0;
      _os_log_impl(&dword_1B9C64000, v55, v56, "Could not construct TTResponseMessage", v57, 2u);
      MEMORY[0x1BA9E48C0](v57, -1, -1);
    }

    id v58 = v72;
    goto LABEL_30;
  }
  uint64_t v37 = (char *)v36;
  swift_retain();
  unint64_t v71 = v37;
  specialized ConversationRequestProcessor.postToConversationBridge<A>(message:handler:)((uint64_t)v37, v19);
  uint64_t v38 = swift_release();
  MEMORY[0x1F4188790](v38);
  *(&v68 - 4) = v19;
  *(&v68 - 3) = v14;
  *(&v68 - 2) = v22;
  *(&v68 - 1) = v30;
  id v39 = objc_allocWithZone((Class)type metadata accessor for PommesTRPCandidateMessage());
  uint64_t v40 = PommesTRPCandidateMessage.init(build:)();
  if (!v40)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v59 = type metadata accessor for Logger();
    __swift_project_value_buffer(v59, (uint64_t)static Logger.conversationBridge);
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v61))
    {
      os_log_t v62 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_t v62 = 0;
      _os_log_impl(&dword_1B9C64000, v60, v61, "Could not construct PommesTRPCandidateMessage", v62, 2u);
      MEMORY[0x1BA9E48C0](v62, -1, -1);
    }

    id v58 = v71;
LABEL_30:

LABEL_31:
LABEL_32:
    (*(void (**)(char *, uint64_t))(v69 + 8))(v20, v70);
    return swift_release();
  }
  uint64_t v41 = v19;
  uint64_t v42 = (void *)v40;
  swift_retain();
  specialized ConversationRequestProcessor.postToConversationBridge<A>(message:handler:)((uint64_t)v42, v41);
  uint64_t v43 = swift_release();
  MEMORY[0x1F4188790](v43);
  *(&v68 - 4) = v41;
  *(&v68 - 3) = v14;
  *(&v68 - 2) = v22;
  id v44 = objc_allocWithZone((Class)type metadata accessor for StoppedListeningForSpeechContinuationMessage());
  uint64_t v45 = (void *)StoppedListeningForSpeechContinuationMessage.init(build:)();
  swift_bridgeObjectRelease();
  if (!v45)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v64 = type metadata accessor for Logger();
    __swift_project_value_buffer(v64, (uint64_t)static Logger.conversationBridge);
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v67 = 0;
      _os_log_impl(&dword_1B9C64000, v65, v66, "Could not construct StoppedListeningForSpeechContinuationMessage", v67, 2u);
      MEMORY[0x1BA9E48C0](v67, -1, -1);
    }

    goto LABEL_31;
  }
  swift_retain();
  specialized ConversationRequestProcessor.postToConversationBridge<A>(message:handler:)((uint64_t)v45, v41);

  (*(void (**)(char *, uint64_t))(v69 + 8))(v20, v70);
  swift_release();
  return swift_release();
}

uint64_t ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v76 = a1;
  id v77 = a2;
  uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  MEMORY[0x1F4188790](v72);
  uint64_t v73 = (void **)((char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesError?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v74 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UserID();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v78 = UUID.uuidString.getter();
  uint64_t v21 = v20;
  uint64_t v22 = v16;
  uint64_t v23 = v12;
  uint64_t v24 = v13;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v22);
  uint64_t v75 = a3;
  RunPommesResponseMessage.userId.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v23) == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionUserId, v23);
    uint64_t v25 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for UserID?);
  }
  else
  {
    uint64_t v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v23);
  }
  MEMORY[0x1F4188790](v25);
  *(&v69 - 6) = v4;
  *(&v69 - 5) = (uint64_t)v15;
  uint64_t v26 = v78;
  *(&v69 - 4) = v78;
  *(&v69 - 3) = v21;
  uint64_t v27 = (uint64_t)v77;
  *(&v69 - 2) = v76;
  *(&v69 - 1) = v27;
  id v28 = objc_allocWithZone((Class)type metadata accessor for TextBasedResultCandidateMessage());
  uint64_t v29 = TextBasedResultCandidateMessage.init(build:)();
  uint64_t v30 = v15;
  if (!v29)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static Logger.conversationBridge);
    os_log_type_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl(&dword_1B9C64000, v48, v49, "Could not construct TextBasedResultCandidateMessage", v50, 2u);
      MEMORY[0x1BA9E48C0](v50, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v30, v23);
  }
  id v31 = (void *)v29;
  swift_retain();
  specialized ConversationRequestProcessor.postToConversationBridge<A>(message:handler:)((uint64_t)v31, v4);
  uint64_t v32 = swift_release();
  MEMORY[0x1F4188790](v32);
  *(&v69 - 4) = v4;
  *(&v69 - 3) = v26;
  *(&v69 - 2) = v21;
  id v33 = objc_allocWithZone((Class)type metadata accessor for ResultSelectedMessage());
  uint64_t v34 = MEMORY[0x1BA9E09F0](partial apply for closure #2 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:), &v69 - 6);
  if (!v34)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    __swift_project_value_buffer(v51, (uint64_t)static Logger.conversationBridge);
    os_log_type_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v54 = 0;
      _os_log_impl(&dword_1B9C64000, v52, v53, "Could not construct ResultSelectedMessage", v54, 2u);
      MEMORY[0x1BA9E48C0](v54, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v30, v23);
  }
  id v35 = (void *)v34;
  swift_retain();
  id v77 = v35;
  specialized ConversationRequestProcessor.postToConversationBridge<A>(message:handler:)((uint64_t)v35, v4);
  uint64_t v36 = swift_release();
  MEMORY[0x1F4188790](v36);
  *(&v69 - 6) = v4;
  *(&v69 - 5) = v26;
  *(&v69 - 4) = v21;
  *(&v69 - 3) = (uint64_t)v30;
  *(&v69 - 2) = v75;
  id v37 = objc_allocWithZone((Class)type metadata accessor for NLResultCandidateMessage());
  uint64_t v38 = NLResultCandidateMessage.init(build:)();
  if (!v38)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    __swift_project_value_buffer(v55, (uint64_t)static Logger.conversationBridge);
    os_log_type_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      id v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v58 = 0;
      _os_log_impl(&dword_1B9C64000, v56, v57, "Could not construct NLResultCandidateMessage", v58, 2u);
      MEMORY[0x1BA9E48C0](v58, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v30, v23);
  }
  id v39 = (void *)v38;
  unint64_t v71 = v30;
  uint64_t v76 = v23;
  swift_retain();
  specialized ConversationRequestProcessor.postToConversationBridge<A>(message:handler:)((uint64_t)v39, v4);
  swift_release();
  uint64_t v40 = v73;
  RunPommesResponseMessage.pommesResult.getter();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  id v70 = v39;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v42 = type metadata accessor for PommesError();
    uint64_t v43 = *(void *)(v42 - 8);
    uint64_t v44 = (uint64_t)v74;
    (*(void (**)(char *, void **, uint64_t))(v43 + 32))(v74, v40, v42);
    uint64_t v45 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v44, 0, 1, v42);
    uint64_t v46 = 0;
  }
  else
  {
    uint64_t v46 = *v40;
    uint64_t v60 = type metadata accessor for PommesError();
    uint64_t v44 = (uint64_t)v74;
    uint64_t v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v74, 1, 1, v60);
  }
  MEMORY[0x1F4188790](v45);
  *(&v69 - 6) = v4;
  *(&v69 - 5) = v61;
  *(&v69 - 4) = v21;
  *(&v69 - 3) = (uint64_t)v46;
  uint64_t v62 = v75;
  *(&v69 - 2) = v44;
  *(&v69 - 1) = v62;
  id v63 = objc_allocWithZone((Class)type metadata accessor for PommesResultCandidateMessage());
  uint64_t v64 = (void *)PommesResultCandidateMessage.init(build:)();
  swift_bridgeObjectRelease();
  if (v64)
  {
    swift_retain();
    specialized ConversationRequestProcessor.postToConversationBridge<A>(message:handler:)((uint64_t)v64, v4);

    outlined destroy of ReferenceResolutionClientProtocol?(v44, &demangling cache variable for type metadata for PommesError?);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v71, v76);
    return swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v65 = type metadata accessor for Logger();
    __swift_project_value_buffer(v65, (uint64_t)static Logger.conversationBridge);
    os_log_type_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v68 = 0;
      _os_log_impl(&dword_1B9C64000, v66, v67, "Could not construct PommesResultCandidateMessage", v68, 2u);
      uint64_t v44 = (uint64_t)v74;
      MEMORY[0x1BA9E48C0](v68, -1, -1);
    }

    outlined destroy of ReferenceResolutionClientProtocol?(v44, &demangling cache variable for type metadata for PommesError?);
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v71, v76);
  }
}

id closure #1 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(id result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = (void *)MEMORY[0x1BA9E2DD0](a2, a3);
    objc_msgSend(v5, sel_setTcuId_, v6);

    return objc_msgSend(v5, sel_setSpeechPackage_, a4);
  }
  return result;
}

uint64_t closure #2 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  v27[1] = a3;
  uint64_t v28 = a5;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *MEMORY[0x1E4FA2328];
  uint64_t v18 = type metadata accessor for MessageSource();
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 104))(v16, v17, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  TRPCandidateRequestMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  TRPCandidateRequestMessage.Builder.assistantId.setter();
  uint64_t v20 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v13, v20, v21);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v13, 0, 1, v21);
  TRPCandidateRequestMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  TRPCandidateRequestMessage.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  TRPCandidateRequestMessage.Builder.trpCandidateId.setter();
  uint64_t v23 = type metadata accessor for UserID();
  uint64_t v24 = *(void *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v10, v28, v23);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v10, 0, 1, v23);
  TRPCandidateRequestMessage.Builder.userId.setter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(SMTTCUPackage, ImmutableConversationSessionState)>);
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1BA04FD90;
  *(void *)(v25 + 32) = a6;
  (*(void (**)(void *__return_ptr, void *))(*(void *)a2 + 408))(v29, a6);
  __swift_project_boxed_opaque_existential_1(v29, v29[3]);
  dispatch thunk of ConversationSessionState.immutableSnapshot()();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
  return TRPCandidateRequestMessage.Builder.tcuToContextList.setter();
}

id closure #3 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  v37[1] = a7;
  void v37[2] = a4;
  uint64_t v38 = a5;
  id v39 = a6;
  v37[3] = a3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TCUMappedNLResponse?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v22 = (char *)v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *MEMORY[0x1E4FA2328];
  uint64_t v24 = type metadata accessor for MessageSource();
  uint64_t v25 = *(void *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 104))(v22, v23, v24);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  TTResponseMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  TTResponseMessage.Builder.assistantId.setter();
  uint64_t v26 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v28 = *(void *)(v27 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v19, v26, v27);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v19, 0, 1, v27);
  TTResponseMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  TTResponseMessage.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  TTResponseMessage.Builder.trpCandidateId.setter();
  uint64_t v29 = type metadata accessor for UserID();
  uint64_t v30 = *(void *)(v29 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v16, v38, v29);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v16, 0, 1, v29);
  TTResponseMessage.Builder.userId.setter();
  uint64_t v31 = *MEMORY[0x1E4FA2078];
  uint64_t v32 = type metadata accessor for TTResponseMessage.MitigationDecision();
  uint64_t v33 = *(void *)(v32 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 104))(v13, v31, v32);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v13, 0, 1, v32);
  TTResponseMessage.Builder.mitigationDecision.setter();
  id result = objc_msgSend(v39, sel_tcuId);
  if (result)
  {
    id v35 = result;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    RunPommesResponseMessage.nlResponse.getter();
    TCUMappedNLResponse.init(tcuId:nlResponse:)();
    uint64_t v36 = type metadata accessor for TCUMappedNLResponse();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v10, 0, 1, v36);
    TTResponseMessage.Builder.tcuMappedNLResponse.setter();
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    return (id)TTResponseMessage.Builder.tcuStateDict.setter();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #4 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v27[0] = a3;
  v27[1] = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<PommesResponse, PommesError>?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *MEMORY[0x1E4FA2328];
  uint64_t v19 = type metadata accessor for MessageSource();
  uint64_t v20 = *(void *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 104))(v17, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  PommesTRPCandidateMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  PommesTRPCandidateMessage.Builder.assistantId.setter();
  uint64_t v21 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v14, v21, v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v14, 0, 1, v22);
  PommesTRPCandidateMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  PommesTRPCandidateMessage.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  PommesTRPCandidateMessage.Builder.trpCandidateId.setter();
  RunPommesResponseMessage.pommesResult.getter();
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v11, 0, 1, v24);
  PommesTRPCandidateMessage.Builder.pommesResult.setter();
  RunPommesResponseMessage.pommesSearchReason.getter();
  uint64_t v25 = type metadata accessor for PommesSearchReason();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v8, 0, 1, v25);
  PommesTRPCandidateMessage.Builder.searchReason.setter();
  swift_bridgeObjectRetain();
  return PommesTRPCandidateMessage.Builder.tcuId.setter();
}

uint64_t closure #5 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *MEMORY[0x1E4FA2328];
  uint64_t v10 = type metadata accessor for MessageSource();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  StoppedListeningForSpeechContinuationMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  StoppedListeningForSpeechContinuationMessage.Builder.assistantId.setter();
  uint64_t v12 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v5, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v5, 0, 1, v13);
  StoppedListeningForSpeechContinuationMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  StoppedListeningForSpeechContinuationMessage.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  return StoppedListeningForSpeechContinuationMessage.Builder.lastTRPId.setter();
}

uint64_t closure #1 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v27 = a4;
  uint64_t v28 = a6;
  uint64_t v26 = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *MEMORY[0x1E4FA2328];
  uint64_t v17 = type metadata accessor for MessageSource();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v15, v16, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  TextBasedResultCandidateMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  TextBasedResultCandidateMessage.Builder.assistantId.setter();
  uint64_t v19 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v12, v19, v20);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v12, 0, 1, v20);
  TextBasedResultCandidateMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  TextBasedResultCandidateMessage.Builder.requestId.setter();
  uint64_t v22 = type metadata accessor for UserID();
  uint64_t v23 = *(void *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v9, v26, v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v9, 0, 1, v22);
  TextBasedResultCandidateMessage.Builder.userId.setter();
  swift_bridgeObjectRetain();
  TextBasedResultCandidateMessage.Builder.resultCandidateId.setter();
  swift_bridgeObjectRetain();
  return TextBasedResultCandidateMessage.Builder.utterance.setter();
}

uint64_t closure #2 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *MEMORY[0x1E4FA2328];
  uint64_t v10 = type metadata accessor for MessageSource();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  ResultSelectedMessageBase.Builder.source.setter();
  swift_bridgeObjectRetain();
  ResultSelectedMessageBase.Builder.assistantId.setter();
  uint64_t v12 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v5, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v5, 0, 1, v13);
  ResultSelectedMessageBase.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  ResultSelectedMessageBase.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  ResultSelectedMessageBase.Builder.resultCandidateId.setter();
  ResultSelectedMessageBase.Builder.isMitigated.setter();
  return ResultSelectedMessageBase.Builder.endpointMode.setter();
}

uint64_t closure #3 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v38[2] = a3;
  uint64_t v39 = a5;
  v38[1] = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v41 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v40 = (char *)v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *MEMORY[0x1E4FA2328];
  uint64_t v23 = type metadata accessor for MessageSource();
  uint64_t v24 = *(void *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 104))(v21, v22, v23);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  NLResultCandidateMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  NLResultCandidateMessage.Builder.assistantId.setter();
  uint64_t v25 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v26 = type metadata accessor for UUID();
  uint64_t v27 = *(void *)(v26 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v18, v25, v26);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v18, 0, 1, v26);
  NLResultCandidateMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  NLResultCandidateMessage.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  NLResultCandidateMessage.Builder.resultCandidateId.setter();
  uint64_t v28 = *MEMORY[0x1E4FA2878];
  uint64_t v29 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  uint64_t v30 = *(void *)(v29 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 104))(v15, v28, v29);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v15, 0, 1, v29);
  NLResultCandidateMessage.Builder.responseStatusCode.setter();
  uint64_t v31 = type metadata accessor for UserID();
  uint64_t v32 = *(void *)(v31 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v12, v39, v31);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v12, 0, 1, v31);
  NLResultCandidateMessage.Builder.userId.setter();
  uint64_t v33 = (void *)RunPommesResponseMessage.nlResponse.getter();
  NLParseResponse.userParses.getter();

  NLResultCandidateMessage.Builder.userParses.setter();
  uint64_t v34 = (void *)RunPommesResponseMessage.nlResponse.getter();
  NLParseResponse.fallbackParse.getter();

  NLResultCandidateMessage.Builder.fallbackParse.setter();
  id v35 = (void *)RunPommesResponseMessage.nlResponse.getter();
  NLParseResponse.languageVariantResult.getter();

  NLResultCandidateMessage.Builder.languageVariantResult.setter();
  uint64_t v36 = (void *)RunPommesResponseMessage.nlResponse.getter();
  NLParseResponse.responseVariantResult.getter();

  return NLResultCandidateMessage.Builder.responseVariantResult.setter();
}

uint64_t closure #4 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v31 = a6;
  uint64_t v32 = a7;
  v30[0] = a4;
  v30[1] = a3;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesError?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = (char *)v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *MEMORY[0x1E4FA2328];
  uint64_t v22 = type metadata accessor for MessageSource();
  uint64_t v23 = *(void *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 104))(v20, v21, v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  id v24 = a5;
  PommesResultCandidateMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  PommesResultCandidateMessage.Builder.assistantId.setter();
  uint64_t v25 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v26 = type metadata accessor for UUID();
  uint64_t v27 = *(void *)(v26 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v17, v25, v26);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v17, 0, 1, v26);
  PommesResultCandidateMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  PommesResultCandidateMessage.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  PommesResultCandidateMessage.Builder.resultCandidateId.setter();
  PommesResultCandidateMessage.Builder.pommesResponse.setter();
  outlined init with copy of PommesError?(v31, (uint64_t)v14);
  PommesResultCandidateMessage.Builder.error.setter();
  RunPommesResponseMessage.pommesSearchReason.getter();
  uint64_t v28 = type metadata accessor for PommesSearchReason();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v11, 0, 1, v28);
  return PommesResultCandidateMessage.Builder.searchReason.setter();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed SMTTCUPackageMutating?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  v3(a2);

  return swift_unknownObjectRelease();
}

uint64_t sub_1B9E38820()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

id partial apply for closure #1 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(void *a1)
{
  return closure #1 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1B9E3886C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed SMTTCUPackageMutating?) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for closure #2 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(uint64_t a1)
{
  return partial apply for closure #2 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))closure #2 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:));
}

uint64_t specialized ConversationRequestProcessor.postToConversationBridge<A>(message:handler:)(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v10 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x80000001BA066030, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v5, v6, "Posting message %s to ConversationBridge", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 832))(a1);
}

{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v10;

  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v10 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x80000001BA066010, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v5, v6, "Posting message %s to ConversationBridge", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 856))(a1);
}

{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v10;

  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v10 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, 0x80000001BA065FF0, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v5, v6, "Posting message %s to ConversationBridge", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 920))(a1);
}

{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v10;

  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v10 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002CLL, 0x80000001BA065FC0, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v5, v6, "Posting message %s to ConversationBridge", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 872))(a1);
}

{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v10;

  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v10 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x80000001BA0660B0, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v5, v6, "Posting message %s to ConversationBridge", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 752))(a1);
}

{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v10;

  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v10 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000015, 0x80000001BA066090, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v5, v6, "Posting message %s to ConversationBridge", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 936))(a1);
}

{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v10;

  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v10 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000018, 0x80000001BA066070, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v5, v6, "Posting message %s to ConversationBridge", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 776))(a1);
}

{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v10;

  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v10 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x80000001BA066050, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v5, v6, "Posting message %s to ConversationBridge", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 816))(a1);
}

id partial apply for closure #3 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(uint64_t a1)
{
  return closure #3 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t partial apply for closure #4 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(uint64_t a1)
{
  return closure #4 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #5 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(uint64_t a1)
{
  return closure #5 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)(uint64_t a1)
{
  return closure #1 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t partial apply for closure #2 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)(uint64_t a1)
{
  return closure #2 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #3 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)(uint64_t a1)
{
  return partial apply for closure #2 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))closure #3 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:));
}

uint64_t partial apply for closure #2 in ConversationRequestProcessor.handleRunPommesResponseMessage(withSpeechPackage:message:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t partial apply for closure #4 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)(uint64_t a1)
{
  return closure #4 in ConversationRequestProcessor.handleRunPommesResponseMessageInternal(withTextInput:message:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t outlined init with copy of PommesError?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesError?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t ConversationRequestProcessor.asyncWork.getter()
{
  return swift_retain();
}

uint64_t one-time initialization function for warmUpSignals()
{
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSSet);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1BA052AC0;
  uint64_t v1 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAIntentGroupIntentSignal);
  *(void *)(v0 + 56) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SAIntentGroupIntentSignal.Type);
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAIntentGroupSiriKitPluginSignal);
  *(void *)(v0 + 88) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAIntentGroupSiriKitPluginSignal.Type);
  *(void *)(v0 + 64) = v2;
  uint64_t v3 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAAceDomainSignal);
  *(void *)(v0 + 120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAAceDomainSignal.Type);
  *(void *)(v0 + 96) = v3;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAMPMusicPlaybackImminent);
  *(void *)(v0 + 152) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAMPMusicPlaybackImminent.Type);
  *(void *)(v0 + 128) = v4;
  uint64_t v5 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SADonateRankedQueriesToPortrait);
  *(void *)(v0 + 184) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SADonateRankedQueriesToPortrait.Type);
  *(void *)(v0 + 160) = v5;
  uint64_t result = MEMORY[0x1BA9E3630](v0);
  static ConversationRequestProcessor.warmUpSignals = result;
  return result;
}

uint64_t *ConversationRequestProcessor.warmUpSignals.unsafeMutableAddressor()
{
  if (one-time initialization token for warmUpSignals != -1) {
    swift_once();
  }
  return &static ConversationRequestProcessor.warmUpSignals;
}

id static ConversationRequestProcessor.warmUpSignals.getter()
{
  if (one-time initialization token for warmUpSignals != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static ConversationRequestProcessor.warmUpSignals;

  return v0;
}

uint64_t (*ConversationRequestProcessor.state.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationRequestProcessor.sessionState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionState;
  swift_beginAccess();
  return outlined init with copy of ReferenceResolutionClientProtocol(v3, a1);
}

uint64_t ConversationRequestProcessor.sessionState.setter(long long *a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionState;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1Tm(v3);
  outlined init with take of ReferenceResolutionClientProtocol(a1, v3);
  return swift_endAccess();
}

uint64_t (*ConversationRequestProcessor.sessionState.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t (*ConversationRequestProcessor.sentResultCandidateSelected.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationRequestProcessor.didCommitExecution.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_didCommitExecution);
  swift_beginAccess();
  return *v1;
}

uint64_t ConversationRequestProcessor.didCommitExecution.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_didCommitExecution);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*ConversationRequestProcessor.didCommitExecution.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationRequestProcessor.recentDialogTracker.getter()
{
  return swift_retain();
}

uint64_t ConversationRequestProcessor.executionOutputSubmitter.getter()
{
  return swift_retain();
}

uint64_t ConversationRequestProcessor.executionClient.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient, a1);
}

uint64_t ConversationRequestProcessor.requestDispatcherServiceHelper.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ConversationRequestProcessor.preExecutionActionHandler.getter()
{
  return swift_retain();
}

uint64_t ConversationRequestProcessor.isFirstRequestInSession.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isFirstRequestInSession);
}

uint64_t ConversationRequestProcessor.networkAvailabilityProvider.getter()
{
  return swift_retain();
}

uint64_t ConversationRequestProcessor.coreTelephonyServiceProvider.getter()
{
  return swift_retain();
}

uint64_t ConversationRequestProcessor.decisionMaker.getter()
{
  return swift_retain();
}

void *ConversationRequestProcessor.muxContextMessage.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_muxContextMessage);
  id v2 = v1;
  return v1;
}

uint64_t ConversationRequestProcessor.sessionUserId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionUserId;
  uint64_t v4 = type metadata accessor for UserID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t ConversationRequestProcessor.isMUXEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled);
}

uint64_t ConversationRequestProcessor.instrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t ConversationRequestProcessor.rrClient.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rrClient, a1);
}

uint64_t ConversationRequestProcessor.correctionsPlatformClient.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_correctionsPlatformClient, a1);
}

uint64_t ConversationRequestProcessor.contextUpdater.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater, a1, &demangling cache variable for type metadata for ContextUpdating?);
}

uint64_t ConversationRequestProcessor.selfReflectionAgent.getter()
{
  return swift_retain();
}

uint64_t ConversationRequestProcessor.entitiesCollected.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_entitiesCollected);
  swift_beginAccess();
  return *v1;
}

uint64_t ConversationRequestProcessor.entitiesCollected.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_entitiesCollected);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*ConversationRequestProcessor.entitiesCollected.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationRequestProcessor.userSessionState.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_userSessionState;
  swift_beginAccess();
  uint64_t v2 = *(void *)v1;
  outlined copy of UserSessionState(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t ConversationRequestProcessor.userSessionState.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_userSessionState);
  swift_beginAccess();
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  uint64_t *v5 = a1;
  v5[1] = a2;
  outlined copy of UserSessionState(a1, a2);
  outlined consume of UserSessionState(v6, v7);
  return outlined consume of UserSessionState(a1, a2);
}

uint64_t (*ConversationRequestProcessor.userSessionState.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

void *ConversationRequestProcessor.__allocating_init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17, uint64_t a18, uint64_t a19, long long a20,uint64_t a21,uint64_t a22,void *a23,unsigned __int8 a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v57 = a7;
  uint64_t v58 = a8;
  uint64_t v55 = a5;
  uint64_t v56 = a6;
  uint64_t v53 = a3;
  uint64_t v54 = a4;
  uint64_t v51 = a1;
  uint64_t v52 = a2;
  long long v50 = a9;
  os_log_type_t v48 = a11;
  uint64_t v49 = a10;
  uint64_t v46 = a14;
  uint64_t v47 = a13;
  uint64_t v44 = a16;
  uint64_t v45 = a15;
  int v43 = a17;
  uint64_t v41 = a19;
  uint64_t v42 = a18;
  long long v40 = a20;
  uint64_t v39 = a21;
  uint64_t v38 = a22;
  id v37 = a23;
  uint64_t v27 = (void *)swift_allocObject();
  uint64_t v28 = *(void *)(a27 + 24);
  uint64_t v29 = *(void *)(a27 + 32);
  uint64_t v30 = __swift_mutable_project_boxed_opaque_existential_1(a27, v28);
  MEMORY[0x1F4188790](v30);
  uint64_t v32 = (char *)&v36 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v33 + 16))(v32);
  uint64_t v34 = specialized ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(v51, v52, v53, v54, v55, v56, v57, v58, v50, *((uint64_t *)&v50 + 1), v49, v48, a12, v47, v46, v45, v44, v43, v42,
          v41,
          v40,
          *((uint64_t *)&v40 + 1),
          v39,
          v38,
          a23,
          a24,
          a25,
          a26,
          (uint64_t)v32,
          v27,
          v28,
          v29);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a27);
  return v34;
}

void *ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, long long a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17, uint64_t a18, uint64_t a19, long long a20,uint64_t a21,uint64_t a22,void *a23,unsigned __int8 a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v54 = a7;
  uint64_t v55 = a8;
  uint64_t v52 = a5;
  uint64_t v53 = a6;
  uint64_t v50 = a3;
  uint64_t v51 = a4;
  uint64_t v48 = a1;
  uint64_t v49 = a2;
  long long v47 = a9;
  uint64_t v45 = a11;
  uint64_t v46 = a10;
  uint64_t v44 = a13;
  uint64_t v41 = a15;
  uint64_t v42 = a14;
  uint64_t v40 = a16;
  int v39 = a17;
  uint64_t v37 = a19;
  uint64_t v38 = a18;
  long long v36 = a20;
  uint64_t v35 = a21;
  uint64_t v27 = *(void *)(a27 + 24);
  uint64_t v28 = *(void *)(a27 + 32);
  uint64_t v29 = __swift_mutable_project_boxed_opaque_existential_1(a27, v27);
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (char *)&v34 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v32 + 16))(v31);
  uint64_t v55 = specialized ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(v48, v49, v50, v51, v52, v53, v54, (uint64_t)v55, v47, *((uint64_t *)&v47 + 1), v46, v45, a12, v44, v42, v41, v40, v39, v38,
          v37,
          v36,
          *((uint64_t *)&v36 + 1),
          v35,
          a22,
          a23,
          a24,
          a25,
          a26,
          (uint64_t)v31,
          v43,
          v27,
          v28);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a27);
  return v55;
}

double closure #1 in ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)@<D0>(char a1@<W0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if ((a1 & 1) == 0)
  {
    uint64_t v43 = a4;
    uint64_t v44 = a7;
    uint64_t v45 = a8;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UserID>);
    uint64_t v22 = type metadata accessor for UserID();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v40 = a6;
    unint64_t v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_1BA04FD90;
    uint64_t v26 = *(void (**)(unint64_t, uint64_t, uint64_t))(v23 + 16);
    v26(v25 + v24, a3, v22);
    uint64_t v42 = specialized Set.init(_nonEmptyArrayLiteral:)(v25);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v27 = swift_allocObject();
    *(_OWORD *)(v27 + 16) = xmmword_1BA04FD90;
    unint64_t v28 = v27 + v24;
    a6 = v40;
    v26(v28, a3, v22);
    uint64_t v41 = specialized Set.init(_nonEmptyArrayLiteral:)(v27);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    goto LABEL_5;
  }
  if (a2)
  {
    uint64_t v43 = a4;
    uint64_t v44 = a7;
    uint64_t v45 = a8;
    id v19 = a2;
    uint64_t v42 = specialized static ConversationMUXUtils.getAllUserIds(from:)();
    specialized static ConversationMUXUtils.getAllKnownUserIds(from:)();
    uint64_t v41 = v20;

LABEL_5:
    uint64_t v29 = type metadata accessor for MultiUserContextUpdater();
    outlined init with copy of ReferenceResolutionClientProtocol(v43, (uint64_t)v49);
    outlined init with copy of ReferenceResolutionClientProtocol(a5, (uint64_t)v48);
    outlined init with copy of ReferenceResolutionClientProtocol(a6, (uint64_t)v47);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v46 = a15;
    uint64_t v31 = type metadata accessor for DeviceContextHelper();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    *((void *)&v39 + 1) = v42;
    *(void *)&long long v39 = a16;
    uint64_t v32 = specialized MultiUserContextUpdater.__allocating_init(sessionState:rraasClient:correctionsPlatformClient:serviceHelper:assistantId:requestId:rootRequestId:contextDonator:instrumentationUtil:userIdSet:knownUserIdSet:)(v49, v48, v47, v44, v45, a10, a11, a12, a13, a14, (uint64_t)&v46, v39, v41, v29, v31, ObjectType, (uint64_t)&protocol witness table for DeviceContextHelper);
    *(void *)(a9 + 24) = v29;
    *(void *)(a9 + 32) = &protocol witness table for MultiUserContextUpdater;
    *(void *)a9 = v32;
    return result;
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  __swift_project_value_buffer(v35, (uint64_t)static Logger.conversationBridge);
  long long v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v38 = 0;
    _os_log_impl(&dword_1B9C64000, v36, v37, "Cannot create an instance of ContextUpdater since MUXContextMessage is unavailable", v38, 2u);
    MEMORY[0x1BA9E48C0](v38, -1, -1);
  }

  *(void *)(a9 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a9 = 0u;
  *(_OWORD *)(a9 + 16) = 0u;
  return result;
}

void *ConversationRequestProcessor.__allocating_init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned __int8 a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,unsigned __int8 a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  swift_allocObject();
  uint64_t v30 = specialized ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
          a20,
          a21,
          a22,
          a23,
          a24,
          a25,
          a26,
          a27,
          a28,
          a29,
          a30);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  return v30;
}

void *ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned __int8 a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,unsigned __int8 a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30 = specialized ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
          a20,
          a21,
          a22,
          a23,
          a24,
          a25,
          a26,
          a27,
          a28,
          a29,
          a30);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  return v30;
}

uint64_t ConversationRequestProcessor.pendingTurn.getter()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 384))();
  uint64_t v4 = v3;
  if (v2 == 1)
  {
    uint64_t v1 = swift_retain();
    char v2 = 1;
    uint64_t v5 = v1;
  }
  else
  {
    uint64_t v5 = 0;
  }
  outlined consume of ConversationRequestProcessor.State(v1, v4, v2);
  return v5;
}

void ConversationRequestProcessor.handleStartRequest(_:)(void *a1)
{
  char v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for InputOrigin();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for RequestType();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StartSpeechDictationRequestMessage();
  if (swift_dynamicCastClass())
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_1B9C64000, v25, v16, "Ignoring dictation start request", v17, 2u);
      MEMORY[0x1BA9E48C0](v17, -1, -1);
    }
    uint64_t v18 = v25;
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, *MEMORY[0x1E4FA2448], v11);
    uint64_t v24 = RequestMessageBase.requestId.getter();
    uint64_t v25 = v2;
    uint64_t v20 = v19;
    StartRequestMessageBase.inputOrigin.getter();
    uint64_t v21 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v6, 1, 1, v21);
    type metadata accessor for ConversationRequestProcessorTurnState();
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo) = 0;
    *(_DWORD *)(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter) = 0;
    *(_OWORD *)(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState) = xmmword_1BA0537A0;
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType, v14, v11);
    uint64_t v23 = (uint64_t *)(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    *uint64_t v23 = v24;
    v23[1] = v20;
    *(unsigned char *)(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer) = 0;
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin, v10, v7);
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v6, v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_nlRoutingDecision, (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
    specialized ConversationRequestProcessor.handleStartRequestInternal(_:turnState:isTapToEdit:)(a1, v22, 0, v25);
    swift_release();
  }
}

uint64_t static ConversationRequestProcessor.createUtteranceRREntity(utterance:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v28 = a1;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for GroupIdentifier?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for UsoIdentifier();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.md5String.getter();
  if (v8)
  {
    type metadata accessor for UsoEntityBuilder_common_LocalisedString();
    swift_allocObject();
    uint64_t v9 = UsoEntityBuilder_common_LocalisedString.init()();
    dispatch thunk of UsoEntityBuilder_common_LocalisedString.setStringValue(value:)();
    swift_bridgeObjectRetain();
    UsoIdentifier.init(value:appBundleId:namespace:)();
    dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    if (MEMORY[0x1BA9DEB00](v9))
    {
      uint64_t v10 = type metadata accessor for GroupIdentifier();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v3, 1, 1, v10);
      uint64_t v11 = v28;
      RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)();
      swift_release();
      uint64_t v12 = type metadata accessor for RREntity();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 0, 1, v12);
    }
    else
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      __swift_project_value_buffer(v22, (uint64_t)static Logger.conversationBridge);
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl(&dword_1B9C64000, v23, v24, "#donateUtteranceForReferenceResolution: failed to create UsoEntity_common_LocalisedString entity", v25, 2u);
        MEMORY[0x1BA9E48C0](v25, -1, -1);
        swift_release();
      }
      else
      {

        swift_release();
      }
      uint64_t v26 = type metadata accessor for RREntity();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v28, 1, 1, v26);
    }
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_1B9C64000, v15, v16, "#donateUtteranceForReferenceResolution: failed to get md5String from utterance string", v17, 2u);
      MEMORY[0x1BA9E48C0](v17, -1, -1);
    }

    uint64_t v18 = type metadata accessor for RREntity();
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
    uint64_t v20 = v18;
    uint64_t v21 = v28;
    return v19(v21, 1, 1, v20);
  }
}

uint64_t ConversationRequestProcessor.handleStartChildTextRequestMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for TextRequestType();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = a1;
  uint64_t v9 = specialized ConversationRequestProcessorTurnState.__allocating_init(startTextRequestMessage:)(v8);
  StartChildTextRequestMessage.textRequestType.getter();
  BOOL v10 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4) == *MEMORY[0x1E4FA2568];
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  specialized ConversationRequestProcessor.handleStartRequestInternal(_:turnState:isTapToEdit:)(v8, v9, v10, v2);
  return swift_release();
}

uint64_t ConversationRequestProcessor.handleStartChildSpeechRequestMessage(_:)(void *a1)
{
  return ConversationRequestProcessor.handleStartSpeechRequestMessage(_:)(a1, (uint64_t (*)(void))specialized ConversationRequestProcessorTurnState.__allocating_init(startSpeechRequestMessage:));
}

uint64_t ConversationRequestProcessor.handleStartSpeechRequestMessage(_:)(void *a1, uint64_t (*a2)(void))
{
  id v4 = a1;
  uint64_t v5 = a2();
  specialized ConversationRequestProcessor.handleStartRequestInternal(_:turnState:isTapToEdit:)(v4, v5, 0, v2);

  return swift_release();
}

uint64_t ConversationRequestProcessor.handleStartDirectActionRequestMessage(_:)(void *a1)
{
  return ConversationRequestProcessor.handleStartDirectActionRequestMessage(_:)(a1, MEMORY[0x1E4FA2408], 0);
}

uint64_t ConversationRequestProcessor.handleStartUnderstandingOnServerRequestMessage(_:)(void *a1)
{
  return ConversationRequestProcessor.handleStartUnderstandingOnServerRequestMessage(_:)(a1, MEMORY[0x1E4FA2428]);
}

uint64_t ConversationRequestProcessor.handleStartUnderstandingOnServerTextRequestMessage(_:)(void *a1)
{
  return ConversationRequestProcessor.handleStartUnderstandingOnServerRequestMessage(_:)(a1, MEMORY[0x1E4FA2450]);
}

uint64_t ConversationRequestProcessor.handleStartUnderstandingOnServerRequestMessage(_:)(void *a1, unsigned int *a2)
{
  id v4 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  MEMORY[0x1F4188790](v6 - 8);
  id v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for InputOrigin();
  uint64_t v9 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for RequestType();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, *a2, v12);
  id v16 = a1;
  uint64_t v17 = RequestMessageBase.requestId.getter();
  uint64_t v27 = v18;
  id v19 = v16;
  StartRequestMessageBase.inputOrigin.getter();

  uint64_t v20 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
  uint64_t v21 = (uint64_t)v8;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v8, 1, 1, v20);
  type metadata accessor for ConversationRequestProcessorTurnState();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo) = 0;
  *(_DWORD *)(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter) = 0;
  *(_OWORD *)(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState) = xmmword_1BA0537A0;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType, v15, v12);
  uint64_t v23 = (uint64_t *)(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  uint64_t v25 = v27;
  uint64_t v24 = v28;
  *uint64_t v23 = v17;
  v23[1] = v25;
  *(unsigned char *)(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin, v11, v24);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v21, v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_nlRoutingDecision, (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);

  *(void *)((char *)v4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rraasCollectionTask) = (*(uint64_t (**)(void))(*v4 + 664))();
  swift_release();
  specialized ConversationRequestProcessor.handleStartRequestInternal(_:turnState:isTapToEdit:)(v19, v22, 0, v4);
  return swift_release();
}

uint64_t ConversationRequestProcessor.createRRaaSCollectionTask()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(void))(*(void *)v0 + 512))(0);
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = one-time initialization token for shared;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  uint64_t v7 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  id v8 = (void *)swift_allocObject();
  long long v8[2] = v6;
  void v8[3] = v7;
  v8[4] = v0;
  swift_retain();
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationRequestProcessor.createRRaaSCollectionTask(), (uint64_t)v8);
}

uint64_t closure #1 in ConversationRequestProcessor.createRRaaSCollectionTask()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = static MessageBusActor.shared;
  *(void *)(v4 + 48) = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](closure #1 in ConversationRequestProcessor.createRRaaSCollectionTask(), v5, 0);
}

uint64_t closure #1 in ConversationRequestProcessor.createRRaaSCollectionTask()()
{
  uint64_t v1 = (void *)(*(void *)(v0 + 40) + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rrClient);
  uint64_t v3 = v1[3];
  uint64_t v2 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v4;
  *uint64_t v4 = v0;
  v4[1] = closure #1 in ConversationRequestProcessor.createRRaaSCollectionTask();
  return MEMORY[0x1F41528B0](v3, v2);
}

{
  void *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  if (v0)
  {

    uint64_t v4 = closure #1 in ConversationRequestProcessor.createRRaaSCollectionTask();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = closure #1 in ConversationRequestProcessor.createRRaaSCollectionTask();
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t (*v6)(void);
  uint64_t v8;

  uint64_t v1 = *(void *)(v0 + 40);
  swift_release();
  (*(void (**)(uint64_t))(*(void *)v1 + 512))(1);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  uint64_t v3 = Logger.logObject.getter();
  uint64_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "RRaaS entities collected", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t ConversationRequestProcessor.handleStartLocalRequestMessage(_:)(void *a1)
{
  return ConversationRequestProcessor.handleStartDirectActionRequestMessage(_:)(a1, MEMORY[0x1E4FA2438], 0);
}

uint64_t ConversationRequestProcessor.handleStartDirectActionRequestMessage(_:)(void *a1, unsigned int *a2, int a3)
{
  int v27 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for InputOrigin();
  uint64_t v8 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for RequestType();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, *a2, v11);
  id v15 = a1;
  uint64_t v16 = RequestMessageBase.requestId.getter();
  uint64_t v18 = v17;
  id v19 = v15;
  StartRequestMessageBase.inputOrigin.getter();

  uint64_t v20 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v7, 1, 1, v20);
  type metadata accessor for ConversationRequestProcessorTurnState();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo) = 0;
  *(_DWORD *)(v21 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter) = 0;
  *(_OWORD *)(v21 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState) = xmmword_1BA0537A0;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v21 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType, v14, v11);
  uint64_t v22 = (uint64_t *)(v21 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  *uint64_t v22 = v16;
  v22[1] = v18;
  *(unsigned char *)(v21 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v21 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin, v10, v25);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v7, v21 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_nlRoutingDecision, (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);

  specialized ConversationRequestProcessor.handleStartRequestInternal(_:turnState:isTapToEdit:)(v19, v21, v27, v26);
  return swift_release();
}

uint64_t ConversationRequestProcessor.handleStartCorrectedSpeechRequestMessage(_:)(void *a1)
{
  return ConversationRequestProcessor.handleStartDirectActionRequestMessage(_:)(a1, MEMORY[0x1E4FA2430], 1);
}

uint64_t ConversationRequestProcessor.handleStartIFRequestMessage(_:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for InputOrigin();
  uint64_t v5 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  uint64_t v31 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for RequestType();
  uint64_t v7 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v28 = v5;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    int v27 = a1;
    uint64_t v15 = v14;
    uint64_t v34 = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001FLL, 0x80000001BA066110, &v34);
    uint64_t v5 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v11, v12, "%s", v13, 0xCu);
    swift_arrayDestroy();
    uint64_t v16 = v15;
    a1 = v27;
    MEMORY[0x1BA9E48C0](v16, -1, -1);
    MEMORY[0x1BA9E48C0](v13, -1, -1);
  }

  uint64_t v17 = v29;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4FA2430], v29);
  id v18 = a1;
  uint64_t v19 = RequestMessageBase.requestId.getter();
  uint64_t v21 = v20;
  uint64_t v22 = v31;
  StartIFRequestMessage.inputOrigin.getter();

  uint64_t v23 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v4, 1, 1, v23);
  type metadata accessor for ConversationRequestProcessorTurnState();
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo) = 0;
  *(_DWORD *)(v24 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter) = 0;
  *(_OWORD *)(v24 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState) = xmmword_1BA0537A0;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v24 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType, v9, v17);
  uint64_t v25 = (uint64_t *)(v24 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  *uint64_t v25 = v19;
  v25[1] = v21;
  *(unsigned char *)(v24 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v24 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin, v22, v30);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v4, v24 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_nlRoutingDecision, (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  specialized ConversationRequestProcessor.handleStartRequestInternal(_:turnState:isTapToEdit:)(v18, v24, 0, v32);
  return swift_release();
}

void ConversationRequestProcessor.handleStartCandidateRequestMessage(_:)(void *a1)
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  id v9 = a1;
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v10 = v7;
    *(_DWORD *)uint64_t v5 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000026, 0x80000001BA066130, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2112;
    id v8 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v9;

    _os_log_impl(&dword_1B9C64000, v3, v4, "%s: %@", (uint8_t *)v5, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v6, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v7, -1, -1);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }
  else
  {
  }
}

void ConversationRequestProcessor.sendRequestContextData(_:turn:candidateRequestMessages:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v8 = *(void (**)(uint64_t, void *, uint64_t))(*(void *)v4 + 392);
  swift_retain();
  id v9 = a1;
  uint64_t v54 = a1;
  v8(a2, a1, 2);
  if (one-time initialization token for conversationBridge != -1) {
    goto LABEL_30;
  }
  while (1)
  {
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
    id v11 = v9;
    os_log_type_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t type = v13;
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      uint64_t v55 = v51;
      *(_DWORD *)uint64_t v14 = 136315138;
      buf = v14;
      id v15 = v11;
      id v16 = objc_msgSend(v15, sel_description);
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v19 = v18;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, (uint64_t *)&v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v12, type, "RequestContextData: %s", buf, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v51, -1, -1);
      MEMORY[0x1BA9E48C0](buf, -1, -1);
    }
    else
    {
    }
    (*(void (**)(id))(**(void **)(v4
                                             + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_selfReflectionAgent)
                               + 408))(v11);
    uint64_t v20 = *(void *)(v4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient + 24);
    uint64_t v21 = *(void *)(v4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient + 32);
    __swift_project_boxed_opaque_existential_1((void *)(v4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient), v20);
    (*(void (**)(id, void, _UNKNOWN **, uint64_t, uint64_t))(v21 + 16))(v11, *(void *)(v4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionBridgeProcessorDelegate), &protocol witness table for ConversationBridgeProcessorDelegate, v20, v21);
    uint64_t v22 = v11;
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      typea = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 138412290;
      uint64_t v55 = v22;
      uint64_t v26 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *typea = v54;

      _os_log_impl(&dword_1B9C64000, v23, v24, "Successfully sent: %@", v25, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](typea, -1, -1);
      MEMORY[0x1BA9E48C0](v25, -1, -1);
    }
    else
    {

      uint64_t v23 = v22;
    }

    uint64_t v27 = *(void *)(a3 + 16);
    if (!v27) {
      break;
    }
    swift_bridgeObjectRetain();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 134217984;
      uint64_t v55 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v28, v29, "Replaying %ld cached candidate messages that were received for this request prior to the start-turn signal", v30, 0xCu);
      MEMORY[0x1BA9E48C0](v30, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    uint64_t v31 = 0;
    while (1)
    {
      id v9 = (id)(v31 + 1);
      if (__OFADD__(v31, 1)) {
        break;
      }
      unint64_t v34 = *(void *)(a3 + 8 * v31 + 32);
      switch(v34 >> 61)
      {
        case 1uLL:
          uint64_t v32 = *(void (**)(void))(*(void *)v4 + 832);
          id v33 = (id)(v34 & 0x1FFFFFFFFFFFFFFFLL);
          v32();
          goto LABEL_14;
        case 2uLL:
          uint64_t v35 = *(void (**)(void))(*(void *)v4 + 856);
          id v33 = (id)(v34 & 0x1FFFFFFFFFFFFFFFLL);
          v35();
          goto LABEL_14;
        case 3uLL:
          long long v36 = *(void (**)(void))(*(void *)v4 + 848);
          id v33 = (id)(v34 & 0x1FFFFFFFFFFFFFFFLL);
          v36();
          goto LABEL_14;
        case 4uLL:
          os_log_type_t v37 = *(void (**)(void))(*(void *)v4 + 824);
          id v33 = (id)(v34 & 0x1FFFFFFFFFFFFFFFLL);
          v37();
          goto LABEL_14;
        case 5uLL:
          uint64_t v38 = *(void (**)(void))(*(void *)v4 + 872);
          id v33 = (id)(v34 & 0x1FFFFFFFFFFFFFFFLL);
          v38();
LABEL_14:

          goto LABEL_15;
        case 6uLL:
          long long v39 = (void *)(v34 & 0x1FFFFFFFFFFFFFFFLL);
          type metadata accessor for ServerFallbackCapableRequestProcessor();
          uint64_t v40 = swift_dynamicCastClass();
          if (!v40)
          {
            id v43 = v39;
            swift_bridgeObjectRelease();
            uint64_t v44 = Logger.logObject.getter();
            os_log_type_t v45 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v44, v45))
            {
              uint64_t v46 = (uint8_t *)swift_slowAlloc();
              uint64_t v47 = swift_slowAlloc();
              uint64_t v55 = v47;
              *(_DWORD *)uint64_t v46 = 136315138;
              swift_getMetatypeMetadata();
              uint64_t v48 = _typeName(_:qualified:)();
              getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, (uint64_t *)&v55);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_1B9C64000, v44, v45, "Cannot handle ENOS because processor is of type %s", v46, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1BA9E48C0](v47, -1, -1);
              MEMORY[0x1BA9E48C0](v46, -1, -1);
            }

            return;
          }
          uint64_t v41 = *(void (**)(id))(*(void *)v40 + 1552);
          id v42 = v39;
          swift_retain();
          v41(v42);

          swift_release();
LABEL_15:
          ++v31;
          if (v9 == (id)v27)
          {
            swift_bridgeObjectRelease();
            return;
          }
          break;
        default:
          goto LABEL_15;
      }
    }
    __break(1u);
LABEL_30:
    swift_once();
  }
}

void ConversationRequestProcessor.handleASRResultCandidateMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void (*)(char *, uint64_t, uint64_t))ResultCandidateRequestMessageBase.resultCandidateId.getter();
  uint64_t v6 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestType>);
  uint64_t v7 = type metadata accessor for RequestType();
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1BA04FD90;
  (*(void (**)(unint64_t, void, uint64_t))(v8 + 104))(v10 + v9, *MEMORY[0x1E4FA2448], v7);
  LODWORD(v7) = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled);
  swift_retain();
  id v11 = a1;
  specialized ConversationRequestProcessor.handleCandidateMessage(_:rcId:expectedTypes:messageToCacheIfNotInActiveTurn:shouldUpdateExistingRCState:createResultCandidateState:)(v11, v4, v6, v10, 0xF000000000000007, v7, v2, (uint64_t)v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
}

void ConversationRequestProcessor.handleMUXASRResultCandidateMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)type metadata accessor for RequestType();
  uint64_t v5 = *(v4 - 1);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v59 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v62 = (char *)&v54 - v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v61 = (char *)&v54 - v10;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
  id v12 = a1;
  os_log_type_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    id v15 = (uint8_t *)swift_slowAlloc();
    uint64_t v57 = (void *)swift_slowAlloc();
    *(_DWORD *)id v15 = 138412290;
    uint64_t v58 = v2;
    uint64_t v60 = v4;
    v66[0] = v12;
    id v16 = v12;
    uint64_t v4 = v60;
    uint64_t v2 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v17 = v57;
    *uint64_t v57 = v12;

    _os_log_impl(&dword_1B9C64000, v13, v14, "ConversationBridge handling message: %@", v15, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v17, -1, -1);
    MEMORY[0x1BA9E48C0](v15, -1, -1);
  }
  else
  {
  }
  uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v2 + 592))();
  if (v18)
  {
    uint64_t v60 = v12;
    uint64_t v19 = v18 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
    swift_beginAccess();
    uint64_t v58 = *(void (**)(void, void, void))(v5 + 16);
    v58(v61, v19, v4);
    (*(void (**)(char *, void, void *))(v5 + 104))(v62, *MEMORY[0x1E4FA2448], v4);
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, MEMORY[0x1E4FA2460]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v65[0] == v63 && v65[1] == v64) {
      char v20 = 1;
    }
    else {
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v30 = (char *)(v5 + 8);
    uint64_t v31 = *(void (**)(char *, void *))(v5 + 8);
    v31(v62, v4);
    uint64_t v62 = v30;
    v31(v61, v4);
    if (v20)
    {
      specialized ConversationRequestProcessor.makeResultCandidateStatesForMultiUser(from:)(v60);
      unint64_t v33 = v32;
      if (v32 >> 62)
      {
        uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
        if (v34) {
          goto LABEL_17;
        }
      }
      else
      {
        uint64_t v34 = *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v34)
        {
LABEL_17:
          if (v34 < 1)
          {
            __break(1u);
            JUMPOUT(0x1B9E3DCE0);
          }
          uint64_t v35 = 0;
          do
          {
            if ((v33 & 0xC000000000000001) != 0)
            {
              uint64_t v36 = MEMORY[0x1BA9E3990](v35, v33);
            }
            else
            {
              uint64_t v36 = *(void *)(v33 + 8 * v35 + 32);
              swift_retain();
            }
            ++v35;
            ConversationRequestProcessorTurnState.addResultCandidateState(_:)(v36);
            (*(void (**)(uint64_t))(*(void *)v36 + 408))(4);
            swift_release();
          }
          while (v34 != v35);
        }
      }
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
    os_log_type_t v37 = v60;
    swift_retain_n();
    uint64_t v38 = v37;
    long long v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    int v41 = v40;
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v42 = swift_slowAlloc();
      uint64_t v60 = v4;
      uint64_t v43 = v42;
      uint64_t v61 = (char *)swift_slowAlloc();
      uint64_t v57 = (void *)swift_slowAlloc();
      v65[0] = (uint64_t)v57;
      *(_DWORD *)uint64_t v43 = 138412546;
      os_log_t v55 = v39;
      int v56 = v41;
      uint64_t v63 = (uint64_t)v38;
      uint64_t v44 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(void *)uint64_t v61 = v38;

      *(_WORD *)(v43 + 12) = 2080;
      os_log_type_t v45 = v59;
      uint64_t v46 = v60;
      v58(v59, v19, v60);
      uint64_t v47 = RequestType.rawValue.getter();
      unint64_t v49 = v48;
      v31(v45, v46);
      uint64_t v63 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_t v50 = v55;
      _os_log_impl(&dword_1B9C64000, v55, (os_log_type_t)v56, "%@ is not supported for this requestType: %s", (uint8_t *)v43, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v51 = v61;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0]((char *)v51, -1, -1);
      uint64_t v52 = v57;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v52, -1, -1);
      MEMORY[0x1BA9E48C0](v43, -1, -1);
      swift_release();

      return;
    }

LABEL_27:
    swift_release_n();
    return;
  }
  swift_retain_n();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v21, v22))
  {

    goto LABEL_27;
  }
  uint64_t v23 = (uint8_t *)swift_slowAlloc();
  uint64_t v24 = swift_slowAlloc();
  v66[0] = (id)v24;
  *(_DWORD *)uint64_t v23 = 136315138;
  uint64_t v25 = (*(uint64_t (**)(void))(*(void *)v2 + 384))();
  switch(v27)
  {
    case 1:
      outlined consume of ConversationRequestProcessor.State(v25, (void *)v26, 1);
      uint64_t v28 = 0xD00000000000001DLL;
      os_log_type_t v29 = "awaiting request context data";
      goto LABEL_29;
    case 2:
      outlined consume of ConversationRequestProcessor.State(v25, (void *)v26, 2);
      unint64_t v53 = 0xEC00000064657472;
      uint64_t v28 = 0x617473206E727574;
      break;
    case 3:
      if (v25 | v26) {
        uint64_t v28 = 0x6574656C706D6F63;
      }
      else {
        uint64_t v28 = 1701602409;
      }
      if (v25 | v26) {
        unint64_t v53 = 0xE800000000000000;
      }
      else {
        unint64_t v53 = 0xE400000000000000;
      }
      break;
    default:
      uint64_t v28 = 0xD000000000000011;
      outlined consume of ConversationRequestProcessor.State(v25, (void *)v26, 0);
      os_log_type_t v29 = "candidate request";
LABEL_29:
      unint64_t v53 = (unint64_t)(v29 - 32) | 0x8000000000000000;
      break;
  }
  v65[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v53, (uint64_t *)v66);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_release_n();
  swift_bridgeObjectRelease();
  _os_log_impl(&dword_1B9C64000, v21, v22, "Got ASRResultCandidateMessage when in state %s: Ignoring", v23, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1BA9E48C0](v24, -1, -1);
  MEMORY[0x1BA9E48C0](v23, -1, -1);
}

void ConversationRequestProcessor.handleGestureBasedResultCandidateMessage(_:)(void *a1)
{
}

void ConversationRequestProcessor.handleDirectActionResultCandidateMessage(_:)(void *a1)
{
}

void ConversationRequestProcessor.handleGestureBasedResultCandidateMessage(_:)(void *a1, unsigned int *a2, void (*a3)(id))
{
  ResultCandidateRequestMessageBase.resultCandidateId.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestType>);
  uint64_t v6 = type metadata accessor for RequestType();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1BA04FD90;
  (*(void (**)(unint64_t, void, uint64_t))(v7 + 104))(v9 + v8, *a2, v6);
  swift_retain();
  id v10 = a1;
  a3(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
}

void ConversationRequestProcessor.fallbackToIntelligenceFlow(prescribedTool:)()
{
  uint64_t v1 = v0;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "Trying to fallback to IntelligenceFlow", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  MEMORY[0x1F4188790](v6);
  id v7 = objc_allocWithZone((Class)type metadata accessor for FallbackToIFRequestedMessage());
  uint64_t v8 = FallbackToIFRequestedMessage.init(build:)();
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    __swift_project_boxed_opaque_existential_1(v1 + 3, v1[6]);
    dispatch thunk of MessagePublishing.postMessage(_:)();
    id v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      id v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v12 = 0;
      _os_log_impl(&dword_1B9C64000, v10, v11, "Posted FallbackToIFRequestedMessage to the bus", v12, 2u);
      MEMORY[0x1BA9E48C0](v12, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    swift_retain();
    os_log_type_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      uint64_t v19 = v16;
      *(_DWORD *)id v15 = 136315138;
      uint64_t v17 = v1[8];
      unint64_t v18 = v1[9];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v13, v14, "Failed to create FallbackToIFRequestedMessage for requestId: %s", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v16, -1, -1);
      MEMORY[0x1BA9E48C0](v15, -1, -1);
    }
    else
    {

      swift_release();
    }
  }
}

uint64_t closure #1 in ConversationRequestProcessor.fallbackToIntelligenceFlow(prescribedTool:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PrescribedTool?);
  MEMORY[0x1F4188790](v5 - 8);
  id v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FallbackToIFRequestedMessage.PrescribedTool?);
  MEMORY[0x1F4188790](v8 - 8);
  id v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v11 - 8);
  os_log_type_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *MEMORY[0x1E4FA2300];
  uint64_t v18 = type metadata accessor for MessageSource();
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 104))(v16, v17, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  FallbackToIFRequestedMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  FallbackToIFRequestedMessage.Builder.assistantId.setter();
  uint64_t v20 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v13, v20, v21);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v13, 0, 1, v21);
  FallbackToIFRequestedMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  FallbackToIFRequestedMessage.Builder.requestId.setter();
  outlined init with copy of ReferenceResolutionClientProtocol?(a3, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for PrescribedTool?);
  uint64_t v23 = type metadata accessor for PrescribedTool();
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v7, 1, v23) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for PrescribedTool?);
    uint64_t v25 = type metadata accessor for FallbackToIFRequestedMessage.PrescribedTool();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v10, 1, 1, v25);
  }
  else
  {
    PrescribedTool.messageBusRepresentation.getter((uint64_t)v10);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v23);
  }
  return FallbackToIFRequestedMessage.Builder.prescribedTool.setter();
}

uint64_t PrescribedTool.messageBusRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for PrescribedTool();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  id v10 = (char *)&v24 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v24 - v9, v2, v4);
  static PrescribedTool.searchTool.getter();
  _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type PrescribedTool and conformance PrescribedTool, MEMORY[0x1E4FA1BE8]);
  char v11 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  if (v11)
  {
    v12(v10, v4);
    uint64_t v13 = *MEMORY[0x1E4FA2188];
    uint64_t v14 = type metadata accessor for FallbackToIFRequestedMessage.PrescribedTool();
    uint64_t v15 = *(void *)(v14 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 104))(a1, v13, v14);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a1, 0, 1, v14);
  }
  static PrescribedTool.generateKnowledgeResponseIntentTool.getter();
  char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
  v12(v8, v4);
  v12(v10, v4);
  if (v16)
  {
    uint64_t v17 = *MEMORY[0x1E4FA2180];
    uint64_t v14 = type metadata accessor for FallbackToIFRequestedMessage.PrescribedTool();
    uint64_t v15 = *(void *)(v14 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 104))(a1, v17, v14);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(a1, 0, 1, v14);
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.conversationBridge);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl(&dword_1B9C64000, v20, v21, "Unknown PrescribedTool", v22, 2u);
    MEMORY[0x1BA9E48C0](v22, -1, -1);
  }

  uint64_t v23 = type metadata accessor for FallbackToIFRequestedMessage.PrescribedTool();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(a1, 1, 1, v23);
}

Swift::Void __swiftcall ConversationRequestProcessor.fallbackToSiriX(rcId:)(Swift::String rcId)
{
  uint64_t v2 = v1;
  object = rcId._object;
  uint64_t countAndFlagsBits = rcId._countAndFlagsBits;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationBridge);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_1B9C64000, v6, v7, "Trying to fallback to SiriX", v8, 2u);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }

  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)v2 + 592))();
  if (v9)
  {
    id v10 = (unint64_t *)(v9 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    unint64_t v12 = *v10;
    char v11 = (void *)v10[1];
    outlined copy of ConversationRequestProcessorTurnState.SpeechState(v12, v11);
    uint64_t v13 = (Swift::String *)ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(countAndFlagsBits, (uint64_t)object, v12, v11);
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v12, v11);
    if (v13)
    {
      (*(void (**)(uint64_t))(v13->_countAndFlagsBits + 408))(15);
      ConversationRequestProcessor.maybeRunExecution(rcState:)(v13);
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRetain_n();
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        uint64_t v26 = swift_slowAlloc();
        uint64_t v29 = v26;
        *(_DWORD *)uint64_t v25 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B9C64000, v23, v24, "Received fallbackToSiriX before RC state is created for RC ID: %s ..this may happen if no ASR or text input message was received before the NL output message is received from the message bus", v25, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v26, -1, -1);
        MEMORY[0x1BA9E48C0](v25, -1, -1);
        swift_release();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_release();
      }
    }
  }
  else
  {
    swift_retain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      char v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      v28[0] = v17;
      *(_DWORD *)char v16 = 136315138;
      uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v2 + 384))();
      switch(v20)
      {
        case 1:
          outlined consume of ConversationRequestProcessor.State(v18, (void *)v19, 1);
          uint64_t v21 = 0xD00000000000001DLL;
          uint64_t v22 = "awaiting request context data";
          goto LABEL_16;
        case 2:
          outlined consume of ConversationRequestProcessor.State(v18, (void *)v19, 2);
          unint64_t v27 = 0xEC00000064657472;
          uint64_t v21 = 0x617473206E727574;
          break;
        case 3:
          if (v18 | v19) {
            uint64_t v21 = 0x6574656C706D6F63;
          }
          else {
            uint64_t v21 = 1701602409;
          }
          if (v18 | v19) {
            unint64_t v27 = 0xE800000000000000;
          }
          else {
            unint64_t v27 = 0xE400000000000000;
          }
          break;
        default:
          uint64_t v21 = 0xD000000000000011;
          outlined consume of ConversationRequestProcessor.State(v18, (void *)v19, 0);
          uint64_t v22 = "candidate request";
LABEL_16:
          unint64_t v27 = (unint64_t)(v22 - 32) | 0x8000000000000000;
          break;
      }
      uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v27, v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v14, v15, "Got fallbackToSiriX when in state %s: Ignoring", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v17, -1, -1);
      MEMORY[0x1BA9E48C0](v16, -1, -1);
    }
    else
    {

      swift_release_n();
    }
  }
}

void ConversationRequestProcessor.handleSpeechStopDetectedMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  unint64_t v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v75 = swift_slowAlloc();
    v78[0] = v75;
    *(_DWORD *)uint64_t v8 = 136315138;
    id v9 = (id)v5;
    uint64_t v10 = v2;
    id v11 = objc_msgSend(v9, sel_description);
    unint64_t v12 = v5;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    uint64_t v2 = v10;
    uint64_t v16 = v13;
    unint64_t v5 = v12;
    uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v6, v7, "ConversationBridge received SpeechStopDetectedMessage: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v75, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  else
  {
  }
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled))
  {
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v19 = 0;
      _os_log_impl(&dword_1B9C64000, v17, v18, "SpeechStopDetectedMessage handling was never undertaken for multi user devices as Flexible Endpoitning was deprecated before multi user on Medoc work started.", v19, 2u);
      MEMORY[0x1BA9E48C0](v19, -1, -1);
    }

    return;
  }
  uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v2 + 592))();
  if (v20)
  {
    uint64_t v21 = v20;
    uint64_t v22 = (uint64_t *)(v20 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    uint64_t v24 = *(void *)(v20 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    uint64_t v23 = *(void *)(v20 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8);
    swift_bridgeObjectRetain();
    if (v24 == RequestMessageBase.requestId.getter() && v23 == v25)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v27 & 1) == 0)
      {
        id v28 = (id)v5;
        swift_retain_n();
        id v29 = v28;
        uint64_t v30 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v30, v31))
        {
          uint64_t v32 = swift_slowAlloc();
          uint64_t v33 = swift_slowAlloc();
          v78[0] = v33;
          *(_DWORD *)uint64_t v32 = 136315394;
          uint64_t v34 = RequestMessageBase.requestId.getter();
          uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v32 + 12) = 2080;
          uint64_t v36 = *v22;
          unint64_t v37 = v22[1];
          swift_bridgeObjectRetain();
          uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v78);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v30, v31, "SpeechStopDetectedMessage request ID %s does not match this turn's: %s. Dropping it on the floor.", (uint8_t *)v32, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v33, -1, -1);
          MEMORY[0x1BA9E48C0](v32, -1, -1);
          swift_release();
        }
        else
        {

          swift_release_n();
        }
        return;
      }
    }
    uint64_t v42 = SpeechStopDetectedMessage.lastTRPId.getter();
    unint64_t v44 = v43;
    os_log_type_t v45 = (unint64_t *)(v21 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    unint64_t v47 = *v45;
    uint64_t v46 = (void *)v45[1];
    outlined copy of ConversationRequestProcessorTurnState.SpeechState(v47, v46);
    uint64_t v48 = ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(v42, v44, v47, v46);
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v47, v46);
    if (v48)
    {
      uint64_t v76 = v21;
      swift_retain_n();
      unint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.debug.getter();
      uint64_t v74 = v42;
      if (os_log_type_enabled(v49, v50))
      {
        unint64_t v72 = v44;
        uint64_t v51 = (uint8_t *)swift_slowAlloc();
        uint64_t v71 = swift_slowAlloc();
        uint64_t v77 = v71;
        *(_DWORD *)uint64_t v51 = 136315138;
        uint64_t v73 = v2;
        unint64_t v52 = v5;
        unint64_t v53 = *(uint64_t (**)(uint64_t))(*(void *)v48 + 800);
        uint64_t v54 = swift_retain();
        uint64_t v55 = v53(v54);
        unint64_t v5 = v52;
        uint64_t v56 = v55;
        unint64_t v58 = v57;
        swift_release();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v58, &v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        uint64_t v2 = v73;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v49, v50, "SpeechStopDetectedMessage received for TRP state: %s", v51, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v71, -1, -1);
        uint64_t v59 = v51;
        unint64_t v44 = v72;
        MEMORY[0x1BA9E48C0](v59, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      char v64 = (*(uint64_t (**)(void))(*(void *)v48 + 400))();
      if (ResultCandidateProcessingStatus.rawValue.getter(v64) == 0x64656C65636E6163 && v65 == 0xE800000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v67 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)v2 + 944))(v5, v76, v48);
LABEL_39:
          swift_release();
          swift_release();
          return;
        }
      }
      swift_bridgeObjectRetain();
      uint64_t v60 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.info.getter();
      if (!os_log_type_enabled(v60, v68))
      {

        swift_bridgeObjectRelease_n();
        goto LABEL_39;
      }
      uint64_t v69 = (uint8_t *)swift_slowAlloc();
      uint64_t v70 = swift_slowAlloc();
      uint64_t v77 = v70;
      *(_DWORD *)uint64_t v69 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v44, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v60, v68, "TRP ID: %s already canceled. Not sending commit signal.", v69, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v70, -1, -1);
      MEMORY[0x1BA9E48C0](v69, -1, -1);
      swift_release();
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v60 = Logger.logObject.getter();
      os_log_type_t v61 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v60, v61))
      {

        swift_bridgeObjectRelease_n();
        swift_release();
        return;
      }
      uint64_t v62 = (uint8_t *)swift_slowAlloc();
      uint64_t v63 = swift_slowAlloc();
      uint64_t v77 = v63;
      *(_DWORD *)uint64_t v62 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v60, v61, "Received SpeechStopDetectedMessage before RC state was created for TRP ID: %s. Dropping it on the floor.", v62, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v63, -1, -1);
      MEMORY[0x1BA9E48C0](v62, -1, -1);
    }
    swift_release();

    return;
  }
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v38, v39))
  {
    os_log_type_t v40 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v40 = 0;
    _os_log_impl(&dword_1B9C64000, v38, v39, "SpeechStopDetectedMessage received for an inactive request. Will cache it for when we get a start-turn signal.", v40, 2u);
    MEMORY[0x1BA9E48C0](v40, -1, -1);
  }

  int v41 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v2 + 400))(v78);
  ConversationRequestProcessor.State.cacheCandidateMessage(_:)(v5 | 0x8000000000000000);
  v41(v78, 0);
}

void ConversationRequestProcessor.State.cacheCandidateMessage(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)v1;
  unint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = 0xEC00000064657472;
  uint64_t v5 = 0x617473206E727574;
  switch(*(unsigned char *)(v1 + 16))
  {
    case 1:
      id v7 = (id)(a1 & 0x1FFFFFFFFFFFFFFFLL);
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v8 = (void *)v3;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1, (void *)v3);
      }
      unint64_t v10 = v8[2];
      unint64_t v9 = v8[3];
      unint64_t v11 = v10 + 1;
      if (v10 >= v9 >> 1)
      {
        uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v8);
        unint64_t v11 = v10 + 1;
        uint64_t v8 = v20;
      }
      long long v8[2] = v11;
      v8[v10 + 4] = a1;
      outlined consume of ConversationRequestProcessor.State(v2, (void *)v3, 1);

      *(void *)uint64_t v1 = v2;
      *(void *)(v1 + 8) = v8;
      *(unsigned char *)(v1 + 16) = 1;
      return;
    case 2:
      goto LABEL_9;
    case 3:
      if (v3 | v2)
      {
        uint64_t v5 = 0x6574656C706D6F63;
        unint64_t v4 = 0xE800000000000000;
LABEL_9:
        if (one-time initialization token for conversationBridge != -1) {
          swift_once();
        }
        uint64_t v12 = type metadata accessor for Logger();
        __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationBridge);
        swift_bridgeObjectRetain();
        uint64_t v13 = Logger.logObject.getter();
        os_log_type_t v14 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v13, v14))
        {
          unint64_t v15 = (uint8_t *)swift_slowAlloc();
          uint64_t v16 = swift_slowAlloc();
          uint64_t v21 = v16;
          *(_DWORD *)unint64_t v15 = 136315138;
          swift_bridgeObjectRetain();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v4, &v21);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B9C64000, v13, v14, "Not caching candidate request message as we are in an invalid state %s", v15, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v16, -1, -1);
          MEMORY[0x1BA9E48C0](v15, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
      else
      {
        uint64_t v2 = MEMORY[0x1E4FBC860];
LABEL_15:
        id v17 = (id)(a1 & 0x1FFFFFFFFFFFFFFFLL);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (void *)v2);
        }
        unint64_t v19 = *(void *)(v2 + 16);
        unint64_t v18 = *(void *)(v2 + 24);
        if (v19 >= v18 >> 1) {
          uint64_t v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, (void *)v2);
        }
        *(void *)(v2 + 16) = v19 + 1;
        *(void *)(v2 + 8 * v19 + 32) = a1;
        *(void *)uint64_t v1 = v2;
        *(void *)(v1 + 8) = 0;
        *(unsigned char *)(v1 + 16) = 0;
      }
      return;
    default:
      goto LABEL_15;
  }
}

void ConversationRequestProcessor.handleTRPCandidateRequestMessage(_:)(unint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = (void (*)(char *, uint8_t *, uint64_t))TRPCandidateRequestMessageBase.trpCandidateId.getter();
  uint64_t v6 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestType>);
  uint64_t v7 = type metadata accessor for RequestType();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 72);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1BA04F9C0;
  unint64_t v12 = v11 + v10;
  uint64_t v13 = *(void (**)(unint64_t, void, uint64_t))(v8 + 104);
  v13(v12, *MEMORY[0x1E4FA2448], v7);
  v13(v12 + v9, *MEMORY[0x1E4FA2438], v7);
  swift_retain();
  id v14 = (id)a1;
  specialized ConversationRequestProcessor.handleCandidateMessage(_:rcId:expectedTypes:messageToCacheIfNotInActiveTurn:shouldUpdateExistingRCState:createResultCandidateState:)(v14, v4, v6, v11, (id)(a1 | 0x2000000000000000), 0, v2, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
}

void ConversationRequestProcessor.handleTextBasedTRPCandidateMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = (void (*)(char *, uint64_t, uint64_t))TRPCandidateRequestMessageBase.trpCandidateId.getter();
  uint64_t v6 = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RequestType>);
  uint64_t v7 = type metadata accessor for RequestType();
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1BA04FD90;
  (*(void (**)(unint64_t, void, uint64_t))(v8 + 104))(v10 + v9, *MEMORY[0x1E4FA2430], v7);
  swift_retain();
  id v11 = a1;
  specialized ConversationRequestProcessor.handleCandidateMessage(_:rcId:expectedTypes:messageToCacheIfNotInActiveTurn:shouldUpdateExistingRCState:createResultCandidateState:)(v11, v4, v6, v10, 0xF000000000000007, 0, v2, (uint64_t)v11, (uint64_t (*)(uint64_t))specialized ConversationRequestProcessor.makeResultCandidateState(from:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
}

void ConversationRequestProcessor.handleNLRoutingDecisionMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RequestType();
  uint64_t v133 = *(uint8_t **)(v4 - 8);
  unint64_t v134 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v132 = (char *)&v121 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = type metadata accessor for RoutingDecision(0);
  uint64_t v6 = MEMORY[0x1F4188790](v127);
  uint64_t v125 = (char *)&v121 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  unint64_t v9 = (char *)&v121 - v8;
  uint64_t v130 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
  uint64_t v10 = *(void *)(v130 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v130);
  uint64_t v124 = (char *)&v121 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v126 = (char *)&v121 - v13;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
  unint64_t v16 = a1;
  id v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v128 = v9;
  uint64_t v129 = v10;
  if (v19)
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v131 = (void *)v15;
    uint64_t v21 = (uint8_t *)v20;
    uint64_t v22 = swift_slowAlloc();
    v138[0] = v22;
    *(_DWORD *)uint64_t v21 = 136315138;
    unint64_t v123 = v21 + 4;
    id v23 = (id)v16;
    uint64_t v135 = v16;
    id v24 = v23;
    id v25 = objc_msgSend(v23, sel_description);
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v2;
    unint64_t v29 = v28;

    uint64_t v137 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v29, v138);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    unint64_t v16 = v135;
    uint64_t v2 = v27;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v17, v18, "ConversationBridge received NLRoutingDecisionMessage: %s", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v22, -1, -1);
    uint64_t v30 = v21;
    uint64_t v15 = (uint64_t)v131;
    MEMORY[0x1BA9E48C0](v30, -1, -1);
  }
  else
  {
  }
  uint64_t v31 = (*(uint64_t (**)(void))(*(void *)v2 + 592))();
  if (v31)
  {
    uint64_t v32 = v31;
    uint64_t v33 = (uint64_t *)(v31 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    uint64_t v35 = *(void *)(v31 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    uint64_t v34 = *(void *)(v31 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8);
    swift_bridgeObjectRetain();
    if (v35 == RequestMessageBase.requestId.getter() && v34 == v36)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v41 & 1) == 0)
      {
        id v83 = (id)v16;
        swift_retain_n();
        id v84 = v83;
        uint64_t v85 = Logger.logObject.getter();
        os_log_type_t v86 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v85, v86))
        {
          uint64_t v87 = swift_slowAlloc();
          uint64_t v88 = swift_slowAlloc();
          v138[0] = v88;
          *(_DWORD *)uint64_t v87 = 136315394;
          uint64_t v89 = RequestMessageBase.requestId.getter();
          uint64_t v137 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v90, v138);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v87 + 12) = 2080;
          uint64_t v91 = *v33;
          unint64_t v92 = v33[1];
          swift_bridgeObjectRetain();
          uint64_t v137 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, v138);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v85, v86, "NLRoutingDecisionMessage request ID %s does not match this turn's: %s. Dropping it on the floor.", (uint8_t *)v87, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v88, -1, -1);
          MEMORY[0x1BA9E48C0](v87, -1, -1);
LABEL_27:
          swift_release();

          return;
        }

        goto LABEL_32;
      }
    }
    if (ConversationRequestProcessorTurnState.requestSupportedForOnDeviceExecution()())
    {
      uint64_t v135 = v16;
      uint64_t v42 = NLRoutingDecisionMessage.trpCandidateId.getter();
      unint64_t v44 = v43;
      os_log_type_t v45 = (unint64_t *)(v32
                               + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
      swift_beginAccess();
      unint64_t v46 = *v45;
      unint64_t v47 = (void *)v45[1];
      outlined copy of ConversationRequestProcessorTurnState.SpeechState(*v45, v47);
      uint64_t v48 = (Swift::String *)ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(v42, v44, v46, v47);
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v46, v47);
      if (v48)
      {
        char v49 = (*(uint64_t (**)(void))(v48->_countAndFlagsBits + 400))();
        if (ResultCandidateProcessingStatus.rawValue.getter(v49) == 0x64656C65636E6163 && v50 == 0xE800000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v52 & 1) == 0)
          {
            unint64_t v134 = v44;
            swift_retain_n();
            unint64_t v53 = Logger.logObject.getter();
            os_log_type_t v54 = static os_log_type_t.debug.getter();
            BOOL v55 = os_log_type_enabled(v53, v54);
            uint64_t v122 = v2;
            uint64_t v131 = (void *)v15;
            if (v55)
            {
              uint64_t v56 = (uint8_t *)swift_slowAlloc();
              unint64_t v57 = v48;
              uint64_t v58 = swift_slowAlloc();
              uint64_t v137 = v58;
              uint64_t v133 = v56;
              *(_DWORD *)uint64_t v56 = 136315138;
              uint64_t v132 = (char *)(v56 + 4);
              uint64_t v59 = *(uint64_t (**)(uint64_t))(v57->_countAndFlagsBits + 800);
              uint64_t v60 = swift_retain();
              uint64_t v61 = v59(v60);
              unint64_t v63 = v62;
              swift_release();
              uint64_t v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v63, &v137);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release_n();
              swift_bridgeObjectRelease();
              char v64 = v133;
              _os_log_impl(&dword_1B9C64000, v53, v54, "Received NLRoutingDecisionMessage when RC state: %s", v133, 0xCu);
              swift_arrayDestroy();
              uint64_t v65 = v58;
              uint64_t v48 = v57;
              MEMORY[0x1BA9E48C0](v65, -1, -1);
              MEMORY[0x1BA9E48C0](v64, -1, -1);
            }
            else
            {

              uint64_t v66 = swift_release_n();
            }
            uint64_t v100 = (uint64_t)v128;
            uint64_t v101 = v129;
            (*(void (**)(uint64_t))(v48->_countAndFlagsBits + 568))(v66);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              swift_bridgeObjectRelease();
              outlined destroy of RoutingDecision(v100, type metadata accessor for RoutingDecision);
              swift_retain();
              uint64_t v85 = Logger.logObject.getter();
              os_log_type_t v102 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v85, v102))
              {
                id v103 = (uint8_t *)swift_slowAlloc();
                uint64_t v104 = swift_slowAlloc();
                uint64_t v137 = v104;
                *(_DWORD *)id v103 = 136315138;
                uint64_t countAndFlagsBits = v48[1]._countAndFlagsBits;
                unint64_t object = (unint64_t)v48[1]._object;
                swift_bridgeObjectRetain();
                uint64_t v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, object, &v137);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_release();
                swift_bridgeObjectRelease();
                _os_log_impl(&dword_1B9C64000, v85, v102, "RCState does not have a preselected RoutingDecision when receiving NLRoutingDecision for trpId = %s. This is an error.", v103, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x1BA9E48C0](v104, -1, -1);
                MEMORY[0x1BA9E48C0](v103, -1, -1);
                swift_release();
                goto LABEL_27;
              }

              swift_release_n();
              goto LABEL_40;
            }
            (*(void (**)(char *, uint64_t, uint64_t))(v101 + 32))(v126, v100, v130);
            os_log_type_t v107 = v125;
            NLRoutingDecisionMessage.routingDecision.getter();
            swift_storeEnumTagMultiPayload();
            (*(void (**)(char *))(v48->_countAndFlagsBits + 576))(v107);
            uint64_t v108 = v124;
            NLRoutingDecisionMessage.routingDecision.getter();
            char v109 = static NLRoutingDecisionMessage.RoutingDecision.== infix(_:_:)();
            id v110 = *(void (**)(char *, uint64_t))(v101 + 8);
            v110(v108, v130);
            if ((v109 & 1) == 0)
            {
              swift_bridgeObjectRelease();
              unint64_t v113 = Logger.logObject.getter();
              os_log_type_t v114 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v113, v114))
              {
                id v115 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)id v115 = 0;
                _os_log_impl(&dword_1B9C64000, v113, v114, "We default to SiriXFallback in eager execution if NLRoutingDecision has not yet been received. We need to re-run eager exeuction if the RoutingDecision has changed.", v115, 2u);
                MEMORY[0x1BA9E48C0](v115, -1, -1);
              }

              (*(void (**)(uint64_t))(v48->_countAndFlagsBits + 408))(6);
              ConversationRequestProcessor.maybeRunExecution(rcState:)(v48);
              swift_release();
              goto LABEL_54;
            }
            unint64_t v111 = *v45;
            if (*v45 >> 62 == 1)
            {
              uint64_t v112 = v111 & 0x3FFFFFFFFFFFFFFFLL;
              if (*(void *)((v111 & 0x3FFFFFFFFFFFFFFFLL) + 0x10) == v42
                && *(void *)((v111 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) == v134)
              {
                swift_retain();
                swift_bridgeObjectRelease();
LABEL_57:
                uint64_t v117 = v122;
                if ((*(uint64_t (**)(uint64_t))(*(void *)v122 + 896))(v112))
                {
                  (*(void (**)(Swift::String *, void))(*(void *)v117 + 1128))(v48, 0);
                  swift_release();
                  swift_release();
LABEL_54:
                  swift_release();
LABEL_64:
                  v110(v126, v130);
                  return;
                }
                v110(v126, v130);
                swift_release();
LABEL_38:
                swift_release();
                swift_release();
                return;
              }
              char v116 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_retain();
              swift_bridgeObjectRelease();
              if (v116) {
                goto LABEL_57;
              }
              swift_release();
            }
            else
            {
              swift_bridgeObjectRelease();
            }
            uint64_t v118 = Logger.logObject.getter();
            os_log_type_t v119 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v118, v119))
            {
              id v120 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)id v120 = 0;
              _os_log_impl(&dword_1B9C64000, v118, v119, "StoppedListeningForText|SpeechContinuation has not yet been received or this NLRoutingDecisionMessage does not correspond to a finalized TRP.", v120, 2u);
              MEMORY[0x1BA9E48C0](v120, -1, -1);
            }
            swift_release();
            swift_release();

            goto LABEL_64;
          }
        }
        swift_bridgeObjectRetain();
        uint64_t v93 = Logger.logObject.getter();
        os_log_type_t v97 = static os_log_type_t.info.getter();
        if (!os_log_type_enabled(v93, v97))
        {

          swift_bridgeObjectRelease_n();
          goto LABEL_38;
        }
        uint64_t v98 = (uint8_t *)swift_slowAlloc();
        uint64_t v99 = swift_slowAlloc();
        uint64_t v137 = v99;
        *(_DWORD *)uint64_t v98 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, &v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B9C64000, v93, v97, "TRP ID: %s has already been cancelled. Not handling NLRoutingDecisionMessage any further", v98, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v99, -1, -1);
        MEMORY[0x1BA9E48C0](v98, -1, -1);
        swift_release();
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v93 = Logger.logObject.getter();
        os_log_type_t v94 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v93, v94))
        {

          swift_bridgeObjectRelease_n();
LABEL_40:
          swift_release();
          return;
        }
        id v95 = (uint8_t *)swift_slowAlloc();
        uint64_t v96 = swift_slowAlloc();
        uint64_t v137 = v96;
        *(_DWORD *)id v95 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, &v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B9C64000, v93, v94, "Received NLRoutingDecisionMessage before RC state is created for TRP ID: %s. This is an error", v95, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v96, -1, -1);
        MEMORY[0x1BA9E48C0](v95, -1, -1);
      }
      swift_release();

      return;
    }
    id v67 = (id)v16;
    swift_retain_n();
    id v68 = v67;
    uint64_t v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = swift_slowAlloc();
      unint64_t v72 = (void *)swift_slowAlloc();
      uint64_t v131 = v72;
      uint64_t v135 = swift_slowAlloc();
      uint64_t v137 = v135;
      v138[0] = (uint64_t)v68;
      *(_DWORD *)uint64_t v71 = 138412546;
      id v73 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v72 = v68;

      *(_WORD *)(v71 + 12) = 2080;
      uint64_t v74 = v32 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
      swift_beginAccess();
      uint64_t v75 = v132;
      uint64_t v76 = v133;
      unint64_t v77 = v134;
      (*((void (**)(char *, uint64_t, unint64_t))v133 + 2))(v132, v74, v134);
      uint64_t v78 = RequestType.rawValue.getter();
      unint64_t v80 = v79;
      (*((void (**)(char *, unint64_t))v76 + 1))(v75, v77);
      uint64_t v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v80, &v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v69, v70, "%@ is not supported for this requestType: %s", (uint8_t *)v71, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      unint64_t v81 = v131;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v81, -1, -1);
      uint64_t v82 = v135;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v82, -1, -1);
      MEMORY[0x1BA9E48C0](v71, -1, -1);
      swift_release();

      return;
    }

LABEL_32:
    swift_release_n();
    return;
  }
  unint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    os_log_type_t v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v39 = 0;
    _os_log_impl(&dword_1B9C64000, v37, v38, "NLRoutingDecisionMessage received for an inactive request. Will cache it for when we get a start-turn signal.", v39, 2u);
    MEMORY[0x1BA9E48C0](v39, -1, -1);
  }

  os_log_type_t v40 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v2 + 400))(v138);
  ConversationRequestProcessor.State.cacheCandidateMessage(_:)(v16 | 0x6000000000000000);
  v40(v138, 0);
}

void ConversationRequestProcessor.handleTTResponseMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RequestType();
  uint64_t v242 = *(void *)(v4 - 8);
  v243 = (uint64_t *)v4;
  MEMORY[0x1F4188790](v4);
  v241 = (char *)&v215 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v230 = type metadata accessor for SelectedUserAttributes();
  uint64_t v6 = *(void *)(v230 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v230);
  unint64_t v9 = (char *)&v215 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v215 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SelectedUserAttributes?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  v228 = (char *)&v215 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  v227 = (char *)&v215 - v15;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LanguageVariantResult?);
  MEMORY[0x1F4188790](v16 - 8);
  v226 = (char *)&v215 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  MEMORY[0x1F4188790](v18 - 8);
  v225 = (char *)&v215 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  MEMORY[0x1F4188790](v20 - 8);
  v224 = (char *)&v215 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1F4188790](v22 - 8);
  v223 = (char *)&v215 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v24 - 8);
  v222 = (char *)&v215 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TCUMappedNLResponse?);
  MEMORY[0x1F4188790](v26 - 8);
  v232 = (char *)&v215 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for TCUMappedNLResponse();
  uint64_t v233 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v215 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for TTResponseMessage.MitigationDecision();
  v239 = *(void **)(v31 - 8);
  uint64_t v240 = v31;
  uint64_t v32 = MEMORY[0x1F4188790](v31);
  v219 = (char *)&v215 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  v221 = (char *)&v215 - v35;
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  v236 = (char *)&v215 - v37;
  MEMORY[0x1F4188790](v36);
  v235 = (char *)&v215 - v38;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v39 = type metadata accessor for Logger();
  uint64_t v40 = __swift_project_value_buffer(v39, (uint64_t)static Logger.conversationBridge);
  unint64_t v41 = a1;
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.debug.getter();
  BOOL v44 = os_log_type_enabled(v42, v43);
  uint64_t v234 = v28;
  v231 = v30;
  uint64_t v229 = v6;
  v220 = v11;
  v218 = v9;
  if (v44)
  {
    uint64_t v45 = swift_slowAlloc();
    uint64_t v237 = v40;
    unint64_t v46 = (uint8_t *)v45;
    uint64_t v47 = swift_slowAlloc();
    uint64_t v246 = v47;
    *(_DWORD *)unint64_t v46 = 136315138;
    v217 = v46 + 4;
    id v48 = (id)v41;
    v238 = v2;
    id v49 = v48;
    id v50 = objc_msgSend(v48, sel_description);
    uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v53 = v52;

    v245 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v53, &v246);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v2 = v238;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v42, v43, "ConversationBridge received TTResponseMessage: %s", v46, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v47, -1, -1);
    os_log_type_t v54 = v46;
    uint64_t v40 = v237;
    MEMORY[0x1BA9E48C0](v54, -1, -1);
  }
  else
  {
  }
  uint64_t v55 = (*((uint64_t (**)(void))v2->isa + 74))();
  if (v55)
  {
    uint64_t v56 = v55;
    unint64_t v57 = (uint64_t *)(v55 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    uint64_t v59 = *(void *)(v55 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    uint64_t v58 = *(void *)(v55 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8);
    swift_bridgeObjectRetain();
    if (v59 == RequestMessageBase.requestId.getter() && v58 == v60)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v65 & 1) == 0)
      {
        id v91 = (id)v41;
        swift_retain_n();
        id v92 = v91;
        unint64_t v77 = Logger.logObject.getter();
        os_log_type_t v93 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v77, v93))
        {
          uint64_t v94 = swift_slowAlloc();
          uint64_t v95 = swift_slowAlloc();
          uint64_t v246 = v95;
          *(_DWORD *)uint64_t v94 = 136315394;
          uint64_t v96 = RequestMessageBase.requestId.getter();
          v245 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v97, &v246);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          *(_WORD *)(v94 + 12) = 2080;
          uint64_t v98 = *v57;
          unint64_t v99 = v57[1];
          swift_bridgeObjectRetain();
          v245 = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v99, &v246);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v77, v93, "TTResponseMessage request ID %s does not match this turn's: %s. Dropping it on the floor.", (uint8_t *)v94, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v95, -1, -1);
          MEMORY[0x1BA9E48C0](v94, -1, -1);
          goto LABEL_40;
        }

LABEL_30:
        swift_release_n();
        return;
      }
    }
    if (ConversationRequestProcessorTurnState.requestSupportedForOnDeviceExecution()())
    {
      uint64_t v66 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
      unint64_t v68 = v67;
      uint64_t v69 = (unint64_t *)(v56
                               + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
      swift_beginAccess();
      unint64_t v70 = *v69;
      uint64_t v71 = (void *)v69[1];
      outlined copy of ConversationRequestProcessorTurnState.SpeechState(*v69, v71);
      unint64_t v72 = (Swift::String *)ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(v66, v68, v70, v71);
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v70, v71);
      if (!v72)
      {
        swift_bridgeObjectRetain();
        unint64_t v77 = Logger.logObject.getter();
        os_log_type_t v100 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v77, v100))
        {

          swift_bridgeObjectRelease_n();
          swift_release();
          return;
        }
        uint64_t v101 = (uint8_t *)swift_slowAlloc();
        uint64_t v102 = swift_slowAlloc();
        v245 = (char *)v102;
        *(_DWORD *)uint64_t v101 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v244 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v68, (uint64_t *)&v245);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B9C64000, v77, v100, "Received TTResponseMessage before RC state is created for TRP ID: %s ..this may happen if no ASR or text input message was received before the NL output message is received from the message bus.", v101, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v102, -1, -1);
        MEMORY[0x1BA9E48C0](v101, -1, -1);
        goto LABEL_40;
      }
      if ((v66 != v72[1]._countAndFlagsBits || (void *)v68 != v72[1]._object)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        unint64_t v77 = Logger.logObject.getter();
        os_log_type_t v108 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v77, v108))
        {
          char v109 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v109 = 0;
          _os_log_impl(&dword_1B9C64000, v77, v108, "TTResponse is for a TRP that does not match the finalized TRP, ignoring this.", v109, 2u);
          os_log_type_t v107 = v109;
          goto LABEL_38;
        }

        goto LABEL_44;
      }
      char v73 = (*(uint64_t (**)(void))(v72->_countAndFlagsBits + 400))();
      if (ResultCandidateProcessingStatus.rawValue.getter(v73) == 0x64656C65636E6163 && v74 == 0xE800000000000000)
      {
        swift_bridgeObjectRelease();
LABEL_32:
        swift_bridgeObjectRetain();
        unint64_t v77 = Logger.logObject.getter();
        os_log_type_t v104 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v77, v104))
        {
          id v105 = (uint8_t *)swift_slowAlloc();
          uint64_t v106 = swift_slowAlloc();
          v245 = (char *)v106;
          *(_DWORD *)id v105 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v244 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v68, (uint64_t *)&v245);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B9C64000, v77, v104, "TRP ID: %s has already been cancelled. Not handling TTResponseMessage any further", v105, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v106, -1, -1);
          os_log_type_t v107 = v105;
LABEL_38:
          MEMORY[0x1BA9E48C0](v107, -1, -1);
LABEL_39:
          swift_release();
          goto LABEL_40;
        }

        swift_bridgeObjectRelease_n();
        goto LABEL_44;
      }
      char v103 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v103) {
        goto LABEL_32;
      }
      v243 = (uint64_t *)v41;
      v216 = v69;
      v217 = (uint8_t *)v66;
      v241 = (char *)v68;
      uint64_t v242 = v56;
      swift_retain_n();
      id v110 = Logger.logObject.getter();
      os_log_type_t v111 = static os_log_type_t.debug.getter();
      BOOL v112 = os_log_type_enabled(v110, v111);
      v238 = v2;
      if (v112)
      {
        unint64_t v113 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v114 = v72;
        uint64_t v115 = swift_slowAlloc();
        v245 = (char *)v115;
        *(_DWORD *)unint64_t v113 = 136315138;
        uint64_t countAndFlagsBits = v114->_countAndFlagsBits;
        uint64_t v237 = v40;
        uint64_t v117 = *(uint64_t (**)(uint64_t))(countAndFlagsBits + 800);
        uint64_t v118 = swift_retain();
        uint64_t v119 = v117(v118);
        unint64_t v121 = v120;
        swift_release();
        uint64_t v244 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v119, v121, (uint64_t *)&v245);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        uint64_t v40 = v237;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v110, v111, "Received TTResponseMessage when RC state: %s", v113, 0xCu);
        swift_arrayDestroy();
        uint64_t v122 = v115;
        unint64_t v72 = v114;
        MEMORY[0x1BA9E48C0](v122, -1, -1);
        MEMORY[0x1BA9E48C0](v113, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      unint64_t v123 = v235;
      TTResponseMessage.mitigationDecision.getter();
      int v124 = *MEMORY[0x1E4FA2068];
      uint64_t v126 = v239;
      uint64_t v125 = v240;
      uint64_t v127 = v236;
      ((void (*)(char *, void, uint64_t))v239[13])(v236, *MEMORY[0x1E4FA2068], v240);
      _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2(&lazy protocol witness table cache variable for type TTResponseMessage.MitigationDecision and conformance TTResponseMessage.MitigationDecision, MEMORY[0x1E4FA2088]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v129 = v244;
      uint64_t v128 = (uint64_t)v245;
      uint64_t v130 = (void (*)(char *, uint64_t))v126[1];
      v130(v127, v125);
      uint64_t v131 = ((uint64_t (*)(char *, uint64_t))v130)(v123, v125);
      if (v128 == v129)
      {
        unint64_t v132 = (unint64_t)v241;
        swift_bridgeObjectRetain();
        unint64_t v77 = Logger.logObject.getter();
        os_log_type_t v133 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v77, v133))
        {

          swift_release();
          swift_bridgeObjectRelease_n();
          goto LABEL_45;
        }
        unint64_t v134 = (uint8_t *)swift_slowAlloc();
        uint64_t v135 = swift_slowAlloc();
        v245 = (char *)v135;
        *(_DWORD *)unint64_t v134 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v244 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v217, v132, (uint64_t *)&v245);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        uint64_t v136 = "TTResponseMessage with TRP ID: %s has mitigationDecision as forceMitigate, not proceeding further";
LABEL_53:
        _os_log_impl(&dword_1B9C64000, v77, v133, v136, v134, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v135, -1, -1);
        MEMORY[0x1BA9E48C0](v134, -1, -1);
        goto LABEL_39;
      }
      uint64_t v137 = (*(uint64_t (**)(uint64_t))(v72->_countAndFlagsBits + 304))(v131);
      swift_bridgeObjectRelease();
      if (v137)
      {
        unint64_t v138 = (unint64_t)v241;
        swift_bridgeObjectRetain();
        unint64_t v77 = Logger.logObject.getter();
        os_log_type_t v133 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v77, v133))
        {
          unint64_t v134 = (uint8_t *)swift_slowAlloc();
          uint64_t v135 = swift_slowAlloc();
          v245 = (char *)v135;
          *(_DWORD *)unint64_t v134 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v244 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v217, v138, (uint64_t *)&v245);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          uint64_t v136 = "Already received TTResponseMessage for this TRP ID: %s .. this happened because we received multiple NL"
                 " outputs for the same TRP ID.";
          goto LABEL_53;
        }

LABEL_68:
        swift_bridgeObjectRelease_n();
LABEL_44:
        swift_release();
LABEL_45:
        swift_release();
        return;
      }
      uint64_t v139 = (uint64_t)v232;
      uint64_t v140 = v243;
      TTResponseMessage.tcuMappedNLResponse.getter();
      uint64_t v142 = v233;
      uint64_t v141 = v234;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v233 + 48))(v139, 1, v234) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v139, &demangling cache variable for type metadata for TCUMappedNLResponse?);
        uint64_t v143 = v140;
        unint64_t v144 = (unint64_t)v241;
        swift_bridgeObjectRetain();
        uint64_t v145 = Logger.logObject.getter();
        int v146 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v145, (os_log_type_t)v146))
        {

          goto LABEL_68;
        }
        LODWORD(v237) = v146;
        v238 = v145;
        uint64_t v147 = swift_slowAlloc();
        v236 = (char *)swift_slowAlloc();
        v245 = v236;
        *(_DWORD *)uint64_t v147 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v244 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v217, v144, (uint64_t *)&v245);
        v243 = (uint64_t *)&v245;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v147 + 12) = 2080;
        id v148 = v221;
        TTResponseMessage.mitigationDecision.getter();
        uint64_t v150 = v239;
        uint64_t v149 = v240;
        v151 = v219;
        ((void (*)(char *, char *, uint64_t))v239[2])(v219, v148, v240);
        int v152 = ((uint64_t (*)(char *, uint64_t))v150[11])(v151, v149);
        BOOL v153 = v152 == *MEMORY[0x1E4FA2078];
        v215 = v72;
        if (v153)
        {
          unint64_t v154 = 0xE800000000000000;
          uint64_t v155 = 0x64657463656C6573;
          unint64_t v77 = v238;
          os_log_type_t v156 = v237;
          uint64_t v157 = v236;
        }
        else
        {
          unint64_t v77 = v238;
          os_log_type_t v156 = v237;
          uint64_t v157 = v236;
          if (v152 == *MEMORY[0x1E4FA2080])
          {
            unint64_t v154 = 0xE900000000000064;
            uint64_t v155 = 0x657461676974696DLL;
          }
          else
          {
            if (v152 == *MEMORY[0x1E4FA2070])
            {
              unint64_t v154 = 0xEE00646574616769;
              unsigned int v214 = 1652121965;
            }
            else
            {
              if (v152 != v124)
              {
                v130(v219, v240);
                uint64_t v155 = 0;
                unint64_t v154 = 0xE000000000000000;
                goto LABEL_97;
              }
              unint64_t v154 = 0xED00006574616769;
              unsigned int v214 = 1668444006;
            }
            uint64_t v155 = v214 | 0x74694D6500000000;
          }
        }
LABEL_97:
        v130(v221, v240);
        uint64_t v244 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v155, v154, (uint64_t *)&v245);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v77, v156, "TTResponseMessage with TRP ID: %s has no tcuMapedNLResponse and has mitigationDecision as %s... ignoring this message.", (uint8_t *)v147, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v157, -1, -1);
        MEMORY[0x1BA9E48C0](v147, -1, -1);
        swift_release();
        goto LABEL_40;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v142 + 32))(v231, v139, v141);
      uint64_t v158 = (void *)TCUMappedNLResponse.nlResponse.getter();
      uint64_t v159 = NLParseResponse.userParses.getter();

      (*(void (**)(uint64_t))(v72->_countAndFlagsBits + 312))(v159);
      uint64_t v160 = (void *)TCUMappedNLResponse.nlResponse.getter();
      uint64_t v161 = v222;
      NLParseResponse.fallbackParse.getter();

      (*(void (**)(char *))(v72->_countAndFlagsBits + 696))(v161);
      uint64_t v162 = (void *)TCUMappedNLResponse.nlResponse.getter();
      v163 = v223;
      NLParseResponse.serverFallbackReason.getter();

      (*(void (**)(char *))(v72->_countAndFlagsBits + 720))(v163);
      (*(void (**)(uint64_t))(v72->_countAndFlagsBits + 408))(5);
      v164 = v224;
      TTResponseMessage.mitigationDecision.getter();
      ((void (*)(char *, void, uint64_t, uint64_t))v239[7])(v164, 0, 1, v240);
      (*(void (**)(char *))(v72->_countAndFlagsBits + 552))(v164);
      uint64_t v165 = (void *)TCUMappedNLResponse.nlResponse.getter();
      uint64_t v166 = v225;
      NLParseResponse.responseStatusCode.getter();

      (*(void (**)(char *))(v72->_countAndFlagsBits + 600))(v166);
      uint64_t v167 = (void *)TCUMappedNLResponse.nlResponse.getter();
      v168 = v226;
      NLParseResponse.languageVariantResult.getter();

      (*(void (**)(char *))(v72->_countAndFlagsBits + 336))(v168);
      v169 = (void *)TCUMappedNLResponse.nlResponse.getter();
      uint64_t v170 = NLParseResponse.responseVariantResult.getter();
      uint64_t v172 = v171;

      uint64_t v173 = (*(uint64_t (**)(uint64_t, uint64_t))(v72->_countAndFlagsBits + 360))(v170, v172);
      uint64_t v174 = (*(uint64_t (**)(uint64_t))(v72->_countAndFlagsBits + 872))(v173);
      if (v174)
      {
        uint64_t v175 = v174;
        uint64_t v176 = TCUMappedNLResponse.tcuId.getter();
        (*(void (**)(uint64_t))(*(void *)v175 + 224))(v176);
        swift_release();
      }
      v177 = v227;
      TTResponseMessage.selectedUserAttributes.getter();
      uint64_t v178 = (*(uint64_t (**)(char *))(v72->_countAndFlagsBits + 768))(v177);
      uint64_t v179 = (uint64_t)v228;
      (*(void (**)(uint64_t))(v72->_countAndFlagsBits + 760))(v178);
      uint64_t v181 = v229;
      uint64_t v180 = v230;
      int v182 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v229 + 48))(v179, 1, v230);
      unint64_t v183 = (unint64_t)v241;
      if (v182 == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v179, &demangling cache variable for type metadata for SelectedUserAttributes?);
        v184 = Logger.logObject.getter();
        os_log_type_t v185 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v184, v185))
        {
          uint64_t v186 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v186 = 0;
          _os_log_impl(&dword_1B9C64000, v184, v185, "#user-session: Did not receive SelectedUserAttribute", v186, 2u);
          MEMORY[0x1BA9E48C0](v186, -1, -1);
        }
      }
      else
      {
        v187 = v220;
        (*(void (**)(char *, uint64_t, uint64_t))(v181 + 32))(v220, v179, v180);
        v188 = v218;
        (*(void (**)(char *, char *, uint64_t))(v181 + 16))(v218, v187, v180);
        v189 = Logger.logObject.getter();
        os_log_type_t v190 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v189, v190))
        {
          uint64_t v191 = (uint8_t *)swift_slowAlloc();
          v243 = (uint64_t *)swift_slowAlloc();
          v245 = (char *)v243;
          uint64_t v237 = v40;
          *(_DWORD *)uint64_t v191 = 136315138;
          uint64_t v240 = (uint64_t)(v191 + 4);
          _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type SelectedUserAttributes and conformance SelectedUserAttributes, MEMORY[0x1E4FA2698]);
          uint64_t v192 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v244 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v192, v193, (uint64_t *)&v245);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v194 = *(void (**)(char *, uint64_t))(v181 + 8);
          uint64_t v195 = v230;
          v194(v188, v230);
          _os_log_impl(&dword_1B9C64000, v189, v190, "#user-session: Received SelectedUserAttributes=%s", v191, 0xCu);
          v196 = v243;
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v196, -1, -1);
          MEMORY[0x1BA9E48C0](v191, -1, -1);

          v194(v220, v195);
        }
        else
        {

          v197 = *(void (**)(char *, uint64_t))(v181 + 8);
          v197(v188, v180);
          v197(v220, v180);
        }
      }
      swift_bridgeObjectRetain_n();
      uint64_t v198 = Logger.logObject.getter();
      os_log_type_t v199 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v198, v199))
      {
        v200 = (uint8_t *)swift_slowAlloc();
        uint64_t v201 = swift_slowAlloc();
        v245 = (char *)v201;
        *(_DWORD *)v200 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v244 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v217, v183, (uint64_t *)&v245);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B9C64000, v198, v199, "Cached NL output for TRP ID: %s", v200, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v201, -1, -1);
        MEMORY[0x1BA9E48C0](v200, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v202 = v238;
      v203 = v216;
      v204 = v231;
      ConversationRequestProcessor.maybeRunExecution(rcState:)(v72);
      unint64_t v205 = *v203;
      if (*v203 >> 62 == 1)
      {
        uint64_t v206 = v205 & 0x3FFFFFFFFFFFFFFFLL;
        if (*(uint8_t **)((v205 & 0x3FFFFFFFFFFFFFFFLL) + 0x10) == v217
          && *(void *)((v205 & 0x3FFFFFFFFFFFFFFFLL) + 0x18) == v183)
        {
          swift_retain();
          swift_bridgeObjectRelease();
LABEL_83:
          v208 = Logger.logObject.getter();
          os_log_type_t v209 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v208, v209))
          {
            v210 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v210 = 0;
            _os_log_impl(&dword_1B9C64000, v208, v209, "TTResponse for a finalizedTRP has been received, will handle StoppedListeningForText|SpeechContinuation now", v210, 2u);
            MEMORY[0x1BA9E48C0](v210, -1, -1);
          }

          (*((void (**)(uint64_t))v202->isa + 113))(v206);
          swift_release();
          swift_release();
          swift_release();
LABEL_90:
          (*(void (**)(char *, uint64_t))(v233 + 8))(v204, v234);
          return;
        }
        char v207 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_retain();
        swift_bridgeObjectRelease();
        if (v207) {
          goto LABEL_83;
        }
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v211 = Logger.logObject.getter();
      os_log_type_t v212 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v211, v212))
      {
        v213 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v213 = 0;
        _os_log_impl(&dword_1B9C64000, v211, v212, "StoppedListeningForText|SpeechContinuation has not yet been received or this TTResponse does not correspond to a finalized TRP.", v213, 2u);
        MEMORY[0x1BA9E48C0](v213, -1, -1);
      }
      swift_release();
      swift_release();

      goto LABEL_90;
    }
    id v75 = (id)v41;
    swift_retain_n();
    id v76 = v75;
    unint64_t v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v77, v78))
    {
      uint64_t v79 = swift_slowAlloc();
      unint64_t v80 = (void *)swift_slowAlloc();
      v239 = v80;
      uint64_t v240 = swift_slowAlloc();
      v245 = (char *)v240;
      uint64_t v246 = (uint64_t)v76;
      *(_DWORD *)uint64_t v79 = 138412546;
      id v81 = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v80 = v76;

      *(_WORD *)(v79 + 12) = 2080;
      uint64_t v82 = v56 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
      swift_beginAccess();
      id v83 = v241;
      uint64_t v84 = v242;
      uint64_t v85 = v243;
      (*(void (**)(char *, uint64_t, uint64_t *))(v242 + 16))(v241, v82, v243);
      uint64_t v86 = RequestType.rawValue.getter();
      unint64_t v88 = v87;
      (*(void (**)(char *, uint64_t *))(v84 + 8))(v83, v85);
      uint64_t v244 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v88, (uint64_t *)&v245);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v77, v78, "%@ is not supported for this requestType: %s", (uint8_t *)v79, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v89 = v239;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v89, -1, -1);
      uint64_t v90 = v240;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v90, -1, -1);
      MEMORY[0x1BA9E48C0](v79, -1, -1);
LABEL_40:
      swift_release();

      return;
    }

    goto LABEL_30;
  }
  uint64_t v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v61, v62))
  {
    unint64_t v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v63 = 0;
    _os_log_impl(&dword_1B9C64000, v61, v62, "TTResponseMessage received for an inactive request. Will cache it for when we get a start-turn signal.", v63, 2u);
    MEMORY[0x1BA9E48C0](v63, -1, -1);
  }

  char v64 = (void (*)(uint64_t *, void))(*((uint64_t (**)(uint64_t *))v2->isa + 50))(&v246);
  ConversationRequestProcessor.State.cacheCandidateMessage(_:)(v41 | 0x4000000000000000);
  v64(&v246, 0);
}

void ConversationRequestProcessor.handleMultiUserStoppedListeningForSpeechContinuationMessage(_:)(void *a1)
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  id v12 = a1;
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v13 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    id v7 = v12;
    id v8 = objc_msgSend(v7, sel_description);
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v11 = v10;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v3, v4, "ConversationBridge received %s, dropping it.", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v6, -1, -1);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }
  else
  {
  }
}

uint64_t ConversationRequestProcessor.handleStoppedListeningForSpeechContinuationMessage(_:)(unint64_t a1)
{
  uint64_t v2 = StoppedListeningForSpeechContinuationMessage.lastTRPId.getter();
  ConversationRequestProcessor.handleStoppedListeningForContinuationMessage(_:trpId:messageToCacheIfNotInActiveTurn:)((void *)a1, v2, v3, a1 | 0xA000000000000000);

  return swift_bridgeObjectRelease();
}

uint64_t ConversationRequestProcessor.handleStoppedListeningForTextContinuationMessage(_:)(void *a1)
{
  uint64_t v2 = StoppedListeningForTextContinuationMessage.lastTRPId.getter();
  ConversationRequestProcessor.handleStoppedListeningForContinuationMessage(_:trpId:messageToCacheIfNotInActiveTurn:)(a1, v2, v3, 0xF000000000000007);

  return swift_bridgeObjectRelease();
}

void ConversationRequestProcessor.handleStoppedListeningForContinuationMessage(_:trpId:messageToCacheIfNotInActiveTurn:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  swift_getObjectType();
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
  id v10 = a1;
  unint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    os_log_type_t type = v12;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v95 = swift_slowAlloc();
    v100[0] = v95;
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v14 = _typeName(_:qualified:)();
    unint64_t v97 = a3;
    uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    id v16 = v10;
    uint64_t v17 = v5;
    id v18 = objc_msgSend(v16, sel_description);
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v20 = v10;
    unint64_t v22 = v21;

    uint64_t v5 = v17;
    uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v22, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a3 = v97;
    id v10 = v20;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v11, type, "ConversationBridge received %s: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v95, -1, -1);
    MEMORY[0x1BA9E48C0](v13, -1, -1);
  }
  else
  {
  }
  uint64_t v23 = (*(uint64_t (**)(void))(*(void *)v5 + 384))();
  uint64_t v26 = v23;
  uint64_t v27 = v24;
  if (v25 != 2)
  {
    outlined consume of ConversationRequestProcessor.State(v23, v24, v25);
    if ((~a4 & 0xF000000000000007) != 0)
    {
      id v71 = (id)(a4 & 0x1FFFFFFFFFFFFFFFLL);
      unint64_t v72 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v72, v73))
      {
        uint64_t v74 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v74 = 0;
        _os_log_impl(&dword_1B9C64000, v72, v73, "StoppedListeningForSpeechContinuationMessage received for an inactive request. Will cache it for when we get a start-turn signal.", v74, 2u);
        MEMORY[0x1BA9E48C0](v74, -1, -1);
      }

      id v75 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v5 + 400))(v100);
      ConversationRequestProcessor.State.cacheCandidateMessage(_:)(a4);
      v75(v100, 0);
      outlined consume of CandidateRequestMessage?(a4);
    }
    else
    {
      unint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v46, v47))
      {
        id v48 = (uint8_t *)swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        v100[0] = v49;
        *(_DWORD *)id v48 = 136315138;
        uint64_t v50 = _typeName(_:qualified:)();
        uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v46, v47, "%s received for an inactive request. Ignoring.", v48, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v49, -1, -1);
        MEMORY[0x1BA9E48C0](v48, -1, -1);
      }
    }
    return;
  }
  uint64_t v28 = swift_retain();
  outlined consume of ConversationRequestProcessor.State(v28, v27, 2);
  uint64_t v29 = (uint64_t *)(v26 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  uint64_t v31 = *(void *)(v26 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  uint64_t v30 = *(void *)(v26 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v31 == RequestMessageBase.requestId.getter() && v30 == v32)
  {
    swift_bridgeObjectRelease_n();
LABEL_19:
    unint64_t v52 = (unint64_t *)(v26 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    unint64_t v53 = *v52;
    if (!(*v52 >> 62))
    {
      os_log_type_t v54 = (void *)v52[1];
      uint64_t v55 = *(uint64_t (**)(uint64_t))(*(void *)v53 + 88);
      outlined copy of ConversationRequestProcessorTurnState.SpeechState(v53, v54);
      outlined copy of ConversationRequestProcessorTurnState.SpeechState(v53, v54);
      uint64_t v56 = swift_bridgeObjectRetain();
      uint64_t v57 = v55(v56);
      if (*(void *)(v57 + 16))
      {
        unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
        if (v59)
        {
          uint64_t v96 = v5;
          uint64_t v60 = *(void *)(*(void *)(v57 + 56) + 8 * v58);
          swift_retain();
          swift_bridgeObjectRelease();
          outlined consume of ConversationRequestProcessorTurnState.SpeechState(v53, v54);
          swift_bridgeObjectRelease();
          outlined consume of ConversationRequestProcessorTurnState.SpeechState(v53, v54);
          swift_retain_n();
          uint64_t v61 = Logger.logObject.getter();
          os_log_type_t v62 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v61, v62))
          {
            uint64_t v63 = swift_slowAlloc();
            uint64_t typea = swift_slowAlloc();
            uint64_t v101 = typea;
            *(_DWORD *)uint64_t v63 = 136315394;
            log = v61;
            uint64_t v64 = _typeName(_:qualified:)();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, &v101);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v63 + 12) = 2080;
            unint64_t v98 = a3;
            uint64_t v66 = *(uint64_t (**)(uint64_t))(*(void *)v60 + 800);
            uint64_t v67 = swift_retain();
            uint64_t v68 = v66(v67);
            unint64_t v70 = v69;
            swift_release();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v70, &v101);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            a3 = v98;
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1B9C64000, log, v62, "%s received for RC state: %s", (uint8_t *)v63, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x1BA9E48C0](typea, -1, -1);
            MEMORY[0x1BA9E48C0](v63, -1, -1);
          }
          else
          {

            swift_release_n();
          }
          char v83 = (*(uint64_t (**)(void))(*(void *)v60 + 400))();
          if (ResultCandidateProcessingStatus.rawValue.getter(v83) == 0x64656C65636E6163
            && v84 == 0xE800000000000000)
          {
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            char v86 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v86 & 1) == 0)
            {
              unint64_t v90 = *v52;
              id v91 = (void *)v52[1];
              *unint64_t v52 = v60 | 0x4000000000000000;
              v52[1] = 0;
              swift_retain();
              outlined consume of ConversationRequestProcessorTurnState.SpeechState(v90, v91);
              swift_release();
              (*(void (**)(uint64_t))(*(void *)v96 + 904))(v60);
              swift_release();
              goto LABEL_32;
            }
            swift_release();
          }
          swift_bridgeObjectRetain_n();
          id v76 = Logger.logObject.getter();
          os_log_type_t v87 = static os_log_type_t.info.getter();
          if (!os_log_type_enabled(v76, v87))
          {

            swift_bridgeObjectRelease_n();
            swift_release();
            goto LABEL_32;
          }
          unint64_t v88 = (uint8_t *)swift_slowAlloc();
          uint64_t v89 = swift_slowAlloc();
          uint64_t v101 = v89;
          *(_DWORD *)unint64_t v88 = 136315138;
          swift_bridgeObjectRetain();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v101);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B9C64000, v76, v87, "TRP ID: %s already canceled. Not sending commit signal.", v88, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v89, -1, -1);
          MEMORY[0x1BA9E48C0](v88, -1, -1);
          swift_release();
LABEL_30:

          goto LABEL_32;
        }
      }
      swift_bridgeObjectRelease();
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v53, v54);
      swift_bridgeObjectRelease();
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v53, v54);
    }
    swift_release();
    swift_bridgeObjectRetain_n();
    id v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v76, v77))
    {

      swift_bridgeObjectRelease_n();
      goto LABEL_32;
    }
    uint64_t v78 = swift_slowAlloc();
    unint64_t v79 = a3;
    uint64_t v80 = swift_slowAlloc();
    uint64_t v101 = v80;
    *(_DWORD *)uint64_t v78 = 136315394;
    uint64_t v81 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, &v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v78 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, v79, &v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v76, v77, "Received %s before RC state was created for TRP ID: %s. Dropping it on the floor.", (uint8_t *)v78, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v80, -1, -1);
    MEMORY[0x1BA9E48C0](v78, -1, -1);
    goto LABEL_30;
  }
  char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v34) {
    goto LABEL_19;
  }
  id v35 = v10;
  swift_retain();
  uint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    v100[0] = v39;
    *(_DWORD *)uint64_t v38 = 136315650;
    uint64_t v40 = _typeName(_:qualified:)();
    uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 12) = 2080;
    uint64_t v42 = RequestMessageBase.requestId.getter();
    uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 22) = 2080;
    uint64_t v44 = *v29;
    unint64_t v45 = v29[1];
    swift_bridgeObjectRetain();
    uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v36, v37, "%s request ID %s does not match this turn's: %s. Dropping it on the floor.", (uint8_t *)v38, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v39, -1, -1);
    MEMORY[0x1BA9E48C0](v38, -1, -1);

LABEL_32:
    swift_release();
    return;
  }

  swift_release_n();
}

uint64_t ConversationRequestProcessor.canCommitExecution(for:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RoutingDecision(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  id v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 480))(v8))
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
    os_log_type_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_22;
    }
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    unint64_t v15 = "Execution was already committed. will not call commit.";
LABEL_21:
    _os_log_impl(&dword_1B9C64000, v12, v13, v15, v14, 2u);
    MEMORY[0x1BA9E48C0](v14, -1, -1);
LABEL_22:

    return 0;
  }
  uint64_t v16 = (*(uint64_t (**)(void))(*(void *)v1 + 592))();
  uint64_t v17 = swift_release();
  if (!v16)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.conversationBridge);
    os_log_type_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_22;
    }
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    unint64_t v15 = "No active turn found. Will not call commit.";
    goto LABEL_21;
  }
  if (((*(uint64_t (**)(uint64_t))(*a1 + 472))(v17) & 1) == 0)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.conversationBridge);
    os_log_type_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_22;
    }
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    unint64_t v15 = "This is not the selectedRC. Will not call commit.";
    goto LABEL_21;
  }
  (*(void (**)(void))(*a1 + 544))();
  uint64_t v18 = type metadata accessor for TTResponseMessage.MitigationDecision();
  int v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v10, 1, v18);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  if (v19 == 1)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
    os_log_type_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v12, v13)) {
      goto LABEL_22;
    }
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    unint64_t v15 = "MitigationDecision has not yet been received for for the selectedTRP. Will not call commit.";
    goto LABEL_21;
  }
  uint64_t v24 = *(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_gestureRCID + 8);
  if (v24)
  {
    if (a1[2] == *(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_gestureRCID)
      && v24 == a1[3])
    {
      char v25 = 1;
    }
    else
    {
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  else
  {
    char v25 = 0;
  }
  uint64_t v26 = (void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_featureChecker);
  uint64_t v27 = v26[3];
  uint64_t v28 = v26[4];
  __swift_project_boxed_opaque_existential_1(v26, v27);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v28 + 16))(v27, v28))
  {
    uint64_t v29 = v26[3];
    uint64_t v30 = v26[4];
    __swift_project_boxed_opaque_existential_1(v26, v29);
    if (!(v25 & 1 | (((*(uint64_t (**)(uint64_t, uint64_t))(v30 + 32))(v29, v30) & 1) == 0)))
    {
      (*(void (**)(void))(*a1 + 568))();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      outlined destroy of RoutingDecision((uint64_t)v6, type metadata accessor for RoutingDecision);
      if (EnumCaseMultiPayload != 1)
      {
        if (one-time initialization token for conversationBridge != -1) {
          swift_once();
        }
        uint64_t v36 = type metadata accessor for Logger();
        __swift_project_value_buffer(v36, (uint64_t)static Logger.conversationBridge);
        os_log_type_t v12 = Logger.logObject.getter();
        os_log_type_t v13 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v12, v13)) {
          goto LABEL_22;
        }
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v14 = 0;
        unint64_t v15 = "NLRoutingDecision has not yet been received for the selectedTRP. Will not call commit.";
        goto LABEL_21;
      }
    }
  }
  char v32 = (*(uint64_t (**)(void))(*a1 + 400))();
  if (ResultCandidateProcessingStatus.rawValue.getter(v32) == 0xD000000000000013 && v33 == 0x80000001BA061150)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v34 & 1) == 0)
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v35 = type metadata accessor for Logger();
      __swift_project_value_buffer(v35, (uint64_t)static Logger.conversationBridge);
      os_log_type_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v12, v13)) {
        goto LABEL_22;
      }
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      unint64_t v15 = "Execution has not yet been kicked off. Will not call commit.";
      goto LABEL_21;
    }
  }
  return 1;
}

void ConversationRequestProcessor.reallyHandleStoppedListeningForContinuationMessage(for:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RequestType();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v11 = (char *)&v29 - v10;
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 592))(v9);
  if (v12)
  {
    uint64_t v13 = v12;
    (*(void (**)(uint64_t))(*(void *)a1 + 480))(1);
    uint64_t v14 = v13 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v11, v14, v4);
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E4FA2448], v4);
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, MEMORY[0x1E4FA2460]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v31 == v33 && v32 == v34)
    {
      swift_bridgeObjectRelease_n();
      unint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
      v15(v8, v4);
      uint64_t v16 = ((uint64_t (*)(char *, uint64_t))v15)(v11, v4);
    }
    else
    {
      char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
      v22(v8, v4);
      uint64_t v16 = ((uint64_t (*)(char *, uint64_t))v22)(v11, v4);
      if ((v21 & 1) == 0)
      {
        uint64_t v24 = 0;
LABEL_17:
        char v25 = (unint64_t *)(v13
                                 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
        swift_beginAccess();
        unint64_t v26 = *v25;
        uint64_t v27 = (void *)v25[1];
        *char v25 = a1 | 0x4000000000000000;
        v25[1] = (unint64_t)v24;
        id v28 = v24;
        swift_retain();
        outlined consume of ConversationRequestProcessorTurnState.SpeechState(v26, v27);
        if ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 896))(a1)) {
          (*(void (**)(uint64_t, void))(*(void *)v2 + 1128))(a1, 0);
        }
        swift_release();

        return;
      }
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 872))(v16);
    if (v23)
    {
      (*(void (**)(uint64_t, void))(*(void *)v23 + 152))(1, 0);
      swift_release();
    }
    uint64_t v24 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)v2 + 1352))(a1, v13, 0, 0);
    goto LABEL_17;
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationBridge);
  os_log_t v30 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v18))
  {
    int v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v19 = 0;
    _os_log_impl(&dword_1B9C64000, v30, v18, "No active turn found. This is an error.", v19, 2u);
    MEMORY[0x1BA9E48C0](v19, -1, -1);
  }
  os_log_t v20 = v30;
}

uint64_t ConversationRequestProcessor.waitForPommes(for:nlRoutingDecision:)(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  MEMORY[0x1F4188790](v4 - 8);
  os_log_type_t v47 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ConversationSessionKey();
  uint64_t v48 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesContext?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v49 = (uint64_t)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v50 = (char *)&v47 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  MEMORY[0x1F4188790](v13 - 8);
  unint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  os_log_t v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v47 - v21;
  outlined init with copy of ReferenceResolutionClientProtocol?(a2, (uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
    goto LABEL_8;
  }
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v23(v22, v15, v16);
  v23(v20, v22, v16);
  int v24 = (*(uint64_t (**)(char *, uint64_t))(v17 + 88))(v20, v16);
  if (v24 == *MEMORY[0x1E4FA20D0]) {
    goto LABEL_4;
  }
  if (v24 != *MEMORY[0x1E4FA20B8] && v24 != *MEMORY[0x1E4FA20B0])
  {
    if (v24 == *MEMORY[0x1E4FA20C8])
    {
      (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
      return 0;
    }
    if (v24 == *MEMORY[0x1E4FA20C0]) {
      goto LABEL_8;
    }
    uint64_t v30 = 0;
    if (v24 == *MEMORY[0x1E4FA20E0] || v24 == *MEMORY[0x1E4FA20D8]) {
      return v30;
    }
LABEL_4:
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    goto LABEL_8;
  }
  (*(void (**)(char *, uint64_t))(v17 + 96))(v20, v16);
  swift_bridgeObjectRelease();
LABEL_8:
  uint64_t v25 = *(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_gestureRCID + 8);
  if (v25
    && (*(void *)(v51 + 16) == *(void *)(v2
                                           + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_gestureRCID)
     && v25 == *(void *)(v51 + 24)
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    (*(void (**)(void *__return_ptr))(*(void *)v2 + 408))(v52);
    __swift_project_boxed_opaque_existential_1(v52, v52[3]);
    uint64_t v26 = v48;
    (*(void (**)(char *, void, uint64_t))(v48 + 104))(v8, *MEMORY[0x1E4FA2628], v6);
    dispatch thunk of ConversationSessionState.value(forKey:userId:)();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v6);
    if (v54)
    {
      uint64_t v27 = type metadata accessor for PommesContext();
      uint64_t v28 = (uint64_t)v50;
      int v29 = swift_dynamicCast();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v28, v29 ^ 1u, 1, v27);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v52);
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v52);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v53, (uint64_t *)&demangling cache variable for type metadata for Any?);
      uint64_t v27 = type metadata accessor for PommesContext();
      uint64_t v28 = (uint64_t)v50;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v50, 1, 1, v27);
    }
    uint64_t v31 = v49;
    outlined init with copy of ReferenceResolutionClientProtocol?(v28, v49, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
    type metadata accessor for PommesContext();
    uint64_t v32 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v31, 1, v27) == 1)
    {
      uint64_t v33 = (uint64_t *)&demangling cache variable for type metadata for PommesContext?;
      uint64_t v34 = v31;
    }
    else
    {
      uint64_t v35 = v47;
      PommesContext.exportLegacyNLContext()();
      uint64_t v36 = v27;
      uint64_t v37 = (uint64_t)v35;
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v36);
      uint64_t v38 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
      uint64_t v39 = *(void *)(v38 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38) != 1)
      {
        uint64_t v40 = MEMORY[0x1BA9DE2A0]();
        (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
        goto LABEL_22;
      }
      uint64_t v33 = (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?;
      uint64_t v34 = v37;
    }
    outlined destroy of ReferenceResolutionClientProtocol?(v34, v33);
    uint64_t v40 = MEMORY[0x1E4FBC860];
LABEL_22:
    uint64_t v41 = *(void *)(v40 + 16);
    swift_bridgeObjectRelease();
    if (v41)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v28, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
      return 1;
    }
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)static Logger.conversationBridge);
    unint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v43, v44))
    {
      unint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v45 = 0;
      _os_log_impl(&dword_1B9C64000, v43, v44, "No need to wait for POMMES: POMMES is not expecting a gesture response", v45, 2u);
      MEMORY[0x1BA9E48C0](v45, -1, -1);
    }

    outlined destroy of ReferenceResolutionClientProtocol?(v28, (uint64_t *)&demangling cache variable for type metadata for PommesContext?);
    return 0;
  }
  return 1;
}

void ConversationRequestProcessor.handlePommesTRPCandidateMessage(_:)(NSObject *a1)
{
  uint64_t v3 = type metadata accessor for RequestType();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v147 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PommesError();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v158 = (uint8_t **)((char *)&v147 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v147 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  MEMORY[0x1F4188790](v13 - 8);
  os_log_type_t v156 = (char *)&v147 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  uint64_t v15 = MEMORY[0x1F4188790](v160);
  uint64_t v157 = (char *)&v147 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (void **)((char *)&v147 - v17);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesError?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v155 = (uint64_t)&v147 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  os_log_t v159 = (os_log_t)((char *)&v147 - v23);
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 592))(v22);
  if (!v24)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)static Logger.conversationBridge);
    os_log_t v162 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v162, v44))
    {
      unint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v45 = 0;
      _os_log_impl(&dword_1B9C64000, v162, v44, "PommesTRPCandidateMessage received for an inactive request. Dropping it on the floor.", v45, 2u);
      MEMORY[0x1BA9E48C0](v45, -1, -1);
    }
    os_log_t v46 = v162;

    return;
  }
  int v152 = v12;
  uint64_t v153 = v8;
  uint64_t v154 = v7;
  uint64_t v161 = v24;
  uint64_t v25 = (uint64_t *)(v24 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  uint64_t v26 = *(void *)(v24 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  uint64_t v27 = *(void *)(v24 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8);
  swift_bridgeObjectRetain();
  os_log_t v162 = a1;
  if (v26 == RequestMessageBase.requestId.getter() && v27 == v28)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v30 & 1) == 0)
    {
      os_log_t v31 = v162;
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)static Logger.conversationBridge);
      uint64_t v33 = v31;
      swift_retain_n();
      uint64_t v34 = v33;
      uint64_t v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = swift_slowAlloc();
        uint64_t v38 = swift_slowAlloc();
        v164[0] = v38;
        *(_DWORD *)uint64_t v37 = 136315394;
        uint64_t v39 = RequestMessageBase.requestId.getter();
        v165[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, v164);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v37 + 12) = 2080;
        uint64_t v41 = *v25;
        unint64_t v42 = v25[1];
        swift_bridgeObjectRetain();
        v165[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, v164);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v35, v36, "PommesTRPCandidateMessage request ID %s does not match this turn's: %s. Dropping it on the floor.", (uint8_t *)v37, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v38, -1, -1);
        MEMORY[0x1BA9E48C0](v37, -1, -1);
LABEL_51:
        swift_release();

        return;
      }

LABEL_40:
      swift_release_n();
      return;
    }
  }
  uint64_t v47 = v161;
  Swift::Bool v48 = ConversationRequestProcessorTurnState.requestSupportedForOnDeviceExecution()();
  os_log_t v49 = v162;
  if (!v48)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v78 = type metadata accessor for Logger();
    __swift_project_value_buffer(v78, (uint64_t)static Logger.conversationBridge);
    unint64_t v79 = v49;
    swift_retain_n();
    uint64_t v80 = v79;
    uint64_t v81 = Logger.logObject.getter();
    os_log_type_t v82 = static os_log_type_t.error.getter();
    int v83 = v82;
    if (os_log_type_enabled(v81, v82))
    {
      uint64_t v84 = swift_slowAlloc();
      uint64_t v158 = (void *)swift_slowAlloc();
      os_log_t v162 = (os_log_t)swift_slowAlloc();
      v165[0] = (uint64_t)v162;
      *(_DWORD *)uint64_t v84 = 138412546;
      LODWORD(v160) = v83;
      v164[0] = (uint64_t)v80;
      uint64_t v85 = v80;
      os_log_t v159 = v81;
      uint64_t v86 = v47;
      os_log_type_t v87 = v85;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      unint64_t v88 = v158;
      *uint64_t v158 = v80;

      *(_WORD *)(v84 + 12) = 2080;
      uint64_t v89 = v86 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v89, v3);
      uint64_t v90 = RequestType.rawValue.getter();
      unint64_t v92 = v91;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      uint64_t v163 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v92, v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_t v93 = v159;
      _os_log_impl(&dword_1B9C64000, v159, (os_log_type_t)v160, "%@ is not supported for this requestType: %s", (uint8_t *)v84, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v88, -1, -1);
      os_log_t v94 = v162;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v94, -1, -1);
      MEMORY[0x1BA9E48C0](v84, -1, -1);
      swift_release();

      return;
    }

    goto LABEL_40;
  }
  uint64_t v50 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
  unint64_t v52 = v51;
  unint64_t v53 = (unint64_t *)(v47 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  unint64_t v54 = *v53;
  uint64_t v55 = (void *)v53[1];
  if (*v53 >> 62 == 1)
  {
    uint64_t v57 = *(void *)((v54 & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
    unint64_t v56 = *(void *)((v54 & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
    if ((v57 != v50 || v56 != v52) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v105 = one-time initialization token for conversationBridge;
      swift_bridgeObjectRetain();
      if (v105 != -1) {
        swift_once();
      }
      uint64_t v106 = type metadata accessor for Logger();
      __swift_project_value_buffer(v106, (uint64_t)static Logger.conversationBridge);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      os_log_type_t v107 = Logger.logObject.getter();
      os_log_type_t v108 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v107, v108))
      {
        uint64_t v109 = v50;
        uint64_t v110 = swift_slowAlloc();
        unint64_t v111 = v52;
        uint64_t v112 = swift_slowAlloc();
        v165[0] = v112;
        *(_DWORD *)uint64_t v110 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v163 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v56, v165);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v110 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v163 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v111, v165);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B9C64000, v107, v108, "TRP already finalized (TRP ID: %s).. Not handling PommesTRPCandidateMessage for TRP ID: %s", (uint8_t *)v110, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v112, -1, -1);
        MEMORY[0x1BA9E48C0](v110, -1, -1);
        swift_release();
      }
      else
      {

        swift_release();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      return;
    }
  }
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(v54, v55);
  unint64_t v58 = (Swift::String *)ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(v50, v52, v54, v55);
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v54, v55);
  if (!v58)
  {
    uint64_t v95 = v50;
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v96 = type metadata accessor for Logger();
    __swift_project_value_buffer(v96, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v97 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v97))
    {
      unint64_t v98 = (uint8_t *)swift_slowAlloc();
      uint64_t v99 = swift_slowAlloc();
      v165[0] = v99;
      *(_DWORD *)unint64_t v98 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v163 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v52, v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v35, v97, "Received PommesTRPCandidateMessage before TRP state is created for TRP ID: %s ..this may happen if no ASR or text input message was received before the Pommes output message is received from the message bus.", v98, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v99, -1, -1);
      MEMORY[0x1BA9E48C0](v98, -1, -1);
      goto LABEL_51;
    }

    swift_bridgeObjectRelease_n();
    goto LABEL_62;
  }
  uint64_t v151 = v50;
  char v59 = (*(uint64_t (**)(void))(v58->_countAndFlagsBits + 400))();
  if (ResultCandidateProcessingStatus.rawValue.getter(v59) == 0x64656C65636E6163 && v60 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
LABEL_46:
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v100 = type metadata accessor for Logger();
    __swift_project_value_buffer(v100, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v101 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v35, v101))
    {
      uint64_t v102 = (uint8_t *)swift_slowAlloc();
      uint64_t v103 = swift_slowAlloc();
      v165[0] = v103;
      *(_DWORD *)uint64_t v102 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v163 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v151, v52, v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      os_log_type_t v104 = "TRP ID: %s has already been cancelled. Not handling PommesTRPCandidateMessage any further";
LABEL_50:
      _os_log_impl(&dword_1B9C64000, v35, v101, v104, v102, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v103, -1, -1);
      MEMORY[0x1BA9E48C0](v102, -1, -1);
      swift_release();
      goto LABEL_51;
    }
    goto LABEL_61;
  }
  char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v62) {
    goto LABEL_46;
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v63 = type metadata accessor for Logger();
  uint64_t v64 = __swift_project_value_buffer(v63, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  unint64_t v65 = Logger.logObject.getter();
  os_log_type_t v66 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v65, v66))
  {
    uint64_t v67 = swift_slowAlloc();
    uint64_t v150 = v64;
    uint64_t v68 = (uint8_t *)v67;
    uint64_t v148 = swift_slowAlloc();
    v165[0] = v148;
    *(_DWORD *)uint64_t v68 = 136315138;
    uint64_t v147 = v68 + 4;
    uint64_t countAndFlagsBits = v58->_countAndFlagsBits;
    id v149 = (id)v52;
    unint64_t v70 = *(uint64_t (**)(uint64_t))(countAndFlagsBits + 800);
    uint64_t v71 = swift_retain();
    uint64_t v72 = v70(v71);
    os_log_type_t v73 = v58;
    unint64_t v75 = v74;
    swift_release();
    uint64_t v163 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v75, v165);
    uint64_t v64 = v150;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    unint64_t v58 = v73;
    unint64_t v52 = (unint64_t)v149;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v65, v66, "Received PommesTRPCandidateMessage when TRP state: %s", v68, 0xCu);
    uint64_t v76 = v148;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v76, -1, -1);
    MEMORY[0x1BA9E48C0](v68, -1, -1);
  }
  else
  {

    uint64_t v77 = swift_release_n();
  }
  uint64_t v113 = (*(uint64_t (**)(uint64_t))(v58->_countAndFlagsBits + 376))(v77);
  swift_release();
  if (v113)
  {
    swift_bridgeObjectRetain();
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v101 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v101))
    {
      uint64_t v102 = (uint8_t *)swift_slowAlloc();
      uint64_t v103 = swift_slowAlloc();
      v165[0] = v103;
      *(_DWORD *)uint64_t v102 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v163 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v151, v52, v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      os_log_type_t v104 = "Already received PommesTRPCandidateMessage for this TRP ID: %s . Did Pommes post multiple PommesTRPCandidat"
             "eMessage's with the same trpId?";
      goto LABEL_50;
    }
LABEL_61:

    swift_bridgeObjectRelease_n();
    swift_release();
LABEL_62:
    swift_release();
    return;
  }
  PommesTRPCandidateMessage.pommesResult.getter();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v150 = v64;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v116 = v153;
    uint64_t v115 = v154;
    os_log_t v117 = v159;
    (*(void (**)(os_log_t, void **, uint64_t))(v153 + 32))(v159, v18, v154);
    uint64_t v118 = 0;
    uint64_t v119 = 0;
  }
  else
  {
    uint64_t v119 = *v18;
    uint64_t v118 = 1;
    uint64_t v116 = v153;
    uint64_t v115 = v154;
    os_log_t v117 = v159;
  }
  (*(void (**)(os_log_t, uint64_t, uint64_t, uint64_t))(v116 + 56))(v117, v118, 1, v115);
  uint64_t v120 = v155;
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v117, v155, &demangling cache variable for type metadata for PommesError?);
  id v149 = v119;
  uint64_t v121 = (uint64_t)v156;
  PommesTRPCandidateMessage.searchReason.getter();
  uint64_t v122 = type metadata accessor for PommesSearchReason();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v122 - 8) + 56))(v121, 0, 1, v122);
  type metadata accessor for PommesInfo(0);
  uint64_t v123 = swift_allocObject();
  *(void *)(v123 + 16) = v119;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v120, v123 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesError, &demangling cache variable for type metadata for PommesError?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v121, v123 + OBJC_IVAR____TtC14SiriKitRuntime10PommesInfo_pommesSearchReason, &demangling cache variable for type metadata for PommesSearchReason?);
  uint64_t v124 = (*(uint64_t (**)(uint64_t))(v58->_countAndFlagsBits + 384))(v123);
  uint64_t v125 = (*(uint64_t (**)(uint64_t))(v58->_countAndFlagsBits + 872))(v124);
  os_log_t v126 = v117;
  if (v125)
  {
    uint64_t v127 = v125;
    uint64_t v128 = PommesTRPCandidateMessage.tcuId.getter();
    (*(void (**)(uint64_t))(*(void *)v127 + 248))(v128);
    swift_release();
  }
  swift_bridgeObjectRetain();
  uint64_t v129 = Logger.logObject.getter();
  os_log_type_t v130 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v129, v130))
  {
    uint64_t v131 = (uint8_t *)swift_slowAlloc();
    uint64_t v132 = swift_slowAlloc();
    v165[0] = v132;
    *(_DWORD *)uint64_t v131 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v163 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v151, v52, v165);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v129, v130, "Cached Pommes output for TRP ID: %s", v131, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v132, -1, -1);
    MEMORY[0x1BA9E48C0](v131, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v133 = (uint64_t)v157;
  unint64_t v134 = (char *)v158;
  PommesTRPCandidateMessage.pommesResult.getter();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v135 = v152;
    uint64_t v136 = v153;
    uint64_t v137 = v154;
    (*(void (**)(char *, uint64_t, uint64_t))(v153 + 32))(v152, v133, v154);
    (*(void (**)(char *, char *, uint64_t))(v136 + 16))(v134, v135, v137);
    unint64_t v138 = Logger.logObject.getter();
    os_log_type_t v139 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v138, v139))
    {
      uint64_t v140 = (uint8_t *)swift_slowAlloc();
      os_log_t v162 = (os_log_t)swift_slowAlloc();
      v165[0] = (uint64_t)v162;
      *(_DWORD *)uint64_t v140 = 136315138;
      uint64_t v160 = (uint64_t)(v140 + 4);
      _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type PommesError and conformance PommesError, MEMORY[0x1E4FA23F8]);
      uint64_t v141 = Error.localizedDescription.getter();
      uint64_t v163 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v141, v142, v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v143 = *(void (**)(char *, uint64_t))(v136 + 8);
      v143((char *)v158, v137);
      _os_log_impl(&dword_1B9C64000, v138, v139, "Pommes encountered an error: %s", v140, 0xCu);
      os_log_t v144 = v162;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v144, -1, -1);
      MEMORY[0x1BA9E48C0](v140, -1, -1);

      v143(v135, v137);
    }
    else
    {

      uint64_t v145 = *(void (**)(char *, uint64_t))(v136 + 8);
      v145(v134, v137);
      v145(v135, v137);
    }
    os_log_t v126 = v159;
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v133, (uint64_t *)&demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  }
  int v146 = v149;
  ConversationRequestProcessor.maybeRunExecution(rcState:)(v58);

  swift_release();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v126, &demangling cache variable for type metadata for PommesError?);
}

void ConversationRequestProcessor.handleSpeechStopDetectedMessage(_:forTurn:withTRPCandidateState:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  swift_retain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    uint64_t v11 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    uint64_t v9 = *(void *)(a3 + 16);
    unint64_t v10 = *(void *)(a3 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v5, v6, "Not sending CommitResultCandidateId for TRP ID: %s yet: Will wait for TRPFinalized due to incomplete feature work.", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }
  else
  {

    swift_release();
  }
}

void ConversationRequestProcessor.handleAceRemoteExecutionContextUpdate(_:executionContext:reply:)(void *a1, uint64_t a2, void (*a3)(id, id), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v120 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v119 = (char *)&v112 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = type metadata accessor for SelectedUserAttributes();
  uint64_t v123 = *(void *)(v124 - 8);
  MEMORY[0x1F4188790](v124);
  uint64_t v118 = (char *)&v112 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SelectedUserAttributes?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v122 = (char *)&v112 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = type metadata accessor for UserID();
  uint64_t v127 = *(void *)(v128 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v128);
  uint64_t v121 = (char *)&v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  os_log_t v126 = (char *)&v112 - v16;
  uint64_t v17 = type metadata accessor for RequestType();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v125 = (char *)&v112 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v112 - v22;
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  uint64_t v26 = (char *)&v112 - v25;
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 592))(v24);
  if (v27)
  {
    uint64_t v117 = v9;
    uint64_t v131 = a1;
    uint64_t v129 = a3;
    uint64_t v130 = a4;
    os_log_t v132 = v27;
    uint64_t v28 = (char *)v27 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
    swift_beginAccess();
    uint64_t v116 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
    v116(v26, v28, v17);
    (*(void (**)(char *, void, uint64_t))(v18 + 104))(v23, *MEMORY[0x1E4FA2448], v17);
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, MEMORY[0x1E4FA2460]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v136[0] == (void)v134 && v136[1] == *((void *)&v134 + 1))
    {
      swift_bridgeObjectRelease_n();
      int v29 = *(void (**)(char *, uint64_t))(v18 + 8);
      v29(v23, v17);
      v29(v26, v17);
    }
    else
    {
      char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v35 = *(void (**)(char *, uint64_t))(v18 + 8);
      v35(v23, v17);
      v35(v26, v17);
      if ((v34 & 1) == 0) {
        goto LABEL_14;
      }
    }
    os_log_type_t v36 = (Class *)((char *)&v132->isa
                  + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    if (*v36 >> 62 != 1)
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v48 = type metadata accessor for Logger();
      __swift_project_value_buffer(v48, (uint64_t)static Logger.conversationBridge);
      os_log_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v49, v50))
      {
        unint64_t v51 = (uint8_t *)swift_slowAlloc();
        uint64_t v52 = swift_slowAlloc();
        v136[0] = v52;
        *(_DWORD *)unint64_t v51 = 136315138;
        *(void *)&long long v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000004CLL, 0x80000001BA066220, v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B9C64000, v49, v50, "%s", v51, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v52, -1, -1);
        MEMORY[0x1BA9E48C0](v51, -1, -1);
      }

      specialized static ConversationBridgeUtils.replyCommandIgnored(forCommand:errorCode:reason:replyHandler:)(v131, -1, 0xD00000000000004CLL, 0x80000001BA066220, v129);
LABEL_33:
      swift_release();
      return;
    }
LABEL_14:
    uint64_t v37 = v131;
    id v38 = objc_msgSend(v131, sel_executionContextUpdate);
    if (v38)
    {
      uint64_t v39 = v38;
      uint64_t v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v42 = v41;

      outlined init with copy of ReferenceResolutionClientProtocol?(v4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater, (uint64_t)&v134, &demangling cache variable for type metadata for ContextUpdating?);
      if (v135)
      {
        outlined init with take of ReferenceResolutionClientProtocol(&v134, (uint64_t)v136);
        type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSKeyedUnarchiver);
        static NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(_:)();
        if (v135)
        {
          type metadata accessor for ExecutionContextUpdate();
          if (swift_dynamicCast())
          {
            uint64_t v115 = (void *)v133;
            os_log_t v63 = v132;
            int v114 = ConversationRequestProcessorTurnState.isServerFallback.getter();
            v116(v125, v28, v17);
            uint64_t v64 = (void **)((char *)&v63->isa
                          + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo);
            swift_beginAccess();
            unint64_t v65 = (void (*)(char *, char *, uint64_t))*v64;
            os_log_type_t v66 = (uint64_t *)((char *)v63
                            + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
            swift_beginAccess();
            if ((unint64_t)*v66 >> 62 == 1)
            {
              uint64_t v67 = (*v66 & 0x3FFFFFFFFFFFFFFFLL) + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId;
              uint64_t v68 = v127;
              unint64_t v69 = *(void (**)(char *, uint64_t, uint64_t))(v127 + 16);
              uint64_t v116 = v65;
              unint64_t v70 = v121;
              uint64_t v71 = v128;
              v69(v121, v67, v128);
              uint64_t v72 = v70;
              unint64_t v65 = v116;
              (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v126, v72, v71);
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v126, v5 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionUserId, v128);
            }
            uint64_t v74 = v117;
            unint64_t v75 = v65;
            uint64_t v76 = *v66;
            if ((unint64_t)*v66 >> 62 == 1)
            {
              uint64_t v121 = (char *)v40;
              unint64_t v77 = v42;
              uint64_t v78 = *(void (**)(uint64_t))(*(void *)(v76 & 0x3FFFFFFFFFFFFFFFLL) + 760);
              uint64_t v79 = swift_retain();
              uint64_t v80 = (uint64_t)v122;
              v78(v79);
              swift_release();
              uint64_t v81 = v123;
              uint64_t v82 = v124;
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v123 + 48))(v80, 1, v124))
              {
                outlined destroy of ReferenceResolutionClientProtocol?(v80, &demangling cache variable for type metadata for SelectedUserAttributes?);
                char v83 = 0;
              }
              else
              {
                uint64_t v84 = v118;
                (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v118, v80, v82);
                outlined destroy of ReferenceResolutionClientProtocol?(v80, &demangling cache variable for type metadata for SelectedUserAttributes?);
                char v85 = SelectedUserAttributes.meetsUserSessionThreshold.getter();
                uint64_t v86 = v81;
                char v83 = v85;
                (*(void (**)(char *, uint64_t))(v86 + 8))(v84, v82);
              }
              unint64_t v42 = v77;
              uint64_t v40 = (uint64_t)v121;
              uint64_t v74 = v117;
            }
            else
            {
              char v83 = 0;
            }
            unint64_t v113 = v42;
            type metadata accessor for ConversationContextUpdateMetadata();
            uint64_t v87 = swift_allocObject();
            *(unsigned char *)(v87 + 16) = v114 & 1;
            (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v87 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType, v125, v17);
            *(void *)(v87 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo) = v65;
            (*(void (**)(uint64_t, char *, uint64_t))(v127 + 32))(v87 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId, v126, v128);
            *(unsigned char *)(v87 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) = 0;
            uint64_t v128 = v87;
            *(unsigned char *)(v87
                     + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_meetsUserSessionThreshold) = v83 & 1;
            unint64_t v88 = v115;
            uint64_t v89 = ContextUpdateScope.toExecutionContextUpdateScope(isMUXEnabled:)(*(unsigned char *)(v5
                                                                                           + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled));
            if (one-time initialization token for conversationBridge != -1) {
              swift_once();
            }
            uint64_t v90 = type metadata accessor for Logger();
            __swift_project_value_buffer(v90, (uint64_t)static Logger.conversationBridge);
            unint64_t v91 = Logger.logObject.getter();
            os_log_type_t v92 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v91, v92))
            {
              os_log_t v93 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)os_log_t v93 = 0;
              _os_log_impl(&dword_1B9C64000, v91, v92, "Submitting context update obtained from remote companion device", v93, 2u);
              MEMORY[0x1BA9E48C0](v93, -1, -1);
            }

            uint64_t v94 = v137;
            uint64_t v95 = v138;
            __swift_project_boxed_opaque_existential_1(v136, v137);
            (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 8))(v88, v128, v89, v94, v95);
            uint64_t v96 = Logger.logObject.getter();
            os_log_type_t v97 = static os_log_type_t.debug.getter();
            BOOL v98 = os_log_type_enabled(v96, v97);
            uint64_t v99 = v129;
            if (v98)
            {
              uint64_t v100 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v100 = 0;
              _os_log_impl(&dword_1B9C64000, v96, v97, "Successfully applied remote context update", v100, 2u);
              MEMORY[0x1BA9E48C0](v100, -1, -1);
            }

            os_log_type_t v101 = v131;
            if (v99)
            {
              id v102 = objc_allocWithZone(MEMORY[0x1E4F965B8]);
              swift_retain();
              id v103 = objc_msgSend(v102, sel_init);
              os_log_type_t v104 = v119;
              UUID.init()();
              uint64_t v105 = UUID.uuidString.getter();
              uint64_t v107 = v106;
              (*(void (**)(char *, uint64_t))(v120 + 8))(v104, v74);
              os_log_type_t v108 = (void *)MEMORY[0x1BA9E2DD0](v105, v107);
              swift_bridgeObjectRelease();
              objc_msgSend(v103, sel_setAceId_, v108);

              id v109 = v103;
              id v110 = objc_msgSend(v101, sel_aceId);
              objc_msgSend(v109, sel_setRefId_, v110);

              id v111 = v109;
              v99(v109, 0);

              _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)v99);
            }
            outlined consume of Data._Representation(v40, v113);

            swift_release();
LABEL_22:
            swift_release();
            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v136);
            return;
          }
          uint64_t v73 = v40;
        }
        else
        {
          uint64_t v73 = v40;
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v134, (uint64_t *)&demangling cache variable for type metadata for Any?);
        }
        if (one-time initialization token for conversationBridge != -1) {
          swift_once();
        }
        uint64_t v43 = type metadata accessor for Logger();
        __swift_project_value_buffer(v43, (uint64_t)static Logger.conversationBridge);
        os_log_type_t v44 = Logger.logObject.getter();
        os_log_type_t v45 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v44, v45))
        {
          os_log_t v46 = (uint8_t *)swift_slowAlloc();
          uint64_t v47 = swift_slowAlloc();
          *(void *)&long long v134 = v47;
          *(_DWORD *)os_log_t v46 = 136315138;
          uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000002CLL, 0x80000001BA0661F0, (uint64_t *)&v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1B9C64000, v44, v45, "%s", v46, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v47, -1, -1);
          MEMORY[0x1BA9E48C0](v46, -1, -1);
        }

        specialized static ConversationBridgeUtils.replyCommandFailed(forCommand:errorCode:reason:replyHandler:)(v131, -1, 0xD00000000000002CLL, 0x80000001BA0661F0, v129, v130);
        outlined consume of Data._Representation(v73, v42);
        goto LABEL_22;
      }
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v134, &demangling cache variable for type metadata for ContextUpdating?);
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v58 = type metadata accessor for Logger();
      __swift_project_value_buffer(v58, (uint64_t)static Logger.conversationBridge);
      char v59 = Logger.logObject.getter();
      os_log_type_t v60 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v61 = (uint8_t *)swift_slowAlloc();
        uint64_t v62 = swift_slowAlloc();
        v136[0] = v62;
        *(_DWORD *)uint64_t v61 = 136315138;
        *(void *)&long long v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000033, 0x80000001BA0661B0, v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B9C64000, v59, v60, "%s", v61, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v62, -1, -1);
        MEMORY[0x1BA9E48C0](v61, -1, -1);
      }

      specialized static ConversationBridgeUtils.replyCommandFailed(forCommand:errorCode:reason:replyHandler:)(v131, -1, 0xD000000000000033, 0x80000001BA0661B0, v129, v130);
      outlined consume of Data._Representation(v40, v42);
    }
    else
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v53 = type metadata accessor for Logger();
      __swift_project_value_buffer(v53, (uint64_t)static Logger.conversationBridge);
      unint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v54, v55))
      {
        unint64_t v56 = (uint8_t *)swift_slowAlloc();
        uint64_t v57 = swift_slowAlloc();
        v136[0] = v57;
        *(_DWORD *)unint64_t v56 = 136315138;
        *(void *)&long long v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000004CLL, 0x80000001BA066160, v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B9C64000, v54, v55, "%s", v56, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v57, -1, -1);
        MEMORY[0x1BA9E48C0](v56, -1, -1);
      }

      specialized static ConversationBridgeUtils.replyCommandFailed(forCommand:errorCode:reason:replyHandler:)(v37, -1, 0xD00000000000004CLL, 0x80000001BA066160, v129, v130);
    }
    goto LABEL_33;
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.conversationBridge);
  os_log_t v132 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v132, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl(&dword_1B9C64000, v132, v31, "Ignoring RemoteExecutionContextUpdate as we are not in a turn.", v32, 2u);
    MEMORY[0x1BA9E48C0](v32, -1, -1);
  }
  os_log_t v33 = v132;
}

uint64_t ConversationRequestProcessor.handleFlowOutputResponseMessage(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  id v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v20 = v2;
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v22 = v4;
    id v23 = v9;
    uint64_t v14 = (void *)v13;
    uint64_t v21 = v7;
    *(_DWORD *)uint64_t v12 = 138412290;
    id v15 = v9;
    uint64_t v7 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v9;

    uint64_t v2 = v20;
    _os_log_impl(&dword_1B9C64000, v10, v11, "ExecutionBridge received message: %@", v12, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v16 = v14;
    uint64_t v4 = v22;
    MEMORY[0x1BA9E48C0](v16, -1, -1);
    MEMORY[0x1BA9E48C0](v12, -1, -1);
  }
  else
  {
  }
  uint64_t v17 = *(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionOutputSubmitter);
  FlowOutputResponseMessage.outputId.getter();
  uint64_t v18 = (void *)FlowOutputResponseMessage.commandResult.getter();
  (*(void (**)(char *, void *, void))(*(void *)v17 + 312))(v7, v18, 0);

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t closure #1 in closure #1 in ConversationRequestProcessor.submit(executionOutput:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[13] = v12;
  v8[14] = v13;
  v8[11] = a7;
  v8[12] = a8;
  v8[9] = a5;
  v8[10] = a6;
  v8[8] = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v9 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in ConversationRequestProcessor.submit(executionOutput:completion:), v9, 0);
}

uint64_t closure #1 in closure #1 in ConversationRequestProcessor.submit(executionOutput:completion:)()
{
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void **)(v0 + 64);
  uint64_t v4 = *(void *)((char *)v3 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil);
  uint64_t v5 = (unsigned int *)(*(void *)(v0 + 72)
                      + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter);
  swift_beginAccess();
  (*(void (**)(void, uint64_t, BOOL, void, void, void, void, uint64_t))(*(void *)v4 + 160))(*v5, 1, v2 != 0, v3[8], v3[9], v3[10], v3[11], v1);
  if (__OFADD__(*v5, 1))
  {
    __break(1u);
    goto LABEL_12;
  }
  ++*v5;
  if (v2)
  {
    if (one-time initialization token for insightRequestSummaryLogger == -1)
    {
LABEL_4:
      uint64_t v6 = *(void **)(v0 + 88);
      uint64_t v7 = *(Swift::String **)(v0 + 64);
      uint64_t v8 = type metadata accessor for InsightRequestSummaryLogger();
      uint64_t v9 = __swift_project_value_buffer(v8, (uint64_t)static Logger.insightRequestSummaryLogger);
      swift_retain();
      specialized InsightRequestSummaryLogger.emitDebug(_:)(v9, v7, (uint64_t)v6);
      goto LABEL_8;
    }
LABEL_12:
    swift_once();
    goto LABEL_4;
  }
  if (one-time initialization token for insightRequestSummaryLogger != -1) {
    swift_once();
  }
  uint64_t v10 = *(void **)(v0 + 88);
  uint64_t v11 = *(Swift::String **)(v0 + 64);
  uint64_t v12 = type metadata accessor for InsightRequestSummaryLogger();
  uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static Logger.insightRequestSummaryLogger);
  swift_retain();
  specialized InsightRequestSummaryLogger.emitDebug(_:)(v13, v11, (uint64_t)v10);
LABEL_8:
  uint64_t v14 = *(void *)(v0 + 112);
  id v15 = *(void (**)(uint64_t, uint64_t))(v0 + 96);
  uint64_t v16 = *(void *)(v0 + 80);

  swift_release();
  v15(v14, v16);
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

void ConversationRequestProcessor.close(withExecutionOutput:)(void *a1)
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  id v3 = a1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v12 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    id v8 = objc_msgSend(v3, sel_debugDescription);
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v11 = v10;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v4, v5, "<<<--- %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v7, -1, -1);
    MEMORY[0x1BA9E48C0](v6, -1, -1);
  }
  else
  {
  }
  ConversationRequestProcessor.closeInternal(_:_:_:)((char *)v3, 0, 0, 0);
}

void ConversationRequestProcessor.close(withExecutionOutput:errorString:)(void *a1, uint64_t a2, unint64_t a3)
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationBridge);
  id v6 = a1;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v22 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    id v11 = objc_msgSend(v6, sel_debugDescription);
    uint64_t v12 = v6;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    uint64_t v16 = v13;
    id v6 = v12;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v7, v8, "<<<--- %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v10, -1, -1);
    MEMORY[0x1BA9E48C0](v9, -1, -1);
  }
  else
  {
  }
  swift_bridgeObjectRetain_n();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v22 = v20;
    *(_DWORD *)uint64_t v19 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v17, v18, "There was an error while running execution: %s", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v20, -1, -1);
    MEMORY[0x1BA9E48C0](v19, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  ConversationRequestProcessor.closeInternal(_:_:_:)((char *)v6, a2, a3, 0);
}

void ConversationRequestProcessor.close(withExecutionOutput:errorString:shouldFailRequest:)(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  id v9 = a1;
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v20 = v18;
    *(_DWORD *)uint64_t v12 = 136315138;
    uint64_t v13 = a3;
    id v14 = objc_msgSend(v9, sel_debugDescription);
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    char v19 = a4;
    unint64_t v17 = v16;

    a3 = v13;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    a4 = v19;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v10, v11, "<<<--- %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v18, -1, -1);
    MEMORY[0x1BA9E48C0](v12, -1, -1);
  }
  else
  {
  }
  ConversationRequestProcessor.closeInternal(_:_:_:)((char *)v9, a2, a3, a4 & 1);
}

void ConversationRequestProcessor.fallbackToServer(forResultCandidateId:serverFallbackReason:)()
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationBridge);
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1B9C64000, oslog, v1, "Execution cannot fallback to server since it is not implemented", v2, 2u);
    MEMORY[0x1BA9E48C0](v2, -1, -1);
  }
}

Swift::Void __swiftcall ConversationRequestProcessor.fallbackToInfoDomainResults(forResultCandidateId:)(Swift::String_optional forResultCandidateId)
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.conversationBridge);
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    id v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v3 = 0;
    _os_log_impl(&dword_1B9C64000, oslog, v2, "Execution cannot fallback to info domain results since it is not implemented", v3, 2u);
    MEMORY[0x1BA9E48C0](v3, -1, -1);
  }
}

void ConversationRequestProcessor.fetchSpeechInfo(reply:)(void (*a1)(id))
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 592))();
  if (v3)
  {
    uint64_t v4 = (void *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    if (*v4 >> 62 == 1)
    {
      uint64_t v5 = (void *)v4[1];
      if (v5)
      {
        id v6 = objc_allocWithZone(MEMORY[0x1E4F4E5E8]);
        id v7 = v5;
        id v8 = objc_msgSend(v6, sel_initWithSpeechRecognizedCommand_, v7);
        if (one-time initialization token for conversationBridge != -1) {
          swift_once();
        }
        uint64_t v9 = type metadata accessor for Logger();
        __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
        id v10 = v8;
        os_log_type_t v11 = Logger.logObject.getter();
        os_log_type_t v12 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v11, v12))
        {
          id v28 = v8;
          uint64_t v13 = (uint8_t *)swift_slowAlloc();
          id v27 = v7;
          uint64_t v14 = swift_slowAlloc();
          *(_DWORD *)uint64_t v13 = 136315138;
          uint64_t v29 = v14;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AFSpeechInfo?);
          uint64_t v15 = Optional.debugDescription.getter();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v29);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v11, v12, "Replying with speechInfo: %s", v13, 0xCu);
          swift_arrayDestroy();
          uint64_t v17 = v14;
          id v7 = v27;
          MEMORY[0x1BA9E48C0](v17, -1, -1);
          uint64_t v18 = v13;
          id v8 = v28;
          MEMORY[0x1BA9E48C0](v18, -1, -1);
        }
        else
        {
        }
        a1(v8);
        swift_release();
      }
      else
      {
        if (one-time initialization token for conversationBridge != -1) {
          swift_once();
        }
        uint64_t v23 = type metadata accessor for Logger();
        __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationBridge);
        uint64_t v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v24, v25))
        {
          uint64_t v26 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v26 = 0;
          _os_log_impl(&dword_1B9C64000, v24, v25, "Cannot fetch speechInfo since SpeechRecognized is nil", v26, 2u);
          MEMORY[0x1BA9E48C0](v26, -1, -1);
        }

        a1(0);
        swift_release();
      }
      return;
    }
    swift_release();
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.conversationBridge);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl(&dword_1B9C64000, v20, v21, "Cannot fetch speechInfo before endpointing", v22, 2u);
    MEMORY[0x1BA9E48C0](v22, -1, -1);
  }

  a1(0);
}

uint64_t ConversationRequestProcessor.getRecentDialogs()()
{
  return (*(uint64_t (**)(void))(**(void **)(v0
                                            + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_recentDialogTracker)
                              + 264))();
}

uint64_t closure #1 in ConversationRequestProcessor.flowPluginWillExecute(flowPluginInfo:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v6 - 8);
  id v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *MEMORY[0x1E4FA2328];
  uint64_t v10 = type metadata accessor for MessageSource();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  FlowPluginInfoMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  FlowPluginInfoMessage.Builder.assistantId.setter();
  uint64_t v12 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v5, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v5, 0, 1, v13);
  FlowPluginInfoMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  FlowPluginInfoMessage.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  FlowPluginInfoMessage.Builder.resultCandidateId.setter();
  FlowPluginInfoMessage.Builder.supportsOnDeviceNL.setter();
  return FlowPluginInfoMessage.Builder.isPersonalRequest.setter();
}

void closure #2 in ConversationRequestProcessor.flowPluginWillExecute(flowPluginInfo:)(uint64_t a1, void *a2)
{
}

uint64_t ConversationRequestProcessor.willExecute(executionInputInfo:)()
{
  return (*(uint64_t (**)(void))(**(void **)(v0
                                            + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_selfReflectionAgent)
                              + 400))();
}

uint64_t ConversationRequestProcessor.getSelfReflectionDecision()@<X0>(unsigned char *a1@<X8>)
{
  (*(void (**)(void *__return_ptr))(**(void **)(v1
                                                             + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_selfReflectionAgent)
                                               + 320))(v5);
  char v3 = v5[0];
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t ConversationRequestProcessor.submitExternalActivationRequest(withRequestInfo:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1B9C64000, v9, v10, "Submitting an External activation request", v11, 2u);
    MEMORY[0x1BA9E48C0](v11, -1, -1);
  }

  uint64_t v12 = *(void **)(v4 + 16);
  uint64_t result = (uint64_t)objc_msgSend(v12, sel_respondsToSelector_, sel_submitExternalActivationRequest_completion_);
  if (result)
  {
    v15[4] = a2;
    void v15[5] = a3;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 1107296256;
    v15[2] = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
    v15[3] = &block_descriptor_8;
    uint64_t v14 = _Block_copy(v15);
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    objc_msgSend(v12, sel_submitExternalActivationRequest_completion_, a1, v14);
    _Block_release(v14);
    return swift_unknownObjectRelease();
  }
  return result;
}

void ConversationRequestProcessor.postToMessageBus(message:completion:)(void *a1, void (*a2)(uint64_t, void))
{
  uint64_t v3 = v2;
  type metadata accessor for RequestMessageBase();
  if (swift_dynamicCastClass())
  {
    id v23 = a1;
    if (RequestMessageBase.requestId.getter() == v3[8] && v6 == v3[9])
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) == 0)
      {
        if (one-time initialization token for conversationBridge != -1) {
          swift_once();
        }
        uint64_t v9 = type metadata accessor for Logger();
        __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
        os_log_type_t v10 = Logger.logObject.getter();
        os_log_type_t v11 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v10, v11))
        {
          uint64_t v12 = (uint8_t *)swift_slowAlloc();
          uint64_t v13 = swift_slowAlloc();
          uint64_t v24 = v13;
          *(_DWORD *)uint64_t v12 = 136315138;
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000001BA064B90, &v24);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1B9C64000, v10, v11, "Skipping: %s,  Message requestId doesn't match current requestId", v12, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v13, -1, -1);
          MEMORY[0x1BA9E48C0](v12, -1, -1);
        }

        a2(0, 0);
        return;
      }
    }
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.conversationBridge);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_1B9C64000, v20, v21, "Posting message received from Flow", v22, 2u);
      MEMORY[0x1BA9E48C0](v22, -1, -1);
    }

    __swift_project_boxed_opaque_existential_1(v3 + 3, v3[6]);
    dispatch thunk of MessagePublishing.postMessage(_:)();
    a2(1, 0);
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      uint64_t v24 = v18;
      *(_DWORD *)uint64_t v17 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000001BA064B90, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v15, v16, "Skipping: %s,  Message from flow is not of type RequestMessageBase", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v18, -1, -1);
      MEMORY[0x1BA9E48C0](v17, -1, -1);
    }

    a2(0, 0);
  }
}

void ConversationRequestProcessor.closeInternal(_:_:_:)(char *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = (*(uint64_t (**)(void))(*v4 + 592))();
  swift_release();
  if (v10)
  {
    uint64_t v12 = *(void *)&a1[OBJC_IVAR___SKRExecutionOutput_executionRequestId];
    unint64_t v11 = *(void *)&a1[OBJC_IVAR___SKRExecutionOutput_executionRequestId + 8];
    uint64_t v14 = v5[8];
    unint64_t v13 = v5[9];
    BOOL v15 = v12 == v14 && v11 == v13;
    if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      os_log_type_t v16 = *(void (**)(char *, uint64_t, uint64_t, void))(*v5 + 1104);
      v16(a1, a2, a3, a4 & 1);
      return;
    }
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
    os_log_t oslog = a1;
    swift_retain();
    os_log_type_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v26 = v24;
      *(_DWORD *)uint64_t v23 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v21, v22, "Received close() for requestId:%s on ConversationRequestProcessor with requestId:%s .. ignoring.", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v24, -1, -1);
      MEMORY[0x1BA9E48C0](v23, -1, -1);

      return;
    }

    swift_release();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationBridge);
    os_log_t oslog = (os_log_t)Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_1B9C64000, oslog, v18, "Request already canceled. Not closing.", v19, 2u);
      MEMORY[0x1BA9E48C0](v19, -1, -1);
    }
  }
}

void ConversationRequestProcessor.synchronizedClose(_:_:_:)(void *a1, void *a2, void *a3, int a4)
{
  uint64_t v5 = v4;
  LODWORD(v138) = a4;
  os_log_type_t v139 = a3;
  long long v134 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for OSSignpostID?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v129 = (char *)&v123 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OSSignpostID();
  uint64_t v130 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  os_log_t v126 = (char *)&v123 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v11 - 8);
  unint64_t v13 = (char *)&v123 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for SelectedUserAttributes();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v125 = (char *)&v123 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SelectedUserAttributes?);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v128 = (char *)&v123 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v137 = type metadata accessor for UserID();
  uint64_t v136 = *(void *)(v137 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v137);
  uint64_t v127 = (char *)&v123 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  os_log_t v132 = (char *)&v123 - v21;
  uint64_t v22 = type metadata accessor for RequestType();
  uint64_t v141 = *(void *)(v22 - 8);
  uint64_t v142 = v22;
  MEMORY[0x1F4188790](v22);
  uint64_t v140 = (char *)&v123 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  uint64_t v25 = __swift_project_value_buffer(v24, (uint64_t)static Logger.conversationBridge);
  uint64_t v26 = a1;
  id v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  uint64_t v131 = v9;
  uint64_t v143 = v25;
  uint64_t v135 = v13;
  if (v29)
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    uint64_t v31 = swift_slowAlloc();
    uint64_t v133 = v5;
    uint64_t v124 = v31;
    uint64_t v148 = v31;
    *(_DWORD *)uint64_t v30 = 136315138;
    id v32 = objc_msgSend(v26, sel_debugDescription, v30 + 4);
    os_log_t v33 = v26;
    uint64_t v34 = v15;
    uint64_t v35 = v14;
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v38 = v37;

    uint64_t v39 = v36;
    uint64_t v14 = v35;
    uint64_t v15 = v34;
    uint64_t v26 = v33;
    v147[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v38, &v148);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v27, v28, "synchronizedClose with ExecutionOutput: %s", v30, 0xCu);
    uint64_t v40 = v124;
    swift_arrayDestroy();
    uint64_t v5 = v133;
    MEMORY[0x1BA9E48C0](v40, -1, -1);
    MEMORY[0x1BA9E48C0](v30, -1, -1);
  }
  else
  {
  }
  uint64_t v41 = (*(uint64_t (**)(void))(*v5 + 592))();
  if (!v41)
  {
    os_log_type_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v52 = 0;
      _os_log_impl(&dword_1B9C64000, v50, v51, "Ignoring synchronizedClosed as we are not in a turn", v52, 2u);
      MEMORY[0x1BA9E48C0](v52, -1, -1);
    }
LABEL_45:

    return;
  }
  uint64_t v42 = v41;
  if (v138)
  {
    uint64_t v43 = *(void **)((char *)v5
                   + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_requestDispatcherServiceHelper);
    uint64_t v44 = v5[11];
    uint64_t v141 = v5[10];
    os_log_type_t v45 = v134;
    specialized static ConversationBridgeUtils.failRequest(serviceHelper:executionRequestId:reason:)(v43, v141, v44, (uint64_t)v134, v139);
    os_log_t v46 = (uint64_t *)(v42 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    uint64_t v47 = *v46;
    BOOL v48 = (unint64_t)*v46 >> 62 == 1;
    uint64_t v124 = v42;
    if (v48)
    {
      uint64_t v49 = v47 & 0x3FFFFFFFFFFFFFFFLL;
      unint64_t v61 = *(void *)(v49 + 24);
      uint64_t v142 = *(void *)(v49 + 16);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v142 = 0;
      unint64_t v61 = 0xE000000000000000;
    }
    if (v139) {
      uint64_t v62 = v45;
    }
    else {
      uint64_t v62 = 0;
    }
    if (v139) {
      unint64_t v63 = (unint64_t)v139;
    }
    else {
      unint64_t v63 = 0xE000000000000000;
    }
    uint64_t v64 = v5[8];
    unint64_t v65 = v5[9];
    os_log_type_t v66 = *(void (**)(void *, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unint64_t))(**(void **)((char *)v5 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil) + 152);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v67 = v141;
    uint64_t v141 = v64;
    uint64_t v68 = v64;
    unint64_t v69 = v65;
    v66(v62, v63, v67, v44, v68, v65, v142, v61);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_retain_n();
    swift_bridgeObjectRetain();
    unint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v70, v71))
    {
      swift_release();
      swift_release_n();
      swift_bridgeObjectRelease_n();

      return;
    }
    uint64_t v72 = swift_slowAlloc();
    uint64_t v73 = swift_slowAlloc();
    v147[0] = v73;
    *(_DWORD *)uint64_t v72 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v146 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v141, v69, v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v72 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v146 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v142, v61, v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v70, v71, "Failed the request for requestId: %s for rcId : %s", (uint8_t *)v72, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v73, -1, -1);
    MEMORY[0x1BA9E48C0](v72, -1, -1);

    goto LABEL_43;
  }
  uint64_t v53 = v41 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v141 + 16))(v140, v53, v142);
  unint64_t v54 = (void **)(v42 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo);
  swift_beginAccess();
  os_log_type_t v139 = *v54;
  os_log_type_t v55 = (void *)(v42 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  if (*v55 >> 62 == 1)
  {
    uint64_t v56 = v136;
    uint64_t v57 = v127;
    uint64_t v58 = v137;
    (*(void (**)(char *, uint64_t, uint64_t))(v136 + 16))(v127, (*v55 & 0x3FFFFFFFFFFFFFFFLL) + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId, v137);
    char v59 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
    os_log_type_t v60 = v132;
    v59(v132, v57, v58);
  }
  else
  {
    os_log_type_t v60 = v132;
    (*(void (**)(char *, uint64_t, uint64_t))(v136 + 16))(v132, (uint64_t)v5 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionUserId, v137);
  }
  uint64_t v74 = v26;
  unint64_t v75 = *(uint64_t (**)(id))((*MEMORY[0x1E4FBC8C8] & *v26) + 0xB0);
  id v76 = v139;
  id v138 = v74;
  int v77 = v75(v76);
  char v78 = v77;
  long long v134 = v55;
  uint64_t v79 = *v55;
  if (*v55 >> 62 == 1)
  {
    LODWORD(v133) = v77;
    uint64_t v80 = *(void (**)(uint64_t))(*(void *)(v79 & 0x3FFFFFFFFFFFFFFFLL) + 760);
    uint64_t v81 = swift_retain();
    uint64_t v82 = (uint64_t)v128;
    v80(v81);
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v82, 1, v14))
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v82, &demangling cache variable for type metadata for SelectedUserAttributes?);
      char v83 = 0;
    }
    else
    {
      uint64_t v84 = v125;
      (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v125, v82, v14);
      outlined destroy of ReferenceResolutionClientProtocol?(v82, &demangling cache variable for type metadata for SelectedUserAttributes?);
      char v83 = SelectedUserAttributes.meetsUserSessionThreshold.getter();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v84, v14);
    }
    char v78 = (char)v133;
  }
  else
  {
    char v83 = 0;
  }
  type metadata accessor for ConversationContextUpdateMetadata();
  uint64_t v85 = swift_allocObject();
  *(unsigned char *)(v85 + 16) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v141 + 32))(v85 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType, v140, v142);
  *(void *)(v85 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo) = v139;
  (*(void (**)(uint64_t, char *, uint64_t))(v136 + 32))(v85 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId, v60, v137);
  *(unsigned char *)(v85 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) = v78 & 1;
  *(unsigned char *)(v85 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_meetsUserSessionThreshold) = v83 & 1;
  uint64_t v86 = *(void *)((char *)v5 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_asyncWork);
  uint64_t v87 = type metadata accessor for TaskPriority();
  uint64_t v88 = (uint64_t)v135;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 56))(v135, 1, 1, v87);
  uint64_t v89 = one-time initialization token for shared;
  id v90 = v138;
  swift_retain();
  swift_retain();
  swift_retain();
  if (v89 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v91 = static MessageBusActor.shared;
  uint64_t v92 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  os_log_t v93 = (void *)swift_allocObject();
  v93[2] = v91;
  v93[3] = v92;
  v93[4] = v5;
  v93[5] = v90;
  v93[6] = v85;
  v93[7] = v42;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v88, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:), (uint64_t)v93);
  (*(void (**)(void))(*(void *)v86 + 120))();
  swift_release();
  uint64_t v94 = *v134;
  if (*v134 >> 62 != 1)
  {
    os_log_type_t v50 = Logger.logObject.getter();
    os_log_type_t v111 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v111))
    {
      uint64_t v112 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v112 = 0;
      _os_log_impl(&dword_1B9C64000, v50, v111, "Close called before an RC was selected. Cannot send ResultCandidateSelected to server", v112, 2u);
      MEMORY[0x1BA9E48C0](v112, -1, -1);

      swift_release();
      swift_release();
      return;
    }
    swift_release();
    swift_release();
    goto LABEL_45;
  }
  os_log_t v132 = (char *)v85;
  uint64_t v124 = v42;
  uint64_t v95 = (void *)(v94 & 0x3FFFFFFFFFFFFFFFLL);
  uint64_t v96 = *(void (**)(uint64_t))(*(void *)(v94 & 0x3FFFFFFFFFFFFFFFLL) + 408);
  swift_retain();
  v96(9);
  uint64_t v97 = *(void *)((char *)v5 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil);
  uint64_t v98 = v5[10];
  unint64_t v99 = v5[11];
  uint64_t v101 = v5[8];
  unint64_t v100 = v5[9];
  uint64_t v133 = v5;
  uint64_t v102 = v95[2];
  uint64_t v103 = v95[3];
  os_log_type_t v104 = *(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(*(void *)v97 + 144);
  swift_bridgeObjectRetain();
  uint64_t v142 = v98;
  uint64_t v105 = v98;
  unint64_t v106 = v99;
  v104(v105, v99, v101, v100, v102, v103);
  uint64_t v107 = swift_bridgeObjectRelease();
  uint64_t v108 = (uint64_t)v129;
  (*(void (**)(uint64_t))(*v95 + 832))(v107);
  uint64_t v109 = v130;
  uint64_t v110 = v131;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v130 + 48))(v108, 1, v131) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v108, &demangling cache variable for type metadata for OSSignpostID?);
  }
  else
  {
    unint64_t v113 = v126;
    (*(void (**)(char *, uint64_t, uint64_t))(v109 + 32))(v126, v108, v110);
    static os_signpost_type_t.end.getter();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    os_signpost(_:dso:log:name:signpostID:)();
    (*(void (**)(char *, uint64_t))(v109 + 8))(v113, v110);
  }
  swift_retain_n();
  swift_retain_n();
  int v114 = Logger.logObject.getter();
  os_log_type_t v115 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v114, v115))
  {
    uint64_t v116 = swift_slowAlloc();
    uint64_t v145 = swift_slowAlloc();
    uint64_t v117 = v145;
    *(_DWORD *)uint64_t v116 = 136315650;
    swift_bridgeObjectRetain();
    uint64_t v144 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v100, &v145);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v116 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v144 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v142, v106, &v145);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v116 + 22) = 2080;
    uint64_t v118 = *(uint64_t (**)(uint64_t))(*v95 + 800);
    uint64_t v119 = swift_retain();
    uint64_t v120 = v118(v119);
    unint64_t v122 = v121;
    swift_release();
    uint64_t v144 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v120, v122, &v145);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B9C64000, v114, v115, "Done handling on-device request for requestId: %s, rootRequestId: %s for: %s", (uint8_t *)v116, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v117, -1, -1);
    MEMORY[0x1BA9E48C0](v116, -1, -1);

    swift_release();
    swift_release();
LABEL_43:
    swift_release();
    return;
  }
  swift_release();
  swift_release_n();
  swift_release_n();
  swift_release();
}

uint64_t closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[13] = a6;
  v7[14] = a7;
  v7[11] = a4;
  v7[12] = a5;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v8 = static MessageBusActor.shared;
  v7[15] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:), v8, 0);
}

uint64_t closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:)()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = static MessageBusActor.shared;
  *(void *)(v0 + 128) = static MessageBusActor.shared;
  uint64_t v3 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v0 + 136) = v4;
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v0 + 88);
  *(void *)(v4 + 32) = v1;
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
  *(void *)(v0 + 152) = v6;
  void *v5 = v0;
  v5[1] = closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:);
  return MEMORY[0x1F41880D8](v0 + 64, v2, v3, 0xD000000000000019, 0x80000001BA0664A0, partial apply for closure #1 in closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:), v4, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 120);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:), v1, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v19;
  void *v20;
  uint64_t v21;

  uint64_t v20 = v0;
  uint64_t v1 = (void *)v0[11];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[12];
  swift_release();
  uint64_t v4 = (void *)v0[8];
  uint64_t v5 = *(void *)((char *)v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil);
  uint64_t v6 = (unsigned int *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter);
  swift_beginAccess();
  (*(void (**)(void, uint64_t, BOOL, void, void, void, void, uint64_t))(*(void *)v5 + 160))(*v6, 1, v4 != 0, v1[8], v1[9], v1[10], v1[11], v3);
  if (__OFADD__(*v6, 1))
  {
    __break(1u);
  }
  else
  {
    ++*v6;
    if (one-time initialization token for conversationBridge == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
  uint64_t v8 = v4;
  uint64_t v9 = v4;
  uint64_t v10 = Logger.logObject.getter();
  uint64_t v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    unint64_t v13 = swift_slowAlloc();
    uint64_t v19 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    v0[9] = v4;
    uint64_t v14 = Optional.debugDescription.getter();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v10, v11, "Submitted FlowOutput with error: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v13, -1, -1);
    MEMORY[0x1BA9E48C0](v12, -1, -1);
  }
  else
  {
  }
  uint64_t v16 = v0[11];
  ConversationRequestProcessor.synchronizedCloseRequest()();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)v16 + 392))(1, 0, 3);

  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t closure #1 in closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v29 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Error?, Never>);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)((char *)a2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionOutputSubmitter);
  uint64_t v13 = a2[8];
  uint64_t v27 = a2[9];
  uint64_t v28 = v13;
  uint64_t v14 = a2[10];
  uint64_t v25 = a2[11];
  uint64_t v26 = v14;
  uint64_t v24 = (char *)a2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater;
  uint64_t v15 = a2[13];
  uint64_t v23 = a2[12];
  uint64_t v16 = (char *)a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v11, v16, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v11, 0, 1, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v29, v5);
  unint64_t v19 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v20 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v20 + v19, v8, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, void, uint64_t, uint64_t, uint64_t, char *, void, void, uint64_t (*)(int, void *), uint64_t))(*(void *)v12 + 296))(v30, v28, v27, v26, v25, v24, 0, v31, v23, v15, v11, 0, 0, partial apply for closure #1 in closure #1 in closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:), v20);
  swift_release();
  return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t closure #1 in closure #1 in closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:)(int a1, id a2)
{
  id v2 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Error?, Never>);
  return CheckedContinuation.resume(returning:)();
}

void ConversationRequestProcessor.commit(rcState:userInput:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v95 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = &v80[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for TTResponseMessage.MitigationDecision();
  uint64_t v97 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v88 = &v80[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (TTResponseMessage.MitigationDecision?, TTResponseMessage.MitigationDecision?));
  MEMORY[0x1F4188790](v91);
  uint64_t v11 = &v80[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v89 = &v80[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = &v80[-v16];
  MEMORY[0x1F4188790](v15);
  unint64_t v19 = &v80[-v18];
  (*(void (**)(uint64_t))(*(void *)v2 + 488))(1);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
  swift_retain();
  uint64_t v98 = v21;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  unint64_t v99 = v11;
  uint64_t v96 = v7;
  os_log_t v93 = v19;
  uint64_t v94 = v8;
  uint64_t v92 = v17;
  if (v24)
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    v101[0] = v26;
    *(_DWORD *)uint64_t v25 = 136315138;
    uint64_t v28 = a1[2];
    unint64_t v27 = a1[3];
    swift_bridgeObjectRetain();
    uint64_t v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_1B9C64000, v22, v23, "Attempting commit logic for RC ID: %s", v25, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v26, -1, -1);
    MEMORY[0x1BA9E48C0](v25, -1, -1);
  }
  else
  {
    swift_release();
  }

  uint64_t v29 = (*(uint64_t (**)(void))(*(void *)v3 + 384))();
  uint64_t v32 = v29;
  os_log_t v33 = v30;
  if (v31 == 2)
  {
    uint64_t v34 = a1[2];
    unint64_t v35 = a1[3];
    swift_bridgeObjectRetain_n();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    BOOL v38 = os_log_type_enabled(v36, v37);
    uint64_t v87 = v32;
    id v90 = v33;
    uint64_t v85 = v34;
    if (v38)
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      v101[0] = v40;
      *(_DWORD *)uint64_t v39 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v100 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v36, v37, "Calling CheckExecutionOverride for RC ID: %s", v39, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v40, -1, -1);
      uint64_t v41 = v39;
      os_log_t v33 = v90;
      MEMORY[0x1BA9E48C0](v41, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    uint64_t v45 = (*(uint64_t (**)(void))(*a1 + 864))();
    uint64_t v98 = v45;
    if (v45)
    {
      uint64_t v46 = (*(uint64_t (**)(void))(*(void *)v45 + 144))();
      if (v47) {
        uint64_t v48 = 0;
      }
      else {
        uint64_t v48 = v46;
      }
      uint64_t v84 = v48;
    }
    else
    {
      uint64_t v84 = 0;
    }
    uint64_t v49 = (char *)a1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId;
    os_log_type_t v50 = (uint64_t (**)(uint64_t))(*(void *)v3 + 1296);
    os_log_type_t v51 = *v50;
    uint64_t v52 = (*v50)((uint64_t)a1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId);
    if (v52)
    {
      uint64_t v83 = *(void *)(v52 + 16);
      swift_bridgeObjectRetain();
      swift_release();
    }
    else
    {
      uint64_t v83 = MEMORY[0x1E4FBC860];
    }
    uint64_t v53 = v51((uint64_t)v49);
    unint64_t v86 = v35;
    if (v53)
    {
      uint64_t v82 = *(void *)(v53 + 24);
      swift_bridgeObjectRetain();
      uint64_t v53 = swift_release();
    }
    else
    {
      uint64_t v82 = MEMORY[0x1E4FBC860];
    }
    int v81 = v33[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTriggerlessFollowup];
    uint64_t v54 = (uint64_t)v93;
    (*(void (**)(uint64_t))(*a1 + 544))(v53);
    uint64_t v55 = v97;
    uint64_t v56 = (uint64_t)v92;
    uint64_t v57 = v94;
    (*(void (**)(unsigned char *, void, uint64_t))(v97 + 104))(v92, *MEMORY[0x1E4FA2080], v94);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v55 + 56))(v56, 0, 1, v57);
    uint64_t v58 = (uint64_t)v99;
    uint64_t v59 = (uint64_t)&v99[*(int *)(v91 + 48)];
    os_log_type_t v60 = &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?;
    outlined init with copy of ReferenceResolutionClientProtocol?(v54, (uint64_t)v99, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    outlined init with copy of ReferenceResolutionClientProtocol?(v56, v59, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
    unint64_t v61 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
    if (v61(v58, 1, v57) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v56, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      outlined destroy of ReferenceResolutionClientProtocol?(v54, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      if (v61(v59, 1, v57) == 1)
      {
        char v62 = -1;
      }
      else
      {
        os_log_type_t v60 = (uint64_t *)&demangling cache variable for type metadata for (TTResponseMessage.MitigationDecision?, TTResponseMessage.MitigationDecision?);
        char v62 = 0;
      }
    }
    else
    {
      unint64_t v63 = v89;
      outlined init with copy of ReferenceResolutionClientProtocol?(v58, (uint64_t)v89, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
      if (v61(v59, 1, v57) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v56, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
        outlined destroy of ReferenceResolutionClientProtocol?(v54, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
        (*(void (**)(unsigned char *, uint64_t))(v97 + 8))(v63, v57);
        char v62 = 0;
        os_log_type_t v60 = (uint64_t *)&demangling cache variable for type metadata for (TTResponseMessage.MitigationDecision?, TTResponseMessage.MitigationDecision?);
      }
      else
      {
        uint64_t v64 = v97;
        unint64_t v65 = v63;
        os_log_type_t v66 = v88;
        (*(void (**)(unsigned char *, uint64_t, uint64_t))(v97 + 32))(v88, v59, v57);
        _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2(&lazy protocol witness table cache variable for type TTResponseMessage.MitigationDecision and conformance TTResponseMessage.MitigationDecision, MEMORY[0x1E4FA2088]);
        char v62 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v67 = *(void (**)(unsigned char *, uint64_t))(v64 + 8);
        v67(v66, v57);
        os_log_type_t v60 = &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?;
        outlined destroy of ReferenceResolutionClientProtocol?(v56, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
        outlined destroy of ReferenceResolutionClientProtocol?(v54, &demangling cache variable for type metadata for TTResponseMessage.MitigationDecision?);
        v67(v65, v57);
      }
    }
    uint64_t v68 = (uint64_t)v96;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v99, v60);
    type metadata accessor for ExecutionOverrideContext();
    uint64_t v69 = swift_allocObject();
    uint64_t v70 = v82;
    *(void *)(v69 + 16) = v83;
    *(void *)(v69 + 24) = v70;
    *(unsigned char *)(v69 + 32) = v81;
    *(unsigned char *)(v69 + 33) = v62 & 1;
    *(void *)(v69 + 40) = v84;
    *(unsigned char *)(v69 + 48) = 1;
    *(void *)(v69 + 56) = v95;
    uint64_t v71 = *(void *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_asyncWork);
    uint64_t v72 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 56))(v68, 1, 1, v72);
    uint64_t v73 = one-time initialization token for shared;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v74 = v87;
    swift_retain();
    unint64_t v75 = v86;
    if (v73 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v76 = static MessageBusActor.shared;
    uint64_t v77 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
    char v78 = (void *)swift_allocObject();
    v78[2] = v76;
    v78[3] = v77;
    uint64_t v79 = v85;
    uint64_t v78[4] = v3;
    v78[5] = v79;
    v78[6] = v75;
    v78[7] = v69;
    v78[8] = a1;
    v78[9] = v74;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v68, (uint64_t)&async function pointer to partial apply for closure #1 in ConversationRequestProcessor.commit(rcState:userInput:), (uint64_t)v78);
    (*(void (**)(void))(*(void *)v71 + 120))();
    swift_release();
    swift_release();

    swift_release();
    swift_release();
  }
  else
  {
    outlined consume of ConversationRequestProcessor.State(v29, v30, v31);
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl(&dword_1B9C64000, v42, v43, "Ignoring commit() call as we are not in a turn", v44, 2u);
      MEMORY[0x1BA9E48C0](v44, -1, -1);
    }
  }
}

uint64_t closure #1 in ConversationRequestProcessor.commit(rcState:userInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[11] = a8;
  v8[12] = v12;
  v8[9] = a6;
  v8[10] = a7;
  v8[7] = a4;
  v8[8] = a5;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v9 = static MessageBusActor.shared;
  v8[13] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](closure #1 in ConversationRequestProcessor.commit(rcState:userInput:), v9, 0);
}

uint64_t closure #1 in ConversationRequestProcessor.commit(rcState:userInput:)()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient + 24);
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient), v2);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionBridgeProcessorDelegate);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(*(void *)(v3 + 56)
                                                                                                  + **(int **)(v3 + 56));
  uint64_t v5 = (void *)swift_task_alloc();
  v0[14] = v5;
  void *v5 = v0;
  v5[1] = closure #1 in ConversationRequestProcessor.commit(rcState:userInput:);
  uint64_t v6 = v0[9];
  uint64_t v7 = v0[10];
  uint64_t v8 = v0[8];
  return v10(v8, v6, v7, v4, &protocol witness table for ConversationBridgeProcessorDelegate, v2, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  unsigned char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  Swift::String *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(void);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  uint64_t v29 = v0;
  uint64_t v1 = *(void *)(v0 + 120);
  swift_release();
  if (!v1)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
    uint64_t v15 = Logger.logObject.getter();
    uint64_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_1B9C64000, v15, v16, "Cannot act on execution override decision as ExecutionOverrideResult is nil", v17, 2u);
      MEMORY[0x1BA9E48C0](v17, -1, -1);
    }

    goto LABEL_13;
  }
  uint64_t v2 = one-time initialization token for conversationBridge;
  uint64_t v3 = *(id *)(v0 + 120);
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  uint64_t v5 = v3;
  uint64_t v6 = Logger.logObject.getter();
  uint64_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v28 = v9;
    *(_DWORD *)uint64_t v8 = 136315394;
    *(unsigned char *)(v0 + 128) = v5[OBJC_IVAR____TtC14SiriKitRuntime23ExecutionOverrideResult_type];
    uint64_t v10 = String.init<A>(describing:)();
    *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v8 + 12) = 2080;
    *(unsigned char *)(v0 + 129) = v5[OBJC_IVAR____TtC14SiriKitRuntime23ExecutionOverrideResult_decision];
    uint64_t v12 = String.init<A>(describing:)();
    *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v6, v7, "ExecutionOverride result type: %s decision: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v9, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  else
  {
  }
  unint64_t v19 = *(uint64_t **)(v0 + 88);
  uint64_t v18 = *(void *)(v0 + 96);
  uint64_t v20 = ExecutionOverrideType.asPreExecutionType()();
  uint64_t v21 = ExecutionOverrideDecision.asPreExecutionDecision()();
  uint64_t v22 = ConversationRequestProcessor.handledMitigation(rcState:turn:ruleType:ruleDecision:)(v19, v18, v20, v21);

  if ((v22 & 1) == 0)
  {
LABEL_13:
    uint64_t v5 = *(unsigned char **)(v0 + 120);
    os_log_type_t v23 = *(Swift::String **)(v0 + 88);
    uint64_t v25 = *(void *)(v0 + 64);
    BOOL v24 = *(void *)(v0 + 72);
    (*(void (**)(Swift::String *, void))(**(void **)(v0 + 56) + 1304))(v23, *(void *)(v0 + 96));
    ConversationRequestProcessor.sendCommitToExecution(_:_:)(v25, v24, v23);
  }

  uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
  return v26();
}

uint64_t closure #1 in ConversationRequestProcessor.commit(rcState:userInput:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 104);
  *(void *)(*(void *)v1 + 120) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in ConversationRequestProcessor.commit(rcState:userInput:), v2, 0);
}

Swift::Void __swiftcall ConversationRequestProcessor.handleRuntimeError(error:)(NSError *error)
{
  uint64_t v2 = v1;
  uint64_t v64 = error;
  uint64_t v63 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  char v62 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for RequestType();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  os_log_type_t v66 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  unint64_t v65 = (char *)&v59 - v9;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
  swift_retain();
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    aBlock[0] = v15;
    *(_DWORD *)uint64_t v14 = 136315394;
    uint64_t v59 = v6;
    uint64_t v60 = v3;
    uint64_t v61 = v11;
    uint64_t v17 = v2[8];
    unint64_t v16 = v2[9];
    swift_bridgeObjectRetain();
    uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v16, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    uint64_t v18 = v2[10];
    unint64_t v19 = v2[11];
    swift_bridgeObjectRetain();
    uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, aBlock);
    uint64_t v6 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    uint64_t v3 = v60;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v12, v13, "Handling Runtime error for requestId: %s, rootRequestId: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v15, -1, -1);
    MEMORY[0x1BA9E48C0](v14, -1, -1);
  }
  else
  {

    uint64_t v20 = swift_release();
  }
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(*v2 + 592))(v20);
  if (v21)
  {
    uint64_t v61 = v21;
    uint64_t v22 = v21 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
    swift_beginAccess();
    os_log_type_t v23 = v65;
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v65, v22, v5);
    BOOL v24 = v66;
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v66, *MEMORY[0x1E4FA2428], v5);
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2(&lazy protocol witness table cache variable for type RequestType and conformance RequestType, MEMORY[0x1E4FA2460]);
    LOBYTE(v22) = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v25 = *(void (**)(char *, uint64_t))(v6 + 8);
    v25(v24, v5);
    v25(v23, v5);
    if (v22)
    {
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v26, v27))
      {

        swift_release();
        return;
      }
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl(&dword_1B9C64000, v26, v27, "Understanding is running on server. Ignoring assistant_service crash", v28, 2u);
      MEMORY[0x1BA9E48C0](v28, -1, -1);
    }
    else
    {
      (*(void (**)(uint64_t, void, uint64_t))(*v2 + 392))(1, 0, 3);
      id v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F965A8]), sel_init);
      uint64_t v32 = v62;
      UUID.init()();
      uint64_t v33 = UUID.uuidString.getter();
      uint64_t v35 = v34;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v32, v63);
      uint64_t v36 = (void *)MEMORY[0x1BA9E2DD0](v33, v35);
      swift_bridgeObjectRelease();
      objc_msgSend(v31, sel_setAceId_, v36);

      uint64_t v37 = v2[10];
      uint64_t v38 = v2[11];
      id v39 = v31;
      uint64_t v40 = (void *)MEMORY[0x1BA9E2DD0](v37, v38);
      objc_msgSend(v39, sel_setRefId_, v40);

      id v41 = [(NSError *)v64 description];
      if (!v41)
      {
        uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v41 = (id)MEMORY[0x1BA9E2DD0](v42);
        swift_bridgeObjectRelease();
      }
      objc_msgSend(v39, sel_setReason_, v41);

      objc_msgSend(v39, sel_setErrorCode_, -[NSError code](v64, sel_code));
      id v43 = v39;
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = swift_slowAlloc();
        uint64_t v47 = swift_slowAlloc();
        aBlock[0] = v47;
        *(_DWORD *)uint64_t v46 = 136315394;
        id v48 = objc_msgSend(v43, sel_debugDescription);
        uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        os_log_type_t v50 = v2;
        unint64_t v52 = v51;

        uint64_t v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v52, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v46 + 12) = 2048;
        id v53 = objc_msgSend(v43, sel_errorCode);

        uint64_t v67 = (uint64_t)v53;
        uint64_t v2 = v50;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl(&dword_1B9C64000, v44, v45, "Sending %s, errorCode: %ld", (uint8_t *)v46, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v47, -1, -1);
        MEMORY[0x1BA9E48C0](v46, -1, -1);
      }
      else
      {
      }
      uint64_t v54 = (void *)v2[2];
      aBlock[4] = (uint64_t)closure #1 in ConversationRequestProcessor.handleRuntimeError(error:);
      aBlock[5] = 0;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
      aBlock[3] = (uint64_t)&block_descriptor_19;
      uint64_t v55 = _Block_copy(aBlock);
      uint64_t v26 = v43;
      objc_msgSend(v54, sel_handleCommand_completion_, v26, v55);
      _Block_release(v55);

      uint64_t v56 = (unint64_t *)(v61
                               + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
      swift_beginAccess();
      unint64_t v58 = *v56;
      uint64_t v57 = (void *)v56[1];
      outlined copy of ConversationRequestProcessorTurnState.SpeechState(v58, v57);
      ConversationRequestProcessorTurnState.SpeechState.cancelAll(exceptResultCandidateId:)((Swift::String_optional)0);
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v58, v57);
    }
    swift_release();
  }
  else
  {
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl(&dword_1B9C64000, v26, v29, "Not handling runtime error since request has already been cancelled", v30, 2u);
      MEMORY[0x1BA9E48C0](v30, -1, -1);
    }
  }
}

void closure #1 in ConversationRequestProcessor.handleRuntimeError(error:)(uint64_t a1, void *a2)
{
}

uint64_t ConversationRequestProcessor.acquireConversationUserInput(forUserId:requestId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v12 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000038, 0x80000001BA064A00, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v7, v8, "%s not implemented yet", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v10, -1, -1);
    MEMORY[0x1BA9E48C0](v9, -1, -1);
  }

  return a5(0);
}

void ConversationRequestProcessor.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(NSObject *a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, void (*a7)(void), uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v54 = a3;
  os_log_t v55 = a1;
  uint64_t v16 = type metadata accessor for UserID();
  uint64_t v51 = *(void *)(v16 - 8);
  uint64_t v52 = v16;
  MEMORY[0x1F4188790](v16);
  os_log_type_t v50 = (char *)v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v53 = a5;
  if (v22)
  {
    uint64_t v23 = swift_slowAlloc();
    v47[1] = v19;
    uint64_t v24 = v23;
    uint64_t v25 = swift_slowAlloc();
    uint64_t v57 = v25;
    *(_DWORD *)uint64_t v24 = 136315394;
    unint64_t v48 = a6;
    uint64_t v49 = a8;
    swift_bridgeObjectRetain();
    uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v55, a2, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v24 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, a4, &v57);
    a6 = v48;
    a8 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v20, v21, "Execution asked to re-trigger requestId: %s with userId: %s", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v25, -1, -1);
    MEMORY[0x1BA9E48C0](v24, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  if (*((unsigned char *)v9 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled) != 1)
  {
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl(&dword_1B9C64000, v30, v31, "Ignoring re-trigger request from SKE since MUX is not enabled", v32, 2u);
      MEMORY[0x1BA9E48C0](v32, -1, -1);
    }

    lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
    uint64_t v34 = (void *)swift_allocError();
    char v35 = 14;
    goto LABEL_18;
  }
  uint64_t v26 = (*(uint64_t (**)(void))(*v9 + 592))();
  swift_release();
  if (!v26)
  {
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl(&dword_1B9C64000, v36, v37, "Current request already canceled. Not re-triggering another request.", v38, 2u);
      MEMORY[0x1BA9E48C0](v38, -1, -1);
    }

    lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
    uint64_t v34 = (void *)swift_allocError();
    char v35 = 1;
LABEL_18:
    *uint64_t v33 = v35;
    goto LABEL_19;
  }
  uint64_t v28 = v9[8];
  unint64_t v27 = v9[9];
  if (v28 == v53 && v27 == a6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v29 = (uint64_t)v50;
    UserID.init(sharedUserId:)();
    ConversationRequestProcessor.synchronizedRetriggerOriginalRequest(rollbackRequestId:userId:reply:)((uint64_t)v55, a2, v29, a7, a8);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v29, v52);
    return;
  }
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  id v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = swift_slowAlloc();
    os_log_t v55 = v39;
    uint64_t v42 = v41;
    uint64_t v43 = swift_slowAlloc();
    uint64_t v49 = a8;
    uint64_t v44 = v43;
    uint64_t v57 = v43;
    *(_DWORD *)uint64_t v42 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v42 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, a6, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    os_log_t v45 = v55;
    _os_log_impl(&dword_1B9C64000, v55, v40, "Current requestId: %s does not match executionRequestId: %s. Not re-triggering another request", (uint8_t *)v42, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v44, -1, -1);
    MEMORY[0x1BA9E48C0](v42, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
  uint64_t v34 = (void *)swift_allocError();
  unsigned char *v46 = 0;
LABEL_19:
  a7();
}

Swift::Void __swiftcall ConversationRequestProcessor.closeServerRequest(forExecutionRequestId:)(Swift::String forExecutionRequestId)
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.conversationBridge);
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1B9C64000, oslog, v2, "closeServerRequest() cannot be handled by ConversationRequestProcessor.", v3, 2u);
    MEMORY[0x1BA9E48C0](v3, -1, -1);
  }
}

void ConversationRequestProcessor.synchronizedRetriggerOriginalRequest(rollbackRequestId:userId:reply:)(uint64_t a1, unint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v33 = a4;
  uint64_t v10 = type metadata accessor for UserID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  os_log_type_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  ConversationRequestProcessor.synchronizedCloseRequest()();
  uint64_t v34 = v5;
  uint64_t v35 = a1;
  unint64_t v36 = a2;
  uint64_t v37 = a3;
  id v14 = objc_allocWithZone((Class)type metadata accessor for InitiateMUXStateRollbackMessage());
  uint64_t v15 = InitiateMUXStateRollbackMessage.init(build:)();
  if (v15)
  {
    uint64_t v32 = a5;
    uint64_t v16 = (void *)v15;
    __swift_project_boxed_opaque_existential_1((void *)(v5 + 24), *(void *)(v5 + 48));
    id v31 = v16;
    dispatch thunk of MessagePublishing.postMessage(_:)();
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationBridge);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, v10);
    swift_bridgeObjectRetain_n();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v39 = v21;
      *(_DWORD *)uint64_t v20 = 136315394;
      swift_bridgeObjectRetain();
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v20 + 12) = 2080;
      _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E4FA26E0]);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      _os_log_impl(&dword_1B9C64000, v18, v19, "Posted InitiateMUXStateRollbackMessage for requestId: %s, userId: %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v21, -1, -1);
      MEMORY[0x1BA9E48C0](v20, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }

    ((void (*)(void))v33)(0);
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.conversationBridge);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      unint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v27 = 0;
      _os_log_impl(&dword_1B9C64000, v25, v26, "Could not create InitiateMUXStateRollbackMessage", v27, 2u);
      MEMORY[0x1BA9E48C0](v27, -1, -1);
    }

    lazy protocol witness table accessor for type ConversationOutputError and conformance ConversationOutputError();
    uint64_t v28 = (void *)swift_allocError();
    *uint64_t v29 = 13;
    v33();
  }
}

uint64_t closure #1 in ConversationRequestProcessor.synchronizedRetriggerOriginalRequest(rollbackRequestId:userId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v6 - 8);
  os_log_type_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v12 - 8);
  id v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *MEMORY[0x1E4FA2328];
  uint64_t v16 = type metadata accessor for MessageSource();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 104))(v14, v15, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  InitiateMUXStateRollbackMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  InitiateMUXStateRollbackMessage.Builder.assistantId.setter();
  uint64_t v18 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v11, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v11, 0, 1, v19);
  InitiateMUXStateRollbackMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  InitiateMUXStateRollbackMessage.Builder.originalRequestId.setter();
  swift_bridgeObjectRetain();
  InitiateMUXStateRollbackMessage.Builder.rollbackRequestId.setter();
  uint64_t v21 = type metadata accessor for UserID();
  uint64_t v22 = *(void *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v8, v25, v21);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v8, 0, 1, v21);
  return InitiateMUXStateRollbackMessage.Builder.userId.setter();
}

uint64_t closure #1 in ConversationRequestProcessor.synchronizedCloseRequest()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[5] = a4;
  v5[6] = a5;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  v5[7] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](closure #1 in ConversationRequestProcessor.synchronizedCloseRequest(), v6, 0);
}

uint64_t closure #1 in ConversationRequestProcessor.synchronizedCloseRequest()()
{
  uint64_t v1 = static MessageBusActor.shared;
  *(void *)(v0 + 64) = static MessageBusActor.shared;
  uint64_t v2 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 72) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 40);
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v4;
  *uint64_t v4 = v0;
  uint64_t v5 = MEMORY[0x1E4FBC848];
  v4[1] = closure #1 in ConversationRequestProcessor.synchronizedCloseRequest();
  return MEMORY[0x1F41880D8](v4, v1, v2, 0xD00000000000001ALL, 0x80000001BA066480, partial apply for closure #1 in closure #1 in ConversationRequestProcessor.synchronizedCloseRequest(), v3, v5 + 8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 56);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in ConversationRequestProcessor.synchronizedCloseRequest(), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  swift_release();
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.conversationBridge);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "ResultCandidateSelected sent. Now submitting RequestCompleted.", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }

  ConversationRequestProcessor.completeRequest(completion:)(0, 0);
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t closure #1 in closure #1 in ConversationRequestProcessor.synchronizedCloseRequest()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(a3 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  (*(void (**)(uint64_t, uint64_t, void, uint64_t (*)(), uint64_t))(*(void *)a2 + 1280))(v10, v9, 0, partial apply for closure #1 in closure #1 in AceServiceInvokerImpl.prepareForAudioHandoffFailed(), v12);
  return swift_release();
}

uint64_t closure #1 in ConversationRequestProcessor.safelyCloseContextUpdater()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 120) = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = static MessageBusActor.shared;
  *(void *)(v4 + 128) = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](closure #1 in ConversationRequestProcessor.safelyCloseContextUpdater(), v5, 0);
}

uint64_t closure #1 in ConversationRequestProcessor.safelyCloseContextUpdater()()
{
  outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 120) + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater, v0 + 56, &demangling cache variable for type metadata for ContextUpdating?);
  if (*(void *)(v0 + 80))
  {
    uint64_t v1 = *(void *)(v0 + 120);
    outlined init with take of ReferenceResolutionClientProtocol((long long *)(v0 + 56), v0 + 16);
    uint64_t v2 = *(void *)(*(void *)(v1
                               + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionOutputSubmitter)
                   + 16);
    *(void *)(v0 + 136) = v2;
    uint64_t v6 = (uint64_t (*)(void))(*(void *)(*(void *)v2 + 136) + **(int **)(*(void *)v2 + 136));
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 144) = v3;
    *uint64_t v3 = v0;
    v3[1] = closure #1 in ConversationRequestProcessor.safelyCloseContextUpdater();
    uint64_t v4 = v6;
  }
  else
  {
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for ContextUpdating?);
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v4();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 128);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](closure #1 in ConversationRequestProcessor.safelyCloseContextUpdater(), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  swift_release();
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t ConversationRequestProcessor.makeResultCandidateState(from:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1F4188790](v0 - 8);
  os_log_type_t v40 = (char *)&v37 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExecutionLocation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UserID();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ResultCandidateType(0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (uint64_t *)((char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  uint64_t v37 = v16;
  uint64_t v38 = v15;
  uint64_t v17 = DirectActionResultCandidateMessage.directAction.getter();
  uint64_t v19 = v18;
  uint64_t v20 = DirectActionResultCandidateMessage.requestExecutionParameters.getter();
  *uint64_t v14 = v17;
  v14[1] = v19;
  long long v14[2] = v20;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v39 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionUserId, v8);
  uint64_t v21 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v7, 1, 1, v21);
  uint64_t v22 = type metadata accessor for ExecutionLocation();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v4, 1, 1, v22);
  uint64_t v23 = type metadata accessor for ServerFallbackReason();
  uint64_t v24 = (uint64_t)v40;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v40, 1, 1, v23);
  type metadata accessor for ResultCandidateState(0);
  swift_allocObject();
  LOBYTE(v42) = 1;
  uint64_t v25 = ResultCandidateState.init(withResultCandidateId:resultCandidateType:userId:voiceIdScore:voiceIdClassification:lowScoreThreshold:fallbackParse:asrLocation:serverFallbackReason:meetsUserSessionThreshold:meetsPersonalRequestThreshold:)(v38, v37, (uint64_t)v14, (uint64_t)v11, 0x100000000, 0, 1, 0x100000000, (uint64_t)v7, (uint64_t)v4, v24, 2u, 2u);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  __swift_project_value_buffer(v26, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  unint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t v42 = v30;
    *(_DWORD *)uint64_t v29 = 136315138;
    id v31 = *(uint64_t (**)(uint64_t))(*(void *)v25 + 800);
    uint64_t v32 = swift_retain();
    uint64_t v33 = v31(v32);
    unint64_t v35 = v34;
    swift_release();
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v27, v28, "Created %s", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v30, -1, -1);
    MEMORY[0x1BA9E48C0](v29, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  return v25;
}

uint64_t ConversationRequestProcessor.checkPrerequisitesAndMaybeCacheCandidateMessage(forRCInput:resultCandidateId:messageToCacheIfNotInActiveTurn:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v98 = a3;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AsrResultCandidateMessage();
  if (!swift_dynamicCastClass())
  {
    type metadata accessor for TextBasedResultCandidateMessage();
    if (!swift_dynamicCastClass())
    {
      type metadata accessor for GestureBasedResultCandidateMessage();
      if (!swift_dynamicCastClass())
      {
        type metadata accessor for DirectActionResultCandidateMessage();
        if (!swift_dynamicCastClass())
        {
          type metadata accessor for TextBasedTRPCandidateMessage();
          if (!swift_dynamicCastClass())
          {
            type metadata accessor for TRPCandidateRequestMessage();
            if (!swift_dynamicCastClass())
            {
              if (one-time initialization token for conversationBridge != -1) {
                swift_once();
              }
              uint64_t v83 = type metadata accessor for Logger();
              __swift_project_value_buffer(v83, (uint64_t)static Logger.conversationBridge);
              id v84 = a1;
              uint64_t v85 = Logger.logObject.getter();
              os_log_type_t v86 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v85, v86))
              {
                uint64_t v87 = (uint8_t *)swift_slowAlloc();
                uint64_t v88 = swift_slowAlloc();
                v100[0] = v88;
                *(_DWORD *)uint64_t v87 = 136315138;
                swift_getObjectType();
                uint64_t v89 = _typeName(_:qualified:)();
                uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v90, v100);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();

                swift_bridgeObjectRelease();
                _os_log_impl(&dword_1B9C64000, v85, v86, "These set of prerequisite checks are not valid for RC type: %s", v87, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x1BA9E48C0](v88, -1, -1);
                MEMORY[0x1BA9E48C0](v87, -1, -1);
              }
              else
              {
              }
              return 0;
            }
          }
        }
      }
    }
  }
  uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v4 + 592))();
  if (!v13)
  {
    uint64_t v30 = v12;
    if ((~a4 & 0xF000000000000007) != 0)
    {
      uint64_t v96 = v10;
      uint64_t v45 = one-time initialization token for conversationBridge;
      id v46 = (id)(a4 & 0x1FFFFFFFFFFFFFFFLL);
      if (v45 != -1) {
        swift_once();
      }
      uint64_t v47 = type metadata accessor for Logger();
      __swift_project_value_buffer(v47, (uint64_t)static Logger.conversationBridge);
      id v48 = a1;
      uint64_t v49 = Logger.logObject.getter();
      os_log_type_t v50 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = swift_slowAlloc();
        uint64_t v98 = swift_slowAlloc();
        v100[0] = v98;
        *(_DWORD *)uint64_t v51 = 136315394;
        uint64_t v97 = v51 + 4;
        MessageBase.messageId.getter();
        _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v54 = v53;
        (*(void (**)(char *, uint64_t))(v96 + 8))(v30, v9);
        uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v54, v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v51 + 12) = 2080;
        swift_getObjectType();
        uint64_t v55 = _typeName(_:qualified:)();
        uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v49, v50, "Message id %s of type %s received for an inactive request. Will cache it for when we get a start-turn signal.", (uint8_t *)v51, 0x16u);
        uint64_t v57 = v98;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v57, -1, -1);
        MEMORY[0x1BA9E48C0](v51, -1, -1);
      }
      else
      {
      }
      uint64_t v82 = (void (*)(uint64_t *, void))(*(uint64_t (**)(uint64_t *))(*(void *)v5 + 400))(v100);
      ConversationRequestProcessor.State.cacheCandidateMessage(_:)(a4);
      v82(v100, 0);
      outlined consume of CandidateRequestMessage?(a4);
    }
    else
    {
      uint64_t v31 = v10;
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)static Logger.conversationBridge);
      id v33 = a1;
      unint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = swift_slowAlloc();
        uint64_t v37 = v9;
        uint64_t v98 = swift_slowAlloc();
        v100[0] = v98;
        *(_DWORD *)uint64_t v36 = 136315394;
        uint64_t v38 = v30;
        MessageBase.messageId.getter();
        _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v41 = v40;
        (*(void (**)(char *, uint64_t))(v31 + 8))(v38, v37);
        uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v36 + 12) = 2080;
        swift_getObjectType();
        uint64_t v42 = _typeName(_:qualified:)();
        uint64_t v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v34, v35, "Request already canceled. Not handling Message id %s of type %s.", (uint8_t *)v36, 0x16u);
        uint64_t v44 = v98;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v44, -1, -1);
        MEMORY[0x1BA9E48C0](v36, -1, -1);
      }
      else
      {
      }
    }
    return 0;
  }
  uint64_t v14 = v13;
  uint64_t v15 = (unint64_t *)(v13 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  if (*v15 >> 62 == 1)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
    id v17 = a1;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    LODWORD(v96) = v19;
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      uint64_t v95 = a1;
      uint64_t v21 = v20;
      uint64_t v93 = swift_slowAlloc();
      uint64_t v101 = v93;
      *(_DWORD *)uint64_t v21 = 136315394;
      uint64_t v94 = v21 + 4;
      os_log_t v92 = v18;
      MessageBase.messageId.getter();
      _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v97 = v9;
      unint64_t v24 = v23;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v97);
      uint64_t v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2080;
      swift_getObjectType();
      uint64_t v25 = _typeName(_:qualified:)();
      uint64_t v94 = a2;
      uint64_t v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v101);
      uint64_t v9 = v97;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      a2 = v94;
      swift_bridgeObjectRelease();
      os_log_t v27 = v92;
      _os_log_impl(&dword_1B9C64000, v92, (os_log_type_t)v96, "RC already selected. Not handling Message id %s of type %s", (uint8_t *)v21, 0x16u);
      uint64_t v28 = v93;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v28, -1, -1);
      uint64_t v29 = v21;
      a1 = v95;
      MEMORY[0x1BA9E48C0](v29, -1, -1);
    }
    else
    {
    }
  }
  if ((*(unsigned char *)(v5 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled) & 1) != 0
    || (unint64_t v58 = v12, v59 = *v15, *v15 >> 62))
  {
LABEL_32:
    swift_release();
    return 1;
  }
  uint64_t v96 = v10;
  uint64_t v97 = v9;
  uint64_t v60 = (void *)v15[1];
  uint64_t v61 = *(uint64_t (**)(uint64_t))(*(void *)v59 + 88);
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(v59, v60);
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(v59, v60);
  uint64_t v62 = v98;
  uint64_t v63 = swift_bridgeObjectRetain();
  if (!*(void *)(v61(v63) + 16) || (specialized __RawDictionaryStorage.find<A>(_:)(a2, v62), (v64 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v59, v60);
    swift_bridgeObjectRelease();
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v59, v60);
    goto LABEL_32;
  }
  uint64_t v95 = (void *)v14;
  swift_retain();
  swift_bridgeObjectRelease();
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v59, v60);
  swift_bridgeObjectRelease();
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v59, v60);
  swift_release();
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v65 = type metadata accessor for Logger();
  __swift_project_value_buffer(v65, (uint64_t)static Logger.conversationBridge);
  id v66 = a1;
  swift_bridgeObjectRetain_n();
  id v67 = v66;
  uint64_t v68 = Logger.logObject.getter();
  os_log_type_t v69 = static os_log_type_t.error.getter();
  int v70 = v69;
  if (os_log_type_enabled(v68, v69))
  {
    unint64_t v71 = v62;
    uint64_t v72 = swift_slowAlloc();
    uint64_t v94 = swift_slowAlloc();
    uint64_t v101 = v94;
    *(_DWORD *)uint64_t v72 = 136315650;
    swift_bridgeObjectRetain();
    uint64_t v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, v71, &v101);
    LODWORD(v93) = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v72 + 12) = 2080;
    uint64_t v73 = v58;
    MessageBase.messageId.getter();
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v74 = v97;
    uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v77 = v76;
    (*(void (**)(char *, uint64_t))(v96 + 8))(v73, v74);
    uint64_t v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v77, &v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v72 + 22) = 2080;
    swift_getObjectType();
    uint64_t v78 = _typeName(_:qualified:)();
    uint64_t v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, &v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v68, (os_log_type_t)v93, "Receive multiple RC inputs for the same RC ID: %s, not handling Message id %s of type %s", (uint8_t *)v72, 0x20u);
    uint64_t v80 = v94;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v80, -1, -1);
    MEMORY[0x1BA9E48C0](v72, -1, -1);
    swift_release();
  }
  else
  {

    swift_release();
    swift_bridgeObjectRelease_n();
  }
  return 0;
}

uint64_t ConversationRequestProcessor.buildUserSpecificInfoForUserMeetingUserSessionThreshold(rcState:)()
{
  return 0;
}

uint64_t ConversationRequestProcessor.buildUserSpecificInfoForRecognizedUser(rcState:speechProfileUsed:)()
{
  return 0;
}

void ConversationRequestProcessor.completeRequest(completion:)(NSObject *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v45 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(**(void **)(v2
                                                + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_selfReflectionAgent)
                                  + 416))(v13);
  uint64_t v16 = *(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_featureChecker + 24);
  uint64_t v17 = *(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_featureChecker + 32);
  __swift_project_boxed_opaque_existential_1((void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_featureChecker), v16);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17) & 1) == 0)
  {
    id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96968]), sel_init);
    UUID.init()();
    uint64_t v24 = UUID.uuidString.getter();
    uint64_t v26 = v25;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    os_log_t v27 = (void *)MEMORY[0x1BA9E2DD0](v24, v26);
    swift_bridgeObjectRelease();
    objc_msgSend(v23, sel_setAceId_, v27);

    uint64_t v28 = *(NSObject **)(v3 + 64);
    uint64_t v43 = *(void *)(v3 + 72);
    uint64_t v29 = v43;
    uint64_t v44 = v28;
    id v30 = v23;
    uint64_t v31 = (void *)MEMORY[0x1BA9E2DD0](v28, v29);
    objc_msgSend(v30, sel_setRefId_, v31);

    uint64_t v32 = *(void *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionOutputSubmitter);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
    uint64_t v33 = type metadata accessor for UserID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v7, 1, 1, v33);
    uint64_t v34 = swift_allocObject();
    os_log_type_t v35 = v45;
    *(void *)(v34 + 16) = v45;
    *(void *)(v34 + 24) = a2;
    uint64_t v36 = *(void (**)(id, NSObject *, uint64_t, void, void, void, void, void, char *, char *, _BYTE, void (*)(void *, void *), uint64_t))(*(void *)v32 + 328);
    id v37 = v30;
    outlined copy of (@escaping @callee_guaranteed (@guaranteed SAAceCommand?, @guaranteed Error?) -> ())?((uint64_t)v35);
    v36(v30, v44, v43, 0, 0, 0, 0, 0, v10, v7, 0, partial apply for closure #2 in ConversationRequestProcessor.completeRequest(completion:), v34);

    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UserID?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    return;
  }
  id v18 = objc_allocWithZone((Class)type metadata accessor for FlowCompletedMessage());
  os_log_type_t v19 = FlowCompletedMessage.init(build:)();
  if (v19)
  {
    uint64_t v44 = v19;
    __swift_project_boxed_opaque_existential_1((void *)(v2 + 24), *(void *)(v2 + 48));
    dispatch thunk of MessagePublishing.postMessage(_:)();
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.conversationBridge);
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v45, v21))
    {

      unint64_t v41 = v44;
      goto LABEL_14;
    }
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl(&dword_1B9C64000, v45, v21, "Posted FlowCompletedMessage to message bus", v22, 2u);
    MEMORY[0x1BA9E48C0](v22, -1, -1);
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.conversationBridge);
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v39))
    {
      unint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v40 = 0;
      _os_log_impl(&dword_1B9C64000, v45, v39, "Error building FlowCompletedMessage", v40, 2u);
      MEMORY[0x1BA9E48C0](v40, -1, -1);
    }
  }
  unint64_t v41 = v45;
LABEL_14:
}

uint64_t closure #1 in ConversationRequestProcessor.completeRequest(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *MEMORY[0x1E4FA2328];
  uint64_t v10 = type metadata accessor for MessageSource();
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  FlowCompletedMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  FlowCompletedMessage.Builder.assistantId.setter();
  uint64_t v12 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v5, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v5, 0, 1, v13);
  FlowCompletedMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  return FlowCompletedMessage.Builder.requestId.setter();
}

void closure #2 in ConversationRequestProcessor.completeRequest(completion:)(void *a1, void *a2, void (*a3)(void *, void *))
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
  id v7 = a2;
  id v8 = a1;
  id v9 = a2;
  id v10 = v8;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (!os_log_type_enabled(v11, v12))
  {

    if (!a3) {
      return;
    }
    goto LABEL_7;
  }
  uint64_t v13 = swift_slowAlloc();
  uint64_t v14 = swift_slowAlloc();
  uint64_t v19 = v14;
  *(_DWORD *)uint64_t v13 = 136315394;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
  uint64_t v15 = Optional.debugDescription.getter();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v19);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();

  *(_WORD *)(v13 + 12) = 2080;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
  uint64_t v17 = Optional.debugDescription.getter();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v19);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl(&dword_1B9C64000, v11, v12, "Submitted RequestCompleted with error: %s and command: %s", (uint8_t *)v13, 0x16u);
  swift_arrayDestroy();
  MEMORY[0x1BA9E48C0](v14, -1, -1);
  MEMORY[0x1BA9E48C0](v13, -1, -1);

  if (a3) {
LABEL_7:
  }
    a3(a1, a2);
}

void closure #1 in ConversationRequestProcessor.revealAsrTranscription(for:turn:)()
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationBridge);
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_1B9C64000, oslog, v1, "UIRevealRecognizedSpeech handled", v2, 2u);
    MEMORY[0x1BA9E48C0](v2, -1, -1);
  }
}

void closure #1 in ConversationRequestProcessor.sendCommitToExecution(_:_:)(uint64_t a1, void *a2)
{
}

void closure #2 in ConversationRequestProcessor.flowPluginWillExecute(flowPluginInfo:)(uint64_t a1, void *a2, uint64_t (*a3)(void), const char *a4)
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
  id v8 = a2;
  id v9 = a2;
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v10 = a3();
  if (os_log_type_enabled(oslog, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v17 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    id v13 = a2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
    uint64_t v14 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, oslog, v10, a4, v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v12, -1, -1);
    MEMORY[0x1BA9E48C0](v11, -1, -1);
  }
  else
  {
  }
}

void ConversationRequestProcessor.postExecutionFinalizedMessage(requestId:selectedTrpId:selectedTcuId:userId:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v7 = v6;
  id v12 = objc_allocWithZone((Class)type metadata accessor for ExecutionFinalizedMessage());
  uint64_t v13 = ExecutionFinalizedMessage.init(build:)();
  if (v13)
  {
    uint64_t v14 = v13;
    if (one-time initialization token for insightRequestSummaryLogger != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for InsightRequestSummaryLogger();
    uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)static Logger.insightRequestSummaryLogger);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized InsightRequestSummaryLogger.emitDebug(_:)(v16, v7, a3, a4, a5, a6);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationBridge);
    unint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_1B9C64000, v18, v19, "Posting ExecutionFinalizedMessage to message bus", v20, 2u);
      MEMORY[0x1BA9E48C0](v20, -1, -1);
    }

    __swift_project_boxed_opaque_existential_1(&v7[1]._object, v7[3]._countAndFlagsBits);
    dispatch thunk of MessagePublishing.postMessage(_:)();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.conversationBridge);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v22))
    {
      id v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v23 = 0;
      _os_log_impl(&dword_1B9C64000, v14, v22, "Error building ExecutionFinalizedMessage", v23, 2u);
      MEMORY[0x1BA9E48C0](v23, -1, -1);
    }
  }
}

uint64_t closure #1 in ConversationRequestProcessor.postExecutionFinalizedMessage(requestId:selectedTrpId:selectedTcuId:userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v28[1] = a5;
  v28[2] = a7;
  uint64_t v29 = a9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v10 - 8);
  id v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v16 - 8);
  unint64_t v18 = (char *)v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  ExecutionFinalizedMessage.Builder.requestId.setter();
  uint64_t v19 = a4 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v18, v19, v20);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  ExecutionFinalizedMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  ExecutionFinalizedMessage.Builder.assistantId.setter();
  ExecutionFinalizedMessage.Builder.flowPluginId.setter();
  uint64_t v22 = *MEMORY[0x1E4FA2328];
  uint64_t v23 = type metadata accessor for MessageSource();
  uint64_t v24 = *(void *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 104))(v15, v22, v23);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v15, 0, 1, v23);
  ExecutionFinalizedMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  ExecutionFinalizedMessage.Builder.tcuId.setter();
  swift_bridgeObjectRetain();
  ExecutionFinalizedMessage.Builder.trpCandidateId.setter();
  uint64_t v25 = type metadata accessor for UserID();
  uint64_t v26 = *(void *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v12, v29, v25);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v12, 0, 1, v25);
  return ExecutionFinalizedMessage.Builder.userId.setter();
}

Swift::Void __swiftcall ConversationRequestProcessor.actionCandidatesGenerated(_:rcId:)(Swift::OpaquePointer _, Swift::String rcId)
{
  id v3 = objc_allocWithZone((Class)type metadata accessor for SiriXActionCandidatesGeneratedMessage());
  uint64_t v4 = SiriXActionCandidatesGeneratedMessage.init(build:)();
  if (v4)
  {
    uint64_t v5 = v4;
    __swift_project_boxed_opaque_existential_1((void *)(v2 + 24), *(void *)(v2 + 48));
    dispatch thunk of MessagePublishing.postMessage(_:)();
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v7))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v8 = 0;
      _os_log_impl(&dword_1B9C64000, v5, v7, "Could not generate SiriXActionCandidatesGeneratedMessage. Missing fields?", v8, 2u);
      MEMORY[0x1BA9E48C0](v8, -1, -1);
    }
  }
}

uint64_t closure #1 in ConversationRequestProcessor.actionCandidatesGenerated(_:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v68[3] = a4;
  uint64_t v69 = a3;
  uint64_t v8 = type metadata accessor for CamParse();
  MEMORY[0x1F4188790](v8 - 8);
  os_log_type_t v86 = (char *)v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SiriXParse?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v88 = (char *)v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = type metadata accessor for SiriXParse();
  uint64_t v91 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v85 - 8);
  MEMORY[0x1F4188790](v85);
  uint64_t v74 = (char *)v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SiriXActionCandidate?);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v83 = (uint64_t)v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v93 = (uint64_t)v68 - v16;
  uint64_t v76 = type metadata accessor for SiriXActionCandidate();
  uint64_t v17 = *(void *)(v76 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v76);
  id v84 = (char *)v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v73 = (char *)v68 - v20;
  uint64_t v75 = type metadata accessor for ActionCandidate();
  uint64_t v21 = *(void *)(v75 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v75);
  uint64_t v89 = (char *)v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  os_log_t v92 = (char *)v68 - v24;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v25 - 8);
  os_log_t v27 = (char *)v68 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v28 - 8);
  id v30 = (char *)v68 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  SiriXActionCandidatesGeneratedMessage.Builder.requestId.setter();
  uint64_t v31 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v32 = type metadata accessor for UUID();
  uint64_t v33 = *(void *)(v32 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v30, v31, v32);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  SiriXActionCandidatesGeneratedMessage.Builder.sessionId.setter();
  uint64_t v34 = *MEMORY[0x1E4FA2328];
  uint64_t v35 = type metadata accessor for MessageSource();
  uint64_t v36 = *(void *)(v35 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 104))(v27, v34, v35);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v27, 0, 1, v35);
  SiriXActionCandidatesGeneratedMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  void v68[2] = a1;
  SiriXActionCandidatesGeneratedMessage.Builder.assistantId.setter();
  uint64_t v37 = *(void *)(v69 + 16);
  if (v37)
  {
    v68[1] = a5;
    os_log_type_t v39 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
    uint64_t v38 = v21 + 16;
    unint64_t v40 = (char *)(v69 + ((*(unsigned __int8 *)(v38 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 64)));
    uint64_t v80 = v91 + 6;
    int v81 = v39;
    uint64_t v72 = (uint64_t (**)(char *, uint64_t, uint64_t))(v91 + 4);
    uint64_t v41 = *(void *)(v38 + 56);
    uint64_t v78 = (void (**)(char *, uint64_t))(v38 - 8);
    uint64_t v79 = v41;
    unint64_t v71 = (void (**)(char *, uint64_t))(v91 + 1);
    unint64_t v90 = (void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);
    uint64_t v91 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
    unint64_t v77 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
    swift_bridgeObjectRetain();
    unint64_t v87 = MEMORY[0x1E4FBC860];
    uint64_t v43 = (uint64_t)v88;
    uint64_t v42 = v89;
    uint64_t v44 = v75;
    uint64_t v45 = v76;
    uint64_t v46 = v17;
    uint64_t v70 = v17;
    uint64_t v82 = v38;
    do
    {
      uint64_t v47 = v92;
      id v48 = v81;
      v81(v92, v40, v44);
      v48(v42, v47, v44);
      uint64_t v49 = v86;
      ActionCandidate.parse.getter();
      SiriXParse.init(fromCamParse:)(v49, v43);
      uint64_t v50 = v85;
      if ((*v80)(v43, 1, v85) == 1)
      {
        uint64_t v51 = *v78;
        (*v78)(v42, v44);
        outlined destroy of ReferenceResolutionClientProtocol?(v43, (uint64_t *)&demangling cache variable for type metadata for SiriXParse?);
        uint64_t v52 = 1;
      }
      else
      {
        uint64_t v53 = v43;
        unint64_t v54 = v78;
        uint64_t v55 = v74;
        uint64_t v56 = (*v72)(v74, v53, v50);
        uint64_t v57 = v83;
        uint64_t v58 = v50;
        MEMORY[0x1F4188790](v56);
        v68[-2] = v42;
        v68[-1] = v55;
        SiriXActionCandidate.init(build:)();
        uint64_t v51 = *v54;
        (*v54)(v42, v44);
        uint64_t v59 = v58;
        uint64_t v45 = v76;
        (*v71)(v55, v59);
        if ((*v91)(v57, 1, v45))
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v83, (uint64_t *)&demangling cache variable for type metadata for SiriXActionCandidate?);
          uint64_t v52 = 1;
        }
        else
        {
          (*v90)(v93, v83, v45);
          uint64_t v52 = 0;
        }
        uint64_t v46 = v70;
        uint64_t v44 = v75;
        uint64_t v43 = (uint64_t)v88;
      }
      uint64_t v60 = v93;
      (*v77)(v93, v52, 1, v45);
      v51(v92, v44);
      if ((*v91)(v60, 1, v45) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v93, (uint64_t *)&demangling cache variable for type metadata for SiriXActionCandidate?);
      }
      else
      {
        uint64_t v61 = *v90;
        uint64_t v62 = v73;
        (*v90)((uint64_t)v73, v93, v45);
        v61((uint64_t)v84, (uint64_t)v62, v45);
        unint64_t v63 = v87;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v63 + 16) + 1, 1, v63);
        }
        unint64_t v65 = *(void *)(v63 + 16);
        unint64_t v64 = *(void *)(v63 + 24);
        if (v65 >= v64 >> 1) {
          unint64_t v63 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v65 + 1, 1, v63);
        }
        *(void *)(v63 + 16) = v65 + 1;
        unint64_t v66 = (*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
        unint64_t v87 = v63;
        v61(v63 + v66 + *(void *)(v46 + 72) * v65, (uint64_t)v84, v45);
        uint64_t v43 = (uint64_t)v88;
      }
      v40 += v79;
      --v37;
      uint64_t v42 = v89;
    }
    while (v37);
    swift_bridgeObjectRelease();
  }
  SiriXActionCandidatesGeneratedMessage.Builder.actionCandidates.setter();
  swift_bridgeObjectRetain();
  return SiriXActionCandidatesGeneratedMessage.Builder.rcId.setter();
}

void closure #1 in ConversationRequestProcessor.makeAndSendSpeechRecognizedCommand(rcState:turn:reply:)(uint64_t a1, void *a2, void (*a3)(uint64_t, void *))
{
  if (a2)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
    id v7 = a2;
    id v8 = a2;
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v20 = a1;
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v21 = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
      uint64_t v13 = Optional.debugDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v9, v10, "Sent SpeechRecognized command with error: %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v12, -1, -1);
      uint64_t v15 = v11;
      a1 = v20;
      MEMORY[0x1BA9E48C0](v15, -1, -1);

      if (!a3) {
        return;
      }
    }
    else
    {

      if (!a3) {
        return;
      }
    }
    goto LABEL_12;
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl(&dword_1B9C64000, v17, v18, "Sent SpeechRecognized command successfully", v19, 2u);
    MEMORY[0x1BA9E48C0](v19, -1, -1);
  }

  if (a3) {
LABEL_12:
  }
    a3(a1, a2);
}

uint64_t ConversationRequestProcessor.waitForSalientEntityCollection(timeout:)(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = type metadata accessor for TimeoutError();
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OSSignpostID();
  v2[11] = v4;
  v2[12] = *(void *)(v4 - 8);
  v2[13] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = static MessageBusActor.shared;
  v2[14] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](ConversationRequestProcessor.waitForSalientEntityCollection(timeout:), v5, 0);
}

uint64_t ConversationRequestProcessor.waitForSalientEntityCollection(timeout:)()
{
  if ((*(uint64_t (**)(void))(*(void *)v0[7] + 504))())
  {
    swift_release();
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v10 = 0;
      _os_log_impl(&dword_1B9C64000, v8, v9, "The task already finished. Returning", v10, 2u);
      MEMORY[0x1BA9E48C0](v10, -1, -1);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    id v1 = (id)static Log.executor;
    OSSignpostID.init(log:)();
    static os_signpost_type_t.begin.getter();
    os_signpost(_:dso:log:name:signpostID:_:_:)();
    double v2 = DispatchTimeInterval.seconds.getter();
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc();
    v0[15] = v3;
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ()?);
    *uint64_t v3 = v0;
    v3[1] = ConversationRequestProcessor.waitForSalientEntityCollection(timeout:);
    uint64_t v5 = v0[7];
    v6.n128_f64[0] = v2;
    return MEMORY[0x1F415AC08](v0 + 17, &async function pointer to partial apply for closure #1 in ConversationRequestProcessor.waitForSalientEntityCollection(timeout:), v5, v4, v6);
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  double v2 = *v1;
  *(void *)(v2 + 128) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 112);
  if (v0)
  {
    uint64_t v4 = ConversationRequestProcessor.waitForSalientEntityCollection(timeout:);
  }
  else
  {
    swift_release();
    uint64_t v4 = ConversationRequestProcessor.waitForSalientEntityCollection(timeout:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  swift_release();
  double v2 = v0[12];
  id v1 = v0[13];
  uint64_t v3 = v0[11];
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  void *v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  uint64_t v21;

  id v1 = *(void **)(v0 + 128);
  swift_release();
  swift_release();
  *(void *)(v0 + 40) = v1;
  double v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  if (swift_dynamicCast())
  {

    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.conversationBridge);
    uint64_t v4 = Logger.logObject.getter();
    uint64_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      __n128 v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)__n128 v6 = 0;
      _os_log_impl(&dword_1B9C64000, v4, v5, "Timed out waiting for RRaaS entity collection", v6, 2u);
      MEMORY[0x1BA9E48C0](v6, -1, -1);
    }
    id v8 = *(void *)(v0 + 72);
    uint64_t v7 = *(void *)(v0 + 80);
    os_log_type_t v9 = *(void *)(v0 + 64);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  }
  else
  {

    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    os_log_type_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
    uint64_t v11 = Logger.logObject.getter();
    uint64_t v12 = static os_log_type_t.error.getter();
    uint64_t v13 = os_log_type_enabled(v11, v12);
    unint64_t v14 = *(void **)(v0 + 128);
    if (v13)
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_1B9C64000, v11, v12, "Unknown error waiting for RRaaS entity collection", v15, 2u);
      MEMORY[0x1BA9E48C0](v15, -1, -1);
    }
  }
  uint64_t v17 = *(void *)(v0 + 96);
  uint64_t v16 = *(void *)(v0 + 104);
  os_log_type_t v18 = *(void *)(v0 + 88);
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
  return v19();
}

uint64_t closure #1 in ConversationRequestProcessor.waitForSalientEntityCollection(timeout:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return MEMORY[0x1F4188298](closure #1 in ConversationRequestProcessor.waitForSalientEntityCollection(timeout:), 0, 0);
}

uint64_t closure #1 in ConversationRequestProcessor.waitForSalientEntityCollection(timeout:)()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ConversationRequestProcessor.waitForSalientEntityCollection(timeout:), v0, 0);
}

{
  uint64_t v0;
  uint64_t v2;

  *(void *)(v0 + 56) = *(void *)(*(void *)(v0 + 48)
                                   + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rraasCollectionTask);
  swift_retain();
  return MEMORY[0x1F4188298](closure #1 in ConversationRequestProcessor.waitForSalientEntityCollection(timeout:), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v6;

  id v1 = *(void *)(v0 + 56);
  if (v1)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 64) = v2;
    *uint64_t v2 = v0;
    v2[1] = closure #1 in ConversationRequestProcessor.waitForSalientEntityCollection(timeout:);
    uint64_t v3 = MEMORY[0x1E4FBC848] + 8;
    return MEMORY[0x1F4187DC0](v2, v1, v3);
  }
  else
  {
    **(unsigned char **)(v0 + 40) = 1;
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
}

{
  uint64_t v1;

  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](closure #1 in ConversationRequestProcessor.waitForSalientEntityCollection(timeout:), 0, 0);
}

{
  uint64_t v0;

  **(unsigned char **)(v0 + 40) = *(void *)(v0 + 56) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void closure #1 in ConversationRequestProcessor.donateUtteranceRREntity(rrEntity:)(void *a1, char a2)
{
  if (a2)
  {
    id v6 = a1;
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.conversationBridge);
    id v8 = a1;
    id v9 = a1;
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v16 = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      swift_getErrorValue();
      uint64_t v13 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Result<(), Error>(a1, 1);
      outlined consume of Result<(), Error>(a1, 1);
      _os_log_impl(&dword_1B9C64000, oslog, v10, "#donateUtteranceForReferenceResolution: utterance Entity donation to SRR was unsuccessful as %s.", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v12, -1, -1);
      MEMORY[0x1BA9E48C0](v11, -1, -1);

      outlined consume of Result<(), Error>(a1, 1);
      return;
    }
    outlined consume of Result<(), Error>(a1, 1);
    outlined consume of Result<(), Error>(a1, 1);
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1B9C64000, oslog, v3, "#donateUtteranceForReferenceResolution: utterance Entity donation to SRR was successful", v4, 2u);
      MEMORY[0x1BA9E48C0](v4, -1, -1);
    }
  }
}

unint64_t ConversationRequestProcessor.State.description.getter(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t result = 0xD00000000000001DLL;
  switch(a3)
  {
    case 1:
      return result;
    case 2:
      unint64_t result = 0x617473206E727574;
      break;
    case 3:
      if (a1 | a2) {
        unint64_t result = 0x6574656C706D6F63;
      }
      else {
        unint64_t result = 1701602409;
      }
      break;
    default:
      unint64_t result = 0xD000000000000011;
      break;
  }
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ConversationRequestProcessor.State()
{
  return ConversationRequestProcessor.State.description.getter(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

void ConversationRequestProcessor.__allocating_init(_:_:_:_:_:_:_:)()
{
}

void ConversationRequestProcessor.init(_:_:_:_:_:_:_:)()
{
}

uint64_t ConversationRequestProcessor.__ivar_destroyer()
{
  swift_release();
  outlined consume of ConversationRequestProcessor.State(*(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_state), *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_state + 8), *(unsigned char *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_state + 16));
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionState);
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_featureChecker);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionUserId;
  uint64_t v2 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rrClient);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_correctionsPlatformClient);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater, &demangling cache variable for type metadata for ContextUpdating?);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextDonator);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_userSessionState);
  unint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_userSessionState + 8);

  return outlined consume of UserSessionState(v3, v4);
}

uint64_t ConversationRequestProcessor.__deallocating_deinit()
{
  ConversationRequestProcessor.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for ConversationRequestProcessing.handleASRResultCandidateMessage(_:) in conformance ConversationRequestProcessor()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 736))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleMUXASRResultCandidateMessage(_:) in conformance ConversationRequestProcessor()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 744))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleNLResultCandidateMessage(_:) in conformance ConversationRequestProcessor()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 776))();
}

uint64_t protocol witness for ConversationRequestProcessing.handlePommesResultCandidateMessage(_:) in conformance ConversationRequestProcessor()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 816))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleResultSelectedMessage(_:) in conformance ConversationRequestProcessor()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 936))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleCancelRequestMessage(_:) in conformance ConversationRequestProcessor()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 960))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleRequestContextMessage(_:) in conformance ConversationRequestProcessor()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 712))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleStartTextRequestMessage(_:) in conformance ConversationRequestProcessor()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 632))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleStartDirectActionRequestMessage(_:) in conformance ConversationRequestProcessor()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 640))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleStartLocalRequestMessage(_:) in conformance ConversationRequestProcessor()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 672))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleStartUnderstandingOnServerRequestMessage(_:) in conformance ConversationRequestProcessor()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 648))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleStartUnderstandingOnServerTextRequestMessage(_:) in conformance ConversationRequestProcessor()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 656))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleTextBasedResultCandidateMessage(_:) in conformance ConversationRequestProcessor()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 752))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleGestureBasedResultCandidateMessage(_:) in conformance ConversationRequestProcessor()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 760))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleDirectActionResultCandidateMessage(_:) in conformance ConversationRequestProcessor()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 768))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleNLRepetitionMessage(_:) in conformance ConversationRequestProcessor()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 784))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleStartCorrectedSpeechRequestMessage(_:) in conformance ConversationRequestProcessor()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 680))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleStartSpeechRequestMessage(_:) in conformance ConversationRequestProcessor()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 608))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleRuntimeError(error:) in conformance ConversationRequestProcessor()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1136))();
}

uint64_t protocol witness for ConversationRequestProcessing.handleAceRemoteExecutionContextUpdate(_:executionContext:reply:) in conformance ConversationRequestProcessor()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 968))();
}

uint64_t protocol witness for ConversationRequestProcessing.handlePommesTRPCandidateMessage(_:) in conformance ConversationRequestProcessor()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 920))();
}

void specialized ConversationRequestProcessor.handleStartRequestInternal(_:turnState:isTapToEdit:)(void *a1, uint64_t a2, int a3, void *a4)
{
  int v111 = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v112 = &v110[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for RequestType();
  uint64_t v127 = *(void *)(v9 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v120 = &v110[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  unint64_t v14 = &v110[-v13];
  uint64_t v15 = MEMORY[0x1F4188790](v12);
  uint64_t v118 = &v110[-v16];
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = &v110[-v18];
  uint64_t v20 = MEMORY[0x1F4188790](v17);
  uint64_t v123 = &v110[-v21];
  MEMORY[0x1F4188790](v20);
  unint64_t v122 = &v110[-v22];
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  uint64_t v24 = __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationBridge);
  id v25 = a1;
  swift_retain_n();
  uint64_t v26 = v25;
  uint64_t v124 = v24;
  os_log_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  uint64_t v125 = v26;
  uint64_t v126 = v9;
  uint64_t v121 = a2;
  uint64_t v119 = v14;
  int v114 = v19;
  if (v29)
  {
    uint64_t v30 = swift_slowAlloc();
    uint64_t v31 = (void *)swift_slowAlloc();
    uint64_t v117 = swift_slowAlloc();
    v135[0] = v117;
    *(_DWORD *)uint64_t v30 = 138412802;
    *(void *)&long long v133 = v26;
    uint64_t v32 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v31 = v26;

    *(_WORD *)(v30 + 12) = 2080;
    uint64_t v33 = RequestMessageBase.requestId.getter();
    *(void *)&long long v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v30 + 22) = 2080;
    type metadata accessor for UUID();
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    a2 = v121;
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v27, v28, "ConversationBridge handling message: %@, requestId: %s, sessionId: %s", (uint8_t *)v30, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v31, -1, -1);
    uint64_t v37 = v117;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v37, -1, -1);
    MEMORY[0x1BA9E48C0](v30, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v38 = *(void *)((char *)a4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_selfReflectionAgent);
  (*(void (**)(void))(*(void *)v38 + 376))();
  uint64_t v40 = a4[8];
  os_log_type_t v39 = (void (*)(void *, uint64_t, uint64_t))a4[9];
  uint64_t v41 = (*(uint64_t (**)(uint64_t, void (*)(void *, uint64_t, uint64_t)))(*(void *)v38 + 384))(v40, v39);
  uint64_t v42 = (*(uint64_t (**)(uint64_t))(*a4 + 384))(v41);
  uint64_t v45 = v42;
  if (v44)
  {
    outlined consume of ConversationRequestProcessor.State(v42, v43, v44);
    uint64_t v45 = MEMORY[0x1E4FBC860];
  }
  uint64_t started = StartRequestMessageBase.optionalRequestContextData.getter();
  uint64_t v116 = v39;
  if (started)
  {
    uint64_t v47 = (void *)started;
    uint64_t v48 = v45;
    uint64_t v49 = a4[12];
    uint64_t v50 = a4[13];
    swift_bridgeObjectRetain();
    char v51 = ConversationRequestProcessor.didPreviouslyFallbackToServer(forUserId:)();
    uint64_t v52 = *(void *)((char *)a4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_muxContextMessage);
    if (v52) {
      LOBYTE(v52) = MUXContextMessage.isRMVEnabled.getter();
    }
    id v53 = specialized RequestContextData.__allocating_init(startRequest:assistantId:didPreviouslyFallbackToServer:isRecognizeMyVoiceEnabled:)(v125, v49, v50, v51 & 1, v52 & 1);

    uint64_t v45 = v48;
  }
  else
  {
    unint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(*a4 + 392);
    swift_retain();
    swift_bridgeObjectRetain();
    v54(a2, v45, 1);
    id v53 = 0;
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)a4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater, (uint64_t)&v133, &demangling cache variable for type metadata for ContextUpdating?);
  uint64_t v55 = v126;
  if (v134)
  {
    uint64_t v113 = v45;
    uint64_t v117 = (uint64_t)v53;
    outlined init with take of ReferenceResolutionClientProtocol(&v133, (uint64_t)v135);
    uint64_t v56 = a2 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
    swift_beginAccess();
    uint64_t v57 = v127;
    uint64_t v116 = *(void (**)(void *, uint64_t, uint64_t))(v127 + 16);
    v116(v122, v56, v55);
    uint64_t v58 = *MEMORY[0x1E4FA2428];
    os_log_type_t v115 = *(void (**)(uint8_t *, uint64_t, uint64_t))(v57 + 104);
    v115(v123, v58, v55);
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, MEMORY[0x1E4FA2460]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v131 == v129 && v132 == v130) {
      char v59 = 1;
    }
    else {
      char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v68 = v126;
    uint64_t v69 = v127 + 8;
    uint64_t v70 = *(void (**)(uint8_t *, uint64_t))(v127 + 8);
    v70(v123, v126);
    uint64_t v127 = v69;
    v70(v122, v68);
    if ((v59 & 1) == 0)
    {
      unint64_t v71 = v114;
      v116(v114, v56, v68);
      v115(v118, *MEMORY[0x1E4FA2450], v68);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v131 == v129 && v132 == v130)
      {
        swift_bridgeObjectRelease_n();
        v70(v118, v68);
        v70(v71, v68);
      }
      else
      {
        char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v70(v118, v68);
        v70(v71, v68);
        if ((v72 & 1) == 0)
        {
          unint64_t v122 = (uint8_t *)RequestMessageBase.requestId.getter();
          uint64_t v118 = v89;
          uint64_t v125 = a4[10];
          uint64_t v123 = (uint8_t *)a4[11];
          unint64_t v90 = (char *)a4 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
          uint64_t v91 = type metadata accessor for UUID();
          uint64_t v92 = *(void *)(v91 - 8);
          uint64_t v93 = (uint64_t)v112;
          (*(void (**)(unsigned char *, char *, uint64_t))(v92 + 16))(v112, v90, v91);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v92 + 56))(v93, 0, 1, v91);
          char v94 = *((unsigned char *)a4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled);
          uint64_t v95 = (objc_class *)type metadata accessor for StartExecutionTurn();
          uint64_t v96 = objc_allocWithZone(v95);
          uint64_t v97 = (uint8_t **)&v96[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId];
          uint64_t v98 = v118;
          *uint64_t v97 = v122;
          v97[1] = v98;
          uint64_t v99 = (NSObject **)&v96[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId];
          uint64_t v100 = v123;
          *uint64_t v99 = v125;
          v99[1] = v100;
          outlined init with copy of ReferenceResolutionClientProtocol?(v93, (uint64_t)&v96[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_sessionId], (uint64_t *)&demangling cache variable for type metadata for UUID?);
          v96[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isTapToEdit] = v111 & 1;
          v96[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isMUXEnabled] = v94;
          v128.receiver = v96;
          v128.super_class = v95;
          swift_bridgeObjectRetain();
          id v101 = objc_msgSendSuper2(&v128, sel_init);
          outlined destroy of ReferenceResolutionClientProtocol?(v93, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          uint64_t v102 = *(void *)((char *)a4
                           + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient
                           + 24);
          uint64_t v103 = *(void *)((char *)a4
                           + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient
                           + 32);
          __swift_project_boxed_opaque_existential_1((void *)((char *)a4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient), v102);
          (*(void (**)(id, void, _UNKNOWN **, uint64_t, uint64_t))(v103 + 8))(v101, *(void *)((char *)a4+ OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionBridgeProcessorDelegate), &protocol witness table for ConversationBridgeProcessorDelegate, v102, v103);
          uint64_t v73 = v101;
          os_log_type_t v104 = Logger.logObject.getter();
          os_log_type_t v105 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v104, v105))
          {
            unint64_t v106 = (uint8_t *)swift_slowAlloc();
            unint64_t v122 = (uint8_t *)swift_slowAlloc();
            uint64_t v125 = v104;
            uint64_t v123 = v106;
            *(_DWORD *)unint64_t v106 = 138412290;
            uint64_t v118 = v106 + 4;
            uint64_t v131 = v73;
            uint64_t v107 = v73;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            uint64_t v108 = v122;
            *(void *)unint64_t v122 = v73;

            uint64_t v73 = v125;
            uint64_t v109 = v123;
            _os_log_impl(&dword_1B9C64000, v125, v105, "Successfully sent: %@", v123, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x1BA9E48C0](v108, -1, -1);
            MEMORY[0x1BA9E48C0](v109, -1, -1);
          }
          else
          {
          }
          uint64_t v68 = v126;
          goto LABEL_29;
        }
      }
    }
    uint64_t v73 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v75 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v75 = 0;
      _os_log_impl(&dword_1B9C64000, v73, v74, "Not sending StartExecutionTurn for Understanding-on-server use case", v75, 2u);
      MEMORY[0x1BA9E48C0](v75, -1, -1);
    }
LABEL_29:
    uint64_t v76 = v120;
    unint64_t v77 = v119;

    v116(v77, v56, v68);
    v115(v76, *MEMORY[0x1E4FA2438], v68);
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2(&lazy protocol witness table cache variable for type RequestType and conformance RequestType, MEMORY[0x1E4FA2460]);
    char v78 = dispatch thunk of static Equatable.== infix(_:_:)();
    v70(v76, v68);
    v70(v77, v68);
    if (v78)
    {
      uint64_t v79 = Logger.logObject.getter();
      os_log_type_t v80 = static os_log_type_t.debug.getter();
      BOOL v81 = os_log_type_enabled(v79, v80);
      uint64_t v82 = v121;
      uint64_t v83 = (void *)v117;
      uint64_t v84 = v113;
      if (v81)
      {
        uint64_t v85 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v85 = 0;
        _os_log_impl(&dword_1B9C64000, v79, v80, "Not updating server context for StartLocalRequest", v85, 2u);
        MEMORY[0x1BA9E48C0](v85, -1, -1);
      }

      if (!v83) {
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v86 = v136;
      uint64_t v87 = v137;
      __swift_project_boxed_opaque_existential_1(v135, v136);
      (*(void (**)(uint64_t, uint64_t))(v87 + 24))(v86, v87);
      uint64_t v82 = v121;
      uint64_t v83 = (void *)v117;
      uint64_t v84 = v113;
      if (!v117)
      {
LABEL_36:
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v135);
        return;
      }
    }
    id v88 = v83;
    ConversationRequestProcessor.sendRequestContextData(_:turn:candidateRequestMessages:)(v88, v82, v84);

    goto LABEL_36;
  }
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v133, &demangling cache variable for type metadata for ContextUpdating?);
  uint64_t v60 = v125;
  uint64_t v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v61, v62))
  {
    uint64_t v63 = swift_slowAlloc();
    uint64_t v117 = (uint64_t)v53;
    unint64_t v64 = (uint8_t *)v63;
    uint64_t v65 = swift_slowAlloc();
    v135[0] = v65;
    *(_DWORD *)unint64_t v64 = 136315138;
    uint64_t v66 = RequestMessageBase.requestId.getter();
    *(void *)&long long v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v61, v62, "Cannot handle request as contextUpdater is nil. requestId: %s", v64, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v65, -1, -1);
    id v53 = (id)v117;
    MEMORY[0x1BA9E48C0](v64, -1, -1);
  }
  else
  {
  }
  (*(void (**)(unint64_t, unint64_t, void, void, uint64_t, void (*)(uint8_t *, uint64_t, uint64_t), void, void))(**(void **)((char *)a4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil) + 152))(0xD000000000000024, 0x80000001BA0664C0, a4[10], a4[11], v40, (void (*)(uint8_t *, uint64_t, uint64_t))v116, 0, 0);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  BOOL v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  char v43;
  uint64_t v44;
  void *started;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  id v50;
  id v51;
  void *v52;
  uint64_t v53;
  void (*v54)(os_log_t, void *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  char v57;
  id v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(NSObject *, uint64_t);
  os_log_t v69;
  char v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  NSObject *v74;
  NSObject *v75;
  char v76;
  NSObject *v77;
  os_log_type_t v78;
  BOOL v79;
  void *v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  NSObject *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  objc_class *v95;
  unsigned char *v96;
  void *v97;
  NSObject **v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  NSObject *v105;
  NSObject *v106;
  NSObject *p_isa;
  os_log_t v108;
  uint8_t *v109;
  unsigned char v110[4];
  int v111;
  unsigned char *v112;
  uint64_t v113;
  os_log_t v114;
  void (*v115)(NSObject *, uint64_t, uint64_t);
  void (*v116)(os_log_t, void *, uint64_t);
  void *v117;
  uint64_t v118;
  NSObject *v119;
  NSObject *v120;
  NSObject *v121;
  uint64_t v122;
  uint64_t v123;
  uint8_t *v124;
  NSObject *v125;
  uint64_t v126;
  uint64_t v127;
  objc_super v128;
  NSObject *v129;
  uint64_t v130;
  NSObject *v131;
  uint64_t v132;
  long long v133;
  uint64_t v134;
  uint64_t v135[3];
  uint64_t v136;
  uint64_t v137;

  int v111 = a3;
  unint64_t v122 = a2;
  id v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v112 = &v110[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for RequestType();
  uint64_t v127 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v121 = &v110[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = &v110[-v12];
  unint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v119 = &v110[-v15];
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  int v114 = (os_log_t)&v110[-v17];
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v125 = &v110[-v19];
  MEMORY[0x1F4188790](v18);
  uint64_t v124 = &v110[-v20];
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = __swift_project_value_buffer(v21, (uint64_t)static Logger.conversationBridge);
  uint64_t v23 = a1;
  swift_retain_n();
  uint64_t v24 = v23;
  id v25 = Logger.logObject.getter();
  uint64_t v26 = static os_log_type_t.debug.getter();
  os_log_t v27 = os_log_type_enabled(v25, v26);
  uint64_t v126 = v8;
  uint64_t v120 = v13;
  uint64_t v123 = v22;
  if (v27)
  {
    os_log_type_t v28 = swift_slowAlloc();
    BOOL v29 = (void *)swift_slowAlloc();
    uint64_t v117 = v29;
    uint64_t v118 = swift_slowAlloc();
    v135[0] = v118;
    *(_DWORD *)os_log_type_t v28 = 138412802;
    *(void *)&long long v133 = v24;
    uint64_t v30 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *BOOL v29 = v24;

    *(_WORD *)(v28 + 12) = 2080;
    uint64_t v31 = RequestMessageBase.requestId.getter();
    *(void *)&long long v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 22) = 2080;
    type metadata accessor for UUID();
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v25, v26, "ConversationBridge handling message: %@, requestId: %s, sessionId: %s", (uint8_t *)v28, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v35 = v117;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v35, -1, -1);
    unint64_t v36 = v118;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v36, -1, -1);
    MEMORY[0x1BA9E48C0](v28, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v37 = *(void *)((char *)a4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_selfReflectionAgent);
  (*(void (**)(void))(*(void *)v37 + 376))();
  os_log_type_t v39 = a4[8];
  uint64_t v38 = (void *)a4[9];
  uint64_t v40 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v37 + 384))(v39, v38);
  uint64_t v41 = (*(uint64_t (**)(uint64_t))(*a4 + 384))(v40);
  char v44 = v41;
  uint64_t v117 = v38;
  if (v43)
  {
    outlined consume of ConversationRequestProcessor.State(v41, v42, v43);
    char v44 = MEMORY[0x1E4FBC860];
  }
  uint64_t started = (void *)StartIFRequestMessage.requestContextData.getter();
  uint64_t v46 = a4[12];
  uint64_t v47 = a4[13];
  swift_bridgeObjectRetain();
  uint64_t v48 = ConversationRequestProcessor.didPreviouslyFallbackToServer(forUserId:)();
  uint64_t v49 = *(void *)((char *)a4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_muxContextMessage);
  if (v49) {
    LOBYTE(v49) = MUXContextMessage.isRMVEnabled.getter();
  }
  uint64_t v50 = v24;
  char v51 = specialized RequestContextData.__allocating_init(startRequest:assistantId:didPreviouslyFallbackToServer:isRecognizeMyVoiceEnabled:)(v50, v46, v47, v48 & 1, v49 & 1);

  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)a4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater, (uint64_t)&v133, &demangling cache variable for type metadata for ContextUpdating?);
  if (!v134)
  {
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v133, &demangling cache variable for type metadata for ContextUpdating?);
    uint64_t v58 = v50;
    char v59 = Logger.logObject.getter();
    uint64_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v62 = swift_slowAlloc();
      uint64_t v118 = (uint64_t)v51;
      uint64_t v63 = v62;
      v135[0] = v62;
      *(_DWORD *)uint64_t v61 = 136315138;
      unint64_t v64 = RequestMessageBase.requestId.getter();
      *(void *)&long long v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v59, v60, "Cannot handle request as contextUpdater is nil. requestId: %s", v61, 0xCu);
      swift_arrayDestroy();
      char v51 = (id)v118;
      MEMORY[0x1BA9E48C0](v63, -1, -1);
      MEMORY[0x1BA9E48C0](v61, -1, -1);
    }
    else
    {
    }
    (*(void (**)(unint64_t, unint64_t, void, void, uint64_t, void *, void, void))(**(void **)((char *)a4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil) + 152))(0xD000000000000024, 0x80000001BA0664C0, a4[10], a4[11], v39, v117, 0, 0);

    return;
  }
  uint64_t v113 = v44;
  uint64_t v118 = (uint64_t)v51;
  outlined init with take of ReferenceResolutionClientProtocol(&v133, (uint64_t)v135);
  uint64_t v52 = (void *)(v122 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType);
  swift_beginAccess();
  id v53 = v127;
  unint64_t v54 = *(void (**)(os_log_t, void *, uint64_t))(v127 + 16);
  uint64_t v117 = v52;
  uint64_t v55 = v126;
  uint64_t v116 = v54;
  v54((os_log_t)v124, v52, v126);
  uint64_t v56 = *MEMORY[0x1E4FA2428];
  os_log_type_t v115 = *(void (**)(NSObject *, uint64_t, uint64_t))(v53 + 104);
  v115(v125, v56, v55);
  _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, MEMORY[0x1E4FA2460]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v131 == v129 && v132 == v130) {
    uint64_t v57 = 1;
  }
  else {
    uint64_t v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v66 = v126;
  unint64_t v67 = v127 + 8;
  uint64_t v68 = *(void (**)(NSObject *, uint64_t))(v127 + 8);
  v68(v125, v126);
  uint64_t v127 = v67;
  v68(v124, v66);
  if (v57) {
    goto LABEL_24;
  }
  uint64_t v69 = v114;
  v116(v114, v117, v66);
  v115(v119, *MEMORY[0x1E4FA2450], v66);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v131 == v129 && v132 == v130)
  {
    swift_bridgeObjectRelease_n();
    v68(v119, v66);
    v68(v69, v66);
    goto LABEL_24;
  }
  uint64_t v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v68(v119, v66);
  v68(v69, v66);
  if (v70)
  {
LABEL_24:
    unint64_t v71 = Logger.logObject.getter();
    char v72 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v73 = 0;
      _os_log_impl(&dword_1B9C64000, v71, v72, "Not sending StartExecutionTurn for Understanding-on-server use case", v73, 2u);
      MEMORY[0x1BA9E48C0](v73, -1, -1);
    }
    goto LABEL_26;
  }
  uint64_t v86 = (uint8_t *)RequestMessageBase.requestId.getter();
  id v88 = v87;
  uint64_t v89 = a4[10];
  unint64_t v90 = a4[11];
  uint64_t v124 = v86;
  uint64_t v125 = v89;
  uint64_t v91 = (char *)a4 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v92 = type metadata accessor for UUID();
  uint64_t v93 = *(void *)(v92 - 8);
  char v94 = (uint64_t)v112;
  (*(void (**)(unsigned char *, char *, uint64_t))(v93 + 16))(v112, v91, v92);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v93 + 56))(v94, 0, 1, v92);
  LOBYTE(v93) = *((unsigned char *)a4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled);
  uint64_t v95 = (objc_class *)type metadata accessor for StartExecutionTurn();
  uint64_t v96 = objc_allocWithZone(v95);
  uint64_t v97 = &v96[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId];
  *uint64_t v97 = v124;
  v97[1] = v88;
  uint64_t v98 = (NSObject **)&v96[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId];
  uint8_t *v98 = v125;
  v98[1] = v90;
  outlined init with copy of ReferenceResolutionClientProtocol?(v94, (uint64_t)&v96[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_sessionId], (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v96[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isTapToEdit] = v111 & 1;
  v96[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isMUXEnabled] = v93;
  v128.receiver = v96;
  v128.super_class = v95;
  swift_bridgeObjectRetain();
  uint64_t v99 = objc_msgSendSuper2(&v128, sel_init);
  outlined destroy of ReferenceResolutionClientProtocol?(v94, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v100 = *(void *)((char *)a4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient + 24);
  id v101 = *(void *)((char *)a4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient + 32);
  __swift_project_boxed_opaque_existential_1((void *)((char *)a4 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient), v100);
  (*(void (**)(id, void, _UNKNOWN **, uint64_t, uint64_t))(v101 + 8))(v99, *(void *)((char *)a4+ OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionBridgeProcessorDelegate), &protocol witness table for ConversationBridgeProcessorDelegate, v100, v101);
  unint64_t v71 = v99;
  uint64_t v102 = Logger.logObject.getter();
  uint64_t v103 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v102, v103))
  {
    os_log_type_t v104 = (uint8_t *)swift_slowAlloc();
    uint64_t v119 = swift_slowAlloc();
    uint64_t v124 = v104;
    *(_DWORD *)os_log_type_t v104 = 138412290;
    uint64_t v131 = v71;
    os_log_type_t v105 = v71;
    int v114 = v102;
    unint64_t v106 = v105;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    p_Class isa = &v119->isa;
    v119->Class isa = (Class)v71;
    uint64_t v125 = v106;

    uint64_t v108 = v114;
    uint64_t v109 = v124;
    _os_log_impl(&dword_1B9C64000, v114, v103, "Successfully sent: %@", v124, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](p_isa, -1, -1);
    MEMORY[0x1BA9E48C0](v109, -1, -1);

    unint64_t v71 = v108;
  }
  else
  {
  }
  uint64_t v66 = v126;
LABEL_26:
  os_log_type_t v74 = v121;
  uint64_t v75 = v120;

  v116(v75, v117, v66);
  v115(v74, *MEMORY[0x1E4FA2438], v66);
  _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2(&lazy protocol witness table cache variable for type RequestType and conformance RequestType, MEMORY[0x1E4FA2460]);
  uint64_t v76 = dispatch thunk of static Equatable.== infix(_:_:)();
  v68(v74, v66);
  v68(v75, v66);
  if (v76)
  {
    unint64_t v77 = Logger.logObject.getter();
    char v78 = static os_log_type_t.debug.getter();
    uint64_t v79 = os_log_type_enabled(v77, v78);
    os_log_type_t v80 = (void *)v118;
    if (v79)
    {
      BOOL v81 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v81 = 0;
      _os_log_impl(&dword_1B9C64000, v77, v78, "Not updating server context for StartLocalRequest", v81, 2u);
      MEMORY[0x1BA9E48C0](v81, -1, -1);
    }
  }
  else
  {
    uint64_t v82 = v136;
    uint64_t v83 = v137;
    __swift_project_boxed_opaque_existential_1(v135, v136);
    (*(void (**)(uint64_t, uint64_t))(v83 + 24))(v82, v83);
    os_log_type_t v80 = (void *)v118;
  }
  uint64_t v84 = v113;
  if (v80)
  {
    uint64_t v85 = v80;
    ConversationRequestProcessor.sendRequestContextData(_:turn:candidateRequestMessages:)(v85, v122, v84);
  }
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v135);
}

id specialized RequestContextData.__allocating_init(startRequest:assistantId:didPreviouslyFallbackToServer:isRecognizeMyVoiceEnabled:)(void *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v65 = a5;
  int v66 = a4;
  uint64_t v67 = a2;
  uint64_t v68 = a3;
  uint64_t v6 = type metadata accessor for RequestPositionInSession();
  uint64_t v61 = *(void *)(v6 - 8);
  uint64_t v62 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v63 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Restrictions();
  MEMORY[0x1F4188790](v8 - 8);
  unint64_t v64 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v70 = (uint64_t)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseMode?);
  MEMORY[0x1F4188790](v12 - 8);
  unint64_t v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ResponseMode();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v69 = (uint64_t)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v23 = (char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for InputOrigin();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  os_log_t v27 = (char *)&v49 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v71 = a1;
  uint64_t started = StartRequestMessageBase.optionalRequestContextData.getter();
  if (started)
  {
    BOOL v29 = (void *)started;
    StartRequestMessageBase.inputOrigin.getter();
    uint64_t v30 = InputOrigin.aceInputOrigin.getter();
    uint64_t v57 = v31;
    uint64_t v58 = v30;
    (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
    RequestContextData.audioSource.getter();
    AudioSource.init(aceValue:)();
    RequestContextData.audioDestination.getter();
    AudioDestination.init(aceValue:)();
    RequestContextData.responseMode.getter();
    ResponseMode.init(aceValue:)();
    int v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
    char v59 = v23;
    uint64_t v60 = v20;
    if (v32 == 1)
    {
      static ResponseMode.displayForward.getter();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for ResponseMode?);
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v69, v14, v15);
    }
    int v56 = RequestContextData.isEyesFree.getter();
    type metadata accessor for StartDirectActionRequestMessage();
    BOOL v55 = swift_dynamicCastClass() != 0;
    int v54 = RequestContextData.isVoiceTriggerEnabled.getter();
    int v53 = RequestContextData.isTextToSpeechEnabled.getter();
    uint64_t v52 = RequestContextData.bargeInModes.getter();
    RequestContextData.approximatePreviousTTSInterval.getter();
    RequestContextData.deviceRestrictions.getter();
    uint64_t v38 = (uint64_t)v64;
    Restrictions.init(aceValue:)();
    int v51 = RequestContextData.isTriggerlessFollowup.getter();
    type metadata accessor for StartSpeechRequestMessage();
    BOOL v50 = swift_dynamicCastClass() != 0;
    uint64_t v49 = RequestContextData.voiceTriggerEventInfo.getter();
    int v39 = RequestContextData.voiceAudioSessionId.getter();
    char v40 = RequestContextData.isSystemApertureEnabled.getter() & 1;
    char v41 = RequestContextData.isLiveActivitiesSupported.getter() & 1;
    char v42 = RequestContextData.isInAmbient.getter() & 1;
    uint64_t v43 = RequestContextData.conjunctionInfo.getter();
    char v44 = RequestContextData.isDeviceShowingLockScreen.getter();
    char v45 = RequestContextData.isDeviceLocked.getter();
    uint64_t v46 = (uint64_t)v63;
    (*(void (**)(char *, void, uint64_t))(v61 + 104))(v63, *MEMORY[0x1E4F9FD40], v62);
    id v47 = objc_allocWithZone((Class)type metadata accessor for RequestContextData(0));
    id v37 = RequestContextData.init(inputOrigin:audioSource:audioDestination:responseMode:isEyesFree:isDirectAction:isVoiceTriggerEnabled:isTextToSpeechEnabled:peerInfo:endpointInfo:instanceInfo:bargeInModes:approximatePreviousTTSInterval:restrictions:originatingHome:currentDeviceAssistantId:isTriggerlessFollowup:didPreviouslyFallbackToServer:isSpeechRequest:isUserOnActivePhoneCall:voiceTriggerEventInfo:isRecognizeMyVoiceEnabled:voiceAudioSessionId:isSystemApertureEnabled:isLiveActivitiesSupported:isInAmbient:positionInSession:conjunctionInfo:isDeviceShowingLockScreen:isDeviceLocked:)(v58, v57, (uint64_t)v59, (uint64_t)v60, v69, v56 & 1, v55, v54 & 1, v53 & 1, 0, 0, 0, v52, v70, v38, 0, v67, v68, v51 & 1,
            v66 & 1,
            v50,
            0,
            v49,
            v65 & 1,
            v39,
            v40,
            v41,
            v42,
            v46,
            v43,
            v44 & 1,
            v45 & 1);
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.executor);
    unint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      unint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v36 = 0;
      _os_log_impl(&dword_1B9C64000, v34, v35, "RequestContextData.init(startSpeechRequest: StartSpeechRequestMessage) - missing requestContextData", v36, 2u);
      MEMORY[0x1BA9E48C0](v36, -1, -1);
    }

    return 0;
  }
  return v37;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void *started;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  char v34;
  char v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  id v40;
  id v41;
  BOOL v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  uint64_t v57 = a5;
  uint64_t v58 = a4;
  char v59 = a3;
  uint64_t v60 = a2;
  uint64_t v6 = type metadata accessor for RequestPositionInSession();
  int v54 = *(void *)(v6 - 8);
  BOOL v55 = v6;
  MEMORY[0x1F4188790](v6);
  int v56 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Restrictions();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v62 = (uint64_t)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1F4188790](v10 - 8);
  unint64_t v64 = (uint64_t)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseMode?);
  MEMORY[0x1F4188790](v12 - 8);
  unint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ResponseMode();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v63 = (uint64_t)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v23 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for InputOrigin();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  os_log_t v27 = (char *)&v43 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t started = (void *)StartIFRequestMessage.requestContextData.getter();
  uint64_t v61 = a1;
  StartIFRequestMessage.inputOrigin.getter();
  BOOL v29 = InputOrigin.aceInputOrigin.getter();
  BOOL v50 = v30;
  int v51 = v29;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  RequestContextData.audioSource.getter();
  uint64_t v52 = v23;
  AudioSource.init(aceValue:)();
  RequestContextData.audioDestination.getter();
  int v53 = v20;
  AudioDestination.init(aceValue:)();
  RequestContextData.responseMode.getter();
  ResponseMode.init(aceValue:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    static ResponseMode.displayForward.getter();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for ResponseMode?);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v63, v14, v15);
  }
  uint64_t v49 = RequestContextData.isEyesFree.getter();
  type metadata accessor for StartDirectActionRequestMessage();
  uint64_t v48 = swift_dynamicCastClass() != 0;
  id v47 = RequestContextData.isVoiceTriggerEnabled.getter();
  uint64_t v46 = RequestContextData.isTextToSpeechEnabled.getter();
  char v45 = RequestContextData.bargeInModes.getter();
  RequestContextData.approximatePreviousTTSInterval.getter();
  RequestContextData.deviceRestrictions.getter();
  Restrictions.init(aceValue:)();
  char v44 = RequestContextData.isTriggerlessFollowup.getter();
  type metadata accessor for StartSpeechRequestMessage();
  uint64_t v43 = swift_dynamicCastClass() != 0;
  uint64_t v31 = RequestContextData.voiceTriggerEventInfo.getter();
  int v32 = RequestContextData.voiceAudioSessionId.getter();
  uint64_t v33 = RequestContextData.isSystemApertureEnabled.getter() & 1;
  unint64_t v34 = RequestContextData.isLiveActivitiesSupported.getter() & 1;
  os_log_type_t v35 = RequestContextData.isInAmbient.getter() & 1;
  unint64_t v36 = RequestContextData.conjunctionInfo.getter();
  id v37 = RequestContextData.isDeviceShowingLockScreen.getter();
  uint64_t v38 = RequestContextData.isDeviceLocked.getter();
  int v39 = (uint64_t)v56;
  (*(void (**)(char *, void, uint64_t))(v54 + 104))(v56, *MEMORY[0x1E4F9FD40], v55);
  char v40 = objc_allocWithZone((Class)type metadata accessor for RequestContextData(0));
  char v41 = RequestContextData.init(inputOrigin:audioSource:audioDestination:responseMode:isEyesFree:isDirectAction:isVoiceTriggerEnabled:isTextToSpeechEnabled:peerInfo:endpointInfo:instanceInfo:bargeInModes:approximatePreviousTTSInterval:restrictions:originatingHome:currentDeviceAssistantId:isTriggerlessFollowup:didPreviouslyFallbackToServer:isSpeechRequest:isUserOnActivePhoneCall:voiceTriggerEventInfo:isRecognizeMyVoiceEnabled:voiceAudioSessionId:isSystemApertureEnabled:isLiveActivitiesSupported:isInAmbient:positionInSession:conjunctionInfo:isDeviceShowingLockScreen:isDeviceLocked:)(v51, v50, (uint64_t)v52, (uint64_t)v53, v63, v49 & 1, v48, v47 & 1, v46 & 1, 0, 0, 0, v45, v64, v62, 0, v60, v59, v44 & 1,
          v58 & 1,
          v43,
          0,
          v31,
          v57 & 1,
          v32,
          v33,
          v34,
          v35,
          v39,
          v36,
          v37 & 1,
          v38 & 1);

  return v41;
}

uint64_t specialized SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v20 = type metadata accessor for TrialExperimentationAssetManager();
  uint64_t v21 = &protocol witness table for TrialExperimentationAssetManager;
  *(void *)&long long v19 = a5;
  type metadata accessor for TaggingService();
  swift_allocObject();
  *(void *)(a8 + 104) = TaggingService.init()();
  *(void *)(a8 + 144) = 0;
  *(_OWORD *)(a8 + 128) = 0u;
  *(_OWORD *)(a8 + 112) = 0u;
  *(void *)(a8 + 16) = a1;
  *(void *)(a8 + 24) = a2;
  *(void *)(a8 + 32) = a3;
  *(unsigned char *)(a8 + 40) = a4;
  outlined init with take of ReferenceResolutionClientProtocol(&v19, a8 + 48);
  swift_beginAccess();
  *(void *)(a8 + 128) = 0;
  swift_release();
  swift_beginAccess();
  uint64_t v16 = *(void **)(a8 + 136);
  *(void *)(a8 + 136) = 0;

  swift_beginAccess();
  uint64_t v17 = *(void **)(a8 + 144);
  *(void *)(a8 + 144) = 0;

  *(_WORD *)(a8 + 156) = 514;
  *(_DWORD *)(a8 + 152) = 33686018;
  *(void *)(a8 + 160) = 0;
  *(unsigned char *)(a8 + 168) = 1;
  *(void *)(a8 + 176) = 0;
  *(_WORD *)(a8 + 184) = 513;
  *(void *)(a8 + 192) = 0;
  *(void *)(a8 + 200) = 0;
  *(_DWORD *)(a8 + 208) = 33686018;
  *(_WORD *)(a8 + 212) = 514;
  *(void *)(a8 + 216) = 0;
  *(unsigned char *)(a8 + 224) = 1;
  *(void *)(a8 + 232) = 0;
  *(_WORD *)(a8 + 240) = 513;
  *(void *)(a8 + 248) = 0;
  *(void *)(a8 + 256) = 0;
  *(void *)(a8 + 88) = a6;
  *(unsigned char *)(a8 + 264) = 0;
  *(unsigned char *)(a8 + 96) = a7;
  return a8;
}

uint64_t specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:muxContextMessage:messagePublisher:selfReflection:featureChecker:)(uint64_t a1, char a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v20 = type metadata accessor for FeatureChecker();
  uint64_t v21 = &protocol witness table for FeatureChecker;
  *(void *)&long long v19 = a6;
  type metadata accessor for ConcurrentTaskPool();
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = MEMORY[0x1E4FBC860];
  *(void *)(v14 + 16) = MEMORY[0x1E4FBC860];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v16 = swift_allocObject();
  *(_DWORD *)(v16 + 16) = 0;
  *(void *)(v14 + 24) = v16;
  *(void *)(a7 + 16) = v14;
  *(void *)(a7 + 88) = 0;
  *(void *)(a7 + 80) = 0;
  *(void *)(a7 + 96) = specialized Dictionary.init(dictionaryLiteral:)(v15);
  *(void *)(a7 + 104) = 30000000000;
  *(void *)(a7 + 24) = a1;
  *(unsigned char *)(a7 + 72) = a2;
  swift_beginAccess();
  uint64_t v17 = *(void **)(a7 + 80);
  *(void *)(a7 + 80) = a3;

  outlined init with take of ReferenceResolutionClientProtocol(a4, a7 + 32);
  swift_beginAccess();
  *(void *)(a7 + 88) = a5;
  swift_release();
  outlined init with take of ReferenceResolutionClientProtocol(&v19, a7 + 112);
  return a7;
}

uint64_t specialized closure #1 in ConversationRequestProcessor.handleTRPCandidateRequestMessage(_:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1F4188790](v2 - 8);
  unint64_t v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExecutionLocation?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UserID();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ResultCandidateType(0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (uint64_t *)((char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for TRPContext();
  swift_allocObject();
  id v17 = TRPContext.init(requestMessage:)(a1);
  if (!v17) {
    return 0;
  }
  id v18 = v17;
  uint64_t v26 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
  uint64_t v20 = v19;
  *uint64_t v16 = v18;
  swift_storeEnumTagMultiPayload();
  swift_retain();
  TRPCandidateRequestMessageBase.userId.getter();
  uint64_t v21 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v10, 1, 1, v21);
  static ExecutionLocation.device.getter();
  uint64_t v22 = type metadata accessor for ExecutionLocation();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v7, 0, 1, v22);
  uint64_t v23 = type metadata accessor for ServerFallbackReason();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v4, 1, 1, v23);
  type metadata accessor for ResultCandidateState(0);
  swift_allocObject();
  char v28 = 1;
  char v27 = 1;
  uint64_t v24 = ResultCandidateState.init(withResultCandidateId:resultCandidateType:userId:voiceIdScore:voiceIdClassification:lowScoreThreshold:fallbackParse:asrLocation:serverFallbackReason:meetsUserSessionThreshold:meetsPersonalRequestThreshold:)(v26, v20, (uint64_t)v16, (uint64_t)v13, 0x100000000, 0, 1, 0x100000000, (uint64_t)v10, (uint64_t)v7, (uint64_t)v4, 2u, 2u);
  swift_release();
  return v24;
}

void specialized ConversationRequestProcessor.handleCandidateMessage(_:rcId:expectedTypes:messageToCacheIfNotInActiveTurn:shouldUpdateExistingRCState:createResultCandidateState:)(void *a1, void (*a2)(char *, uint8_t *, uint64_t), uint64_t a3, uint64_t a4, id a5, int a6, void (*a7)(char *, uint64_t), void *a8)
{
  uint64_t v120 = a8;
  uint64_t v127 = a3;
  objc_super v128 = a7;
  int v118 = a6;
  uint64_t v126 = a2;
  uint64_t v11 = type metadata accessor for UUID();
  Class isa = v11[-1].isa;
  os_log_t v124 = v11;
  MEMORY[0x1F4188790](v11);
  unint64_t v122 = (char *)&v113 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for RequestType();
  uint64_t v121 = *(void *)(v13 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v119 = (char *)&v113 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  id v18 = (char *)&v113 - v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v113 - v19;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = __swift_project_value_buffer(v21, (uint64_t)static Logger.conversationBridge);
  id v23 = a1;
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v125 = a4;
  if (v26)
  {
    char v27 = (uint8_t *)swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v117 = v13;
    int v114 = (void *)v28;
    os_log_type_t v115 = v27;
    id v116 = a5;
    *(_DWORD *)char v27 = 138412290;
    v130[0] = (uint64_t)v23;
    id v29 = v23;
    a5 = v116;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v30 = v114;
    void *v114 = v23;

    uint64_t v31 = v115;
    _os_log_impl(&dword_1B9C64000, v24, v25, "ConversationBridge handling message: %@", v115, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    int v32 = v30;
    uint64_t v13 = v117;
    MEMORY[0x1BA9E48C0](v32, -1, -1);
    MEMORY[0x1BA9E48C0](v31, -1, -1);
  }
  else
  {
  }
  uint64_t v33 = v23;
  if ((ConversationRequestProcessor.checkPrerequisitesAndMaybeCacheCandidateMessage(forRCInput:resultCandidateId:messageToCacheIfNotInActiveTurn:)(v23, (uint64_t)v126, v127, (uint64_t)a5) & 1) == 0)
  {
    id v40 = v23;
    char v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v41, v42))
    {

      return;
    }
    uint64_t v43 = swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    v130[0] = v44;
    *(_DWORD *)uint64_t v43 = 136315394;
    char v45 = v122;
    MessageBase.messageId.getter();
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    os_log_t v46 = v124;
    uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v49 = v48;
    (*((void (**)(char *, os_log_t))isa + 1))(v45, v46);
    uint64_t v131 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v43 + 12) = 2080;
    swift_getObjectType();
    uint64_t v50 = _typeName(_:qualified:)();
    uint64_t v131 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v41, v42, "Message id %s of type %s did not meet pre-requisites for handleCandidateMessage: Ignoring", (uint8_t *)v43, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v44, -1, -1);
    uint64_t v52 = v43;
LABEL_50:
    MEMORY[0x1BA9E48C0](v52, -1, -1);

    return;
  }
  uint64_t v34 = (*(uint64_t (**)(void))(*(void *)v128 + 592))();
  if (!v34)
  {
    id v53 = v23;
    swift_retain_n();
    id v54 = v53;
    char v41 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v41, v55))
    {

      swift_release_n();
      return;
    }
    uint64_t v56 = swift_slowAlloc();
    uint64_t v57 = swift_slowAlloc();
    v130[0] = v57;
    *(_DWORD *)uint64_t v56 = 136315394;
    swift_getObjectType();
    uint64_t v58 = _typeName(_:qualified:)();
    uint64_t v131 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v60 = swift_bridgeObjectRelease();
    *(_WORD *)(v56 + 12) = 2080;
    uint64_t v61 = (*(uint64_t (**)(uint64_t))(*(void *)v128 + 384))(v60);
    switch(v63)
    {
      case 1:
        outlined consume of ConversationRequestProcessor.State(v61, (void *)v62, 1);
        uint64_t v64 = 0xD00000000000001DLL;
        int v65 = "awaiting request context data";
        goto LABEL_41;
      case 2:
        outlined consume of ConversationRequestProcessor.State(v61, (void *)v62, 2);
        unint64_t v111 = 0xEC00000064657472;
        uint64_t v64 = 0x617473206E727574;
        break;
      case 3:
        if (v61 | v62) {
          uint64_t v64 = 0x6574656C706D6F63;
        }
        else {
          uint64_t v64 = 1701602409;
        }
        if (v61 | v62) {
          unint64_t v111 = 0xE800000000000000;
        }
        else {
          unint64_t v111 = 0xE400000000000000;
        }
        break;
      default:
        uint64_t v64 = 0xD000000000000011;
        outlined consume of ConversationRequestProcessor.State(v61, (void *)v62, 0);
        int v65 = "candidate request";
LABEL_41:
        unint64_t v111 = (unint64_t)(v65 - 32) | 0x8000000000000000;
        break;
    }
    uint64_t v131 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v111, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v41, v55, "Got %s when in state %s: Ignoring", (uint8_t *)v56, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v57, -1, -1);
    uint64_t v52 = v56;
    goto LABEL_50;
  }
  uint64_t v35 = v34;
  unint64_t v36 = (uint64_t *)(v34 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  uint64_t v38 = *(void *)(v34 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  uint64_t v37 = *(void *)(v34 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8);
  swift_bridgeObjectRetain();
  id v116 = v33;
  if (v38 == RequestMessageBase.requestId.getter() && v37 == v39)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v66 & 1) == 0)
    {
      id v78 = v116;
      swift_retain_n();
      id v79 = v78;
      os_log_type_t v80 = Logger.logObject.getter();
      os_log_type_t v81 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v80, v81))
      {
        uint64_t v82 = swift_slowAlloc();
        uint64_t v83 = swift_slowAlloc();
        v130[0] = v83;
        *(_DWORD *)uint64_t v82 = 136315650;
        swift_getObjectType();
        uint64_t v84 = _typeName(_:qualified:)();
        uint64_t v131 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, v130);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        uint64_t v117 = v35;
        *(_WORD *)(v82 + 12) = 2080;
        uint64_t v86 = RequestMessageBase.requestId.getter();
        uint64_t v131 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, v130);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v82 + 22) = 2080;
        uint64_t v88 = *v36;
        unint64_t v89 = v36[1];
        swift_bridgeObjectRetain();
        uint64_t v131 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v89, v130);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v80, v81, "%s request ID %s does not match this turn's: %s. Dropping it on the floor.", (uint8_t *)v82, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v83, -1, -1);
        MEMORY[0x1BA9E48C0](v82, -1, -1);
LABEL_37:
        swift_release();

        return;
      }

LABEL_39:
      swift_release_n();
      return;
    }
  }
  uint64_t v117 = v35;
  uint64_t v67 = (uint8_t *)(v35 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType);
  swift_beginAccess();
  uint64_t v68 = v121;
  uint64_t v69 = *(void (**)(char *, uint8_t *, uint64_t))(v121 + 16);
  v69(v20, v67, v13);
  uint64_t v70 = v125;
  uint64_t v71 = *(void *)(v125 + 16);
  uint64_t v126 = v69;
  uint64_t v127 = v71;
  os_log_type_t v115 = v67;
  if (!v71)
  {
    uint64_t v75 = *(void (**)(char *, uint64_t))(v68 + 8);
    uint64_t v76 = (v68 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    id v77 = v116;
    v75(v20, v13);
LABEL_35:
    id v96 = v77;
    swift_retain_n();
    id v97 = v96;
    uint64_t v98 = v76;
    uint64_t v99 = Logger.logObject.getter();
    os_log_type_t v100 = static os_log_type_t.error.getter();
    int v101 = v100;
    if (os_log_type_enabled(v99, v100))
    {
      uint64_t v102 = swift_slowAlloc();
      uint64_t v103 = (void *)swift_slowAlloc();
      uint64_t v127 = swift_slowAlloc();
      uint64_t v131 = v127;
      *(_DWORD *)uint64_t v102 = 138412546;
      LODWORD(v125) = v101;
      objc_super v128 = v75;
      uint64_t v129 = (uint64_t)v97;
      os_log_t v124 = v99;
      id v104 = v97;
      uint64_t v113 = v98;
      id v105 = v104;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v103 = v97;

      *(_WORD *)(v102 + 12) = 2080;
      unint64_t v106 = v119;
      v126(v119, v115, v13);
      uint64_t v107 = RequestType.rawValue.getter();
      unint64_t v109 = v108;
      v128(v106, v13);
      uint64_t v129 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v109, &v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_type_t v80 = v124;
      _os_log_impl(&dword_1B9C64000, v124, (os_log_type_t)v125, "%@ is not supported for this requestType: %s", (uint8_t *)v102, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v103, -1, -1);
      uint64_t v110 = v127;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v110, -1, -1);
      MEMORY[0x1BA9E48C0](v102, -1, -1);
      goto LABEL_37;
    }

    goto LABEL_39;
  }
  int v114 = (void *)v22;
  unint64_t v72 = (*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80);
  v69(v18, (uint8_t *)(v125 + v72), v13);
  uint64_t v73 = _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2(&lazy protocol witness table cache variable for type RequestType and conformance RequestType, MEMORY[0x1E4FA2460]);
  swift_bridgeObjectRetain();
  os_log_t v124 = v73;
  char v74 = dispatch thunk of static Equatable.== infix(_:_:)();
  objc_super v128 = *(void (**)(char *, uint64_t))(v68 + 8);
  v128(v18, v13);
  if ((v74 & 1) == 0)
  {
    Class isa = (Class)(v68 + 8);
    uint64_t v76 = (v68 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    if (v127 != 1)
    {
      uint64_t v113 = (v68 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      unint64_t v122 = *(char **)(v68 + 72);
      unint64_t v90 = &v122[v70 + v72];
      uint64_t v91 = 1;
      while (1)
      {
        v69(v18, (uint8_t *)v90, v13);
        uint64_t v92 = v13;
        uint64_t v93 = v91 + 1;
        if (__OFADD__(v91, 1))
        {
          __break(1u);
          JUMPOUT(0x1B9E58B44);
        }
        char v94 = dispatch thunk of static Equatable.== infix(_:_:)();
        v128(v18, v92);
        if (v94) {
          break;
        }
        ++v91;
        unint64_t v90 = &v122[(void)v90];
        BOOL v95 = v93 == v127;
        uint64_t v13 = v92;
        uint64_t v69 = v126;
        if (v95)
        {
          swift_bridgeObjectRelease();
          id v77 = v116;
          uint64_t v76 = v113;
          goto LABEL_34;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v13 = v92;
      goto LABEL_52;
    }
    swift_bridgeObjectRelease();
    id v77 = v116;
LABEL_34:
    uint64_t v75 = v128;
    v128(v20, v13);
    goto LABEL_35;
  }
  swift_bridgeObjectRelease();
LABEL_52:
  v128(v20, v13);
  uint64_t v112 = specialized closure #1 in ConversationRequestProcessor.handleTRPCandidateRequestMessage(_:)(v120);
  if (v112)
  {
    if (v118) {
      ConversationRequestProcessorTurnState.updateResultCandidateState(_:)(v112);
    }
    else {
      ConversationRequestProcessorTurnState.addResultCandidateState(_:)(v112);
    }
    swift_release();
  }
  swift_release();
}

uint64_t specialized ConversationRequestProcessor.makeResultCandidateState(from:asrOnServer:)(uint64_t a1, int a2)
{
  int v46 = a2;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v47 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExecutionLocation?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UserID();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ResultCandidateType(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (uint64_t *)((char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  uint64_t v44 = v17;
  uint64_t v45 = v16;
  id v18 = (void *)AsrResultCandidateMessage.speechPackage.getter();
  type metadata accessor for SpeechContext();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 32) = 0;
  *(void *)(v19 + 40) = 0;
  *(unsigned char *)(v19 + 48) = 1;
  *(void *)(v19 + 16) = v18;
  id v20 = v18;
  id v21 = objc_msgSend(v20, sel_recognition);
  id v22 = objc_msgSend(v21, sel_aceRecognition);

  *(void *)(v19 + 24) = v22;
  *uint64_t v15 = v19;
  swift_storeEnumTagMultiPayload();
  UserIdAwareResultCandidateMessageBase.userId.getter();
  unint64_t v23 = AsrResultCandidateMessage.voiceIdScore.getter();
  uint64_t v24 = AsrResultCandidateMessage.voiceIdClassification.getter();
  int v26 = v25 & 1;
  uint64_t v27 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v9, 1, 1, v27);
  if (v46) {
    static ExecutionLocation.server.getter();
  }
  else {
    static ExecutionLocation.device.getter();
  }
  uint64_t v28 = type metadata accessor for ExecutionLocation();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v6, 0, 1, v28);
  uint64_t v29 = type metadata accessor for ServerFallbackReason();
  uint64_t v30 = (uint64_t)v47;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v47, 1, 1, v29);
  type metadata accessor for ResultCandidateState(0);
  swift_allocObject();
  LOBYTE(v49) = 1;
  uint64_t v31 = ResultCandidateState.init(withResultCandidateId:resultCandidateType:userId:voiceIdScore:voiceIdClassification:lowScoreThreshold:fallbackParse:asrLocation:serverFallbackReason:meetsUserSessionThreshold:meetsPersonalRequestThreshold:)(v45, v44, (uint64_t)v15, (uint64_t)v12, v23 | ((HIDWORD(v23) & 1) << 32), v24, v26, 0x100000000, (uint64_t)v9, (uint64_t)v6, v30, 2u, 2u);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    uint64_t v49 = v36;
    *(_DWORD *)uint64_t v35 = 136315138;
    uint64_t v37 = *(uint64_t (**)(uint64_t))(*(void *)v31 + 800);
    uint64_t v38 = swift_retain();
    uint64_t v39 = v37(v38);
    unint64_t v41 = v40;
    swift_release();
    uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v33, v34, "Created %s", v35, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v36, -1, -1);
    MEMORY[0x1BA9E48C0](v35, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  return v31;
}

void specialized ConversationRequestProcessor.handleCandidateMessage(_:rcId:expectedTypes:messageToCacheIfNotInActiveTurn:shouldUpdateExistingRCState:createResultCandidateState:)(void *a1, void (*a2)(char *, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v124 = a8;
  long long v133 = a2;
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v126 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v125 = (char *)&v118 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = type metadata accessor for RequestType();
  uint64_t v128 = *(void *)(v132 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v132);
  uint64_t v123 = (char *)&v118 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v130 = (void (*)(char *, uint64_t))((char *)&v118 - v19);
  MEMORY[0x1F4188790](v18);
  os_log_t v131 = (os_log_t)((char *)&v118 - v20);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = __swift_project_value_buffer(v21, (uint64_t)static Logger.conversationBridge);
  id v23 = a1;
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v127 = a4;
  if (v26)
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v121 = v14;
    uint64_t v28 = (uint8_t *)v27;
    uint64_t v29 = swift_slowAlloc();
    int v129 = a6;
    uint64_t v119 = (void *)v29;
    uint64_t v122 = v22;
    uint64_t v120 = a7;
    *(_DWORD *)uint64_t v28 = 138412290;
    v135[0] = (uint64_t)v23;
    id v30 = v23;
    a7 = v120;
    uint64_t v22 = v122;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v31 = v119;
    *uint64_t v119 = v23;

    _os_log_impl(&dword_1B9C64000, v24, v25, "ConversationBridge handling message: %@", v28, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v32 = v31;
    a6 = v129;
    MEMORY[0x1BA9E48C0](v32, -1, -1);
    uint64_t v33 = v28;
    uint64_t v14 = v121;
    MEMORY[0x1BA9E48C0](v33, -1, -1);
  }
  else
  {
  }
  if ((ConversationRequestProcessor.checkPrerequisitesAndMaybeCacheCandidateMessage(forRCInput:resultCandidateId:messageToCacheIfNotInActiveTurn:)(v23, (uint64_t)v133, a3, a5) & 1) == 0)
  {
    id v40 = v23;
    unint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v41, v42))
    {

      return;
    }
    uint64_t v43 = swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    v135[0] = v44;
    *(_DWORD *)uint64_t v43 = 136315394;
    uint64_t v45 = v125;
    MessageBase.messageId.getter();
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v48 = v47;
    (*(void (**)(char *, uint64_t))(v126 + 8))(v45, v14);
    uint64_t v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v48, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v43 + 12) = 2080;
    swift_getObjectType();
    uint64_t v49 = _typeName(_:qualified:)();
    uint64_t v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v41, v42, "Message id %s of type %s did not meet pre-requisites for handleCandidateMessage: Ignoring", (uint8_t *)v43, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v44, -1, -1);
    uint64_t v51 = v43;
LABEL_49:
    MEMORY[0x1BA9E48C0](v51, -1, -1);

    return;
  }
  uint64_t v34 = (*(uint64_t (**)(void))(*(void *)a7 + 592))();
  if (!v34)
  {
    id v52 = v23;
    swift_retain_n();
    id v53 = v52;
    unint64_t v41 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v41, v54))
    {

      swift_release_n();
      return;
    }
    uint64_t v55 = swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    v135[0] = v56;
    *(_DWORD *)uint64_t v55 = 136315394;
    swift_getObjectType();
    uint64_t v57 = _typeName(_:qualified:)();
    uint64_t v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v59 = swift_bridgeObjectRelease();
    *(_WORD *)(v55 + 12) = 2080;
    uint64_t v60 = (*(uint64_t (**)(uint64_t))(*(void *)a7 + 384))(v59);
    switch(v62)
    {
      case 1:
        outlined consume of ConversationRequestProcessor.State(v60, (void *)v61, 1);
        uint64_t v63 = 0xD00000000000001DLL;
        uint64_t v64 = "awaiting request context data";
        goto LABEL_40;
      case 2:
        outlined consume of ConversationRequestProcessor.State(v60, (void *)v61, 2);
        unint64_t v116 = 0xEC00000064657472;
        uint64_t v63 = 0x617473206E727574;
        break;
      case 3:
        if (v60 | v61) {
          uint64_t v63 = 0x6574656C706D6F63;
        }
        else {
          uint64_t v63 = 1701602409;
        }
        if (v60 | v61) {
          unint64_t v116 = 0xE800000000000000;
        }
        else {
          unint64_t v116 = 0xE400000000000000;
        }
        break;
      default:
        uint64_t v63 = 0xD000000000000011;
        outlined consume of ConversationRequestProcessor.State(v60, (void *)v61, 0);
        uint64_t v64 = "candidate request";
LABEL_40:
        unint64_t v116 = (unint64_t)(v64 - 32) | 0x8000000000000000;
        break;
    }
    uint64_t v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v116, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v41, v54, "Got %s when in state %s: Ignoring", (uint8_t *)v55, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v56, -1, -1);
    uint64_t v51 = v55;
    goto LABEL_49;
  }
  uint64_t v35 = v34;
  uint64_t v36 = (uint64_t *)(v34 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  uint64_t v38 = *(void *)(v34 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  uint64_t v37 = *(void *)(v34 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8);
  swift_bridgeObjectRetain();
  if (v38 == RequestMessageBase.requestId.getter() && v37 == v39)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v65 & 1) == 0)
    {
      id v80 = v23;
      swift_retain_n();
      id v81 = v80;
      uint64_t v82 = Logger.logObject.getter();
      os_log_type_t v83 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v82, v83))
      {
        uint64_t v84 = swift_slowAlloc();
        uint64_t v85 = swift_slowAlloc();
        v135[0] = v85;
        *(_DWORD *)uint64_t v84 = 136315650;
        swift_getObjectType();
        uint64_t v86 = _typeName(_:qualified:)();
        uint64_t v121 = v35;
        uint64_t v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, v135);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v84 + 12) = 2080;
        uint64_t v88 = RequestMessageBase.requestId.getter();
        uint64_t v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v89, v135);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v84 + 22) = 2080;
        uint64_t v90 = *v36;
        unint64_t v91 = v36[1];
        swift_bridgeObjectRetain();
        uint64_t v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v91, v135);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v82, v83, "%s request ID %s does not match this turn's: %s. Dropping it on the floor.", (uint8_t *)v84, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v85, -1, -1);
        uint64_t v92 = v84;
LABEL_36:
        MEMORY[0x1BA9E48C0](v92, -1, -1);
        swift_release();

        return;
      }

LABEL_38:
      swift_release_n();
      return;
    }
  }
  int v129 = a6;
  uint64_t v66 = v35 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  swift_beginAccess();
  uint64_t v67 = v128;
  uint64_t v69 = v128 + 16;
  uint64_t v68 = *(void (**)(os_log_t, uint64_t, uint64_t))(v128 + 16);
  os_log_t v71 = v131;
  uint64_t v70 = v132;
  v68(v131, v66, v132);
  uint64_t v72 = v127;
  uint64_t v125 = *(char **)(v127 + 16);
  uint64_t v126 = v69;
  uint64_t v120 = v66;
  uint64_t v121 = v35;
  long long v133 = (void (*)(char *, uint64_t, uint64_t))v68;
  if (!v125)
  {
    id v77 = *(void (**)(os_log_t, uint64_t))(v67 + 8);
    v77(v71, v70);
LABEL_34:
    id v102 = v23;
    swift_retain_n();
    id v103 = v102;
    uint64_t v104 = v70;
    id v105 = Logger.logObject.getter();
    os_log_type_t v106 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v105, v106))
    {
      uint64_t v107 = swift_slowAlloc();
      unint64_t v108 = (void *)swift_slowAlloc();
      uint64_t v132 = swift_slowAlloc();
      uint64_t v136 = v132;
      *(_DWORD *)uint64_t v107 = 138412546;
      uint64_t v130 = (void (*)(char *, uint64_t))v77;
      os_log_t v131 = v105;
      uint64_t v134 = (uint64_t)v103;
      id v109 = v103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v108 = v103;
      uint64_t v110 = v108;

      *(_WORD *)(v107 + 12) = 2080;
      unint64_t v111 = v123;
      v133(v123, v120, v70);
      uint64_t v112 = RequestType.rawValue.getter();
      unint64_t v114 = v113;
      v130(v111, v104);
      uint64_t v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, v114, &v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      uint64_t v82 = v131;
      _os_log_impl(&dword_1B9C64000, v131, v106, "%@ is not supported for this requestType: %s", (uint8_t *)v107, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v110, -1, -1);
      uint64_t v115 = v132;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v115, -1, -1);
      uint64_t v92 = v107;
      goto LABEL_36;
    }

    goto LABEL_38;
  }
  uint64_t v119 = v23;
  unint64_t v73 = (*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
  char v74 = v130;
  v68((os_log_t)v130, v127 + v73, v70);
  _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2(&lazy protocol witness table cache variable for type RequestType and conformance RequestType, MEMORY[0x1E4FA2460]);
  swift_bridgeObjectRetain();
  uint64_t v75 = v70;
  char v76 = dispatch thunk of static Equatable.== infix(_:_:)();
  id v77 = *(void (**)(os_log_t, uint64_t))(v67 + 8);
  v77((os_log_t)v74, v75);
  if ((v76 & 1) == 0)
  {
    if (v125 != (char *)1)
    {
      uint64_t v118 = (v67 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v122 = v22;
      char v79 = v129;
      uint64_t v94 = *(void *)(v128 + 72);
      unint64_t v95 = v72 + v94 + v73;
      uint64_t v96 = 1;
      uint64_t v70 = v132;
      while (1)
      {
        id v97 = v130;
        v133((char *)v130, v95, v70);
        uint64_t v98 = (char *)(v96 + 1);
        if (__OFADD__(v96, 1))
        {
          __break(1u);
          JUMPOUT(0x1B9E59FD4);
        }
        char v99 = dispatch thunk of static Equatable.== infix(_:_:)();
        os_log_type_t v100 = v97;
        char v101 = v99;
        v77(v100, v70);
        if (v101) {
          break;
        }
        ++v96;
        v95 += v94;
        uint64_t v70 = v132;
        if (v98 == v125)
        {
          swift_bridgeObjectRelease();
          os_log_t v93 = v131;
          id v23 = v119;
          goto LABEL_33;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v78 = v121;
      goto LABEL_51;
    }
    swift_bridgeObjectRelease();
    os_log_t v93 = v131;
    uint64_t v70 = v132;
    id v23 = v119;
LABEL_33:
    v77(v93, v70);
    goto LABEL_34;
  }
  swift_bridgeObjectRelease();
  uint64_t v78 = v121;
  char v79 = v129;
LABEL_51:
  v77(v131, v132);
  uint64_t v117 = specialized ConversationRequestProcessor.makeResultCandidateState(from:asrOnServer:)(v124, *(unsigned __int8 *)(v78 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer));
  (*(void (**)(uint64_t))(*(void *)v117 + 408))(4);
  if (v79) {
    ConversationRequestProcessorTurnState.updateResultCandidateState(_:)(v117);
  }
  else {
    ConversationRequestProcessorTurnState.addResultCandidateState(_:)(v117);
  }
  swift_release();
  swift_release();
}

{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  BOOL v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  id v30;
  void *v31;
  void *v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  uint64_t v63;
  const char *v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(os_log_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  os_log_t v71;
  uint64_t v72;
  unint64_t v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  char v76;
  void (*v77)(os_log_t, uint64_t);
  char v78;
  id v79;
  id v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  os_log_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t);
  char *v97;
  char v98;
  NSObject *v99;
  char v100;
  id v101;
  id v102;
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint64_t v106;
  void *v107;
  id v108;
  void *v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  void (*v129)(char *, uint64_t);
  os_log_t v130;
  uint64_t v131;
  void (*v132)(char *, uint64_t, uint64_t);
  uint64_t v133;
  uint64_t v134[3];
  uint64_t v135;

  uint64_t v123 = a8;
  uint64_t v132 = a2;
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v125 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v124 = (char *)&v117 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_t v131 = type metadata accessor for RequestType();
  uint64_t v127 = *(void *)(v131 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v131);
  uint64_t v122 = (char *)&v117 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  int v129 = (void (*)(char *, uint64_t))((char *)&v117 - v19);
  MEMORY[0x1F4188790](v18);
  uint64_t v130 = (os_log_t)((char *)&v117 - v20);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = __swift_project_value_buffer(v21, (uint64_t)static Logger.conversationBridge);
  id v23 = a1;
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v126 = a4;
  if (v26)
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v120 = v14;
    uint64_t v28 = (uint8_t *)v27;
    uint64_t v29 = swift_slowAlloc();
    uint64_t v128 = a6;
    uint64_t v118 = (void *)v29;
    uint64_t v121 = v22;
    uint64_t v119 = a7;
    *(_DWORD *)uint64_t v28 = 138412290;
    v134[0] = (uint64_t)v23;
    id v30 = v23;
    a7 = v119;
    uint64_t v22 = v121;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v31 = v118;
    *uint64_t v118 = v23;

    _os_log_impl(&dword_1B9C64000, v24, v25, "ConversationBridge handling message: %@", v28, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v32 = v31;
    a6 = v128;
    MEMORY[0x1BA9E48C0](v32, -1, -1);
    uint64_t v33 = v28;
    uint64_t v14 = v120;
    MEMORY[0x1BA9E48C0](v33, -1, -1);
  }
  else
  {
  }
  if ((ConversationRequestProcessor.checkPrerequisitesAndMaybeCacheCandidateMessage(forRCInput:resultCandidateId:messageToCacheIfNotInActiveTurn:)(v23, (uint64_t)v132, a3, a5) & 1) == 0)
  {
    id v40 = v23;
    unint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v41, v42))
    {

      return;
    }
    uint64_t v43 = swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    v134[0] = v44;
    *(_DWORD *)uint64_t v43 = 136315394;
    uint64_t v45 = v124;
    MessageBase.messageId.getter();
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v48 = v47;
    (*(void (**)(char *, uint64_t))(v125 + 8))(v45, v14);
    uint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v48, v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v43 + 12) = 2080;
    swift_getObjectType();
    uint64_t v49 = _typeName(_:qualified:)();
    uint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v41, v42, "Message id %s of type %s did not meet pre-requisites for handleCandidateMessage: Ignoring", (uint8_t *)v43, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v44, -1, -1);
    uint64_t v51 = v43;
LABEL_49:
    MEMORY[0x1BA9E48C0](v51, -1, -1);

    return;
  }
  uint64_t v34 = (*(uint64_t (**)(void))(*(void *)a7 + 592))();
  if (!v34)
  {
    id v52 = v23;
    swift_retain_n();
    id v53 = v52;
    unint64_t v41 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v41, v54))
    {

      swift_release_n();
      return;
    }
    uint64_t v55 = swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    v134[0] = v56;
    *(_DWORD *)uint64_t v55 = 136315394;
    swift_getObjectType();
    uint64_t v57 = _typeName(_:qualified:)();
    uint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v59 = swift_bridgeObjectRelease();
    *(_WORD *)(v55 + 12) = 2080;
    uint64_t v60 = (*(uint64_t (**)(uint64_t))(*(void *)a7 + 384))(v59);
    switch(v62)
    {
      case 1:
        outlined consume of ConversationRequestProcessor.State(v60, (void *)v61, 1);
        uint64_t v63 = 0xD00000000000001DLL;
        uint64_t v64 = "awaiting request context data";
        goto LABEL_40;
      case 2:
        outlined consume of ConversationRequestProcessor.State(v60, (void *)v61, 2);
        uint64_t v115 = 0xEC00000064657472;
        uint64_t v63 = 0x617473206E727574;
        break;
      case 3:
        if (v60 | v61) {
          uint64_t v63 = 0x6574656C706D6F63;
        }
        else {
          uint64_t v63 = 1701602409;
        }
        if (v60 | v61) {
          uint64_t v115 = 0xE800000000000000;
        }
        else {
          uint64_t v115 = 0xE400000000000000;
        }
        break;
      default:
        uint64_t v63 = 0xD000000000000011;
        outlined consume of ConversationRequestProcessor.State(v60, (void *)v61, 0);
        uint64_t v64 = "candidate request";
LABEL_40:
        uint64_t v115 = (unint64_t)(v64 - 32) | 0x8000000000000000;
        break;
    }
    uint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v115, v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v41, v54, "Got %s when in state %s: Ignoring", (uint8_t *)v55, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v56, -1, -1);
    uint64_t v51 = v55;
    goto LABEL_49;
  }
  uint64_t v35 = v34;
  uint64_t v36 = (uint64_t *)(v34 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  uint64_t v38 = *(void *)(v34 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  uint64_t v37 = *(void *)(v34 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8);
  swift_bridgeObjectRetain();
  if (v38 == RequestMessageBase.requestId.getter() && v37 == v39)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v65 & 1) == 0)
    {
      char v79 = v23;
      swift_retain_n();
      id v80 = v79;
      id v81 = Logger.logObject.getter();
      uint64_t v82 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v81, v82))
      {
        os_log_type_t v83 = swift_slowAlloc();
        uint64_t v84 = swift_slowAlloc();
        v134[0] = v84;
        *(_DWORD *)os_log_type_t v83 = 136315650;
        swift_getObjectType();
        uint64_t v85 = _typeName(_:qualified:)();
        uint64_t v120 = v35;
        uint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v86, v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v83 + 12) = 2080;
        unint64_t v87 = RequestMessageBase.requestId.getter();
        uint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v88, v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v83 + 22) = 2080;
        unint64_t v89 = *v36;
        uint64_t v90 = v36[1];
        swift_bridgeObjectRetain();
        uint64_t v135 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v90, v134);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v81, v82, "%s request ID %s does not match this turn's: %s. Dropping it on the floor.", (uint8_t *)v83, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v84, -1, -1);
        unint64_t v91 = v83;
LABEL_36:
        MEMORY[0x1BA9E48C0](v91, -1, -1);
        swift_release();

        return;
      }

LABEL_38:
      swift_release_n();
      return;
    }
  }
  uint64_t v128 = a6;
  uint64_t v66 = v35 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  swift_beginAccess();
  uint64_t v67 = v127;
  uint64_t v69 = v127 + 16;
  uint64_t v68 = *(void (**)(os_log_t, uint64_t, uint64_t))(v127 + 16);
  os_log_t v71 = v130;
  uint64_t v70 = v131;
  v68(v130, v66, v131);
  uint64_t v72 = v126;
  uint64_t v124 = *(char **)(v126 + 16);
  uint64_t v125 = v69;
  uint64_t v119 = v66;
  uint64_t v120 = v35;
  uint64_t v132 = (void (*)(char *, uint64_t, uint64_t))v68;
  if (!v124)
  {
    id v77 = *(void (**)(os_log_t, uint64_t))(v67 + 8);
    v77(v71, v70);
LABEL_34:
    char v101 = v23;
    swift_retain_n();
    id v102 = v101;
    id v103 = v70;
    uint64_t v104 = Logger.logObject.getter();
    id v105 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v104, v105))
    {
      os_log_type_t v106 = swift_slowAlloc();
      uint64_t v107 = (void *)swift_slowAlloc();
      os_log_t v131 = swift_slowAlloc();
      uint64_t v135 = v131;
      *(_DWORD *)os_log_type_t v106 = 138412546;
      int v129 = (void (*)(char *, uint64_t))v77;
      uint64_t v130 = v104;
      long long v133 = (uint64_t)v102;
      unint64_t v108 = v102;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v107 = v102;
      id v109 = v107;

      *(_WORD *)(v106 + 12) = 2080;
      uint64_t v110 = v122;
      v132(v122, v119, v70);
      unint64_t v111 = RequestType.rawValue.getter();
      unint64_t v113 = v112;
      v129(v110, v103);
      long long v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v113, &v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      id v81 = v130;
      _os_log_impl(&dword_1B9C64000, v130, v105, "%@ is not supported for this requestType: %s", (uint8_t *)v106, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v109, -1, -1);
      unint64_t v114 = v131;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v114, -1, -1);
      unint64_t v91 = v106;
      goto LABEL_36;
    }

    goto LABEL_38;
  }
  uint64_t v118 = v23;
  unint64_t v73 = (*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
  char v74 = v129;
  v68((os_log_t)v129, v126 + v73, v70);
  _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2(&lazy protocol witness table cache variable for type RequestType and conformance RequestType, MEMORY[0x1E4FA2460]);
  swift_bridgeObjectRetain();
  uint64_t v75 = v70;
  char v76 = dispatch thunk of static Equatable.== infix(_:_:)();
  id v77 = *(void (**)(os_log_t, uint64_t))(v67 + 8);
  v77((os_log_t)v74, v75);
  if ((v76 & 1) == 0)
  {
    if (v124 != (char *)1)
    {
      uint64_t v117 = (v67 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v121 = v22;
      uint64_t v78 = v128;
      os_log_t v93 = *(void *)(v127 + 72);
      uint64_t v94 = v72 + v93 + v73;
      unint64_t v95 = 1;
      uint64_t v70 = v131;
      while (1)
      {
        uint64_t v96 = v129;
        v132((char *)v129, v94, v70);
        id v97 = (char *)(v95 + 1);
        if (__OFADD__(v95, 1))
        {
          __break(1u);
          JUMPOUT(0x1B9E5D3CCLL);
        }
        uint64_t v98 = dispatch thunk of static Equatable.== infix(_:_:)();
        char v99 = v96;
        os_log_type_t v100 = v98;
        v77(v99, v70);
        if (v100) {
          break;
        }
        ++v95;
        v94 += v93;
        uint64_t v70 = v131;
        if (v97 == v124)
        {
          swift_bridgeObjectRelease();
          uint64_t v92 = v130;
          id v23 = v118;
          goto LABEL_33;
        }
      }
      swift_bridgeObjectRelease();
      goto LABEL_51;
    }
    swift_bridgeObjectRelease();
    uint64_t v92 = v130;
    uint64_t v70 = v131;
    id v23 = v118;
LABEL_33:
    v77(v92, v70);
    goto LABEL_34;
  }
  swift_bridgeObjectRelease();
  uint64_t v78 = v128;
LABEL_51:
  v77(v130, v131);
  unint64_t v116 = ConversationRequestProcessor.makeResultCandidateState(from:)();
  (*(void (**)(uint64_t))(*(void *)v116 + 408))(3);
  if (v78) {
    ConversationRequestProcessorTurnState.updateResultCandidateState(_:)(v116);
  }
  else {
    ConversationRequestProcessorTurnState.addResultCandidateState(_:)(v116);
  }
  swift_release();
  swift_release();
}

void specialized ConversationRequestProcessor.makeResultCandidateStatesForMultiUser(from:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v87 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExecutionLocation?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v104 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v7 - 8);
  id v103 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = type metadata accessor for ResultCandidateType(0);
  MEMORY[0x1F4188790](v102);
  char v101 = (int64_t *)((char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v111 = type metadata accessor for UserID();
  uint64_t v10 = *(void *)(v111 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v111);
  os_log_type_t v100 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v87 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: AFSpeechPackage)?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v87 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v87 - v19;
  uint64_t v114 = MEMORY[0x1E4FBC860];
  uint64_t v21 = MUXAsrResultCandidateMessage.speechPackageDict.getter();
  int64_t v106 = 0;
  uint64_t v23 = *(void *)(v21 + 64);
  uint64_t v88 = v21 + 64;
  uint64_t v95 = v21;
  uint64_t v24 = 1 << *(unsigned char *)(v21 + 32);
  uint64_t v25 = -1;
  if (v24 < 64) {
    uint64_t v25 = ~(-1 << v24);
  }
  unint64_t v26 = v25 & v23;
  uint64_t v107 = (void (**)(char *, char *, uint64_t))(v10 + 16);
  id v105 = (void (**)(char *, char *, uint64_t))(v10 + 32);
  uint64_t v92 = &v113;
  uint64_t v94 = v10;
  char v99 = (void (**)(char *, uint64_t))(v10 + 8);
  int64_t v89 = (unint64_t)(v24 + 63) >> 6;
  int64_t v87 = v89 - 1;
  uint64_t v27 = &off_1E61F1000;
  *(void *)&long long v22 = 136315394;
  long long v91 = v22;
  uint64_t v90 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v110 = v14;
  id v97 = v20;
  uint64_t v98 = v18;
  os_log_t v93 = v4;
  if ((v25 & v23) == 0) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v28 = __clz(__rbit64(v26));
  uint64_t v29 = (v26 - 1) & v26;
  unint64_t v30 = v28 | (v106 << 6);
  while (2)
  {
    uint64_t v31 = v95;
    (*(void (**)(char *, unint64_t, uint64_t))(v94 + 16))(v18, *(void *)(v95 + 48) + *(void *)(v94 + 72) * v30, v111);
    uint64_t v32 = *(void *)(v31 + 56);
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: AFSpeechPackage));
    uint64_t v34 = *(void **)(v32 + 8 * v30);
    *(void *)&v18[*(int *)(v33 + 48)] = v34;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v18, 0, 1, v33);
    id v35 = v34;
    while (1)
    {
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v18, (uint64_t)v20, &demangling cache variable for type metadata for (key: UserID, value: AFSpeechPackage)?);
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: AFSpeechPackage));
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 48))(v20, 1, v40) == 1)
      {
        swift_release();
        return;
      }
      unint64_t v109 = v29;
      unint64_t v41 = *(void **)&v20[*(int *)(v40 + 48)];
      (*v105)(v14, v20, v111);
      os_log_type_t v42 = (void *)MUXAsrResultCandidateMessage.voiceIdScoreCard.getter();
      id v43 = objc_msgSend(v42, sel_spIdKnownUserScores);

      if (!v43) {
        goto LABEL_46;
      }
      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      uint64_t v44 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v45 = UserID.sharedUserId.getter();
      if (*(void *)(v44 + 16) && (unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)(v45, v46), (v48 & 1) != 0))
      {
        id v49 = *(id *)(*(void *)(v44 + 56) + 8 * v47);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unsigned int v50 = objc_msgSend(v49, sel_intValue);
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unsigned int v50 = -1;
      }
      uint64_t v51 = (void *)MUXAsrResultCandidateMessage.voiceIdScoreCard.getter();
      id v52 = [v51 (SEL)v27[351]];

      if (v52)
      {
        id v53 = (void *)MUXAsrResultCandidateMessage.voiceIdScoreCard.getter();
        id v54 = [v53 (SEL)v27[351]];

        if (!v54) {
          goto LABEL_47;
        }
        unsigned int v55 = objc_msgSend(v54, sel_intValue);
      }
      else
      {
        unsigned int v55 = static SelectedUserAttributes.defaultLowVoiceIdThreshold.getter();
      }
      id v113 = objc_msgSend(v41, sel_resultCandidateId, v87);
      uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v58 = v57;
      type metadata accessor for SpeechContext();
      uint64_t v59 = swift_allocObject();
      *(void *)(v59 + 32) = 0;
      *(void *)(v59 + 40) = 0;
      *(unsigned char *)(v59 + 48) = 1;
      *(void *)(v59 + 16) = v41;
      id v108 = v41;
      id v60 = objc_msgSend(v108, sel_recognition);
      id v61 = objc_msgSend(v60, sel_aceRecognition);

      *(void *)(v59 + 24) = v61;
      uint64_t v62 = (uint64_t)v101;
      *char v101 = v59;
      swift_storeEnumTagMultiPayload();
      uint64_t v63 = (uint64_t)v100;
      (*v107)(v100, v110, v111);
      uint64_t v64 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      uint64_t v65 = (uint64_t)v103;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v103, 1, 1, v64);
      uint64_t v66 = type metadata accessor for ExecutionLocation();
      uint64_t v67 = (uint64_t)v104;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v104, 1, 1, v66);
      uint64_t v68 = type metadata accessor for ServerFallbackReason();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v4, 1, 1, v68);
      type metadata accessor for ResultCandidateState(0);
      swift_allocObject();
      LOBYTE(v113) = 0;
      uint64_t v69 = ResultCandidateState.init(withResultCandidateId:resultCandidateType:userId:voiceIdScore:voiceIdClassification:lowScoreThreshold:fallbackParse:asrLocation:serverFallbackReason:meetsUserSessionThreshold:meetsPersonalRequestThreshold:)(v56, v58, v62, v63, v50, 0, 0, v55, v65, v67, (uint64_t)v4, 2u, 2u);
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v70 = type metadata accessor for Logger();
      __swift_project_value_buffer(v70, (uint64_t)static Logger.conversationBridge);
      id v71 = a1;
      swift_retain_n();
      id v72 = v71;
      unint64_t v73 = Logger.logObject.getter();
      os_log_type_t v74 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v73, v74))
      {
        uint64_t v75 = swift_slowAlloc();
        id v96 = (id)swift_slowAlloc();
        id v113 = v96;
        *(_DWORD *)uint64_t v75 = v91;
        uint64_t v76 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
        uint64_t v112 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, (uint64_t *)&v113);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v75 + 12) = 2080;
        uint64_t v78 = a1;
        char v79 = *(uint64_t (**)(uint64_t))(*(void *)v69 + 800);
        uint64_t v80 = swift_retain();
        uint64_t v81 = v79(v80);
        a1 = v78;
        uint64_t v82 = v81;
        unint64_t v84 = v83;
        swift_release();
        uint64_t v112 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v84, (uint64_t *)&v113);
        uint64_t v4 = v93;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v73, v74, "For top level rcId %s, created %s", (uint8_t *)v75, 0x16u);
        id v85 = v96;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v85, -1, -1);
        MEMORY[0x1BA9E48C0](v75, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      uint64_t v14 = v110;
      uint64_t v20 = v97;
      uint64_t v18 = v98;
      uint64_t v27 = &off_1E61F1000;
      uint64_t v86 = swift_retain();
      MEMORY[0x1BA9E3030](v86);
      if (*(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v114 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      swift_release();
      (*v99)(v14, v111);
      unint64_t v26 = v109;
      if (v109) {
        goto LABEL_4;
      }
LABEL_6:
      int64_t v36 = v106 + 1;
      if (__OFADD__(v106, 1))
      {
        __break(1u);
        goto LABEL_45;
      }
      if (v36 < v89)
      {
        unint64_t v37 = *(void *)(v88 + 8 * v36);
        if (v37) {
          goto LABEL_9;
        }
        int64_t v38 = v106 + 2;
        ++v106;
        if (v36 + 1 < v89)
        {
          unint64_t v37 = *(void *)(v88 + 8 * v38);
          if (v37) {
            goto LABEL_12;
          }
          int64_t v106 = v36 + 1;
          if (v36 + 2 < v89)
          {
            unint64_t v37 = *(void *)(v88 + 8 * (v36 + 2));
            if (v37)
            {
              v36 += 2;
              goto LABEL_9;
            }
            int64_t v38 = v36 + 3;
            int64_t v106 = v36 + 2;
            if (v36 + 3 < v89) {
              break;
            }
          }
        }
      }
LABEL_23:
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: AFSpeechPackage));
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v18, 1, 1, v39);
      uint64_t v29 = 0;
    }
    unint64_t v37 = *(void *)(v88 + 8 * v38);
    if (v37)
    {
LABEL_12:
      int64_t v36 = v38;
LABEL_9:
      uint64_t v29 = (v37 - 1) & v37;
      unint64_t v30 = __clz(__rbit64(v37)) + (v36 << 6);
      int64_t v106 = v36;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v36 = v38 + 1;
    if (__OFADD__(v38, 1)) {
      break;
    }
    if (v36 >= v89)
    {
      int64_t v106 = v87;
      goto LABEL_23;
    }
    unint64_t v37 = *(void *)(v88 + 8 * v36);
    ++v38;
    if (v37) {
      goto LABEL_9;
    }
  }
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
}

uint64_t specialized ConversationRequestProcessor.makeResultCandidateState(from:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExecutionLocation?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UserID();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ResultCandidateType(0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  uint64_t v17 = v16;
  *(void *)uint64_t v14 = TextBasedResultCandidateMessage.utterance.getter();
  *((void *)v14 + 1) = v18;
  *((_OWORD *)v14 + 1) = 0u;
  *((_OWORD *)v14 + 2) = 0u;
  swift_storeEnumTagMultiPayload();
  UserIdAwareResultCandidateMessageBase.userId.getter();
  uint64_t v19 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v8, 1, 1, v19);
  uint64_t v20 = type metadata accessor for ExecutionLocation();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v5, 1, 1, v20);
  uint64_t v21 = type metadata accessor for ServerFallbackReason();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v2, 1, 1, v21);
  type metadata accessor for ResultCandidateState(0);
  swift_allocObject();
  LOBYTE(v35) = 1;
  uint64_t v22 = ResultCandidateState.init(withResultCandidateId:resultCandidateType:userId:voiceIdScore:voiceIdClassification:lowScoreThreshold:fallbackParse:asrLocation:serverFallbackReason:meetsUserSessionThreshold:meetsPersonalRequestThreshold:)(v15, v17, (uint64_t)v14, (uint64_t)v11, 0x100000000, 0, 1, 0x100000000, (uint64_t)v8, (uint64_t)v5, (uint64_t)v2, 2u, 2u);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    unint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    uint64_t v35 = v27;
    *(_DWORD *)unint64_t v26 = 136315138;
    unint64_t v28 = *(uint64_t (**)(uint64_t))(*(void *)v22 + 800);
    uint64_t v29 = swift_retain();
    uint64_t v30 = v28(v29);
    unint64_t v32 = v31;
    swift_release();
    uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v24, v25, "Created %s", v26, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v27, -1, -1);
    MEMORY[0x1BA9E48C0](v26, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  return v22;
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExecutionLocation?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UserID();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ResultCandidateType(0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  uint64_t v17 = v16;
  GestureBasedResultCandidateMessage.gesture.getter();
  swift_storeEnumTagMultiPayload();
  UserIdAwareResultCandidateMessageBase.userId.getter();
  uint64_t v18 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v8, 1, 1, v18);
  uint64_t v19 = type metadata accessor for ExecutionLocation();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v5, 1, 1, v19);
  uint64_t v20 = type metadata accessor for ServerFallbackReason();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v2, 1, 1, v20);
  type metadata accessor for ResultCandidateState(0);
  swift_allocObject();
  LOBYTE(v34) = 1;
  uint64_t v21 = ResultCandidateState.init(withResultCandidateId:resultCandidateType:userId:voiceIdScore:voiceIdClassification:lowScoreThreshold:fallbackParse:asrLocation:serverFallbackReason:meetsUserSessionThreshold:meetsPersonalRequestThreshold:)(v15, v17, (uint64_t)v14, (uint64_t)v11, 0x100000000, 0, 1, 0x100000000, (uint64_t)v8, (uint64_t)v5, (uint64_t)v2, 2u, 2u);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  uint64_t v23 = Logger.logObject.getter();
  uint64_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
    unint64_t v26 = swift_slowAlloc();
    uint64_t v34 = v26;
    *(_DWORD *)os_log_type_t v25 = 136315138;
    uint64_t v27 = *(uint64_t (**)(uint64_t))(*(void *)v21 + 800);
    unint64_t v28 = swift_retain();
    uint64_t v29 = v27(v28);
    unint64_t v31 = v30;
    swift_release();
    uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v23, v24, "Created %s", v25, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v26, -1, -1);
    MEMORY[0x1BA9E48C0](v25, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  return v21;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1F4188790](v0 - 8);
  id v43 = (char *)&v40 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExecutionLocation?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UserID();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ResultCandidateType(0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (uint64_t *)((char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
  unint64_t v41 = v15;
  os_log_type_t v42 = v14;
  uint64_t v16 = TextBasedTRPCandidateMessage.utterance.getter();
  uint64_t v18 = v17;
  uint64_t v19 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
  uint64_t v21 = v20;
  uint64_t v22 = TextBasedTRPCandidateMessage.tcuId.getter();
  *uint64_t v13 = v16;
  v13[1] = v18;
  v13[2] = v19;
  v13[3] = v21;
  v13[4] = v22;
  v13[5] = v23;
  swift_storeEnumTagMultiPayload();
  TRPCandidateRequestMessageBase.userId.getter();
  uint64_t v24 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  os_log_type_t v25 = type metadata accessor for ExecutionLocation();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v4, 1, 1, v25);
  unint64_t v26 = type metadata accessor for ServerFallbackReason();
  uint64_t v27 = (uint64_t)v43;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v43, 1, 1, v26);
  type metadata accessor for ResultCandidateState(0);
  swift_allocObject();
  LOBYTE(v45) = 1;
  unint64_t v28 = ResultCandidateState.init(withResultCandidateId:resultCandidateType:userId:voiceIdScore:voiceIdClassification:lowScoreThreshold:fallbackParse:asrLocation:serverFallbackReason:meetsUserSessionThreshold:meetsPersonalRequestThreshold:)(v42, v41, (uint64_t)v13, (uint64_t)v10, 0x100000000, 0, 1, 0x100000000, (uint64_t)v7, (uint64_t)v4, v27, 2u, 2u);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  uint64_t v30 = Logger.logObject.getter();
  unint64_t v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    unint64_t v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v45 = v33;
    *(_DWORD *)unint64_t v32 = 136315138;
    uint64_t v34 = *(uint64_t (**)(uint64_t))(*(void *)v28 + 800);
    uint64_t v35 = swift_retain();
    int64_t v36 = v34(v35);
    int64_t v38 = v37;
    swift_release();
    uint64_t v44 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v30, v31, "Created %s", v32, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v33, -1, -1);
    MEMORY[0x1BA9E48C0](v32, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  return v28;
}

void specialized ConversationRequestProcessor.handleCandidateMessage(_:rcId:expectedTypes:messageToCacheIfNotInActiveTurn:shouldUpdateExistingRCState:createResultCandidateState:)(void *a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4, uint64_t a5, int a6, char *a7, uint64_t a8)
{
  uint64_t v121 = a8;
  LODWORD(v9) = a6;
  uint64_t v126 = a4;
  uint64_t v129 = a2;
  uint64_t v130 = a3;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v123 = *(void *)(v12 - 8);
  uint64_t v124 = (void (*)(void, void, void))v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v122 = (char *)&v115 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for RequestType();
  uint64_t v125 = *(void *)(v14 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v120 = (char *)&v115 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = ((char *)&v115 - v18);
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v115 - v20;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.conversationBridge);
  id v24 = a1;
  os_log_type_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  os_log_t v127 = v19;
  uint64_t v128 = (uint64_t)v21;
  if (v27)
  {
    uint64_t v28 = swift_slowAlloc();
    int v119 = v9;
    uint64_t v118 = v14;
    uint64_t v29 = (uint8_t *)v28;
    uint64_t v30 = swift_slowAlloc();
    uint64_t v116 = a5;
    unint64_t v31 = (void *)v30;
    uint64_t v117 = a7;
    *(_DWORD *)uint64_t v29 = 138412290;
    v132[0] = (uint64_t)v24;
    id v32 = v24;
    a7 = v117;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v31 = v24;

    _os_log_impl(&dword_1B9C64000, v25, v26, "ConversationBridge handling message: %@", v29, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v33 = v31;
    a5 = v116;
    MEMORY[0x1BA9E48C0](v33, -1, -1);
    uint64_t v34 = v29;
    uint64_t v14 = v118;
    LODWORD(v9) = v119;
    MEMORY[0x1BA9E48C0](v34, -1, -1);
  }
  else
  {
  }
  if ((ConversationRequestProcessor.checkPrerequisitesAndMaybeCacheCandidateMessage(forRCInput:resultCandidateId:messageToCacheIfNotInActiveTurn:)(v24, v129, (uint64_t)v130, a5) & 1) == 0)
  {
    id v41 = v24;
    os_log_type_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v42, v43))
    {

      return;
    }
    uint64_t v44 = swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    v132[0] = v45;
    *(_DWORD *)uint64_t v44 = 136315394;
    uint64_t v46 = v122;
    MessageBase.messageId.getter();
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    unint64_t v47 = v124;
    uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v50 = v49;
    (*(void (**)(char *, void (*)(void, void, void)))(v123 + 8))(v46, v47);
    uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v50, v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v44 + 12) = 2080;
    swift_getObjectType();
    uint64_t v51 = _typeName(_:qualified:)();
    uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v42, v43, "Message id %s of type %s did not meet pre-requisites for handleCandidateMessage: Ignoring", (uint8_t *)v44, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v45, -1, -1);
    uint64_t v53 = v44;
LABEL_49:
    MEMORY[0x1BA9E48C0](v53, -1, -1);

    return;
  }
  uint64_t v35 = (*(uint64_t (**)(void))(*(void *)a7 + 592))();
  if (!v35)
  {
    id v54 = v24;
    swift_retain_n();
    id v55 = v54;
    os_log_type_t v42 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v42, v56))
    {

      swift_release_n();
      return;
    }
    uint64_t v57 = swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    v132[0] = v58;
    *(_DWORD *)uint64_t v57 = 136315394;
    swift_getObjectType();
    uint64_t v59 = _typeName(_:qualified:)();
    uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v61 = swift_bridgeObjectRelease();
    *(_WORD *)(v57 + 12) = 2080;
    uint64_t v62 = (*(uint64_t (**)(uint64_t))(*(void *)a7 + 384))(v61);
    switch(v64)
    {
      case 1:
        outlined consume of ConversationRequestProcessor.State(v62, (void *)v63, 1);
        uint64_t v65 = 0xD00000000000001DLL;
        uint64_t v66 = "awaiting request context data";
        goto LABEL_40;
      case 2:
        outlined consume of ConversationRequestProcessor.State(v62, (void *)v63, 2);
        unint64_t v111 = 0xEC00000064657472;
        uint64_t v65 = 0x617473206E727574;
        break;
      case 3:
        if (v62 | v63) {
          uint64_t v65 = 0x6574656C706D6F63;
        }
        else {
          uint64_t v65 = 1701602409;
        }
        if (v62 | v63) {
          unint64_t v111 = 0xE800000000000000;
        }
        else {
          unint64_t v111 = 0xE400000000000000;
        }
        break;
      default:
        uint64_t v65 = 0xD000000000000011;
        outlined consume of ConversationRequestProcessor.State(v62, (void *)v63, 0);
        uint64_t v66 = "candidate request";
LABEL_40:
        unint64_t v111 = (unint64_t)(v66 - 32) | 0x8000000000000000;
        break;
    }
    uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v111, v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v42, v56, "Got %s when in state %s: Ignoring", (uint8_t *)v57, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v58, -1, -1);
    uint64_t v53 = v57;
    goto LABEL_49;
  }
  int64_t v36 = (char *)v35;
  unint64_t v37 = (uint64_t *)(v35 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  uint64_t v39 = *(void *)(v35 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  uint64_t v38 = *(void *)(v35 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8);
  swift_bridgeObjectRetain();
  if (v39 == RequestMessageBase.requestId.getter() && v38 == v40)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v67 & 1) == 0)
    {
      id v80 = v24;
      swift_retain_n();
      id v81 = v80;
      uint64_t v82 = Logger.logObject.getter();
      os_log_type_t v83 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v82, v83))
      {
        uint64_t v84 = swift_slowAlloc();
        uint64_t v85 = swift_slowAlloc();
        v132[0] = v85;
        *(_DWORD *)uint64_t v84 = 136315650;
        swift_getObjectType();
        uint64_t v86 = _typeName(_:qualified:)();
        uint64_t v122 = v36;
        uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, v132);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v84 + 12) = 2080;
        uint64_t v88 = RequestMessageBase.requestId.getter();
        uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v89, v132);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v84 + 22) = 2080;
        uint64_t v90 = *v37;
        unint64_t v91 = v37[1];
        swift_bridgeObjectRetain();
        uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v91, v132);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v82, v83, "%s request ID %s does not match this turn's: %s. Dropping it on the floor.", (uint8_t *)v84, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v85, -1, -1);
        MEMORY[0x1BA9E48C0](v84, -1, -1);
LABEL_36:
        swift_release();

        return;
      }

LABEL_38:
      swift_release_n();
      return;
    }
  }
  uint64_t v122 = v36;
  uint64_t v68 = &v36[OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType];
  swift_beginAccess();
  uint64_t v69 = v125;
  uint64_t v70 = v125 + 16;
  id v71 = *(void (**)(uint64_t, char *, uint64_t))(v125 + 16);
  uint64_t v72 = v128;
  v71(v128, v68, v14);
  uint64_t v123 = *(void *)(v126 + 16);
  uint64_t v124 = (void (*)(void, void, void))v71;
  uint64_t v129 = v70;
  if (!v123)
  {
    uint64_t v78 = *(void (**)(uint64_t, uint64_t))(v69 + 8);
    uint64_t v79 = (v69 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v78(v72, v14);
LABEL_34:
    id v98 = v24;
    swift_retain_n();
    id v99 = v98;
    os_log_type_t v100 = Logger.logObject.getter();
    os_log_type_t v101 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v100, v101))
    {
      uint64_t v102 = swift_slowAlloc();
      uint64_t v130 = (void (*)(char *, uint64_t))v78;
      uint64_t v103 = v102;
      uint64_t v104 = (void *)swift_slowAlloc();
      uint64_t v128 = swift_slowAlloc();
      uint64_t v133 = v128;
      *(_DWORD *)uint64_t v103 = 138412546;
      uint64_t v116 = v79;
      uint64_t v131 = (uint64_t)v99;
      os_log_t v127 = v100;
      id v105 = v99;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v104 = v99;

      *(_WORD *)(v103 + 12) = 2080;
      int64_t v106 = v120;
      v124(v120, v68, v14);
      uint64_t v107 = RequestType.rawValue.getter();
      unint64_t v109 = v108;
      v130(v106, v14);
      uint64_t v131 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v109, &v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      uint64_t v82 = v127;
      _os_log_impl(&dword_1B9C64000, v127, v101, "%@ is not supported for this requestType: %s", (uint8_t *)v103, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v104, -1, -1);
      uint64_t v110 = v128;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v110, -1, -1);
      MEMORY[0x1BA9E48C0](v103, -1, -1);
      goto LABEL_36;
    }

    goto LABEL_38;
  }
  uint64_t v117 = v68;
  uint64_t v118 = v23;
  unint64_t v73 = (*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80);
  os_log_t v74 = v127;
  v71((uint64_t)v127, (char *)(v126 + v73), v14);
  _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2(&lazy protocol witness table cache variable for type RequestType and conformance RequestType, MEMORY[0x1E4FA2460]);
  swift_bridgeObjectRetain();
  char v75 = dispatch thunk of static Equatable.== infix(_:_:)();
  unint64_t v77 = *(void (**)(char *, uint64_t))(v69 + 8);
  uint64_t v76 = v69 + 8;
  uint64_t v130 = v77;
  v77((char *)v74, v14);
  if ((v75 & 1) == 0)
  {
    uint64_t v79 = v76 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    if (v123 != 1)
    {
      id v115 = v24;
      uint64_t v116 = v76 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      int v119 = v9;
      uint64_t v9 = v14;
      uint64_t v92 = *(void *)(v125 + 72);
      os_log_t v93 = v127;
      unint64_t v94 = v126 + v92 + v73;
      uint64_t v95 = 1;
      while (1)
      {
        v124(v93, v94, v9);
        uint64_t v96 = v95 + 1;
        if (__OFADD__(v95, 1))
        {
          __break(1u);
          JUMPOUT(0x1B9E5C4B0);
        }
        char v97 = dispatch thunk of static Equatable.== infix(_:_:)();
        v130((char *)v93, v9);
        if (v97) {
          break;
        }
        ++v95;
        v94 += v92;
        uint64_t v72 = v128;
        if (v96 == v123)
        {
          swift_bridgeObjectRelease();
          uint64_t v14 = v9;
          uint64_t v68 = v117;
          id v24 = v115;
          uint64_t v79 = v116;
          goto LABEL_33;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v14 = v9;
      LOBYTE(v9) = v119;
      uint64_t v72 = v128;
      goto LABEL_51;
    }
    swift_bridgeObjectRelease();
    uint64_t v68 = v117;
LABEL_33:
    uint64_t v78 = (void (*)(uint64_t, uint64_t))v130;
    v130((char *)v72, v14);
    goto LABEL_34;
  }
  swift_bridgeObjectRelease();
LABEL_51:
  v130((char *)v72, v14);
  uint64_t v112 = (void *)specialized ConversationRequestProcessor.makeResultCandidateState(from:)();
  (*(void (**)(uint64_t))(*v112 + 408))(2);
  uint64_t v113 = v112[3];
  uint64_t v114 = (void *)(v121 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_gestureRCID);
  void *v114 = v112[2];
  v114[1] = v113;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v9) {
    ConversationRequestProcessorTurnState.updateResultCandidateState(_:)((uint64_t)v112);
  }
  else {
    ConversationRequestProcessorTurnState.addResultCandidateState(_:)((uint64_t)v112);
  }
  swift_release();
  swift_release();
}

void specialized ConversationRequestProcessor.handleCandidateMessage(_:rcId:expectedTypes:messageToCacheIfNotInActiveTurn:shouldUpdateExistingRCState:createResultCandidateState:)(void *a1, void (*a2)(char *, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, uint64_t (*a9)(uint64_t))
{
  uint64_t v124 = a8;
  uint64_t v133 = a2;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v126 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v125 = (char *)&v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v132 = type metadata accessor for RequestType();
  uint64_t v128 = *(void *)(v132 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v132);
  uint64_t v123 = (char *)&v118 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v130 = (void (*)(char *, uint64_t))((char *)&v118 - v20);
  MEMORY[0x1F4188790](v19);
  os_log_t v131 = (os_log_t)((char *)&v118 - v21);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.conversationBridge);
  id v24 = a1;
  os_log_type_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v127 = a4;
  if (v27)
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v121 = v15;
    uint64_t v29 = (uint8_t *)v28;
    uint64_t v30 = swift_slowAlloc();
    int v129 = a6;
    int v119 = (void *)v30;
    uint64_t v122 = v23;
    uint64_t v120 = a7;
    *(_DWORD *)uint64_t v29 = 138412290;
    v135[0] = (uint64_t)v24;
    id v31 = v24;
    a7 = v120;
    uint64_t v23 = v122;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v32 = v119;
    *int v119 = v24;

    _os_log_impl(&dword_1B9C64000, v25, v26, "ConversationBridge handling message: %@", v29, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v33 = v32;
    a6 = v129;
    MEMORY[0x1BA9E48C0](v33, -1, -1);
    uint64_t v34 = v29;
    uint64_t v15 = v121;
    MEMORY[0x1BA9E48C0](v34, -1, -1);
  }
  else
  {
  }
  if ((ConversationRequestProcessor.checkPrerequisitesAndMaybeCacheCandidateMessage(forRCInput:resultCandidateId:messageToCacheIfNotInActiveTurn:)(v24, (uint64_t)v133, a3, a5) & 1) == 0)
  {
    id v41 = v24;
    os_log_type_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v42, v43))
    {

      return;
    }
    uint64_t v44 = swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    v135[0] = v45;
    *(_DWORD *)uint64_t v44 = 136315394;
    uint64_t v46 = v125;
    MessageBase.messageId.getter();
    _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v49 = v48;
    (*(void (**)(char *, uint64_t))(v126 + 8))(v46, v15);
    uint64_t v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v44 + 12) = 2080;
    swift_getObjectType();
    uint64_t v50 = _typeName(_:qualified:)();
    uint64_t v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v42, v43, "Message id %s of type %s did not meet pre-requisites for handleCandidateMessage: Ignoring", (uint8_t *)v44, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v45, -1, -1);
    uint64_t v52 = v44;
LABEL_49:
    MEMORY[0x1BA9E48C0](v52, -1, -1);

    return;
  }
  uint64_t v35 = (*(uint64_t (**)(void))(*(void *)a7 + 592))();
  if (!v35)
  {
    id v53 = v24;
    swift_retain_n();
    id v54 = v53;
    os_log_type_t v42 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v42, v55))
    {

      swift_release_n();
      return;
    }
    uint64_t v56 = swift_slowAlloc();
    uint64_t v57 = swift_slowAlloc();
    v135[0] = v57;
    *(_DWORD *)uint64_t v56 = 136315394;
    swift_getObjectType();
    uint64_t v58 = _typeName(_:qualified:)();
    uint64_t v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v60 = swift_bridgeObjectRelease();
    *(_WORD *)(v56 + 12) = 2080;
    uint64_t v61 = (*(uint64_t (**)(uint64_t))(*(void *)a7 + 384))(v60);
    switch(v63)
    {
      case 1:
        outlined consume of ConversationRequestProcessor.State(v61, (void *)v62, 1);
        uint64_t v64 = 0xD00000000000001DLL;
        uint64_t v65 = "awaiting request context data";
        goto LABEL_40;
      case 2:
        outlined consume of ConversationRequestProcessor.State(v61, (void *)v62, 2);
        unint64_t v116 = 0xEC00000064657472;
        uint64_t v64 = 0x617473206E727574;
        break;
      case 3:
        if (v61 | v62) {
          uint64_t v64 = 0x6574656C706D6F63;
        }
        else {
          uint64_t v64 = 1701602409;
        }
        if (v61 | v62) {
          unint64_t v116 = 0xE800000000000000;
        }
        else {
          unint64_t v116 = 0xE400000000000000;
        }
        break;
      default:
        uint64_t v64 = 0xD000000000000011;
        outlined consume of ConversationRequestProcessor.State(v61, (void *)v62, 0);
        uint64_t v65 = "candidate request";
LABEL_40:
        unint64_t v116 = (unint64_t)(v65 - 32) | 0x8000000000000000;
        break;
    }
    uint64_t v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v116, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v42, v55, "Got %s when in state %s: Ignoring", (uint8_t *)v56, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v57, -1, -1);
    uint64_t v52 = v56;
    goto LABEL_49;
  }
  uint64_t v36 = v35;
  unint64_t v37 = (uint64_t *)(v35 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  uint64_t v39 = *(void *)(v35 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  uint64_t v38 = *(void *)(v35 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8);
  swift_bridgeObjectRetain();
  if (v39 == RequestMessageBase.requestId.getter() && v38 == v40)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v66 & 1) == 0)
    {
      id v80 = v24;
      swift_retain_n();
      id v81 = v80;
      uint64_t v82 = Logger.logObject.getter();
      os_log_type_t v83 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v82, v83))
      {
        uint64_t v84 = swift_slowAlloc();
        uint64_t v85 = swift_slowAlloc();
        v135[0] = v85;
        *(_DWORD *)uint64_t v84 = 136315650;
        swift_getObjectType();
        uint64_t v86 = _typeName(_:qualified:)();
        uint64_t v121 = v36;
        uint64_t v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, v135);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v84 + 12) = 2080;
        uint64_t v88 = RequestMessageBase.requestId.getter();
        uint64_t v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v89, v135);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v84 + 22) = 2080;
        uint64_t v90 = *v37;
        unint64_t v91 = v37[1];
        swift_bridgeObjectRetain();
        uint64_t v136 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v91, v135);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v82, v83, "%s request ID %s does not match this turn's: %s. Dropping it on the floor.", (uint8_t *)v84, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v85, -1, -1);
        uint64_t v92 = v84;
LABEL_36:
        MEMORY[0x1BA9E48C0](v92, -1, -1);
        swift_release();

        return;
      }

LABEL_38:
      swift_release_n();
      return;
    }
  }
  int v129 = a6;
  uint64_t v67 = v36 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  swift_beginAccess();
  uint64_t v68 = v128;
  uint64_t v70 = v128 + 16;
  uint64_t v69 = *(void (**)(os_log_t, uint64_t, uint64_t))(v128 + 16);
  os_log_t v72 = v131;
  uint64_t v71 = v132;
  v69(v131, v67, v132);
  uint64_t v73 = v127;
  uint64_t v125 = *(char **)(v127 + 16);
  uint64_t v126 = v70;
  uint64_t v120 = v67;
  uint64_t v121 = v36;
  uint64_t v133 = (void (*)(char *, uint64_t, uint64_t))v69;
  if (!v125)
  {
    uint64_t v78 = *(void (**)(os_log_t, uint64_t))(v68 + 8);
    v78(v72, v71);
LABEL_34:
    id v102 = v24;
    swift_retain_n();
    id v103 = v102;
    uint64_t v104 = v71;
    id v105 = Logger.logObject.getter();
    os_log_type_t v106 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v105, v106))
    {
      uint64_t v107 = swift_slowAlloc();
      unint64_t v108 = (void *)swift_slowAlloc();
      uint64_t v132 = swift_slowAlloc();
      uint64_t v136 = v132;
      *(_DWORD *)uint64_t v107 = 138412546;
      uint64_t v130 = (void (*)(char *, uint64_t))v78;
      os_log_t v131 = v105;
      uint64_t v134 = (uint64_t)v103;
      id v109 = v103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v108 = v103;
      uint64_t v110 = v108;

      *(_WORD *)(v107 + 12) = 2080;
      unint64_t v111 = v123;
      v133(v123, v120, v71);
      uint64_t v112 = RequestType.rawValue.getter();
      unint64_t v114 = v113;
      v130(v111, v104);
      uint64_t v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, v114, &v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      uint64_t v82 = v131;
      _os_log_impl(&dword_1B9C64000, v131, v106, "%@ is not supported for this requestType: %s", (uint8_t *)v107, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v110, -1, -1);
      uint64_t v115 = v132;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v115, -1, -1);
      uint64_t v92 = v107;
      goto LABEL_36;
    }

    goto LABEL_38;
  }
  int v119 = v24;
  unint64_t v74 = (*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80);
  char v75 = v130;
  v69((os_log_t)v130, v127 + v74, v71);
  _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2(&lazy protocol witness table cache variable for type RequestType and conformance RequestType, MEMORY[0x1E4FA2460]);
  swift_bridgeObjectRetain();
  uint64_t v76 = v71;
  char v77 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v78 = *(void (**)(os_log_t, uint64_t))(v68 + 8);
  v78((os_log_t)v75, v76);
  if ((v77 & 1) == 0)
  {
    if (v125 != (char *)1)
    {
      uint64_t v118 = (v68 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v122 = v23;
      char v79 = v129;
      uint64_t v94 = *(void *)(v128 + 72);
      unint64_t v95 = v73 + v94 + v74;
      uint64_t v96 = 1;
      uint64_t v71 = v132;
      while (1)
      {
        char v97 = v130;
        v133((char *)v130, v95, v71);
        id v98 = (char *)(v96 + 1);
        if (__OFADD__(v96, 1))
        {
          __break(1u);
          JUMPOUT(0x1B9E5E7CCLL);
        }
        char v99 = dispatch thunk of static Equatable.== infix(_:_:)();
        os_log_type_t v100 = v97;
        char v101 = v99;
        v78(v100, v71);
        if (v101) {
          break;
        }
        ++v96;
        v95 += v94;
        uint64_t v71 = v132;
        if (v98 == v125)
        {
          swift_bridgeObjectRelease();
          os_log_t v93 = v131;
          id v24 = v119;
          goto LABEL_33;
        }
      }
      swift_bridgeObjectRelease();
      goto LABEL_51;
    }
    swift_bridgeObjectRelease();
    os_log_t v93 = v131;
    uint64_t v71 = v132;
    id v24 = v119;
LABEL_33:
    v78(v93, v71);
    goto LABEL_34;
  }
  swift_bridgeObjectRelease();
  char v79 = v129;
LABEL_51:
  v78(v131, v132);
  uint64_t v117 = a9(v124);
  (*(void (**)(uint64_t))(*(void *)v117 + 408))(1);
  if (v79) {
    ConversationRequestProcessorTurnState.updateResultCandidateState(_:)(v117);
  }
  else {
    ConversationRequestProcessorTurnState.addResultCandidateState(_:)(v117);
  }
  swift_release();
  swift_release();
}

void *specialized ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,unsigned __int8 a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32)
{
  uint64_t v111 = a7;
  uint64_t v110 = a6;
  uint64_t v112 = a5;
  uint64_t v105 = a4;
  uint64_t v118 = a3;
  uint64_t v109 = a2;
  uint64_t v108 = a1;
  uint64_t v99 = a28;
  uint64_t v98 = a27;
  int v97 = a26;
  unint64_t v113 = a25;
  uint64_t v102 = a24;
  uint64_t v119 = a23;
  uint64_t v121 = a21;
  uint64_t v122 = a22;
  uint64_t v100 = a20;
  LODWORD(v96) = a18;
  uint64_t v103 = a17;
  uint64_t v120 = a15;
  uint64_t v104 = a14;
  uint64_t v101 = a13;
  uint64_t v116 = a10;
  uint64_t v117 = a11;
  uint64_t v107 = a9;
  uint64_t v32 = type metadata accessor for UUID();
  uint64_t v114 = *(void *)(v32 - 8);
  uint64_t v115 = v32;
  MEMORY[0x1F4188790](v32);
  os_log_type_t v106 = (char *)v93 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124[3] = a31;
  v124[4] = a32;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v124);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a31 - 8) + 32))(boxed_opaque_existential_0, a29, a31);
  uint64_t v35 = OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_asyncWork;
  type metadata accessor for ConcurrentTaskPool();
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = MEMORY[0x1E4FBC860];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v37 = swift_allocObject();
  *(_DWORD *)(v37 + 16) = 0;
  *(void *)(v36 + 24) = v37;
  *(void *)((char *)a30 + v35) = v36;
  uint64_t v38 = (char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_state;
  *(void *)uint64_t v38 = 0;
  *((void *)v38 + 1) = 0;
  v38[16] = 3;
  *(void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rraasCollectionTask) = 0;
  *((unsigned char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sentResultCandidateSelected) = 0;
  *((unsigned char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_didCommitExecution) = 0;
  *((unsigned char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_entitiesCollected) = 2;
  uint64_t v39 = (void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_gestureRCID);
  *uint64_t v39 = 0;
  v39[1] = 0;
  uint64_t v40 = self;
  swift_retain();
  swift_retain();
  swift_retain();
  id v41 = objc_msgSend(v40, sel_sharedPreferences);
  char v42 = AFDeviceSupportsSAE();
  id v43 = objc_msgSend(self, sel_clientWithIdentifier_, 125);
  type metadata accessor for TrialExperimentationAssetManager();
  uint64_t v44 = swift_allocObject();
  id v45 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  *(void *)(v44 + 16) = v43;
  *(void *)(v44 + 24) = v45;
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v46 = static SelfReflectionCurareDonator.instance;
  type metadata accessor for SelfReflectionAgent();
  uint64_t v47 = swift_allocObject();
  swift_retain();
  v93[1] = a19;
  uint64_t v48 = specialized SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(a16, a19, (uint64_t)v41, v42, v44, v46, 0, v47);
  *(void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_selfReflectionAgent) = v48;
  outlined init with copy of ReferenceResolutionClientProtocol(v117, (uint64_t)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient);
  uint64_t v49 = a12[3];
  uint64_t v50 = *(uint64_t (**)(uint64_t))(*a12 + 152);
  uint64_t v51 = swift_unknownObjectRetain();
  LOBYTE(v50) = v50(v51);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(a12 + 4), (uint64_t)&v123);
  type metadata accessor for FeatureChecker();
  swift_allocObject();
  uint64_t v52 = (uint64_t)v113;
  id v94 = v113;
  swift_retain();
  id v53 = FeatureChecker.init()();
  type metadata accessor for ConversationOutputSubmitter();
  uint64_t v54 = swift_allocObject();
  *(void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionOutputSubmitter) = specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:muxContextMessage:messagePublisher:selfReflection:featureChecker:)(v49, v50 & 1, v52, &v123, v48, (uint64_t)v53, v54);
  *(void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_decisionMaker) = v101;
  *(void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_preExecutionActionHandler) = v104;
  uint64_t v55 = v103;
  *(void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_requestDispatcherServiceHelper) = v103;
  outlined init with copy of ReferenceResolutionClientProtocol(v120, (uint64_t)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionState);
  *(void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil) = a16;
  *((unsigned char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isFirstRequestInSession) = v96 & 1;
  *(void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_networkAvailabilityProvider) = a19;
  *(void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_coreTelephonyServiceProvider) = v100;
  outlined init with copy of ReferenceResolutionClientProtocol(v121, (uint64_t)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rrClient);
  outlined init with copy of ReferenceResolutionClientProtocol(v122, (uint64_t)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_correctionsPlatformClient);
  *(void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_muxContextMessage) = v52;
  uint64_t v56 = (char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionUserId;
  uint64_t v57 = type metadata accessor for UserID();
  uint64_t v95 = *(void *)(v57 - 8);
  uint64_t v58 = *(void (**)(char *, uint64_t))(v95 + 16);
  uint64_t v96 = v57;
  v58(v56, v119);
  v97 &= 1u;
  *((unsigned char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled) = v97;
  unint64_t v59 = (void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_userSessionState);
  uint64_t v60 = v99;
  *unint64_t v59 = v98;
  v59[1] = v60;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v124, (uint64_t)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_featureChecker);
  uint64_t v61 = v102;
  *(void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_recentDialogTracker) = v102;
  unint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v61 + 224);
  swift_retain();
  swift_retain();
  swift_retain();
  id v63 = v94;
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v64 = v105;
  uint64_t v65 = v112;
  v62(v105, v112, v118);
  uint64_t v66 = v65;
  if (one-time initialization token for sharedInstance != -1) {
    swift_once();
  }
  uint64_t v67 = static DeviceContextHelper.sharedInstance;
  uint64_t v68 = (void *)((char *)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextDonator);
  v68[3] = type metadata accessor for DeviceContextHelper();
  void v68[4] = (uint64_t)&protocol witness table for DeviceContextHelper;
  *uint64_t v68 = v67;
  type metadata accessor for ConversationBridgeProcessorDelegate();
  uint64_t v69 = swift_allocObject();
  swift_weakInit();
  *(void *)(v69 + 24) = v55;
  *(void *)((char *)a30
            + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionBridgeProcessorDelegate) = v69;
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v70 = v111;
  uint64_t v71 = v110;
  uint64_t v72 = v109;
  uint64_t v73 = v108;
  closure #1 in ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(v97, v113, v119, v120, v121, v122, v55, v108, (uint64_t)&v123, v109, v64, v66, v110, v111, v67, a16);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v123, (uint64_t)a30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater, &demangling cache variable for type metadata for ContextUpdating?);
  swift_release();
  uint64_t v75 = v114;
  uint64_t v74 = v115;
  uint64_t v76 = v106;
  (*(void (**)(char *, uint64_t, uint64_t))(v114 + 16))(v106, v118, v115);
  outlined init with copy of ReferenceResolutionClientProtocol(v116, (uint64_t)&v123);
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  a30[12] = v73;
  a30[13] = v72;
  (*(void (**)(uint64_t, char *, uint64_t))(v75 + 32))((uint64_t)a30 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId, v76, v74);
  uint64_t v77 = v112;
  a30[8] = v64;
  a30[9] = v77;
  a30[10] = v71;
  a30[11] = v70;
  outlined init with take of ReferenceResolutionClientProtocol(&v123, (uint64_t)(a30 + 3));
  a30[2] = v55;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  swift_retain();
  swift_release();
  uint64_t v79 = v121;
  uint64_t v80 = v122;
  uint64_t v81 = v120;
  if (Strong)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v82 = type metadata accessor for Logger();
    __swift_project_value_buffer(v82, (uint64_t)static Logger.conversationBridge);
    os_log_type_t v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.error.getter();
    BOOL v85 = os_log_type_enabled(v83, v84);
    uint64_t v86 = v118;
    if (v85)
    {
      uint64_t v87 = v81;
      uint64_t v88 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v88 = 0;
      _os_log_impl(&dword_1B9C64000, v83, v84, "executionProcessor was already set on ExecutionBridgeProcessorDelegate ignoring this operation", v88, 2u);
      unint64_t v89 = v88;
      uint64_t v81 = v87;
      MEMORY[0x1BA9E48C0](v89, -1, -1);
    }
    swift_release();

    uint64_t v90 = v119;
  }
  else
  {
    swift_weakAssign();
    swift_release();
    uint64_t v86 = v118;
    uint64_t v90 = v119;
  }
  uint64_t v91 = v117;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v124);
  (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v90, v96);
  __swift_destroy_boxed_opaque_existential_1Tm(v80);
  __swift_destroy_boxed_opaque_existential_1Tm(v79);
  __swift_destroy_boxed_opaque_existential_1Tm(v81);
  __swift_destroy_boxed_opaque_existential_1Tm(v91);
  __swift_destroy_boxed_opaque_existential_1Tm(v116);
  (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v86, v115);
  return a30;
}

void *specialized ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unsigned __int8 a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,unsigned __int8 a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  id v31 = v30;
  uint64_t v104 = a6;
  uint64_t v105 = a7;
  uint64_t v102 = a4;
  uint64_t v103 = a5;
  uint64_t v107 = a3;
  uint64_t v101 = a2;
  uint64_t v100 = a1;
  uint64_t v111 = a30;
  int v93 = a27;
  id v92 = a26;
  uint64_t v95 = a25;
  uint64_t v114 = a24;
  uint64_t v117 = a23;
  uint64_t v109 = a22;
  uint64_t v97 = a21;
  int v91 = a19;
  uint64_t v110 = a18;
  uint64_t v115 = a16;
  uint64_t v96 = a15;
  uint64_t v94 = a14;
  uint64_t v112 = a12;
  uint64_t v116 = a11;
  uint64_t v108 = a10;
  uint64_t v99 = a9;
  uint64_t v106 = type metadata accessor for UUID();
  uint64_t v113 = *(void *)(v106 - 8);
  MEMORY[0x1F4188790](v106);
  uint64_t v98 = (char *)&v86 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_asyncWork;
  type metadata accessor for ConcurrentTaskPool();
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = MEMORY[0x1E4FBC860];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v35 = swift_allocObject();
  *(_DWORD *)(v35 + 16) = 0;
  *(void *)(v34 + 24) = v35;
  *(void *)((char *)v30 + v33) = v34;
  uint64_t v36 = (char *)v30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_state;
  *(void *)uint64_t v36 = 0;
  *((void *)v36 + 1) = 0;
  v36[16] = 3;
  *(void *)((char *)v30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rraasCollectionTask) = 0;
  *((unsigned char *)v30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sentResultCandidateSelected) = 0;
  *((unsigned char *)v30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_didCommitExecution) = 0;
  *((unsigned char *)v30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_entitiesCollected) = 2;
  uint64_t v37 = (void *)((char *)v30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_gestureRCID);
  *uint64_t v37 = 0;
  v37[1] = 0;
  uint64_t v38 = self;
  swift_retain();
  swift_retain();
  swift_retain();
  id v39 = objc_msgSend(v38, sel_sharedPreferences);
  char v40 = AFDeviceSupportsSAE();
  id v41 = objc_msgSend(self, sel_clientWithIdentifier_, 125);
  type metadata accessor for TrialExperimentationAssetManager();
  uint64_t v42 = swift_allocObject();
  id v43 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  *(void *)(v42 + 16) = v41;
  *(void *)(v42 + 24) = v43;
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v90 = a29;
  uint64_t v89 = a28;
  uint64_t v44 = static SelfReflectionCurareDonator.instance;
  type metadata accessor for SelfReflectionAgent();
  uint64_t v45 = swift_allocObject();
  swift_retain();
  uint64_t v87 = a20;
  uint64_t v46 = specialized SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(a17, a20, (uint64_t)v39, v40, v42, v44, 0, v45);
  *(void *)((char *)v30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_selfReflectionAgent) = v46;
  outlined init with copy of ReferenceResolutionClientProtocol(v116, (uint64_t)v30 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient);
  uint64_t v47 = a13[3];
  uint64_t v48 = *(uint64_t (**)(uint64_t))(*a13 + 152);
  uint64_t v49 = swift_unknownObjectRetain();
  LOBYTE(v44) = v48(v49);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(a13 + 4), (uint64_t)&v118);
  type metadata accessor for FeatureChecker();
  swift_allocObject();
  uint64_t v50 = (uint64_t)v92;
  id v88 = v92;
  swift_retain();
  uint64_t v51 = FeatureChecker.init()();
  type metadata accessor for ConversationOutputSubmitter();
  uint64_t v52 = swift_allocObject();
  *(void *)((char *)v31 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionOutputSubmitter) = specialized ConversationOutputSubmitter.init(requestDispatcherServiceHelper:isMUXEnabled:muxContextMessage:messagePublisher:selfReflection:featureChecker:)(v47, v44 & 1, v50, &v118, v46, (uint64_t)v51, v52);
  *(void *)((char *)v31 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_decisionMaker) = v94;
  *(void *)((char *)v31 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_preExecutionActionHandler) = v96;
  uint64_t v53 = v110;
  *(void *)((char *)v31 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_requestDispatcherServiceHelper) = v110;
  outlined init with copy of ReferenceResolutionClientProtocol(v115, (uint64_t)v31 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionState);
  *(void *)((char *)v31 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil) = a17;
  *((unsigned char *)v31 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isFirstRequestInSession) = v91 & 1;
  *(void *)((char *)v31 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_networkAvailabilityProvider) = v87;
  *(void *)((char *)v31 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_coreTelephonyServiceProvider) = v97;
  outlined init with copy of ReferenceResolutionClientProtocol(v109, (uint64_t)v31 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_rrClient);
  outlined init with copy of ReferenceResolutionClientProtocol(v117, (uint64_t)v31 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_correctionsPlatformClient);
  outlined init with copy of ReferenceResolutionClientProtocol(v112, (uint64_t)v31 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater);
  *(void *)((char *)v31 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_muxContextMessage) = v50;
  uint64_t v54 = (char *)v31 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionUserId;
  uint64_t v55 = (void *)type metadata accessor for UserID();
  uint64_t v56 = *(v55 - 1);
  uint64_t v57 = *(void (**)(char *, uint64_t))(v56 + 16);
  id v92 = v55;
  v57(v54, v114);
  *((unsigned char *)v31 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled) = v93 & 1;
  type metadata accessor for ConversationBridgeProcessorDelegate();
  uint64_t v58 = swift_allocObject();
  swift_weakInit();
  *(void *)(v58 + 24) = v53;
  *(void *)((char *)v31
            + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionBridgeProcessorDelegate) = v58;
  uint64_t v59 = one-time initialization token for sharedInstance;
  swift_unknownObjectRetain_n();
  swift_retain();
  swift_retain();
  id v60 = v88;
  swift_retain();
  swift_retain();
  swift_retain();
  if (v59 != -1) {
    swift_once();
  }
  uint64_t v61 = static DeviceContextHelper.sharedInstance;
  unint64_t v62 = (void *)((char *)v31 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextDonator);
  v62[3] = type metadata accessor for DeviceContextHelper();
  v62[4] = (uint64_t)&protocol witness table for DeviceContextHelper;
  *unint64_t v62 = v61;
  uint64_t v63 = v95;
  *(void *)((char *)v31 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_recentDialogTracker) = v95;
  uint64_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v63 + 224);
  swift_retain();
  swift_retain();
  uint64_t v65 = v102;
  uint64_t v66 = v103;
  uint64_t v67 = v107;
  v64(v102, v103, v107);
  uint64_t v68 = (void *)((char *)v31 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_userSessionState);
  uint64_t v69 = v90;
  *uint64_t v68 = v89;
  v68[1] = v69;
  outlined init with copy of ReferenceResolutionClientProtocol(v111, (uint64_t)v31 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_featureChecker);
  swift_release();
  uint64_t v70 = v113;
  uint64_t v71 = v98;
  uint64_t v72 = v106;
  (*(void (**)(char *, uint64_t, uint64_t))(v113 + 16))(v98, v67, v106);
  uint64_t v73 = v108;
  outlined init with copy of ReferenceResolutionClientProtocol(v108, (uint64_t)&v118);
  uint64_t v74 = v110;
  swift_unknownObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v75 = v101;
  v31[12] = v100;
  v31[13] = v75;
  (*(void (**)(uint64_t, char *, uint64_t))(v70 + 32))((uint64_t)v31 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId, v71, v72);
  v31[8] = v65;
  v31[9] = v66;
  uint64_t v76 = v105;
  v31[10] = v104;
  v31[11] = v76;
  outlined init with take of ReferenceResolutionClientProtocol(&v118, (uint64_t)(v31 + 3));
  v31[2] = v74;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  swift_retain();
  swift_release();
  if (Strong)
  {
    uint64_t v78 = v116;
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v79 = type metadata accessor for Logger();
    __swift_project_value_buffer(v79, (uint64_t)static Logger.conversationBridge);
    uint64_t v80 = Logger.logObject.getter();
    os_log_type_t v81 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v80, v81))
    {
      uint64_t v82 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v82 = 0;
      _os_log_impl(&dword_1B9C64000, v80, v81, "executionProcessor was already set on ExecutionBridgeProcessorDelegate ignoring this operation", v82, 2u);
      os_log_type_t v83 = v82;
      uint64_t v73 = v108;
      MEMORY[0x1BA9E48C0](v83, -1, -1);
    }
    swift_release();

    uint64_t v84 = v117;
  }
  else
  {
    swift_weakAssign();
    swift_release();
    uint64_t v78 = v116;
    uint64_t v84 = v117;
  }
  __swift_destroy_boxed_opaque_existential_1Tm(v111);
  (*(void (**)(uint64_t, id))(v56 + 8))(v114, v92);
  __swift_destroy_boxed_opaque_existential_1Tm(v84);
  __swift_destroy_boxed_opaque_existential_1Tm(v109);
  __swift_destroy_boxed_opaque_existential_1Tm(v115);
  __swift_destroy_boxed_opaque_existential_1Tm(v112);
  __swift_destroy_boxed_opaque_existential_1Tm(v78);
  __swift_destroy_boxed_opaque_existential_1Tm(v73);
  (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v67, v72);
  return v31;
}

uint64_t type metadata accessor for ConversationRequestProcessor()
{
  uint64_t result = type metadata singleton initialization cache for ConversationRequestProcessor;
  if (!type metadata singleton initialization cache for ConversationRequestProcessor) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.createRRaaSCollectionTask()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationRequestProcessor.createRRaaSCollectionTask()(a1, v4, v5, v6);
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.fallbackToIntelligenceFlow(prescribedTool:)(uint64_t a1)
{
  return closure #1 in ConversationRequestProcessor.fallbackToIntelligenceFlow(prescribedTool:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1B9E5FCA8()
{
  swift_release();
  swift_release();

  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.flowPluginWillExecute(flowPluginInfo:)(uint64_t a1)
{
  return closure #1 in ConversationRequestProcessor.flowPluginWillExecute(flowPluginInfo:)(a1, *(void *)(v1 + 16));
}

uint64_t sub_1B9E5FD04()
{
  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1B9E5FE30()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 80, 7);
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.commit(rcState:userInput:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationRequestProcessor.commit(rcState:userInput:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t objectdestroyTm_2()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.safelyCloseContextUpdater()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ConversationRequestProcessor.safelyCloseContextUpdater()(a1, v4, v5, v6);
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.actionCandidatesGenerated(_:rcId:)(uint64_t a1)
{
  return closure #1 in ConversationRequestProcessor.actionCandidatesGenerated(_:rcId:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

void partial apply for closure #1 in ConversationRequestProcessor.makeAndSendSpeechRecognizedCommand(rcState:turn:reply:)(uint64_t a1, void *a2)
{
  closure #1 in ConversationRequestProcessor.makeAndSendSpeechRecognizedCommand(rcState:turn:reply:)(a1, a2, *(void (**)(uint64_t, void *))(v2 + 16));
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.waitForSalientEntityCollection(timeout:)(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  v4[5] = a1;
  v4[6] = v1;
  return MEMORY[0x1F4188298](closure #1 in ConversationRequestProcessor.waitForSalientEntityCollection(timeout:), 0, 0);
}

uint64_t sub_1B9E6013C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 384))();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = v5;
  return result;
}

uint64_t sub_1B9E60194(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void *, uint64_t))(**(void **)a2 + 392);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  outlined copy of ConversationRequestProcessor.State(*(void *)a1, v3, v5);
  return v4(v2, v3, v5);
}

uint64_t sub_1B9E60214(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 408))();
}

uint64_t sub_1B9E60260(uint64_t a1, uint64_t a2)
{
  outlined init with copy of ReferenceResolutionClientProtocol(a1, (uint64_t)v4);
  return (*(uint64_t (**)(unsigned char *))(**(void **)a2 + 416))(v4);
}

uint64_t sub_1B9E602C4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 456))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B9E6031C(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 464))(*a1);
}

uint64_t sub_1B9E6036C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 480))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B9E603C4(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 488))(*a1);
}

uint64_t sub_1B9E60414@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 504))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9E60468(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 512))(*a1);
}

uint64_t sub_1B9E604B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 552))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B9E6050C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, unint64_t))(**(void **)a2 + 560);
  outlined copy of UserSessionState(*a1, v3);
  return v4(v2, v3);
}

uint64_t ObjC metadata update function for ConversationRequestProcessor()
{
  return type metadata accessor for ConversationRequestProcessor();
}

uint64_t type metadata completion function for ConversationRequestProcessor()
{
  uint64_t result = type metadata accessor for UserID();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t method lookup function for ConversationRequestProcessor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ConversationRequestProcessor);
}

uint64_t dispatch thunk of ConversationRequestProcessor.state.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.state.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.state.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.sessionState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.sessionState.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.sessionState.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.sentResultCandidateSelected.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 456))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.sentResultCandidateSelected.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 464))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.sentResultCandidateSelected.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 472))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.didCommitExecution.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 480))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.didCommitExecution.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 488))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.didCommitExecution.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 496))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.entitiesCollected.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 504))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.entitiesCollected.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 512))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.entitiesCollected.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 520))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.userSessionState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 552))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.userSessionState.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 560))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.userSessionState.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 568))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.__allocating_init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)()
{
  return (*(uint64_t (**)(void))(v0 + 576))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.__allocating_init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)()
{
  return (*(uint64_t (**)(void))(v0 + 584))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.activeTurn.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 592))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.pendingTurn.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 600))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStartSpeechRequestMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 608))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStartChildTextRequestMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 616))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStartChildSpeechRequestMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 624))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStartTextRequestMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 632))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStartDirectActionRequestMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 640))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStartUnderstandingOnServerRequestMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 648))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStartUnderstandingOnServerTextRequestMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 656))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.createRRaaSCollectionTask()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 664))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStartLocalRequestMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 672))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStartCorrectedSpeechRequestMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 680))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStartIFRequestMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 688))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStartCandidateRequestMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 696))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleRequestContextMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 712))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleASRResultCandidateMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 736))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleMUXASRResultCandidateMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 744))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleTextBasedResultCandidateMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 752))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleGestureBasedResultCandidateMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 760))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleDirectActionResultCandidateMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 768))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleNLResultCandidateMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 776))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleNLRepetitionMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 784))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.fallbackToIntelligenceFlow(prescribedTool:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 800))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.fallbackToSiriX(rcId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 808))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handlePommesResultCandidateMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 816))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleSpeechStopDetectedMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 824))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleTRPCandidateRequestMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 832))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleTextBasedTRPCandidateMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 840))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleNLRoutingDecisionMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 848))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleTTResponseMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 856))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleMultiUserStoppedListeningForSpeechContinuationMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 864))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStoppedListeningForSpeechContinuationMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 872))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleStoppedListeningForTextContinuationMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 880))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.canCommitExecution(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 896))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.reallyHandleStoppedListeningForContinuationMessage(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 904))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.waitForPommes(for:nlRoutingDecision:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 912))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handlePommesTRPCandidateMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 920))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleResultSelectedMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 936))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleSpeechStopDetectedMessage(_:forTurn:withTRPCandidateState:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 944))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleResultSelectedMessage(_:forTurn:withResultCandidateState:speechRecognizedCommand:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 952))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleCancelRequestMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 960))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleAceRemoteExecutionContextUpdate(_:executionContext:reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 968))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleFlowOutputResponseMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 976))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.submit(executionOutput:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 984))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.close(withExecutionOutput:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 992))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.close(withExecutionOutput:errorString:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1000))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.close(withExecutionOutput:errorString:shouldFailRequest:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1008))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.close(withExecutionOutput:needsUserInput:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1016))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.fallbackToServer(forResultCandidateId:serverFallbackReason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1024))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.fallbackToInfoDomainResults(forResultCandidateId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1032))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.fetchSpeechInfo(reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1040))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.getRecentDialogs()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1048))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.flowPluginWillExecute(flowPluginInfo:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1056))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.willExecute(executionInputInfo:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1064))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.getSelfReflectionDecision()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1072))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.submitExternalActivationRequest(withRequestInfo:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1080))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.postToMessageBus(message:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1088))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.synchronizedClose(_:_:_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1104))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.commit(rcState:userInput:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1128))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.handleRuntimeError(error:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1136))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.acquireConversationUserInput(forUserId:requestId:reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1144))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1152))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.closeServerRequest(forExecutionRequestId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1160))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.safelyCloseContextUpdater()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1184))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.buildConversationUserInput(rcState:requestType:nlResponse:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1256))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.buildUserSpecificInfoForUserMeetingUserSessionThreshold(rcState:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1264))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.buildUserSpecificInfoForRecognizedUser(rcState:speechProfileUsed:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1272))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.sendResultCandidateSelected(selectedResultCandidateId:isServerFallback:completion:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1280))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.fetchCachedAnnounceContext(forUserId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1296))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.revealAsrTranscription(for:turn:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1304))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.actionCandidatesGenerated(_:rcId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1344))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.makeAndSendSpeechRecognizedCommand(rcState:turn:reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1352))();
}

uint64_t dispatch thunk of ConversationRequestProcessor.waitForSalientEntityCollection(timeout:)(uint64_t a1)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v1 + 1360) + **(int **)(*(void *)v1 + 1360));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v6(a1);
}

void destroy for ConversationRequestProcessor.State(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for ConversationRequestProcessor.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of ConversationRequestProcessor.State(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ConversationRequestProcessor.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of ConversationRequestProcessor.State(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of ConversationRequestProcessor.State(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ConversationRequestProcessor.State(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  char v5 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of ConversationRequestProcessor.State(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConversationRequestProcessor.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConversationRequestProcessor.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ConversationRequestProcessor.State(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for ConversationRequestProcessor.State(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)uint64_t result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ConversationRequestProcessor.State()
{
  return &type metadata for ConversationRequestProcessor.State;
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.postExecutionFinalizedMessage(requestId:selectedTrpId:selectedTcuId:userId:)(uint64_t a1)
{
  return closure #1 in ConversationRequestProcessor.postExecutionFinalizedMessage(requestId:selectedTrpId:selectedTcuId:userId:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

uint64_t outlined init with copy of ResultCandidateType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ResultCandidateType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of RoutingDecision(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t objectdestroy_25Tm()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void partial apply for closure #2 in ConversationRequestProcessor.completeRequest(completion:)(void *a1, void *a2)
{
  closure #2 in ConversationRequestProcessor.completeRequest(completion:)(a1, a2, *(void (**)(void *, void *))(v2 + 16));
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.completeRequest(completion:)(uint64_t a1)
{
  return closure #1 in ConversationRequestProcessor.completeRequest(completion:)(a1, v1);
}

uint64_t _s14SiriKitRuntime15MessageBusActorCACScAAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B9E61BB4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.synchronizedCloseRequest()(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  char v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *char v8 = v2;
  v8[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in ConversationRequestProcessor.synchronizedCloseRequest()(a1, v4, v5, v7, v6);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationRequestProcessor.synchronizedCloseRequest()(uint64_t a1)
{
  return closure #1 in closure #1 in ConversationRequestProcessor.synchronizedCloseRequest()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1B9E61CC4()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
}

uint64_t partial apply for closure #1 in ConversationRequestProcessor.synchronizedRetriggerOriginalRequest(rollbackRequestId:userId:reply:)(uint64_t a1)
{
  return closure #1 in ConversationRequestProcessor.synchronizedRetriggerOriginalRequest(rollbackRequestId:userId:reply:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:)(uint64_t a1)
{
  return closure #1 in closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1B9E61CE8()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<Error?, Never>);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:)(int a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Error?, Never>);

  return closure #1 in closure #1 in closure #1 in ConversationRequestProcessor.synchronizedClose(_:_:_:)(a1, a2);
}

uint64_t sub_1B9E61D78()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_release();

  return MEMORY[0x1F4186498](v0, 88, 7);
}

uint64_t partial apply for closure #1 in closure #1 in ConversationRequestProcessor.submit(executionOutput:completion:)(uint64_t a1)
{
  uint64_t v4 = v1[3];
  uint64_t v12 = v1[2];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = v1[8];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in ConversationRequestProcessor.submit(executionOutput:completion:)(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t ConversationRequestProcessorTurnState.__allocating_init(requestType:requestId:asrOnServer:inputOrigin:nlRoutingDecision:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo) = 0;
  *(_DWORD *)(v12 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter) = 0;
  *(_OWORD *)(v12 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState) = xmmword_1BA0537A0;
  uint64_t v13 = v12 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  uint64_t v14 = type metadata accessor for RequestType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v13, a1, v14);
  uint64_t v15 = (void *)(v12 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  *uint64_t v15 = a2;
  v15[1] = a3;
  *(unsigned char *)(v12 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer) = a4;
  uint64_t v16 = v12 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin;
  uint64_t v17 = type metadata accessor for InputOrigin();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(v16, a5, v17);
  outlined init with take of NLRoutingDecisionMessage.RoutingDecision?(a6, v12 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_nlRoutingDecision);
  return v12;
}

void *ConversationRequestProcessorTurnState.SpeechState.speechRecognizedCommand.getter(unint64_t a1, void *a2)
{
  if (a1 >> 62 != 1) {
    return 0;
  }
  uint64_t v2 = a2;
  id v3 = a2;
  return v2;
}

uint64_t ConversationRequestProcessorTurnState.__allocating_init(startDirectActionRequestMessage:)(void *a1)
{
  uint64_t v2 = specialized ConversationRequestProcessorTurnState.__allocating_init(startDirectActionRequestMessage:)(a1, MEMORY[0x1E4FA2408]);

  return v2;
}

uint64_t ConversationRequestProcessorTurnState.__allocating_init(startUnderstandingOnServerRequestMessage:)(void *a1)
{
  uint64_t v2 = specialized ConversationRequestProcessorTurnState.__allocating_init(startDirectActionRequestMessage:)(a1, MEMORY[0x1E4FA2428]);

  return v2;
}

uint64_t ConversationRequestProcessorTurnState.__allocating_init(startUnderstandingOnServerTextRequestMessage:)(void *a1)
{
  uint64_t v2 = specialized ConversationRequestProcessorTurnState.__allocating_init(startDirectActionRequestMessage:)(a1, MEMORY[0x1E4FA2450]);

  return v2;
}

uint64_t ConversationRequestProcessorTurnState.__allocating_init(startLocalRequestMessage:)(void *a1)
{
  uint64_t v2 = specialized ConversationRequestProcessorTurnState.__allocating_init(startDirectActionRequestMessage:)(a1, MEMORY[0x1E4FA2438]);

  return v2;
}

uint64_t ConversationRequestProcessorTurnState.__allocating_init(startCorrectedSpeechRequestMessage:)(void *a1)
{
  uint64_t v2 = specialized ConversationRequestProcessorTurnState.__allocating_init(startDirectActionRequestMessage:)(a1, MEMORY[0x1E4FA2430]);

  return v2;
}

uint64_t ConversationRequestProcessorTurnState.__allocating_init(startIFRequestMessage:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for InputOrigin();
  uint64_t v5 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for RequestType();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E4FA2430], v8);
  uint64_t v12 = RequestMessageBase.requestId.getter();
  uint64_t v14 = v13;
  StartIFRequestMessage.inputOrigin.getter();

  uint64_t v15 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v4, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo) = 0;
  *(_DWORD *)(v16 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter) = 0;
  *(_OWORD *)(v16 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState) = xmmword_1BA0537A0;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v16 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType, v11, v8);
  uint64_t v17 = (uint64_t *)(v16 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  *uint64_t v17 = v12;
  v17[1] = v14;
  *(unsigned char *)(v16 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v16 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin, v7, v20);
  outlined init with take of NLRoutingDecisionMessage.RoutingDecision?((uint64_t)v4, v16 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_nlRoutingDecision);
  return v16;
}

void ConversationRequestProcessorTurnState.updateResultCandidateState(_:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 24);
  uint64_t v5 = (unint64_t *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  unint64_t v6 = *v5;
  if (*v5 >> 62)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
    swift_retain_n();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      v34[0] = v20;
      *(_DWORD *)uint64_t v19 = 136315138;
      unint64_t v21 = *v5 >> 62;
      if (v21)
      {
        if (v21 == 1)
        {
          unint64_t v22 = 0xEA00000000006465;
          uint64_t v23 = 0x7463656C65536372;
        }
        else
        {
          unint64_t v22 = 0xE400000000000000;
          uint64_t v23 = 1701602409;
        }
      }
      else
      {
        unint64_t v22 = 0x80000001BA0664F0;
        uint64_t v23 = 0xD000000000000019;
      }
      uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v22, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v17, v18, "Got an ASRResultCandidateMessge/TRPCandidateRequestMessage in state %s: Ignoring", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v20, -1, -1);
      MEMORY[0x1BA9E48C0](v19, -1, -1);
    }
    else
    {

      swift_release_n();
    }
  }
  else
  {
    uint64_t v7 = (void *)v5[1];
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)v6 + 88);
    outlined copy of ConversationRequestProcessorTurnState.SpeechState(v6, v7);
    outlined copy of ConversationRequestProcessorTurnState.SpeechState(v6, v7);
    swift_bridgeObjectRetain();
    outlined copy of ConversationRequestProcessorTurnState.SpeechState(v6, v7);
    uint64_t v9 = swift_bridgeObjectRetain();
    if (*(void *)(v8(v9) + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v4, v3), (v10 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
      swift_bridgeObjectRetain_n();
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = (uint8_t *)swift_slowAlloc();
        uint64_t v15 = swift_slowAlloc();
        *(_DWORD *)uint64_t v14 = 136315138;
        v34[0] = v15;
        swift_bridgeObjectRetain();
        uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B9C64000, v12, v13, "Updating ResultCandidateState with rcId %s to rcStateHolder.", v14, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v15, -1, -1);
        MEMORY[0x1BA9E48C0](v14, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v29 = *(uint64_t (**)(uint64_t *))(*(void *)v6 + 104);
      swift_retain();
      uint64_t v30 = (void (*)(uint64_t *, void))v29(v34);
      uint64_t v32 = v31;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v35 = *v32;
      *uint64_t v32 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, v4, v3, isUniquelyReferenced_nonNull_native);
      *uint64_t v32 = v35;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v30(v34, 0);
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v6, v7);
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v6, v7);
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      __swift_project_value_buffer(v24, (uint64_t)static Logger.conversationBridge);
      swift_bridgeObjectRetain();
      os_log_type_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        BOOL v27 = (uint8_t *)swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        v34[0] = v28;
        *(_DWORD *)BOOL v27 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, v34);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B9C64000, v25, v26, "Got a Conversation state update for RC ID %s that does not exist in the cache yet. Dropping the update.", v27, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v28, -1, -1);
        MEMORY[0x1BA9E48C0](v27, -1, -1);
        outlined consume of ConversationRequestProcessorTurnState.SpeechState(v6, v7);

        outlined consume of ConversationRequestProcessorTurnState.SpeechState(v6, v7);
      }
      else
      {
        outlined consume of ConversationRequestProcessorTurnState.SpeechState(v6, v7);
        swift_bridgeObjectRelease_n();
        outlined consume of ConversationRequestProcessorTurnState.SpeechState(v6, v7);
      }
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v6, v7);
    }
  }
}

uint64_t ConversationRequestProcessorTurnState.SpeechState.selectedResultCandidate.getter(unint64_t a1)
{
  if (a1 >> 62 == 1) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

uint64_t ConversationRequestProcessorTurnState.SpeechState.getPendingRcState(rcId:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  if (a3 >> 62) {
    return 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)a3 + 88);
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(a3, a4);
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = v8(v9);
  if (*(void *)(v10 + 16) && (unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v12 & 1) != 0))
  {
    uint64_t v13 = *(void *)(*(void *)(v10 + 56) + 8 * v11);
    swift_retain();
  }
  else
  {
    uint64_t v13 = 0;
  }
  swift_bridgeObjectRelease();
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(a3, a4);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t ConversationRequestProcessorTurnState.requestType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for RequestType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ConversationRequestProcessorTurnState.requestType.setter(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for RequestType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*ConversationRequestProcessorTurnState.requestType.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationRequestProcessorTurnState.requestId.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ConversationRequestProcessorTurnState.asrOnServer.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer);
}

uint64_t ConversationRequestProcessorTurnState.inputOrigin.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin;
  uint64_t v4 = type metadata accessor for InputOrigin();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t ConversationRequestProcessorTurnState.nlRoutingDecision.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of NLRoutingDecisionMessage.RoutingDecision?(v1 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_nlRoutingDecision, a1);
}

void *ConversationRequestProcessorTurnState.flowPluginInfo.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void ConversationRequestProcessorTurnState.flowPluginInfo.setter(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*ConversationRequestProcessorTurnState.flowPluginInfo.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationRequestProcessorTurnState.outputCounter.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter);
  swift_beginAccess();
  return *v1;
}

uint64_t ConversationRequestProcessorTurnState.outputCounter.setter(int a1)
{
  id v3 = (_DWORD *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter);
  uint64_t result = swift_beginAccess();
  *id v3 = a1;
  return result;
}

uint64_t (*ConversationRequestProcessorTurnState.outputCounter.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

unint64_t ConversationRequestProcessorTurnState.speechState.getter()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState;
  swift_beginAccess();
  unint64_t v2 = *(void *)v1;
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(*(void *)v1, *(void **)(v1 + 8));
  return v2;
}

void ConversationRequestProcessorTurnState.speechState.setter(unint64_t a1, unint64_t a2)
{
  uint64_t v5 = (unint64_t *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  unint64_t v6 = *v5;
  uint64_t v7 = (void *)v5[1];
  unint64_t *v5 = a1;
  v5[1] = a2;
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v6, v7);
}

uint64_t (*ConversationRequestProcessorTurnState.speechState.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ConversationRequestProcessorTurnState.init(requestType:requestId:asrOnServer:inputOrigin:nlRoutingDecision:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo) = 0;
  *(_DWORD *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter) = 0;
  *(_OWORD *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState) = xmmword_1BA0537A0;
  uint64_t v13 = v6 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  uint64_t v14 = type metadata accessor for RequestType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v13, a1, v14);
  uint64_t v15 = (void *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
  *uint64_t v15 = a2;
  v15[1] = a3;
  *(unsigned char *)(v6 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer) = a4;
  uint64_t v16 = v6 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin;
  uint64_t v17 = type metadata accessor for InputOrigin();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(v16, a5, v17);
  outlined init with take of NLRoutingDecisionMessage.RoutingDecision?(a6, v6 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_nlRoutingDecision);
  return v6;
}

uint64_t outlined init with take of NLRoutingDecisionMessage.RoutingDecision?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ConversationRequestProcessorTurnState.ResultCandidateStateHolder.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = MEMORY[0x1E4FBC868];
  return result;
}

unint64_t ConversationRequestProcessorTurnState.SpeechState.description.getter(unint64_t a1)
{
  uint64_t v1 = 0x7463656C65536372;
  if (a1 >> 62 != 1) {
    uint64_t v1 = 1701602409;
  }
  if (a1 >> 62) {
    return v1;
  }
  else {
    return 0xD000000000000019;
  }
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ConversationRequestProcessorTurnState.SpeechState()
{
  uint64_t v1 = *v0 >> 62;
  uint64_t v2 = 0x7463656C65536372;
  if (v1 != 1) {
    uint64_t v2 = 1701602409;
  }
  if (v1) {
    return v2;
  }
  else {
    return 0xD000000000000019;
  }
}

uint64_t ConversationRequestProcessorTurnState.ResultCandidateStateHolder.byRcId.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t ConversationRequestProcessorTurnState.ResultCandidateStateHolder.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t ConversationRequestProcessorTurnState.ResultCandidateStateHolder.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC868];
  return result;
}

uint64_t ConversationRequestProcessorTurnState.deinit()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  uint64_t v2 = type metadata accessor for RequestType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  uint64_t v3 = v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin;
  uint64_t v4 = type metadata accessor for InputOrigin();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_nlRoutingDecision, (uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);

  outlined consume of ConversationRequestProcessorTurnState.SpeechState(*(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState), *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState + 8));
  return v0;
}

uint64_t specialized ConversationRequestProcessorTurnState.__allocating_init(startTextRequestMessage:)(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for NLRoutingDecisionMessage.RoutingDecision?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for InputOrigin();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for RequestType();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  char v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = a1;
  type metadata accessor for StartTextRequestMessage();
  id v13 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RoutingDecisionAware);
  if (swift_dynamicCast())
  {
    outlined init with take of ReferenceResolutionClientProtocol(v35, (uint64_t)v38);
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E4FA2430], v9);
    id v14 = v13;
    uint64_t v15 = RequestMessageBase.requestId.getter();
    uint64_t v33 = v16;
    uint64_t v34 = v15;

    id v17 = v14;
    StartRequestMessageBase.inputOrigin.getter();

    uint64_t v32 = v5;
    __swift_project_boxed_opaque_existential_1(v38, v38[3]);
    dispatch thunk of RoutingDecisionAware.routingDecision.getter();

    uint64_t v18 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v4, 0, 1, v18);
    type metadata accessor for ConversationRequestProcessorTurnState();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo) = 0;
    *(_DWORD *)(v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter) = 0;
    *(_OWORD *)(v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState) = xmmword_1BA0537A0;
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType, v12, v9);
    uint64_t v20 = (uint64_t *)(v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    uint64_t v21 = v32;
    uint64_t v22 = v33;
    *uint64_t v20 = v34;
    v20[1] = v22;
    *(unsigned char *)(v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer) = 0;
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin, v8, v21);
    outlined init with take of NLRoutingDecisionMessage.RoutingDecision?((uint64_t)v4, v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_nlRoutingDecision);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v38);
  }
  else
  {
    uint64_t v36 = 0;
    memset(v35, 0, sizeof(v35));
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v35, &demangling cache variable for type metadata for RoutingDecisionAware?);
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E4FA2430], v9);
    id v23 = v13;
    uint64_t v24 = RequestMessageBase.requestId.getter();
    uint64_t v26 = v25;

    id v27 = v23;
    StartRequestMessageBase.inputOrigin.getter();

    uint64_t v28 = type metadata accessor for NLRoutingDecisionMessage.RoutingDecision();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v4, 1, 1, v28);
    type metadata accessor for ConversationRequestProcessorTurnState();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo) = 0;
    *(_DWORD *)(v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter) = 0;
    *(_OWORD *)(v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState) = xmmword_1BA0537A0;
    (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType, v12, v9);
    uint64_t v29 = (uint64_t *)(v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
    *uint64_t v29 = v24;
    v29[1] = v26;
    *(unsigned char *)(v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer) = 0;
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin, v8, v5);
    outlined init with take of NLRoutingDecisionMessage.RoutingDecision?((uint64_t)v4, v19 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_nlRoutingDecision);
  }
  return v19;
}