void PersonaUniqueIdentifierAccepting.accept(siriSharedUserIdentifier:muxContextMessage:meetsUserSessionCriteria:)()
{
  uint64_t v0;
  os_log_type_t v1;
  uint8_t *v2;
  NSObject *oslog;
  uint64_t vars8;

  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.conversationBridge);
  oslog = Logger.logObject.getter();
  v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v2 = 0;
    _os_log_impl(&dword_1B9C64000, oslog, v1, "Unable to attach personaUniqueIdentifier on this platform.", v2, 2u);
    MEMORY[0x1BA9E48C0](v2, -1, -1);
  }
}

void SAUIAddViews.accept(personaUniqueIdentifier:)()
{
  id v1 = (id)MEMORY[0x1BA9E2DD0]();
  objc_msgSend(v0, sel_setPersonaId_, v1);
}

uint64_t dispatch thunk of PersonaUniqueIdentifierAccepting.accept(personaUniqueIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

id SAIntentGroupRunSiriKitExecutor.confirmationStateAsEnum.getter@<X0>(uint64_t a1@<X8>)
{
  id v3 = objc_msgSend(v1, sel_confirmationState);
  if (v3)
  {

    id result = objc_msgSend(v1, sel_confirmationState);
    if (result)
    {
      v5 = result;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      return (id)SiriKitConfirmationState.init(rawValue:)();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    uint64_t v6 = type metadata accessor for SiriKitConfirmationState();
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
    return (id)v7(a1, 1, 1, v6);
  }
  return result;
}

uint64_t SAIntentGroupSiriKitParameterMetadata.confirmationStatesAsEnum.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitConfirmationState?);
  MEMORY[0x1F4188790](v1 - 8);
  id v3 = (char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SiriKitConfirmationState();
  uint64_t v25 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = objc_msgSend(v0, sel_confirmationStates);
  uint64_t v8 = MEMORY[0x1E4FBC860];
  if (!v7) {
    return v8;
  }
  v9 = v7;
  uint64_t v24 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  int64_t v11 = *(void *)(v10 + 16);
  if (!v11)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return v8;
  }
  uint64_t v29 = v8;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
  v22[1] = v10;
  v23 = v6;
  uint64_t v12 = v10 + 32;
  v13 = (unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v14 = (void (**)(char *, char *, uint64_t))(v25 + 32);
  while (1)
  {
    outlined init with copy of Any(v12, (uint64_t)v28);
    outlined init with copy of Any((uint64_t)v28, (uint64_t)&v26);
    if (!swift_dynamicCast()) {
      break;
    }
    SiriKitConfirmationState.init(rawValue:)();
    if ((*v13)(v3, 1, v4) == 1) {
      goto LABEL_14;
    }
    v15 = *v14;
    (*v14)(v6, v3, v4);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v28);
    uint64_t v8 = v29;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1);
      uint64_t v8 = v29;
    }
    unint64_t v17 = *(void *)(v8 + 16);
    unint64_t v16 = *(void *)(v8 + 24);
    if (v17 >= v16 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
      uint64_t v8 = v29;
    }
    *(void *)(v8 + 16) = v17 + 1;
    unint64_t v18 = v8
        + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))
        + *(void *)(v25 + 72) * v17;
    uint64_t v6 = v23;
    v15((char *)v18, v23, v4);
    uint64_t v29 = v8;
    v12 += 32;
    if (!--v11) {
      goto LABEL_11;
    }
  }
  uint64_t v26 = 0;
  unint64_t v27 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  v20._object = (void *)0x80000001BA06CE00;
  v20._countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v20);
  _print_unlocked<A, B>(_:_:)();
  specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(v26, v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Extensions/SAIntentGroupSiriKitConfirmationState+Enum.swift", 128, 2, 38);
  __break(1u);
LABEL_14:
  outlined destroy of SiriKitConfirmationState?((uint64_t)v3);
  uint64_t v26 = 0;
  unint64_t v27 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v21._countAndFlagsBits = 0xD00000000000002CLL;
  v21._object = (void *)0x80000001BA06CEC0;
  String.append(_:)(v21);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(v26, v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Extensions/SAIntentGroupSiriKitConfirmationState+Enum.swift", 128, 2, 42);
  __break(1u);
  return result;
}

uint64_t outlined destroy of SiriKitConfirmationState?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitConfirmationState?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id SAPerson.contact.getter()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1BA40]), sel_init);
  id v2 = objc_msgSend(v0, sel_firstName);
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v6 = v5;
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v6 = 0xE000000000000000;
  }
  id v7 = (void *)MEMORY[0x1BA9E2DD0](v4, v6);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setGivenName_, v7);

  id v8 = objc_msgSend(v0, sel_firstNamePhonetic);
  if (v8)
  {
    v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v12 = 0xE000000000000000;
  }
  v13 = (void *)MEMORY[0x1BA9E2DD0](v10, v12);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setPhoneticGivenName_, v13);

  id v14 = objc_msgSend(v0, sel_middleName);
  if (v14)
  {
    v15 = v14;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;
  }
  else
  {
    uint64_t v16 = 0;
    unint64_t v18 = 0xE000000000000000;
  }
  v19 = (void *)MEMORY[0x1BA9E2DD0](v16, v18);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setMiddleName_, v19);

  id v20 = objc_msgSend(v0, sel_lastName);
  if (v20)
  {
    Swift::String v21 = v20;
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v24 = v23;
  }
  else
  {
    uint64_t v22 = 0;
    unint64_t v24 = 0xE000000000000000;
  }
  uint64_t v25 = (void *)MEMORY[0x1BA9E2DD0](v22, v24);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setFamilyName_, v25);

  id v26 = objc_msgSend(v0, sel_lastNamePhonetic);
  if (v26)
  {
    unint64_t v27 = v26;
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v30 = v29;
  }
  else
  {
    uint64_t v28 = 0;
    unint64_t v30 = 0xE000000000000000;
  }
  v31 = (void *)MEMORY[0x1BA9E2DD0](v28, v30);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setPhoneticFamilyName_, v31);

  id v32 = objc_msgSend(v0, sel_nickName);
  if (v32)
  {
    v33 = v32;
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v36 = v35;
  }
  else
  {
    uint64_t v34 = 0;
    unint64_t v36 = 0xE000000000000000;
  }
  v37 = (void *)MEMORY[0x1BA9E2DD0](v34, v36);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setNickname_, v37);

  return v1;
}

void one-time initialization function for blockListDialogID()
{
  static SayMetricsLogger.blockListDialogID = (uint64_t)&outlined read-only object #0 of one-time initialization function for blockListDialogID;
}

{
  static ViewMetricsLogger.blockListDialogID = (uint64_t)&outlined read-only object #0 of one-time initialization function for blockListDialogID;
}

uint64_t *SayMetricsLogger.blockListDialogID.unsafeMutableAddressor()
{
  if (one-time initialization token for blockListDialogID != -1) {
    swift_once();
  }
  return &static SayMetricsLogger.blockListDialogID;
}

uint64_t static SayMetricsLogger.blockListDialogID.getter()
{
  if (one-time initialization token for blockListDialogID != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

id specialized static SayMetricsLogger.getSparseCommand(command:)(void *a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  id v6 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96B68]), sel_init);
  id v8 = objc_msgSend(a1, sel_listenAfterSpeaking);
  objc_msgSend(v7, sel_setListenAfterSpeaking_, v8);

  id v9 = objc_msgSend(a1, sel_dialogIdentifier);
  objc_msgSend(v7, sel_setDialogIdentifier_, v9);

  id v10 = objc_msgSend(a1, sel_languageCode);
  objc_msgSend(v7, sel_setLanguageCode_, v10);

  objc_msgSend(v7, sel_setCanUseServerTTS_, objc_msgSend(a1, sel_canUseServerTTS));
  objc_msgSend(v7, sel_setRepeatable_, objc_msgSend(a1, sel_repeatable));
  id v11 = objc_msgSend(a1, sel_dialogIdentifier);
  if (!v11) {
    goto LABEL_12;
  }
  unint64_t v12 = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  if (one-time initialization token for blockListDialogID != -1) {
    swift_once();
  }
  uint64_t v16 = static SayMetricsLogger.blockListDialogID;
  uint64_t v17 = *(void *)(static SayMetricsLogger.blockListDialogID + 16);
  if (!v17)
  {
    swift_bridgeObjectRelease();
LABEL_12:
    id v21 = objc_msgSend(a1, sel_message);
    objc_msgSend(v7, sel_setMessage_, v21);

    goto LABEL_13;
  }
  unint64_t v24 = v5;
  uint64_t v25 = v3;
  uint64_t v26 = v2;
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  unint64_t v18 = (uint64_t *)(v16 + 40);
  while (1)
  {
    uint64_t v20 = *(v18 - 1);
    uint64_t v19 = *v18;
    uint64_t v29 = v13;
    uint64_t v30 = v15;
    uint64_t v27 = v20;
    uint64_t v28 = v19;
    if (StringProtocol.contains<A>(_:)()) {
      break;
    }
    v18 += 2;
    if (!--v17)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = v25;
      uint64_t v2 = v26;
      unint64_t v5 = v24;
      goto LABEL_12;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = v25;
  uint64_t v2 = v26;
  unint64_t v5 = v24;
LABEL_13:
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7;
}

uint64_t specialized static SayMetricsLogger.logAnalytics(command:)(void *a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  id v6 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.instrumentation);
  id v8 = a1;
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v27 = v2;
    uint64_t v13 = (void *)v12;
    uint64_t v26 = v5;
    *(_DWORD *)id v11 = 138412290;
    *(void *)&long long v30 = v8;
    uint64_t v14 = v8;
    unint64_t v5 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v13 = v8;

    _os_log_impl(&dword_1B9C64000, v9, v10, "Logging SayIt to AFAnalytics : %@", v11, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    uint64_t v15 = v13;
    uint64_t v2 = v27;
    MEMORY[0x1BA9E48C0](v15, -1, -1);
    MEMORY[0x1BA9E48C0](v11, -1, -1);
  }
  else
  {

    id v9 = v8;
  }

  unint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v32 = v16;
  id v17 = specialized static SayMetricsLogger.getSparseCommand(command:)(v8);
  id v18 = objc_msgSend(v17, sel_dictionary);
  if (v18)
  {
    id v19 = v18;
    unint64_t v31 = type metadata accessor for NSMutableDictionary();
    *(void *)&long long v30 = v19;
    outlined init with take of Any(&v30, v29);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v28 = v16;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v29, 0x6C46746E65696C43, 0xEE0077656956776FLL, isUniquelyReferenced_nonNull_native);
    uint64_t v21 = v28;
    unint64_t v32 = v28;
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)(0x6C46746E65696C43, 0xEE0077656956776FLL, &v30);
    outlined destroy of Any?((uint64_t)&v30);
    uint64_t v21 = v32;
  }
  id v22 = objc_msgSend(self, sel_sharedAnalytics);
  if (v22)
  {
    uint64_t v23 = v22;
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v21);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v23, sel_logEventWithType_context_, 3700, isa);

    swift_bridgeObjectRelease();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

ValueMetadata *type metadata accessor for SayMetricsLogger()
{
  return &type metadata for SayMetricsLogger;
}

void SelfReflectionAgent.createAskToRepeatAction(revealSpeech:_:)(char a1, void (*a2)(void, void, void, void *), uint64_t a3)
{
  uint64_t v4 = v3;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  v51 = a2;
  char v50 = a1;
  if (os_log_type_enabled(v9, v10))
  {
    id v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t aBlock = v12;
    *(_DWORD *)id v11 = 136315138;
    uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000028, 0x80000001BA06CF80, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v9, v10, "SelfReflectionAgent.%s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v12, -1, -1);
    MEMORY[0x1BA9E48C0](v11, -1, -1);
  }

  uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v4 + 224))();
  if (v13)
  {
    uint64_t v14 = (*(uint64_t (**)(void))(*(void *)v13 + 864))();
    if (v14)
    {
      uint64_t v15 = (void *)(*(uint64_t (**)(void))(*(void *)v14 + 112))();
      swift_release();
      swift_release();
      id v16 = objc_msgSend(v15, sel_audioAnalytics);
      if (v16)
      {
        id v17 = v16;
        objc_msgSend(v16, sel_snr);
        double v19 = v18;

        if (v19 <= 0.0)
        {
          unint64_t v20 = 0xD000000000000029;
          uint64_t v21 = "ASRUncertainty#AskToRepeatNoisyBackground";
          goto LABEL_13;
        }
      }
      else
      {
      }
    }
    else
    {
      swift_release();
    }
  }
  unint64_t v20 = 0xD00000000000001ALL;
  uint64_t v21 = "ASRUncertainty#AskToRepeat";
LABEL_13:
  unint64_t v22 = (unint64_t)(v21 - 32) | 0x8000000000000000;
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v24 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  id v25 = SelfReflectionAgent.createCATContext()();
  if (v25)
  {
    uint64_t v26 = v25;
    v49 = v24;
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      unint64_t v47 = v20;
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = a3;
      uint64_t v30 = swift_slowAlloc();
      uint64_t aBlock = v30;
      *(_DWORD *)uint64_t v29 = 136315138;
      uint64_t v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000028, 0x80000001BA06CF80, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v27, v28, "SelfReflectionAgent.%s CAT executing", v29, 0xCu);
      swift_arrayDestroy();
      uint64_t v31 = v30;
      a3 = v48;
      MEMORY[0x1BA9E48C0](v31, -1, -1);
      unint64_t v32 = v29;
      unint64_t v20 = v47;
      MEMORY[0x1BA9E48C0](v32, -1, -1);
    }

    v33 = self;
    uint64_t v34 = (void *)MEMORY[0x1BA9E2DD0](v20, v22);
    swift_bridgeObjectRelease();
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16) = v51;
    *(void *)(v36 + 24) = a3;
    *(void *)(v36 + 32) = v4;
    *(unsigned char *)(v36 + 40) = v50 & 1;
    v56 = partial apply for closure #1 in SelfReflectionAgent.createAskToRepeatAction(revealSpeech:_:);
    uint64_t v57 = v36;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    unint64_t v53 = 1107296256;
    v54 = thunk for @escaping @callee_guaranteed (@guaranteed CATResult, @guaranteed Error?) -> ();
    v55 = &block_descriptor_21;
    v37 = _Block_copy(&aBlock);
    id v38 = v26;
    swift_retain();
    swift_retain();
    swift_release();
    objc_msgSend(v33, sel_execute_catId_parameters_globals_completion_, v49, v34, isa, v38, v37);
    _Block_release(v37);

    id v24 = v38;
  }
  else
  {
    swift_bridgeObjectRelease();
    v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      uint64_t v58 = v42;
      *(_DWORD *)uint64_t v41 = 136315394;
      uint64_t aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000028, 0x80000001BA06CF80, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v41 + 12) = 2080;
      uint64_t aBlock = 0xD000000000000028;
      unint64_t v53 = 0x80000001BA06CF50;
      lazy protocol witness table accessor for type SelfReflectionError and conformance SelfReflectionError();
      uint64_t v43 = Error.localizedDescription.getter();
      uint64_t aBlock = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v39, v40, "SelfReflectionAgent.%s error: %s", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v42, -1, -1);
      MEMORY[0x1BA9E48C0](v41, -1, -1);
    }

    lazy protocol witness table accessor for type SelfReflectionError and conformance SelfReflectionError();
    v45 = (void *)swift_allocError();
    void *v46 = 0xD000000000000028;
    v46[1] = 0x80000001BA06CF50;
    v51(0, 0, 0, v45);
  }
}

uint64_t SelfReflectionAgent.createSiriDismissalAction()()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v2 = SelfReflectionAgent.createCloseAssitantAction(closeAssistantReason:)(v0, v1);
  swift_bridgeObjectRelease();
  id v3 = SelfReflectionAgent.createCancelRequestAction()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1BA0534A0;
  *(void *)(v4 + 32) = v2;
  *(void *)(v4 + 40) = v3;
  uint64_t v6 = v4;
  specialized Array._endMutation()();
  return v6;
}

void SelfReflectionAgent.createRevealRecognizedSpeech()()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96B58]), sel_init);
  id v3 = *(uint64_t (**)(void))(*(void *)v0 + 224);
  uint64_t v4 = v3();
  id v5 = (id)v4;
  if (v4)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 864))(v4);
    if (v6)
    {
      uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 112))(v6);
      swift_release();
      swift_release();
      id v8 = objc_msgSend(v7, sel_recognition);

      if (!v8)
      {
        __break(1u);
        return;
      }
      id v5 = objc_msgSend(v8, sel_aceRecognition);
    }
    else
    {
      swift_release();
      id v5 = 0;
    }
  }
  objc_msgSend(v2, sel_setRecognition_, v5);

  uint64_t v9 = v3();
  os_log_type_t v10 = (void *)v9;
  if (v9)
  {
    uint64_t v11 = *(void *)(v9 + 16);
    uint64_t v12 = *(void *)(v9 + 24);
    swift_bridgeObjectRetain();
    swift_release();
    os_log_type_t v10 = (void *)MEMORY[0x1BA9E2DD0](v11, v12);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v2, sel_setSpeechRecognizedAceId_, v10);

  uint64_t v13 = (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)v1 + 248))();
  if (v13)
  {
    int v14 = v13[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes];

    if (v14 == 1)
    {
      if (v3())
      {
        uint64_t v15 = ResultCandidateState.alternativeSuggestion.getter();
        swift_release();
        if (*(void *)(v15 + 16))
        {
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v2, sel_setAsrAlternatives_, isa);
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
    }
  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed CATResult, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  id v5 = *(void (**)(id, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(v7, a3);
  swift_release();
}

unint64_t SelfReflectionError.description.getter(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  return 0xD000000000000018;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance SelfReflectionError()
{
  uint64_t v1 = *v0;
  id v2 = (void *)v0[1];
  _StringGuts.grow(_:)(26);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  return 0xD000000000000018;
}

id SelfReflectionAgent.createCATContext()()
{
  uint64_t v1 = *(void **)(v0 + 32);
  id v2 = objc_msgSend(v1, sel_languageCode);
  if (!v2)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.conversationBridge);
    double v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v18, v19)) {
      goto LABEL_14;
    }
    unint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v25 = v21;
    *(_DWORD *)unint64_t v20 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x80000001BA06D030, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v22 = "SelfReflectionAgent.%s Unable to retrieve input language code";
    goto LABEL_13;
  }
  Swift::String v3 = v2;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  id v7 = objc_msgSend(v1, sel_outputVoice);
  if (!v7
    || (id v8 = v7, v9 = objc_msgSend(v7, sel_languageCode), v8, !v9))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationBridge);
    double v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v18, v19)) {
      goto LABEL_14;
    }
    unint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v25 = v21;
    *(_DWORD *)unint64_t v20 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x80000001BA06D030, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    unint64_t v22 = "SelfReflectionAgent.%s Unable to retrieve outputVoice language code";
LABEL_13:
    _os_log_impl(&dword_1B9C64000, v18, v19, v22, v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v21, -1, -1);
    MEMORY[0x1BA9E48C0](v20, -1, -1);
LABEL_14:

    return 0;
  }
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  id v13 = objc_allocWithZone(MEMORY[0x1E4F5F3F0]);
  int v14 = (void *)MEMORY[0x1BA9E2DD0](v4, v6);
  swift_bridgeObjectRelease();
  uint64_t v15 = (void *)MEMORY[0x1BA9E2DD0](v10, v12);
  swift_bridgeObjectRelease();
  id v16 = objc_msgSend(v13, sel_initWithInputLocale_outputVoiceLocale_, v14, v15);

  return v16;
}

void closure #1 in SelfReflectionAgent.createAskToRepeatAction(revealSpeech:_:)(void *a1, void *a2, void (*a3)(void, void, void, void), uint64_t a4, uint64_t a5, int a6)
{
  int v121 = a6;
  uint64_t v127 = a5;
  id v128 = a1;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NLContextUpdate?);
  MEMORY[0x1F4188790](v9 - 8);
  v120 = (char *)&v117 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for NLContextUpdate();
  uint64_t v124 = *(void *)(v11 - 8);
  uint64_t v125 = v11;
  MEMORY[0x1F4188790](v11);
  v123 = (char *)&v117 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_SystemDialogAct?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v117 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Siri_Nlu_External_SystemDialogAct();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  v122 = (char *)&v117 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.conversationBridge);
  unint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v118 = v15;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v119 = v17;
    uint64_t v23 = (uint8_t *)v22;
    uint64_t v24 = swift_slowAlloc();
    v126 = a3;
    uint64_t v25 = v24;
    v129[0] = v24;
    *(_DWORD *)uint64_t v23 = 136315138;
    v130[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000028, 0x80000001BA06CF80, v129);
    uint64_t v15 = v118;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v20, v21, "SelfReflectionAgent.%s CAT result", v23, 0xCu);
    swift_arrayDestroy();
    uint64_t v26 = v25;
    a3 = v126;
    MEMORY[0x1BA9E48C0](v26, -1, -1);
    uint64_t v27 = v23;
    uint64_t v17 = v119;
    MEMORY[0x1BA9E48C0](v27, -1, -1);
  }

  if (a2)
  {
    id v28 = a2;
    id v29 = a2;
    id v30 = a2;
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      v129[0] = v34;
      *(_DWORD *)uint64_t v33 = 136315394;
      v130[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000028, 0x80000001BA06CF80, v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v33 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v35 = Error.localizedDescription.getter();
      v130[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v31, v32, "SelfReflectionAgent.%s failed to produce dialog. error: %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v34, -1, -1);
      MEMORY[0x1BA9E48C0](v33, -1, -1);
    }
    else
    {
    }
    id v57 = a2;
    a3(0, 0, 0, a2);

    uint64_t v58 = a2;
LABEL_20:

    return;
  }
  if (!static SystemDialogActHelper.systemAskedUserToRepeat()())
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
    goto LABEL_17;
  }
  swift_getObjectType();
  SIRINLUSystemDialogAct.toNluSystemDialogAct()();
  swift_unknownObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
LABEL_17:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, &demangling cache variable for type metadata for Siri_Nlu_External_SystemDialogAct?);
    v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = swift_slowAlloc();
      uint64_t v62 = swift_slowAlloc();
      v130[0] = v62;
      *(_DWORD *)uint64_t v61 = 136315394;
      v129[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000028, 0x80000001BA06CF80, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v61 + 12) = 2080;
      v129[0] = 0xD000000000000020;
      v129[1] = 0x80000001BA06D000;
      lazy protocol witness table accessor for type SelfReflectionError and conformance SelfReflectionError();
      uint64_t v63 = Error.localizedDescription.getter();
      v129[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v59, v60, "SelfReflectionAgent.%s failed to produce dialog. error: %s", (uint8_t *)v61, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v62, -1, -1);
      MEMORY[0x1BA9E48C0](v61, -1, -1);
    }

    lazy protocol witness table accessor for type SelfReflectionError and conformance SelfReflectionError();
    uint64_t v65 = swift_allocError();
    void *v66 = 0xD000000000000020;
    v66[1] = 0x80000001BA06D000;
    a3(0, 0, 0, v65);
    uint64_t v58 = (void *)v65;
    goto LABEL_20;
  }
  v126 = a3;
  v37 = v122;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v122, v15, v16);
  id v38 = v123;
  NLContextUpdate.init()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_SystemDialogAct>);
  unint64_t v39 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_1BA04FD90;
  uint64_t v41 = *(void (**)(unint64_t, char *, uint64_t))(v17 + 16);
  uint64_t v119 = v16;
  v41(v40 + v39, v37, v16);
  NLContextUpdate.nluSystemDialogActs.setter();
  uint64_t v42 = v124;
  uint64_t v43 = (uint64_t)v120;
  unint64_t v44 = v38;
  uint64_t v45 = v125;
  (*(void (**)(char *, char *, uint64_t))(v124 + 16))(v120, v44, v125);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v42 + 56))(v43, 0, 1, v45);
  v118 = (char *)specialized static ExecutionContextUpdate.convertFromFlowContextUpdate(_:nluActiveTasks:nluCompletedTasks:populateLegacyProvideContext:)(v43, 0, 0, 0);
  outlined destroy of ReferenceResolutionClientProtocol?(v43, &demangling cache variable for type metadata for NLContextUpdate?);
  id v46 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96AD0]), sel_init);
  id v47 = objc_allocWithZone(MEMORY[0x1E4F29128]);
  id v48 = v46;
  id v49 = objc_msgSend(v47, sel_init);
  id v50 = objc_msgSend(v49, sel_UUIDString);

  if (!v50)
  {
    uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v50 = (id)MEMORY[0x1BA9E2DD0](v51);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v48, sel_setAceId_, v50);

  v52 = *(uint64_t (**)(void))(*(void *)v127 + 200);
  id v53 = v48;
  uint64_t v54 = v52();
  uint64_t v117 = a4;
  if (v55)
  {
    v56 = (void *)MEMORY[0x1BA9E2DD0](v54);
    swift_bridgeObjectRelease();
  }
  else
  {
    v56 = 0;
  }
  objc_msgSend(v53, sel_setRefId_, v56, v117);

  id v67 = objc_msgSend(v128, sel_print);
  v68 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v69 = v127;
  if (v68[2])
  {
    uint64_t v70 = v68[4];
    uint64_t v71 = v68[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v72 = (void *)MEMORY[0x1BA9E2DD0](v70, v71);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v72 = 0;
  }
  objc_msgSend(v53, sel_setText_, v72);

  id v73 = objc_msgSend(v128, sel_dialogId);
  v74 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v74[2])
  {
    uint64_t v75 = v74[4];
    uint64_t v76 = v74[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v77 = (void *)MEMORY[0x1BA9E2DD0](v75, v76);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v77 = 0;
  }
  objc_msgSend(v53, sel_setDialogIdentifier_, v77);

  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  id v78 = v53;
  Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  objc_msgSend(v78, sel_setListenAfterSpeaking_, isa);

  id v80 = objc_msgSend(v128, sel_meta);
  uint64_t v81 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v81 + 16)
    && (unint64_t v82 = specialized __RawDictionaryStorage.find<A>(_:)(0x79726F6765746163, 0xE800000000000000), (v83 & 1) != 0))
  {
    v84 = (uint64_t *)(*(void *)(v81 + 56) + 16 * v82);
    uint64_t v85 = *v84;
    uint64_t v86 = v84[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v87 = (void *)MEMORY[0x1BA9E2DD0](v85, v86);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v87 = 0;
  }
  objc_msgSend(v78, sel_setDialogCategory_, v87);

  uint64_t v88 = (*(uint64_t (**)(void))(*(void *)v69 + 272))();
  if (v88)
  {
    v89 = (void *)v88;
    if (*(unsigned char *)(v88 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isTextToSpeechEnabled) == 1)
    {
      id v90 = v78;
      id v91 = objc_msgSend(v128, sel_speak);
      v92 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v92[2])
      {
        uint64_t v93 = v17;
        uint64_t v94 = v92[4];
        uint64_t v95 = v92[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v96 = MEMORY[0x1BA9E2DD0](v94, v95);
        uint64_t v17 = v93;
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v96 = 0;
      }
      objc_msgSend(v90, sel_setSpeakableText_, v96);

      v89 = (void *)v96;
    }
  }
  id v97 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96AC0]), sel_init);
  id v98 = objc_allocWithZone(MEMORY[0x1E4F29128]);
  id v99 = v97;
  id v100 = objc_msgSend(v98, sel_init);
  id v101 = objc_msgSend(v100, sel_UUIDString);

  if (!v101)
  {
    uint64_t v102 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v101 = (id)MEMORY[0x1BA9E2DD0](v102);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v99, sel_setAceId_, v101);

  uint64_t v103 = v52();
  if (v104)
  {
    v105 = (void *)MEMORY[0x1BA9E2DD0](v103);
    swift_bridgeObjectRelease();
  }
  else
  {
    v105 = 0;
  }
  v106 = (void (*)(id, void *, char *, void))v126;
  uint64_t v107 = v17;
  objc_msgSend(v99, sel_setRefId_, v105);

  objc_msgSend(v99, sel_setDialogPhase_, *MEMORY[0x1E4F977A0]);
  objc_msgSend(v99, sel_setDisplayTarget_, *MEMORY[0x1E4F977E0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  uint64_t v108 = swift_allocObject();
  *(_OWORD *)(v108 + 16) = xmmword_1BA0578E0;
  *(void *)(v108 + 32) = v78;
  v129[0] = v108;
  specialized Array._endMutation()();
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
  id v109 = v78;
  Class v110 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v99, sel_setViews_, v110);

  v111 = 0;
  if (v121)
  {
    SelfReflectionAgent.createRevealRecognizedSpeech()();
    v111 = v112;
  }
  id v113 = v111;
  v114 = v118;
  v115 = v118;
  id v116 = v99;
  v106(v99, v111, v114, 0);

  (*(void (**)(char *, uint64_t))(v124 + 8))(v123, v125);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v122, v119);
}

id SelfReflectionAgent.createCloseAssitantAction(closeAssistantReason:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96AE0]), sel_init);
  UUID.init()();
  uint64_t v11 = UUID.uuidString.getter();
  uint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v14 = (void *)MEMORY[0x1BA9E2DD0](v11, v13);
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setAceId_, v14);

  uint64_t v15 = *(uint64_t (**)(void))(*(void *)v3 + 200);
  id v16 = v10;
  uint64_t v17 = v15();
  if (v18)
  {
    uint64_t v19 = (void *)MEMORY[0x1BA9E2DD0](v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = 0;
  }
  objc_msgSend(v16, sel_setRefId_, v19);

  unint64_t v20 = (void *)MEMORY[0x1BA9E2DD0](a1, a2);
  objc_msgSend(v16, sel_setReason_, v20);

  return v16;
}

id SelfReflectionAgent.createCancelRequestAction()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96590]), sel_init);
  UUID.init()();
  uint64_t v7 = UUID.uuidString.getter();
  uint64_t v9 = v8;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  id v10 = (void *)MEMORY[0x1BA9E2DD0](v7, v9);
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_setAceId_, v10);

  uint64_t v11 = *(uint64_t (**)(void))(*(void *)v1 + 200);
  id v12 = v6;
  uint64_t v13 = v11();
  if (v14)
  {
    uint64_t v15 = (void *)MEMORY[0x1BA9E2DD0](v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = 0;
  }
  objc_msgSend(v12, sel_setRefId_, v15);

  return v12;
}

unint64_t lazy protocol witness table accessor for type SelfReflectionError and conformance SelfReflectionError()
{
  unint64_t result = lazy protocol witness table cache variable for type SelfReflectionError and conformance SelfReflectionError;
  if (!lazy protocol witness table cache variable for type SelfReflectionError and conformance SelfReflectionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionError and conformance SelfReflectionError);
  }
  return result;
}

uint64_t sub_1B9FC4150()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 41, 7);
}

void partial apply for closure #1 in SelfReflectionAgent.createAskToRepeatAction(revealSpeech:_:)(void *a1, void *a2)
{
  closure #1 in SelfReflectionAgent.createAskToRepeatAction(revealSpeech:_:)(a1, a2, *(void (**)(void, void, void, void))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(unsigned __int8 *)(v2 + 40));
}

ValueMetadata *type metadata accessor for SelfReflectionError()
{
  return &type metadata for SelfReflectionError;
}

BOOL SelfReflectionAgentDecision.shouldMitigate.getter()
{
  return *v0 != 2;
}

uint64_t SelfReflectionAgent.__allocating_init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, int a7)
{
  int v23 = a7;
  uint64_t v13 = swift_allocObject();
  uint64_t v15 = *(void *)(a5 + 24);
  uint64_t v14 = *(void *)(a5 + 32);
  uint64_t v16 = __swift_mutable_project_boxed_opaque_existential_1(a5, v15);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v19 + 16))(v18);
  uint64_t v20 = specialized SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(a1, a2, a3, a4, (uint64_t)v18, a6, v23, v13, v15, v14);
  __swift_destroy_boxed_opaque_existential_1Tm(a5);
  return v20;
}

uint64_t ResultCandidateState.speechpackage.getter()
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)v0 + 864))();
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 112))(v1);
  swift_release();
  return v2;
}

id AFSpeechPackage.snr.getter()
{
  id result = objc_msgSend(v0, sel_audioAnalytics);
  uint64_t v2 = result;
  if (result)
  {
    objc_msgSend(result, sel_snr);
    uint64_t v4 = v3;

    return (id)v4;
  }
  return result;
}

uint64_t ResultCandidateState.alternativeSuggestion.getter()
{
  uint64_t v53 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestionUtterance();
  uint64_t v1 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  v52 = (char *)v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t SuggestionCandidate = type metadata accessor for Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestionCandidate();
  uint64_t v54 = *(void *)(SuggestionCandidate - 8);
  MEMORY[0x1F4188790](SuggestionCandidate);
  id v50 = (char *)v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Suggestion = type metadata accessor for Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestion();
  uint64_t v5 = *(void *)(Suggestion - 8);
  MEMORY[0x1F4188790](Suggestion);
  uint64_t v7 = (char *)v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
  MEMORY[0x1F4188790](v8 - 8);
  id v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 376))(v13);
  if (!v16) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v46 = v1;
  id v47 = v15;
  uint64_t v17 = *(void **)(v16 + 16);
  id v18 = v17;
  swift_release();
  uint64_t v19 = MEMORY[0x1E4FBC860];
  if (!v17) {
    return v19;
  }
  unint64_t v20 = dispatch thunk of PommesResponse.experiences.getter();
  unint64_t v21 = v20;
  if (!(v20 >> 62))
  {
    uint64_t result = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result) {
      goto LABEL_5;
    }
LABEL_24:
    swift_bridgeObjectRelease();
LABEL_25:

    return v19;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_24;
  }
LABEL_5:
  if ((v21 & 0xC000000000000001) != 0)
  {
    id v23 = (id)MEMORY[0x1BA9E3990](0, v21);
    goto LABEL_8;
  }
  if (*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v23 = *(id *)(v21 + 32);
LABEL_8:
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    type metadata accessor for GenericExperience();
    if (swift_dynamicCastClass())
    {
      dispatch thunk of GenericExperience.serverSuggestions.getter();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v47, v10, v11);
        Apple_Parsec_Siri_V2alpha_ServerSuggestion.alternateQuerySuggestion.getter();
        uint64_t v25 = Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestion.candidates.getter();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, Suggestion);
        int64_t v26 = *(void *)(v25 + 16);
        if (v26)
        {
          id v42 = v24;
          id v43 = v18;
          uint64_t v44 = v12;
          uint64_t v45 = v11;
          uint64_t v55 = v19;
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
          uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v54 + 16);
          uint64_t v28 = *(unsigned __int8 *)(v54 + 80);
          v41[1] = v25;
          uint64_t v29 = v25 + ((v28 + 32) & ~v28);
          uint64_t v48 = *(void *)(v54 + 72);
          id v49 = v27;
          id v30 = (void (**)(char *, uint64_t))(v46 + 8);
          v54 += 16;
          uint64_t v31 = (void (**)(char *, uint64_t))(v54 - 8);
          do
          {
            uint64_t v33 = v50;
            uint64_t v32 = SuggestionCandidate;
            v49(v50, v29, SuggestionCandidate);
            uint64_t v34 = v52;
            Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestionCandidate.utterance.getter();
            uint64_t v35 = Apple_Parsec_Siri_V2alpha_ServerSuggestionUtterance.print.getter();
            uint64_t v37 = v36;
            (*v30)(v34, v53);
            (*v31)(v33, v32);
            uint64_t v19 = v55;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1);
              uint64_t v19 = v55;
            }
            unint64_t v39 = *(void *)(v19 + 16);
            unint64_t v38 = *(void *)(v19 + 24);
            if (v39 >= v38 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
              uint64_t v19 = v55;
            }
            *(void *)(v19 + 16) = v39 + 1;
            uint64_t v40 = v19 + 16 * v39;
            *(void *)(v40 + 32) = v35;
            *(void *)(v40 + 40) = v37;
            v29 += v48;
            --v26;
          }
          while (v26);
          swift_bridgeObjectRelease();

          uint64_t v12 = v44;
          uint64_t v11 = v45;
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        (*(void (**)(char *, uint64_t))(v12 + 8))(v47, v11);
      }
      return v19;
    }

    goto LABEL_25;
  }
  __break(1u);
  return result;
}

unint64_t SelfReflectionAgentDecision.description.getter()
{
  char v1 = *v0;
  unint64_t result = 1701736302;
  switch(*v0)
  {
    case 2:
      return result;
    case 3:
      unint64_t result = 0x65726F6E6769;
      break;
    case 4:
      unint64_t result = 0x557373696D736964;
      break;
    case 5:
      unint64_t result = 0x7469646532706174;
      break;
    case 6:
      unint64_t result = 0xD00000000000001ALL;
      break;
    default:
      strcpy((char *)v7, "askToRepeat(");
      BYTE5(v7[1]) = 0;
      HIWORD(v7[1]) = -5120;
      if (v1) {
        uint64_t v3 = 1702195828;
      }
      else {
        uint64_t v3 = 0x65736C6166;
      }
      if (v1) {
        unint64_t v4 = 0xE400000000000000;
      }
      else {
        unint64_t v4 = 0xE500000000000000;
      }
      unint64_t v5 = v4;
      String.append(_:)(*(Swift::String *)&v3);
      swift_bridgeObjectRelease();
      v6._countAndFlagsBits = 41;
      v6._object = (void *)0xE100000000000000;
      String.append(_:)(v6);
      unint64_t result = v7[0];
      break;
  }
  return result;
}

BOOL SelfReflectionAgentDecision.isAskToRepeat.getter()
{
  return *v0 - 7 < 0xFFFFFFFB;
}

BOOL SelfReflectionAgentDecision.canBePegasusSearch.getter()
{
  int v1 = *v0;
  return v1 == 2 || v1 == 5;
}

uint64_t SelfReflectionAgentDecision.pommesSchemaValueForSELFReporting.getter()
{
  unsigned int v1 = *v0 - 2;
  if (v1 > 4) {
    return 3;
  }
  else {
    return dword_1BA05AE44[(char)v1];
  }
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys()
{
  return 0x70536C6165766572;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x70536C6165766572 && a2 == 0xEC00000068636565)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance SelfReflectionAgentDecision.CodingKeys()
{
  unint64_t result = 1701736302;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x65726F6E6769;
      break;
    case 2:
      unint64_t result = 0x7065526F546B7361;
      break;
    case 3:
      unint64_t result = 0x557373696D736964;
      break;
    case 4:
      unint64_t result = 0x7469646532706174;
      break;
    case 5:
      unint64_t result = 0xD00000000000001ALL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SelfReflectionAgentDecision.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SelfReflectionAgentDecision.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SelfReflectionAgentDecision.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SelfReflectionAgentDecision.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SelfReflectionAgentDecision.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance SelfReflectionAgentDecision.DismissUICodingKeys()
{
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SelfReflectionAgentDecision.DismissUICodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SelfReflectionAgentDecision.DismissUICodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SelfReflectionAgentDecision.IgnoreCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SelfReflectionAgentDecision.IgnoreCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SelfReflectionAgentDecision.NoneCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SelfReflectionAgentDecision.NoneCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SelfReflectionAgentDecision.NoneCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SelfReflectionAgentDecision.Tap2editCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SelfReflectionAgentDecision.Tap2editCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t SelfReflectionAgentDecision.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys>);
  uint64_t v43 = *(void *)(v3 - 8);
  uint64_t v44 = v3;
  MEMORY[0x1F4188790](v3);
  id v42 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SelfReflectionAgentDecision.Tap2editCodingKeys>);
  uint64_t v40 = *(void *)(v5 - 8);
  uint64_t v41 = v5;
  MEMORY[0x1F4188790](v5);
  unint64_t v39 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SelfReflectionAgentDecision.DismissUICodingKeys>);
  uint64_t v37 = *(void *)(v7 - 8);
  uint64_t v38 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v36 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SelfReflectionAgentDecision.AskToRepeatCodingKeys>);
  uint64_t v34 = *(void *)(v9 - 8);
  uint64_t v35 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v33 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SelfReflectionAgentDecision.IgnoreCodingKeys>);
  uint64_t v31 = *(void *)(v11 - 8);
  uint64_t v32 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SelfReflectionAgentDecision.NoneCodingKeys>);
  uint64_t v30 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<SelfReflectionAgentDecision.CodingKeys>);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v45 = v17;
  uint64_t v46 = v18;
  MEMORY[0x1F4188790](v17);
  unint64_t v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v21 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  switch(v21)
  {
    case 2:
      char v47 = 0;
      lazy protocol witness table accessor for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys();
      uint64_t v22 = v45;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v14);
      goto LABEL_9;
    case 3:
      char v48 = 1;
      lazy protocol witness table accessor for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys();
      uint64_t v22 = v45;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v32);
      goto LABEL_9;
    case 4:
      char v50 = 3;
      lazy protocol witness table accessor for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys();
      uint64_t v27 = v36;
      uint64_t v22 = v45;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = v37;
      uint64_t v28 = v38;
      goto LABEL_8;
    case 5:
      char v51 = 4;
      lazy protocol witness table accessor for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys();
      uint64_t v27 = v39;
      uint64_t v22 = v45;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = v40;
      uint64_t v28 = v41;
      goto LABEL_8;
    case 6:
      char v52 = 5;
      lazy protocol witness table accessor for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys();
      uint64_t v27 = v42;
      uint64_t v22 = v45;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v29 = v43;
      uint64_t v28 = v44;
LABEL_8:
      (*(void (**)(char *, uint64_t))(v29 + 8))(v27, v28);
LABEL_9:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v20, v22);
      break;
    default:
      char v49 = 2;
      lazy protocol witness table accessor for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys();
      id v23 = v33;
      uint64_t v24 = v45;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      uint64_t v25 = v35;
      KeyedEncodingContainer.encode(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v23, v25);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v20, v24);
      break;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance SelfReflectionAgentDecision(void *a1)
{
  return SelfReflectionAgentDecision.encode(to:)(a1);
}

void SelfReflectionResponse.decision.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t SelfReflectionResponse.hasCantUnderstandDialog.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t SelfReflectionResponse.hasCantUnderstandDialog.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

uint64_t (*SelfReflectionResponse.hasCantUnderstandDialog.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SelfReflectionResponse.hasCantDoDialog.getter()
{
  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t SelfReflectionResponse.hasCantDoDialog.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 2) = result;
  return result;
}

uint64_t (*SelfReflectionResponse.hasCantDoDialog.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SelfReflectionResponse.isWebSearchFallback.getter()
{
  return *(unsigned __int8 *)(v0 + 3);
}

uint64_t SelfReflectionResponse.isWebSearchFallback.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 3) = result;
  return result;
}

uint64_t (*SelfReflectionResponse.isWebSearchFallback.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SelfReflectionResponse.isFlexibleFollowUp.getter()
{
  return *(unsigned __int8 *)(v0 + 4);
}

uint64_t SelfReflectionResponse.isFlexibleFollowUp.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 4) = result;
  return result;
}

uint64_t (*SelfReflectionResponse.isFlexibleFollowUp.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SelfReflectionResponse.isVoiceTrigger.getter()
{
  return *(unsigned __int8 *)(v0 + 5);
}

uint64_t SelfReflectionResponse.isVoiceTrigger.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 5) = result;
  return result;
}

uint64_t (*SelfReflectionResponse.isVoiceTrigger.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SelfReflectionResponse.sentenceConfidence.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t SelfReflectionResponse.sentenceConfidence.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 8) = result;
  *(unsigned char *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t (*SelfReflectionResponse.sentenceConfidence.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SelfReflectionResponse.snr.getter()
{
  return *(void *)(v0 + 24);
}

uint64_t SelfReflectionResponse.snr.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 24) = result;
  *(unsigned char *)(v2 + 32) = a2 & 1;
  return result;
}

uint64_t (*SelfReflectionResponse.snr.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SelfReflectionResponse.isSingleWord.getter()
{
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t SelfReflectionResponse.isSingleWord.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 33) = result;
  return result;
}

uint64_t (*SelfReflectionResponse.isSingleWord.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SelfReflectionResponse.catIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SelfReflectionResponse.catIdentifiers.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*SelfReflectionResponse.catIdentifiers.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SelfReflectionResponse.catCategories.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SelfReflectionResponse.catCategories.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 48) = a1;
  return result;
}

uint64_t (*SelfReflectionResponse.catCategories.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t default argument 1 of SelfReflectionResponse.init(decision:hasCantUnderstandDialog:hasCantDoDialog:isWebSearchFallback:isFlexibleFollowUp:isVoiceTrigger:sentenceConfidence:snr:isSingleWord:catIdentifiers:catCategories:)()
{
  return 2;
}

uint64_t default argument 2 of SelfReflectionResponse.init(decision:hasCantUnderstandDialog:hasCantDoDialog:isWebSearchFallback:isFlexibleFollowUp:isVoiceTrigger:sentenceConfidence:snr:isSingleWord:catIdentifiers:catCategories:)()
{
  return 2;
}

uint64_t default argument 3 of SelfReflectionResponse.init(decision:hasCantUnderstandDialog:hasCantDoDialog:isWebSearchFallback:isFlexibleFollowUp:isVoiceTrigger:sentenceConfidence:snr:isSingleWord:catIdentifiers:catCategories:)()
{
  return 2;
}

uint64_t default argument 4 of SelfReflectionResponse.init(decision:hasCantUnderstandDialog:hasCantDoDialog:isWebSearchFallback:isFlexibleFollowUp:isVoiceTrigger:sentenceConfidence:snr:isSingleWord:catIdentifiers:catCategories:)()
{
  return 2;
}

uint64_t default argument 5 of SelfReflectionResponse.init(decision:hasCantUnderstandDialog:hasCantDoDialog:isWebSearchFallback:isFlexibleFollowUp:isVoiceTrigger:sentenceConfidence:snr:isSingleWord:catIdentifiers:catCategories:)()
{
  return 2;
}

uint64_t default argument 6 of SelfReflectionResponse.init(decision:hasCantUnderstandDialog:hasCantDoDialog:isWebSearchFallback:isFlexibleFollowUp:isVoiceTrigger:sentenceConfidence:snr:isSingleWord:catIdentifiers:catCategories:)()
{
  return 0;
}

uint64_t default argument 7 of SelfReflectionResponse.init(decision:hasCantUnderstandDialog:hasCantDoDialog:isWebSearchFallback:isFlexibleFollowUp:isVoiceTrigger:sentenceConfidence:snr:isSingleWord:catIdentifiers:catCategories:)()
{
  return 0;
}

uint64_t default argument 8 of SelfReflectionResponse.init(decision:hasCantUnderstandDialog:hasCantDoDialog:isWebSearchFallback:isFlexibleFollowUp:isVoiceTrigger:sentenceConfidence:snr:isSingleWord:catIdentifiers:catCategories:)()
{
  return 2;
}

uint64_t default argument 9 of SelfReflectionResponse.init(decision:hasCantUnderstandDialog:hasCantDoDialog:isWebSearchFallback:isFlexibleFollowUp:isVoiceTrigger:sentenceConfidence:snr:isSingleWord:catIdentifiers:catCategories:)()
{
  return 0;
}

uint64_t default argument 10 of SelfReflectionResponse.init(decision:hasCantUnderstandDialog:hasCantDoDialog:isWebSearchFallback:isFlexibleFollowUp:isVoiceTrigger:sentenceConfidence:snr:isSingleWord:catIdentifiers:catCategories:)()
{
  return 0;
}

unsigned char *SelfReflectionResponse.init(decision:hasCantUnderstandDialog:hasCantDoDialog:isWebSearchFallback:isFlexibleFollowUp:isVoiceTrigger:sentenceConfidence:snr:isSingleWord:catIdentifiers:catCategories:)@<X0>(unsigned char *result@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, char a11, char a12, uint64_t a13, uint64_t a14)
{
  *(unsigned char *)a9 = *result;
  *(unsigned char *)(a9 + 1) = a2;
  *(unsigned char *)(a9 + 2) = a3;
  *(unsigned char *)(a9 + 3) = a4;
  *(unsigned char *)(a9 + 4) = a5;
  *(unsigned char *)(a9 + 5) = a6;
  *(void *)(a9 + 8) = a7;
  *(unsigned char *)(a9 + 16) = a8 & 1;
  *(void *)(a9 + 24) = a10;
  *(unsigned char *)(a9 + 32) = a11 & 1;
  *(unsigned char *)(a9 + 33) = a12;
  *(void *)(a9 + 40) = a13;
  *(void *)(a9 + 48) = a14;
  return result;
}

uint64_t SelfReflectionAgent.instrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t SelfReflectionAgent.networkAvailabilityProvider.getter()
{
  return swift_retain();
}

id SelfReflectionAgent.preferences.getter()
{
  return *(id *)(v0 + 32);
}

uint64_t SelfReflectionAgent.isSystemAssistantExperienceEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t SelfReflectionAgent.trialExperimentManager.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 48, a1);
}

uint64_t SelfReflectionAgent.curareDonator.getter()
{
  return swift_retain();
}

uint64_t SelfReflectionAgent.isUndesiredResponseSuppressionEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 96);
}

uint64_t SelfReflectionAgent.tagger.getter()
{
  return swift_retain();
}

uint64_t SelfReflectionAgent.requestId.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SelfReflectionAgent.requestId.setter(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 112) = a1;
  *(void *)(v2 + 120) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*SelfReflectionAgent.requestId.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SelfReflectionAgent.resultCandidateState.getter()
{
  return swift_retain();
}

uint64_t SelfReflectionAgent.resultCandidateState.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 128) = a1;
  return swift_release();
}

uint64_t (*SelfReflectionAgent.resultCandidateState.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

void *SelfReflectionAgent.executionInputInfo.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 136);
  id v2 = v1;
  return v1;
}

void SelfReflectionAgent.executionInputInfo.setter(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 136);
  *(void *)(v1 + 136) = a1;
}

uint64_t (*SelfReflectionAgent.executionInputInfo.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

void *SelfReflectionAgent.requestContextData.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void **)(v0 + 144);
  id v2 = v1;
  return v1;
}

void SelfReflectionAgent.requestContextData.setter(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void **)(v1 + 144);
  *(void *)(v1 + 144) = a1;
}

uint64_t (*SelfReflectionAgent.requestContextData.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

double key path getter for SelfReflectionAgent.previousTurnMitigationResponse : SelfReflectionAgent@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(**(void **)a1 + 296))(v10);
  __int16 v3 = WORD2(v10[0]);
  uint64_t v4 = v10[1];
  char v5 = v11;
  uint64_t v6 = v12;
  char v7 = v13;
  char v8 = v14;
  *(_DWORD *)a2 = v10[0];
  *(_WORD *)(a2 + 4) = v3;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  *(unsigned char *)(a2 + 32) = v7;
  *(unsigned char *)(a2 + 33) = v8;
  double result = *(double *)&v15;
  *(_OWORD *)(a2 + 40) = v15;
  return result;
}

uint64_t key path setter for SelfReflectionAgent.previousTurnMitigationResponse : SelfReflectionAgent(int *a1, uint64_t *a2)
{
  __int16 v2 = *((_WORD *)a1 + 2);
  uint64_t v3 = *((void *)a1 + 1);
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t v5 = *((void *)a1 + 3);
  char v6 = *((unsigned char *)a1 + 32);
  char v7 = *((unsigned char *)a1 + 33);
  uint64_t v9 = *((void *)a1 + 5);
  uint64_t v8 = *((void *)a1 + 6);
  uint64_t v10 = *a2;
  int v13 = *a1;
  __int16 v14 = v2;
  uint64_t v15 = v3;
  char v16 = v4;
  uint64_t v17 = v5;
  char v18 = v6;
  char v19 = v7;
  uint64_t v20 = v9;
  uint64_t v21 = v8;
  char v11 = *(uint64_t (**)(int *))(*(void *)v10 + 304);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v11(&v13);
}

uint64_t SelfReflectionAgent.previousTurnMitigationResponse.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  __int16 v3 = *(_WORD *)(v1 + 156);
  uint64_t v4 = *(void *)(v1 + 160);
  char v5 = *(unsigned char *)(v1 + 168);
  uint64_t v6 = *(void *)(v1 + 176);
  char v7 = *(unsigned char *)(v1 + 184);
  char v8 = *(unsigned char *)(v1 + 185);
  uint64_t v10 = *(void *)(v1 + 192);
  uint64_t v9 = *(void *)(v1 + 200);
  *(_DWORD *)a1 = *(_DWORD *)(v1 + 152);
  *(_WORD *)(a1 + 4) = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 33) = v8;
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v9;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t SelfReflectionAgent.previousTurnMitigationResponse.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  char v6 = *(unsigned char *)(a1 + 32);
  char v10 = *(unsigned char *)(a1 + 33);
  __int16 v11 = *(_WORD *)(a1 + 4);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  swift_beginAccess();
  *(_DWORD *)(v1 + 152) = *(_DWORD *)a1;
  *(_WORD *)(v1 + 156) = v11;
  *(void *)(v1 + 160) = v3;
  *(unsigned char *)(v1 + 168) = v4;
  *(void *)(v1 + 176) = v5;
  *(unsigned char *)(v1 + 184) = v6;
  *(unsigned char *)(v1 + 185) = v10;
  *(void *)(v1 + 192) = v7;
  *(void *)(v1 + 200) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*SelfReflectionAgent.previousTurnMitigationResponse.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

double key path getter for SelfReflectionAgent.currentMitigationResponse : SelfReflectionAgent@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(**(void **)a1 + 320))(v10);
  __int16 v3 = WORD2(v10[0]);
  uint64_t v4 = v10[1];
  char v5 = v11;
  uint64_t v6 = v12;
  char v7 = v13;
  char v8 = v14;
  *(_DWORD *)a2 = v10[0];
  *(_WORD *)(a2 + 4) = v3;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  *(unsigned char *)(a2 + 32) = v7;
  *(unsigned char *)(a2 + 33) = v8;
  double result = *(double *)&v15;
  *(_OWORD *)(a2 + 40) = v15;
  return result;
}

uint64_t key path setter for SelfReflectionAgent.currentMitigationResponse : SelfReflectionAgent(int *a1, uint64_t *a2)
{
  __int16 v2 = *((_WORD *)a1 + 2);
  uint64_t v3 = *((void *)a1 + 1);
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t v5 = *((void *)a1 + 3);
  char v6 = *((unsigned char *)a1 + 32);
  char v7 = *((unsigned char *)a1 + 33);
  uint64_t v9 = *((void *)a1 + 5);
  uint64_t v8 = *((void *)a1 + 6);
  uint64_t v10 = *a2;
  int v13 = *a1;
  __int16 v14 = v2;
  uint64_t v15 = v3;
  char v16 = v4;
  uint64_t v17 = v5;
  char v18 = v6;
  char v19 = v7;
  uint64_t v20 = v9;
  uint64_t v21 = v8;
  char v11 = *(uint64_t (**)(int *))(*(void *)v10 + 328);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v11(&v13);
}

uint64_t SelfReflectionAgent.currentMitigationResponse.getter@<X0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  __int16 v3 = *(_WORD *)(v1 + 212);
  uint64_t v4 = *(void *)(v1 + 216);
  char v5 = *(unsigned char *)(v1 + 224);
  uint64_t v6 = *(void *)(v1 + 232);
  char v7 = *(unsigned char *)(v1 + 240);
  char v8 = *(unsigned char *)(v1 + 241);
  uint64_t v10 = *(void *)(v1 + 248);
  uint64_t v9 = *(void *)(v1 + 256);
  *(_DWORD *)a1 = *(_DWORD *)(v1 + 208);
  *(_WORD *)(a1 + 4) = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 33) = v8;
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v9;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t SelfReflectionAgent.currentMitigationResponse.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  char v6 = *(unsigned char *)(a1 + 32);
  char v10 = *(unsigned char *)(a1 + 33);
  __int16 v11 = *(_WORD *)(a1 + 4);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  swift_beginAccess();
  *(_DWORD *)(v1 + 208) = *(_DWORD *)a1;
  *(_WORD *)(v1 + 212) = v11;
  *(void *)(v1 + 216) = v3;
  *(unsigned char *)(v1 + 224) = v4;
  *(void *)(v1 + 232) = v5;
  *(unsigned char *)(v1 + 240) = v6;
  *(unsigned char *)(v1 + 241) = v10;
  *(void *)(v1 + 248) = v7;
  *(void *)(v1 + 256) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*SelfReflectionAgent.currentMitigationResponse.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SelfReflectionAgent.isRequestCompleted.getter()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 264);
}

uint64_t SelfReflectionAgent.isRequestCompleted.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 264) = a1;
  return result;
}

uint64_t (*SelfReflectionAgent.isRequestCompleted.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v15 = *(void *)(a5 + 24);
  uint64_t v14 = *(void *)(a5 + 32);
  uint64_t v16 = __swift_mutable_project_boxed_opaque_existential_1(a5, v15);
  MEMORY[0x1F4188790](v16);
  char v18 = (char *)v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v19 + 16))(v18);
  uint64_t v20 = specialized SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(a1, a2, a3, a4, (uint64_t)v18, a6, a7, v22[1], v15, v14);
  __swift_destroy_boxed_opaque_existential_1Tm(a5);
  return v20;
}

Swift::Void __swiftcall SelfReflectionAgent.reset()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v13 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    v8[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x29287465736572, 0xE700000000000000, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v3, v4, "SelfReflectionAgent.%s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v6, -1, -1);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  (*(void (**)(void, void))(*(void *)v1 + 208))(0, 0);
  (*(void (**)(void))(*(void *)v1 + 232))(0);
  (*(void (**)(void))(*(void *)v1 + 256))(0);
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v1 + 280))(0);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v1 + 320))(&v13, v7);
  LODWORD(v8[0]) = v13;
  WORD2(v8[0]) = WORD2(v13);
  v8[1] = v14;
  char v9 = v15;
  uint64_t v10 = v16;
  __int16 v11 = v17;
  long long v12 = v18;
  (*(void (**)(void *))(*(void *)v1 + 304))(v8);
  WORD2(v13) = 514;
  LODWORD(v13) = 33686018;
  uint64_t v14 = 0;
  char v15 = 1;
  uint64_t v16 = 0;
  __int16 v17 = 513;
  long long v18 = 0uLL;
  (*(void (**)(uint64_t *))(*(void *)v1 + 328))(&v13);
  (*(void (**)(void))(*(void *)v1 + 352))(0);
}

Swift::Void __swiftcall SelfReflectionAgent.setRequestId(_:)(Swift::String a1)
{
  uint64_t v2 = v1;
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v11 = v9;
    *(_DWORD *)uint64_t v8 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x80000001BA06D050, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v6, v7, "SelfReflectionAgent.%s requestId: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v9, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v10 = *(void (**)(uint64_t, void *))(*(void *)v2 + 208);
  swift_bridgeObjectRetain();
  v10(countAndFlagsBits, object);
}

uint64_t SelfReflectionAgent.setResultCandidateState(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  swift_retain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v17 = v16;
    *(_DWORD *)uint64_t v7 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001BLL, 0x80000001BA06D070, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2080;
    uint64_t v8 = *(uint64_t (**)(uint64_t))(*(void *)a1 + 800);
    uint64_t v9 = swift_retain();
    uint64_t v10 = v8(v9);
    unint64_t v12 = v11;
    swift_release();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v5, v6, "SelfReflectionAgent.%s resultCandidateState: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v16, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 232);
  uint64_t v14 = swift_retain();
  return v13(v14);
}

uint64_t SelfReflectionAgent.setExecutionInputInfo(_:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  id v5 = a1;
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    uint64_t v16 = v2;
    uint64_t v10 = swift_slowAlloc();
    uint64_t v17 = v10;
    *(_DWORD *)uint64_t v8 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, 0x80000001BA06D090, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2112;
    id v11 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v9 = v5;

    _os_log_impl(&dword_1B9C64000, v6, v7, "SelfReflectionAgent.%s executionInputInfo: %@", (uint8_t *)v8, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v9, -1, -1);
    swift_arrayDestroy();
    uint64_t v12 = v10;
    uint64_t v2 = v16;
    MEMORY[0x1BA9E48C0](v12, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  else
  {
  }
  uint64_t v13 = *(uint64_t (**)(id))(*(void *)v2 + 256);
  id v14 = v5;
  return v13(v5);
}

uint64_t SelfReflectionAgent.setRequestContextData(_:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  id v5 = a1;
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    uint64_t v16 = v2;
    uint64_t v10 = swift_slowAlloc();
    uint64_t v17 = v10;
    *(_DWORD *)uint64_t v8 = 136315394;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, 0x80000001BA06D0B0, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2112;
    id v11 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v9 = v5;

    _os_log_impl(&dword_1B9C64000, v6, v7, "SelfReflectionAgent.%s requestContextData: %@", (uint8_t *)v8, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v9, -1, -1);
    swift_arrayDestroy();
    uint64_t v12 = v10;
    uint64_t v2 = v16;
    MEMORY[0x1BA9E48C0](v12, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  else
  {
  }
  uint64_t v13 = *(uint64_t (**)(id))(*(void *)v2 + 280);
  id v14 = v5;
  return v13(v5);
}

Swift::Void __swiftcall SelfReflectionAgent.requestCompleted()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(void *)&long long v29 = v6;
    *(_DWORD *)id v5 = 136315138;
    *(void *)&long long v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x80000001BA06D0D0, (uint64_t *)&v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v3, v4, "SelfReflectionAgent.%s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v6, -1, -1);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  if ((*(uint64_t (**)(void))(*(void *)v1 + 344))())
  {
    os_log_type_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(void *)&long long v29 = v10;
      *(_DWORD *)uint64_t v9 = 136315138;
      *(void *)&long long v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x80000001BA06D0D0, (uint64_t *)&v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v7, v8, "SelfReflectionAgent.%s called more than once", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v10, -1, -1);
      MEMORY[0x1BA9E48C0](v9, -1, -1);
    }
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)v1 + 352))(1);
    id v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(void *)&long long v29 = v14;
      *(_DWORD *)uint64_t v13 = 136315138;
      *(void *)&long long v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x80000001BA06D0D0, (uint64_t *)&v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v11, v12, "SelfReflectionAgent.%s donating to curare", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v14, -1, -1);
      MEMORY[0x1BA9E48C0](v13, -1, -1);
    }

    uint64_t v15 = 7104846;
    uint64_t v16 = (*(void *(**)(long long *__return_ptr))(*(void *)v1 + 320))(&v29);
    LODWORD(v23) = v29;
    WORD2(v23) = WORD2(v29);
    *((void *)&v23 + 1) = *((void *)&v29 + 1);
    char v24 = v30;
    uint64_t v25 = *((void *)&v30 + 1);
    __int16 v26 = v31;
    uint64_t v27 = v32;
    uint64_t v28 = v33;
    uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v1 + 200))(v16);
    if (v18) {
      uint64_t v19 = v17;
    }
    else {
      uint64_t v19 = 7104846;
    }
    uint64_t v20 = 0xE300000000000000;
    if (v18) {
      uint64_t v21 = v18;
    }
    else {
      uint64_t v21 = 0xE300000000000000;
    }
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 224))(v17);
    if (v22)
    {
      uint64_t v15 = *(void *)(v22 + 16);
      uint64_t v20 = *(void *)(v22 + 24);
      swift_bridgeObjectRetain();
      swift_release();
    }
    SelfReflectionCurareDonator.donateSelfReflectionResponse(selfReflectionResponse:requestId:rcId:)(&v23, v19, v21, v15, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v31 = 0;
    long long v29 = 0u;
    long long v30 = 0u;
    (*(void (**)(long long *))(*(void *)v1 + 448))(&v29);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v29, &demangling cache variable for type metadata for Tagger?);
  }
}

void SelfReflectionAgent.check(executionOutput:)(char *a1@<X8>)
{
  void (**v3)(uint64_t *__return_ptr);
  void (*v4)(uint64_t *__return_ptr);
  int v5;
  uint64_t v6;
  uint8x8_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  long long v51;
  int16x8_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  char v59;
  long long v60;

  uint64_t v3 = (void (**)(uint64_t *__return_ptr))(*v1 + 320);
  os_log_type_t v4 = *v3;
  (*v3)(&v54);
  id v5 = v54;
  swift_bridgeObjectRelease();
  uint64_t v6 = swift_bridgeObjectRelease();
  if (v5 == 2)
  {
    SelfReflectionAgent.determineMitigateResult(from:)((uint64_t)&v54);
    v7.i32[0] = v54;
    os_log_type_t v8 = BYTE4(v54);
    uint64_t v9 = BYTE5(v54);
    char v50 = v55;
    char v49 = v56;
    char v48 = v57;
    uint64_t v46 = v59;
    char v47 = v58;
    char v51 = v60;
    char v52 = (int16x8_t)vmovl_u8(v7);
    if (v52.u16[0] == 3)
    {
      uint64_t v10 = v1[2];
      id v11 = *(uint64_t (**)(void))(*v1 + 200);
      os_log_type_t v12 = v11();
      if (v13) {
        uint64_t v14 = v12;
      }
      else {
        uint64_t v14 = 0;
      }
      if (v13) {
        uint64_t v15 = v13;
      }
      else {
        uint64_t v15 = 0xE000000000000000;
      }
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 192))(2, v14, v15);
      uint64_t v16 = swift_bridgeObjectRelease();
      uint64_t v17 = ((uint64_t (*)(uint64_t))v11)(v16);
      if (v18) {
        uint64_t v19 = v17;
      }
      else {
        uint64_t v19 = 0;
      }
      if (v18) {
        uint64_t v20 = v18;
      }
      else {
        uint64_t v20 = 0xE000000000000000;
      }
      (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v10 + 232))(5, v19, v20);
      swift_bridgeObjectRelease();
    }
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v21 = v52.i8[0];
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.conversationBridge);
    long long v23 = Logger.logObject.getter();
    char v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      uint64_t v54 = v45;
      *(_DWORD *)uint64_t v25 = 136315394;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000017, 0x80000001BA06D0F0, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v25 + 12) = 2080;
      __int16 v26 = SelfReflectionAgentDecision.description.getter();
      uint64_t v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v23, v24, "SelfReflectionAgent.%s mitigation result: %s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v45, -1, -1);
      MEMORY[0x1BA9E48C0](v25, -1, -1);
    }

    LODWORD(v54) = vmovn_s16(v52).u32[0];
    BYTE4(v54) = v8;
    BYTE5(v54) = v9;
    uint64_t v55 = v50;
    v56 = v49;
    id v57 = v48;
    uint64_t v58 = v47;
    v59 = v46;
    os_log_type_t v60 = v51;
    (*(void (**)(uint64_t *))(*v1 + 328))(&v54);
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, uint64_t))v4)(&v54, v6);
    uint64_t v28 = v54;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v28 == 5)
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      long long v29 = type metadata accessor for Logger();
      __swift_project_value_buffer(v29, (uint64_t)static Logger.conversationBridge);
      swift_retain_n();
      long long v30 = Logger.logObject.getter();
      uint64_t v31 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = swift_slowAlloc();
        uint64_t v33 = swift_slowAlloc();
        uint64_t v53 = v33;
        *(_DWORD *)uint64_t v32 = 136315394;
        uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000017, 0x80000001BA06D0F0, &v53);
        uint64_t v34 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v32 + 12) = 2080;
        ((void (*)(uint64_t *__return_ptr, uint64_t))v4)(&v54, v34);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v35 = SelfReflectionAgentDecision.description.getter();
        uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v21 = 2;
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v30, v31, "SelfReflectionAgent.%s returned %s for current turn. The rest of ExecutionOutputs should be unchanged.", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v33, -1, -1);
        MEMORY[0x1BA9E48C0](v32, -1, -1);
      }
      else
      {

        uint64_t v21 = 2;
        swift_release_n();
      }
    }
    else
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      __swift_project_value_buffer(v37, (uint64_t)static Logger.conversationBridge);
      swift_retain_n();
      uint64_t v38 = Logger.logObject.getter();
      unint64_t v39 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        uint64_t v53 = v41;
        *(_DWORD *)uint64_t v40 = 136315394;
        uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000017, 0x80000001BA06D0F0, &v53);
        id v42 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v40 + 12) = 2080;
        ((void (*)(uint64_t *__return_ptr, uint64_t))v4)(&v54, v42);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v43 = SelfReflectionAgentDecision.description.getter();
        uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v44, &v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v38, v39, "SelfReflectionAgent.%s already mitigated for current turn %s. Ignoring the rest of ExecutionOutputs.", (uint8_t *)v40, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v41, -1, -1);
        MEMORY[0x1BA9E48C0](v40, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      uint64_t v21 = 3;
    }
  }
  *a1 = v21;
}

void SelfReflectionAgent.determineMitigateResult(from:)(uint64_t a1@<X8>)
{
  uint64_t v4 = type metadata accessor for NetworkAvailability.Status();
  uint64_t v254 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  v247 = &v231[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  v253 = &v231[-v8];
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  v256 = &v231[-v10];
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  v252 = &v231[-v12];
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = &v231[-v13];
  uint64_t v262 = type metadata accessor for Logger();
  int64_t v15 = *(void *)(v262 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v262);
  v245 = (uint64_t *)&v231[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  v257 = (uint64_t *)&v231[-v19];
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  v248 = (uint64_t *)&v231[-v21];
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  unint64_t v24 = (unint64_t)&v231[-v23];
  uint64_t v25 = *(uint64_t **)(*(void *)v1 + 200);
  uint64_t v26 = *(void *)v1 + 200;
  uint64_t v27 = ((uint64_t (*)(uint64_t))v25)(v22);
  if (!v28)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v262, (uint64_t)static Logger.conversationBridge);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v53, v54)) {
      goto LABEL_21;
    }
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    v263 = (unsigned char *)v56;
    *(_DWORD *)uint64_t v55 = 136315138;
    uint64_t v266 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x80000001BA06D270, (uint64_t *)&v263);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v57 = "SelfReflectionAgent.%s requestId was not set";
    goto LABEL_20;
  }
  long long v29 = v28;
  int64_t v258 = v15;
  uint64_t v241 = v27;
  long long v30 = *(uint64_t (**)(void))(*(void *)v1 + 224);
  v261 = v1;
  uint64_t v260 = v30();
  if (!v260)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    __swift_project_value_buffer(v262, (uint64_t)static Logger.conversationBridge);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v53, v54)) {
      goto LABEL_21;
    }
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    v263 = (unsigned char *)v56;
    *(_DWORD *)uint64_t v55 = 136315138;
    uint64_t v266 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x80000001BA06D270, (uint64_t *)&v263);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v57 = "SelfReflectionAgent.%s resultCandidateState was not set";
LABEL_20:
    _os_log_impl(&dword_1B9C64000, v53, v54, v57, v55, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v56, -1, -1);
    MEMORY[0x1BA9E48C0](v55, -1, -1);
LABEL_21:

    *(_WORD *)(a1 + 4) = 514;
    *(_DWORD *)a1 = 33686018;
    *(void *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 16) = 1;
    *(void *)(a1 + 24) = 0;
    *(_WORD *)(a1 + 32) = 513;
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    return;
  }
  v242 = v29;
  v250 = v14;
  uint64_t v251 = v4;
  uint64_t v249 = a1;
  int v255 = ExecutionOutput.hasCantUnderstandDialog.getter();
  int v246 = ExecutionOutput.hasCantDoDialog.getter();
  int v234 = ExecutionOutput.hasUnsupportedDialog.getter();
  uint64_t v31 = ExecutionOutput.catIdentifiers.getter();
  int64_t v32 = ExecutionOutput.catCategories.getter();
  if (one-time initialization token for conversationBridge != -1) {
    goto LABEL_222;
  }
  while (1)
  {
    uint64_t v33 = v262;
    uint64_t v34 = __swift_project_value_buffer(v262, (uint64_t)static Logger.conversationBridge);
    int64_t v35 = v258;
    uint64_t v36 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v258 + 16);
    uint64_t v243 = v34;
    int64_t v240 = v258 + 16;
    v239 = v36;
    ((void (*)(unint64_t))v36)(v24);
    uint64_t v37 = v260;
    swift_retain_n();
    uint64_t v38 = v261;
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    int64_t v39 = v32;
    uint64_t v40 = Logger.logObject.getter();
    LODWORD(v238) = static os_log_type_t.debug.getter();
    BOOL v41 = os_log_type_enabled(v40, (os_log_type_t)v238);
    uint64_t v259 = v31;
    int64_t v244 = v39;
    if (v41)
    {
      os_log_t v237 = v40;
      uint64_t v42 = swift_slowAlloc();
      uint64_t v236 = swift_slowAlloc();
      uint64_t v266 = v236;
      *(_DWORD *)uint64_t v42 = 136317442;
      v263 = (unsigned char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x80000001BA06D270, &v266);
      uint64_t v43 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 12) = 2080;
      uint64_t v44 = ((uint64_t (*)(uint64_t))v25)(v43);
      if (v45)
      {
        unint64_t v46 = v45;
      }
      else
      {
        uint64_t v44 = 0;
        unint64_t v46 = 0xE000000000000000;
      }
      v263 = (unsigned char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, &v266);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 22) = 1024;
      LODWORD(v263) = v255 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 28) = 1024;
      LODWORD(v263) = v246 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 34) = 1024;
      LODWORD(v263) = v234 & 1;
      uint64_t v47 = UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 40) = 1024;
      char v48 = *(uint64_t (**)(uint64_t))(*(void *)v37 + 872);
      uint64_t v49 = v48(v47);
      int v50 = v49;
      if (v49)
      {
        char v51 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v49 + 264))(v49);
        swift_release();
        if (v51
          && (char v52 = (char *)objc_msgSend(v51, sel_speechEvent), v51, (unint64_t)(v52 - 30) <= 5))
        {
          int v50 = dword_1BA05AE2C[(void)(v52 - 30)];
        }
        else
        {
          int v50 = 0;
        }
      }
      swift_release();
      LODWORD(v263) = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v61 = swift_release();
      *(_WORD *)(v42 + 46) = 1024;
      uint64_t v62 = v48(v61);
      BOOL v65 = 0;
      if (v62)
      {
        uint64_t v63 = (void *)(*(uint64_t (**)(void))(*(void *)v62 + 264))();
        swift_release();
        if (v63)
        {
          unint64_t v64 = (unint64_t)objc_msgSend(v63, sel_speechEvent);

          if (v64 <= 0x10 && ((1 << v64) & 0x18100) != 0) {
            BOOL v65 = 1;
          }
        }
      }
      swift_release();
      LODWORD(v263) = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      *(_WORD *)(v42 + 52) = 2080;
      uint64_t v66 = v259;
      swift_bridgeObjectRetain();
      int64_t v35 = MEMORY[0x1E4FBB1B0];
      uint64_t v67 = Set.description.getter();
      unint64_t v69 = v68;
      swift_bridgeObjectRelease();
      v263 = (unsigned char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v69, &v266);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 62) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v70 = Set.description.getter();
      unint64_t v72 = v71;
      swift_bridgeObjectRelease();
      v263 = (unsigned char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v72, &v266);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v31 = v66;
      uint64_t v73 = swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 72) = 2080;
      uint64_t v38 = v261;
      (*(void (**)(unsigned char **__return_ptr, uint64_t))(*(void *)v261 + 296))(&v263, v73);
      uint64_t v26 = v263;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      LOBYTE(v265) = v26;
      unint64_t v74 = SelfReflectionAgentDecision.description.getter();
      v263 = (unsigned char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, &v266);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      os_log_t v76 = v237;
      _os_log_impl(&dword_1B9C64000, v237, (os_log_type_t)v238, "SelfReflectionAgent.%s requestId: %s hasCantUnderstandDialog: %{BOOL}d hasCantDoDialog: %{BOOL}d hasUnsupportedDialog: %{BOOL}d isFlexibleFollowUp: %{BOOL}d isVoiceTrigger: %{BOOL}d catIdentifiers: %s catCategories: %s previous mitigation result: %s", (uint8_t *)v42, 0x52u);
      uint64_t v77 = v236;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v77, -1, -1);
      MEMORY[0x1BA9E48C0](v42, -1, -1);

      uint64_t v58 = *(void (**)(uint64_t *, uint64_t))(v258 + 8);
      unint64_t v59 = v24;
      uint64_t v60 = v262;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      swift_release_n();
      uint64_t v58 = *(void (**)(uint64_t *, uint64_t))(v35 + 8);
      unint64_t v59 = v24;
      uint64_t v60 = v33;
    }
    v238 = v58;
    uint64_t v78 = ((uint64_t (*)(unint64_t, uint64_t))v58)(v59, v60);
    v79 = (os_log_t *)(*(void *)v38 + 248);
    os_log_t v237 = *v79;
    uint64_t v236 = (uint64_t)v79;
    uint64_t v80 = ((uint64_t (*)(uint64_t))v237)(v78);
    uint64_t v81 = v249;
    if (v80)
    {
      unint64_t v82 = (void *)v80;
      if (*(unsigned char *)(v80 + OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes) != 1
        || (uint64_t v83 = (*(uint64_t (**)(void))(*(void *)v260 + 376))()) == 0)
      {

        if ((v255 & 1) == 0) {
          goto LABEL_63;
        }
        goto LABEL_50;
      }
      unint64_t v24 = v83;
      if ((PommesInfo.isWebSearchFallback.getter() & 1) != 0 && v38[96] == 1)
      {
        v84 = (uint64_t (**)(void))(*(void *)v260 + 872);
        uint64_t v85 = *v84;
        uint64_t v26 = (uint64_t)v84;
        uint64_t v86 = (*v84)();
        if (v86)
        {
          v87 = (void *)(*(uint64_t (**)(void))(*(void *)v86 + 264))();
          swift_release();
          if (v87)
          {
            unint64_t v88 = (unint64_t)objc_msgSend(v87, sel_speechEvent);

            if (v88 <= 0x23 && ((1 << v88) & 0xC40000000) != 0)
            {
              (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(**((void **)v261 + 2) + 240))(v241, v242, 1, 8);

              swift_bridgeObjectRelease();
              swift_release();
              swift_release();
              *(_DWORD *)uint64_t v81 = 16908803;
              *(_WORD *)(v81 + 4) = 1;
              *(void *)(v81 + 8) = 0;
              *(unsigned char *)(v81 + 16) = 1;
LABEL_217:
              *(void *)(v81 + 24) = 0;
              *(_WORD *)(v81 + 32) = 513;
              int64_t v230 = v244;
              *(void *)(v81 + 40) = v31;
              *(void *)(v81 + 48) = v230;
              return;
            }
          }
        }
        uint64_t v89 = v85();
        if (!v89)
        {

          swift_release();
          uint64_t v38 = v261;
          if ((v255 & 1) == 0) {
            goto LABEL_63;
          }
          goto LABEL_50;
        }
        id v90 = (void *)(*(uint64_t (**)(void))(*(void *)v89 + 264))();
        swift_release();
        uint64_t v38 = v261;
        if (v90)
        {
          unint64_t v91 = (unint64_t)objc_msgSend(v90, sel_speechEvent);

          if (v91 <= 0x10 && ((1 << v91) & 0x18100) != 0)
          {
            (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(**((void **)v38 + 2) + 240))(v241, v242, 2, 8);

            swift_bridgeObjectRelease();
            swift_release();
            swift_release();
            int v92 = 16908804;
LABEL_61:
            *(_DWORD *)uint64_t v81 = v92;
            *(_WORD *)(v81 + 4) = 256;
            *(void *)(v81 + 8) = 0;
            *(unsigned char *)(v81 + 16) = 1;
            goto LABEL_217;
          }
        }
      }

      swift_release();
    }
    if ((v255 & 1) == 0) {
      goto LABEL_63;
    }
LABEL_50:
    if (v38[96] == 1)
    {
      uint64_t v93 = (uint64_t (**)(void))(*(void *)v260 + 872);
      uint64_t v94 = *v93;
      uint64_t v95 = (*v93)();
      if (v95)
      {
        unint64_t v24 = v95;
        uint64_t v96 = (void *)(*(uint64_t (**)(void))(*(void *)v95 + 264))();
        swift_release();
        if (v96)
        {
          unint64_t v24 = (unint64_t)objc_msgSend(v96, sel_speechEvent);

          if (v24 <= 0x23)
          {
            uint64_t v26 = 1;
            if (((1 << v24) & 0xC40000000) != 0)
            {
              (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(**((void **)v38 + 2) + 240))(v241, v242, 1, 7);
              swift_bridgeObjectRelease();
              swift_release();
              *(_DWORD *)uint64_t v81 = 33685763;
              *(_WORD *)(v81 + 4) = 1;
              *(void *)(v81 + 8) = 0;
              *(unsigned char *)(v81 + 16) = 1;
              goto LABEL_217;
            }
          }
        }
      }
      uint64_t v97 = v94();
      if (v97)
      {
        unint64_t v24 = v97;
        id v98 = (void *)(*(uint64_t (**)(void))(*(void *)v97 + 264))();
        swift_release();
        if (v98)
        {
          unint64_t v24 = (unint64_t)objc_msgSend(v98, sel_speechEvent);

          if (v24 <= 0x10 && ((1 << v24) & 0x18100) != 0)
          {
            (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(**((void **)v38 + 2) + 240))(v241, v242, 2, 7);
            swift_bridgeObjectRelease();
            swift_release();
            int v92 = 33685764;
            goto LABEL_61;
          }
        }
      }
    }
LABEL_63:
    uint64_t v99 = (*(uint64_t (**)(void))(*(void *)v260 + 864))();
    if (!v99) {
      goto LABEL_88;
    }
    unint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v99 + 112))(v99);
    swift_release();
    id v100 = objc_msgSend((id)v24, sel_recognition);
    specialized SelfReflectionAgent.calculateSentenceConfidence(recognition:)(v100);
    int64_t v35 = v101;
    char v103 = v102;

    if ((v103 & 1) == 0)
    {
      uint64_t v104 = (char *)objc_msgSend((id)v24, sel_audioAnalytics);
      uint64_t v38 = v104;
      if (v104)
      {
        objc_msgSend(v104, sel_snr);
        uint64_t v2 = v105;
      }
      else
      {
        uint64_t v2 = 0;
      }
      uint64_t v26 = v262;
      id v106 = objc_msgSend((id)v24, sel_recognition);
      if (v106)
      {
        uint64_t v107 = v106;
        uint64_t v108 = (uint64_t)objc_msgSend(v106, sel_phrases);

        uint64_t v25 = v248;
        if (v108)
        {
          type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFSpeechPhrase);
          unint64_t v109 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v109 >> 62) {
            goto LABEL_227;
          }
          uint64_t v108 = *(void *)((v109 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_72:
          swift_bridgeObjectRelease();
          LODWORD(v108) = v108 == 1;
        }
      }
      else
      {
        LODWORD(v108) = 0;
        uint64_t v25 = v248;
      }
      v239(v25, v243, v26);
      Class v110 = Logger.logObject.getter();
      os_log_type_t v111 = static os_log_type_t.debug.getter();
      BOOL v112 = os_log_type_enabled(v110, v111);
      LODWORD(v235) = v108;
      int64_t v233 = (int64_t)v38;
      if (v112)
      {
        BOOL v113 = v38 == 0;
        uint64_t v114 = swift_slowAlloc();
        uint64_t v115 = swift_slowAlloc();
        uint64_t v266 = v115;
        *(_DWORD *)uint64_t v114 = 136315906;
        v263 = (unsigned char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x80000001BA06D270, &v266);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v114 + 12) = 2048;
        v263 = (unsigned char *)v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v114 + 22) = 2080;
        v263 = (unsigned char *)v2;
        BOOL v264 = v113;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
        uint64_t v116 = String.init<A>(describing:)();
        uint64_t v26 = v117;
        v263 = (unsigned char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v116, v117, &v266);
        LODWORD(v108) = v235;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v114 + 32) = 1024;
        LODWORD(v263) = v108;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1B9C64000, v110, v111, "SelfReflectionAgent.%s sentenceConfidence: %ld snr: %s isSingleWord: %{BOOL}d", (uint8_t *)v114, 0x26u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v115, -1, -1);
        MEMORY[0x1BA9E48C0](v114, -1, -1);

        v118 = v248;
        uint64_t v119 = v262;
      }
      else
      {

        v118 = v25;
        uint64_t v119 = v26;
      }
      v238(v118, v119);
      uint64_t v120 = v249;
      if (!((v35 > 400 || (v255 & 1) == 0) | v108 & 1))
      {
        int v121 = v261;
        __swift_project_boxed_opaque_existential_1((void *)v261 + 6, *((void *)v261 + 9));
        v122 = v242;
        swift_bridgeObjectRetain();
        v123._uint64_t countAndFlagsBits = 0xD000000000000024;
        v123._object = (void *)0x80000001BA06D2C0;
        v124.value._uint64_t countAndFlagsBits = v241;
        v124.value._object = v122;
        TrialExperimentationAssetManaging.emitTriggerLogging(codepathId:requestId:)(v123, v124);
        swift_bridgeObjectRelease();
        uint64_t v26 = *((void *)v121 + 9);
        uint64_t v125 = *((void *)v121 + 10);
        __swift_project_boxed_opaque_existential_1((void *)v121 + 6, v26);
        if (((*(uint64_t (**)(uint64_t, uint64_t))(v125 + 16))(v26, v125) & 1) != 0
          || ((*(void (**)(unsigned char **__return_ptr))(*(void *)v121 + 296))(&v263),
              int v126 = v263,
              swift_bridgeObjectRelease(),
              swift_bridgeObjectRelease(),
              (v126 - 2) > 4))
        {
LABEL_83:
          if (((v255 | v246) & 1) == 0) {
            goto LABEL_87;
          }
          id v128 = v261;
          __swift_project_boxed_opaque_existential_1((void *)v261 + 6, *((void *)v261 + 9));
          v129 = v242;
          swift_bridgeObjectRetain();
          v130._uint64_t countAndFlagsBits = 0xD000000000000024;
          v130._object = (void *)0x80000001BA06D290;
          v131.value._uint64_t countAndFlagsBits = v241;
          v131.value._object = v129;
          TrialExperimentationAssetManaging.emitTriggerLogging(codepathId:requestId:)(v130, v131);
          swift_bridgeObjectRelease();
          uint64_t v26 = v128[9];
          uint64_t v132 = v128[10];
          __swift_project_boxed_opaque_existential_1(v128 + 6, v26);
          if ((*(uint64_t (**)(uint64_t, uint64_t))(v132 + 24))(v26, v132)) {
            goto LABEL_87;
          }
          BOOL v133 = v233 == 0;
          (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(**((void **)v261 + 2) + 240))(v241, v242, 7, 7);
          swift_bridgeObjectRelease();

          swift_release();
          *(unsigned char *)uint64_t v120 = 5;
          char v134 = v246 & 1;
          *(unsigned char *)(v120 + 1) = v255 & 1;
          *(unsigned char *)(v120 + 2) = v134;
          *(_WORD *)(v120 + 3) = 514;
          *(unsigned char *)(v120 + 5) = 2;
          *(void *)(v120 + 8) = v35;
          *(unsigned char *)(v120 + 16) = 0;
          *(void *)(v120 + 24) = v2;
          *(unsigned char *)(v120 + 32) = v133;
          *(unsigned char *)(v120 + 33) = (_BYTE)v235;
        }
        else
        {
          BOOL v127 = v233 == 0;
          (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(**((void **)v121 + 2) + 240))(v241, v242, 3, 7);
          swift_bridgeObjectRelease();

          swift_release();
          *(_WORD *)uint64_t v120 = 257;
          *(unsigned char *)(v120 + 2) = v246 & 1;
          *(_WORD *)(v120 + 3) = 514;
          *(unsigned char *)(v120 + 5) = 2;
          *(void *)(v120 + 8) = v35;
          *(unsigned char *)(v120 + 16) = 0;
          *(void *)(v120 + 24) = v2;
          *(unsigned char *)(v120 + 32) = v127;
          *(unsigned char *)(v120 + 33) = 0;
        }
        int64_t v135 = v244;
        *(void *)(v120 + 40) = v31;
        *(void *)(v120 + 48) = v135;
        return;
      }
      if (v35 <= 600) {
        goto LABEL_83;
      }
    }
LABEL_87:

    uint64_t v38 = v261;
LABEL_88:
    uint64_t v136 = *(void *)(v31 + 56);
    v248 = (uint64_t *)(v31 + 56);
    uint64_t v137 = 1 << *(unsigned char *)(v31 + 32);
    if (v137 < 64) {
      uint64_t v138 = ~(-1 << v137);
    }
    else {
      uint64_t v138 = -1;
    }
    unint64_t v139 = v138 & v136;
    int64_t v233 = (unint64_t)(v137 + 63) >> 6;
    swift_bridgeObjectRetain();
    uint64_t v140 = 0;
    v141 = &lazy protocol witness table cache variable for type UserID and conformance UserID;
    uint64_t v25 = &lazy protocol witness table cache variable for type UserID and conformance UserID;
    if (v139) {
      goto LABEL_92;
    }
LABEL_94:
    int64_t v144 = v140 + 1;
    if (__OFADD__(v140, 1))
    {
      __break(1u);
      goto LABEL_224;
    }
    if (v144 >= v233) {
      goto LABEL_218;
    }
    unint64_t v145 = v248[v144];
    int64_t v146 = v140 + 1;
    if (!v145)
    {
      int64_t v146 = v140 + 2;
      if (v140 + 2 >= v233) {
        goto LABEL_218;
      }
      unint64_t v145 = v248[v146];
      if (!v145)
      {
        int64_t v146 = v140 + 3;
        if (v140 + 3 >= v233) {
          goto LABEL_218;
        }
        unint64_t v145 = v248[v146];
        if (!v145)
        {
          int64_t v146 = v140 + 4;
          if (v140 + 4 >= v233) {
            goto LABEL_218;
          }
          unint64_t v145 = v248[v146];
          if (!v145)
          {
            int64_t v146 = v140 + 5;
            if (v140 + 5 >= v233) {
              goto LABEL_218;
            }
            unint64_t v145 = v248[v146];
            if (!v145) {
              break;
            }
          }
        }
      }
    }
LABEL_111:
    unint64_t v139 = (v145 - 1) & v145;
    v235 = (void (*)(unsigned char *, unsigned char *, uint64_t))v146;
    unint64_t v143 = __clz(__rbit64(v145)) + (v146 << 6);
LABEL_112:
    unint64_t v24 = *(void *)(*(void *)(v31 + 48) + 16 * v143);
    if (v141[283] != -1) {
      swift_once();
    }
    uint64_t v38 = (char *)v25[329];
    uint64_t v25 = (uint64_t *)(v38 + 56);
    uint64_t v148 = 1 << v38[32];
    if (v148 < 64) {
      uint64_t v149 = ~(-1 << v148);
    }
    else {
      uint64_t v149 = -1;
    }
    int64_t v35 = v149 & *((void *)v38 + 7);
    int64_t v32 = (unint64_t)(v148 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    uint64_t v31 = 0;
    while (1)
    {
      if (v35)
      {
        unint64_t v150 = __clz(__rbit64(v35));
        v35 &= v35 - 1;
        unint64_t v151 = v150 | (v31 << 6);
        goto LABEL_119;
      }
      int64_t v155 = v31 + 1;
      if (__OFADD__(v31, 1)) {
        break;
      }
      if (v155 >= v32) {
        goto LABEL_93;
      }
      unint64_t v156 = v25[v155];
      ++v31;
      if (!v156)
      {
        uint64_t v31 = v155 + 1;
        if (v155 + 1 >= v32) {
          goto LABEL_93;
        }
        unint64_t v156 = v25[v31];
        if (!v156)
        {
          uint64_t v31 = v155 + 2;
          if (v155 + 2 >= v32) {
            goto LABEL_93;
          }
          unint64_t v156 = v25[v31];
          if (!v156)
          {
            uint64_t v31 = v155 + 3;
            if (v155 + 3 >= v32) {
              goto LABEL_93;
            }
            unint64_t v156 = v25[v31];
            if (!v156)
            {
              uint64_t v31 = v155 + 4;
              if (v155 + 4 >= v32) {
                goto LABEL_93;
              }
              unint64_t v156 = v25[v31];
              if (!v156)
              {
                int64_t v157 = v155 + 5;
                if (v157 >= v32)
                {
LABEL_93:
                  swift_release();
                  swift_bridgeObjectRelease();
                  uint64_t v31 = v259;
                  uint64_t v38 = v261;
                  v141 = &lazy protocol witness table cache variable for type UserID and conformance UserID;
                  uint64_t v25 = &lazy protocol witness table cache variable for type UserID and conformance UserID;
                  uint64_t v140 = (uint64_t)v235;
                  if (!v139) {
                    goto LABEL_94;
                  }
LABEL_92:
                  unint64_t v142 = __clz(__rbit64(v139));
                  v139 &= v139 - 1;
                  v235 = (void (*)(unsigned char *, unsigned char *, uint64_t))v140;
                  unint64_t v143 = v142 | (v140 << 6);
                  goto LABEL_112;
                }
                unint64_t v156 = v25[v157];
                if (!v156)
                {
                  while (1)
                  {
                    uint64_t v31 = v157 + 1;
                    if (__OFADD__(v157, 1)) {
                      break;
                    }
                    if (v31 >= v32) {
                      goto LABEL_93;
                    }
                    unint64_t v156 = v25[v31];
                    ++v157;
                    if (v156) {
                      goto LABEL_138;
                    }
                  }
LABEL_225:
                  __break(1u);
LABEL_226:
                  __break(1u);
LABEL_227:
                  swift_bridgeObjectRetain();
                  uint64_t v108 = _CocoaArrayWrapper.endIndex.getter();
                  swift_bridgeObjectRelease();
                  goto LABEL_72;
                }
                uint64_t v31 = v157;
              }
            }
          }
        }
      }
LABEL_138:
      int64_t v35 = (v156 - 1) & v156;
      unint64_t v151 = __clz(__rbit64(v156)) + (v31 << 6);
LABEL_119:
      v152 = (uint64_t *)(*((void *)v38 + 6) + 16 * v151);
      uint64_t v153 = *v152;
      uint64_t v26 = v152[1];
      swift_bridgeObjectRetain();
      v154._uint64_t countAndFlagsBits = v153;
      v154._object = (void *)v26;
      LOBYTE(v153) = String.hasPrefix(_:)(v154);
      swift_bridgeObjectRelease();
      if (v153)
      {
        uint64_t v31 = v259;
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        int v232 = 1;
        uint64_t v38 = v261;
        goto LABEL_140;
      }
    }
    __break(1u);
LABEL_221:
    __break(1u);
LABEL_222:
    swift_once();
  }
  v147 = (char *)(v140 + 6);
  if (v140 + 6 >= v233) {
    goto LABEL_218;
  }
  unint64_t v145 = v248[(void)v147];
  if (v145)
  {
    int64_t v146 = v140 + 6;
    goto LABEL_111;
  }
  while (1)
  {
    int64_t v146 = (int64_t)(v147 + 1);
    if (__OFADD__(v147, 1))
    {
      __break(1u);
      goto LABEL_229;
    }
    if (v146 >= v233) {
      break;
    }
    unint64_t v145 = v248[v146];
    ++v147;
    if (v145) {
      goto LABEL_111;
    }
  }
LABEL_218:
  swift_release();
  int v232 = 0;
LABEL_140:
  uint64_t v158 = 1 << *(unsigned char *)(v31 + 32);
  if (v158 < 64) {
    uint64_t v159 = ~(-1 << v158);
  }
  else {
    uint64_t v159 = -1;
  }
  unint64_t v160 = v159 & *(void *)(v31 + 56);
  int64_t v233 = (unint64_t)(v158 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v161 = 0;
  v162 = &lazy protocol witness table cache variable for type UserID and conformance UserID;
  uint64_t v25 = &lazy protocol witness table cache variable for type UserID and conformance UserID;
  if (!v160) {
    goto LABEL_146;
  }
  while (2)
  {
    unint64_t v163 = __clz(__rbit64(v160));
    v160 &= v160 - 1;
    v235 = (void (*)(unsigned char *, unsigned char *, uint64_t))v161;
    unint64_t v164 = v163 | (v161 << 6);
LABEL_164:
    unint64_t v24 = *(void *)(*(void *)(v31 + 48) + 16 * v164);
    if (v162[328] != -1) {
      swift_once();
    }
    uint64_t v38 = (char *)v25[327];
    uint64_t v25 = (uint64_t *)(v38 + 56);
    uint64_t v170 = 1 << v38[32];
    if (v170 < 64) {
      uint64_t v171 = ~(-1 << v170);
    }
    else {
      uint64_t v171 = -1;
    }
    int64_t v35 = v171 & *((void *)v38 + 7);
    int64_t v32 = (unint64_t)(v170 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    uint64_t v31 = 0;
    while (2)
    {
      if (v35)
      {
        unint64_t v172 = __clz(__rbit64(v35));
        v35 &= v35 - 1;
        unint64_t v173 = v172 | (v31 << 6);
LABEL_171:
        v174 = (uint64_t *)(*((void *)v38 + 6) + 16 * v173);
        uint64_t v175 = *v174;
        uint64_t v26 = v174[1];
        swift_bridgeObjectRetain();
        v176._uint64_t countAndFlagsBits = v175;
        v176._object = (void *)v26;
        LOBYTE(v175) = String.hasPrefix(_:)(v176);
        swift_bridgeObjectRelease();
        if (v175)
        {
          uint64_t v31 = v259;
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          LODWORD(v233) = 1;
          uint64_t v26 = (uint64_t)v256;
          v166 = v257;
          goto LABEL_192;
        }
        continue;
      }
      break;
    }
    int64_t v177 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      goto LABEL_221;
    }
    if (v177 < v32)
    {
      unint64_t v178 = v25[v177];
      ++v31;
      if (!v178)
      {
        uint64_t v31 = v177 + 1;
        if (v177 + 1 >= v32) {
          goto LABEL_145;
        }
        unint64_t v178 = v25[v31];
        if (!v178)
        {
          uint64_t v31 = v177 + 2;
          if (v177 + 2 >= v32) {
            goto LABEL_145;
          }
          unint64_t v178 = v25[v31];
          if (!v178)
          {
            uint64_t v31 = v177 + 3;
            if (v177 + 3 >= v32) {
              goto LABEL_145;
            }
            unint64_t v178 = v25[v31];
            if (!v178)
            {
              uint64_t v31 = v177 + 4;
              if (v177 + 4 >= v32) {
                goto LABEL_145;
              }
              unint64_t v178 = v25[v31];
              if (!v178)
              {
                int64_t v179 = v177 + 5;
                if (v179 >= v32) {
                  goto LABEL_145;
                }
                unint64_t v178 = v25[v179];
                if (!v178)
                {
                  while (1)
                  {
                    uint64_t v31 = v179 + 1;
                    if (__OFADD__(v179, 1)) {
                      goto LABEL_226;
                    }
                    if (v31 >= v32) {
                      goto LABEL_145;
                    }
                    unint64_t v178 = v25[v31];
                    ++v179;
                    if (v178) {
                      goto LABEL_190;
                    }
                  }
                }
                uint64_t v31 = v179;
              }
            }
          }
        }
      }
LABEL_190:
      int64_t v35 = (v178 - 1) & v178;
      unint64_t v173 = __clz(__rbit64(v178)) + (v31 << 6);
      goto LABEL_171;
    }
LABEL_145:
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v31 = v259;
    uint64_t v38 = v261;
    v162 = &lazy protocol witness table cache variable for type UserID and conformance UserID;
    uint64_t v25 = &lazy protocol witness table cache variable for type UserID and conformance UserID;
    uint64_t v161 = (uint64_t)v235;
    if (v160) {
      continue;
    }
    break;
  }
LABEL_146:
  int64_t v165 = v161 + 1;
  if (__OFADD__(v161, 1))
  {
LABEL_224:
    __break(1u);
    goto LABEL_225;
  }
  uint64_t v26 = (uint64_t)v256;
  v166 = v257;
  if (v165 >= v233) {
    goto LABEL_219;
  }
  unint64_t v167 = v248[v165];
  int64_t v168 = v161 + 1;
  if (v167) {
    goto LABEL_163;
  }
  int64_t v168 = v161 + 2;
  if (v161 + 2 >= v233) {
    goto LABEL_219;
  }
  unint64_t v167 = v248[v168];
  if (v167) {
    goto LABEL_163;
  }
  int64_t v168 = v161 + 3;
  if (v161 + 3 >= v233) {
    goto LABEL_219;
  }
  unint64_t v167 = v248[v168];
  if (v167) {
    goto LABEL_163;
  }
  int64_t v168 = v161 + 4;
  if (v161 + 4 >= v233) {
    goto LABEL_219;
  }
  unint64_t v167 = v248[v168];
  if (v167) {
    goto LABEL_163;
  }
  int64_t v168 = v161 + 5;
  if (v161 + 5 >= v233) {
    goto LABEL_219;
  }
  unint64_t v167 = v248[v168];
  if (v167) {
    goto LABEL_163;
  }
  v169 = (char *)(v161 + 6);
  if (v161 + 6 >= v233)
  {
LABEL_219:
    swift_release();
    LODWORD(v233) = 0;
LABEL_192:
    v180 = v250;
    dispatch thunk of NetworkAvailability.status.getter();
    v239(v166, v243, v262);
    uint64_t v181 = v254;
    v182 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v254 + 16);
    v183 = v252;
    uint64_t v184 = v251;
    v182(v252, v180, v251);
    v235 = v182;
    v182((unsigned char *)v26, v183, v184);
    v185 = (char *)(v181 + 8);
    v248 = *(uint64_t **)(v181 + 8);
    ((void (*)(unsigned char *, uint64_t))v248)(v183, v184);
    v186 = Logger.logObject.getter();
    os_log_type_t v187 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v186, v187))
    {
      uint64_t v188 = swift_slowAlloc();
      v252 = (unsigned char *)swift_slowAlloc();
      v263 = v252;
      *(_DWORD *)uint64_t v188 = 136315906;
      uint64_t v266 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x80000001BA06D270, (uint64_t *)&v263);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v188 + 12) = 1024;
      LODWORD(v266) = v232;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v188 + 18) = 1024;
      LODWORD(v266) = v233;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v188 + 24) = 2080;
      lazy protocol witness table accessor for type NetworkAvailability.Status and conformance NetworkAvailability.Status();
      v189 = v256;
      uint64_t v190 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v266 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v190, v191, (uint64_t *)&v263);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v192 = v189;
      uint64_t v31 = v259;
      v193 = v248;
      ((void (*)(unsigned char *, uint64_t))v248)(v192, v184);
      _os_log_impl(&dword_1B9C64000, v186, v187, "SelfReflectionAgent.%s hasAllowedFallbackToMightyPrefix: %{BOOL}d hasDeniedFallbackToMightyDialog: %{BOOL}d networkStatus: %s", (uint8_t *)v188, 0x22u);
      v194 = v252;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v194, -1, -1);
      MEMORY[0x1BA9E48C0](v188, -1, -1);

      v195 = v257;
    }
    else
    {
      uint64_t v196 = v26;
      v193 = v248;
      ((void (*)(uint64_t, uint64_t))v248)(v196, v184);

      v195 = v166;
    }
    v238(v195, v262);
    uint64_t v81 = v249;
    v197 = v185;
    swift_beginAccess();
    uint64_t v198 = static SelfReflectionUserDefaults._fallbackToMighty;
    v199 = off_1E9F30E28;
    char v200 = byte_1E9F30E30;
    swift_bridgeObjectRetain();
    char v201 = specialized SelfReflectionUserDefaultsProperty.wrappedValue.getter(v198, (unint64_t)v199, v200);
    swift_bridgeObjectRelease();
    v202 = v261;
    if (v201)
    {
      int v203 = v261[40];
      v204 = v253;
      uint64_t v205 = v251;
      v235(v253, v250, v251);
      if (v203 == 1)
      {
        v206 = v247;
        (*(void (**)(unsigned char *, void, uint64_t))(v254 + 104))(v247, *MEMORY[0x1E4FA52B8], v205);
        char v207 = static NetworkAvailability.Status.== infix(_:_:)();
        ((void (*)(unsigned char *, uint64_t))v193)(v206, v205);
        uint64_t v208 = ((uint64_t (*)(unsigned char *, uint64_t))v193)(v204, v205);
        if ((v207 & 1) != 0 && ((v233 | (v246 | v234) & v232 ^ 1) & 1) == 0)
        {
          swift_bridgeObjectRelease();
          v209 = v245;
          uint64_t v210 = v262;
          v239(v245, v243, v262);
          v211 = Logger.logObject.getter();
          os_log_type_t v212 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v211, v212))
          {
            uint64_t v213 = swift_slowAlloc();
            uint64_t v214 = swift_slowAlloc();
            uint64_t v266 = v214;
            *(_DWORD *)uint64_t v213 = 136315650;
            uint64_t v265 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x80000001BA06D270, &v266);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v213 + 12) = 1024;
            v261 = v197;
            char v215 = v246;
            LODWORD(v265) = v246 & 1;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v213 + 18) = 1024;
            LODWORD(v265) = v234 & 1;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_1B9C64000, v211, v212, "SelfReflectionAgent.%s decided to fall back to Intelligence Flow. hasCantDoDialog: %{BOOL}d hasUnsupportedDialog: %{BOOL}d", (uint8_t *)v213, 0x18u);
            swift_arrayDestroy();
            MEMORY[0x1BA9E48C0](v214, -1, -1);
            MEMORY[0x1BA9E48C0](v213, -1, -1);
            swift_release();

            v238(v245, v262);
            ((void (*)(unsigned char *, uint64_t))v248)(v250, v251);
          }
          else
          {
            swift_release();

            v238(v209, v210);
            ((void (*)(unsigned char *, uint64_t))v193)(v250, v251);
            char v215 = v246;
          }
          *(_WORD *)uint64_t v81 = 518;
          *(unsigned char *)(v81 + 2) = v215 & 1;
LABEL_216:
          *(_WORD *)(v81 + 3) = 514;
          *(unsigned char *)(v81 + 5) = 2;
          *(void *)(v81 + 8) = 0;
          *(unsigned char *)(v81 + 16) = 1;
          goto LABEL_217;
        }
LABEL_203:
        v216 = (unsigned char *)((uint64_t (*)(uint64_t))v237)(v208);
        if (v216)
        {
          char v217 = v216[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes];

          if (v217)
          {
            v218 = Logger.logObject.getter();
            os_log_type_t v219 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v218, v219))
            {
              v220 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v220 = 0;
              _os_log_impl(&dword_1B9C64000, v218, v219, "SelfReflectionAgent. Executing with Pommes Response.", v220, 2u);
              MEMORY[0x1BA9E48C0](v220, -1, -1);
            }

            if (ResultCandidateState.hasAlternativeSuggestion.getter())
            {
              v221 = Logger.logObject.getter();
              os_log_type_t v222 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v221, v222))
              {
                v223 = (uint8_t *)swift_slowAlloc();
                v224 = v193;
                uint64_t v225 = swift_slowAlloc();
                uint64_t v266 = v225;
                *(_DWORD *)v223 = 136315138;
                uint64_t v265 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x80000001BA06D270, &v266);
                v202 = v261;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                _os_log_impl(&dword_1B9C64000, v221, v222, "SelfReflectionAgent.%s has Alternative", v223, 0xCu);
                swift_arrayDestroy();
                uint64_t v226 = v225;
                v193 = v224;
                MEMORY[0x1BA9E48C0](v226, -1, -1);
                MEMORY[0x1BA9E48C0](v223, -1, -1);
              }

              (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(**((void **)v202 + 2) + 240))(v241, v242, 7, 9);
              swift_release();
              swift_bridgeObjectRelease();
              ((void (*)(unsigned char *, uint64_t))v193)(v250, v251);
              *(unsigned char *)uint64_t v81 = 5;
              char v227 = v246 & 1;
              *(unsigned char *)(v81 + 1) = v255 & 1;
              *(unsigned char *)(v81 + 2) = v227;
              goto LABEL_216;
            }
          }
          ((void (*)(unsigned char *, uint64_t))v193)(v250, v251);
          swift_bridgeObjectRelease();
          swift_release();
        }
        else
        {
          swift_release();
          swift_bridgeObjectRelease();
          ((void (*)(unsigned char *, uint64_t))v193)(v250, v251);
        }
        int64_t v228 = v244;
        char v229 = v246;
        *(unsigned char *)uint64_t v81 = 2;
        *(unsigned char *)(v81 + 1) = v255 & 1;
        *(unsigned char *)(v81 + 2) = v229 & 1;
        *(_WORD *)(v81 + 3) = 514;
        *(unsigned char *)(v81 + 5) = 2;
        *(void *)(v81 + 8) = 0;
        *(unsigned char *)(v81 + 16) = 1;
        *(void *)(v81 + 24) = 0;
        *(_WORD *)(v81 + 32) = 513;
        *(void *)(v81 + 40) = v31;
        *(void *)(v81 + 48) = v228;
        return;
      }
    }
    else
    {
      v204 = v253;
      uint64_t v205 = v251;
      v235(v253, v250, v251);
    }
    uint64_t v208 = ((uint64_t (*)(unsigned char *, uint64_t))v193)(v204, v205);
    goto LABEL_203;
  }
  unint64_t v167 = v248[(void)v169];
  if (v167)
  {
    int64_t v168 = v161 + 6;
LABEL_163:
    unint64_t v160 = (v167 - 1) & v167;
    v235 = (void (*)(unsigned char *, unsigned char *, uint64_t))v168;
    unint64_t v164 = __clz(__rbit64(v167)) + (v168 << 6);
    goto LABEL_164;
  }
  while (1)
  {
    int64_t v168 = (int64_t)(v169 + 1);
    if (__OFADD__(v169, 1)) {
      break;
    }
    if (v168 >= v233) {
      goto LABEL_219;
    }
    unint64_t v167 = v248[v168];
    ++v169;
    if (v167) {
      goto LABEL_163;
    }
  }
LABEL_229:
  __break(1u);
}

uint64_t ExecutionOutput.hasCantUnderstandDialog.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = v0;
  uint64_t v4 = ExecutionOutput.catCategories.getter();
  uint64_t v5 = v4;
  uint64_t v6 = v4 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(v4 + 56);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (v9)
  {
    unint64_t v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v14 = v13 | (v12 << 6);
LABEL_5:
    int64_t v15 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v14);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    unint64_t v57 = 0xD000000000000010;
    unint64_t v58 = 0x80000001BA06D110;
    uint64_t v55 = v17;
    uint64_t v56 = v16;
    uint64_t v18 = type metadata accessor for Locale();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v3, 1, 1, v18);
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v19 = StringProtocol.compare<A>(_:options:range:locale:)();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v3, &demangling cache variable for type metadata for Locale?);
    uint64_t result = swift_bridgeObjectRelease();
    if (!v19)
    {
      swift_release();
LABEL_79:
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  int64_t v20 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
LABEL_82:
    __break(1u);
    goto LABEL_83;
  }
  if (v20 >= v10) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v20);
  ++v12;
  if (v21) {
    goto LABEL_24;
  }
  int64_t v12 = v20 + 1;
  if (v20 + 1 >= v10) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v12);
  if (v21) {
    goto LABEL_24;
  }
  int64_t v12 = v20 + 2;
  if (v20 + 2 >= v10) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v12);
  if (v21) {
    goto LABEL_24;
  }
  int64_t v12 = v20 + 3;
  if (v20 + 3 >= v10) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v12);
  if (v21) {
    goto LABEL_24;
  }
  int64_t v12 = v20 + 4;
  if (v20 + 4 >= v10) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v12);
  if (v21)
  {
LABEL_24:
    unint64_t v9 = (v21 - 1) & v21;
    unint64_t v14 = __clz(__rbit64(v21)) + (v12 << 6);
    goto LABEL_5;
  }
  int64_t v22 = v20 + 5;
  if (v22 < v10)
  {
    unint64_t v21 = *(void *)(v6 + 8 * v22);
    if (!v21)
    {
      while (1)
      {
        int64_t v12 = v22 + 1;
        if (__OFADD__(v22, 1)) {
          break;
        }
        if (v12 >= v10) {
          goto LABEL_26;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v12);
        ++v22;
        if (v21) {
          goto LABEL_24;
        }
      }
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
    int64_t v12 = v22;
    goto LABEL_24;
  }
LABEL_26:
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v23 = ExecutionOutput.catIdentifiers.getter();
  uint64_t v24 = *(void *)(v23 + 56);
  uint64_t v51 = v23 + 56;
  uint64_t v25 = 1 << *(unsigned char *)(v23 + 32);
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  else {
    uint64_t v26 = -1;
  }
  uint64_t v27 = v26 & v24;
  int64_t v52 = (unint64_t)(v25 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v28 = 0;
  long long v29 = &unk_1EB9CF000;
  long long v30 = &unk_1EB9CD000;
  uint64_t v54 = result;
  if (!v27) {
    goto LABEL_31;
  }
  while (2)
  {
    v27 &= v27 - 1;
    int64_t v53 = v28;
LABEL_49:
    if (v29[406] != -1) {
      swift_once();
    }
    uint64_t v35 = v30[159];
    uint64_t v36 = v35 + 56;
    uint64_t v37 = 1 << *(unsigned char *)(v35 + 32);
    if (v37 < 64) {
      uint64_t v38 = ~(-1 << v37);
    }
    else {
      uint64_t v38 = -1;
    }
    unint64_t v39 = v38 & *(void *)(v35 + 56);
    int64_t v40 = (unint64_t)(v37 + 63) >> 6;
    uint64_t result = swift_bridgeObjectRetain_n();
    int64_t v41 = 0;
    while (2)
    {
      if (v39)
      {
        unint64_t v42 = __clz(__rbit64(v39));
        v39 &= v39 - 1;
        unint64_t v43 = v42 | (v41 << 6);
LABEL_56:
        uint64_t v44 = (uint64_t *)(*(void *)(v35 + 48) + 16 * v43);
        uint64_t v45 = *v44;
        unint64_t v46 = (void *)v44[1];
        swift_bridgeObjectRetain();
        v47._uint64_t countAndFlagsBits = v45;
        v47._object = v46;
        LOBYTE(v45) = String.hasPrefix(_:)(v47);
        uint64_t result = swift_bridgeObjectRelease();
        if (v45)
        {
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_79;
        }
        continue;
      }
      break;
    }
    int64_t v48 = v41 + 1;
    if (__OFADD__(v41, 1)) {
      goto LABEL_82;
    }
    if (v48 < v40)
    {
      unint64_t v49 = *(void *)(v36 + 8 * v48);
      ++v41;
      if (!v49)
      {
        int64_t v41 = v48 + 1;
        if (v48 + 1 >= v40) {
          goto LABEL_76;
        }
        unint64_t v49 = *(void *)(v36 + 8 * v41);
        if (!v49)
        {
          int64_t v41 = v48 + 2;
          if (v48 + 2 >= v40) {
            goto LABEL_76;
          }
          unint64_t v49 = *(void *)(v36 + 8 * v41);
          if (!v49)
          {
            int64_t v41 = v48 + 3;
            if (v48 + 3 >= v40) {
              goto LABEL_76;
            }
            unint64_t v49 = *(void *)(v36 + 8 * v41);
            if (!v49)
            {
              int64_t v41 = v48 + 4;
              if (v48 + 4 >= v40) {
                goto LABEL_76;
              }
              unint64_t v49 = *(void *)(v36 + 8 * v41);
              if (!v49)
              {
                int64_t v50 = v48 + 5;
                if (v50 >= v40) {
                  goto LABEL_76;
                }
                unint64_t v49 = *(void *)(v36 + 8 * v50);
                if (!v49)
                {
                  while (1)
                  {
                    int64_t v41 = v50 + 1;
                    if (__OFADD__(v50, 1)) {
                      goto LABEL_85;
                    }
                    if (v41 >= v40) {
                      goto LABEL_76;
                    }
                    unint64_t v49 = *(void *)(v36 + 8 * v41);
                    ++v50;
                    if (v49) {
                      goto LABEL_75;
                    }
                  }
                }
                int64_t v41 = v50;
              }
            }
          }
        }
      }
LABEL_75:
      unint64_t v39 = (v49 - 1) & v49;
      unint64_t v43 = __clz(__rbit64(v49)) + (v41 << 6);
      goto LABEL_56;
    }
LABEL_76:
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    int64_t v28 = v53;
    long long v29 = (void *)&unk_1EB9CF000;
    long long v30 = (void *)&unk_1EB9CD000;
    if (v27) {
      continue;
    }
    break;
  }
LABEL_31:
  int64_t v31 = v28 + 1;
  if (__OFADD__(v28, 1)) {
    goto LABEL_84;
  }
  if (v31 >= v52) {
    goto LABEL_80;
  }
  uint64_t v32 = *(void *)(v51 + 8 * v31);
  int64_t v33 = v28 + 1;
  if (v32) {
    goto LABEL_48;
  }
  int64_t v33 = v28 + 2;
  if (v28 + 2 >= v52) {
    goto LABEL_80;
  }
  uint64_t v32 = *(void *)(v51 + 8 * v33);
  if (v32) {
    goto LABEL_48;
  }
  int64_t v33 = v28 + 3;
  if (v28 + 3 >= v52) {
    goto LABEL_80;
  }
  uint64_t v32 = *(void *)(v51 + 8 * v33);
  if (v32) {
    goto LABEL_48;
  }
  int64_t v33 = v28 + 4;
  if (v28 + 4 >= v52) {
    goto LABEL_80;
  }
  uint64_t v32 = *(void *)(v51 + 8 * v33);
  if (v32) {
    goto LABEL_48;
  }
  int64_t v33 = v28 + 5;
  if (v28 + 5 >= v52) {
    goto LABEL_80;
  }
  uint64_t v32 = *(void *)(v51 + 8 * v33);
  if (v32) {
    goto LABEL_48;
  }
  uint64_t v34 = v28 + 6;
  if (v28 + 6 >= v52)
  {
LABEL_80:
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    uint64_t v32 = *(void *)(v51 + 8 * v34);
    if (v32)
    {
      int64_t v33 = v28 + 6;
LABEL_48:
      uint64_t v27 = (v32 - 1) & v32;
      int64_t v53 = v33;
      goto LABEL_49;
    }
    while (1)
    {
      int64_t v33 = v34 + 1;
      if (__OFADD__(v34, 1)) {
        break;
      }
      if (v33 >= v52) {
        goto LABEL_80;
      }
      uint64_t v32 = *(void *)(v51 + 8 * v33);
      ++v34;
      if (v32) {
        goto LABEL_48;
      }
    }
LABEL_86:
    __break(1u);
  }
  return result;
}

uint64_t ExecutionOutput.hasCantDoDialog.getter()
{
  return ExecutionOutput.hasCantDoDialog.getter(0x6F442074276E6143, 0xE800000000000000);
}

uint64_t ExecutionOutput.hasUnsupportedDialog.getter()
{
  return ExecutionOutput.hasCantDoDialog.getter(0x74726F70707553, 0xE700000000000000);
}

uint64_t ExecutionOutput.hasCantDoDialog.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = ExecutionOutput.catCategories.getter();
  uint64_t v8 = v7;
  uint64_t v9 = v7 + 56;
  uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v7 + 56);
  int64_t v27 = (unint64_t)(v10 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  while (v12)
  {
    unint64_t v15 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v16 = v15 | (v14 << 6);
LABEL_5:
    uint64_t v17 = (uint64_t *)(*(void *)(v8 + 48) + 16 * v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v30 = a1;
    uint64_t v31 = a2;
    uint64_t v28 = v19;
    uint64_t v29 = v18;
    uint64_t v20 = type metadata accessor for Locale();
    uint64_t v21 = 1;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v6, 1, 1, v20);
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v22 = StringProtocol.compare<A>(_:options:range:locale:)();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v6, &demangling cache variable for type metadata for Locale?);
    uint64_t result = swift_bridgeObjectRelease();
    if (!v22) {
      goto LABEL_26;
    }
  }
  int64_t v23 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v23 >= v27) {
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v9 + 8 * v23);
  ++v14;
  if (v24) {
    goto LABEL_24;
  }
  int64_t v14 = v23 + 1;
  if (v23 + 1 >= v27) {
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v9 + 8 * v14);
  if (v24) {
    goto LABEL_24;
  }
  int64_t v14 = v23 + 2;
  if (v23 + 2 >= v27) {
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v9 + 8 * v14);
  if (v24) {
    goto LABEL_24;
  }
  int64_t v14 = v23 + 3;
  if (v23 + 3 >= v27) {
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v9 + 8 * v14);
  if (v24) {
    goto LABEL_24;
  }
  int64_t v14 = v23 + 4;
  if (v23 + 4 >= v27) {
    goto LABEL_25;
  }
  unint64_t v24 = *(void *)(v9 + 8 * v14);
  if (v24)
  {
LABEL_24:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v16 = __clz(__rbit64(v24)) + (v14 << 6);
    goto LABEL_5;
  }
  int64_t v25 = v23 + 5;
  if (v25 >= v27)
  {
LABEL_25:
    uint64_t v21 = 0;
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    return v21;
  }
  unint64_t v24 = *(void *)(v9 + 8 * v25);
  if (v24)
  {
    int64_t v14 = v25;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v14 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v14 >= v27) {
      goto LABEL_25;
    }
    unint64_t v24 = *(void *)(v9 + 8 * v14);
    ++v25;
    if (v24) {
      goto LABEL_24;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t ExecutionOutput.catIdentifiers.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___SKRExecutionOutput_command);
  if (!v1) {
    return MEMORY[0x1E4FBC870];
  }
  uint64_t v2 = one-time initialization token for conversationBridge;
  id v3 = v1;
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  unint64_t v5 = (unint64_t)v3;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v62 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_getObjectType();
    uint64_t v10 = _typeName(_:qualified:)();
    uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v6, v7, "SelfReflectionAgent attempts to retrieve cat id from command: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v9, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  else
  {
  }
  self;
  uint64_t v12 = swift_dynamicCastObjCClass();
  if (v12)
  {
    unint64_t v13 = (void *)v12;
    id v14 = (id)v5;
    id v15 = objc_msgSend(v13, sel_views);
    if (v15)
    {
      unint64_t v16 = v15;
      type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
      uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if ((unint64_t)v17 >> 62)
      {
        if (v17 < 0) {
          unint64_t v5 = v17;
        }
        else {
          unint64_t v5 = v17 & 0xFFFFFFFFFFFFFF8;
        }
        swift_bridgeObjectRetain();
        uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
        uint64_t v60 = v14;
        if (v18) {
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        uint64_t v60 = v14;
        if (v18)
        {
LABEL_11:
          if (v18 >= 1)
          {
            uint64_t v19 = 0;
            uint64_t v20 = (void *)MEMORY[0x1E4FBC860];
            do
            {
              if ((v17 & 0xC000000000000001) != 0) {
                id v22 = (id)MEMORY[0x1BA9E3990](v19, v17);
              }
              else {
                id v22 = *(id *)(v17 + 8 * v19 + 32);
              }
              int64_t v23 = v22;
              uint64_t v64 = (uint64_t)v22;
              closure #1 in ExecutionOutput.catIdentifiers.getter((void **)&v64, (SEL *)&selRef_dialogIdentifier, "SelfReflectionAgent view: %s catId: %s", &v62);

              uint64_t v24 = v63;
              if (v63)
              {
                uint64_t v25 = v62;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
                }
                unint64_t v27 = v20[2];
                unint64_t v26 = v20[3];
                if (v27 >= v26 >> 1) {
                  uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v20);
                }
                v20[2] = v27 + 1;
                uint64_t v21 = &v20[2 * v27];
                v21[4] = v25;
                v21[5] = v24;
              }
              ++v19;
            }
            while (v18 != v19);
            goto LABEL_54;
          }
          __break(1u);
          goto LABEL_56;
        }
      }
      uint64_t v20 = (void *)MEMORY[0x1E4FBC860];
LABEL_54:
      swift_bridgeObjectRelease_n();
      uint64_t v56 = specialized Set.init<A>(_:)((uint64_t)v20);

LABEL_59:
      swift_bridgeObjectRelease();
      return v56;
    }
  }
  self;
  uint64_t v28 = swift_dynamicCastObjCClass();
  if (!v28)
  {
LABEL_47:

    return MEMORY[0x1E4FBC870];
  }
  uint64_t v29 = (void *)v28;
  uint64_t v18 = (uint64_t)(id)v5;
  id v30 = objc_msgSend(v29, sel_dialogs);
  if (!v30)
  {

    goto LABEL_47;
  }
  uint64_t v31 = v30;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SADialog);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v5 >> 62))
  {
    uint64_t v32 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v57 = (void *)v18;
    if (!v32) {
      goto LABEL_57;
    }
    goto LABEL_28;
  }
LABEL_56:
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v32 = result;
  unint64_t v57 = (void *)v18;
  if (!result)
  {
LABEL_57:
    uint64_t v35 = (void *)MEMORY[0x1E4FBC860];
LABEL_58:
    swift_bridgeObjectRelease_n();
    uint64_t v56 = specialized Set.init<A>(_:)((uint64_t)v35);

    goto LABEL_59;
  }
LABEL_28:
  if (v32 >= 1)
  {
    uint64_t v34 = 0;
    unint64_t v59 = v5 & 0xC000000000000001;
    uint64_t v35 = (void *)MEMORY[0x1E4FBC860];
    while (1)
    {
      if (v59) {
        id v37 = (id)MEMORY[0x1BA9E3990](v34, v5);
      }
      else {
        id v37 = *(id *)(v5 + 8 * v34 + 32);
      }
      uint64_t v38 = v37;
      id v39 = objc_msgSend(v37, sel_dialogIdentifier, v57);
      if (v39)
      {
        int64_t v40 = v39;
        uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v43 = v42;
      }
      else
      {
        uint64_t v41 = 0;
        uint64_t v43 = 0;
      }
      swift_bridgeObjectRetain_n();
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.debug.getter();
      uint64_t v61 = v41;
      if (os_log_type_enabled(v44, v45))
      {
        unint64_t v58 = v35;
        uint64_t v46 = swift_slowAlloc();
        uint64_t v47 = v32;
        unint64_t v48 = v5;
        uint64_t v49 = swift_slowAlloc();
        uint64_t v63 = v43;
        uint64_t v64 = v49;
        *(_DWORD *)uint64_t v46 = 136315138;
        uint64_t v62 = v41;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
        uint64_t v50 = String.init<A>(describing:)();
        *(void *)(v46 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v64);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v44, v45, "SelfReflectionAgent dialog catId: %s", (uint8_t *)v46, 0xCu);
        swift_arrayDestroy();
        uint64_t v52 = v49;
        unint64_t v5 = v48;
        uint64_t v32 = v47;
        MEMORY[0x1BA9E48C0](v52, -1, -1);
        uint64_t v53 = v46;
        uint64_t v35 = v58;
        MEMORY[0x1BA9E48C0](v53, -1, -1);

        if (v43) {
          goto LABEL_42;
        }
      }
      else
      {

        swift_bridgeObjectRelease_n();
        if (v43)
        {
LABEL_42:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35[2] + 1, 1, v35);
          }
          unint64_t v55 = v35[2];
          unint64_t v54 = v35[3];
          if (v55 >= v54 >> 1) {
            uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v54 > 1), v55 + 1, 1, v35);
          }
          v35[2] = v55 + 1;
          uint64_t v36 = &v35[2 * v55];
          v36[4] = v61;
          v36[5] = v43;
        }
      }
      if (v32 == ++v34) {
        goto LABEL_58;
      }
    }
  }
  __break(1u);
  return result;
}

uint64_t ExecutionOutput.catCategories.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___SKRExecutionOutput_command);
  if (!v1) {
    return MEMORY[0x1E4FBC870];
  }
  uint64_t v2 = one-time initialization token for conversationBridge;
  id v3 = v1;
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.conversationBridge);
  id v5 = v3;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    uint64_t v44 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_getObjectType();
    uint64_t v10 = _typeName(_:qualified:)();
    uint64_t v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v6, v7, "SelfReflectionAgent attempts to retrieve cat category from command: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v9, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  else
  {
  }
  self;
  uint64_t v12 = swift_dynamicCastObjCClass();
  if (!v12)
  {
LABEL_24:
    self;
    uint64_t v28 = swift_dynamicCastObjCClass();
    if (v28)
    {
      uint64_t v29 = (void *)v28;
      id v14 = v5;
      id v30 = objc_msgSend(v29, sel_dialogs);
      if (v30)
      {
        uint64_t v31 = v30;
        type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SADialog);
        unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v17 >> 62) {
          goto LABEL_46;
        }
        uint64_t v32 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t result = swift_bridgeObjectRetain();
        uint64_t v43 = v14;
        if (v32) {
          goto LABEL_28;
        }
        goto LABEL_47;
      }
    }
    return MEMORY[0x1E4FBC870];
  }
  unint64_t v13 = (void *)v12;
  id v14 = v5;
  id v15 = objc_msgSend(v13, sel_views);
  if (!v15)
  {

    goto LABEL_24;
  }
  unint64_t v16 = v15;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
  unint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v17 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v43 = v14;
    if (!v18) {
      goto LABEL_47;
    }
    goto LABEL_11;
  }
  uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t v43 = v14;
  if (!v18)
  {
LABEL_47:
    uint64_t v20 = (void *)MEMORY[0x1E4FBC860];
LABEL_48:
    swift_bridgeObjectRelease_n();
    uint64_t v42 = specialized Set.init<A>(_:)((uint64_t)v20);

    swift_bridgeObjectRelease();
    return v42;
  }
LABEL_11:
  if (v18 >= 1)
  {
    uint64_t v19 = 0;
    uint64_t v20 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if ((v17 & 0xC000000000000001) != 0) {
        id v22 = (id)MEMORY[0x1BA9E3990](v19, v17);
      }
      else {
        id v22 = *(id *)(v17 + 8 * v19 + 32);
      }
      int64_t v23 = v22;
      uint64_t v46 = (uint64_t)v22;
      closure #1 in ExecutionOutput.catIdentifiers.getter((void **)&v46, (SEL *)&selRef_dialogCategory, "SelfReflectionAgent view: %s catCategory: %s", &v44);

      uint64_t v24 = v45;
      if (v45)
      {
        uint64_t v25 = v44;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
        }
        unint64_t v27 = v20[2];
        unint64_t v26 = v20[3];
        if (v27 >= v26 >> 1) {
          uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v20);
        }
        v20[2] = v27 + 1;
        uint64_t v21 = &v20[2 * v27];
        v21[4] = v25;
        v21[5] = v24;
      }
      ++v19;
    }
    while (v18 != v19);
    goto LABEL_48;
  }
  __break(1u);
LABEL_46:
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v32 = result;
  uint64_t v43 = v14;
  if (!result) {
    goto LABEL_47;
  }
LABEL_28:
  if (v32 >= 1)
  {
    uint64_t v34 = 0;
    uint64_t v20 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      if ((v17 & 0xC000000000000001) != 0) {
        id v36 = (id)MEMORY[0x1BA9E3990](v34, v17);
      }
      else {
        id v36 = *(id *)(v17 + 8 * v34 + 32);
      }
      id v37 = v36;
      uint64_t v46 = (uint64_t)v36;
      closure #2 in ExecutionOutput.catCategories.getter((id *)&v46, &v44);

      uint64_t v38 = v45;
      if (v45)
      {
        uint64_t v39 = v44;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
        }
        unint64_t v41 = v20[2];
        unint64_t v40 = v20[3];
        if (v41 >= v40 >> 1) {
          uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v40 > 1), v41 + 1, 1, v20);
        }
        v20[2] = v41 + 1;
        uint64_t v35 = &v20[2 * v41];
        v35[4] = v39;
        v35[5] = v38;
      }
      ++v34;
    }
    while (v32 != v34);
    goto LABEL_48;
  }
  __break(1u);
  return result;
}

unint64_t ResultCandidateState.isFlexibleFollowUp.getter()
{
  unint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 872))();
  if (result)
  {
    uint64_t v2 = (void *)(*(uint64_t (**)(unint64_t))(*(void *)result + 264))(result);
    swift_release();
    if (v2 && (unint64_t v3 = (unint64_t)objc_msgSend(v2, sel_speechEvent), v2, v3 <= 0x23)) {
      return (0xC40000000uLL >> v3) & 1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t ResultCandidateState.isVoiceTrigger.getter()
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 872))();
  if (result)
  {
    uint64_t v2 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)result + 264))(result);
    swift_release();
    if (v2 && (unint64_t v3 = (unint64_t)objc_msgSend(v2, sel_speechEvent), v2, v3 <= 0x10)) {
      return (0x18100u >> v3) & 1;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t PommesInfo.isWebSearchFallback.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  PommesResponse.metadataDomainName.getter();
  Swift::String v3 = String.lowercased()();
  swift_bridgeObjectRelease();
  char v4 = specialized Sequence<>.contains(_:)(v3._countAndFlagsBits, (uint64_t)v3._object, outlined read-only object #0 of PommesInfo.isWebSearchFallback.getter);

  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0) {
    return 0;
  }
  id v5 = v2;
  char v6 = PommesResponse.metadataFallbackTriggered.getter();

  return v6 & 1;
}

id AFSpeechPackage.isSingleWord.getter()
{
  id result = objc_msgSend(v0, sel_recognition);
  if (result)
  {
    id v2 = result;
    id v3 = objc_msgSend(result, sel_phrases);

    if (v3)
    {
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFSpeechPhrase);
      unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v4 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      return (id)(v5 == 1);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t ResultCandidateState.hasAlternativeSuggestion.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
  MEMORY[0x1F4188790](v1 - 8);
  id v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 376))(v6);
  char v10 = v9;
  if (!v9) {
    return v10 & 1;
  }
  unint64_t v11 = *(void **)(v9 + 16);
  id v12 = v11;
  swift_release();
  if (!v11) {
    goto LABEL_15;
  }
  unint64_t v13 = dispatch thunk of PommesResponse.experiences.getter();
  unint64_t v14 = v13;
  if (!(v13 >> 62))
  {
    uint64_t result = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (result) {
      goto LABEL_5;
    }
LABEL_14:

    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    goto LABEL_14;
  }
LABEL_5:
  if ((v14 & 0xC000000000000001) != 0)
  {
    id v16 = (id)MEMORY[0x1BA9E3990](0, v14);
LABEL_8:
    unint64_t v17 = v16;
    swift_bridgeObjectRelease();
    type metadata accessor for GenericExperience();
    if (swift_dynamicCastClass())
    {
      dispatch thunk of GenericExperience.serverSuggestions.getter();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v3, v4);
        char v10 = Apple_Parsec_Siri_V2alpha_ServerSuggestion.hasAlternateQuerySuggestion.getter();

        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
        return v10 & 1;
      }

      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v3, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
    }
    else
    {
    }
LABEL_15:
    char v10 = 0;
    return v10 & 1;
  }
  if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v16 = *(id *)(v14 + 32);
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

id SelfReflectionAgent.classifyRequestAsSearchRequest(tagger:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v38 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v39 = (uint64_t)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  id v12 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  id v15 = (char *)&v34 - v14;
  (*(void (**)(void *__return_ptr, uint64_t))(*v1 + 320))(v42, v13);
  int v16 = LOBYTE(v42[0]);
  swift_bridgeObjectRelease();
  uint64_t v17 = swift_bridgeObjectRelease();
  uint64_t v18 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*v1 + 248))(v17);
  if (!v18
    || (uint64_t v19 = v18[OBJC_IVAR____TtC14SiriKitRuntime18ExecutionInputInfo_executePommes], v18, v16 != 5)
    && v16 != 2)
  {
    uint64_t v19 = 0;
  }
  uint64_t v20 = v1[2];
  if ((v16 - 2) > 4) {
    uint64_t v21 = 3;
  }
  else {
    uint64_t v21 = dword_1BA05AE44[(char)(v16 - 2)];
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 248))(v19, v21);
  id result = objc_msgSend((id)v2[4], sel_getSearchQueriesDataSharingStatus);
  if (v19)
  {
    unint64_t v23 = (unint64_t)result;
    id result = (id)(*(uint64_t (**)(void))(*v2 + 200))();
    if (v24)
    {
      uint64_t v25 = v24;
      id v37 = result;
      UUID.init(uuidString:)();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
      {
        swift_bridgeObjectRelease();
        return (id)outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      }
      else
      {
        uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v35(v15, v7, v8);
        outlined init with copy of Tagger?(v38, (uint64_t)&v40);
        uint64_t v36 = v9 + 32;
        if (v41)
        {
          outlined init with take of ReferenceResolutionClientProtocol(&v40, (uint64_t)v42);
        }
        else
        {
          uint64_t v26 = v2[13];
          v42[3] = type metadata accessor for TaggingService();
          v42[4] = &protocol witness table for TaggingService;
          v42[0] = v26;
          swift_retain();
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v40, &demangling cache variable for type metadata for Tagger?);
        }
        LODWORD(v38) = v23 < 2;
        uint64_t v27 = type metadata accessor for TaskPriority();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v39, 1, 1, v27);
        (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v15, v8);
        outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v42, (uint64_t)&v40);
        unint64_t v28 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
        uint64_t v29 = v28 + v10;
        unint64_t v30 = (v28 + v10) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v31 = swift_allocObject();
        *(void *)(v31 + 16) = 0;
        *(void *)(v31 + 24) = 0;
        v35((char *)(v31 + v28), v12, v8);
        *(unsigned char *)(v31 + v29) = v38;
        outlined init with take of ReferenceResolutionClientProtocol(&v40, v30 + v31 + 8);
        uint64_t v32 = (void *)(v31 + ((v30 + 55) & 0xFFFFFFFFFFFFFFF8));
        *uint64_t v32 = v37;
        v32[1] = v25;
        uint64_t v33 = v39;
        _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v39, (uint64_t)&async function pointer to partial apply for closure #1 in SelfReflectionAgent.classifyRequestAsSearchRequest(tagger:), v31);
        swift_release();
        outlined destroy of ReferenceResolutionClientProtocol?(v33, &demangling cache variable for type metadata for TaskPriority?);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
        return (id)__swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v42);
      }
    }
  }
  return result;
}

uint64_t closure #1 in SelfReflectionAgent.classifyRequestAsSearchRequest(tagger:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 96) = a7;
  *(void *)(v8 + 104) = a8;
  *(unsigned char *)(v8 + 144) = a5;
  *(void *)(v8 + 80) = a4;
  *(void *)(v8 + 88) = a6;
  uint64_t v9 = type metadata accessor for DataClassificationTag();
  *(void *)(v8 + 112) = v9;
  *(void *)(v8 + 120) = *(void *)(v9 - 8);
  *(void *)(v8 + 128) = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in SelfReflectionAgent.classifyRequestAsSearchRequest(tagger:), 0, 0);
}

uint64_t closure #1 in SelfReflectionAgent.classifyRequestAsSearchRequest(tagger:)()
{
  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  uint64_t v3 = v0[14];
  uint64_t v4 = (void *)v0[11];
  static DataClassificationTag.searchRequest(requestIdentifier:optedInToSearchSharing:)();
  uint64_t v5 = v4[3];
  uint64_t v6 = v4[4];
  __swift_project_boxed_opaque_existential_1(v4, v5);
  uint64_t v7 = MEMORY[0x1E4F9F9A0];
  v0[5] = v3;
  v0[6] = v7;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v0 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 16))(boxed_opaque_existential_0, v1, v3);
  uint64_t v11 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))(*(void *)(v6 + 8) + **(int **)(v6 + 8));
  uint64_t v9 = (void *)swift_task_alloc();
  v0[17] = (uint64_t)v9;
  void *v9 = v0;
  v9[1] = closure #1 in SelfReflectionAgent.classifyRequestAsSearchRequest(tagger:);
  return v11(v0 + 2, v5, v6);
}

{
  uint64_t v0;
  __objc2_class *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t (*v23)(void);
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  unint64_t v28 = v0;
  uint64_t v1 = &OBJC_METACLASS____TtC14SiriKitRuntime35ConversationBridgeProcessorDelegate;
  if ((*(unsigned char *)(v0 + 145) & 1) == 0)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain_n();
    uint64_t v3 = Logger.logObject.getter();
    uint64_t v4 = static os_log_type_t.error.getter();
    uint64_t v5 = os_log_type_enabled(v3, v4);
    uint64_t v6 = *(void *)(v0 + 104);
    if (v5)
    {
      uint64_t v7 = *(void *)(v0 + 96);
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v27 = v9;
      *(_DWORD *)uint64_t v8 = 136380675;
      swift_bridgeObjectRetain();
      uint64_t v1 = &OBJC_METACLASS____TtC14SiriKitRuntime35ConversationBridgeProcessorDelegate;
      *(void *)(v0 + 72) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v3, v4, "Unable to tag request %{private}s.", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v9, -1, -1);
      MEMORY[0x1BA9E48C0](v8, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
  }
  if (v1[92].vtable != (void *)-1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  uint64_t v12 = static os_log_type_t.debug.getter();
  uint64_t v13 = os_log_type_enabled(v11, v12);
  id v15 = *(void *)(v0 + 120);
  uint64_t v14 = *(void *)(v0 + 128);
  uint64_t v17 = *(void *)(v0 + 104);
  int v16 = *(void *)(v0 + 112);
  if (v13)
  {
    uint64_t v26 = *(void *)(v0 + 128);
    uint64_t v18 = *(void *)(v0 + 96);
    uint64_t v25 = *(unsigned __int8 *)(v0 + 144);
    uint64_t v19 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v27 = v20;
    *(_DWORD *)uint64_t v19 = 136380931;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 12) = 2080;
    if (v25) {
      uint64_t v21 = 28265;
    }
    else {
      uint64_t v21 = 7632239;
    }
    if (v25) {
      id v22 = 0xE200000000000000;
    }
    else {
      id v22 = 0xE300000000000000;
    }
    *(void *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v11, v12, "Search query sharing status at the time of %{private}s: opted-%s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v20, -1, -1);
    MEMORY[0x1BA9E48C0](v19, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v26, v16);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  swift_task_dealloc();
  unint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
  return v23();
}

uint64_t closure #1 in SelfReflectionAgent.classifyRequestAsSearchRequest(tagger:)(char a1)
{
  uint64_t v2 = *(void *)v1 + 16;
  *(unsigned char *)(*(void *)v1 + 145) = a1;
  swift_task_dealloc();
  __swift_destroy_boxed_opaque_existential_1Tm(v2);
  return MEMORY[0x1F4188298](closure #1 in SelfReflectionAgent.classifyRequestAsSearchRequest(tagger:), 0, 0);
}

id *SelfReflectionAgent.deinit()
{
  swift_release();
  swift_release();

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 6));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SelfReflectionAgent.__deallocating_deinit()
{
  SelfReflectionAgent.deinit();

  return swift_deallocClassInstance();
}

uint64_t PommesInfo.isWebSearch.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  PommesResponse.metadataDomainName.getter();
  Swift::String v3 = String.lowercased()();
  swift_bridgeObjectRelease();
  char v4 = specialized Sequence<>.contains(_:)(v3._countAndFlagsBits, (uint64_t)v3._object, outlined read-only object #0 of PommesInfo.isWebSearch.getter);

  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t PommesInfo.isFallback.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (!v1) {
    return 0;
  }
  id v2 = v1;
  char v3 = PommesResponse.metadataFallbackTriggered.getter();

  return v3 & 1;
}

uint64_t one-time initialization function for kCantUnderstandCatIds()
{
  uint64_t v0 = (void *)specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kCantUnderstandCatIds);
  uint64_t result = swift_arrayDestroy();
  kCantUnderstandCatIds = v0;
  return result;
}

uint64_t one-time initialization function for kAllowedFallbackToMightyPrefix()
{
  uint64_t v0 = (void *)specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kAllowedFallbackToMightyPrefix);
  uint64_t result = swift_arrayDestroy();
  kAllowedFallbackToMightyPrefix = v0;
  return result;
}

uint64_t one-time initialization function for kDeniedFallbackToMightyCatIds()
{
  uint64_t v0 = (void *)specialized Set.init<A>(_:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kDeniedFallbackToMightyCatIds);
  uint64_t result = swift_arrayDestroy();
  kDeniedFallbackToMightyCatIds = v0;
  return result;
}

void closure #1 in ExecutionOutput.catIdentifiers.getter(void **a1@<X0>, SEL *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = *a1;
  self;
  uint64_t v8 = (void *)swift_dynamicCastObjCClass();
  if (v8)
  {
    id v9 = [v8 *a2];
    if (v9) {
      goto LABEL_5;
    }
  }
  id v10 = objc_msgSend(v7, sel_dialog);
  uint64_t v11 = v10;
  if (v10)
  {
    id v9 = [v10 *a2];

    if (v9)
    {
LABEL_5:
      uint64_t v11 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v12;

      goto LABEL_8;
    }
    uint64_t v11 = 0;
  }
  uint64_t v13 = 0;
LABEL_8:
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  id v15 = v7;
  int v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    format = a3;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v25 = v19;
    *(_DWORD *)uint64_t v18 = 136315394;
    swift_getObjectType();
    uint64_t v20 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    uint64_t v22 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v16, v17, format, (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v19, -1, -1);
    MEMORY[0x1BA9E48C0](v18, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  *a4 = v11;
  a4[1] = v13;
}

void closure #2 in ExecutionOutput.catCategories.getter(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = *a1;
  id v4 = objc_msgSend(*a1, sel_dialogCategory);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  id v10 = v3;
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v19 = v14;
    *(_DWORD *)uint64_t v13 = 136315394;
    swift_getObjectType();
    uint64_t v15 = _typeName(_:qualified:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    uint64_t v17 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v11, v12, "SelfReflectionAgent dialog: %s catCategory: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v14, -1, -1);
    MEMORY[0x1BA9E48C0](v13, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  *a2 = v6;
  a2[1] = v8;
}

uint64_t specialized SelfReflectionAgent.init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v23 = a9;
  uint64_t v24 = a10;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v22);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a9 - 8) + 32))(boxed_opaque_existential_0, a5, a9);
  type metadata accessor for TaggingService();
  swift_allocObject();
  *(void *)(a8 + 104) = TaggingService.init()();
  *(void *)(a8 + 144) = 0;
  *(_OWORD *)(a8 + 128) = 0u;
  *(_OWORD *)(a8 + 112) = 0u;
  *(void *)(a8 + 16) = a1;
  *(void *)(a8 + 24) = a2;
  *(void *)(a8 + 32) = a3;
  *(unsigned char *)(a8 + 40) = a4;
  outlined init with take of ReferenceResolutionClientProtocol(&v22, a8 + 48);
  swift_beginAccess();
  *(void *)(a8 + 128) = 0;
  swift_release();
  swift_beginAccess();
  uint64_t v19 = *(void **)(a8 + 136);
  *(void *)(a8 + 136) = 0;

  swift_beginAccess();
  uint64_t v20 = *(void **)(a8 + 144);
  *(void *)(a8 + 144) = 0;

  *(_WORD *)(a8 + 156) = 514;
  *(_DWORD *)(a8 + 152) = 33686018;
  *(void *)(a8 + 160) = 0;
  *(unsigned char *)(a8 + 168) = 1;
  *(void *)(a8 + 176) = 0;
  *(_WORD *)(a8 + 184) = 513;
  *(void *)(a8 + 192) = 0;
  *(void *)(a8 + 200) = 0;
  *(_DWORD *)(a8 + 208) = 33686018;
  *(_WORD *)(a8 + 212) = 514;
  *(void *)(a8 + 216) = 0;
  *(unsigned char *)(a8 + 224) = 1;
  *(void *)(a8 + 232) = 0;
  *(_WORD *)(a8 + 240) = 513;
  *(void *)(a8 + 248) = 0;
  *(void *)(a8 + 256) = 0;
  *(void *)(a8 + 88) = a6;
  *(unsigned char *)(a8 + 264) = 0;
  *(unsigned char *)(a8 + 96) = a7;
  return a8;
}

uint64_t specialized static SelfReflectionAgentDecision.== infix(_:_:)(unsigned char *a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  switch(*a1)
  {
    case 2:
      if (v2 != 2) {
        goto LABEL_13;
      }
      goto LABEL_11;
    case 3:
      if (v2 != 3) {
        goto LABEL_13;
      }
      goto LABEL_11;
    case 4:
      if (v2 != 4) {
        goto LABEL_13;
      }
      goto LABEL_11;
    case 5:
      if (v2 != 5) {
        goto LABEL_13;
      }
      goto LABEL_11;
    case 6:
      if (v2 != 6) {
        goto LABEL_13;
      }
LABEL_11:
      uint64_t result = 1;
      break;
    default:
      if ((v2 - 2) >= 5) {
        uint64_t result = (((*a1 & 1) == 0) ^ v2) & 1;
      }
      else {
LABEL_13:
      }
        uint64_t result = 0;
      break;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.CodingKeys and conformance SelfReflectionAgentDecision.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys and conformance SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.Tap2editCodingKeys and conformance SelfReflectionAgentDecision.Tap2editCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.DismissUICodingKeys and conformance SelfReflectionAgentDecision.DismissUICodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.AskToRepeatCodingKeys and conformance SelfReflectionAgentDecision.AskToRepeatCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.IgnoreCodingKeys and conformance SelfReflectionAgentDecision.IgnoreCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys;
  if (!lazy protocol witness table cache variable for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelfReflectionAgentDecision.NoneCodingKeys and conformance SelfReflectionAgentDecision.NoneCodingKeys);
  }
  return result;
}

uint64_t outlined init with copy of Tagger?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tagger?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B9FCDE10()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + v0;
  unint64_t v8 = (((v5 & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  __swift_destroy_boxed_opaque_existential_1Tm(v7 + 8);
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, v8, v6);
}

uint64_t partial apply for closure #1 in SelfReflectionAgent.classifyRequestAsSearchRequest(tagger:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = v1 + v5;
  char v10 = *(unsigned char *)(v1 + v6);
  uint64_t v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + v1 + 8;
  os_log_type_t v12 = (uint64_t *)(v1 + (((v6 & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v15;
  void *v15 = v2;
  v15[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in SelfReflectionAgent.classifyRequestAsSearchRequest(tagger:)(a1, v7, v8, v9, v10, v11, v13, v14);
}

uint64_t sub_1B9FCE058@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 200))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1B9FCE0A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(void **)a2 + 208);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1B9FCE10C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 224))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FCE158(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 232);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B9FCE1AC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 248))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FCE1F8(id *a1, uint64_t a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))(**(void **)a2 + 256);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_1B9FCE258@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 272))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FCE2AC(id *a1, uint64_t a2)
{
  id v2 = *a1;
  uint64_t v3 = *(uint64_t (**)(id))(**(void **)a2 + 280);
  id v4 = *a1;
  return v3(v2);
}

uint64_t sub_1B9FCE31C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 344))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B9FCE374(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 352))(*a1);
}

uint64_t getEnumTagSinglePayload for SelfReflectionAgentDecision(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA)
  {
    unsigned int v2 = a2 + 6;
    if (a2 + 6 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 6;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 6;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1B9FCE474);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 6;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 < 2) {
    return 0;
  }
  unsigned int v8 = (v7 + 2147483646) & 0x7FFFFFFF;
  uint64_t result = v8 - 4;
  if (v8 <= 4) {
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SelfReflectionAgentDecision(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 6;
  if (a3 + 6 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFA) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v7 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x1B9FCE55CLL);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for SelfReflectionAgentDecision(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0;
  }
}

unsigned char *destructiveInjectEnumTag for SelfReflectionAgentDecision(unsigned char *result, int a2)
{
  if (a2) {
    *uint64_t result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for SelfReflectionAgentDecision()
{
  return &type metadata for SelfReflectionAgentDecision;
}

uint64_t destroy for SelfReflectionResponse()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SelfReflectionResponse(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SelfReflectionResponse(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(unsigned char *)(a1 + 5) = *(unsigned char *)(a2 + 5);
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for SelfReflectionResponse(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SelfReflectionResponse(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SelfReflectionResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 40) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SelfReflectionResponse()
{
  return &type metadata for SelfReflectionResponse;
}

uint64_t type metadata accessor for SelfReflectionAgent()
{
  return self;
}

uint64_t method lookup function for SelfReflectionAgent(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SelfReflectionAgent);
}

uint64_t dispatch thunk of SelfReflectionAgent.requestId.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of SelfReflectionAgent.requestId.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of SelfReflectionAgent.requestId.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of SelfReflectionAgent.resultCandidateState.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of SelfReflectionAgent.resultCandidateState.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of SelfReflectionAgent.resultCandidateState.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of SelfReflectionAgent.executionInputInfo.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of SelfReflectionAgent.executionInputInfo.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of SelfReflectionAgent.executionInputInfo.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of SelfReflectionAgent.requestContextData.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of SelfReflectionAgent.requestContextData.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of SelfReflectionAgent.requestContextData.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of SelfReflectionAgent.previousTurnMitigationResponse.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of SelfReflectionAgent.previousTurnMitigationResponse.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 304))();
}

uint64_t dispatch thunk of SelfReflectionAgent.previousTurnMitigationResponse.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 312))();
}

uint64_t dispatch thunk of SelfReflectionAgent.currentMitigationResponse.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320))();
}

uint64_t dispatch thunk of SelfReflectionAgent.currentMitigationResponse.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 328))();
}

uint64_t dispatch thunk of SelfReflectionAgent.currentMitigationResponse.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of SelfReflectionAgent.isRequestCompleted.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of SelfReflectionAgent.isRequestCompleted.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

uint64_t dispatch thunk of SelfReflectionAgent.isRequestCompleted.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of SelfReflectionAgent.__allocating_init(instrumentationUtil:networkAvailabilityProvider:preferences:isSystemAssistantExperienceEnabled:trialExperimentManager:curareDonator:isUndesiredResponseSuppressionEnabled:)()
{
  return (*(uint64_t (**)(void))(v0 + 368))();
}

uint64_t dispatch thunk of SelfReflectionAgent.reset()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of SelfReflectionAgent.setRequestId(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of SelfReflectionAgent.setResultCandidateState(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of SelfReflectionAgent.setExecutionInputInfo(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of SelfReflectionAgent.setRequestContextData(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of SelfReflectionAgent.requestCompleted()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of SelfReflectionAgent.check(executionOutput:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

uint64_t dispatch thunk of SelfReflectionAgent.classifyRequestAsSearchRequest(tagger:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 448))();
}

uint64_t getEnumTagSinglePayload for SelfReflectionAgentDecision.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SelfReflectionAgentDecision.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9FCEEECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SelfReflectionAgentDecision.CodingKeys()
{
  return &unk_1F1382820;
}

void *type metadata accessor for SelfReflectionAgentDecision.NoneCodingKeys()
{
  return &unk_1F1382840;
}

void *type metadata accessor for SelfReflectionAgentDecision.IgnoreCodingKeys()
{
  return &unk_1F1382860;
}

unsigned char *storeEnumTagSinglePayload for SelfReflectionAgentDecision.AskToRepeatCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B9FCEFE0);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for SelfReflectionAgentDecision.AskToRepeatCodingKeys()
{
  return &unk_1F13828F0;
}

void *type metadata accessor for SelfReflectionAgentDecision.DismissUICodingKeys()
{
  return &unk_1F1382910;
}

void *type metadata accessor for SelfReflectionAgentDecision.Tap2editCodingKeys()
{
  return &unk_1F1382930;
}

void *type metadata accessor for SelfReflectionAgentDecision.FallbackToIntelligenceFlowCodingKeys()
{
  return &unk_1F1382950;
}

void specialized SelfReflectionAgent.calculateSentenceConfidence(recognition:)(void *a1)
{
  if (!a1) {
    return;
  }
  id v1 = objc_msgSend(a1, sel_oneBestTokenList);
  if (!v1) {
    return;
  }
  int v2 = v1;
  type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFSpeechToken);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4) {
      goto LABEL_5;
    }
LABEL_21:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_20:
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4) {
    goto LABEL_21;
  }
LABEL_5:
  if (v4 < 1)
  {
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  do
  {
    if ((v3 & 0xC000000000000001) != 0) {
      id v7 = (id)MEMORY[0x1BA9E3990](v5, v3);
    }
    else {
      id v7 = *(id *)(v3 + 8 * v5 + 32);
    }
    int v8 = v7;
    id v9 = objc_msgSend(v7, sel_confidenceScore);

    BOOL v10 = __OFADD__(v6, v9);
    v6 += (uint64_t)v9;
    if (v10)
    {
      __break(1u);
      goto LABEL_20;
    }
    ++v5;
  }
  while (v4 != v5);
  swift_bridgeObjectRelease();
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  double v12 = (double)v6 / (double)v11;
  if ((~*(void *)&v12 & 0x7FF0000000000000) == 0) {
    goto LABEL_24;
  }
  if (v12 <= -9.22337204e18) {
    goto LABEL_25;
  }
  if (v12 >= 9.22337204e18) {
LABEL_26:
  }
    __break(1u);
}

uint64_t specialized SelfReflectionAgentDecision.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701736302 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65726F6E6769 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7065526F546B7361 && a2 == 0xEB00000000746165 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x557373696D736964 && a2 == 0xE900000000000049 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7469646532706174 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001BA0650D0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

unint64_t lazy protocol witness table accessor for type NetworkAvailability.Status and conformance NetworkAvailability.Status()
{
  unint64_t result = lazy protocol witness table cache variable for type NetworkAvailability.Status and conformance NetworkAvailability.Status;
  if (!lazy protocol witness table cache variable for type NetworkAvailability.Status and conformance NetworkAvailability.Status)
  {
    type metadata accessor for NetworkAvailability.Status();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NetworkAvailability.Status and conformance NetworkAvailability.Status);
  }
  return result;
}

uint64_t *SelfReflectionCurareDonator.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  return &static SelfReflectionCurareDonator.instance;
}

void SelfReflectionCurareDonator.donateSelfReflectionResponse(selfReflectionResponse:requestId:rcId:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v14 = a1[1];
  long long v25 = *a1;
  long long v26 = v14;
  long long v27 = a1[2];
  uint64_t v28 = *((void *)a1 + 6);
  outlined init with copy of SelfReflectionStream?(v5 + 16, (uint64_t)&v22);
  if (v23)
  {
    outlined init with take of ReferenceResolutionClientProtocol(&v22, (uint64_t)v24);
    static TaskPriority.background.getter();
    uint64_t v15 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v13, 0, 1, v15);
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v24, (uint64_t)&v22);
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = 0;
    *(void *)(v16 + 24) = 0;
    *(void *)(v16 + 32) = a2;
    *(void *)(v16 + 40) = a3;
    *(void *)(v16 + 48) = a4;
    *(void *)(v16 + 56) = a5;
    long long v17 = v26;
    *(_OWORD *)(v16 + 64) = v25;
    *(_OWORD *)(v16 + 80) = v17;
    *(_OWORD *)(v16 + 96) = v27;
    *(void *)(v16 + 112) = v28;
    outlined init with take of ReferenceResolutionClientProtocol(&v22, v16 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined retain of SelfReflectionResponse((uint64_t)&v25);
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v13, (uint64_t)&async function pointer to partial apply for closure #1 in SelfReflectionCurareDonator.donateSelfReflectionResponse(selfReflectionResponse:requestId:rcId:), v16);
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for TaskPriority?);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v22, &demangling cache variable for type metadata for SelfReflectionStream?);
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.instrumentation);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v21 = 0;
      _os_log_impl(&dword_1B9C64000, v19, v20, "Failed to find SelfReflectionStream for SelfReflectionAgent.", v21, 2u);
      MEMORY[0x1BA9E48C0](v21, -1, -1);
    }
  }
}

uint64_t SelfReflectionCurareStream.streamId.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SelfReflectionCurareStream.__allocating_init(streamId:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t SelfReflectionCurareStream.init(streamId:)(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return v2;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SelfReflectionCurareStream.insert(jsonStr:interactionId:)(Swift::String jsonStr, Swift::String interactionId)
{
  object = interactionId._object;
  uint64_t countAndFlagsBits = interactionId._countAndFlagsBits;
  uint64_t v5 = jsonStr._object;
  uint64_t v6 = jsonStr._countAndFlagsBits;
  v19[1] = *(id *)MEMORY[0x1E4F143B8];
  id v7 = objc_allocWithZone(MEMORY[0x1E4F618B0]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v8 = (void *)MEMORY[0x1BA9E2DD0](v6, v5);
  swift_bridgeObjectRelease();
  id v9 = (void *)MEMORY[0x1BA9E2DD0](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(v7, sel_initWithJsonStr_interactionId_dataVersion_, v8, v9, 0);

  uint64_t v12 = *(void *)(v2 + 16);
  uint64_t v11 = *(void *)(v2 + 24);
  id v13 = objc_allocWithZone(MEMORY[0x1E4F618B8]);
  swift_bridgeObjectRetain();
  long long v14 = (void *)MEMORY[0x1BA9E2DD0](v12, v11);
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(v13, sel_initWithStreamId_, v14);

  if (!v15) {
    __break(1u);
  }
  v19[0] = 0;
  unsigned __int8 v16 = objc_msgSend(v15, sel_insert_error_, v10, v19);

  if (v16)
  {
    id v17 = v19[0];
  }
  else
  {
    id v18 = v19[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

uint64_t SelfReflectionCurareStream.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SelfReflectionCurareStream.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void protocol witness for SelfReflectionStream.insert(jsonStr:interactionId:) in conformance SelfReflectionCurareStream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t outlined init with copy of SelfReflectionStream?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SelfReflectionStream?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static SelfReflectionCurareDonator.instance.getter()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t SelfReflectionCurareDonator.__allocating_init(selfReflectionStream:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  outlined init with copy of SelfReflectionStream?(a1, v2 + 16);
  if (!*(void *)(a1 + 24))
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.instrumentation);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_1B9C64000, v4, v5, "Failed to create stream for SelfReflection - donations will be disabled.", v6, 2u);
      MEMORY[0x1BA9E48C0](v6, -1, -1);
    }
  }
  outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for SelfReflectionStream?);
  return v2;
}

uint64_t SelfReflectionCurareDonator.init(selfReflectionStream:)(uint64_t a1)
{
  uint64_t v2 = v1;
  outlined init with copy of SelfReflectionStream?(a1, v1 + 16);
  if (!*(void *)(a1 + 24))
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.instrumentation);
    os_log_type_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v7 = 0;
      _os_log_impl(&dword_1B9C64000, v5, v6, "Failed to create stream for SelfReflection - donations will be disabled.", v7, 2u);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }
  }
  outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for SelfReflectionStream?);
  return v2;
}

uint64_t closure #1 in SelfReflectionCurareDonator.donateSelfReflectionResponse(selfReflectionResponse:requestId:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[77] = v11;
  v8[76] = a8;
  v8[75] = a7;
  v8[74] = a6;
  v8[73] = a5;
  v8[72] = a4;
  type metadata accessor for String.Encoding();
  v8[78] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in SelfReflectionCurareDonator.donateSelfReflectionResponse(selfReflectionResponse:requestId:rcId:), 0, 0);
}

uint64_t closure #1 in SelfReflectionCurareDonator.donateSelfReflectionResponse(selfReflectionResponse:requestId:rcId:)()
{
  unint64_t v74 = v0;
  uint64_t v65 = (uint64_t)(v0 + 53);
  uint64_t v66 = (uint64_t)(v0 + 57);
  uint64_t v67 = (uint64_t)(v0 + 55);
  uint64_t v64 = (uint64_t)(v0 + 59);
  uint64_t v1 = (uint64_t)(v0 + 64);
  uint64_t v70 = (uint64_t)(v0 + 65);
  uint64_t v68 = (uint64_t)(v0 + 69);
  uint64_t v69 = (uint64_t)(v0 + 68);
  uint64_t v63 = (uint64_t)v0 + 434;
  uint64_t v55 = (uint64_t)v0 + 437;
  uint64_t v2 = (uint64_t)v0 + 438;
  uint64_t v3 = (uint64_t)v0 + 439;
  uint64_t v61 = (uint64_t)v0 + 433;
  uint64_t v62 = (uint64_t)v0 + 449;
  uint64_t v59 = (uint64_t)v0 + 435;
  uint64_t v60 = (uint64_t)v0 + 450;
  uint64_t v4 = (void *)v0[75];
  uint64_t v5 = v0[74];
  unint64_t v6 = v0[73];
  uint64_t v56 = (uint64_t)v0 + 452;
  uint64_t v54 = (uint64_t)v0 + 453;
  uint64_t v52 = (uint64_t)v0 + 436;
  uint64_t v53 = (uint64_t)v0 + 454;
  uint64_t v72 = v0[72];
  unint64_t v73 = v6;
  uint64_t v57 = (uint64_t)v0 + 455;
  uint64_t v58 = (uint64_t)v0 + 451;
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = 58;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = v5;
  v8._object = v4;
  String.append(_:)(v8);
  unint64_t v9 = v73;
  uint64_t v71 = v72;
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.instrumentation);
  swift_bridgeObjectRetain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    unint64_t v13 = v73;
    long long v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v72 = v15;
    *(_DWORD *)long long v14 = 136315138;
    swift_bridgeObjectRetain();
    v0[71] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v13, &v72);
    uint64_t v1 = (uint64_t)(v0 + 64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v11, v12, "Creating SelfReflectionResponse donation to Curare for interactionId: %s", v14, 0xCu);
    swift_arrayDestroy();
    uint64_t v16 = v15;
    uint64_t v2 = (uint64_t)v0 + 438;
    MEMORY[0x1BA9E48C0](v16, -1, -1);
    id v17 = v14;
    unint64_t v9 = v13;
    uint64_t v3 = (uint64_t)v0 + 439;
    MEMORY[0x1BA9E48C0](v17, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v18 = v0[76];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, AnyEncodable)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BA05AE60;
  *(void *)(inited + 32) = 0x6E6F697369636564;
  *(void *)(inited + 40) = 0xE800000000000000;
  outlined init with take of SelfReflectionAgentDecision(v18, v52);
  outlined init with take of SelfReflectionAgentDecision(v52, v3);
  uint64_t v20 = swift_allocObject();
  outlined init with take of SelfReflectionAgentDecision(v3, v20 + 16);
  *(void *)(inited + 48) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
  *(void *)(inited + 56) = v20;
  *(void *)(inited + 64) = 0x44746E6143736168;
  *(void *)(inited + 72) = 0xEF676F6C6169446FLL;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v18 + 2, v53, &demangling cache variable for type metadata for Bool?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v53, v2, &demangling cache variable for type metadata for Bool?);
  uint64_t v21 = swift_allocObject();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v2, v21 + 16, &demangling cache variable for type metadata for Bool?);
  *(void *)(inited + 80) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
  *(void *)(inited + 88) = v21;
  *(void *)(inited + 96) = 0xD000000000000017;
  *(void *)(inited + 104) = 0x80000001BA06D3B0;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v18 + 1, v54, &demangling cache variable for type metadata for Bool?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v54, v55, &demangling cache variable for type metadata for Bool?);
  uint64_t v22 = swift_allocObject();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v55, v22 + 16, &demangling cache variable for type metadata for Bool?);
  *(void *)(inited + 112) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
  *(void *)(inited + 120) = v22;
  *(void *)(inited + 128) = 0xD000000000000013;
  *(void *)(inited + 136) = 0x80000001BA06D3D0;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v18 + 3, v56, &demangling cache variable for type metadata for Bool?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v56, v57, &demangling cache variable for type metadata for Bool?);
  uint64_t v23 = swift_allocObject();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v57, v23 + 16, &demangling cache variable for type metadata for Bool?);
  *(void *)(inited + 144) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
  *(void *)(inited + 152) = v23;
  *(void *)(inited + 160) = 0xD000000000000012;
  *(void *)(inited + 168) = 0x80000001BA06D3F0;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v18 + 4, v58, &demangling cache variable for type metadata for Bool?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v58, v59, &demangling cache variable for type metadata for Bool?);
  uint64_t v24 = swift_allocObject();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v59, v24 + 16, &demangling cache variable for type metadata for Bool?);
  *(void *)(inited + 176) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
  *(void *)(inited + 184) = v24;
  strcpy((char *)(inited + 192), "isVoiceTrigger");
  *(unsigned char *)(inited + 207) = -18;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v18 + 5, v60, &demangling cache variable for type metadata for Bool?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v60, v61, &demangling cache variable for type metadata for Bool?);
  uint64_t v25 = swift_allocObject();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v61, v25 + 16, &demangling cache variable for type metadata for Bool?);
  *(void *)(inited + 208) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
  *(void *)(inited + 216) = v25;
  strcpy((char *)(inited + 224), "isSingleWord");
  *(unsigned char *)(inited + 237) = 0;
  *(_WORD *)(inited + 238) = -5120;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v18 + 33, v62, &demangling cache variable for type metadata for Bool?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v62, v63, &demangling cache variable for type metadata for Bool?);
  uint64_t v26 = swift_allocObject();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v63, v26 + 16, &demangling cache variable for type metadata for Bool?);
  *(void *)(inited + 240) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
  *(void *)(inited + 248) = v26;
  *(void *)(inited + 256) = 0xD000000000000012;
  *(void *)(inited + 264) = 0x80000001BA06D410;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v18 + 8, v64, &demangling cache variable for type metadata for Int?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v64, v65, &demangling cache variable for type metadata for Int?);
  uint64_t v27 = swift_allocObject();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v65, v27 + 16, &demangling cache variable for type metadata for Int?);
  *(void *)(inited + 272) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
  *(void *)(inited + 280) = v27;
  *(void *)(inited + 288) = 7499379;
  *(void *)(inited + 296) = 0xE300000000000000;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v18 + 24, v66, &demangling cache variable for type metadata for Double?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v66, v67, &demangling cache variable for type metadata for Double?);
  uint64_t v28 = swift_allocObject();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v67, v28 + 16, &demangling cache variable for type metadata for Double?);
  *(void *)(inited + 304) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
  *(void *)(inited + 312) = v28;
  strcpy((char *)(inited + 320), "catIdentifiers");
  *(unsigned char *)(inited + 335) = -18;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v18 + 40, v1, &demangling cache variable for type metadata for Set<String>?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v1, v68, &demangling cache variable for type metadata for Set<String>?);
  uint64_t v29 = swift_allocObject();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v68, v29 + 16, &demangling cache variable for type metadata for Set<String>?);
  *(void *)(inited + 336) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
  *(void *)(inited + 344) = v29;
  strcpy((char *)(inited + 352), "catCategories");
  *(_WORD *)(inited + 366) = -4864;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v18 + 48, v70, &demangling cache variable for type metadata for Set<String>?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v70, v69, &demangling cache variable for type metadata for Set<String>?);
  uint64_t v30 = swift_allocObject();
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v69, v30 + 16, &demangling cache variable for type metadata for Set<String>?);
  *(void *)(inited + 368) = implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)specialized partial apply;
  *(void *)(inited + 376) = v30;
  outlined retain of [String : Set<String>](v1);
  outlined retain of [String : Set<String>](v70);
  unint64_t v31 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  v0[67] = v31;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : AnyEncodable]);
  lazy protocol witness table accessor for type [String : AnyEncodable] and conformance <> [A : B]();
  uint64_t v36 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v38 = v37;
  swift_release();
  swift_bridgeObjectRelease();
  static String.Encoding.utf8.getter();
  uint64_t v39 = String.init(data:encoding:)();
  if (v40)
  {
    uint64_t v41 = v39;
    uint64_t v42 = v40;
    uint64_t v43 = (void *)v0[77];
    uint64_t v44 = v43[3];
    uint64_t v45 = v43[4];
    __swift_project_boxed_opaque_existential_1(v43, v44);
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v45 + 8))(v41, v42, v71, v9, v44, v45);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v32 = Logger.logObject.getter();
    uint64_t v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, (os_log_type_t)v46))
    {
      unint64_t v48 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      uint64_t v72 = v49;
      *(_DWORD *)unint64_t v48 = 136315138;
      swift_bridgeObjectRetain();
      v0[70] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v9, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v32, (os_log_type_t)v46, "Donated SelfReflectionResponse to Curare for interactionId:%s", v48, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v49, -1, -1);
      MEMORY[0x1BA9E48C0](v48, -1, -1);
      outlined consume of Data._Representation(v36, v38);
      goto LABEL_16;
    }
    outlined consume of Data._Representation(v36, v38);
  }
  else
  {
    outlined consume of Data._Representation(v36, v38);
    swift_bridgeObjectRetain();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      uint64_t v72 = v35;
      *(_DWORD *)uint64_t v34 = 136315138;
      swift_bridgeObjectRetain();
      v0[61] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v9, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v32, v33, "Failed to convert SelfReflectionResponse donation to JSON for interactionId:%s", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v35, -1, -1);
      MEMORY[0x1BA9E48C0](v34, -1, -1);
      goto LABEL_16;
    }
  }
  swift_bridgeObjectRelease_n();
LABEL_16:

  swift_task_dealloc();
  uint64_t v50 = (uint64_t (*)(void))v0[1];
  return v50();
}

uint64_t SelfReflectionCurareDonator.deinit()
{
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for SelfReflectionStream?);
  return v0;
}

uint64_t SelfReflectionCurareDonator.__deallocating_deinit()
{
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for SelfReflectionStream?);

  return swift_deallocClassInstance();
}

uint64_t sub_1B9FD1220()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 120);

  return MEMORY[0x1F4186498](v0, 160, 7);
}

uint64_t partial apply for closure #1 in SelfReflectionCurareDonator.donateSelfReflectionResponse(selfReflectionResponse:requestId:rcId:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in SelfReflectionCurareDonator.donateSelfReflectionResponse(selfReflectionResponse:requestId:rcId:)(a1, v4, v5, v6, v7, v8, v9, (uint64_t)(v1 + 8));
}

uint64_t outlined retain of SelfReflectionResponse(uint64_t a1)
{
  return a1;
}

uint64_t specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)()
{
  return Optional<A>.encode(to:)();
}

uint64_t specialized SelfReflectionCurareDonator.__allocating_init()()
{
  uint64_t v0 = self;
  if (objc_msgSend(v0, sel_isSupportedUser) && objc_msgSend(v0, sel_isSupportedPlatform))
  {
    uint64_t v1 = type metadata accessor for SelfReflectionCurareStream();
    uint64_t v2 = swift_allocObject();
    *(void *)(v2 + 16) = 0xD000000000000016;
    *(void *)(v2 + 24) = 0x80000001BA06D390;
    *((void *)&v13 + 1) = v1;
    long long v14 = &protocol witness table for SelfReflectionCurareStream;
    *(void *)&long long v12 = v2;
    type metadata accessor for SelfReflectionCurareDonator();
    uint64_t v3 = swift_allocObject();
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)&v12, v3 + 16, &demangling cache variable for type metadata for SelfReflectionStream?);
  }
  else
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.instrumentation);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1B9C64000, v5, v6, "Unsupported User/Platform for feature store - donations will be disabled.", v7, 2u);
      MEMORY[0x1BA9E48C0](v7, -1, -1);
    }

    type metadata accessor for SelfReflectionCurareDonator();
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0;
    uint64_t v3 = swift_allocObject();
    outlined init with copy of SelfReflectionStream?((uint64_t)&v12, v3 + 16);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_1B9C64000, v8, v9, "Failed to create stream for SelfReflection - donations will be disabled.", v10, 2u);
      MEMORY[0x1BA9E48C0](v10, -1, -1);
    }

    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v12, &demangling cache variable for type metadata for SelfReflectionStream?);
  }
  return v3;
}

uint64_t dispatch thunk of SelfReflectionStream.insert(jsonStr:interactionId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t type metadata accessor for SelfReflectionCurareStream()
{
  return self;
}

uint64_t method lookup function for SelfReflectionCurareStream(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SelfReflectionCurareStream);
}

uint64_t dispatch thunk of SelfReflectionCurareStream.__allocating_init(streamId:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t type metadata accessor for SelfReflectionCurareDonator()
{
  return self;
}

uint64_t method lookup function for SelfReflectionCurareDonator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SelfReflectionCurareDonator);
}

uint64_t dispatch thunk of SelfReflectionCurareDonator.__allocating_init(selfReflectionStream:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t outlined init with take of SelfReflectionAgentDecision(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1B9FD175C()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)(void *a1)
{
  return SelfReflectionAgentDecision.encode(to:)(a1);
}

uint64_t sub_1B9FD1798()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

uint64_t sub_1B9FD17C0()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

uint64_t sub_1B9FD17D0()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

uint64_t sub_1B9FD17E0()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

uint64_t sub_1B9FD17F0()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

uint64_t sub_1B9FD1800()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

uint64_t sub_1B9FD186C()
{
  return MEMORY[0x1F4186498](v0, 25, 7);
}

uint64_t sub_1B9FD18A4()
{
  return MEMORY[0x1F4186498](v0, 25, 7);
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)(uint64_t a1, uint64_t *a2)
{
  return Optional<A>.encode(to:)();
}

uint64_t sub_1B9FD1944()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

unint64_t lazy protocol witness table accessor for type Set<String> and conformance <> Set<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>;
  if (!lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<String>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Set<String> and conformance <> Set<A>);
  }
  return result;
}

uint64_t implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)specialized partial apply()
{
  return partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)();
}

uint64_t static SelfReflectionUserDefaults.fallbackToMighty.getter()
{
  swift_beginAccess();
  uint64_t v0 = static SelfReflectionUserDefaults._fallbackToMighty;
  uint64_t v1 = off_1E9F30E28;
  char v2 = byte_1E9F30E30;
  swift_bridgeObjectRetain();
  char v3 = specialized SelfReflectionUserDefaultsProperty.wrappedValue.getter(v0, (unint64_t)v1, v2);
  swift_bridgeObjectRelease();
  return v3 & 1;
}

void *SelfReflectionUserDefaults.selfReflectionUserDefaultsSuiteName.unsafeMutableAddressor()
{
  return &static SelfReflectionUserDefaults.selfReflectionUserDefaultsSuiteName;
}

unint64_t static SelfReflectionUserDefaults.selfReflectionUserDefaultsSuiteName.getter()
{
  return 0xD00000000000001DLL;
}

void one-time initialization function for selfReflectionUserDefaults()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1CB18]);
  uint64_t v1 = (void *)MEMORY[0x1BA9E2DD0](0xD00000000000001DLL, 0x80000001BA06D430);
  id v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  static SelfReflectionUserDefaults.selfReflectionUserDefaults = (uint64_t)v2;
}

uint64_t *SelfReflectionUserDefaults.selfReflectionUserDefaults.unsafeMutableAddressor()
{
  if (one-time initialization token for selfReflectionUserDefaults != -1) {
    swift_once();
  }
  return &static SelfReflectionUserDefaults.selfReflectionUserDefaults;
}

uint64_t static SelfReflectionUserDefaults.selfReflectionUserDefaults.getter()
{
  if (one-time initialization token for selfReflectionUserDefaults != -1) {
    swift_once();
  }
  uint64_t v0 = static SelfReflectionUserDefaults.selfReflectionUserDefaults;
  id v1 = (id)static SelfReflectionUserDefaults.selfReflectionUserDefaults;
  return v0;
}

uint64_t specialized SelfReflectionUserDefaultsProperty.wrappedValue.getter(uint64_t a1, unint64_t a2, char a3)
{
  if (one-time initialization token for selfReflectionUserDefaults != -1) {
    swift_once();
  }
  if (static SelfReflectionUserDefaults.selfReflectionUserDefaults)
  {
    id v6 = (id)static SelfReflectionUserDefaults.selfReflectionUserDefaults;
    uint64_t v7 = (void *)MEMORY[0x1BA9E2DD0](a1, a2);
    id v8 = objc_msgSend(v6, sel_objectForKey_, v7);

    if (v8)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v23, 0, sizeof(v23));
    }
    outlined init with take of Any?((uint64_t)v23, (uint64_t)v24);
    outlined init with copy of Any?((uint64_t)v24, (uint64_t)v23);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
    if (swift_dynamicCast())
    {

      outlined destroy of Any?((uint64_t)v24);
      a3 = v22 & 1;
    }
    else
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
      swift_bridgeObjectRetain_n();
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc();
        uint64_t v18 = swift_slowAlloc();
        *(void *)&v23[0] = v18;
        *(_DWORD *)uint64_t v17 = 136315394;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v17 + 12) = 2080;
        uint64_t v19 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, (uint64_t *)v23);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v15, v16, "%s value not set, returning default: %s", (uint8_t *)v17, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v18, -1, -1);
        MEMORY[0x1BA9E48C0](v17, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      outlined destroy of Any?((uint64_t)v24);
    }
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.conversationBridge);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      long long v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      v24[0] = v13;
      *(_DWORD *)long long v12 = 136315138;
      *(void *)&v23[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x80000001BA06D430, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v10, v11, "%s user defaults domain does not exist.", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v13, -1, -1);
      MEMORY[0x1BA9E48C0](v12, -1, -1);
    }
    else
    {
    }
  }
  return a3 & 1;
}

uint64_t SelfReflectionUserDefaultsProperty.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = v7;
  uint64_t v65 = *(void *)(v7 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  long long v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (uint64_t *)((char *)&v57 - v13);
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v57 - v17;
  if (one-time initialization token for selfReflectionUserDefaults != -1) {
    swift_once();
  }
  if (static SelfReflectionUserDefaults.selfReflectionUserDefaults)
  {
    uint64_t v62 = v9;
    uint64_t v66 = a2;
    uint64_t v19 = v3;
    uint64_t v20 = *v3;
    uint64_t v64 = v19;
    uint64_t v21 = v19[1];
    id v22 = (id)static SelfReflectionUserDefaults.selfReflectionUserDefaults;
    uint64_t v23 = (void *)MEMORY[0x1BA9E2DD0](v20, v21);
    id v63 = v22;
    id v24 = objc_msgSend(v22, sel_objectForKey_, v23);

    if (v24)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v69, 0, sizeof(v69));
    }
    uint64_t v33 = v66;
    outlined init with take of Any?((uint64_t)v69, (uint64_t)v70);
    outlined init with copy of Any?((uint64_t)v70, (uint64_t)v69);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
    int v34 = swift_dynamicCast();
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    if (v34)
    {
      v35(v18, 0, 1, v5);

      outlined destroy of Any?((uint64_t)v70);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(v33, v18, v5);
    }
    else
    {
      uint64_t v36 = v12;
      v35(v18, 1, 1, v5);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      __swift_project_value_buffer(v37, (uint64_t)static Logger.conversationBridge);
      uint64_t v39 = v64;
      uint64_t v38 = v65;
      uint64_t v40 = *(void (**)(uint64_t *, void *, uint64_t))(v65 + 16);
      uint64_t v41 = v67;
      v40(v14, v64, v67);
      v40((uint64_t *)v36, v39, v41);
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.debug.getter();
      int v44 = v43;
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v45 = swift_slowAlloc();
        uint64_t v61 = swift_slowAlloc();
        *(void *)&v69[0] = v61;
        *(_DWORD *)uint64_t v45 = 136315394;
        uint64_t v58 = v36;
        int v60 = v44;
        uint64_t v46 = *v14;
        unint64_t v47 = v14[1];
        swift_bridgeObjectRetain();
        uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, (uint64_t *)v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        os_log_t v59 = v42;
        unint64_t v48 = *(void (**)(uint64_t *, uint64_t))(v38 + 8);
        v48(v14, v41);
        *(_WORD *)(v45 + 12) = 2080;
        uint64_t v57 = v45 + 14;
        uint64_t v49 = v58;
        uint64_t v50 = &v58[*(int *)(v41 + 28)];
        uint64_t v65 = *(void *)(v6 + 16);
        ((void (*)(char *, char *, uint64_t))v65)(v62, v50, v5);
        uint64_t v51 = String.init<A>(describing:)();
        uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, (uint64_t *)v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v53 = v66;
        swift_bridgeObjectRelease();
        v48((uint64_t *)v49, v41);
        os_log_t v54 = v59;
        _os_log_impl(&dword_1B9C64000, v59, (os_log_type_t)v60, "%s value not set, returning default: %s", (uint8_t *)v45, 0x16u);
        uint64_t v55 = v61;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v55, -1, -1);
        MEMORY[0x1BA9E48C0](v45, -1, -1);

        outlined destroy of Any?((uint64_t)v70);
        return ((uint64_t (*)(uint64_t, char *, uint64_t))v65)(v53, (char *)v64 + *(int *)(v41 + 28), v5);
      }
      else
      {

        uint64_t v56 = *(void (**)(char *, uint64_t))(v38 + 8);
        v56(v36, v41);
        v56((char *)v14, v41);
        outlined destroy of Any?((uint64_t)v70);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 16))(v66, (char *)v64 + *(int *)(v41 + 28), v5);
      }
    }
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationBridge);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = v3;
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      v70[0] = v30;
      *(_DWORD *)uint64_t v29 = 136315138;
      *(void *)&v69[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x80000001BA06D430, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v26, v27, "%s user defaults domain does not exist.", v29, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v30, -1, -1);
      unint64_t v31 = v29;
      char v3 = v28;
      MEMORY[0x1BA9E48C0](v31, -1, -1);
    }

    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 16))(a2, (char *)v3 + *(int *)(v67 + 28), v5);
  }
}

uint64_t static SelfReflectionUserDefaults.fallbackToMighty.setter(char a1)
{
  return swift_endAccess();
}

void specialized SelfReflectionUserDefaultsProperty.wrappedValue.setter(char a1)
{
  if (one-time initialization token for selfReflectionUserDefaults != -1) {
    swift_once();
  }
  if (static SelfReflectionUserDefaults.selfReflectionUserDefaults)
  {
    LOBYTE(v11) = a1 & 1;
    id v3 = (id)static SelfReflectionUserDefaults.selfReflectionUserDefaults;
    uint64_t v4 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    uint64_t v5 = (void *)MEMORY[0x1BA9E2DD0](*v1, v1[1]);
    objc_msgSend(v3, sel_setObject_forKey_, v4, v5);

    swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
    oslog = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v11 = v9;
      *(_DWORD *)uint64_t v8 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x80000001BA06D430, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, oslog, v7, "%s user defaults domain does not exist.", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v9, -1, -1);
      MEMORY[0x1BA9E48C0](v8, -1, -1);
    }
    else
    {
    }
  }
}

uint64_t SelfReflectionUserDefaultsProperty.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  if (one-time initialization token for selfReflectionUserDefaults != -1) {
    swift_once();
  }
  if (static SelfReflectionUserDefaults.selfReflectionUserDefaults)
  {
    uint64_t v5 = *(void *)(a2 + 16);
    id v6 = (id)static SelfReflectionUserDefaults.selfReflectionUserDefaults;
    uint64_t v7 = _bridgeAnythingToObjectiveC<A>(_:)();
    uint64_t v8 = (void *)MEMORY[0x1BA9E2DD0](*v2, v2[1]);
    objc_msgSend(v6, sel_setObject_forKey_, v7, v8);

    swift_unknownObjectRelease();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    uint64_t v10 = a1;
    uint64_t v11 = v5;
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.conversationBridge);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      uint64_t v18 = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001DLL, 0x80000001BA06D430, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v13, v14, "%s user defaults domain does not exist.", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v16, -1, -1);
      MEMORY[0x1BA9E48C0](v15, -1, -1);

      return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(a1);
    }

    uint64_t v11 = *(void *)(a2 + 16);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
    uint64_t v10 = a1;
  }

  return v9(v10, v11);
}

uint64_t (*static SelfReflectionUserDefaults.fallbackToMighty.modify(uint64_t a1))(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = specialized SelfReflectionUserDefaultsProperty.wrappedValue.getter(static SelfReflectionUserDefaults._fallbackToMighty, (unint64_t)off_1E9F30E28, byte_1E9F30E30) & 1;
  return static SelfReflectionUserDefaults.fallbackToMighty.modify;
}

uint64_t static SelfReflectionUserDefaults.fallbackToMighty.modify(uint64_t a1)
{
  specialized SelfReflectionUserDefaultsProperty.wrappedValue.setter(*(unsigned char *)(a1 + 24));

  return swift_endAccess();
}

uint64_t SelfReflectionUserDefaultsProperty.init(key:default:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  uint64_t v7 = (char *)a5 + *(int *)(type metadata accessor for SelfReflectionUserDefaultsProperty() + 28);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32);

  return v8(v7, a3, a4);
}

uint64_t SelfReflectionUserDefaults.deinit()
{
  swift_defaultActor_destroy();
  return v0;
}

uint64_t SelfReflectionUserDefaults.__deallocating_deinit()
{
  swift_defaultActor_destroy();

  return MEMORY[0x1F4188210](v0);
}

uint64_t SelfReflectionUserDefaults.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  return v0;
}

uint64_t SelfReflectionUserDefaults.init()()
{
  swift_defaultActor_initialize();
  return v0;
}

uint64_t SelfReflectionUserDefaults.unownedExecutor.getter()
{
  return v0;
}

uint64_t key path setter for SelfReflectionUserDefaultsProperty.wrappedValue : <A>SelfReflectionUserDefaultsProperty<A>(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  id v2 = (char *)&v6 - v1;
  (*(void (**)(char *))(v3 + 16))((char *)&v6 - v1);
  uint64_t v4 = type metadata accessor for SelfReflectionUserDefaultsProperty();
  return SelfReflectionUserDefaultsProperty.wrappedValue.setter((uint64_t)v2, v4);
}

void (*SelfReflectionUserDefaultsProperty.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  void *v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5] = v9;
  SelfReflectionUserDefaultsProperty.wrappedValue.getter(a2, (uint64_t)v9);
  return SelfReflectionUserDefaultsProperty.wrappedValue.modify;
}

void SelfReflectionUserDefaultsProperty.wrappedValue.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void *)(*a1)[4];
  uint64_t v4 = (void *)(*a1)[5];
  if (a2)
  {
    uint64_t v5 = v2[2];
    uint64_t v6 = v2[3];
    uint64_t v7 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    SelfReflectionUserDefaultsProperty.wrappedValue.setter((uint64_t)v3, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    SelfReflectionUserDefaultsProperty.wrappedValue.setter((*a1)[5], *v2);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t type metadata accessor for SelfReflectionUserDefaultsProperty()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1B9FD317C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SelfReflectionUserDefaultsProperty();
  return SelfReflectionUserDefaultsProperty.wrappedValue.getter(v2, a1);
}

uint64_t sub_1B9FD31BC()
{
  return 8;
}

void *sub_1B9FD31C8(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata accessor for SelfReflectionUserDefaults()
{
  return self;
}

uint64_t method lookup function for SelfReflectionUserDefaults(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SelfReflectionUserDefaults);
}

uint64_t dispatch thunk of SelfReflectionUserDefaults.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t type metadata completion function for SelfReflectionUserDefaultsProperty()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SelfReflectionUserDefaultsProperty(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 16) & ~v6);
      }
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for SelfReflectionUserDefaultsProperty(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x1B9FD36C0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 16] & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

id ServerBoundContextUpdateContainer.__allocating_init(contextUpdate:)(uint64_t a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  *(void *)&v3[OBJC_IVAR____TtC14SiriKitRuntime33ServerBoundContextUpdateContainer_contextUpdate] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, sel_init);
}

id ServerBoundContextUpdateContainer.__allocating_init(serializedBackingStore:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return ServerBoundContextUpdateContainer.init(serializedBackingStore:)(a1);
}

void *ServerBoundContextUpdateContainer.supportsSecureCoding.unsafeMutableAddressor()
{
  return &static ServerBoundContextUpdateContainer.supportsSecureCoding;
}

uint64_t static ServerBoundContextUpdateContainer.supportsSecureCoding.getter()
{
  return 1;
}

void *ServerBoundContextUpdateContainer.contextUpdate.getter()
{
  unint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime33ServerBoundContextUpdateContainer_contextUpdate);
  id v2 = v1;
  return v1;
}

id ServerBoundContextUpdateContainer.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return ServerBoundContextUpdateContainer.init(coder:)(a1);
}

id ServerBoundContextUpdateContainer.init(coder:)(void *a1)
{
  id v3 = v1;
  uint64_t v4 = (void *)MEMORY[0x1BA9E2DD0](0xD00000000000001ALL, 0x80000001BA060330);
  id v5 = objc_msgSend(a1, sel_decodeObjectForKey_, v4);

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v15, 0, sizeof(v15));
  }
  outlined init with take of Any?((uint64_t)v15, (uint64_t)v16);
  if (!v17)
  {
    outlined destroy of Any?((uint64_t)v16);
    uint64_t v6 = 0;
    goto LABEL_8;
  }
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SARDNativeFlowContextUpdate);
  if (swift_dynamicCast())
  {
    uint64_t v6 = v13;
LABEL_8:
    *(void *)&v3[OBJC_IVAR____TtC14SiriKitRuntime33ServerBoundContextUpdateContainer_contextUpdate] = v6;

    v14.receiver = v3;
    v14.super_class = (Class)type metadata accessor for ServerBoundContextUpdateContainer();
    id v7 = objc_msgSendSuper2(&v14, sel_init);

    return v7;
  }

  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    BOOL v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v11 = 0;
    _os_log_impl(&dword_1B9C64000, v9, v10, "Failed to decode the serverContextUpdateCommand", v11, 2u);
    MEMORY[0x1BA9E48C0](v11, -1, -1);
  }

  type metadata accessor for ServerBoundContextUpdateContainer();
  swift_deallocPartialClassInstance();
  return 0;
}

Swift::Void __swiftcall ServerBoundContextUpdateContainer.encode(with:)(NSCoder with)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime33ServerBoundContextUpdateContainer_contextUpdate);
  id v4 = (id)MEMORY[0x1BA9E2DD0](0xD00000000000001ALL, 0x80000001BA060330);
  [(objc_class *)with.super.isa encodeObject:v3 forKey:v4];
}

id ServerBoundContextUpdateContainer.init(contextUpdate:)(uint64_t a1)
{
  *(void *)&v1[OBJC_IVAR____TtC14SiriKitRuntime33ServerBoundContextUpdateContainer_contextUpdate] = a1;
  v3.receiver = v1;
  v3.super_class = (Class)type metadata accessor for ServerBoundContextUpdateContainer();
  return objc_msgSendSuper2(&v3, sel_init);
}

id ServerBoundContextUpdateContainer.init(serializedBackingStore:)(uint64_t a1)
{
  outlined init with copy of Any(a1, (uint64_t)v22);
  objc_super v3 = v1;
  if ((swift_dynamicCast() & 1) == 0)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.conversationBridge);
    id v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_1B9C64000, v7, v8, "The backing store for ServerBoundContextUpdateContainer is not of type Data", v9, 2u);
      MEMORY[0x1BA9E48C0](v9, -1, -1);
    }

    goto LABEL_8;
  }
  uint64_t v5 = (uint64_t)v20;
  unint64_t v4 = v21;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSKeyedUnarchiver);
  static NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(_:)();
  if (!v23)
  {
    outlined consume of Data._Representation((uint64_t)v20, v21);
    outlined destroy of Any?((uint64_t)v22);
LABEL_8:
    id v10 = 0;
    goto LABEL_9;
  }
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SARDNativeFlowContextUpdate);
  if ((swift_dynamicCast() & 1) == 0)
  {
    outlined consume of Data._Representation((uint64_t)v20, v21);
    goto LABEL_8;
  }
  id v10 = v20;
  uint64_t v13 = one-time initialization token for conversationBridge;
  id v14 = v20;
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.conversationBridge);
  unsigned int v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    unint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v18 = 0;
    _os_log_impl(&dword_1B9C64000, v16, v17, "Decoded the ServerBoundContextUpdateContainer", v18, 2u);
    MEMORY[0x1BA9E48C0](v18, -1, -1);
    outlined consume of Data._Representation(v5, v4);
  }
  else
  {
    outlined consume of Data._Representation((uint64_t)v20, v21);
  }
LABEL_9:
  *(void *)&v3[OBJC_IVAR____TtC14SiriKitRuntime33ServerBoundContextUpdateContainer_contextUpdate] = v10;

  v19.receiver = v3;
  v19.super_class = (Class)type metadata accessor for ServerBoundContextUpdateContainer();
  id v11 = objc_msgSendSuper2(&v19, sel_init);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v11;
}

uint64_t type metadata accessor for ServerBoundContextUpdateContainer()
{
  return self;
}

void ServerBoundContextUpdateContainer.serializedBackingStore()(uint64_t *a1@<X8>)
{
  v21[1] = *(id *)MEMORY[0x1E4F143B8];
  objc_super v3 = *(void **)(v1 + OBJC_IVAR____TtC14SiriKitRuntime33ServerBoundContextUpdateContainer_contextUpdate);
  if (v3)
  {
    unint64_t v4 = self;
    v21[0] = 0;
    id v5 = v3;
    id v6 = objc_msgSend(v4, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v5, 1, v21);
    id v7 = v21[0];
    if (v6)
    {
      uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v10 = v9;
    }
    else
    {
      uint64_t v15 = v7;
      unsigned int v16 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Logger.conversationBridge);
      unint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        id v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v20 = 0;
        _os_log_impl(&dword_1B9C64000, v18, v19, "Failed to encode the server context update", v20, 2u);
        MEMORY[0x1BA9E48C0](v20, -1, -1);
      }

      uint64_t v8 = 0;
      unint64_t v10 = 0xC000000000000000;
    }
    a1[3] = MEMORY[0x1E4F277C0];
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
    unsigned int v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      id v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v14 = 0;
      _os_log_impl(&dword_1B9C64000, v12, v13, "SARDNativeFlowContextUpdate command is nil at the time of encoding", v14, 2u);
      MEMORY[0x1BA9E48C0](v14, -1, -1);
    }

    uint64_t v8 = 0;
    a1[3] = MEMORY[0x1E4F277C0];
    unint64_t v10 = 0xC000000000000000;
  }
  *a1 = v8;
  a1[1] = v10;
}

id ServerBoundContextUpdateContainer.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void ServerBoundContextUpdateContainer.init()()
{
}

id ServerBoundContextUpdateContainer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ServerBoundContextUpdateContainer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for ServerBoundContextUpdateContainer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ServerBoundContextUpdateContainer);
}

uint64_t dispatch thunk of ServerBoundContextUpdateContainer.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of ServerBoundContextUpdateContainer.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ServerBoundContextUpdateContainer.__allocating_init(contextUpdate:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of ServerBoundContextUpdateContainer.__allocating_init(serializedBackingStore:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of ServerBoundContextUpdateContainer.serializedBackingStore()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1F4188790](v3 - 8);
  id v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  os_log_type_t v27 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v25 = (char *)v22 - v10;
  uint64_t v11 = *(void *)(a1 + 16);
  if (!v11) {
    return MEMORY[0x1E4FBC860];
  }
  v22[1] = v1;
  uint64_t v12 = *(void *)(type metadata accessor for Siri_Nlu_External_UserParse() - 8);
  uint64_t v13 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  id v14 = (unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v24 = v7;
  uint64_t v15 = (void (**)(char *, char *, uint64_t))(v7 + 32);
  uint64_t v26 = *(void *)(v12 + 72);
  v22[0] = a1;
  swift_bridgeObjectRetain();
  unint64_t v16 = MEMORY[0x1E4FBC860];
  uint64_t v23 = v14;
  do
  {
    swift_getKeyPath();
    swift_getAtKeyPath();
    swift_release();
    if ((*v14)(v5, 1, v6) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    }
    else
    {
      uint64_t v17 = *v15;
      unint64_t v18 = v25;
      (*v15)(v25, v5, v6);
      v17(v27, v18, v6);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1, v16);
      }
      unint64_t v20 = *(void *)(v16 + 16);
      unint64_t v19 = *(void *)(v16 + 24);
      if (v20 >= v19 >> 1) {
        unint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1, v16);
      }
      *(void *)(v16 + 16) = v20 + 1;
      v17((char *)(v16+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(void *)(v24 + 72) * v20), v27, v6);
      id v14 = v23;
    }
    v13 += v26;
    --v11;
  }
  while (v11);
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t ServerFallbackCapableRequestProcessor.__allocating_init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  return ServerFallbackCapableRequestProcessor.__allocating_init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, char, uint64_t, uint64_t, uint64_t))specialized ServerFallbackCapableRequestProcessor.__allocating_init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:));
}

void *ServerFallbackCapableRequestProcessor.nlv3ExternalParserId.unsafeMutableAddressor()
{
  return &static ServerFallbackCapableRequestProcessor.nlv3ExternalParserId;
}

unint64_t static ServerFallbackCapableRequestProcessor.nlv3ExternalParserId.getter()
{
  return 0xD000000000000013;
}

uint64_t one-time initialization function for rraasWaitTimeMillis()
{
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();
  __swift_allocate_value_buffer(v0, static ServerFallbackCapableRequestProcessor.rraasWaitTimeMillis);
  *(void *)__swift_project_value_buffer(v0, (uint64_t)static ServerFallbackCapableRequestProcessor.rraasWaitTimeMillis) = 1000;
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(v0 - 8) + 104);

  return v1();
}

uint64_t (*ServerFallbackCapableRequestProcessor.requestHandledOnServer.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*ServerFallbackCapableRequestProcessor.runSiriKitExecutorProcessor.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*ServerFallbackCapableRequestProcessor.isUserOnActivePhoneCall.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t ServerFallbackCapableRequestProcessor.gatedExecuteNLOnServer.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ServerFallbackCapableRequestProcessor.gatedExecuteNLOnServer.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_gatedExecuteNLOnServer);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*ServerFallbackCapableRequestProcessor.gatedExecuteNLOnServer.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t closure #1 in ServerFallbackCapableRequestProcessor.handleAceFlowOutputCandidate(_:executionContextInfo:reply:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *MEMORY[0x1E4FA2328];
  uint64_t v12 = type metadata accessor for MessageSource();
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 104))(v10, v11, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  MUXFlowOutputCandidateMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  MUXFlowOutputCandidateMessage.Builder.assistantId.setter();
  uint64_t v14 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v7, v14, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v7, 0, 1, v15);
  MUXFlowOutputCandidateMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  MUXFlowOutputCandidateMessage.Builder.requestId.setter();
  id v17 = objc_msgSend(a3, sel_resultCandidateId);
  if (v17)
  {
    unint64_t v18 = v17;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return MUXFlowOutputCandidateMessage.Builder.resultCandidateId.setter();
}

void ServerFallbackCapableRequestProcessor.handleAceRunSiriKitExecutor(_:executionContextInfo:plannerInvocationId:reply:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void (*v96)(void *__return_ptr, void);
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t);
  uint64_t v113;
  void *v114;
  uint64_t v115;
  void *v116;
  char v117;
  uint64_t v118;
  void (*v119)(uint64_t, void *, uint64_t);
  id v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  void (*v136)(char *, uint64_t, uint64_t);
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t (**v141)(void, void, void);
  uint64_t v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  void v164[5];
  void v165[4];
  unsigned char v166[40];
  void v167[5];
  uint64_t v168[5];

  uint64_t v7 = v6;
  unint64_t v150 = a5;
  unint64_t v151 = a6;
  uint64_t v148 = a4;
  uint64_t v149 = a3;
  v147 = a2;
  uint64_t v159 = *v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v128 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v146 = type metadata accessor for ConversationSessionKey();
  int64_t v144 = *(void *)(v146 - 8);
  MEMORY[0x1F4188790](v146);
  unint64_t v143 = (char *)&v128 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v13 - 8);
  unint64_t v156 = (uint64_t)&v128 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for SelectedUserAttributes();
  v141 = *(uint64_t (***)(void, void, void))(v15 - 8);
  unint64_t v142 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v138 = (char *)&v128 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SelectedUserAttributes?);
  MEMORY[0x1F4188790](v17 - 8);
  unint64_t v19 = (char *)&v128 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for UserID();
  v152 = *(id *)(v20 - 8);
  uint64_t v153 = v20;
  MEMORY[0x1F4188790](v20);
  unint64_t v139 = (char *)&v128 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  uint64_t v23 = MEMORY[0x1F4188790](v22 - 8);
  uint64_t v25 = (char *)&v128 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  int64_t v155 = (uint64_t)&v128 - v26;
  unint64_t v160 = type metadata accessor for RequestType();
  unint64_t v163 = *(void *)(v160 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v160);
  Swift::String v154 = (char *)&v128 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  v162 = (uint64_t)&v128 - v30;
  MEMORY[0x1F4188790](v29);
  uint64_t v161 = (char *)&v128 - v31;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  uint64_t v33 = __swift_project_value_buffer(v32, (uint64_t)static Logger.conversationBridge);
  id v34 = a1;
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  BOOL v37 = os_log_type_enabled(v35, v36);
  int64_t v157 = v11;
  unint64_t v145 = v25;
  uint64_t v140 = (uint64_t)v19;
  if (v37)
  {
    uint64_t v38 = swift_slowAlloc();
    uint64_t v137 = swift_slowAlloc();
    v168[0] = v137;
    *(_DWORD *)uint64_t v38 = 136315394;
    uint64_t v158 = v33;
    id v39 = objc_msgSend(v34, sel_debugDescription);
    uint64_t v40 = v7;
    id v41 = v34;
    uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v44 = v43;

    uint64_t v45 = v42;
    id v34 = v41;
    uint64_t v7 = v40;
    v167[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v44, v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 12) = 2080;
    uint64_t v46 = _typeName(_:qualified:)();
    v167[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v35, v36, "Handling %s in %s", (uint8_t *)v38, 0x16u);
    uint64_t v48 = v137;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v48, -1, -1);
    MEMORY[0x1BA9E48C0](v38, -1, -1);
  }
  else
  {
  }
  uint64_t v49 = (*(uint64_t (**)(void))(*v7 + 592))();
  uint64_t v50 = v160;
  if (v49)
  {
    uint64_t v51 = v49;
    uint64_t v137 = (uint64_t)v34;
    unint64_t v52 = (void *)(v49 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    uint64_t v53 = 0;
    if (*v52 >> 62 == 1) {
      uint64_t v53 = swift_retain();
    }
    uint64_t v158 = v53;
    uint64_t v54 = v51 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
    swift_beginAccess();
    uint64_t v55 = v163;
    uint64_t v136 = *(void (**)(char *, uint64_t, uint64_t))(v163 + 16);
    v136(v161, v54, v50);
    (*(void (**)(uint64_t, void, uint64_t))(v55 + 104))(v162, *MEMORY[0x1E4FA2438], v50);
    _s16SiriMessageTypes11RequestTypeOACSYAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, MEMORY[0x1E4FA2460]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v168[0] == v167[0] && v168[1] == v167[1])
    {
      swift_bridgeObjectRelease_n();
      int v56 = 0;
    }
    else
    {
      char v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v60) {
        int v56 = 0;
      }
      else {
        int v56 = 2;
      }
    }
    uint64_t v61 = *(void (**)(uint64_t, uint64_t))(v163 + 8);
    v61(v162, v50);
    uint64_t v62 = ((uint64_t (*)(char *, uint64_t))v61)(v161, v50);
    uint64_t v63 = (*(uint64_t (**)(uint64_t))(*v7 + 1456))(v62);
    if (v63)
    {
      uint64_t v64 = v63;
    }
    else
    {
      int64_t v135 = v56;
      uint64_t v65 = *(void *)((char *)v7
                      + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionOutputSubmitter);
      outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v7 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_executionClient, (uint64_t)v168);
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v7 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater, (uint64_t)v167, &demangling cache variable for type metadata for ContextUpdating?);
      uint64_t v66 = v7[13];
      BOOL v133 = v7[12];
      uint64_t v67 = *(void *)(v51 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8);
      Swift::String_optional v131 = *(void *)(v51 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId);
      uint64_t v68 = one-time initialization token for sharedInstance;
      char v134 = v65;
      swift_retain();
      uint64_t v132 = v66;
      swift_bridgeObjectRetain();
      Swift::String v130 = v67;
      swift_bridgeObjectRetain();
      if (v68 != -1) {
        swift_once();
      }
      v162 = static ConversationBridgeInstrumentationUtil.sharedInstance;
      unint64_t v163 = *(void *)((char *)v7
                       + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_requestDispatcherServiceHelper);
      uint64_t v69 = v158;
      uint64_t v70 = v160;
      if (v158)
      {
        uint64_t v71 = *(void *)(v158 + 16);
        id v128 = *(void *)(v158 + 24);
        v129 = v71;
        swift_bridgeObjectRetain();
      }
      else
      {
        id v128 = 0;
        v129 = 0;
      }
      uint64_t v72 = (void **)(v51 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo);
      swift_beginAccess();
      unint64_t v73 = (char *)*v72;
      v136(v154, v54, v70);
      uint64_t v161 = v73;
      if (v69)
      {
        uint64_t v75 = (void (**)(uint64_t, void, void))v152;
        uint64_t v74 = v153;
        os_log_t v76 = v139;
        (*((void (**)(char *, uint64_t, uint64_t))v152 + 2))(v139, v69 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId, v153);
        uint64_t v77 = v155;
        ((void (**)(uint64_t, char *, uint64_t))v75)[4](v155, v76, v74);
        uint64_t v78 = (char *)v75[7];
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v78)(v77, 0, 1, v74);
        v79 = *(void (**)(uint64_t))(*(void *)v69 + 760);
        uint64_t v80 = v73;
        swift_retain();
        swift_retain();
        uint64_t v81 = swift_unknownObjectRetain();
        uint64_t v82 = v140;
        v79(v81);
        swift_release();
        v84 = v141;
        uint64_t v83 = v142;
        int v85 = v141[6](v82, 1, v142);
        unint64_t v139 = v78;
        if (v85)
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v82, &demangling cache variable for type metadata for SelectedUserAttributes?);
          LODWORD(v140) = 0;
        }
        else
        {
          unint64_t v91 = v138;
          ((uint64_t (**)(char *, uint64_t, uint64_t))v84)[2](v138, v82, v83);
          outlined destroy of ReferenceResolutionClientProtocol?(v82, &demangling cache variable for type metadata for SelectedUserAttributes?);
          LODWORD(v140) = SelectedUserAttributes.meetsUserSessionThreshold.getter();
          ((void (*)(char *, uint64_t))v84[1])(v91, v83);
        }
      }
      else
      {
        uint64_t v86 = v152;
        uint64_t v87 = v153;
        uint64_t v88 = v155;
        (*((void (**)(uint64_t, uint64_t, uint64_t))v152 + 2))(v155, (uint64_t)v7 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionUserId, v153);
        uint64_t v89 = (char *)v86[7];
        swift_retain();
        swift_unknownObjectRetain();
        id v90 = v73;
        unint64_t v139 = v89;
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v89)(v88, 0, 1, v87);
        LODWORD(v140) = 0;
      }
      unint64_t v160 = v51;
      int v92 = (char *)v7 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
      uint64_t v93 = type metadata accessor for UUID();
      uint64_t v94 = *(void *)(v93 - 8);
      uint64_t v95 = v156;
      (*(void (**)(uint64_t, char *, uint64_t))(v94 + 16))(v156, v92, v93);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v94 + 56))(v95, 0, 1, v93);
      outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)(v7 + 3), (uint64_t)v166);
      LODWORD(v142) = *((unsigned __int8 *)v7
                      + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled);
      uint64_t v96 = *(void (**)(void *__return_ptr, void))(*v7 + 408);
      v141 = *(uint64_t (***)(void, void, void))((char *)v7
                                                               + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_muxContextMessage);
      v96(v164, v141);
      __swift_project_boxed_opaque_existential_1(v164, v164[3]);
      id v98 = v143;
      uint64_t v97 = v144;
      uint64_t v99 = v146;
      (*(void (**)(char *, void, uint64_t))(v144 + 104))(v143, *MEMORY[0x1E4FA2630], v146);
      dispatch thunk of ConversationSessionState.sharedValue(forKey:)();
      (*(void (**)(char *, uint64_t))(v97 + 8))(v98, v99);
      if (v165[3])
      {
        id v100 = (uint64_t)v145;
        int64_t v101 = v153;
        char v102 = swift_dynamicCast();
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v139)(v100, v102 ^ 1u, 1, v101);
        char v103 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v164);
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v164);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v165, (uint64_t *)&demangling cache variable for type metadata for Any?);
        id v100 = (uint64_t)v145;
        char v103 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v139)(v145, 1, 1, v153);
      }
      uint64_t v104 = (void *)v137;
      uint64_t v105 = (*(uint64_t (**)(uint64_t))(*v7 + 552))(v103);
      uint64_t v107 = v106;
      type metadata accessor for RunSiriKitExecutorProcessor();
      uint64_t v153 = swift_allocObject();
      uint64_t v108 = v148;
      swift_bridgeObjectRetain();
      unint64_t v109 = v104;
      os_log_type_t v111 = v150;
      Class v110 = v151;
      outlined copy of (@escaping @callee_guaranteed (@guaranteed SAAceCommand?, @guaranteed Error?) -> ())?(v150);
      v152 = v147;
      uint64_t v64 = specialized RunSiriKitExecutorProcessor.init(command:executionContextInfo:reply:executionOutputSubmitter:executionClient:contextUpdater:assistantId:source:requestId:instrumentationUtil:requestDispatcherServiceHelper:resultCandidateId:flowPluginInfo:requestType:userId:meetsUserSessionThreshold:sessionId:plannerInvocationId:messagePublisher:isMuxEnabled:muxContextMessage:previousUserId:userSessionState:)(v109, v152, v111, v110, v134, (uint64_t)v168, (uint64_t)v167, v133, v132, v135, v131, v130, v162, v163, v129, v128, v161, (uint64_t)v154, v155,
              v140 & 1,
              v156,
              v149,
              v108,
              (uint64_t)v166,
              v142,
              v141,
              v100,
              v105,
              v107);
      swift_release();
      swift_release();
      swift_unknownObjectRelease();

      _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe(v111);
      BOOL v112 = *(void (**)(uint64_t))(*v7 + 1464);
      BOOL v113 = swift_retain();
      v112(v113);
      uint64_t v51 = v160;
    }
    uint64_t v114 = (void *)(*(uint64_t (**)(void))(*(void *)v64 + 608))();
    uint64_t v115 = (*(uint64_t (**)(void))(*v7 + 384))();
    v118 = (uint64_t)v157;
    if (v117 == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v119 = *(void (**)(uint64_t, void *, uint64_t))(*v7 + 392);
      swift_retain();
      uint64_t v120 = v114;
      v119(v51, v114, 2);
    }
    else
    {
      outlined consume of ConversationRequestProcessor.State(v115, v116, v117);
    }
    int v121 = *(void *)((char *)v7 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_asyncWork);
    v122 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v122 - 8) + 56))(v118, 1, 1, v122);
    Swift::String v123 = one-time initialization token for shared;
    swift_retain();
    Swift::String_optional v124 = v114;
    swift_retain();
    swift_retain();
    if (v123 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t v125 = static MessageBusActor.shared;
    int v126 = _s16SiriMessageTypes11RequestTypeOACSYAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type MessageBusActor and conformance MessageBusActor, (void (*)(uint64_t))type metadata accessor for MessageBusActor);
    BOOL v127 = (void *)swift_allocObject();
    v127[2] = v125;
    v127[3] = v126;
    v127[4] = v51;
    v127[5] = v7;
    v127[6] = v64;
    v127[7] = v124;
    v127[8] = v159;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v118, (uint64_t)&async function pointer to partial apply for closure #1 in ServerFallbackCapableRequestProcessor.handleAceRunSiriKitExecutor(_:executionContextInfo:plannerInvocationId:reply:), (uint64_t)v127);
    (*(void (**)(void))(*(void *)v121 + 120))();
    swift_release();
    swift_release();

    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v57 = Logger.logObject.getter();
    os_log_type_t v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      os_log_t v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_t v59 = 0;
      _os_log_impl(&dword_1B9C64000, v57, v58, "Received RunSiriKitExecutor while not in a turn. Ignoring.", v59, 2u);
      MEMORY[0x1BA9E48C0](v59, -1, -1);
    }
  }
}

uint64_t closure #1 in ServerFallbackCapableRequestProcessor.handleAceRunSiriKitExecutor(_:executionContextInfo:plannerInvocationId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[26] = a6;
  v7[27] = a7;
  v7[24] = a4;
  v7[25] = a5;
  uint64_t v8 = type metadata accessor for RequestType();
  v7[28] = v8;
  v7[29] = *(void *)(v8 - 8);
  v7[30] = swift_task_alloc();
  v7[31] = swift_task_alloc();
  v7[32] = swift_task_alloc();
  v7[33] = swift_task_alloc();
  v7[34] = swift_task_alloc();
  v7[35] = swift_task_alloc();
  v7[36] = swift_task_alloc();
  v7[37] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v9 = static MessageBusActor.shared;
  v7[38] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](closure #1 in ServerFallbackCapableRequestProcessor.handleAceRunSiriKitExecutor(_:executionContextInfo:plannerInvocationId:reply:), v9, 0);
}

uint64_t closure #1 in ServerFallbackCapableRequestProcessor.handleAceRunSiriKitExecutor(_:executionContextInfo:plannerInvocationId:reply:)()
{
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 296);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 232);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v6 = OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  *(void *)(v0 + 312) = OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
  uint64_t v7 = v5 + v6;
  swift_beginAccess();
  uint64_t v8 = *(void (**)(void, uint64_t, void))(v4 + 16);
  *(void *)(v0 + 320) = v8;
  *(void *)(v0 + 328) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  uint64_t v47 = v7;
  uint64_t v46 = v8;
  v8(v2, v7, v3);
  *(_DWORD *)(v0 + 384) = *MEMORY[0x1E4FA2428];
  uint64_t v9 = *(void (**)(uint64_t))(v4 + 104);
  *(void *)(v0 + 336) = v9;
  *(void *)(v0 + 344) = (v4 + 104) & 0xFFFFFFFFFFFFLL | 0xB2E4000000000000;
  uint64_t v45 = v9;
  v9(v1);
  *(void *)(v0 + 352) = _s16SiriMessageTypes11RequestTypeOACSYAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RequestType and conformance RequestType, MEMORY[0x1E4FA2460]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (*(void *)(v0 + 64) == *(void *)(v0 + 80) && *(void *)(v0 + 72) == *(void *)(v0 + 88)) {
    char v49 = 1;
  }
  else {
    char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  uint64_t v11 = *(void *)(v0 + 288);
  uint64_t v10 = *(void *)(v0 + 296);
  uint64_t v13 = *(void *)(v0 + 224);
  uint64_t v12 = *(void *)(v0 + 232);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  *(void *)(v0 + 360) = v14;
  *(void *)(v0 + 368) = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v14(v11, v13);
  v14(v10, v13);
  if (v49)
  {
LABEL_10:
    if (one-time initialization token for rraasWaitTimeMillis != -1) {
      swift_once();
    }
    uint64_t v20 = *(void *)(v0 + 200);
    uint64_t v21 = type metadata accessor for DispatchTimeInterval();
    uint64_t v22 = __swift_project_value_buffer(v21, (uint64_t)static ServerFallbackCapableRequestProcessor.rraasWaitTimeMillis);
    uint64_t v48 = (uint64_t (*)(uint64_t))(*(void *)(*(void *)v20 + 1360) + **(int **)(*(void *)v20 + 1360));
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 376) = v23;
    void *v23 = v0;
    v23[1] = closure #1 in ServerFallbackCapableRequestProcessor.handleAceRunSiriKitExecutor(_:executionContextInfo:plannerInvocationId:reply:);
    return v48(v22);
  }
  uint64_t v15 = *(void *)(v0 + 272);
  v46(*(void *)(v0 + 280), v47, *(void *)(v0 + 224));
  unsigned int v50 = *MEMORY[0x1E4FA2450];
  v45(v15);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v17 = *(void *)(v0 + 272);
  uint64_t v16 = *(void *)(v0 + 280);
  uint64_t v18 = *(void *)(v0 + 224);
  if (*(void *)(v0 + 96) == *(void *)(v0 + 112) && *(void *)(v0 + 104) == *(void *)(v0 + 120))
  {
    swift_bridgeObjectRelease_n();
    v14(v17, v18);
    v14(v16, v18);
    goto LABEL_10;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14(v17, v18);
  v14(v16, v18);
  if (v19) {
    goto LABEL_10;
  }
  swift_release();
  uint64_t v25 = *(unsigned int *)(v0 + 384);
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 336);
  uint64_t v27 = *(void *)(v0 + 256);
  uint64_t v28 = *(void *)(v0 + 224);
  (*(void (**)(void, void, uint64_t))(v0 + 320))(*(void *)(v0 + 264), *(void *)(v0 + 192) + *(void *)(v0 + 312), v28);
  v26(v27, v25, v28);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (*(void *)(v0 + 128) == *(void *)(v0 + 144) && *(void *)(v0 + 136) == *(void *)(v0 + 152))
  {
    uint64_t v29 = (uint64_t *)(v0 + 264);
    uint64_t v30 = (uint64_t *)(v0 + 256);
    char v31 = 1;
  }
  else
  {
    os_log_type_t v36 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
    uint64_t v38 = *(void *)(v0 + 256);
    uint64_t v37 = *(void *)(v0 + 264);
    uint64_t v39 = *(void *)(v0 + 224);
    char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v36(v38, v39);
    v36(v37, v39);
    if (v40)
    {
      char v35 = 1;
      goto LABEL_21;
    }
    uint64_t v29 = (uint64_t *)(v0 + 248);
    uint64_t v42 = *(void (**)(uint64_t, void, uint64_t))(v0 + 336);
    uint64_t v30 = (uint64_t *)(v0 + 240);
    uint64_t v43 = *(void *)(v0 + 240);
    uint64_t v44 = *(void *)(v0 + 224);
    (*(void (**)(void, void, uint64_t))(v0 + 320))(*(void *)(v0 + 248), *(void *)(v0 + 192) + *(void *)(v0 + 312), v44);
    v42(v43, v50, v44);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (*(void *)(v0 + 160) == *(void *)(v0 + 176) && *(void *)(v0 + 168) == *(void *)(v0 + 184)) {
      char v31 = 1;
    }
    else {
      char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v32 = *v29;
  uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
  uint64_t v34 = *(void *)(v0 + 224);
  v33(*v30, v34);
  v33(v32, v34);
  char v35 = v31;
LABEL_21:
  (*(void (**)(void, void))(**(void **)(v0 + 208) + 488))(v35 & 1, *(void *)(v0 + 216));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v41 = *(uint64_t (**)(void))(v0 + 8);
  return v41();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 304);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in ServerFallbackCapableRequestProcessor.handleAceRunSiriKitExecutor(_:executionContextInfo:plannerInvocationId:reply:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  char v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  void (*v14)(uint64_t, void, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v22;

  swift_release();
  uint64_t v1 = *(unsigned int *)(v0 + 384);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 336);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 224);
  (*(void (**)(void, void, uint64_t))(v0 + 320))(*(void *)(v0 + 264), *(void *)(v0 + 192) + *(void *)(v0 + 312), v4);
  v2(v3, v1, v4);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (*(void *)(v0 + 128) == *(void *)(v0 + 144) && *(void *)(v0 + 136) == *(void *)(v0 + 152))
  {
    uint64_t v5 = (uint64_t *)(v0 + 264);
    uint64_t v6 = (uint64_t *)(v0 + 256);
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
    uint64_t v10 = *(void *)(v0 + 256);
    uint64_t v9 = *(void *)(v0 + 264);
    uint64_t v11 = *(void *)(v0 + 224);
    uint64_t v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8(v10, v11);
    v8(v9, v11);
    if (v12)
    {
      uint64_t v13 = 1;
      goto LABEL_11;
    }
    uint64_t v5 = (uint64_t *)(v0 + 248);
    uint64_t v14 = *(void (**)(uint64_t, void, uint64_t))(v0 + 336);
    uint64_t v6 = (uint64_t *)(v0 + 240);
    uint64_t v15 = *(void *)(v0 + 240);
    uint64_t v16 = *(void *)(v0 + 224);
    (*(void (**)(void, void, uint64_t))(v0 + 320))(*(void *)(v0 + 248), *(void *)(v0 + 192) + *(void *)(v0 + 312), v16);
    v14(v15, *MEMORY[0x1E4FA2450], v16);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (*(void *)(v0 + 160) == *(void *)(v0 + 176) && *(void *)(v0 + 168) == *(void *)(v0 + 184)) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v17 = *v5;
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
  char v19 = *(void *)(v0 + 224);
  v18(*v6, v19);
  v18(v17, v19);
  uint64_t v13 = v7;
LABEL_11:
  (*(void (**)(void, void))(**(void **)(v0 + 208) + 488))(v13 & 1, *(void *)(v0 + 216));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

void ServerFallbackCapableRequestProcessor.handleAceServerContextUpdateCandidate(_:executionContextInfo:reply:)(void *a1, uint64_t a2, void (*a3)(id, void), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v65 = a4;
  uint64_t v67 = a1;
  uint64_t v68 = a3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v63 = *(void *)(v6 - 8);
  uint64_t v64 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v62 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for SelectedUserAttributes();
  uint64_t v60 = *(void *)(v61 - 8);
  MEMORY[0x1F4188790](v61);
  os_log_type_t v58 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SelectedUserAttributes?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UserID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v57 - v17;
  uint64_t v19 = type metadata accessor for RequestType();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 592))(v21);
  if (v24)
  {
    uint64_t v66 = v18;
    uint64_t v25 = v24 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
    uint64_t v26 = v24;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v25, v19);
    uint64_t v27 = (NSObject **)(v26 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo);
    swift_beginAccess();
    uint64_t v69 = *v27;
    uint64_t v59 = v26;
    uint64_t v28 = (void *)(v26 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    if (*v28 >> 62 == 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, (*v28 & 0x3FFFFFFFFFFFFFFFLL) + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId, v12);
      uint64_t v29 = v66;
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v66, v16, v12);
    }
    else
    {
      uint64_t v29 = v66;
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v66, v5 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_sessionUserId, v12);
    }
    uint64_t v34 = v69;
    if (*v28 >> 62 == 1)
    {
      char v35 = *(void (**)(uint64_t))(*(void *)(*v28 & 0x3FFFFFFFFFFFFFFFLL) + 760);
      uint64_t v36 = swift_retain();
      v35(v36);
      swift_release();
      uint64_t v37 = v60;
      uint64_t v38 = v61;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v11, 1, v61))
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, &demangling cache variable for type metadata for SelectedUserAttributes?);
        char v39 = 0;
      }
      else
      {
        char v40 = v58;
        (*(void (**)(void))(v37 + 16))();
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, &demangling cache variable for type metadata for SelectedUserAttributes?);
        id v41 = v40;
        char v39 = SelectedUserAttributes.meetsUserSessionThreshold.getter();
        (*(void (**)(char *, uint64_t))(v37 + 8))(v41, v38);
      }
      uint64_t v29 = v66;
    }
    else
    {
      char v39 = 0;
    }
    type metadata accessor for ConversationContextUpdateMetadata();
    uint64_t v42 = swift_allocObject();
    *(unsigned char *)(v42 + 16) = 1;
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v42 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType, v23, v19);
    *(void *)(v42 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo) = v69;
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v42 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId, v29, v12);
    *(unsigned char *)(v42 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) = 0;
    *(unsigned char *)(v42 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_meetsUserSessionThreshold) = v39 & 1;
    outlined init with copy of ReferenceResolutionClientProtocol?(v5 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater, (uint64_t)v70, &demangling cache variable for type metadata for ContextUpdating?);
    uint64_t v43 = v71;
    uint64_t v44 = v67;
    if (v71)
    {
      uint64_t v45 = v72;
      __swift_project_boxed_opaque_existential_1(v70, v71);
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v45 + 16))(v44, v42, v43, v45);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v70);
      uint64_t v46 = v68;
      if (!v68)
      {
LABEL_21:
        swift_release();
        swift_release();
        return;
      }
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v70, &demangling cache variable for type metadata for ContextUpdating?);
      uint64_t v46 = v68;
      if (!v68) {
        goto LABEL_21;
      }
    }
    id v47 = objc_allocWithZone(MEMORY[0x1E4F965B8]);
    swift_retain();
    id v48 = objc_msgSend(v47, sel_init);
    char v49 = v62;
    UUID.init()();
    uint64_t v50 = UUID.uuidString.getter();
    uint64_t v52 = v51;
    (*(void (**)(char *, uint64_t))(v63 + 8))(v49, v64);
    uint64_t v53 = (void *)MEMORY[0x1BA9E2DD0](v50, v52);
    swift_bridgeObjectRelease();
    objc_msgSend(v48, sel_setAceId_, v53);

    id v54 = v48;
    id v55 = objc_msgSend(v44, sel_aceId);
    objc_msgSend(v54, sel_setRefId_, v55);

    id v56 = v54;
    v46(v54, 0);

    _sxRi_zRi0_zlySDySSSbGIsegr_SgWOe((uint64_t)v46);
    goto LABEL_21;
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.conversationBridge);
  uint64_t v69 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v69, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl(&dword_1B9C64000, v69, v31, "Received ServerContextUpdateCandidate while not in a turn. Ignoring.", v32, 2u);
    MEMORY[0x1BA9E48C0](v32, -1, -1);
  }
  uint64_t v33 = v69;
}

uint64_t ServerFallbackCapableRequestProcessor.handlePommesResultCandidateMessage(_:)(uint64_t a1)
{
  return ServerFallbackCapableRequestProcessor.handlePommesResultCandidateMessage(_:)(a1, MEMORY[0x1E4FA21A0], (uint64_t (*)(uint64_t))ConversationRequestProcessor.handlePommesResultCandidateMessage(_:));
}

uint64_t ServerFallbackCapableRequestProcessor.handlePommesTRPCandidateMessage(_:)(uint64_t a1)
{
  return ServerFallbackCapableRequestProcessor.handlePommesResultCandidateMessage(_:)(a1, MEMORY[0x1E4FA2158], (uint64_t (*)(uint64_t))ConversationRequestProcessor.handlePommesTRPCandidateMessage(_:));
}

uint64_t ServerFallbackCapableRequestProcessor.handlePommesResultCandidateMessage(_:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(uint64_t))
{
  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)v3 + 592))();
  if (v7)
  {
    uint64_t v8 = (unint64_t *)(v7 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    unint64_t v10 = *v8;
    uint64_t v9 = (void *)v8[1];
    outlined copy of ConversationRequestProcessorTurnState.SpeechState(v10, v9);
    uint64_t v11 = swift_release();
    uint64_t v12 = a2(v11);
    uint64_t v14 = ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(v12, v13, v10, v9);
    swift_bridgeObjectRelease();
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v10, v9);
    if (v14)
    {
      char v15 = (*(uint64_t (**)(void))(*(void *)v14 + 400))();
      if (ResultCandidateProcessingStatus.rawValue.getter(v15) == 0xD000000000000018 && v16 == 0x80000001BA061200)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v17 & 1) == 0)
        {
LABEL_8:
          swift_release();
          return a3(a1);
        }
      }
      (*(void (**)(uint64_t))(*(void *)v14 + 408))(14);
      goto LABEL_8;
    }
  }
  return a3(a1);
}

void ServerFallbackCapableRequestProcessor.reallyHandleStoppedListeningForContinuationMessage(for:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*a1 + 480))(1);
  uint64_t v5 = (uint64_t (**)(uint64_t))(*a1 + 400);
  uint64_t v6 = *v5;
  char v7 = (*v5)(v4);
  if (ResultCandidateProcessingStatus.rawValue.getter(v7) != 0xD000000000000016 || v8 != 0x80000001BA0611E0)
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v10 = swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_5;
    }
    char v11 = v6(v10);
    if (ResultCandidateProcessingStatus.rawValue.getter(v11) == 0xD000000000000018 && v12 == 0x80000001BA0611A0)
    {
      uint64_t v13 = swift_bridgeObjectRelease();
    }
    else
    {
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v13 = swift_bridgeObjectRelease();
      if ((v14 & 1) == 0) {
        goto LABEL_14;
      }
    }
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 456))(v13);
    if ((v13 & 1) == 0)
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationBridge);
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v21 = 0;
        _os_log_impl(&dword_1B9C64000, v19, v20, "Sending ResultCandidateSelected with StoppedListeningForSpeechContinuationMessage", v21, 2u);
        MEMORY[0x1BA9E48C0](v21, -1, -1);
      }

      (*(void (**)(void, void, uint64_t, void, void))(*(void *)v2 + 1280))(a1[2], a1[3], 1, 0, 0);
      goto LABEL_6;
    }
LABEL_14:
    char v15 = v6(v13);
    if (ResultCandidateProcessingStatus.rawValue.getter(v15) == 0xD000000000000013 && v16 == 0x80000001BA0611C0)
    {
      uint64_t v17 = swift_bridgeObjectRelease();
    }
    else
    {
      char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v17 = swift_bridgeObjectRelease();
      if ((v22 & 1) == 0) {
        goto LABEL_6;
      }
    }
    unint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 1528))(v17);
    unint64_t v24 = v23;
    if (v23 >> 62)
    {
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      if (v25) {
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v25 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v25)
      {
LABEL_25:
        if (v25 < 1)
        {
          __break(1u);
          return;
        }
        uint64_t v26 = 0;
        uint64_t v27 = a1[2];
        uint64_t v28 = a1[3];
        do
        {
          if ((v24 & 0xC000000000000001) != 0) {
            id v29 = (id)MEMORY[0x1BA9E3990](v26, v24);
          }
          else {
            id v29 = *(id *)(v24 + 8 * v26 + 32);
          }
          uint64_t v30 = v29;
          if (ResultCandidateRequestMessageBase.resultCandidateId.getter() == v27 && v31 == v28)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v32 & 1) == 0) {
              goto LABEL_29;
            }
          }
          ServerFallbackCapableRequestProcessor.attemptServerFallback(executeNLOnServer:rcState:)((uint64_t)v30, (unint64_t)a1);
LABEL_29:
          ++v26;
        }
        while (v25 != v26);
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
LABEL_5:
  (*(void (**)(void *, void))(*(void *)v1 + 1128))(a1, 0);
LABEL_6:

  ConversationRequestProcessor.reallyHandleStoppedListeningForContinuationMessage(for:)((uint64_t)a1);
}

void ServerFallbackCapableRequestProcessor.synchronizedClose(_:_:_:)(void *a1, void *a2, void *a3, char a4)
{
  uint64_t v5 = v4;
  if ((*(uint64_t (**)(void))(*v4 + 1432))())
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
    swift_retain();
    char v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      v23[0] = v14;
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v15 = v5[8];
      unint64_t v16 = v5[9];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v11, v12, "This request: %s was handled on server", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v14, -1, -1);
      MEMORY[0x1BA9E48C0](v13, -1, -1);
    }
    else
    {

      uint64_t v17 = swift_release();
    }
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*v5 + 592))(v17);
    if (v18)
    {
      os_log_type_t v20 = (unint64_t *)(v18
                               + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
      swift_beginAccess();
      unint64_t v21 = *v20;
      char v22 = (void *)v20[1];
      outlined copy of ConversationRequestProcessorTurnState.SpeechState(v21, v22);
      swift_release();
      if (v21 >> 62 == 1)
      {
        swift_retain();
        outlined consume of ConversationRequestProcessorTurnState.SpeechState(v21, v22);
        (*(void (**)(uint64_t))(*(void *)(v21 & 0x3FFFFFFFFFFFFFFFLL) + 408))(9);
        uint64_t v18 = swift_release();
      }
      else
      {
        outlined consume of ConversationRequestProcessorTurnState.SpeechState(v21, v22);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*v5 + 1184))(v18, v19);
    (*(void (**)(uint64_t, void, uint64_t))(*v5 + 392))(1, 0, 3);
  }
  else
  {
    ConversationRequestProcessor.synchronizedClose(_:_:_:)(a1, a2, a3, a4 & 1);
  }
}

void ServerFallbackCapableRequestProcessor.commit(rcState:userInput:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SelectedUserAttributes();
  uint64_t v112 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v108 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SelectedUserAttributes?);
  MEMORY[0x1F4188790](v8 - 8);
  os_log_type_t v111 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UserID();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for RequestType();
  Class isa = v14[-1].isa;
  os_log_t v115 = v14;
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  BOOL v113 = (char *)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  Class v110 = (char *)&v100 - v18;
  MEMORY[0x1F4188790](v17);
  unint64_t v109 = (char *)&v100 - v19;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for InputOrigin?);
  uint64_t v21 = MEMORY[0x1F4188790](v20 - 8);
  unint64_t v23 = (char *)&v100 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v24 = (*(uint64_t (**)(uint64_t))(*a1 + 400))(v21);
  if (ResultCandidateProcessingStatus.rawValue.getter(v24) == 0xD000000000000016 && v25 == 0x80000001BA0611E0)
  {
    uint64_t v26 = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v107 = a2;
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v26 = swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v49 = type metadata accessor for Logger();
      __swift_project_value_buffer(v49, (uint64_t)static Logger.conversationBridge);
      swift_retain();
      uint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v52 = (uint8_t *)swift_slowAlloc();
        uint64_t v53 = swift_slowAlloc();
        v116[0] = v53;
        *(_DWORD *)uint64_t v52 = 136315138;
        uint64_t v54 = a1[2];
        unint64_t v55 = a1[3];
        swift_bridgeObjectRetain();
        uint64_t v119 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v50, v51, "Chosen RC ID: %s is not handled by server", v52, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v53, -1, -1);
        MEMORY[0x1BA9E48C0](v52, -1, -1);
      }
      else
      {

        swift_release();
      }
      ConversationRequestProcessor.commit(rcState:userInput:)(a1, v107);
      return;
    }
  }
  uint64_t v106 = v6;
  uint64_t v28 = (*(uint64_t (**)(uint64_t))(*v2 + 592))(v26);
  if (v28)
  {
    uint64_t v29 = v28;
    uint64_t v104 = v13;
    uint64_t v105 = v11;
    uint64_t v103 = v10;
    uint64_t v30 = ServerFallbackCapableRequestProcessor.makePreExecutionRules(_:)(a1);
    uint64_t v31 = *(uint64_t (**)(void))(**(void **)((char *)v2
                                            + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_decisionMaker)
                              + 88);
    uint64_t v107 = v30;
    uint64_t v32 = v31();
    (*(void (**)(void))(*a1 + 504))(BYTE1(v32));
    (*(void (**)(uint64_t))(*a1 + 528))(v32);
    uint64_t v33 = *(void *)((char *)v2
                    + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_preExecutionActionHandler);
    uint64_t v35 = v3[8];
    unint64_t v34 = v3[9];
    uint64_t v36 = v29 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_inputOrigin;
    uint64_t v37 = type metadata accessor for InputOrigin();
    uint64_t v38 = v29;
    uint64_t v39 = *(void *)(v37 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v23, v36, v37);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v23, 0, 1, v37);
    char v40 = *(uint64_t (**)(void *, uint64_t, unint64_t, char *))(*(void *)v33 + 144);
    uint64_t v101 = v35;
    unint64_t v102 = v34;
    LOBYTE(v33) = v40(a1, v35, v34, v23);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for InputOrigin?);
    if (v33)
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v41 = type metadata accessor for Logger();
      __swift_project_value_buffer(v41, (uint64_t)static Logger.conversationBridge);
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v44 = 0;
        _os_log_impl(&dword_1B9C64000, v42, v43, "Acted upon pre-execution decision. Not committing..", v44, 2u);
        MEMORY[0x1BA9E48C0](v44, -1, -1);
        swift_release();
      }
      else
      {

        swift_release();
      }
      goto LABEL_42;
    }
    (*(void (**)(void *, uint64_t))(*v3 + 1304))(a1, v38);
    uint64_t v56 = AFIsInternalInstall();
    uint64_t v57 = v38;
    uint64_t v58 = v103;
    if (v56)
    {
      uint64_t v59 = v38 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
      swift_beginAccess();
      Class v61 = isa;
      os_log_t v60 = v115;
      uint64_t v62 = v109;
      (*((void (**)(char *, uint64_t, os_log_t))isa + 2))(v109, v59, v115);
      uint64_t v63 = v110;
      (*((void (**)(char *, void, os_log_t))v61 + 13))(v110, *MEMORY[0x1E4FA2450], v60);
      _s16SiriMessageTypes11RequestTypeOACSYAAWlTm_0(&lazy protocol witness table cache variable for type RequestType and conformance RequestType, MEMORY[0x1E4FA2460]);
      LOBYTE(v59) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v64 = (void (*)(char *, os_log_t))*((void *)v61 + 1);
      v64(v63, v60);
      uint64_t v56 = ((uint64_t (*)(char *, os_log_t))v64)(v62, v60);
      if ((v59 & 1) == 0)
      {
        type metadata accessor for ConversationBridge(0);
        uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v67 = v66;
        uint64_t v68 = *(void **)((char *)v3
                       + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_requestDispatcherServiceHelper);
        swift_getObjectType();
        specialized static ConversationBridge.sendShowRequestHandlingStatus(withStatus:serviceHelper:requestId:completion:)(v65, v67, v68, 0, 0, 0, 0);
        uint64_t v56 = swift_bridgeObjectRelease();
      }
    }
    if (((*(uint64_t (**)(uint64_t))(*v3 + 456))(v56) & 1) == 0) {
      (*(void (**)(void, void, uint64_t, void, void))(*v3 + 1280))(a1[2], a1[3], 1, 0, 0);
    }
    unint64_t v69 = ServerFallbackCapableRequestProcessor.submitAllFlowOutput(rcState:turn:)(a1, v57);
    uint64_t v70 = (*(uint64_t (**)(unint64_t))(*a1 + 448))(v69);
    uint64_t v100 = v57;
    if (v70)
    {
      uint64_t v71 = (void *)v70;
      uint64_t v72 = v57 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestType;
      swift_beginAccess();
      unint64_t v73 = v113;
      (*((void (**)(char *, uint64_t, os_log_t))isa + 2))(v113, v72, v115);
      uint64_t v74 = (void **)(v57 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_flowPluginInfo);
      swift_beginAccess();
      uint64_t v75 = *v74;
      uint64_t v76 = v58;
      (*(void (**)(char *, uint64_t, uint64_t))(v105 + 16))(v104, (uint64_t)a1 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId, v58);
      uint64_t v77 = *(void (**)(id))(*a1 + 760);
      id v78 = v75;
      uint64_t v79 = (uint64_t)v111;
      v77(v78);
      uint64_t v80 = v112;
      uint64_t v81 = v106;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48))(v79, 1, v106))
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v79, &demangling cache variable for type metadata for SelectedUserAttributes?);
        char v82 = 0;
      }
      else
      {
        uint64_t v83 = v108;
        (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v108, v79, v81);
        outlined destroy of ReferenceResolutionClientProtocol?(v79, &demangling cache variable for type metadata for SelectedUserAttributes?);
        char v82 = SelectedUserAttributes.meetsUserSessionThreshold.getter();
        v84 = v83;
        unint64_t v73 = v113;
        (*(void (**)(char *, uint64_t))(v80 + 8))(v84, v81);
      }
      type metadata accessor for ConversationContextUpdateMetadata();
      uint64_t v85 = swift_allocObject();
      *(unsigned char *)(v85 + 16) = 1;
      (*((void (**)(uint64_t, char *, os_log_t))isa + 4))(v85 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_requestType, v73, v115);
      *(void *)(v85 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_flowPluginInfo) = v75;
      (*(void (**)(uint64_t, char *, uint64_t))(v105 + 32))(v85 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_currentUserId, v104, v76);
      *(unsigned char *)(v85 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_emptyServerContext) = 0;
      *(unsigned char *)(v85 + OBJC_IVAR____TtC14SiriKitRuntime33ConversationContextUpdateMetadata_meetsUserSessionThreshold) = v82 & 1;
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v3 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_contextUpdater, (uint64_t)v116, &demangling cache variable for type metadata for ContextUpdating?);
      uint64_t v86 = v117;
      if (v117)
      {
        uint64_t v87 = v118;
        __swift_project_boxed_opaque_existential_1(v116, v117);
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v87 + 16))(v71, v85, v86, v87);
        uint64_t v88 = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v116);
      }
      else
      {
        uint64_t v88 = outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v116, &demangling cache variable for type metadata for ContextUpdating?);
      }
      (*(void (**)(uint64_t))(*v3 + 1184))(v88);

      swift_release();
    }
    (*(void (**)(uint64_t))(*a1 + 408))(9);
    (*(void (**)(uint64_t))(*v3 + 1440))(1);
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v89 = type metadata accessor for Logger();
    __swift_project_value_buffer(v89, (uint64_t)static Logger.conversationBridge);
    swift_retain_n();
    swift_retain_n();
    id v90 = Logger.logObject.getter();
    os_log_type_t v91 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v90, v91))
    {
      uint64_t v92 = swift_slowAlloc();
      uint64_t v93 = swift_slowAlloc();
      v116[0] = v93;
      *(_DWORD *)uint64_t v92 = 136315394;
      unint64_t v94 = v102;
      swift_bridgeObjectRetain();
      uint64_t v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v94, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v92 + 12) = 2080;
      uint64_t v95 = *(uint64_t (**)(uint64_t))(*a1 + 800);
      uint64_t v96 = swift_retain();
      uint64_t v97 = v95(v96);
      unint64_t v99 = v98;
      swift_release();
      uint64_t v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v99, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v90, v91, "Done handling server-fallback request for requestId: %s for: %s", (uint8_t *)v92, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v93, -1, -1);
      MEMORY[0x1BA9E48C0](v92, -1, -1);
      swift_release();

LABEL_42:
      swift_release();
      return;
    }

    swift_release();
    swift_release();
    swift_release_n();
    swift_release_n();
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)static Logger.conversationBridge);
    os_log_t v115 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v115, v46))
    {
      id v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v47 = 0;
      _os_log_impl(&dword_1B9C64000, v115, v46, "ConversationBridge: commit received while we're not in a turn. Ignoring.", v47, 2u);
      MEMORY[0x1BA9E48C0](v47, -1, -1);
    }
    os_log_t v48 = v115;
  }
}

void ServerFallbackCapableRequestProcessor.fallbackToServer(forResultCandidateId:serverFallbackReason:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v32 = a3;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    v33[0] = v30;
    *(_DWORD *)uint64_t v11 = 136315650;
    if (a2) {
      uint64_t v12 = a1;
    }
    else {
      uint64_t v12 = 7104878;
    }
    if (a2) {
      unint64_t v13 = a2;
    }
    else {
      unint64_t v13 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    uint64_t v31 = a1;
    uint64_t v14 = v4[8];
    unint64_t v15 = v4[9];
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 22) = 2080;
    uint64_t v16 = v4[10];
    unint64_t v17 = v4[11];
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    a1 = v31;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v9, v10, "Execution asked to fallback to server for rcId: %s, requestId: %s, rootRequestId: %s", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v30, -1, -1);
    uint64_t v18 = v11;
    a3 = v32;
    MEMORY[0x1BA9E48C0](v18, -1, -1);
  }
  else
  {

    swift_release_n();
    uint64_t v19 = swift_bridgeObjectRelease_n();
  }
  if ((*(uint64_t (**)(uint64_t))(*v4 + 456))(v19))
  {
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_1B9C64000, v20, v21, "ResultCandidateSelected has already been sent to server. Cannot fallback to server any more", v22, 2u);
      MEMORY[0x1BA9E48C0](v22, -1, -1);
    }
  }
  else
  {
    uint64_t v23 = (*(uint64_t (**)(void))(*v4 + 592))();
    if (v23)
    {
      char v24 = (unint64_t *)(v23
                               + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
      swift_beginAccess();
      unint64_t v26 = *v24;
      uint64_t v25 = (void *)v24[1];
      outlined copy of ConversationRequestProcessorTurnState.SpeechState(v26, v25);
      swift_release();
      if (a2) {
        uint64_t v27 = a1;
      }
      else {
        uint64_t v27 = 7104878;
      }
      if (a2) {
        uint64_t v28 = a2;
      }
      else {
        uint64_t v28 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v29 = ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(v27, v28, v26, v25);
      outlined consume of ConversationRequestProcessorTurnState.SpeechState(v26, v25);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v29 = 0;
    }
    (*(void (**)(uint64_t, uint64_t))(*v4 + 1616))(v29, a3);
    swift_release();
  }
}

Swift::Void __swiftcall ServerFallbackCapableRequestProcessor.fallbackToInfoDomainResults(forResultCandidateId:)(Swift::String_optional forResultCandidateId)
{
  uint64_t v2 = v1;
  object = forResultCandidateId.value._object;
  uint64_t countAndFlagsBits = forResultCandidateId.value._countAndFlagsBits;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (void *)((char *)v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v6);
  os_log_type_t v10 = (void *)((char *)v49 - v9);
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  unint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v49[1] = v12;
    uint64_t v15 = swift_slowAlloc();
    os_log_type_t v51 = v10;
    uint64_t v16 = (uint8_t *)v15;
    v49[0] = swift_slowAlloc();
    v53[0] = v49[0];
    uint64_t v50 = v8;
    *(_DWORD *)uint64_t v16 = 136315138;
    if (object) {
      uint64_t v17 = countAndFlagsBits;
    }
    else {
      uint64_t v17 = 7104878;
    }
    if (object) {
      unint64_t v18 = (unint64_t)object;
    }
    else {
      unint64_t v18 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v53);
    uint64_t v8 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v13, v14, "Execution asked to fallback to Pommes for rcId: %s", v16, 0xCu);
    uint64_t v19 = v49[0];
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v19, -1, -1);
    uint64_t v20 = v16;
    os_log_type_t v10 = v51;
    MEMORY[0x1BA9E48C0](v20, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v21 = (*(uint64_t (**)(void))(*(void *)v2 + 488))(0);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 456))(v21))
  {
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      char v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v24 = 0;
      uint64_t v25 = "ResultCandidateSelected has already been sent to server. Cannot fallback to POMMES any more";
LABEL_27:
      _os_log_impl(&dword_1B9C64000, v22, v23, v25, v24, 2u);
      MEMORY[0x1BA9E48C0](v24, -1, -1);
      goto LABEL_28;
    }
    goto LABEL_28;
  }
  if (!object)
  {
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      char v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v24 = 0;
      uint64_t v25 = "Cannot fallback to Pommes without rcId";
      goto LABEL_27;
    }
LABEL_28:

    return;
  }
  unint64_t v26 = *(uint64_t (**)(uint64_t))(*(void *)v2 + 592);
  uint64_t v27 = swift_bridgeObjectRetain();
  uint64_t v28 = v26(v27);
  if (v28)
  {
    uint64_t v29 = (unint64_t *)(v28 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
    swift_beginAccess();
    unint64_t v31 = *v29;
    uint64_t v30 = (void *)v29[1];
    outlined copy of ConversationRequestProcessorTurnState.SpeechState(v31, v30);
    swift_release();
    uint64_t v32 = countAndFlagsBits;
    uint64_t v33 = ConversationRequestProcessorTurnState.SpeechState.getRcState(rcId:)(countAndFlagsBits, (uint64_t)object, v31, v30);
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v31, v30);
    if (v33)
    {
      unint64_t v34 = *(uint64_t (**)(uint64_t))(*(void *)v33 + 872);
      uint64_t v35 = swift_retain();
      uint64_t v36 = v34(v35);
      uint64_t v37 = swift_release();
      if (v36)
      {
        uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 216))(v37);
        unint64_t v40 = v39;
        swift_release();
        if (v40) {
          uint64_t v41 = v38;
        }
        else {
          uint64_t v41 = 0;
        }
        unint64_t v42 = 0xE000000000000000;
        if (v40) {
          unint64_t v42 = v40;
        }
        *uint64_t v8 = v32;
        v8[1] = (uint64_t)object;
        void v8[2] = v41;
        v8[3] = v42;
        uint64_t v43 = *MEMORY[0x1E4F9FE58];
        uint64_t v44 = type metadata accessor for PommesCandidateId();
        uint64_t v45 = *(void *)(v44 - 8);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v45 + 104))(v8, v43, v44);
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v45 + 56))(v8, 0, 1, v44);
        outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v8, (uint64_t)v10, &demangling cache variable for type metadata for PommesCandidateId?);
        goto LABEL_31;
      }
    }
  }
  else
  {
    uint64_t v32 = countAndFlagsBits;
    uint64_t v33 = 0;
  }
  *os_log_type_t v10 = v32;
  v10[1] = (uint64_t)object;
  uint64_t v46 = *MEMORY[0x1E4F9FE50];
  uint64_t v47 = type metadata accessor for PommesCandidateId();
  uint64_t v48 = *(void *)(v47 - 8);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v48 + 104))(v10, v46, v47);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v48 + 56))(v10, 0, 1, v47);
LABEL_31:
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v2 + 1624))(v33, v10);
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for PommesCandidateId?);
}

Swift::Void __swiftcall ServerFallbackCapableRequestProcessor.handleRuntimeError(error:)(NSError *error)
{
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)v1 + 1456))();
  if (v3)
  {
    (*(void (**)(NSError *))(*(void *)v3 + 504))(error);
    swift_release();
  }
  else
  {
    ConversationRequestProcessor.handleRuntimeError(error:)(error);
  }
}

uint64_t closure #1 in ServerFallbackCapableRequestProcessor.closeServerRequest(forExecutionRequestId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[13] = a6;
  v7[14] = a7;
  v7[11] = a4;
  v7[12] = a5;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v8 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ServerFallbackCapableRequestProcessor.closeServerRequest(forExecutionRequestId:), v8, 0);
}

uint64_t closure #1 in ServerFallbackCapableRequestProcessor.closeServerRequest(forExecutionRequestId:)()
{
  uint64_t v37 = v0;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      unint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v13 = 0;
      _os_log_impl(&dword_1B9C64000, v11, v12, "This ServerFallbackCapableRequestProcessor instance is already out of scope", v13, 2u);
      MEMORY[0x1BA9E48C0](v13, -1, -1);
    }
    goto LABEL_28;
  }
  uint64_t v2 = (void *)Strong;
  uint64_t v3 = v0[12];
  if ((*(unsigned char *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_asrOnServer) & 1) == 0)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.conversationBridge);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      uint64_t v17 = "Not an AsrOnServer request. Ignoring closeServerRequest() call";
LABEL_24:
      _os_log_impl(&dword_1B9C64000, v11, v15, v17, (uint8_t *)v16, 2u);
LABEL_25:
      MEMORY[0x1BA9E48C0](v16, -1, -1);

      goto LABEL_26;
    }
    goto LABEL_27;
  }
  if (*(void *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId) != v0[13]
    || *(void *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_requestId + 8) != v0[14])
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      if (one-time initialization token for conversationBridge != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      __swift_project_value_buffer(v21, (uint64_t)static Logger.conversationBridge);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      BOOL v23 = os_log_type_enabled(v11, v22);
      unint64_t v24 = v0[14];
      if (v23)
      {
        uint64_t v25 = v0[13];
        uint64_t v16 = swift_slowAlloc();
        uint64_t v35 = swift_slowAlloc();
        uint64_t v36 = v35;
        *(_DWORD *)uint64_t v16 = 136315394;
        swift_bridgeObjectRetain();
        v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v24, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v16 + 12) = 2080;
        uint64_t v27 = v2[8];
        unint64_t v26 = v2[9];
        swift_bridgeObjectRetain();
        v0[8] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v26, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1B9C64000, v11, v22, "Unexpectedly received closeServerRequest call for executionRequestId: %s on processor with requestId: %s", (uint8_t *)v16, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v35, -1, -1);
        goto LABEL_25;
      }
      swift_release_n();
      swift_bridgeObjectRelease_n();
LABEL_28:

      goto LABEL_29;
    }
    uint64_t v3 = v0[12];
  }
  uint64_t v5 = (void *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  if (*v5 >> 62 != 1)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationBridge);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      uint64_t v17 = "Unexpectedly received closeServerRequest() from Execution before an RC has been selected. This is not allowe"
            "d because the flow can still choose to fallback to server.";
      goto LABEL_24;
    }
LABEL_27:
    swift_release();
    goto LABEL_28;
  }
  uint64_t v6 = *v5 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*v2 + 456);
  swift_retain();
  uint64_t v8 = swift_retain();
  char v9 = v7(v8);
  swift_release();
  if (v9)
  {
    swift_release();
LABEL_26:
    swift_release();
    goto LABEL_29;
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Logger.conversationBridge);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    unint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v31 = 0;
    _os_log_impl(&dword_1B9C64000, v29, v30, "Sending ResultCandidateSelected since execution asked to close server request", v31, 2u);
    MEMORY[0x1BA9E48C0](v31, -1, -1);
  }

  uint64_t v32 = *(void *)(v6 + 16);
  uint64_t v33 = *(void *)(v6 + 24);
  unint64_t v34 = *(void (**)(uint64_t, uint64_t, void, void, void))(*v2 + 1280);
  swift_bridgeObjectRetain();
  v34(v32, v33, 0, 0, 0);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
LABEL_29:
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t key path setter for Siri_Nlu_External_UserDialogAct.delegated : Siri_Nlu_External_UserDialogAct(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return Siri_Nlu_External_UserDialogAct.delegated.setter();
}

void ServerFallbackCapableRequestProcessor.synchronizedFallbackToServer(rcState:serverFallbackReason:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ServerFallbackReason();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  unint64_t v13 = (char *)v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v14 = a1;
    goto LABEL_3;
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 592))(v11);
  if (!v15)
  {
LABEL_31:
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v69 = type metadata accessor for Logger();
    __swift_project_value_buffer(v69, (uint64_t)static Logger.conversationBridge);
    uint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v72 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v72 = 0;
      _os_log_impl(&dword_1B9C64000, v70, v71, "Cannot fall back to server as no RC was selected", v72, 2u);
      MEMORY[0x1BA9E48C0](v72, -1, -1);
    }

    return;
  }
  uint64_t v16 = v13;
  uint64_t v17 = (unint64_t *)(v15 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  unint64_t v18 = *v17;
  uint64_t v19 = (void *)v17[1];
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(v18, v19);
  swift_release();
  if (v18 >> 62 != 1)
  {
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v18, v19);
    goto LABEL_31;
  }
  uint64_t v14 = (void *)(v18 & 0x3FFFFFFFFFFFFFFFLL);
  swift_retain();
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v18, v19);
  unint64_t v13 = v16;
LABEL_3:
  outlined init with copy of ReferenceResolutionClientProtocol?(a2, (uint64_t)v8, &demangling cache variable for type metadata for ServerFallbackReason?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v13, *MEMORY[0x1E4FA25F0], v9);
    swift_retain();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for ServerFallbackReason?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v8, v9);
    swift_retain();
  }
  uint64_t v20 = specialized static ServerFallbackCapableRequestProcessor.getDelegatedUDA(rcState:)((uint64_t)v14);
  uint64_t v21 = (*(uint64_t (**)(void))(*v14 + 864))();
  uint64_t v22 = v21;
  if (*(unsigned char *)(v3 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_isMUXEnabled) == 1)
  {
    if (v21)
    {
      MEMORY[0x1F4188790](v21);
      v77[-4] = v3;
      v77[-3] = v14;
      v77[-2] = v20;
      v77[-1] = v13;
      id v23 = objc_allocWithZone((Class)type metadata accessor for MUXServerFallbackMessage());
      unint64_t v24 = (void *)MEMORY[0x1BA9E0D30](partial apply for closure #1 in ServerFallbackCapableRequestProcessor.synchronizedFallbackToServer(rcState:serverFallbackReason:), &v77[-6]);
      swift_bridgeObjectRelease();
      if (v24)
      {
        __swift_project_boxed_opaque_existential_1((void *)(v3 + 24), *(void *)(v3 + 48));
        dispatch thunk of MessagePublishing.postMessage(_:)();
        if (one-time initialization token for conversationBridge != -1) {
          swift_once();
        }
        uint64_t v25 = type metadata accessor for Logger();
        __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationBridge);
        swift_retain();
        unint64_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.debug.getter();
        uint64_t v28 = v26;
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v29 = (uint8_t *)swift_slowAlloc();
          uint64_t v80 = swift_slowAlloc();
          uint64_t v82 = v80;
          uint64_t v78 = v22;
          uint64_t v79 = v9;
          *(_DWORD *)uint64_t v29 = 136315138;
          v77[1] = v29 + 4;
          os_log_type_t v30 = v13;
          uint64_t v32 = v14[2];
          unint64_t v31 = v14[3];
          swift_bridgeObjectRetain();
          uint64_t v33 = v32;
          unint64_t v13 = v30;
          uint64_t v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v31, &v82);
          uint64_t v9 = v79;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_bridgeObjectRelease();
          unint64_t v34 = v28;
          _os_log_impl(&dword_1B9C64000, v28, v27, "Posted MUXServerFallbackMessage on the message bus for RC:%s", v29, 0xCu);
          uint64_t v35 = v80;
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v35, -1, -1);
          MEMORY[0x1BA9E48C0](v29, -1, -1);
          swift_release();
        }
        else
        {

          swift_release_n();
        }
      }
      else
      {
        if (one-time initialization token for conversationBridge != -1) {
          swift_once();
        }
        uint64_t v73 = type metadata accessor for Logger();
        __swift_project_value_buffer(v73, (uint64_t)static Logger.conversationBridge);
        uint64_t v74 = Logger.logObject.getter();
        os_log_type_t v75 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v74, v75))
        {
          uint64_t v76 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v76 = 0;
          _os_log_impl(&dword_1B9C64000, v74, v75, "Could not create MUXServerFallbackMessage. Cannot fallback to server", v76, 2u);
          MEMORY[0x1BA9E48C0](v76, -1, -1);
          swift_release();
        }
        else
        {

          swift_release();
        }
      }
      swift_release();
LABEL_45:
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      return;
    }
    goto LABEL_18;
  }
  if (!v21)
  {
LABEL_18:
    uint64_t v80 = (uint64_t)v13;
    uint64_t v46 = MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  uint64_t v80 = (uint64_t)v13;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UserID, AFSpeechPackage)>);
  uint64_t v36 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UserID, AFSpeechPackage))
              - 8);
  unint64_t v37 = (*(unsigned __int8 *)(*(void *)v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v36 + 80);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_1BA04FD90;
  uint64_t v39 = v22;
  uint64_t v40 = v9;
  unint64_t v41 = v38 + v37;
  uint64_t v42 = v36[14];
  uint64_t v43 = (char *)v14 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId;
  uint64_t v44 = type metadata accessor for UserID();
  uint64_t v45 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v44 - 8) + 16))(v41, v43, v44);
  *(void *)(v41 + v42) = (*(uint64_t (**)(uint64_t))(*(void *)v39 + 112))(v45);
  uint64_t v9 = v40;
  uint64_t v22 = v39;
  uint64_t v46 = v38;
LABEL_19:
  unint64_t v47 = specialized Dictionary.init(dictionaryLiteral:)(v46);
  uint64_t v48 = MEMORY[0x1F4188790](v47);
  v77[-6] = v3;
  v77[-5] = v14;
  uint64_t v49 = v80;
  v77[-4] = v20;
  v77[-3] = v49;
  v77[-2] = v48;
  id v50 = objc_allocWithZone((Class)type metadata accessor for ExecuteNLOnServerMessage());
  os_log_type_t v51 = (void *)ExecuteNLOnServerMessage.init(build:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v51)
  {
    __swift_project_boxed_opaque_existential_1((void *)(v3 + 24), *(void *)(v3 + 48));
    dispatch thunk of MessagePublishing.postMessage(_:)();
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    __swift_project_value_buffer(v52, (uint64_t)static Logger.conversationBridge);
    id v53 = v51;
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = swift_slowAlloc();
      uint64_t v78 = v22;
      uint64_t v57 = (uint8_t *)v56;
      uint64_t v58 = swift_slowAlloc();
      uint64_t v79 = v9;
      uint64_t v59 = v58;
      uint64_t v82 = v58;
      *(_DWORD *)uint64_t v57 = 136315138;
      uint64_t v60 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
      uint64_t v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, &v82);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v54, v55, "Posted ExecuteNLOnServerMessage on the message bus for RC:%s", v57, 0xCu);
      swift_arrayDestroy();
      uint64_t v62 = v59;
      uint64_t v9 = v79;
      MEMORY[0x1BA9E48C0](v62, -1, -1);
      MEMORY[0x1BA9E48C0](v57, -1, -1);

      swift_release();
    }
    else
    {

      swift_release();
    }
    swift_release();
    unint64_t v13 = (char *)v80;
    goto LABEL_45;
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v63 = type metadata accessor for Logger();
  __swift_project_value_buffer(v63, (uint64_t)static Logger.conversationBridge);
  uint64_t v64 = Logger.logObject.getter();
  os_log_type_t v65 = static os_log_type_t.error.getter();
  BOOL v66 = os_log_type_enabled(v64, v65);
  uint64_t v67 = v80;
  if (v66)
  {
    uint64_t v68 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v68 = 0;
    _os_log_impl(&dword_1B9C64000, v64, v65, "Could not create ExecuteNLOnServerMessage. Cannot fallback to server", v68, 2u);
    MEMORY[0x1BA9E48C0](v68, -1, -1);
    swift_release();
  }
  else
  {

    swift_release();
  }
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v67, v9);
}

uint64_t closure #1 in ServerFallbackCapableRequestProcessor.synchronizedFallbackToServer(rcState:serverFallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *MEMORY[0x1E4FA2328];
  uint64_t v16 = type metadata accessor for MessageSource();
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 104))(v14, v15, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  ExecuteNLOnServerMessageBase.Builder.source.setter();
  swift_bridgeObjectRetain();
  ExecuteNLOnServerMessageBase.Builder.assistantId.setter();
  uint64_t v18 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v11, v18, v19);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v11, 0, 1, v19);
  ExecuteNLOnServerMessageBase.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  ExecuteNLOnServerMessageBase.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  ExecuteNLOnServerMessageBase.Builder.resultCandidateId.setter();
  swift_bridgeObjectRetain();
  ExecuteNLOnServerMessageBase.Builder.delegatedUserDialogActs.setter();
  uint64_t v21 = type metadata accessor for ServerFallbackReason();
  uint64_t v22 = *(void *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v8, v25, v21);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v8, 0, 1, v21);
  return ExecuteNLOnServerMessageBase.Builder.fallbackReason.setter();
}

uint64_t closure #2 in ServerFallbackCapableRequestProcessor.synchronizedFallbackToServer(rcState:serverFallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v25[0] = a5;
  v25[1] = a6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *MEMORY[0x1E4FA2328];
  uint64_t v17 = type metadata accessor for MessageSource();
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 104))(v15, v16, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  ExecuteNLOnServerMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  ExecuteNLOnServerMessage.Builder.assistantId.setter();
  uint64_t v19 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v12, v19, v20);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v12, 0, 1, v20);
  ExecuteNLOnServerMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  ExecuteNLOnServerMessage.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  ExecuteNLOnServerMessage.Builder.resultCandidateId.setter();
  swift_bridgeObjectRetain();
  ExecuteNLOnServerMessage.Builder.delegatedUserDialogActs.setter();
  uint64_t v22 = type metadata accessor for ServerFallbackReason();
  uint64_t v23 = *(void *)(v22 - 8);
  (*(void (**)(char *, void, uint64_t))(v23 + 16))(v9, v25[0], v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v9, 0, 1, v22);
  ExecuteNLOnServerMessage.Builder.fallbackReason.setter();
  swift_bridgeObjectRetain();
  return ExecuteNLOnServerMessage.Builder.sharedUserIdToSpeechPackage.setter();
}

void ServerFallbackCapableRequestProcessor.synchronizedFallbackToPommes(rcState:pommesCandidateId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PommesCandidateId();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (uint64_t *)((char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v72 - v15;
  if (a1)
  {
    uint64_t v17 = a1;
    goto LABEL_3;
  }
  uint64_t v22 = (*(uint64_t (**)(uint64_t))(*v2 + 592))(v14);
  if (!v22)
  {
LABEL_30:
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    __swift_project_value_buffer(v54, (uint64_t)static Logger.conversationBridge);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v56 = 0;
      _os_log_impl(&dword_1B9C64000, v19, v55, "Cannot fallback to Pommes as no RC was selected", v56, 2u);
      MEMORY[0x1BA9E48C0](v56, -1, -1);
    }
LABEL_34:

    return;
  }
  os_log_type_t v75 = (char *)v9;
  uint64_t v23 = v10;
  uint64_t v24 = v16;
  uint64_t v25 = (unint64_t *)(v22 + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_speechState);
  swift_beginAccess();
  unint64_t v26 = *v25;
  os_log_type_t v27 = (void *)v25[1];
  outlined copy of ConversationRequestProcessorTurnState.SpeechState(v26, v27);
  swift_release();
  if (v26 >> 62 != 1)
  {
    outlined consume of ConversationRequestProcessorTurnState.SpeechState(v26, v27);
    goto LABEL_30;
  }
  uint64_t v17 = v26 & 0x3FFFFFFFFFFFFFFFLL;
  swift_retain();
  outlined consume of ConversationRequestProcessorTurnState.SpeechState(v26, v27);
  uint64_t v16 = v24;
  uint64_t v10 = v23;
  uint64_t v9 = (uint64_t)v75;
LABEL_3:
  outlined init with copy of ReferenceResolutionClientProtocol?(a2, (uint64_t)v8, &demangling cache variable for type metadata for PommesCandidateId?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    swift_retain();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for PommesCandidateId?);
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationBridge);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v19, v20))
    {

      swift_release();
      return;
    }
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl(&dword_1B9C64000, v19, v20, "Cannot fallback to Pommes because PommesCandidateId is nil", v21, 2u);
    MEMORY[0x1BA9E48C0](v21, -1, -1);
    swift_release();
    goto LABEL_34;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v16, v8, v9);
  uint64_t v28 = *(void (**)(uint64_t))(*(void *)v17 + 408);
  swift_retain();
  v28(13);
  (*(void (**)(uint64_t))(*(void *)v17 + 672))(1);
  uint64_t v29 = (*(uint64_t (**)(void))(*(void *)v17 + 384))(0);
  uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 872))(v29);
  if (v30)
  {
    (*(void (**)(void, void))(*(void *)v30 + 248))(0, 0);
    uint64_t v30 = swift_release();
  }
  uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 304))(v30);
  if (v31)
  {
    unint64_t v32 = specialized Sequence.compactMap<A>(_:)(v31);
    uint64_t v31 = swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v32 = MEMORY[0x1E4FBC860];
  }
  MEMORY[0x1F4188790](v31);
  *(&v72 - 4) = (uint64_t)v3;
  *(&v72 - 3) = (uint64_t)v16;
  *(&v72 - 2) = v17;
  *(&v72 - 1) = v32;
  id v33 = objc_allocWithZone((Class)type metadata accessor for FallbackToPommesMessage());
  uint64_t v34 = FallbackToPommesMessage.init(build:)();
  swift_bridgeObjectRelease();
  if (!v34)
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Logger.conversationBridge);
    os_log_type_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      id v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v53 = 0;
      _os_log_impl(&dword_1B9C64000, v51, v52, "Could not create FallbackToPommesMessage. Cannot fallback to server", v53, 2u);
      MEMORY[0x1BA9E48C0](v53, -1, -1);
      swift_release();

LABEL_49:
      (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
      return;
    }

    goto LABEL_48;
  }
  uint64_t v35 = (void *)v34;
  __swift_project_boxed_opaque_existential_1(v3 + 3, v3[6]);
  dispatch thunk of MessagePublishing.postMessage(_:)();
  if (one-time initialization token for insightRequestSummaryLogger != -1) {
    swift_once();
  }
  uint64_t v36 = type metadata accessor for InsightRequestSummaryLogger();
  uint64_t v37 = __swift_project_value_buffer(v36, (uint64_t)static Logger.insightRequestSummaryLogger);
  swift_retain();
  swift_retain();
  specialized InsightRequestSummaryLogger.emitDebug(_:)(v37, v3, v17);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 16))(v13, v16, v9);
  int v38 = (*(uint64_t (**)(uint64_t *, uint64_t))(v10 + 88))(v13, v9);
  if (v38 == *MEMORY[0x1E4F9FE50])
  {
    (*(void (**)(uint64_t *, uint64_t))(v10 + 96))(v13, v9);
    uint64_t v40 = *v13;
    unint64_t v39 = v13[1];
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain();
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      id v74 = v35;
      uint64_t v44 = swift_slowAlloc();
      uint64_t v73 = v40;
      uint64_t v45 = (uint8_t *)v44;
      uint64_t v46 = swift_slowAlloc();
      os_log_type_t v75 = v16;
      uint64_t v47 = v46;
      v77[0] = v46;
      *(_DWORD *)uint64_t v45 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v39, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v42, v43, "Posted FallbackToPommesMessage on the message bus for RC:%s", v45, 0xCu);
      swift_arrayDestroy();
      uint64_t v48 = v47;
      uint64_t v16 = v75;
      MEMORY[0x1BA9E48C0](v48, -1, -1);
      uint64_t v49 = v45;
LABEL_40:
      MEMORY[0x1BA9E48C0](v49, -1, -1);
      swift_release();

      goto LABEL_49;
    }

    swift_bridgeObjectRelease_n();
    goto LABEL_48;
  }
  if (v38 == *MEMORY[0x1E4F9FE58])
  {
    (*(void (**)(uint64_t *, uint64_t))(v10 + 96))(v13, v9);
    unint64_t v57 = v13[1];
    os_log_type_t v75 = (char *)*v13;
    uint64_t v59 = v13[2];
    unint64_t v58 = v13[3];
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v60 = type metadata accessor for Logger();
    __swift_project_value_buffer(v60, (uint64_t)static Logger.conversationBridge);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v61))
    {
      uint64_t v62 = swift_slowAlloc();
      uint64_t v72 = v59;
      uint64_t v63 = v62;
      uint64_t v73 = swift_slowAlloc();
      v77[0] = v73;
      *(_DWORD *)uint64_t v63 = 136315394;
      id v74 = v35;
      swift_bridgeObjectRetain();
      uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v75, v57, v77);
      os_log_type_t v75 = (char *)v9;
      uint64_t v76 = v64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v63 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v58, v77);
      uint64_t v9 = (uint64_t)v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v42, v61, "Posted FallbackToPommesMessage on the message bus for trpId:%s tcuId:%s", (uint8_t *)v63, 0x16u);
      uint64_t v65 = v73;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v65, -1, -1);
      uint64_t v49 = (uint8_t *)v63;
      goto LABEL_40;
    }

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

LABEL_48:
    swift_release();
    goto LABEL_49;
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v66 = type metadata accessor for Logger();
  __swift_project_value_buffer(v66, (uint64_t)static Logger.conversationBridge);
  uint64_t v67 = Logger.logObject.getter();
  os_log_type_t v68 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v67, v68))
  {
    uint64_t v69 = v35;
    uint64_t v70 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v70 = 0;
    _os_log_impl(&dword_1B9C64000, v67, v68, "Posted FallbackToPommesMessage on the message bus with unknown pommesCandidateId", v70, 2u);
    MEMORY[0x1BA9E48C0](v70, -1, -1);
    swift_release();
  }
  else
  {

    swift_release();
  }
  os_log_type_t v71 = *(void (**)(char *, uint64_t))(v10 + 8);
  v71(v16, v9);
  v71((char *)v13, v9);
}

uint64_t closure #1 in ServerFallbackCapableRequestProcessor.synchronizedFallbackToPommes(rcState:pommesCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v37 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1F4188790](v18 - 8);
  os_log_type_t v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *MEMORY[0x1E4FA2328];
  uint64_t v22 = type metadata accessor for MessageSource();
  uint64_t v23 = *(void *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 104))(v20, v21, v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  FallbackToPommesMessage.Builder.source.setter();
  swift_bridgeObjectRetain();
  FallbackToPommesMessage.Builder.assistantId.setter();
  uint64_t v24 = a2 + OBJC_IVAR____TtC14SiriKitRuntime32ConversationRequestProcessorBase_sessionId;
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v17, v24, v25);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v17, 0, 1, v25);
  FallbackToPommesMessage.Builder.sessionId.setter();
  swift_bridgeObjectRetain();
  FallbackToPommesMessage.Builder.requestId.setter();
  uint64_t v27 = type metadata accessor for PommesCandidateId();
  uint64_t v28 = *(void *)(v27 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v14, v37, v27);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v14, 0, 1, v27);
  FallbackToPommesMessage.Builder.pommesCandidateId.setter();
  uint64_t v29 = v38 + OBJC_IVAR____TtC14SiriKitRuntime20ResultCandidateState_userId;
  uint64_t v30 = type metadata accessor for UserID();
  uint64_t v31 = *(void *)(v30 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v11, v29, v30);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v11, 0, 1, v30);
  FallbackToPommesMessage.Builder.userId.setter();
  swift_bridgeObjectRetain();
  FallbackToPommesMessage.Builder.delegatedUserDialogActs.setter();
  uint64_t v32 = *MEMORY[0x1E4FA25F0];
  uint64_t v33 = type metadata accessor for ServerFallbackReason();
  uint64_t v34 = *(void *)(v33 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 104))(v8, v32, v33);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v8, 0, 1, v33);
  return FallbackToPommesMessage.Builder.fallbackReason.setter();
}

uint64_t closure #1 in closure #1 in closure #1 in ServerFallbackCapableRequestProcessor.submitAllFlowOutput(rcState:turn:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[10] = a6;
  v7[11] = a7;
  v7[8] = a4;
  v7[9] = a5;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v8 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in closure #1 in ServerFallbackCapableRequestProcessor.submitAllFlowOutput(rcState:turn:), v8, 0);
}

uint64_t closure #1 in closure #1 in closure #1 in ServerFallbackCapableRequestProcessor.submitAllFlowOutput(rcState:turn:)()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = (void *)v0[8];
  uint64_t v4 = *(void *)((char *)v3 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_instrumentationUtil);
  uint64_t v5 = (unsigned int *)(v0[9] + OBJC_IVAR____TtC14SiriKitRuntime37ConversationRequestProcessorTurnState_outputCounter);
  swift_beginAccess();
  uint64_t result = (*(uint64_t (**)(void, uint64_t, BOOL, void, void, void, void, uint64_t))(*(void *)v4 + 160))(*v5, 1, v2 != 0, v3[8], v3[9], v3[10], v3[11], v1);
  if (__OFADD__(*v5, 1))
  {
    __break(1u);
  }
  else
  {
    ++*v5;
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  return result;
}

uint64_t ServerFallbackCapableRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  return ServerFallbackCapableRequestProcessor.__allocating_init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           a29,
           (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, char, uint64_t, uint64_t, uint64_t))specialized ServerFallbackCapableRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:));
}

uint64_t ServerFallbackCapableRequestProcessor.__allocating_init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t (*a30)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *, char, uint64_t, uint64_t, uint64_t))
{
  uint64_t v30 = *(void *)(a29 + 24);
  uint64_t v31 = __swift_mutable_project_boxed_opaque_existential_1(a29, v30);
  uint64_t v32 = a30(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
          a20,
          a21,
          a22,
          a23,
          a24,
          a25,
          a26,
          a27,
          a28,
          v31);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a29);
  return v32;
}

void *ServerFallbackCapableRequestProcessor.__allocating_init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,unsigned __int8 a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  swift_allocObject();
  uint64_t v29 = specialized ServerFallbackCapableRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
          a20,
          a21,
          a22,
          a23,
          a24,
          a25,
          a26,
          a27,
          a28,
          a29);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  return v29;
}

void *ServerFallbackCapableRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,unsigned __int8 a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29 = specialized ServerFallbackCapableRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
          a20,
          a21,
          a22,
          a23,
          a24,
          a25,
          a26,
          a27,
          a28,
          a29);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  return v29;
}

uint64_t ServerFallbackCapableRequestProcessor.__ivar_destroyer()
{
  swift_release();
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_executeNLOnServerMessage));

  return swift_bridgeObjectRelease();
}

uint64_t ServerFallbackCapableRequestProcessor.deinit()
{
  uint64_t v0 = ConversationRequestProcessor.deinit();
  swift_release();
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_executeNLOnServerMessage));
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for ServerFallbackCapableRequestProcessing.handleExecuteNLOnServerMessage(_:) in conformance ServerFallbackCapableRequestProcessor()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1552))();
}

uint64_t protocol witness for ServerFallbackCapableRequestProcessing.handleAceFlowOutputCandidate(_:executionContextInfo:reply:) in conformance ServerFallbackCapableRequestProcessor()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1592))();
}

uint64_t protocol witness for ServerFallbackCapableRequestProcessing.handleAceRunSiriKitExecutor(_:executionContextInfo:plannerInvocationId:reply:) in conformance ServerFallbackCapableRequestProcessor()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1600))();
}

uint64_t protocol witness for ServerFallbackCapableRequestProcessing.handleAceServerContextUpdateCandidate(_:executionContextInfo:reply:) in conformance ServerFallbackCapableRequestProcessor()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 1608))();
}

uint64_t specialized ServerFallbackCapableRequestProcessor.makePreExecutionRulesBeforeRCSelection(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SiriInCallFeatureFlag();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = (void *)MEMORY[0x1E4FBC860];
  char v10 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 1504))(v7);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E4F9FD60], v5);
  char v11 = SiriInCallFeatureFlag.isEnabled.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  uint64_t v12 = type metadata accessor for HangUpRule();
  uint64_t v13 = (unsigned char *)swift_allocObject();
  v13[16] = 0;
  v13[17] = v10;
  v13[18] = v11 & 1;
  swift_beginAccess();
  uint64_t v14 = v35;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
  }
  unint64_t v16 = v14[2];
  unint64_t v15 = v14[3];
  if (v16 >= v15 >> 1) {
    uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v14);
  }
  uint64_t v33 = v12;
  uint64_t v34 = &protocol witness table for HangUpRule;
  *(void *)&long long v32 = v13;
  v14[2] = v16 + 1;
  outlined init with take of ReferenceResolutionClientProtocol(&v32, (uint64_t)&v14[5 * v16 + 4]);
  uint64_t v35 = v14;
  swift_endAccess();
  uint64_t v17 = *(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_networkAvailabilityProvider);
  uint64_t v18 = *(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime28ConversationRequestProcessor_coreTelephonyServiceProvider);
  uint64_t v19 = *(void **)(v1 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_executeNLOnServerMessage);
  if (v19)
  {
    swift_retain();
    id v20 = v19;
    swift_retain();
    ExecuteNLOnServerMessageBase.fallbackReason.getter();

    uint64_t v21 = type metadata accessor for ServerFallbackReason();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v4, 0, 1, v21);
  }
  else
  {
    uint64_t v22 = type metadata accessor for ServerFallbackReason();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v4, 1, 1, v22);
    swift_retain();
    swift_retain();
  }
  id v23 = objc_msgSend(self, sel_processInfo);
  uint64_t v24 = type metadata accessor for OfflineServerFallbackRule();
  uint64_t v25 = swift_allocObject();
  uint64_t v26 = (void *)(v25 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_processInfo);
  v26[3] = type metadata accessor for NSProcessInfo();
  v26[4] = &protocol witness table for NSProcessInfo;
  *uint64_t v26 = v23;
  *(unsigned char *)(v25 + 16) = 5;
  *(void *)(v25 + 24) = v17;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v4, v25 + OBJC_IVAR____TtC14SiriKitRuntime25OfflineServerFallbackRule_fallbackReason, &demangling cache variable for type metadata for ServerFallbackReason?);
  *(void *)(v25 + 32) = v18;
  swift_beginAccess();
  uint64_t v27 = v35;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
  }
  unint64_t v29 = v27[2];
  unint64_t v28 = v27[3];
  if (v29 >= v28 >> 1) {
    uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v28 > 1), v29 + 1, 1, v27);
  }
  uint64_t v33 = v24;
  uint64_t v34 = &protocol witness table for OfflineServerFallbackRule;
  *(void *)&long long v32 = v25;
  v27[2] = v29 + 1;
  outlined init with take of ReferenceResolutionClientProtocol(&v32, (uint64_t)&v27[5 * v29 + 4]);
  swift_endAccess();
  type metadata accessor for CompositePreExecutionRules();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v27;
  return result;
}

void *specialized ServerFallbackCapableRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,unsigned __int8 a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31)
{
  uint64_t v74 = a8;
  uint64_t v73 = a7;
  uint64_t v72 = a6;
  uint64_t v71 = a5;
  uint64_t v70 = a4;
  uint64_t v77 = a3;
  uint64_t v69 = a2;
  uint64_t v68 = a1;
  long long v67 = a12;
  uint64_t v66 = a15;
  uint64_t v65 = a16;
  int v64 = a17;
  uint64_t v63 = a18;
  uint64_t v62 = a19;
  uint64_t v59 = a24;
  int v58 = a25;
  uint64_t v56 = a26;
  uint64_t v55 = a27;
  uint64_t v57 = a23;
  uint64_t v60 = a13;
  uint64_t v75 = a14;
  uint64_t v76 = a11;
  uint64_t v61 = a9;
  uint64_t v49 = a10;
  uint64_t v54 = a31;
  uint64_t v53 = a30;
  uint64_t v31 = *(void *)(a30 - 8);
  uint64_t v52 = a28;
  MEMORY[0x1F4188790](a1);
  uint64_t v33 = (char *)&v47 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for UserID();
  uint64_t v34 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  uint64_t v36 = (char *)&v47 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for UUID();
  uint64_t v51 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50);
  uint64_t v38 = (char *)&v47 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((unsigned char *)a29 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_requestHandledOnServer) = 0;
  *(void *)((char *)a29
            + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_runSiriKitExecutorProcessor) = 0;
  *(void *)((char *)a29
            + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_executeNLOnServerMessage) = 0;
  *((unsigned char *)a29 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_isUserOnActivePhoneCall) = 2;
  *(void *)((char *)a29
            + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_gatedExecuteNLOnServer) = MEMORY[0x1E4FBC860];
  (*(void (**)(char *, uint64_t))(v39 + 16))(v38, v77);
  outlined init with copy of ReferenceResolutionClientProtocol(a10, (uint64_t)v82);
  outlined init with copy of ReferenceResolutionClientProtocol(v76, (uint64_t)v81);
  outlined init with copy of ReferenceResolutionClientProtocol(v75, (uint64_t)v80);
  outlined init with copy of ReferenceResolutionClientProtocol(a20, (uint64_t)v79);
  outlined init with copy of ReferenceResolutionClientProtocol(a21, (uint64_t)v78);
  uint64_t v40 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v36, a22, v48);
  uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
  uint64_t v42 = (uint64_t)v33;
  os_log_type_t v43 = v33;
  uint64_t v44 = v53;
  v41(v43, v52, v53);
  uint64_t v45 = specialized ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(v68, v69, (uint64_t)v38, v70, v71, v72, v73, v74, v61, (uint64_t)v82, (uint64_t)v81, (void *)v67, *((uint64_t *)&v67 + 1), v60, (uint64_t)v80, v66, v65, v64, v63,
          v62,
          (uint64_t)v79,
          (uint64_t)v78,
          (uint64_t)v36,
          v57,
          v59,
          v58,
          v56,
          v55,
          v42,
          a29,
          v44,
          v54);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(a22, v40);
  __swift_destroy_boxed_opaque_existential_1Tm(a21);
  __swift_destroy_boxed_opaque_existential_1Tm(a20);
  __swift_destroy_boxed_opaque_existential_1Tm(v75);
  __swift_destroy_boxed_opaque_existential_1Tm(v76);
  __swift_destroy_boxed_opaque_existential_1Tm(v49);
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v77, v50);
  return v45;
}

void *specialized ServerFallbackCapableRequestProcessor.__allocating_init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,unsigned __int8 a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  type metadata accessor for ServerFallbackCapableRequestProcessor();
  uint64_t v41 = (void *)swift_allocObject();

  return specialized ServerFallbackCapableRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24,
           a25,
           a26,
           a27,
           a28,
           v41,
           a30,
           a31);
}

uint64_t partial apply for closure #1 in ServerFallbackCapableRequestProcessor.handleAceFlowOutputCandidate(_:executionContextInfo:reply:)(uint64_t a1)
{
  return closure #1 in ServerFallbackCapableRequestProcessor.handleAceFlowOutputCandidate(_:executionContextInfo:reply:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1B9FDD964()
{
  return objectdestroyTm_8(MEMORY[0x1E4FBC8D0], 72);
}

uint64_t partial apply for closure #1 in ServerFallbackCapableRequestProcessor.handleAceRunSiriKitExecutor(_:executionContextInfo:plannerInvocationId:reply:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  char v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *char v10 = v2;
  v10[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in ServerFallbackCapableRequestProcessor.handleAceRunSiriKitExecutor(_:executionContextInfo:plannerInvocationId:reply:)(a1, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1B9FDDA5C()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B9FDDA94()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #1 in ServerFallbackCapableRequestProcessor.closeServerRequest(forExecutionRequestId:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  char v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *char v10 = v2;
  v10[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ServerFallbackCapableRequestProcessor.closeServerRequest(forExecutionRequestId:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t partial apply for closure #2 in ServerFallbackCapableRequestProcessor.synchronizedFallbackToServer(rcState:serverFallbackReason:)(uint64_t a1)
{
  return closure #2 in ServerFallbackCapableRequestProcessor.synchronizedFallbackToServer(rcState:serverFallbackReason:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t partial apply for closure #1 in ServerFallbackCapableRequestProcessor.synchronizedFallbackToServer(rcState:serverFallbackReason:)(uint64_t a1)
{
  return closure #1 in ServerFallbackCapableRequestProcessor.synchronizedFallbackToServer(rcState:serverFallbackReason:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #1 in ServerFallbackCapableRequestProcessor.synchronizedFallbackToPommes(rcState:pommesCandidateId:)(uint64_t a1)
{
  return closure #1 in ServerFallbackCapableRequestProcessor.synchronizedFallbackToPommes(rcState:pommesCandidateId:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

void *specialized ServerFallbackCapableRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,unsigned __int8 a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v72 = a7;
  uint64_t v73 = a8;
  uint64_t v70 = a5;
  uint64_t v71 = a6;
  uint64_t v68 = a2;
  uint64_t v69 = a4;
  uint64_t v52 = a3;
  uint64_t v67 = a1;
  long long v66 = a13;
  uint64_t v65 = a16;
  uint64_t v64 = a17;
  int v63 = a18;
  uint64_t v62 = a19;
  uint64_t v61 = a20;
  int v58 = a25;
  int v57 = a26;
  uint64_t v55 = a27;
  uint64_t v54 = a28;
  uint64_t v50 = a29;
  uint64_t v56 = a24;
  uint64_t v48 = a22;
  uint64_t v59 = a14;
  uint64_t v74 = a15;
  uint64_t v75 = a12;
  uint64_t v47 = a11;
  uint64_t v60 = a9;
  uint64_t v49 = a10;
  uint64_t v31 = type metadata accessor for UserID();
  uint64_t v45 = *(void *)(v31 - 8);
  uint64_t v32 = v45;
  uint64_t v46 = v31;
  MEMORY[0x1F4188790](v31);
  uint64_t v34 = (char *)&v44 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for UUID();
  uint64_t v53 = *(void *)(v51 - 8);
  MEMORY[0x1F4188790](v51);
  uint64_t v36 = (char *)&v44 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)(v29 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_requestHandledOnServer) = 0;
  *(void *)(v29 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_runSiriKitExecutorProcessor) = 0;
  *(void *)(v29 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_executeNLOnServerMessage) = 0;
  *(unsigned char *)(v29 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_isUserOnActivePhoneCall) = 2;
  *(void *)(v29 + OBJC_IVAR____TtC14SiriKitRuntime37ServerFallbackCapableRequestProcessor_gatedExecuteNLOnServer) = MEMORY[0x1E4FBC860];
  (*(void (**)(char *, uint64_t))(v37 + 16))(v36, a3);
  outlined init with copy of ReferenceResolutionClientProtocol(a10, (uint64_t)v82);
  outlined init with copy of ReferenceResolutionClientProtocol(a11, (uint64_t)v81);
  outlined init with copy of ReferenceResolutionClientProtocol(v75, (uint64_t)v80);
  outlined init with copy of ReferenceResolutionClientProtocol(v74, (uint64_t)v79);
  outlined init with copy of ReferenceResolutionClientProtocol(a21, (uint64_t)v78);
  uint64_t v38 = v48;
  outlined init with copy of ReferenceResolutionClientProtocol(v48, (uint64_t)v77);
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 16);
  uint64_t v40 = v46;
  v39(v34, a23, v46);
  uint64_t v41 = v50;
  outlined init with copy of ReferenceResolutionClientProtocol(v50, (uint64_t)v76);
  uint64_t v42 = specialized ConversationRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:executionClient:contextUpdater:executionOutputSubmitter:decisionMaker:preExecutionActionHandler:sessionState:instrumentationUtil:requestDispatcherServiceHelper:isFirstRequestInSession:networkAvailabilityProvider:coreTelephonyServiceProvider:rrClient:correctionsPlatformClient:sessionUserId:recentDialogTracker:muxContextMessage:isMUXEnabled:userSessionState:featureChecker:)(v67, v68, (uint64_t)v36, v69, v70, v71, v72, v73, v60, (uint64_t)v82, (uint64_t)v81, (uint64_t)v80, (void *)v66, *((uint64_t *)&v66 + 1), v59, (uint64_t)v79, v65, v64, v63,
          v62,
          v61,
          (uint64_t)v78,
          (uint64_t)v77,
          (uint64_t)v34,
          v56,
          v58,
          v57,
          v55,
          v54,
          (uint64_t)v76);
  __swift_destroy_boxed_opaque_existential_1Tm(v41);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(a23, v40);
  __swift_destroy_boxed_opaque_existential_1Tm(v38);
  __swift_destroy_boxed_opaque_existential_1Tm(a21);
  __swift_destroy_boxed_opaque_existential_1Tm(v74);
  __swift_destroy_boxed_opaque_existential_1Tm(v75);
  __swift_destroy_boxed_opaque_existential_1Tm(v47);
  __swift_destroy_boxed_opaque_existential_1Tm(v49);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v51);
  return v42;
}

uint64_t sub_1B9FDDFE8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1432))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1B9FDE040(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 1440))(*a1);
}

uint64_t sub_1B9FDE090@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1456))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FDE0E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 1464);
  uint64_t v3 = swift_retain();
  return v2(v3);
}

uint64_t sub_1B9FDE140@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1504))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FDE194(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 1512))(*a1);
}

uint64_t sub_1B9FDE1E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 1528))();
  *a2 = result;
  return result;
}

uint64_t sub_1B9FDE238(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(**(void **)a2 + 1536);
  uint64_t v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t ObjC metadata update function for ServerFallbackCapableRequestProcessor()
{
  return type metadata accessor for ServerFallbackCapableRequestProcessor();
}

uint64_t type metadata completion function for ServerFallbackCapableRequestProcessor()
{
  return swift_updateClassMetadata2();
}

uint64_t method lookup function for ServerFallbackCapableRequestProcessor(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ServerFallbackCapableRequestProcessor);
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.requestHandledOnServer.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1432))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.requestHandledOnServer.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1440))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.requestHandledOnServer.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1448))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.runSiriKitExecutorProcessor.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1456))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.runSiriKitExecutorProcessor.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1464))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.runSiriKitExecutorProcessor.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1472))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.isUserOnActivePhoneCall.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1504))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.isUserOnActivePhoneCall.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1512))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.isUserOnActivePhoneCall.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1520))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.gatedExecuteNLOnServer.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1528))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.gatedExecuteNLOnServer.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1536))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.gatedExecuteNLOnServer.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1544))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.handleExecuteNLOnServerMessage(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1552))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.shouldNotProceedWithServerFallback(preExecutionDecision:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1584))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.handleAceFlowOutputCandidate(_:executionContextInfo:reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1592))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.handleAceRunSiriKitExecutor(_:executionContextInfo:plannerInvocationId:reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1600))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.handleAceServerContextUpdateCandidate(_:executionContextInfo:reply:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1608))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.synchronizedFallbackToServer(rcState:serverFallbackReason:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1616))();
}

uint64_t dispatch thunk of ServerFallbackCapableRequestProcessor.synchronizedFallbackToPommes(rcState:pommesCandidateId:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 1624))();
}

uint64_t sub_1B9FDE660@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MEMORY[0x1BA9DE000]();
  *a1 = result;
  return result;
}

uint64_t sub_1B9FDE68C()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return MEMORY[0x1BA9DE010](v0);
}

unint64_t lazy protocol witness table accessor for type [Siri_Nlu_External_UserDialogAct] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [Siri_Nlu_External_UserDialogAct] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Siri_Nlu_External_UserDialogAct] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Siri_Nlu_External_UserDialogAct]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Siri_Nlu_External_UserDialogAct] and conformance [A]);
  }
  return result;
}

uint64_t sub_1B9FDE71C()
{
  return Siri_Nlu_External_UserDialogAct.delegated.getter();
}

uint64_t sub_1B9FDE744()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_1B9FDE78C()
{
  return objectdestroyTm_8(MEMORY[0x1E4FBC8B8], 64);
}

uint64_t objectdestroyTm_8(void (*a1)(void), uint64_t a2)
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  a1(*(void *)(v2 + 48));

  return MEMORY[0x1F4186498](v2, a2, 7);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in ServerFallbackCapableRequestProcessor.submitAllFlowOutput(rcState:turn:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  char v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *char v10 = v2;
  v10[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in closure #1 in closure #1 in ServerFallbackCapableRequestProcessor.submitAllFlowOutput(rcState:turn:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t dispatch thunk of ServerFallbackDisabling.shouldDisableServerFallbackWithTriggerLoggingAndABDecision(isDomainDirected:topNlParse:serverFallbackReason:executionRequestId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 8))();
}

uint64_t dispatch thunk of ServerFallbackDisabling.shouldDisableServerFallbackWithABDecision(isDomainDirected:topNlParse:serverFallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of ServerFallbackDisabling.logServerFallbackDeprecatedSelfEvent(forResultCandidateId:executionRequestId:serverFallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 24))();
}

uint64_t dispatch thunk of ServerFallbackDisabling.redirectFallbackAttempt(executionRequestId:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of ServerFallbackDisabling.redirectFallbackAttempt(executionRequestId:rootRequestId:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 40))();
}

void *ServerFallbackDisablingUtils.__allocating_init(selfEmitter:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)swift_allocObject();
  v4[2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  v4[3] = a1;
  v4[4] = a2;
  return v4;
}

id ServerFallbackDisablingUtils.shouldDisableServerFallbackWithTriggerLoggingAndABDecision(isDomainDirected:topNlParse:serverFallbackReason:executionRequestId:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((specialized ServerFallbackDisablingUtils.shouldDisableServerFallback(isDomainDirected:topNlParse:serverFallbackReason:)(a1, a2, a3) & 1) == 0)return 0; {
  uint64_t v14 = type metadata accessor for TaskPriority();
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  unint64_t v15 = (void *)swift_allocObject();
  _OWORD v15[2] = 0;
  v15[3] = 0;
  v15[4] = v5;
  v15[5] = a4;
  v15[6] = a5;
  swift_retain();
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v13, (uint64_t)&async function pointer to partial apply for closure #1 in ServerFallbackDisablingUtils.shouldDisableServerFallbackWithTriggerLoggingAndABDecision(isDomainDirected:topNlParse:serverFallbackReason:executionRequestId:), (uint64_t)v15);
  swift_release();
  id v16 = objc_msgSend(self, sel_sharedPreferences);
  id v17 = objc_msgSend(v16, sel_shouldDisableServerFallbackDomain);

  return v17;
}

uint64_t one-time initialization function for fallbackDisabledOverride()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ManagedBuffer<Bool?, os_unfair_lock_s>);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(unsigned char *)(result + 16) = 2;
  static ServerFallbackDisablingUtils.fallbackDisabledOverride = result;
  return result;
}

uint64_t static ServerFallbackDisablingUtils.fallbackDisabledOverride.getter()
{
  if (one-time initialization token for fallbackDisabledOverride != -1) {
    swift_once();
  }

  return swift_retain();
}

void *ServerFallbackDisablingUtils.init(selfEmitter:)(uint64_t a1, uint64_t a2)
{
  v2[2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  v2[3] = a1;
  v2[4] = a2;
  return v2;
}

uint64_t closure #1 in ServerFallbackDisablingUtils.shouldDisableServerFallbackWithTriggerLoggingAndABDecision(isDomainDirected:topNlParse:serverFallbackReason:executionRequestId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v10 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v10;
  *char v10 = v6;
  v10[3] = a6;
  v10[4] = a4;
  v10[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  void v10[2] = a5;
  return MEMORY[0x1F4188298](ServerFallbackDisablingUtils.emitTriggerLoggingForServerFallbackExperiment(requestID:), 0, 0);
}

uint64_t ServerFallbackDisablingUtils.emitTriggerLoggingForServerFallbackExperiment(requestID:)(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return MEMORY[0x1F4188298](ServerFallbackDisablingUtils.emitTriggerLoggingForServerFallbackExperiment(requestID:), 0, 0);
}

uint64_t ServerFallbackDisablingUtils.emitTriggerLoggingForServerFallbackExperiment(requestID:)()
{
  id v1 = objc_allocWithZone(MEMORY[0x1E4F29128]);
  uint64_t v2 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000024, 0x80000001BA06D6C0);
  id v3 = objc_msgSend(v1, sel_initWithUUIDString_, v2);
  v0[5] = v3;

  if (v3)
  {
    uint64_t v5 = v0[2];
    uint64_t v4 = v0[3];
    id v6 = objc_allocWithZone(MEMORY[0x1E4F29128]);
    swift_bridgeObjectRetain();
    uint64_t v7 = (void *)MEMORY[0x1BA9E2DD0](v5, v4);
    swift_bridgeObjectRelease();
    id v8 = objc_msgSend(v6, sel_initWithUUIDString_, v7);
    v0[6] = v8;

    if (v8)
    {
      uint64_t v9 = (void *)swift_task_alloc();
      v0[7] = v9;
      void *v9 = v0;
      v9[1] = ServerFallbackDisablingUtils.emitTriggerLoggingForServerFallbackExperiment(requestID:);
      uint64_t v10 = v0[4];
      v9[19] = v8;
      v9[20] = v10;
      v9[17] = 0xD000000000000026;
      v9[18] = 0x80000001BA06D6F0;
      v9[16] = v3;
      return MEMORY[0x1F4188298](ServerFallbackDisablingUtils.emitTriggerWithCachingForUUID(codePathId:namespace:requestID:), 0, 0);
    }
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl(&dword_1B9C64000, v12, v13, "[ServerFallbackDisablingUtils] Unable to emit trigger logging due to invalid IDs", v14, 2u);
    MEMORY[0x1BA9E48C0](v14, -1, -1);
  }

  unint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](ServerFallbackDisablingUtils.emitTriggerLoggingForServerFallbackExperiment(requestID:), 0, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  id v1 = *(void **)(v0 + 40);

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t ServerFallbackDisablingUtils.logServerFallbackDeprecatedSelfEvent(forResultCandidateId:executionRequestId:serverFallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for ServerFallbackReason();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = a5;
  uint64_t v21 = v20;
  outlined init with copy of ReferenceResolutionClientProtocol?(v19, (uint64_t)v14, &demangling cache variable for type metadata for ServerFallbackReason?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v21) == 1)
  {
    (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, *MEMORY[0x1E4FA25F0], v21);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for ServerFallbackReason?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v21);
  }
  uint64_t v22 = specialized ServerFallbackDisablingUtils.createServerFallbackDeprecatedEvent(requestId:resultCandidateId:serverFallbackReason:)(a3, a4, a1, a2, (uint64_t)v18);
  if (v22)
  {
    id v23 = v22;
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.instrumentation);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_1B9C64000, v25, v26, "[ServerFallbackDisablingUtils] ServerFallbackDeprecatedSelfEvent", v27, 2u);
      MEMORY[0x1BA9E48C0](v27, -1, -1);
    }

    (*(void (**))(v6 + 24))(v23);
  }
  else
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.instrumentation);
    id v23 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl(&dword_1B9C64000, v23, v29, "[ServerFallbackDisablingUtils] ServerFallbackDeprecatedSelfEvent failed to generate event", v30, 2u);
      MEMORY[0x1BA9E48C0](v30, -1, -1);
    }
  }

  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v21);
}

uint64_t ServerFallbackDisablingUtils.emitTriggerWithCachingForUUID(codePathId:namespace:requestID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[19] = a4;
  v5[20] = v4;
  v5[17] = a2;
  v5[18] = a3;
  v5[16] = a1;
  return MEMORY[0x1F4188298](ServerFallbackDisablingUtils.emitTriggerWithCachingForUUID(codePathId:namespace:requestID:), 0, 0);
}

uint64_t ServerFallbackDisablingUtils.emitTriggerWithCachingForUUID(codePathId:namespace:requestID:)()
{
  uint64_t v32 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  id v1 = (id *)(v0 + 16);
  uint64_t v2 = (void *)v0[16];
  id v3 = (void *)v0[19];
  uint64_t v4 = type metadata accessor for Logger();
  v0[21] = __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  id v5 = v2;
  swift_bridgeObjectRetain_n();
  id v6 = v3;
  id v7 = v5;
  id v8 = v6;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  unint64_t v12 = v0[18];
  uint64_t v13 = (void *)v0[19];
  if (v11)
  {
    uint64_t v14 = (void *)v0[16];
    uint64_t v26 = v0[17];
    log = v9;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v25 = (void *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    uint64_t v31 = v29;
    *(_DWORD *)uint64_t v15 = 138412802;
    v0[13] = v14;
    os_log_type_t type = v10;
    id v16 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v25 = v14;

    *(_WORD *)(v15 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v12, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v15 + 22) = 2112;
    v0[15] = v13;
    id v17 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v25[1] = v13;

    _os_log_impl(&dword_1B9C64000, log, type, "[ServerFallbackDisablingUtils] Attempting to emit trigger logging for codePathID: %@, namespace: %s, request: %@ ", (uint8_t *)v15, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v25, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v29, -1, -1);
    MEMORY[0x1BA9E48C0](v15, -1, -1);
  }
  else
  {
    id v18 = *v1;

    swift_bridgeObjectRelease_n();
  }
  uint64_t v20 = v0[17];
  uint64_t v19 = v0[18];
  v0[22] = *(void *)(v0[20] + 16);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v21 = swift_allocObject();
  v0[23] = v21;
  *(_OWORD *)(v21 + 16) = xmmword_1BA04FD90;
  *(void *)(v21 + 32) = v20;
  *(void *)(v21 + 40) = v19;
  uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t))((int)*MEMORY[0x1E4F472C8] + MEMORY[0x1E4F472C8]);
  swift_bridgeObjectRetain();
  uint64_t v22 = (void *)swift_task_alloc();
  v0[24] = v22;
  *uint64_t v22 = v0;
  v22[1] = ServerFallbackDisablingUtils.emitTriggerWithCachingForUUID(codePathId:namespace:requestID:);
  uint64_t v23 = v0[16];
  return v30(v23, v21);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  uint64_t v2 = (void *)*v1;
  v2[25] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](ServerFallbackDisablingUtils.emitTriggerWithCachingForUUID(codePathId:namespace:requestID:), 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    id v3 = v2[19];
    id v7 = (uint64_t (*)(uint64_t, uint64_t))((int)*MEMORY[0x1E4F472C0] + MEMORY[0x1E4F472C0]);
    uint64_t v4 = (void *)swift_task_alloc();
    v2[26] = v4;
    *uint64_t v4 = v2;
    v4[1] = ServerFallbackDisablingUtils.emitTriggerWithCachingForUUID(codePathId:namespace:requestID:);
    id v5 = v2[16];
    return v7(v5, v3);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = ServerFallbackDisablingUtils.emitTriggerWithCachingForUUID(codePathId:namespace:requestID:);
  }
  else {
    uint64_t v2 = ServerFallbackDisablingUtils.emitTriggerWithCachingForUUID(codePathId:namespace:requestID:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t (*v16)(void);
  uint64_t v18;
  void *v19;
  NSObject *log;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  uint64_t v23 = v0;
  id v1 = *(void **)(v0 + 152);
  uint64_t v2 = *(id *)(v0 + 128);
  swift_bridgeObjectRetain_n();
  id v3 = v1;
  uint64_t v4 = v2;
  id v5 = v3;
  id v6 = Logger.logObject.getter();
  id v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    id v8 = *(void *)(v0 + 144);
    uint64_t v19 = *(void **)(v0 + 152);
    log = v6;
    uint64_t v9 = *(void **)(v0 + 128);
    id v18 = *(void *)(v0 + 136);
    os_log_type_t v10 = swift_slowAlloc();
    BOOL v11 = (void *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    uint64_t v22 = v21;
    *(void *)(v0 + 48) = v9;
    *(_DWORD *)os_log_type_t v10 = 138412802;
    unint64_t v12 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *BOOL v11 = v9;

    *(_WORD *)(v10 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v8, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 22) = 2112;
    *(void *)(v0 + 64) = v19;
    uint64_t v13 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v11[1] = v19;

    _os_log_impl(&dword_1B9C64000, log, v7, "[ServerFallbackDisablingUtils] Emit trigger logging successfully for codePathID: %@, namespace: %s, request: %@ ", (uint8_t *)v10, 0x20u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v11, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v21, -1, -1);
    MEMORY[0x1BA9E48C0](v10, -1, -1);
  }
  else
  {
    uint64_t v14 = *(void **)(v0 + 152);
    uint64_t v15 = *(void **)(v0 + 128);

    swift_bridgeObjectRelease_n();
  }
  id v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  NSObject *loga;
  os_log_t log;
  uint64_t v33;
  void *v34;
  uint64_t v35;

  uint64_t v34 = v0;
  id v1 = (void *)v0[25];
  uint64_t v2 = (void *)v0[19];
  id v3 = (void *)v0[16];
  swift_bridgeObjectRelease();
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  id v5 = v2;
  id v6 = v1;
  id v7 = v4;
  swift_bridgeObjectRetain();
  id v8 = v5;
  uint64_t v9 = v1;
  os_log_type_t v10 = Logger.logObject.getter();
  BOOL v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v29 = (id)v0[25];
    unint64_t v12 = v0[18];
    uint64_t v28 = (void *)v0[19];
    uint64_t v27 = v0[17];
    loga = v10;
    uint64_t v13 = (void *)v0[16];
    uint64_t v14 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    v0[9] = v13;
    uint64_t v33 = v30;
    *(_DWORD *)uint64_t v14 = 138413058;
    id v16 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v15 = v13;

    *(_WORD *)(v14 + 12) = 2080;
    swift_bridgeObjectRetain();
    v0[10] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v12, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v14 + 22) = 2112;
    v0[11] = v28;
    id v17 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v15[1] = v28;

    *(_WORD *)(v14 + 32) = 2112;
    id v18 = v29;
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
    v0[12] = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _OWORD v15[2] = v19;

    _os_log_impl(&dword_1B9C64000, loga, v11, "[ServerFallbackDisablingUtils] Unable to cache trial experiment IDs for codePathID: %@, namespace: %s, request: %@, error: %@", (uint8_t *)v14, 0x2Au);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v15, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v30, -1, -1);
    MEMORY[0x1BA9E48C0](v14, -1, -1);
  }
  else
  {
    uint64_t v20 = (void *)v0[25];
    uint64_t v21 = (void *)v0[19];
    uint64_t v22 = (void *)v0[16];

    swift_bridgeObjectRelease_n();
  }
  uint64_t v23 = v0[19];
  log = (os_log_t)((int)*MEMORY[0x1E4F472C0] + MEMORY[0x1E4F472C0]);
  uint64_t v24 = (void *)swift_task_alloc();
  v0[26] = v24;
  *uint64_t v24 = v0;
  v24[1] = ServerFallbackDisablingUtils.emitTriggerWithCachingForUUID(codePathId:namespace:requestID:);
  uint64_t v25 = v0[16];
  return ((uint64_t (*)(uint64_t, uint64_t))log)(v25, v23);
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  unint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t (*v22)(void);
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  NSObject *log;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  uint64_t v30 = v0;
  id v1 = *(void **)(v0 + 216);
  uint64_t v2 = *(void **)(v0 + 152);
  id v3 = *(id *)(v0 + 128);
  swift_bridgeObjectRetain();
  uint64_t v4 = v2;
  id v5 = v1;
  id v6 = v3;
  swift_bridgeObjectRetain();
  id v7 = v4;
  id v8 = v1;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v26 = *(id *)(v0 + 216);
    BOOL v11 = *(void *)(v0 + 144);
    uint64_t v25 = *(void **)(v0 + 152);
    uint64_t v24 = *(void *)(v0 + 136);
    log = v9;
    unint64_t v12 = *(void **)(v0 + 128);
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(void *)(v0 + 16) = v12;
    uint64_t v29 = v27;
    *(_DWORD *)uint64_t v13 = 138413058;
    uint64_t v15 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v12;

    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v11, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v13 + 22) = 2112;
    *(void *)(v0 + 32) = v25;
    id v16 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v14[1] = v25;

    *(_WORD *)(v13 + 32) = 2112;
    id v17 = v26;
    id v18 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 40) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v14[2] = v18;

    _os_log_impl(&dword_1B9C64000, log, v10, "[ServerFallbackDisablingUtils] Unable to emit trigger logging for codePathID: %@, namespace: %s, request: %@, error: %@", (uint8_t *)v13, 0x2Au);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v14, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v27, -1, -1);
    MEMORY[0x1BA9E48C0](v13, -1, -1);
  }
  else
  {
    uint64_t v19 = *(void **)(v0 + 216);
    uint64_t v20 = *(void **)(v0 + 152);
    uint64_t v21 = *(void **)(v0 + 128);

    swift_bridgeObjectRelease_n();
  }
  uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t ServerFallbackDisablingUtils.redirectFallbackAttempt(executionRequestId:rcId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return ServerFallbackDisablingUtils.redirectFallbackAttempt(executionRequestId:rootRequestId:rcId:)(a1, a2, 0, 0, a3, a4, a5);
}

uint64_t ServerFallbackDisablingUtils.redirectFallbackAttempt(executionRequestId:rootRequestId:rcId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = v7;
  uint64_t v54 = a5;
  uint64_t v55 = a6;
  uint64_t v52 = a3;
  uint64_t v53 = a4;
  uint64_t v56 = a7;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v51 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  id v18 = (char *)&v45 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Siri_Nlu_External_UserParse();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  uint64_t v23 = *MEMORY[0x1E4FA25F0];
  uint64_t v24 = type metadata accessor for ServerFallbackReason();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(void (**)(char *, void, uint64_t))(v25 + 104);
  unsigned int v50 = v23;
  uint64_t v49 = v26;
  v26(v18, v23, v24);
  uint64_t v27 = *(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56);
  v27(v18, 0, 1, v24);
  if ((specialized ServerFallbackDisablingUtils.shouldDisableServerFallback(isDomainDirected:topNlParse:serverFallbackReason:)(1, (uint64_t)v21, (uint64_t)v18) & 1) == 0)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v18, &demangling cache variable for type metadata for ServerFallbackReason?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    goto LABEL_11;
  }
  uint64_t v47 = (void (*)(uint64_t, void, uint64_t, uint64_t))v27;
  uint64_t v28 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v13, 1, 1, v28);
  uint64_t v29 = (void *)swift_allocObject();
  _OWORD v29[2] = 0;
  v29[3] = 0;
  v29[4] = v8;
  v29[5] = a1;
  uint64_t v46 = a1;
  v29[6] = a2;
  uint64_t v48 = v8;
  swift_retain();
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v13, (uint64_t)&closure #1 in ServerFallbackDisablingUtils.shouldDisableServerFallbackWithTriggerLoggingAndABDecision(isDomainDirected:topNlParse:serverFallbackReason:executionRequestId:)partial apply, (uint64_t)v29);
  swift_release();
  id v30 = objc_msgSend(self, sel_sharedPreferences);
  unsigned int v31 = objc_msgSend(v30, sel_shouldDisableServerFallbackDomain);

  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v18, &demangling cache variable for type metadata for ServerFallbackReason?);
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  if (!v31)
  {
LABEL_11:
    uint64_t v44 = type metadata accessor for ConversationCommitResult();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v56, 1, 1, v44);
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Logger.executor);
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.info.getter();
  BOOL v35 = os_log_type_enabled(v33, v34);
  uint64_t v36 = v52;
  if (v35)
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v37 = 0;
    _os_log_impl(&dword_1B9C64000, v33, v34, "[ServerFallbackDisablingUtils] Server fallback disabled; redirect to gibberish response",
      v37,
      2u);
    MEMORY[0x1BA9E48C0](v37, -1, -1);
  }

  uint64_t v38 = v53;
  uint64_t v39 = v47;
  if (!v53)
  {
    swift_bridgeObjectRetain();
    uint64_t v36 = v46;
    uint64_t v38 = a2;
  }
  uint64_t v40 = (uint64_t)v51;
  v49(v51, v50, v24);
  v39(v40, 0, 1, v24);
  swift_bridgeObjectRetain();
  ServerFallbackDisablingUtils.logServerFallbackDeprecatedSelfEvent(forResultCandidateId:executionRequestId:serverFallbackReason:)(v54, v55, v36, v38, v40);
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v40, &demangling cache variable for type metadata for ServerFallbackReason?);
  uint64_t v41 = v56;
  static ServerFallbackDisablingUtils.createCAMFallbackConversationCommitResult()(v56);
  uint64_t v42 = type metadata accessor for ConversationCommitResult();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v41, 0, 1, v42);
}

uint64_t static ServerFallbackDisablingUtils.createCAMFallbackConversationCommitResult()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v1 = type metadata accessor for Parse();
  uint64_t v24 = *(void *)(v1 - 8);
  uint64_t v25 = v1;
  MEMORY[0x1F4188790](v1);
  uint64_t v23 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Input();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v22 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for HandcraftedPluginManifestEntry();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PluginAction();
  uint64_t v20 = *(void *)(v9 - 8);
  uint64_t v21 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v19 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Parse.DirectInvocation();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v15 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of static ServerFallbackDisablingUtils.createCAMFallbackConversationCommitResult());
  static CamDirectInvocationIdentifiers.fallback.getter();
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v15);
  swift_bridgeObjectRelease();
  Parse.DirectInvocation.init(identifier:userData:)();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E4FA1E68], v5);
  HandcraftedPluginManifestEntry.rawValue.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v16 = v23;
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v23, v14, v11);
  (*(void (**)(char *, void, uint64_t))(v24 + 104))(v16, *MEMORY[0x1E4FA1F38], v25);
  Input.init(parse:)();
  uint64_t v17 = v19;
  PluginAction.init(flowHandlerId:input:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v26, v17, v21);
  type metadata accessor for ConversationCommitResult();
  return swift_storeEnumTagMultiPayload();
}

uint64_t ServerFallbackDisablingUtils.deinit()
{
  swift_release();
  return v0;
}

uint64_t ServerFallbackDisablingUtils.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

unint64_t protocol witness for ServerFallbackDisabling.shouldDisableServerFallbackWithTriggerLoggingAndABDecision(isDomainDirected:topNlParse:serverFallbackReason:executionRequestId:) in conformance ServerFallbackDisablingUtils(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (unint64_t)ServerFallbackDisablingUtils.shouldDisableServerFallbackWithTriggerLoggingAndABDecision(isDomainDirected:topNlParse:serverFallbackReason:executionRequestId:)(a1, a2, a3, a4, a5) & 1;
}

uint64_t protocol witness for ServerFallbackDisabling.logServerFallbackDeprecatedSelfEvent(forResultCandidateId:executionRequestId:serverFallbackReason:) in conformance ServerFallbackDisablingUtils(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return ServerFallbackDisablingUtils.logServerFallbackDeprecatedSelfEvent(forResultCandidateId:executionRequestId:serverFallbackReason:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for ServerFallbackDisabling.redirectFallbackAttempt(executionRequestId:rcId:) in conformance ServerFallbackDisablingUtils@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return ServerFallbackDisablingUtils.redirectFallbackAttempt(executionRequestId:rootRequestId:rcId:)(a1, a2, 0, 0, a3, a4, a5);
}

uint64_t protocol witness for ServerFallbackDisabling.redirectFallbackAttempt(executionRequestId:rootRequestId:rcId:) in conformance ServerFallbackDisablingUtils@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return ServerFallbackDisablingUtils.redirectFallbackAttempt(executionRequestId:rootRequestId:rcId:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t specialized ServerFallbackDisablingUtils.shouldDisableServerFallback(isDomainDirected:topNlParse:serverFallbackReason:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v76 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v74 = (uint64_t)&v71 - v10;
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v71 - v12;
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (char *)&v71 - v15;
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v19 = (char *)&v71 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v72 = (uint64_t)&v71 - v20;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v23 = (char *)&v71 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v24 = objc_msgSend(self, sel_sharedPreferences);
  id v25 = objc_msgSend(v24, sel_languageCode);

  if (v25)
  {
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v28 = v27;
  }
  else
  {
    uint64_t v26 = 0;
    unint64_t v28 = 0xE000000000000000;
  }
  uint64_t v29 = self;
  uint64_t v75 = v26;
  id v30 = (void *)MEMORY[0x1BA9E2DD0](v26, v28);
  unsigned int v31 = &selRef_isDomainServerFallbackDisabledForLocale_;
  int v73 = a1;
  if ((a1 & 1) == 0) {
    unsigned int v31 = &selRef_isNLServerFallbackDisabledForLocale_;
  }
  unsigned __int8 v32 = objc_msgSend(v29, *v31, v30);

  outlined init with copy of ReferenceResolutionClientProtocol?(a2, (uint64_t)v23, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  uint64_t v33 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v23, 1, v33) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v23, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  }
  else
  {
    char v35 = Siri_Nlu_External_UserParse.isNlv3FallbackException.getter();
    (*(void (**)(char *, uint64_t))(v34 + 8))(v23, v33);
    if (v35)
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      __swift_project_value_buffer(v36, (uint64_t)static Logger.executor);
      uint64_t v37 = v72;
      outlined init with copy of ReferenceResolutionClientProtocol?(v76, v72, &demangling cache variable for type metadata for ServerFallbackReason?);
      swift_bridgeObjectRetain();
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.debug.getter();
      BOOL v40 = os_log_type_enabled(v38, v39);
      uint64_t v41 = v75;
      if (v40)
      {
        uint64_t v42 = swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        uint64_t v78 = v43;
        *(_DWORD *)uint64_t v42 = 136315650;
        swift_bridgeObjectRetain();
        uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v28, &v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v42 + 12) = 1024;
        LODWORD(v77) = v73 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v42 + 18) = 2080;
        outlined init with copy of ReferenceResolutionClientProtocol?(v37, (uint64_t)v19, &demangling cache variable for type metadata for ServerFallbackReason?);
        uint64_t v44 = type metadata accessor for ServerFallbackReason();
        uint64_t v45 = *(void *)(v44 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v19, 1, v44) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v19, &demangling cache variable for type metadata for ServerFallbackReason?);
          uint64_t v46 = 0;
          unint64_t v47 = 0xE000000000000000;
        }
        else
        {
          uint64_t v46 = ServerFallbackReason.rawValue.getter();
          unint64_t v47 = v70;
          (*(void (**)(char *, uint64_t))(v45 + 8))(v19, v44);
        }
        uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v78);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ReferenceResolutionClientProtocol?(v37, &demangling cache variable for type metadata for ServerFallbackReason?);
        os_log_type_t v68 = v39;
        uint64_t v69 = "[ServerFallbackDisablingUtils] shouldDisableServerFallback check for inputLocale =  %s, isDomainDirected ="
              " %{BOOL}d, serverFallbackReason = %s returns false due to fallback exception";
        goto LABEL_36;
      }
      swift_bridgeObjectRelease_n();
      uint64_t v64 = v37;
LABEL_28:
      outlined destroy of ReferenceResolutionClientProtocol?(v64, &demangling cache variable for type metadata for ServerFallbackReason?);
LABEL_37:

      return 0;
    }
  }
  if ((v32 & 1) == 0)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v58 = type metadata accessor for Logger();
    __swift_project_value_buffer(v58, (uint64_t)static Logger.executor);
    outlined init with copy of ReferenceResolutionClientProtocol?(v76, (uint64_t)v16, &demangling cache variable for type metadata for ServerFallbackReason?);
    swift_bridgeObjectRetain();
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v59))
    {
      uint64_t v42 = swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      uint64_t v78 = v43;
      *(_DWORD *)uint64_t v42 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v28, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v42 + 12) = 1024;
      LODWORD(v77) = v73 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 18) = 2080;
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v16, (uint64_t)v13, &demangling cache variable for type metadata for ServerFallbackReason?);
      uint64_t v60 = type metadata accessor for ServerFallbackReason();
      uint64_t v61 = *(void *)(v60 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v13, 1, v60) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v13, &demangling cache variable for type metadata for ServerFallbackReason?);
        uint64_t v62 = 0;
        unint64_t v63 = 0xE000000000000000;
      }
      else
      {
        uint64_t v62 = ServerFallbackReason.rawValue.getter();
        unint64_t v63 = v67;
        (*(void (**)(char *, uint64_t))(v61 + 8))(v13, v60);
      }
      uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for ServerFallbackReason?);
      os_log_type_t v68 = v59;
      uint64_t v69 = "[ServerFallbackDisablingUtils] shouldDisableServerFallback check for inputLocale =  %s, isDomainDirected = %"
            "{BOOL}d, serverFallbackReason = %s returns false due to feature flag";
LABEL_36:
      _os_log_impl(&dword_1B9C64000, v38, v68, v69, (uint8_t *)v42, 0x1Cu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v43, -1, -1);
      MEMORY[0x1BA9E48C0](v42, -1, -1);
      goto LABEL_37;
    }
    swift_bridgeObjectRelease_n();
    uint64_t v64 = (uint64_t)v16;
    goto LABEL_28;
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v48 = type metadata accessor for Logger();
  __swift_project_value_buffer(v48, (uint64_t)static Logger.executor);
  uint64_t v49 = v74;
  outlined init with copy of ReferenceResolutionClientProtocol?(v76, v74, &demangling cache variable for type metadata for ServerFallbackReason?);
  swift_bridgeObjectRetain();
  unsigned int v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v52 = swift_slowAlloc();
    uint64_t v53 = swift_slowAlloc();
    uint64_t v78 = v53;
    *(_DWORD *)uint64_t v52 = 136315650;
    swift_bridgeObjectRetain();
    uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v28, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v52 + 12) = 1024;
    LODWORD(v77) = v73 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v52 + 18) = 2080;
    outlined init with copy of ReferenceResolutionClientProtocol?(v49, (uint64_t)v8, &demangling cache variable for type metadata for ServerFallbackReason?);
    uint64_t v54 = type metadata accessor for ServerFallbackReason();
    uint64_t v55 = *(void *)(v54 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v8, 1, v54) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for ServerFallbackReason?);
      uint64_t v56 = 0;
      unint64_t v57 = 0xE000000000000000;
    }
    else
    {
      uint64_t v56 = ServerFallbackReason.rawValue.getter();
      unint64_t v57 = v65;
      (*(void (**)(char *, uint64_t))(v55 + 8))(v8, v54);
    }
    uint64_t v77 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?(v74, &demangling cache variable for type metadata for ServerFallbackReason?);
    _os_log_impl(&dword_1B9C64000, v50, v51, "[ServerFallbackDisablingUtils] shouldDisableServerFallback check for inputLocale =  %s, isDomainDirected = %{BOOL}d, serverFallbackReason = %s returns true", (uint8_t *)v52, 0x1Cu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v53, -1, -1);
    MEMORY[0x1BA9E48C0](v52, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    outlined destroy of ReferenceResolutionClientProtocol?(v49, &demangling cache variable for type metadata for ServerFallbackReason?);
  }

  return 1;
}

id specialized ServerFallbackDisablingUtils.shouldDisableServerFallbackWithABDecision(isDomainDirected:topNlParse:serverFallbackReason:)(char a1, uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for fallbackDisabledOverride != -1) {
    swift_once();
  }
  uint64_t v6 = (unsigned char *)(static ServerFallbackDisablingUtils.fallbackDisabledOverride + 16);
  uint64_t v7 = (os_unfair_lock_s *)(static ServerFallbackDisablingUtils.fallbackDisabledOverride + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static ServerFallbackDisablingUtils.fallbackDisabledOverride + 20));
  closure #1 in AceServiceInvokerImpl.performSubmit(_:bargeInResult:executionSource:)(v6, &v11);
  os_unfair_lock_unlock(v7);
  if (v11 != 2) {
    return (id)(v11 & 1);
  }
  if ((specialized ServerFallbackDisablingUtils.shouldDisableServerFallback(isDomainDirected:topNlParse:serverFallbackReason:)(a1 & 1, a2, a3) & 1) == 0)return 0; {
  id v8 = objc_msgSend(self, sel_sharedPreferences);
  }
  id v9 = objc_msgSend(v8, sel_shouldDisableServerFallbackDomain);

  return v9;
}

uint64_t specialized ServerFallbackDisablingUtils.mapServerFallbackReasonToLoggingReason(serverFallbackReason:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ServerFallbackReason();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  int v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == *MEMORY[0x1E4FA25D8]) {
    return 5;
  }
  if (v6 == *MEMORY[0x1E4FA25E0]) {
    return 4;
  }
  if (v6 == *MEMORY[0x1E4FA25C8]) {
    return 2;
  }
  if (v6 == *MEMORY[0x1E4FA25F0]) {
    return 3;
  }
  if (v6 == *MEMORY[0x1E4FA25D0]) {
    return 1;
  }
  if (v6 == *MEMORY[0x1E4FA25E8]) {
    return 6;
  }
  if (v6 != *MEMORY[0x1E4FA25F8]) {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return 0;
}

void *specialized ServerFallbackDisablingUtils.createServerFallbackDeprecatedEvent(requestId:resultCandidateId:serverFallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_1B9C64000, v16, v17, "[ServerFallbackDisablingUtils] Invalid requestId when logging nlV3ServerFallbackDeprecated", v18, 2u);
      MEMORY[0x1BA9E48C0](v18, -1, -1);
    }

    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
  id v19 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v21 = objc_msgSend(v19, sel_initWithNSUUID_, isa);

  id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0D50]), sel_init);
  uint64_t v23 = v22;
  if (v22)
  {
    objc_msgSend(v22, sel_setRequestId_, v21);
    id v24 = v23;
    if (a4) {
      id v25 = (void *)MEMORY[0x1BA9E2DD0](a3, a4);
    }
    else {
      id v25 = 0;
    }
    objc_msgSend(v23, sel_setResultCandidateId_, v25);
  }
  id v26 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0D38]), sel_init);
  if (!v26)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.executor);
    unsigned int v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl(&dword_1B9C64000, v31, v32, "[ServerFallbackDisablingUtils] Failed to create orchestrationEventWrapper when logging nlV3ServerFallbackDeprecated", v33, 2u);
      MEMORY[0x1BA9E48C0](v33, -1, -1);
    }

    goto LABEL_25;
  }
  unint64_t v27 = v26;
  objc_msgSend(v26, sel_setEventMetadata_, v23);
  id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0DD8]), sel_init);
  if (!v28)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.executor);
    char v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl(&dword_1B9C64000, v35, v36, "[ServerFallbackDisablingUtils] Failed to create nlV3ServerFallbackDeprecated event", v37, 2u);
      MEMORY[0x1BA9E48C0](v37, -1, -1);
    }

LABEL_25:
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    return 0;
  }
  uint64_t v29 = v28;
  objc_msgSend(v28, sel_setFallbackReason_, specialized ServerFallbackDisablingUtils.mapServerFallbackReasonToLoggingReason(serverFallbackReason:)(a5));
  objc_msgSend(v27, sel_setNlv3ServerFallbackDeprecated_, v29);

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return v27;
}

uint64_t objectdestroyTm_9()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t type metadata accessor for ServerFallbackDisablingUtils()
{
  return self;
}

uint64_t method lookup function for ServerFallbackDisablingUtils(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ServerFallbackDisablingUtils);
}

uint64_t dispatch thunk of ServerFallbackDisablingUtils.__allocating_init(selfEmitter:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t ServerFTMRule.__allocating_init(overrideFTMAsPerServer:)(char a1)
{
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = 3;
  *(unsigned char *)(result + 17) = a1;
  return result;
}

uint64_t ServerFTMRule.ruleType.getter()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t ServerFTMRule.overrideFTMAsPerServer.getter()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t ServerFTMRule.init(overrideFTMAsPerServer:)(char a1)
{
  *(unsigned char *)(v1 + 16) = 3;
  *(unsigned char *)(v1 + 17) = a1;
  return v1;
}

uint64_t ServerFTMRule.deinit()
{
  return v0;
}

uint64_t method lookup function for ServerFTMRule(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ServerFTMRule);
}

uint64_t dispatch thunk of ServerFTMRule.__allocating_init(overrideFTMAsPerServer:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of ServerFTMRule.evaluate()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

id ServerPromptData.__allocating_init(nlContext:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  outlined init with copy of Siri_Nlu_External_LegacyNLContext?(a1, (uint64_t)v3 + OBJC_IVAR____TtC14SiriKitRuntime16ServerPromptData_legacyNLContext);
  v6.receiver = v3;
  v6.super_class = v1;
  id v4 = objc_msgSendSuper2(&v6, sel_init);
  outlined destroy of ReferenceResolutionClientProtocol?(a1, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  return v4;
}

id ServerPromptData.__allocating_init(serializedBackingStore:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return ServerPromptData.init(serializedBackingStore:)(a1);
}

void *ServerPromptData.supportsSecureCoding.unsafeMutableAddressor()
{
  return &static ServerPromptData.supportsSecureCoding;
}

uint64_t static ServerPromptData.supportsSecureCoding.getter()
{
  return 1;
}

uint64_t ServerPromptData.legacyNLContext.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Siri_Nlu_External_LegacyNLContext?(v1 + OBJC_IVAR____TtC14SiriKitRuntime16ServerPromptData_legacyNLContext, a1);
}

id ServerPromptData.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return ServerPromptData.init(coder:)(a1);
}

id ServerPromptData.init(coder:)(void *a1)
{
  uint64_t v3 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  MEMORY[0x1F4188790](v4 - 8);
  objc_super v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v1;
  uint64_t v12 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000012, 0x80000001BA06D790);
  id v13 = objc_msgSend(a1, sel_decodeObjectForKey_, v12);

  if (v13)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v32, 0, sizeof(v32));
  }
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v32, (uint64_t)&v26, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!*((void *)&v27 + 1))
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v26, (uint64_t *)&demangling cache variable for type metadata for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(&v11[OBJC_IVAR____TtC14SiriKitRuntime16ServerPromptData_legacyNLContext], 1, 1, v7);
    goto LABEL_12;
  }
  if (swift_dynamicCast())
  {
    uint64_t v15 = v29;
    unint64_t v14 = v30;
    uint64_t v28 = 0;
    long long v26 = 0u;
    long long v27 = 0u;
    outlined copy of Data._Representation(v29, v30);
    outlined copy of Data._Representation(v15, v14);
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type Siri_Nlu_External_LegacyNLContext and conformance Siri_Nlu_External_LegacyNLContext();
    Message.init(serializedData:extensions:partial:options:)();
    v25[0] = *(void *)(v8 + 56);
    ((void (*)(char *, void, uint64_t, uint64_t))v25[0])(v6, 0, 1, v7);
    outlined consume of Data._Representation(v15, v14);
    outlined consume of Data._Representation(v15, v14);
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v20(v10, v6, v7);
    id v21 = &v11[OBJC_IVAR____TtC14SiriKitRuntime16ServerPromptData_legacyNLContext];
    v20(&v11[OBJC_IVAR____TtC14SiriKitRuntime16ServerPromptData_legacyNLContext], v10, v7);
    ((void (*)(char *, void, uint64_t, uint64_t))v25[0])(v21, 0, 1, v7);
LABEL_12:

    id v22 = (objc_class *)type metadata accessor for ServerPromptData();
    v31.receiver = v11;
    v31.super_class = v22;
    id v23 = objc_msgSendSuper2(&v31, sel_init);

    return v23;
  }

  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.conversationBridge);
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v18))
  {
    id v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v19 = 0;
    _os_log_impl(&dword_1B9C64000, v17, v18, "Failed to decode the legacyNLContext", v19, 2u);
    MEMORY[0x1BA9E48C0](v19, -1, -1);
  }

  type metadata accessor for ServerPromptData();
  swift_deallocPartialClassInstance();
  return 0;
}

Swift::Void __swiftcall ServerPromptData.encode(with:)(NSCoder with)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Siri_Nlu_External_LegacyNLContext?(v1 + OBJC_IVAR____TtC14SiriKitRuntime16ServerPromptData_legacyNLContext, (uint64_t)v5);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
    Class isa = 0;
    uint64_t v11 = 0;
    unint64_t v12 = 0xF000000000000000;
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 32))(v9, v5, v6);
    lazy protocol witness table accessor for type Siri_Nlu_External_LegacyNLContext and conformance Siri_Nlu_External_LegacyNLContext();
    uint64_t v11 = Message.serializedData(partial:)();
    unint64_t v12 = v14;
    (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
    outlined copy of Data._Representation(v11, v12);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v11, v12);
  }
  id v13 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000012, 0x80000001BA06D790);
  [(objc_class *)with.super.isa encodeObject:isa forKey:v13];
  outlined consume of Data?(v11, v12);
  swift_unknownObjectRelease();
}

id ServerPromptData.init(nlContext:)(uint64_t a1)
{
  outlined init with copy of Siri_Nlu_External_LegacyNLContext?(a1, (uint64_t)v1 + OBJC_IVAR____TtC14SiriKitRuntime16ServerPromptData_legacyNLContext);
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for ServerPromptData();
  id v3 = objc_msgSendSuper2(&v5, sel_init);
  outlined destroy of ReferenceResolutionClientProtocol?(a1, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  return v3;
}

uint64_t outlined init with copy of Siri_Nlu_External_LegacyNLContext?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id ServerPromptData.init(serializedBackingStore:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  MEMORY[0x1F4188790](v3 - 8);
  objc_super v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  outlined init with copy of Any(a1, (uint64_t)v25);
  id v7 = v1;
  if (swift_dynamicCast())
  {
    uint64_t v9 = (uint64_t)v23;
    unint64_t v8 = v24;
    type metadata accessor for NSKeyedUnarchiver();
    static NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(_:)();
    if (!v26)
    {
      outlined consume of Data._Representation(v9, v8);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for Any?);
      goto LABEL_8;
    }
    type metadata accessor for ServerPromptData();
    if ((swift_dynamicCast() & 1) == 0)
    {
      outlined consume of Data._Representation(v9, v8);
      goto LABEL_8;
    }
    os_log_type_t v17 = v23;
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
    outlined init with copy of Siri_Nlu_External_LegacyNLContext?((uint64_t)v17 + OBJC_IVAR____TtC14SiriKitRuntime16ServerPromptData_legacyNLContext, (uint64_t)v5);
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.conversationBridge);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v11, v19))
    {
      outlined consume of Data._Representation(v9, v8);

      goto LABEL_8;
    }
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl(&dword_1B9C64000, v11, v19, "Decoded the ServerPromptData", v20, 2u);
    MEMORY[0x1BA9E48C0](v20, -1, -1);
    outlined consume of Data._Representation(v9, v8);
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v13 = 0;
      _os_log_impl(&dword_1B9C64000, v11, v12, "The backing store for ServerPromptData is not of type Data", v13, 2u);
      MEMORY[0x1BA9E48C0](v13, -1, -1);
    }
  }

LABEL_8:
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v5, (uint64_t)v7 + OBJC_IVAR____TtC14SiriKitRuntime16ServerPromptData_legacyNLContext, (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);

  unint64_t v14 = (objc_class *)type metadata accessor for ServerPromptData();
  v22.receiver = v7;
  v22.super_class = v14;
  id v15 = objc_msgSendSuper2(&v22, sel_init);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v15;
}

uint64_t type metadata accessor for ServerPromptData()
{
  uint64_t result = type metadata singleton initialization cache for ServerPromptData;
  if (!type metadata singleton initialization cache for ServerPromptData) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void ServerPromptData.serializedBackingStore()(uint64_t *a1@<X8>)
{
  v14[1] = *(id *)MEMORY[0x1E4F143B8];
  v14[0] = 0;
  id v3 = objc_msgSend(self, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v1, 1, v14);
  id v4 = v14[0];
  if (v3)
  {
    uint64_t v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v7 = v6;
  }
  else
  {
    unint64_t v8 = v4;
    uint64_t v9 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v13 = 0;
      _os_log_impl(&dword_1B9C64000, v11, v12, "Failed to encode the server prompt context", v13, 2u);
      MEMORY[0x1BA9E48C0](v13, -1, -1);
    }

    uint64_t v5 = 0;
    unint64_t v7 = 0xC000000000000000;
  }
  a1[3] = MEMORY[0x1E4F277C0];
  *a1 = v5;
  a1[1] = v7;
}

id ServerPromptData.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void ServerPromptData.init()()
{
}

id ServerPromptData.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ServerPromptData();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t lazy protocol witness table accessor for type Siri_Nlu_External_LegacyNLContext and conformance Siri_Nlu_External_LegacyNLContext()
{
  unint64_t result = lazy protocol witness table cache variable for type Siri_Nlu_External_LegacyNLContext and conformance Siri_Nlu_External_LegacyNLContext;
  if (!lazy protocol witness table cache variable for type Siri_Nlu_External_LegacyNLContext and conformance Siri_Nlu_External_LegacyNLContext)
  {
    type metadata accessor for Siri_Nlu_External_LegacyNLContext();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_LegacyNLContext and conformance Siri_Nlu_External_LegacyNLContext);
  }
  return result;
}

uint64_t ObjC metadata update function for ServerPromptData()
{
  return type metadata accessor for ServerPromptData();
}

void type metadata completion function for ServerPromptData()
{
  type metadata accessor for Siri_Nlu_External_LegacyNLContext?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for ServerPromptData(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ServerPromptData);
}

uint64_t dispatch thunk of ServerPromptData.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of ServerPromptData.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of ServerPromptData.__allocating_init(nlContext:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of ServerPromptData.__allocating_init(serializedBackingStore:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of ServerPromptData.serializedBackingStore()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

void type metadata accessor for Siri_Nlu_External_LegacyNLContext?()
{
  if (!lazy cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?)
  {
    type metadata accessor for Siri_Nlu_External_LegacyNLContext();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
    }
  }
}

uint64_t ServiceBridgeDelegateXPCWrapper.wrapped.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t ServiceBridgeDelegateXPCWrapper.__allocating_init(wrapping:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t ServiceBridgeDelegateXPCWrapper.init(wrapping:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();

  return specialized ServiceBridgeDelegateXPCWrapper.init(wrapping:)(a1, v2, ObjectType, a2);
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.submit(executionOutput:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v8 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ServiceBridgeDelegateXPCWrapper.submit(executionOutput:completion:), v8, 0);
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.submit(executionOutput:completion:)()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[6];
  uint64_t v4 = *(void *)(v0[5] + 24);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 8))(v3, v1, v2, ObjectType, v4);
  unint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:)(void *a1)
{
  return ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:)(a1, (uint64_t)&unk_1F1382D98, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:));
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 40) = a4;
  *(void *)(v5 + 48) = a5;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:), v6, 0);
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:)()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = *(void *)(v0[5] + 24);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 24))(v1, ObjectType, v2);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:errorString:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = one-time initialization token for shared;
  swift_retain();
  id v13 = a1;
  swift_bridgeObjectRetain();
  if (v12 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v14 = static MessageBusActor.shared;
  unint64_t v15 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v14;
  v16[3] = v15;
  v16[4] = v4;
  v16[5] = v13;
  v16[6] = a2;
  v16[7] = a3;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:errorString:), (uint64_t)v16);
  return swift_release();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:errorString:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v8 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:errorString:), v8, 0);
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:errorString:)()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[6];
  uint64_t v4 = *(void *)(v0[5] + 24);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 32))(v3, v1, v2, ObjectType, v4);
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:needsUserInput:)(void *a1, char a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  unint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  uint64_t v9 = one-time initialization token for shared;
  swift_retain();
  id v10 = a1;
  if (v9 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v11 = static MessageBusActor.shared;
  unint64_t v12 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = v12;
  *(void *)(v13 + 32) = v2;
  *(void *)(v13 + 40) = v10;
  *(unsigned char *)(v13 + 48) = a2 & 1;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:needsUserInput:), v13);
  return swift_release();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:needsUserInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(unsigned char *)(v6 + 56) = a6;
  *(void *)(v6 + 40) = a4;
  *(void *)(v6 + 48) = a5;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v7 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:needsUserInput:), v7, 0);
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:needsUserInput:)()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(*(void *)(v0 + 40) + 24);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, ObjectType, v3);
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = one-time initialization token for shared;
  swift_retain();
  id v11 = a1;
  if (v10 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v12 = static MessageBusActor.shared;
  unint64_t v13 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  uint64_t v14 = (void *)swift_allocObject();
  id v14[2] = v12;
  v14[3] = v13;
  v14[4] = v3;
  v14[5] = v11;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, a3, (uint64_t)v14);
  return swift_release();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.flowPluginWillExecute(flowPluginInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 40) = a4;
  *(void *)(v5 + 48) = a5;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ServiceBridgeDelegateXPCWrapper.flowPluginWillExecute(flowPluginInfo:), v6, 0);
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.flowPluginWillExecute(flowPluginInfo:)()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = *(void *)(v0[5] + 24);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 80))(v1, ObjectType, v2);
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t @objc ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
  uint64_t v12 = one-time initialization token for shared;
  id v13 = a3;
  swift_retain_n();
  id v14 = v13;
  if (v12 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v15 = static MessageBusActor.shared;
  unint64_t v16 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  os_log_type_t v17 = (void *)swift_allocObject();
  v17[2] = v15;
  v17[3] = v16;
  v17[4] = a1;
  v17[5] = v14;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, a5, (uint64_t)v17);

  swift_release();
  return swift_release();
}

Swift::Void __swiftcall ServiceBridgeDelegateXPCWrapper.fallbackToServer(forResultCandidateId:)(Swift::String_optional forResultCandidateId)
{
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.fallbackToServer(forResultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  v6[8] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v7 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ServiceBridgeDelegateXPCWrapper.fallbackToServer(forResultCandidateId:), v7, 0);
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.fallbackToServer(forResultCandidateId:)()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  uint64_t v3 = v0[6];
  uint64_t v4 = *(void *)(v0[5] + 24);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = *MEMORY[0x1E4FA25F0];
  uint64_t v7 = type metadata accessor for ServerFallbackReason();
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 104))(v1, v6, v7);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v1, 0, 1, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 48))(v3, v2, v1, ObjectType, v4);
  outlined destroy of ServerFallbackReason?(v1);
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

Swift::Void __swiftcall ServiceBridgeDelegateXPCWrapper.fallbackToInfoDomainResults(forResultCandidateId:)(Swift::String_optional forResultCandidateId)
{
}

uint64_t ServiceBridgeDelegateXPCWrapper.fallbackToServer(forResultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = one-time initialization token for shared;
  swift_retain();
  swift_bridgeObjectRetain();
  if (v13 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v14 = static MessageBusActor.shared;
  unint64_t v15 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  unint64_t v16 = (void *)swift_allocObject();
  v16[2] = v14;
  v16[3] = v15;
  v16[4] = v6;
  v16[5] = a1;
  v16[6] = a2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, a4, (uint64_t)v16);
  return swift_release();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.fallbackToInfoDomainResults(forResultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v7 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ServiceBridgeDelegateXPCWrapper.fallbackToInfoDomainResults(forResultCandidateId:), v7, 0);
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.fallbackToInfoDomainResults(forResultCandidateId:)()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v3 = *(void *)(v0[5] + 24);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v1, v2, ObjectType, v3);
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t @objc ServiceBridgeDelegateXPCWrapper.fallbackToServer(forResultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    a3 = v12;
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v10, 1, 1, v13);
  uint64_t v14 = one-time initialization token for shared;
  swift_retain_n();
  swift_bridgeObjectRetain();
  if (v14 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v15 = static MessageBusActor.shared;
  unint64_t v16 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  os_log_type_t v17 = (void *)swift_allocObject();
  v17[2] = v15;
  v17[3] = v16;
  v17[4] = a1;
  v17[5] = v11;
  v17[6] = a3;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, a5, (uint64_t)v17);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoff(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v7 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoff(completion:), v7, 0);
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoff(completion:)()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v3 = *(void *)(v0[5] + 24);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 88))(v1, v2, ObjectType, v3);
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoffFailed(completion:)(uint64_t a1, uint64_t a2)
{
  return ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoff(completion:)(a1, a2, (uint64_t)&unk_1F1382EB0, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoffFailed(completion:));
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoffFailed(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v7 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoffFailed(completion:), v7, 0);
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoffFailed(completion:)()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v3 = *(void *)(v0[5] + 24);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 96))(v1, v2, ObjectType, v3);
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.fetchContexts(for:includesNearByDevices:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 56) = a7;
  *(void *)(v8 + 64) = a8;
  *(unsigned char *)(v8 + 72) = a6;
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 48) = a5;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v9 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ServiceBridgeDelegateXPCWrapper.fetchContexts(for:includesNearByDevices:completion:), v9, 0);
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.fetchContexts(for:includesNearByDevices:completion:)()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = *(void *)(*(void *)(v0 + 40) + 24);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 104))(v4, v3, v1, v2, ObjectType, v5);
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t ServiceBridgeDelegateXPCWrapper.fetchSpeechInfo(reply:)(uint64_t a1, uint64_t a2)
{
  return ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoff(completion:)(a1, a2, (uint64_t)&unk_1F1382F00, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.fetchSpeechInfo(reply:));
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.fetchSpeechInfo(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v7 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ServiceBridgeDelegateXPCWrapper.fetchSpeechInfo(reply:), v7, 0);
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.fetchSpeechInfo(reply:)()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v3 = *(void *)(v0[5] + 24);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 112))(v1, v2, ObjectType, v3);
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t ServiceBridgeDelegateXPCWrapper.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v28 = a5;
  uint64_t v29 = a7;
  uint64_t v27 = a3;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v15 - 8);
  os_log_type_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  uint64_t v19 = one-time initialization token for shared;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v19 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v20 = static MessageBusActor.shared;
  unint64_t v21 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  objc_super v22 = (void *)swift_allocObject();
  void v22[2] = v20;
  v22[3] = v21;
  v22[4] = v9;
  v22[5] = a1;
  uint64_t v23 = v27;
  v22[6] = a2;
  v22[7] = v23;
  uint64_t v24 = v28;
  v22[8] = a4;
  v22[9] = v24;
  uint64_t v25 = v29;
  v22[10] = a6;
  v22[11] = v25;
  v22[12] = a8;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v17, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:), (uint64_t)v22);
  return swift_release();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 96) = v13;
  *(void *)(v8 + 104) = v14;
  *(_OWORD *)(v8 + 80) = v12;
  *(void *)(v8 + 64) = a7;
  *(void *)(v8 + 72) = a8;
  *(void *)(v8 + 48) = a5;
  *(void *)(v8 + 56) = a6;
  *(void *)(v8 + 40) = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v9 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ServiceBridgeDelegateXPCWrapper.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:), v9, 0);
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)()
{
  uint64_t v1 = v0[12];
  uint64_t v12 = v0[13];
  uint64_t v3 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v5 = v0[8];
  uint64_t v4 = v0[9];
  uint64_t v7 = v0[6];
  uint64_t v6 = v0[7];
  uint64_t v8 = *(void *)(v0[5] + 24);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 120))(v7, v6, v5, v4, v3, v2, v1, v12, ObjectType, v8);
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.closeServerRequest(forExecutionRequestId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v7 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ServiceBridgeDelegateXPCWrapper.closeServerRequest(forExecutionRequestId:), v7, 0);
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.closeServerRequest(forExecutionRequestId:)()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v3 = *(void *)(v0[5] + 24);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 128))(v1, v2, ObjectType, v3);
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t ServiceBridgeDelegateXPCWrapper.fetchRecentDialogs(reply:)(uint64_t a1, uint64_t a2)
{
  return ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoff(completion:)(a1, a2, (uint64_t)&unk_1F1382F78, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.fetchRecentDialogs(reply:));
}

uint64_t ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoff(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = v4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  if (v13 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v14 = static MessageBusActor.shared;
  unint64_t v15 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = v14;
  v16[3] = v15;
  v16[4] = v6;
  v16[5] = a1;
  v16[6] = a2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, a4, (uint64_t)v16);
  return swift_release();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.fetchRecentDialogs(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  v6[5] = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v7 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ServiceBridgeDelegateXPCWrapper.fetchRecentDialogs(reply:), v7, 0);
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.fetchRecentDialogs(reply:)()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[7];
  uint64_t v3 = *(void *)(v0[5] + 24);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 136))(v1, v2, ObjectType, v3);
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t ServiceBridgeDelegateXPCWrapper.submitExternalActivationRequest(withRequestInfo:completion:)(void *a1, uint64_t a2, uint64_t a3)
{
  return ServiceBridgeDelegateXPCWrapper.submit(executionOutput:completion:)(a1, a2, a3, (uint64_t)&unk_1F1382FA0, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.submitExternalActivationRequest(withRequestInfo:completion:));
}

uint64_t ServiceBridgeDelegateXPCWrapper.submit(executionOutput:completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = v5;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v15 = one-time initialization token for shared;
  swift_retain();
  id v16 = a1;
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v17 = static MessageBusActor.shared;
  unint64_t v18 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  uint64_t v19 = (void *)swift_allocObject();
  id v19[2] = v17;
  v19[3] = v18;
  v19[4] = v7;
  v19[5] = v16;
  v19[6] = a2;
  v19[7] = a3;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v13, a5, (uint64_t)v19);
  return swift_release();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.submitExternalActivationRequest(withRequestInfo:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v8 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ServiceBridgeDelegateXPCWrapper.submitExternalActivationRequest(withRequestInfo:completion:), v8, 0);
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.submitExternalActivationRequest(withRequestInfo:completion:)()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[6];
  uint64_t v4 = *(void *)(v0[5] + 24);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 168))(v3, v1, v2, ObjectType, v4);
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t ServiceBridgeDelegateXPCWrapper.postToMessageBus(message:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  swift_retain();
  outlined copy of Data._Representation(a1, a2);
  uint64_t v14 = one-time initialization token for shared;
  swift_retain();
  if (v14 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v15 = static MessageBusActor.shared;
  unint64_t v16 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = v15;
  v17[3] = v16;
  v17[4] = v5;
  v17[5] = a1;
  v17[6] = a2;
  v17[7] = a3;
  v17[8] = a4;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.postToMessageBus(message:completion:), (uint64_t)v17);
  return swift_release();
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.postToMessageBus(message:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[5] = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v9 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](closure #1 in ServiceBridgeDelegateXPCWrapper.postToMessageBus(message:completion:), v9, 0);
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.postToMessageBus(message:completion:)()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v3 = v0[7];
  uint64_t v5 = *(void *)(v0[5] + 24);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 176))(v4, v3, v1, v2, ObjectType, v5);
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t ServiceBridgeDelegateXPCWrapper.deinit()
{
  swift_unknownObjectRelease();
  return v0;
}

uint64_t sub_1B9FE6F54()
{
  return objectdestroyTm_10(MEMORY[0x1E4FBC8D0]);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.submit(executionOutput:completion:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ServiceBridgeDelegateXPCWrapper.submit(executionOutput:completion:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1B9FE7040()
{
  return objectdestroy_3Tm_1(48);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:)(a1, v4, v5, v7, v6);
}

uint64_t sub_1B9FE7108()
{
  return objectdestroyTm_10(MEMORY[0x1E4FBC898]);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:errorString:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:errorString:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1B9FE71F4()
{
  return objectdestroy_3Tm_1(49);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:needsUserInput:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  char v8 = *(unsigned char *)(v1 + 48);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ServiceBridgeDelegateXPCWrapper.close(withExecutionOutput:needsUserInput:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1B9FE72C4()
{
  return objectdestroy_3Tm_1(48);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.flowPluginWillExecute(flowPluginInfo:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  char v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *char v8 = v2;
  v8[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ServiceBridgeDelegateXPCWrapper.flowPluginWillExecute(flowPluginInfo:)(a1, v4, v5, v7, v6);
}

uint64_t sub_1B9FE738C()
{
  return objectdestroy_19Tm(MEMORY[0x1E4FBC898]);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.fallbackToServer(forResultCandidateId:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ServiceBridgeDelegateXPCWrapper.fallbackToServer(forResultCandidateId:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1B9FE746C()
{
  return objectdestroy_19Tm(MEMORY[0x1E4FBC898]);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.fallbackToInfoDomainResults(forResultCandidateId:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ServiceBridgeDelegateXPCWrapper.fallbackToInfoDomainResults(forResultCandidateId:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1B9FE754C()
{
  return objectdestroy_19Tm(MEMORY[0x1E4FBC8D0]);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoff(completion:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoff(completion:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1B9FE762C()
{
  return objectdestroy_19Tm(MEMORY[0x1E4FBC8D0]);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoffFailed(completion:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ServiceBridgeDelegateXPCWrapper.prepareForAudioHandoffFailed(completion:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.fetchContexts(for:includesNearByDevices:completion:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  char v8 = *(unsigned char *)(v1 + 48);
  uint64_t v10 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ServiceBridgeDelegateXPCWrapper.fetchContexts(for:includesNearByDevices:completion:)(a1, v4, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_1B9FE77EC()
{
  return objectdestroy_19Tm(MEMORY[0x1E4FBC8D0]);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.fetchSpeechInfo(reply:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ServiceBridgeDelegateXPCWrapper.fetchSpeechInfo(reply:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(uint64_t a1)
{
  uint64_t v4 = v1[3];
  uint64_t v12 = v1[2];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = v1[8];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ServiceBridgeDelegateXPCWrapper.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(a1, v12, v4, v5, v6, v7, v8, v9);
}

uint64_t sub_1B9FE79D4()
{
  return objectdestroy_19Tm(MEMORY[0x1E4FBC898]);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.closeServerRequest(forExecutionRequestId:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ServiceBridgeDelegateXPCWrapper.closeServerRequest(forExecutionRequestId:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1B9FE7AB4()
{
  return objectdestroy_19Tm(MEMORY[0x1E4FBC8D0]);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.fetchRecentDialogs(reply:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ServiceBridgeDelegateXPCWrapper.fetchRecentDialogs(reply:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1B9FE7B94()
{
  return objectdestroyTm_10(MEMORY[0x1E4FBC8D0]);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.submitExternalActivationRequest(withRequestInfo:completion:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ServiceBridgeDelegateXPCWrapper.submitExternalActivationRequest(withRequestInfo:completion:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t partial apply for closure #1 in ServiceBridgeDelegateXPCWrapper.postToMessageBus(message:completion:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in ServiceBridgeDelegateXPCWrapper.postToMessageBus(message:completion:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t dispatch thunk of ServiceBridgeDelegate.submit(executionOutput:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.close(withExecutionOutput:needsUserInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.close(withExecutionOutput:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.close(withExecutionOutput:errorString:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.close(withExecutionOutput:errorString:shouldFailRequest:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 40))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.fallbackToServer(forResultCandidateId:serverFallbackReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.fallbackToInfoDomainResults(forResultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.fallbackToIntelligenceFlow(prescribedTool:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.fallbackToSiriX(rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.flowPluginWillExecute(flowPluginInfo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.prepareForAudioHandoff(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 88))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.prepareForAudioHandoffFailed(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.fetchContexts(for:includesNearByDevices:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 104))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.fetchSpeechInfo(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 112))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(void))(a10 + 120))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.closeServerRequest(forExecutionRequestId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 128))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.fetchRecentDialogs(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 136))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.actionCandidatesGenerated(_:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 144))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.willExecute(executionInputInfo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 152))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.fetchSelfReflectionDecision(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 160))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.submitExternalActivationRequest(withRequestInfo:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 168))();
}

uint64_t dispatch thunk of ServiceBridgeDelegate.postToMessageBus(message:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 176))();
}

uint64_t method lookup function for ServiceBridgeDelegateXPCWrapper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ServiceBridgeDelegateXPCWrapper);
}

uint64_t dispatch thunk of ServiceBridgeDelegateXPCWrapper.__allocating_init(wrapping:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t objectdestroy_59Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  outlined consume of Data._Representation(*(void *)(v0 + 40), *(void *)(v0 + 48));
  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t sub_1B9FE7FA0()
{
  return objectdestroyTm_10(MEMORY[0x1E4FBC8D0]);
}

void partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSArray) -> ()(uint64_t a1)
{
  thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSArray) -> ()(a1, *(void *)(v1 + 16));
}

uint64_t sub_1B9FE7FC0()
{
  return objectdestroy_19Tm(MEMORY[0x1E4FBC8D0]);
}

uint64_t sub_1B9FE7FD8()
{
  return objectdestroy_19Tm(MEMORY[0x1E4FBC898]);
}

uint64_t objectdestroy_43Tm_0()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 104, 7);
}

uint64_t sub_1B9FE8054()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B9FE808C()
{
  return objectdestroy_19Tm(MEMORY[0x1E4FBC8D0]);
}

uint64_t objectdestroy_35Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 72, 7);
}

uint64_t closure #1 in ServiceBridgeDelegateXPCWrapper.fetchContexts(for:includesNearByDevices:completion:)partial apply(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  char v8 = *(unsigned char *)(v1 + 48);
  uint64_t v10 = *(void *)(v1 + 56);
  uint64_t v9 = *(void *)(v1 + 64);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in ServiceBridgeDelegateXPCWrapper.fetchContexts(for:includesNearByDevices:completion:)(a1, v4, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_1B9FE81D4()
{
  return objectdestroy_19Tm(MEMORY[0x1E4FBC8D0]);
}

uint64_t sub_1B9FE81EC()
{
  return objectdestroy_19Tm(MEMORY[0x1E4FBC8D0]);
}

uint64_t sub_1B9FE8204()
{
  return objectdestroy_19Tm(MEMORY[0x1E4FBC898]);
}

uint64_t sub_1B9FE821C()
{
  return objectdestroy_19Tm(MEMORY[0x1E4FBC898]);
}

uint64_t objectdestroy_19Tm(void (*a1)(void))
{
  swift_unknownObjectRelease();
  swift_release();
  a1(*(void *)(v1 + 48));

  return MEMORY[0x1F4186498](v1, 56, 7);
}

uint64_t sub_1B9FE828C()
{
  return objectdestroy_3Tm_1(48);
}

uint64_t sub_1B9FE8294()
{
  return objectdestroy_3Tm_1(49);
}

uint64_t sub_1B9FE829C()
{
  return objectdestroyTm_10(MEMORY[0x1E4FBC898]);
}

uint64_t sub_1B9FE82B4()
{
  return objectdestroy_3Tm_1(48);
}

uint64_t objectdestroy_3Tm_1(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v1, a1, 7);
}

uint64_t sub_1B9FE8310()
{
  return objectdestroyTm_10(MEMORY[0x1E4FBC8D0]);
}

uint64_t objectdestroyTm_10(void (*a1)(void))
{
  swift_unknownObjectRelease();
  swift_release();

  a1(*(void *)(v1 + 56));

  return MEMORY[0x1F4186498](v1, 64, 7);
}

uint64_t outlined destroy of ServerFallbackReason?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [RecentDialog]) -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  type metadata accessor for RecentDialog();
  uint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v1(v2);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t ServiceBridge.errorHandlingProxy.getter()
{
  type metadata accessor for ServiceBridgeErrorHandlingProxy();
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = swift_unknownObjectRetain();

  return specialized ServiceBridgeErrorHandlingProxy.init(wrapping:)(v1, v0);
}

uint64_t *ServiceBridgeHelper.executionBridgeXPCInterface.unsafeMutableAddressor()
{
  if (one-time initialization token for executionBridgeXPCInterface != -1) {
    swift_once();
  }
  return &static ServiceBridgeHelper.executionBridgeXPCInterface;
}

void thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSArray) -> ()(uint64_t a1, uint64_t a2)
{
  type metadata accessor for RecentDialog();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(a2 + 16))(a2, isa);
}

uint64_t one-time initialization function for executionBridgeXPCInterface()
{
  uint64_t result = closure #1 in variable initialization expression of static ServiceBridgeHelper.executionBridgeXPCInterface();
  static ServiceBridgeHelper.executionBridgeXPCInterface = result;
  return result;
}

uint64_t closure #1 in variable initialization expression of static ServiceBridgeHelper.executionBridgeXPCInterface()
{
  objc_msgSend(self, sel_interfaceWithProtocol_, &unk_1F1399380);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Any>);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1BA04F9C0;
  uint64_t v1 = type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSSet);
  *(void *)(v0 + 56) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSSet.Type);
  *(void *)(v0 + 32) = v1;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  *(void *)(v0 + 88) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSString.Type);
  *(void *)(v0 + 64) = v2;
  id v3 = objc_allocWithZone(MEMORY[0x1E4F1CAD0]);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_initWithArray_, isa);

  uint64_t result = static Set._forceBridgeFromObjectiveC(_:result:)();
  __break(1u);
  __break(1u);
  __break(1u);
  return result;
}

id static ServiceBridgeHelper.executionBridgeXPCInterface.getter()
{
  if (one-time initialization token for executionBridgeXPCInterface != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)static ServiceBridgeHelper.executionBridgeXPCInterface;

  return v0;
}

uint64_t ServiceBridgeErrorHandlingProxy.__allocating_init(wrapping:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  swift_getObjectType();

  return specialized ServiceBridgeErrorHandlingProxy.init(wrapping:)(a1, v2);
}

uint64_t ServiceBridgeErrorHandlingProxy.wrappedProxy.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t specialized ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3 = *(void **)(a1 + 16);
  aBlock[4] = a2;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  aBlock[3] = a3;
  uint64_t v4 = _Block_copy(aBlock);
  swift_release();
  id v5 = objc_msgSend(v3, sel_remoteObjectProxyWithErrorHandler_, v4);
  _Block_release(v4);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)aBlock, (uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    uint64_t v6 = v12;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)aBlock);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
    char v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_1B9C64000, v8, v9, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v10, 2u);
      MEMORY[0x1BA9E48C0](v10, -1, -1);
    }

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)aBlock);
    return 0;
  }
  return v6;
}

uint64_t ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)(void (*a1)(void), uint64_t a2)
{
  id v5 = *(void **)(v2 + 16);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  aBlock[4] = partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:);
  aBlock[5] = v6;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  aBlock[3] = &block_descriptor_23;
  uint64_t v7 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  id v8 = objc_msgSend(v5, sel_remoteObjectProxyWithErrorHandler_, v7);
  _Block_release(v7);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)aBlock, (uint64_t)v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    uint64_t v9 = v16;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)aBlock);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_1B9C64000, v11, v12, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v13, 2u);
      MEMORY[0x1BA9E48C0](v13, -1, -1);
    }

    lazy protocol witness table accessor for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError();
    uint64_t v14 = (void *)swift_allocError();
    a1();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)aBlock);

    return 0;
  }
  return v9;
}

void specialized closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)(void *a1)
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  id v3 = a1;
  id v4 = a1;
  oslog = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v12 = v7;
    *(_DWORD *)uint64_t v6 = 136446210;
    id v8 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v9 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, oslog, v5, "ServiceBridgeXPC proxy encountered an error (likely assistantd crash?) All calls to this instance of Execution Bridge will fail for the remainder of this turn: %{public}s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v7, -1, -1);
    MEMORY[0x1BA9E48C0](v6, -1, -1);
  }
  else
  {
  }
}

uint64_t closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)(void *a1, uint64_t (*a2)(void *))
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  id v5 = a1;
  id v6 = a1;
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v15 = v10;
    *(_DWORD *)uint64_t v9 = 136446210;
    id v11 = a1;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    uint64_t v12 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v7, v8, "ServiceBridgeXPC proxy encountered an error (likely assistantd crash?) All calls to this instance of Execution Bridge will fail for the remainder of this turn: %{public}s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v10, -1, -1);
    MEMORY[0x1BA9E48C0](v9, -1, -1);
  }
  else
  {
  }
  return a2(a1);
}

uint64_t ServiceBridgeErrorHandlingProxy.init(wrapping:)(uint64_t a1)
{
  swift_getObjectType();

  return specialized ServiceBridgeErrorHandlingProxy.init(wrapping:)(a1, v1);
}

void ServiceBridgeErrorHandlingProxy.submit(executionOutput:completion:)(uint64_t a1, uint64_t (*a2)(), uint64_t a3)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  os_log_type_t v8 = *(void **)(v3 + 16);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.submit(executionOutput:completion:);
  *(void *)(v9 + 24) = v7;
  uint64_t v23 = closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  uint64_t v24 = v9;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v20 = 1107296256;
  uint64_t v21 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  objc_super v22 = &block_descriptor_10;
  uint64_t v10 = _Block_copy(&aBlock);
  swift_retain_n();
  swift_retain();
  swift_release();
  id v11 = objc_msgSend(v8, sel_remoteObjectProxyWithErrorHandler_, v10);
  _Block_release(v10);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v25, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
    swift_release();
    swift_release();
    uint64_t v23 = a2;
    uint64_t v24 = a3;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v20 = 1107296256;
    uint64_t v21 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
    objc_super v22 = &block_descriptor_13;
    uint64_t v12 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v18, sel_submitWithExecutionOutput_completion_, a1, v12);
    swift_unknownObjectRelease();
    _Block_release(v12);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_1B9C64000, v14, v15, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v16, 2u);
      MEMORY[0x1BA9E48C0](v16, -1, -1);
    }

    lazy protocol witness table accessor for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError();
    uint64_t v17 = (void *)swift_allocError();
    ((void (*)(void, void *))a2)(0, v17);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);

    swift_release();
    swift_release();
  }
}

uint64_t ServiceBridgeErrorHandlingProxy.close(withExecutionOutput:)(uint64_t a1)
{
  return ServiceBridgeErrorHandlingProxy.close(withExecutionOutput:)(a1, (uint64_t)specialized closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:), (uint64_t)&block_descriptor_16, (SEL *)&selRef_closeWithExecutionOutput_);
}

uint64_t ServiceBridgeErrorHandlingProxy.close(withExecutionOutput:errorString:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void **)(v3 + 16);
  aBlock[4] = specialized closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:);
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  aBlock[3] = &block_descriptor_19_0;
  os_log_type_t v8 = _Block_copy(aBlock);
  swift_release();
  id v9 = objc_msgSend(v7, sel_remoteObjectProxyWithErrorHandler_, v8);
  _Block_release(v8);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v18, (uint64_t)aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
    uint64_t v10 = (void *)MEMORY[0x1BA9E2DD0](a2, a3);
    objc_msgSend(v16, sel_closeWithExecutionOutput_errorString_, a1, v10);

    return swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v15 = 0;
      _os_log_impl(&dword_1B9C64000, v13, v14, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v15, 2u);
      MEMORY[0x1BA9E48C0](v15, -1, -1);
    }

    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v18);
  }
}

uint64_t ServiceBridgeErrorHandlingProxy.close(withExecutionOutput:needsUserInput:)(uint64_t a1, char a2)
{
  id v5 = *(void **)(v2 + 16);
  aBlock[4] = specialized closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:);
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  aBlock[3] = &block_descriptor_22;
  id v6 = _Block_copy(aBlock);
  swift_release();
  id v7 = objc_msgSend(v5, sel_remoteObjectProxyWithErrorHandler_, v6);
  _Block_release(v6);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v15, (uint64_t)aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
    objc_msgSend(v13, sel_closeWithExecutionOutput_needsUserInput_, a1, a2 & 1);
    return swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl(&dword_1B9C64000, v10, v11, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v12, 2u);
      MEMORY[0x1BA9E48C0](v12, -1, -1);
    }

    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v15);
  }
}

uint64_t ServiceBridgeErrorHandlingProxy.flowPluginWillExecute(flowPluginInfo:)(uint64_t a1)
{
  return ServiceBridgeErrorHandlingProxy.close(withExecutionOutput:)(a1, (uint64_t)specialized closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:), (uint64_t)&block_descriptor_25_0, (SEL *)&selRef_flowPluginWillExecuteWithFlowPluginInfo_);
}

uint64_t ServiceBridgeErrorHandlingProxy.close(withExecutionOutput:)(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id v7 = *(void **)(v4 + 16);
  aBlock[4] = a2;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  aBlock[3] = a3;
  os_log_type_t v8 = _Block_copy(aBlock);
  swift_release();
  id v9 = objc_msgSend(v7, sel_remoteObjectProxyWithErrorHandler_, v8);
  _Block_release(v8);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v17, (uint64_t)aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
    objc_msgSend(v15, *a4, a1);
    return swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v14 = 0;
      _os_log_impl(&dword_1B9C64000, v12, v13, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v14, 2u);
      MEMORY[0x1BA9E48C0](v14, -1, -1);
    }

    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
  }
}

uint64_t @objc ServiceBridgeErrorHandlingProxy.close(withExecutionOutput:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  id v9 = a3;
  uint64_t v10 = swift_retain();
  uint64_t v11 = (void *)specialized ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)(v10, a4, a5);
  if (v11)
  {
    objc_msgSend(v11, *a6, v9);

    swift_release();
    return swift_unknownObjectRelease();
  }
  else
  {

    return swift_release();
  }
}

Swift::Void __swiftcall ServiceBridgeErrorHandlingProxy.fallbackToServer(forResultCandidateId:)(Swift::String_optional forResultCandidateId)
{
}

Swift::Void __swiftcall ServiceBridgeErrorHandlingProxy.fallbackToInfoDomainResults(forResultCandidateId:)(Swift::String_optional forResultCandidateId)
{
}

uint64_t ServiceBridgeErrorHandlingProxy.fallbackToServer(forResultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  id v9 = *(void **)(v5 + 16);
  aBlock[4] = a3;
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  aBlock[3] = a4;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  id v11 = objc_msgSend(v9, sel_remoteObjectProxyWithErrorHandler_, v10);
  _Block_release(v10);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v20, (uint64_t)aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
    if (a2) {
      uint64_t v12 = (void *)MEMORY[0x1BA9E2DD0](a1, a2);
    }
    else {
      uint64_t v12 = 0;
    }
    objc_msgSend(v18, *a5, v12);

    return swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
    os_log_type_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_1B9C64000, v14, v15, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v16, 2u);
      MEMORY[0x1BA9E48C0](v16, -1, -1);
    }

    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v20);
  }
}

uint64_t @objc ServiceBridgeErrorHandlingProxy.fallbackToServer(forResultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  if (a3)
  {
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v12 = swift_retain();
  uint64_t v13 = specialized ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)(v12, a4, a5);
  if (v13)
  {
    os_log_type_t v14 = (void *)v13;
    if (v11) {
      os_log_type_t v15 = (void *)MEMORY[0x1BA9E2DD0](v9, v11);
    }
    else {
      os_log_type_t v15 = 0;
    }
    objc_msgSend(v14, *a6, v15);
    swift_release();
    swift_bridgeObjectRelease();

    return swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
}

void ServiceBridgeErrorHandlingProxy.prepareForAudioHandoff(completion:)(uint64_t (*a1)(), uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  id v6 = *(void **)(v2 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.prepareForAudioHandoff(completion:);
  *(void *)(v7 + 24) = v5;
  uint64_t v20 = closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  uint64_t v21 = v7;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v17 = 1107296256;
  unint64_t v18 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  uint64_t v19 = &block_descriptor_41;
  os_log_type_t v8 = _Block_copy(&aBlock);
  swift_retain_n();
  swift_retain();
  swift_release();
  id v9 = objc_msgSend(v6, sel_remoteObjectProxyWithErrorHandler_, v8);
  _Block_release(v8);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v22, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v22);
    swift_release();
    swift_release();
    uint64_t v20 = a1;
    uint64_t v21 = a2;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v17 = 1107296256;
    unint64_t v18 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
    uint64_t v19 = &block_descriptor_44;
    uint64_t v10 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v15, sel_prepareForAudioHandoffWithCompletion_, v10);
    swift_unknownObjectRelease();
    _Block_release(v10);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v14 = 0;
      _os_log_impl(&dword_1B9C64000, v12, v13, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v14, 2u);
      MEMORY[0x1BA9E48C0](v14, -1, -1);
    }

    ((void (*)(void))a1)(0);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v22);
    swift_release();
    swift_release();
  }
}

void ServiceBridgeErrorHandlingProxy.prepareForAudioHandoffFailed(completion:)(void (*a1)(void), uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  id v6 = *(void **)(v2 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.prepareForAudioHandoffFailed(completion:);
  *(void *)(v7 + 24) = v5;
  uint64_t v20 = closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  uint64_t v21 = v7;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v17 = 1107296256;
  unint64_t v18 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  uint64_t v19 = &block_descriptor_54;
  os_log_type_t v8 = _Block_copy(&aBlock);
  swift_retain_n();
  swift_retain();
  swift_release();
  id v9 = objc_msgSend(v6, sel_remoteObjectProxyWithErrorHandler_, v8);
  _Block_release(v8);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v22, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v22);
    swift_release();
    swift_release();
    uint64_t v20 = (uint64_t (*)())a1;
    uint64_t v21 = a2;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v17 = 1107296256;
    unint64_t v18 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v19 = &block_descriptor_57_0;
    uint64_t v10 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v15, sel_prepareForAudioHandoffFailedWithCompletion_, v10);
    swift_unknownObjectRelease();
    _Block_release(v10);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v14 = 0;
      _os_log_impl(&dword_1B9C64000, v12, v13, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v14, 2u);
      MEMORY[0x1BA9E48C0](v14, -1, -1);
    }

    a1();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v22);
    swift_release();
    swift_release();
  }
}

void ServiceBridgeErrorHandlingProxy.fetchContexts(for:includesNearByDevices:completion:)(uint64_t a1, char a2, uint64_t (*a3)(), uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a3;
  *(void *)(v8 + 24) = a4;
  id v9 = *(void **)(v4 + 16);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.fetchContexts(for:includesNearByDevices:completion:);
  *(void *)(v10 + 24) = v8;
  uint64_t v24 = closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  uint64_t v25 = v10;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v21 = 1107296256;
  objc_super v22 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  uint64_t v23 = &block_descriptor_67;
  uint64_t v11 = _Block_copy(&aBlock);
  swift_retain_n();
  swift_retain();
  swift_release();
  id v12 = objc_msgSend(v9, sel_remoteObjectProxyWithErrorHandler_, v11);
  _Block_release(v11);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v26, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
    swift_release();
    swift_release();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    uint64_t v24 = a3;
    uint64_t v25 = a4;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v21 = 1107296256;
    objc_super v22 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [AFServiceDeviceContext]?) -> ();
    uint64_t v23 = &block_descriptor_70_0;
    os_log_type_t v14 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v19, sel_fetchContextsFor_includesNearByDevices_completion_, isa, a2 & 1, v14);
    swift_unknownObjectRelease();
    _Block_release(v14);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v18 = 0;
      _os_log_impl(&dword_1B9C64000, v16, v17, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v18, 2u);
      MEMORY[0x1BA9E48C0](v18, -1, -1);
    }

    ((void (*)(void))a3)(0);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
    swift_release();
    swift_release();
  }
}

void ServiceBridgeErrorHandlingProxy.fetchSpeechInfo(reply:)(uint64_t (*a1)(), uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  id v6 = *(void **)(v2 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.fetchSpeechInfo(reply:);
  *(void *)(v7 + 24) = v5;
  uint64_t v20 = closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  uint64_t v21 = v7;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v17 = 1107296256;
  unint64_t v18 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  uint64_t v19 = &block_descriptor_80;
  uint64_t v8 = _Block_copy(&aBlock);
  swift_retain_n();
  swift_retain();
  swift_release();
  id v9 = objc_msgSend(v6, sel_remoteObjectProxyWithErrorHandler_, v8);
  _Block_release(v8);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v22, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v22);
    swift_release();
    swift_release();
    uint64_t v20 = a1;
    uint64_t v21 = a2;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v17 = 1107296256;
    unint64_t v18 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed AFSpeechInfo?) -> ();
    uint64_t v19 = &block_descriptor_83;
    uint64_t v10 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v15, sel_fetchSpeechInfoWithReply_, v10);
    swift_unknownObjectRelease();
    _Block_release(v10);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    id v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v14 = 0;
      _os_log_impl(&dword_1B9C64000, v12, v13, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v14, 2u);
      MEMORY[0x1BA9E48C0](v14, -1, -1);
    }

    ((void (*)(void))a1)(0);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v22);
    swift_release();
    swift_release();
  }
}

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed AFSpeechInfo?) -> ()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

void ServiceBridgeErrorHandlingProxy.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(), uint64_t a8)
{
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a7;
  *(void *)(v15 + 24) = a8;
  uint64_t v16 = *(void **)(v8 + 16);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:);
  *(void *)(v17 + 24) = v15;
  char v35 = closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  uint64_t v36 = v17;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v32 = 1107296256;
  uint64_t v33 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  uint64_t v34 = &block_descriptor_93;
  unint64_t v18 = _Block_copy(&aBlock);
  swift_retain_n();
  swift_retain();
  swift_release();
  id v19 = objc_msgSend(v16, sel_remoteObjectProxyWithErrorHandler_, v18);
  _Block_release(v18);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v37, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
    swift_release();
    swift_release();
    uint64_t v20 = (void *)MEMORY[0x1BA9E2DD0](a1, a2);
    uint64_t v21 = (void *)MEMORY[0x1BA9E2DD0](a3, a4);
    objc_super v22 = (void *)MEMORY[0x1BA9E2DD0](a5, a6);
    char v35 = a7;
    uint64_t v36 = a8;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v32 = 1107296256;
    uint64_t v33 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ();
    uint64_t v34 = &block_descriptor_96;
    uint64_t v23 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v30, sel_retriggerOriginalRequestWithExecutionRequestId_forUserId_givenCurrentExecutionRequestId_reply_, v20, v21, v22, v23);
    swift_unknownObjectRelease();
    _Block_release(v23);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.executor);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_1B9C64000, v25, v26, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v27, 2u);
      MEMORY[0x1BA9E48C0](v27, -1, -1);
    }

    ((void (*)(void))a7)(0);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
    swift_release();
    swift_release();
  }
}

Swift::Void __swiftcall ServiceBridgeErrorHandlingProxy.closeServerRequest(forExecutionRequestId:)(Swift::String forExecutionRequestId)
{
  object = forExecutionRequestId._object;
  uint64_t countAndFlagsBits = forExecutionRequestId._countAndFlagsBits;
  id v4 = *(void **)(v1 + 16);
  aBlock[4] = specialized closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:);
  aBlock[5] = 0;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  aBlock[3] = &block_descriptor_99_0;
  uint64_t v5 = _Block_copy(aBlock);
  swift_release();
  id v6 = objc_msgSend(v4, sel_remoteObjectProxyWithErrorHandler_, v5);
  _Block_release(v5);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v14, (uint64_t)aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
    uint64_t v7 = (void *)MEMORY[0x1BA9E2DD0](countAndFlagsBits, object);
    objc_msgSend(v12, sel_closeServerRequestForExecutionRequestId_, v7);

    swift_unknownObjectRelease();
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
    id v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_1B9C64000, v9, v10, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v11, 2u);
      MEMORY[0x1BA9E48C0](v11, -1, -1);
    }

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v14);
  }
}

void ServiceBridgeErrorHandlingProxy.fetchRecentDialogs(reply:)(uint64_t (*a1)(), uint64_t a2)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  id v6 = *(void **)(v2 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.fetchRecentDialogs(reply:);
  *(void *)(v7 + 24) = v5;
  uint64_t v20 = closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  uint64_t v21 = v7;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v17 = 1107296256;
  unint64_t v18 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  id v19 = &block_descriptor_109;
  uint64_t v8 = _Block_copy(&aBlock);
  swift_retain_n();
  swift_retain();
  swift_release();
  id v9 = objc_msgSend(v6, sel_remoteObjectProxyWithErrorHandler_, v8);
  _Block_release(v8);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v22, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v22);
    swift_release();
    swift_release();
    uint64_t v20 = a1;
    uint64_t v21 = a2;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v17 = 1107296256;
    unint64_t v18 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [RecentDialog]) -> ();
    id v19 = &block_descriptor_112_0;
    os_log_type_t v10 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v15, sel_fetchRecentDialogsWithReply_, v10);
    swift_unknownObjectRelease();
    _Block_release(v10);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    id v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v14 = 0;
      _os_log_impl(&dword_1B9C64000, v12, v13, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v14, 2u);
      MEMORY[0x1BA9E48C0](v14, -1, -1);
    }

    ((void (*)(void))a1)(MEMORY[0x1E4FBC860]);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v22);
    swift_release();
    swift_release();
  }
}

uint64_t @objc ServiceBridgeErrorHandlingProxy.prepareForAudioHandoff(completion:)(int a1, int a2, void *aBlock, void (*a4)(uint64_t, void *))
{
  uint64_t v5 = _Block_copy(aBlock);
  _Block_copy(v5);
  uint64_t v6 = swift_retain();
  a4(v6, v5);
  _Block_release(v5);
  _Block_release(v5);

  return swift_release();
}

void ServiceBridgeErrorHandlingProxy.submitExternalActivationRequest(withRequestInfo:completion:)(uint64_t a1, uint64_t (*a2)(), uint64_t a3)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  uint64_t v8 = *(void **)(v3 + 16);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.submitExternalActivationRequest(withRequestInfo:completion:);
  *(void *)(v9 + 24) = v7;
  uint64_t v23 = closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  uint64_t v24 = v9;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v20 = 1107296256;
  uint64_t v21 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  objc_super v22 = &block_descriptor_122;
  os_log_type_t v10 = _Block_copy(&aBlock);
  swift_retain_n();
  swift_retain();
  swift_release();
  id v11 = objc_msgSend(v8, sel_remoteObjectProxyWithErrorHandler_, v10);
  _Block_release(v10);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v25, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);
    swift_release();
    swift_release();
    uint64_t v23 = a2;
    uint64_t v24 = a3;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v20 = 1107296256;
    uint64_t v21 = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
    objc_super v22 = &block_descriptor_125;
    id v12 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v18, sel_submitExternalActivationRequestWithRequestInfo_completion_, a1, v12);
    swift_unknownObjectRelease();
    _Block_release(v12);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
    os_log_type_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_1B9C64000, v14, v15, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v16, 2u);
      MEMORY[0x1BA9E48C0](v16, -1, -1);
    }

    lazy protocol witness table accessor for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError();
    uint64_t v17 = (void *)swift_allocError();
    ((void (*)(void, void *))a2)(0, v17);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v25);

    swift_release();
    swift_release();
  }
}

uint64_t @objc ServiceBridgeErrorHandlingProxy.submit(executionOutput:completion:)(uint64_t a1, int a2, void *a3, void *aBlock, void (*a5)(id, uint64_t, void *))
{
  uint64_t v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  id v9 = a3;
  swift_retain();
  a5(v9, a1, v8);
  _Block_release(v8);
  _Block_release(v8);

  return swift_release();
}

void ServiceBridgeErrorHandlingProxy.postToMessageBus(message:completion:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(), uint64_t a4)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a3;
  *(void *)(v7 + 24) = a4;
  uint64_t v8 = *(void **)(v4 + 16);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.postToMessageBus(message:completion:);
  *(void *)(v9 + 24) = v7;
  uint64_t v24 = closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  uint64_t v25 = v9;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v21 = 1107296256;
  objc_super v22 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  uint64_t v23 = &block_descriptor_135_0;
  os_log_type_t v10 = _Block_copy(&aBlock);
  swift_retain_n();
  swift_retain();
  swift_release();
  id v11 = objc_msgSend(v8, sel_remoteObjectProxyWithErrorHandler_, v10);
  _Block_release(v10);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v26, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
    swift_release();
    swift_release();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v24 = a3;
    uint64_t v25 = a4;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v21 = 1107296256;
    objc_super v22 = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
    uint64_t v23 = &block_descriptor_138;
    uint64_t v13 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v19, sel_postToMessageBusWithMessage_completion_, isa, v13);
    swift_unknownObjectRelease();
    _Block_release(v13);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
    os_log_type_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_1B9C64000, v15, v16, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v17, 2u);
      MEMORY[0x1BA9E48C0](v17, -1, -1);
    }

    lazy protocol witness table accessor for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError();
    unint64_t v18 = (void *)swift_allocError();
    ((void (*)(void, void *))a3)(0, v18);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);

    swift_release();
    swift_release();
  }
}

unint64_t ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError.description.getter()
{
  return 0xD000000000000025;
}

uint64_t static ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError.== infix(_:_:)()
{
  return 1;
}

void ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError.hash(into:)()
{
}

Swift::Int ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError.hashValue.getter()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError()
{
  return 0xD000000000000025;
}

uint64_t ServiceBridgeErrorHandlingProxy.deinit()
{
  swift_unknownObjectRelease();
  return v0;
}

uint64_t ServiceBridgeErrorHandlingProxy.__deallocating_deinit()
{
  swift_unknownObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ServiceBridgeErrorHandlingProxy()
{
  return self;
}

uint64_t specialized ServiceBridgeErrorHandlingProxy.init(wrapping:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = swift_dynamicCastObjCProtocolConditional();
  if (v3)
  {
    *(void *)(a2 + 16) = v3;
    return a2;
  }
  else
  {
    _StringGuts.grow(_:)(67);
    v5._object = (void *)0x80000001BA06D910;
    v5._uint64_t countAndFlagsBits = 0xD000000000000041;
    String.append(_:)(v5);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
    v6._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v6);
    swift_bridgeObjectRelease();
    uint64_t result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0, 0xE000000000000000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/MessageBusIntegration/ServiceBridgeXPC.swift", 113, 2, 203);
    __break(1u);
  }
  return result;
}

uint64_t sub_1B9FEC5D0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)(void *a1)
{
  return closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)(a1, *(uint64_t (**)(void *))(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError()
{
  unint64_t result = lazy protocol witness table cache variable for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError;
  if (!lazy protocol witness table cache variable for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError;
  if (!lazy protocol witness table cache variable for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError);
  }
  return result;
}

uint64_t partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.submit(executionOutput:completion:)(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(v1 + 16))(0, a1);
}

uint64_t partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.prepareForAudioHandoff(completion:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0);
}

uint64_t partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.prepareForAudioHandoffFailed(completion:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.fetchContexts(for:includesNearByDevices:completion:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0);
}

uint64_t partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.fetchSpeechInfo(reply:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0);
}

uint64_t partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0);
}

uint64_t partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.fetchRecentDialogs(reply:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))(MEMORY[0x1E4FBC860]);
}

uint64_t partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.postToMessageBus(message:completion:)(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(v1 + 16))(0, a1);
}

ValueMetadata *type metadata accessor for ServiceBridgeHelper()
{
  return &type metadata for ServiceBridgeHelper;
}

uint64_t method lookup function for ServiceBridgeErrorHandlingProxy(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ServiceBridgeErrorHandlingProxy);
}

uint64_t dispatch thunk of ServiceBridgeErrorHandlingProxy.__allocating_init(wrapping:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

unsigned char *storeEnumTagSinglePayload for ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B9FEC8FCLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError()
{
  return &type metadata for ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError;
}

uint64_t specialized ServiceBridgeErrorHandlingProxy.submit(executionOutput:completion:)(uint64_t a1, uint64_t a2, void (**a3)(void, void, void))
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned SABaseCommand?, @unowned NSError?) -> ();
  *(void *)(v7 + 24) = v6;
  uint64_t v8 = *(void **)(a2 + 16);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = closure #1 in ServiceBridgeErrorHandlingProxy.submit(executionOutput:completion:)partial apply;
  *(void *)(v9 + 24) = v7;
  uint64_t v25 = (void (*)(uint64_t, uint64_t))closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  uint64_t v26 = v9;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v22 = 1107296256;
  uint64_t v23 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  uint64_t v24 = &block_descriptor_317;
  os_log_type_t v10 = _Block_copy(&aBlock);
  swift_retain_n();
  _Block_copy(a3);
  swift_retain();
  swift_release();
  id v11 = objc_msgSend(v8, sel_remoteObjectProxyWithErrorHandler_, v10);
  _Block_release(v10);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v27, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v27);
    swift_release();
    swift_release();
    uint64_t v25 = partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned SABaseCommand?, @unowned NSError?) -> ();
    uint64_t v26 = v6;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v22 = 1107296256;
    uint64_t v23 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
    uint64_t v24 = &block_descriptor_320;
    id v12 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v20, sel_submitWithExecutionOutput_completion_, a1, v12);
    swift_unknownObjectRelease();
    _Block_release(v12);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v16 = 0;
      _os_log_impl(&dword_1B9C64000, v14, v15, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v16, 2u);
      MEMORY[0x1BA9E48C0](v16, -1, -1);
    }

    lazy protocol witness table accessor for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError();
    uint64_t v17 = (void *)swift_allocError();
    unint64_t v18 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a3)[2](a3, 0, v18);

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v27);
    swift_release_n();
  }
  return swift_release();
}

uint64_t specialized ServiceBridgeErrorHandlingProxy.prepareForAudioHandoff(completion:)(uint64_t a1, void (**a2)(void, void))
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = _s10ObjectiveC8ObjCBoolVIeyBhy_SbIeghy_TRTA_0;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = *(void **)(a1 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = closure #1 in ServiceBridgeErrorHandlingProxy.prepareForAudioHandoff(completion:)partial apply;
  *(void *)(v7 + 24) = v5;
  uint64_t v21 = (uint64_t (*)(char))closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  uint64_t v22 = v7;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v18 = 1107296256;
  id v19 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  uint64_t v20 = &block_descriptor_282;
  uint64_t v8 = _Block_copy(&aBlock);
  swift_retain_n();
  _Block_copy(a2);
  swift_retain();
  swift_release();
  id v9 = objc_msgSend(v6, sel_remoteObjectProxyWithErrorHandler_, v8);
  _Block_release(v8);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v23, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
    swift_release();
    swift_release();
    uint64_t v21 = _s10ObjectiveC8ObjCBoolVIeyBhy_SbIeghy_TRTA_0;
    uint64_t v22 = v4;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v18 = 1107296256;
    id v19 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
    uint64_t v20 = &block_descriptor_285;
    os_log_type_t v10 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v16, sel_prepareForAudioHandoffWithCompletion_, v10);
    swift_unknownObjectRelease();
    _Block_release(v10);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    id v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_1B9C64000, v12, v13, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v14, 2u);
      MEMORY[0x1BA9E48C0](v14, -1, -1);
    }

    a2[2](a2, 0);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
    swift_release_n();
  }
  return swift_release();
}

uint64_t specialized ServiceBridgeErrorHandlingProxy.prepareForAudioHandoffFailed(completion:)(uint64_t a1, void (**a2)(void))
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable () -> ();
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = *(void **)(a1 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = closure #1 in ServiceBridgeErrorHandlingProxy.prepareForAudioHandoffFailed(completion:)partial apply;
  *(void *)(v7 + 24) = v5;
  uint64_t v21 = closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  uint64_t v22 = v7;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v18 = 1107296256;
  id v19 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  uint64_t v20 = &block_descriptor_265_0;
  uint64_t v8 = _Block_copy(&aBlock);
  swift_retain_n();
  _Block_copy(a2);
  swift_retain();
  swift_release();
  id v9 = objc_msgSend(v6, sel_remoteObjectProxyWithErrorHandler_, v8);
  _Block_release(v8);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v23, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
    swift_release();
    swift_release();
    uint64_t v21 = partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable () -> ();
    uint64_t v22 = v4;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v18 = 1107296256;
    id v19 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    uint64_t v20 = &block_descriptor_268_0;
    os_log_type_t v10 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v16, sel_prepareForAudioHandoffFailedWithCompletion_, v10);
    swift_unknownObjectRelease();
    _Block_release(v10);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    id v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_1B9C64000, v12, v13, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v14, 2u);
      MEMORY[0x1BA9E48C0](v14, -1, -1);
    }

    a2[2](a2);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
    swift_release_n();
  }
  return swift_release();
}

void specialized ServiceBridgeErrorHandlingProxy.fetchContexts(for:includesNearByDevices:completion:)(uint64_t a1, char a2, uint64_t a3, void (**a4)(void, void))
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a4;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSArray?) -> ();
  *(void *)(v8 + 24) = v7;
  id v9 = *(void **)(a3 + 16);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = closure #1 in ServiceBridgeErrorHandlingProxy.fetchContexts(for:includesNearByDevices:completion:)partial apply;
  *(void *)(v10 + 24) = v8;
  uint64_t v24 = (void (*)(uint64_t))closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  uint64_t v25 = v10;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v21 = 1107296256;
  uint64_t v22 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  uint64_t v23 = &block_descriptor_248;
  uint64_t v11 = _Block_copy(&aBlock);
  swift_retain_n();
  _Block_copy(a4);
  swift_retain();
  swift_release();
  id v12 = objc_msgSend(v9, sel_remoteObjectProxyWithErrorHandler_, v11);
  _Block_release(v11);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v26, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
    swift_release();
    swift_release();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    uint64_t v24 = partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSArray?) -> ();
    uint64_t v25 = v7;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v21 = 1107296256;
    uint64_t v22 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [AFServiceDeviceContext]?) -> ();
    uint64_t v23 = &block_descriptor_251;
    uint64_t v14 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v19, sel_fetchContextsFor_includesNearByDevices_completion_, isa, a2 & 1, v14);
    swift_unknownObjectRelease();
    _Block_release(v14);
    swift_release();
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.executor);
    os_log_type_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_1B9C64000, v16, v17, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v18, 2u);
      MEMORY[0x1BA9E48C0](v18, -1, -1);
    }

    a4[2](a4, 0);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v26);
    swift_release_n();
    swift_release();
  }
}

uint64_t specialized ServiceBridgeErrorHandlingProxy.fetchSpeechInfo(reply:)(uint64_t a1, void (**a2)(void, void))
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = _s14SiriKitRuntime27ConversationCanHandleResultCIeyBhy_ACIeghg_TRTA_0;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = *(void **)(a1 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = closure #1 in ServiceBridgeErrorHandlingProxy.fetchSpeechInfo(reply:)partial apply;
  *(void *)(v7 + 24) = v5;
  uint64_t v21 = closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  uint64_t v22 = v7;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v18 = 1107296256;
  id v19 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  uint64_t v20 = &block_descriptor_231;
  uint64_t v8 = _Block_copy(&aBlock);
  swift_retain_n();
  _Block_copy(a2);
  swift_retain();
  swift_release();
  id v9 = objc_msgSend(v6, sel_remoteObjectProxyWithErrorHandler_, v8);
  _Block_release(v8);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v23, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
    swift_release();
    swift_release();
    uint64_t v21 = _s14SiriKitRuntime27ConversationCanHandleResultCIeyBhy_ACIeghg_TRTA_0;
    uint64_t v22 = v4;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v18 = 1107296256;
    id v19 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed AFSpeechInfo?) -> ();
    uint64_t v20 = &block_descriptor_234;
    uint64_t v10 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v16, sel_fetchSpeechInfoWithReply_, v10);
    swift_unknownObjectRelease();
    _Block_release(v10);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    id v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_1B9C64000, v12, v13, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v14, 2u);
      MEMORY[0x1BA9E48C0](v14, -1, -1);
    }

    a2[2](a2, 0);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v23);
    swift_release_n();
  }
  return swift_release();
}

void specialized ServiceBridgeErrorHandlingProxy.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (**a8)(void, void))
{
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a8;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSError?) -> ();
  *(void *)(v15 + 24) = v14;
  os_log_type_t v16 = *(void **)(a7 + 16);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = closure #1 in ServiceBridgeErrorHandlingProxy.retriggerOriginalRequest(withExecutionRequestId:forUserId:givenCurrentExecutionRequestId:reply:)partial apply;
  *(void *)(v17 + 24) = v15;
  char v35 = (void (*)(uint64_t))closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  uint64_t v36 = v17;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v32 = 1107296256;
  uint64_t v33 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  uint64_t v34 = &block_descriptor_214;
  uint64_t v18 = _Block_copy(&aBlock);
  swift_retain_n();
  _Block_copy(a8);
  swift_retain();
  swift_release();
  id v19 = objc_msgSend(v16, sel_remoteObjectProxyWithErrorHandler_, v18);
  _Block_release(v18);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v37, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
    swift_release();
    swift_release();
    uint64_t v20 = (void *)MEMORY[0x1BA9E2DD0](a1, a2);
    uint64_t v21 = (void *)MEMORY[0x1BA9E2DD0](a3, a4);
    uint64_t v22 = (void *)MEMORY[0x1BA9E2DD0](a5, a6);
    char v35 = partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSError?) -> ();
    uint64_t v36 = v14;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v32 = 1107296256;
    uint64_t v33 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ();
    uint64_t v34 = &block_descriptor_217;
    uint64_t v23 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v30, sel_retriggerOriginalRequestWithExecutionRequestId_forUserId_givenCurrentExecutionRequestId_reply_, v20, v21, v22, v23);
    swift_unknownObjectRelease();
    _Block_release(v23);
    swift_release();
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.executor);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_1B9C64000, v25, v26, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v27, 2u);
      MEMORY[0x1BA9E48C0](v27, -1, -1);
    }

    a8[2](a8, 0);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v37);
    swift_release_n();
    swift_release();
  }
}

uint64_t specialized ServiceBridgeErrorHandlingProxy.fetchRecentDialogs(reply:)(uint64_t a1, void (**a2)(void, void))
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSArray) -> ();
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = *(void **)(a1 + 16);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = closure #1 in ServiceBridgeErrorHandlingProxy.fetchRecentDialogs(reply:)partial apply;
  *(void *)(v7 + 24) = v5;
  uint64_t v22 = (void (*)(uint64_t))closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  uint64_t v23 = v7;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v19 = 1107296256;
  uint64_t v20 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  uint64_t v21 = &block_descriptor_194_0;
  uint64_t v8 = _Block_copy(&aBlock);
  swift_retain_n();
  _Block_copy(a2);
  swift_retain();
  swift_release();
  id v9 = objc_msgSend(v6, sel_remoteObjectProxyWithErrorHandler_, v8);
  _Block_release(v8);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v24, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
    swift_release();
    swift_release();
    uint64_t v22 = partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned NSArray) -> ();
    uint64_t v23 = v4;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v19 = 1107296256;
    uint64_t v20 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [RecentDialog]) -> ();
    uint64_t v21 = &block_descriptor_197;
    uint64_t v10 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v17, sel_fetchRecentDialogsWithReply_, v10);
    swift_unknownObjectRelease();
    _Block_release(v10);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    id v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_1B9C64000, v12, v13, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v14, 2u);
      MEMORY[0x1BA9E48C0](v14, -1, -1);
    }

    type metadata accessor for RecentDialog();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    ((void (**)(void, Class))a2)[2](a2, isa);

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v24);
    swift_release_n();
  }
  return swift_release();
}

uint64_t specialized ServiceBridgeErrorHandlingProxy.submitExternalActivationRequest(withRequestInfo:completion:)(uint64_t a1, uint64_t a2, void (**a3)(void, void, void))
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ObjCBool, @unowned NSError?) -> ()partial apply;
  *(void *)(v7 + 24) = v6;
  uint64_t v8 = *(void **)(a2 + 16);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.submitExternalActivationRequest(withRequestInfo:completion:);
  *(void *)(v9 + 24) = v7;
  uint64_t v25 = closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  uint64_t v26 = v9;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v22 = 1107296256;
  uint64_t v23 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  uint64_t v24 = &block_descriptor_177;
  uint64_t v10 = _Block_copy(&aBlock);
  swift_retain_n();
  _Block_copy(a3);
  swift_retain();
  swift_release();
  id v11 = objc_msgSend(v8, sel_remoteObjectProxyWithErrorHandler_, v10);
  _Block_release(v10);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v27, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v27);
    swift_release();
    swift_release();
    uint64_t v25 = thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ObjCBool, @unowned NSError?) -> ()partial apply;
    uint64_t v26 = v6;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v22 = 1107296256;
    uint64_t v23 = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
    uint64_t v24 = &block_descriptor_180;
    id v12 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v20, sel_submitExternalActivationRequestWithRequestInfo_completion_, a1, v12);
    swift_unknownObjectRelease();
    _Block_release(v12);
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v16 = 0;
      _os_log_impl(&dword_1B9C64000, v14, v15, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v16, 2u);
      MEMORY[0x1BA9E48C0](v16, -1, -1);
    }

    lazy protocol witness table accessor for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError();
    uint64_t v17 = (void *)swift_allocError();
    uint64_t v18 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a3)[2](a3, 0, v18);

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v27);
    swift_release_n();
  }
  return swift_release();
}

void specialized ServiceBridgeErrorHandlingProxy.postToMessageBus(message:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void, void))
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a4;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ObjCBool, @unowned NSError?) -> ();
  *(void *)(v7 + 24) = v6;
  uint64_t v8 = *(void **)(a3 + 16);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = partial apply for closure #1 in ServiceBridgeErrorHandlingProxy.submitExternalActivationRequest(withRequestInfo:completion:);
  *(void *)(v9 + 24) = v7;
  uint64_t v25 = (void (*)(char, uint64_t))closure #1 in ServiceBridgeErrorHandlingProxy.withErrorHandler(onError:)partial apply;
  uint64_t v26 = v9;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v22 = 1107296256;
  uint64_t v23 = thunk for @escaping @callee_guaranteed (@guaranteed Error) -> ();
  uint64_t v24 = &block_descriptor_159;
  uint64_t v10 = _Block_copy(&aBlock);
  swift_retain_n();
  _Block_copy(a4);
  swift_retain();
  swift_release();
  id v11 = objc_msgSend(v8, sel_remoteObjectProxyWithErrorHandler_, v10);
  _Block_release(v10);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with copy of Any((uint64_t)v27, (uint64_t)&aBlock);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServiceBridge);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v27);
    swift_release();
    swift_release();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v25 = partial apply for thunk for @escaping @callee_unowned @convention(block) @Sendable (@unowned ObjCBool, @unowned NSError?) -> ();
    uint64_t v26 = v6;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v22 = 1107296256;
    uint64_t v23 = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
    uint64_t v24 = &block_descriptor_162;
    uint64_t v13 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v20, sel_postToMessageBusWithMessage_completion_, isa, v13);
    swift_unknownObjectRelease();
    _Block_release(v13);
    swift_release();
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
    os_log_type_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_1B9C64000, v15, v16, "ServiceBridgeXPC proxy is not of type ServiceBridgeXPC. The connection may have been invalidated due to there being no current Siri turn.", v17, 2u);
      MEMORY[0x1BA9E48C0](v17, -1, -1);
    }

    lazy protocol witness table accessor for type ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError and conformance ServiceBridgeErrorHandlingProxy.ExecutionBridgeXPCError();
    uint64_t v18 = (void *)swift_allocError();
    uint64_t v19 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void, void *))a4)[2](a4, 0, v19);

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v27);
    swift_release_n();
    swift_release();
  }
}

uint64_t sub_1B9FEE904()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t _s10ObjectiveC8ObjCBoolVIeyBhy_SbIeghy_TRTA_0(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16))(*(void *)(v1 + 16), a1 & 1);
}

SiriKitRuntime::SettingsAffinityScorer __swiftcall SettingsAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA062A70;
  uint64_t v1 = 0xD000000000000029;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

void one-time initialization function for kSupportedCommonSettingIdentifierNamespaces()
{
  static SettingsAffinityScorer.kSupportedCommonSettingIdentifierNamespaces = (uint64_t)&outlined read-only object #0 of one-time initialization function for kSupportedCommonSettingIdentifierNamespaces;
}

uint64_t *SettingsAffinityScorer.kSupportedCommonSettingIdentifierNamespaces.unsafeMutableAddressor()
{
  if (one-time initialization token for kSupportedCommonSettingIdentifierNamespaces != -1) {
    swift_once();
  }
  return &static SettingsAffinityScorer.kSupportedCommonSettingIdentifierNamespaces;
}

uint64_t static SettingsAffinityScorer.kSupportedCommonSettingIdentifierNamespaces.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kSupportedCommonSettingIdentifierNamespaces);
}

void one-time initialization function for kSupportedUserEntityNamesIdentifierNamespaces()
{
  static SettingsAffinityScorer.kSupportedUserEntityNamesIdentifierNamespaces = (uint64_t)&outlined read-only object #0 of one-time initialization function for kSupportedUserEntityNamesIdentifierNamespaces;
}

uint64_t *SettingsAffinityScorer.kSupportedUserEntityNamesIdentifierNamespaces.unsafeMutableAddressor()
{
  if (one-time initialization token for kSupportedUserEntityNamesIdentifierNamespaces != -1) {
    swift_once();
  }
  return &static SettingsAffinityScorer.kSupportedUserEntityNamesIdentifierNamespaces;
}

uint64_t static SettingsAffinityScorer.kSupportedUserEntityNamesIdentifierNamespaces.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kSupportedUserEntityNamesIdentifierNamespaces);
}

const char *SettingsAffinityScorer.xrUserEntityName.unsafeMutableAddressor()
{
  return "names";
}

uint64_t static SettingsAffinityScorer.xrUserEntityName.getter()
{
  return 0x73656D616ELL;
}

void *SettingsAffinityScorer.environmentNamespace.unsafeMutableAddressor()
{
  return &static SettingsAffinityScorer.environmentNamespace;
}

unint64_t static SettingsAffinityScorer.environmentNamespace.getter()
{
  return 0xD000000000000014;
}

const char *SettingsAffinityScorer.atmNamespace.unsafeMutableAddressor()
{
  return "atmosphereName";
}

uint64_t static SettingsAffinityScorer.atmNamespace.getter()
{
  return 0x656870736F6D7461;
}

void one-time initialization function for envNamespaces()
{
  static SettingsAffinityScorer.envNamespaces = (uint64_t)&outlined read-only object #0 of one-time initialization function for envNamespaces;
}

uint64_t *SettingsAffinityScorer.envNamespaces.unsafeMutableAddressor()
{
  if (one-time initialization token for envNamespaces != -1) {
    swift_once();
  }
  return &static SettingsAffinityScorer.envNamespaces;
}

uint64_t static SettingsAffinityScorer.envNamespaces.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for envNamespaces);
}

const char *SettingsAffinityScorer.kSystemCategoryIdentifierNamespace.unsafeMutableAddressor()
{
  return "systemCategory";
}

uint64_t static SettingsAffinityScorer.kSystemCategoryIdentifierNamespace.getter()
{
  return 0x61436D6574737973;
}

const char *SettingsAffinityScorer.kSystemCategoryIdentifierScreen.unsafeMutableAddressor()
{
  return "screen";
}

uint64_t static SettingsAffinityScorer.kSystemCategoryIdentifierScreen.getter()
{
  return 0x6E6565726373;
}

void *SettingsAffinityScorer.kFloatSettingNameDisplayBrightness.unsafeMutableAddressor()
{
  return &static SettingsAffinityScorer.kFloatSettingNameDisplayBrightness;
}

unint64_t static SettingsAffinityScorer.kFloatSettingNameDisplayBrightness.getter()
{
  return 0xD000000000000011;
}

uint64_t SettingsAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t UsoTask.firstCommonSettingReferenceIdentifier()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UsoIdentifier();
  uint64_t v41 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = UsoTask.arguments.getter();
  if (!*(void *)(v5 + 16)) {
    goto LABEL_13;
  }
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(0x636E657265666572, 0xE900000000000065);
  if ((v7 & 1) == 0) {
    goto LABEL_13;
  }
  unint64_t v8 = *(void *)(*(void *)(v5 + 56) + 8 * v6);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  if (!(v8 >> 62))
  {
    if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_5;
    }
LABEL_13:
    swift_bridgeObjectRelease();
LABEL_14:
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56);
    return v20(a1, 1, 1, v2);
  }
  swift_bridgeObjectRetain();
  uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v30) {
    goto LABEL_13;
  }
LABEL_5:
  if ((v8 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1BA9E3990](0, v8);
  }
  else
  {
    if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    swift_retain();
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = dispatch thunk of UsoValue.getAsEntity()();
  swift_release();
  if (!v10) {
    goto LABEL_14;
  }
  type metadata accessor for UsoEntity_common_Setting();
  swift_retain();
  static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
  swift_release();
  uint64_t v11 = v42;
  if (!v42)
  {
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(a1, 1, 1, v2);
  }
  uint64_t v12 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  if (!v12)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(a1, 1, 1, v2);
    swift_release();
    return swift_release();
  }
  uint64_t v13 = *(void *)(v12 + 16);
  if (!v13)
  {
LABEL_37:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(a1, 1, 1, v2);
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  uint64_t v37 = v11;
  uint64_t v38 = v10;
  uint64_t v14 = v41 + 16;
  os_log_type_t v15 = *(void (**)(void, void, void))(v41 + 16);
  unint64_t v16 = v12 + ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80));
  BOOL v40 = (void (**)(char *, uint64_t))(v41 + 8);
  uint64_t v17 = *(void *)(v41 + 72);
  uint64_t v36 = v12;
  swift_bridgeObjectRetain();
  uint64_t v18 = 0;
  unint64_t v19 = 0x1E9F2D000;
  uint64_t v34 = v14;
  uint64_t v35 = v13;
  unint64_t v32 = v16;
  uint64_t v33 = v15;
  uint64_t v39 = v17;
  while (1)
  {
    v15(v4, v16 + v17 * v18, v2);
    if (*(void *)(v19 + 816) != -1) {
      swift_once();
    }
    uint64_t v21 = static SettingsAffinityScorer.kSupportedCommonSettingIdentifierNamespaces;
    uint64_t v22 = *(void *)(static SettingsAffinityScorer.kSupportedCommonSettingIdentifierNamespaces + 16);
    if (v22) {
      break;
    }
LABEL_20:
    ++v18;
    (*v40)(v4, v2);
    uint64_t v17 = v39;
    unint64_t v19 = 0x1E9F2D000uLL;
    if (v18 == v13)
    {
      swift_bridgeObjectRelease();
      goto LABEL_37;
    }
  }
  swift_bridgeObjectRetain_n();
  uint64_t v23 = (uint64_t *)(v21 + 40);
  while (1)
  {
    uint64_t v24 = *(v23 - 1);
    uint64_t v25 = *v23;
    swift_bridgeObjectRetain();
    uint64_t v26 = UsoIdentifier.namespace.getter();
    if (!v27)
    {
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
    if (v26 == v24 && v27 == v25) {
      break;
    }
    char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v29)
    {
      swift_bridgeObjectRelease();
      goto LABEL_35;
    }
LABEL_26:
    v23 += 2;
    if (!--v22)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v13 = v35;
      unint64_t v16 = v32;
      os_log_type_t v15 = v33;
      goto LABEL_20;
    }
  }
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
LABEL_35:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(a1, v4, v2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(a1, 0, 1, v2);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t UsoTask.firstUserEntityNamesIdentifier()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = type metadata accessor for UsoIdentifier();
  uint64_t v50 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = UsoTask.arguments.getter();
  if (!*(void *)(v7 + 16)) {
    goto LABEL_25;
  }
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(0x69746E4572657375, 0xEC00000073656974);
  if ((v9 & 1) == 0) {
    goto LABEL_25;
  }
  unint64_t v10 = *(void *)(*(void *)(v7 + 56) + 8 * v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      goto LABEL_25;
    }
  }
  else if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_25:
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  if ((v10 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1BA9E3990](0, v10);
  }
  else
  {
    if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_34:
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v14 = result;
      uint64_t v49 = v7;
      if (result) {
        goto LABEL_13;
      }
LABEL_35:
      swift_bridgeObjectRelease();
      unint64_t v20 = MEMORY[0x1E4FBC860];
      goto LABEL_36;
    }
    swift_retain();
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = dispatch thunk of UsoValue.getAsEntity()();
  swift_release();
  if (!v7)
  {
LABEL_26:
    unint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56);
    return v19(a1, 1, 1, v4);
  }
  uint64_t v11 = UsoEntity.attributes.getter();
  if (!*(void *)(v11 + 16)
    || (unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(0x73656D616ELL, 0xE500000000000000), (v13 & 1) == 0))
  {
    swift_release();
    goto LABEL_25;
  }
  unint64_t v1 = *(void *)(*(void *)(v11 + 56) + 8 * v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v2 = MEMORY[0x1E4FBC860];
  unint64_t v51 = MEMORY[0x1E4FBC860];
  if (v1 >> 62) {
    goto LABEL_34;
  }
  uint64_t v14 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v49 = v7;
  if (!v14) {
    goto LABEL_35;
  }
LABEL_13:
  if (v14 < 1)
  {
    __break(1u);
    goto LABEL_70;
  }
  for (uint64_t i = 0; i != v14; ++i)
  {
    if ((v1 & 0xC000000000000001) != 0) {
      MEMORY[0x1BA9E3990](i, v1);
    }
    else {
      swift_retain();
    }
    uint64_t v17 = dispatch thunk of UsoValue.getAsEntity()();
    uint64_t v18 = swift_release();
    if (v17)
    {
      MEMORY[0x1BA9E3030](v18);
      if (*(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v51 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v20 = v51;
  unint64_t v2 = MEMORY[0x1E4FBC860];
LABEL_36:
  swift_bridgeObjectRelease();
  unint64_t v51 = v2;
  if (!(v20 >> 62))
  {
    uint64_t v21 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v21) {
      goto LABEL_38;
    }
LABEL_47:
    swift_bridgeObjectRelease_n();
    unint64_t v24 = MEMORY[0x1E4FBC860];
    uint64_t v25 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (!v25)
    {
LABEL_67:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v50 + 56))(a1, 1, 1, v4);
      swift_bridgeObjectRelease();
      return swift_release();
    }
    goto LABEL_48;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v21 = result;
  if (!result) {
    goto LABEL_47;
  }
LABEL_38:
  if (v21 < 1)
  {
LABEL_70:
    __break(1u);
    return result;
  }
  uint64_t v22 = 0;
  do
  {
    if ((v20 & 0xC000000000000001) != 0) {
      MEMORY[0x1BA9E3990](v22, v20);
    }
    else {
      swift_retain();
    }
    ++v22;
    uint64_t v23 = UsoEntity.usoIdentifiers.getter();
    swift_release();
    specialized Array.append<A>(contentsOf:)(v23);
  }
  while (v21 != v22);
  swift_bridgeObjectRelease_n();
  unint64_t v24 = v51;
  uint64_t v25 = *(void *)(v51 + 16);
  if (!v25) {
    goto LABEL_67;
  }
LABEL_48:
  uint64_t v26 = v50 + 16;
  uint64_t v27 = *(void (**)(void, void, void))(v50 + 16);
  unint64_t v28 = v24 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
  uint64_t v48 = (void (**)(char *, uint64_t))(v50 + 8);
  uint64_t v29 = *(void *)(v50 + 72);
  unint64_t v46 = v24;
  unint64_t v30 = v28;
  swift_bridgeObjectRetain();
  uint64_t v31 = 0;
  unint64_t v32 = 0x1E9F2D000;
  uint64_t v44 = v26;
  uint64_t v45 = v25;
  unint64_t v42 = v30;
  uint64_t v43 = v27;
  uint64_t v47 = v29;
  while (1)
  {
    v27(v6, v30 + v29 * v31, v4);
    if (*(void *)(v32 + 824) != -1) {
      swift_once();
    }
    uint64_t v33 = static SettingsAffinityScorer.kSupportedUserEntityNamesIdentifierNamespaces;
    uint64_t v34 = *(void *)(static SettingsAffinityScorer.kSupportedUserEntityNamesIdentifierNamespaces + 16);
    if (v34) {
      break;
    }
LABEL_50:
    ++v31;
    (*v48)(v6, v4);
    uint64_t v29 = v47;
    unint64_t v32 = 0x1E9F2D000uLL;
    if (v31 == v25)
    {
      swift_bridgeObjectRelease();
      goto LABEL_67;
    }
  }
  swift_bridgeObjectRetain_n();
  uint64_t v35 = (uint64_t *)(v33 + 40);
  while (1)
  {
    uint64_t v37 = *(v35 - 1);
    uint64_t v36 = *v35;
    swift_bridgeObjectRetain();
    uint64_t v38 = UsoIdentifier.namespace.getter();
    if (!v39)
    {
      swift_bridgeObjectRelease();
      goto LABEL_56;
    }
    if (v38 == v37 && v39 == v36) {
      break;
    }
    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v41)
    {
      swift_bridgeObjectRelease();
      goto LABEL_65;
    }
LABEL_56:
    v35 += 2;
    if (!--v34)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v25 = v45;
      unint64_t v30 = v42;
      uint64_t v27 = v43;
      goto LABEL_50;
    }
  }
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
LABEL_65:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, char *, uint64_t))(v50 + 32))(a1, v6, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v50 + 56))(a1, 0, 1, v4);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t UsoTask.isBatterySummarizationOverride(for:)(unint64_t a1)
{
  unint64_t v48 = a1;
  uint64_t v1 = type metadata accessor for DeviceIdiom();
  unint64_t v49 = *(void *)(v1 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  unint64_t v6 = (char *)&v39 - v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  MEMORY[0x1F4188790](v7 - 8);
  char v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UsoIdentifier();
  uint64_t v50 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  unint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (UsoTask.verbString.getter() == 0x736972616D6D7573 && v13 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v15 = 0;
    if ((v14 & 1) == 0) {
      return v15 & 1;
    }
  }
  if (UsoTask.hasUserEntities()())
  {
LABEL_8:
    char v15 = 0;
    return v15 & 1;
  }
  UsoTask.firstCommonSettingReferenceIdentifier()((uint64_t)v9);
  uint64_t v16 = v50;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v9, &demangling cache variable for type metadata for UsoIdentifier?);
    goto LABEL_8;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v12, v9, v10);
  if (UsoIdentifier.value.getter() == 0x79726574746162 && v18 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v10);
      goto LABEL_8;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DeviceIdiom>);
  unint64_t v21 = v49;
  uint64_t v22 = *(void *)(v49 + 72);
  unint64_t v23 = (*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
  uint64_t v24 = swift_allocObject();
  unint64_t v46 = v6;
  uint64_t v47 = v24;
  *(_OWORD *)(v24 + 16) = xmmword_1BA050750;
  unint64_t v25 = v24 + v23;
  uint64_t v26 = *(void (**)(void))(v21 + 104);
  ((void (*)(unint64_t, void, uint64_t))v26)(v24 + v23, *MEMORY[0x1E4FA50E8], v1);
  uint64_t v43 = v25 + v22;
  v26();
  unint64_t v42 = v25 + 2 * v22;
  v26();
  unint64_t v41 = v25 + 3 * v22;
  v26();
  unint64_t v40 = v25 + 4 * v22;
  v26();
  unint64_t v27 = v21;
  unint64_t v28 = v25 + 5 * v22;
  ((void (*)(unint64_t, void, uint64_t))v26)(v28, *MEMORY[0x1E4FA5120], v1);
  SiriEnvironment.currentDevice.getter();
  uint64_t v29 = v46;
  dispatch thunk of CurrentDevice.deviceIdiom.getter();
  swift_release();
  unint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  unint64_t v48 = v25;
  unint64_t v31 = v25;
  unint64_t v32 = v29;
  uint64_t v45 = v30;
  v30(v4, v31, v1);
  unint64_t v44 = lazy protocol witness table accessor for type DeviceIdiom and conformance DeviceIdiom();
  LOBYTE(v22) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v33 = *(void (**)(char *, uint64_t))(v27 + 8);
  swift_bridgeObjectRetain();
  v33(v4, v1);
  if (v22)
  {
    char v15 = 1;
    uint64_t v34 = v50;
  }
  else
  {
    unint64_t v49 = v28;
    v45(v4, v43, v1);
    char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
    v33(v4, v1);
    uint64_t v34 = v50;
    if (v35) {
      goto LABEL_23;
    }
    v45(v4, v42, v1);
    char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
    v33(v4, v1);
    if ((v36 & 1) != 0
      || (v45(v4, v41, v1), char v37 = dispatch thunk of static Equatable.== infix(_:_:)(), v33(v4, v1), (v37 & 1) != 0)
      || (v45(v4, v40, v1), char v38 = dispatch thunk of static Equatable.== infix(_:_:)(), v33(v4, v1), (v38 & 1) != 0))
    {
LABEL_23:
      char v15 = 1;
    }
    else
    {
      v45(v4, v49, v1);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      v33(v4, v1);
    }
  }
  swift_bridgeObjectRelease();
  v33(v32, v1);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v10);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  return v15 & 1;
}

uint64_t UsoTask.hasUserEntities()()
{
  uint64_t v0 = UsoTask.arguments.getter();
  if (!*(void *)(v0 + 16)) {
    goto LABEL_10;
  }
  unint64_t v1 = specialized __RawDictionaryStorage.find<A>(_:)(0x69746E4572657375, 0xEC00000073656974);
  if ((v2 & 1) == 0) {
    goto LABEL_10;
  }
  unint64_t v3 = *(void *)(*(void *)(v0 + 56) + 8 * v1);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  if (!(v3 >> 62))
  {
    if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_5;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v6) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v3 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1BA9E3990](0, v3);
LABEL_8:
    swift_bridgeObjectRelease();
    uint64_t v5 = dispatch thunk of UsoValue.getAsEntity()();
    swift_release();
    if (v5)
    {
      swift_release();
      return 1;
    }
    return 0;
  }
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t specialized SettingsAffinityScorer.scoreOpenNoEntity(_:environment:)()
{
  uint64_t v0 = type metadata accessor for RREntity();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  unint64_t v3 = &v17[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for RRCandidate();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
  if (v18[0])
  {
    uint64_t v11 = dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter();
    swift_release();
    if (v11)
    {
      dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  SiriEnvironment.salientEntitiesProvider.getter();
  unint64_t v12 = (void *)dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
  swift_release();
  static AffinityScorerUtils.topOpenableEntity(candidates:)(v12, (uint64_t)v6);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    uint64_t v13 = &demangling cache variable for type metadata for RRCandidate?;
    char v14 = v6;
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32))(v10, v6, v7);
    RRCandidate.entity.getter();
    RREntity.usoEntity.getter();
    (*(void (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
    static UsoEntity_CodeGenConverter.convert(entity:)();
    swift_release();
    if (v18[3])
    {
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v18, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Any?);
      type metadata accessor for UsoEntity_common_AppEntity();
      if (swift_dynamicCast())
      {
        swift_retain();
        dispatch thunk of CodeGenBase.usoIdentifiers.getter();
        swift_bridgeObjectRelease();
        swift_release_n();
      }
      (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
    }
    uint64_t v13 = (uint64_t *)&demangling cache variable for type metadata for Any?;
    char v14 = v18;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, v13);
  return 5;
}

uint64_t specialized SettingsAffinityScorer.scoreCloseNoEntity(_:environment:)()
{
  uint64_t v0 = type metadata accessor for RREntity();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  unint64_t v3 = &v17[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for RRCandidate();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
  if (v18[0])
  {
    uint64_t v11 = dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter();
    swift_release();
    if (v11)
    {
      dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  SiriEnvironment.salientEntitiesProvider.getter();
  unint64_t v12 = (void *)dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
  swift_release();
  static AffinityScorerUtils.topCloseableEntity(candidates:)(v12, (uint64_t)v6);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    uint64_t v13 = &demangling cache variable for type metadata for RRCandidate?;
    char v14 = v6;
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 32))(v10, v6, v7);
    RRCandidate.entity.getter();
    RREntity.usoEntity.getter();
    (*(void (**)(unsigned char *, uint64_t))(v1 + 8))(v3, v0);
    static UsoEntity_CodeGenConverter.convert(entity:)();
    swift_release();
    if (v18[3])
    {
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v18, (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for Any?);
      type metadata accessor for UsoEntity_common_UserEntity();
      if (swift_dynamicCast()
        || (type metadata accessor for UsoEntity_common_AppEntity(), swift_dynamicCast()))
      {
        swift_retain();
        dispatch thunk of CodeGenBase.usoIdentifiers.getter();
        swift_bridgeObjectRelease();
        swift_release_n();
      }
      (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v17);
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
    }
    uint64_t v13 = (uint64_t *)&demangling cache variable for type metadata for Any?;
    char v14 = v18;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, v13);
  return 5;
}

uint64_t specialized SettingsAffinityScorer.scoreForEnvironmentOrAtmosphereIdentifiers(parse:environment:)()
{
  uint64_t v0 = type metadata accessor for UsoIdentifier();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)&v65 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v65 - v5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (uint64_t)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (uint64_t)&v65 - v11;
  if (!specialized static AffinityScorerUtils.getTask(_:)())
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
    char v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = 2;
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl(&dword_1B9C64000, v15, v16, "SettingsAffinityScorer Could not extract usoTask from parse", v18, 2u);
      MEMORY[0x1BA9E48C0](v18, -1, -1);
    }
    else
    {

      return 2;
    }
    return v17;
  }
  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v81, (uint64_t)v79, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v80) {
    goto LABEL_134;
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v79, (uint64_t)v78, (uint64_t *)&demangling cache variable for type metadata for Any?);
  type metadata accessor for UsoTask_open_uso_NoEntity();
  if (swift_dynamicCast())
  {
    uint64_t v13 = specialized SettingsAffinityScorer.scoreOpenNoEntity(_:environment:)();
LABEL_11:
    uint64_t v17 = v13;
    int v19 = v13;
    swift_release();
    if (v19 == 5) {
      goto LABEL_133;
    }
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v81, (uint64_t *)&demangling cache variable for type metadata for Any?);
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v78);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v79, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return v17;
  }
  type metadata accessor for UsoTask_close_uso_NoEntity();
  if (swift_dynamicCast())
  {
    uint64_t v13 = specialized SettingsAffinityScorer.scoreCloseNoEntity(_:environment:)();
    goto LABEL_11;
  }
  type metadata accessor for UsoTask_disable_common_Setting();
  if (swift_dynamicCast())
  {
    uint64_t v20 = v77;
    swift_retain();
    unint64_t v21 = dispatch thunk of Uso_VerbTemplate_ReferenceTrigger.userEntities.getter();
    swift_release();
    if (v21)
    {
      uint64_t v10 = v21 & 0xFFFFFFFFFFFFFF8;
      if (v21 >> 62) {
        goto LABEL_121;
      }
      uint64_t v4 = *(char **)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v4) {
        goto LABEL_18;
      }
LABEL_122:
      swift_bridgeObjectRelease();
    }
LABEL_123:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56))(v12, 1, 1, v0);
    goto LABEL_124;
  }
  type metadata accessor for UsoTask_enable_common_Setting();
  if (!swift_dynamicCast()) {
    goto LABEL_133;
  }
  uint64_t v20 = v77;
  swift_retain();
  unint64_t v21 = dispatch thunk of Uso_VerbTemplate_ReferenceTrigger.userEntities.getter();
  swift_release();
  if (!v21) {
    goto LABEL_130;
  }
  uint64_t v12 = v21 & 0xFFFFFFFFFFFFFF8;
  if (v21 >> 62) {
    goto LABEL_128;
  }
  if (!*(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_129:
    swift_bridgeObjectRelease();
LABEL_130:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56))(v10, 1, 1, v0);
    goto LABEL_131;
  }
  while (1)
  {
    if ((v21 & 0xC000000000000001) != 0)
    {
      MEMORY[0x1BA9E3990](0, v21);
    }
    else
    {
      if (!*(void *)(v12 + 16))
      {
        __break(1u);
LABEL_142:
        swift_once();
LABEL_108:
        uint64_t v49 = type metadata accessor for Logger();
        __swift_project_value_buffer(v49, (uint64_t)static Logger.executor);
        uint64_t v50 = Logger.logObject.getter();
        os_log_type_t v51 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v50, v51))
        {
          uint64_t v52 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v52 = 0;
          _os_log_impl(&dword_1B9C64000, v50, v51, "SettingsAffinityScorer Env/Atm namespace identifiers found", v52, 2u);
          MEMORY[0x1BA9E48C0](v52, -1, -1);
        }
        swift_release();

        swift_release();
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v81, (uint64_t *)&demangling cache variable for type metadata for Any?);
        uint64_t v53 = v12;
LABEL_119:
        outlined destroy of ReferenceResolutionClientProtocol?(v53, &demangling cache variable for type metadata for UsoIdentifier?);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v78);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v79, (uint64_t *)&demangling cache variable for type metadata for Any?);
        return 3;
      }
      swift_retain();
    }
    swift_bridgeObjectRelease();
    dispatch thunk of CodeGenListEntry.entry.getter();
    swift_release();
    if (!v76) {
      goto LABEL_130;
    }
    uint64_t v25 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
    swift_release();
    if (!v25) {
      goto LABEL_130;
    }
    uint64_t v69 = *(void *)(v25 + 16);
    if (!v69)
    {
LABEL_112:
      uint64_t v48 = 1;
LABEL_113:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56))(v10, v48, 1, v0);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v10, 1, v0) != 1)
      {
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v54 = type metadata accessor for Logger();
        __swift_project_value_buffer(v54, (uint64_t)static Logger.executor);
        uint64_t v55 = Logger.logObject.getter();
        os_log_type_t v56 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v55, v56))
        {
          unint64_t v57 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v57 = 0;
          _os_log_impl(&dword_1B9C64000, v55, v56, "SettingsAffinityScorer Env/Atm namespace identifiers found", v57, 2u);
          MEMORY[0x1BA9E48C0](v57, -1, -1);
        }
        swift_release();

        swift_release();
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v81, (uint64_t *)&demangling cache variable for type metadata for Any?);
        uint64_t v53 = v10;
        goto LABEL_119;
      }
LABEL_131:
      swift_release();
      uint64_t v58 = v10;
      goto LABEL_132;
    }
    uint64_t v26 = *(void (**)(void, void, void))(v1 + 16);
    unint64_t v72 = v25 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    os_log_type_t v68 = (void (**)(char *, uint64_t))(v1 + 8);
    uint64_t v71 = *(void *)(v1 + 72);
    uint64_t v65 = v25;
    swift_bridgeObjectRetain();
    uint64_t v27 = 0;
    uint64_t v70 = v20;
    uint64_t v67 = v1 + 16;
    long long v66 = v26;
    while (1)
    {
      uint64_t v74 = v27;
      v26(v4, v72 + v71 * v27, v0);
      if (one-time initialization token for envNamespaces != -1) {
        swift_once();
      }
      char v38 = (void *)static SettingsAffinityScorer.envNamespaces;
      swift_bridgeObjectRetain();
      uint64_t v39 = UsoIdentifier.namespace.getter();
      if (v40) {
        uint64_t v41 = v39;
      }
      else {
        uint64_t v41 = 0;
      }
      if (v40) {
        unint64_t v21 = v40;
      }
      else {
        unint64_t v21 = 0xE000000000000000;
      }
      uint64_t v75 = v38[2];
      if (!v75)
      {
        swift_bridgeObjectRelease();
        goto LABEL_70;
      }
      uint64_t v42 = v38[4];
      uint64_t v43 = v38[5];
      int v73 = v38;
      BOOL v44 = v42 == v41 && v43 == v21;
      if (v44 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_103:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v10, v4, v0);
        uint64_t v48 = 0;
        goto LABEL_113;
      }
      if (v75 != 1)
      {
        BOOL v45 = v73[6] == v41 && v73[7] == v21;
        if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_103;
        }
        if (v75 != 2) {
          break;
        }
      }
LABEL_69:
      swift_bridgeObjectRelease();
      uint64_t v26 = v66;
LABEL_70:
      uint64_t v27 = v74 + 1;
      swift_bridgeObjectRelease();
      (*v68)(v4, v0);
      if (v27 == v69)
      {
        swift_bridgeObjectRelease();
        goto LABEL_112;
      }
    }
    uint64_t v6 = (char *)(v73 + 9);
    uint64_t v12 = 2;
    while (1)
    {
      uint64_t v20 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        break;
      }
      BOOL v46 = *((void *)v6 - 1) == v41 && *(void *)v6 == v21;
      if (v46 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_103;
      }
      v6 += 16;
      ++v12;
      if (v20 == v75) {
        goto LABEL_69;
      }
    }
    __break(1u);
LABEL_126:
    MEMORY[0x1BA9E3990](0, v21);
LABEL_21:
    swift_bridgeObjectRelease();
    dispatch thunk of CodeGenListEntry.entry.getter();
    swift_release();
    if (!v76) {
      goto LABEL_123;
    }
    uint64_t v22 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
    swift_release();
    if (!v22) {
      goto LABEL_123;
    }
    uint64_t v69 = *(void *)(v22 + 16);
    if (!v69) {
      break;
    }
    unint64_t v23 = *(void (**)(void, void, void))(v1 + 16);
    unint64_t v72 = v22 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    os_log_type_t v68 = (void (**)(char *, uint64_t))(v1 + 8);
    uint64_t v71 = *(void *)(v1 + 72);
    uint64_t v65 = v22;
    swift_bridgeObjectRetain();
    uint64_t v24 = 0;
    uint64_t v70 = v20;
    uint64_t v67 = v1 + 16;
    long long v66 = v23;
    while (1)
    {
      uint64_t v74 = v24;
      v23(v6, v72 + v71 * v24, v0);
      if (one-time initialization token for envNamespaces != -1) {
        swift_once();
      }
      unint64_t v28 = (void *)static SettingsAffinityScorer.envNamespaces;
      swift_bridgeObjectRetain();
      uint64_t v29 = UsoIdentifier.namespace.getter();
      if (v30) {
        uint64_t v31 = v29;
      }
      else {
        uint64_t v31 = 0;
      }
      if (v30) {
        unint64_t v21 = v30;
      }
      else {
        unint64_t v21 = 0xE000000000000000;
      }
      uint64_t v75 = v28[2];
      if (!v75)
      {
        swift_bridgeObjectRelease();
        goto LABEL_37;
      }
      uint64_t v32 = v28[4];
      uint64_t v33 = v28[5];
      int v73 = v28;
      BOOL v34 = v32 == v31 && v33 == v21;
      if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
LABEL_102:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, char *, uint64_t))(v1 + 32))(v12, v6, v0);
        uint64_t v47 = 0;
        goto LABEL_106;
      }
      if (v75 != 1)
      {
        BOOL v35 = v73[6] == v31 && v73[7] == v21;
        if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_102;
        }
        if (v75 != 2) {
          break;
        }
      }
LABEL_36:
      swift_bridgeObjectRelease();
      unint64_t v23 = v66;
LABEL_37:
      uint64_t v24 = v74 + 1;
      swift_bridgeObjectRelease();
      (*v68)(v6, v0);
      if (v24 == v69)
      {
        swift_bridgeObjectRelease();
        goto LABEL_105;
      }
    }
    char v36 = v73 + 9;
    uint64_t v10 = 2;
    while (1)
    {
      uint64_t v20 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        break;
      }
      BOOL v37 = *(v36 - 1) == v31 && *v36 == v21;
      if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_102;
      }
      v36 += 2;
      ++v10;
      if (v20 == v75) {
        goto LABEL_36;
      }
    }
    __break(1u);
LABEL_121:
    swift_bridgeObjectRetain();
    uint64_t v4 = (char *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v4) {
      goto LABEL_122;
    }
LABEL_18:
    if ((v21 & 0xC000000000000001) != 0) {
      goto LABEL_126;
    }
    if (*(void *)(v10 + 16))
    {
      swift_retain();
      goto LABEL_21;
    }
    __break(1u);
LABEL_128:
    swift_bridgeObjectRetain();
    uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v59) {
      goto LABEL_129;
    }
  }
LABEL_105:
  uint64_t v47 = 1;
LABEL_106:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56))(v12, v47, 1, v0);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v12, 1, v0) != 1)
  {
    if (one-time initialization token for executor != -1) {
      goto LABEL_142;
    }
    goto LABEL_108;
  }
LABEL_124:
  swift_release();
  uint64_t v58 = v12;
LABEL_132:
  outlined destroy of ReferenceResolutionClientProtocol?(v58, &demangling cache variable for type metadata for UsoIdentifier?);
LABEL_133:
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v78);
LABEL_134:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v79, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v60 = type metadata accessor for Logger();
  __swift_project_value_buffer(v60, (uint64_t)static Logger.executor);
  uint64_t v61 = Logger.logObject.getter();
  os_log_type_t v62 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v61, v62))
  {
    unint64_t v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v63 = 0;
    _os_log_impl(&dword_1B9C64000, v61, v62, "SettingsAffinityScorer No Env/Atm namespace identifiers found", v63, 2u);
    MEMORY[0x1BA9E48C0](v63, -1, -1);
  }

  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v81, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return 5;
}

uint64_t specialized SettingsAffinityScorer.isIdentifierMatchScreen(on:)()
{
  uint64_t v35 = type metadata accessor for Google_Protobuf_StringValue();
  uint64_t v0 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v2 = (char *)v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v32 - v8;
  uint64_t v10 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  uint64_t v11 = *(void *)(v10 + 16);
  if (!v11)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
  uint64_t v12 = v4 + 16;
  char v36 = v13;
  unint64_t v14 = v10 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
  char v15 = (void (**)(char *, uint64_t))(v12 - 8);
  uint64_t v33 = *(void *)(v12 + 56);
  BOOL v34 = (void (**)(char *, uint64_t))(v0 + 8);
  v32[1] = v10;
  swift_bridgeObjectRetain();
  uint64_t v16 = v12;
  while (1)
  {
    uint64_t v19 = v16;
    v36(v9, v14, v3);
    Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
    uint64_t v20 = Google_Protobuf_StringValue.value.getter();
    uint64_t v22 = v21;
    (*v34)(v2, v35);
    if (v20 == 0x61436D6574737973 && v22 == 0xEE0079726F676574)
    {
      swift_bridgeObjectRelease();
      v36(v7, (unint64_t)v9, v3);
    }
    else
    {
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v36(v7, (unint64_t)v9, v3);
      if ((v23 & 1) == 0)
      {
        uint64_t v25 = *v15;
        (*v15)(v7, v3);
        v25(v9, v3);
        goto LABEL_4;
      }
    }
    if (Siri_Nlu_External_UsoEntityIdentifier.value.getter() == 0x6E6565726373 && v24 == 0xE600000000000000) {
      break;
    }
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v18 = *v15;
    (*v15)(v7, v3);
    v18(v9, v3);
    if (v17) {
      goto LABEL_15;
    }
LABEL_4:
    v14 += v33;
    --v11;
    uint64_t v16 = v19;
    if (!v11)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v27 = *v15;
  (*v15)(v7, v3);
  v27(v9, v3);
LABEL_15:
  swift_bridgeObjectRelease_n();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Logger.executor);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v31 = 0;
    _os_log_impl(&dword_1B9C64000, v29, v30, "SystemCommandsAffinityScorer | Found screen identifier", v31, 2u);
    MEMORY[0x1BA9E48C0](v31, -1, -1);
  }

  return 1;
}

uint64_t specialized SettingsAffinityScorer.scoreForSupportedIdentifierMatches(parse:environment:)(uint64_t a1, unint64_t a2)
{
  unint64_t v153 = a2;
  uint64_t v159 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  uint64_t v146 = *(void *)(v159 - 8);
  MEMORY[0x1F4188790](v159);
  uint64_t v158 = (char *)&v135 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  uint64_t v3 = MEMORY[0x1F4188790](v141);
  uint64_t v138 = (uint64_t)&v135 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v143 = (uint64_t)&v135 - v6;
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v137 = (uint64_t)&v135 - v8;
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v140 = (uint64_t)&v135 - v10;
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v142 = (uint64_t)&v135 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v139 = (uint64_t)&v135 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v144 = (uint64_t)&v135 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v135 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v135 - v20;
  uint64_t v22 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v151 = *(void *)(v22 - 8);
  uint64_t v152 = v22;
  MEMORY[0x1F4188790](v22);
  unint64_t v150 = (char *)&v135 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v157 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v135 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  os_log_type_t v30 = (char *)&v135 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v31 - 8);
  int64_t v155 = (char *)&v135 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v149 = (char *)&v135 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v35);
  Swift::String v154 = (char *)&v135 - v37;
  if (specialized static AffinityScorerUtils.getTask(_:)())
  {
    uint64_t v148 = v33;
    unint64_t v145 = v19;
    uint64_t v38 = USOParse.userParse.getter();
    uint64_t v39 = MEMORY[0x1BA9DE000](v38);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
    uint64_t v40 = *(void *)(v39 + 16);
    if (v40)
    {
      uint64_t v147 = v34;
      uint64_t v136 = v21;
      uint64_t v41 = *(void (**)(char *, unint64_t, uint64_t))(v157 + 16);
      unint64_t v42 = v39 + ((*(unsigned __int8 *)(v157 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80));
      uint64_t v43 = (void (**)(char *, uint64_t))(v157 + 8);
      uint64_t v44 = *(void *)(v157 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        v41(v26, v42, v24);
        if (Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter()) {
          break;
        }
        (*v43)(v26, v24);
        v42 += v44;
        if (!--v40)
        {
          swift_bridgeObjectRelease();
          uint64_t v45 = 1;
          uint64_t v21 = v136;
          uint64_t v34 = v147;
          goto LABEL_12;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v51 = v157;
      uint64_t v52 = (uint64_t)v155;
      (*(void (**)(char *, char *, uint64_t))(v157 + 32))(v155, v26, v24);
      uint64_t v45 = 0;
      uint64_t v21 = v136;
      uint64_t v34 = v147;
    }
    else
    {
      uint64_t v45 = 1;
LABEL_12:
      uint64_t v51 = v157;
      uint64_t v52 = (uint64_t)v155;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56))(v52, v45, 1, v24);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v52, 1, v24) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v52, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v53 = type metadata accessor for Logger();
      __swift_project_value_buffer(v53, (uint64_t)static Logger.executor);
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v50 = 2;
        os_log_type_t v56 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v56 = 0;
        _os_log_impl(&dword_1B9C64000, v54, v55, "SettingsAffinityScorer Could not extract userStatedTask", v56, 2u);
        MEMORY[0x1BA9E48C0](v56, -1, -1);

        swift_release();
        return v50;
      }

      swift_release();
      return 2;
    }
    unint64_t v57 = v150;
    Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v52, v24);
    uint64_t v58 = v149;
    Siri_Nlu_External_UserStatedTask.task.getter();
    (*(void (**)(char *, uint64_t))(v151 + 8))(v57, v152);
    uint64_t v59 = v154;
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v154, v58, v148);
    UsoTask.firstCommonSettingReferenceIdentifier()((uint64_t)v21);
    uint64_t v60 = (uint64_t)v145;
    UsoTask.firstUserEntityNamesIdentifier()((uint64_t)v145);
    if (UsoTask.isBatterySummarizationOverride(for:)(v153))
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v61 = type metadata accessor for Logger();
      __swift_project_value_buffer(v61, (uint64_t)static Logger.executor);
      os_log_type_t v62 = Logger.logObject.getter();
      os_log_type_t v63 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v62, v63))
      {
        uint64_t v64 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v64 = 0;
        _os_log_impl(&dword_1B9C64000, v62, v63, "SettingsAffinityScorer detected battery summerization override case", v64, 2u);
        MEMORY[0x1BA9E48C0](v64, -1, -1);
      }

      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?(v60, &demangling cache variable for type metadata for UsoIdentifier?);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v59, v148);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, &demangling cache variable for type metadata for UsoIdentifier?);
      return 4;
    }
    uint64_t v147 = v34;
    uint64_t v65 = Siri_Nlu_External_UsoGraph.identifiers.getter();
    uint64_t v66 = *(void *)(v65 + 16);
    if (v66)
    {
      uint64_t v136 = v21;
      uint64_t v67 = *(void (**)(char *, unint64_t, uint64_t))(v146 + 16);
      unint64_t v68 = v65 + ((*(unsigned __int8 *)(v146 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v146 + 80));
      uint64_t v69 = (void (**)(char *, uint64_t))(v146 + 8);
      uint64_t v70 = *(void *)(v146 + 72);
      uint64_t v157 = v65;
      swift_bridgeObjectRetain();
      while (1)
      {
        v67(v158, v68, v159);
        if (Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter() == 0xD000000000000017
          && v71 == 0x80000001BA06DA00)
        {
          break;
        }
        char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        (*v69)(v158, v159);
        if (v72) {
          goto LABEL_43;
        }
        v68 += v70;
        if (!--v66)
        {
          swift_bridgeObjectRelease_n();
          uint64_t v21 = v136;
          uint64_t v60 = (uint64_t)v145;
          goto LABEL_36;
        }
      }
      swift_bridgeObjectRelease();
      (*v69)(v158, v159);
LABEL_43:
      swift_bridgeObjectRelease_n();
      uint64_t v80 = (uint64_t)v136;
      uint64_t v81 = (uint64_t)v145;
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v82 = type metadata accessor for Logger();
      __swift_project_value_buffer(v82, (uint64_t)static Logger.executor);
      uint64_t v83 = Logger.logObject.getter();
      os_log_type_t v84 = static os_log_type_t.debug.getter();
      BOOL v85 = os_log_type_enabled(v83, v84);
      uint64_t v86 = v147;
      uint64_t v87 = v148;
      if (v85)
      {
        uint64_t v88 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v88 = 0;
        _os_log_impl(&dword_1B9C64000, v83, v84, "SettingsAffinityScorer detected identifier with Settings backingAppBundleID", v88, 2u);
        MEMORY[0x1BA9E48C0](v88, -1, -1);
      }

      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?(v81, &demangling cache variable for type metadata for UsoIdentifier?);
      (*(void (**)(char *, uint64_t))(v86 + 8))(v154, v87);
      uint64_t v89 = v80;
      goto LABEL_83;
    }
    swift_bridgeObjectRelease();
LABEL_36:
    uint64_t v73 = type metadata accessor for UsoIdentifier();
    uint64_t v74 = *(void *)(v73 - 8);
    uint64_t v75 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 48);
    int v76 = v75(v21, 1, v73);
    uint64_t v77 = v144;
    outlined init with copy of ReferenceResolutionClientProtocol?(v60, v144, &demangling cache variable for type metadata for UsoIdentifier?);
    if (v76 == 1 || v75((char *)v77, 1, v73) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v77, &demangling cache variable for type metadata for UsoIdentifier?);
      if v75(v21, 1, v73) == 1 || (UsoTask.hasUserEntities()())
      {
        uint64_t v78 = v143;
        outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v21, v143, &demangling cache variable for type metadata for UsoIdentifier?);
        if (v75((char *)v78, 1, v73) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v78, &demangling cache variable for type metadata for UsoIdentifier?);
          uint64_t v79 = v147;
LABEL_67:
          if (v75(v21, 1, v73) != 1)
          {
            if (one-time initialization token for executor != -1) {
              swift_once();
            }
            uint64_t v126 = type metadata accessor for Logger();
            __swift_project_value_buffer(v126, (uint64_t)static Logger.executor);
            uint64_t v127 = v138;
            outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v21, v138, &demangling cache variable for type metadata for UsoIdentifier?);
            id v128 = Logger.logObject.getter();
            os_log_type_t v129 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v128, v129))
            {
              Swift::String v130 = (uint8_t *)swift_slowAlloc();
              uint64_t v131 = swift_slowAlloc();
              v161[0] = v131;
              *(_DWORD *)Swift::String v130 = 136315138;
              outlined init with copy of ReferenceResolutionClientProtocol?(v127, v140, &demangling cache variable for type metadata for UsoIdentifier?);
              uint64_t v132 = String.init<A>(describing:)();
              uint64_t v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v132, v133, v161);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              outlined destroy of ReferenceResolutionClientProtocol?(v127, &demangling cache variable for type metadata for UsoIdentifier?);
              _os_log_impl(&dword_1B9C64000, v128, v129, "SettingsAffinityScorer Found matching setting identifier %s on a parse with UserEntities for another domain", v130, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1BA9E48C0](v131, -1, -1);
              MEMORY[0x1BA9E48C0](v130, -1, -1);

              swift_release();
              outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v145, &demangling cache variable for type metadata for UsoIdentifier?);
              (*(void (**)(char *, uint64_t))(v147 + 8))(v154, v148);
            }
            else
            {

              swift_release();
              outlined destroy of ReferenceResolutionClientProtocol?(v127, &demangling cache variable for type metadata for UsoIdentifier?);
              outlined destroy of ReferenceResolutionClientProtocol?(v60, &demangling cache variable for type metadata for UsoIdentifier?);
              (*(void (**)(char *, uint64_t))(v79 + 8))(v154, v148);
            }
            outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, &demangling cache variable for type metadata for UsoIdentifier?);
            return 2;
          }
          int v121 = v154;
          if (one-time initialization token for executor != -1) {
            swift_once();
          }
          uint64_t v122 = type metadata accessor for Logger();
          __swift_project_value_buffer(v122, (uint64_t)static Logger.executor);
          Swift::String v123 = Logger.logObject.getter();
          os_log_type_t v124 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v123, v124))
          {
            uint64_t v125 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v125 = 0;
            _os_log_impl(&dword_1B9C64000, v123, v124, "SettingsAffinityScorer Found no relevant identifiers", v125, 2u);
            MEMORY[0x1BA9E48C0](v125, -1, -1);
          }

          swift_release();
          outlined destroy of ReferenceResolutionClientProtocol?(v60, &demangling cache variable for type metadata for UsoIdentifier?);
          (*(void (**)(char *, uint64_t))(v79 + 8))(v121, v148);
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v21, &demangling cache variable for type metadata for UsoIdentifier?);
          return 1;
        }
        uint64_t v90 = UsoIdentifier.value.getter();
        uint64_t v92 = v91;
        (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v78, v73);
        if (v90 == 0xD000000000000011 && v92 == 0x80000001BA06D9E0)
        {
          swift_bridgeObjectRelease();
          uint64_t v60 = (uint64_t)v145;
          uint64_t v79 = v147;
        }
        else
        {
          char v114 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v60 = (uint64_t)v145;
          uint64_t v79 = v147;
          if ((v114 & 1) == 0) {
            goto LABEL_67;
          }
        }
        if ((specialized SettingsAffinityScorer.isIdentifierMatchScreen(on:)() & 1) == 0) {
          goto LABEL_67;
        }
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v115 = type metadata accessor for Logger();
        __swift_project_value_buffer(v115, (uint64_t)static Logger.executor);
        uint64_t v116 = Logger.logObject.getter();
        os_log_type_t v117 = static os_log_type_t.debug.getter();
        BOOL v118 = os_log_type_enabled(v116, v117);
        uint64_t v119 = v154;
        if (v118)
        {
          uint64_t v120 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v120 = 0;
          _os_log_impl(&dword_1B9C64000, v116, v117, "SettingsAffinityScorer Found 'displayBrightness' identifier paired with 'screen' identifier", v120, 2u);
          MEMORY[0x1BA9E48C0](v120, -1, -1);
        }

        swift_release();
        outlined destroy of ReferenceResolutionClientProtocol?(v60, &demangling cache variable for type metadata for UsoIdentifier?);
        (*(void (**)(char *, uint64_t))(v79 + 8))(v119, v148);
        uint64_t v89 = (uint64_t)v21;
LABEL_83:
        outlined destroy of ReferenceResolutionClientProtocol?(v89, &demangling cache variable for type metadata for UsoIdentifier?);
        return 3;
      }
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v106 = type metadata accessor for Logger();
      __swift_project_value_buffer(v106, (uint64_t)static Logger.executor);
      uint64_t v94 = v137;
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v21, v137, &demangling cache variable for type metadata for UsoIdentifier?);
      uint64_t v107 = Logger.logObject.getter();
      os_log_type_t v108 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v107, v108))
      {
        unint64_t v109 = (uint8_t *)swift_slowAlloc();
        uint64_t v110 = swift_slowAlloc();
        v161[0] = v110;
        *(_DWORD *)unint64_t v109 = 136315138;
        outlined init with copy of ReferenceResolutionClientProtocol?(v94, v140, &demangling cache variable for type metadata for UsoIdentifier?);
        uint64_t v111 = String.init<A>(describing:)();
        uint64_t v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v112, v161);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ReferenceResolutionClientProtocol?(v94, &demangling cache variable for type metadata for UsoIdentifier?);
        _os_log_impl(&dword_1B9C64000, v107, v108, "SettingsAffinityScorer Found matching setting identifier %s on a parse without UserEntities", v109, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v110, -1, -1);
        MEMORY[0x1BA9E48C0](v109, -1, -1);

        goto LABEL_59;
      }

      swift_release();
    }
    else
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v77, &demangling cache variable for type metadata for UsoIdentifier?);
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v93 = type metadata accessor for Logger();
      __swift_project_value_buffer(v93, (uint64_t)static Logger.executor);
      uint64_t v94 = v139;
      outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v21, v139, &demangling cache variable for type metadata for UsoIdentifier?);
      uint64_t v95 = v142;
      outlined init with copy of ReferenceResolutionClientProtocol?(v60, v142, &demangling cache variable for type metadata for UsoIdentifier?);
      uint64_t v96 = Logger.logObject.getter();
      os_log_type_t v97 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v96, v97))
      {
        uint64_t v98 = swift_slowAlloc();
        uint64_t v159 = swift_slowAlloc();
        v161[0] = v159;
        *(_DWORD *)uint64_t v98 = 136315394;
        uint64_t v99 = v140;
        outlined init with copy of ReferenceResolutionClientProtocol?(v94, v140, &demangling cache variable for type metadata for UsoIdentifier?);
        uint64_t v100 = String.init<A>(describing:)();
        uint64_t v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v100, v101, v161);
        uint64_t v136 = v21;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ReferenceResolutionClientProtocol?(v94, &demangling cache variable for type metadata for UsoIdentifier?);
        *(_WORD *)(v98 + 12) = 2080;
        uint64_t v102 = v142;
        outlined init with copy of ReferenceResolutionClientProtocol?(v142, v99, &demangling cache variable for type metadata for UsoIdentifier?);
        uint64_t v103 = String.init<A>(describing:)();
        uint64_t v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v103, v104, v161);
        uint64_t v21 = v136;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of ReferenceResolutionClientProtocol?(v102, &demangling cache variable for type metadata for UsoIdentifier?);
        _os_log_impl(&dword_1B9C64000, v96, v97, "SettingsAffinityScorer Found matching setting identifier %s paired with a matching user entity identifier %s", (uint8_t *)v98, 0x16u);
        uint64_t v105 = v159;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v105, -1, -1);
        MEMORY[0x1BA9E48C0](v98, -1, -1);

LABEL_59:
        swift_release();
        uint64_t v113 = (uint64_t)v145;
LABEL_82:
        outlined destroy of ReferenceResolutionClientProtocol?(v113, &demangling cache variable for type metadata for UsoIdentifier?);
        (*(void (**)(char *, uint64_t))(v147 + 8))(v154, v148);
        uint64_t v89 = (uint64_t)v21;
        goto LABEL_83;
      }

      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?(v95, &demangling cache variable for type metadata for UsoIdentifier?);
    }
    outlined destroy of ReferenceResolutionClientProtocol?(v94, &demangling cache variable for type metadata for UsoIdentifier?);
    uint64_t v113 = v60;
    goto LABEL_82;
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v46 = type metadata accessor for Logger();
  __swift_project_value_buffer(v46, (uint64_t)static Logger.executor);
  uint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v47, v48))
  {

    return 2;
  }
  uint64_t v49 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v49 = 0;
  _os_log_impl(&dword_1B9C64000, v47, v48, "SettingsAffinityScorer Could not extract usoTask from parse", v49, 2u);
  MEMORY[0x1BA9E48C0](v49, -1, -1);

  return 2;
}

ValueMetadata *type metadata accessor for SettingsAffinityScorer()
{
  return &type metadata for SettingsAffinityScorer;
}

unint64_t lazy protocol witness table accessor for type DeviceIdiom and conformance DeviceIdiom()
{
  unint64_t result = lazy protocol witness table cache variable for type DeviceIdiom and conformance DeviceIdiom;
  if (!lazy protocol witness table cache variable for type DeviceIdiom and conformance DeviceIdiom)
  {
    type metadata accessor for DeviceIdiom();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceIdiom and conformance DeviceIdiom);
  }
  return result;
}

uint64_t SharedContextServiceImpl.__allocating_init(bridge:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t SharedContextServiceImpl.bridge.getter()
{
  return swift_unknownObjectRetain();
}

uint64_t SharedContextServiceImpl.init(bridge:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t SharedContextServiceImpl._fetchContext(with:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BA04FD90;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v6;
  Swift::Int v7 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  uint64_t v9 = *(void (**)(Swift::Int, uint64_t, uint64_t (*)(unint64_t), uint64_t))(*(void *)v2 + 104);
  swift_retain();
  v9(v7, 1, partial apply for thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [Any]?) -> (), v8);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [Any]?) -> ()(unint64_t a1, void (*a2)(uint64_t))
{
  if (a1) {
    uint64_t v3 = specialized _arrayForceCast<A, B>(_:)(a1);
  }
  else {
    uint64_t v3 = 0;
  }
  a2(v3);

  return swift_bridgeObjectRelease();
}

uint64_t SharedContextServiceImpl.deinit()
{
  swift_unknownObjectRelease();
  return v0;
}

uint64_t protocol witness for SharedContextService._fetchContext(with:) in conformance SharedContextServiceImpl()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

Swift::Int specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<String>);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        uint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      uint64_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *uint64_t v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      BOOL v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

uint64_t sub_1B9FF37D0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [Any]?) -> ()(unint64_t a1)
{
  return thunk for @escaping @callee_guaranteed @Sendable (@guaranteed [Any]?) -> ()(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t method lookup function for SharedContextServiceImpl(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SharedContextServiceImpl);
}

uint64_t dispatch thunk of SharedContextServiceImpl.__allocating_init(bridge:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of SharedContextServiceImpl._fetchContext(with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t dispatch thunk of SharedContextServiceImpl.fetchContext(for:includesNearbyDevices:with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 104))();
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UserID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UserID>);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier(&lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E4FA26E0]);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier(&lazy protocol witness table cache variable for type UserID and conformance UserID, MEMORY[0x1E4FA26E0]);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return v9;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  void (**v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (**v31)(unint64_t, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  char *v37;

  uint64_t v2 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v37 = (char *)&v30 - v7;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Siri_Nlu_External_Parser.ParserIdentifier>);
    uint64_t v9 = static _SetStorage.allocate(capacity:)();
    uint64_t v10 = 0;
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v11 = v3 + 16;
    uint64_t v35 = v12;
    uint64_t v36 = v9 + 56;
    uint64_t v13 = *(unsigned __int8 *)(v11 + 64);
    uint64_t v32 = v8;
    uint64_t v33 = a1 + ((v13 + 32) & ~v13);
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    uint64_t v31 = (uint64_t (**)(unint64_t, char *, uint64_t))(v11 + 16);
    while (1)
    {
      uint64_t v34 = v10;
      v35(v37, v33 + v14 * v10, v2);
      lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier(&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, MEMORY[0x1E4FA27B0]);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v17 = ~(-1 << *(unsigned char *)(v9 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v36 + 8 * v19);
      uint64_t v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        while (1)
        {
          uint64_t v22 = v11;
          v35(v6, *(void *)(v9 + 48) + v18 * v14, v2);
          lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, MEMORY[0x1E4FA27B0]);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v24 = *v15;
          (*v15)(v6, v2);
          if (v23) {
            break;
          }
          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v36 + 8 * (v18 >> 6));
          uint64_t v21 = 1 << v18;
          uint64_t v11 = v22;
          if ((v20 & (1 << v18)) == 0) {
            goto LABEL_8;
          }
        }
        v24(v37, v2);
        uint64_t v11 = v22;
      }
      else
      {
LABEL_8:
        uint64_t v25 = v37;
        *(void *)(v36 + 8 * v19) = v21 | v20;
        uint64_t result = (*v31)(*(void *)(v9 + 48) + v18 * v14, v25, v2);
        uint64_t v27 = *(void *)(v9 + 16);
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28)
        {
          __break(1u);
          return result;
        }
        *(void *)(v9 + 16) = v29;
      }
      uint64_t v10 = v34 + 1;
      if (v34 + 1 == v32) {
        return v9;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

unint64_t specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t result)
{
  unint64_t v1 = result;
  unint64_t v2 = result >> 62;
  if (result >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<RemoteConversationClient>);
      uint64_t result = static _SetStorage.allocate(capacity:)();
      unint64_t v3 = result;
      uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (!v5) {
        return v3;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  unint64_t v3 = MEMORY[0x1E4FBC870];
  uint64_t v4 = v1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return v3;
  }
LABEL_9:
  unint64_t v7 = v3 + 56;
  uint64_t v45 = v5;
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = 0;
    while (1)
    {
      while (1)
      {
        uint64_t result = MEMORY[0x1BA9E3990](v8, v1);
        BOOL v9 = __OFADD__(v8++, 1);
        if (v9)
        {
          __break(1u);
          goto LABEL_52;
        }
        unint64_t v10 = result;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        uint64_t result = Hasher._finalize()();
        uint64_t v11 = -1 << *(unsigned char *)(v3 + 32);
        unint64_t v12 = result & ~v11;
        unint64_t v13 = v12 >> 6;
        uint64_t v14 = *(void *)(v7 + 8 * (v12 >> 6));
        uint64_t v15 = 1 << v12;
        if (((1 << v12) & v14) != 0) {
          break;
        }
LABEL_28:
        *(void *)(v7 + 8 * v13) = v15 | v14;
        *(void *)(*(void *)(v3 + 48) + 8 * v12) = v10;
        uint64_t v24 = *(void *)(v3 + 16);
        BOOL v9 = __OFADD__(v24, 1);
        uint64_t v25 = v24 + 1;
        if (v9) {
          goto LABEL_53;
        }
        *(void *)(v3 + 16) = v25;
        if (v8 == v5) {
          return v3;
        }
      }
      uint64_t v16 = *(void *)(v3 + 48);
      uint64_t v17 = *(void *)(v16 + 8 * v12);
      uint64_t v18 = *(void *)(v10 + 112);
      uint64_t v19 = *(void *)(v10 + 120);
      if (*(void *)(v17 + 112) != v18 || *(void *)(v17 + 120) != v19)
      {
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0)
        {
          uint64_t v21 = ~v11;
          while (1)
          {
            unint64_t v12 = (v12 + 1) & v21;
            unint64_t v13 = v12 >> 6;
            uint64_t v14 = *(void *)(v7 + 8 * (v12 >> 6));
            uint64_t v15 = 1 << v12;
            if ((v14 & (1 << v12)) == 0) {
              break;
            }
            uint64_t v22 = *(void *)(v16 + 8 * v12);
            if (*(void *)(v22 + 112) != v18 || *(void *)(v22 + 120) != v19)
            {
              uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
              if ((result & 1) == 0) {
                continue;
              }
            }
            goto LABEL_11;
          }
          uint64_t v5 = v45;
          goto LABEL_28;
        }
      }
LABEL_11:
      swift_unknownObjectRelease();
      uint64_t v5 = v45;
      if (v8 == v45) {
        return v3;
      }
    }
  }
  uint64_t v26 = 0;
  unint64_t v43 = v1 + 32;
  uint64_t v44 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v26 != v44)
  {
    uint64_t v27 = *(void *)(v43 + 8 * v26);
    Hasher.init(_seed:)();
    swift_retain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    uint64_t v28 = -1 << *(unsigned char *)(v3 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    uint64_t v31 = *(void *)(v7 + 8 * (v29 >> 6));
    uint64_t v32 = 1 << v29;
    if (((1 << v29) & v31) != 0)
    {
      uint64_t v33 = *(void *)(v3 + 48);
      uint64_t v34 = *(void *)(v33 + 8 * v29);
      uint64_t v35 = *(void *)(v27 + 112);
      uint64_t v36 = *(void *)(v27 + 120);
      if (*(void *)(v34 + 112) == v35 && *(void *)(v34 + 120) == v36) {
        goto LABEL_32;
      }
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if (result) {
        goto LABEL_32;
      }
      uint64_t v38 = ~v28;
      unint64_t v29 = (v29 + 1) & v38;
      unint64_t v30 = v29 >> 6;
      uint64_t v31 = *(void *)(v7 + 8 * (v29 >> 6));
      uint64_t v32 = 1 << v29;
      if ((v31 & (1 << v29)) != 0)
      {
        while (1)
        {
          uint64_t v39 = *(void *)(v33 + 8 * v29);
          if (*(void *)(v39 + 112) == v35 && *(void *)(v39 + 120) == v36) {
            break;
          }
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if (result) {
            break;
          }
          unint64_t v29 = (v29 + 1) & v38;
          unint64_t v30 = v29 >> 6;
          uint64_t v31 = *(void *)(v7 + 8 * (v29 >> 6));
          uint64_t v32 = 1 << v29;
          if ((v31 & (1 << v29)) == 0) {
            goto LABEL_48;
          }
        }
LABEL_32:
        uint64_t result = swift_release();
        uint64_t v5 = v45;
        goto LABEL_33;
      }
LABEL_48:
      uint64_t v5 = v45;
    }
    *(void *)(v7 + 8 * v30) = v32 | v31;
    *(void *)(*(void *)(v3 + 48) + 8 * v29) = v27;
    uint64_t v41 = *(void *)(v3 + 16);
    BOOL v9 = __OFADD__(v41, 1);
    uint64_t v42 = v41 + 1;
    if (v9) {
      goto LABEL_54;
    }
    *(void *)(v3 + 16) = v42;
LABEL_33:
    if (++v26 == v5) {
      return v3;
    }
  }
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
  return result;
}

uint64_t SharedFlowPluginConnection.bundleId.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SharedFlowPluginConnection.bundlePath.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

void *SharedFlowPluginConnection.__allocating_init(initialRemoteConversation:bundleId:bundlePath:sharedFlowPluginServiceClient:loadedConversationSerial:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  swift_allocObject();
  uint64_t v16 = specialized SharedFlowPluginConnection.init(initialRemoteConversation:bundleId:bundlePath:sharedFlowPluginServiceClient:loadedConversationSerial:)(a1, a2, a3, a4, a5, a6, a7, a8);
  swift_unknownObjectRelease();
  swift_release();
  return v16;
}

void *SharedFlowPluginConnection.init(initialRemoteConversation:bundleId:bundlePath:sharedFlowPluginServiceClient:loadedConversationSerial:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = specialized SharedFlowPluginConnection.init(initialRemoteConversation:bundleId:bundlePath:sharedFlowPluginServiceClient:loadedConversationSerial:)(a1, a2, a3, a4, a5, a6, a7, a8);
  swift_unknownObjectRelease();
  swift_release();
  return v8;
}

uint64_t closure #2 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[9] = a1;
  v4[10] = a4;
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  v4[11] = v5;
  v4[12] = *(void *)(v5 + 64);
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  v4[15] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](closure #2 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:), v6, 0);
}

uint64_t closure #2 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:)()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  unint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "Loading a new RemoteConversation object, since the connection to SharedFlowPluginService was previously invalidated.", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }
  uint64_t v5 = v0[14];
  uint64_t v6 = (void *)v0[10];

  v0[16] = v6[9];
  v0[17] = v6[2];
  v0[18] = v6[3];
  v0[19] = v6[4];
  v0[20] = v6[5];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v5, 1, 1, v7);
  uint64_t v8 = static MessageBusActor.shared;
  v0[21] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](closure #2 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:), v8, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  uint64_t v11;

  unint64_t v2 = v0[19];
  uint64_t v1 = v0[20];
  uint64_t v4 = v0[17];
  os_log_type_t v3 = v0[18];
  uint64_t v5 = v0[13];
  uint64_t v6 = v0[11];
  outlined init with copy of UUID?(v0[14], v5);
  uint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (void *)swift_allocObject();
  v0[22] = v8;
  void v8[2] = v4;
  v8[3] = v3;
  v8[4] = v2;
  v8[5] = v1;
  v8[6] = 0;
  v8[7] = 0;
  outlined init with take of UUID?(v5, (uint64_t)v8 + v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  BOOL v9 = (void *)swift_task_alloc();
  v0[23] = v9;
  char *v9 = v0;
  v9[1] = closure #2 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:);
  return specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)((uint64_t)&async function pointer to partial apply for closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:), (uint64_t)v8);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = *(void *)(v0 + 112);
  unint64_t v2 = *(void *)(v0 + 120);
  swift_release();
  outlined destroy of UUID?(v1);
  return MEMORY[0x1F4188298](closure #2 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:), v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(void);
  void *v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;

  uint64_t v1 = v0[24];
  swift_release();
  if (v1)
  {
    unint64_t v2 = v0[24];
    os_log_type_t v3 = v0[4];
    uint64_t v5 = (void *)v0[9];
    uint64_t v4 = v0[10];
    *(void *)(v4 + 48) = v2;
    *(void *)(v4 + 56) = v3;
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    void *v5 = v2;
    v5[1] = v3;
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
  else
  {
    uint64_t v10 = v0 + 17;
    BOOL v9 = v0[17];
    uint64_t v8 = (void *)v10[1];
    _StringGuts.grow(_:)(75);
    v11._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    v11._object = (void *)0x80000001BA06DB70;
    String.append(_:)(v11);
    swift_bridgeObjectRetain();
    v12._uint64_t countAndFlagsBits = v9;
    v12._object = v8;
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._object = (void *)0x80000001BA06DBA0;
    v13._uint64_t countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v13);
    return specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0, 0xE000000000000000, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/RemoteConversation/SharedFlowPluginService/SharedFlowPluginConnection.swift", 144, 2, 93);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  unint64_t v2 = *(void *)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 120);
  swift_release();
  swift_release();
  outlined destroy of UUID?(v2);
  return MEMORY[0x1F4188298](closure #2 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:), v1, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #2 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[2] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v4[5] = v2;
  v4[24] = a1;
  v4[25] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = v4[21];
    uint64_t v6 = closure #2 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:);
  }
  else
  {
    uint64_t v7 = v4[21];
    swift_release();
    uint64_t v6 = closure #2 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:);
    uint64_t v5 = v7;
  }
  return MEMORY[0x1F4188298](v6, v5, 0);
}

SiriKitRuntime::RemoteConversationConnectionInvalidationResult __swiftcall SharedFlowPluginConnection.invalidate()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "Invalidating RemoteConversation XPC connection.", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  uint64_t v6 = v1[11];
  swift_beginAccess();
  SiriKitRuntime::RemoteConversationConnectionInvalidationResult v7 = *(void *)(*(void *)(v6 + 32) + 16) == 0;
  v1[8] = 0;
  swift_release();
  v1[6] = 0;
  v1[7] = 0;
  swift_unknownObjectRelease();
  InterruptibleTaskManager.invalidate()();
  return v7;
}

uint64_t protocol witness for RemoteConversationConnectionProviding.withRemoteConversationConnectionIfValid<A>(execute:) in conformance SharedFlowPluginConnection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return SharedFlowPluginConnection.withRemoteConversationConnectionIfValid<A>(execute:)(a1, a2, a3, a4);
}

uint64_t protocol witness for RemoteConversationConnectionProviding.invalidate() in conformance SharedFlowPluginConnection()
{
  return SharedFlowPluginConnection.invalidate()();
}

void *specialized SharedFlowPluginConnection.init(initialRemoteConversation:bundleId:bundlePath:sharedFlowPluginServiceClient:loadedConversationSerial:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[6] = a1;
  v8[7] = a2;
  void v8[2] = a3;
  v8[3] = a4;
  v8[4] = a5;
  v8[5] = a6;
  v8[8] = 0;
  v8[9] = a7;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = a3;
  v12._object = a4;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  type metadata accessor for InterruptibleTaskManager();
  uint64_t v14 = (void *)swift_allocObject();
  v14[4] = MEMORY[0x1E4FBC868];
  v14[5] = 0;
  id v14[2] = 0xD00000000000001BLL;
  v14[3] = 0x80000001BA06DC60;
  v8[10] = a8;
  v8[11] = v14;
  return v8;
}

uint64_t sub_1B9FF4EFC()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #2 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  SiriKitRuntime::RemoteConversationConnectionInvalidationResult v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *SiriKitRuntime::RemoteConversationConnectionInvalidationResult v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #2 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:)(a1, v4, v5, v6);
}

uint64_t partial apply for closure #3 in SharedFlowPluginConnection.withRemoteConversationConnection<A>(execute:)(uint64_t a1)
{
  uint64_t v4 = (int *)v1[3];
  uint64_t v6 = v1[5];
  uint64_t v5 = v1[6];
  SiriKitRuntime::RemoteConversationConnectionInvalidationResult v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *SiriKitRuntime::RemoteConversationConnectionInvalidationResult v7 = v2;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v4 + *v4);
  uint64_t v8 = (void *)swift_task_alloc();
  void v7[2] = v8;
  *uint64_t v8 = v7;
  v8[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v10(a1, v6, v5);
}

uint64_t method lookup function for SharedFlowPluginConnection(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SharedFlowPluginConnection);
}

uint64_t dispatch thunk of SharedFlowPluginConnection.__allocating_init(initialRemoteConversation:bundleId:bundlePath:sharedFlowPluginServiceClient:loadedConversationSerial:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t sub_1B9FF5164()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 64) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }

  return MEMORY[0x1F4186498](v0, v3 + v4, v2 | 7);
}

uint64_t SharedFlowPluginService.flowLoader.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 16, a1);
}

uint64_t SharedFlowPluginService.siriKitRuntime.getter()
{
  return swift_retain();
}

uint64_t SharedFlowPluginService.WarmupTracker.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v0 + 112) = 0;
  return v0;
}

uint64_t SharedFlowPluginService.warmupTracker.getter()
{
  return swift_retain();
}

uint64_t SharedFlowPluginService.CurrentTurnCache.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t SharedFlowPluginService.currentTurnCache.getter()
{
  return swift_retain();
}

uint64_t SharedFlowPluginService.__allocating_init(overrideFlowLoader:overrideSiriKitRuntime:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  SharedFlowPluginService.init(overrideFlowLoader:overrideSiriKitRuntime:)(a1, a2);
  return v4;
}

void *SharedFlowPluginService.init(overrideFlowLoader:overrideSiriKitRuntime:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for SharedFlowPluginService.WarmupTracker();
  uint64_t v6 = swift_allocObject();
  swift_defaultActor_initialize();
  *(void *)(v6 + 112) = 0;
  v3[8] = v6;
  type metadata accessor for SharedFlowPluginService.CurrentTurnCache();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0;
  v3[9] = v7;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)&v12, &demangling cache variable for type metadata for DirectFlowPluginLoader?);
  if (!*((void *)&v13 + 1))
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v12, &demangling cache variable for type metadata for DirectFlowPluginLoader?);
    uint64_t v10 = type metadata accessor for DirectFlowPluginLoaderImpl();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = MEMORY[0x1E4FBC868];
    v3[5] = v10;
    v3[6] = &protocol witness table for DirectFlowPluginLoaderImpl;
    v3[2] = v11;
    if (a2) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  outlined init with take of ReferenceResolutionClientProtocol(&v12, (uint64_t)v15);
  outlined init with take of ReferenceResolutionClientProtocol(v15, (uint64_t)(v3 + 2));
  if (!a2)
  {
LABEL_5:
    uint64_t v16 = 0;
    memset(v15, 0, sizeof(v15));
    type metadata accessor for SiriKitRuntimeState();
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t v14 = 0;
    swift_allocObject();
    a2 = SiriKitRuntimeState.init(customEventSender:rrClient:)((uint64_t)v15, (uint64_t)&v12);
  }
LABEL_6:
  outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for DirectFlowPluginLoader?);
  v3[7] = a2;
  return v3;
}

uint64_t SharedFlowPluginService.startTurn(turnData:bridge:reply:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v10 - 8);
  long long v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v14 = (void *)swift_allocObject();
  id v14[2] = v5;
  v14[3] = a1;
  v14[4] = a2;
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = &async function pointer to partial apply for closure #1 in SharedFlowPluginService.startTurn(turnData:bridge:reply:);
  v16[5] = v14;
  v16[6] = a3;
  v16[7] = a4;
  swift_retain();
  id v17 = a1;
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v12, (uint64_t)&async function pointer to partial apply for closure #1 in static AsyncTaskUtils.taskWithCatchingCompletion(completion:do:), (uint64_t)v16);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in SharedFlowPluginService.startTurn(turnData:bridge:reply:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[18] = a2;
  v3[19] = a3;
  v3[17] = a1;
  uint64_t v4 = type metadata accessor for SiriKitEventPayload();
  v3[20] = v4;
  v3[21] = *(void *)(v4 - 8);
  v3[22] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  v3[23] = swift_task_alloc();
  v3[24] = type metadata accessor for InvocationStateImpl();
  v3[25] = swift_task_alloc();
  v3[26] = type metadata accessor for RemoteConversationTurnData(0);
  v3[27] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v5 = static ConversationActor.shared;
  v3[28] = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in SharedFlowPluginService.startTurn(turnData:bridge:reply:), v5, 0);
}

uint64_t closure #1 in SharedFlowPluginService.startTurn(turnData:bridge:reply:)()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 136) + 64);
  *(void *)(v0 + 232) = v1;
  return MEMORY[0x1F4188298](closure #1 in SharedFlowPluginService.startTurn(turnData:bridge:reply:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 224);
  SharedFlowPluginService.WarmupTracker.warmupTask.getter();
  swift_release();
  return MEMORY[0x1F4188298](closure #1 in SharedFlowPluginService.startTurn(turnData:bridge:reply:), v1, 0);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void (*v4)(void);
  void *v5;
  uint64_t *v6;
  int *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;
  void *v33;
  uint64_t v34;

  uint64_t v33 = v0;
  uint64_t v1 = (void *)v0[18];
  uint64_t v2 = *(void *)(v0[17] + 72);
  uint64_t v3 = *(void **)(v2 + 16);
  *(void *)(v2 + 16) = v1;

  uint64_t v4 = *(void (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0xA0);
  uint64_t v5 = v1;
  v4();
  uint64_t v7 = (int *)v0[26];
  uint64_t v6 = (uint64_t *)v0[27];
  uint64_t v8 = (void *)v0[25];
  uint64_t v25 = v0[24];
  unint64_t v30 = v0[23];
  uint64_t v9 = *v6;
  uint64_t v10 = (void *)v6[1];
  unint64_t v29 = *v6;
  uint64_t v11 = *(void **)((char *)v6 + v7[7]);
  uint64_t v32 = 0;
  memset(v31, 0, sizeof(v31));
  swift_bridgeObjectRetain();
  long long v12 = v11;
  InvocationStateImpl.init(executionRequestId:requestContextData:previousInvocationState:)(v9, (uint64_t)v10, v12, (uint64_t)v31, v8);
  uint64_t v13 = v6[3];
  uint64_t v27 = (uint64_t)v6 + v7[6];
  uint64_t v28 = v6[2];
  v0[10] = v25;
  v0[11] = &protocol witness table for InvocationStateImpl;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v0 + 7);
  outlined init with copy of InvocationStateImpl((uint64_t)v8, (uint64_t)boxed_opaque_existential_0);
  uint64_t v26 = (uint64_t)v6 + v7[8];
  swift_getObjectType();
  uint64_t v15 = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v16 = v12;
  id v17 = ServiceBridge.errorHandlingProxy.getter();
  uint64_t v18 = (uint64_t *)((char *)v6 + v7[12]);
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  uint64_t v21 = *((unsigned char *)v6 + v7[10]);
  outlined copy of Data?(*v18, v20);
  SiriKitRuntimeState.makeNewTurn(requestContextData:executionRequestId:rootRequestId:sessionId:invocationState:conversationLoggingId:bridge:scopedRRData:invokedByPeerToPeerEORR:)(v16, v29, v10, v28, v15, v27, (uint64_t)(v0 + 7), v26, v0 + 2, v17, v19, v20, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  outlined consume of Data?(v19, v20);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 7));
  type metadata accessor for ConversationSELFHelper();
  static ConversationSELFHelper.shared.getter();
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.makeAndSetConversationId(fromExecutionRequestId:)();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v30, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  static ConversationSELFHelper.shared.getter();
  swift_bridgeObjectRetain();
  dispatch thunk of ConversationSELFHelper.setExecutionRequestId(fromExecutionRequestId:)();
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of ReferenceResolutionClientProtocol?(v30, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v22 = v0[5];
  char v23 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v22);
  (*(void (**)(uint64_t, uint64_t))(v23 + 72))(v22, v23);
  return MEMORY[0x1F4188298](closure #1 in SharedFlowPluginService.startTurn(turnData:bridge:reply:), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;

  uint64_t v2 = v0[21];
  uint64_t v1 = v0[22];
  uint64_t v3 = v0[20];
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[16];
  __swift_project_boxed_opaque_existential_1(v0 + 12, v4);
  type metadata accessor for SiriKitEvent();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, *MEMORY[0x1E4FA1998], v3);
  uint64_t v6 = SiriKitEvent.__allocating_init(_:builder:)();
  v0[30] = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[31] = v7;
  *uint64_t v7 = v0;
  v7[1] = closure #1 in SharedFlowPluginService.startTurn(turnData:bridge:reply:);
  return MEMORY[0x1F4151BE0](v6, v4, v5);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  uint64_t v1 = *(void *)v0 + 96;
  uint64_t v2 = *(void *)(*(void *)v0 + 224);
  swift_task_dealloc();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v1);
  return MEMORY[0x1F4188298](closure #1 in SharedFlowPluginService.startTurn(turnData:bridge:reply:), v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  uint64_t v7;

  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "Bootstraping the suggestions broker provider inside SharedFlowPluginService startTurn()", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }

  type metadata accessor for SiriSuggestionsBrokerProvider();
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v5;
  uint8_t *v5 = v0;
  v5[1] = closure #1 in SharedFlowPluginService.startTurn(turnData:bridge:reply:);
  return static SiriSuggestionsBrokerProvider.bootStrapSuggestionsBrokerProvider()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 224);
  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in SharedFlowPluginService.startTurn(turnData:bridge:reply:), v1, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  uint64_t v1 = v0[27];
  outlined destroy of InvocationStateImpl(v0[25], (uint64_t (*)(void))type metadata accessor for InvocationStateImpl);
  outlined destroy of InvocationStateImpl(v1, type metadata accessor for RemoteConversationTurnData);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

id SharedFlowPluginService.CurrentTurnCache.set(_:)(void *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  *(void *)(v1 + 16) = a1;

  return a1;
}

uint64_t SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = v9;
  uint64_t v47 = a3;
  uint64_t v48 = a8;
  uint64_t v45 = a5;
  uint64_t v46 = a1;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v44 = *(void *)(v15 - 8);
  uint64_t v16 = *(void *)(v44 + 64);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v21 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v19, 1, 1, v21);
  outlined init with copy of ReferenceResolutionClientProtocol?(a7, (uint64_t)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v22 = one-time initialization token for shared;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v40 = a2;
  uint64_t v41 = a4;
  uint64_t v42 = a9;
  unint64_t v43 = v19;
  char v23 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = v10;
  if (v22 != -1) {
    swift_once();
  }
  uint64_t v25 = static ConversationActor.shared;
  unint64_t v26 = lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor();
  unint64_t v27 = (*(unsigned __int8 *)(v44 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  unint64_t v28 = (v16 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = (v28 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (void *)swift_allocObject();
  v30[2] = v25;
  v30[3] = v26;
  uint64_t v31 = v45;
  v30[4] = v24;
  v30[5] = v31;
  v30[6] = a6;
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v23, (uint64_t)v30 + v27, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v32 = (void *)((char *)v30 + v28);
  uint64_t v33 = v40;
  *uint64_t v32 = v46;
  v32[1] = v33;
  uint64_t v34 = (void *)((char *)v30 + v29);
  uint64_t v35 = v41;
  *uint64_t v34 = v47;
  v34[1] = v35;
  uint64_t v36 = (void *)((char *)v30 + ((v29 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v37 = v42;
  *uint64_t v36 = v48;
  v36[1] = v37;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v43, (uint64_t)&async function pointer to partial apply for closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:), (uint64_t)v30);
  return swift_release();
}

uint64_t closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 672) = v15;
  *(_OWORD *)(v8 + 640) = v13;
  *(_OWORD *)(v8 + 656) = v14;
  *(void *)(v8 + 632) = a8;
  *(void *)(v8 + 624) = a7;
  *(void *)(v8 + 616) = a6;
  *(void *)(v8 + 608) = a5;
  *(void *)(v8 + 600) = a4;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  *(void *)(v8 + 680) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  *(void *)(v8 + 688) = v9;
  *(void *)(v8 + 696) = *(void *)(v9 - 8);
  *(void *)(v8 + 704) = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v10 = static ConversationActor.shared;
  *(void *)(v8 + 712) = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:), v10, 0);
}

uint64_t closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:)()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 600) + 64);
  *(void *)(v0 + 720) = v1;
  return MEMORY[0x1F4188298](closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = SharedFlowPluginService.WarmupTracker.warmupTask.getter();
  *(void *)(v0 + 728) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 736) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:);
  uint64_t v3 = MEMORY[0x1E4FBC848] + 8;
  return MEMORY[0x1F4187DC0](v2, v1, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 720);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:), v1, 0);
}

{
  uint64_t v0;

  return MEMORY[0x1F4188298](closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:), *(void *)(v0 + 712), 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  long long v24;
  long long v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  BOOL v38;
  unint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  BOOL v45;
  unint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  void (*v50)(uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(void);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD v62[2];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  uint64_t v64 = v0;
  uint64_t v1 = v0 + 184;
  if (*(void *)(v0 + 616))
  {
    uint64_t v2 = *(void *)(v0 + 696);
    uint64_t v3 = *(void *)(v0 + 688);
    uint64_t v4 = *(void *)(v0 + 680);
    outlined init with copy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 624), v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v3) != 1)
    {
      uint64_t v9 = (_OWORD *)(v0 + 424);
      uint64_t v18 = *(void *)(v0 + 704);
      uint64_t v19 = *(void *)(v0 + 696);
      uint64_t v20 = *(void *)(v0 + 648);
      uint64_t v60 = *(void *)(v0 + 688);
      os_log_type_t v55 = *(void *)(v0 + 656);
      uint64_t v21 = *(void *)(v0 + 600);
      (*(void (**)(uint64_t, void))(v19 + 32))(v18, *(void *)(v0 + 680));
      type metadata accessor for ConversationSELFHelper();
      static ConversationSELFHelper.shared.getter();
      uint64_t v22 = (void *)swift_task_alloc();
      void v22[2] = v21;
      v22[3] = v20;
      uint64_t v1 = v0 + 184;
      v22[4] = v55;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowPluginAndBundle?);
      dispatch thunk of ConversationSELFHelper.withExecutionFlowPluginLoadTime<A>(rcId:pluginId:hypothesisId:_:)();
      swift_release();
      swift_task_dealloc();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v60);
      goto LABEL_12;
    }
    outlined destroy of ReferenceResolutionClientProtocol?(*(void *)(v0 + 680), (uint64_t *)&demangling cache variable for type metadata for UUID?);
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.executor);
  uint64_t v6 = Logger.logObject.getter();
  uint64_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_1B9C64000, v6, v7, "SharedFlowPluginService: Got loadFlowPlugin call without an rcId or hypothesisId. Likely a plugin signal, not associated with an RC.", v8, 2u);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  uint64_t v9 = (_OWORD *)(v0 + 104);
  uint64_t v10 = *(void *)(v0 + 656);
  uint64_t v11 = *(void *)(v0 + 648);
  uint64_t v12 = *(void **)(v0 + 600);

  long long v13 = v12 + 2;
  long long v14 = v12[5];
  uint64_t v15 = v12[6];
  __swift_project_boxed_opaque_existential_1(v13, v14);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 8))(v11, v10, v14, v15);
  if (*(void *)(v0 + 40))
  {
    uint64_t v16 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 136) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 152) = v16;
    *(_OWORD *)(v0 + 168) = *(_OWORD *)(v0 + 80);
    uint64_t v17 = *(_OWORD *)(v0 + 32);
    void *v9 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v0 + 120) = v17;
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for (pluginAndBundle: FlowPluginAndBundle, wasInCache: Bool)?);
    void *v9 = 0u;
    *(_OWORD *)(v0 + 120) = 0u;
    *(_OWORD *)(v0 + 136) = 0u;
    *(_OWORD *)(v0 + 152) = 0u;
    *(_OWORD *)(v0 + 168) = 0u;
  }
LABEL_12:
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v9, v1, &demangling cache variable for type metadata for FlowPluginAndBundle?);
  outlined init with copy of ReferenceResolutionClientProtocol?(v1, v0 + 344, &demangling cache variable for type metadata for FlowPluginAndBundle?);
  if (*(void *)(v0 + 368))
  {
    uint64_t v61 = v1;
    os_log_type_t v56 = *(void *)(v0 + 640);
    uint64_t v59 = *(void *)(v0 + 632);
    char v23 = *(void *)(v0 + 600);
    uint64_t v24 = *(_OWORD *)(v0 + 392);
    *(_OWORD *)(v0 + 296) = *(_OWORD *)(v0 + 376);
    *(_OWORD *)(v0 + 312) = v24;
    *(_OWORD *)(v0 + 328) = *(_OWORD *)(v0 + 408);
    uint64_t v25 = *(_OWORD *)(v0 + 360);
    *(_OWORD *)(v0 + 264) = *(_OWORD *)(v0 + 344);
    *(_OWORD *)(v0 + 280) = v25;
    unint64_t v57 = type metadata accessor for RemoteConversationService(0);
    outlined init with copy of ReferenceResolutionClientProtocol(v0 + 264, v0 + 504);
    outlined init with copy of ReferenceResolutionClientProtocol(v0 + 304, v0 + 544);
    unint64_t v26 = *(void *)(v23 + 56);
    unint64_t v27 = swift_allocObject();
    swift_weakInit();
    type metadata accessor for SnippetManager();
    memset(v62, 0, sizeof(v62));
    os_log_type_t v63 = 0;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    unint64_t v28 = static SnippetManager.sharedInstance.getter();
    unint64_t v29 = *(void *)(v0 + 528);
    unint64_t v30 = *(void *)(v0 + 536);
    uint64_t v31 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 504, v29);
    uint64_t v32 = *(void *)(v0 + 568);
    uint64_t v33 = *(void *)(v0 + 576);
    uint64_t v34 = __swift_mutable_project_boxed_opaque_existential_1(v0 + 544, v32);
    specialized RemoteConversationService.__allocating_init(flowPlugin:pluginId:flowPluginBundle:siriKitRuntime:turnDataProvider:snippetManager:overrideRRClient:)(v31, v59, v56, v34, v26, (uint64_t)partial apply for closure #2 in closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:), v27, v28, (uint64_t)v62, v57, v29, v32, v30, v33);
    swift_release();
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 544);
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 504);
    swift_release();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    uint64_t v36 = Logger.logObject.getter();
    uint64_t v37 = static os_log_type_t.debug.getter();
    uint64_t v38 = os_log_type_enabled(v36, v37);
    uint64_t v39 = *(void *)(v0 + 640);
    if (v38)
    {
      uint64_t v58 = *(void *)(v0 + 632);
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      *(void *)&v62[0] = v41;
      *(_DWORD *)uint64_t v40 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 584) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v39, (uint64_t *)v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v36, v37, "SharedFlowPluginService: Found flow for bundleId=%s", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v41, -1, -1);
      MEMORY[0x1BA9E48C0](v40, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v50 = *(void (**)(uint64_t))(v0 + 664);
    uint64_t v51 = swift_retain();
    v50(v51);
    swift_release_n();
    outlined destroy of FlowPluginAndBundle(v0 + 264);
    uint64_t v52 = v61;
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0 + 344, &demangling cache variable for type metadata for FlowPluginAndBundle?);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    unint64_t v43 = Logger.logObject.getter();
    uint64_t v44 = static os_log_type_t.error.getter();
    uint64_t v45 = os_log_type_enabled(v43, v44);
    uint64_t v46 = *(void *)(v0 + 640);
    if (v45)
    {
      uint64_t v47 = *(void *)(v0 + 632);
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      *(void *)&v62[0] = v49;
      *(_DWORD *)uint64_t v48 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 592) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v46, (uint64_t *)v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v43, v44, "SharedFlowPluginService: No flow found for bundleId=%s", v48, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v49, -1, -1);
      MEMORY[0x1BA9E48C0](v48, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(void))(v0 + 664))(0);
    uint64_t v52 = v1;
  }
  outlined destroy of ReferenceResolutionClientProtocol?(v52, &demangling cache variable for type metadata for FlowPluginAndBundle?);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v53 = *(uint64_t (**)(void))(v0 + 8);
  return v53();
}

double closure #1 in closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:)@<D0>(void (*a1)(char *)@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _OWORD *a5@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v9 = type metadata accessor for FlowPluginLoadResult();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v13 = a2 + 2;
  uint64_t v14 = a2[5];
  uint64_t v15 = a2[6];
  __swift_project_boxed_opaque_existential_1(v13, v14);
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 8))(&v21, a3, a4, v14, v15);
  if (*((void *)&v22 + 1))
  {
    long long v29 = v24;
    long long v30 = v25;
    long long v27 = v22;
    long long v28 = v23;
    long long v26 = v21;
    FlowPluginLoadResult.init(success:wasInCache:)();
    v20(v12);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    long long v16 = v29;
    long long v17 = v30;
    a5[2] = v28;
    a5[3] = v16;
    a5[4] = v17;
    long long v18 = v27;
    *a5 = v26;
    a5[1] = v18;
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v21, &demangling cache variable for type metadata for (pluginAndBundle: FlowPluginAndBundle, wasInCache: Bool)?);
    FlowPluginLoadResult.init(success:wasInCache:)();
    v20(v12);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    *(void *)&long long v18 = 0;
    a5[3] = 0u;
    a5[4] = 0u;
    a5[1] = 0u;
    a5[2] = 0u;
    *a5 = 0u;
  }
  return *(double *)&v18;
}

char *closure #2 in closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  if (!swift_weakLoadStrong()) {
    return 0;
  }
  swift_retain();
  swift_release();
  uint64_t v4 = SharedFlowPluginService.CurrentTurnCache.getIfMatches(executionRequestId:)(a1, a2);
  swift_release();
  return v4;
}

char *SharedFlowPluginService.CurrentTurnCache.getIfMatches(executionRequestId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(char **)(v2 + 16);
  if (!v3)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_1B9C64000, v7, v8, "Trying to recover turn data from cache, but not in a turn", v9, 2u);
      MEMORY[0x1BA9E48C0](v9, -1, -1);
    }
    goto LABEL_17;
  }
  BOOL v4 = *(void *)&v3[OBJC_IVAR___SKRConversationTurnDataXPC_executionRequestId] == a1
    && *(void *)&v3[OBJC_IVAR___SKRConversationTurnDataXPC_executionRequestId + 8] == a2;
  if (!v4 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v10 = one-time initialization token for executor;
    uint64_t v7 = v3;
    if (v10 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_1B9C64000, v12, v13, "Trying to recover turn data from cache, but request ID does not match", v14, 2u);
      MEMORY[0x1BA9E48C0](v14, -1, -1);

      return 0;
    }

LABEL_17:
    return 0;
  }
  uint64_t v5 = v3;
  return v3;
}

uint64_t SharedFlowPluginService.endTurn(reply:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  os_log_type_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 1, 1, v10);
  uint64_t v11 = one-time initialization token for shared;
  swift_retain();
  swift_retain();
  if (v11 != -1) {
    swift_once();
  }
  uint64_t v12 = static ConversationActor.shared;
  unint64_t v13 = lazy protocol witness table accessor for type ConversationActor and conformance ConversationActor();
  uint64_t v14 = (void *)swift_allocObject();
  id v14[2] = v12;
  v14[3] = v13;
  v14[4] = v3;
  v14[5] = a1;
  v14[6] = a2;
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in SharedFlowPluginService.endTurn(reply:), (uint64_t)v14);
  return swift_release();
}

uint64_t closure #1 in SharedFlowPluginService.endTurn(reply:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  uint64_t v7 = static ConversationActor.shared;
  return MEMORY[0x1F4188298](closure #1 in SharedFlowPluginService.endTurn(reply:), v7, 0);
}

uint64_t closure #1 in SharedFlowPluginService.endTurn(reply:)()
{
  uint64_t v1 = (void (*)(void))v0[3];
  uint64_t v2 = *(void *)(v0[2] + 72);
  uint64_t v3 = *(void **)(v2 + 16);
  *(void *)(v2 + 16) = 0;

  v1();
  BOOL v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

Swift::Void __swiftcall SharedFlowPluginService.CurrentTurnCache.reset()()
{
  uint64_t v1 = *(void **)(v0 + 16);
  *(void *)(v0 + 16) = 0;
}

char *SharedFlowPluginService.getCachedTurnData(executionRequestId:)(uint64_t a1, uint64_t a2)
{
  return SharedFlowPluginService.CurrentTurnCache.getIfMatches(executionRequestId:)(a1, a2);
}

uint64_t SharedFlowPluginService.CurrentTurnCache.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = 0;
  return result;
}

uint64_t SharedFlowPluginService.CurrentTurnCache.deinit()
{
  return v0;
}

uint64_t SharedFlowPluginService.CurrentTurnCache.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t SharedFlowPluginService.WarmupTracker.warmupTask.getter()
{
  if (v0[14])
  {
    uint64_t v1 = v0[14];
  }
  else
  {
    uint64_t v1 = closure #1 in SharedFlowPluginService.WarmupTracker.warmupTask.getter(*v0);
    v0[14] = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t closure #1 in SharedFlowPluginService.WarmupTracker.warmupTask.getter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v2 - 8);
  BOOL v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  uint64_t v7 = (void *)swift_allocObject();
  void v7[2] = 0;
  v7[3] = 0;
  v7[4] = a1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for TaskPriority?);
    uint64_t v8 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v9 = v10;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
    }
  }
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = &async function pointer to partial apply for closure #1 in closure #1 in SharedFlowPluginService.WarmupTracker.warmupTask.getter;
  *(void *)(v11 + 24) = v7;
  if (v9 | v8)
  {
    v13[0] = 0;
    v13[1] = 0;
    v13[2] = v8;
    v13[3] = v9;
  }
  return swift_task_create();
}

uint64_t closure #1 in closure #1 in SharedFlowPluginService.WarmupTracker.warmupTask.getter()
{
  return MEMORY[0x1F4188298](closure #1 in closure #1 in SharedFlowPluginService.WarmupTracker.warmupTask.getter, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  specialized static SharedFlowPluginService.WarmupTracker.warmup()();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t SharedFlowPluginService.WarmupTracker.ensureWarmedUp()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](SharedFlowPluginService.WarmupTracker.ensureWarmedUp(), v0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = SharedFlowPluginService.WarmupTracker.warmupTask.getter();
  *(void *)(v0 + 24) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v2;
  *uint64_t v2 = v0;
  v2[1] = SharedFlowPluginService.WarmupTracker.ensureWarmedUp();
  uint64_t v3 = MEMORY[0x1E4FBC848] + 8;
  return MEMORY[0x1F4187DC0](v2, v1, v3);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](AceServiceInvokerImpl.prepareForAudioHandoffFailed(), v1, 0);
}

Swift::Void __swiftcall SharedFlowPluginService.WarmupTracker.beginWarmupIfNeeded()()
{
  SharedFlowPluginService.WarmupTracker.warmupTask.getter();

  swift_release();
}

uint64_t SharedFlowPluginService.WarmupTracker.deinit()
{
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t SharedFlowPluginService.WarmupTracker.__deallocating_deinit()
{
  swift_release();
  swift_defaultActor_destroy();

  return MEMORY[0x1F4188210](v0);
}

uint64_t SharedFlowPluginService.WarmupTracker.init()()
{
  swift_defaultActor_initialize();
  *(void *)(v0 + 112) = 0;
  return v0;
}

uint64_t type metadata accessor for SharedFlowPluginService.WarmupTracker()
{
  return self;
}

uint64_t type metadata accessor for SharedFlowPluginService.CurrentTurnCache()
{
  return self;
}

uint64_t SharedFlowPluginService.WarmupTracker.unownedExecutor.getter()
{
  return v0;
}

uint64_t SharedFlowPluginService.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t SharedFlowPluginService.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

char *protocol witness for TurnDataProviding.getCachedTurnData(executionRequestId:) in conformance SharedFlowPluginService(uint64_t a1, uint64_t a2)
{
  return SharedFlowPluginService.CurrentTurnCache.getIfMatches(executionRequestId:)(a1, a2);
}

uint64_t partial apply for closure #1 in SharedFlowPluginService.startTurn(turnData:bridge:reply:)()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in SharedFlowPluginService.startTurn(turnData:bridge:reply:)(v2, v3, v4);
}

uint64_t sub_1B9FF876C()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 56) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, ((((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t partial apply for closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v12 = v1[3];
  uint64_t v13 = v1[2];
  uint64_t v5 = v1[5];
  uint64_t v11 = v1[4];
  uint64_t v6 = v1[6];
  uint64_t v7 = (uint64_t)v1 + v4;
  uint64_t v8 = *(void *)((char *)v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:)(a1, v13, v12, v11, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in SharedFlowPluginService.endTurn(reply:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in SharedFlowPluginService.endTurn(reply:)(a1, v4, v5, v6, v7, v8);
}

uint64_t type metadata accessor for SharedFlowPluginService()
{
  return self;
}

uint64_t method lookup function for SharedFlowPluginService(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SharedFlowPluginService);
}

uint64_t dispatch thunk of SharedFlowPluginService.__allocating_init(overrideFlowLoader:overrideSiriKitRuntime:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t method lookup function for SharedFlowPluginService.CurrentTurnCache(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SharedFlowPluginService.CurrentTurnCache);
}

uint64_t dispatch thunk of SharedFlowPluginService.CurrentTurnCache.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t method lookup function for SharedFlowPluginService.WarmupTracker(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SharedFlowPluginService.WarmupTracker);
}

uint64_t dispatch thunk of SharedFlowPluginService.WarmupTracker.ensureWarmedUp()()
{
  uint64_t v4 = (uint64_t (*)(void))(*(void *)(*(void *)v0 + 120) + **(int **)(*(void *)v0 + 120));
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v4();
}

uint64_t dispatch thunk of SharedFlowPluginService.WarmupTracker.beginWarmupIfNeeded()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of SharedFlowPluginService.WarmupTracker.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of TurnDataProviding.getCachedTurnData(executionRequestId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t sub_1B9FF8D18()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t _sIeyBh_Iegh_TRTA_0()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t objectdestroyTm_11()
{
  swift_release();

  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t closure #1 in SharedFlowPluginService.startTurn(turnData:bridge:reply:)partial apply()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in SharedFlowPluginService.startTurn(turnData:bridge:reply:)(v2, v3, v4);
}

uint64_t objectdestroy_3Tm_2()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t closure #1 in static AsyncTaskUtils.taskWithCatchingCompletion(completion:do:)partial apply(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in static AsyncTaskUtils.taskWithCatchingCompletion(completion:do:)(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1B9FF8F78()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in closure #1 in SharedFlowPluginService.WarmupTracker.warmupTask.getter()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return MEMORY[0x1F4188298](closure #1 in closure #1 in SharedFlowPluginService.WarmupTracker.warmupTask.getter, 0, 0);
}

uint64_t sub_1B9FF9054()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void specialized static SharedFlowPluginService.WarmupTracker.warmup()()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_1B9C64000, v1, v2, "SharedFlowPluginService: warmup begin", v3, 2u);
    MEMORY[0x1BA9E48C0](v3, -1, -1);
  }

  type metadata accessor for DeviceEnvironmentHelper();
  MEMORY[0x1BA9DD9D0]();
  swift_release();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_1B9C64000, v4, v5, "Start preloading CAT.", v6, 2u);
    MEMORY[0x1BA9E48C0](v6, -1, -1);
  }

  objc_msgSend(self, sel_preload);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_1B9C64000, v7, v8, "CAT preloaded.", v9, 2u);
    MEMORY[0x1BA9E48C0](v9, -1, -1);
  }

  oslog = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1B9C64000, oslog, v10, "SharedFlowPluginService: warmup end", v11, 2u);
    MEMORY[0x1BA9E48C0](v11, -1, -1);
  }
}

uint64_t sub_1B9FF92FC()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

char *partial apply for closure #2 in closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:)(uint64_t a1, uint64_t a2)
{
  return closure #2 in closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:)(a1, a2);
}

uint64_t outlined destroy of FlowPluginAndBundle(uint64_t a1)
{
  return a1;
}

double partial apply for closure #1 in closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:)@<D0>(void (*a1)(char *)@<X0>, _OWORD *a2@<X8>)
{
  return closure #1 in closure #1 in SharedFlowPluginService.loadFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:reply:)(a1, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), a2);
}

uint64_t outlined init with copy of InvocationStateImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for InvocationStateImpl();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of InvocationStateImpl(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *SharedFlowPluginServiceClient.__allocating_init(connectionProvider:onConnectionInterrupted:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  os_log_type_t v10 = specialized SharedFlowPluginServiceClient.__allocating_init(connectionProvider:onConnectionInterrupted:)(v9, a2, a3, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v10;
}

uint64_t SharedFlowPluginServiceClient.startTurn(turnData:bridge:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v5 = *(void *)(type metadata accessor for RemoteConversationTurnData(0) - 8);
  v4[9] = v5;
  v4[10] = *(void *)(v5 + 64);
  v4[11] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  v4[12] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](SharedFlowPluginServiceClient.startTurn(turnData:bridge:), v6, 0);
}

uint64_t SharedFlowPluginServiceClient.startTurn(turnData:bridge:)()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 72);
  long long v9 = *(_OWORD *)(v0 + 48);
  outlined init with copy of RemoteConversationTurnData(*(void *)(v0 + 40), v2);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (v1 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = swift_allocObject();
  *(void *)(v0 + 104) = v6;
  outlined init with take of RemoteConversationTurnData(v2, v6 + v4);
  *(_OWORD *)(v6 + v5) = v9;
  swift_unknownObjectRetain();
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v7;
  *uint64_t v7 = v0;
  v7[1] = SharedFlowPluginServiceClient.startTurn(turnData:bridge:);
  return specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)((uint64_t)v7, (uint64_t)&async function pointer to partial apply for closure #1 in SharedFlowPluginServiceClient.startTurn(turnData:bridge:), v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 96);
    unint64_t v4 = SharedFlowPluginServiceClient.startTurn(turnData:bridge:);
  }
  else
  {
    unint64_t v5 = *(void *)(v2 + 96);
    swift_release();
    unint64_t v4 = ConversationHandlerLocator.sendStartTurnHint(turnData:bridge:);
    uint64_t v3 = v5;
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

Swift::Void __swiftcall SharedFlowPluginServiceClient.loadedConversationWillRelease(serial:)(Swift::Int serial)
{
  (*(void (**)(Swift::Int))(**(void **)(v1 + 32) + 128))(serial);
}

uint64_t SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[11] = a7;
  v8[12] = v7;
  v8[9] = a5;
  v8[10] = a6;
  v8[7] = a3;
  v8[8] = a4;
  v8[5] = a1;
  v8[6] = a2;
  uint64_t v9 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  v8[13] = v9;
  v8[14] = *(void *)(v9 + 64);
  v8[15] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v10 = static MessageBusActor.shared;
  v8[16] = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:), v10, 0);
}

uint64_t SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[8];
  uint64_t v5 = v0[9];
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[7];
  uint64_t v8 = v0[5];
  outlined init with copy of UUID?(v0[11], v1);
  unint64_t v9 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v10 = (void *)swift_allocObject();
  v0[17] = v10;
  void v10[2] = v8;
  v10[3] = v6;
  v10[4] = v7;
  v10[5] = v4;
  v10[6] = v5;
  v10[7] = v3;
  outlined init with take of UUID?(v1, (uint64_t)v10 + v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[18] = v11;
  *uint64_t v11 = v0;
  v11[1] = SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:);
  return specialized SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)((uint64_t)&closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)partial apply, (uint64_t)v10);
}

{
  void *v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_release();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  uint64_t v3 = v0[20];
  uint64_t v2 = v0[21];
  return v1(v2, v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void **)v3;
  *(void *)(*(void *)v3 + 152) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v7 = v6[16];
    uint64_t v8 = SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:);
  }
  else
  {
    uint64_t v9 = v6[16];
    swift_release();
    v6[20] = a2;
    v6[21] = a1;
    uint64_t v8 = SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:);
    uint64_t v7 = v9;
  }
  return MEMORY[0x1F4188298](v8, v7, 0);
}

uint64_t SharedFlowPluginServiceClient.LoadedConversationTracker.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = MEMORY[0x1E4FBC868];
  return result;
}

uint64_t SharedFlowPluginServiceClient.loadedConversations.getter()
{
  return swift_retain();
}

void *SharedFlowPluginServiceClient.init(connectionProvider:onConnectionInterrupted:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  uint64_t v13 = specialized SharedFlowPluginServiceClient.init(connectionProvider:onConnectionInterrupted:)((uint64_t)v11, a2, a3, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v13;
}

uint64_t closure #1 in closure #1 in SharedFlowPluginServiceClient.startTurn(turnData:bridge:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v8);
  id v11 = RemoteConversationTurnData.xpcRepresentation.getter();
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v13 = ServiceBridgeDelegate.xpcWrapper.getter(ObjectType, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v14 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v15 + v14, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = partial apply for closure #1 in closure #1 in closure #1 in SharedFlowPluginServiceClient.startTurn(turnData:bridge:);
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_52;
  uint64_t v16 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(a2, sel_startTurnWithTurnData_bridge_reply_, v11, v13, v16);
  _Block_release(v16);

  return swift_unknownObjectRelease();
}

Swift::Void __swiftcall SharedFlowPluginServiceClient.invalidate()()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  uint64_t v2 = *(void **)(v0 + 16);
  if (v2)
  {
    id v3 = v2;
    swift_unknownObjectRetain();
    objc_msgSend(v3, sel_invalidate);
    swift_unknownObjectRelease();

    uint64_t v4 = *(void **)(v0 + 16);
    *(void *)(v0 + 16) = 0;
    *(void *)(v0 + 24) = 0;
    outlined consume of SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection?(v4);
  }
}

uint64_t SharedFlowPluginServiceClient.handleInvalidation()()
{
  *(void *)(v1 + 104) = v0;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = static MessageBusActor.shared;
  *(void *)(v1 + 112) = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](SharedFlowPluginServiceClient.handleInvalidation(), v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  void (*v23)(id);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  uint64_t (*v30)(void);
  uint64_t v32;

  if (one-time initialization token for executor != -1) {
LABEL_23:
  }
    swift_once();
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = type metadata accessor for Logger();
  *(void *)(v0 + 120) = __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  id v3 = *(void *)(v1 + 48);
  *(void *)(v0 + 128) = v3;
  uint64_t v4 = swift_beginAccess();
  *(void *)(v0 + 136) = *(void *)(*(void *)(v3 + 32) + 16);
  uint64_t v7 = *(void **)(v1 + 16);
  uint64_t v6 = v1 + 16;
  uint64_t v5 = v7;
  if (v7)
  {
    uint64_t v8 = v5;
    swift_unknownObjectRetain();
    objc_msgSend(v8, sel_invalidate);

    swift_unknownObjectRelease();
    uint64_t v9 = *(void **)v6;
    *(void *)uint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    uint64_t v4 = (uint64_t)outlined consume of SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection?(v9);
  }
  uint64_t v10 = *(void *)(*(void *)(v0 + 104) + 32);
  *(void *)(v0 + 144) = v10;
  id v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 136))(v4);
  *(void *)(v0 + 152) = v11;
  uint64_t v12 = *(void *)(v11 + 16);
  *(void *)(v0 + 160) = v12;
  if (v12)
  {
    uint64_t v13 = 0;
    unint64_t v14 = (*(void *)v10 + 120) & 0xFFFFFFFFFFFFLL | 0x41FB000000000000;
    *(void *)(v0 + 168) = *(void *)(*(void *)v10 + 120);
    *(void *)(v0 + 176) = v14;
    *(unsigned char *)(v0 + 240) = 0;
    while (1)
    {
      *(void *)(v0 + 184) = v13;
      uint64_t v15 = *(void *)(v0 + 152);
      if (v13 >= *(void *)(v15 + 16))
      {
        __break(1u);
        goto LABEL_23;
      }
      uint64_t v16 = (*(uint64_t (**)(void))(v0 + 168))(*(void *)(v15 + 8 * v13 + 32));
      *(void *)(v0 + 192) = v16;
      if (v16) {
        break;
      }
      uint64_t v13 = *(void *)(v0 + 184) + 1;
      if (v13 == *(void *)(v0 + 160))
      {
        long long v17 = *(unsigned char *)(v0 + 240);
        goto LABEL_11;
      }
    }
    return MEMORY[0x1F4188298](SharedFlowPluginServiceClient.handleInvalidation(), v16, 0);
  }
  else
  {
    long long v17 = 0;
LABEL_11:
    long long v18 = *(void *)(v0 + 136);
    swift_bridgeObjectRelease();
    swift_release();
    InterruptibleTaskManager.invalidate()();
    if ((v17 & 1) != 0 || v18)
    {
      uint64_t v19 = Logger.logObject.getter();
      uint64_t v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v19, v20))
      {
        long long v21 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v21 = 0;
        _os_log_impl(&dword_1B9C64000, v19, v20, "Shared flow plugin service was invalidated while we had active calls. Triggering onConnectionInterrupted handler.", v21, 2u);
        MEMORY[0x1BA9E48C0](v21, -1, -1);
      }
      long long v22 = *(void *)(v0 + 104);

      long long v23 = *(void (**)(id))(v22 + 96);
      long long v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      long long v26 = v25;
      long long v27 = objc_allocWithZone(MEMORY[0x1E4F28C58]);
      long long v28 = (void *)MEMORY[0x1BA9E2DD0](v24, v26);
      swift_bridgeObjectRelease();
      long long v29 = objc_msgSend(v27, sel_initWithDomain_code_userInfo_, v28, 4097, 0);

      v23(v29);
    }
    long long v30 = *(uint64_t (**)(void))(v0 + 8);
    return v30();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  outlined init with copy of ReferenceResolutionClientProtocol(v0[24] + 128, (uint64_t)(v0 + 2));
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  v0[25] = v1;
  v0[26] = v2;
  v0[27] = __swift_project_boxed_opaque_existential_1(v0 + 2, v1);
  v0[28] = *(void *)(v2 + 24);
  v0[29] = (v2 + 24) & 0xFFFFFFFFFFFFLL | 0xEB38000000000000;
  id v3 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](SharedFlowPluginServiceClient.handleInvalidation(), v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  *(unsigned char *)(v0 + 241) = (*(uint64_t (**)(void, void))(v0 + 224))(*(void *)(v0 + 200), *(void *)(v0 + 208));
  uint64_t v1 = *(void *)(v0 + 192);
  return MEMORY[0x1F4188298](SharedFlowPluginServiceClient.handleInvalidation(), v1, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(v0 + 112);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  return MEMORY[0x1F4188298](SharedFlowPluginServiceClient.handleInvalidation(), v1, 0);
}

{
  uint64_t v0;
  char v1;
  uint64_t (*v2)();
  uint64_t (*v3)();
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  void (*v13)(id);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  uint64_t (*v20)(void);
  uint64_t v22;

  uint64_t v1 = *(unsigned char *)(v0 + 241);
  uint64_t v2 = (uint64_t (*)())swift_release();
  if (v1) {
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(v0 + 184) + 1;
  if (v5 == *(void *)(v0 + 160))
  {
    swift_bridgeObjectRelease();
    swift_release();
    InterruptibleTaskManager.invalidate()();
    goto LABEL_10;
  }
  *(unsigned char *)(v0 + 240) = 1;
  do
  {
    *(void *)(v0 + 184) = v5;
    uint64_t v6 = *(void *)(v0 + 152);
    if (v5 >= *(void *)(v6 + 16))
    {
      __break(1u);
      return MEMORY[0x1F4188298](v2, v3, v4);
    }
    uint64_t v2 = (uint64_t (*)())(*(uint64_t (**)(void))(v0 + 168))(*(void *)(v6 + 8 * v5 + 32));
    *(void *)(v0 + 192) = v2;
    if (v2)
    {
      id v3 = v2;
      uint64_t v2 = SharedFlowPluginServiceClient.handleInvalidation();
      uint64_t v4 = 0;
      return MEMORY[0x1F4188298](v2, v3, v4);
    }
LABEL_7:
    uint64_t v5 = *(void *)(v0 + 184) + 1;
  }
  while (v5 != *(void *)(v0 + 160));
  uint64_t v7 = *(unsigned char *)(v0 + 240);
  uint64_t v8 = *(void *)(v0 + 136);
  swift_bridgeObjectRelease();
  swift_release();
  InterruptibleTaskManager.invalidate()();
  if ((v7 & 1) != 0 || v8)
  {
LABEL_10:
    uint64_t v9 = Logger.logObject.getter();
    uint64_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      id v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v11 = 0;
      _os_log_impl(&dword_1B9C64000, v9, v10, "Shared flow plugin service was invalidated while we had active calls. Triggering onConnectionInterrupted handler.", v11, 2u);
      MEMORY[0x1BA9E48C0](v11, -1, -1);
    }
    uint64_t v12 = *(void *)(v0 + 104);

    uint64_t v13 = *(void (**)(id))(v12 + 96);
    unint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v16 = v15;
    long long v17 = objc_allocWithZone(MEMORY[0x1E4F28C58]);
    long long v18 = (void *)MEMORY[0x1BA9E2DD0](v14, v16);
    swift_bridgeObjectRelease();
    uint64_t v19 = objc_msgSend(v17, sel_initWithDomain_code_userInfo_, v18, 4097, 0);

    v13(v19);
  }
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

Swift::Void __swiftcall SharedFlowPluginServiceClient.kill()()
{
  uint64_t v2 = (id *)(v0 + 16);
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    id v3 = v1;
    swift_unknownObjectRetain();
    objc_msgSend(v3, sel__killConnection_, 9);
    swift_unknownObjectRelease();
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  if (*v2)
  {
    id v5 = *v2;
    swift_unknownObjectRetain();
    objc_msgSend(v5, sel_invalidate);
    swift_unknownObjectRelease();

    uint64_t v6 = *(void **)(v0 + 16);
    *uint64_t v2 = 0;
    *(void *)(v0 + 24) = 0;
    outlined consume of SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection?(v6);
  }
}

unint64_t SharedFlowPluginServiceConnectionError.description.getter(char a1)
{
  if (a1) {
    return 0xD00000000000004DLL;
  }
  else {
    return 0xD00000000000003ALL;
  }
}

uint64_t closure #2 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = &v10[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  uint64_t v4 = swift_allocObject();
  swift_beginAccess();
  swift_weakLoadStrong();
  swift_weakInit();
  swift_release();
  uint64_t v5 = one-time initialization token for shared;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  unint64_t v7 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = v6;
  v8[3] = v7;
  v8[4] = v4;
  swift_retain();
  swift_release();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v2, (uint64_t)&async function pointer to partial apply for closure #1 in closure #2 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:), (uint64_t)v8);
  return swift_release();
}

uint64_t closure #1 in closure #2 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 88) = a4;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v5 = static MessageBusActor.shared;
  *(void *)(v4 + 96) = static MessageBusActor.shared;
  swift_retain();
  return MEMORY[0x1F4188298](closure #1 in closure #2 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:), v5, 0);
}

uint64_t closure #1 in closure #2 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.executor);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "Connection to SharedFlowPluginXPCServer got invalidated", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }

  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v6 = *(void **)(Strong + 16);
    if (v6)
    {
      id v7 = v6;
      swift_release();
      unsigned int v8 = objc_msgSend(v7, sel_processIdentifier);

      if (!v8)
      {
        uint64_t v9 = Logger.logObject.getter();
        int v10 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v9, (os_log_type_t)v10))
        {
          id v11 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v11 = 0;
          _os_log_impl(&dword_1B9C64000, v9, (os_log_type_t)v10, "Execution process PID return is 0. Most likely the connection\ncould not be established to begin with", v11, 2u);
          MEMORY[0x1BA9E48C0](v11, -1, -1);
        }
      }
    }
    else
    {
      swift_release();
    }
  }
  swift_beginAccess();
  uint64_t v12 = swift_weakLoadStrong();
  v0[13] = v12;
  if (v12)
  {
    uint64_t v13 = (void *)swift_task_alloc();
    v0[14] = v13;
    void *v13 = v0;
    v13[1] = closure #1 in closure #2 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:);
    return SharedFlowPluginServiceClient.handleInvalidation()();
  }
  else
  {
    swift_release();
    uint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  uint64_t v1 = *(void *)(*(void *)v0 + 96);
  swift_task_dealloc();
  swift_release();
  return MEMORY[0x1F4188298](closure #1 in closure #2 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:), v1, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #3 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v3 = 0;
    _os_log_impl(&dword_1B9C64000, v1, v2, "SharedFlowPluginService crashed. It is unlikely that this is a platform bug: it usually indicates a fatal error in a flow plugin. Check device crashlogs to inspect cause.", v3, 2u);
    MEMORY[0x1BA9E48C0](v3, -1, -1);
  }

  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    Logger.debugF(file:function:)();
    uint64_t v6 = *(void **)(v5 + 16);
    if (v6)
    {
      id v7 = v6;
      swift_unknownObjectRetain();
      objc_msgSend(v7, sel_invalidate);
      swift_unknownObjectRelease();

      unsigned int v8 = *(void **)(v5 + 16);
      *(void *)(v5 + 16) = 0;
      *(void *)(v5 + 24) = 0;
      outlined consume of SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection?(v8);
    }
    return swift_release();
  }
  return result;
}

void closure #4 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)(void *a1)
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  id v3 = a1;
  id v4 = a1;
  oslog = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v11 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_getErrorValue();
    uint64_t v8 = Error.localizedDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, oslog, v5, "Cannot set up connection with SharedFlowPluginService:\n%s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v7, -1, -1);
    MEMORY[0x1BA9E48C0](v6, -1, -1);
  }
  else
  {
  }
}

uint64_t SharedFlowPluginServiceClient.LoadedConversationTracker.getLoadedConversation(serial:)(uint64_t a1)
{
  void (*v6)(uint64_t *__return_ptr, uint64_t);
  uint64_t v7;
  uint64_t v9;

  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 16);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v5 & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)(v3 + 56) + 16 * v4);
  uint64_t v7 = swift_retain();
  v6(&v9, v7);
  swift_release();
  return v9;
}

void *SharedFlowPluginServiceClient.LoadedConversationTracker.knownSerials.getter()
{
  swift_beginAccess();
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(v0);
  swift_bridgeObjectRelease();
  return v1;
}

Swift::Void __swiftcall SharedFlowPluginServiceClient.LoadedConversationTracker.removeAll()()
{
  swift_beginAccess();
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC868];
  swift_bridgeObjectRelease();
}

uint64_t SharedFlowPluginServiceClient.LoadedConversationTracker.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SharedFlowPluginServiceClient.LoadedConversationTracker.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t SharedFlowPluginServiceClient.LoadedConversationTracker.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC868];
  return result;
}

uint64_t SharedFlowPluginServiceClient.deinit()
{
  outlined consume of SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection?(*(void **)(v0 + 16));
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  swift_release();
  return v0;
}

uint64_t SharedFlowPluginServiceClient.__deallocating_deinit()
{
  outlined consume of SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection?(*(void **)(v0 + 16));
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  swift_release();

  return swift_deallocClassInstance();
}

NSXPCConnection_optional __swiftcall SharedFlowPluginServiceXPCConnectionProvider.getXPCConnection()()
{
  id v0 = objc_msgSend(self, sel_currentContext);
  uint64_t v1 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000029, 0x80000001BA06DF00);
  uint64_t v2 = (objc_class *)objc_msgSend(v0, sel_createXPCConnectionWithMachServiceName_options_, v1, 0);

  unint64_t v4 = v2;
  result.value.super.Class isa = v4;
  result.is_nil = v3;
  return result;
}

id protocol witness for SharedFlowPluginServiceXPCConnectionProviding.getXPCConnection() in conformance SharedFlowPluginServiceXPCConnectionProvider()
{
  id v0 = objc_msgSend(self, sel_currentContext);
  uint64_t v1 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000029, 0x80000001BA06DF00);
  id v2 = objc_msgSend(v0, sel_createXPCConnectionWithMachServiceName_options_, v1, 0);

  return v2;
}

BOOL static SharedFlowPluginServiceConnectionError.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void SharedFlowPluginServiceConnectionError.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int SharedFlowPluginServiceConnectionError.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance SharedFlowPluginServiceConnectionError()
{
  if (*v0) {
    return 0xD00000000000004DLL;
  }
  else {
    return 0xD00000000000003ALL;
  }
}

void *specialized SharedFlowPluginServiceClient.init(connectionProvider:onConnectionInterrupted:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  a4[10] = a5;
  a4[11] = a6;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(a4 + 7);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(boxed_opaque_existential_0, a1, a5);
  type metadata accessor for SharedFlowPluginServiceClient.LoadedConversationTracker();
  a4[2] = 0;
  a4[3] = 0;
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = MEMORY[0x1E4FBC868];
  *(void *)(v12 + 16) = MEMORY[0x1E4FBC868];
  a4[4] = v12;
  a4[5] = 0;
  type metadata accessor for InterruptibleTaskManager();
  unint64_t v14 = (void *)swift_allocObject();
  v14[4] = v13;
  v14[5] = 0;
  id v14[2] = 0xD00000000000001DLL;
  v14[3] = 0x80000001BA05B770;
  a4[6] = v14;
  a4[12] = a2;
  a4[13] = a3;
  return a4;
}

void *specialized SharedFlowPluginServiceClient.__allocating_init(connectionProvider:onConnectionInterrupted:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = (void *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a5);
  return specialized SharedFlowPluginServiceClient.init(connectionProvider:onConnectionInterrupted:)((uint64_t)v13, a2, a3, v14, a5, a6);
}

uint64_t sub_1B9FFBB6C()
{
  uint64_t v1 = (int *)type metadata accessor for RemoteConversationTurnData(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v13 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3 + v1[6];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }

  uint64_t v9 = v4 + v1[8];
  if (!v8(v9, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_release();

  int v10 = (uint64_t *)(v4 + v1[12]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    outlined consume of Data._Representation(*v10, v11);
  }
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, ((v13 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)partial apply(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?)
                 - 8);
  long long v12 = *(_OWORD *)(v2 + 32);
  long long v13 = *(_OWORD *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 48);
  uint64_t v8 = *(void *)(v2 + 56);
  uint64_t v9 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v10 = swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  *(void *)uint64_t v10 = v3;
  *(void *)(v10 + 72) = v8;
  *(void *)(v10 + 80) = v9;
  *(void *)(v10 + 64) = v7;
  *(_OWORD *)(v10 + 32) = v13;
  *(_OWORD *)(v10 + 48) = v12;
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(void *)(v10 + 8) = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return MEMORY[0x1F4188298](closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:), 0, 0);
}

uint64_t sub_1B9FFBE8C()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in SharedFlowPluginServiceClient.LoadedConversationTracker.registerLoadedConversation(_:serial:)@<X0>(uint64_t *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for SharedFlowPluginServiceClient()
{
  return self;
}

uint64_t method lookup function for SharedFlowPluginServiceClient(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SharedFlowPluginServiceClient);
}

uint64_t dispatch thunk of SharedFlowPluginServiceClient.__allocating_init(connectionProvider:onConnectionInterrupted:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t type metadata accessor for SharedFlowPluginServiceClient.LoadedConversationTracker()
{
  return self;
}

uint64_t method lookup function for SharedFlowPluginServiceClient.LoadedConversationTracker(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SharedFlowPluginServiceClient.LoadedConversationTracker);
}

uint64_t dispatch thunk of SharedFlowPluginServiceClient.LoadedConversationTracker.registerLoadedConversation(_:serial:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of SharedFlowPluginServiceClient.LoadedConversationTracker.getLoadedConversation(serial:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of SharedFlowPluginServiceClient.LoadedConversationTracker.releaseLoadedConversation(serial:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of SharedFlowPluginServiceClient.LoadedConversationTracker.knownSerials.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of SharedFlowPluginServiceClient.LoadedConversationTracker.removeAll()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of SharedFlowPluginServiceClient.LoadedConversationTracker.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of SharedFlowPluginServiceXPCConnectionProviding.getXPCConnection()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for SharedFlowPluginServiceXPCConnectionProvider()
{
  return &type metadata for SharedFlowPluginServiceXPCConnectionProvider;
}

unsigned char *storeEnumTagSinglePayload for SharedFlowPluginServiceConnectionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B9FFC1ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SharedFlowPluginServiceConnectionError()
{
  return &type metadata for SharedFlowPluginServiceConnectionError;
}

void *initializeBufferWithCopyOfBuffer for SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection(void *a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection(id *a1)
{
  return swift_unknownObjectRelease();
}

uint64_t assignWithCopy for SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

id *assignWithTake for SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection(id *a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  swift_unknownObjectRelease();
  return a1;
}

void *type metadata accessor for SharedFlowPluginServiceClient.SharedFlowPluginServiceConnection()
{
  return &unk_1F1384950;
}

uint64_t sub_1B9FFC304()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in closure #2 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in closure #2 in SharedFlowPluginServiceClient.withCurrentConnection<A>(block:)(a1, v4, v5, v6);
}

void partial apply for closure #1 in closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(uint64_t a1)
{
  closure #1 in closure #1 in SharedFlowPluginServiceClient.getRemoteConversationForFlowPlugin(bundleId:bundlePath:rcId:hypothesisId:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void **)(v1 + 64), *(void *)(v1 + 72));
}

uint64_t sub_1B9FFC42C()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<RemoteConversation?, Never>);
}

uint64_t partial apply for closure #1 in closure #1 in SharedFlowPluginServiceClient.startTurn(turnData:bridge:)(uint64_t a1)
{
  return closure #1 in closure #1 in SharedFlowPluginServiceClient.startTurn(turnData:bridge:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1B9FFC444()
{
  return objectdestroy_156Tm(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
}

void *SharedFlowPluginXPCServer.machServiceName.unsafeMutableAddressor()
{
  return &static SharedFlowPluginXPCServer.machServiceName;
}

unint64_t static SharedFlowPluginXPCServer.machServiceName.getter()
{
  return 0xD000000000000029;
}

id SharedFlowPluginXPCServer.listener.getter()
{
  return *(id *)(v0 + OBJC_IVAR___SKRSharedFlowPluginXPCServer_listener);
}

id SharedFlowPluginXPCServer.init()()
{
  uint64_t v1 = one-time initialization token for executor;
  uint64_t v2 = v0;
  if (v1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.executor);
  Logger.debugF(file:function:)();
  type metadata accessor for SharedFlowPluginService();
  memset(v9, 0, sizeof(v9));
  uint64_t v10 = 0;
  swift_allocObject();
  SharedFlowPluginService.init(overrideFlowLoader:overrideSiriKitRuntime:)((uint64_t)v9, 0);
  uint64_t v4 = (char *)objc_allocWithZone((Class)type metadata accessor for SharedFlowPluginXPCServer.Listener());
  uint64_t v5 = swift_retain();
  *(void *)&v2[OBJC_IVAR___SKRSharedFlowPluginXPCServer_listener] = specialized SharedFlowPluginXPCServer.Listener.init(sharedFlowPluginService:)(v5, v4);

  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for SharedFlowPluginXPCServer();
  id v6 = objc_msgSendSuper2(&v8, sel_init);
  swift_release();
  return v6;
}

uint64_t SharedFlowPluginXPCServer.Listener.__allocating_init(sharedFlowPluginService:)(uint64_t a1)
{
  swift_getObjectType();

  return specialized SharedFlowPluginXPCServer.Listener.__allocating_init(sharedFlowPluginService:)(a1);
}

id one-time initialization function for xpcInterface()
{
  id v0 = objc_msgSend(self, sel_interfaceWithProtocol_, &unk_1F13994B8);
  if (one-time initialization token for remoteConversationXPCInterface != -1) {
    swift_once();
  }
  uint64_t v1 = static RemoteConversationXPCHelper.remoteConversationXPCInterface;
  objc_msgSend(v0, sel_setInterface_forSelector_argumentIndex_ofReply_, static RemoteConversationXPCHelper.remoteConversationXPCInterface, sel_startTurnWithTurnData_bridge_reply_, 1, 0);
  id result = objc_msgSend(v0, sel_setInterface_forSelector_argumentIndex_ofReply_, v1, sel_loadFlowPluginWithBundleId_bundlePath_rcId_hypothesisId_reply_, 0, 1);
  static SharedFlowPluginXPCServer.xpcInterface = (uint64_t)v0;
  return result;
}

id static SharedFlowPluginXPCServer.xpcInterface.getter()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for xpcInterface, (void **)&static SharedFlowPluginXPCServer.xpcInterface);
}

uint64_t one-time initialization function for xpcConnectionQueue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v0);
  uint64_t v1 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v2 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E4FBCC68], v6);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FBCB28], v2);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  static DispatchQoS.unspecified.getter();
  v11[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static SharedFlowPluginXPCServer.Listener.xpcConnectionQueue = result;
  return result;
}

uint64_t *SharedFlowPluginXPCServer.Listener.xpcConnectionQueue.unsafeMutableAddressor()
{
  if (one-time initialization token for xpcConnectionQueue != -1) {
    swift_once();
  }
  return &static SharedFlowPluginXPCServer.Listener.xpcConnectionQueue;
}

id static SharedFlowPluginXPCServer.Listener.xpcConnectionQueue.getter()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for xpcConnectionQueue, (void **)&static SharedFlowPluginXPCServer.Listener.xpcConnectionQueue);
}

uint64_t SharedFlowPluginXPCServer.Listener.sharedFlowPluginService.getter()
{
  return swift_unknownObjectRetain();
}

id SharedFlowPluginXPCServer.Listener.listener.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtCC14SiriKitRuntime25SharedFlowPluginXPCServer8Listener_listener);
}

uint64_t SharedFlowPluginXPCServer.Listener.init(sharedFlowPluginService:)(uint64_t a1)
{
  swift_getObjectType();

  return specialized SharedFlowPluginXPCServer.Listener.init(sharedFlowPluginService:)(a1, v1);
}

Swift::Bool __swiftcall SharedFlowPluginXPCServer.Listener.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  return specialized SharedFlowPluginXPCServer.Listener.listener(_:shouldAcceptNewConnection:)(shouldAcceptNewConnection.super.isa);
}

id SharedFlowPluginXPCServer.Listener.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void SharedFlowPluginXPCServer.Listener.init()()
{
}

id SharedFlowPluginXPCServer.Listener.__deallocating_deinit()
{
  return SharedFlowPluginXPCServer.Listener.__deallocating_deinit(type metadata accessor for SharedFlowPluginXPCServer.Listener);
}

id SharedFlowPluginXPCServer.__deallocating_deinit()
{
  return SharedFlowPluginXPCServer.Listener.__deallocating_deinit(type metadata accessor for SharedFlowPluginXPCServer);
}

id SharedFlowPluginXPCServer.Listener.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for SharedFlowPluginXPCServer.Listener()
{
  return self;
}

uint64_t specialized SharedFlowPluginXPCServer.Listener.__allocating_init(sharedFlowPluginService:)(uint64_t a1)
{
  uint64_t v2 = (char *)objc_allocWithZone((Class)type metadata accessor for SharedFlowPluginXPCServer.Listener());

  return specialized SharedFlowPluginXPCServer.Listener.init(sharedFlowPluginService:)(a1, v2);
}

uint64_t specialized SharedFlowPluginXPCServer.Listener.init(sharedFlowPluginService:)(uint64_t a1, char *a2)
{
  *(void *)&a2[OBJC_IVAR____TtCC14SiriKitRuntime25SharedFlowPluginXPCServer8Listener_sharedFlowPluginService] = a1;
  objc_super v3 = self;
  uint64_t v4 = a2;
  swift_retain();
  id v5 = objc_msgSend(v3, sel_currentContext);
  uint64_t v6 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000029, 0x80000001BA06DF00);
  id v7 = objc_msgSend(v5, sel_createXPCListenerWithMachServiceName_, v6);

  if (v7)
  {
    *(void *)&v4[OBJC_IVAR____TtCC14SiriKitRuntime25SharedFlowPluginXPCServer8Listener_listener] = v7;
    id v8 = v7;

    v11.receiver = v4;
    v11.super_class = (Class)type metadata accessor for SharedFlowPluginXPCServer.Listener();
    id v9 = objc_msgSendSuper2(&v11, sel_init);
    objc_msgSend(v8, sel_setDelegate_, v9);
    objc_msgSend(v8, sel_resume);

    swift_release();
    return (uint64_t)v9;
  }
  else
  {
    uint64_t result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD00000000000001ELL, 0x80000001BA06E190, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/RemoteConversation/SharedFlowPluginService/SharedFlowPluginXPCServer.swift", 143, 2, 67);
    __break(1u);
  }
  return result;
}

{
  void *v3;
  char *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t result;
  objc_super v11;

  *(void *)&a2[OBJC_IVAR____TtCC14SiriKitRuntime25SharedFlowPluginXPCServer8Listener_sharedFlowPluginService] = a1;
  objc_super v3 = self;
  uint64_t v4 = a2;
  swift_unknownObjectRetain();
  id v5 = objc_msgSend(v3, sel_currentContext);
  uint64_t v6 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000029, 0x80000001BA06DF00);
  id v7 = objc_msgSend(v5, sel_createXPCListenerWithMachServiceName_, v6);

  if (v7)
  {
    *(void *)&v4[OBJC_IVAR____TtCC14SiriKitRuntime25SharedFlowPluginXPCServer8Listener_listener] = v7;
    id v8 = v7;

    v11.receiver = v4;
    v11.super_class = (Class)type metadata accessor for SharedFlowPluginXPCServer.Listener();
    id v9 = objc_msgSendSuper2(&v11, sel_init);
    objc_msgSend(v8, sel_setDelegate_, v9);
    objc_msgSend(v8, sel_resume);

    swift_unknownObjectRelease();
    return (uint64_t)v9;
  }
  else
  {
    uint64_t result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD00000000000001ELL, 0x80000001BA06E190, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/RemoteConversation/SharedFlowPluginService/SharedFlowPluginXPCServer.swift", 143, 2, 67);
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for SharedFlowPluginXPCServer()
{
  return self;
}

uint64_t specialized SharedFlowPluginXPCServer.Listener.listener(_:shouldAcceptNewConnection:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.executor);
  id v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v7 = 0;
    _os_log_impl(&dword_1B9C64000, v5, v6, "SharedFlowPluginXPCServer accepting new connection", v7, 2u);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }

  if (one-time initialization token for xpcInterface != -1) {
    swift_once();
  }
  objc_msgSend(a1, sel_setExportedInterface_, static SharedFlowPluginXPCServer.xpcInterface);
  objc_msgSend(a1, sel_setExportedObject_, *(void *)(v2 + OBJC_IVAR____TtCC14SiriKitRuntime25SharedFlowPluginXPCServer8Listener_sharedFlowPluginService));
  if (one-time initialization token for xpcConnectionQueue != -1) {
    swift_once();
  }
  objc_msgSend(a1, sel__setQueue_, static SharedFlowPluginXPCServer.Listener.xpcConnectionQueue);
  objc_msgSend(a1, sel_resume);
  return 1;
}

uint64_t method lookup function for SharedFlowPluginXPCServer.Listener(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SharedFlowPluginXPCServer.Listener);
}

uint64_t dispatch thunk of SharedFlowPluginXPCServer.Listener.__allocating_init(sharedFlowPluginService:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of SharedFlowPluginXPCServer.Listener.listener(_:shouldAcceptNewConnection:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68))();
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    type metadata accessor for OS_dispatch_queue.Attributes();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

uint64_t SimpleOrderedDictionary.init()()
{
  uint64_t v0 = Dictionary.init()();
  Array.init()();
  return v0;
}

uint64_t SimpleOrderedDictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v26 = *(void *)(v6 - 8);
  uint64_t v27 = a1;
  MEMORY[0x1F4188790](a1);
  id v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 24);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  long long v17 = (char *)&v21 - v16;
  uint64_t v18 = *v3;
  uint64_t v23 = *(void *)(a3 + 32);
  MEMORY[0x1BA9E2D40](a2, v18, v6, v10);
  int v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v17, 1, v10);
  long long v24 = *(void (**)(char *, uint64_t))(v12 + 8);
  v24(v17, v11);
  long long v21 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
  v21(v8, a2, v6);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v25 = v11;
  v19(v15, v27, v11);
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  if (v22 == 1)
  {
    v21(v8, a2, v6);
    type metadata accessor for Array();
    Array.append(_:)();
  }
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(a2, v6);
  return ((uint64_t (*)(uint64_t, uint64_t))v24)(v27, v25);
}

uint64_t SimpleOrderedDictionary.snapshot()(uint64_t a1)
{
  return a1;
}

void SimpleOrderedDictionary.subscript.getter()
{
}

uint64_t SimpleOrderedDictionary.values()()
{
  return SimpleOrderedDictionary.values()();
}

{
  uint64_t v0;

  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v0 = Sequence.compactMap<A>(_:)();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SimpleOrderedDictionary.wrappedDict.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*SimpleOrderedDictionary.wrappedDict.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SimpleOrderedDictionary.insertionOrder.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SimpleOrderedDictionary.insertionOrder.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*SimpleOrderedDictionary.insertionOrder.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t key path setter for SimpleOrderedDictionary.subscript(_:) : <A, B>SimpleOrderedDictionary<A, B>AB(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + a3 - 24);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v17 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v17 - v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v17 - v12, a3, v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  uint64_t v15 = type metadata accessor for SimpleOrderedDictionary();
  return SimpleOrderedDictionary.subscript.setter((uint64_t)v11, (uint64_t)v13, v15);
}

void (*SimpleOrderedDictionary.subscript.modify(void *a1, uint64_t a2, void *a3))(uint64_t **a1, char a2)
{
  uint64_t v7 = malloc(0x50uLL);
  *a1 = v7;
  *uint64_t v7 = a3;
  v7[1] = v3;
  uint64_t v8 = a3[3];
  uint64_t v9 = type metadata accessor for Optional();
  void v7[2] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v7[3] = v10;
  size_t v11 = *(void *)(v10 + 64);
  v7[4] = malloc(v11);
  uint64_t v12 = malloc(v11);
  uint64_t v13 = a3[2];
  v7[5] = v12;
  v7[6] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = v14;
  v7[7] = v14;
  size_t v16 = *(void *)(v14 + 64);
  v7[8] = malloc(v16);
  v7[9] = malloc(v16);
  (*(void (**)(void))(v15 + 16))();
  MEMORY[0x1BA9E2D40](a2, *v3, v13, v8, a3[4]);
  return SimpleOrderedDictionary.subscript.modify;
}

void SimpleOrderedDictionary.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  objc_super v3 = (void *)(*a1)[8];
  uint64_t v4 = (void *)(*a1)[9];
  if (a2)
  {
    uint64_t v5 = v2[7];
    uint64_t v11 = v2[6];
    uint64_t v7 = (void *)v2[4];
    uint64_t v6 = (void *)v2[5];
    uint64_t v8 = v2[2];
    uint64_t v9 = v2[3];
    uint64_t v10 = *v2;
    (*(void (**)(void *, void *, uint64_t))(v9 + 16))(v7, v6, v8);
    (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v3, v4, v11);
    SimpleOrderedDictionary.subscript.setter((uint64_t)v7, (uint64_t)v3, v10);
    (*(void (**)(void *, uint64_t))(v9 + 8))(v6, v8);
  }
  else
  {
    uint64_t v7 = (void *)v2[4];
    uint64_t v6 = (void *)v2[5];
    SimpleOrderedDictionary.subscript.setter((uint64_t)v6, (uint64_t)v4, *v2);
  }
  free(v4);
  free(v3);
  free(v6);
  free(v7);

  free(v2);
}

uint64_t SimpleOrderedDictionary.keys()()
{
  return swift_bridgeObjectRetain();
}

uint64_t ImmutableSimpleOrderedDictionary.items()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v55 = a1;
  uint64_t v56 = a5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v49 = (char *)&v38 - v9;
  uint64_t v48 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v48 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v48);
  uint64_t v13 = (char *)&v38 - v12;
  uint64_t v58 = a4;
  uint64_t v14 = *(void *)(a4 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v11);
  uint64_t v47 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a3 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = v19;
  MEMORY[0x1F4188790](v18);
  int v22 = (char *)&v38 - v21;
  uint64_t v50 = TupleTypeMetadata2;
  uint64_t v23 = static Array._allocateUninitialized(_:)();
  uint64_t v60 = v23;
  uint64_t v24 = swift_bridgeObjectRetain();
  if (MEMORY[0x1BA9E3130](v24, a3))
  {
    uint64_t v25 = 0;
    unint64_t v57 = (void (**)(char *, uint64_t *, uint64_t))(v17 + 16);
    uint64_t v52 = (unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    uint64_t v53 = (void (**)(char *, char *, uint64_t))(v17 + 32);
    uint64_t v42 = (void (**)(char *, char *, uint64_t))(v14 + 16);
    unint64_t v43 = (void (**)(char *, char *, uint64_t))(v14 + 32);
    uint64_t v51 = (void (**)(char *, uint64_t))(v17 + 8);
    uint64_t v40 = (void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v41 = (void (**)(char *, uint64_t))(v14 + 8);
    uint64_t v45 = v17;
    uint64_t v46 = a2;
    uint64_t v44 = v13;
    uint64_t v54 = v22;
    while (1)
    {
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        uint64_t v34 = *(void (**)(char *, uint64_t *, uint64_t))(v17 + 16);
        v34(v22, (uint64_t *)(a2+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(void *)(v17 + 72) * v25), a3);
        uint64_t v35 = v25 + 1;
        if (__OFADD__(v25, 1)) {
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
        if (v39 != 8)
        {
          __break(1u);
          return result;
        }
        uint64_t v59 = result;
        uint64_t v34 = *v57;
        (*v57)(v22, &v59, a3);
        swift_unknownObjectRelease();
        uint64_t v35 = v25 + 1;
        if (__OFADD__(v25, 1))
        {
LABEL_12:
          __break(1u);
LABEL_13:
          swift_bridgeObjectRelease();
          return v60;
        }
      }
      (*v53)(v20, v22, a3);
      uint64_t v36 = v58;
      MEMORY[0x1BA9E2D40](v20, v55, a3, v58, v56);
      if ((*v52)(v13, 1, v36) == 1)
      {
        (*v51)(v20, a3);
        (*v40)(v13, v48);
      }
      else
      {
        uint64_t v26 = v47;
        uint64_t v27 = v58;
        (*v43)(v47, v13, v58);
        uint64_t v28 = v27;
        long long v29 = &v49[*(int *)(v50 + 48)];
        v34(v49, (uint64_t *)v20, a3);
        (*v42)(v29, v26, v28);
        type metadata accessor for Array();
        uint64_t v30 = v28;
        uint64_t v13 = v44;
        a2 = v46;
        Array.append(_:)();
        uint64_t v31 = v26;
        uint64_t v17 = v45;
        (*v41)(v31, v30);
        (*v51)(v20, a3);
      }
      uint64_t v32 = MEMORY[0x1BA9E3130](a2, a3);
      ++v25;
      int v22 = v54;
      if (v35 == v32) {
        goto LABEL_13;
      }
    }
  }
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t partial apply for closure #1 in SimpleOrderedDictionary.values()(uint64_t a1)
{
  return partial apply for closure #1 in SimpleOrderedDictionary.values()(a1);
}

{
  void *v1;

  return MEMORY[0x1BA9E2D40](a1, v1[5], v1[2], v1[3], v1[4]);
}

uint64_t ImmutableSimpleOrderedDictionary.insertionOrder.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ImmutableSimpleOrderedDictionary.values()()
{
  return SimpleOrderedDictionary.values()();
}

void sub_1B9FFE0D0()
{
}

uint64_t sub_1B9FFE0F0()
{
  return 24;
}

__n128 sub_1B9FFE0FC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t type metadata instantiation function for SimpleOrderedDictionary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 32);
}

uint64_t type metadata accessor for SimpleOrderedDictionary()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ImmutableSimpleOrderedDictionary()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t SiriAceLocationProvider.defaultTimeout.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultTimeout != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for DispatchTimeInterval();

  return __swift_project_value_buffer(v0, (uint64_t)static SiriAceLocationProvider.defaultTimeout);
}

uint64_t static SiriAceLocationProvider.defaultTimeout.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultTimeout != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static SiriAceLocationProvider.defaultTimeout);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, v3, v2);
}

uint64_t SiriAceLocationProvider.requestOrigin(searchTimeout:)(uint64_t a1)
{
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized SiriAceLocationProvider.requestOrigin(searchTimeout:)
                                       + async function pointer to specialized SiriAceLocationProvider.requestOrigin(searchTimeout:));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = protocol witness for AppShortcutStateProviding.intentsStates(appShortcutTargets:conditionalIntentMetadata:) in conformance AppShortcutStateProvider;
  return v5(a1);
}

Swift::Double __swiftcall DispatchTimeInterval.toSeconds()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (uint64_t *)((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  int v6 = (*(uint64_t (**)(uint64_t *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == *MEMORY[0x1E4FBCAE8])
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    return (double)*v5;
  }
  if (v6 == *MEMORY[0x1E4FBCAC8])
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    double v8 = (double)*v5;
    double v9 = 1000.0;
  }
  else if (v6 == *MEMORY[0x1E4FBCAB0])
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    double v8 = (double)*v5;
    double v9 = 1000000.0;
  }
  else
  {
    if (v6 != *MEMORY[0x1E4FBCAA8])
    {
      (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, v2);
      return 9.22337204e18;
    }
    (*(void (**)(uint64_t *, uint64_t))(v3 + 96))(v5, v2);
    double v8 = (double)*v5;
    double v9 = 1000000000.0;
  }
  return v8 / v9;
}

uint64_t protocol witness for SiriLocationProvider.requestOrigin(searchTimeout:) in conformance SiriAceLocationProvider(uint64_t a1)
{
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized SiriAceLocationProvider.requestOrigin(searchTimeout:)
                                       + async function pointer to specialized SiriAceLocationProvider.requestOrigin(searchTimeout:));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v5(a1);
}

uint64_t specialized SiriAceLocationProvider.requestOrigin(searchTimeout:)(uint64_t a1)
{
  v1[12] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTimeInterval?);
  v1[13] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for DispatchTimeInterval();
  v1[14] = v2;
  v1[15] = *(void *)(v2 - 8);
  v1[16] = swift_task_alloc();
  return MEMORY[0x1F4188298](specialized SiriAceLocationProvider.requestOrigin(searchTimeout:), 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v3 = *v2;
  *(void *)(v3 + 152) = a1;
  *(void *)(v3 + 160) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = specialized SiriAceLocationProvider.requestOrigin(searchTimeout:);
  }
  else {
    uint64_t v4 = specialized SiriAceLocationProvider.requestOrigin(searchTimeout:);
  }
  return MEMORY[0x1F4188298](v4, 0, 0);
}

uint64_t specialized SiriAceLocationProvider.requestOrigin(searchTimeout:)()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v3 = v0[13];
  outlined init with copy of DispatchTimeInterval?(v0[12], v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    if (one-time initialization token for defaultTimeout != -1) {
      swift_once();
    }
    uint64_t v5 = v0[15];
    uint64_t v4 = v0[16];
    uint64_t v7 = v0[13];
    uint64_t v6 = v0[14];
    uint64_t v8 = __swift_project_value_buffer(v6, (uint64_t)static SiriAceLocationProvider.defaultTimeout);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v8, v6);
    outlined destroy of DispatchTimeInterval?(v7);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[15] + 32))(v0[16], v0[13], v0[14]);
  }
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96658]), sel_init);
  v0[17] = v9;
  objc_msgSend(v9, sel_setDesiredAccuracy_, *MEMORY[0x1E4F96CB0]);
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  Class isa = NSNumber.init(integerLiteral:)(300).super.super.isa;
  objc_msgSend(v9, sel_setMaxAge_, isa);

  id v11 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, DispatchTimeInterval.toSeconds()());
  objc_msgSend(v9, sel_setSearchTimeout_, v11);

  static AceService.currentAsync.getter();
  uint64_t v12 = v0[5];
  uint64_t v13 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v12);
  uint64_t v14 = (void *)swift_task_alloc();
  v0[18] = v14;
  uint64_t v15 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SABaseCommand);
  *uint64_t v14 = v0;
  v14[1] = specialized SiriAceLocationProvider.requestOrigin(searchTimeout:);
  return MEMORY[0x1F4152588](v9, v12, v15, v13);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  id v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t (*v21)(id);
  uint64_t v23;

  self;
  uint64_t v1 = swift_dynamicCastObjCClass();
  uint64_t v2 = (void *)v0[19];
  if (v1)
  {
    uint64_t v3 = (void *)v1;
    uint64_t v4 = v0[16];
    uint64_t v5 = (void *)v0[17];
    uint64_t v6 = v0[14];
    uint64_t v7 = v0[15];
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
    objc_msgSend(v3, sel_latitude);
    id v9 = v8;
    objc_msgSend(v3, sel_longitude);
    id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1E5F0]), sel_initWithLatitude_longitude_, v9, v10);

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v4, v6);
  }
  else
  {

    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.executor);
    uint64_t v13 = Logger.logObject.getter();
    uint64_t v14 = static os_log_type_t.error.getter();
    uint64_t v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = v0[16];
    uint64_t v17 = (void *)v0[17];
    uint64_t v18 = v0[14];
    uint64_t v19 = v0[15];
    if (v15)
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl(&dword_1B9C64000, v13, v14, "Unexpected command type response", v20, 2u);
      MEMORY[0x1BA9E48C0](v20, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v16, v18);
    id v11 = 0;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(id))v0[1];
  return v21(v11);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  int v22 = v0;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(v0 + 2));
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)v0[20];
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
  uint64_t v3 = v1;
  uint64_t v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.error.getter();
  uint64_t v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = (void *)v0[20];
  id v9 = v0[16];
  uint64_t v10 = (void *)v0[17];
  uint64_t v12 = v0[14];
  id v11 = v0[15];
  if (v7)
  {
    uint64_t v20 = v0[16];
    uint64_t v19 = v0[14];
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    uint64_t v21 = v14;
    *(_DWORD *)uint64_t v13 = 136315138;
    swift_getErrorValue();
    uint64_t v15 = Error.localizedDescription.getter();
    v0[11] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1B9C64000, v5, v6, "Error getting current location: %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v14, -1, -1);
    MEMORY[0x1BA9E48C0](v13, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v20, v19);
  }
  else
  {

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v12);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17(0);
}

ValueMetadata *type metadata accessor for SiriAceLocationProvider()
{
  return &type metadata for SiriAceLocationProvider;
}

uint64_t outlined init with copy of DispatchTimeInterval?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTimeInterval?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of DispatchTimeInterval?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTimeInterval?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

SiriKitRuntime::SiriAudioAffinityScorer __swiftcall SiriAudioAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA062AA0;
  uint64_t v1 = 0xD00000000000002CLL;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t SiriAudioAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t specialized static SiriAudioAffinityScorer.isResumeApp(usoTask:)()
{
  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of Any?((uint64_t)v9, (uint64_t)v7);
  if (v8)
  {
    type metadata accessor for UsoTask_resume_uso_NoEntity();
    if (swift_dynamicCast())
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_ReferenceControl.reference.getter();
      swift_release();
      if (v7[0] && (uint64_t v0 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter(), swift_release(), v0))
      {
        dispatch thunk of UsoEntity_common_App.name.getter();
        uint64_t v2 = v1;
        swift_release();
        swift_release();
        if (v2)
        {
          swift_bridgeObjectRelease();
          outlined destroy of Any?((uint64_t)v9);
          return 1;
        }
      }
      else
      {
        swift_release();
      }
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v7);
  }
  outlined init with copy of Any?((uint64_t)v9, (uint64_t)v7);
  if (!v8)
  {
    outlined destroy of Any?((uint64_t)v7);
    goto LABEL_17;
  }
  type metadata accessor for UsoTask_resume_common_MediaItem();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_17:
    outlined destroy of Any?((uint64_t)v9);
    return 0;
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_ReferenceControl.reference.getter();
  swift_release();
  if (v7[0] && (uint64_t v3 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter(), swift_release(), v3))
  {
    dispatch thunk of UsoEntity_common_App.name.getter();
    uint64_t v5 = v4;
    swift_release();
    swift_release();
    outlined destroy of Any?((uint64_t)v9);
    if (v5)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v9);
    swift_release();
  }
  return 0;
}

ValueMetadata *type metadata accessor for SiriAudioAffinityScorer()
{
  return &type metadata for SiriAudioAffinityScorer;
}

uint64_t *SiriCAMAppDisambiguationFeatureFlag.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  return &static SiriCAMAppDisambiguationFeatureFlag.forceEnabled;
}

uint64_t static SiriCAMAppDisambiguationFeatureFlag.forceEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }

  return swift_retain();
}

const char *SiriCAMAppDisambiguationFeatureFlag.domain.getter()
{
  return "Siri";
}

const char *SiriCAMAppDisambiguationFeatureFlag.feature.getter()
{
  return "SKESiriCAMAppDisambiguation";
}

uint64_t SiriCAMAppDisambiguationFeatureFlag.isEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  uint64_t v0 = (unsigned __int8 *)(static SiriCAMAppDisambiguationFeatureFlag.forceEnabled + 16);
  uint64_t v1 = (os_unfair_lock_s *)(static SiriCAMAppDisambiguationFeatureFlag.forceEnabled + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static SiriCAMAppDisambiguationFeatureFlag.forceEnabled + 20));
  partial apply for closure #1 in SiriCAMAppDisambiguationFeatureFlag.isEnabled.getter(v0, &v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

unsigned __int8 *closure #1 in SiriCAMAppDisambiguationFeatureFlag.isEnabled.getter@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  if (v3 == 2)
  {
    uint64_t v7 = &type metadata for SiriCAMAppDisambiguationFeatureFlag;
    unint64_t v8 = lazy protocol witness table accessor for type SiriCAMAppDisambiguationFeatureFlag and conformance SiriCAMAppDisambiguationFeatureFlag();
    char v4 = isFeatureEnabled(_:)();
    SiriKitRuntime::SiriAudioAffinityScorer result = (unsigned __int8 *)__swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v6);
    char v5 = v4 & 1;
  }
  else
  {
    char v5 = v3 & 1;
  }
  *a2 = v5;
  return result;
}

unsigned __int8 *partial apply for closure #1 in SiriCAMAppDisambiguationFeatureFlag.isEnabled.getter@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  return closure #1 in SiriCAMAppDisambiguationFeatureFlag.isEnabled.getter(a1, a2);
}

uint64_t static SiriCAMAppDisambiguationFeatureFlag.== infix(_:_:)()
{
  return 1;
}

void SiriCAMAppDisambiguationFeatureFlag.hash(into:)()
{
}

Swift::Int SiriCAMAppDisambiguationFeatureFlag.hashValue.getter()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type SiriCAMAppDisambiguationFeatureFlag and conformance SiriCAMAppDisambiguationFeatureFlag()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriCAMAppDisambiguationFeatureFlag and conformance SiriCAMAppDisambiguationFeatureFlag;
  if (!lazy protocol witness table cache variable for type SiriCAMAppDisambiguationFeatureFlag and conformance SiriCAMAppDisambiguationFeatureFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriCAMAppDisambiguationFeatureFlag and conformance SiriCAMAppDisambiguationFeatureFlag);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriCAMAppDisambiguationFeatureFlag and conformance SiriCAMAppDisambiguationFeatureFlag;
  if (!lazy protocol witness table cache variable for type SiriCAMAppDisambiguationFeatureFlag and conformance SiriCAMAppDisambiguationFeatureFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriCAMAppDisambiguationFeatureFlag and conformance SiriCAMAppDisambiguationFeatureFlag);
  }
  return result;
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance SiriCAMAppDisambiguationFeatureFlag()
{
  return "SKESiriCAMAppDisambiguation";
}

unsigned char *storeEnumTagSinglePayload for SiriCAMAppDisambiguationFeatureFlag(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B9FFF630);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriCAMAppDisambiguationFeatureFlag()
{
  return &type metadata for SiriCAMAppDisambiguationFeatureFlag;
}

SiriKitRuntime::SiriClockFlowAffinityScorer __swiftcall SiriClockFlowAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA062AD0;
  uint64_t v1 = 0xD00000000000001ELL;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t SiriClockFlowAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t SiriClockFlowAffinityScorer.ClockRequestType.rawValue.getter(char a1)
{
  return qword_1BA05BC18[a1];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SiriClockFlowAffinityScorer.ClockRequestType(char *a1, char *a2)
{
  if (qword_1BA05BC18[*a1] == qword_1BA05BC18[*a2]) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SiriClockFlowAffinityScorer.ClockRequestType()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SiriClockFlowAffinityScorer.ClockRequestType()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SiriClockFlowAffinityScorer.ClockRequestType()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SiriClockFlowAffinityScorer.ClockRequestType@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized SiriClockFlowAffinityScorer.ClockRequestType.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SiriClockFlowAffinityScorer.ClockRequestType(void *a1@<X8>)
{
  *a1 = qword_1BA05BC18[*v1];
  a1[1] = 0xE800000000000000;
}

uint64_t static SiriClockFlowAffinityScorer.componentOffset(from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v41 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Calendar?);
  MEMORY[0x1F4188790](v4 - 8);
  unint64_t v43 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DateComponents();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v42 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Date.DefinedValues?);
  MEMORY[0x1F4188790](v9 - 8);
  id v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UsoEntity_common_Date.DefinedValues();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v40 - v17;
  dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
  if (!v45) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a1, 1, 1, v6);
  }
  uint64_t v44 = v6;
  uint64_t v19 = dispatch thunk of UsoEntity_common_DateTime.date.getter();
  if (!v19)
  {
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a1, 1, 1, v44);
  }
  uint64_t v20 = v19;
  dispatch thunk of UsoEntity_common_Date.definedValue.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v11, &demangling cache variable for type metadata for UsoEntity_common_Date.DefinedValues?);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a1, 1, 1, v44);
  }
  uint64_t v40 = v20;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v11, v12);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
  int v22 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v16, v12);
  if (v22 == *MEMORY[0x1E4FA30E0])
  {
    uint64_t v23 = type metadata accessor for Calendar();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v43, 1, 1, v23);
    uint64_t v24 = type metadata accessor for TimeZone();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v41, 1, 1, v24);
    uint64_t v25 = v42;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
    DateComponents.day.setter();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    uint64_t v26 = v44;
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v25, v44);
    uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    uint64_t v28 = a1;
LABEL_13:
    uint64_t v34 = 0;
    uint64_t v35 = v26;
    return v27(v28, v34, 1, v35);
  }
  uint64_t v29 = a1;
  if (v22 == *MEMORY[0x1E4FA30D0] || (uint64_t v30 = v44, v22 == *MEMORY[0x1E4FA30C8]))
  {
    uint64_t v31 = type metadata accessor for Calendar();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v43, 1, 1, v31);
    uint64_t v32 = type metadata accessor for TimeZone();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v41, 1, 1, v32);
    uint64_t v33 = v42;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
    DateComponents.day.setter();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    uint64_t v26 = v44;
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v29, v33, v44);
    uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    uint64_t v28 = v29;
    goto LABEL_13;
  }
  if (v22 == *MEMORY[0x1E4FA30D8])
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    swift_release();
    swift_release();
    uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    uint64_t v28 = v29;
    uint64_t v34 = 1;
LABEL_19:
    uint64_t v35 = v30;
    return v27(v28, v34, 1, v35);
  }
  if (v22 == *MEMORY[0x1E4FA30C0])
  {
    uint64_t v36 = type metadata accessor for Calendar();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v43, 1, 1, v36);
    uint64_t v37 = type metadata accessor for TimeZone();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v41, 1, 1, v37);
    uint64_t v38 = v42;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
    DateComponents.day.setter();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v29, v38, v30);
    uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    uint64_t v28 = v29;
    uint64_t v34 = 0;
    goto LABEL_19;
  }
  uint64_t v39 = *(void (**)(char *, uint64_t))(v13 + 8);
  v39(v18, v12);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v29, 1, 1, v30);
  return ((uint64_t (*)(char *, uint64_t))v39)(v16, v12);
}

uint64_t specialized static SiriClockFlowAffinityScorer.requestType(for:)()
{
  dispatch thunk of Uso_VerbTemplate_ReferenceSelect.select.getter();
  if (v7
    && (uint64_t v0 = dispatch thunk of UsoEntity_common_DateTime.date.getter(), swift_release(), v0)
    && (uint64_t v1 = dispatch thunk of UsoEntity_common_Date.monthOfYear.getter(), swift_release(), v1))
  {
    swift_release();
  }
  else
  {
    dispatch thunk of Uso_VerbTemplate_ReferenceSelect.select.getter();
    if (v7)
    {
      uint64_t v2 = dispatch thunk of UsoEntity_common_DateTime.time.getter();
      swift_release();
      if (v2)
      {
        swift_release();
        return 0;
      }
    }
    dispatch thunk of Uso_VerbTemplate_ReferenceSelect.select.getter();
    if (v7)
    {
      uint64_t v4 = dispatch thunk of UsoEntity_common_DateTime.date.getter();
      swift_release();
      if (v4)
      {
        uint64_t v5 = dispatch thunk of UsoEntity_common_Date.weekOfYear.getter();
        swift_release();
        if (v5)
        {
          swift_release();
          return 2;
        }
      }
    }
    dispatch thunk of Uso_VerbTemplate_ReferenceSelect.select.getter();
    if (v7)
    {
      uint64_t v6 = dispatch thunk of UsoEntity_common_DateTime.date.getter();
      swift_release();
      if (v6)
      {
        swift_release();
        return 1;
      }
    }
  }
  return 3;
}

uint64_t specialized SiriClockFlowAffinityScorer.score(input:environment:)()
{
  uint64_t v0 = type metadata accessor for UsoEntity_common_ListPosition.DefinedValues();
  uint64_t v168 = *(void *)(v0 - 8);
  uint64_t v169 = v0;
  uint64_t v1 = MEMORY[0x1F4188790](v0);
  uint64_t v149 = (char *)&v149 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = MEMORY[0x1F4188790](v1);
  unint64_t v150 = (char *)&v149 - v4;
  MEMORY[0x1F4188790](v3);
  unint64_t v172 = (char *)&v149 - v5;
  uint64_t v171 = type metadata accessor for UsoEntity_common_Date.DefinedValues();
  os_log_t v167 = *(os_log_t *)(v171 - 8);
  MEMORY[0x1F4188790](v171);
  uint64_t v151 = (char *)&v149 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Date.DefinedValues?, UsoEntity_common_Date.DefinedValues?));
  MEMORY[0x1F4188790](v156);
  uint64_t v163 = (uint64_t)&v149 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_ListPosition.DefinedValues?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  v174 = (char *)&v149 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v158 = (char *)&v149 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Date.DefinedValues?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v153 = (uint64_t)&v149 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v160 = (uint64_t)&v149 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v161 = (uint64_t)&v149 - v18;
  MEMORY[0x1F4188790](v17);
  int64_t v155 = (char *)&v149 - v19;
  uint64_t v159 = type metadata accessor for UsoEntity_common_DateTime.DefinedValues();
  uint64_t v165 = *(void *)(v159 - 8);
  MEMORY[0x1F4188790](v159);
  uint64_t v152 = (char *)&v149 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_DateTime.DefinedValues?, UsoEntity_common_DateTime.DefinedValues?));
  MEMORY[0x1F4188790](v157);
  uint64_t v166 = (uint64_t)&v149 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_DateTime.DefinedValues?);
  uint64_t v23 = MEMORY[0x1F4188790](v22 - 8);
  uint64_t v154 = (uint64_t)&v149 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v164 = (uint64_t)&v149 - v26;
  MEMORY[0x1F4188790](v25);
  uint64_t v162 = (uint64_t)&v149 - v27;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  MEMORY[0x1F4188790](v28 - 8);
  uint64_t v170 = (char *)&v149 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v173 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v30 = *(void *)(v173 - 8);
  MEMORY[0x1F4188790](v173);
  uint64_t v32 = (char *)&v149 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v33 - 8);
  uint64_t v35 = (char *)&v149 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for USOParse();
  uint64_t v37 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36);
  uint64_t v39 = (char *)&v149 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for Parse();
  uint64_t v41 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40);
  unint64_t v43 = (char *)&v149 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v41 + 88))(v43, v40) != *MEMORY[0x1E4FA1F48])
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    __swift_project_value_buffer(v52, (uint64_t)static Logger.executor);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v55 = 0;
      _os_log_impl(&dword_1B9C64000, v53, v54, "SiriClockFlowAffinityScorer | Got unexpected parse", v55, 2u);
      MEMORY[0x1BA9E48C0](v55, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v40);
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v41 + 96))(v43, v40);
  uint64_t v44 = v37;
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v39, v43, v36);
  uint64_t v45 = USOParse.userParse.getter();
  uint64_t v46 = MEMORY[0x1BA9DE000](v45);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v173);
  uint64_t v47 = *(void *)(v46 + 16);
  uint64_t v48 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v50 = (char *)v36;
  if (v47)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v48 - 8) + 16))(v35, v46+ ((*(unsigned __int8 *)(*(void *)(v48 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v48 - 8) + 80)), v48);
    uint64_t v51 = 0;
  }
  else
  {
    uint64_t v51 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56))(v35, v51, 1, v48);
  swift_bridgeObjectRelease();
  int v56 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 48))(v35, 1, v48);
  uint64_t v57 = (uint64_t)v174;
  if (v56 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v35, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_19:
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v66 = type metadata accessor for Logger();
    __swift_project_value_buffer(v66, (uint64_t)static Logger.executor);
    uint64_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v67, v68))
    {
      uint64_t v69 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v69 = 0;
      _os_log_impl(&dword_1B9C64000, v67, v68, "SiriClockFlowAffinityScorer | Could not extract USO task", v69, 2u);
      MEMORY[0x1BA9E48C0](v69, -1, -1);
    }
    goto LABEL_29;
  }
  unint64_t v58 = Siri_Nlu_External_UserDialogAct.toUsoTask()();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v35, v48);
  if (!v58) {
    goto LABEL_19;
  }
  swift_retain();
  static UsoTask_CodegenConverter.convert(task:)();
  swift_release();
  if (!v176[3])
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v176, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_24;
  }
  type metadata accessor for UsoTask_request_common_DateTime();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_24:
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v70 = type metadata accessor for Logger();
    __swift_project_value_buffer(v70, (uint64_t)static Logger.executor);
    uint64_t v67 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v67, v71))
    {
      char v72 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v72 = 0;
      _os_log_impl(&dword_1B9C64000, v67, v71, "SiriClockFlowAffinityScorer | Unsupported request", v72, 2u);
      MEMORY[0x1BA9E48C0](v72, -1, -1);
    }
    goto LABEL_28;
  }
  uint64_t v59 = v175;
  char v60 = specialized static SiriClockFlowAffinityScorer.requestType(for:)();
  uint64_t v61 = v172;
  switch(v60)
  {
    case 1:
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
      swift_release();
      if (!v176[0]) {
        goto LABEL_64;
      }
      uint64_t v73 = dispatch thunk of UsoEntity_common_DateTime.offsetReference.getter();
      swift_release();
      uint64_t v74 = v171;
      if (!v73) {
        goto LABEL_65;
      }
      uint64_t v173 = v59;
      v174 = (char *)v73;
      uint64_t v170 = v39;
      uint64_t v75 = v162;
      dispatch thunk of UsoEntity_common_DateTime.definedValue.getter();
      uint64_t v76 = v164;
      uint64_t v77 = v165;
      uint64_t v78 = v159;
      (*(void (**)(uint64_t, void, uint64_t))(v165 + 104))(v164, *MEMORY[0x1E4FA3130], v159);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v77 + 56))(v76, 0, 1, v78);
      uint64_t v79 = v166;
      uint64_t v80 = v166 + *(int *)(v157 + 48);
      outlined init with copy of ReferenceResolutionClientProtocol?(v75, v166, &demangling cache variable for type metadata for UsoEntity_common_DateTime.DefinedValues?);
      uint64_t v81 = v78;
      outlined init with copy of ReferenceResolutionClientProtocol?(v76, v80, &demangling cache variable for type metadata for UsoEntity_common_DateTime.DefinedValues?);
      uint64_t v82 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
      if (v82(v79, 1, v78) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v76, &demangling cache variable for type metadata for UsoEntity_common_DateTime.DefinedValues?);
        uint64_t v79 = v166;
        outlined destroy of ReferenceResolutionClientProtocol?(v75, &demangling cache variable for type metadata for UsoEntity_common_DateTime.DefinedValues?);
        int v83 = v82(v80, 1, v78);
        uint64_t v39 = v170;
        if (v83 == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v79, &demangling cache variable for type metadata for UsoEntity_common_DateTime.DefinedValues?);
          swift_release();
LABEL_64:
          uint64_t v74 = v171;
LABEL_65:
          swift_retain();
          dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
          swift_release();
          if (v176[0])
          {
            uint64_t v114 = dispatch thunk of UsoEntity_common_DateTime.date.getter();
            swift_release();
            if (v114)
            {
              uint64_t v115 = (uint64_t)v155;
              dispatch thunk of UsoEntity_common_Date.definedValue.getter();
              if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v167[6].isa)(v115, 1, v74) == 1)
              {
                outlined destroy of ReferenceResolutionClientProtocol?(v115, &demangling cache variable for type metadata for UsoEntity_common_Date.DefinedValues?);
                goto LABEL_97;
              }
              swift_release();
              outlined destroy of ReferenceResolutionClientProtocol?(v115, &demangling cache variable for type metadata for UsoEntity_common_Date.DefinedValues?);
            }
          }
          swift_retain();
          dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
          swift_release();
          if (!v176[0]
            || (uint64_t v116 = dispatch thunk of UsoEntity_common_DateTime.offsetValue.getter(), swift_release(), !v116))
          {
            (*(void (**)(char *, char *))(v44 + 8))(v39, v50);
            swift_release();
            swift_release();
            return 3;
          }
          goto LABEL_77;
        }
      }
      else
      {
        uint64_t v102 = v154;
        outlined init with copy of ReferenceResolutionClientProtocol?(v79, v154, &demangling cache variable for type metadata for UsoEntity_common_DateTime.DefinedValues?);
        if (v82(v80, 1, v78) != 1)
        {
          uint64_t v109 = v165;
          uint64_t v110 = v102;
          uint64_t v111 = v152;
          (*(void (**)(char *, uint64_t, uint64_t))(v165 + 32))(v152, v80, v81);
          lazy protocol witness table accessor for type UsoEntity_common_Date.DefinedValues and conformance UsoEntity_common_Date.DefinedValues(&lazy protocol witness table cache variable for type UsoEntity_common_DateTime.DefinedValues and conformance UsoEntity_common_DateTime.DefinedValues, MEMORY[0x1E4FA3138]);
          uint64_t v112 = v110;
          LODWORD(v172) = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v113 = *(void (**)(char *, uint64_t))(v109 + 8);
          v113(v111, v81);
          outlined destroy of ReferenceResolutionClientProtocol?(v164, &demangling cache variable for type metadata for UsoEntity_common_DateTime.DefinedValues?);
          outlined destroy of ReferenceResolutionClientProtocol?(v162, &demangling cache variable for type metadata for UsoEntity_common_DateTime.DefinedValues?);
          v113((char *)v112, v81);
          outlined destroy of ReferenceResolutionClientProtocol?(v79, &demangling cache variable for type metadata for UsoEntity_common_DateTime.DefinedValues?);
          uint64_t v39 = v170;
          if (v172)
          {
            swift_release();
            goto LABEL_64;
          }
LABEL_54:
          if (one-time initialization token for executor != -1) {
            swift_once();
          }
          uint64_t v103 = type metadata accessor for Logger();
          __swift_project_value_buffer(v103, (uint64_t)static Logger.executor);
          unint64_t v104 = Logger.logObject.getter();
          os_log_type_t v105 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v104, v105))
          {
            uint64_t v106 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v106 = 0;
            _os_log_impl(&dword_1B9C64000, v104, v105, "SiriClockFlowAffinityScorer | ClockFlowPlugin does not support offset anchors that are not 'now'", v106, 2u);
            MEMORY[0x1BA9E48C0](v106, -1, -1);
          }
          swift_release();
          swift_release();

          goto LABEL_102;
        }
        outlined destroy of ReferenceResolutionClientProtocol?(v164, &demangling cache variable for type metadata for UsoEntity_common_DateTime.DefinedValues?);
        outlined destroy of ReferenceResolutionClientProtocol?(v75, &demangling cache variable for type metadata for UsoEntity_common_DateTime.DefinedValues?);
        (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v102, v78);
        uint64_t v39 = v170;
      }
      outlined destroy of ReferenceResolutionClientProtocol?(v79, &demangling cache variable for type metadata for (UsoEntity_common_DateTime.DefinedValues?, UsoEntity_common_DateTime.DefinedValues?));
      goto LABEL_54;
    case 2:
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
      swift_release();
      if (!v176[0]) {
        goto LABEL_75;
      }
      uint64_t v84 = dispatch thunk of UsoEntity_common_DateTime.date.getter();
      swift_release();
      if (!v84) {
        goto LABEL_75;
      }
      uint64_t v166 = v84;
      if (!dispatch thunk of UsoEntity_common_Date.weekOfYear.getter()
        || (uint64_t v85 = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter(), swift_release(), !v85))
      {
        uint64_t v86 = (uint64_t)v158;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v168 + 56))(v158, 1, 1, v169);
LABEL_48:
        uint64_t v173 = v59;
        uint64_t v170 = v39;
        outlined destroy of ReferenceResolutionClientProtocol?(v86, &demangling cache variable for type metadata for UsoEntity_common_ListPosition.DefinedValues?);
        uint64_t v91 = v161;
        dispatch thunk of UsoEntity_common_Date.definedValue.getter();
        os_log_t v92 = v167;
        uint64_t v93 = v160;
        uint64_t v94 = v171;
        ((void (*)(uint64_t, void, uint64_t))v167[13].isa)(v160, *MEMORY[0x1E4FA30D8], v171);
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v92[7].isa)(v93, 0, 1, v94);
        uint64_t v95 = v163;
        uint64_t v96 = v163 + *(int *)(v156 + 48);
        outlined init with copy of ReferenceResolutionClientProtocol?(v91, v163, &demangling cache variable for type metadata for UsoEntity_common_Date.DefinedValues?);
        uint64_t v165 = v96;
        uint64_t v97 = v96;
        uint64_t v98 = v94;
        uint64_t v99 = v95;
        outlined init with copy of ReferenceResolutionClientProtocol?(v93, v97, &demangling cache variable for type metadata for UsoEntity_common_Date.DefinedValues?);
        Class isa = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v92[6].isa;
        if (isa(v99, 1, v98) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v93, &demangling cache variable for type metadata for UsoEntity_common_Date.DefinedValues?);
          outlined destroy of ReferenceResolutionClientProtocol?(v91, &demangling cache variable for type metadata for UsoEntity_common_Date.DefinedValues?);
          int v101 = isa(v165, 1, v98);
          uint64_t v39 = v170;
          if (v101 == 1)
          {
            outlined destroy of ReferenceResolutionClientProtocol?(v163, &demangling cache variable for type metadata for UsoEntity_common_Date.DefinedValues?);
            swift_release();
            uint64_t v61 = v172;
            uint64_t v59 = v173;
            uint64_t v57 = (uint64_t)v174;
            goto LABEL_75;
          }
        }
        else
        {
          uint64_t v107 = v153;
          outlined init with copy of ReferenceResolutionClientProtocol?(v99, v153, &demangling cache variable for type metadata for UsoEntity_common_Date.DefinedValues?);
          uint64_t v108 = v165;
          if (isa(v165, 1, v98) != 1)
          {
            os_log_t v117 = v167;
            BOOL v118 = v151;
            ((void (*)(char *, uint64_t, uint64_t))v167[4].isa)(v151, v108, v98);
            lazy protocol witness table accessor for type UsoEntity_common_Date.DefinedValues and conformance UsoEntity_common_Date.DefinedValues(&lazy protocol witness table cache variable for type UsoEntity_common_Date.DefinedValues and conformance UsoEntity_common_Date.DefinedValues, MEMORY[0x1E4FA30E8]);
            LODWORD(v165) = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v119 = (void (*)(char *, uint64_t))v117[1].isa;
            v119(v118, v98);
            outlined destroy of ReferenceResolutionClientProtocol?(v160, &demangling cache variable for type metadata for UsoEntity_common_Date.DefinedValues?);
            outlined destroy of ReferenceResolutionClientProtocol?(v161, &demangling cache variable for type metadata for UsoEntity_common_Date.DefinedValues?);
            v119((char *)v107, v98);
            outlined destroy of ReferenceResolutionClientProtocol?(v99, &demangling cache variable for type metadata for UsoEntity_common_Date.DefinedValues?);
            uint64_t v39 = v170;
            uint64_t v59 = v173;
            if (v165)
            {
              swift_release();
              uint64_t v61 = v172;
              uint64_t v57 = (uint64_t)v174;
              goto LABEL_75;
            }
LABEL_97:
            if (one-time initialization token for executor != -1) {
              swift_once();
            }
            uint64_t v144 = type metadata accessor for Logger();
            __swift_project_value_buffer(v144, (uint64_t)static Logger.executor);
            unint64_t v145 = Logger.logObject.getter();
            os_log_type_t v146 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v145, v146))
            {
              uint64_t v147 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v147 = 0;
              _os_log_impl(&dword_1B9C64000, v145, v146, "SiriClockFlowAffinityScorer | ClockFlowPlugin does not support arbitrary date references", v147, 2u);
              MEMORY[0x1BA9E48C0](v147, -1, -1);
            }
            swift_release();
            swift_release();

LABEL_102:
            swift_release();
            goto LABEL_30;
          }
          outlined destroy of ReferenceResolutionClientProtocol?(v160, &demangling cache variable for type metadata for UsoEntity_common_Date.DefinedValues?);
          outlined destroy of ReferenceResolutionClientProtocol?(v161, &demangling cache variable for type metadata for UsoEntity_common_Date.DefinedValues?);
          ((void (*)(uint64_t, uint64_t))v167[1].isa)(v107, v98);
          uint64_t v39 = v170;
        }
        outlined destroy of ReferenceResolutionClientProtocol?(v163, &demangling cache variable for type metadata for (UsoEntity_common_Date.DefinedValues?, UsoEntity_common_Date.DefinedValues?));
        goto LABEL_97;
      }
      uint64_t v86 = (uint64_t)v158;
      dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter();
      swift_release();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v168 + 48))(v86, 1, v169) == 1) {
        goto LABEL_48;
      }
      swift_release();
      outlined destroy of ReferenceResolutionClientProtocol?(v86, &demangling cache variable for type metadata for UsoEntity_common_ListPosition.DefinedValues?);
      uint64_t v61 = v172;
LABEL_75:
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
      swift_release();
      if (v176[0])
      {
        uint64_t v120 = dispatch thunk of UsoEntity_common_DateTime.offsetValue.getter();
        swift_release();
        if (v120)
        {
LABEL_77:
          swift_release();
          if (one-time initialization token for executor != -1) {
            swift_once();
          }
          uint64_t v121 = type metadata accessor for Logger();
          __swift_project_value_buffer(v121, (uint64_t)static Logger.executor);
          uint64_t v67 = Logger.logObject.getter();
          os_log_type_t v88 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v67, v88))
          {
            uint64_t v89 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v89 = 0;
            uint64_t v90 = "SiriClockFlowAffinityScorer | ClockFlowPlugin does not support arbitrary date offset values";
LABEL_81:
            _os_log_impl(&dword_1B9C64000, v67, v88, v90, v89, 2u);
            MEMORY[0x1BA9E48C0](v89, -1, -1);
          }
LABEL_82:
          swift_release();
LABEL_28:
          swift_release();
LABEL_29:

LABEL_30:
          (*(void (**)(char *, char *))(v44 + 8))(v39, v50);
          return 0;
        }
      }
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter();
      swift_release();
      if (!v176[0]
        || (uint64_t v122 = dispatch thunk of UsoEntity_common_DateTime.date.getter(), swift_release(), !v122)
        || (uint64_t v123 = dispatch thunk of UsoEntity_common_Date.weekOfYear.getter(), swift_release(), !v123)
        || (uint64_t v124 = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter(), swift_release(), !v124))
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v168 + 56))(v57, 1, 1, v169);
        goto LABEL_96;
      }
      dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter();
      swift_release();
      uint64_t v125 = v168;
      uint64_t v126 = v169;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v168 + 48))(v57, 1, v169) == 1)
      {
LABEL_96:
        swift_release();
        swift_release();
        (*(void (**)(char *, char *))(v44 + 8))(v39, v50);
        outlined destroy of ReferenceResolutionClientProtocol?(v57, &demangling cache variable for type metadata for UsoEntity_common_ListPosition.DefinedValues?);
        return 3;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v125 + 32))(v61, v57, v126);
      uint64_t v127 = v61;
      id v128 = v150;
      v174 = *(char **)(v125 + 16);
      ((void (*)(char *, char *, uint64_t))v174)(v150, v127, v126);
      int v129 = (*(uint64_t (**)(char *, uint64_t))(v125 + 88))(v128, v126);
      if (v129 != *MEMORY[0x1E4FA3410] && v129 != *MEMORY[0x1E4FA33F0] && v129 != *MEMORY[0x1E4FA33A0])
      {
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v173 = v59;
        uint64_t v130 = type metadata accessor for Logger();
        __swift_project_value_buffer(v130, (uint64_t)static Logger.executor);
        uint64_t v131 = v149;
        uint64_t v132 = v172;
        ((void (*)(char *, char *, uint64_t))v174)(v149, v172, v169);
        unint64_t v133 = Logger.logObject.getter();
        os_log_type_t v134 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v133, v134))
        {
          os_log_t v167 = v133;
          uint64_t v135 = (uint8_t *)swift_slowAlloc();
          uint64_t v136 = swift_slowAlloc();
          uint64_t v170 = v39;
          uint64_t v137 = v136;
          v176[0] = v136;
          *(_DWORD *)uint64_t v135 = 136315138;
          uint64_t v171 = v58;
          v174 = v50;
          uint64_t v138 = UsoEntity_common_ListPosition.DefinedValues.rawValue.getter();
          uint64_t v175 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v138, v139, v176);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v140 = *(void (**)(char *, uint64_t))(v168 + 8);
          uint64_t v141 = v131;
          uint64_t v142 = v169;
          v140(v141, v169);
          os_log_t v143 = v167;
          _os_log_impl(&dword_1B9C64000, v167, v134, "SiriClockFlowAffinityScorer | ClockFlowPlugin does not support %s", v135, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v137, -1, -1);
          MEMORY[0x1BA9E48C0](v135, -1, -1);
          swift_release();
          swift_release();

          v140(v172, v142);
          (*(void (**)(char *, char *))(v44 + 8))(v170, v174);
        }
        else
        {

          uint64_t v140 = *(void (**)(char *, uint64_t))(v168 + 8);
          uint64_t v148 = v131;
          uint64_t v142 = v169;
          v140(v148, v169);
          swift_release();
          swift_release();
          v140(v132, v142);
          (*(void (**)(char *, char *))(v44 + 8))(v39, v50);
        }
        v140(v150, v142);
        return 0;
      }
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v168 + 8))(v172, v126);
      (*(void (**)(char *, char *))(v44 + 8))(v39, v50);
      return 3;
    case 3:
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v87 = type metadata accessor for Logger();
      __swift_project_value_buffer(v87, (uint64_t)static Logger.executor);
      uint64_t v67 = Logger.logObject.getter();
      os_log_type_t v88 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v67, v88)) {
        goto LABEL_82;
      }
      uint64_t v89 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v89 = 0;
      uint64_t v90 = "SiriClockFlowAffinityScorer | Unsupported request";
      goto LABEL_81;
    default:
      uint64_t v62 = (uint64_t)v170;
      static SiriClockFlowAffinityScorer.componentOffset(from:)((uint64_t)v170);
      swift_release();
      swift_release();
      (*(void (**)(char *, char *))(v44 + 8))(v39, v50);
      uint64_t v63 = type metadata accessor for DateComponents();
      int v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 48))(v62, 1, v63);
      outlined destroy of ReferenceResolutionClientProtocol?(v62, &demangling cache variable for type metadata for DateComponents?);
      if (v64 == 1) {
        return 3;
      }
      else {
        return 0;
      }
  }
}

unint64_t specialized SiriClockFlowAffinityScorer.ClockRequestType.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SiriClockFlowAffinityScorer.ClockRequestType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type SiriClockFlowAffinityScorer.ClockRequestType and conformance SiriClockFlowAffinityScorer.ClockRequestType()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriClockFlowAffinityScorer.ClockRequestType and conformance SiriClockFlowAffinityScorer.ClockRequestType;
  if (!lazy protocol witness table cache variable for type SiriClockFlowAffinityScorer.ClockRequestType and conformance SiriClockFlowAffinityScorer.ClockRequestType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriClockFlowAffinityScorer.ClockRequestType and conformance SiriClockFlowAffinityScorer.ClockRequestType);
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriClockFlowAffinityScorer()
{
  return &type metadata for SiriClockFlowAffinityScorer;
}

unsigned char *storeEnumTagSinglePayload for SiriClockFlowAffinityScorer.ClockRequestType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1BA0020B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriClockFlowAffinityScorer.ClockRequestType()
{
  return &type metadata for SiriClockFlowAffinityScorer.ClockRequestType;
}

uint64_t lazy protocol witness table accessor for type UsoEntity_common_Date.DefinedValues and conformance UsoEntity_common_Date.DefinedValues(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t SiriKitBiomeDonator.__allocating_init(_:backgroundTaskPriority:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  uint64_t v11 = specialized SiriKitBiomeDonator.init(_:backgroundTaskPriority:)((uint64_t)v9, a2, v4, v5, v6);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v11;
}

uint64_t *SiriKitBiomeDonator.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  return &static SiriKitBiomeDonator.instance;
}

uint64_t static SiriKitBiomeDonator.instance.getter()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }

  return swift_retain();
}

id DefaultBiomeSource.init()()
{
  id v0 = objc_msgSend(self, sel_siriExecutionStream);
  id v1 = objc_msgSend(v0, sel_source);

  return v1;
}

uint64_t SiriKitBiomeDonator.init(_:backgroundTaskPriority:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v10 + 16))(v9);
  uint64_t v11 = specialized SiriKitBiomeDonator.init(_:backgroundTaskPriority:)((uint64_t)v9, a2, v2, v5, v6);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v11;
}

uint64_t closure #1 in SiriKitBiomeDonator.init(_:backgroundTaskPriority:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>.Iterator);
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in SiriKitBiomeDonator.init(_:backgroundTaskPriority:), 0, 0);
}

uint64_t closure #1 in SiriKitBiomeDonator.init(_:backgroundTaskPriority:)()
{
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[9] = __swift_project_value_buffer(v1, (uint64_t)static Logger.instrumentation);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_1B9C64000, v2, v3, "#SiriKitBiomeDonator - Background donation task started", v4, 2u);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>);
  AsyncStream.makeAsyncIterator()();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[10] = v5;
  void *v5 = v0;
  v5[1] = closure #1 in SiriKitBiomeDonator.init(_:backgroundTaskPriority:);
  uint64_t v6 = v0[6];
  return MEMORY[0x1F4187D58](v0 + 2, 0, 0, v6);
}

{
  uint64_t v1;

  swift_task_dealloc();
  return MEMORY[0x1F4188298](closure #1 in SiriKitBiomeDonator.init(_:backgroundTaskPriority:), 0, 0);
}

{
  void *v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t (*v7)(void);
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;

  uint64_t v21 = v0;
  uint64_t v1 = (void *)v0[2];
  if (!v1)
  {
    (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);
    goto LABEL_5;
  }
  os_log_type_t v3 = v0[3];
  uint64_t v2 = v0[4];
  if (static Task<>.isCancelled.getter())
  {
    (*(void (**)(void, void))(v0[7] + 8))(v0[8], v0[6]);

    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v4 = Logger.logObject.getter();
    uint64_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_1B9C64000, v4, v5, "#SiriKitBiomeDonator - Background donation task stopped", v6, 2u);
      MEMORY[0x1BA9E48C0](v6, -1, -1);
    }

    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
  uint64_t v9 = (void *)v0[5];
  uint64_t v10 = v9[5];
  uint64_t v11 = v9[6];
  __swift_project_boxed_opaque_existential_1(v9 + 2, v10);
  (*(void (**)(void *, uint64_t, uint64_t))(v11 + 8))(v1, v10, v11);
  swift_bridgeObjectRetain_n();
  uint64_t v12 = v1;
  uint64_t v13 = Logger.logObject.getter();
  uint64_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    uint64_t v20 = v16;
    *(_DWORD *)uint64_t v15 = 136315138;
    if (v2)
    {
      uint64_t v17 = v2;
    }
    else
    {
      os_log_type_t v3 = 0x3E6C696E3CLL;
      uint64_t v17 = 0xE500000000000000;
    }
    swift_bridgeObjectRetain();
    *(void *)(v15 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v17, &v20);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v13, v14, "#SiriKitBiomeDonator - donated execution event to BIOME for taskId: %s", (uint8_t *)v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v16, -1, -1);
    MEMORY[0x1BA9E48C0](v15, -1, -1);

    swift_bridgeObjectRelease();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v18 = (void *)swift_task_alloc();
  v0[10] = v18;
  *uint64_t v18 = v0;
  v18[1] = closure #1 in SiriKitBiomeDonator.init(_:backgroundTaskPriority:);
  uint64_t v19 = v0[6];
  return MEMORY[0x1F4187D58](v0 + 2, 0, 0, v19);
}

Swift::Void __swiftcall SiriKitBiomeDonator.close()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.instrumentation);
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1B9C64000, v3, v4, "#SiriKitBiomeDonator - Requesting termination of the background worker", v5, 2u);
    MEMORY[0x1BA9E48C0](v5, -1, -1);
  }

  if (*(void *)(v1 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_backgroundTask))
  {
    uint64_t v6 = swift_retain();
    MEMORY[0x1BA9E3300](v6, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
    swift_release();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>.Continuation);
  AsyncStream.Continuation.finish()();
}

uint64_t SiriKitBiomeDonator.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_donationStream;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_donationContinuation;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>.Continuation);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  return v0;
}

uint64_t SiriKitBiomeDonator.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_donationStream;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_donationContinuation;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>.Continuation);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();

  return swift_deallocClassInstance();
}

id DefaultBiomeSource.sendEvent(_:)(uint64_t a1, id a2)
{
  return objc_msgSend(a2, sel_sendEvent_, a1);
}

id protocol witness for BiomeSource.sendEvent(_:) in conformance DefaultBiomeSource(uint64_t a1)
{
  return objc_msgSend(*v1, sel_sendEvent_, a1);
}

uint64_t specialized SiriKitBiomeDonator.init(_:backgroundTaskPriority:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a2;
  uint64_t v24 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>.Continuation.BufferingPolicy);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>.Continuation);
  uint64_t v11 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[3] = &type metadata for DefaultBiomeSource;
  v27[4] = &protocol witness table for DefaultBiomeSource;
  v27[0] = v24;
  *(void *)(a3 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_backgroundTask) = 0;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v27, a3 + 16);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E4FBD028], v7);
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a3 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_donationStream, v17, v14);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a3 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_donationContinuation, v13, v25);
  uint64_t v18 = type metadata accessor for TaskPriority();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v6, v26, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v6, 0, 1, v18);
  uint64_t v21 = (void *)swift_allocObject();
  id v21[2] = 0;
  v21[3] = 0;
  v21[4] = a3;
  swift_retain();
  uint64_t v22 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in SiriKitBiomeDonator.init(_:backgroundTaskPriority:), (uint64_t)v21);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v18);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v27);
  outlined destroy of TaskPriority?((uint64_t)v6);
  *(void *)(a3 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_backgroundTask) = v22;
  swift_release();
  return a3;
}

uint64_t specialized SiriKitBiomeDonator.init(_:backgroundTaskPriority:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v28 = a5;
  uint64_t v29 = a1;
  uint64_t v32 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v31 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>.Continuation.BufferingPolicy);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>.Continuation);
  uint64_t v13 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33[3] = a4;
  v33[4] = v28;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v33);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_0, v29, a4);
  *(void *)(a3 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_backgroundTask) = 0;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v33, a3 + 16);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E4FBD028], v9);
  static AsyncStream.makeStream(of:bufferingPolicy:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a3 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_donationStream, v19, v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a3 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_donationContinuation, v15, v30);
  uint64_t v21 = type metadata accessor for TaskPriority();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v24 = (uint64_t)v31;
  uint64_t v23 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v31, v32, v21);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v24, 0, 1, v21);
  uint64_t v25 = (void *)swift_allocObject();
  void v25[2] = 0;
  v25[3] = 0;
  v25[4] = a3;
  swift_retain();
  uint64_t v26 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v24, (uint64_t)&closure #1 in SiriKitBiomeDonator.init(_:backgroundTaskPriority:)partial apply, (uint64_t)v25);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v21);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v33);
  outlined destroy of TaskPriority?(v24);
  *(void *)(a3 + OBJC_IVAR____TtC14SiriKitRuntime19SiriKitBiomeDonator_backgroundTask) = v26;
  swift_release();
  return a3;
}

uint64_t dispatch thunk of BiomeDonator.donateSiriExecutionTaskStep(activityType:eventTime:intentTypeName:appBundleId:requestId:slotName:statusReason:taskId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return (*(uint64_t (**)(void))(a16 + 8))();
}

uint64_t ObjC metadata update function for SiriKitBiomeDonator()
{
  return type metadata accessor for SiriKitBiomeDonator();
}

uint64_t type metadata accessor for SiriKitBiomeDonator()
{
  uint64_t result = type metadata singleton initialization cache for SiriKitBiomeDonator;
  if (!type metadata singleton initialization cache for SiriKitBiomeDonator) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for SiriKitBiomeDonator()
{
  type metadata accessor for AsyncStream<SiriKitBiomeDonator.DonationEvent>(319, &lazy cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>, MEMORY[0x1E4FBD060]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for AsyncStream<SiriKitBiomeDonator.DonationEvent>(319, &lazy cache variable for type metadata for AsyncStream<SiriKitBiomeDonator.DonationEvent>.Continuation, MEMORY[0x1E4FBD038]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for SiriKitBiomeDonator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SiriKitBiomeDonator);
}

uint64_t dispatch thunk of SiriKitBiomeDonator.__allocating_init(_:backgroundTaskPriority:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

void type metadata accessor for AsyncStream<SiriKitBiomeDonator.DonationEvent>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &unk_1F1384E28);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t dispatch thunk of BiomeSource.sendEvent(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

ValueMetadata *type metadata accessor for DefaultBiomeSource()
{
  return &type metadata for DefaultBiomeSource;
}

uint64_t destroy for SiriKitBiomeDonator.DonationEvent(id *a1)
{
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for SiriKitBiomeDonator.DonationEvent(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  a1[2] = *(void *)(a2 + 16);
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SiriKitBiomeDonator.DonationEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SiriKitBiomeDonator.DonationEvent(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v5 = a2[2];
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for SiriKitBiomeDonator.DonationEvent()
{
  return &unk_1F1384E28;
}

uint64_t partial apply for closure #1 in SiriKitBiomeDonator.init(_:backgroundTaskPriority:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in SiriKitBiomeDonator.init(_:backgroundTaskPriority:)(a1, v4, v5, v6);
}

uint64_t closure #1 in SiriKitBiomeDonator.init(_:backgroundTaskPriority:)partial apply(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in SiriKitBiomeDonator.init(_:backgroundTaskPriority:)(a1, v4, v5, v6);
}

char **SiriKitExecutorSignpost.logAFAnalytics.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.logAFAnalytics;
}

char **SiriKitExecutorSignpost.logRemoteAFAnalytics.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.logRemoteAFAnalytics;
}

void *AmbiguityHandling.linkActionIdentifierUserDataKey.unsafeMutableAddressor()
{
  return &static AmbiguityHandling.linkActionIdentifierUserDataKey;
}

char **SiriKitExecutorSignpost.paraphraseTime.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.paraphraseTime;
}

char **SiriKitExecutorSignpost.executionTime.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.executionTime;
}

void *LogConst.Category.conversationBridge.unsafeMutableAddressor()
{
  return &static LogConst.Category.conversationBridge;
}

unint64_t ConversationInsightRequestSummaryMessageDescription.rawValue.getter(char a1)
{
  unint64_t result = 0xD00000000000001DLL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 2:
      unint64_t result = 0xD000000000000022;
      break;
    case 3:
    case 7:
      unint64_t result = 0xD000000000000017;
      break;
    case 4:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 5:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 6:
      unint64_t result = 0xD000000000000021;
      break;
    case 8:
      unint64_t result = 0xD000000000000020;
      break;
    case 9:
      unint64_t result = 0xD000000000000027;
      break;
    case 10:
      unint64_t result = 0xD000000000000019;
      break;
    case 11:
      unint64_t result = 0xD000000000000027;
      break;
    case 12:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 13:
      unint64_t result = 0xD000000000000021;
      break;
    case 14:
      unint64_t result = 0xD00000000000001ELL;
      break;
    default:
      return result;
  }
  return result;
}

char **SiriKitExecutorSignpost.loadPluginCatalog.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.loadPluginCatalog;
}

void *TaskMetricsConst.incompatibleEagerResultCandidateId.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.incompatibleEagerResultCandidateId;
}

char **SiriKitExecutorSignpost.fetchSpeechInfo.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.fetchSpeechInfo;
}

char **SiriKitExecutorSignpost.warmPlugin.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.warmPlugin;
}

char **SiriKitExecutorSignpost.referenceResolutionCollection.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.referenceResolutionCollection;
}

char **SiriKitExecutorSignpost.logDialogAnalytics.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.logDialogAnalytics;
}

const char *GradingEvent.clientFlowView.unsafeMutableAddressor()
{
  return "ClientFlowView";
}

char **SiriKitExecutorSignpost.extensionBringup.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.extensionBringup;
}

char **SiriKitExecutorSignpost.loadAllFlowExtensions.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.loadAllFlowExtensions;
}

void *LogConst.subsystem.unsafeMutableAddressor()
{
  return &static LogConst.subsystem;
}

void *LogConst.Category.insightRequestSummary.unsafeMutableAddressor()
{
  return &static LogConst.Category.insightRequestSummary;
}

char **SiriKitExecutorSignpost.logLaunchAppAnalytics.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.logLaunchAppAnalytics;
}

char **SiriKitExecutorSignpost.logLaunchAppSparseObject.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.logLaunchAppSparseObject;
}

char **SiriKitExecutorSignpost.linkMetadataCollection.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.linkMetadataCollection;
}

char **SiriKitExecutorSignpost.meCardLookup.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.meCardLookup;
}

char **SiriKitExecutorSignpost.runAffinityScorer.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.runAffinityScorer;
}

char **SiriKitExecutorSignpost.logSayItAnalytics.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.logSayItAnalytics;
}

char **SiriKitExecutorSignpost.logSayItSparseObject.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.logSayItSparseObject;
}

const char *TaskMetricsConst.none.unsafeMutableAddressor()
{
  return "none";
}

unint64_t static LogConst.subsystem.getter()
{
  return 0xD000000000000016;
}

void *LogConst.Category.siriKitExecutor.unsafeMutableAddressor()
{
  return &static LogConst.Category.siriKitExecutor;
}

uint64_t static LogConst.Category.siriKitExecutor.getter()
{
  return 0x4574694B69726953;
}

const char *LogConst.Category.siriKitFlow.unsafeMutableAddressor()
{
  return "SiriKitFlow";
}

uint64_t static LogConst.Category.siriKitFlow.getter()
{
  return 0x4674694B69726953;
}

const char *LogConst.Category.snippetManager.unsafeMutableAddressor()
{
  return "SnippetManager";
}

uint64_t static LogConst.Category.snippetManager.getter()
{
  return 0x4D74657070696E53;
}

const char *LogConst.Category.rxFlow.unsafeMutableAddressor()
{
  return "RxFlow";
}

uint64_t static LogConst.Category.rxFlow.getter()
{
  return 0x776F6C467852;
}

void *LogConst.Category.requestDispatcher.unsafeMutableAddressor()
{
  return &static LogConst.Category.requestDispatcher;
}

unint64_t static LogConst.Category.requestDispatcher.getter()
{
  return 0xD000000000000011;
}

const char *LogConst.Category.siriKitAce.unsafeMutableAddressor()
{
  return "SiriKitAce";
}

uint64_t static LogConst.Category.siriKitAce.getter()
{
  return 0x4174694B69726953;
}

void *LogConst.Category.instrumentation.unsafeMutableAddressor()
{
  return &static LogConst.Category.instrumentation;
}

unint64_t static LogConst.Category.instrumentation.getter()
{
  return 0xD000000000000016;
}

unint64_t static LogConst.Category.conversationBridge.getter()
{
  return 0xD000000000000012;
}

unint64_t static LogConst.Category.insightRequestSummary.getter()
{
  return 0xD000000000000015;
}

const char *static SiriKitExecutorSignpost.executionTime.getter()
{
  return "execution_time";
}

const char *static SiriKitExecutorSignpost.paraphraseTime.getter()
{
  return "ParaphraseTime";
}

char **SiriKitExecutorSignpost.bravoExecute.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.bravoExecute;
}

const char *static SiriKitExecutorSignpost.bravoExecute.getter()
{
  return "BravoExecute";
}

char **SiriKitExecutorSignpost.bravoInit.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.bravoInit;
}

const char *static SiriKitExecutorSignpost.bravoInit.getter()
{
  return "BravoInit";
}

char **SiriKitExecutorSignpost.bravoOnInput.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.bravoOnInput;
}

const char *static SiriKitExecutorSignpost.bravoOnInput.getter()
{
  return "BravoOnInput";
}

char **SiriKitExecutorSignpost.bravoPlan.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.bravoPlan;
}

const char *static SiriKitExecutorSignpost.bravoPlan.getter()
{
  return "BravoPlan";
}

char **SiriKitExecutorSignpost.bravoPlanAndExecute.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.bravoPlanAndExecute;
}

const char *static SiriKitExecutorSignpost.bravoPlanAndExecute.getter()
{
  return "BravoPlanAndExecute";
}

char **SiriKitExecutorSignpost.bravoSnapshot.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.bravoSnapshot;
}

const char *static SiriKitExecutorSignpost.bravoSnapshot.getter()
{
  return "BravoSnapshot";
}

char **SiriKitExecutorSignpost.eventDispatch.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.eventDispatch;
}

const char *static SiriKitExecutorSignpost.eventDispatch.getter()
{
  return "EventDispatch";
}

char **SiriKitExecutorSignpost.eventHandledByIntentLogger.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.eventHandledByIntentLogger;
}

const char *static SiriKitExecutorSignpost.eventHandledByIntentLogger.getter()
{
  return "EventHandledByIntentLogger";
}

char **SiriKitExecutorSignpost.eventHandledByTaskLogger.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.eventHandledByTaskLogger;
}

const char *static SiriKitExecutorSignpost.eventHandledByTaskLogger.getter()
{
  return "EventHandledByTaskLogger";
}

char **SiriKitExecutorSignpost.executeAutoHandle.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.executeAutoHandle;
}

const char *static SiriKitExecutorSignpost.executeAutoHandle.getter()
{
  return "ExecuteAutoHandle";
}

char **SiriKitExecutorSignpost.executeHandle.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.executeHandle;
}

const char *static SiriKitExecutorSignpost.executeHandle.getter()
{
  return "ExecuteHandle";
}

char **SiriKitExecutorSignpost.executeResolveConfirmHandle.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.executeResolveConfirmHandle;
}

const char *static SiriKitExecutorSignpost.executeResolveConfirmHandle.getter()
{
  return "ExecuteResolveConfirmHandle";
}

const char *static SiriKitExecutorSignpost.fetchSpeechInfo.getter()
{
  return "FetchSpeechInfo";
}

char **SiriKitExecutorSignpost.intentConfirm.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.intentConfirm;
}

const char *static SiriKitExecutorSignpost.intentConfirm.getter()
{
  return "intentConfirm";
}

char **SiriKitExecutorSignpost.intentHandle.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.intentHandle;
}

const char *static SiriKitExecutorSignpost.intentHandle.getter()
{
  return "intentHandle";
}

char **SiriKitExecutorSignpost.intentResolveSlot.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.intentResolveSlot;
}

const char *static SiriKitExecutorSignpost.intentResolveSlot.getter()
{
  return "intentResolveSlot";
}

const char *static SiriKitExecutorSignpost.logAFAnalytics.getter()
{
  return "logAFAnalytics";
}

char **SiriKitExecutorSignpost.logAddViewAnalytics.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.logAddViewAnalytics;
}

const char *static SiriKitExecutorSignpost.logAddViewAnalytics.getter()
{
  return "logAddViewAnalytics";
}

char **SiriKitExecutorSignpost.logAddViewSparseObject.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.logAddViewSparseObject;
}

const char *static SiriKitExecutorSignpost.logAddViewSparseObject.getter()
{
  return "logAddViewSparseObject";
}

char **SiriKitExecutorSignpost.logCoreDuet.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.logCoreDuet;
}

const char *static SiriKitExecutorSignpost.logCoreDuet.getter()
{
  return "logCoreDuet";
}

char **SiriKitExecutorSignpost.logCoreDuetBlocking.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.logCoreDuetBlocking;
}

const char *static SiriKitExecutorSignpost.logCoreDuetBlocking.getter()
{
  return "logCoreDuetBlocking";
}

const char *static SiriKitExecutorSignpost.logDialogAnalytics.getter()
{
  return "logDialogAnalytics";
}

const char *static SiriKitExecutorSignpost.logLaunchAppAnalytics.getter()
{
  return "logLaunchAppAnalytics";
}

const char *static SiriKitExecutorSignpost.logLaunchAppSparseObject.getter()
{
  return "logLaunchAppSparseObject";
}

const char *static SiriKitExecutorSignpost.logRemoteAFAnalytics.getter()
{
  return "logRemoteAFAnalytics";
}

const char *static SiriKitExecutorSignpost.logSayItAnalytics.getter()
{
  return "logSayItAnalytics";
}

const char *static SiriKitExecutorSignpost.logSayItSparseObject.getter()
{
  return "logSayItSparseObject";
}

char **SiriKitExecutorSignpost.makeResolutionResults.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.makeResolutionResults;
}

const char *static SiriKitExecutorSignpost.makeResolutionResults.getter()
{
  return "MakeResolutionResults";
}

const char *static SiriKitExecutorSignpost.meCardLookup.getter()
{
  return "MeCardLookup";
}

char **SiriKitExecutorSignpost.runSiriKitExecutorHandling.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.runSiriKitExecutorHandling;
}

const char *static SiriKitExecutorSignpost.runSiriKitExecutorHandling.getter()
{
  return "RunSiriKitExecutorHandling";
}

char **SiriKitExecutorSignpost.serializeSpeechRecognized.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.serializeSpeechRecognized;
}

const char *static SiriKitExecutorSignpost.serializeSpeechRecognized.getter()
{
  return "SerializeSpeechRecognized";
}

char **SiriKitExecutorSignpost.submitGenericClientCommand.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.submitGenericClientCommand;
}

const char *static SiriKitExecutorSignpost.submitGenericClientCommand.getter()
{
  return "SubmitGenericClientCommand";
}

char **SiriKitExecutorSignpost.submitHandleIntent.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.submitHandleIntent;
}

const char *static SiriKitExecutorSignpost.submitHandleIntent.getter()
{
  return "SubmitHandleIntent";
}

char **SiriKitExecutorSignpost.submitProcessIntent.unsafeMutableAddressor()
{
  return &static SiriKitExecutorSignpost.submitProcessIntent;
}

const char *static SiriKitExecutorSignpost.submitProcessIntent.getter()
{
  return "SubmitProcessIntent";
}

const char *static SiriKitExecutorSignpost.warmPlugin.getter()
{
  return "WarmPlugin";
}

const char *static SiriKitExecutorSignpost.extensionBringup.getter()
{
  return "FlowExtensionBringup";
}

const char *static SiriKitExecutorSignpost.linkMetadataCollection.getter()
{
  return "LinkMetadataCollection";
}

const char *static SiriKitExecutorSignpost.referenceResolutionCollection.getter()
{
  return "ReferenceResolutionCollection";
}

const char *static SiriKitExecutorSignpost.loadPluginCatalog.getter()
{
  return "LoadPluginCatalog";
}

const char *static SiriKitExecutorSignpost.loadAllFlowExtensions.getter()
{
  return "LoadAllFlowExtensions";
}

const char *static SiriKitExecutorSignpost.runAffinityScorer.getter()
{
  return "RunAffinityScorer";
}

const char *ExecutionTimeSignpost.asStaticString.getter(char a1)
{
  unint64_t result = "execution_flow_plugin_execute_time";
  switch(a1)
  {
    case 1:
      unint64_t result = "execution_flow_plugin_input_time";
      break;
    case 2:
      unint64_t result = "execution_flow_plugin_load_time";
      break;
    case 3:
      unint64_t result = "execution_find_flow_time";
      break;
    case 4:
      unint64_t result = "execution_prepare_time";
      break;
    case 5:
      unint64_t result = "execution_commit_time";
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ExecutionTimeSignpost.asString.getter(char a1)
{
  uint64_t v2 = "execution_flow_plugin_execute_time";
  uint64_t v3 = 34;
  switch(a1)
  {
    case 1:
      uint64_t result = MEMORY[0x1F4183950]("execution_flow_plugin_input_time", 32);
      break;
    case 2:
      uint64_t result = MEMORY[0x1F4183950]("execution_flow_plugin_load_time", 31);
      break;
    case 3:
      uint64_t result = MEMORY[0x1F4183950]("execution_find_flow_time", 24);
      break;
    case 4:
      uint64_t result = MEMORY[0x1F4183950]("execution_prepare_time", 22);
      break;
    case 5:
      uint64_t v2 = "execution_commit_time";
      uint64_t v3 = 21;
      goto _$sSS18_fromUTF8RepairingySS6result_Sb11repairsMadetSRys5UInt8VGFZ;
    default:
_$sSS18_fromUTF8RepairingySS6result_Sb11repairsMadetSRys5UInt8VGFZ:
      uint64_t result = MEMORY[0x1F4183950](v2, v3);
      break;
  }
  return result;
}

uint64_t ExecutionTimeSignpost.description.getter(char a1)
{
  uint64_t v2 = "execution_flow_plugin_execute_time";
  uint64_t v3 = 34;
  switch(a1)
  {
    case 1:
      uint64_t result = MEMORY[0x1F4183950]("execution_flow_plugin_input_time", 32);
      break;
    case 2:
      uint64_t result = MEMORY[0x1F4183950]("execution_flow_plugin_load_time", 31);
      break;
    case 3:
      uint64_t result = MEMORY[0x1F4183950]("execution_find_flow_time", 24);
      break;
    case 4:
      uint64_t result = MEMORY[0x1F4183950]("execution_prepare_time", 22);
      break;
    case 5:
      uint64_t v2 = "execution_commit_time";
      uint64_t v3 = 21;
      goto _$sSS18_fromUTF8RepairingySS6result_Sb11repairsMadetSRys5UInt8VGFZ;
    default:
_$sSS18_fromUTF8RepairingySS6result_Sb11repairsMadetSRys5UInt8VGFZ:
      uint64_t result = MEMORY[0x1F4183950](v2, v3);
      break;
  }
  return result;
}

void ExecutionTimeSignpost.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

BOOL static ExecutionTimeSignpost.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

Swift::Int ExecutionTimeSignpost.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ExecutionTimeSignpost()
{
  return ExecutionTimeSignpost.description.getter(*v0);
}

void *AnalyticsEventConst.handleRequest.unsafeMutableAddressor()
{
  return &static AnalyticsEventConst.handleRequest;
}

unint64_t static AnalyticsEventConst.handleRequest.getter()
{
  return 0xD00000000000002DLL;
}

void *AnalyticsEventConst.reliability.unsafeMutableAddressor()
{
  return &static AnalyticsEventConst.reliability;
}

unint64_t static AnalyticsEventConst.reliability.getter()
{
  return 0xD000000000000022;
}

void *DirectInvocationIdentifierConst.deviceUnlockComplete.unsafeMutableAddressor()
{
  return &static DirectInvocationIdentifierConst.deviceUnlockComplete;
}

unint64_t static DirectInvocationIdentifierConst.deviceUnlockComplete.getter()
{
  return 0xD000000000000030;
}

void *TaskMetricsConst.commaDelimiter.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.commaDelimiter;
}

uint64_t static TaskMetricsConst.commaDelimiter.getter()
{
  return 46;
}

const char *TaskMetricsConst.currentTask.unsafeMutableAddressor()
{
  return "CurrentTask";
}

uint64_t static TaskMetricsConst.currentTask.getter()
{
  return 0x54746E6572727543;
}

void *TaskMetricsConst.defaultBuildNumber.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.defaultBuildNumber;
}

uint64_t static TaskMetricsConst.defaultBuildNumber.getter()
{
  return 48;
}

void *TaskMetricsConst.defaultVersionNumber.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.defaultVersionNumber;
}

uint64_t static TaskMetricsConst.defaultVersionNumber.getter()
{
  return 49;
}

const char *TaskMetricsConst.directInvocationParsePrefix.unsafeMutableAddressor()
{
  return "Direct: ";
}

uint64_t static TaskMetricsConst.directInvocationParsePrefix.getter()
{
  return 0x203A746365726944;
}

void *TaskMetricsConst.EMPTY.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.EMPTY;
}

uint64_t static TaskMetricsConst.EMPTY.getter()
{
  return 0;
}

const char *TaskMetricsConst.errorCodePrefix.unsafeMutableAddressor()
{
  return "ErrorCode: ";
}

uint64_t static TaskMetricsConst.errorCodePrefix.getter()
{
  return 0x646F43726F727245;
}

void *TaskMetricsConst.genericErrorResponseId.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.genericErrorResponseId;
}

unint64_t static TaskMetricsConst.genericErrorResponseId.getter()
{
  return 0xD000000000000012;
}

const char *TaskMetricsConst.notApplicable.unsafeMutableAddressor()
{
  return "not_applicable";
}

uint64_t static TaskMetricsConst.notApplicable.getter()
{
  return 0x6C7070615F746F6ELL;
}

const char *TaskMetricsConst.nlParse.unsafeMutableAddressor()
{
  return "NL parse";
}

uint64_t static TaskMetricsConst.nlParse.getter()
{
  return 0x6573726170204C4ELL;
}

const char *TaskMetricsConst.unknownParse.unsafeMutableAddressor()
{
  return "Unknown parse";
}

uint64_t static TaskMetricsConst.unknownParse.getter()
{
  return 0x206E776F6E6B6E55;
}

const char *TaskMetricsConst.unparsedIntent.unsafeMutableAddressor()
{
  return "UnparsedIntent";
}

uint64_t static TaskMetricsConst.unparsedIntent.getter()
{
  return 0x6465737261706E55;
}

void *TaskMetricsConst.taskTypePrefix.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.taskTypePrefix;
}

uint64_t static TaskMetricsConst.taskTypePrefix.getter()
{
  return 20041;
}

const char *TaskMetricsConst.serverOverride.unsafeMutableAddressor()
{
  return "ServerOverride";
}

uint64_t static TaskMetricsConst.serverOverride.getter()
{
  return 0x764F726576726553;
}

const char *TaskMetricsConst.topicChanged.unsafeMutableAddressor()
{
  return "TopicChanged";
}

uint64_t static TaskMetricsConst.topicChanged.getter()
{
  return 0x6168436369706F54;
}

const char *TaskMetricsConst.resolutionType.unsafeMutableAddressor()
{
  return "resolutionType";
}

uint64_t static TaskMetricsConst.resolutionType.getter()
{
  return 0x6974756C6F736572;
}

uint64_t static TaskMetricsConst.none.getter()
{
  return 1701736302;
}

const char *TaskMetricsConst.appBundleId.unsafeMutableAddressor()
{
  return "appBundleId";
}

uint64_t static TaskMetricsConst.appBundleId.getter()
{
  return 0x6C646E7542707061;
}

const char *TaskMetricsConst.appName.unsafeMutableAddressor()
{
  return "appName";
}

uint64_t static TaskMetricsConst.appName.getter()
{
  return 0x656D614E707061;
}

uint64_t static TaskMetricsConst.incompatibleEagerResultCandidateId.getter()
{
  return 12589;
}

void *TaskMetricsConst.uninitializedConversation.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.uninitializedConversation;
}

uint64_t static TaskMetricsConst.uninitializedConversation.getter()
{
  return 12845;
}

void *TaskMetricsConst.unknownResultCandidateId.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.unknownResultCandidateId;
}

uint64_t static TaskMetricsConst.unknownResultCandidateId.getter()
{
  return 13101;
}

void *TaskMetricsConst.undefinedTimeInterval.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.undefinedTimeInterval;
}

double static TaskMetricsConst.undefinedTimeInterval.getter()
{
  return -1.0;
}

void *TaskMetricsConst.charMaxCount.unsafeMutableAddressor()
{
  return &static TaskMetricsConst.charMaxCount;
}

uint64_t static TaskMetricsConst.charMaxCount.getter()
{
  return 250;
}

uint64_t static GradingEvent.clientFlowView.getter()
{
  return 0x6C46746E65696C43;
}

void *Timeouts.makeIntentFromParseTimeout.unsafeMutableAddressor()
{
  return &static Timeouts.makeIntentFromParseTimeout;
}

double static Timeouts.makeIntentFromParseTimeout.getter()
{
  return 10.0;
}

unint64_t static AmbiguityHandling.linkActionIdentifierUserDataKey.getter()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ConversationInsightRequestSummaryMessageDescription(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = ConversationInsightRequestSummaryMessageDescription.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == ConversationInsightRequestSummaryMessageDescription.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ConversationInsightRequestSummaryMessageDescription()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  ConversationInsightRequestSummaryMessageDescription.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ConversationInsightRequestSummaryMessageDescription()
{
  ConversationInsightRequestSummaryMessageDescription.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ConversationInsightRequestSummaryMessageDescription()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  ConversationInsightRequestSummaryMessageDescription.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ConversationInsightRequestSummaryMessageDescription@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized ConversationInsightRequestSummaryMessageDescription.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ConversationInsightRequestSummaryMessageDescription@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = ConversationInsightRequestSummaryMessageDescription.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t specialized ConversationInsightRequestSummaryMessageDescription.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ConversationInsightRequestSummaryMessageDescription.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xF) {
    return 15;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type ExecutionTimeSignpost and conformance ExecutionTimeSignpost()
{
  unint64_t result = lazy protocol witness table cache variable for type ExecutionTimeSignpost and conformance ExecutionTimeSignpost;
  if (!lazy protocol witness table cache variable for type ExecutionTimeSignpost and conformance ExecutionTimeSignpost)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ExecutionTimeSignpost and conformance ExecutionTimeSignpost);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ConversationInsightRequestSummaryMessageDescription and conformance ConversationInsightRequestSummaryMessageDescription()
{
  unint64_t result = lazy protocol witness table cache variable for type ConversationInsightRequestSummaryMessageDescription and conformance ConversationInsightRequestSummaryMessageDescription;
  if (!lazy protocol witness table cache variable for type ConversationInsightRequestSummaryMessageDescription and conformance ConversationInsightRequestSummaryMessageDescription)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ConversationInsightRequestSummaryMessageDescription and conformance ConversationInsightRequestSummaryMessageDescription);
  }
  return result;
}

ValueMetadata *type metadata accessor for LogConst()
{
  return &type metadata for LogConst;
}

ValueMetadata *type metadata accessor for LogConst.Category()
{
  return &type metadata for LogConst.Category;
}

ValueMetadata *type metadata accessor for SiriKitExecutorSignpost()
{
  return &type metadata for SiriKitExecutorSignpost;
}

unsigned char *storeEnumTagSinglePayload for ExecutionTimeSignpost(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1BA004F04);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExecutionTimeSignpost()
{
  return &type metadata for ExecutionTimeSignpost;
}

ValueMetadata *type metadata accessor for AnalyticsEventConst()
{
  return &type metadata for AnalyticsEventConst;
}

ValueMetadata *type metadata accessor for DirectInvocationIdentifierConst()
{
  return &type metadata for DirectInvocationIdentifierConst;
}

ValueMetadata *type metadata accessor for TaskMetricsConst()
{
  return &type metadata for TaskMetricsConst;
}

ValueMetadata *type metadata accessor for GradingEvent()
{
  return &type metadata for GradingEvent;
}

ValueMetadata *type metadata accessor for Timeouts()
{
  return &type metadata for Timeouts;
}

ValueMetadata *type metadata accessor for AmbiguityHandling()
{
  return &type metadata for AmbiguityHandling;
}

uint64_t getEnumTagSinglePayload for ConversationInsightRequestSummaryMessageDescription(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF2) {
    goto LABEL_17;
  }
  if (a2 + 14 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 14) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 14;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v8 = v6 - 15;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ConversationInsightRequestSummaryMessageDescription(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *unint64_t result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1BA0050F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 14;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConversationInsightRequestSummaryMessageDescription()
{
  return &type metadata for ConversationInsightRequestSummaryMessageDescription;
}

uint64_t *SiriKitCurareDonator.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  return &static SiriKitCurareDonator.instance;
}

uint64_t static SiriKitCurareDonator.instance.getter()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t SiriKitCurareDonator.().init()()
{
  uint64_t v1 = v0;
  if (objc_msgSend(self, sel_isSupportedUser))
  {
    id v2 = objc_allocWithZone(MEMORY[0x1E4F618B8]);
    int v3 = (void *)MEMORY[0x1BA9E2DD0](0x6B73615449524953, 0xEF676E6967676F4CLL);
    id v4 = objc_msgSend(v2, sel_initWithStreamId_, v3);

    *(void *)(v1 + 16) = v4;
    if (!v4)
    {
      if (one-time initialization token for instrumentation != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      __swift_project_value_buffer(v5, (uint64_t)static Logger.instrumentation);
      unsigned int v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v7))
      {
        int v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int v8 = 0;
        _os_log_impl(&dword_1B9C64000, v6, v7, "Failed to create FSFCurareInteractionStream for task logging, donations will be disabled.", v8, 2u);
        MEMORY[0x1BA9E48C0](v8, -1, -1);
      }
    }
    id v9 = objc_allocWithZone(MEMORY[0x1E4F618B8]);
    uint64_t v10 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000015, 0x80000001BA06E8C0);
    id v11 = objc_msgSend(v9, sel_initWithStreamId_, v10);

    *(void *)(v1 + 24) = v11;
    if (!v11)
    {
      if (one-time initialization token for instrumentation != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)static Logger.instrumentation);
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl(&dword_1B9C64000, v13, v14, "Failed to create FSFCurareInteractionStream for task configuration, donations will be disabled.", v15, 2u);
        MEMORY[0x1BA9E48C0](v15, -1, -1);
      }
    }
  }
  else
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.instrumentation);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_1B9C64000, v17, v18, "FSFUtils.isSupportedUser returned false, Curare donations will be disabled.", v19, 2u);
      MEMORY[0x1BA9E48C0](v19, -1, -1);
    }

    *(void *)(v1 + 16) = 0;
    *(void *)(v1 + 24) = 0;
  }
  return v1;
}

uint64_t closure #1 in SiriKitCurareDonator.donateSiriExecutionTaskStep(activityType:eventContext:eventTime:requestContent:taskContent:taskId:taskName:app:attribute:parameterName:responseId:statusDescription:statusReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 992) = v20;
  *(_OWORD *)(v8 + 960) = v18;
  *(_OWORD *)(v8 + 976) = v19;
  *(_OWORD *)(v8 + 928) = v16;
  *(_OWORD *)(v8 + 944) = v17;
  *(_OWORD *)(v8 + 896) = v14;
  *(_OWORD *)(v8 + 912) = v15;
  *(_OWORD *)(v8 + 864) = v12;
  *(_OWORD *)(v8 + 880) = v13;
  *(void *)(v8 + 856) = a8;
  *(void *)(v8 + 848) = a7;
  *(void *)(v8 + 840) = a6;
  *(void *)(v8 + 832) = a5;
  *(void *)(v8 + 824) = a4;
  uint64_t v9 = type metadata accessor for ActivityType();
  *(void *)(v8 + 1000) = v9;
  *(void *)(v8 + 1008) = *(void *)(v9 - 8);
  *(void *)(v8 + 1016) = swift_task_alloc();
  *(void *)(v8 + 1024) = swift_task_alloc();
  *(void *)(v8 + 1032) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  *(void *)(v8 + 1040) = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in SiriKitCurareDonator.donateSiriExecutionTaskStep(activityType:eventContext:eventTime:requestContent:taskContent:taskId:taskName:app:attribute:parameterName:responseId:statusDescription:statusReason:), 0, 0);
}

uint64_t closure #1 in SiriKitCurareDonator.donateSiriExecutionTaskStep(activityType:eventContext:eventTime:requestContent:taskContent:taskId:taskName:app:attribute:parameterName:responseId:statusDescription:statusReason:)()
{
  unint64_t v133 = v0;
  v132[1] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void *)v0[103];
  unint64_t v2 = v1[13];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = v1[12] & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v129 = v1[13];
  uint64_t v128 = v1[12];
  uint64_t v130 = v128;
  if (!v3)
  {
    unint64_t v2 = v1[11];
    uint64_t v130 = v1[10];
  }
  uint64_t v4 = one-time initialization token for instrumentation;
  swift_bridgeObjectRetain();
  if (v4 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.instrumentation);
  swift_bridgeObjectRetain_n();
  unsigned int v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  os_log_t log = (os_log_t)v2;
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    v132[0] = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain();
    v0[102] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, v2, v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v6, v7, "Create SiriKit execution task step donation to Curare for interactionId: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v9, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v10 = v0[106];
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C10]), sel_init);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BA05C140;
  strcpy((char *)(inited + 32), "activityType");
  *(unsigned char *)(inited + 45) = 0;
  *(_WORD *)(inited + 46) = -5120;
  uint64_t v13 = ActivityType.rawValue.getter();
  uint64_t v14 = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 48) = v13;
  *(void *)(inited + 56) = v15;
  *(void *)(inited + 72) = v14;
  *(void *)(inited + 80) = 0x6D6954746E657665;
  *(void *)(inited + 88) = 0xE900000000000065;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v127 = v11;
  id v17 = objc_msgSend(v11, sel_stringFromDate_, isa);

  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  *(void *)(inited + 96) = v18;
  *(void *)(inited + 104) = v20;
  *(void *)(inited + 120) = v14;
  *(void *)(inited + 128) = 7368801;
  *(void *)(inited + 136) = 0xE300000000000000;
  if (v10)
  {
    uint64_t v21 = App.appIdentifier.getter();
    uint64_t v23 = (uint64_t *)(inited + 144);
    *(void *)(inited + 168) = v14;
    if (v22)
    {
      uint64_t *v23 = v21;
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v23 = (uint64_t *)(inited + 144);
    *(void *)(inited + 168) = v14;
  }
  uint64_t *v23 = 0x6C7070615F746F6ELL;
  unint64_t v22 = 0xEE00656C62616369;
LABEL_15:
  os_log_t v117 = (os_log_t)v0[117];
  uint64_t v119 = v0[130];
  unint64_t v24 = v0[116];
  uint64_t v116 = v0[115];
  unint64_t v25 = v0[114];
  uint64_t v26 = v0[113];
  unint64_t v27 = v0[112];
  uint64_t v28 = v0[111];
  uint64_t v29 = v0[110];
  uint64_t v30 = v0[109];
  unint64_t v31 = v0[108];
  uint64_t v32 = v0[107];
  *(void *)(inited + 152) = v22;
  *(void *)(inited + 176) = 0x7475626972747461;
  *(void *)(inited + 184) = 0xE900000000000065;
  if (v31)
  {
    unint64_t v33 = v31;
  }
  else
  {
    uint64_t v32 = 7104878;
    unint64_t v33 = 0xE300000000000000;
  }
  *(void *)(inited + 192) = v32;
  *(void *)(inited + 200) = v33;
  *(void *)(inited + 216) = v14;
  strcpy((char *)(inited + 224), "intentTypeName");
  *(unsigned char *)(inited + 239) = -18;
  *(void *)(inited + 240) = v30;
  *(void *)(inited + 248) = v29;
  *(void *)(inited + 264) = v14;
  *(void *)(inited + 272) = 0x6574656D61726170;
  if (v27)
  {
    unint64_t v34 = v27;
  }
  else
  {
    uint64_t v28 = 7104878;
    unint64_t v34 = 0xE300000000000000;
  }
  *(void *)(inited + 280) = 0xED0000656D614E72;
  *(void *)(inited + 288) = v28;
  *(void *)(inited + 296) = v34;
  *(void *)(inited + 312) = v14;
  *(void *)(inited + 320) = 0x65736E6F70736572;
  if (v25)
  {
    unint64_t v35 = v25;
  }
  else
  {
    uint64_t v26 = 7104878;
    unint64_t v35 = 0xE300000000000000;
  }
  *(void *)(inited + 328) = 0xEA00000000006449;
  *(void *)(inited + 336) = v26;
  *(void *)(inited + 344) = v35;
  *(void *)(inited + 360) = v14;
  *(void *)(inited + 368) = 0xD000000000000011;
  *(void *)(inited + 376) = 0x80000001BA0607B0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v36 = SiriKitEventContext.resultCandidateId.getter();
  if (v37) {
    uint64_t v38 = v36;
  }
  else {
    uint64_t v38 = 0;
  }
  unint64_t v39 = 0xE000000000000000;
  if (v37) {
    unint64_t v39 = v37;
  }
  *(void *)(inited + 384) = v38;
  *(void *)(inited + 392) = v39;
  *(void *)(inited + 408) = v14;
  *(void *)(inited + 416) = 0xD000000000000011;
  uint64_t v40 = v116;
  if (!v24) {
    uint64_t v40 = 7104878;
  }
  *(void *)(inited + 424) = 0x80000001BA06E860;
  *(void *)(inited + 432) = v40;
  if (v24) {
    unint64_t v41 = v24;
  }
  else {
    unint64_t v41 = 0xE300000000000000;
  }
  *(void *)(inited + 440) = v41;
  *(void *)(inited + 456) = v14;
  strcpy((char *)(inited + 464), "statusReason");
  *(unsigned char *)(inited + 477) = 0;
  *(_WORD *)(inited + 478) = -5120;
  outlined init with copy of SiriKitReliabilityCodes?((uint64_t)v117, v119);
  uint64_t v42 = type metadata accessor for SiriKitReliabilityCodes();
  uint64_t v43 = *(void *)(v42 - 8);
  int v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v119, 1, v42);
  swift_bridgeObjectRetain();
  uint64_t v45 = v0[130];
  if (v44 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v0[130], &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
    uint64_t v46 = (uint64_t *)(inited + 480);
    *(void *)(inited + 504) = v14;
    os_log_t v47 = log;
  }
  else
  {
    uint64_t v48 = SiriKitReliabilityCodes.rawValue.getter();
    unint64_t v50 = v49;
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v45, v42);
    uint64_t v46 = (uint64_t *)(inited + 480);
    *(void *)(inited + 504) = v14;
    os_log_t v47 = log;
    if (v50)
    {
      uint64_t *v46 = v48;
      goto LABEL_39;
    }
  }
  uint64_t *v46 = 7104878;
  unint64_t v50 = 0xE300000000000000;
LABEL_39:
  uint64_t v51 = v0[121];
  uint64_t v52 = v0[120];
  uint64_t v53 = v0[119];
  uint64_t v54 = v0[118];
  *(void *)(inited + 488) = v50;
  *(void *)(inited + 512) = 0xD000000000000010;
  *(void *)(inited + 520) = 0x80000001BA06E880;
  *(void *)(inited + 552) = v14;
  *(void *)(inited + 528) = v54;
  *(void *)(inited + 536) = v53;
  *(void *)(inited + 560) = 0xD000000000000013;
  *(void *)(inited + 568) = 0x80000001BA06E8A0;
  *(void *)(inited + 600) = v14;
  *(void *)(inited + 576) = v52;
  *(void *)(inited + 584) = v51;
  strcpy((char *)(inited + 608), "interactionId");
  *(_WORD *)(inited + 622) = -4864;
  *(void *)(inited + 648) = v14;
  *(void *)(inited + 624) = v130;
  *(void *)(inited + 632) = v47;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v55 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v55);
  swift_bridgeObjectRelease();
  id v56 = objc_allocWithZone(MEMORY[0x1E4F618A8]);
  swift_bridgeObjectRetain();
  Class v57 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  unint64_t v58 = (void *)MEMORY[0x1BA9E2DD0](v128, v129);
  swift_bridgeObjectRelease();
  id v59 = objc_msgSend(v56, sel_initWithContent_interactionId_dataVersion_, v57, v58, 0);

  if (v59)
  {
    char v60 = (void *)v0[124];
    v0[90] = 0;
    uint64_t v131 = v59;
    unsigned __int8 v61 = objc_msgSend(v60, sel_insert_error_, v59, v0 + 90);
    uint64_t v62 = (void *)v0[90];
    uint64_t v63 = v0[126];
    uint64_t v64 = v0[125];
    uint64_t v65 = v0[104];
    if (v61)
    {
      (*(void (**)(void, void, void))(v63 + 16))(v0[128], v0[104], v0[125]);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      id v66 = v62;
      uint64_t v67 = Logger.logObject.getter();
      os_log_type_t v68 = static os_log_type_t.debug.getter();
      BOOL v69 = os_log_type_enabled(v67, v68);
      uint64_t v70 = v0[128];
      uint64_t v71 = v0[126];
      uint64_t v72 = v0[125];
      unint64_t v73 = v0[123];
      if (v69)
      {
        uint64_t v74 = v0[122];
        os_log_type_t type = v68;
        unint64_t v75 = v0[110];
        uint64_t v113 = v0[109];
        uint64_t v76 = swift_slowAlloc();
        os_log_t v118 = (os_log_t)swift_slowAlloc();
        v132[0] = (uint64_t)v118;
        *(_DWORD *)uint64_t v76 = 136315906;
        swift_bridgeObjectRetain();
        v0[98] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v73, v132);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v76 + 12) = 2080;
        swift_bridgeObjectRetain();
        v0[99] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, v75, v132);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v76 + 22) = 2080;
        uint64_t v77 = ActivityType.rawValue.getter();
        v0[100] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, v132);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v70, v72);
        *(_WORD *)(v76 + 32) = 2080;
        swift_bridgeObjectRetain();
        v0[101] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v128, v129, v132);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        _os_log_impl(&dword_1B9C64000, v67, type, "Donated SiriKit execution task step to Curare for taskId: %s, taskType: %s, stepType: %s for interactionId:%s", (uint8_t *)v76, 0x2Au);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v118, -1, -1);
        MEMORY[0x1BA9E48C0](v76, -1, -1);

LABEL_47:
        goto LABEL_51;
      }

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v70, v72);
      swift_release_n();
    }
    else
    {
      os_log_t logb = (os_log_t)v0[127];
      id v91 = v62;
      os_log_t v92 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      (*(void (**)(os_log_t, uint64_t, uint64_t))(v63 + 16))(logb, v65, v64);
      uint64_t v93 = v92;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      id v94 = v92;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      id v95 = v92;
      uint64_t v96 = Logger.logObject.getter();
      os_log_type_t v97 = static os_log_type_t.error.getter();
      BOOL v98 = os_log_type_enabled(v96, v97);
      uint64_t v99 = v0[127];
      uint64_t v100 = v0[126];
      uint64_t v101 = v0[125];
      unint64_t v102 = v0[123];
      if (v98)
      {
        uint64_t v103 = v0[122];
        unint64_t v104 = v0[110];
        uint64_t v112 = v0[109];
        uint64_t v115 = v0[125];
        uint64_t v105 = swift_slowAlloc();
        os_log_t logc = (os_log_t)swift_slowAlloc();
        v132[0] = (uint64_t)logc;
        *(_DWORD *)uint64_t v105 = 136316162;
        swift_bridgeObjectRetain();
        v0[91] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v103, v102, v132);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v105 + 12) = 2080;
        swift_bridgeObjectRetain();
        v0[92] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, v104, v132);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v105 + 22) = 2080;
        uint64_t v106 = ActivityType.rawValue.getter();
        v0[93] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v106, v107, v132);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v99, v115);
        *(_WORD *)(v105 + 32) = 2080;
        swift_bridgeObjectRetain();
        v0[94] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v128, v129, v132);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_release_n();
        *(_WORD *)(v105 + 42) = 2080;
        swift_getErrorValue();
        uint64_t v108 = Error.localizedDescription.getter();
        v0[97] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v108, v109, v132);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1B9C64000, v96, v97, "Failed to donate SiriKit execution task step to Curare for taskId: %s, taskType: %s, stepType: %s for interactionId:%s: %s", (uint8_t *)v105, 0x34u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](logc, -1, -1);
        MEMORY[0x1BA9E48C0](v105, -1, -1);

        goto LABEL_47;
      }

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v99, v101);
      swift_release_n();
    }
  }
  else
  {
    (*(void (**)(void, void, void))(v0[126] + 16))(v0[129], v0[104], v0[125]);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    uint64_t v79 = Logger.logObject.getter();
    os_log_type_t v80 = static os_log_type_t.error.getter();
    BOOL v81 = os_log_type_enabled(v79, v80);
    uint64_t v82 = v0[129];
    uint64_t v83 = v0[126];
    uint64_t v84 = v0[125];
    unint64_t v85 = v0[123];
    if (v81)
    {
      uint64_t v86 = v0[122];
      uint64_t v120 = v0[125];
      unint64_t v87 = v0[110];
      uint64_t v114 = v0[109];
      loga = v79;
      uint64_t v88 = swift_slowAlloc();
      uint64_t typea = swift_slowAlloc();
      v132[0] = typea;
      *(_DWORD *)uint64_t v88 = 136315906;
      swift_bridgeObjectRetain();
      v0[96] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v85, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v88 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[87] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, v87, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v88 + 22) = 2080;
      uint64_t v89 = ActivityType.rawValue.getter();
      v0[88] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v90, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v82, v120);
      *(_WORD *)(v88 + 32) = 2080;
      swift_bridgeObjectRetain();
      v0[89] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v128, v129, v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, loga, v80, "Failed to create SiriKit execution task step donation to Curare for taskId: %s, taskType: %s, stepType: %s for interactionId:%s", (uint8_t *)v88, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](typea, -1, -1);
      MEMORY[0x1BA9E48C0](v88, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v82, v84);
      swift_release_n();
    }
  }
LABEL_51:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v110 = (uint64_t (*)(void))v0[1];
  return v110();
}

uint64_t outlined init with copy of SiriKitReliabilityCodes?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BA0068A4()
{
  uint64_t v14 = type metadata accessor for ActivityType();
  uint64_t v1 = *(void *)(v14 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v2 = (v18 + 40) & ~v18;
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v13 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v5 = (v2 + v3 + v17) & ~v17;
  unint64_t v12 = (((((((((((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
           + 23) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?)
                 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = *(void *)(v6 + 64);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v2, v14);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v5, v13);
  uint64_t v7 = (v16 + v12 + 16) & ~v16;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for SiriKitReliabilityCodes();
  uint64_t v9 = *(void *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v0 + v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v0 + v7, v8);
  }
  unint64_t v10 = (((((((v15 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, v10 + 8, v18 | v17 | v16 | 7);
}

uint64_t partial apply for closure #1 in SiriKitCurareDonator.donateSiriExecutionTaskStep(activityType:eventContext:eventTime:requestContent:taskContent:taskId:taskName:app:attribute:parameterName:responseId:statusDescription:statusReason:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for ActivityType() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  uint64_t v14 = v1[2];
  uint64_t v12 = v1[4];
  uint64_t v13 = v1[3];
  uint64_t v11 = *(void *)((char *)v1 + v7);
  uint64_t v10 = *(void *)((char *)v1 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v15 + 16) = v8;
  *uint64_t v8 = v15;
  v8[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in SiriKitCurareDonator.donateSiriExecutionTaskStep(activityType:eventContext:eventTime:requestContent:taskContent:taskId:taskName:app:attribute:parameterName:responseId:statusDescription:statusReason:)(a1, v14, v13, v12, (uint64_t)v1 + v3, (uint64_t)v1 + v6, v11, v10);
}

uint64_t SiriKitCurareDonator.donateSiriExecutionTaskConfiguration(eventContext:eventTime:taskConfiguration:taskId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = a4;
  uint64_t v36 = a5;
  uint64_t v32 = a3;
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = type metadata accessor for TaskFlowConfiguration();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  uint64_t result = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void **)(v5 + 24);
  if (v16)
  {
    id v31 = v16;
    static TaskPriority.background.getter();
    uint64_t v17 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v15, 0, 1, v17);
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    uint64_t v29 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    v18(v29, v32, v9);
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v30 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    v19(v30, v34, v6);
    unint64_t v20 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    unint64_t v21 = (v11 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v22 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v34 = v6;
    uint64_t v23 = v36;
    uint64_t v24 = (v22 + v21 + 8) & ~v22;
    unint64_t v25 = (char *)swift_allocObject();
    *((void *)v25 + 2) = 0;
    *((void *)v25 + 3) = 0;
    *((void *)v25 + 4) = v35;
    *((void *)v25 + 5) = v23;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v25[v20], v29, v9);
    uint64_t v26 = v34;
    *(void *)&v25[v21] = v33;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v25[v24], v30, v26);
    unint64_t v27 = v31;
    *(void *)&v25[(v8 + v24 + 7) & 0xFFFFFFFFFFFFFFF8] = v31;
    id v28 = v27;
    swift_bridgeObjectRetain();
    swift_retain();
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v15, (uint64_t)&async function pointer to partial apply for closure #1 in SiriKitCurareDonator.donateSiriExecutionTaskConfiguration(eventContext:eventTime:taskConfiguration:taskId:), (uint64_t)v25);

    swift_release();
    return outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v15, &demangling cache variable for type metadata for TaskPriority?);
  }
  return result;
}

uint64_t closure #1 in SiriKitCurareDonator.donateSiriExecutionTaskConfiguration(eventContext:eventTime:taskConfiguration:taskId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[90] = v13;
  v8[89] = a8;
  v8[88] = a7;
  v8[87] = a6;
  v8[86] = a5;
  v8[85] = a4;
  uint64_t v9 = type metadata accessor for TaskFlowType();
  v8[91] = v9;
  v8[92] = *(void *)(v9 - 8);
  v8[93] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for TaskFlowConfiguration();
  v8[94] = v10;
  v8[95] = *(void *)(v10 - 8);
  v8[96] = swift_task_alloc();
  v8[97] = swift_task_alloc();
  v8[98] = swift_task_alloc();
  v8[99] = swift_task_alloc();
  v8[100] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in SiriKitCurareDonator.donateSiriExecutionTaskConfiguration(eventContext:eventTime:taskConfiguration:taskId:), 0, 0);
}

uint64_t closure #1 in SiriKitCurareDonator.donateSiriExecutionTaskConfiguration(eventContext:eventTime:taskConfiguration:taskId:)()
{
  uint64_t v141 = v0;
  v140[1] = *MEMORY[0x1E4F143B8];
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 800);
  uint64_t v2 = *(void *)(v0 + 760);
  uint64_t v3 = *(void *)(v0 + 752);
  uint64_t v4 = *(void *)(v0 + 696);
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.instrumentation);
  uint64_t v126 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v126(v1, v4, v3);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 800);
  uint64_t v10 = *(void *)(v0 + 760);
  uint64_t v11 = *(void *)(v0 + 752);
  uint64_t v12 = *(void *)(v0 + 704);
  unint64_t v13 = *(void *)(v0 + 688);
  if (v8)
  {
    uint64_t v137 = *(void *)(v0 + 752);
    os_log_type_t typea = v7;
    uint64_t v14 = *(void *)(v0 + 680);
    uint64_t v15 = swift_slowAlloc();
    uint64_t v121 = swift_slowAlloc();
    v140[0] = v121;
    *(_DWORD *)uint64_t v15 = 136315650;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 656) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v15 + 12) = 2080;
    uint64_t v16 = TaskFlowConfiguration.debugDescription.getter();
    *(void *)(v0 + 664) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v18 = v137;
    uint64_t v138 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v138(v9, v18);
    *(_WORD *)(v15 + 22) = 2080;
    uint64_t v19 = *(void *)(v12 + 96);
    unint64_t v20 = *(void *)(v12 + 104);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 672) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1B9C64000, v6, typea, "Create SiriKit task configuration donation to Curare for taskId: %s, taskConfiguration: %s for interactionId:%s", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v121, -1, -1);
    MEMORY[0x1BA9E48C0](v15, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    uint64_t v138 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v138(v9, v11);
    swift_release_n();
  }

  uint64_t v21 = *(void *)(v0 + 744);
  uint64_t v22 = *(void *)(v0 + 736);
  *(void *)typeb = *(void *)(v0 + 728);
  id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F28C10]), sel_init);
  uint64_t v24 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000010, 0x80000001BA06E7E0);
  objc_msgSend(v23, sel_setDateFormat_, v24);

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BA050760;
  *(void *)(inited + 32) = 0x6D6954746E657665;
  *(void *)(inited + 40) = 0xE900000000000065;
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  unint64_t v139 = v23;
  id v27 = objc_msgSend(v23, sel_stringFromDate_, isa);

  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v30 = v29;

  uint64_t v31 = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 48) = v28;
  *(void *)(inited + 56) = v30;
  *(void *)(inited + 72) = v31;
  *(void *)(inited + 80) = 0x656D614E6B736174;
  *(void *)(inited + 88) = 0xE800000000000000;
  *(void *)(inited + 96) = TaskFlowConfiguration.taskName.getter();
  *(void *)(inited + 104) = v32;
  *(void *)(inited + 120) = v31;
  *(void *)(inited + 128) = 0xD000000000000014;
  uint64_t v33 = MEMORY[0x1E4FBB550];
  *(void *)(inited + 168) = MEMORY[0x1E4FBB550];
  *(void *)(inited + 136) = 0x80000001BA06E800;
  *(void *)(inited + 144) = 0;
  unint64_t v34 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  TaskFlowConfiguration.taskType.getter();
  int v35 = (*(uint64_t (**)(uint64_t, os_log_type_t *))(v22 + 88))(v21, *(os_log_type_t **)typeb);
  if (v35 == *MEMORY[0x1E4FA1760])
  {
    uint64_t v36 = (_OWORD *)(v0 + 192);
    unint64_t v37 = *(uint64_t **)(v0 + 744);
    (*(void (**)(uint64_t *, void))(*(void *)(v0 + 736) + 96))(v37, *(void *)(v0 + 728));
    uint64_t v38 = *v37;
    *(void *)(v0 + 376) = v33;
    *(void *)(v0 + 352) = v38;
    outlined init with take of Any((_OWORD *)(v0 + 352), (_OWORD *)(v0 + 256));
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v140[0] = v34;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((_OWORD *)(v0 + 256), 0xD000000000000014, 0x80000001BA06E800, isUniquelyReferenced_nonNull_native);
    uint64_t v40 = v140[0];
    swift_bridgeObjectRelease();
    *(void *)(v0 + 248) = v31;
    *(void *)(v0 + 224) = 0xD000000000000010;
    *(void *)(v0 + 232) = 0x80000001BA06E840;
    outlined init with take of Any((_OWORD *)(v0 + 224), (_OWORD *)(v0 + 192));
    char v41 = swift_isUniquelyReferenced_nonNull_native();
    v140[0] = v40;
  }
  else
  {
    if (v35 == *MEMORY[0x1E4FA1770])
    {
      uint64_t v36 = (_OWORD *)(v0 + 384);
      uint64_t v42 = (_OWORD *)(v0 + 416);
      *(void *)(v0 + 440) = v31;
      *(void *)(v0 + 416) = 0x6B7361546F666E69;
      *(void *)(v0 + 424) = 0xE800000000000000;
    }
    else if (v35 == *MEMORY[0x1E4FA1758])
    {
      uint64_t v36 = (_OWORD *)(v0 + 448);
      uint64_t v42 = (_OWORD *)(v0 + 480);
      *(void *)(v0 + 504) = v31;
      strcpy((char *)(v0 + 480), "modifiableTask");
      *(unsigned char *)(v0 + 495) = -18;
    }
    else
    {
      if (v35 != *MEMORY[0x1E4FA1768])
      {
        uint64_t v102 = *(void *)(v0 + 792);
        uint64_t v103 = *(void *)(v0 + 752);
        uint64_t v104 = *(void *)(v0 + 696);
        swift_bridgeObjectRelease();
        v126(v102, v104, v103);
        swift_bridgeObjectRetain_n();
        swift_retain_n();
        uint64_t v105 = Logger.logObject.getter();
        os_log_type_t v106 = static os_log_type_t.error.getter();
        BOOL v107 = os_log_type_enabled(v105, v106);
        uint64_t v108 = *(void *)(v0 + 792);
        uint64_t v109 = *(void *)(v0 + 752);
        uint64_t v110 = *(void *)(v0 + 704);
        unint64_t v111 = *(void *)(v0 + 688);
        if (v107)
        {
          os_log_type_t logc = v106;
          uint64_t v112 = *(void *)(v0 + 680);
          uint64_t v113 = swift_slowAlloc();
          uint64_t v132 = swift_slowAlloc();
          v140[0] = v132;
          *(_DWORD *)uint64_t v113 = 136315650;
          unint64_t v129 = v105;
          swift_bridgeObjectRetain();
          *(void *)(v0 + 648) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, v111, v140);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v113 + 12) = 2080;
          uint64_t v114 = TaskFlowConfiguration.debugDescription.getter();
          *(void *)(v0 + 640) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, v115, v140);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v138(v108, v109);
          *(_WORD *)(v113 + 22) = 2080;
          uint64_t v116 = *(void *)(v110 + 96);
          unint64_t v117 = *(void *)(v110 + 104);
          swift_bridgeObjectRetain();
          *(void *)(v0 + 632) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v116, v117, v140);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_release_n();
          _os_log_impl(&dword_1B9C64000, v129, logc, "Failed to create SiriKit task configuration donation due to invalid taskType for taskId: %s, taskConfiguration: %s for interactionId:%s", (uint8_t *)v113, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v132, -1, -1);
          MEMORY[0x1BA9E48C0](v113, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n();
          v138(v108, v109);
          swift_release_n();
        }
        (*(void (**)(void, void))(*(void *)(v0 + 736) + 8))(*(void *)(v0 + 744), *(void *)(v0 + 728));
        goto LABEL_32;
      }
      uint64_t v42 = (_OWORD *)(v0 + 288);
      uint64_t v36 = (_OWORD *)(v0 + 320);
      *(void *)(v0 + 312) = v31;
      *(void *)(v0 + 288) = 0xD000000000000011;
      *(void *)(v0 + 296) = 0x80000001BA06E820;
    }
    outlined init with take of Any(v42, v36);
    char v41 = swift_isUniquelyReferenced_nonNull_native();
    v140[0] = v34;
  }
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v36, 0x657079546B736174, 0xE800000000000000, v41);
  uint64_t v43 = v140[0];
  swift_bridgeObjectRelease();
  uint64_t v44 = *(void *)(v0 + 688);
  uint64_t v45 = *(void *)(v0 + 680);
  specialized _dictionaryUpCast<A, B, C, D>(_:)(v43);
  swift_bridgeObjectRelease();
  id v46 = objc_allocWithZone(MEMORY[0x1E4F618A8]);
  swift_bridgeObjectRetain();
  Class v47 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v48 = (void *)MEMORY[0x1BA9E2DD0](v45, v44);
  swift_bridgeObjectRelease();
  id v49 = objc_msgSend(v46, sel_initWithContent_interactionId_dataVersion_, v47, v48, 0);

  if (!v49)
  {
    v126(*(void *)(v0 + 784), *(void *)(v0 + 696), *(void *)(v0 + 752));
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    BOOL v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.error.getter();
    BOOL v71 = os_log_type_enabled(v69, v70);
    uint64_t v72 = *(void *)(v0 + 784);
    uint64_t v73 = *(void *)(v0 + 752);
    uint64_t v74 = *(void *)(v0 + 704);
    unint64_t v75 = *(void *)(v0 + 688);
    if (v71)
    {
      *(void *)typec = *(void *)(v0 + 752);
      uint64_t v76 = *(void *)(v0 + 680);
      uint64_t v77 = swift_slowAlloc();
      os_log_t loga = (os_log_t)swift_slowAlloc();
      v140[0] = (uint64_t)loga;
      *(_DWORD *)uint64_t v77 = 136315650;
      os_log_type_t v128 = v70;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 624) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v75, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v77 + 12) = 2080;
      uint64_t v78 = TaskFlowConfiguration.debugDescription.getter();
      *(void *)(v0 + 616) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v138(v72, *(void *)typec);
      *(_WORD *)(v77 + 22) = 2080;
      uint64_t v80 = *(void *)(v74 + 96);
      unint64_t v81 = *(void *)(v74 + 104);
      swift_bridgeObjectRetain();
      *(void *)(v0 + 608) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v69, v128, "Failed to create SiriKit task configuration donation to Curare for taskId: %s, taskConfiguration: %s for interactionId:%s", (uint8_t *)v77, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](loga, -1, -1);
      MEMORY[0x1BA9E48C0](v77, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      v138(v72, v73);
      swift_release_n();
    }

    goto LABEL_32;
  }
  unint64_t v50 = *(void **)(v0 + 720);
  *(void *)(v0 + 600) = 0;
  unsigned __int8 v51 = objc_msgSend(v50, sel_insert_error_, v49, v0 + 600);
  uint64_t v52 = *(void **)(v0 + 600);
  uint64_t v53 = *(void *)(v0 + 752);
  uint64_t v54 = *(void *)(v0 + 696);
  if (v51)
  {
    v126(*(void *)(v0 + 776), *(void *)(v0 + 696), *(void *)(v0 + 752));
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    id v55 = v52;
    id v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.debug.getter();
    BOOL v58 = os_log_type_enabled(v56, v57);
    uint64_t v59 = *(void *)(v0 + 776);
    uint64_t v60 = *(void *)(v0 + 752);
    uint64_t v61 = *(void *)(v0 + 704);
    unint64_t v62 = *(void *)(v0 + 688);
    if (v58)
    {
      os_log_type_t type = v49;
      uint64_t v63 = *(void *)(v0 + 680);
      *(void *)uint64_t v127 = *(void *)(v0 + 752);
      uint64_t v64 = swift_slowAlloc();
      os_log_t log = (os_log_t)swift_slowAlloc();
      v140[0] = (uint64_t)log;
      *(_DWORD *)uint64_t v64 = 136315650;
      os_log_type_t v130 = v57;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 568) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v62, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v64 + 12) = 2080;
      uint64_t v65 = TaskFlowConfiguration.debugDescription.getter();
      *(void *)(v0 + 576) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v138(v59, *(void *)v127);
      *(_WORD *)(v64 + 22) = 2080;
      uint64_t v67 = *(void *)(v61 + 96);
      unint64_t v68 = *(void *)(v61 + 104);
      swift_bridgeObjectRetain();
      *(void *)(v0 + 584) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_1B9C64000, v56, v130, "Donated SiriKit execution task configuration to Curare for taskId: %s, taskConfiguration: %s for interactionId:%s", (uint8_t *)v64, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](log, -1, -1);
      MEMORY[0x1BA9E48C0](v64, -1, -1);

LABEL_23:
      goto LABEL_32;
    }

    swift_bridgeObjectRelease_n();
    v138(v59, v60);
    swift_release_n();
  }
  else
  {
    os_log_type_t type = v49;
    uint64_t v82 = *(void *)(v0 + 768);
    id v83 = v52;
    uint64_t v84 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    v126(v82, v54, v53);
    swift_bridgeObjectRetain();
    swift_retain();
    id v85 = v84;
    swift_bridgeObjectRetain();
    swift_retain();
    id v86 = v84;
    unint64_t v87 = Logger.logObject.getter();
    os_log_type_t v88 = static os_log_type_t.error.getter();
    BOOL v89 = os_log_type_enabled(v87, v88);
    uint64_t v90 = *(void *)(v0 + 768);
    uint64_t v91 = *(void *)(v0 + 752);
    uint64_t v92 = *(void *)(v0 + 704);
    unint64_t v93 = *(void *)(v0 + 688);
    if (v89)
    {
      os_log_t logb = v87;
      uint64_t v94 = *(void *)(v0 + 680);
      uint64_t v120 = *(void *)(v0 + 752);
      uint64_t v95 = swift_slowAlloc();
      uint64_t v131 = swift_slowAlloc();
      v140[0] = v131;
      *(_DWORD *)uint64_t v95 = 136315906;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 592) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v93, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v95 + 12) = 2080;
      uint64_t v96 = TaskFlowConfiguration.debugDescription.getter();
      *(void *)(v0 + 552) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v97, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v138(v90, v120);
      *(_WORD *)(v95 + 22) = 2080;
      uint64_t v98 = *(void *)(v92 + 96);
      unint64_t v99 = *(void *)(v92 + 104);
      swift_bridgeObjectRetain();
      *(void *)(v0 + 536) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v99, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v95 + 32) = 2080;
      swift_getErrorValue();
      uint64_t v100 = Error.localizedDescription.getter();
      *(void *)(v0 + 560) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v100, v101, v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, logb, v88, "Failed to donate SiriKit task configuration to Curare for taskId: %s, taskConfiguration: %s for interactionId:%s: %s", (uint8_t *)v95, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v131, -1, -1);
      MEMORY[0x1BA9E48C0](v95, -1, -1);

      goto LABEL_23;
    }

    swift_bridgeObjectRelease_n();
    v138(v90, v91);
    swift_release_n();
  }
LABEL_32:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_t v118 = *(uint64_t (**)(void))(v0 + 8);
  return v118();
}

uint64_t sub_1BA008620()
{
  uint64_t v1 = type metadata accessor for TaskFlowConfiguration();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 8) & ~v8;
  uint64_t v12 = v3 | v8 | 7;
  unint64_t v10 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);

  return MEMORY[0x1F4186498](v0, v10 + 8, v12);
}

uint64_t partial apply for closure #1 in SiriKitCurareDonator.donateSiriExecutionTaskConfiguration(eventContext:eventTime:taskConfiguration:taskId:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for TaskFlowConfiguration() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(type metadata accessor for Date() - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  uint64_t v13 = v1[5];
  uint64_t v14 = *(void *)((char *)v1 + v7);
  uint64_t v15 = (uint64_t)v1 + v9;
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v16;
  *uint64_t v16 = v3;
  v16[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in SiriKitCurareDonator.donateSiriExecutionTaskConfiguration(eventContext:eventTime:taskConfiguration:taskId:)(a1, v10, v11, v12, v13, (uint64_t)v1 + v6, v14, v15);
}

uint64_t SiriKitCurareDonator.deinit()
{
  return v0;
}

uint64_t SiriKitCurareDonator.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for CurareDonator.donateSiriExecutionTaskConfiguration(eventContext:eventTime:taskConfiguration:taskId:) in conformance SiriKitCurareDonator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SiriKitCurareDonator.donateSiriExecutionTaskConfiguration(eventContext:eventTime:taskConfiguration:taskId:)(a1, a2, a3, a4, a5);
}

uint64_t dispatch thunk of CurareDonator.donateSiriExecutionTaskStep(activityType:eventContext:eventTime:requestContent:taskContent:taskId:taskName:app:attribute:parameterName:responseId:statusDescription:statusReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  return (*(uint64_t (**)(void))(a23 + 8))();
}

uint64_t dispatch thunk of CurareDonator.donateSiriExecutionTaskConfiguration(eventContext:eventTime:taskConfiguration:taskId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 16))();
}

uint64_t type metadata accessor for SiriKitCurareDonator()
{
  return self;
}

uint64_t method lookup function for SiriKitCurareDonator(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SiriKitCurareDonator);
}

uint64_t InvocationScopedSiriKitEventSender.__allocating_init(aceServiceInvoker:taskService:invocationState:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t v11 = *(void *)(a3 + 32);
  uint64_t v12 = __swift_mutable_project_boxed_opaque_existential_1(a3, v10);
  uint64_t v13 = specialized InvocationScopedSiriKitEventSender.__allocating_init(aceServiceInvoker:taskService:invocationState:)(v9, a2, v12, v3, v7, v10, v8, v11);
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v13;
}

uint64_t SiriKitEventContext.aceServiceInvoker.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 32, a1);
}

uint64_t SiriKitEventContext.taskService.getter()
{
  return swift_retain();
}

uint64_t SiriKitEventContext.executionRequestId.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriKitEventContext.interactionId.getter()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

void *SiriKitEventContext.__allocating_init(aceServiceInvoker:taskService:invocationState:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (void *)swift_allocObject();
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v9 = __swift_mutable_project_boxed_opaque_existential_1(a1, v8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v12 + 16))(v11);
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v14 = *(void *)(a3 + 32);
  uint64_t v15 = __swift_mutable_project_boxed_opaque_existential_1(a3, v13);
  MEMORY[0x1F4188790](v15);
  unint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v17);
  uint64_t v19 = specialized SiriKitEventContext.init(aceServiceInvoker:taskService:invocationState:)((uint64_t)v11, a2, (uint64_t)v17, v6, v8, v13, v7, v14);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v19;
}

void *SiriKitEventContext.init(aceServiceInvoker:taskService:invocationState:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v10 = __swift_mutable_project_boxed_opaque_existential_1(a1, v9);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v13 + 16))(v12);
  uint64_t v14 = *(void *)(a3 + 24);
  uint64_t v15 = *(void *)(a3 + 32);
  uint64_t v16 = __swift_mutable_project_boxed_opaque_existential_1(a3, v14);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v19 + 16))(v18);
  unint64_t v20 = specialized SiriKitEventContext.init(aceServiceInvoker:taskService:invocationState:)((uint64_t)v12, a2, (uint64_t)v18, v4, v9, v14, v8, v15);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v20;
}

uint64_t SiriKitEventContext.deinit()
{
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 32);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriKitEventContext()
{
  return SiriKitEventContext.description.getter();
}

uint64_t InvocationScopedSiriKitEventSender.init(aceServiceInvoker:taskService:invocationState:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v10 = __swift_mutable_project_boxed_opaque_existential_1(a1, v9);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v13 + 16))(v12);
  uint64_t v14 = *(void *)(a3 + 24);
  uint64_t v15 = *(void *)(a3 + 32);
  uint64_t v16 = __swift_mutable_project_boxed_opaque_existential_1(a3, v14);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v19 + 16))(v18);
  uint64_t v20 = specialized InvocationScopedSiriKitEventSender.init(aceServiceInvoker:taskService:invocationState:)((uint64_t)v12, a2, (uint64_t)v18, v4, v9, v14, v8, v15);
  __swift_destroy_boxed_opaque_existential_1Tm(a3);
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  return v20;
}

uint64_t InvocationScopedSiriKitEventSender.send(_:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v48 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SiriKitEventOverrides();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitEventOverrides?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v44 - v13;
  uint64_t v49 = type metadata accessor for OSSignpostID();
  uint64_t v15 = *(void *)(v49 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v49);
  id v46 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v44 - v18;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  id v20 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  Class v47 = v19;
  os_signpost(_:dso:log:name:signpostID:)();
  SiriKitEvent.overrides.getter();
  uint64_t v21 = *(uint64_t **)(v1 + 16);
  outlined init with copy of SiriKitEventOverrides?((uint64_t)v14, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v12, 1, v5) == 1)
  {
    outlined destroy of SiriKitEventOverrides?((uint64_t)v14);
    swift_retain();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v12, v5);
    swift_retain();
    uint64_t v22 = SiriKitEventContext.withOverrides(_:)((uint64_t)v8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    outlined destroy of SiriKitEventOverrides?((uint64_t)v14);
    swift_release();
    uint64_t v21 = v22;
  }
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.instrumentation);
  swift_retain_n();
  swift_retain_n();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v45 = swift_slowAlloc();
    uint64_t v51 = v45;
    *(_DWORD *)uint64_t v26 = 136315394;
    uint64_t v27 = SiriKitEvent.debugDescription.getter();
    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    swift_retain();
    unint64_t v29 = SiriKitEventContext.description.getter();
    uint64_t v30 = v15;
    uint64_t v31 = a1;
    unint64_t v33 = v32;
    swift_release();
    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v33, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    a1 = v31;
    uint64_t v15 = v30;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v24, v25, "Dispatching event to sinks: %s with context: %s", (uint8_t *)v26, 0x16u);
    uint64_t v34 = v45;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v34, -1, -1);
    MEMORY[0x1BA9E48C0](v26, -1, -1);
  }
  else
  {

    swift_release_n();
    swift_release_n();
  }
  uint64_t v36 = v46;
  int v35 = v47;
  type metadata accessor for IntentLoggingEventSink();
  swift_initStaticObject();
  specialized IntentLoggingEventSink.receive(_:_:)(a1);
  static os_signpost_type_t.event.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  unint64_t v37 = *(void (**)(char *, uint64_t))(v15 + 8);
  v37(v36, v49);
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  uint64_t v38 = static TaskLoggingEventSink.instance;
  uint64_t v39 = type metadata accessor for TaskPriority();
  uint64_t v40 = (uint64_t)v48;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v48, 1, 1, v39);
  char v41 = (void *)swift_allocObject();
  void v41[2] = 0;
  v41[3] = 0;
  v41[4] = v38;
  v41[5] = a1;
  v41[6] = v21;
  swift_retain();
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v40, (uint64_t)&async function pointer to partial apply for closure #1 in TaskLoggingEventSink.receive(_:_:), (uint64_t)v41);
  swift_release();
  static os_signpost_type_t.event.getter();
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v42 = v49;
  v37(v36, v49);
  swift_release();
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return ((uint64_t (*)(char *, uint64_t))v37)(v35, v42);
}

uint64_t InvocationScopedSiriKitEventSender.deinit()
{
  swift_release();
  return v0;
}

uint64_t protocol witness for SiriKitEventSending.send(_:) in conformance InvocationScopedSiriKitEventSender(uint64_t a1)
{
  return InvocationScopedSiriKitEventSender.send(_:)(a1);
}

uint64_t specialized InvocationScopedSiriKitEventSender.__allocating_init(aceServiceInvoker:taskService:invocationState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v13 = *(void *)(a6 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v14);
  id v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a1, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a3, a6);
  return specialized InvocationScopedSiriKitEventSender.init(aceServiceInvoker:taskService:invocationState:)((uint64_t)v20, a2, (uint64_t)v16, v21, a5, a6, v23, v24);
}

uint64_t sub_1BA009A90()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t partial apply for closure #1 in TaskLoggingEventSink.receive(_:_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return closure #1 in TaskLoggingEventSink.receive(_:_:)(a1, v4, v5, v6, v7, v8);
}

uint64_t method lookup function for SiriKitEventContext(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SiriKitEventContext);
}

uint64_t dispatch thunk of SiriKitEventContext.__allocating_init(aceServiceInvoker:taskService:invocationState:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of SiriKitEventSink.receive(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of SiriKitEventSink.receiveAsync(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 16) + **(int **)(a4 + 16));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return v11(a1, a2, a3, a4);
}

uint64_t method lookup function for InvocationScopedSiriKitEventSender(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for InvocationScopedSiriKitEventSender);
}

uint64_t dispatch thunk of InvocationScopedSiriKitEventSender.__allocating_init(aceServiceInvoker:taskService:invocationState:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t static SiriKitExecutorRunUtils.siriLocale.getter()
{
  return static SiriKitExecutorRunUtils.siriLocale.getter(MEMORY[0x1E4FA51E8]);
}

uint64_t static SiriKitExecutorRunUtils.siriVoiceGender.getter()
{
  return static SiriKitExecutorRunUtils.siriLocale.getter(MEMORY[0x1E4FA51F0]);
}

uint64_t static SiriKitExecutorRunUtils.siriLocale.getter(void (*a1)(uint64_t))
{
  type metadata accessor for DeviceEnvironmentHelper();
  MEMORY[0x1BA9DD9D0]();
  swift_release();
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  uint64_t v2 = swift_release();
  a1(v2);

  return swift_release();
}

uint64_t static SiriKitExecutorRunUtils.preferencesLanguageCode.getter()
{
  type metadata accessor for DeviceEnvironmentHelper();
  MEMORY[0x1BA9DD9D0]();
  swift_release();
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  uint64_t v0 = dispatch thunk of CurrentDevice.preferencesLanguageCode.getter();
  swift_release();
  return v0;
}

uint64_t static SiriKitExecutorRunUtils.interactionTypeFrom(command:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return static SiriKitExecutorRunUtils.interactionTypeFrom(command:)(a1, (SEL *)&selRef_interactionType, (void (*)(uint64_t, uint64_t))static SiriKitExecutorRunUtils.interactionTypeFrom(aceValue:), MEMORY[0x1E4FA5240], MEMORY[0x1E4FA5250], a2);
}

uint64_t static SiriKitExecutorRunUtils.inputOriginFrom(command:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return static SiriKitExecutorRunUtils.interactionTypeFrom(command:)(a1, (SEL *)&selRef_inputOrigin, (void (*)(uint64_t, uint64_t))static SiriKitExecutorRunUtils.inputOriginFrom(aceValue:), MEMORY[0x1E4FA5148], MEMORY[0x1E4FA51A0], a2);
}

uint64_t static SiriKitExecutorRunUtils.interactionTypeFrom(command:)@<X0>(void *a1@<X0>, SEL *a2@<X1>, void (*a3)(uint64_t, uint64_t)@<X2>, unsigned int *a4@<X3>, uint64_t (*a5)(void)@<X4>, uint64_t a6@<X8>)
{
  id v10 = [a1 *a2];
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    a3(v12, v14);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = *a4;
    uint64_t v17 = a5();
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104);
    return v18(a6, v16, v17);
  }
}

uint64_t static SiriKitExecutorRunUtils.sessionHandOffContinuityIDFrom(command:)(void *a1)
{
  id v1 = objc_msgSend(a1, sel_sessionHandOffContinuityID);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id static SiriKitExecutorRunUtils.eyesFreeFrom(command:)(void *a1)
{
  return objc_msgSend(a1, sel_eyesFree);
}

id static SiriKitExecutorRunUtils.voiceTriggerEnabledFrom(command:)(void *a1)
{
  return objc_msgSend(a1, sel_voiceTriggerEnabled);
}

id static SiriKitExecutorRunUtils.textToSpeechEnabledFrom(command:)(void *a1)
{
  return objc_msgSend(a1, sel_textToSpeechEnabled);
}

uint64_t static SiriKitExecutorRunUtils.logFailedCompletion(intentTypeName:errorCode:reason:refId:commandCompletion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, unint64_t a7, void (*a8)(void *), char *a9)
{
  uint64_t v77 = a8;
  uint64_t v78 = a6;
  uint64_t v75 = a2;
  uint64_t v72 = a1;
  uint64_t v13 = type metadata accessor for SiriKitEventPayload();
  uint64_t v73 = *(void *)(v13 - 8);
  uint64_t v74 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for SiriKitReliabilityCodes();
  uint64_t v79 = *(void *)(v16 - 8);
  uint64_t v80 = v16;
  MEMORY[0x1F4188790](v16);
  BOOL v71 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.executor);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v70 = swift_slowAlloc();
    v84[0] = v70;
    *(_DWORD *)uint64_t v21 = 134218498;
    uint64_t v82 = a3;
    uint64_t v76 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 12) = 2080;
    BOOL v22 = a5 == 0;
    unint64_t v23 = (unint64_t)a5;
    if (a5) {
      uint64_t v24 = a4;
    }
    else {
      uint64_t v24 = 0x6E776F6E6B6E55;
    }
    if (v22) {
      unint64_t v25 = 0xE700000000000000;
    }
    else {
      unint64_t v25 = v23;
    }
    uint64_t v81 = a4;
    swift_bridgeObjectRetain();
    uint64_t v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 22) = 2080;
    if (a7) {
      uint64_t v26 = v78;
    }
    else {
      uint64_t v26 = 1819047246;
    }
    if (a7) {
      unint64_t v27 = a7;
    }
    else {
      unint64_t v27 = 0xE400000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v28 = v26;
    a4 = v81;
    uint64_t v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, v84);
    a3 = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    a5 = (void *)v23;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v19, v20, "SiriKitExecutor failing with error: errorCode=%ld, reason='%s', refId='%s'", (uint8_t *)v21, 0x20u);
    uint64_t v29 = v70;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v29, -1, -1);
    MEMORY[0x1BA9E48C0](v21, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v76 = a7;
  static SiriKitEventSender.current.getter();
  uint64_t v82 = a3;
  v30._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v82 = 0x646F43726F727245;
  unint64_t v83 = 0xEB00000000203A65;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  uint64_t v31 = v82;
  unint64_t v32 = v83;
  unint64_t v33 = (unint64_t)a5;
  uint64_t v34 = a4;
  int v35 = a5;
  if (!a5)
  {
    a4 = 0x6E776F6E6B6E55;
    uint64_t v37 = v79;
    uint64_t v36 = v80;
    uint64_t v38 = v71;
    (*(void (**)(char *, void, uint64_t))(v79 + 104))(v71, *MEMORY[0x1E4FA19D0], v80);
    uint64_t v34 = SiriKitReliabilityCodes.rawValue.getter();
    int v35 = v39;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v36);
    unint64_t v33 = 0xE700000000000000;
  }
  uint64_t v81 = a4;
  uint64_t v82 = v31;
  uint64_t v70 = v33;
  BOOL v71 = a9;
  unint64_t v83 = v32;
  swift_bridgeObjectRetain();
  v40._uint64_t countAndFlagsBits = v34;
  v40._object = v35;
  String.append(_:)(v40);
  uint64_t v65 = v82;
  unint64_t v64 = v83;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v68 = v84[4];
  uint64_t v67 = __swift_project_boxed_opaque_existential_1(v84, v84[3]);
  uint64_t v66 = type metadata accessor for SiriKitEvent();
  char v41 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (activityType: ActivityType, intentTypeName: String, app: App?, attribute: String?, parameterName: String?, responseId: String?, statusDescription: String?, statusReason: SiriKitReliabilityCodes?));
  uint64_t v42 = &v15[v41[12]];
  uint64_t v43 = v41[16];
  uint64_t v44 = &v15[v41[20]];
  uint64_t v45 = &v15[v41[24]];
  id v46 = &v15[v41[28]];
  uint64_t v47 = v41[32];
  BOOL v69 = a5;
  uint64_t v48 = &v15[v47];
  uint64_t v49 = &v15[v41[36]];
  uint64_t v50 = *MEMORY[0x1E4FA1B20];
  uint64_t v51 = type metadata accessor for ActivityType();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v51 - 8) + 104))(v15, v50, v51);
  uint64_t v52 = v75;
  *(void *)uint64_t v42 = v72;
  *((void *)v42 + 1) = v52;
  *(void *)&v15[v43] = 0;
  *(void *)uint64_t v44 = 0;
  *((void *)v44 + 1) = 0;
  *(void *)uint64_t v45 = 0;
  *((void *)v45 + 1) = 0;
  *(void *)id v46 = 0xD000000000000012;
  *((void *)v46 + 1) = 0x80000001BA06E680;
  unint64_t v53 = v64;
  *(void *)uint64_t v48 = v65;
  *((void *)v48 + 1) = v53;
  uint64_t v55 = v79;
  uint64_t v54 = v80;
  (*(void (**)(char *, void, uint64_t))(v79 + 104))(v49, *MEMORY[0x1E4FA19B0], v80);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v49, 0, 1, v54);
  (*(void (**)(char *, void, uint64_t))(v73 + 104))(v15, *MEMORY[0x1E4FA1990], v74);
  swift_bridgeObjectRetain();
  SiriKitEvent.__allocating_init(_:builder:)();
  dispatch thunk of SiriKitEventSending.send(_:)();
  swift_release();
  id v56 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F965A8]), sel_init);
  objc_msgSend(v56, sel_setErrorCode_, -1);
  swift_bridgeObjectRetain();
  os_log_type_t v57 = (void *)MEMORY[0x1BA9E2DD0](v81, v70);
  swift_bridgeObjectRelease();
  objc_msgSend(v56, sel_setReason_, v57);

  id v58 = v56;
  if (v76) {
    uint64_t v59 = (void *)MEMORY[0x1BA9E2DD0](v78);
  }
  else {
    uint64_t v59 = 0;
  }
  objc_msgSend(v58, sel_setRefId_, v59);

  id v60 = objc_msgSend(v58, sel_dictionary);
  uint64_t v61 = v60;
  if (v60)
  {
    id v62 = objc_msgSend(v60, sel_copy);

    if (v62)
    {
      uint64_t v61 = (void *)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v61 = 0;
    }
  }
  v77(v61);

  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v84);
}

void closure #1 in static SiriKitExecutorRunUtils.makeParse(aceParse:peerInfo:endpointInfo:confirmationState:aceParameterMetadata:appSelectionState:)(void *a1@<X8>)
{
  void v18[4] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v2 = self;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v18[0] = 0;
  id v4 = objc_msgSend(v2, sel_propertyListWithData_options_format_error_, isa, 0, 0, v18);

  if (!v4)
  {
    id v6 = v18[0];
    uint64_t v7 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
    id v9 = v7;
    id v10 = v7;
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      v18[0] = v14;
      *(_DWORD *)uint64_t v13 = 136315138;
      id v15 = v7;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
      uint64_t v16 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, (uint64_t *)v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1B9C64000, v11, v12, "Could not decode directInvocation data: %s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v14, -1, -1);
      MEMORY[0x1BA9E48C0](v13, -1, -1);
    }
    else
    {
    }
    goto LABEL_9;
  }
  id v5 = v18[0];
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : Any]);
  if ((swift_dynamicCast() & 1) == 0) {
LABEL_9:
  }
    *a1 = 0;
}

uint64_t static SiriKitExecutorRunUtils.multiUserStateFrom(command:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (objc_msgSend(a1, sel_multiUser))
  {
    static SiriKitExecutorRunUtils.multiUserContextFrom(command:)(a1);
    uint64_t v4 = type metadata accessor for MultiUserContext();
    id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
    uint64_t v6 = v4;
    uint64_t v7 = a2;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v9 = type metadata accessor for MultiUserContext();
    id v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56);
    uint64_t v6 = v9;
    uint64_t v7 = a2;
    uint64_t v8 = 1;
  }

  return v5(v7, v8, 1, v6);
}

void static SiriKitExecutorRunUtils.multiUserContextFrom(command:)(void *a1)
{
  id v8 = objc_msgSend(a1, sel_identifiedUserMeCard);
  id v2 = objc_msgSend(a1, sel_remoteExecution);
  if (v2
    && (uint64_t v3 = v2,
        id v4 = objc_msgSend(v2, sel_executionDeviceAssistantId),
        v3,
        v4))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v5 = v8;
    if (!v8)
    {
LABEL_4:
      id v6 = 0;
      goto LABEL_7;
    }
  }
  else
  {
    id v5 = v8;
    if (!v8) {
      goto LABEL_4;
    }
  }
  id v7 = v5;
  id v6 = SAPerson.contact.getter();

LABEL_7:
  type metadata accessor for DefaultMeCardProxy();
  *(void *)(swift_allocObject() + 16) = v6;
  objc_msgSend(a1, sel_requiresConditionalMultiUserGrounding);
  _s14SiriKitRuntime16PeerInfoProviderCAC0aB4Flow0dE9ProvidingAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DefaultMeCardProxy and conformance DefaultMeCardProxy, (void (*)(uint64_t))type metadata accessor for DefaultMeCardProxy);
  swift_retain();
  MultiUserContext.init(requiresUserGrounding:meCardProxy:handoffTargetDeviceID:)();
  swift_release();
}

uint64_t static SiriKitExecutorRunUtils.crashIfThrow(file:line:closure:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t static SiriKitExecutorRunUtils.crashIfThrow(file:line:closure:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, int *a5)
{
  *(void *)(v5 + 48) = a2;
  *(void *)(v5 + 56) = a4;
  *(unsigned char *)(v5 + 80) = a3;
  *(void *)(v5 + 40) = a1;
  id v8 = (uint64_t (*)(void))((char *)a5 + *a5);
  id v6 = (void *)swift_task_alloc();
  *(void *)(v5 + 64) = v6;
  *id v6 = v5;
  v6[1] = static SiriKitExecutorRunUtils.crashIfThrow(file:line:closure:);
  return v8();
}

uint64_t static SiriKitExecutorRunUtils.crashIfThrow(file:line:closure:)()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](static SiriKitExecutorRunUtils.crashIfThrow(file:line:closure:), 0, 0);
  }
  else
  {
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;

  *(void *)(v0 + 32) = *(void *)(v0 + 72);
  id v1 = v0 + 32;
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  id v4 = *(void *)(v1 + 8);
  *(void *)(v1 - 16) = 0;
  *(void *)(v1 - 8) = 0xE000000000000000;
  uint64_t v5 = *(unsigned __int8 *)(v1 + 48);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
  _print_unlocked<A, B>(_:_:)();
  id v6 = *(void *)(v1 - 16);
  id v7 = *(void *)(v1 - 8);
  return specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(v6, v7, v4, v2, v5, v3);
}

void specialized static SiriKitExecutorRunUtils.addIntentMetadata(intent:peerInfo:endpointInfo:)(void *a1, void *a2, void *a3)
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  static os_log_type_t.debug.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1BA0526C0;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v6 = dispatch thunk of PeerInfoProviding.getIdsIdentifier()();
  unint64_t v8 = v7;
  uint64_t v9 = MEMORY[0x1E4FBB1A0];
  *(void *)(v5 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v10 = lazy protocol witness table accessor for type String and conformance String();
  *(void *)(v5 + 64) = v10;
  uint64_t v11 = 0x3E4C494E3CLL;
  if (v8)
  {
    uint64_t v11 = v6;
    unint64_t v12 = v8;
  }
  else
  {
    unint64_t v12 = 0xE500000000000000;
  }
  *(void *)(v5 + 32) = v11;
  *(void *)(v5 + 40) = v12;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v13 = dispatch thunk of PeerInfoProviding.getRapportEffectiveIdentifier()();
  *(void *)(v5 + 96) = v9;
  *(void *)(v5 + 104) = v10;
  if (v14) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = 0x3E4C494E3CLL;
  }
  if (v14) {
    unint64_t v16 = v14;
  }
  else {
    unint64_t v16 = 0xE500000000000000;
  }
  *(void *)(v5 + 72) = v15;
  *(void *)(v5 + 80) = v16;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v17 = dispatch thunk of PeerInfoProviding.getMediaSystemIdentifier()();
  *(void *)(v5 + 136) = v9;
  *(void *)(v5 + 144) = v10;
  if (v18) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = 0x3E4C494E3CLL;
  }
  if (v18) {
    unint64_t v20 = v18;
  }
  else {
    unint64_t v20 = 0xE500000000000000;
  }
  *(void *)(v5 + 112) = v19;
  *(void *)(v5 + 120) = v20;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  char v21 = dispatch thunk of PeerInfoProviding.isOwnedByCurrentUser()();
  uint64_t v22 = 1163219540;
  if ((v21 & 1) == 0) {
    uint64_t v22 = 0x45534C4146;
  }
  unint64_t v23 = 0xE400000000000000;
  if ((v21 & 1) == 0) {
    unint64_t v23 = 0xE500000000000000;
  }
  *(void *)(v5 + 176) = v9;
  *(void *)(v5 + 184) = v10;
  *(void *)(v5 + 152) = v22;
  *(void *)(v5 + 160) = v23;
  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v24 = dispatch thunk of PeerInfoProviding.getMediaRouteIdentifier()();
  *(void *)(v5 + 216) = v9;
  *(void *)(v5 + 224) = v10;
  if (v25) {
    uint64_t v26 = v24;
  }
  else {
    uint64_t v26 = 0x3E4C494E3CLL;
  }
  if (v25) {
    unint64_t v27 = v25;
  }
  else {
    unint64_t v27 = 0xE500000000000000;
  }
  *(void *)(v5 + 192) = v26;
  *(void *)(v5 + 200) = v27;
  uint64_t v28 = a3[4];
  uint64_t v86 = a3[3];
  unint64_t v87 = __swift_project_boxed_opaque_existential_1(a3, v86);
  uint64_t v88 = v28;
  uint64_t v29 = dispatch thunk of EndpointInfoProviding.getIdentifier()();
  *(void *)(v5 + 256) = v9;
  *(void *)(v5 + 264) = v10;
  if (v30) {
    uint64_t v31 = v29;
  }
  else {
    uint64_t v31 = 0x3E4C494E3CLL;
  }
  if (v30) {
    unint64_t v32 = v30;
  }
  else {
    unint64_t v32 = 0xE500000000000000;
  }
  *(void *)(v5 + 232) = v31;
  *(void *)(v5 + 240) = v32;
  __swift_project_boxed_opaque_existential_1(a3, a3[3]);
  uint64_t v33 = dispatch thunk of EndpointInfoProviding.getMediaRouteIdentifier()();
  *(void *)(v5 + 296) = v9;
  *(void *)(v5 + 304) = v10;
  if (v34) {
    uint64_t v35 = v33;
  }
  else {
    uint64_t v35 = 0x3E4C494E3CLL;
  }
  if (v34) {
    unint64_t v36 = v34;
  }
  else {
    unint64_t v36 = 0xE500000000000000;
  }
  *(void *)(v5 + 272) = v35;
  *(void *)(v5 + 280) = v36;
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();
  id v37 = objc_msgSend(a1, sel__metadata);

  if (v37)
  {
    id v38 = objc_msgSend(a1, sel__metadata);
    if (v38)
    {
      uint64_t v39 = v38;
      uint64_t v40 = dispatch thunk of PeerInfoProviding.getIdsIdentifier()();
      if (v41)
      {
        uint64_t v42 = (void *)MEMORY[0x1BA9E2DD0](v40);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v42 = 0;
      }
      objc_msgSend(v39, sel_setOriginatingDeviceIdsIdentifier_, v42, v86, v87, v28);
    }
    id v43 = objc_msgSend(a1, sel__metadata, v86, v87, v88);
    if (v43)
    {
      uint64_t v44 = v43;
      __swift_project_boxed_opaque_existential_1(a2, a2[3]);
      uint64_t v45 = dispatch thunk of PeerInfoProviding.getRapportEffectiveIdentifier()();
      if (v46)
      {
        uint64_t v47 = (void *)MEMORY[0x1BA9E2DD0](v45);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v47 = 0;
      }
      objc_msgSend(v44, sel_setOriginatingDeviceRapportEffectiveId_, v47);
    }
    id v48 = objc_msgSend(a1, sel__metadata);
    if (v48)
    {
      uint64_t v49 = v48;
      __swift_project_boxed_opaque_existential_1(a2, a2[3]);
      uint64_t v50 = dispatch thunk of PeerInfoProviding.getMediaSystemIdentifier()();
      if (v51)
      {
        uint64_t v52 = (void *)MEMORY[0x1BA9E2DD0](v50);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v52 = 0;
      }
      objc_msgSend(v49, sel_setOriginatingDeviceRapportMediaSystemId_, v52);
    }
    id v53 = objc_msgSend(a1, sel__metadata);
    if (v53)
    {
      uint64_t v54 = v53;
      __swift_project_boxed_opaque_existential_1(a2, a2[3]);
      objc_msgSend(v54, sel_setIsOwnedByCurrentUser_, dispatch thunk of PeerInfoProviding.isOwnedByCurrentUser()() & 1);
    }
    id v55 = objc_msgSend(a1, sel__metadata);
    if (v55)
    {
      id v56 = v55;
      uint64_t v57 = dispatch thunk of EndpointInfoProviding.getIdentifier()();
      if (v58)
      {
        uint64_t v59 = (void *)MEMORY[0x1BA9E2DD0](v57);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v59 = 0;
      }
      objc_msgSend(v56, sel_setEndpointId_, v59);
    }
    id v60 = objc_msgSend(a1, sel__metadata);
    if (v60)
    {
      uint64_t v61 = v60;
      __swift_project_boxed_opaque_existential_1(a3, a3[3]);
      uint64_t v62 = dispatch thunk of EndpointInfoProviding.getMediaRouteIdentifier()();
      if (v63)
      {
        unint64_t v64 = (void *)MEMORY[0x1BA9E2DD0](v62);
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v64 = 0;
      }
      objc_msgSend(v61, sel_setMediaRouteId_, v64);
    }
    __swift_project_boxed_opaque_existential_1(a2, a2[3]);
    uint64_t v65 = dispatch thunk of PeerInfoProviding.getMediaRouteIdentifier()();
    if (v66)
    {
      uint64_t v67 = v65;
      uint64_t v68 = v66;
      id v69 = objc_msgSend(a1, sel__metadata);
      if (v69
        && (uint64_t v70 = v69,
            id v71 = objc_msgSend(v69, sel_airPlayRouteIds),
            v70,
            v71))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        id v72 = objc_msgSend(a1, sel__metadata);
        if (v72)
        {
          uint64_t v73 = v72;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
          uint64_t v74 = swift_allocObject();
          *(_OWORD *)(v74 + 16) = xmmword_1BA04FD90;
          *(void *)(v74 + 32) = v67;
          *(void *)(v74 + 40) = v68;
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v73, sel_setAirPlayRouteIds_, isa);
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
    }
  }
  else
  {
    static os_log_type_t.debug.getter();
    os_log(_:dso:log:type:_:)();
  }
  uint64_t v76 = dispatch thunk of PeerInfoProviding.getIdsIdentifier()();
  if (v77)
  {
    uint64_t v78 = (void *)MEMORY[0x1BA9E2DD0](v76);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v78 = 0;
  }
  objc_msgSend(a1, sel__setOriginatingDeviceIdsIdentifier_, v78, v86, v87, v88);

  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v79 = dispatch thunk of PeerInfoProviding.getRapportEffectiveIdentifier()();
  if (v80)
  {
    uint64_t v81 = (void *)MEMORY[0x1BA9E2DD0](v79);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v81 = 0;
  }
  objc_msgSend(a1, sel__setOriginatingDeviceRapportEffectiveIdentifier_, v81);

  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  uint64_t v82 = dispatch thunk of PeerInfoProviding.getMediaSystemIdentifier()();
  if (v83)
  {
    uint64_t v84 = (void *)MEMORY[0x1BA9E2DD0](v82);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v84 = 0;
  }
  objc_msgSend(a1, sel__setOriginatingDeviceRapportMediaSystemIdentifier_, v84);

  __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  char v85 = dispatch thunk of PeerInfoProviding.isOwnedByCurrentUser()();
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  Class v90 = NSNumber.init(integerLiteral:)(v85 & 1).super.super.isa;
  objc_msgSend(a1, sel__setIsOwnedByCurrentUser_, v90);
}

uint64_t specialized static SiriKitExecutorRunUtils.makeSiriKitParameterMetadata(aceParameterMetadata:)(unint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitConfirmationState?);
  MEMORY[0x1F4188790](v2 - 8);
  id v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SiriKitConfirmationState();
  uint64_t v50 = *(void *)(v5 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v49 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v36 - v8;
  if (a1 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v10)
  {
    uint64_t v55 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    if ((v10 & 0x8000000000000000) == 0)
    {
      uint64_t v12 = 0;
      unint64_t v42 = a1 & 0xC000000000000001;
      unint64_t v37 = a1 + 32;
      uint64_t v13 = (unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
      unint64_t v14 = (void (**)(char *, char *, uint64_t))(v50 + 32);
      uint64_t v38 = MEMORY[0x1E4FBC840] + 8;
      id v48 = v9;
      unint64_t v41 = a1;
      uint64_t v40 = v10;
      while (1)
      {
        if (v12 == v10)
        {
          __break(1u);
          goto LABEL_29;
        }
        if (v42) {
          id v17 = (id)MEMORY[0x1BA9E3990](v12, a1);
        }
        else {
          id v17 = *(id *)(v37 + 8 * v12);
        }
        unint64_t v18 = v17;
        id v19 = objc_msgSend(v17, sel_parameterName);
        if (!v19) {
          goto LABEL_31;
        }
        unint64_t v20 = v19;
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v45 = v22;
        uint64_t v46 = v21;

        unsigned int v44 = objc_msgSend(v18, sel_shouldResolve);
        id v23 = objc_msgSend(v18, sel_confirmationStates);
        uint64_t v47 = v12;
        if (v23)
        {
          uint64_t v24 = v23;
          id v43 = v18;
          uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          int64_t v26 = *(void *)(v25 + 16);
          if (v26)
          {
            uint64_t v54 = MEMORY[0x1E4FBC860];
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v26, 0);
            uint64_t v39 = v25;
            uint64_t v27 = v25 + 32;
            while (1)
            {
              outlined init with copy of Any(v27, (uint64_t)v53);
              outlined init with copy of Any((uint64_t)v53, (uint64_t)&v51);
              if (!swift_dynamicCast()) {
                goto LABEL_32;
              }
              SiriKitConfirmationState.init(rawValue:)();
              if ((*v13)(v4, 1, v5) == 1) {
                goto LABEL_33;
              }
              uint64_t v28 = *v14;
              uint64_t v29 = v49;
              (*v14)(v49, v4, v5);
              v28(v9, v29, v5);
              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v53);
              uint64_t v30 = v54;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v30 + 16) + 1, 1);
                uint64_t v30 = v54;
              }
              unint64_t v32 = *(void *)(v30 + 16);
              unint64_t v31 = *(void *)(v30 + 24);
              if (v32 >= v31 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
                uint64_t v30 = v54;
              }
              *(void *)(v30 + 16) = v32 + 1;
              unint64_t v33 = v30
                  + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))
                  + *(void *)(v50 + 72) * v32;
              uint64_t v9 = v48;
              v28((char *)v33, v48, v5);
              uint64_t v54 = v30;
              v27 += 32;
              if (!--v26)
              {
                swift_bridgeObjectRelease();
                uint64_t v10 = v40;
                unint64_t v18 = v43;
                goto LABEL_6;
              }
            }
          }
          swift_bridgeObjectRelease();
          unint64_t v18 = v43;
        }
        uint64_t v10 = v40;
LABEL_6:
        uint64_t v15 = v47 + 1;
        type metadata accessor for SiriKitParameterMetadata();
        swift_allocObject();
        SiriKitParameterMetadata.init(parameterName:shouldResolve:confirmationStates:)();

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v12 = v15;
        BOOL v16 = v15 == v10;
        a1 = v41;
        if (v16) {
          return v55;
        }
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    uint64_t v51 = 0;
    unint64_t v52 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    v34._object = (void *)0x80000001BA06CE00;
    v34._uint64_t countAndFlagsBits = 0xD000000000000026;
    String.append(_:)(v34);
    _print_unlocked<A, B>(_:_:)();
    specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(v51, v52, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Extensions/SAIntentGroupSiriKitConfirmationState+Enum.swift", 128, 2, 38);
    __break(1u);
LABEL_33:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for SiriKitConfirmationState?);
    uint64_t v51 = 0;
    unint64_t v52 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v35._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    v35._object = (void *)0x80000001BA06CEC0;
    String.append(_:)(v35);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(v51, v52, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/Extensions/SAIntentGroupSiriKitConfirmationState+Enum.swift", 128, 2, 42);
    __break(1u);
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriKitExecutorRunUtils()
{
  return &type metadata for SiriKitExecutorRunUtils;
}

uint64_t SiriKitFlowActivity.appBundleId.setter(uint64_t a1, uint64_t a2)
{
  return ResultCandidateState.conversationUserInputId.setter(a1, a2, &direct field offset for SiriKitFlowActivity.appBundleId);
}

uint64_t (*SiriKitFlowActivity.appBundleId.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SiriKitFlowActivity.appName.setter(uint64_t a1, uint64_t a2)
{
  return ResultCandidateState.conversationUserInputId.setter(a1, a2, &direct field offset for SiriKitFlowActivity.appName);
}

uint64_t (*SiriKitFlowActivity.appName.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SiriKitFlowActivity.appVersion.setter(uint64_t a1, uint64_t a2)
{
  return ResultCandidateState.conversationUserInputId.setter(a1, a2, &direct field offset for SiriKitFlowActivity.appVersion);
}

uint64_t (*SiriKitFlowActivity.appVersion.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SiriKitFlowActivity.build.setter(uint64_t a1, uint64_t a2)
{
  return ResultCandidateState.conversationUserInputId.setter(a1, a2, &direct field offset for SiriKitFlowActivity.build);
}

uint64_t (*SiriKitFlowActivity.build.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t (*SiriKitFlowActivity.errorCodeDescription.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SiriKitFlowActivity.eventReliabilityCode.setter(uint64_t a1, uint64_t a2)
{
  return ResultCandidateState.conversationUserInputId.setter(a1, a2, &direct field offset for SiriKitFlowActivity.eventReliabilityCode);
}

uint64_t (*SiriKitFlowActivity.eventReliabilityCode.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SiriKitFlowActivity.isSiriKit.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + direct field offset for SiriKitFlowActivity.isSiriKit);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*SiriKitFlowActivity.isSiriKit.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t SiriKitFlowActivity.isSiriKitSupportedApp.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + direct field offset for SiriKitFlowActivity.isSiriKitSupportedApp);
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*SiriKitFlowActivity.isSiriKitSupportedApp.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SiriKitFlowActivity.responseId.setter(uint64_t a1, uint64_t a2)
{
  return ResultCandidateState.conversationUserInputId.setter(a1, a2, &direct field offset for SiriKitFlowActivity.responseId);
}

uint64_t (*SiriKitFlowActivity.responseId.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SiriKitFlowActivity.slotName.setter(uint64_t a1, uint64_t a2)
{
  return ResultCandidateState.conversationUserInputId.setter(a1, a2, &direct field offset for SiriKitFlowActivity.slotName);
}

uint64_t (*SiriKitFlowActivity.slotName.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SiriKitFlowActivity.executionRequestId.setter(uint64_t a1, uint64_t a2)
{
  return ResultCandidateState.conversationUserInputId.setter(a1, a2, &direct field offset for SiriKitFlowActivity.executionRequestId);
}

uint64_t (*SiriKitFlowActivity.executionRequestId.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t SiriKitFlowActivity.__allocating_init(activityType:app:executionRequestId:responseId:taskStepStartTime:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, char a8)
{
  int v15 = a8 & 1;
  swift_allocObject();
  uint64_t v16 = specialized SiriKitFlowActivity.init(activityType:app:executionRequestId:responseId:taskStepStartTime:)(a1, a2, a3, a4, a5, a6, a7, v15);
  swift_release();
  return v16;
}

void SiriKitFlowActivity.__allocating_init(from:)()
{
  uint64_t v0 = type metadata accessor for SiriKitReliabilityCodes();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = (void *)(v4 + direct field offset for SiriKitFlowActivity.errorCodeDescription);
  void *v5 = 0;
  v5[1] = 0xE000000000000000;
  uint64_t v6 = (uint64_t *)(v4 + direct field offset for SiriKitFlowActivity.eventReliabilityCode);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4FA1A00], v0);
  uint64_t v7 = SiriKitReliabilityCodes.rawValue.getter();
  uint64_t v9 = v8;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  *uint64_t v6 = v7;
  v6[1] = v9;
  *(unsigned char *)(v4 + direct field offset for SiriKitFlowActivity.isSiriKit) = 1;
  uint64_t v10 = v4 + direct field offset for SiriKitFlowActivity.slotName;
  strcpy((char *)(v4 + direct field offset for SiriKitFlowActivity.slotName), "not_applicable");
  *(unsigned char *)(v10 + 15) = -18;
  swift_release();
  specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000024, 0x80000001BA06EE60, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/TaskStepInstrumentation/SiriKitFlowActivity.swift", 118, 2, 50);
  __break(1u);
}

void SiriKitFlowActivity.init(from:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SiriKitReliabilityCodes();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (void *)(v1 + direct field offset for SiriKitFlowActivity.errorCodeDescription);
  *uint64_t v6 = 0;
  v6[1] = 0xE000000000000000;
  uint64_t v7 = (uint64_t *)(v1 + direct field offset for SiriKitFlowActivity.eventReliabilityCode);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FA1A00], v2);
  uint64_t v8 = SiriKitReliabilityCodes.rawValue.getter();
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *uint64_t v7 = v8;
  v7[1] = v10;
  *(unsigned char *)(v1 + direct field offset for SiriKitFlowActivity.isSiriKit) = 1;
  uint64_t v11 = v1 + direct field offset for SiriKitFlowActivity.slotName;
  strcpy((char *)(v1 + direct field offset for SiriKitFlowActivity.slotName), "not_applicable");
  *(unsigned char *)(v11 + 15) = -18;
  swift_release();
  specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(0xD000000000000024, 0x80000001BA06EE60, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriKitExecutor/SiriKitRuntime/TaskStepInstrumentation/SiriKitFlowActivity.swift", 118, 2, 50);
  __break(1u);
}

SiriKitRuntime::SiriKitFlowActivity::CodingKeys_optional __swiftcall SiriKitFlowActivity.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (SiriKitRuntime::SiriKitFlowActivity::CodingKeys_optional)11;
}

uint64_t SiriKitFlowActivity.CodingKeys.intValue.getter()
{
  return 0;
}

unint64_t SiriKitFlowActivity.CodingKeys.rawValue.getter(char a1)
{
  unint64_t result = 0x6C646E7542707061;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656D614E707061;
      break;
    case 2:
      unint64_t result = 0x6973726556707061;
      break;
    case 3:
      unint64_t result = 0x646C697562;
      break;
    case 4:
    case 5:
      unint64_t result = 0xD000000000000014;
      break;
    case 6:
      unint64_t result = 0x694B697269537369;
      break;
    case 7:
      unint64_t result = 0xD000000000000015;
      break;
    case 8:
      unint64_t result = 0x65736E6F70736572;
      break;
    case 9:
      unint64_t result = 0x656D614E746F6C73;
      break;
    case 10:
      unint64_t result = 0x64496E727574;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SiriKitFlowActivity.CodingKeys(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = SiriKitFlowActivity.CodingKeys.rawValue.getter(*a1);
  uint64_t v5 = v4;
  if (v3 == SiriKitFlowActivity.CodingKeys.rawValue.getter(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SiriKitFlowActivity.CodingKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  SiriKitFlowActivity.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SiriKitFlowActivity.CodingKeys()
{
  SiriKitFlowActivity.CodingKeys.rawValue.getter(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SiriKitFlowActivity.CodingKeys()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  SiriKitFlowActivity.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SiriKitFlowActivity.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized SiriKitFlowActivity.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance SiriKitFlowActivity.CodingKeys@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = SiriKitFlowActivity.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriKitFlowActivity.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized SiriKitFlowActivity.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance SiriKitFlowActivity.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 11;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriKitFlowActivity.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriKitFlowActivity.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriKitFlowActivity.CodingKeys and conformance SiriKitFlowActivity.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

void SiriKitFlowActivity.__allocating_init(activityName:activityType:activityStartTime:)()
{
}

void SiriKitFlowActivity.init(activityName:activityType:activityStartTime:)()
{
}

uint64_t SiriKitFlowActivity.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t specialized SiriKitFlowActivity.init(activityType:app:executionRequestId:responseId:taskStepStartTime:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, int a8)
{
  uint64_t v9 = v8;
  v52[3] = a8;
  uint64_t v55 = a1;
  uint64_t v56 = a7;
  uint64_t v53 = a5;
  uint64_t v54 = a3;
  uint64_t v12 = type metadata accessor for SiriKitReliabilityCodes();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  int v15 = (char *)v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (void *)(v9 + direct field offset for SiriKitFlowActivity.errorCodeDescription);
  *uint64_t v16 = 0;
  v16[1] = 0xE000000000000000;
  id v17 = (uint64_t *)(v9 + direct field offset for SiriKitFlowActivity.eventReliabilityCode);
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E4FA1A00], v12);
  swift_retain();
  uint64_t v18 = SiriKitReliabilityCodes.rawValue.getter();
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  *id v17 = v18;
  v17[1] = v20;
  *(unsigned char *)(v9 + direct field offset for SiriKitFlowActivity.isSiriKit) = 1;
  uint64_t v21 = v9 + direct field offset for SiriKitFlowActivity.slotName;
  strcpy((char *)(v9 + direct field offset for SiriKitFlowActivity.slotName), "not_applicable");
  *(unsigned char *)(v21 + 15) = -18;
  type metadata accessor for AppInformationResolver();
  swift_allocObject();
  swift_retain();
  AppInformationResolver.init(app:)();
  uint64_t v22 = dispatch thunk of AppInformationResolver.resolveAppBundleId.getter();
  if (v23) {
    uint64_t v24 = v22;
  }
  else {
    uint64_t v24 = 0x6C7070615F746F6ELL;
  }
  if (v23) {
    unint64_t v25 = v23;
  }
  else {
    unint64_t v25 = 0xEE00656C62616369;
  }
  int64_t v26 = (uint64_t *)(v9 + direct field offset for SiriKitFlowActivity.appBundleId);
  *int64_t v26 = v24;
  v26[1] = v25;
  uint64_t v27 = dispatch thunk of AppInformationResolver.resolveAppName.getter();
  if (v28) {
    uint64_t v29 = v27;
  }
  else {
    uint64_t v29 = 0x6C7070615F746F6ELL;
  }
  if (v28) {
    unint64_t v30 = v28;
  }
  else {
    unint64_t v30 = 0xEE00656C62616369;
  }
  unint64_t v31 = (uint64_t *)(v9 + direct field offset for SiriKitFlowActivity.appName);
  uint64_t *v31 = v29;
  v31[1] = v30;
  uint64_t v32 = dispatch thunk of AppInformationResolver.resolveAppVersion.getter();
  if (v33) {
    uint64_t v34 = v32;
  }
  else {
    uint64_t v34 = 0x6C7070615F746F6ELL;
  }
  if (v33) {
    unint64_t v35 = v33;
  }
  else {
    unint64_t v35 = 0xEE00656C62616369;
  }
  uint64_t v36 = (uint64_t *)(v9 + direct field offset for SiriKitFlowActivity.appVersion);
  *uint64_t v36 = v34;
  v36[1] = v35;
  uint64_t v37 = dispatch thunk of AppInformationResolver.resolveBuild.getter();
  uint64_t v39 = 48;
  if (v38) {
    uint64_t v39 = v37;
  }
  unint64_t v40 = 0xE100000000000000;
  if (v38) {
    unint64_t v40 = v38;
  }
  unint64_t v41 = (uint64_t *)(v9 + direct field offset for SiriKitFlowActivity.build);
  *unint64_t v41 = v39;
  v41[1] = v40;
  *(unsigned char *)(v9 + direct field offset for SiriKitFlowActivity.isSiriKitSupportedApp) = dispatch thunk of AppInformationResolver.isSiriKitSupportedApp.getter() & 1;
  uint64_t v42 = v53;
  if (a6)
  {
    unint64_t v43 = a6;
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v43 = 0xE000000000000000;
  }
  unsigned int v44 = (void *)(v9 + direct field offset for SiriKitFlowActivity.responseId);
  *unsigned int v44 = v42;
  v44[1] = v43;
  uint64_t v45 = v54;
  if (a4)
  {
    unint64_t v46 = a4;
  }
  else
  {
    uint64_t v45 = 0;
    unint64_t v46 = 0xE000000000000000;
  }
  uint64_t v47 = (void *)(v9 + direct field offset for SiriKitFlowActivity.executionRequestId);
  *uint64_t v47 = v45;
  v47[1] = v46;
  swift_release();
  uint64_t v48 = v55;
  ActivityType.rawValue.getter();
  uint64_t v49 = DefaultFlowActivity.init(activityName:activityType:activityStartTime:)();
  swift_release();
  uint64_t v50 = type metadata accessor for ActivityType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v50 - 8) + 8))(v48, v50);
  return v49;
}

unint64_t specialized SiriKitFlowActivity.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of SiriKitFlowActivity.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xB) {
    return 11;
  }
  else {
    return v3;
  }
}

uint64_t sub_1BA00D110@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + **a1 + 88))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1BA00D178(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for SiriKitFlowActivity + **a2 + 96);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1BA00D1FC@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + **a1 + 112))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1BA00D264(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for SiriKitFlowActivity + **a2 + 120);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1BA00D2E8@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + **a1 + 136))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1BA00D350(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for SiriKitFlowActivity + **a2 + 144);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1BA00D3D4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + **a1 + 160))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1BA00D43C(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for SiriKitFlowActivity + **a2 + 168);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1BA00D4C0@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + **a1 + 184))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1BA00D528(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for SiriKitFlowActivity + **a2 + 192);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1BA00D5AC@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + **a1 + 208))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1BA00D614(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for SiriKitFlowActivity + **a2 + 216);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1BA00D698@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + **a1 + 232))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1BA00D704(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + **a2 + 240))(*a1);
}

uint64_t sub_1BA00D768@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + **a1 + 256))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1BA00D7D8(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + **a2 + 264))(*a1);
}

uint64_t sub_1BA00D840@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + **a1 + 280))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1BA00D8AC(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for SiriKitFlowActivity + **a2 + 288);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1BA00D934@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + **a1 + 304))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1BA00D9A0(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for SiriKitFlowActivity + **a2 + 312);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t sub_1BA00DA28@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + **a1 + 328))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1BA00DA94(uint64_t *a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for SiriKitFlowActivity + **a2 + 336);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t type metadata completion function for SiriKitFlowActivity()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for SiriKitFlowActivity(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SiriKitFlowActivity);
}

uint64_t dispatch thunk of SiriKitFlowActivity.appBundleId.getter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 88))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.appBundleId.setter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 96))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.appBundleId.modify()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 104))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.appName.getter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 112))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.appName.setter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 120))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.appName.modify()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 128))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.appVersion.getter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 136))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.appVersion.setter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 144))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.appVersion.modify()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 152))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.build.getter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 160))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.build.setter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 168))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.build.modify()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 176))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.errorCodeDescription.getter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 184))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.errorCodeDescription.setter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 192))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.errorCodeDescription.modify()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 200))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.eventReliabilityCode.getter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 208))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.eventReliabilityCode.setter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 216))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.eventReliabilityCode.modify()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 224))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.isSiriKit.getter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 232))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.isSiriKit.setter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 240))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.isSiriKit.modify()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 248))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.isSiriKitSupportedApp.getter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 256))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.isSiriKitSupportedApp.setter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 264))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.isSiriKitSupportedApp.modify()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 272))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.responseId.getter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 280))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.responseId.setter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 288))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.responseId.modify()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 296))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.slotName.getter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 304))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.slotName.setter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 312))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.slotName.modify()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 320))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.executionRequestId.getter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 328))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.executionRequestId.setter()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 336))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.executionRequestId.modify()
{
  return (*(uint64_t (**)(void))(class metadata base offset for SiriKitFlowActivity + *v0 + 344))();
}

uint64_t dispatch thunk of SiriKitFlowActivity.__allocating_init(activityType:app:executionRequestId:responseId:taskStepStartTime:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(class metadata base offset for SiriKitFlowActivity + v8 + 352))(a1, a2, a3, a4, a5, a6, a7, a8 & 1);
}

uint64_t ObjC metadata update function for SiriKitFlowActivity()
{
  return type metadata accessor for SiriKitFlowActivity();
}

uint64_t getEnumTagSinglePayload for SiriKitFlowActivity.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF6) {
    goto LABEL_17;
  }
  if (a2 + 10 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 10) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 10;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 10;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xB;
  int v8 = v6 - 11;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SiriKitFlowActivity.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 10 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 10) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF6) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF5)
  {
    unsigned int v6 = ((a2 - 246) >> 8) + 1;
    *uint64_t result = a2 + 10;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1BA00E594);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 10;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriKitFlowActivity.CodingKeys()
{
  return &type metadata for SiriKitFlowActivity.CodingKeys;
}

uint64_t DirectFlowPluginLoaderImpl.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = MEMORY[0x1E4FBC868];
  return result;
}

uint64_t FlowPluginAndBundle.flowPlugin.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1, a1);
}

uint64_t FlowPluginAndBundle.bundle.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(v1 + 40, a1);
}

uint64_t FlowPluginAndBundle.init(flowPlugin:bundle:)@<X0>(long long *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  outlined init with take of ReferenceResolutionClientProtocol(a1, a3);

  return outlined init with take of ReferenceResolutionClientProtocol(a2, a3 + 40);
}

uint64_t one-time initialization function for pluginLoader()
{
  type metadata accessor for FlowDelegatePluginLoader();
  uint64_t result = static FlowDelegatePluginLoader.sharedInstance.getter();
  static SiriKitFlowLoader.pluginLoader = result;
  return result;
}

uint64_t *SiriKitFlowLoader.pluginLoader.unsafeMutableAddressor()
{
  if (one-time initialization token for pluginLoader != -1) {
    swift_once();
  }
  return &static SiriKitFlowLoader.pluginLoader;
}

uint64_t static SiriKitFlowLoader.pluginLoader.getter()
{
  if (one-time initialization token for pluginLoader != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t SiriKitFlowLoader.loadFlow(rcId:input:)()
{
  uint64_t v0 = type metadata accessor for Parse();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  int v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pluginLoader != -1) {
    swift_once();
  }
  Input.parse.getter();
  dispatch thunk of FlowDelegatePluginLoader.loadFlow(rcId:parse:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t SiriKitFlowLoader.loadFlowPlugin(bundleIdentifier:)()
{
  if (one-time initialization token for pluginLoader != -1) {
    swift_once();
  }
  return dispatch thunk of FlowDelegatePluginLoader.loadFlowPlugin(bundleIdentifier:)();
}

Swift::Void __swiftcall SiriKitFlowLoader.loadAndWarmBundle(bundleIdentifier:refId:)(Swift::String bundleIdentifier, Swift::String refId)
{
  if (one-time initialization token for pluginLoader != -1) {
    swift_once();
  }
  dispatch thunk of FlowDelegatePluginLoader.loadAndWarmBundle(bundleIdentifier:refId:)();
}

uint64_t SiriKitFlowLoader.deinit()
{
  return v0;
}

uint64_t SiriKitFlowLoader.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t SiriKitFlowLoader.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t SiriKitFlowLoader.init()()
{
  return v0;
}

uint64_t protocol witness for FlowLoader.loadFlow(rcId:input:) in conformance SiriKitFlowLoader()
{
  uint64_t v0 = type metadata accessor for Parse();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  int v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pluginLoader != -1) {
    swift_once();
  }
  Input.parse.getter();
  dispatch thunk of FlowDelegatePluginLoader.loadFlow(rcId:parse:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t protocol witness for FlowLoader.loadFlowPlugin(bundleIdentifier:) in conformance SiriKitFlowLoader()
{
  if (one-time initialization token for pluginLoader != -1) {
    swift_once();
  }
  return dispatch thunk of FlowDelegatePluginLoader.loadFlowPlugin(bundleIdentifier:)();
}

uint64_t protocol witness for FlowLoader.loadAndWarmBundle(bundleIdentifier:refId:) in conformance SiriKitFlowLoader()
{
  if (one-time initialization token for pluginLoader != -1) {
    swift_once();
  }
  return dispatch thunk of FlowDelegatePluginLoader.loadAndWarmBundle(bundleIdentifier:refId:)();
}

uint64_t DirectFlowPluginLoaderImpl.init()()
{
  uint64_t result = v0;
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC868];
  return result;
}

void DirectFlowPluginLoaderImpl.loadFlowPlugin(path:)(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  swift_beginAccess();
  uint64_t v7 = *(void *)(v3 + 16);
  if (*(void *)(v7 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v9)
    {
      outlined init with copy of FlowPluginAndBundle(*(void *)(v7 + 56) + 80 * v8, (uint64_t)&v39);
    }
    else
    {
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v39 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((void *)&v40 + 1))
    {
      long long v46 = v41;
      long long v47 = v42;
      long long v48 = v43;
      long long v44 = v39;
      long long v45 = v40;
      swift_endAccess();
      long long v10 = v47;
      *(_OWORD *)(a3 + 32) = v46;
      *(_OWORD *)(a3 + 48) = v10;
      *(_OWORD *)(a3 + 64) = v48;
      long long v11 = v45;
      *(_OWORD *)a3 = v44;
      *(_OWORD *)(a3 + 16) = v11;
      *(unsigned char *)(a3 + 80) = 1;
      return;
    }
  }
  else
  {
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v39 = 0u;
  }
  outlined destroy of FlowPluginAndBundle?((uint64_t)&v39);
  swift_endAccess();
  id v12 = objc_allocWithZone(MEMORY[0x1E4F28B50]);
  swift_bridgeObjectRetain();
  uint64_t v13 = (void *)MEMORY[0x1BA9E2DD0](a1, a2);
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v12, sel_initWithPath_, v13);

  if (!v14)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(void *)&long long v44 = v25;
      *(_DWORD *)uint64_t v24 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&long long v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)&v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v22, v23, "Failed to load bundle at path %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v25, -1, -1);
      MEMORY[0x1BA9E48C0](v24, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    goto LABEL_35;
  }
  if (!objc_msgSend(v14, sel_principalClass))
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(void *)&long long v44 = v30;
      *(_DWORD *)uint64_t v29 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&long long v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)&v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v27, v28, "Failed bundle at path %s has no principal class", (uint8_t *)v29, 0xCu);
      swift_arrayDestroy();
      uint64_t v31 = v30;
LABEL_32:
      MEMORY[0x1BA9E48C0](v31, -1, -1);
      MEMORY[0x1BA9E48C0](v29, -1, -1);

LABEL_34:
LABEL_35:
      *(unsigned char *)(a3 + 80) = 0;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)a3 = 0u;
      return;
    }
LABEL_33:

    swift_bridgeObjectRelease_n();
    goto LABEL_34;
  }
  uint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
  uint64_t v16 = swift_conformsToProtocol2();
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  if (v16) {
    uint64_t v18 = ObjCClassMetadata;
  }
  else {
    uint64_t v18 = 0;
  }
  if (!v18)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.executor);
    swift_bridgeObjectRetain_n();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v33))
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      *(void *)&long long v44 = v34;
      *(_DWORD *)uint64_t v29 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)&long long v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)&v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v29 + 12) = 2080;
      *(void *)&long long v39 = ObjCClassMetadata;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Swift.AnyObject.Type);
      uint64_t v35 = String.init<A>(describing:)();
      *(void *)&long long v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, (uint64_t *)&v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v27, v33, "Principal class for plugin bundle at %s is not a FlowPlugin: %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      uint64_t v31 = v34;
      goto LABEL_32;
    }
    goto LABEL_33;
  }
  *((void *)&v40 + 1) = v18;
  *(void *)&long long v41 = v17;
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v39);
  dispatch thunk of FlowPlugin.init()();
  id v19 = objc_msgSend(v14, sel_infoDictionary);
  if (v19)
  {
    uint64_t v20 = v19;
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  }
  static IntentTopic.makeFromBundleInfoPlist(dictionary:)();
  swift_bridgeObjectRelease();
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v39, a3);
  uint64_t v37 = type metadata accessor for FlowPluginBundleImpl();
  uint64_t v38 = MEMORY[0x1E4FA18D0];
  *(void *)(a3 + 64) = v37;
  *(void *)(a3 + 72) = v38;
  __swift_allocate_boxed_opaque_existential_0((uint64_t *)(a3 + 40));
  swift_bridgeObjectRetain();
  FlowPluginBundleImpl.init(bundlePath:supportedTopics:)();
  outlined init with copy of FlowPluginAndBundle(a3, (uint64_t)&v44);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter((uint64_t)&v44, a1, a2);
  swift_endAccess();

  *(unsigned char *)(a3 + 80) = 0;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v39);
}

uint64_t DirectFlowPluginLoaderImpl.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DirectFlowPluginLoaderImpl.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void protocol witness for DirectFlowPluginLoader.loadFlowPlugin(path:) in conformance DirectFlowPluginLoaderImpl(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
}

uint64_t outlined destroy of FlowPluginAndBundle?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowPluginAndBundle?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t dispatch thunk of FlowLoader.loadFlow(rcId:input:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of FlowLoader.loadFlowPlugin(bundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of FlowLoader.loadAndWarmBundle(bundleIdentifier:refId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of DirectFlowPluginLoader.loadFlowPlugin(path:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t destroy for FlowPluginAndBundle(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1);

  return __swift_destroy_boxed_opaque_existential_1Tm(a1 + 40);
}

ValueMetadata *type metadata accessor for FlowPluginAndBundle()
{
  return &type metadata for FlowPluginAndBundle;
}

uint64_t type metadata accessor for SiriKitFlowLoader()
{
  return self;
}

uint64_t method lookup function for SiriKitFlowLoader(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SiriKitFlowLoader);
}

uint64_t dispatch thunk of SiriKitFlowLoader.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t type metadata accessor for DirectFlowPluginLoaderImpl()
{
  return self;
}

uint64_t method lookup function for DirectFlowPluginLoaderImpl(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DirectFlowPluginLoaderImpl);
}

uint64_t dispatch thunk of DirectFlowPluginLoaderImpl.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

id AFSpeechInfo.toAFSpeechPackage()()
{
  id v1 = objc_msgSend(v0, sel_speechRecognizedCommand);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  id v3 = objc_msgSend(v1, sel_recognition);

  if (v3)
  {
    id v4 = objc_msgSend(v3, sel_af_speechPhrases);

    if (!v4) {
      return 0;
    }
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v3 = (id)specialized _arrayConditionalCast<A, B>(_:)(v5);
    swift_bridgeObjectRelease();
    if (v3)
    {
      id v6 = objc_msgSend(v0, sel_speechRecognizedCommand);
      if (v6)
      {
        uint64_t v7 = v6;
        id v8 = objc_msgSend(v6, sel_recognition);

        if (v8)
        {
          id v9 = objc_msgSend(v8, sel_af_speechUtterances);

          if (v9)
          {
            type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for AFSpeechUtterance);
            static Array._unconditionallyBridgeFromObjectiveC(_:)();

            id v10 = objc_msgSend(v0, sel_speechRecognizedCommand);
            if (v10)
            {
              long long v11 = v10;
              id v12 = objc_msgSend(v10, sel_processedAudioDuration);

              if (v12)
              {
                objc_msgSend(v12, sel_doubleValue);
                double v14 = v13;

                id v15 = objc_msgSend(v0, sel_speechRecognizedCommand);
                if (v15)
                {
                  uint64_t v16 = v15;
                  id v17 = objc_msgSend(v15, sel_audioAnalytics);

                  if (v17)
                  {
                    id v18 = objc_msgSend(v17, sel_af_audioAnalytics);

                    if (v18)
                    {
                      id v19 = objc_allocWithZone(MEMORY[0x1E4F4E618]);
                      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFSpeechPhrase);
                      Class isa = Array._bridgeToObjectiveC()().super.isa;
                      swift_bridgeObjectRelease();
                      Class v21 = Array._bridgeToObjectiveC()().super.isa;
                      swift_bridgeObjectRelease();
                      id v22 = objc_msgSend(v19, sel_initWithPhrases_utterances_processedAudioDuration_, isa, v21, v14);

                      id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4E608]), sel_initWithRecognition_rawRecognition_audioAnalytics_isFinal_utteranceStart_, v22, v22, v18, 1, 0.0);
                      return v3;
                    }
                  }
                }
              }
            }
            swift_bridgeObjectRelease();
          }
        }
      }
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  return v3;
}

uint64_t static SiriKitMetricsUtils.emitSessionStarted(input:eventSender:resultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized static SiriKitMetricsUtils.emitSessionStarted(input:eventSender:resultCandidateId:)
                                                                   + async function pointer to specialized static SiriKitMetricsUtils.emitSessionStarted(input:eventSender:resultCandidateId:));
  id v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  void *v9 = v4;
  v9[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return v11(a1, a2, a3, a4);
}

uint64_t static SiriKitMetricsUtils.emitTopicChanged(input:eventSender:)(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for SiriKitEventPayload();
  v2[4] = v3;
  v2[5] = *(void *)(v3 - 8);
  v2[6] = swift_task_alloc();
  return MEMORY[0x1F4188298](static SiriKitMetricsUtils.emitTopicChanged(input:eventSender:), 0, 0);
}

uint64_t static SiriKitMetricsUtils.emitTopicChanged(input:eventSender:)()
{
  uint64_t v2 = v0[5];
  id v1 = (uint64_t *)v0[6];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v3[3];
  uint64_t v6 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v5);
  type metadata accessor for SiriKitEvent();
  *id v1 = specialized static SiriKitMetricsUtils.extractIntentTypeName(input:)();
  v1[1] = v7;
  (*(void (**)(uint64_t *, void, uint64_t))(v2 + 104))(v1, *MEMORY[0x1E4FA1908], v4);
  uint64_t v8 = SiriKitEvent.__allocating_init(_:builder:)();
  v0[7] = v8;
  id v9 = (void *)swift_task_alloc();
  v0[8] = v9;
  void *v9 = v0;
  v9[1] = static SiriKitMetricsUtils.emitTopicChanged(input:eventSender:);
  return MEMORY[0x1F4151BE0](v8, v5, v6);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t static SiriKitMetricsUtils.emitConversationCommitted(eventSender:resultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for SiriKitEventPayload();
  v3[5] = v4;
  v3[6] = *(void *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return MEMORY[0x1F4188298](static SiriKitMetricsUtils.emitConversationCommitted(eventSender:resultCandidateId:), 0, 0);
}

uint64_t static SiriKitMetricsUtils.emitConversationCommitted(eventSender:resultCandidateId:)()
{
  uint64_t v2 = v0[6];
  id v1 = (void *)v0[7];
  uint64_t v4 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v5 = (void *)v0[2];
  uint64_t v6 = v0[3];
  uint64_t v7 = v5[3];
  uint64_t v8 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v7);
  type metadata accessor for SiriKitEvent();
  *id v1 = v6;
  v1[1] = v4;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v1, *MEMORY[0x1E4FA1980], v3);
  swift_bridgeObjectRetain();
  uint64_t v9 = SiriKitEvent.__allocating_init(_:builder:)();
  v0[8] = v9;
  id v10 = (void *)swift_task_alloc();
  v0[9] = v10;
  *id v10 = v0;
  v10[1] = static SiriKitMetricsUtils.emitConversationCommitted(eventSender:resultCandidateId:);
  return MEMORY[0x1F4151BE0](v9, v7, v8);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v6 = MEMORY[0x1E4FBC860];
  uint64_t v2 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v2) {
    return v6;
  }
  for (uint64_t i = a1 + 32; ; i += 32)
  {
    outlined init with copy of Any(i, (uint64_t)v5);
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for AFSpeechPhrase);
    if (!swift_dynamicCast()) {
      break;
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (!--v2) {
      return v6;
    }
  }
  swift_release();

  return 0;
}

{
  int64_t v2;
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  unint64_t v6;
  long long v8[2];
  uint64_t v9;
  unsigned char v10[32];
  long long v11[2];
  uint64_t v12;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v12 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  uint64_t v3 = v12;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32)
    {
      outlined init with copy of Any(i, (uint64_t)v10);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSExtensionProtocol);
      if (!swift_dynamicCast()) {
        break;
      }
      outlined init with take of ReferenceResolutionClientProtocol(v8, (uint64_t)v11);
      outlined init with take of ReferenceResolutionClientProtocol(v11, (uint64_t)v8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
        uint64_t v3 = v12;
      }
      uint64_t v6 = *(void *)(v3 + 16);
      uint64_t v5 = *(void *)(v3 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
        uint64_t v3 = v12;
      }
      *(void *)(v3 + 16) = v6 + 1;
      outlined init with take of ReferenceResolutionClientProtocol(v8, v3 + 40 * v6 + 32);
      if (!--v2) {
        return v3;
      }
    }
    uint64_t v9 = 0;
    memset(v8, 0, sizeof(v8));
    swift_release();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, &demangling cache variable for type metadata for NSExtensionProtocol?);
    return 0;
  }
  return v3;
}

uint64_t static SiriKitMetricsUtils.emitConversationWillContinueInRemoteProcess(eventSender:)(uint64_t a1)
{
  v1[2] = a1;
  uint64_t v2 = type metadata accessor for SiriKitEventPayload();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  return MEMORY[0x1F4188298](static SiriKitMetricsUtils.emitConversationWillContinueInRemoteProcess(eventSender:), 0, 0);
}

uint64_t static SiriKitMetricsUtils.emitConversationWillContinueInRemoteProcess(eventSender:)()
{
  uint64_t v2 = v0[4];
  uint64_t v1 = v0[5];
  uint64_t v3 = (void *)v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v3[3];
  uint64_t v6 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v5);
  type metadata accessor for SiriKitEvent();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, *MEMORY[0x1E4FA1998], v4);
  uint64_t v7 = SiriKitEvent.__allocating_init(_:builder:)();
  v0[6] = v7;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[7] = v8;
  *uint64_t v8 = v0;
  v8[1] = static SiriKitMetricsUtils.emitConversationWillContinueInRemoteProcess(eventSender:);
  return MEMORY[0x1F4151BE0](v7, v5, v6);
}

{
  uint64_t *v0;
  uint64_t (*v1)(void);
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t StringProtocol.endIndex<A>(of:options:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Locale();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  StringProtocol.range<A>(of:options:range:locale:)();
  uint64_t v5 = v4;
  char v7 = v6;
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v2, &demangling cache variable for type metadata for Locale?);
  if (v7) {
    return 0;
  }
  else {
    return v5;
  }
}

uint64_t StringProtocol.index<A>(of:options:)()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Locale();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  uint64_t v4 = StringProtocol.range<A>(of:options:range:locale:)();
  char v6 = v5;
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v2, &demangling cache variable for type metadata for Locale?);
  if (v6) {
    return 0;
  }
  else {
    return v4;
  }
}

ValueMetadata *type metadata accessor for SiriKitMetricsUtils()
{
  return &type metadata for SiriKitMetricsUtils;
}

uint64_t SiriKitRequestEvent.appId.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriKitRequestEvent.appId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*SiriKitRequestEvent.appId.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SiriKitRequestEvent.appDisplayName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriKitRequestEvent.appDisplayName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*SiriKitRequestEvent.appDisplayName.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SiriKitRequestEvent.appVersion.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriKitRequestEvent.appVersion.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return result;
}

uint64_t (*SiriKitRequestEvent.appVersion.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SiriKitRequestEvent.eventReliabilityCode.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriKitRequestEvent.eventReliabilityCode.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t (*SiriKitRequestEvent.eventReliabilityCode.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SiriKitRequestEvent.errorCode.getter()
{
  return *(void *)(v0 + 64);
}

uint64_t SiriKitRequestEvent.errorCode.setter(uint64_t result)
{
  *(void *)(v1 + 64) = result;
  return result;
}

uint64_t (*SiriKitRequestEvent.errorCode.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SiriKitRequestEvent.intentName.getter()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SiriKitRequestEvent.intentName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 80) = a2;
  return result;
}

uint64_t (*SiriKitRequestEvent.intentName.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

double SiriKitRequestEvent.init(intentName:errorCode:app:eventReliabilityCode:)@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  specialized SiriKitRequestEvent.init(intentName:errorCode:app:eventReliabilityCode:)(a1, a2, a3, a4, a5, a6, (uint64_t *)v11);
  long long v8 = v11[3];
  *(_OWORD *)(a7 + 32) = v11[2];
  *(_OWORD *)(a7 + 48) = v8;
  *(_OWORD *)(a7 + 64) = v11[4];
  *(void *)(a7 + 80) = v12;
  double result = *(double *)v11;
  long long v10 = v11[1];
  *(_OWORD *)a7 = v11[0];
  *(_OWORD *)(a7 + 16) = v10;
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance SiriKitRequestEvent.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized SiriKitRequestEvent.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance SiriKitRequestEvent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance SiriKitRequestEvent.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

double SiriKitRequestEvent.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized SiriKitRequestEvent.init(from:)(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(void *)(a2 + 80) = v8;
    double result = *(double *)v7;
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }
  return result;
}

double protocol witness for Decodable.init(from:) in conformance SiriKitRequestEvent@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized SiriKitRequestEvent.init(from:)(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(void *)(a2 + 80) = v8;
    double result = *(double *)v7;
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t specialized SiriKitRequestEvent.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6449707061 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C70736944707061 && a2 == 0xEE00656D614E7961 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6973726556707061 && a2 == 0xEA00000000006E6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001BA061530 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x646F43726F727265 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x614E746E65746E69 && a2 == 0xEA0000000000656DLL)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t specialized SiriKitRequestEvent.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<SiriKitRequestEvent.CodingKeys>);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SiriKitReliabilityCodes();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E4FA1A00], v9);
  SiriKitReliabilityCodes.rawValue.getter();
  uint64_t v44 = v13;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type SiriKitRequestEvent.CodingKeys and conformance SiriKitRequestEvent.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = v6;
    long long v43 = a2;
    char v50 = 0;
    uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v17 = v16;
    char v49 = 1;
    swift_bridgeObjectRetain();
    uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v20 = v19;
    uint64_t v40 = v18;
    uint64_t v41 = v15;
    char v48 = 2;
    swift_bridgeObjectRetain();
    uint64_t v21 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v42 = v22;
    uint64_t v23 = v22;
    uint64_t v37 = v21;
    uint64_t v39 = v20;
    char v47 = 3;
    swift_bridgeObjectRetain();
    uint64_t v38 = 0;
    uint64_t v36 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v25 = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    char v46 = 4;
    uint64_t v44 = KeyedDecodingContainer.decode(_:forKey:)();
    char v45 = 5;
    uint64_t v26 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v28 = v27;
    uint64_t v29 = *(void (**)(char *, uint64_t))(v14 + 8);
    uint64_t v38 = v26;
    v29(v8, v5);
    swift_bridgeObjectRetain();
    uint64_t v30 = v23;
    uint64_t v31 = v39;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    os_log_type_t v33 = v43;
    *long long v43 = v41;
    v33[1] = v17;
    v33[2] = v40;
    uint64_t v33[3] = v31;
    v33[4] = v37;
    uint64_t v33[5] = v30;
    v33[6] = v36;
    v33[7] = v25;
    uint64_t v34 = v38;
    v33[8] = v44;
    v33[9] = v34;
    v33[10] = v28;
  }
  return result;
}

uint64_t destroy for SiriKitRequestEvent()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SiriKitRequestEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for SiriKitRequestEvent(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for SiriKitRequestEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SiriKitRequestEvent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SiriKitRequestEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriKitRequestEvent()
{
  return &type metadata for SiriKitRequestEvent;
}

unsigned char *storeEnumTagSinglePayload for SiriKitRequestEvent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1BA011790);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SiriKitRequestEvent.CodingKeys()
{
  return &unk_1F13853F0;
}

uint64_t static Log.begin(_:enableTelemetry:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  if (a4) {
    return os_signpost(_:dso:log:name:signpostID:_:_:)();
  }

  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t Logger.instrumentation.unsafeMutableAddressor()
{
  return Logger.instrumentation.unsafeMutableAddressor(&one-time initialization token for instrumentation, MEMORY[0x1E4FBD360], (uint64_t)static Logger.instrumentation);
}

uint64_t Logger.ace.unsafeMutableAddressor()
{
  return Logger.instrumentation.unsafeMutableAddressor(&one-time initialization token for ace, MEMORY[0x1E4FBD360], (uint64_t)static Logger.ace);
}

uint64_t Logger.executor.unsafeMutableAddressor()
{
  return Logger.instrumentation.unsafeMutableAddressor(&one-time initialization token for executor, MEMORY[0x1E4FBD360], (uint64_t)static Logger.executor);
}

uint64_t Logger.conversationBridge.unsafeMutableAddressor()
{
  return Logger.instrumentation.unsafeMutableAddressor(&one-time initialization token for conversationBridge, MEMORY[0x1E4FBD360], (uint64_t)static Logger.conversationBridge);
}

void static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
}

uint64_t *Log.executor.unsafeMutableAddressor()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  return &static Log.executor;
}

uint64_t Signposter.executor.unsafeMutableAddressor()
{
  return Logger.instrumentation.unsafeMutableAddressor(&one-time initialization token for executor, MEMORY[0x1E4FBD330], (uint64_t)static Signposter.executor);
}

uint64_t OSSignposter.withIntervalSignpostTelemetryEnabledAsync<A>(_:id:around:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 56) = a7;
  *(void *)(v8 + 64) = v7;
  *(void *)(v8 + 40) = a5;
  *(void *)(v8 + 48) = a6;
  *(unsigned char *)(v8 + 96) = a4;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 16) = a1;
  return MEMORY[0x1F4188298](OSSignposter.withIntervalSignpostTelemetryEnabledAsync<A>(_:id:around:), 0, 0);
}

uint64_t OSSignposter.withIntervalSignpostTelemetryEnabledAsync<A>(_:id:around:)(uint64_t a1, uint64_t a2)
{
  int v3 = *(int **)(v2 + 48);
  *(void *)(v2 + 72) = OSSignposter.beginIntervalTelemetryEnabled(_:id:)(*(const char **)(v2 + 24), a2, *(unsigned char *)(v2 + 96), *(void *)(v2 + 40));
  uint64_t v7 = (uint64_t (*)(uint64_t))((char *)v3 + *v3);
  unsigned int v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 80) = v4;
  *unsigned int v4 = v2;
  v4[1] = OSSignposter.withIntervalSignpostTelemetryEnabledAsync<A>(_:id:around:);
  uint64_t v5 = *(void *)(v2 + 16);
  return v7(v5);
}

uint64_t OSSignposter.withIntervalSignpostTelemetryEnabledAsync<A>(_:id:around:)()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = OSSignposter.withIntervalSignpostTelemetryEnabledAsync<A>(_:id:around:);
  }
  else {
    uint64_t v2 = OSSignposter.withIntervalSignpostTelemetryEnabledAsync<A>(_:id:around:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  $defer #1 <A>() in OSSignposter.withIntervalSignpostAsync<A>(_:id:around:)(*(void *)(v0 + 64), *(const char **)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 96));
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  $defer #1 <A>() in OSSignposter.withIntervalSignpostAsync<A>(_:id:around:)(*(void *)(v0 + 64), *(const char **)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 96));
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

char **ExecutionBridgeSignposts.executionBridgeInit.unsafeMutableAddressor()
{
  return &static ExecutionBridgeSignposts.executionBridgeInit;
}

char **ExecutionBridgeSignposts.referenceResolutionInitTime.unsafeMutableAddressor()
{
  return &static ExecutionBridgeSignposts.referenceResolutionInitTime;
}

uint64_t static Log.end(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Log.end(_:_:)(a1, a2, a3, a4, MEMORY[0x1E4FBD398]);
}

char **ExecutionBridgeSignposts.correctionsPlatformClientInitTime.unsafeMutableAddressor()
{
  return &static ExecutionBridgeSignposts.correctionsPlatformClientInitTime;
}

char **ExecutionBridgeSignposts.networkAvailabilityProviderInitTime.unsafeMutableAddressor()
{
  return &static ExecutionBridgeSignposts.networkAvailabilityProviderInitTime;
}

uint64_t Logger.insightRequestSummaryLogger.unsafeMutableAddressor()
{
  return Logger.instrumentation.unsafeMutableAddressor(&one-time initialization token for insightRequestSummaryLogger, (uint64_t (*)(void))type metadata accessor for InsightRequestSummaryLogger, (uint64_t)static Logger.insightRequestSummaryLogger);
}

uint64_t Logger.instrumentation.unsafeMutableAddressor(void *a1, uint64_t (*a2)(void), uint64_t a3)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = a2(0);

  return __swift_project_value_buffer(v5, a3);
}

char **ExecutionBridgeSignposts.commitToCloseTime.unsafeMutableAddressor()
{
  return &static ExecutionBridgeSignposts.commitToCloseTime;
}

char **ExecutionBridgeSignposts.rraasEntityCollectionTime.unsafeMutableAddressor()
{
  return &static ExecutionBridgeSignposts.rraasEntityCollectionTime;
}

uint64_t OSSignposter.withIntervalSignpostAsync<A>(_:id:around:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v8 + 64) = a7;
  *(void *)(v8 + 72) = v7;
  *(void *)(v8 + 48) = a5;
  *(void *)(v8 + 56) = a6;
  *(unsigned char *)(v8 + 128) = a4;
  *(void *)(v8 + 32) = a2;
  *(void *)(v8 + 40) = a3;
  *(void *)(v8 + 24) = a1;
  uint64_t v9 = type metadata accessor for OSSignpostID();
  *(void *)(v8 + 80) = v9;
  *(void *)(v8 + 88) = *(void *)(v9 - 8);
  *(void *)(v8 + 96) = swift_task_alloc();
  return MEMORY[0x1F4188298](OSSignposter.withIntervalSignpostAsync<A>(_:id:around:), 0, 0);
}

uint64_t OSSignposter.withIntervalSignpostAsync<A>(_:id:around:)()
{
  uint64_t v1 = OSSignposter.logHandle.getter();
  os_signpost_type_t v2 = static os_signpost_type_t.begin.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v4 = *(const char **)(v0 + 32);
  if (*(unsigned char *)(v0 + 128))
  {
    if ((unint64_t)v4 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v4 >> 11 == 27)
      {
LABEL_16:
        __break(1u);
        return result;
      }
      if (v4 >> 16 <= 0x10)
      {
        uint64_t v4 = (const char *)(v0 + 16);
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_16;
  }
  if (v4)
  {
LABEL_10:
    uint64_t v8 = *(void *)(v0 + 88);
    uint64_t v7 = *(void *)(v0 + 96);
    uint64_t v9 = *(void *)(v0 + 80);
    unsigned int v6 = *(void (**)(uint64_t, void, uint64_t))(v8 + 16);
    v6(v7, *(void *)(v0 + 48), v9);
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    os_signpost_id_t v11 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1B9C64000, v1, v2, v11, v4, "", v10, 2u);
    MEMORY[0x1BA9E48C0](v10, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    goto LABEL_11;
  }
  __break(1u);
LABEL_5:
  uint64_t v5 = *(void *)(v0 + 88);

  unsigned int v6 = *(void (**)(uint64_t, void, uint64_t))(v5 + 16);
LABEL_11:
  uint64_t v12 = *(int **)(v0 + 56);
  v6(*(void *)(v0 + 96), *(void *)(v0 + 48), *(void *)(v0 + 80));
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  *(void *)(v0 + 104) = OSSignpostIntervalState.init(id:isOpen:)();
  uint64_t v15 = (uint64_t (*)(uint64_t))((char *)v12 + *v12);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 112) = v13;
  void *v13 = v0;
  v13[1] = OSSignposter.withIntervalSignpostAsync<A>(_:id:around:);
  uint64_t v14 = *(void *)(v0 + 24);
  return v15(v14);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    os_signpost_type_t v2 = OSSignposter.withIntervalSignpostAsync<A>(_:id:around:);
  }
  else {
    os_signpost_type_t v2 = OSSignposter.withIntervalSignpostAsync<A>(_:id:around:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  $defer #1 <A>() in OSSignposter.withIntervalSignpostAsync<A>(_:id:around:)(*(void *)(v0 + 72), *(const char **)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 128));
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  $defer #1 <A>() in OSSignposter.withIntervalSignpostAsync<A>(_:id:around:)(*(void *)(v0 + 72), *(const char **)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 128));
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t static Log.generateSignpostID()()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  id v0 = (id)static Log.executor;

  return OSSignpostID.init(log:)();
}

uint64_t static Log.begin(_:_:enableTelemetry:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  static os_signpost_type_t.begin.getter();
  if (a5)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    return os_signpost(_:dso:log:name:signpostID:_:_:)();
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    return os_signpost(_:dso:log:name:signpostID:)();
  }
}

void static Log.logAFAnalytics(eventType:eventContext:)(uint64_t a1, uint64_t a2)
{
  id v4 = objc_msgSend(self, sel_sharedAnalytics);
  if (v4)
  {
    uint64_t v5 = v4;
    specialized _dictionaryUpCast<A, B, C, D>(_:)(a2);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_logEventWithType_context_, a1, isa);
  }
}

char **ExecutionBridgeSignposts.phoneCallStateQueryTime.unsafeMutableAddressor()
{
  return &static ExecutionBridgeSignposts.phoneCallStateQueryTime;
}

char **ExecutionBridgeSignposts.phoneCallStateQueryTimeout.unsafeMutableAddressor()
{
  return &static ExecutionBridgeSignposts.phoneCallStateQueryTimeout;
}

uint64_t static Log.event(_:)()
{
  uint64_t v0 = type metadata accessor for OSSignpostID();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  int v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.event.getter();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t static Logger.begin(_:)()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  id v0 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();

  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t Logger.event(_:)()
{
  uint64_t v0 = type metadata accessor for OSSignpostID();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  int v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.event.getter();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  static OSSignpostID.exclusive.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t one-time initialization function for executor(uint64_t a1)
{
  return one-time initialization function for executor(a1, static Logger.executor, &one-time initialization token for executor, (id *)&static Log.executor);
}

uint64_t static Logger.executor.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.executor.getter(&one-time initialization token for executor, MEMORY[0x1E4FBD360], (uint64_t)static Logger.executor, a1);
}

uint64_t one-time initialization function for ace(uint64_t a1)
{
  return one-time initialization function for executor(a1, static Logger.ace, &one-time initialization token for ace, (id *)&static Log.ace);
}

uint64_t *Log.ace.unsafeMutableAddressor()
{
  if (one-time initialization token for ace != -1) {
    swift_once();
  }
  return &static Log.ace;
}

uint64_t static Logger.ace.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.executor.getter(&one-time initialization token for ace, MEMORY[0x1E4FBD360], (uint64_t)static Logger.ace, a1);
}

uint64_t one-time initialization function for instrumentation(uint64_t a1)
{
  return one-time initialization function for executor(a1, static Logger.instrumentation, &one-time initialization token for instrumentation, (id *)&static Log.instrumentation);
}

uint64_t *Log.instrumentation.unsafeMutableAddressor()
{
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  return &static Log.instrumentation;
}

uint64_t static Logger.instrumentation.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.executor.getter(&one-time initialization token for instrumentation, MEMORY[0x1E4FBD360], (uint64_t)static Logger.instrumentation, a1);
}

uint64_t one-time initialization function for conversationBridge(uint64_t a1)
{
  return one-time initialization function for executor(a1, static Logger.conversationBridge, &one-time initialization token for conversationBridge, (id *)&static Log.conversationBridge);
}

uint64_t one-time initialization function for executor(uint64_t a1, uint64_t *a2, void *a3, id *a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  if (*a3 != -1) {
    swift_once();
  }
  id v8 = *a4;
  return Logger.init(_:)();
}

uint64_t *Log.conversationBridge.unsafeMutableAddressor()
{
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  return &static Log.conversationBridge;
}

uint64_t static Logger.conversationBridge.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.executor.getter(&one-time initialization token for conversationBridge, MEMORY[0x1E4FBD360], (uint64_t)static Logger.conversationBridge, a1);
}

uint64_t one-time initialization function for insightRequestSummaryLogger()
{
  uint64_t v0 = type metadata accessor for InsightRequestSummaryLogger();
  __swift_allocate_value_buffer(v0, static Logger.insightRequestSummaryLogger);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.insightRequestSummaryLogger);
  type metadata accessor for OS_os_log();
  OS_os_log.init(subsystem:category:)();
  return Logger.init(_:)();
}

uint64_t static Logger.insightRequestSummaryLogger.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for insightRequestSummaryLogger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for InsightRequestSummaryLogger();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static Logger.insightRequestSummaryLogger);

  return outlined init with copy of InsightRequestSummaryLogger(v3, a1);
}

uint64_t Logger.makeSignpostID()()
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  id v0 = (id)static Log.executor;

  return OSSignpostID.init(log:)();
}

uint64_t static Logger.begin(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Log.end(_:_:)(a1, a2, a3, a4, MEMORY[0x1E4FBD3A0]);
}

uint64_t static Logger.end(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Log.end(_:_:)(a1, a2, a3, a4, MEMORY[0x1E4FBD398]);
}

uint64_t static Log.end(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  a5();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }

  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t one-time initialization function for executor()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v4, static Signposter.executor);
  __swift_project_value_buffer(v4, (uint64_t)static Signposter.executor);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v5 = __swift_project_value_buffer(v0, (uint64_t)static Logger.executor);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSSignposter.init(logger:)();
}

{
  uint64_t result;

  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static Log.executor = result;
  return result;
}

uint64_t static Signposter.executor.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.executor.getter(&one-time initialization token for executor, MEMORY[0x1E4FBD330], (uint64_t)static Signposter.executor, a1);
}

uint64_t static Logger.executor.getter@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v7 = a2(0);
  uint64_t v8 = __swift_project_value_buffer(v7, a3);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);

  return v9(a4, v8, v7);
}

uint64_t OSSignposter.beginIntervalTelemetryEnabled(_:id:)(const char *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for OSSignpostID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_signpost_id_t v11 = OSSignposter.logHandle.getter();
  int v12 = static os_signpost_type_t.begin.getter();
  uint64_t result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
  {

    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a4, v7);
LABEL_11:
    type metadata accessor for OSSignpostIntervalState();
    swift_allocObject();
    return OSSignpostIntervalState.init(id:isOpen:)();
  }
  HIDWORD(v18) = v12;
  if ((a3 & 1) == 0)
  {
    if (a1)
    {
      uint64_t v14 = a4;
LABEL_10:
      uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
      v15(v10, v14, v7);
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      os_signpost_id_t v17 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_1B9C64000, v11, BYTE4(v18), v17, a1, "enableTelemetry=YES", v16, 2u);
      MEMORY[0x1BA9E48C0](v16, -1, -1);

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      v15(v10, v14, v7);
      goto LABEL_11;
    }
    __break(1u);
    goto LABEL_13;
  }
  if ((unint64_t)a1 >> 32)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (a1 >> 11 != 27)
  {
    if (a1 >> 16 <= 0x10)
    {
      uint64_t v14 = a4;
      a1 = &v19;
      goto LABEL_10;
    }
    goto LABEL_14;
  }
LABEL_15:
  __break(1u);
  return result;
}

void OSSignposter.withIntervalSignpostTelemetryEnabled<A>(_:id:around:)(const char *a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v9 = a1;
  if ((a3 & 1) == 0)
  {
    if (a1) {
      goto LABEL_8;
    }
    __break(1u);
  }
  if ((unint64_t)a1 >> 32)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (a1 >> 11 == 27)
  {
LABEL_13:
    __break(1u);
    return;
  }
  if (a1 >> 16 > 0x10)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v9 = &v11;
LABEL_8:
  uint64_t v10 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v10 = 0;
  closure #1 in OSSignposter.withIntervalSignpost<A>(_:id:_:around:)(v10, 2u, v5, a4, v9, "enableTelemetry=YES", a5);
  if (!v6) {
    MEMORY[0x1BA9E48C0](v10, -1, -1);
  }
}

id static Log.executor.getter()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for executor, (void **)&static Log.executor);
}

uint64_t one-time initialization function for ace()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static Log.ace = result;
  return result;
}

id static Log.ace.getter()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for ace, (void **)&static Log.ace);
}

uint64_t one-time initialization function for instrumentation()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static Log.instrumentation = result;
  return result;
}

id static Log.instrumentation.getter()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for instrumentation, (void **)&static Log.instrumentation);
}

uint64_t one-time initialization function for conversationBridge()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static Log.conversationBridge = result;
  return result;
}

id static Log.conversationBridge.getter()
{
  return static DeviceContextHelper.legacyNLContextKey.getter(&one-time initialization token for conversationBridge, (void **)&static Log.conversationBridge);
}

uint64_t (*static Log.begin<A>(with:andWrap:)(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t a1), uint64_t (*a5)(uint64_t a1), uint64_t a6))(uint64_t a1)
{
  uint64_t v31 = a2;
  uint64_t v32 = a6;
  uint64_t v10 = type metadata accessor for OSSignpostID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v29 - v15;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  os_signpost_id_t v17 = (void *)static Log.executor;
  if (OS_os_log.signpostsEnabled.getter())
  {
    id v18 = v17;
    OSSignpostID.init(log:)();
    static os_signpost_type_t.begin.getter();
    uint64_t v19 = v10;
    uint64_t v20 = a1;
    uint64_t v21 = v31;
    os_signpost(_:dso:log:name:signpostID:)();
    uint64_t v29 = a4;
    uint64_t v30 = a5;
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    uint64_t v23 = v19;
    v22(v14, v16, v19);
    unint64_t v24 = (*(unsigned __int8 *)(v11 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = v32;
    *(void *)(v25 + 24) = v20;
    *(void *)(v25 + 32) = v21;
    *(unsigned char *)(v25 + 40) = a3;
    uint64_t v26 = v30;
    v22((char *)(v25 + v24), v14, v23);
    uint64_t v27 = (uint64_t (**)(uint64_t))(v25 + ((v12 + v24 + 7) & 0xFFFFFFFFFFFFFFF8));
    *uint64_t v27 = v29;
    v27[1] = v26;
    a4 = partial apply for closure #1 in static Log.begin<A>(with:andWrap:);
  }
  swift_retain();
  return a4;
}

uint64_t closure #1 in static Log.begin<A>(with:andWrap:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.executor);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    os_signpost_id_t v17 = a6;
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v18 = v12;
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v13 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v9, v10, "Signposted Completion called %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v12, -1, -1);
    uint64_t v15 = v11;
    a6 = v17;
    MEMORY[0x1BA9E48C0](v15, -1, -1);
  }

  static os_signpost_type_t.end.getter();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  os_signpost(_:dso:log:name:signpostID:)();
  return a6(a1);
}

uint64_t (*static Log.logAFAnalytics<A>(startEvent:endEvent:andWrap:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1)
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 134218240;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v11, v12, "AFAnalytics log start : AFAnalyticsEventType %ld - %ld", (uint8_t *)v13, 0x16u);
    MEMORY[0x1BA9E48C0](v13, -1, -1);
  }

  unint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of static Log.logAFAnalytics<A>(startEvent:endEvent:andWrap:));
  unint64_t v15 = specialized _dictionaryUpCast<A, B, C, D>(_:)(v14);
  id v16 = objc_msgSend(self, sel_sharedAnalytics);
  if (v16)
  {
    os_signpost_id_t v17 = v16;
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v15);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v17, sel_logEventWithType_context_, a1, isa);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v19 = (void *)swift_allocObject();
  id v19[2] = a5;
  v19[3] = a1;
  v19[4] = a2;
  v19[5] = v14;
  v19[6] = a3;
  v19[7] = a4;
  swift_retain();
  return partial apply for closure #1 in static Log.logAFAnalytics<A>(startEvent:endEvent:andWrap:);
}

uint64_t closure #1 in static Log.logAFAnalytics<A>(startEvent:endEvent:andWrap:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 134218240;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v10, v11, "AFAnalytics log end : AFAnalyticsEventType %ld - %ld", (uint8_t *)v12, 0x16u);
    MEMORY[0x1BA9E48C0](v12, -1, -1);
  }

  unint64_t v13 = specialized _dictionaryUpCast<A, B, C, D>(_:)(a4);
  id v14 = objc_msgSend(self, sel_sharedAnalytics);
  if (v14)
  {
    unint64_t v15 = v14;
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v13);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v15, sel_logEventWithType_context_, a3, isa);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return a5(a1);
}

const char *static ExecutionBridgeSignposts.commitToCloseTime.getter()
{
  return "CommitToCloseTime";
}

const char *static ExecutionBridgeSignposts.executionBridgeInit.getter()
{
  return "ExecutionBridgeInit";
}

const char *static ExecutionBridgeSignposts.referenceResolutionInitTime.getter()
{
  return "ReferenceResolutionInitTime";
}

const char *static ExecutionBridgeSignposts.correctionsPlatformClientInitTime.getter()
{
  return "CorrectionsPlatformClientInitTime";
}

const char *static ExecutionBridgeSignposts.networkAvailabilityProviderInitTime.getter()
{
  return "NetworkAvailabilityProviderInitTime";
}

char **ExecutionBridgeSignposts.coreTelephonyServiceProviderInitTime.unsafeMutableAddressor()
{
  return &static ExecutionBridgeSignposts.coreTelephonyServiceProviderInitTime;
}

const char *static ExecutionBridgeSignposts.coreTelephonyServiceProviderInitTime.getter()
{
  return "coreTelephonyServiceProviderInitTime";
}

const char *static ExecutionBridgeSignposts.rraasEntityCollectionTime.getter()
{
  return "RRaaSEntityCollectionTime";
}

const char *static ExecutionBridgeSignposts.phoneCallStateQueryTime.getter()
{
  return "PhoneCallStateQueryTime";
}

const char *static ExecutionBridgeSignposts.phoneCallStateQueryTimeout.getter()
{
  return "PhoneCallStateQueryTimeout";
}

void closure #1 in OSSignposter.withIntervalSignpost<A>(_:id:_:around:)(uint8_t *a1, uint32_t a2, uint64_t a3, uint64_t a4, const char *a5, const char *a6, void (*a7)(void))
{
  os_log_type_t v11 = OSSignposter.logHandle.getter();
  os_signpost_type_t v12 = static os_signpost_type_t.begin.getter();
  os_signpost_id_t v13 = OSSignpostID.rawValue.getter();
  id v16 = a5;
  _os_signpost_emit_with_name_impl(&dword_1B9C64000, v11, v12, v13, a5, a6, a1, a2);
  a7();
  if (!v18)
  {
    os_signpost_type_t v14 = static os_signpost_type_t.end.getter();
    os_signpost_id_t v15 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1B9C64000, v11, v14, v15, v16, a6, a1, a2);
  }
}

void specialized Logger.debugF(_:_:_:_:)(uint64_t (*a1)(uint64_t))
{
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  swift_retain_n();
  os_log_type_t v3 = v2;
  os_log_t log = Logger.logObject.getter();
  if (os_log_type_enabled(log, v2))
  {
    uint64_t v4 = swift_slowAlloc();
    os_signpost_id_t v13 = a1;
    uint64_t v5 = swift_slowAlloc();
    uint64_t v15 = v5;
    *(_DWORD *)uint64_t v4 = 136315650;
    uint64_t v6 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 2080;
    uint64_t v8 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v10 = swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 22) = 2080;
    uint64_t v11 = v13(v10);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, log, v3, "%s:%s: %s", (uint8_t *)v4, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v5, -1, -1);
    MEMORY[0x1BA9E48C0](v4, -1, -1);
  }
  else
  {
    swift_release_n();
  }
}

uint64_t specialized static SiriKitRuntimeCrashHelper.logAndCrash(_:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v34 = a4;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  os_signpost_type_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  id v16 = (char *)&v28 - v15;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = __swift_project_value_buffer(v17, (uint64_t)static Logger.executor);
  uint64_t v19 = *(void *)(v17 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v16, v18, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v17);
  outlined init with copy of Logger?((uint64_t)v16, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v14, 1, v17) == 1)
  {
    outlined destroy of Logger?((uint64_t)v14);
  }
  else
  {
    swift_bridgeObjectRetain_n();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    int v31 = v21;
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v32 = a6;
      uint64_t v23 = v22;
      uint64_t v29 = swift_slowAlloc();
      uint64_t v36 = v29;
      *(_DWORD *)uint64_t v23 = 136315650;
      uint64_t v33 = a3;
      uint64_t v24 = StaticString.description.getter();
      uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v36);
      int v30 = a5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2048;
      uint64_t v35 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v20, (os_log_type_t)v31, "FatalError at %s:%lu - %s", (uint8_t *)v23, 0x20u);
      uint64_t v26 = v29;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v26, -1, -1);
      MEMORY[0x1BA9E48C0](v23, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v14, v17);
  }
  static SiriKitLifecycle._logCrashToEventBus(_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1BA014698()
{
  uint64_t v1 = type metadata accessor for OSSignpostID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 41) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return MEMORY[0x1F4186498](v0, v6, v5);
}

uint64_t partial apply for closure #1 in static Log.begin<A>(with:andWrap:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OSSignpostID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  unint64_t v7 = *(uint64_t (**)(void))(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *(unsigned __int8 *)(v1 + 40);

  return closure #1 in static Log.begin<A>(with:andWrap:)(a1, v5, v6, v8, v1 + v4, v7);
}

uint64_t sub_1BA0147F8()
{
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t partial apply for closure #1 in static Log.logAFAnalytics<A>(startEvent:endEvent:andWrap:)(uint64_t a1)
{
  return closure #1 in static Log.logAFAnalytics<A>(startEvent:endEvent:andWrap:)(a1, *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(uint64_t (**)(uint64_t))(v1 + 48));
}

ValueMetadata *type metadata accessor for Logger()
{
  return &type metadata for Logger;
}

ValueMetadata *type metadata accessor for SiriKitRuntimeCrashHelper()
{
  return &type metadata for SiriKitRuntimeCrashHelper;
}

ValueMetadata *type metadata accessor for Signposter()
{
  return &type metadata for Signposter;
}

ValueMetadata *type metadata accessor for Log()
{
  return &type metadata for Log;
}

ValueMetadata *type metadata accessor for ExecutionBridgeSignposts()
{
  return &type metadata for ExecutionBridgeSignposts;
}

void specialized Logger.debugF(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

{
  specialized Logger.debugF(_:_:_:_:)(a1, a2, a3, a4, a5, a6, a7, 0xD000000000000019, 0x80000001BA06F200);
}

{
  specialized Logger.debugF(_:_:_:_:)(a1, a2, a3, a4, a5, a6, a7, 0xD000000000000044, 0x80000001BA06F220);
}

{
  specialized Logger.debugF(_:_:_:_:)(a1, a2, a3, a4, a5, a6, a7, 0xD000000000000020, 0x80000001BA06F270);
}

{
  specialized Logger.debugF(_:_:_:_:)(a1, a2, a3, a4, a5, a6, a7, 0xD000000000000030, 0x80000001BA06F1C0);
}

{
  specialized Logger.debugF(_:_:_:_:)(a1, a2, a3, a4, a5, a6, a7, 0xD000000000000024, 0x80000001BA06F090);
}

{
  specialized Logger.debugF(_:_:_:_:)(a1, a2, a3, a4, a5, a6, a7, 0xD000000000000016, 0x80000001BA06F070);
}

void specialized Logger.debugF(_:_:_:_:)()
{
  os_log_type_t v0 = static os_log_type_t.debug.getter();
  os_log_t log = Logger.logObject.getter();
  if (os_log_type_enabled(log, v0))
  {
    uint64_t v1 = swift_slowAlloc();
    uint64_t v2 = swift_slowAlloc();
    uint64_t v10 = v2;
    *(_DWORD *)uint64_t v1 = 136315650;
    uint64_t v3 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v4, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v1 + 12) = 2080;
    uint64_t v5 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v1 + 22) = 2080;
    _StringGuts.grow(_:)(33);
    v7._object = (void *)0x80000001BA06F2A0;
    v7._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
    String.append(_:)(v7);
    _print_unlocked<A, B>(_:_:)();
    v8._uint64_t countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    String.append(_:)(v8);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, log, v0, "%s:%s: %s", (uint8_t *)v1, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v2, -1, -1);
    MEMORY[0x1BA9E48C0](v1, -1, -1);
  }
  else
  {
  }
}

{
  os_log_type_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  NSObject *log;
  uint64_t v11;
  uint64_t vars8;

  os_log_type_t v0 = static os_log_type_t.debug.getter();
  os_log_t log = Logger.logObject.getter();
  if (os_log_type_enabled(log, v0))
  {
    uint64_t v1 = swift_slowAlloc();
    uint64_t v2 = swift_slowAlloc();
    uint64_t v11 = v2;
    *(_DWORD *)uint64_t v1 = 136315650;
    uint64_t v3 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v4, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v1 + 12) = 2080;
    uint64_t v5 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v1 + 22) = 2080;
    _StringGuts.grow(_:)(70);
    v7._object = (void *)0x80000001BA06F0C0;
    v7._uint64_t countAndFlagsBits = 0xD000000000000044;
    String.append(_:)(v7);
    v8._uint64_t countAndFlagsBits = CNVSchemaCNVExecutionOverrideDecision.description.getter();
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = 0;
    v9._object = (void *)0xE000000000000000;
    String.append(_:)(v9);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, log, v0, "%s:%s: %s", (uint8_t *)v1, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v2, -1, -1);
    MEMORY[0x1BA9E48C0](v1, -1, -1);
  }
  else
  {
  }
}

void specialized Logger.debugF(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  os_log_t log = Logger.logObject.getter();
  if (os_log_type_enabled(log, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v24 = v22;
    *(_DWORD *)uint64_t v10 = 136315650;
    uint64_t v11 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v13 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 22) = 2080;
    _StringGuts.grow(_:)(164);
    v15._uint64_t countAndFlagsBits = 0xD00000000000005CLL;
    v15._object = (void *)0x80000001BA06F110;
    String.append(_:)(v15);
    if (*(unsigned char *)(a8 + 32)) {
      uint64_t v16 = 1702195828;
    }
    else {
      uint64_t v16 = 0x65736C6166;
    }
    if (*(unsigned char *)(a8 + 32)) {
      unint64_t v17 = 0xE400000000000000;
    }
    else {
      unint64_t v17 = 0xE500000000000000;
    }
    unint64_t v18 = v17;
    String.append(_:)(*(Swift::String *)&v16);
    swift_bridgeObjectRelease();
    v19._object = (void *)0x80000001BA06F170;
    v19._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
    String.append(_:)(v19);
    _print_unlocked<A, B>(_:_:)();
    v20._uint64_t countAndFlagsBits = 0xD000000000000023;
    v20._object = (void *)0x80000001BA06F190;
    String.append(_:)(v20);
    _print_unlocked<A, B>(_:_:)();
    v21._uint64_t countAndFlagsBits = 0;
    v21._object = (void *)0xE000000000000000;
    String.append(_:)(v21);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, log, v9, "%s:%s: %s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v22, -1, -1);
    MEMORY[0x1BA9E48C0](v10, -1, -1);
  }
  else
  {
  }
}

void specialized Logger.debugF(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, Swift::String *a8, uint64_t a9, void *a10)
{
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  os_log_t log = Logger.logObject.getter();
  if (os_log_type_enabled(log, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    uint64_t v26 = v24;
    *(_DWORD *)uint64_t v12 = 136315650;
    uint64_t v13 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    uint64_t v15 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 22) = 2080;
    _StringGuts.grow(_:)(27);
    v17._uint64_t countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    String.append(_:)(v17);
    String.append(_:)(a8[1]);
    v18._uint64_t countAndFlagsBits = 0x206B736174203ALL;
    v18._object = (void *)0xE700000000000000;
    String.append(_:)(v18);
    v19._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    v20._uint64_t countAndFlagsBits = 0x6520776572687420;
    v20._object = (void *)0xEE00203A726F7272;
    String.append(_:)(v20);
    id v21 = a10;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error);
    v22._uint64_t countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._uint64_t countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    String.append(_:)(v23);
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, log, v11, "%s:%s: %s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v24, -1, -1);
    MEMORY[0x1BA9E48C0](v12, -1, -1);
  }
  else
  {
  }
}

void specialized Logger.debugF(_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9)
{
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  os_log_t log = Logger.logObject.getter();
  if (os_log_type_enabled(log, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v18 = v12;
    *(_DWORD *)uint64_t v11 = 136315650;
    uint64_t v13 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    uint64_t v15 = StaticString.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 22) = 2080;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a8, a9, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, log, v10, "%s:%s: %s", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v12, -1, -1);
    MEMORY[0x1BA9E48C0](v11, -1, -1);
  }
  else
  {
  }
}

uint64_t sub_1BA0157F0()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t outlined init with copy of Logger?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Logger?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Logger?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t SiriKitRuntimeState.__allocating_init(customEventSender:rrClient:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  SiriKitRuntimeState.init(customEventSender:rrClient:)(a1, a2);
  return v4;
}

Swift::Void __swiftcall SiriKitRuntimeState.invalidateCurrentTurn()()
{
  uint64_t v1 = v0 + 16;
  swift_beginAccess();
  outlined init with copy of ReferenceResolutionClientProtocol?(v0 + 16, (uint64_t)&v7, &demangling cache variable for type metadata for ConversationTurnState?);
  if (*((void *)&v8 + 1))
  {
    outlined init with take of ReferenceResolutionClientProtocol(&v7, (uint64_t)v10);
    uint64_t v2 = v11;
    uint64_t v3 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    uint64_t v4 = *(os_unfair_lock_s **)((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 56))(v2, v3) + 152);
    uint64_t v5 = v4 + 4;
    unint64_t v6 = v4 + 5;
    os_unfair_lock_lock(v4 + 5);
    closure #1 in AceServiceInvokerImpl.invalidate()(v5);
    os_unfair_lock_unlock(v6);
    AceServiceInvokerImpl.cancelPendingCommands()();
    swift_release();
    uint64_t v9 = 0;
    long long v7 = 0u;
    long long v8 = 0u;
    swift_beginAccess();
    outlined assign with take of ConversationTurnState?((uint64_t)&v7, v1);
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v10);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v7, &demangling cache variable for type metadata for ConversationTurnState?);
  }
}

Swift::Void __swiftcall SiriKitRuntimeState.reset()()
{
  SiriKitRuntimeState.invalidateCurrentTurn()();
  SiriKitRuntimeState.taskService.getter();
  TaskService.onTurnInvalidated()();

  swift_release();
}

void *SiriKitRuntimeState.taskService.getter()
{
  if (*(void *)(v0 + 136))
  {
    uint64_t v1 = *(void **)(v0 + 136);
  }
  else
  {
    type metadata accessor for TaskService();
    uint64_t v1 = (void *)swift_allocObject();
    v1[2] = closure #1 in default argument 1 of TaskService.init(initialTask:taskIdGenerator:);
    v1[3] = 0;
    v1[4] = MEMORY[0x1E4FBC860];
    *(void *)(v0 + 136) = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

uint64_t SiriKitRuntimeState.makeNewTurn(requestContextData:executionRequestId:rootRequestId:sessionId:invocationState:conversationLoggingId:bridge:scopedRRData:invokedByPeerToPeerEORR:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, unint64_t a12, unsigned __int8 a13)
{
  uint64_t v14 = v13;
  uint64_t v31 = a8;
  uint64_t v33 = a7;
  uint64_t v32 = a5;
  uint64_t v38 = a9;
  uint64_t v39 = a4;
  uint64_t v37 = a2;
  int v36 = a13;
  uint64_t v34 = a11;
  id v35 = a1;
  uint64_t v30 = a10;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v18 = MEMORY[0x1F4188790](v17 - 8);
  Swift::String v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  Swift::String v22 = (char *)&v30 - v21;
  SiriKitRuntimeState.invalidateCurrentTurn()();
  SiriKitRuntimeState.taskService.getter();
  TaskService.onNewTurn()();
  swift_release();
  outlined init with copy of ReferenceResolutionClientProtocol?(a6, (uint64_t)v22, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  Swift::String v23 = SiriKitRuntimeState.taskService.getter();
  outlined init with copy of ReferenceResolutionClientProtocol?(v31, (uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with copy of ReferenceResolutionClientProtocol(v33, (uint64_t)v42);
  outlined init with copy of ReferenceResolutionClientProtocol?(v14 + 56, (uint64_t)v41, &demangling cache variable for type metadata for SiriKitEventSending?);
  outlined init with copy of ReferenceResolutionClientProtocol(v14 + 96, (uint64_t)v40);
  uint64_t v24 = type metadata accessor for ConversationTurnStateImpl();
  swift_allocObject();
  id v25 = v35;
  uint64_t v26 = v34;
  outlined copy of Data?(v34, a12);
  uint64_t v27 = ConversationTurnStateImpl.init(bridge:executionRequestId:rootRequestId:sessionId:taskService:conversationLoggingId:invocationState:customEventSender:requestContextData:invokedByPeerToPeerEORR:rrClient:scopedRRData:)(v30, v37, a3, v39, v32, (uint64_t)v22, (uint64_t)v23, (uint64_t)v20, v42, (uint64_t)v41, v25, v36, (uint64_t)v40, v26, a12);
  ConversationTurnStateImpl.setSiriKitFlowGlobals()();
  v42[3] = v24;
  v42[4] = &protocol witness table for ConversationTurnStateImpl;
  v42[0] = v27;
  swift_beginAccess();
  swift_retain();
  outlined assign with take of ConversationTurnState?((uint64_t)v42, v14 + 16);
  uint64_t result = swift_endAccess();
  uint64_t v29 = v38;
  v38[3] = v24;
  v29[4] = &protocol witness table for ConversationTurnStateImpl;
  *uint64_t v29 = v27;
  return result;
}

uint64_t SiriKitRuntimeState.init(customEventSender:rrClient:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  *(void *)(v2 + 136) = 0;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(void *)(v2 + 48) = 0;
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, v2 + 56, &demangling cache variable for type metadata for SiriKitEventSending?);
  outlined init with copy of ReferenceResolutionClientProtocol?(a2, (uint64_t)&v9, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  if (v10)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(a2, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
    outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for SiriKitEventSending?);
    outlined init with take of ReferenceResolutionClientProtocol(&v9, (uint64_t)&v11);
  }
  else
  {
    uint64_t v6 = type metadata accessor for ReferenceResolutionClient();
    uint64_t v7 = ReferenceResolutionClient.__allocating_init()();
    uint64_t v12 = v6;
    uint64_t v13 = MEMORY[0x1E4FA1F98];
    *(void *)&long long v11 = v7;
    outlined destroy of ReferenceResolutionClientProtocol?(a2, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
    outlined destroy of ReferenceResolutionClientProtocol?(a1, &demangling cache variable for type metadata for SiriKitEventSending?);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v9, &demangling cache variable for type metadata for ReferenceResolutionClientProtocol?);
  }
  outlined init with take of ReferenceResolutionClientProtocol(&v11, v3 + 96);
  return v3;
}

uint64_t outlined assign with take of ConversationTurnState?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ConversationTurnState?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t SiriKitRuntimeState.taskService.setter(uint64_t a1)
{
  *(void *)(v1 + 136) = a1;
  return swift_release();
}

uint64_t (*SiriKitRuntimeState.taskService.modify(void *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = SiriKitRuntimeState.taskService.getter();
  return SiriKitRuntimeState.taskService.modify;
}

uint64_t SiriKitRuntimeState.taskService.modify(void *a1)
{
  *(void *)(a1[1] + 136) = *a1;
  return swift_release();
}

uint64_t ConversationTurnStateImpl.setSiriKitFlowGlobals()()
{
  uint64_t v8 = *v0;
  long long v9 = &protocol witness table for ConversationTurnStateImpl;
  *(void *)&long long v7 = v0;
  type metadata accessor for ConversationTurnStateImpl.CommandHandler();
  uint64_t v1 = swift_allocObject();
  outlined init with take of ReferenceResolutionClientProtocol(&v7, v1 + 16);
  uint64_t v2 = *(void **)(*(void *)(*(uint64_t *)((char *)v0
                                         + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_aceServiceInvoker)
                            + 32)
                + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_peerInfo);
  uint64_t v3 = type metadata accessor for PeerInfoProvider();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v2;
  uint64_t v8 = v3;
  long long v9 = (_UNKNOWN **)lazy protocol witness table accessor for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl(&lazy protocol witness table cache variable for type PeerInfoProvider and conformance PeerInfoProvider, (void (*)(uint64_t))type metadata accessor for PeerInfoProvider);
  *(void *)&long long v7 = v4;
  lazy protocol witness table accessor for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl(&lazy protocol witness table cache variable for type ConversationTurnStateImpl.CommandHandler and conformance ConversationTurnStateImpl.CommandHandler, (void (*)(uint64_t))type metadata accessor for ConversationTurnStateImpl.CommandHandler);
  swift_retain();
  id v5 = v2;
  SiriKitCommandHandler.notifyBegin(peerInfo:)();
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v7, &demangling cache variable for type metadata for PeerInfoProviding?);
  return swift_release();
}

uint64_t SiriKitRuntimeState.deinit()
{
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for ConversationTurnState?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for SiriKitEventSending?);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
  swift_release();
  return v0;
}

uint64_t SiriKitRuntimeState.__deallocating_deinit()
{
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 16, &demangling cache variable for type metadata for ConversationTurnState?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + 56, &demangling cache variable for type metadata for SiriKitEventSending?);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 96);
  swift_release();

  return swift_deallocClassInstance();
}

void *ConversationTurnStateImpl.init(bridge:executionRequestId:rootRequestId:sessionId:taskService:conversationLoggingId:invocationState:customEventSender:requestContextData:invokedByPeerToPeerEORR:rrClient:scopedRRData:)(uint64_t a1, uint64_t a2, id a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, char a12, uint64_t a13, uint64_t a14, unint64_t a15)
{
  unint64_t v16 = v15;
  uint64_t v158 = a7;
  uint64_t v161 = a5;
  id v160 = a3;
  unint64_t v171 = a15;
  uint64_t v170 = a14;
  uint64_t v151 = *v16;
  uint64_t v24 = type metadata accessor for Restrictions();
  MEMORY[0x1F4188790](v24 - 8);
  int64_t v155 = (char *)&object - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BargeInContext?);
  MEMORY[0x1F4188790](v26 - 8);
  uint64_t v169 = (uint64_t)&object - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
  MEMORY[0x1F4188790](v28 - 8);
  uint64_t v167 = (uint64_t)&object - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for SiriVoiceGender();
  MEMORY[0x1F4188790](v30 - 8);
  uint64_t v168 = (uint64_t)&object - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for Locale();
  MEMORY[0x1F4188790](v32 - 8);
  uint64_t v166 = (uint64_t)&object - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for MultiUserState();
  MEMORY[0x1F4188790](v34 - 8);
  uint64_t v165 = (uint64_t)&object - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for DeviceIdiom();
  MEMORY[0x1F4188790](v36 - 8);
  uint64_t v159 = (uint64_t)&object - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for InteractionType();
  MEMORY[0x1F4188790](v38 - 8);
  uint64_t v164 = (uint64_t)&object - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for InputOrigin();
  MEMORY[0x1F4188790](v40 - 8);
  uint64_t v163 = (uint64_t)&object - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)((char *)v16
            + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_bridge) = a1;
  uint64_t v153 = a2;
  v16[2] = a2;
  v16[3] = a3;
  uint64_t v154 = a4;
  v16[4] = a4;
  v16[5] = a5;
  uint64_t v157 = a6;
  outlined init with copy of ReferenceResolutionClientProtocol?(a6, (uint64_t)v16+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_sessionId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v156 = a8;
  outlined init with copy of ReferenceResolutionClientProtocol?(a8, (uint64_t)v16+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_conversationLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v42 = type metadata accessor for SharedContextServiceImpl();
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = a1;
  uint64_t v44 = (void *)((char *)v16
                 + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_sharedContextService);
  *(void *)((char *)v16
            + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_sharedContextService
            + 24) = v42;
  v44[4] = lazy protocol witness table accessor for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl(&lazy protocol witness table cache variable for type SharedContextServiceImpl and conformance SharedContextServiceImpl, (void (*)(uint64_t))type metadata accessor for SharedContextServiceImpl);
  *uint64_t v44 = v43;
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a9, (uint64_t)v16+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_invocationState);
  *(void *)((char *)v16
            + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_requestContextData) = a11;
  uint64_t v173 = v16;
  char v45 = (void *)((char *)v16
                 + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_scopedRRData);
  uint64_t v46 = v170;
  unint64_t v47 = v171;
  void *v45 = v170;
  v45[1] = v47;
  uint64_t v48 = a9[3];
  uint64_t v49 = a9[4];
  __swift_project_boxed_opaque_existential_1(a9, v48);
  char v50 = *(uint64_t (**)(uint64_t, uint64_t))(v49 + 136);
  swift_bridgeObjectRetain();
  uint64_t v172 = a1;
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain();
  id v51 = a11;
  outlined copy of Data?(v46, v47);
  unint64_t v52 = (void *)v50(v48, v49);
  uint64_t v53 = v52;
  id v152 = v51;
  if (v52)
  {
    id v54 = objc_msgSend(v52, sel_runLocation);

    if (v54)
    {
      uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v53 = v56;
    }
    else
    {
      uint64_t v55 = 0;
      uint64_t v53 = 0;
    }
  }
  else
  {
    uint64_t v55 = 0;
  }
  uint64_t v174 = a13;
  uint64_t v162 = a10;
  char v57 = specialized static RunLocation.convert(aceRunLocation:)(v55, v53) & 1;
  swift_bridgeObjectRelease();
  uint64_t v58 = a9[3];
  uint64_t v59 = a9[4];
  __swift_project_boxed_opaque_existential_1(a9, v58);
  id v60 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v59 + 136))(v58, v59);
  if (v60
    && (uint64_t v61 = v60,
        id v62 = objc_msgSend(v60, sel_invocationDeviceAssistantId),
        v61,
        v62))
  {
    uint64_t v150 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v64 = v63;
  }
  else
  {
    uint64_t v150 = 0;
    uint64_t v64 = 0;
  }
  uint64_t v65 = a9[3];
  uint64_t v66 = a9[4];
  __swift_project_boxed_opaque_existential_1(a9, v65);
  uint64_t v67 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v66 + 136))(v65, v66);
  if (v67
    && (uint64_t v68 = v67,
        id v69 = objc_msgSend(v67, sel_executionDeviceAssistantId),
        v68,
        v69))
  {
    uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v72 = v71;
  }
  else
  {
    uint64_t v70 = 0;
    uint64_t v72 = 0;
  }
  outlined init with copy of ReferenceResolutionClientProtocol(v174, (uint64_t)&v182);
  uint64_t v73 = type metadata accessor for AceServiceInvokerImpl();
  swift_allocObject();
  uint64_t v74 = v172;
  swift_unknownObjectRetain();
  id v75 = v152;
  *((void *)&v145 + 1) = v70;
  *(void *)&long long v145 = v64;
  uint64_t v76 = (uint64_t)v160;
  id v160 = v75;
  uint64_t v77 = AceServiceInvokerImpl.init(bridge:executionRequestId:rootRequestId:requestContextData:runLocation:invocationDeviceAssistantId:executionDeviceAssistantId:invokedByPeerToPeerEORR:rrClient:)(v74, v153, v76, v154, v161, v75, v57, v150, v145, v72, a12 & 1, (uint64_t)&v182);
  uint64_t v78 = OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_aceServiceInvoker;
  uint64_t v79 = v173;
  *(void *)((char *)v173
            + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_aceServiceInvoker) = v77;
  outlined init with copy of ReferenceResolutionClientProtocol?(v162, (uint64_t)&v180, &demangling cache variable for type metadata for SiriKitEventSending?);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)a9, (uint64_t)v179);
  if (v181)
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v179);
    outlined init with take of ReferenceResolutionClientProtocol(&v180, (uint64_t)&v182);
  }
  else
  {
    uint64_t v80 = type metadata accessor for InvocationScopedSiriKitEventSender();
    outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)v179, (uint64_t)&v182);
    uint64_t v81 = v183;
    uint64_t v161 = v184;
    uint64_t v82 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v182, v183);
    uint64_t v178 = v77;
    uint64_t v83 = lazy protocol witness table accessor for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl(&lazy protocol witness table cache variable for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl, (void (*)(uint64_t))type metadata accessor for AceServiceInvokerImpl);
    swift_retain();
    uint64_t v84 = v158;
    swift_retain();
    uint64_t v85 = specialized InvocationScopedSiriKitEventSender.__allocating_init(aceServiceInvoker:taskService:invocationState:)((uint64_t)&v178, v84, v82, v80, v73, v81, v83, v161);
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v182);
    swift_release();
    uint64_t v183 = v80;
    uint64_t v184 = lazy protocol witness table accessor for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl(&lazy protocol witness table cache variable for type InvocationScopedSiriKitEventSender and conformance InvocationScopedSiriKitEventSender, (void (*)(uint64_t))type metadata accessor for InvocationScopedSiriKitEventSender);
    *(void *)&long long v182 = v85;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v179);
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v180, &demangling cache variable for type metadata for SiriKitEventSending?);
  }
  outlined init with take of ReferenceResolutionClientProtocol(&v182, (uint64_t)v79+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_eventSender);
  outlined init with copy of ReferenceResolutionClientProtocol(v174, (uint64_t)v79+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_rrClient);
  static AuthenticationStateImpl.from(invocationState:)(a9, (uint64_t)&v178);
  uint64_t v86 = *(void **)(*(void *)(*(void *)((char *)v79 + v78) + 32)
                 + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_peerInfo);
  type metadata accessor for PeerInfoProvider();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = v86;
  uint64_t v88 = a9[3];
  uint64_t v89 = a9[4];
  __swift_project_boxed_opaque_existential_1(a9, v88);
  Class v90 = *(void (**)(uint64_t, uint64_t))(v89 + 24);
  id v91 = v86;
  v90(v88, v89);
  uint64_t v92 = a9[3];
  uint64_t v93 = a9[4];
  __swift_project_boxed_opaque_existential_1(a9, v92);
  (*(void (**)(uint64_t, uint64_t))(v93 + 32))(v92, v93);
  uint64_t v161 = inited;
  if (v86 && (id v94 = objc_msgSend(v91, sel_userInterfaceIdiom)) != 0)
  {
    uint64_t v95 = v94;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    DeviceIdiom.init(aceValue:)();
  }
  else
  {
    type metadata accessor for SiriEnvironment();
    static SiriEnvironment.default.getter();
    SiriEnvironment.currentDevice.getter();
    swift_release();
    CurrentDevice.localDeviceIdiom.getter();
    swift_release();
  }
  uint64_t v96 = v151;
  uint64_t v97 = a9[3];
  uint64_t v98 = a9[4];
  __swift_project_boxed_opaque_existential_1(a9, v97);
  (*(void (**)(uint64_t, uint64_t))(v98 + 64))(v97, v98);
  uint64_t v99 = a9[3];
  uint64_t v100 = a9[4];
  __swift_project_boxed_opaque_existential_1(a9, v99);
  (*(void (**)(uint64_t, uint64_t))(v100 + 120))(v99, v100);
  uint64_t v101 = a9[3];
  uint64_t v102 = a9[4];
  __swift_project_boxed_opaque_existential_1(a9, v101);
  (*(void (**)(uint64_t, uint64_t))(v102 + 128))(v101, v102);
  uint64_t v103 = a9[3];
  uint64_t v104 = a9[4];
  __swift_project_boxed_opaque_existential_1(a9, v103);
  LODWORD(v154) = (*(uint64_t (**)(uint64_t, uint64_t))(v104 + 80))(v103, v104);
  uint64_t v105 = a9[3];
  uint64_t v106 = a9[4];
  __swift_project_boxed_opaque_existential_1(a9, v105);
  LODWORD(v153) = (*(uint64_t (**)(uint64_t, uint64_t))(v106 + 88))(v105, v106);
  uint64_t v107 = a9[3];
  uint64_t v108 = a9[4];
  __swift_project_boxed_opaque_existential_1(a9, v107);
  LODWORD(v152) = (*(uint64_t (**)(uint64_t, uint64_t))(v108 + 96))(v107, v108);
  uint64_t v109 = a9[3];
  uint64_t v110 = a9[4];
  __swift_project_boxed_opaque_existential_1(a9, v109);
  LODWORD(v151) = (*(uint64_t (**)(uint64_t, uint64_t))(v110 + 112))(v109, v110);
  uint64_t v111 = swift_allocObject();
  id v112 = v160;
  *(void *)(v111 + 16) = v160;
  *(void *)(v111 + 24) = v96;
  uint64_t v113 = a9[3];
  uint64_t v114 = a9[4];
  __swift_project_boxed_opaque_existential_1(a9, v113);
  unint64_t v115 = *(uint64_t (**)(uint64_t, uint64_t))(v114 + 72);
  uint64_t v116 = v112;
  id v117 = (id)v115(v113, v114);
  uint64_t v119 = v118;
  uint64_t v120 = a9[3];
  uint64_t v121 = a9[4];
  __swift_project_boxed_opaque_existential_1(a9, v120);
  uint64_t v122 = (*(uint64_t (**)(uint64_t, uint64_t))(v121 + 160))(v120, v121);
  uint64_t v124 = v123;
  uint64_t v125 = a9[3];
  uint64_t v126 = a9[4];
  __swift_project_boxed_opaque_existential_1(a9, v125);
  (*(void (**)(uint64_t, uint64_t))(v126 + 168))(v125, v126);
  uint64_t v127 = a9[3];
  uint64_t v128 = a9[4];
  __swift_project_boxed_opaque_existential_1(a9, v127);
  (*(void (**)(uint64_t, uint64_t))(v128 + 176))(v127, v128);
  Swift::String_optional v129 = PeerInfoProvider.getPeerName()();
  os_log_type_t v130 = *(void **)&v116[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_endpointInfo];
  id v160 = v117;
  uint64_t v150 = v119;
  uint64_t v149 = v122;
  uint64_t v148 = v124;
  uint64_t countAndFlagsBits = v129.value._countAndFlagsBits;
  object = v129.value._object;
  if (v130
    && (id v131 = objc_msgSend(v130, sel_identifier, object, countAndFlagsBits, v148, v149, v150)) != 0)
  {
    uint64_t v132 = v131;
    uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v135 = v134;
  }
  else
  {
    uint64_t v133 = 0;
    uint64_t v135 = 0;
  }
  uint64_t v136 = a9[3];
  uint64_t v137 = a9[4];
  __swift_project_boxed_opaque_existential_1(a9, v136);
  uint64_t v138 = (uint64_t)v155;
  (*(void (**)(uint64_t, uint64_t))(v137 + 192))(v136, v137);
  outlined init with copy of ReferenceResolutionClientProtocol((uint64_t)&v178, (uint64_t)&v175);
  unsigned __int8 v139 = v116[OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceShowingLockScreen];
  uint64_t v140 = type metadata accessor for DefaultDeviceState();
  swift_allocObject();
  uint64_t v141 = DefaultDeviceState.init(inputOrigin:interactionType:renderDeviceIdiom:multiUserState:siriLocale:siriVoiceGender:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isDirectAction:isLockedWithPasscodeClosure:sessionHandOffContinuityID:preferencesLanguageCode:personalDomainsAuthenticationMode:bargeInContext:peerName:endpointId:restrictedCommands:authenticationState:isDeviceShowingLockScreen:)(v163, v164, v159, v165, v166, v168, v154 & 1, v153 & 1, v152 & 1, v151 & 1, (uint64_t (*)())partial apply for closure #1 in ConversationTurnStateImpl.init(bridge:executionRequestId:rootRequestId:sessionId:taskService:conversationLoggingId:invocationState:customEventSender:requestContextData:invokedByPeerToPeerEORR:rrClient:scopedRRData:), (uint64_t (*)())v111, (uint64_t)v160, v150, v149, v148, v167, v169, countAndFlagsBits,
           (uint64_t)object,
           v133,
           v135,
           v138,
           &v175,
           v139);
  uint64_t v176 = v140;
  uint64_t v177 = lazy protocol witness table accessor for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl(&lazy protocol witness table cache variable for type DefaultDeviceState and conformance DefaultDeviceState, (void (*)(uint64_t))type metadata accessor for DefaultDeviceState);
  outlined consume of Data?(v170, v171);
  swift_unknownObjectRelease();
  swift_release();

  *(void *)&long long v175 = v141;
  __swift_destroy_boxed_opaque_existential_1Tm(v174);
  outlined destroy of ReferenceResolutionClientProtocol?(v162, &demangling cache variable for type metadata for SiriKitEventSending?);
  outlined destroy of ReferenceResolutionClientProtocol?(v156, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?(v157, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v178);
  uint64_t v142 = v173;
  outlined init with take of ReferenceResolutionClientProtocol(&v175, (uint64_t)v173+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_deviceState);
  uint64_t v143 = v161;
  swift_setDeallocating();

  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a9);
  return v142;
}

uint64_t ConversationTurnStateImpl.CommandHandler.__deallocating_deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for SiriKitCommandHandler.deviceState.getter in conformance ConversationTurnStateImpl.CommandHandler()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  uint64_t v2 = *(void *)(*(void *)v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)v0 + 16), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 48))(v1, v2);
}

uint64_t protocol witness for SiriKitCommandHandler.aceServiceInvoker.getter in conformance ConversationTurnStateImpl.CommandHandler@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 40);
  uint64_t v4 = *(void *)(*(void *)v1 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)v1 + 16), v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 56))(v3, v4);
  a1[3] = type metadata accessor for AceServiceInvokerImpl();
  uint64_t result = lazy protocol witness table accessor for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl(&lazy protocol witness table cache variable for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl, (void (*)(uint64_t))type metadata accessor for AceServiceInvokerImpl);
  a1[4] = result;
  *a1 = v5;
  return result;
}

uint64_t protocol witness for SiriKitCommandHandler.sharedContextService.getter in conformance ConversationTurnStateImpl.CommandHandler()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  uint64_t v2 = *(void *)(*(void *)v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)v0 + 16), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 64))(v1, v2);
}

uint64_t protocol witness for SiriKitCommandHandler.eventSender.getter in conformance ConversationTurnStateImpl.CommandHandler()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  uint64_t v2 = *(void *)(*(void *)v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)v0 + 16), v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 72))(v1, v2);
}

uint64_t protocol witness for SiriKitCommandHandler.flowContextPublisher.getter in conformance ConversationTurnStateImpl.CommandHandler()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  uint64_t v2 = *(void *)(*(void *)v0 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(*(void *)v0 + 16), v1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 56))(v1, v2);
  lazy protocol witness table accessor for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl(&lazy protocol witness table cache variable for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl, (void (*)(uint64_t))type metadata accessor for AceServiceInvokerImpl);
  return v3;
}

uint64_t ConversationTurnStateImpl.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_sessionId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined destroy of ReferenceResolutionClientProtocol?(v0+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_conversationLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_invocationState);
  __swift_destroy_boxed_opaque_existential_1Tm(v0+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_sharedContextService);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_eventSender);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_deviceState);
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_requestContextData));
  outlined consume of Data?(*(void *)(v0+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_scopedRRData), *(void *)(v0+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_scopedRRData+ 8));
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_rrClient);
  return v0;
}

uint64_t ConversationTurnStateImpl.__deallocating_deinit()
{
  ConversationTurnStateImpl.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for ConversationTurnState.rootRequestId.getter in conformance ConversationTurnStateImpl()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for ConversationTurnState.sessionId.getter in conformance ConversationTurnStateImpl@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(*v1+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_sessionId, a1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t protocol witness for ConversationTurnState.conversationLoggingId.getter in conformance ConversationTurnStateImpl@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol?(*v1+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_conversationLoggingId, a1, (uint64_t *)&demangling cache variable for type metadata for UUID?);
}

uint64_t protocol witness for ConversationTurnState.invocationState.getter in conformance ConversationTurnStateImpl@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(*v1+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_invocationState, a1);
}

uint64_t protocol witness for ConversationTurnState.deviceState.getter in conformance ConversationTurnStateImpl@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(*v1+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_deviceState, a1);
}

uint64_t protocol witness for ConversationTurnState.aceServiceInvoker.getter in conformance ConversationTurnStateImpl()
{
  return swift_retain();
}

uint64_t protocol witness for ConversationTurnState.sharedContextService.getter in conformance ConversationTurnStateImpl@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(*v1+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_sharedContextService, a1);
}

uint64_t protocol witness for ConversationTurnState.eventSender.getter in conformance ConversationTurnStateImpl@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of ReferenceResolutionClientProtocol(*v1+ OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_eventSender, a1);
}

id protocol witness for ConversationTurnState.requestContextData.getter in conformance ConversationTurnStateImpl()
{
  return objc_retain(*(id *)(*v0
                           + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_requestContextData));
}

uint64_t protocol witness for ConversationTurnState.scopedRRData.getter in conformance ConversationTurnStateImpl()
{
  uint64_t v1 = *v0
     + OBJC_IVAR____TtC14SiriKitRuntimeP33_FB63CECFE10715AC1233F5DEB969132D25ConversationTurnStateImpl_scopedRRData;
  uint64_t v2 = *(void *)v1;
  outlined copy of Data?(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t protocol witness for ConversationTurnState.bridge.getter in conformance ConversationTurnStateImpl()
{
  return swift_unknownObjectRetain();
}

uint64_t type metadata accessor for ConversationTurnStateImpl()
{
  uint64_t result = type metadata singleton initialization cache for ConversationTurnStateImpl;
  if (!type metadata singleton initialization cache for ConversationTurnStateImpl) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *sub_1BA017768@<X0>(void *a1@<X8>)
{
  uint64_t result = SiriKitRuntimeState.taskService.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1BA017794(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 136) = *a1;
  swift_retain();

  return swift_release();
}

uint64_t type metadata accessor for SiriKitRuntimeState()
{
  return self;
}

uint64_t method lookup function for SiriKitRuntimeState(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SiriKitRuntimeState);
}

uint64_t dispatch thunk of SiriKitRuntimeState.__allocating_init(customEventSender:rrClient:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t ObjC metadata update function for ConversationTurnStateImpl()
{
  return type metadata accessor for ConversationTurnStateImpl();
}

void type metadata completion function for ConversationTurnStateImpl()
{
  type metadata accessor for UUID?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for ConversationTurnStateImpl.CommandHandler()
{
  return self;
}

uint64_t sub_1BA01793C()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

BOOL partial apply for closure #1 in ConversationTurnStateImpl.init(bridge:executionRequestId:rootRequestId:sessionId:taskService:conversationLoggingId:invocationState:customEventSender:requestContextData:invokedByPeerToPeerEORR:rrClient:scopedRRData:)()
{
  if (*(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC14SiriKitRuntime18RequestContextData_isDeviceLocked)) {
    return 1;
  }
  int v2 = MKBGetDeviceLockState();
  return v2 != 3 && v2 != 0;
}

uint64_t lazy protocol witness table accessor for type AceServiceInvokerImpl and conformance AceServiceInvokerImpl(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

SiriKitRuntime::SiriLinkFlowAffinityScorer __swiftcall SiriLinkFlowAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA062AF0;
  uint64_t v1 = 0xD000000000000021;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t SiriLinkFlowAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t specialized SiriLinkFlowAffinityScorer.score(input:environment:)()
{
  uint64_t v158 = type metadata accessor for UsoIdentifier();
  uint64_t v164 = *(char **)(v158 - 8);
  uint64_t v0 = MEMORY[0x1F4188790](v158);
  uint64_t v163 = (char *)&v151 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v0);
  uint64_t v169 = (char *)&v151 - v2;
  uint64_t v162 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  uint64_t v168 = *(void *)(v162 - 8);
  MEMORY[0x1F4188790](v162);
  uint64_t v157 = (char *)&v151 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v167 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Siri_Nlu_External_Parser.ParserIdentifier?, Siri_Nlu_External_Parser.ParserIdentifier?));
  uint64_t v4 = MEMORY[0x1F4188790](v167);
  uint64_t v161 = (uint64_t)&v151 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  unint64_t v171 = (char *)&v151 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v156 = (uint64_t)&v151 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v165 = (uint64_t)&v151 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  id v160 = (char *)&v151 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v155 = (uint64_t)&v151 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v172 = (uint64_t)&v151 - v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v166 = (uint64_t)&v151 - v18;
  uint64_t v19 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v170 = *(void *)(v19 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v19);
  uint64_t v159 = (char *)&v151 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  Swift::String v23 = (char *)&v151 - v22;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v24 - 8);
  uint64_t v26 = (char *)&v151 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for USOParse();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v30 = (char *)&v151 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for Parse();
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  uint64_t v34 = (char *)&v151 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v32 + 88))(v34, v31) != *MEMORY[0x1E4FA1F48])
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)static Logger.executor);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      char v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v45 = 0;
      _os_log_impl(&dword_1B9C64000, v43, v44, "SiriLinkAffinityScorer Got unexpected parse", v45, 2u);
      MEMORY[0x1BA9E48C0](v45, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
    return 2;
  }
  (*(void (**)(char *, uint64_t))(v32 + 96))(v34, v31);
  uint64_t v154 = v28;
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v30, v34, v27);
  uint64_t v35 = USOParse.userParse.getter();
  uint64_t v36 = MEMORY[0x1BA9DE000](v35);
  uint64_t v37 = *(void (**)(char *, uint64_t))(v170 + 8);
  uint64_t v170 = v19;
  v37(v23, v19);
  uint64_t v38 = *(void *)(v36 + 16);
  uint64_t v39 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v40 = *(void *)(v39 - 8);
  if (v38)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v39 - 8) + 16))(v26, v36+ ((*(unsigned __int8 *)(*(void *)(v39 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v39 - 8) + 80)), v39);
    uint64_t v41 = 0;
  }
  else
  {
    uint64_t v41 = 1;
  }
  uint64_t v47 = v172;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v40 + 56))(v26, v41, 1, v39);
  swift_bridgeObjectRelease();
  int v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48))(v26, 1, v39);
  uint64_t v49 = (uint64_t)v171;
  if (v48 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v26, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_17:
    uint64_t v56 = v30;
    uint64_t v57 = v27;
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v58 = type metadata accessor for Logger();
    __swift_project_value_buffer(v58, (uint64_t)static Logger.executor);
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    BOOL v61 = os_log_type_enabled(v59, v60);
    uint64_t v62 = v154;
    if (v61)
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v63 = 0;
      _os_log_impl(&dword_1B9C64000, v59, v60, "SiriLinkAffinityScorer could not extract USO task", v63, 2u);
      MEMORY[0x1BA9E48C0](v63, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v62 + 8))(v56, v57);
    return 0;
  }
  unint64_t v50 = Siri_Nlu_External_UserDialogAct.toUsoTask()();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v26, v39);
  if (!v50) {
    goto LABEL_17;
  }
  unint64_t v153 = v50;
  uint64_t v52 = UsoTask.baseEntityAsString.getter();
  uint64_t v53 = v51;
  uint64_t v152 = v27;
  uint64_t v151 = v30;
  if (v52 == 0xD000000000000013 && v51 == 0x80000001BA06F4C0)
  {
    swift_bridgeObjectRelease();
    uint64_t v54 = v166;
    uint64_t v55 = v170;
    goto LABEL_25;
  }
  char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v54 = v166;
  uint64_t v55 = v170;
  if (v64)
  {
    swift_bridgeObjectRelease();
LABEL_25:
    uint64_t v65 = v159;
    USOParse.userParse.getter();
    uint64_t v170 = Siri_Nlu_External_UserParse.appShortcuts.getter();
    v37(v65, v55);
    USOParse.parserIdentifier.getter();
    uint64_t v66 = *MEMORY[0x1E4FA2788];
    uint64_t v67 = v168;
    uint64_t v68 = *(char **)(v168 + 104);
    uint64_t v69 = v162;
    uint64_t v169 = (char *)(v168 + 104);
    uint64_t v164 = v68;
    ((void (*)(uint64_t, uint64_t, uint64_t))v68)(v47, v66, v162);
    uint64_t v70 = *(char **)(v67 + 56);
    uint64_t v163 = (char *)(v67 + 56);
    uint64_t v159 = v70;
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v70)(v47, 0, 1, v69);
    uint64_t v71 = v49 + *(int *)(v167 + 48);
    outlined init with copy of ReferenceResolutionClientProtocol?(v54, v49, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    outlined init with copy of ReferenceResolutionClientProtocol?(v47, v71, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    uint64_t v72 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v67 + 48);
    if (v72(v49, 1, v69) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v47, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      outlined destroy of ReferenceResolutionClientProtocol?(v54, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      int v73 = v72(v71, 1, v69);
      if (v73 == 1) {
        uint64_t v74 = &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?;
      }
      else {
        uint64_t v74 = &demangling cache variable for type metadata for (Siri_Nlu_External_Parser.ParserIdentifier?, Siri_Nlu_External_Parser.ParserIdentifier?);
      }
      if (v73 == 1) {
        char v75 = -1;
      }
      else {
        char v75 = 0;
      }
      uint64_t v76 = (uint64_t)v160;
      uint64_t v77 = v72;
    }
    else
    {
      uint64_t v78 = v155;
      outlined init with copy of ReferenceResolutionClientProtocol?(v49, v155, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      uint64_t v77 = v72;
      if (v72(v71, 1, v69) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v172, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        outlined destroy of ReferenceResolutionClientProtocol?(v166, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v78, v69);
        char v75 = 0;
        uint64_t v74 = &demangling cache variable for type metadata for (Siri_Nlu_External_Parser.ParserIdentifier?, Siri_Nlu_External_Parser.ParserIdentifier?);
      }
      else
      {
        uint64_t v81 = v168;
        uint64_t v82 = v157;
        (*(void (**)(char *, uint64_t, uint64_t))(v168 + 32))(v157, v71, v69);
        lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier();
        char v75 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v83 = *(void (**)(char *, uint64_t))(v81 + 8);
        uint64_t v84 = v82;
        uint64_t v49 = (uint64_t)v171;
        v83(v84, v69);
        uint64_t v74 = &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?;
        outlined destroy of ReferenceResolutionClientProtocol?(v172, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        outlined destroy of ReferenceResolutionClientProtocol?(v166, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        v83((char *)v78, v69);
      }
      uint64_t v76 = (uint64_t)v160;
    }
    outlined destroy of ReferenceResolutionClientProtocol?(v49, v74);
    USOParse.parserIdentifier.getter();
    uint64_t v85 = v165;
    ((void (*)(uint64_t, void, uint64_t))v164)(v165, *MEMORY[0x1E4FA2778], v69);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v159)(v85, 0, 1, v69);
    uint64_t v86 = v161;
    uint64_t v87 = v161 + *(int *)(v167 + 48);
    outlined init with copy of ReferenceResolutionClientProtocol?(v76, v161, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    outlined init with copy of ReferenceResolutionClientProtocol?(v85, v87, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    if (v77(v86, 1, v69) == 1)
    {
      outlined destroy of ReferenceResolutionClientProtocol?(v85, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      outlined destroy of ReferenceResolutionClientProtocol?(v76, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      int v88 = v77(v87, 1, v69);
      uint64_t v89 = v154;
      if (v88 == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?(v86, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        uint64_t v90 = v170;
LABEL_47:
        if (*(void *)(v90 + 16))
        {
          swift_bridgeObjectRelease();
          if (one-time initialization token for executor != -1) {
            swift_once();
          }
          uint64_t v99 = type metadata accessor for Logger();
          __swift_project_value_buffer(v99, (uint64_t)static Logger.executor);
          uint64_t v100 = Logger.logObject.getter();
          os_log_type_t v101 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v100, v101))
          {
            uint64_t v102 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v102 = 0;
            uint64_t v103 = "SiriLinkAffinityScorer Got auto shortcuts with exact match";
            goto LABEL_58;
          }
          goto LABEL_59;
        }
LABEL_52:
        if (v75)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v104 = *(void *)(v90 + 16);
          swift_bridgeObjectRelease();
          if (!v104)
          {
            if (one-time initialization token for executor != -1) {
              swift_once();
            }
            uint64_t v112 = type metadata accessor for Logger();
            __swift_project_value_buffer(v112, (uint64_t)static Logger.executor);
            uint64_t v113 = Logger.logObject.getter();
            os_log_type_t v114 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v113, v114))
            {
              unint64_t v115 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)unint64_t v115 = 0;
              _os_log_impl(&dword_1B9C64000, v113, v114, "SiriLinkAffinityScorer Got user shortcut", v115, 2u);
              MEMORY[0x1BA9E48C0](v115, -1, -1);
            }
            swift_release();

            (*(void (**)(char *, uint64_t))(v89 + 8))(v151, v152);
            return 4;
          }
        }
        if (one-time initialization token for executor != -1) {
          goto LABEL_120;
        }
        goto LABEL_56;
      }
    }
    else
    {
      uint64_t v91 = v156;
      outlined init with copy of ReferenceResolutionClientProtocol?(v86, v156, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      int v92 = v77(v87, 1, v69);
      uint64_t v89 = v154;
      if (v92 != 1)
      {
        uint64_t v93 = v168;
        char v94 = v75;
        uint64_t v95 = v157;
        (*(void (**)(char *, uint64_t, uint64_t))(v168 + 32))(v157, v87, v69);
        lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier();
        char v96 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v97 = *(void (**)(char *, uint64_t))(v93 + 8);
        uint64_t v98 = v95;
        char v75 = v94;
        uint64_t v89 = v154;
        v97(v98, v69);
        outlined destroy of ReferenceResolutionClientProtocol?(v165, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        outlined destroy of ReferenceResolutionClientProtocol?(v76, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        v97((char *)v91, v69);
        outlined destroy of ReferenceResolutionClientProtocol?(v86, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        uint64_t v90 = v170;
        if ((v96 & 1) == 0) {
          goto LABEL_52;
        }
        goto LABEL_47;
      }
      outlined destroy of ReferenceResolutionClientProtocol?(v165, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      outlined destroy of ReferenceResolutionClientProtocol?(v76, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      (*(void (**)(uint64_t, uint64_t))(v168 + 8))(v91, v69);
    }
    outlined destroy of ReferenceResolutionClientProtocol?(v86, &demangling cache variable for type metadata for (Siri_Nlu_External_Parser.ParserIdentifier?, Siri_Nlu_External_Parser.ParserIdentifier?));
    uint64_t v90 = v170;
    goto LABEL_52;
  }
  if (v52 == 0x535F6E6F6D6D6F63 && v53 == 0xEE00676E69747465)
  {
    swift_bridgeObjectRelease();
    uint64_t v79 = v154;
    uint64_t v80 = v158;
  }
  else
  {
    char v106 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v79 = v154;
    uint64_t v80 = v158;
    if ((v106 & 1) == 0)
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v116 = type metadata accessor for Logger();
      __swift_project_value_buffer(v116, (uint64_t)static Logger.executor);
      id v117 = Logger.logObject.getter();
      os_log_type_t v118 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v117, v118))
      {
        uint64_t v119 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v119 = 0;
        _os_log_impl(&dword_1B9C64000, v117, v118, "SiriLinkAffinityScorer Unsupported base entity", v119, 2u);
        MEMORY[0x1BA9E48C0](v119, -1, -1);
      }
      swift_release();

      goto LABEL_111;
    }
  }
  swift_retain();
  static UsoTask_CodegenConverter.convert(task:)();
  swift_release();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v107 = type metadata accessor for Logger();
  uint64_t v108 = __swift_project_value_buffer(v107, (uint64_t)static Logger.executor);
  uint64_t v109 = Logger.logObject.getter();
  os_log_type_t v110 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v109, v110))
  {
    uint64_t v111 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v111 = 0;
    _os_log_impl(&dword_1B9C64000, v109, v110, "SiriLinkAffinityScorer Enablement request", v111, 2u);
    MEMORY[0x1BA9E48C0](v111, -1, -1);
  }

  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v175, (uint64_t)v173, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v174)
  {
    type metadata accessor for UsoTask_enable_common_Setting();
    if (swift_dynamicCast()) {
      goto LABEL_85;
    }
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v173, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v175, (uint64_t)v173, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v174)
  {
    type metadata accessor for UsoTask_disable_common_Setting();
    if (swift_dynamicCast()) {
      goto LABEL_85;
    }
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v173, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v175, (uint64_t)v173, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v174)
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v173, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_108;
  }
  type metadata accessor for UsoTask_toggle_common_Setting();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_108:
    uint64_t v144 = Logger.logObject.getter();
    os_log_type_t v145 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v144, v145))
    {
      os_log_type_t v146 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v146 = 0;
      _os_log_impl(&dword_1B9C64000, v144, v145, "SiriLinkAffinityScorer Unsupported settings request", v146, 2u);
      MEMORY[0x1BA9E48C0](v146, -1, -1);
    }
    swift_release();

    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v175, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_111:
    (*(void (**)(char *, uint64_t))(v79 + 8))(v151, v152);
    return 0;
  }
LABEL_85:
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_ReferenceTrigger.reference.getter();
  swift_release_n();
  uint64_t v120 = v173[0];
  if (!v173[0]
    || (swift_retain(),
        uint64_t v89 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)(),
        swift_release(),
        !v89))
  {
    uint64_t v138 = Logger.logObject.getter();
    os_log_type_t v139 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v138, v139))
    {
LABEL_106:
      swift_release();

      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v175, (uint64_t *)&demangling cache variable for type metadata for Any?);
      (*(void (**)(char *, uint64_t))(v79 + 8))(v151, v152);
      swift_release();
      return 0;
    }
    uint64_t v140 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v140 = 0;
    uint64_t v141 = "SiriLinkAffinityScorer Could not extract identifiers";
    uint64_t v142 = v138;
    os_log_type_t v143 = v139;
LABEL_105:
    _os_log_impl(&dword_1B9C64000, v142, v143, v141, v140, 2u);
    MEMORY[0x1BA9E48C0](v140, -1, -1);
    goto LABEL_106;
  }
  uint64_t v121 = MEMORY[0x1E4FBC860];
  v173[0] = MEMORY[0x1E4FBC860];
  uint64_t v172 = *(void *)(v89 + 16);
  if (!v172)
  {
LABEL_113:
    swift_bridgeObjectRelease();
    uint64_t v147 = *(void *)(v121 + 16);
    swift_release();
    uint64_t v138 = Logger.logObject.getter();
    os_log_type_t v148 = static os_log_type_t.debug.getter();
    BOOL v149 = os_log_type_enabled(v138, v148);
    if (v147)
    {
      if (v149)
      {
        uint64_t v150 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v150 = 0;
        _os_log_impl(&dword_1B9C64000, v138, v148, "SiriLinkAffinityScorer Got AppShortcuts enablement request", v150, 2u);
        MEMORY[0x1BA9E48C0](v150, -1, -1);
      }
      swift_release();

      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v175, (uint64_t *)&demangling cache variable for type metadata for Any?);
      (*(void (**)(char *, uint64_t))(v79 + 8))(v151, v152);
      swift_release();
      return 2;
    }
    if (!v149) {
      goto LABEL_106;
    }
    uint64_t v140 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v140 = 0;
    os_log_type_t v143 = v148;
    uint64_t v141 = "SiriLinkAffinityScorer Settings request isn't for Link";
    uint64_t v142 = v138;
    goto LABEL_105;
  }
  uint64_t v167 = v120;
  uint64_t v168 = v108;
  unint64_t v122 = 0;
  unint64_t v171 = v164 + 16;
  uint64_t v170 = *MEMORY[0x1E4FA3930];
  uint64_t v123 = (void (**)(char *, char *, uint64_t))(v164 + 32);
  uint64_t v124 = (void (**)(char *, uint64_t))(v164 + 8);
  while (v122 < *(void *)(v89 + 16))
  {
    unint64_t v125 = (v164[80] + 32) & ~(unint64_t)v164[80];
    uint64_t v126 = *((void *)v164 + 9);
    (*((void (**)(char *, unint64_t, uint64_t))v164 + 2))(v169, v89 + v125 + v126 * v122, v80);
    uint64_t v127 = UsoIdentifier.namespace.getter();
    uint64_t v129 = v128;
    uint64_t v130 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    if (v129)
    {
      if (v127 == v130 && v129 == v131)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_98:
        uint64_t v133 = *v123;
        (*v123)(v163, v169, v80);
        uint64_t v134 = v173[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v134 + 16) + 1, 1);
          uint64_t v134 = v173[0];
        }
        unint64_t v136 = *(void *)(v134 + 16);
        unint64_t v135 = *(void *)(v134 + 24);
        if (v136 >= v135 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v135 > 1, v136 + 1, 1);
          uint64_t v134 = v173[0];
        }
        *(void *)(v134 + 16) = v136 + 1;
        unint64_t v137 = v134 + v125 + v136 * v126;
        uint64_t v80 = v158;
        v133((char *)v137, v163, v158);
        v173[0] = v134;
        goto LABEL_91;
      }
      char v132 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v132) {
        goto LABEL_98;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    (*v124)(v169, v80);
LABEL_91:
    if (v172 == ++v122)
    {
      uint64_t v121 = v173[0];
      uint64_t v79 = v154;
      goto LABEL_113;
    }
  }
  __break(1u);
LABEL_120:
  swift_once();
LABEL_56:
  uint64_t v105 = type metadata accessor for Logger();
  __swift_project_value_buffer(v105, (uint64_t)static Logger.executor);
  uint64_t v100 = Logger.logObject.getter();
  os_log_type_t v101 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v100, v101))
  {
    uint64_t v102 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v102 = 0;
    uint64_t v103 = "SiriLinkAffinityScorer Got auto shortcuts with SSU match";
LABEL_58:
    _os_log_impl(&dword_1B9C64000, v100, v101, v103, v102, 2u);
    MEMORY[0x1BA9E48C0](v102, -1, -1);
  }
LABEL_59:
  swift_release();

  (*(void (**)(char *, uint64_t))(v89 + 8))(v151, v152);
  return 2;
}

ValueMetadata *type metadata accessor for SiriLinkFlowAffinityScorer()
{
  return &type metadata for SiriLinkFlowAffinityScorer;
}

SiriKitRuntime::SiriSafariAffinityScorer __swiftcall SiriSafariAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA062D00;
  uint64_t v1 = 0xD000000000000027;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t SiriSafariAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t SiriSafariAffinityScorer.bundleIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*SiriSafariAffinityScorer.bundleIdentifier.modify())()
{
  return destructiveProjectEnumData for AceServiceInvokerImpl.AceSubmitOptions;
}

uint64_t SiriSafariAffinityScorer.score(input:environment:)()
{
  return 0;
}

unint64_t default argument 0 of SiriSafariAffinityScorer.init(bundleIdentifier:)()
{
  return 0xD000000000000027;
}

ValueMetadata *type metadata accessor for SiriSafariAffinityScorer()
{
  return &type metadata for SiriSafariAffinityScorer;
}

uint64_t static SiriSuggestionsBrokerProvider.bootStrapSuggestionsBrokerProvider()()
{
  *(void *)(v1 + 16) = v0;
  return MEMORY[0x1F4188298](static SiriSuggestionsBrokerProvider.bootStrapSuggestionsBrokerProvider(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = v0[2];
  type metadata accessor for SiriSuggestionsBrokerProvider();
  v0[3] = static SiriSuggestionsBrokerProvider.instance.getter();
  uint64_t v2 = swift_allocObject();
  v0[4] = v2;
  *(void *)(v2 + 16) = v1;
  lazy protocol witness table accessor for type SiriSuggestionsBrokerProvider and conformance SiriSuggestionsBrokerProvider(&lazy protocol witness table cache variable for type SiriSuggestionsBrokerProvider and conformance SiriSuggestionsBrokerProvider, MEMORY[0x1E4FA17C0]);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](static SiriSuggestionsBrokerProvider.bootStrapSuggestionsBrokerProvider(), v4, v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  dispatch thunk of SiriSuggestionsBrokerProvider.initialize(initialize:postInit:)();
  swift_release();
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t closure #1 in static SiriSuggestionsBrokerProvider.bootStrapSuggestionsBrokerProvider()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)v68 - v7;
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.executor);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl(&dword_1B9C64000, v10, v11, "loading suggestions broker via SKE bridge...", v12, 2u);
    MEMORY[0x1BA9E48C0](v12, -1, -1);
  }

  id v13 = (id)MEMORY[0x1BA9E3F70]();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(fileURLWithPath:isDirectory:)();
  swift_bridgeObjectRelease();
  URL.appendingPathComponent(_:isDirectory:)();
  (*(void (**)(char *, char *, uint64_t))(v3 + 40))(v8, v6, v2);
  id v14 = objc_allocWithZone(MEMORY[0x1E4F28B50]);
  URL._bridgeToObjectiveC()(v15);
  uint64_t v17 = v16;
  uint64_t v18 = objc_msgSend(v14, sel_initWithURL_, v16);

  if (!v18)
  {
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      uint64_t v73 = a1;
      uint64_t v44 = v43;
      uint64_t v76 = v43;
      *(_DWORD *)uint64_t v42 = 136315138;
      swift_beginAccess();
      lazy protocol witness table accessor for type SiriSuggestionsBrokerProvider and conformance SiriSuggestionsBrokerProvider(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
      uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v18, v41, "suggestions bundle not found on expected path:%s", v42, 0xCu);
      swift_arrayDestroy();
      uint64_t v47 = v44;
      a1 = v73;
      MEMORY[0x1BA9E48C0](v47, -1, -1);
      MEMORY[0x1BA9E48C0](v42, -1, -1);
    }
    goto LABEL_23;
  }
  if (![v18 principalClass])
  {
    int v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      unint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v50 = 0;
      _os_log_impl(&dword_1B9C64000, v48, v49, "suggestions bundle principal class not found", v50, 2u);
      MEMORY[0x1BA9E48C0](v50, -1, -1);
    }

LABEL_23:
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
  uint64_t v71 = v3;
  uint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v72 = ObjCClassMetadata;
  uint64_t v73 = a1;
  if (v22)
  {
    Swift::String v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(void *)&v74[0] = v24;
    os_log_t v70 = v18;
    *(_DWORD *)Swift::String v23 = 136315138;
    uint64_t v25 = _typeName(_:qualified:)();
    uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, (uint64_t *)v74);
    uint64_t v18 = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v20, v21, "found principal class: %s", v23, 0xCu);
    swift_arrayDestroy();
    uint64_t v27 = v24;
    uint64_t ObjCClassMetadata = v72;
    MEMORY[0x1BA9E48C0](v27, -1, -1);
    MEMORY[0x1BA9E48C0](v23, -1, -1);
  }

  uint64_t v28 = swift_conformsToProtocol2();
  if (v28) {
    uint64_t v29 = v28;
  }
  else {
    uint64_t v29 = 0;
  }
  if (v28) {
    uint64_t v30 = ObjCClassMetadata;
  }
  else {
    uint64_t v30 = 0;
  }
  uint64_t v31 = Logger.logObject.getter();
  if (v30)
  {
    os_log_type_t v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v69 = v2;
      uint64_t v34 = (uint8_t *)v33;
      uint64_t v35 = swift_slowAlloc();
      os_log_t v70 = v31;
      uint64_t v36 = v35;
      *(void *)&v74[0] = v35;
      *(_DWORD *)uint64_t v34 = 136315138;
      v68[1] = v29;
      uint64_t v37 = _typeName(_:qualified:)();
      uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, (uint64_t *)v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_t v39 = v70;
      _os_log_impl(&dword_1B9C64000, v70, v32, "successfully instantiated suggestions bundle with principalClass: %s", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v36, -1, -1);
      uint64_t v40 = v34;
      uint64_t v2 = v69;
      MEMORY[0x1BA9E48C0](v40, -1, -1);
    }
    else
    {
    }
    dispatch thunk of static SiriSuggestionsBroker.getInstance()();
    BOOL v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc();
      uint64_t v64 = swift_slowAlloc();
      uint64_t v76 = v64;
      *(_DWORD *)uint64_t v63 = 136315138;
      uint64_t v65 = _typeName(_:qualified:)();
      uint64_t v75 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v61, v62, "successfully called getInstance on bridge principalClass: %s", v63, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v64, -1, -1);
      MEMORY[0x1BA9E48C0](v63, -1, -1);
    }

    uint64_t v67 = v71;
    outlined init with take of ReferenceResolutionClientProtocol(v74, v73);
    return (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v8, v2);
  }
  else
  {
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v52))
    {
      uint64_t v53 = swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      *(void *)&v74[0] = v54;
      *(_DWORD *)uint64_t v53 = 136315394;
      os_log_t v70 = v31;
      uint64_t v55 = _typeName(_:qualified:)();
      uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, (uint64_t *)v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 12) = 2080;
      uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriSuggestionsBroker);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriSuggestionsBroker.Protocol);
      uint64_t v57 = String.init<A>(describing:)();
      uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, (uint64_t *)v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v31 = v70;
      _os_log_impl(&dword_1B9C64000, v70, v52, "principal class %s does not conform to %s", (uint8_t *)v53, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v54, -1, -1);
      MEMORY[0x1BA9E48C0](v53, -1, -1);
    }

    uint64_t v59 = v71;
    os_log_type_t v60 = (_OWORD *)v73;
    *(void *)(v73 + 32) = 0;
    *os_log_type_t v60 = 0u;
    v60[1] = 0u;
    return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v8, v2);
  }
}

uint64_t sub_1BA019EB0()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in static SiriSuggestionsBrokerProvider.bootStrapSuggestionsBrokerProvider()@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in static SiriSuggestionsBrokerProvider.bootStrapSuggestionsBrokerProvider()(a1);
}

uint64_t lazy protocol witness table accessor for type SiriSuggestionsBrokerProvider and conformance SiriSuggestionsBrokerProvider(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

SiriKitRuntime::SiriVideoAffinityScorer __swiftcall SiriVideoAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA062CD0;
  uint64_t v1 = 0xD000000000000026;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t SiriVideoAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t specialized SiriVideoAffinityScorer.score(input:environment:)()
{
  uint64_t v0 = type metadata accessor for Parse();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  int v4 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v3, v0);
  int v5 = *MEMORY[0x1E4FA1F48];
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v4 == v5)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.executor);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v7, v8))
    {
      uint64_t v10 = 0;
      goto LABEL_12;
    }
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_1B9C64000, v7, v8, "SiriVideoAffinityScorer returning .unsupported", v9, 2u);
    uint64_t v10 = 0;
    goto LABEL_10;
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  uint64_t v10 = 2;
  if (os_log_type_enabled(v7, v12))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_1B9C64000, v7, v12, "SiriVideoAffinityScorer not a USO parse, returning .default", v9, 2u);
LABEL_10:
    MEMORY[0x1BA9E48C0](v9, -1, -1);
  }
LABEL_12:

  return v10;
}

ValueMetadata *type metadata accessor for SiriVideoAffinityScorer()
{
  return &type metadata for SiriVideoAffinityScorer;
}

SiriKitRuntime::SocialConversationAffinityScorer __swiftcall SocialConversationAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA062B20;
  uint64_t v1 = 0xD000000000000033;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t SocialConversationAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t specialized SocialConversationAffinityScorer.score(input:environment:)()
{
  uint64_t v0 = type metadata accessor for UsoIdentifier();
  uint64_t v62 = *(void *)(v0 - 8);
  uint64_t v1 = MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v1);
  int v5 = (char *)v52 - v4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  MEMORY[0x1F4188790](v6 - 8);
  BOOL v61 = (char *)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for USOParse();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Parse();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v13 + 88))(v15, v12) != *MEMORY[0x1E4FA1F48])
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.executor);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl(&dword_1B9C64000, v28, v29, "SocialConversationAffinityScorer Got unexpected parse", v30, 2u);
      MEMORY[0x1BA9E48C0](v30, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    return 2;
  }
  (*(void (**)(char *, uint64_t))(v13 + 96))(v15, v12);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, v8);
  if (!specialized static AffinityScorerUtils.getTask(_:)())
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Logger.executor);
    os_log_type_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl(&dword_1B9C64000, v32, v33, "SocialConversationAffinityScorer Could not extract usoTask from parse", v34, 2u);
      MEMORY[0x1BA9E48C0](v34, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    return 2;
  }
  uint64_t v16 = UsoTask.arguments.getter();
  if (!*(void *)(v16 + 16)) {
    goto LABEL_26;
  }
  unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(0x746567726174, 0xE600000000000000);
  if ((v18 & 1) == 0) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v19 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v16) {
      goto LABEL_26;
    }
  }
  else if (!*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_26;
  }
  if ((v19 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1BA9E3990](0, v19);
  }
  else
  {
    if (!*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_66:
      swift_bridgeObjectRetain();
      uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v51) {
        goto LABEL_15;
      }
LABEL_26:
      swift_bridgeObjectRelease();
      goto LABEL_27;
    }
    swift_retain();
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = dispatch thunk of UsoValue.getAsEntity()();
  swift_release();
  if (!v16) {
    goto LABEL_27;
  }
  swift_retain();
  uint64_t v20 = UsoEntity.attributes.getter();
  swift_release();
  if (!*(void *)(v20 + 16)) {
    goto LABEL_26;
  }
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(0x676F6C616964, 0xE600000000000000);
  if ((v22 & 1) == 0) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(*(void *)(v20 + 56) + 8 * v21);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v19 >> 62) {
    goto LABEL_66;
  }
  if (!*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_26;
  }
LABEL_15:
  v52[1] = v16;
  if ((v19 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1BA9E3990](0, v19);
  }
  else
  {
    if (!*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_70:
      swift_once();
LABEL_58:
      uint64_t v47 = type metadata accessor for Logger();
      __swift_project_value_buffer(v47, (uint64_t)static Logger.executor);
      int v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v48, v49))
      {
        unint64_t v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v50 = 0;
        _os_log_impl(&dword_1B9C64000, v48, v49, "SocialConversationAffinityScorer Detected low priority profanity action", v50, 2u);
        MEMORY[0x1BA9E48C0](v50, -1, -1);
      }

      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      return 1;
    }
    swift_retain();
  }
  swift_bridgeObjectRelease();
  uint64_t v23 = dispatch thunk of UsoValue.getUsoIdentifiers()();
  swift_release();
  if (!v23) {
    goto LABEL_27;
  }
  uint64_t v24 = *(void *)(v23 + 16);
  if (!v24)
  {
    uint64_t v40 = 1;
    uint64_t v41 = v62;
LABEL_48:
    uint64_t v42 = (uint64_t)v61;
    goto LABEL_51;
  }
  uint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v62 + 16);
  unint64_t v26 = v23 + ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80));
  unint64_t v58 = (void (**)(char *, uint64_t))(v62 + 8);
  uint64_t v59 = v25;
  uint64_t v60 = v62 + 16;
  uint64_t v56 = *(void *)(v62 + 72);
  v52[0] = v23;
  swift_bridgeObjectRetain();
  uint64_t v57 = "iriSuggestionsSKEBridge.bundle";
  unint64_t v53 = 0x80000001BA06F530;
  uint64_t v55 = (unint64_t)v58 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  while (1)
  {
    v59(v5, v26, v0);
    if (UsoIdentifier.appBundleId.getter() == 0xD000000000000013 && v37 == v53)
    {
      swift_bridgeObjectRelease();
      v59(v3, (unint64_t)v5, v0);
    }
    else
    {
      int v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v59(v3, (unint64_t)v5, v0);
      if ((v54 & 1) == 0) {
        goto LABEL_35;
      }
    }
    uint64_t v38 = UsoIdentifier.namespace.getter();
    if (!v39)
    {
LABEL_35:
      uint64_t v36 = *v58;
      (*v58)(v3, v0);
      goto LABEL_36;
    }
    if (v38 == 0x614E746E65746E69 && v39 == 0xEA0000000000656DLL) {
      break;
    }
    int v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v36 = *v58;
    (*v58)(v3, v0);
    if (v54) {
      goto LABEL_50;
    }
LABEL_36:
    v36(v5, v0);
    v26 += v56;
    if (!--v24)
    {
      swift_bridgeObjectRelease();
      uint64_t v40 = 1;
      uint64_t v41 = v62;
      goto LABEL_48;
    }
  }
  swift_bridgeObjectRelease();
  (*v58)(v3, v0);
LABEL_50:
  swift_bridgeObjectRelease();
  uint64_t v42 = (uint64_t)v61;
  uint64_t v41 = v62;
  (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v61, v5, v0);
  uint64_t v40 = 0;
LABEL_51:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56))(v42, v40, 1, v0);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v42, 1, v0) == 1)
  {
    outlined destroy of UsoIdentifier?(v42);
    goto LABEL_27;
  }
  uint64_t v43 = UsoIdentifier.value.getter();
  uint64_t v45 = v44;
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v0);
  if (v43 == 0x61666F72506C6164 && v45 == 0xEC0000007974696ELL)
  {
    swift_bridgeObjectRelease();
    goto LABEL_57;
  }
  char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v46)
  {
LABEL_57:
    if (one-time initialization token for executor == -1) {
      goto LABEL_58;
    }
    goto LABEL_70;
  }
LABEL_27:
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_release();
  swift_release();
  return 2;
}

ValueMetadata *type metadata accessor for SocialConversationAffinityScorer()
{
  return &type metadata for SocialConversationAffinityScorer;
}

uint64_t outlined destroy of UsoIdentifier?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

id StartExecutionTurn.__allocating_init(executionRequestId:rootRequestId:sessionId:isTapToEdit:isMUXEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  uint64_t v15 = objc_allocWithZone(v7);
  uint64_t v16 = &v15[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId];
  *uint64_t v16 = a1;
  v16[1] = a2;
  unint64_t v17 = &v15[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId];
  *unint64_t v17 = a3;
  v17[1] = a4;
  outlined init with copy of UUID?(a5, (uint64_t)&v15[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_sessionId]);
  v15[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isTapToEdit] = a6;
  v15[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isMUXEnabled] = a7;
  v20.receiver = v15;
  v20.super_class = v7;
  id v18 = objc_msgSendSuper2(&v20, sel_init);
  outlined destroy of UUID?(a5);
  return v18;
}

uint64_t static StartExecutionTurn.supportsSecureCoding.getter()
{
  return static StartExecutionTurn.supportsSecureCoding;
}

uint64_t static StartExecutionTurn.supportsSecureCoding.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static StartExecutionTurn.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static StartExecutionTurn.supportsSecureCoding.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t StartExecutionTurn.executionRequestId.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StartExecutionTurn.rootRequestId.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StartExecutionTurn.sessionId.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of UUID?(v1 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_sessionId, a1);
}

uint64_t StartExecutionTurn.isTapToEdit.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isTapToEdit);
}

uint64_t StartExecutionTurn.isMUXEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isMUXEnabled);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance StartExecutionTurn.CodingKeys(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StartExecutionTurn.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance StartExecutionTurn.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StartExecutionTurn.CodingKeys()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance StartExecutionTurn.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized StartExecutionTurn.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance StartExecutionTurn.CodingKeys(uint64_t a1@<X8>)
{
  unint64_t v2 = 0x80000001BA060AC0;
  unint64_t v3 = 0xD000000000000012;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xED00006449747365;
      unint64_t v3 = 0x75716552746F6F72;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x496E6F6973736573;
      *(void *)(a1 + 8) = 0xE900000000000064;
      break;
    case 3:
      *(void *)a1 = 0x456F547061547369;
      *(void *)(a1 + 8) = 0xEB00000000746964;
      break;
    case 4:
      strcpy((char *)a1, "isMUXEnabled");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

id StartExecutionTurn.init(executionRequestId:rootRequestId:sessionId:isTapToEdit:isMUXEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  uint64_t v11 = &v7[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId];
  *uint64_t v11 = a1;
  v11[1] = a2;
  uint64_t v12 = &v7[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId];
  *uint64_t v12 = a3;
  v12[1] = a4;
  outlined init with copy of UUID?(a5, (uint64_t)&v7[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_sessionId]);
  v7[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isTapToEdit] = a6;
  v7[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isMUXEnabled] = a7;
  v15.receiver = v7;
  v15.super_class = (Class)type metadata accessor for StartExecutionTurn();
  id v13 = objc_msgSendSuper2(&v15, sel_init);
  outlined destroy of UUID?(a5);
  return v13;
}

uint64_t StartExecutionTurn.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return StartExecutionTurn.init(coder:)(a1);
}

uint64_t StartExecutionTurn.init(coder:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v4);
  uint64_t v9 = (char *)&v37 - v8;
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v37 - v10;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  id v12 = v1;
  uint64_t v13 = NSCoder.decodeObject<A>(of:forKey:)();
  if (v13)
  {
    uint64_t v14 = (void *)v13;
    uint64_t v40 = NSCoder.decodeObject<A>(of:forKey:)();
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for NSUUID);
    uint64_t v15 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v15)
    {
      uint64_t v16 = (void *)v15;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v17 = type metadata accessor for UUID();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v9, 0, 1, v17);
    }
    else
    {
      uint64_t v23 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v9, 1, 1, v23);
    }
    uint64_t v24 = (uint64_t)v11;
    outlined init with take of UUID?((uint64_t)v9, (uint64_t)v11);
    uint64_t v25 = (void *)MEMORY[0x1BA9E2DD0](0x456F547061547369, 0xEB00000000746964);
    unsigned int v39 = objc_msgSend(a1, sel_decodeBoolForKey_, v25);

    unint64_t v26 = (void *)MEMORY[0x1BA9E2DD0](0x616E4558554D7369, 0xEC00000064656C62);
    id v41 = a1;
    unsigned int v38 = objc_msgSend(a1, sel_decodeBoolForKey_, v26);

    uint64_t ObjectType = swift_getObjectType();
    uint64_t v28 = v14;
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v31 = v30;
    os_log_type_t v32 = (void *)v40;
    if (v40)
    {
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v35 = v34;
    }
    else
    {
      uint64_t v33 = 0;
      uint64_t v35 = 0;
    }
    outlined init with copy of UUID?(v24, (uint64_t)v6);
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, void, void))(ObjectType + 120))(v29, v31, v33, v35, v6, v39, v38);

    outlined destroy of UUID?(v24);
    swift_deallocPartialClassInstance();
  }
  else
  {

    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.executor);
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v21 = 0;
      _os_log_impl(&dword_1B9C64000, v19, v20, "Could not deserialize executionRequestId in StartExecutionTurn", v21, 2u);
      MEMORY[0x1BA9E48C0](v21, -1, -1);
    }

    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v22;
}

Swift::Void __swiftcall StartExecutionTurn.encode(with:)(NSCoder with)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId), *(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId + 8));
  uint64_t v8 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000012, 0x80000001BA060AC0);
  [(objc_class *)with.super.isa encodeObject:v7 forKey:v8];

  if (*(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId + 8)) {
    uint64_t v9 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId));
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = (void *)MEMORY[0x1BA9E2DD0](0x75716552746F6F72, 0xED00006449747365);
  [(objc_class *)with.super.isa encodeObject:v9 forKey:v10];

  outlined init with copy of UUID?(v2 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_sessionId, (uint64_t)v6);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v6, 1, v11) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v6, v11);
  }
  uint64_t v14 = (void *)MEMORY[0x1BA9E2DD0](0x496E6F6973736573, 0xE900000000000064);
  [(objc_class *)with.super.isa encodeObject:isa forKey:v14];
  swift_unknownObjectRelease();

  uint64_t v15 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isTapToEdit);
  uint64_t v16 = (void *)MEMORY[0x1BA9E2DD0](0x456F547061547369, 0xEB00000000746964);
  [(objc_class *)with.super.isa encodeBool:v15 forKey:v16];

  uint64_t v17 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isMUXEnabled);
  uint64_t v18 = (void *)MEMORY[0x1BA9E2DD0](0x616E4558554D7369, 0xEC00000064656C62);
  [(objc_class *)with.super.isa encodeBool:v17 forKey:v18];
}

uint64_t StartExecutionTurn.debugDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = 0;
  unint64_t v47 = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  started = (objc_class *)type metadata accessor for StartExecutionTurn();
  v45.receiver = v0;
  v45.super_class = started;
  id v6 = objc_msgSendSuper2(&v45, sel_debugDescription);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  v10._uint64_t countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._uint64_t countAndFlagsBits = 31520;
  v11._object = (void *)0xE200000000000000;
  String.append(_:)(v11);
  char v44 = 0;
  _print_unlocked<A, B>(_:_:)();
  v12._uint64_t countAndFlagsBits = 8250;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  uint64_t v13 = *(void *)&v1[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId];
  uint64_t v14 = *(void **)&v1[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_executionRequestId + 8];
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._uint64_t countAndFlagsBits = 8236;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  char v44 = 1;
  _print_unlocked<A, B>(_:_:)();
  v17._uint64_t countAndFlagsBits = 8250;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  if (*(void *)&v1[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId + 8])
  {
    uint64_t v18 = *(void *)&v1[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId];
    uint64_t v19 = *(void **)&v1[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_rootRequestId + 8];
  }
  else
  {
    uint64_t v18 = 0x3E6C696E3CLL;
    uint64_t v19 = (void *)0xE500000000000000;
  }
  swift_bridgeObjectRetain();
  v20._uint64_t countAndFlagsBits = v18;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 2604;
  v21._object = (void *)0xE200000000000000;
  String.append(_:)(v21);
  char v44 = 2;
  _print_unlocked<A, B>(_:_:)();
  v22._uint64_t countAndFlagsBits = 8250;
  v22._object = (void *)0xE200000000000000;
  String.append(_:)(v22);
  outlined init with copy of UUID?((uint64_t)&v1[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_sessionId], (uint64_t)v4);
  uint64_t v23 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v23 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v4, 1, v23) == 1)
  {
    uint64_t v25 = 0x3E6C696E3CLL;
    outlined destroy of UUID?((uint64_t)v4);
    unint64_t v26 = (void *)0xE500000000000000;
  }
  else
  {
    uint64_t v25 = UUID.description.getter();
    unint64_t v26 = v27;
    (*(void (**)(char *, uint64_t))(v24 + 8))(v4, v23);
  }
  v28._uint64_t countAndFlagsBits = v25;
  v28._object = v26;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._uint64_t countAndFlagsBits = 8236;
  v29._object = (void *)0xE200000000000000;
  String.append(_:)(v29);
  v30._uint64_t countAndFlagsBits = 0x456F547061547369;
  v30._object = (void *)0xEB00000000746964;
  String.append(_:)(v30);
  v31._uint64_t countAndFlagsBits = 8250;
  v31._object = (void *)0xE200000000000000;
  String.append(_:)(v31);
  if (v1[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isTapToEdit]) {
    uint64_t v32 = 1702195828;
  }
  else {
    uint64_t v32 = 0x65736C6166;
  }
  if (v1[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isTapToEdit]) {
    unint64_t v33 = 0xE400000000000000;
  }
  else {
    unint64_t v33 = 0xE500000000000000;
  }
  unint64_t v34 = v33;
  String.append(_:)(*(Swift::String *)&v32);
  swift_bridgeObjectRelease();
  v35._uint64_t countAndFlagsBits = 8236;
  v35._object = (void *)0xE200000000000000;
  String.append(_:)(v35);
  v36._uint64_t countAndFlagsBits = 0x616E4558554D7369;
  v36._object = (void *)0xEC00000064656C62;
  String.append(_:)(v36);
  v37._uint64_t countAndFlagsBits = 8250;
  v37._object = (void *)0xE200000000000000;
  String.append(_:)(v37);
  if (v1[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isMUXEnabled]) {
    uint64_t v38 = 1702195828;
  }
  else {
    uint64_t v38 = 0x65736C6166;
  }
  if (v1[OBJC_IVAR____TtC14SiriKitRuntime18StartExecutionTurn_isMUXEnabled]) {
    unint64_t v39 = 0xE400000000000000;
  }
  else {
    unint64_t v39 = 0xE500000000000000;
  }
  unint64_t v40 = v39;
  String.append(_:)(*(Swift::String *)&v38);
  swift_bridgeObjectRelease();
  v41._uint64_t countAndFlagsBits = 125;
  v41._object = (void *)0xE100000000000000;
  String.append(_:)(v41);
  return v46;
}

id StartExecutionTurn.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void StartExecutionTurn.init()()
{
}

id StartExecutionTurn.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StartExecutionTurn();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for StartExecutionTurn()
{
  return type metadata accessor for StartExecutionTurn();
}

void type metadata completion function for StartExecutionTurn()
{
  type metadata accessor for UUID?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for StartExecutionTurn(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for StartExecutionTurn);
}

uint64_t dispatch thunk of StartExecutionTurn.__allocating_init(executionRequestId:rootRequestId:sessionId:isTapToEdit:isMUXEnabled:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of StartExecutionTurn.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of StartExecutionTurn.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88))();
}

unsigned char *storeEnumTagSinglePayload for StartExecutionTurn.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1BA01C728);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for StartExecutionTurn.CodingKeys()
{
  return &unk_1F13858B0;
}

unint64_t lazy protocol witness table accessor for type StartExecutionTurn.CodingKeys and conformance StartExecutionTurn.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type StartExecutionTurn.CodingKeys and conformance StartExecutionTurn.CodingKeys;
  if (!lazy protocol witness table cache variable for type StartExecutionTurn.CodingKeys and conformance StartExecutionTurn.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StartExecutionTurn.CodingKeys and conformance StartExecutionTurn.CodingKeys);
  }
  return result;
}

unint64_t specialized StartExecutionTurn.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of StartExecutionTurn.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

uint64_t StartRequestMessageBase.rootRequestId.getter()
{
  type metadata accessor for StartRequestMessageBase();
  id v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RootRequestAware);
  if (swift_dynamicCast())
  {
    outlined init with take of ReferenceResolutionClientProtocol(v4, (uint64_t)v6);
    __swift_project_boxed_opaque_existential_1(v6, v6[3]);
    uint64_t v2 = dispatch thunk of RootRequestAware.rootRequestId.getter();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v6);
  }
  else
  {
    uint64_t v5 = 0;
    memset(v4, 0, sizeof(v4));
    outlined destroy of RootRequestAware?((uint64_t)v4);
    return RequestMessageBase.requestId.getter();
  }
  return v2;
}

uint64_t outlined destroy of RootRequestAware?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RootRequestAware?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *StopRepromptFeatureFlag.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  return &static StopRepromptFeatureFlag.forceEnabled;
}

uint64_t static StopRepromptFeatureFlag.forceEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }

  return swift_retain();
}

const char *StopRepromptFeatureFlag.domain.getter()
{
  return "Siri";
}

const char *StopRepromptFeatureFlag.feature.getter()
{
  return "stop_reprompt";
}

uint64_t StopRepromptFeatureFlag.isEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  uint64_t v0 = (unsigned __int8 *)(static StopRepromptFeatureFlag.forceEnabled + 16);
  id v1 = (os_unfair_lock_s *)(static StopRepromptFeatureFlag.forceEnabled + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(static StopRepromptFeatureFlag.forceEnabled + 20));
  partial apply for closure #1 in StopRepromptFeatureFlag.isEnabled.getter(v0, &v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

unsigned __int8 *closure #1 in StopRepromptFeatureFlag.isEnabled.getter@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  if (v3 == 2)
  {
    uint64_t v7 = &type metadata for StopRepromptFeatureFlag;
    unint64_t v8 = lazy protocol witness table accessor for type StopRepromptFeatureFlag and conformance StopRepromptFeatureFlag();
    char v4 = isFeatureEnabled(_:)();
    unint64_t result = (unsigned __int8 *)__swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v6);
    char v5 = v4 & 1;
  }
  else
  {
    char v5 = v3 & 1;
  }
  *a2 = v5;
  return result;
}

unsigned __int8 *partial apply for closure #1 in StopRepromptFeatureFlag.isEnabled.getter@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  return closure #1 in StopRepromptFeatureFlag.isEnabled.getter(a1, a2);
}

uint64_t static StopRepromptFeatureFlag.== infix(_:_:)()
{
  return 1;
}

void StopRepromptFeatureFlag.hash(into:)()
{
}

Swift::Int StopRepromptFeatureFlag.hashValue.getter()
{
  return Hasher._finalize()();
}

unsigned char *storeEnumTagSinglePayload for StopRepromptFeatureFlag(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1BA01CC90);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for StopRepromptFeatureFlag()
{
  return &type metadata for StopRepromptFeatureFlag;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
  while (1)
  {
    if (v5)
    {
      unint64_t v10 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v11 = v10 | (v8 << 6);
      goto LABEL_22;
    }
    int64_t v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v12 >= v6) {
      goto LABEL_30;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v12);
    ++v8;
    if (!v13)
    {
      int64_t v8 = v12 + 1;
      if (v12 + 1 >= v6) {
        goto LABEL_30;
      }
      unint64_t v13 = *(void *)(v2 + 8 * v8);
      if (!v13)
      {
        int64_t v8 = v12 + 2;
        if (v12 + 2 >= v6) {
          goto LABEL_30;
        }
        unint64_t v13 = *(void *)(v2 + 8 * v8);
        if (!v13)
        {
          int64_t v8 = v12 + 3;
          if (v12 + 3 >= v6) {
            goto LABEL_30;
          }
          unint64_t v13 = *(void *)(v2 + 8 * v8);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v5 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v8 << 6);
LABEL_22:
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v11, (uint64_t)v22);
    outlined init with take of Any(v22, v21);
    outlined init with copy of Any((uint64_t)v21, (uint64_t)v19);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriEnvironmentStringKeyedValueFetching);
    if ((swift_dynamicCast() & 1) == 0) {
      long long v20 = 0uLL;
    }
    uint64_t result = __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v21);
    if ((void)v20)
    {
      long long v18 = v20;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
        uint64_t v9 = (void *)result;
      }
      long long v15 = v18;
      unint64_t v17 = v9[2];
      unint64_t v16 = v9[3];
      if (v17 >= v16 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v9);
        long long v15 = v18;
        uint64_t v9 = (void *)result;
      }
      _OWORD v9[2] = v17 + 1;
      *(_OWORD *)&v9[2 * v17 + 4] = v15;
    }
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v6)
  {
LABEL_30:
    swift_release();
    return (uint64_t)v9;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v14);
  if (v13)
  {
    int64_t v8 = v14;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v8 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_30;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v8);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

Swift::String_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SiriEnvironment.getValue(provider:key:)(Swift::String provider, Swift::String key)
{
  object = key._object;
  uint64_t countAndFlagsBits = key._countAndFlagsBits;
  uint64_t v4 = provider._object;
  uint64_t v5 = provider._countAndFlagsBits;
  uint64_t v6 = dispatch thunk of SiriEnvironment.providers.getter();
  uint64_t v7 = specialized Sequence.compactMap<A>(_:)(v6);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v23 = object;
    uint64_t v24 = countAndFlagsBits;
    swift_bridgeObjectRetain();
    uint64_t v9 = (uint64_t *)(v7 + 40);
    while (1)
    {
      uint64_t v10 = *v9;
      uint64_t ObjectType = swift_getObjectType();
      int64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 16);
      swift_unknownObjectRetain();
      if (v12(ObjectType, v10) == v5 && v13 == v4)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v15) {
        break;
      }
      swift_unknownObjectRelease();
      v9 += 2;
      if (!--v8)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v16 = 0;
        unint64_t v17 = 0;
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_13:
    v18._object = v23;
    v18._uint64_t countAndFlagsBits = v24;
    Swift::String_optional v19 = SiriEnvironmentStringKeyedValueFetching.getValue(forKey:)(v18);
    uint64_t v16 = v19.value._countAndFlagsBits;
    unint64_t v17 = v19.value._object;
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = 0;
    unint64_t v17 = 0;
  }
LABEL_14:
  uint64_t v20 = v16;
  Swift::String v21 = v17;
  result.value._object = v21;
  result.value._uint64_t countAndFlagsBits = v20;
  return result;
}

uint64_t key path getter for CurrentRequest.refId : CurrentRequest@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CurrentRequest.refId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path getter for CurrentRequest.aceId : CurrentRequest@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CurrentRequest.aceId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path getter for CurrentRequest.executionRequestId : CurrentRequest@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CurrentRequest.executionRequestId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path getter for CurrentRequest.sessionHandoffContinuityID : CurrentRequest@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CurrentRequest.sessionHandoffContinuityID.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path getter for CurrentRequest.peerName : CurrentRequest@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CurrentRequest.peerName.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path getter for CurrentRequest.inputOrigin : CurrentRequest()
{
  return CurrentRequest.inputOrigin.getter();
}

uint64_t key path getter for CurrentRequest.interactionType : CurrentRequest()
{
  return CurrentRequest.interactionType.getter();
}

uint64_t key path getter for CurrentRequest.audioSource : CurrentRequest()
{
  return CurrentRequest.audioSource.getter();
}

uint64_t key path getter for CurrentRequest.audioDestination : CurrentRequest()
{
  return CurrentRequest.audioDestination.getter();
}

uint64_t key path getter for CurrentRequest.responseMode : CurrentRequest()
{
  return CurrentRequest.responseMode.getter();
}

uint64_t key path getter for CurrentRequest.multiUserState : CurrentRequest()
{
  return CurrentRequest.multiUserState.getter();
}

uint64_t key path getter for CurrentRequest.bargeInContext : CurrentRequest()
{
  return CurrentRequest.bargeInContext.getter();
}

uint64_t key path getter for CurrentRequest.originatingHome : CurrentRequest()
{
  return CurrentRequest.originatingHome.getter();
}

uint64_t key path getter for CurrentRequest.speechPackage : CurrentRequest@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CurrentRequest.speechPackage.getter();
  *a1 = result;
  return result;
}

uint64_t key path getter for CurrentRequest.resultCandidateId : CurrentRequest@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CurrentRequest.resultCandidateId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path getter for CurrentRequest.asrOnDevice : CurrentRequest@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CurrentRequest.asrOnDevice.getter();
  *a1 = result;
  return result;
}

uint64_t key path getter for CurrentRequest.positionInSession : CurrentRequest()
{
  return CurrentRequest.positionInSession.getter();
}

uint64_t StringKeyedValue.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StringKeyedValue.keyPath.getter()
{
  return swift_retain();
}

uint64_t StringKeyedValue.valueType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for StringKeyedValue() + 24);
  uint64_t v4 = type metadata accessor for TypeIdentifier();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t StringKeyedValue.init<A, B>(name:keyPath:valueType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  uint64_t v6 = (char *)a5 + *(int *)(type metadata accessor for StringKeyedValue() + 24);
  uint64_t v7 = type metadata accessor for TypeIdentifier();
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32);

  return v8(v6, a4, v7);
}

uint64_t <=> infix<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for TypeIdentifier();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_retain();
  TypeIdentifier.init(for:)();
  return StringKeyedValue.init<A, B>(name:keyPath:valueType:)(a1, a2, a3, (uint64_t)v10, a4);
}

uint64_t makeStringKeys(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for StringKeyedValue() - 8;
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (void *)((char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v7 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v8 = *(void *)(v3 + 72);
  v20[1] = a1;
  swift_bridgeObjectRetain();
  uint64_t v9 = MEMORY[0x1E4FBC868];
  long long v21 = xmmword_1BA04FD90;
  do
  {
    outlined init with copy of StringKeyedValue(v7, (uint64_t)v5);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, StringKeyedValue)>);
    uint64_t v10 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StringKeyedValue))
                - 8);
    unint64_t v11 = (*(unsigned __int8 *)(*(void *)v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v10 + 80);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = v21;
    unint64_t v13 = (void *)(v12 + v11);
    uint64_t v14 = v12 + v11 + v10[14];
    uint64_t v15 = v5[1];
    void *v13 = *v5;
    v13[1] = v15;
    outlined init with copy of StringKeyedValue((uint64_t)v5, v14);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(v12);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = v9;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v16, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v22);
    uint64_t v18 = v22;
    swift_bridgeObjectRelease();
    outlined destroy of StringKeyedValue((uint64_t)v5);
    swift_bridgeObjectRelease();
    v7 += v8;
    uint64_t v9 = v18;
    --v6;
  }
  while (v6);
  swift_bridgeObjectRelease();
  return v18;
}

Swift::String_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SiriEnvironmentStringKeyedValueFetching.getValue(forKey:)(Swift::String forKey)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v6 = v1;
  object = forKey._object;
  uint64_t countAndFlagsBits = forKey._countAndFlagsBits;
  uint64_t v9 = type metadata accessor for TypeIdentifier();
  uint64_t v40 = *(void *)(v9 - 8);
  uint64_t v41 = v9;
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  unint64_t v39 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  Swift::String v36 = (char *)&v35 - v12;
  uint64_t v38 = type metadata accessor for TypeInformation();
  uint64_t v37 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  Swift::String v35 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StringKeyedValue?);
  MEMORY[0x1F4188790](v14 - 8);
  unint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for StringKeyedValue();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v42 = (uint64_t)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = v6;
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 24))(v6, v5);
  if (*(void *)(v20 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
    if (v22)
    {
      outlined init with copy of StringKeyedValue(*(void *)(v20 + 56) + *(void *)(v18 + 72) * v21, (uint64_t)v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
  {
    uint64_t v24 = v42;
    outlined init with take of StringKeyedValue((uint64_t)v16, v42);
    *(void *)&long long v45 = v4;
    swift_unknownObjectRetain();
    swift_retain();
    swift_getAtAnyKeyPath();
    swift_unknownObjectRelease();
    swift_release();
    if (!v48)
    {
      outlined destroy of StringKeyedValue(v24);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v47, (uint64_t *)&demangling cache variable for type metadata for Any?);
      uint64_t v17 = 0;
      uint64_t v20 = 0;
      goto LABEL_23;
    }
    outlined init with take of Any(&v47, v49);
    uint64_t v26 = v40;
    uint64_t v25 = v41;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v36, v24 + *(int *)(v17 + 24), v41);
    uint64_t v27 = v35;
    TypeInformation.init(for:)();
    char v28 = TypeInformation.isOptional.getter();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v27, v38);
    Swift::String v29 = v50;
    Swift::String v30 = v39;
    if (v28)
    {
      outlined init with copy of Any((uint64_t)v49, (uint64_t)v44);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
      swift_dynamicCast();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v49);
      if (!v46)
      {
        outlined destroy of StringKeyedValue(v24);
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)&v45, (uint64_t *)&demangling cache variable for type metadata for Any?);
        uint64_t v17 = 0;
        uint64_t v20 = 0;
        goto LABEL_23;
      }
      outlined init with take of Any(&v45, &v47);
      outlined init with take of Any(&v47, v49);
    }
    outlined init with copy of Any((uint64_t)v49, (uint64_t)&v47);
    if (swift_dynamicCast())
    {
      uint64_t v20 = *((void *)&v45 + 1);
      uint64_t v17 = v45;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
      TypeIdentifier.init(for:)();
      static Transformation.defaultLengthLimit.getter();
      static Transformation.transform<A>(_:to:lengthLimit:)();
      if (v29)
      {

        (*(void (**)(char *, uint64_t))(v26 + 8))(v30, v25);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v26 + 8))(v30, v25);
        uint64_t v20 = *((void *)&v47 + 1);
        if (*((void *)&v47 + 1))
        {
          uint64_t v17 = v47;
          goto LABEL_22;
        }
      }
      outlined init with copy of Any((uint64_t)v49, (uint64_t)&v47);
      uint64_t v17 = String.init<A>(describing:)();
      uint64_t v20 = v31;
    }
LABEL_22:
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v49);
    outlined destroy of StringKeyedValue(v24);
    goto LABEL_23;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v16, &demangling cache variable for type metadata for StringKeyedValue?);
  lazy protocol witness table accessor for type StringKeyedValueFetchingError and conformance StringKeyedValueFetchingError();
  swift_allocError();
  uint64_t *v23 = countAndFlagsBits;
  v23[1] = (uint64_t)object;
  swift_bridgeObjectRetain();
  swift_willThrow();
LABEL_23:
  uint64_t v32 = v17;
  unint64_t v33 = (void *)v20;
  result.value._object = v33;
  result.value._uint64_t countAndFlagsBits = v32;
  return result;
}

uint64_t SiriEnvironment.getProvider(name:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = dispatch thunk of SiriEnvironment.providers.getter();
  uint64_t v5 = specialized Sequence.compactMap<A>(_:)(v4);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = (uint64_t *)(v5 + 40); ; i += 2)
    {
      uint64_t v8 = *(i - 1);
      uint64_t v9 = *i;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 16);
      swift_unknownObjectRetain();
      if (v11(ObjectType, v9) == a1 && v12 == a2)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        return v8;
      }
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v14) {
        break;
      }
      swift_unknownObjectRelease();
      if (!--v6)
      {
        swift_bridgeObjectRelease_n();
        return 0;
      }
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v8;
}

uint64_t type metadata accessor for StringKeyedValue()
{
  uint64_t result = type metadata singleton initialization cache for StringKeyedValue;
  if (!type metadata singleton initialization cache for StringKeyedValue) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t CurrentDevice.providerName.getter()
{
  return 0x44746E6572727563;
}

uint64_t protocol witness for SiriEnvironmentStringKeyedValueFetching.providerName.getter in conformance CurrentDevice()
{
  return 0x44746E6572727563;
}

unint64_t NetworkAvailability.providerName.getter()
{
  return 0xD000000000000013;
}

unint64_t protocol witness for SiriEnvironmentStringKeyedValueFetching.providerName.getter in conformance NetworkAvailability()
{
  return 0xD000000000000013;
}

uint64_t CurrentRequest.providerName.getter()
{
  return 0x52746E6572727563;
}

uint64_t protocol witness for SiriEnvironmentStringKeyedValueFetching.providerName.getter in conformance CurrentRequest()
{
  return 0x52746E6572727563;
}

uint64_t CallStateEnvironmentProvider.providerName.getter()
{
  return 0x746174536C6C6163;
}

uint64_t protocol witness for SiriEnvironmentStringKeyedValueFetching.providerName.getter in conformance CallStateEnvironmentProvider()
{
  return 0x746174536C6C6163;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for StringKeyedValue();
  uint64_t v52 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v44 = (uint64_t)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  char v14 = (char *)v43 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StringKeyedValue)?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (void *)((char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v19 = ~v18;
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v21 = -v18;
  uint64_t v45 = a1;
  uint64_t v46 = a1 + 64;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  else {
    uint64_t v22 = -1;
  }
  uint64_t v47 = v19;
  uint64_t v48 = 0;
  uint64_t v49 = v22 & v20;
  uint64_t v50 = a2;
  uint64_t v51 = a3;
  v43[2] = a1;
  swift_bridgeObjectRetain();
  v43[1] = a3;
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)v17);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StringKeyedValue));
  for (int i = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v17, 1, v23);
        ;
        int i = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v17, 1, v23))
  {
    if (i == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of [Int : @Sendable ()].Iterator._Variant();
      return swift_release();
    }
    uint64_t v27 = *v17;
    uint64_t v26 = v17[1];
    outlined init with take of StringKeyedValue((uint64_t)v17 + *(int *)(v23 + 48), (uint64_t)v14);
    uint64_t v28 = *a5;
    unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v26);
    uint64_t v31 = *(void *)(v28 + 16);
    BOOL v32 = (v29 & 1) == 0;
    uint64_t v33 = v31 + v32;
    if (__OFADD__(v31, v32)) {
      break;
    }
    char v34 = v29;
    if (*(void *)(v28 + 24) >= v33)
    {
      if (a4)
      {
        if (v29) {
          goto LABEL_5;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v34) {
          goto LABEL_5;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, a4 & 1);
      unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v27, v26);
      if ((v34 & 1) != (v36 & 1)) {
        goto LABEL_22;
      }
      unint64_t v30 = v35;
      if (v34)
      {
LABEL_5:
        uint64_t v25 = v44;
        outlined init with copy of StringKeyedValue((uint64_t)v14, v44);
        outlined destroy of StringKeyedValue((uint64_t)v14);
        swift_bridgeObjectRelease();
        outlined assign with take of StringKeyedValue(v25, *(void *)(*a5 + 56) + *(void *)(v52 + 72) * v30);
        goto LABEL_6;
      }
    }
    uint64_t v37 = (void *)*a5;
    *(void *)(*a5 + 8 * (v30 >> 6) + 64) |= 1 << v30;
    uint64_t v38 = (uint64_t *)(v37[6] + 16 * v30);
    *uint64_t v38 = v27;
    v38[1] = v26;
    outlined init with take of StringKeyedValue((uint64_t)v14, v37[7] + *(void *)(v52 + 72) * v30);
    uint64_t v39 = v37[2];
    BOOL v40 = __OFADD__(v39, 1);
    uint64_t v41 = v39 + 1;
    if (v40) {
      goto LABEL_21;
    }
    v37[2] = v41;
LABEL_6:
    specialized LazyMapSequence.Iterator.next()((uint64_t)v17);
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StringKeyedValue));
    a4 = 1;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (uint64_t)a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: StringKeyedValue))
              + 48);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StringKeyedValue));
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  outlined init with copy of StringKeyedValue(v4, (uint64_t)a2 + *(int *)(v5 + 48));
  *a2 = v7;
  a2[1] = v6;

  return swift_bridgeObjectRetain();
}

uint64_t outlined destroy of StringKeyedValue(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for StringKeyedValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type StringKeyedValueFetchingError and conformance StringKeyedValueFetchingError()
{
  unint64_t result = lazy protocol witness table cache variable for type StringKeyedValueFetchingError and conformance StringKeyedValueFetchingError;
  if (!lazy protocol witness table cache variable for type StringKeyedValueFetchingError and conformance StringKeyedValueFetchingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StringKeyedValueFetchingError and conformance StringKeyedValueFetchingError);
  }
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v45 = a1;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: StringKeyedValue));
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: StringKeyedValue)?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char **)((char *)&v40 - v10);
  uint64_t v13 = *v1;
  uint64_t v12 = v1[1];
  uint64_t v15 = v1[2];
  int64_t v14 = v1[3];
  int64_t v16 = v14;
  unint64_t v17 = v1[4];
  BOOL v40 = v5;
  if (v17)
  {
    uint64_t v43 = v9;
    int64_t v44 = v14;
    uint64_t v41 = v15;
    uint64_t v42 = v12;
    uint64_t v18 = v2;
    uint64_t v19 = (v17 - 1) & v17;
    unint64_t v20 = __clz(__rbit64(v17)) | (v14 << 6);
LABEL_3:
    uint64_t v21 = *(void *)(v13 + 56);
    uint64_t v22 = (uint64_t *)(*(void *)(v13 + 48) + 16 * v20);
    uint64_t v23 = v13;
    uint64_t v25 = *v22;
    uint64_t v24 = v22[1];
    uint64_t v26 = v21 + *(void *)(*(void *)(type metadata accessor for StringKeyedValue() - 8) + 72) * v20;
    uint64_t v2 = v18;
    outlined init with copy of StringKeyedValue(v26, (uint64_t)v11 + *(int *)(v18 + 48));
    *uint64_t v11 = v25;
    v11[1] = v24;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v3 + 56))(v11, 0, 1, v18);
    uint64_t v13 = v23;
    swift_bridgeObjectRetain();
    uint64_t v12 = v42;
    uint64_t v9 = v43;
    uint64_t v15 = v41;
    goto LABEL_25;
  }
  int64_t v27 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
LABEL_23:
    int64_t v16 = v10;
    goto LABEL_24;
  }
  int64_t v28 = (unint64_t)(v15 + 64) >> 6;
  if (v27 < v28)
  {
    unint64_t v29 = *(void *)(v12 + 8 * v27);
    if (v29)
    {
LABEL_7:
      uint64_t v41 = v15;
      uint64_t v42 = v12;
      uint64_t v43 = v9;
      int64_t v44 = v27;
      uint64_t v18 = v2;
      uint64_t v19 = (v29 - 1) & v29;
      unint64_t v20 = __clz(__rbit64(v29)) + (v27 << 6);
      goto LABEL_3;
    }
    int64_t v30 = v14 + 2;
    int64_t v16 = v14 + 1;
    if (v14 + 2 < v28)
    {
      unint64_t v29 = *(void *)(v12 + 8 * v30);
      if (v29)
      {
LABEL_10:
        int64_t v27 = v30;
        goto LABEL_7;
      }
      int64_t v16 = v14 + 2;
      if (v14 + 3 < v28)
      {
        unint64_t v29 = *(void *)(v12 + 8 * (v14 + 3));
        if (v29)
        {
          int64_t v27 = v14 + 3;
          goto LABEL_7;
        }
        int64_t v30 = v14 + 4;
        int64_t v16 = v14 + 3;
        if (v14 + 4 < v28)
        {
          unint64_t v29 = *(void *)(v12 + 8 * v30);
          if (v29) {
            goto LABEL_10;
          }
          int64_t v27 = v14 + 5;
          int64_t v16 = v14 + 4;
          if (v14 + 5 < v28)
          {
            unint64_t v29 = *(void *)(v12 + 8 * v27);
            if (v29) {
              goto LABEL_7;
            }
            int64_t v10 = v28 - 1;
            uint64_t v31 = v14 + 6;
            while (v28 != v31)
            {
              unint64_t v29 = *(void *)(v12 + 8 * v31++);
              if (v29)
              {
                int64_t v27 = v31 - 1;
                goto LABEL_7;
              }
            }
            goto LABEL_23;
          }
        }
      }
    }
  }
LABEL_24:
  int64_t v44 = v16;
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v11, 1, 1, v2);
  uint64_t v19 = 0;
LABEL_25:
  *uint64_t v1 = v13;
  v1[1] = v12;
  int64_t v32 = v44;
  v1[2] = v15;
  v1[3] = v32;
  v1[4] = v19;
  uint64_t v33 = (void (*)(uint64_t))v1[5];
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v11, (uint64_t)v9, &demangling cache variable for type metadata for (key: String, value: StringKeyedValue)?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StringKeyedValue));
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v45, 1, 1, v34);
  }
  else
  {
    uint64_t v36 = (uint64_t)v9;
    uint64_t v37 = (uint64_t)v40;
    outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?(v36, (uint64_t)v40, &demangling cache variable for type metadata for (key: String, value: StringKeyedValue));
    uint64_t v38 = v45;
    v33(v37);
    outlined destroy of ReferenceResolutionClientProtocol?(v37, &demangling cache variable for type metadata for (key: String, value: StringKeyedValue));
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StringKeyedValue));
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v38, 0, 1, v39);
  }
}

uint64_t specialized LazyMapSequence.Iterator.next()()
{
  void (*v14)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  void v23[4];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = 16 * v6;
    uint64_t v8 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v9 = *v8;
    uint64_t v10 = v8[1];
    uint64_t v11 = (uint64_t *)(*(void *)(v1 + 56) + v7);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    v0[3] = v4;
    v0[4] = v5;
    int64_t v14 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v23[0] = v9;
    v23[1] = v10;
    _OWORD v23[2] = v12;
    uint64_t v23[3] = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(&v22, v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v22;
  }
  int64_t v16 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    unint64_t v17 = (unint64_t)(v0[2] + 64) >> 6;
    if (v16 < v17)
    {
      uint64_t v18 = v0[1];
      uint64_t v19 = *(void *)(v18 + 8 * v16);
      if (v19)
      {
LABEL_7:
        uint64_t v5 = (v19 - 1) & v19;
        unint64_t v6 = __clz(__rbit64(v19)) + (v16 << 6);
        int64_t v4 = v16;
        goto LABEL_3;
      }
      unint64_t v20 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v17)
      {
        uint64_t v19 = *(void *)(v18 + 8 * v20);
        if (v19)
        {
LABEL_10:
          int64_t v16 = v20;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v17)
        {
          uint64_t v19 = *(void *)(v18 + 8 * (v3 + 3));
          if (v19)
          {
            int64_t v16 = v3 + 3;
            goto LABEL_7;
          }
          unint64_t v20 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v17)
          {
            uint64_t v19 = *(void *)(v18 + 8 * v20);
            if (v19) {
              goto LABEL_10;
            }
            int64_t v16 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v17)
            {
              uint64_t v19 = *(void *)(v18 + 8 * v16);
              if (v19) {
                goto LABEL_7;
              }
              int64_t v4 = v17 - 1;
              uint64_t v21 = v3 + 6;
              while (v17 != v21)
              {
                uint64_t v19 = *(void *)(v18 + 8 * v21++);
                if (v19)
                {
                  int64_t v16 = v21 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    unint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  void v20[3];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = (uint64_t *)(*(void *)(v1 + 48) + 16 * v6);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v10 = *(void *)(*(void *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v11 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    void v20[2] = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(&v19, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v19;
  }
  uint64_t v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    int64_t v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      uint64_t v15 = v0[1];
      int64_t v16 = *(void *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        uint64_t v5 = (v16 - 1) & v16;
        unint64_t v6 = __clz(__rbit64(v16)) + (v13 << 6);
        int64_t v4 = v13;
        goto LABEL_3;
      }
      unint64_t v17 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        int64_t v16 = *(void *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          uint64_t v13 = v17;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          int64_t v16 = *(void *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            uint64_t v13 = v3 + 3;
            goto LABEL_7;
          }
          unint64_t v17 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            int64_t v16 = *(void *)(v15 + 8 * v17);
            if (v16) {
              goto LABEL_10;
            }
            uint64_t v13 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              int64_t v16 = *(void *)(v15 + 8 * v13);
              if (v16) {
                goto LABEL_7;
              }
              int64_t v4 = v14 - 1;
              uint64_t v18 = v3 + 6;
              while (v14 != v18)
              {
                int64_t v16 = *(void *)(v15 + 8 * v18++);
                if (v16)
                {
                  uint64_t v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    unint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t specialized CallStateEnvironmentProvider.stringKeys.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StringKeyedValue>);
  uint64_t v0 = *(void *)(type metadata accessor for StringKeyedValue() - 8);
  uint64_t v1 = *(void *)(v0 + 72);
  unint64_t v2 = (*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80);
  uint64_t v3 = 2 * v1;
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1BA050760;
  uint64_t v5 = (void *)(v4 + v2);
  uint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for AFCallState(0);
  swift_retain();
  TypeIdentifier.init(for:)();
  void *v5 = 0x746174536C6C6163;
  v5[1] = 0xE900000000000065;
  v5[2] = KeyPath;
  swift_release();
  uint64_t v7 = (void *)((char *)v5 + v1);
  uint64_t v8 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *uint64_t v7 = 0x656B616570536E6FLL;
  v7[1] = 0xE900000000000072;
  void v7[2] = v8;
  swift_release();
  uint64_t v9 = (char *)v5 + v3;
  uint64_t v10 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  strcpy(v9, "isDropInCall");
  v9[13] = 0;
  *((_WORD *)v9 + 7) = -5120;
  *((void *)v9 + 2) = v10;
  swift_release();
  uint64_t v11 = makeStringKeys(_:)(v4);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  return v11;
}

uint64_t specialized CurrentDevice.stringKeys.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StringKeyedValue>);
  uint64_t v0 = *(void *)(type metadata accessor for StringKeyedValue() - 8);
  uint64_t v1 = *(void *)(v0 + 72);
  unint64_t v2 = (*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1BA05AE60;
  uint64_t v4 = (void *)(v3 + v2);
  uint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for DeviceIdiom();
  swift_retain();
  TypeIdentifier.init(for:)();
  *uint64_t v4 = 0x6449656369766564;
  v4[1] = 0xEB000000006D6F69;
  long long v4[2] = KeyPath;
  swift_release();
  unint64_t v6 = (void *)((char *)v4 + v1);
  uint64_t v7 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *unint64_t v6 = 0xD000000000000015;
  v6[1] = 0x80000001BA061010;
  v6[2] = v7;
  swift_release();
  uint64_t v8 = (void *)((char *)v4 + 2 * v1);
  uint64_t v9 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *uint64_t v8 = 0xD000000000000014;
  v8[1] = 0x80000001BA06F600;
  void v8[2] = v9;
  swift_release();
  uint64_t v10 = (void *)((char *)v4 + 3 * v1);
  uint64_t v11 = swift_getKeyPath();
  type metadata accessor for SiriVoiceGender();
  swift_retain();
  TypeIdentifier.init(for:)();
  *uint64_t v10 = 0x63696F5669726973;
  v10[1] = 0xEF7265646E654765;
  void v10[2] = v11;
  swift_release();
  uint64_t v12 = (void *)((char *)v4 + 4 * v1);
  uint64_t v13 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  swift_retain();
  TypeIdentifier.init(for:)();
  *uint64_t v12 = 0xD000000000000017;
  v12[1] = 0x80000001BA067C70;
  v12[2] = v13;
  swift_release();
  int64_t v14 = (void *)((char *)v4 + 5 * v1);
  uint64_t v15 = swift_getKeyPath();
  type metadata accessor for Locale();
  swift_retain();
  TypeIdentifier.init(for:)();
  *int64_t v14 = 0x61636F4C69726973;
  v14[1] = 0xEA0000000000656CLL;
  id v14[2] = v15;
  swift_release();
  int64_t v16 = (void *)((char *)v4 + 6 * v1);
  uint64_t v17 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *int64_t v16 = 0xD000000000000015;
  v16[1] = 0x80000001BA060FF0;
  v16[2] = v17;
  swift_release();
  uint64_t v18 = (void *)((char *)v4 + 7 * v1);
  uint64_t v19 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalDomainsAuthenticationMode?);
  swift_retain();
  TypeIdentifier.init(for:)();
  *uint64_t v18 = 0xD000000000000021;
  v18[1] = 0x80000001BA067C90;
  v18[2] = v19;
  swift_release();
  unint64_t v20 = &v4[v1];
  uint64_t v21 = swift_getKeyPath();
  type metadata accessor for Restrictions();
  swift_retain();
  TypeIdentifier.init(for:)();
  *unint64_t v20 = 0xD000000000000012;
  v20[1] = 0x80000001BA067CD0;
  void v20[2] = v21;
  swift_release();
  uint64_t v22 = (void *)((char *)v4 + 9 * v1);
  uint64_t v23 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *uint64_t v22 = 0xD000000000000010;
  v22[1] = 0x80000001BA06F620;
  _OWORD v22[2] = v23;
  swift_release();
  uint64_t v24 = (void *)((char *)v4 + 10 * v1);
  uint64_t v25 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeviceClass?);
  swift_retain();
  TypeIdentifier.init(for:)();
  *uint64_t v24 = 0x6C43656369766564;
  v24[1] = 0xEB00000000737361;
  v24[2] = v25;
  swift_release();
  uint64_t v26 = makeStringKeys(_:)(v3);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  return v26;
}

uint64_t specialized NetworkAvailability.stringKeys.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StringKeyedValue>);
  uint64_t v0 = *(void *)(type metadata accessor for StringKeyedValue() - 8);
  uint64_t v1 = *(void *)(v0 + 72);
  unint64_t v2 = (*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1BA0563A0;
  uint64_t v4 = (void *)(v3 + v2);
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *uint64_t v4 = 0x616C696176417369;
  v4[1] = 0xEB00000000656C62;
  long long v4[2] = KeyPath;
  swift_release();
  unint64_t v6 = (void *)((char *)v4 + v1);
  uint64_t v7 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *unint64_t v6 = 0x736E657078457369;
  v6[1] = 0xEB00000000657669;
  v6[2] = v7;
  swift_release();
  uint64_t v8 = (char *)v4 + 2 * v1;
  uint64_t v9 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  strcpy(v8, "isConstrained");
  *((_WORD *)v8 + 7) = -4864;
  *((void *)v8 + 2) = v9;
  swift_release();
  uint64_t v10 = (void *)((char *)v4 + 3 * v1);
  uint64_t v11 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *uint64_t v10 = 0xD000000000000010;
  v10[1] = 0x80000001BA06F5E0;
  void v10[2] = v11;
  swift_release();
  uint64_t v12 = makeStringKeys(_:)(v3);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  return v12;
}

uint64_t specialized CurrentRequest.stringKeys.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StringKeyedValue>);
  uint64_t v0 = *(void *)(type metadata accessor for StringKeyedValue() - 8);
  uint64_t v1 = *(void *)(v0 + 72);
  unint64_t v2 = (*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1BA05CC40;
  uint64_t v4 = (void *)(v3 + v2);
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  swift_retain();
  TypeIdentifier.init(for:)();
  *uint64_t v4 = 0x6449666572;
  v4[1] = 0xE500000000000000;
  long long v4[2] = KeyPath;
  swift_release();
  unint64_t v6 = (void *)((char *)v4 + v1);
  uint64_t v7 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *unint64_t v6 = 0x6449656361;
  v6[1] = 0xE500000000000000;
  v6[2] = v7;
  swift_release();
  uint64_t v8 = (void *)((char *)v4 + 2 * v1);
  uint64_t v9 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *uint64_t v8 = 0xD000000000000012;
  v8[1] = 0x80000001BA060AC0;
  void v8[2] = v9;
  swift_release();
  uint64_t v10 = (void *)((char *)v4 + 3 * v1);
  uint64_t v11 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *uint64_t v10 = 0xD00000000000001ALL;
  v10[1] = 0x80000001BA060F80;
  void v10[2] = v11;
  swift_release();
  uint64_t v12 = (void *)((char *)v4 + 4 * v1);
  uint64_t v13 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *uint64_t v12 = 0x656D614E72656570;
  v12[1] = 0xE800000000000000;
  v12[2] = v13;
  swift_release();
  int64_t v14 = (void *)((char *)v4 + 5 * v1);
  uint64_t v15 = swift_getKeyPath();
  type metadata accessor for InputOrigin();
  swift_retain();
  TypeIdentifier.init(for:)();
  *int64_t v14 = 0x69724F7475706E69;
  v14[1] = 0xEB000000006E6967;
  id v14[2] = v15;
  swift_release();
  int64_t v16 = (void *)((char *)v4 + 6 * v1);
  uint64_t v17 = swift_getKeyPath();
  type metadata accessor for InteractionType();
  swift_retain();
  TypeIdentifier.init(for:)();
  *int64_t v16 = 0x7463617265746E69;
  v16[1] = 0xEF657079546E6F69;
  v16[2] = v17;
  swift_release();
  uint64_t v18 = (void *)((char *)v4 + 7 * v1);
  uint64_t v19 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioSource?);
  swift_retain();
  TypeIdentifier.init(for:)();
  *uint64_t v18 = 0x756F536F69647561;
  v18[1] = 0xEB00000000656372;
  v18[2] = v19;
  swift_release();
  unint64_t v20 = &v4[v1];
  uint64_t v21 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  swift_retain();
  TypeIdentifier.init(for:)();
  *unint64_t v20 = 0xD000000000000010;
  v20[1] = 0x80000001BA06C1B0;
  void v20[2] = v21;
  swift_release();
  uint64_t v22 = (char *)v4 + 9 * v1;
  uint64_t v23 = swift_getKeyPath();
  type metadata accessor for ResponseMode();
  swift_retain();
  TypeIdentifier.init(for:)();
  strcpy(v22, "responseMode");
  v22[13] = 0;
  *((_WORD *)v22 + 7) = -5120;
  *((void *)v22 + 2) = v23;
  swift_release();
  uint64_t v24 = (char *)v4 + 10 * v1;
  uint64_t v25 = swift_getKeyPath();
  type metadata accessor for MultiUserState();
  swift_retain();
  TypeIdentifier.init(for:)();
  strcpy(v24, "multiUserState");
  v24[15] = -18;
  *((void *)v24 + 2) = v25;
  swift_release();
  uint64_t v26 = (char *)v4 + 11 * v1;
  uint64_t v27 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BargeInContext?);
  swift_retain();
  TypeIdentifier.init(for:)();
  strcpy(v26, "bargeInContext");
  v26[15] = -18;
  *((void *)v26 + 2) = v27;
  swift_release();
  int64_t v28 = (void *)((char *)v4 + 12 * v1);
  uint64_t v29 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HomeInfo?);
  swift_retain();
  TypeIdentifier.init(for:)();
  *int64_t v28 = 0x74616E696769726FLL;
  v28[1] = 0xEF656D6F48676E69;
  v28[2] = v29;
  swift_release();
  int64_t v30 = (char *)v4 + 13 * v1;
  uint64_t v31 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AFSpeechPackage?);
  swift_retain();
  TypeIdentifier.init(for:)();
  strcpy(v30, "speechPackage");
  *((_WORD *)v30 + 7) = -4864;
  *((void *)v30 + 2) = v31;
  swift_release();
  int64_t v32 = (void *)((char *)v4 + 14 * v1);
  uint64_t v33 = swift_getKeyPath();
  swift_retain();
  TypeIdentifier.init(for:)();
  *int64_t v32 = 0xD000000000000011;
  v32[1] = 0x80000001BA0607B0;
  void v32[2] = v33;
  swift_release();
  uint64_t v34 = (void *)((char *)v4 + 15 * v1);
  uint64_t v35 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool?);
  swift_retain();
  TypeIdentifier.init(for:)();
  *uint64_t v34 = 0x7665446E4F727361;
  v34[1] = 0xEB00000000656369;
  v34[2] = v35;
  swift_release();
  uint64_t v36 = &v4[2 * v1];
  uint64_t v37 = swift_getKeyPath();
  type metadata accessor for RequestPositionInSession();
  swift_retain();
  TypeIdentifier.init(for:)();
  *uint64_t v36 = 0xD000000000000011;
  v36[1] = 0x80000001BA06C2D0;
  v36[2] = v37;
  swift_release();
  uint64_t v38 = makeStringKeys(_:)(v3);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  return v38;
}

uint64_t instantiation function for generic protocol witness table for CurrentDevice(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CurrentDevice and conformance CurrentDevice(&lazy protocol witness table cache variable for type CurrentDevice and conformance CurrentDevice, MEMORY[0x1E4FA5200]);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for NetworkAvailability(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CurrentDevice and conformance CurrentDevice(&lazy protocol witness table cache variable for type NetworkAvailability and conformance NetworkAvailability, MEMORY[0x1E4FA52E0]);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for CurrentRequest(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CurrentDevice and conformance CurrentDevice(&lazy protocol witness table cache variable for type CurrentRequest and conformance CurrentRequest, MEMORY[0x1E4F9FD30]);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for CallStateEnvironmentProvider(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CurrentDevice and conformance CurrentDevice(&lazy protocol witness table cache variable for type CallStateEnvironmentProvider and conformance CallStateEnvironmentProvider, MEMORY[0x1E4FA1E60]);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CurrentDevice and conformance CurrentDevice(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for StringKeyedValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    a1[2] = a2[2];
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for TypeIdentifier();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_retain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for StringKeyedValue(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for TypeIdentifier();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for StringKeyedValue(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for TypeIdentifier();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for StringKeyedValue(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for TypeIdentifier();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for StringKeyedValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for TypeIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for StringKeyedValue(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_release();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for TypeIdentifier();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for StringKeyedValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1BA0203EC);
}

uint64_t sub_1BA0203EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for TypeIdentifier();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for StringKeyedValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1BA0204B0);
}

uint64_t sub_1BA0204B0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for TypeIdentifier();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for StringKeyedValue()
{
  uint64_t result = type metadata accessor for TypeIdentifier();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t dispatch thunk of SiriEnvironmentStringKeyedValueFetching.providerName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SiriEnvironmentStringKeyedValueFetching.stringKeys.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for StringKeyedValueFetchingError()
{
  return &type metadata for StringKeyedValueFetchingError;
}

uint64_t sub_1BA020634@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = dispatch thunk of CallStateEnvironmentProvider.callState.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1BA020660@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = dispatch thunk of CallStateEnvironmentProvider.onSpeaker.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1BA020690@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = dispatch thunk of CallStateEnvironmentProvider.isDropInCall.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1BA0206C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CurrentRequest.refId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1BA0206EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CurrentRequest.aceId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1BA020718@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CurrentRequest.executionRequestId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1BA020744@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CurrentRequest.sessionHandoffContinuityID.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1BA020770@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CurrentRequest.peerName.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1BA02079C()
{
  return CurrentRequest.inputOrigin.getter();
}

uint64_t sub_1BA0207C0()
{
  return CurrentRequest.interactionType.getter();
}

uint64_t sub_1BA0207E4()
{
  return CurrentRequest.audioSource.getter();
}

uint64_t sub_1BA020808()
{
  return CurrentRequest.audioDestination.getter();
}

uint64_t sub_1BA02082C()
{
  return CurrentRequest.responseMode.getter();
}

uint64_t sub_1BA020850()
{
  return CurrentRequest.multiUserState.getter();
}

uint64_t sub_1BA020874()
{
  return CurrentRequest.bargeInContext.getter();
}

uint64_t sub_1BA020898()
{
  return CurrentRequest.originatingHome.getter();
}

uint64_t sub_1BA0208BC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CurrentRequest.speechPackage.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1BA0208E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CurrentRequest.resultCandidateId.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1BA020914@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CurrentRequest.asrOnDevice.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1BA020940()
{
  return CurrentRequest.positionInSession.getter();
}

uint64_t sub_1BA020964@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = dispatch thunk of NetworkAvailability.isAvailable.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1BA020994@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = dispatch thunk of NetworkAvailability.isExpensive.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1BA0209C4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = dispatch thunk of NetworkAvailability.isConstrained.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1BA0209F4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = dispatch thunk of NetworkAvailability.isInAirplaneMode.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1BA020A24()
{
  return dispatch thunk of CurrentDevice.deviceIdiom.getter();
}

uint64_t sub_1BA020A48@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = dispatch thunk of CurrentDevice.isTextToSpeechEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1BA020A78@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = dispatch thunk of CurrentDevice.isLockedWithPasscode.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1BA020AA8()
{
  return dispatch thunk of CurrentDevice.siriVoiceGender.getter();
}

uint64_t sub_1BA020ACC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = dispatch thunk of CurrentDevice.preferencesLanguageCode.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1BA020AF8()
{
  return dispatch thunk of CurrentDevice.siriLocale.getter();
}

uint64_t sub_1BA020B1C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = dispatch thunk of CurrentDevice.isVoiceTriggerEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1BA020B4C()
{
  return dispatch thunk of CurrentDevice.personalDomainsAuthenticationMode.getter();
}

uint64_t sub_1BA020B70()
{
  return dispatch thunk of CurrentDevice.restrictedCommands.getter();
}

uint64_t sub_1BA020B94@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = dispatch thunk of CurrentDevice.deviceRegionCode.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1BA020BC0()
{
  return dispatch thunk of CurrentDevice.deviceClass.getter();
}

uint64_t outlined assign with take of StringKeyedValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for StringKeyedValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t *StubCamBridge.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  return &static StubCamBridge.shared;
}

uint64_t StubCamBridge.camBridgeState.getter()
{
  return swift_retain();
}

uint64_t StubCamBridge.camBridgeState.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t (*StubCamBridge.camBridgeState.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t StubCamBridge.warmupCalls.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 24);
}

uint64_t StubCamBridge.warmupCalls.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return result;
}

uint64_t (*StubCamBridge.warmupCalls.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t StubCamBridge.rankCallsArgs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StubCamBridge.rankCallsArgs.setter(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*StubCamBridge.rankCallsArgs.modify())()
{
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t StubCamBridge.RankCallArgs.rcId.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t StubCamBridge.RankCallArgs.actions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t StubCamBridge.RankCallArgs.rankerContext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for StubCamBridge.RankCallArgs() + 24);
  uint64_t v4 = type metadata accessor for RankerContext();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t StubCamBridge.RankCallArgs.init(rcId:actions:rankerContext:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  uint64_t v6 = (char *)a5 + *(int *)(type metadata accessor for StubCamBridge.RankCallArgs() + 24);
  uint64_t v7 = type metadata accessor for RankerContext();
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32);

  return v8(v6, a4, v7);
}

uint64_t StubCamBridge.asyncWarmUpIfSupported()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = &v12[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t v4 = *(void *)(v0 + 24);
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
    goto LABEL_5;
  }
  *(void *)(v0 + 24) = v6;
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v3, 1, 1, v7);
  if (one-time initialization token for shared != -1) {
LABEL_5:
  }
    swift_once();
  swift_beginAccess();
  uint64_t v8 = static MessageBusActor.shared;
  unint64_t v9 = lazy protocol witness table accessor for type MessageBusActor and conformance MessageBusActor();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v8;
  *(void *)(v10 + 24) = v9;
  swift_retain();
  return _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #1 in StubCamBridge.asyncWarmUpIfSupported(), v10);
}

uint64_t StubCamBridge.commit(rcId:)()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return protocol witness for ExecutionOverride.evaluate() in conformance AnnounceExecutionOverride(v1);
}

uint64_t StubCamBridge.commit(action:)()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return protocol witness for ExecutionOverride.evaluate() in conformance AnnounceExecutionOverride(v1);
}

uint64_t StubCamBridge.rank(rcId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for StubCamBridge.RankCallArgs();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v13 = (uint64_t *)((char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  int64_t v14 = (char *)v13 + *(int *)(v11 + 32);
  uint64_t v15 = type metadata accessor for RankerContext();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v14, a4, v15);
  void *v13 = a1;
  v13[1] = a2;
  int64_t v16 = (unint64_t *)(v4 + 32);
  v13[2] = a3;
  swift_beginAccess();
  unint64_t v17 = *(void *)(v4 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v4 + 32) = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v17 + 16) + 1, 1, v17);
    *int64_t v16 = v17;
  }
  unint64_t v20 = *(void *)(v17 + 16);
  unint64_t v19 = *(void *)(v17 + 24);
  if (v20 >= v19 >> 1)
  {
    unint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1, v17);
    *int64_t v16 = v17;
  }
  *(void *)(v17 + 16) = v20 + 1;
  outlined init with take of StubCamBridge.RankCallArgs((uint64_t)v13, v17+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(void *)(v10 + 72) * v20);
  uint64_t v21 = swift_endAccess();
  MEMORY[0x1F4188790](v21);
  *(&v25 - 2) = a3;
  uint64_t v22 = swift_bridgeObjectRetain();
  uint64_t v23 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay7SiriCam15ActionCandidateVGG_AH06RankedH0Vs5NeverOTg505_sSi7f5Cam15hi5VAA06j34C0VIgynr_Si6offset_AC7elementtAEs5K11OIegnrzr_TRSiAjNIgynr_Tf1cn_nTf4ng_n(v22, (void (*)(void, char *))partial apply for closure #1 in StubCamBridge.rank(rcId:actions:rankerContext:), (uint64_t)(&v25 - 4));
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t closure #1 in StubCamBridge.rank(rcId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for CamParse();
  MEMORY[0x1F4188790](v5 - 8);
  ActionCandidate.flowHandlerId.getter();
  uint64_t result = ActionCandidate.parse.getter();
  if (__OFSUB__(*(void *)(a3 + 16), a1))
  {
    __break(1u);
  }
  else
  {
    ActionCandidate.userData.getter();
    return RankedAction.init(flowHandlerId:parse:score:alternatives:userData:)();
  }
  return result;
}

uint64_t StubCamBridge.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:)()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return StubCamBridge.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:)(v1, v0, 0);
}

uint64_t StubCamBridge.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a1;
  v5[6] = a5;
  uint64_t v6 = type metadata accessor for Parse();
  v5[7] = v6;
  v5[8] = *(void *)(v6 - 8);
  v5[9] = swift_task_alloc();
  v5[10] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Input();
  v5[11] = v7;
  v5[12] = *(void *)(v7 - 8);
  v5[13] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionParaphrase?);
  v5[14] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for PluginAction();
  v5[15] = v8;
  v5[16] = *(void *)(v8 - 8);
  v5[17] = swift_task_alloc();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v9 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](StubCamBridge.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:), v9, 0);
}

uint64_t StubCamBridge.selectAction(rcId:speechPackage:rankedActions:conversationHelperInput:conversationHelper:inputOrigin:)()
{
  if (*(void *)(v0[6] + 16))
  {
    uint64_t v1 = v0[17];
    uint64_t v2 = v0[13];
    uint64_t v3 = v0[14];
    uint64_t v4 = v0[11];
    uint64_t v5 = v0[12];
    uint64_t v6 = v0[10];
    uint64_t v7 = v0[7];
    uint64_t v8 = v0[8];
    type metadata accessor for RankedAction();
    uint64_t v9 = type metadata accessor for ActionParaphrase();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v3, 1, 1, v9);
    RankedAction.toPluginAction(withSpeechPackage:withParaphrase:)(0, v3, v1);
    outlined destroy of ReferenceResolutionClientProtocol?(v3, &demangling cache variable for type metadata for ActionParaphrase?);
    PluginAction.input.getter();
    Input.parse.getter();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 88))(v6, v7);
    LODWORD(v4) = *MEMORY[0x1E4FA1F58];
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    uint64_t v12 = v0[16];
    uint64_t v11 = v0[17];
    uint64_t v13 = v0[15];
    if (v10 == v4)
    {
      uint64_t v14 = v0[5];
      (*(void (**)(void, uint64_t, void))(v0[8] + 104))(v0[9], v10, v0[7]);
      Input.init(parse:)();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
      uint64_t v15 = type metadata accessor for CamOutput();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 0, 1, v15);
    }
    else
    {
      uint64_t v18 = (uint64_t *)v0[5];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PluginAction>);
      unint64_t v19 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      uint64_t v20 = swift_allocObject();
      *(_OWORD *)(v20 + 16) = xmmword_1BA04FD90;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v12 + 32))(v20 + v19, v11, v13);
      *uint64_t v18 = v20;
      uint64_t v21 = type metadata accessor for CamOutput();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v18, 0, 1, v21);
    }
  }
  else
  {
    uint64_t v16 = v0[5];
    (*(void (**)(void, void, void))(v0[8] + 104))(v0[9], *MEMORY[0x1E4FA1F58], v0[7]);
    Input.init(parse:)();
    uint64_t v17 = type metadata accessor for CamOutput();
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 0, 1, v17);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

void *one-time initialization function for shared()
{
  type metadata accessor for StubCamBridge();
  uint64_t v0 = swift_allocObject();
  uint64_t result = StubCamBridge.init()();
  static StubCamBridge.shared = v0;
  return result;
}

uint64_t type metadata accessor for StubCamBridge.RankCallArgs()
{
  uint64_t result = type metadata singleton initialization cache for StubCamBridge.RankCallArgs;
  if (!type metadata singleton initialization cache for StubCamBridge.RankCallArgs) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1BA021D44()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t partial apply for closure #1 in StubCamBridge.asyncWarmUpIfSupported()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in CamBridgeImpl.asyncWarmUpIfSupported()();
}

uint64_t StubCamBridge.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  StubCamBridge.init()();
  return v0;
}

uint64_t static StubCamBridge.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_retain();
}

uint64_t static StubCamBridge.shared.setter(uint64_t a1)
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  static StubCamBridge.shared = a1;
  return swift_release();
}

uint64_t (*static StubCamBridge.shared.modify())()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

Swift::Void __swiftcall StubCamBridge.resetWarmupCount()()
{
  swift_beginAccess();
  *(void *)(v0 + 24) = 0;
}

uint64_t StubCamBridge.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t StubCamBridge.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void *StubCamBridge.init()()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v2 = MEMORY[0x1F4188790](v1 - 8);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v2);
  uint64_t v7 = (char *)&v14 - v6;
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v14 - v8;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
  v11(v9, 1, 1, v10);
  v11(v7, 1, 1, v10);
  v11(v4, 1, 1, v10);
  type metadata accessor for CamBridgeState();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = MEMORY[0x1E4FBC868];
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v9, v12 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_requestLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v7, v12 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_camLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v4, v12 + OBJC_IVAR____TtC14SiriKitRuntime14CamBridgeState_caarLoggingId, (uint64_t *)&demangling cache variable for type metadata for UUID?);
  v0[2] = v12;
  v0[3] = 0;
  v0[4] = MEMORY[0x1E4FBC860];
  return v0;
}

uint64_t protocol witness for CamBridge.camBridgeState.getter in conformance StubCamBridge()
{
  return swift_retain();
}

uint64_t protocol witness for CamBridge.asyncWarmUpIfSupported() in conformance StubCamBridge()
{
  return StubCamBridge.asyncWarmUpIfSupported()();
}

uint64_t protocol witness for CamBridge.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:) in conformance StubCamBridge()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return StubCamBridge.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:)(v1, v0, 0);
}

uint64_t protocol witness for CamBridge.rank(rcId:actions:rankerContext:) in conformance StubCamBridge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static MessageBusActor.shared;
  return MEMORY[0x1F4188298](protocol witness for CamBridge.rank(rcId:actions:rankerContext:) in conformance StubCamBridge, v6, 0);
}

uint64_t protocol witness for CamBridge.rank(rcId:actions:rankerContext:) in conformance StubCamBridge()
{
  uint64_t v1 = StubCamBridge.rank(rcId:actions:rankerContext:)(v0[5], v0[6], v0[7], v0[8]);
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  return v2(v1);
}

uint64_t outlined init with take of StubCamBridge.RankCallArgs(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for StubCamBridge.RankCallArgs();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in StubCamBridge.rank(rcId:actions:rankerContext:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in StubCamBridge.rank(rcId:actions:rankerContext:)(a1, a2, *(void *)(v2 + 16));
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay7SiriCam15ActionCandidateVGG_AH06RankedH0Vs5NeverOTg505_sSi7f5Cam15hi5VAA06j34C0VIgynr_Si6offset_AC7elementtAEs5K11OIegnrzr_TRSiAjNIgynr_Tf1cn_nTf4ng_n(uint64_t a1, void (*a2)(void, char *), uint64_t a3)
{
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t v38 = type metadata accessor for RankedAction();
  uint64_t v4 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  uint64_t v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: ActionCandidate));
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  uint64_t v37 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (void *)((char *)v29 - v11);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v29 - v13;
  uint64_t v41 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v15 = v41;
  uint64_t v16 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v36 = v16;
  v29[0] = a1;
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v33 = type metadata accessor for ActionCandidate();
    uint64_t v18 = *(void *)(v33 - 8);
    unint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
    uint64_t v31 = v18 + 16;
    int64_t v32 = v19;
    uint64_t v20 = a1 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
    uint64_t v21 = *(void *)(v18 + 72);
    uint64_t v22 = (void (**)(char *, char *, uint64_t))(v18 + 32);
    _OWORD v29[2] = v4 + 32;
    uint64_t v30 = v21;
    uint64_t v34 = v6;
    uint64_t v35 = v4;
    do
    {
      uint64_t v23 = &v37[*(int *)(v7 + 48)];
      uint64_t v24 = v33;
      v32(v23, v20, v33);
      uint64_t v25 = (char *)v12 + *(int *)(v7 + 48);
      *uint64_t v12 = v17;
      (*v22)(v25, v23, v24);
      outlined init with take of (offset: Int, element: Siri_Nlu_External_UserParse)?((uint64_t)v12, (uint64_t)v14, &demangling cache variable for type metadata for (offset: Int, element: ActionCandidate));
      v39(*(void *)v14, &v14[*(int *)(v7 + 48)]);
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v14, &demangling cache variable for type metadata for (offset: Int, element: ActionCandidate));
      uint64_t v15 = v41;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1);
        uint64_t v15 = v41;
      }
      unint64_t v27 = *(void *)(v15 + 16);
      unint64_t v26 = *(void *)(v15 + 24);
      if (v27 >= v26 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
        uint64_t v15 = v41;
      }
      ++v17;
      *(void *)(v15 + 16) = v27 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v35 + 32))(v15+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v35 + 72) * v27, v34, v38);
      uint64_t v41 = v15;
      v20 += v30;
    }
    while (v36 != v17);
  }
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t StubCamBridge.action(requestId:camId:rcId:speechPackage:rankedActions:inputOrigin:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  return a1(a3);
}

uint64_t type metadata accessor for StubCamBridge()
{
  return self;
}

uint64_t method lookup function for StubCamBridge(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for StubCamBridge);
}

uint64_t dispatch thunk of StubCamBridge.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t *initializeBufferWithCopyOfBuffer for StubCamBridge.RankCallArgs(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    a1[2] = a2[2];
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for RankerContext();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for StubCamBridge.RankCallArgs(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for RankerContext();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *initializeWithCopy for StubCamBridge.RankCallArgs(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for RankerContext();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for StubCamBridge.RankCallArgs(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for RankerContext();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for StubCamBridge.RankCallArgs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for RankerContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for StubCamBridge.RankCallArgs(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for RankerContext();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for StubCamBridge.RankCallArgs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1BA022CB8);
}

uint64_t sub_1BA022CB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for RankerContext();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for StubCamBridge.RankCallArgs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1BA022D7C);
}

uint64_t sub_1BA022D7C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for RankerContext();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for StubCamBridge.RankCallArgs()
{
  uint64_t result = type metadata accessor for RankerContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t FeatureToggle<>.isEnabled.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a1, a3);
  MEMORY[0x1BA9E2D40](v12, v4, v8, a1, MEMORY[0x1E4FBB390], *(void *)(a3 + 8));
  swift_bridgeObjectRelease();
  if (LOBYTE(v12[0]) == 2)
  {
    v12[3] = a1;
    v12[4] = a2;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v12);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(boxed_opaque_existential_0, v4, a1);
    char v10 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  }
  else
  {
    char v10 = v12[0] & 1;
  }
  return v10 & 1;
}

uint64_t protocol witness for FeatureToggle.isEnabled.getter in conformance AmbiguityFeatureFlags()
{
  return specialized FeatureToggle<>.isEnabled.getter(*v0);
}

uint64_t FeatureToggle<>.withForcedEnabled<A>(_:block:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  v22[1] = a3;
  uint64_t v23 = a2;
  char v11 = a1;
  v22[0] = a8;
  uint64_t v12 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v16, v15);
  MEMORY[0x1BA9E2D40](v26, v8, v17, a4, MEMORY[0x1E4FBB390], *(void *)(a7 + 8));
  swift_bridgeObjectRelease();
  uint64_t v18 = LOBYTE(v26[0]);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v8, a4);
  char v27 = v11;
  unint64_t v19 = (uint64_t (*)(void *, void))(*(uint64_t (**)(void *, uint64_t, uint64_t))(a7 + 32))(v26, a4, a7);
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  uint64_t v20 = v19(v26, 0);
  v23(v20);
  return $defer #1 <A><A1>() in FeatureToggle<>.withForcedEnabled<A>(_:block:)(v18, v8, a4, v24, v25, a7);
}

uint64_t FeatureToggle<>.withForcedEnabled<A>(_:block:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 96) = a8;
  *(void *)(v9 + 104) = v8;
  *(void *)(v9 + 80) = a6;
  *(void *)(v9 + 88) = a7;
  *(void *)(v9 + 64) = a4;
  *(void *)(v9 + 72) = a5;
  *(unsigned char *)(v9 + 146) = a2;
  *(void *)(v9 + 48) = a1;
  *(void *)(v9 + 56) = a3;
  *(void *)(v9 + 112) = *(void *)(a5 - 8);
  *(void *)(v9 + 120) = swift_task_alloc();
  return MEMORY[0x1F4188298](FeatureToggle<>.withForcedEnabled<A>(_:block:), 0, 0);
}

uint64_t FeatureToggle<>.withForcedEnabled<A>(_:block:)()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v12 = *(int **)(v0 + 56);
  char v11 = *(unsigned char *)(v0 + 146);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v5, v4);
  MEMORY[0x1BA9E2D40](v3, v6, v5, MEMORY[0x1E4FBB390], *(void *)(v4 + 8));
  swift_bridgeObjectRelease();
  *(unsigned char *)(v0 + 147) = *(unsigned char *)(v0 + 144);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v2, v3, v5);
  *(unsigned char *)(v0 + 145) = v11;
  uint64_t v7 = (void (*)(uint64_t, void))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v0 + 16, v5, v4);
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  v7(v0 + 16, 0);
  uint64_t v13 = (uint64_t (*)(uint64_t))((char *)v12 + *v12);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v8;
  *uint64_t v8 = v0;
  v8[1] = FeatureToggle<>.withForcedEnabled<A>(_:block:);
  uint64_t v9 = *(void *)(v0 + 48);
  return v13(v9);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 136) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = FeatureToggle<>.withForcedEnabled<A>(_:block:);
  }
  else {
    uint64_t v2 = FeatureToggle<>.withForcedEnabled<A>(_:block:);
  }
  return MEMORY[0x1F4188298](v2, 0, 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  $defer #1 <A><A1>() in FeatureToggle<>.withForcedEnabled<A>(_:block:)(*(unsigned __int8 *)(v0 + 147), *(void *)(v0 + 104), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96));
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  $defer #1 <A><A1>() in FeatureToggle<>.withForcedEnabled<A>(_:block:)(*(unsigned __int8 *)(v0 + 147), *(void *)(v0 + 104), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96));
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t $defer #1 <A><A1>() in FeatureToggle<>.withForcedEnabled<A>(_:block:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v9 = a1;
  MEMORY[0x1F4188790](a1);
  if (v12 == 2)
  {
    uint64_t v13 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a6 + 32))(v17, a3, a6);
    type metadata accessor for Dictionary();
    Dictionary.removeValue(forKey:)();
    return v13(v17, 0);
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(&v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], a2, a3);
    v17[39] = v9;
    uint64_t v15 = (uint64_t (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a6 + 32))(v17, a3, a6);
    type metadata accessor for Dictionary();
    Dictionary.subscript.setter();
    return v15(v17, 0);
  }
}

uint64_t *SydneyConversationFeatureFlags.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  return &static SydneyConversationFeatureFlags.forceEnabled;
}

uint64_t static SydneyConversationFeatureFlags.forceEnabled.getter()
{
  return static SydneyConversationFeatureFlags.forceEnabled.getter(&one-time initialization token for forceEnabled);
}

uint64_t static SydneyConversationFeatureFlags.forceEnabled.setter(uint64_t a1)
{
  return static SydneyConversationFeatureFlags.forceEnabled.setter(a1, &one-time initialization token for forceEnabled, &static SydneyConversationFeatureFlags.forceEnabled);
}

uint64_t (*static SydneyConversationFeatureFlags.forceEnabled.modify())()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

const char *SydneyConversationFeatureFlags.domain.getter()
{
  return "Siri";
}

const char *SydneyConversationFeatureFlags.feature.getter(char a1)
{
  if (!a1) {
    return "fall2022_conversation_runtime";
  }
  if (a1 == 1) {
    return "SKESiriCorrectionsCheckUndo";
  }
  return "SKESiriCorrectionsUndoFollowup";
}

BOOL static SydneyConversationFeatureFlags.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void SydneyConversationFeatureFlags.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int SydneyConversationFeatureFlags.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.setter in conformance SydneyConversationFeatureFlags(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static FeatureToggle.forceEnabled.setter in conformance SydneyConversationFeatureFlags(a1, a2, a3, &one-time initialization token for forceEnabled, &static SydneyConversationFeatureFlags.forceEnabled);
}

uint64_t (*protocol witness for static FeatureToggle.forceEnabled.modify in conformance SydneyConversationFeatureFlags())()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t protocol witness for FeatureToggle.isEnabled.getter in conformance SydneyConversationFeatureFlags()
{
  return specialized FeatureToggle<>.isEnabled.getter(*v0);
}

uint64_t *SiriKitFlowFeatureFlagDefinitions.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  return &static SiriKitFlowFeatureFlagDefinitions.forceEnabled;
}

uint64_t static SiriKitFlowFeatureFlagDefinitions.forceEnabled.getter()
{
  return static SydneyConversationFeatureFlags.forceEnabled.getter(&one-time initialization token for forceEnabled);
}

uint64_t static SiriKitFlowFeatureFlagDefinitions.forceEnabled.setter(uint64_t a1)
{
  return static SydneyConversationFeatureFlags.forceEnabled.setter(a1, &one-time initialization token for forceEnabled, &static SiriKitFlowFeatureFlagDefinitions.forceEnabled);
}

uint64_t (*static SiriKitFlowFeatureFlagDefinitions.forceEnabled.modify())()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

const char *SiriKitFlowFeatureFlagDefinitions.domain.getter()
{
  return "SiriKitFlow";
}

const char *SiriKitFlowFeatureFlagDefinitions.feature.getter()
{
  return "Link";
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.setter in conformance SiriKitFlowFeatureFlagDefinitions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static FeatureToggle.forceEnabled.setter in conformance SydneyConversationFeatureFlags(a1, a2, a3, &one-time initialization token for forceEnabled, &static SiriKitFlowFeatureFlagDefinitions.forceEnabled);
}

uint64_t (*protocol witness for static FeatureToggle.forceEnabled.modify in conformance SiriKitFlowFeatureFlagDefinitions())()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t *SiriPlaybackControlFeature.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  return &static SiriPlaybackControlFeature.forceEnabled;
}

uint64_t static SiriPlaybackControlFeature.forceEnabled.getter()
{
  return static SydneyConversationFeatureFlags.forceEnabled.getter(&one-time initialization token for forceEnabled);
}

uint64_t static SiriPlaybackControlFeature.forceEnabled.setter(uint64_t a1)
{
  return static SydneyConversationFeatureFlags.forceEnabled.setter(a1, &one-time initialization token for forceEnabled, &static SiriPlaybackControlFeature.forceEnabled);
}

uint64_t (*static SiriPlaybackControlFeature.forceEnabled.modify())()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

const char *SiriPlaybackControlFeature.domain.getter()
{
  return "SiriPlaybackControls";
}

const char *SiriPlaybackControlFeature.feature.getter()
{
  return "quick_stop_call_bell";
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.setter in conformance SiriPlaybackControlFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static FeatureToggle.forceEnabled.setter in conformance SydneyConversationFeatureFlags(a1, a2, a3, &one-time initialization token for forceEnabled, &static SiriPlaybackControlFeature.forceEnabled);
}

uint64_t (*protocol witness for static FeatureToggle.forceEnabled.modify in conformance SiriPlaybackControlFeature())()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t *SiriPhoneFeature.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  return &static SiriPhoneFeature.forceEnabled;
}

uint64_t static SiriPhoneFeature.forceEnabled.getter()
{
  return static SydneyConversationFeatureFlags.forceEnabled.getter(&one-time initialization token for forceEnabled);
}

uint64_t static SiriPhoneFeature.forceEnabled.setter(uint64_t a1)
{
  return static SydneyConversationFeatureFlags.forceEnabled.setter(a1, &one-time initialization token for forceEnabled, &static SiriPhoneFeature.forceEnabled);
}

uint64_t (*static SiriPhoneFeature.forceEnabled.modify())()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

const char *SiriPhoneFeature.domain.getter()
{
  return "SiriPhone";
}

const char *SiriPhoneFeature.feature.getter()
{
  return "CancelCallBell";
}

uint64_t static SiriPhoneFeature.== infix(_:_:)()
{
  return 1;
}

void SiriPhoneFeature.hash(into:)()
{
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.setter in conformance SiriPhoneFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static FeatureToggle.forceEnabled.setter in conformance SydneyConversationFeatureFlags(a1, a2, a3, &one-time initialization token for forceEnabled, &static SiriPhoneFeature.forceEnabled);
}

uint64_t (*protocol witness for static FeatureToggle.forceEnabled.modify in conformance SiriPhoneFeature())()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

uint64_t *LinkFeature.forceEnabled.unsafeMutableAddressor()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  return &static LinkFeature.forceEnabled;
}

uint64_t static LinkFeature.forceEnabled.getter()
{
  return static SydneyConversationFeatureFlags.forceEnabled.getter(&one-time initialization token for forceEnabled);
}

uint64_t static SydneyConversationFeatureFlags.forceEnabled.getter(void *a1)
{
  if (*a1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static LinkFeature.forceEnabled.setter(uint64_t a1)
{
  return static SydneyConversationFeatureFlags.forceEnabled.setter(a1, &one-time initialization token for forceEnabled, &static LinkFeature.forceEnabled);
}

uint64_t static SydneyConversationFeatureFlags.forceEnabled.setter(uint64_t a1, void *a2, void *a3)
{
  if (*a2 != -1) {
    swift_once();
  }
  swift_beginAccess();
  *a3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static LinkFeature.forceEnabled.modify())()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

const char *LinkFeature.domain.getter()
{
  return "Link";
}

const char *LinkFeature.feature.getter()
{
  return "conditionallyEnabledIntents";
}

uint64_t static LinkFeature.== infix(_:_:)()
{
  return 1;
}

void LinkFeature.hash(into:)()
{
}

Swift::Int LinkFeature.hashValue.getter()
{
  return Hasher._finalize()();
}

unint64_t instantiation function for generic protocol witness table for SydneyConversationFeatureFlags(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SydneyConversationFeatureFlags and conformance SydneyConversationFeatureFlags();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for SiriKitFlowFeatureFlagDefinitions(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SiriKitFlowFeatureFlagDefinitions and conformance SiriKitFlowFeatureFlagDefinitions();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for SiriPlaybackControlFeature(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SiriPlaybackControlFeature and conformance SiriPlaybackControlFeature();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for SiriPhoneFeature(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SiriPhoneFeature and conformance SiriPhoneFeature();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.setter in conformance LinkFeature(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static FeatureToggle.forceEnabled.setter in conformance SydneyConversationFeatureFlags(a1, a2, a3, &one-time initialization token for forceEnabled, &static LinkFeature.forceEnabled);
}

uint64_t protocol witness for static FeatureToggle.forceEnabled.setter in conformance SydneyConversationFeatureFlags(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  if (*a4 != -1) {
    swift_once();
  }
  swift_beginAccess();
  *a5 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for static FeatureToggle.forceEnabled.modify in conformance LinkFeature())()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  return protocol witness for static FeatureToggle.forceEnabled.modify in conformance AmbiguityFeatureFlags;
}

unint64_t instantiation function for generic protocol witness table for LinkFeature(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LinkFeature and conformance LinkFeature();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of static FeatureToggle.forceEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static FeatureToggle.forceEnabled.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static FeatureToggle.forceEnabled.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of FeatureToggle.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

unsigned char *storeEnumTagSinglePayload for SydneyConversationFeatureFlags(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1BA0246D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SydneyConversationFeatureFlags()
{
  return &type metadata for SydneyConversationFeatureFlags;
}

ValueMetadata *type metadata accessor for SiriKitFlowFeatureFlagDefinitions()
{
  return &type metadata for SiriKitFlowFeatureFlagDefinitions;
}

ValueMetadata *type metadata accessor for SiriPlaybackControlFeature()
{
  return &type metadata for SiriPlaybackControlFeature;
}

ValueMetadata *type metadata accessor for SiriPhoneFeature()
{
  return &type metadata for SiriPhoneFeature;
}

unsigned char *storeEnumTagSinglePayload for SiriKitFlowFeatureFlagDefinitions(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1BA0247E0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for LinkFeature()
{
  return &type metadata for LinkFeature;
}

SiriKitRuntime::SystemCommandsAffinityScorer __swiftcall SystemCommandsAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA062B60;
  uint64_t v1 = 0xD00000000000002FLL;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t *SystemCommandsAffinityScorer.kSupportedIdentifierNamespaces.unsafeMutableAddressor()
{
  if (one-time initialization token for kSupportedIdentifierNamespaces != -1) {
    swift_once();
  }
  return &static SystemCommandsAffinityScorer.kSupportedIdentifierNamespaces;
}

uint64_t static SystemCommandsAffinityScorer.kSupportedIdentifierNamespaces.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kSupportedIdentifierNamespaces);
}

void one-time initialization function for kUnsupportedIdentifierValues()
{
  static SystemCommandsAffinityScorer.kUnsupportedIdentifierValues = (uint64_t)&outlined read-only object #0 of one-time initialization function for kUnsupportedIdentifierValues;
}

uint64_t *SystemCommandsAffinityScorer.kUnsupportedIdentifierValues.unsafeMutableAddressor()
{
  if (one-time initialization token for kUnsupportedIdentifierValues != -1) {
    swift_once();
  }
  return &static SystemCommandsAffinityScorer.kUnsupportedIdentifierValues;
}

uint64_t static SystemCommandsAffinityScorer.kUnsupportedIdentifierValues.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kUnsupportedIdentifierValues);
}

uint64_t *SystemCommandsAffinityScorer.kHKEntityTypes.unsafeMutableAddressor()
{
  if (one-time initialization token for kHKEntityTypes != -1) {
    swift_once();
  }
  return &static SystemCommandsAffinityScorer.kHKEntityTypes;
}

uint64_t static SystemCommandsAffinityScorer.kHKEntityTypes.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kHKEntityTypes);
}

uint64_t *SystemCommandsAffinityScorer.kHAExactNamespaceMatches.unsafeMutableAddressor()
{
  if (one-time initialization token for kHAExactNamespaceMatches != -1) {
    swift_once();
  }
  return &static SystemCommandsAffinityScorer.kHAExactNamespaceMatches;
}

uint64_t static SystemCommandsAffinityScorer.kHAExactNamespaceMatches.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kHAExactNamespaceMatches);
}

uint64_t one-time initialization function for kCarCommandsExactNamespaceMatches()
{
  Swift::Int v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for kCarCommandsExactNamespaceMatches);
  uint64_t result = swift_arrayDestroy();
  static SystemCommandsAffinityScorer.kCarCommandsExactNamespaceMatches = v0;
  return result;
}

uint64_t *SystemCommandsAffinityScorer.kCarCommandsExactNamespaceMatches.unsafeMutableAddressor()
{
  if (one-time initialization token for kCarCommandsExactNamespaceMatches != -1) {
    swift_once();
  }
  return &static SystemCommandsAffinityScorer.kCarCommandsExactNamespaceMatches;
}

uint64_t static SystemCommandsAffinityScorer.kCarCommandsExactNamespaceMatches.getter()
{
  return static CarCommandsAffinityScorer.kDonatedVocabNamespaceMatches.getter(&one-time initialization token for kCarCommandsExactNamespaceMatches);
}

void *SystemCommandsAffinityScorer.kSystemAttributeIdentifierNamespace.unsafeMutableAddressor()
{
  return &static SystemCommandsAffinityScorer.kSystemAttributeIdentifierNamespace;
}

uint64_t static SystemCommandsAffinityScorer.kSystemAttributeIdentifierNamespace.getter()
{
  return 0x74416D6574737973;
}

const char *SystemCommandsAffinityScorer.kSystemCategoryIdentifierNamespace.unsafeMutableAddressor()
{
  return "systemCategory";
}

uint64_t static SystemCommandsAffinityScorer.kSystemCategoryIdentifierNamespace.getter()
{
  return 0x61436D6574737973;
}

const char *SystemCommandsAffinityScorer.kAnswerProductIdentifierNamespace.unsafeMutableAddressor()
{
  return "answerProduct";
}

uint64_t static SystemCommandsAffinityScorer.kAnswerProductIdentifierNamespace.getter()
{
  return 0x7250726577736E61;
}

const char *SystemCommandsAffinityScorer.kSystemCategoryIdentifierScreen.unsafeMutableAddressor()
{
  return "screen";
}

uint64_t static SystemCommandsAffinityScorer.kSystemCategoryIdentifierScreen.getter()
{
  return 0x6E6565726373;
}

const char *SystemCommandsAffinityScorer.kSystemAttributeIdentifierLock.unsafeMutableAddressor()
{
  return "lock";
}

uint64_t static SystemCommandsAffinityScorer.kSystemAttributeIdentifierLock.getter()
{
  return 1801678700;
}

const char *SystemCommandsAffinityScorer.kSystemCategoryIdentifierGuestMode.unsafeMutableAddressor()
{
  return "sharingmode";
}

uint64_t static SystemCommandsAffinityScorer.kSystemCategoryIdentifierGuestMode.getter()
{
  return 0x6D676E6972616873;
}

const char *SystemCommandsAffinityScorer.kAnswerProductIdentifierProduct.unsafeMutableAddressor()
{
  return "product";
}

uint64_t static SystemCommandsAffinityScorer.kAnswerProductIdentifierProduct.getter()
{
  return 0x746375646F7270;
}

uint64_t SystemCommandsAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t SystemCommandsAffinityScorer.score(input:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized SystemCommandsAffinityScorer.score(input:environment:)(a1, a3, a4);
}

uint64_t SystemCommandsAffinityScorer.hasEverywhereUserEntity(usoTask:)()
{
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v8[3])
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_17;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Uso_VerbTemplate_ReferenceTrigger<UsoEntity_common_Setting>);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_17:
    LOBYTE(v1) = 0;
    return v1 & 1;
  }
  unint64_t v0 = dispatch thunk of Uso_VerbTemplate_ReferenceTrigger.userEntities.getter();
  unint64_t v1 = v0;
  if (!v0)
  {
    swift_release();
    return v1 & 1;
  }
  v8[0] = MEMORY[0x1E4FBC860];
  if (!(v0 >> 62))
  {
    uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_6;
    }
LABEL_21:
    swift_bridgeObjectRelease();
    unint64_t v6 = MEMORY[0x1E4FBC860];
LABEL_22:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    LOBYTE(v1) = specialized Sequence.contains(where:)(v6);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    return v1 & 1;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_21;
  }
LABEL_6:
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0) {
        MEMORY[0x1BA9E3990](i, v1);
      }
      else {
        swift_retain();
      }
      dispatch thunk of CodeGenListEntry.entry.getter();
      uint64_t v5 = swift_release();
      if (v7)
      {
        MEMORY[0x1BA9E3030](v5);
        if (*(void *)((v8[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v8[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v6 = v8[0];
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

uint64_t UsoTask.isExpandedSupportedSettingTask.getter()
{
  static UsoTask_CodegenConverter.convert(task:)();
  if (!v4) {
    goto LABEL_9;
  }
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v3, (uint64_t)v2, (uint64_t *)&demangling cache variable for type metadata for Any?);
  type metadata accessor for UsoTask_checkExistence_common_Setting();
  if (!swift_dynamicCast())
  {
    type metadata accessor for UsoTask_noVerb_common_Setting();
    if (!swift_dynamicCast())
    {
      type metadata accessor for UsoTask_open_common_Setting();
      if (!swift_dynamicCast())
      {
        type metadata accessor for UsoTask_set_common_Setting();
        if (!swift_dynamicCast())
        {
          type metadata accessor for UsoTask_toggle_common_Setting();
          if (!swift_dynamicCast())
          {
            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
LABEL_9:
            uint64_t v0 = 0;
            goto LABEL_10;
          }
        }
      }
    }
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v2);
  uint64_t v0 = 1;
LABEL_10:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v0;
}

uint64_t Siri_Nlu_External_UsoGraph.isIdentifierMatchGuestMode.getter()
{
  uint64_t v35 = type metadata accessor for Google_Protobuf_StringValue();
  uint64_t v0 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v2 = (char *)v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  char v9 = (char *)v32 - v8;
  uint64_t v10 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  uint64_t v11 = *(void *)(v10 + 16);
  if (!v11)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
  uint64_t v12 = v4 + 16;
  uint64_t v36 = v13;
  unint64_t v14 = v10 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
  uint64_t v15 = (void (**)(char *, uint64_t))(v12 - 8);
  uint64_t v33 = *(void *)(v12 + 56);
  uint64_t v34 = (void (**)(char *, uint64_t))(v0 + 8);
  v32[1] = v10;
  swift_bridgeObjectRetain();
  uint64_t v16 = v12;
  while (1)
  {
    uint64_t v19 = v16;
    v36(v9, v14, v3);
    Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
    uint64_t v20 = Google_Protobuf_StringValue.value.getter();
    uint64_t v22 = v21;
    (*v34)(v2, v35);
    if (v20 == 0x61436D6574737973 && v22 == 0xEE0079726F676574)
    {
      swift_bridgeObjectRelease();
      v36(v7, (unint64_t)v9, v3);
    }
    else
    {
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v36(v7, (unint64_t)v9, v3);
      if ((v23 & 1) == 0)
      {
        uint64_t v25 = *v15;
        (*v15)(v7, v3);
        v25(v9, v3);
        goto LABEL_4;
      }
    }
    if (Siri_Nlu_External_UsoEntityIdentifier.value.getter() == 0x6D676E6972616873 && v24 == 0xEB0000000065646FLL) {
      break;
    }
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    uint64_t v18 = *v15;
    (*v15)(v7, v3);
    v18(v9, v3);
    if (v17) {
      goto LABEL_15;
    }
LABEL_4:
    v14 += v33;
    --v11;
    uint64_t v16 = v19;
    if (!v11)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  char v27 = *v15;
  (*v15)(v7, v3);
  v27(v9, v3);
LABEL_15:
  swift_bridgeObjectRelease_n();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Logger.executor);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v31 = 0;
    _os_log_impl(&dword_1B9C64000, v29, v30, "SystemCommandsAffinityScorer | Found guest mode identifier", v31, 2u);
    MEMORY[0x1BA9E48C0](v31, -1, -1);
  }

  return 1;
}

BOOL closure #1 in SystemCommandsAffinityScorer.hasHKFuzzyMatch(_:)(uint64_t a1)
{
  uint64_t v57 = a1;
  uint64_t v59 = type metadata accessor for UsoEntitySpan();
  uint64_t v58 = *(void *)(v59 - 8);
  uint64_t v1 = MEMORY[0x1F4188790](v59);
  unint64_t v53 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = MEMORY[0x1F4188790](v1);
  int v54 = (char *)&v45 - v4;
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v56 = (char *)&v45 - v6;
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v45 - v7;
  uint64_t v9 = type metadata accessor for IdentifierNamespace();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  long long v47 = xmmword_1BA04FD90;
  *(_OWORD *)(inited + 16) = xmmword_1BA04FD90;
  uint64_t v14 = *MEMORY[0x1E4FA3060];
  uint64_t v15 = *(void (**)(char *, void, uint64_t))(v10 + 104);
  uint64_t v49 = v10 + 104;
  uint64_t v48 = v15;
  v15(v12, v14, v9);
  uint64_t v16 = IdentifierNamespace.rawValue.getter();
  uint64_t v18 = v17;
  uint64_t v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v51 = v10 + 8;
  uint64_t v52 = v9;
  uint64_t v46 = v19;
  v19(v12, v9);
  *(void *)(inited + 32) = v16;
  *(void *)(inited + 40) = v18;
  if (*(void *)(inited + 16)) {
    Swift::Int v20 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  }
  else {
    Swift::Int v20 = MEMORY[0x1E4FBC870];
  }
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v21 = v57;
  BOOL v22 = UsoEntitySpan.anyPropertiesKeyMatchAny(value:)(v20);
  swift_bridgeObjectRelease();
  uint64_t v23 = v58;
  uint64_t v55 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 16);
  v55(v8, v21, v59);
  if (v22)
  {
    if (one-time initialization token for kHKEntityTypes != -1) {
      swift_once();
    }
    BOOL v24 = UsoEntitySpan.anyPropertiesValueMatchAny(value:)(static SystemCommandsAffinityScorer.kHKEntityTypes);
  }
  else
  {
    BOOL v24 = 0;
  }
  char v27 = *(void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v25 = v23 + 8;
  unint64_t v26 = v27;
  uint64_t v28 = v59;
  v27(v8, v59);
  os_log_type_t v30 = v55;
  uint64_t v29 = v56;
  v55(v56, v21, v28);
  if (v24)
  {
    v26(v29, v28);
    uint64_t v31 = v54;
    v30(v54, v21, v28);
    int64_t v32 = v53;
  }
  else
  {
    uint64_t v33 = v26;
    uint64_t v58 = v25;
    uint64_t v34 = swift_initStackObject();
    *(_OWORD *)(v34 + 16) = v47;
    uint64_t v35 = v52;
    v48(v12, *MEMORY[0x1E4FA3068], v52);
    uint64_t v36 = IdentifierNamespace.rawValue.getter();
    uint64_t v38 = v37;
    v46(v12, v35);
    *(void *)(v34 + 32) = v36;
    *(void *)(v34 + 40) = v38;
    if (*(void *)(v34 + 16)) {
      Swift::Int v39 = specialized Set.init(_nonEmptyArrayLiteral:)(v34);
    }
    else {
      Swift::Int v39 = MEMORY[0x1E4FBC870];
    }
    int64_t v32 = v53;
    uint64_t v31 = v54;
    uint64_t v28 = v59;
    swift_setDeallocating();
    swift_arrayDestroy();
    uint64_t v40 = v56;
    BOOL v41 = UsoEntitySpan.anyPropertiesKeyMatchAny(value:)(v39);
    swift_bridgeObjectRelease();
    unint64_t v26 = v33;
    v33(v40, v28);
    os_log_type_t v30 = v55;
    v55(v31, v57, v28);
    if (!v41)
    {
      BOOL v43 = 0;
      goto LABEL_20;
    }
  }
  Swift::Bool v42 = UsoEntitySpan.hasNLFuzzyMatch()();
  v30(v32, (uint64_t)v31, v28);
  BOOL v43 = v42 || UsoEntitySpan.hasVocabFuzzyMatch()();
  v26(v32, v28);
LABEL_20:
  v26(v31, v28);
  return v43;
}

uint64_t specialized SystemCommandsAffinityScorer.hasAssociatedEverywhereUserEntity(userEntity:)()
{
  uint64_t v53 = type metadata accessor for UsoEntity_common_UserEntity.DefinedValues();
  uint64_t v0 = *(uint64_t (***)(char *, uint64_t, uint64_t))(v53 - 8);
  MEMORY[0x1F4188790](v53);
  Swift::Bool v42 = (char *)&v40 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_UserEntity.DefinedValues?, UsoEntity_common_UserEntity.DefinedValues?));
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v55 = (uint64_t)&v40 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v46 = (uint64_t)&v40 - v11;
  unint64_t v12 = dispatch thunk of UsoEntity_common_UserEntity.associatedUserEntities.getter();
  if (!v12) {
    return 0;
  }
  unint64_t v13 = v12;
  uint64_t v45 = v8;
  unint64_t v57 = MEMORY[0x1E4FBC860];
  if (!(v12 >> 62))
  {
    uint64_t v14 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_4;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    unint64_t v18 = MEMORY[0x1E4FBC860];
LABEL_18:
    swift_bridgeObjectRelease();
    uint64_t v20 = v46;
    if (v18 >> 62) {
      goto LABEL_37;
    }
    uint64_t v21 = *(void *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v21; uint64_t v21 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v51 = (void (**)(uint64_t, void, uint64_t))(v0 + 13);
      unint64_t v52 = v18 & 0xC000000000000001;
      uint64_t v50 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 7);
      unsigned int v49 = *MEMORY[0x1E4FA2B78];
      uint64_t v40 = (void (**)(char *, uint64_t, uint64_t))(v0 + 4);
      uint64_t v41 = v2;
      BOOL v22 = (void (**)(uint64_t, uint64_t))(v0 + 1);
      v0 += 6;
      BOOL v43 = v0;
      int64_t v44 = v22;
      uint64_t v23 = 4;
      uint64_t v47 = v21;
      unint64_t v48 = v18;
      while (1)
      {
        uint64_t v25 = v23 - 4;
        if (!v52) {
          break;
        }
        uint64_t v26 = MEMORY[0x1BA9E3990](v23 - 4, v18);
        uint64_t v27 = v23 - 3;
        if (__OFADD__(v25, 1)) {
          goto LABEL_36;
        }
LABEL_29:
        uint64_t v54 = v26;
        dispatch thunk of UsoEntity_common_UserEntity.definedValue.getter();
        uint64_t v28 = v55;
        uint64_t v29 = v53;
        (*v51)(v55, v49, v53);
        (*v50)(v28, 0, 1, v29);
        uint64_t v30 = (uint64_t)&v4[*(int *)(v2 + 48)];
        outlined init with copy of ReferenceResolutionClientProtocol?(v20, (uint64_t)v4, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
        outlined init with copy of ReferenceResolutionClientProtocol?(v28, v30, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
        uint64_t v31 = *v0;
        if ((*v0)(v4, 1, v29) == 1)
        {
          int v24 = v31((char *)v30, 1, v29);
          unint64_t v18 = v48;
          if (v24 == 1)
          {
            outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
            outlined destroy of ReferenceResolutionClientProtocol?(v55, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
            outlined destroy of ReferenceResolutionClientProtocol?(v20, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
            swift_release();
LABEL_35:
            uint64_t v19 = 1;
            goto LABEL_39;
          }
          goto LABEL_22;
        }
        uint64_t v32 = (uint64_t)v4;
        uint64_t v33 = (uint64_t)v4;
        uint64_t v34 = (uint64_t)v45;
        outlined init with copy of ReferenceResolutionClientProtocol?(v32, (uint64_t)v45, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
        if (v31((char *)v30, 1, v29) == 1)
        {
          (*v44)(v34, v29);
          uint64_t v4 = (char *)v33;
          uint64_t v20 = v46;
          unint64_t v18 = v48;
          uint64_t v0 = v43;
LABEL_22:
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, &demangling cache variable for type metadata for (UsoEntity_common_UserEntity.DefinedValues?, UsoEntity_common_UserEntity.DefinedValues?));
          outlined destroy of ReferenceResolutionClientProtocol?(v55, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
          outlined destroy of ReferenceResolutionClientProtocol?(v20, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
          swift_release();
          goto LABEL_23;
        }
        uint64_t v35 = v42;
        (*v40)(v42, v30, v29);
        lazy protocol witness table accessor for type UsoEntity_common_UserEntity.DefinedValues and conformance UsoEntity_common_UserEntity.DefinedValues();
        char v36 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v37 = *v44;
        (*v44)(v34, v29);
        uint64_t v38 = v35;
        uint64_t v2 = v41;
        v37((uint64_t)v38, v29);
        outlined destroy of ReferenceResolutionClientProtocol?(v33, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
        outlined destroy of ReferenceResolutionClientProtocol?(v55, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
        uint64_t v39 = v46;
        outlined destroy of ReferenceResolutionClientProtocol?(v46, &demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
        swift_release();
        uint64_t v4 = (char *)v33;
        uint64_t v20 = v39;
        unint64_t v18 = v48;
        uint64_t v0 = v43;
        if (v36) {
          goto LABEL_35;
        }
LABEL_23:
        ++v23;
        if (v27 == v47) {
          goto LABEL_38;
        }
      }
      uint64_t v26 = swift_retain();
      uint64_t v27 = v23 - 3;
      if (!__OFADD__(v25, 1)) {
        goto LABEL_29;
      }
LABEL_36:
      __break(1u);
LABEL_37:
      swift_bridgeObjectRetain();
    }
LABEL_38:
    uint64_t v19 = 0;
LABEL_39:
    swift_bridgeObjectRelease_n();
    return v19;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v14 = result;
  if (!result) {
    goto LABEL_17;
  }
LABEL_4:
  if (v14 >= 1)
  {
    for (uint64_t i = 0; i != v14; ++i)
    {
      if ((v13 & 0xC000000000000001) != 0) {
        MEMORY[0x1BA9E3990](i, v13);
      }
      else {
        swift_retain();
      }
      dispatch thunk of CodeGenListEntry.entry.getter();
      uint64_t v17 = swift_release();
      if (v56)
      {
        MEMORY[0x1BA9E3030](v17);
        if (*(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    unint64_t v18 = v57;
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

uint64_t specialized Sequence.contains(where:)(unint64_t a1)
{
  if (a1 >> 62)
  {
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      uint64_t v3 = 4;
      while (1)
      {
        uint64_t v4 = v3 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1BA9E3990](v3 - 4, a1);
          uint64_t v5 = v3 - 3;
          if (__OFADD__(v4, 1)) {
            goto LABEL_12;
          }
        }
        else
        {
          swift_retain();
          uint64_t v5 = v3 - 3;
          if (__OFADD__(v4, 1))
          {
LABEL_12:
            __break(1u);
            goto LABEL_13;
          }
        }
        char v6 = specialized SystemCommandsAffinityScorer.hasAssociatedEverywhereUserEntity(userEntity:)();
        swift_release();
        if ((v6 & 1) == 0)
        {
          ++v3;
          if (v5 != v2) {
            continue;
          }
        }
        goto LABEL_15;
      }
    }
  }
  char v6 = 0;
LABEL_15:
  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t specialized SystemCommandsAffinityScorer.isIdentifierMatchScreen(on:)()
{
  uint64_t v35 = type metadata accessor for Google_Protobuf_StringValue();
  uint64_t v0 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v2 = (char *)v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v32 - v8;
  uint64_t v10 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  uint64_t v11 = *(void *)(v10 + 16);
  if (!v11)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  unint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
  uint64_t v12 = v4 + 16;
  char v36 = v13;
  unint64_t v14 = v10 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
  uint64_t v15 = (void (**)(char *, uint64_t))(v12 - 8);
  uint64_t v33 = *(void *)(v12 + 56);
  uint64_t v34 = (void (**)(char *, uint64_t))(v0 + 8);
  v32[1] = v10;
  swift_bridgeObjectRetain();
  uint64_t v16 = v12;
  while (1)
  {
    uint64_t v19 = v16;
    v36(v9, v14, v3);
    Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
    uint64_t v20 = Google_Protobuf_StringValue.value.getter();
    uint64_t v22 = v21;
    (*v34)(v2, v35);
    if (v20 == 0x61436D6574737973 && v22 == 0xEE0079726F676574)
    {
      swift_bridgeObjectRelease();
      v36(v7, (unint64_t)v9, v3);
    }
    else
    {
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v36(v7, (unint64_t)v9, v3);
      if ((v23 & 1) == 0)
      {
        uint64_t v25 = *v15;
        (*v15)(v7, v3);
        v25(v9, v3);
        goto LABEL_4;
      }
    }
    if (Siri_Nlu_External_UsoEntityIdentifier.value.getter() == 0x6E6565726373 && v24 == 0xE600000000000000) {
      break;
    }
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    unint64_t v18 = *v15;
    (*v15)(v7, v3);
    v18(v9, v3);
    if (v17) {
      goto LABEL_15;
    }
LABEL_4:
    v14 += v33;
    --v11;
    uint64_t v16 = v19;
    if (!v11)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v27 = *v15;
  (*v15)(v7, v3);
  v27(v9, v3);
LABEL_15:
  swift_bridgeObjectRelease_n();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Logger.executor);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v31 = 0;
    _os_log_impl(&dword_1B9C64000, v29, v30, "SystemCommandsAffinityScorer | Found screen identifier", v31, 2u);
    MEMORY[0x1BA9E48C0](v31, -1, -1);
  }

  return 1;
}

uint64_t specialized SystemCommandsAffinityScorer.isIdentifierMatchAnswerProduct(on:)()
{
  uint64_t v26 = type metadata accessor for Google_Protobuf_StringValue();
  uint64_t v0 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v2 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v10 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v9 = v4 + 16;
    unint64_t v11 = v7 + ((*(unsigned __int8 *)(v9 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 64));
    uint64_t v12 = (void (**)(char *, uint64_t))(v0 + 8);
    unint64_t v13 = (void (**)(char *, uint64_t))(v9 - 8);
    uint64_t v24 = *(void *)(v9 + 56);
    uint64_t v25 = v10;
    uint64_t v23 = v7;
    swift_bridgeObjectRetain();
    while (1)
    {
      v25(v6, v11, v3);
      Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
      uint64_t v14 = Google_Protobuf_StringValue.value.getter();
      uint64_t v16 = v15;
      (*v12)(v2, v26);
      if (v14 == 0x7250726577736E61 && v16 == 0xED0000746375646FLL) {
        break;
      }
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*v13)(v6, v3);
      if (v17) {
        goto LABEL_11;
      }
      v11 += v24;
      if (!--v8)
      {
        swift_bridgeObjectRelease_n();
        return 0;
      }
    }
    swift_bridgeObjectRelease();
    (*v13)(v6, v3);
LABEL_11:
    swift_bridgeObjectRelease_n();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.executor);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl(&dword_1B9C64000, v20, v21, "SystemCommandsAffinityScorer | Found answerProduct identifier", v22, 2u);
      MEMORY[0x1BA9E48C0](v22, -1, -1);
    }

    return 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t specialized SystemCommandsAffinityScorer.isIdentifierMatchProduct(on:)()
{
  uint64_t v35 = type metadata accessor for Google_Protobuf_StringValue();
  uint64_t v0 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v2 = (char *)v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v32 - v8;
  uint64_t v10 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  uint64_t v11 = *(void *)(v10 + 16);
  if (!v11)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  unint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
  uint64_t v12 = v4 + 16;
  char v36 = v13;
  unint64_t v14 = v10 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
  uint64_t v15 = (void (**)(char *, uint64_t))(v12 - 8);
  uint64_t v33 = *(void *)(v12 + 56);
  uint64_t v34 = (void (**)(char *, uint64_t))(v0 + 8);
  v32[1] = v10;
  swift_bridgeObjectRetain();
  uint64_t v16 = v12;
  while (1)
  {
    uint64_t v19 = v16;
    v36(v9, v14, v3);
    Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
    uint64_t v20 = Google_Protobuf_StringValue.value.getter();
    uint64_t v22 = v21;
    (*v34)(v2, v35);
    if (v20 == 0x7250726577736E61 && v22 == 0xED0000746375646FLL)
    {
      swift_bridgeObjectRelease();
      v36(v7, (unint64_t)v9, v3);
    }
    else
    {
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v36(v7, (unint64_t)v9, v3);
      if ((v23 & 1) == 0)
      {
        uint64_t v25 = *v15;
        (*v15)(v7, v3);
        v25(v9, v3);
        goto LABEL_4;
      }
    }
    if (Siri_Nlu_External_UsoEntityIdentifier.value.getter() == 0x746375646F7270 && v24 == 0xE700000000000000) {
      break;
    }
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    unint64_t v18 = *v15;
    (*v15)(v7, v3);
    v18(v9, v3);
    if (v17) {
      goto LABEL_15;
    }
LABEL_4:
    v14 += v33;
    --v11;
    uint64_t v16 = v19;
    if (!v11)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v27 = *v15;
  (*v15)(v7, v3);
  v27(v9, v3);
LABEL_15:
  swift_bridgeObjectRelease_n();
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v28 = type metadata accessor for Logger();
  __swift_project_value_buffer(v28, (uint64_t)static Logger.executor);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v31 = 0;
    _os_log_impl(&dword_1B9C64000, v29, v30, "SystemCommandsAffinityScorer | Found product identifier", v31, 2u);
    MEMORY[0x1BA9E48C0](v31, -1, -1);
  }

  return 1;
}

BOOL specialized SystemCommandsAffinityScorer.hasHKExactMatch(_:)(uint64_t a1)
{
  uint64_t v131 = type metadata accessor for SpanProperty();
  uint64_t v2 = *(void *)(v131 - 8);
  MEMORY[0x1F4188790](v131);
  uint64_t v130 = (char *)v99 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for IdentifierNamespace();
  uint64_t v4 = *(void *)(v116 - 8);
  MEMORY[0x1F4188790](v116);
  unint64_t v115 = (char *)v99 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UsoEntitySpan();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  unint64_t v13 = (char *)v99 - v12;
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  os_log_type_t v114 = (char *)v99 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v113 = (char *)v99 - v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)v99 - v18;
  uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntitySpan?);
  uint64_t v20 = MEMORY[0x1F4188790](v102);
  uint64_t v101 = (uint64_t)v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  MEMORY[0x1F4188790](v22);
  uint64_t v104 = (char *)v99 - v23;
  uint64_t v24 = *(void *)(a1 + 16);
  uint64_t v119 = v6;
  uint64_t v112 = v24;
  uint64_t v103 = v25;
  if (!v24)
  {
    uint64_t v86 = 1;
LABEL_48:
    uint64_t v87 = (uint64_t)v104;
    goto LABEL_50;
  }
  uint64_t v100 = v7;
  uint64_t v26 = v7 + 16;
  uint64_t v127 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v111 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  unsigned int v110 = *MEMORY[0x1E4FA3060];
  uint64_t v109 = (void (**)(char *, void, uint64_t))(v4 + 104);
  uint64_t v108 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v120 = v2;
  uint64_t v128 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v129 = v2 + 16;
  uint64_t v27 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v107 = *(void *)(v7 + 72);
  v99[1] = a1;
  swift_bridgeObjectRetain();
  uint64_t v28 = 0;
  long long v106 = xmmword_1BA04FD90;
  os_log_type_t v118 = v13;
  uint64_t v105 = v10;
  uint64_t v124 = v19;
  uint64_t v125 = v26;
  uint64_t v126 = v27;
  while (1)
  {
    uint64_t v122 = v28;
    v127(v19, v111 + v107 * v28, v6);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = v106;
    uint64_t v31 = v115;
    uint64_t v32 = v116;
    (*v109)(v115, v110, v116);
    uint64_t v33 = IdentifierNamespace.rawValue.getter();
    uint64_t v35 = v34;
    (*v108)(v31, v32);
    *(void *)(inited + 32) = v33;
    *(void *)(inited + 40) = v35;
    uint64_t v123 = *(void *)(inited + 16) ? specialized Set.init(_nonEmptyArrayLiteral:)(inited) : MEMORY[0x1E4FBC870];
    swift_setDeallocating();
    swift_arrayDestroy();
    uint64_t v36 = UsoEntitySpan.properties.getter();
    int64_t v37 = *(void *)(v36 + 16);
    if (v37)
    {
      uint64_t v132 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37, 0);
      uint64_t v38 = *(unsigned __int8 *)(v120 + 80);
      uint64_t v121 = (void (*)(char *, uint64_t))v36;
      uint64_t v39 = v36 + ((v38 + 32) & ~v38);
      uint64_t v40 = *(void *)(v120 + 72);
      uint64_t v41 = *(void (**)(char *, uint64_t, uint64_t))(v120 + 16);
      do
      {
        Swift::Bool v42 = v130;
        uint64_t v43 = v131;
        v41(v130, v39, v131);
        uint64_t v44 = SpanProperty.key.getter();
        uint64_t v46 = v45;
        (*v128)(v42, v43);
        uint64_t v47 = v132;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v47 + 16) + 1, 1);
          uint64_t v47 = v132;
        }
        unint64_t v49 = *(void *)(v47 + 16);
        unint64_t v48 = *(void *)(v47 + 24);
        if (v49 >= v48 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
          uint64_t v47 = v132;
        }
        *(void *)(v47 + 16) = v49 + 1;
        uint64_t v50 = v47 + 16 * v49;
        *(void *)(v50 + 32) = v44;
        *(void *)(v50 + 40) = v46;
        v39 += v40;
        --v37;
      }
      while (v37);
      swift_bridgeObjectRelease();
      uint64_t v6 = v119;
      unint64_t v13 = v118;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v47 = MEMORY[0x1E4FBC860];
    }
    uint64_t v133 = Set.init(minimumCapacity:)();
    uint64_t v51 = *(void *)(v47 + 16);
    if (v51)
    {
      unint64_t v52 = (Swift::Int *)(v47 + 40);
      do
      {
        Swift::Int v53 = *(v52 - 1);
        Swift::Int v54 = *v52;
        swift_bridgeObjectRetain();
        specialized Set._Variant.insert(_:)(&v132, v53, v54);
        swift_bridgeObjectRelease();
        v52 += 2;
        --v51;
      }
      while (v51);
    }
    swift_bridgeObjectRelease();
    char v55 = specialized Set.isDisjoint(with:)(v133, v123);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v56 = v113;
    uint64_t v19 = v124;
    unint64_t v57 = (void (*)(char *, char *, uint64_t))v127;
    v127(v113, (uint64_t)v124, v6);
    if (v55)
    {
      BOOL v58 = 0;
      uint64_t v59 = v114;
    }
    else
    {
      uint64_t v59 = v114;
      if (one-time initialization token for kHKEntityTypes != -1) {
        swift_once();
      }
      BOOL v58 = UsoEntitySpan.anyPropertiesValueMatchAny(value:)(static SystemCommandsAffinityScorer.kHKEntityTypes);
    }
    uint64_t v60 = v56;
    BOOL v61 = *v126;
    (*v126)(v60, v6);
    v57(v59, v19, v6);
    if (v58) {
      break;
    }
    v61(v59, v6);
    v57(v13, v19, v6);
LABEL_29:
    if (one-time initialization token for kHAExactNamespaceMatches != -1) {
      swift_once();
    }
    uint64_t v121 = v61;
    uint64_t v123 = static SystemCommandsAffinityScorer.kHAExactNamespaceMatches;
    uint64_t v63 = UsoEntitySpan.properties.getter();
    int64_t v64 = *(void *)(v63 + 16);
    uint64_t v65 = v120;
    if (v64)
    {
      uint64_t v132 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64, 0);
      unint64_t v66 = (*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
      uint64_t v117 = v63;
      unint64_t v67 = v63 + v66;
      uint64_t v68 = *(void *)(v65 + 72);
      uint64_t v69 = *(void (**)(char *, unint64_t, uint64_t))(v65 + 16);
      do
      {
        os_log_t v70 = v130;
        uint64_t v71 = v131;
        v69(v130, v67, v131);
        uint64_t v72 = SpanProperty.key.getter();
        uint64_t v74 = v73;
        (*v128)(v70, v71);
        uint64_t v75 = v132;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v75 + 16) + 1, 1);
          uint64_t v75 = v132;
        }
        unint64_t v77 = *(void *)(v75 + 16);
        unint64_t v76 = *(void *)(v75 + 24);
        if (v77 >= v76 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v76 > 1, v77 + 1, 1);
          uint64_t v75 = v132;
        }
        *(void *)(v75 + 16) = v77 + 1;
        uint64_t v78 = v75 + 16 * v77;
        *(void *)(v78 + 32) = v72;
        *(void *)(v78 + 40) = v74;
        v67 += v68;
        --v64;
      }
      while (v64);
      swift_bridgeObjectRelease();
      uint64_t v6 = v119;
      unint64_t v13 = v118;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v75 = MEMORY[0x1E4FBC860];
    }
    uint64_t v133 = Set.init(minimumCapacity:)();
    uint64_t v79 = *(void *)(v75 + 16);
    if (v79)
    {
      uint64_t v80 = (Swift::Int *)(v75 + 40);
      do
      {
        Swift::Int v81 = *(v80 - 1);
        Swift::Int v82 = *v80;
        swift_bridgeObjectRetain();
        specialized Set._Variant.insert(_:)(&v132, v81, v82);
        swift_bridgeObjectRelease();
        v80 += 2;
        --v79;
      }
      while (v79);
    }
    swift_bridgeObjectRelease();
    char v83 = specialized Set.isDisjoint(with:)(v133, v123);
    swift_bridgeObjectRelease();
    uint64_t v84 = v105;
    v127(v105, (uint64_t)v13, v6);
    if (v83)
    {
      uint64_t v29 = v121;
      v121(v84, v6);
      v29(v13, v6);
      uint64_t v19 = v124;
    }
    else
    {
      Swift::Bool v85 = UsoEntitySpan.isAttachmentFull()();
      uint64_t v29 = v121;
      v121(v84, v6);
      v29(v13, v6);
      uint64_t v19 = v124;
      if (v85) {
        goto LABEL_49;
      }
    }
    uint64_t v28 = v122 + 1;
    v29(v19, v6);
    if (v28 == v112)
    {
      swift_bridgeObjectRelease();
      uint64_t v86 = 1;
      uint64_t v7 = v100;
      goto LABEL_48;
    }
  }
  Swift::Bool v62 = UsoEntitySpan.hasExactMatch()();
  v61(v59, v6);
  v57(v13, v19, v6);
  if (!v62) {
    goto LABEL_29;
  }
  v61(v13, v6);
LABEL_49:
  swift_bridgeObjectRelease();
  uint64_t v7 = v100;
  uint64_t v87 = (uint64_t)v104;
  (*(void (**)(char *, char *, uint64_t))(v100 + 32))(v104, v19, v6);
  uint64_t v86 = 0;
LABEL_50:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v87, v86, 1, v6);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v88 = type metadata accessor for Logger();
  __swift_project_value_buffer(v88, (uint64_t)static Logger.executor);
  uint64_t v89 = v103;
  outlined init with copy of ReferenceResolutionClientProtocol?(v87, v103, &demangling cache variable for type metadata for UsoEntitySpan?);
  uint64_t v90 = Logger.logObject.getter();
  os_log_type_t v91 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v90, v91))
  {
    int v92 = (uint8_t *)swift_slowAlloc();
    uint64_t v93 = swift_slowAlloc();
    uint64_t v132 = v93;
    *(_DWORD *)int v92 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?(v89, v101, &demangling cache variable for type metadata for UsoEntitySpan?);
    uint64_t v94 = String.init<A>(describing:)();
    uint64_t v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v95, &v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v6 = v119;
    outlined destroy of ReferenceResolutionClientProtocol?(v89, &demangling cache variable for type metadata for UsoEntitySpan?);
    _os_log_impl(&dword_1B9C64000, v90, v91, "HomeAutomationAffinityScorer - Found HomeKitSpan with ExactMatch %s", v92, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v93, -1, -1);
    MEMORY[0x1BA9E48C0](v92, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v89, &demangling cache variable for type metadata for UsoEntitySpan?);
  }

  uint64_t v96 = (uint64_t)v104;
  BOOL v97 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v104, 1, v6) != 1;
  outlined destroy of ReferenceResolutionClientProtocol?(v96, &demangling cache variable for type metadata for UsoEntitySpan?);
  return v97;
}

BOOL specialized SystemCommandsAffinityScorer.hasHKFuzzyMatch(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoEntitySpan();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntitySpan?);
  uint64_t v6 = MEMORY[0x1F4188790](v33);
  uint64_t v32 = (uint64_t)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v30 - v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v30 - v11;
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v34 = (char *)&v30 - v11;
  if (v13)
  {
    os_log_type_t v30 = v10;
    uint64_t v31 = v3;
    uint64_t v15 = v3 + 16;
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v16 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v17 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v18 = *(void *)(v15 + 56);
    swift_bridgeObjectRetain();
    while (1)
    {
      v14(v5, v16, v2);
      if (closure #1 in SystemCommandsAffinityScorer.hasHKFuzzyMatch(_:)((uint64_t)v5)) {
        break;
      }
      (*v17)(v5, v2);
      v16 += v18;
      if (!--v13)
      {
        swift_bridgeObjectRelease();
        uint64_t v19 = 1;
        uint64_t v3 = v31;
        uint64_t v12 = v34;
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v3 = v31;
    uint64_t v12 = v34;
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v34, v5, v2);
    uint64_t v19 = 0;
LABEL_8:
    uint64_t v10 = v30;
  }
  else
  {
    uint64_t v19 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v12, v19, 1, v2);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.executor);
  outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v12, (uint64_t)v10, &demangling cache variable for type metadata for UsoEntitySpan?);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    uint64_t v36 = v24;
    *(_DWORD *)uint64_t v23 = 136315138;
    outlined init with copy of ReferenceResolutionClientProtocol?((uint64_t)v10, v32, &demangling cache variable for type metadata for UsoEntitySpan?);
    uint64_t v25 = String.init<A>(describing:)();
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for UsoEntitySpan?);
    _os_log_impl(&dword_1B9C64000, v21, v22, "HomeAutomationAffinityScorer - Found HomeKitSpan with FuzzyMatch %s", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v24, -1, -1);
    uint64_t v27 = v23;
    uint64_t v12 = v34;
    MEMORY[0x1BA9E48C0](v27, -1, -1);
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for UsoEntitySpan?);
  }

  BOOL v28 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v12, 1, v2) != 1;
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for UsoEntitySpan?);
  return v28;
}

uint64_t specialized SystemCommandsAffinityScorer.isIdentifierMatchCarCommands(on:)()
{
  uint64_t v28 = type metadata accessor for Google_Protobuf_StringValue();
  uint64_t v0 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v2 = (char *)v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v10 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v9 = v4 + 16;
    unint64_t v11 = v7 + ((*(unsigned __int8 *)(v9 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 64));
    unint64_t v26 = (void (**)(char *, uint64_t))(v0 + 8);
    uint64_t v27 = v10;
    uint64_t v12 = (void (**)(char *, uint64_t))(v9 - 8);
    uint64_t v13 = *(void *)(v9 + 56);
    v24[1] = v7;
    uint64_t v25 = v13;
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v14 = v9;
      v27(v6, v11, v3);
      if (one-time initialization token for kCarCommandsExactNamespaceMatches != -1) {
        swift_once();
      }
      uint64_t v15 = static SystemCommandsAffinityScorer.kCarCommandsExactNamespaceMatches;
      Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
      uint64_t v16 = Google_Protobuf_StringValue.value.getter();
      uint64_t v18 = v17;
      (*v26)(v2, v28);
      LOBYTE(v16) = specialized Set.contains(_:)(v16, v18, v15);
      swift_bridgeObjectRelease();
      (*v12)(v6, v3);
      if (v16) {
        break;
      }
      v11 += v25;
      --v8;
      uint64_t v9 = v14;
      if (!v8)
      {
        swift_bridgeObjectRelease_n();
        return 0;
      }
    }
    swift_bridgeObjectRelease_n();
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.executor);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      os_log_type_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v22 = 0;
      _os_log_impl(&dword_1B9C64000, v20, v21, "SystemCommandsAffinityScorer | Found car commands identifier", v22, 2u);
      MEMORY[0x1BA9E48C0](v22, -1, -1);
    }

    return 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t specialized SystemCommandsAffinityScorer.score(input:environment:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v168 = a3;
  uint64_t v167 = a2;
  uint64_t v181 = type metadata accessor for Google_Protobuf_StringValue();
  uint64_t v171 = *(void *)(v181 - 8);
  MEMORY[0x1F4188790](v181);
  long long v180 = (char *)&v163 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
  MEMORY[0x1F4188790](v4 - 8);
  v186 = (char *)&v163 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v182 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  uint64_t v173 = *(void *)(v182 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v182);
  uint64_t v166 = (char *)&v163 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v169 = (char *)&v163 - v9;
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v170 = (char *)&v163 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v174 = (char *)&v163 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v172 = (char *)&v163 - v14;
  uint64_t v15 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  uint64_t v178 = *(void *)(v15 - 8);
  uint64_t v179 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v177 = (char *)&v163 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v190 = *(void (**)(char *, uint64_t))(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v163 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v183 = *(void *)(v20 - 8);
  uint64_t v184 = v20;
  MEMORY[0x1F4188790](v20);
  os_log_type_t v22 = (char *)&v163 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v23 - 8);
  v185 = (char *)&v163 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v189 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v187 = *(void *)(v189 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v189);
  uint64_t v176 = (char *)&v163 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  long long v175 = (char *)&v163 - v28;
  MEMORY[0x1F4188790](v27);
  uint64_t v188 = (char *)&v163 - v29;
  uint64_t v30 = type metadata accessor for USOParse();
  uint64_t v31 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  uint64_t v33 = (uint64_t)&v163 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for Parse();
  uint64_t v35 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34);
  int64_t v37 = (char *)&v163 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v35 + 88))(v37, v34) != *MEMORY[0x1E4FA1F48])
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    __swift_project_value_buffer(v51, (uint64_t)static Logger.executor);
    unint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      Swift::Int v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::Int v54 = 0;
      _os_log_impl(&dword_1B9C64000, v52, v53, "SystemCommandsAffinityScorer | Got unexpected parse", v54, 2u);
      MEMORY[0x1BA9E48C0](v54, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v35 + 8))(v37, v34);
    return 1;
  }
  (*(void (**)(char *, uint64_t))(v35 + 96))(v37, v34);
  uint64_t v38 = v31;
  (*(void (**)(uint64_t, char *, uint64_t))(v31 + 32))(v33, v37, v30);
  unint64_t v39 = specialized static AffinityScorerUtils.getTask(_:)();
  uint64_t v40 = v30;
  if (!v39)
  {
    if (one-time initialization token for executor != -1) {
      goto LABEL_133;
    }
    goto LABEL_15;
  }
  unint64_t v41 = v39;
  uint64_t v42 = USOParse.userParse.getter();
  uint64_t v43 = MEMORY[0x1BA9DE000](v42);
  (*(void (**)(char *, uint64_t))(v183 + 8))(v22, v184);
  uint64_t v44 = *(void *)(v43 + 16);
  uint64_t v184 = v41;
  uint64_t v165 = v33;
  if (v44)
  {
    uint64_t v163 = v40;
    uint64_t v164 = v38;
    uint64_t v45 = (void (*)(char *, unint64_t, uint64_t))*((void *)v190 + 2);
    unint64_t v46 = v43 + ((*((unsigned __int8 *)v190 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v190 + 80));
    uint64_t v47 = (void (**)(char *, uint64_t))((char *)v190 + 8);
    uint64_t v48 = *((void *)v190 + 9);
    swift_bridgeObjectRetain();
    while (1)
    {
      v45(v19, v46, v17);
      if (Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter()) {
        break;
      }
      (*v47)(v19, v17);
      v46 += v48;
      if (!--v44)
      {
        swift_bridgeObjectRelease();
        uint64_t v49 = 1;
        uint64_t v50 = v164;
        uint64_t v40 = v163;
        uint64_t v33 = v165;
        goto LABEL_19;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v60 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v190;
    uint64_t v61 = (uint64_t)v185;
    (*((void (**)(char *, char *, uint64_t))v190 + 4))(v185, v19, v17);
    uint64_t v49 = 0;
    uint64_t v50 = v164;
    uint64_t v40 = v163;
    uint64_t v33 = v165;
  }
  else
  {
    uint64_t v49 = 1;
    uint64_t v50 = v38;
LABEL_19:
    uint64_t v60 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v190;
    uint64_t v61 = (uint64_t)v185;
  }
  v60[7](v61, v49, 1, v17);
  swift_bridgeObjectRelease();
  int v62 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v60[6])(v61, 1, v17);
  uint64_t v63 = v189;
  if (v62 == 1)
  {
    outlined destroy of ReferenceResolutionClientProtocol?(v61, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v64 = type metadata accessor for Logger();
    __swift_project_value_buffer(v64, (uint64_t)static Logger.executor);
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      unint64_t v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v67 = 0;
      _os_log_impl(&dword_1B9C64000, v65, v66, "SystemCommandsAffinityScorer | Could not extract userStatedTask", v67, 2u);
      MEMORY[0x1BA9E48C0](v67, -1, -1);
    }
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v33, v40);
    return 0;
  }
  uint64_t v68 = v177;
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
  ((void (*)(uint64_t, uint64_t))v60[1])(v61, v17);
  uint64_t v69 = v175;
  Siri_Nlu_External_UserStatedTask.task.getter();
  (*(void (**)(char *, uint64_t))(v178 + 8))(v68, v179);
  uint64_t v71 = v187;
  os_log_t v70 = v188;
  (*(void (**)(char *, char *, uint64_t))(v187 + 32))(v188, v69, v63);
  LOBYTE(v68) = UsoTask.isExpandedSupportedSettingTask.getter();
  uint64_t v72 = v176;
  (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v176, v70, v63);
  if (v68)
  {
    char matched = Siri_Nlu_External_UsoGraph.isIdentifierMatchGuestMode.getter();
    uint64_t v74 = *(void (**)(char *, uint64_t))(v71 + 8);
    v74(v72, v63);
    uint64_t v75 = (uint64_t)v186;
    if ((matched & 1) == 0)
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v86 = type metadata accessor for Logger();
      __swift_project_value_buffer(v86, (uint64_t)static Logger.executor);
      swift_retain_n();
      uint64_t v87 = Logger.logObject.getter();
      os_log_type_t v88 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v87, v88))
      {
        uint64_t v89 = (uint8_t *)swift_slowAlloc();
        uint64_t v90 = swift_slowAlloc();
        uint64_t v164 = v50;
        uint64_t v91 = v90;
        v192[0] = v90;
        uint64_t v190 = v74;
        *(_DWORD *)uint64_t v89 = 136315138;
        uint64_t v92 = UsoTask.verbString.getter();
        uint64_t v191 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v93, v192);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v87, v88, "SystemCommandsAffinityScorer | found unsuported setting task %s", v89, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v91, -1, -1);
        MEMORY[0x1BA9E48C0](v89, -1, -1);
        swift_release();

        v190(v188, v189);
        (*(void (**)(uint64_t, uint64_t))(v164 + 8))(v165, v40);
      }
      else
      {
        swift_release_n();

        v74(v70, v63);
        (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v165, v40);
      }
      return 0;
    }
    uint64_t v190 = v74;
    uint64_t v33 = v165;
  }
  else
  {
    uint64_t v190 = *(void (**)(char *, uint64_t))(v71 + 8);
    v190(v72, v63);
    uint64_t v75 = (uint64_t)v186;
  }
  if (specialized SystemCommandsAffinityScorer.isIdentifierMatchLock(on:)())
  {
    if (specialized SystemCommandsAffinityScorer.isIdentifierMatchScreen(on:)())
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v76 = type metadata accessor for Logger();
      __swift_project_value_buffer(v76, (uint64_t)static Logger.executor);
      unint64_t v77 = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v77, v78))
      {
        uint64_t v79 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v79 = 0;
        _os_log_impl(&dword_1B9C64000, v77, v78, "SystemCommandsAffinityScorer | providing override score for 'lock screen' task", v79, 2u);
        uint64_t v80 = v79;
        os_log_t v70 = v188;
        MEMORY[0x1BA9E48C0](v80, -1, -1);
      }
      swift_release();

      v190(v70, v63);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v33, v40);
      return 4;
    }
    if (specialized SystemCommandsAffinityScorer.isIdentifierMatchAnswerProduct(on:)())
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v94 = type metadata accessor for Logger();
      __swift_project_value_buffer(v94, (uint64_t)static Logger.executor);
      Swift::Int v82 = Logger.logObject.getter();
      os_log_type_t v83 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v82, v83)) {
        goto LABEL_56;
      }
      uint64_t v84 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v84 = 0;
      Swift::Bool v85 = "SystemCommandsAffinityScorer | providing high score for lock product task";
LABEL_55:
      _os_log_impl(&dword_1B9C64000, v82, v83, v85, v84, 2u);
      unint64_t v95 = v84;
      os_log_t v70 = v188;
      MEMORY[0x1BA9E48C0](v95, -1, -1);
LABEL_56:
      swift_release();

      v190(v70, v63);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v33, v40);
      return 3;
    }
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v113 = type metadata accessor for Logger();
    __swift_project_value_buffer(v113, (uint64_t)static Logger.executor);
    os_log_type_t v114 = Logger.logObject.getter();
    os_log_type_t v115 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v114, v115))
    {
      uint64_t v116 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v116 = 0;
      _os_log_impl(&dword_1B9C64000, v114, v115, "SystemCommandsAffinityScorer | providing default score for ambiguous lock task", v116, 2u);
      uint64_t v117 = v116;
      os_log_t v70 = v188;
      MEMORY[0x1BA9E48C0](v117, -1, -1);
    }
    swift_release();

LABEL_96:
    v190(v70, v63);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v33, v40);
    return 2;
  }
  swift_retain();
  static UsoTask_CodegenConverter.convert(task:)();
  swift_release();
  if (v192[3])
  {
    type metadata accessor for UsoTask_disable_common_Setting();
    if (swift_dynamicCast())
    {
      swift_release();
      if (specialized SystemCommandsAffinityScorer.isIdentifierMatchProduct(on:)())
      {
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v81 = type metadata accessor for Logger();
        __swift_project_value_buffer(v81, (uint64_t)static Logger.executor);
        Swift::Int v82 = Logger.logObject.getter();
        os_log_type_t v83 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v82, v83)) {
          goto LABEL_56;
        }
        uint64_t v84 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v84 = 0;
        Swift::Bool v85 = "SystemCommandsAffinityScorer | providing high score for turn off product task";
        goto LABEL_55;
      }
    }
  }
  else
  {
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v192, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  uint64_t v96 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  uint64_t v177 = *(char **)(v96 + 16);
  uint64_t v163 = v40;
  if (!v177)
  {
    uint64_t v112 = 1;
    uint64_t v111 = v173;
    uint64_t v98 = v182;
LABEL_98:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v111 + 56))(v75, v112, 1, v98);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 48))(v75, 1, v98) == 1)
    {
      swift_release();
      v190(v70, v63);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v33, v163);
      outlined destroy of ReferenceResolutionClientProtocol?(v75, &demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
      return 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v111 + 32))(v172, v75, v98);
    uint64_t v40 = v163;
    if (one-time initialization token for kUnsupportedIdentifierValues != -1) {
      swift_once();
    }
    os_log_type_t v118 = (void *)static SystemCommandsAffinityScorer.kUnsupportedIdentifierValues;
    swift_bridgeObjectRetain();
    uint64_t v119 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
    char v121 = specialized Sequence<>.contains(_:)(v119, v120, v118);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v121)
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v122 = type metadata accessor for Logger();
      __swift_project_value_buffer(v122, (uint64_t)static Logger.executor);
      uint64_t v123 = v173;
      uint64_t v124 = *(void (**)(char *, char *, uint64_t))(v173 + 16);
      uint64_t v125 = v170;
      uint64_t v126 = v182;
      v124(v170, v172, v182);
      uint64_t v127 = Logger.logObject.getter();
      os_log_type_t v128 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v127, v128))
      {
        uint64_t v164 = v50;
        uint64_t v129 = (uint8_t *)swift_slowAlloc();
        v186 = (char *)swift_slowAlloc();
        v192[0] = (uint64_t)v186;
        *(_DWORD *)uint64_t v129 = 136315138;
        v185 = (char *)(v129 + 4);
        v124(v169, v125, v126);
        uint64_t v130 = String.init<A>(describing:)();
        uint64_t v191 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, v131, v192);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v132 = *(void (**)(char *, uint64_t))(v123 + 8);
        v132(v125, v126);
        _os_log_impl(&dword_1B9C64000, v127, v128, "SystemCommandsAffinityScorer | found unsupported identifier %s", v129, 0xCu);
        uint64_t v133 = v186;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v133, -1, -1);
        MEMORY[0x1BA9E48C0](v129, -1, -1);
        swift_release();

        v132(v172, v126);
        v190(v188, v189);
        (*(void (**)(uint64_t, uint64_t))(v164 + 8))(v165, v163);
      }
      else
      {

        uint64_t v141 = *(void (**)(char *, uint64_t))(v123 + 8);
        v141(v125, v126);
        swift_release();
        v141(v172, v126);
        v190(v188, v63);
        (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v165, v163);
      }
      return 0;
    }
    uint64_t v134 = specialized static AffinityScorerUtils.getEntitySpans(_:)();
    BOOL v135 = specialized SystemCommandsAffinityScorer.hasHKExactMatch(_:)(v134);
    os_log_t v70 = v188;
    if (v135 || (SystemCommandsAffinityScorer.hasEverywhereUserEntity(usoTask:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v136 = type metadata accessor for Logger();
      __swift_project_value_buffer(v136, (uint64_t)static Logger.executor);
      unint64_t v137 = Logger.logObject.getter();
      os_log_type_t v138 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v137, v138))
      {
        os_log_type_t v139 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v139 = 0;
        _os_log_impl(&dword_1B9C64000, v137, v138, "SystemCommandsAffinityScorer | found full match with HomeKit entity or everywhere, returning .low", v139, 2u);
        uint64_t v140 = v139;
        os_log_t v70 = v188;
        MEMORY[0x1BA9E48C0](v140, -1, -1);
      }
      swift_release();

      (*(void (**)(char *, uint64_t))(v173 + 8))(v172, v182);
      v190(v70, v63);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v33, v40);
      return 1;
    }
    BOOL v142 = specialized SystemCommandsAffinityScorer.hasHKFuzzyMatch(_:)(v134);
    swift_bridgeObjectRelease();
    if (v142)
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v143 = type metadata accessor for Logger();
      __swift_project_value_buffer(v143, (uint64_t)static Logger.executor);
      uint64_t v144 = Logger.logObject.getter();
      os_log_type_t v145 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v144, v145)) {
        goto LABEL_126;
      }
      os_log_type_t v146 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v146 = 0;
      uint64_t v147 = "SystemCommandsAffinityScorer | found fuzzy match with HomeKit entity, returning .default";
    }
    else
    {
      if ((specialized SystemCommandsAffinityScorer.isIdentifierMatchCarCommands(on:)() & 1) == 0)
      {
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v150 = type metadata accessor for Logger();
        __swift_project_value_buffer(v150, (uint64_t)static Logger.executor);
        uint64_t v151 = v173;
        uint64_t v152 = *(void (**)(char *, char *, uint64_t))(v173 + 16);
        unint64_t v153 = v166;
        uint64_t v154 = v182;
        v152(v166, v172, v182);
        uint64_t v155 = Logger.logObject.getter();
        os_log_type_t v156 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v155, v156))
        {
          uint64_t v164 = v50;
          uint64_t v157 = (uint8_t *)swift_slowAlloc();
          v186 = (char *)swift_slowAlloc();
          v192[0] = (uint64_t)v186;
          *(_DWORD *)uint64_t v157 = 136315138;
          v185 = (char *)(v157 + 4);
          v152(v169, v153, v154);
          uint64_t v158 = String.init<A>(describing:)();
          uint64_t v191 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v158, v159, v192);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          id v160 = *(void (**)(char *, uint64_t))(v151 + 8);
          v160(v153, v154);
          _os_log_impl(&dword_1B9C64000, v155, v156, "SystemCommandsAffinityScorer | Found matching identifier %s", v157, 0xCu);
          uint64_t v161 = v186;
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v161, -1, -1);
          MEMORY[0x1BA9E48C0](v157, -1, -1);
          swift_release();

          v160(v172, v154);
          v190(v188, v189);
          (*(void (**)(uint64_t, uint64_t))(v164 + 8))(v165, v163);
          return 3;
        }

        uint64_t v162 = *(void (**)(char *, uint64_t))(v151 + 8);
        v162(v153, v154);
        swift_release();
        v162(v172, v154);
        v190(v188, v63);
        (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v165, v163);
        return 3;
      }
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v148 = type metadata accessor for Logger();
      __swift_project_value_buffer(v148, (uint64_t)static Logger.executor);
      uint64_t v144 = Logger.logObject.getter();
      os_log_type_t v145 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v144, v145)) {
        goto LABEL_126;
      }
      os_log_type_t v146 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v146 = 0;
      uint64_t v147 = "SystemCommandsAffinityScorer | found a car commands identifier, returning .default";
    }
    _os_log_impl(&dword_1B9C64000, v144, v145, v147, v146, 2u);
    BOOL v149 = v146;
    os_log_t v70 = v188;
    MEMORY[0x1BA9E48C0](v149, -1, -1);
LABEL_126:
    swift_release();

    (*(void (**)(char *, uint64_t))(v173 + 8))(v172, v182);
    goto LABEL_96;
  }
  v185 = *(char **)(v173 + 16);
  uint64_t v179 = v96 + ((*(unsigned __int8 *)(v173 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v173 + 80));
  BOOL v97 = (void (**)(char *, uint64_t))(v171 + 8);
  long long v175 = (char *)v96;
  uint64_t v176 = (char *)(v173 + 8);
  uint64_t v183 = v173 + 16;
  uint64_t v178 = *(void *)(v173 + 72);
  swift_bridgeObjectRetain();
  uint64_t v40 = 0;
  uint64_t v98 = v182;
  uint64_t v99 = v174;
  uint64_t v164 = v50;
  uint64_t v38 = v187;
  while (1)
  {
    ((void (*)(char *, uint64_t, uint64_t))v185)(v99, v179 + v178 * v40, v98);
    if (one-time initialization token for kSupportedIdentifierNamespaces != -1) {
      swift_once();
    }
    uint64_t v100 = (void *)static SystemCommandsAffinityScorer.kSupportedIdentifierNamespaces;
    swift_bridgeObjectRetain();
    uint64_t v101 = v180;
    Siri_Nlu_External_UsoEntityIdentifier.namespace.getter();
    uint64_t v102 = Google_Protobuf_StringValue.value.getter();
    uint64_t v104 = v103;
    (*v97)(v101, v181);
    uint64_t v105 = v100[2];
    if (!v105)
    {
      swift_bridgeObjectRelease();
      goto LABEL_62;
    }
    BOOL v106 = v100[4] == v102 && v100[5] == v104;
    if (v106 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_88:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v111 = v173;
      uint64_t v75 = (uint64_t)v186;
      uint64_t v98 = v182;
      (*(void (**)(char *, char *, uint64_t))(v173 + 32))(v186, v174, v182);
      uint64_t v112 = 0;
      uint64_t v50 = v164;
      uint64_t v33 = v165;
      os_log_t v70 = v188;
      uint64_t v63 = v189;
      goto LABEL_98;
    }
    if (v105 != 1)
    {
      BOOL v107 = v100[6] == v102 && v100[7] == v104;
      if (v107 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_88;
      }
      if (v105 != 2) {
        break;
      }
    }
LABEL_61:
    swift_bridgeObjectRelease();
    os_log_t v70 = v188;
    uint64_t v99 = v174;
LABEL_62:
    ++v40;
    swift_bridgeObjectRelease();
    uint64_t v98 = v182;
    (*(void (**)(char *, uint64_t))v176)(v99, v182);
    uint64_t v50 = v164;
    uint64_t v33 = v165;
    uint64_t v75 = (uint64_t)v186;
    if ((char *)v40 == v177)
    {
      swift_bridgeObjectRelease();
      uint64_t v112 = 1;
      uint64_t v111 = v173;
      uint64_t v63 = v189;
      goto LABEL_98;
    }
  }
  uint64_t v108 = v100 + 9;
  uint64_t v33 = 2;
  while (1)
  {
    uint64_t v109 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    BOOL v110 = *(v108 - 1) == v102 && *v108 == v104;
    if (v110 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_88;
    }
    v108 += 2;
    ++v33;
    if (v109 == v105) {
      goto LABEL_61;
    }
  }
  __break(1u);
LABEL_133:
  swift_once();
LABEL_15:
  uint64_t v56 = type metadata accessor for Logger();
  __swift_project_value_buffer(v56, (uint64_t)static Logger.executor);
  unint64_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v57, v58))
  {
    uint64_t v59 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v59 = 0;
    _os_log_impl(&dword_1B9C64000, v57, v58, "SystemCommandsAffinityScorer | Could not extract usoTask from parse", v59, 2u);
    MEMORY[0x1BA9E48C0](v59, -1, -1);
  }

  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v33, v40);
  return 0;
}

ValueMetadata *type metadata accessor for SystemCommandsAffinityScorer()
{
  return &type metadata for SystemCommandsAffinityScorer;
}

unint64_t lazy protocol witness table accessor for type UsoEntity_common_UserEntity.DefinedValues and conformance UsoEntity_common_UserEntity.DefinedValues()
{
  unint64_t result = lazy protocol witness table cache variable for type UsoEntity_common_UserEntity.DefinedValues and conformance UsoEntity_common_UserEntity.DefinedValues;
  if (!lazy protocol witness table cache variable for type UsoEntity_common_UserEntity.DefinedValues and conformance UsoEntity_common_UserEntity.DefinedValues)
  {
    type metadata accessor for UsoEntity_common_UserEntity.DefinedValues();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_UserEntity.DefinedValues and conformance UsoEntity_common_UserEntity.DefinedValues);
  }
  return result;
}

uint64_t protocol witness for Tagger.save(tag:) in conformance TaggingService(uint64_t a1)
{
  uint64_t v5 = (uint64_t (*)(uint64_t))((int)*MEMORY[0x1E4F9F998] + MEMORY[0x1E4F9F998]);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = AppShortcutStateProvider.intentsStates(appShortcutTargets:conditionalIntentMetadata:);
  return v5(a1);
}

uint64_t dispatch thunk of Tagger.save(tag:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 8) + **(int **)(a3 + 8));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = protocol witness for AppShortcutStateProviding.intentsStates(appShortcutTargets:conditionalIntentMetadata:) in conformance AppShortcutStateProvider;
  return v9(a1, a2, a3);
}

uint64_t TaskData.activities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TaskData.attribute.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TaskData.meCardSet.getter()
{
  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t TaskData.reformedIntent.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TaskData.refTaskId.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TaskData.statusReason.getter()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TaskData.stepType.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TaskData.taskId.getter()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TaskData.taskType.getter()
{
  uint64_t v1 = *(void *)(v0 + 112);
  swift_bridgeObjectRetain();
  return v1;
}

double TaskData.version.getter()
{
  return *(double *)(v0 + 128);
}

uint64_t TaskData.debugDescription.getter()
{
  _StringGuts.grow(_:)(55);
  v1._object = (void *)0x80000001BA06F760;
  v1._uint64_t countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v1);
  uint64_t v2 = v0[12];
  uint64_t v3 = (void *)v0[13];
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x79546B736174202CLL;
  v5._object = (void *)0xEC000000203A6570;
  String.append(_:)(v5);
  uint64_t v6 = v0[14];
  uint64_t v7 = (void *)v0[15];
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 0x795470657473202CLL;
  v9._object = (void *)0xEC000000203A6570;
  String.append(_:)(v9);
  uint64_t v11 = v0[10];
  uint64_t v10 = (void *)v0[11];
  swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = v11;
  v12._object = v10;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  return 0;
}

__n128 TaskData.init(taskId:taskType:stepType:statusReason:activities:attribute:)@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, unint64_t a8@<X7>, __n128 *a9@<X8>, __n128 a10, unint64_t a11)
{
  uint64_t v17 = specialized static SiriKitMetricsUtils.formulateIntentTypeName(intentTypeName:)(a3, a4);
  unint64_t v19 = v18;
  swift_bridgeObjectRelease();
  __n128 result = a10;
  *a9 = a10;
  a9[1].n128_u64[0] = a11;
  a9[1].n128_u8[8] = 0;
  a9[2].n128_u64[0] = 0;
  a9[2].n128_u64[1] = 0xE000000000000000;
  a9[3].n128_u64[0] = 0;
  a9[3].n128_u64[1] = 0xE000000000000000;
  a9[4].n128_u64[0] = a7;
  a9[4].n128_u64[1] = a8;
  a9[5].n128_u64[0] = a5;
  a9[5].n128_u64[1] = a6;
  a9[6].n128_u64[0] = a1;
  a9[6].n128_u64[1] = a2;
  a9[7].n128_u64[0] = v17;
  a9[7].n128_u64[1] = v19;
  a9[8].n128_u64[0] = 0x3FD999999999999ALL;
  return result;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TaskData.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TaskData.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance TaskData.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TaskData.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskData.CodingKeys and conformance TaskData.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TaskData.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TaskData.CodingKeys and conformance TaskData.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

unint64_t lazy protocol witness table accessor for type DefaultFlowActivity and conformance DefaultFlowActivity()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultFlowActivity and conformance DefaultFlowActivity;
  if (!lazy protocol witness table cache variable for type DefaultFlowActivity and conformance DefaultFlowActivity)
  {
    type metadata accessor for DefaultFlowActivity();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultFlowActivity and conformance DefaultFlowActivity);
  }
  return result;
}

uint64_t destroy for TaskData()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TaskData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TaskData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  return a1;
}

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for TaskData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for TaskData(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TaskData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TaskData()
{
  return &type metadata for TaskData;
}

void *type metadata accessor for TaskData.CodingKeys()
{
  return &unk_1F1386080;
}

uint64_t specialized TaskData.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6974697669746361 && a2 == 0xEA00000000007365;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7475626972747461 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x655364726143656DLL && a2 == 0xE900000000000074 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x64656D726F666572 && a2 == 0xEE00746E65746E49 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x496B736154666572 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6552737574617473 && a2 == 0xEC0000006E6F7361 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6570795470657473 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x64496B736174 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x657079546B736174 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

uint64_t *TaskLoggingEventSink.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  return &static TaskLoggingEventSink.instance;
}

uint64_t TaskLoggingEventSink.receive(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = 0;
  void v10[3] = 0;
  v10[4] = v3;
  v10[5] = a1;
  v10[6] = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in TaskLoggingEventSink.receive(_:_:), (uint64_t)v10);
  return swift_release();
}

uint64_t TaskLoggingEventSink.SiriKitEventMetricsState.__deallocating_deinit()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for MetricsState.taskId.getter in conformance TaskLoggingEventSink.SiriKitEventMetricsState()
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)v0 + 24) + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for MetricsState.interactionId.getter in conformance TaskLoggingEventSink.SiriKitEventMetricsState()
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)v0 + 16) + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t protocol witness for MetricsState.resultCandidateId.getter in conformance TaskLoggingEventSink.SiriKitEventMetricsState()
{
  return SiriKitEventContext.resultCandidateId.getter();
}

double protocol witness for MetricsState.taskStepStartTime.getter in conformance TaskLoggingEventSink.SiriKitEventMetricsState()
{
  Date.timeIntervalSince1970.getter();
  return result;
}

uint64_t protocol witness for MetricsState.isFromClient.getter in conformance TaskLoggingEventSink.SiriKitEventMetricsState()
{
  return *(unsigned __int8 *)(*(void *)(*(void *)v0 + 24) + 33);
}

uint64_t protocol witness for MetricsState.executionRequestId.getter in conformance TaskLoggingEventSink.SiriKitEventMetricsState()
{
  uint64_t v1 = *(void *)(*(void *)(*(void *)v0 + 16) + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TaskLoggingEventSink.__allocating_init(loggingService:)(uint64_t a1)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  return result;
}

uint64_t static TaskLoggingEventSink.instance.getter()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t TaskLoggingEventSink.init(loggingService:)(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return v1;
}

uint64_t closure #1 in TaskLoggingEventSink.receive(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v9;
  void *v9 = v6;
  v9[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return TaskLoggingEventSink.receiveAsync(_:_:)(a5, a6);
}

uint64_t TaskLoggingEventSink.deinit()
{
  swift_release();
  return v0;
}

uint64_t TaskLoggingEventSink.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for SiriKitEventSink.receive(_:_:) in conformance TaskLoggingEventSink(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v7, 1, 1, v9);
  uint64_t v10 = (void *)swift_allocObject();
  void v10[2] = 0;
  void v10[3] = 0;
  v10[4] = v8;
  v10[5] = a1;
  v10[6] = a2;
  swift_retain();
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v7, (uint64_t)&closure #1 in TaskLoggingEventSink.receive(_:_:)partial apply, (uint64_t)v10);
  return swift_release();
}

uint64_t protocol witness for SiriKitEventSink.receiveAsync(_:_:) in conformance TaskLoggingEventSink(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  void *v5 = v2;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return TaskLoggingEventSink.receiveAsync(_:_:)(a1, a2);
}

uint64_t type metadata accessor for TaskLoggingEventSink()
{
  return self;
}

uint64_t method lookup function for TaskLoggingEventSink(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TaskLoggingEventSink);
}

uint64_t dispatch thunk of TaskLoggingEventSink.__allocating_init(loggingService:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t type metadata accessor for TaskLoggingEventSink.SiriKitEventMetricsState()
{
  return self;
}

uint64_t objectdestroyTm_12()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t closure #1 in TaskLoggingEventSink.receive(_:_:)partial apply()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  uint64_t v5 = (void *)swift_task_alloc();
  long long v4[2] = v5;
  void *v5 = v4;
  v5[1] = partial apply for closure #2 in AceServiceInvokerImpl.publish(executionOutput:);
  return TaskLoggingEventSink.receiveAsync(_:_:)(v2, v3);
}

uint64_t sub_1BA02B810()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  }

  return MEMORY[0x1F4186498](v0, 48, 7);
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t *TaskLoggingService.instance.unsafeMutableAddressor()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }
  return &static TaskLoggingService.instance;
}

BOOL FLOWSchemaFLOWStateType.isFirstTaskStep.getter(int a1)
{
  return a1 == 1;
}

BOOL FLOWSchemaFLOWStateType.isLastTaskStep.getter(unsigned int a1)
{
  BOOL result = 1;
  if (a1 > 5 || ((1 << a1) & 0x34) == 0) {
    return a1 == 128;
  }
  return result;
}

BOOL FLOWSchemaFLOWStateType.isDelayedFailedStep.getter(int a1)
{
  return a1 == 4;
}

uint64_t TaskLoggingService.logAppResolutionResult(activityType:eventContext:eventTime:intentTypeName:statusReason:task:domainFlowActivity:flowMetadata:resolutionResult:)(char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v103 = a5;
  uint64_t v94 = a8;
  uint64_t v102 = a4;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = specialized static TaskLoggingService.getAppFrom(_:)(a10);
  if (!v18) {
    uint64_t v18 = specialized static TaskLoggingService.getAppFrom(_:)(a9);
  }
  uint64_t v92 = a9;
  uint64_t v89 = specialized static TaskLoggingService.getAppResolutionInfo(flowMetadata:)(a9);
  uint64_t v95 = v19;
  unsigned int v21 = v20;
  uint64_t v22 = type metadata accessor for SiriKitReliabilityCodes();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16);
  uint64_t v90 = a6;
  uint64_t v86 = v23 + 16;
  uint64_t v84 = v24;
  v24((uint64_t)v17, a6, v22);
  uint64_t v25 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56);
  uint64_t v88 = v22;
  uint64_t v87 = v23 + 56;
  Swift::Bool v85 = v25;
  v25((uint64_t)v17, 0, 1, v22);
  unint64_t v93 = a1;
  uint64_t v26 = ActivityType.asSELFTypeAndReason(_:)((uint64_t)v17);
  uint64_t v27 = (uint64_t)v17;
  uint64_t v28 = v18;
  char v30 = v29;
  uint64_t v91 = v27;
  outlined destroy of ReferenceResolutionClientProtocol?(v27, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  uint64_t v31 = SiriKitEventContext.resultCandidateId.getter();
  if (v32) {
    uint64_t v33 = v31;
  }
  else {
    uint64_t v33 = 13101;
  }
  uint64_t v34 = a2;
  if (v32) {
    unint64_t v35 = v32;
  }
  else {
    unint64_t v35 = 0xE200000000000000;
  }
  uint64_t v36 = v34[10];
  unint64_t v37 = v34[11];
  uint64_t v100 = v34;
  uint64_t v101 = a7;
  uint64_t v38 = *(void *)(a7 + 16);
  unint64_t v39 = *(void *)(a7 + 24);
  LOBYTE(v106[0]) = v30 & 1;
  *((void *)&v40 + 1) = v30 & 1;
  *(void *)&long long v40 = v26;
  unint64_t v96 = v39;
  uint64_t v41 = v38;
  unint64_t v97 = v37;
  uint64_t v98 = v36;
  uint64_t v42 = v104;
  uint64_t v43 = TaskLoggingService.createFlowTaskSELFClientEvent(activityType:eventTime:resultCandidateId:taskType:app:appResolutionType:attribute:domainContext:executionRequestId:parameterName:platformContext:statusReason:statusReasonDescription:taskId:)(v26, a3, v33, v35, v102, v103, v28, v21, 0, 0, 0, v36, v37, 0, 0, 0, v40 >> 32, 0, 0,
          v38,
          v39);
  swift_bridgeObjectRelease();
  id v99 = v43;
  if (v43)
  {
    uint64_t v83 = a3;
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Logger.instrumentation);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    uint64_t v45 = Logger.logObject.getter();
    int v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v45, (os_log_type_t)v46))
    {
      int v81 = v46;
      uint64_t v47 = swift_slowAlloc();
      uint64_t v80 = swift_slowAlloc();
      v106[0] = v80;
      *(_DWORD *)uint64_t v47 = 136315906;
      os_log_t v82 = v45;
      if (v26 > 0xD0)
      {
        uint64_t v49 = @"FLOWSTATETYPE_UNKNOWN";
        uint64_t v50 = @"FLOWSTATETYPE_UNKNOWN";
      }
      else
      {
        uint64_t v48 = (int)v26;
        uint64_t v49 = off_1E61EEFC8[v48];
        uint64_t v50 = off_1E61EF650[v48];
      }
      unint64_t v52 = v96;
      os_log_type_t v53 = v49;
      Swift::Int v54 = v50;
      uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v57 = v56;

      uint64_t v105 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v57, v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v47 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v105 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v52, v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v47 + 22) = 2080;
      unint64_t v58 = v103;
      swift_bridgeObjectRetain();
      uint64_t v105 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v58, v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v47 + 32) = 2080;
      uint64_t v59 = v100[12];
      unint64_t v60 = v100[13];
      swift_bridgeObjectRetain();
      uint64_t v105 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      os_log_t v61 = v82;
      _os_log_impl(&dword_1B9C64000, v82, (os_log_type_t)v81, "#TaskLoggingService SELF Log - logging task step: %s for taskId: %s, taskType: %s, interactionId:%s", (uint8_t *)v47, 0x2Au);
      uint64_t v62 = v80;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v62, -1, -1);
      MEMORY[0x1BA9E48C0](v47, -1, -1);

      uint64_t v42 = v104;
    }
    else
    {

      swift_release_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      unint64_t v52 = v96;
    }
    (*(void (**)(id))(v42 + 96))(v99);
    TaskLoggingService.emitRequestLink(executionRequestId:taskId:)(v98, v97, v41, v52);
    outlined init with copy of ReferenceResolutionClientProtocol(v42 + 16, (uint64_t)v106);
    uint64_t v63 = v107;
    uint64_t v64 = v108;
    os_log_t v82 = (os_log_t)__swift_project_boxed_opaque_existential_1(v106, v107);
    uint64_t v65 = v102;
    if (v28)
    {
      swift_retain();
      uint64_t v66 = App.appIdentifier.getter();
      uint64_t v68 = v67;
      swift_release();
    }
    else
    {
      uint64_t v66 = 0;
      uint64_t v68 = 0;
    }
    uint64_t v69 = v90;
    uint64_t v70 = SiriKitReliabilityCodes.rawValue.getter();
    uint64_t v71 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, void, void, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v64 + 8);
    uint64_t v78 = v63;
    uint64_t v79 = v64;
    uint64_t v72 = v93;
    uint64_t v73 = v83;
    uint64_t v74 = v103;
    v71(v93, v83, v65, v103, v66, v68, v98, v97, 0, 0, v70, v75, v41, v96, v78, v79);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v106);
    uint64_t v76 = v91;
    uint64_t v77 = v88;
    v84(v91, v69, v88);
    v85(v76, 0, 1, v77);
    TaskLoggingService.logAndDonateClassicFlowTask(activityType:eventContext:eventTime:task:app:attribute:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:shouldDonateToCurare:appResolutionName:flowMetadata:)(v72, v100, v73, v101, v28, 0, 0, v94, 0, v65, v74, 0, 0, 0, 0, 0, 0, v76, 0,
      v89,
      v95,
      v92);
    swift_release();

    swift_bridgeObjectRelease();
    return outlined destroy of ReferenceResolutionClientProtocol?(v76, &demangling cache variable for type metadata for SiriKitReliabilityCodes?);
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

void TaskLoggingService.logTaskStepAndEntityContextTier1(activityType:eventContext:eventTime:task:app:attribute:chosenItem:disambiguationItems:domainContext:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:)(char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6, unint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, NSObject *a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v29 = a20;
  uint64_t v28 = a21;
  uint64_t v31 = a18;
  uint64_t v30 = a19;
  uint64_t v33 = a16;
  uint64_t v32 = a17;
  uint64_t v35 = a14;
  uint64_t v34 = a15;
  unint64_t v37 = a12;
  uint64_t v36 = a13;
  unint64_t v39 = a10;
  uint64_t v38 = a11;
  if (a9 && *(void *)(a9 + 16))
  {
    long long v40 = TaskLoggingService.createFlowEntityContextTier1(disambiguationItems:chosenItem:)(a9, a8);
    if (v40)
    {
      uint64_t v41 = v40;
      uint64_t v42 = SiriKitEventContext.resultCandidateId.getter();
      uint64_t v44 = 13101;
      if (v43) {
        uint64_t v44 = v42;
      }
      uint64_t v45 = a1;
      uint64_t v46 = a3;
      uint64_t v47 = a5;
      uint64_t v48 = a6;
      unint64_t v49 = a7;
      if (v43) {
        unint64_t v50 = v43;
      }
      else {
        unint64_t v50 = 0xE200000000000000;
      }
      TaskLoggingService.logSELFEntityContextTier1(entityContextTier1:resultCandidateId:executionRequestId:taskId:)((uint64_t)v41, v44, v50, a2[10], a2[11], *(void *)(a4 + 16), *(void *)(a4 + 24));
      a7 = v49;
      a6 = v48;
      a5 = v47;
      a3 = v46;
      a1 = v45;
      swift_bridgeObjectRelease();
      uint64_t v51 = v41;
      unint64_t v52 = (void *)specialized TaskLoggingService.createFlowPlatformContext(entityContextTier1:)(v41);
    }
    else
    {
      if (one-time initialization token for instrumentation != -1) {
        swift_once();
      }
      uint64_t v53 = type metadata accessor for Logger();
      __swift_project_value_buffer(v53, (uint64_t)static Logger.instrumentation);
      swift_retain();
      swift_retain();
      Swift::Int v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v54, v55))
      {
        os_log_t log = v54;
        uint64_t v56 = swift_slowAlloc();
        uint64_t v62 = swift_slowAlloc();
        v65[0] = v62;
        *(_DWORD *)uint64_t v56 = 136315394;
        unint64_t v63 = a7;
        os_log_type_t type = v55;
        uint64_t v58 = *(void *)(a4 + 16);
        unint64_t v57 = *(void *)(a4 + 24);
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v57, v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v56 + 12) = 2080;
        uint64_t v59 = a2[10];
        unint64_t v60 = a2[11];
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        a7 = v63;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, log, type, "#TaskLoggingService SELF Log - not logging EntityContextTier1 event for taskId: %s, executionRequestId: %s", (uint8_t *)v56, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v62, -1, -1);
        MEMORY[0x1BA9E48C0](v56, -1, -1);
      }
      else
      {

        swift_release();
        swift_release();
      }
      unint64_t v52 = 0;
    }
    uint64_t v28 = a21;
    unint64_t v39 = a10;
    uint64_t v30 = a19;
    uint64_t v29 = a20;
    uint64_t v32 = a17;
    uint64_t v31 = a18;
    uint64_t v34 = a15;
    uint64_t v33 = a16;
    uint64_t v36 = a13;
    uint64_t v35 = a14;
    uint64_t v38 = a11;
    unint64_t v37 = a12;
  }
  else
  {
    unint64_t v52 = 0;
  }
  TaskLoggingService.logTaskStep(activityType:eventContext:eventTime:task:app:attribute:domainContext:domainFlowActivity:intent:intentTypeName:parameterName:responseId:statusDescription:statusReason:platformContext:)(a1, a2, a3, a4, a5, a6, a7, v39, v38, v37, v36, v35, v34, v33, v32, v31, v30, v29, v28,
    v52);
}

__n128 TaskLoggingService.logSELFFlowTask(activityType:eventContext:eventTime:task:taskType:app:attribute:domainContext:parameterName:responseId:statusReasonDescription:statusReason:)(signed int a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unint64_t a17)
{
  specialized TaskLoggingService.logSELFFlowTask(activityType:eventContext:eventTime:task:taskType:app:attribute:domainContext:parameterName:responseId:statusReasonDescription:statusReason:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a15, a16, a17 | ((HIDWORD(a17) & 1) << 32));
  return result;
}

void TaskLoggingService.logDomainPerfContext(eventContext:eventTime:task:taskType:domainPerfContext:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, id a6)
{
  id v12 = objc_msgSend(a6, sel_flowDomainExecutionContext);

  if (!v12)
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    swift_retain_n();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v46 = v30;
      *(_DWORD *)uint64_t v29 = 136315650;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v29 + 12) = 2080;
      uint64_t v31 = *(void *)(a3 + 16);
      unint64_t v32 = *(void *)(a3 + 24);
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v29 + 22) = 2080;
      uint64_t v33 = a1[12];
      unint64_t v34 = a1[13];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v27, v28, "Ignoring domainPerfContext is not set for taskType: %s, taskId: %s, interactionId:%s", (uint8_t *)v29, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v30, -1, -1);
      uint64_t v35 = v29;
LABEL_18:
      MEMORY[0x1BA9E48C0](v35, -1, -1);

      return;
    }

    swift_release_n();
LABEL_23:
    swift_release_n();
    swift_bridgeObjectRelease_n();
    return;
  }
  uint64_t v45 = a2;
  uint64_t v13 = SiriKitEventContext.resultCandidateId.getter();
  if (v14)
  {
    unint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 13101;
    unint64_t v15 = 0xE200000000000000;
  }
  uint64_t v17 = *(void *)(a3 + 16);
  unint64_t v16 = *(void *)(a3 + 24);
  unint64_t v43 = a1[11];
  uint64_t v44 = a1[10];
  uint64_t v18 = TaskLoggingService.constructMetaData(resultCandidateId:executionRequestId:taskId:)(v13, v15, v44, v43, v17, v16);
  swift_bridgeObjectRelease();
  if (!v18)
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v37))
    {
      uint64_t v38 = swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      uint64_t v46 = v39;
      *(_DWORD *)uint64_t v38 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v38 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v16, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v27, v37, "#TaskLoggingService SELF Log - unable to construct metaData, not logging DomainPerfContext data for taskType: %s with taskId: %s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v39, -1, -1);
      uint64_t v35 = v38;
      goto LABEL_18;
    }

    goto LABEL_23;
  }
  uint64_t v42 = v18;
  objc_msgSend(a6, sel_setEventMetadata_, v18);
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.instrumentation);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_retain_n();
  unsigned int v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    os_log_type_t type = v21;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    uint64_t v46 = v40;
    *(_DWORD *)uint64_t v22 = 136315650;
    unint64_t v23 = v16;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v22 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v16, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 22) = 2080;
    uint64_t v24 = a1[12];
    unint64_t v25 = a1[13];
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    unint64_t v16 = v23;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v20, type, "#TaskLoggingService SELF Log - logging DomainPerfContext data for taskType: %s, with taskId: %s, interactionId:%s", (uint8_t *)v22, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v40, -1, -1);
    MEMORY[0x1BA9E48C0](v22, -1, -1);
  }
  else
  {

    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  objc_msgSend(objc_msgSend(self, sel_sharedStream), sel_emitMessage_timestamp_, a6, v45);
  swift_unknownObjectRelease();
  TaskLoggingService.emitRequestLink(executionRequestId:taskId:)(v44, v43, v17, v16);
}

void TaskLoggingService.logDomainTier1Data(eventContext:task:taskType:tierOneFlowEvent:)(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, id a5)
{
  uint64_t v6 = v5;
  id v12 = objc_msgSend(a5, sel_flowStep);

  if (v12)
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    swift_retain_n();
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v47 = v17;
      *(_DWORD *)uint64_t v16 = 136315650;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v16 + 12) = 2080;
      uint64_t v18 = *(void *)(a2 + 16);
      unint64_t v19 = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 22) = 2080;
      uint64_t v20 = a1[12];
      unint64_t v21 = a1[13];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v14, v15, "Ignoring tierOneFlowEvent with illegally set flowStep for taskType: %s, taskId: %s, interactionId:%s", (uint8_t *)v16, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v17, -1, -1);
      uint64_t v22 = v16;
LABEL_6:
      MEMORY[0x1BA9E48C0](v22, -1, -1);

      return;
    }

    swift_release_n();
LABEL_16:
    swift_release_n();
    swift_bridgeObjectRelease_n();
    return;
  }
  uint64_t v23 = SiriKitEventContext.resultCandidateId.getter();
  if (v24)
  {
    unint64_t v25 = v24;
  }
  else
  {
    uint64_t v23 = 13101;
    unint64_t v25 = 0xE200000000000000;
  }
  unint64_t v26 = *(void *)(a2 + 24);
  unint64_t v45 = a1[11];
  uint64_t v46 = a1[10];
  uint64_t v27 = *(void *)(a2 + 16);
  os_log_type_t v28 = TaskLoggingService.constructMetaData(resultCandidateId:executionRequestId:taskId:)(v23, v25, v46, v45, v27, v26);
  swift_bridgeObjectRelease();
  if (!v28)
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v37))
    {
      uint64_t v38 = v27;
      uint64_t v39 = swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      uint64_t v47 = v40;
      *(_DWORD *)uint64_t v39 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v39 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v26, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v14, v37, "#TaskLoggingService SELF Log - unable to construct metaData, not logging tier1 data for taskType: %s with taskId: %s", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v40, -1, -1);
      uint64_t v22 = v39;
      goto LABEL_6;
    }

    goto LABEL_16;
  }
  unint64_t v43 = v28;
  objc_msgSend(a5, sel_setEventMetadata_, v28);
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Logger.instrumentation);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_retain_n();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    unint64_t v44 = v26;
    uint64_t v32 = swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    uint64_t v47 = v42;
    *(_DWORD *)uint64_t v32 = 136315650;
    os_log_type_t type = v31;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v32 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v44, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 22) = 2080;
    uint64_t v33 = a1[12];
    unint64_t v34 = a1[13];
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v30, type, "#TaskLoggingService SELF Log - logging tier1 data for taskType: %s, with taskId: %s, interactionId:%s", (uint8_t *)v32, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v42, -1, -1);
    uint64_t v35 = v32;
    unint64_t v26 = v44;
    MEMORY[0x1BA9E48C0](v35, -1, -1);
  }
  else
  {

    swift_release_n();
    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(id))(v6 + 96))(a5);
  TaskLoggingService.emitRequestLink(executionRequestId:taskId:)(v46, v45, v27, v26);
}

uint64_t TaskLoggingService.logTaskConfiguration(eventContext:eventTime:task:taskConfiguration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = v4[10];
  uint64_t v10 = v4[11];
  __swift_project_boxed_opaque_existential_1(v4 + 7, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, uint64_t, uint64_t))(v10 + 16))(a1, a2, a4, *(void *)(a3 + 16), *(void *)(a3 + 24), v9, v10);
}

void TaskLoggingService.logLocationAccessPrompt(eventContext:task:promptContext:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0460]), sel_init);
  if (v8)
  {
    uint64_t v9 = v8;
    objc_msgSend(v8, sel_setLocationAccessPermissionPromptContext_, a3);
    uint64_t v10 = SiriKitEventContext.resultCandidateId.getter();
    if (v11)
    {
      unint64_t v12 = v11;
    }
    else
    {
      uint64_t v10 = 13101;
      unint64_t v12 = 0xE200000000000000;
    }
    uint64_t v13 = TaskLoggingService.constructMetaData(resultCandidateId:executionRequestId:taskId:)(v10, v12, *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a2 + 16), *(void *)(a2 + 24));
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setEventMetadata_, v13);

    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.instrumentation);
    id v15 = a3;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v28 = v19;
      *(_DWORD *)uint64_t v18 = 136315138;
      id v20 = objc_msgSend(v15, sel_formattedJsonBody);
      if (v20)
      {
        unint64_t v21 = v20;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
      uint64_t v25 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v16, v17, "#TaskLoggingService SELF Log - logging locationAccessPrompt; promptContext=%s",
        v18,
        0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v19, -1, -1);
      MEMORY[0x1BA9E48C0](v18, -1, -1);
    }
    else
    {
    }
    (*(void (**)(void *))(v4 + 96))(v9);
  }
  else
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.instrumentation);
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v23))
    {
      unint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v24 = 0;
      _os_log_impl(&dword_1B9C64000, oslog, v23, "#TaskLoggingService SELF Log - locationAccessPrompt NOT logged; missing schema event",
        v24,
        2u);
      MEMORY[0x1BA9E48C0](v24, -1, -1);
    }
  }
}

uint64_t (*default argument 2 of TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:)())(uint64_t a1)
{
  return closure #1 in default argument 5 of ConversationService.init(conversationHandlerLocator:referenceResolutionClient:useStubCamBridge:useNoopEventSender:doWarmup:selfEmitter:serverFallbackDisablingUtils:);
}

id (*default argument 3 of TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:)())()
{
  return closure #1 in default argument 3 of TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:);
}

uint64_t (*default argument 4 of TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:)())@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in default argument 4 of TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:);
}

uint64_t (*default argument 5 of TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:)())@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in default argument 5 of TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:);
}

uint64_t TaskLoggingService.__allocating_init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:)(long long *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11)
{
  uint64_t v17 = *(void *)(a11 + 24);
  uint64_t v18 = *(void *)(a11 + 32);
  uint64_t v19 = __swift_mutable_project_boxed_opaque_existential_1(a11, v17);
  uint64_t v20 = specialized TaskLoggingService.__allocating_init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, v19, v11, v17, v18);
  __swift_destroy_boxed_opaque_existential_1Tm(a11);
  return v20;
}

uint64_t static TaskLoggingService.instance.getter()
{
  if (one-time initialization token for instance != -1) {
    swift_once();
  }

  return swift_retain();
}

id closure #1 in default argument 3 of TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:)()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  id v4 = objc_allocWithZone(MEMORY[0x1E4FA1370]);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v6 = objc_msgSend(v4, sel_initWithNSUUID_, isa);

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v6;
}

uint64_t closure #1 in default argument 4 of TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = self;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v4 = objc_msgSend(v2, sel_derivedIdentifierForComponentName_fromSourceIdentifier_, 3, isa);

  if (v4)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for UUID();
    id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a1;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for UUID();
    id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a1;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

uint64_t closure #1 in default argument 5 of TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AppInformationResolver();
  swift_allocObject();
  swift_retain();
  uint64_t result = AppInformationResolver.init(app:)();
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for AppInformationResolver;
  *a1 = result;
  return result;
}

uint64_t TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:)(long long *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11)
{
  uint64_t v27 = a7;
  uint64_t v28 = a8;
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  long long v24 = a9;
  uint64_t v16 = *(void *)(a11 + 24);
  uint64_t v17 = *(void *)(a11 + 32);
  uint64_t v18 = __swift_mutable_project_boxed_opaque_existential_1(a11, v16);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v21 + 16))(v20);
  uint64_t v22 = specialized TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:)(a1, a2, a3, a4, v25, v26, v27, v28, v24, a10, (uint64_t)v20, v11, v16, v17);
  __swift_destroy_boxed_opaque_existential_1Tm(a11);
  return v22;
}

char *TaskLoggingService.createFlowEntityContextTier1(disambiguationItems:chosenItem:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(char **)(a1 + 16);
  if (v2)
  {
    unint64_t v28 = MEMORY[0x1E4FBC860];
    uint64_t v3 = a1 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of Any(v3, (uint64_t)v26);
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for INPerson);
      if (swift_dynamicCast())
      {
        id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0480]), sel_init);
        if (v4)
        {
          uint64_t v5 = v4;
          id v6 = objc_msgSend(v25, sel_contactIdentifier);
          objc_msgSend(v5, sel_setEntityId_, v6);

          id v7 = v5;
          MEMORY[0x1BA9E3030]();
          if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      v3 += 32;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
    if (v28 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v20) {
        goto LABEL_12;
      }
    }
    else if (*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_12:
      uint64_t v8 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0478]), sel_init);
      if (v8)
      {
        uint64_t v2 = v8;
        type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for FLOWSchemaFLOWEntityTier1);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v2, sel_setEntitiesPresenteds_, isa);

        outlined init with copy of ReferenceResolutionClientProtocol?(a2, (uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for Any?);
        if (v27)
        {
          if (swift_dynamicCast())
          {
            id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0480]), sel_init);
            uint64_t v11 = v23;
            if (v10)
            {
              unint64_t v12 = v10;
              id v13 = objc_msgSend(v25, sel_contactIdentifier);
              objc_msgSend(v12, sel_setEntityId_, v13);

              objc_msgSend(v2, sel_setEntitySelected_, v12);
            }
            else
            {
            }
            goto LABEL_23;
          }
        }
        else
        {
          outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for Any?);
        }
        uint64_t v11 = v23;
LABEL_23:
        uint64_t v19 = (void *)(*(uint64_t (**)(void))(v11 + 112))();
        objc_msgSend(v2, sel_setLinkId_, v19);

        return v2;
      }
      swift_bridgeObjectRelease();
      if (one-time initialization token for instrumentation != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)static Logger.instrumentation);
      id v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v15, v16))
      {
LABEL_31:

        return 0;
      }
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      uint64_t v18 = "#TaskLoggingService cannot initiate entityContextTier1";
LABEL_30:
      _os_log_impl(&dword_1B9C64000, v15, v16, v18, v17, 2u);
      MEMORY[0x1BA9E48C0](v17, -1, -1);
      goto LABEL_31;
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.instrumentation);
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v15, v16)) {
      goto LABEL_31;
    }
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    uint64_t v18 = "#TaskLoggingService cannot initiate entityPresented or disambiguationItem is not INPerson";
    goto LABEL_30;
  }
  return v2;
}

void TaskLoggingService.logSELFEntityContextTier1(entityContextTier1:resultCandidateId:executionRequestId:taskId:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v8 = v7;
  id v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0460]), sel_init);
  if (v37)
  {
    os_log_type_t v16 = TaskLoggingService.constructMetaData(resultCandidateId:executionRequestId:taskId:)(a2, a3, a4, a5, a6, a7);
    if (v16)
    {
      uint64_t v17 = v16;
      objc_msgSend(v37, sel_setFlowEntityContextTier1_, a1);
      objc_msgSend(v37, sel_setEventMetadata_, v17);
      if (one-time initialization token for instrumentation != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for Logger();
      __swift_project_value_buffer(v18, (uint64_t)static Logger.instrumentation);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v19 = Logger.logObject.getter();
      os_log_type_t v20 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v34 = a4;
        uint64_t v21 = swift_slowAlloc();
        uint64_t v33 = swift_slowAlloc();
        uint64_t v38 = v33;
        *(_DWORD *)uint64_t v21 = 136315650;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v21 + 12) = 2080;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a6, a7, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v21 + 22) = 2080;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, a5, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B9C64000, v19, v20, "#TaskLoggingService SELF Log - logging entity for resultCandidateId: %s, taskId: %s, executionRequestId: %s", (uint8_t *)v21, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v33, -1, -1);
        uint64_t v22 = v21;
        a4 = v34;
        MEMORY[0x1BA9E48C0](v22, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(id))(v8 + 96))(v37);
      TaskLoggingService.emitRequestLink(executionRequestId:taskId:)(a4, a5, a6, a7);
    }
    else
    {
      if (one-time initialization token for instrumentation != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Logger.instrumentation);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = swift_slowAlloc();
        uint64_t v36 = a6;
        uint64_t v32 = swift_slowAlloc();
        uint64_t v38 = v32;
        *(_DWORD *)uint64_t v31 = 136315650;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v31 + 12) = 2080;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, a7, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v31 + 22) = 2080;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1B9C64000, v29, v30, "#TaskLoggingService SELF Log - unable to instantiate SELF schema, not logging Task step for resultCandidateId: %s, taskId: %s, executionRequestId: %s", (uint8_t *)v31, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v32, -1, -1);
        MEMORY[0x1BA9E48C0](v31, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
    }
  }
  else
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    long long v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v35 = a6;
      uint64_t v27 = swift_slowAlloc();
      uint64_t v38 = v27;
      *(_DWORD *)uint64_t v26 = 136315650;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v26 + 12) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, a7, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v26 + 22) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v24, v25, "#TaskLoggingService SELF Log - unable to instantiate SELF schema, not logging Task step for resultCandidateId: %s, taskId: %s, executionRequestId: %s", (uint8_t *)v26, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v27, -1, -1);
      MEMORY[0x1BA9E48C0](v26, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t static TaskLoggingService.createTaskContentString(taskType:stepType:statusReason:activities:attribute:taskId:)(uint64_t a1, unint64_t a2, char *a3, uint64_t a4, unint64_t a5, uint64_t a6, NSObject *a7, unint64_t a8, NSObject *a9, unint64_t a10)
{
  return specialized static TaskLoggingService.createTaskContentString(taskType:stepType:statusReason:activities:attribute:taskId:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void TaskLoggingService.logViaSAMetrics(aceServiceInvoker:eventInformation:timings:originalCommandId:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v6 = *(void **)(v5 + 160);
  if (!v6)
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.instrumentation);
    osos_log_t log = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v15))
    {
      os_log_type_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v16 = 0;
      _os_log_impl(&dword_1B9C64000, oslog, v15, "#TaskLoggingService#MTEOptOut skipping sending metrics command because unable to initialize sensitivityManager", v16, 2u);
      MEMORY[0x1BA9E48C0](v16, -1, -1);
    }
    goto LABEL_12;
  }
  osos_log_t log = v6;
  if ([oslog isOptedOutOfMTE])
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.instrumentation);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      id v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v13 = 0;
      _os_log_impl(&dword_1B9C64000, v11, v12, "#TaskLoggingService#MTEOptOut skipping sending metrics command because device is opted out of MTE", v13, 2u);
      MEMORY[0x1BA9E48C0](v13, -1, -1);
    }

LABEL_12:

    return;
  }
  id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96888]), sel_init);
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v17, sel_setTimings_, isa);

  uint64_t v19 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000022, 0x80000001BA0709E0);
  objc_msgSend(v17, sel_setCategory_, v19);

  os_log_type_t v20 = (void *)MEMORY[0x1BA9E2DD0](a4, a5);
  objc_msgSend(v17, sel_setOriginalCommandId_, v20);

  Class v21 = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v17, sel_setEventInformation_, v21);

  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.instrumentation);
  id v23 = v17;
  long long v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v26 = 138412290;
    id v28 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v27 = v23;

    _os_log_impl(&dword_1B9C64000, v24, v25, "#TaskLoggingService sending: %@", v26, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v27, -1, -1);
    MEMORY[0x1BA9E48C0](v26, -1, -1);
  }
  else
  {
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of AceServiceInvokerAsync.submitAndForget(_:setRefId:)();
}

uint64_t TaskLoggingService.deinit()
{
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 16);
  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 56);
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  __swift_destroy_boxed_opaque_existential_1Tm(v0 + 168);
  return v0;
}

uint64_t TaskLoggingService.__deallocating_deinit()
{
  TaskLoggingService.deinit();

  return swift_deallocClassInstance();
}

uint64_t App.versionOnCurrentDevice.getter()
{
  uint64_t v0 = App.appIdentifier.getter();
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = v0;
    id v4 = objc_allocWithZone(MEMORY[0x1E4F223C8]);
    id v5 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(v3, v2, 0);
    uint64_t v7 = v5;
    if (v5)
    {
      id v8 = objc_msgSend(v5, sel_bundleIdentifier);
      if (v8)
      {
        uint64_t v9 = v8;
        uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

        return v2;
      }
    }
    return 0;
  }
  return v2;
}

id @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  v10[1] = *(id *)MEMORY[0x1E4F143B8];
  id v5 = (void *)MEMORY[0x1BA9E2DD0]();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  id v6 = objc_msgSend(v3, sel_initWithBundleIdentifier_allowPlaceholder_error_, v5, a3 & 1, v10);

  if (v6)
  {
    id v7 = v10[0];
  }
  else
  {
    id v8 = v10[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t specialized TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:)(long long *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  *(void *)(a12 + 192) = a13;
  *(void *)(a12 + 200) = a14;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)(a12 + 168));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a13 - 8) + 32))(boxed_opaque_existential_0, a11, a13);
  outlined init with take of ReferenceResolutionClientProtocol(a1, a12 + 16);
  outlined init with take of ReferenceResolutionClientProtocol(a2, a12 + 56);
  *(void *)(a12 + 96) = a3;
  *(void *)(a12 + 104) = a4;
  *(void *)(a12 + 112) = a5;
  *(void *)(a12 + 120) = a6;
  *(void *)(a12 + 128) = a7;
  *(void *)(a12 + 136) = a8;
  *(_OWORD *)(a12 + 144) = a9;
  *(void *)(a12 + 160) = a10;
  return a12;
}

void specialized TaskLoggingService.updateFlowTaskState(aceServiceInvoker:taskName:interactionId:taskId:)(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v14 = type metadata accessor for NLContextUpdate();
  MEMORY[0x1F4188790](v14);
  id v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a5)
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      os_log_type_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      uint64_t v42 = v31;
      *(_DWORD *)os_log_type_t v30 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v32 = "#TaskLoggingService invalid interactionId, failed to update FlowTaskState from Client for taskName: %s";
LABEL_15:
      _os_log_impl(&dword_1B9C64000, v28, v29, v32, v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v31, -1, -1);
      MEMORY[0x1BA9E48C0](v30, -1, -1);

      return;
    }
LABEL_16:

    swift_bridgeObjectRelease_n();
    return;
  }
  if (!a7)
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    id v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, v29))
    {
      os_log_type_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      uint64_t v42 = v31;
      *(_DWORD *)os_log_type_t v30 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v32 = "#TaskLoggingService invalid taskId, failed to update FlowTaskState from Client for taskName: %s";
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  uint64_t v40 = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  NLContextUpdate.init()();
  id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96748]), sel_init);
  uint64_t v37 = a6;
  uint64_t v19 = (void *)MEMORY[0x1BA9E2DD0](a6, a7);
  objc_msgSend(v18, sel_setTaskId_, v19);

  uint64_t v38 = a4;
  os_log_type_t v20 = (void *)MEMORY[0x1BA9E2DD0](a4, a5);
  objc_msgSend(v18, sel_setInteractionId_, v20);

  Class v21 = (void *)MEMORY[0x1BA9E2DD0](a2, a3);
  objc_msgSend(v18, sel_setIntentTypeName_, v21);

  objc_msgSend(v18, sel_setMetricsStateOrigin_, *MEMORY[0x1E4F972C8]);
  id v39 = v18;
  NLContextUpdate.siriKitMetrics.setter();
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.instrumentation);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    uint64_t v42 = v35;
    *(_DWORD *)uint64_t v25 = 136315650;
    uint64_t v36 = a1;
    swift_bridgeObjectRetain();
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v25 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, a7, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v25 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, a5, &v42);
    a1 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v23, v24, "#TaskLoggingService update FlowTaskState from Client with taskName: %s taskId: %s interactionId: %s", (uint8_t *)v25, 0x20u);
    uint64_t v26 = v35;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v26, -1, -1);
    MEMORY[0x1BA9E48C0](v25, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v34 = (void *)NLContextUpdate.toAceContextUpdate()();
  AceServiceInvokerAsync.submitAndForget(_:)();

  (*(void (**)(char *, uint64_t))(v40 + 8))(v17, v14);
}

uint64_t specialized TaskLoggingService.resetFlowTaskState(aceServiceInvoker:)(void *a1)
{
  uint64_t v2 = type metadata accessor for NLContextUpdate();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  id v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  NLContextUpdate.init()();
  NLContextUpdate.shouldResetFlowTaskState.setter();
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.instrumentation);
  id v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl(&dword_1B9C64000, v7, v8, "#TaskLoggingService signalling server to reset FlowTaskState", v9, 2u);
    MEMORY[0x1BA9E48C0](v9, -1, -1);
  }

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v10 = (void *)NLContextUpdate.toAceContextUpdate()();
  AceServiceInvokerAsync.submitAndForget(_:)();

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t specialized static TaskLoggingService.getAppFrom(_:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AppResolutionResult?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AppResolutionResult();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)&v39 - v11;
  uint64_t v13 = MEMORY[0x1F4188790](v10);
  uint64_t v15 = (char *)&v39 - v14;
  MEMORY[0x1F4188790](v13);
  id v17 = (char *)&v39 - v16;
  outlined init with copy of ReferenceResolutionClientProtocol?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for AppResolutionResult?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v17, v4, v5);
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.instrumentation);
    os_log_type_t v24 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
    v24(v15, v17, v5);
    uint64_t v25 = Logger.logObject.getter();
    int v44 = static os_log_type_t.debug.getter();
    BOOL v26 = os_log_type_enabled(v25, (os_log_type_t)v44);
    uint64_t v27 = (_DWORD *)MEMORY[0x1E4F9FA18];
    if (!v26)
    {
      os_log_type_t v30 = *(void (**)(char *, uint64_t))(v6 + 8);
      v30(v15, v5);

      int v31 = *MEMORY[0x1E4F9FA08];
      goto LABEL_17;
    }
    os_log_t v42 = v25;
    id v28 = (uint8_t *)swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    uint64_t v46 = v40;
    *(_DWORD *)id v28 = 136315138;
    v24(v12, v15, v5);
    int v29 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v12, v5);
    int v41 = *MEMORY[0x1E4F9FA08];
    unint64_t v43 = v24;
    if (v29 == v41 || v29 == *v27)
    {
      (*(void (**)(char *, uint64_t))(v6 + 96))(v12, v5);
      uint64_t v32 = App.appIdentifier.getter();
      unint64_t v34 = v33;
      swift_release();
      if (v34)
      {
LABEL_16:
        uint64_t v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, &v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        os_log_type_t v30 = *(void (**)(char *, uint64_t))(v6 + 8);
        v30(v15, v5);
        os_log_t v35 = v42;
        _os_log_impl(&dword_1B9C64000, v42, (os_log_type_t)v44, "#TaskLoggingService SELF Log - found app %s in appResolutionResult", v28, 0xCu);
        uint64_t v36 = v40;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v36, -1, -1);
        MEMORY[0x1BA9E48C0](v28, -1, -1);

        os_log_type_t v24 = v43;
        uint64_t v27 = (_DWORD *)MEMORY[0x1E4F9FA18];
        int v31 = v41;
LABEL_17:
        v24(v9, v17, v5);
        int v37 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v9, v5);
        if (v37 == v31 || v37 == *v27)
        {
          (*(void (**)(char *, uint64_t))(v6 + 96))(v9, v5);
          uint64_t v22 = *(void *)v9;
        }
        else
        {
          v30(v9, v5);
          uint64_t v22 = 0;
        }
        v30(v17, v5);
        return v22;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
    }
    swift_bridgeObjectRelease();
    unint64_t v34 = 0xE300000000000000;
    uint64_t v32 = 7104878;
    goto LABEL_16;
  }
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for AppResolutionResult?);
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.instrumentation);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    Class v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Class v21 = 0;
    _os_log_impl(&dword_1B9C64000, v19, v20, "#TaskLoggingService SELF Log - cannot get app from nil appResolutionResult", v21, 2u);
    MEMORY[0x1BA9E48C0](v21, -1, -1);
  }

  return 0;
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18[4];

  if (!a1)
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.instrumentation);
    uint64_t v10 = Logger.logObject.getter();
    uint64_t v11 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v10, v11)) {
      goto LABEL_18;
    }
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    uint64_t v13 = "#TaskLoggingService SELF Log - cannot get app from nil flowMetadata";
    goto LABEL_17;
  }
  if (!*(void *)(a1 + 16)
    || (uint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(0x6C646E7542707061, 0xEB00000000644965), (v3 & 1) == 0)
    || (outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v2, (uint64_t)v18), (swift_dynamicCast() & 1) == 0))
  {
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.instrumentation);
    uint64_t v10 = Logger.logObject.getter();
    uint64_t v11 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v10, v11)) {
      goto LABEL_18;
    }
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v12 = 0;
    uint64_t v13 = "#TaskLoggingService SELF Log - flowMetadata doesn't contain key 'appBundleId'";
LABEL_17:
    _os_log_impl(&dword_1B9C64000, v10, v11, v13, v12, 2u);
    MEMORY[0x1BA9E48C0](v12, -1, -1);
LABEL_18:

    return 0;
  }
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.instrumentation);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  uint64_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    v18[0] = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1B9C64000, v5, v6, "#TaskLoggingService SELF Log - found app %s in flowMetadata", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v8, -1, -1);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  type metadata accessor for App();
  return App.__allocating_init(appIdentifier:)();
}

uint64_t specialized static TaskLoggingService.getAppResolutionInfo(flowMetadata:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SiriKitReliabilityCodes();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1
    && *(void *)(a1 + 16)
    && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(0x6974756C6F736572, 0xEE00657079546E6FLL), (v7 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v6, (uint64_t)v46);
    outlined init with take of Any(v46, v47);
    outlined init with copy of Any((uint64_t)v47, (uint64_t)v46);
    if ((swift_dynamicCast() & 1) == 0)
    {
      if (one-time initialization token for instrumentation != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Logger.instrumentation);
      outlined init with copy of Any((uint64_t)v47, (uint64_t)v46);
      os_log_type_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        uint64_t v23 = swift_slowAlloc();
        uint64_t v45 = v23;
        *(_DWORD *)uint64_t v22 = 136315138;
        outlined init with copy of Any((uint64_t)v46, (uint64_t)&v43);
        uint64_t v24 = String.init<A>(describing:)();
        uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v46);
        _os_log_impl(&dword_1B9C64000, v20, v21, "#TaskLoggingService SELF Log - failed to map non-String: %s to SELF FLOWAppResolutionType, falling back to UNKNOWN", v22, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v23, -1, -1);
        MEMORY[0x1BA9E48C0](v22, -1, -1);
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v46);
      }

      outlined init with copy of Any((uint64_t)v47, (uint64_t)v46);
      uint64_t v8 = String.init<A>(describing:)();
      goto LABEL_29;
    }
    uint64_t v8 = v43;
    uint64_t v9 = (void *)v44;
    uint64_t v10 = HIBYTE(v44) & 0xF;
    if ((v44 & 0x2000000000000000) == 0) {
      uint64_t v10 = v43 & 0xFFFFFFFFFFFFLL;
    }
    if (v10)
    {
      swift_bridgeObjectRetain();
      v11._uint64_t countAndFlagsBits = v8;
      v11._object = v9;
      AppResolutionType.init(rawValue:)(v11);
      char v12 = v46[0];
      if (LOBYTE(v46[0]) == 12)
      {
        if (one-time initialization token for instrumentation != -1) {
          swift_once();
        }
        uint64_t v13 = type metadata accessor for Logger();
        __swift_project_value_buffer(v13, (uint64_t)static Logger.instrumentation);
        swift_bridgeObjectRetain_n();
        uint64_t v14 = Logger.logObject.getter();
        os_log_type_t v15 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v16 = (uint8_t *)swift_slowAlloc();
          uint64_t v17 = swift_slowAlloc();
          *(void *)&v46[0] = v17;
          *(_DWORD *)uint64_t v16 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, (unint64_t)v9, (uint64_t *)v46);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1B9C64000, v14, v15, "#TaskLoggingService SELF Log - failed to map appResolutionTypeName: %s to SELF FLOWAppResolutionType, falling back to UNKNOWN", v16, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v17, -1, -1);
          MEMORY[0x1BA9E48C0](v16, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }

LABEL_29:
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
        return v8;
      }
      if (one-time initialization token for instrumentation != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      __swift_project_value_buffer(v26, (uint64_t)static Logger.instrumentation);
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = swift_slowAlloc();
        uint64_t v42 = swift_slowAlloc();
        *(void *)&v46[0] = v42;
        *(_DWORD *)uint64_t v29 = 136315394;
        LOBYTE(v43) = v12;
        unint64_t v30 = AppResolutionType.rawValue.getter();
        uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, (uint64_t *)v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v29 + 12) = 2080;
        LOBYTE(v43) = v12;
        unsigned int v32 = AppResolutionType.flowAppResolutionType.getter();
        if (v32 > 0xD)
        {
          unint64_t v34 = @"FLOWAPPRESOLUTIONTYPE_UNKNOWN";
          os_log_t v35 = @"FLOWAPPRESOLUTIONTYPE_UNKNOWN";
        }
        else
        {
          uint64_t v33 = (int)v32;
          unint64_t v34 = off_1E61EFCD8[v33];
          os_log_t v35 = off_1E61EFD48[v33];
        }
        uint64_t v36 = v34;
        int v37 = v35;
        uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v40 = v39;

        uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, (uint64_t *)v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1B9C64000, v27, v28, "#TaskLoggingService SELF Log - mapping appResolutionTypeName: %s to SELF FLOWAppResolutionType %s", (uint8_t *)v29, 0x16u);
        uint64_t v41 = v42;
        swift_arrayDestroy();
        MEMORY[0x1BA9E48C0](v41, -1, -1);
        MEMORY[0x1BA9E48C0](v29, -1, -1);
      }

      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
      LOBYTE(v46[0]) = v12;
      AppResolutionType.flowAppResolutionType.getter();
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FA1A00], v2);
      uint64_t v8 = SiriKitReliabilityCodes.rawValue.getter();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v47);
    }
  }
  else
  {
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E4FA1A00], v2);
    uint64_t v8 = SiriKitReliabilityCodes.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return v8;
}

uint64_t specialized TaskLoggingService.createFlowPlatformContext(entityContextTier1:)(void *a1)
{
  if (!a1) {
    return 0;
  }
  id v2 = objc_allocWithZone(MEMORY[0x1E4FA04B8]);
  uint64_t v3 = a1;
  id v4 = objc_msgSend(v2, sel_init);
  if (!v4) {
    goto LABEL_9;
  }
  uint64_t v5 = v4;
  unint64_t v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0470]), sel_init);
  if (!v6)
  {

LABEL_9:
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.instrumentation);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_1B9C64000, v10, v12, "#TaskLoggingService unable to instantiate SELF platform/entity context", v13, 2u);
      MEMORY[0x1BA9E48C0](v13, -1, -1);
    }
    uint64_t v5 = 0;
    char v7 = v3;
    goto LABEL_14;
  }
  char v7 = v6;
  id v8 = [v3 linkId];
  [v7 setLinkId:v8];

  unint64_t v9 = (unint64_t)[v3 entitiesPresentedCount];
  if ((v9 & 0x8000000000000000) == 0 && !HIDWORD(v9))
  {
    [v7 setNumberOfEntitiesShown:v9];
    objc_msgSend(v5, sel_setEntityContextValue_, v7);
    uint64_t v10 = v3;
LABEL_14:

    return (uint64_t)v5;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized TaskLoggingService.logSELFFlowTask(activityType:eventContext:eventTime:task:taskType:app:attribute:domainContext:parameterName:responseId:statusReasonDescription:statusReason:)(signed int a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, unint64_t a15)
{
  uint64_t v16 = v15;
  unint64_t v18 = a6;
  os_log_type_t v20 = a2;
  uint64_t v22 = &unk_1EB9D6000;
  if (a1 <= 3)
  {
    if (a1 == 1)
    {
      specialized TaskLoggingService.updateFlowTaskState(aceServiceInvoker:taskName:interactionId:taskId:)(a2 + 4, a5, a6, a2[12], a2[13], *(void *)(a4 + 16), *(void *)(a4 + 24));
      goto LABEL_13;
    }
    if (a1 != 2) {
      goto LABEL_13;
    }
  }
  else if ((a1 - 4) >= 2 && a1 != 128)
  {
    goto LABEL_13;
  }
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.instrumentation);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v58 = swift_slowAlloc();
    v68[0] = v58;
    *(_DWORD *)uint64_t v26 = 136315650;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a5, v18, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 12) = 2080;
    unint64_t v27 = v18;
    os_log_type_t v28 = v20;
    uint64_t v29 = v16;
    os_log_type_t type = v25;
    uint64_t v31 = *(void *)(a4 + 16);
    unint64_t v30 = *(void *)(a4 + 24);
    swift_bridgeObjectRetain();
    uint64_t v32 = v31;
    uint64_t v16 = v29;
    os_log_type_t v20 = v28;
    unint64_t v18 = v27;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v30, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    uint64_t v22 = (void *)&unk_1EB9D6000;
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 22) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1B9C64000, v24, type, "#TaskLoggingService - sending update context to reset FlowTaskState for TaskType: %s, TaskId: %s, ActivityType: %d", (uint8_t *)v26, 0x1Cu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v58, -1, -1);
    MEMORY[0x1BA9E48C0](v26, -1, -1);
  }
  else
  {

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  specialized TaskLoggingService.resetFlowTaskState(aceServiceInvoker:)(v20 + 4);
LABEL_13:
  uint64_t v33 = SiriKitEventContext.resultCandidateId.getter();
  if (v34) {
    uint64_t v35 = v33;
  }
  else {
    uint64_t v35 = 13101;
  }
  if (v34) {
    unint64_t v36 = v34;
  }
  else {
    unint64_t v36 = 0xE200000000000000;
  }
  uint64_t v37 = v20[10];
  unint64_t v38 = v20[11];
  uint64_t v39 = *(void *)(a4 + 16);
  unint64_t v40 = *(void *)(a4 + 24);
  LOBYTE(v68[0]) = 1;
  uint64_t v59 = v39;
  unint64_t v62 = v38;
  uint64_t v63 = v37;
  uint64_t v41 = TaskLoggingService.createFlowTaskSELFClientEvent(activityType:eventTime:resultCandidateId:taskType:app:appResolutionType:attribute:domainContext:executionRequestId:parameterName:platformContext:statusReason:statusReasonDescription:taskId:)(a1, a3, v35, v36, a5, v18, a7, 0x100000000, a8, a9, a10, v37, v38, a11, a12, 0, a15 | ((HIDWORD(a15) & 1) << 32), a13, a14,
          v39,
          v40);
  swift_bridgeObjectRelease();
  if (v41)
  {
    if (v22[280] != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)static Logger.instrumentation);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    swift_retain_n();
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v66 = v16;
      uint64_t v45 = swift_slowAlloc();
      uint64_t v60 = swift_slowAlloc();
      v68[0] = v60;
      *(_DWORD *)uint64_t v45 = 136315906;
      os_log_type_t v61 = v44;
      if (a1 > 0xD0)
      {
        uint64_t v47 = @"FLOWSTATETYPE_UNKNOWN";
        uint64_t v48 = @"FLOWSTATETYPE_UNKNOWN";
      }
      else
      {
        uint64_t v46 = a1;
        uint64_t v47 = off_1E61EFDB8[v46];
        uint64_t v48 = off_1E61F0440[v46];
      }
      unint64_t v50 = v47;
      uint64_t v51 = v48;
      uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v54 = v53;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v54, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v49 = v59;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v40, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 22) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a5, v18, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v45 + 32) = 2080;
      uint64_t v55 = v20[12];
      unint64_t v56 = v20[13];
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v43, v61, "#TaskLoggingService SELF Log - logging task step: %s for taskId: %s, taskType: %s, interactionId:%s", (uint8_t *)v45, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v60, -1, -1);
      MEMORY[0x1BA9E48C0](v45, -1, -1);

      uint64_t v16 = v66;
    }
    else
    {

      swift_release_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      uint64_t v49 = v59;
    }
    (*(void (**)(void *))(v16 + 96))(v41);
    TaskLoggingService.emitRequestLink(executionRequestId:taskId:)(v63, v62, v49, v40);
  }
}

uint64_t specialized TaskLoggingService.__allocating_init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:)(long long *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v26 = a7;
  uint64_t v27 = a8;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v23 = a4;
  long long v22 = a9;
  uint64_t v17 = *(void *)(a13 - 8);
  MEMORY[0x1F4188790](a12);
  uint64_t v19 = (char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a11, a13);
  return specialized TaskLoggingService.init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:)(a1, a2, a3, v23, v24, v25, v26, v27, v22, a10, (uint64_t)v19, v20, a13, a14);
}

uint64_t type metadata accessor for TaskLoggingService()
{
  return self;
}

uint64_t method lookup function for TaskLoggingService(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TaskLoggingService);
}

uint64_t dispatch thunk of TaskLoggingService.__allocating_init(biomeDonator:curareDonator:selfEmitter:tier1LinkIdSupplier:derivedIdentifierSupplier:appInformationSupplier:sensitivityManager:featureChecker:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of AppInformationProvider.resolveAppBundleId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AppInformationProvider.resolveAppVersion.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t outlined retain of SiriKitRequestEvent(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of TaskData(uint64_t a1)
{
  return a1;
}

uint64_t lazy protocol witness table accessor for type ActivityType and conformance ActivityType(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t FlowTaskProvider.init(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime);
  swift_bridgeObjectRetain();
  uint64_t v5 = dispatch thunk of FlowTaskProvider.__allocating_init(id:isClientInitiated:creationTime:)();
  swift_release();
  return v5;
}

uint64_t TaskService.currentTask.getter()
{
  swift_beginAccess();
  unint64_t v1 = *(void *)(v0 + 32);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v2 = result;
    if (!result) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v2)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      return v2;
    }
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = MEMORY[0x1BA9E3990](0, v1);
    goto LABEL_6;
  }
  if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v2 = *(void *)(v1 + 32);
    swift_retain();
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t SiriEnvironment.updateFlowTask(with:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FlowTaskMetadata?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = MEMORY[0x1F4188790](v5);
  unint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v10 = type metadata accessor for FlowTaskProvider();
    uint64_t v11 = *(void *)(a1 + 16);
    v16[1] = v10;
    v16[2] = v11;
    uint64_t v17 = v4;
    uint64_t v12 = a1 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime;
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v13(v9, a1 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime, v5);
    swift_retain();
    swift_bridgeObjectRetain();
    dispatch thunk of FlowTaskProvider.__allocating_init(id:isClientInitiated:creationTime:)();
    SiriEnvironment.flowTask.setter();
    SiriEnvironment.currentRequest.getter();
    v13(v9, v12, v5);
    swift_bridgeObjectRetain();
    uint64_t v14 = v17;
    FlowTaskMetadata.init(id:isClientInitiated:creationTime:)();
    uint64_t v15 = type metadata accessor for FlowTaskMetadata();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 0, 1, v15);
    CurrentRequest.flowTaskMetadata.setter();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t (*default argument 1 of TaskService.init(initialTask:taskIdGenerator:)())()
{
  return closure #1 in default argument 1 of TaskService.init(initialTask:taskIdGenerator:);
}

void *TaskService.__allocating_init(initialTask:taskIdGenerator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = a2;
  v6[3] = a3;
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_1BA0578E0;
    *(void *)(v7 + 32) = a1;
    uint64_t v10 = v7;
    specialized Array._endMutation()();
    uint64_t v8 = v10;
  }
  else
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
  }
  void v6[4] = v8;
  return v6;
}

Swift::Void __swiftcall TaskService.onTurnInvalidated()()
{
  swift_beginAccess();
  unint64_t v1 = *(void *)(v0 + 32);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (!v2) {
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v2)
    {
LABEL_16:
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = MEMORY[0x1BA9E3990](0, v1);
  }
  else
  {
    if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_24:
      swift_once();
      goto LABEL_12;
    }
    uint64_t v2 = *(void *)(v1 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v2 + 32) && *(unsigned char *)(v2 + 32) != 1)
  {
    swift_release();
    goto LABEL_16;
  }
  char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v3)
  {
    swift_release();
LABEL_17:
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.instrumentation);
    unint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_1B9C64000, v9, v10, "TaskService - Turn invalidated with no current non-ended task, ignoring.", v11, 2u);
      MEMORY[0x1BA9E48C0](v11, -1, -1);
    }

    return;
  }
  if (one-time initialization token for instrumentation != -1) {
    goto LABEL_24;
  }
LABEL_12:
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.instrumentation);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_1B9C64000, v5, v6, "TaskService - updating task state to .ended because turn is invalidated.", v7, 2u);
    MEMORY[0x1BA9E48C0](v7, -1, -1);
  }

  TaskService.update(task:state:)(v2, 2);
  swift_release();
  swift_release();
}

void TaskService.onExistingXPCTask(_:)(char *a1)
{
  os_log_type_t v6 = (unint64_t *)(v1 + 32);
  swift_beginAccess();
  unint64_t v7 = *(void *)(v1 + 32);
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    if (!v8) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v8)
    {
LABEL_27:
      swift_bridgeObjectRelease();
LABEL_28:
      if (one-time initialization token for instrumentation != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      __swift_project_value_buffer(v22, (uint64_t)static Logger.instrumentation);
      uint64_t v23 = a1;
      swift_retain_n();
      a1 = v23;
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v3 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled((os_log_t)v8, v3))
      {

        swift_release_n();
        return;
      }
      uint64_t v2 = swift_slowAlloc();
      uint64_t v4 = swift_slowAlloc();
      uint64_t v32 = v4;
      *(_DWORD *)uint64_t v2 = 136315394;
      unint64_t v7 = *v6;
      if (!(*v6 >> 62))
      {
        uint64_t v24 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v24)
        {
LABEL_33:
          if ((v7 & 0xC000000000000001) != 0)
          {
            MEMORY[0x1BA9E3990](0, v7);
            goto LABEL_36;
          }
          if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            swift_retain();
LABEL_36:
            swift_bridgeObjectRelease();
            uint64_t v25 = FlowTask.description.getter();
            unint64_t v27 = v26;
            swift_release();
LABEL_42:
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, (uint64_t *)&v32);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v2 + 12) = 2080;
            uint64_t v28 = *(void *)&a1[OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_id];
            unint64_t v29 = *(void *)&a1[OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_id + 8];
            swift_bridgeObjectRetain();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, (uint64_t *)&v32);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1B9C64000, (os_log_t)v8, v3, "TaskService - Current task is %s; don't adopt from XPC: %s)",
              (uint8_t *)v2,
              0x16u);
            swift_arrayDestroy();
            MEMORY[0x1BA9E48C0](v4, -1, -1);
            MEMORY[0x1BA9E48C0](v2, -1, -1);

            return;
          }
          __break(1u);
          goto LABEL_45;
        }
LABEL_41:
        swift_bridgeObjectRelease();
        unint64_t v27 = 0xE500000000000000;
        uint64_t v25 = 0x3E4C494E3CLL;
        goto LABEL_42;
      }
LABEL_40:
      swift_bridgeObjectRetain();
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_33;
      }
      goto LABEL_41;
    }
  }
  if ((v7 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = MEMORY[0x1BA9E3990](0, v7);
  }
  else
  {
    if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_40;
    }
    uint64_t v8 = *(void *)(v7 + 32);
    swift_retain();
  }
  uint64_t v2 = 0x64657461657263;
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v8 + 32) && *(unsigned char *)(v8 + 32) != 1)
  {
    swift_release();
    goto LABEL_27;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v9)
  {
    swift_release();
    goto LABEL_28;
  }
  if (one-time initialization token for instrumentation != -1) {
LABEL_45:
  }
    swift_once();
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.instrumentation);
  swift_retain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    uint64_t v32 = v30;
    *(_DWORD *)uint64_t v13 = 136315394;
    uint64_t v14 = *(void *)(v8 + 16);
    unint64_t v15 = *(void *)(v8 + 24);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, (uint64_t *)&v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 12) = 2080;
    if (*(unsigned char *)(v8 + 32))
    {
      if (*(unsigned char *)(v8 + 32) == 1)
      {
        unint64_t v16 = 0xE700000000000000;
        uint64_t v2 = 0x676E696F676E6FLL;
      }
      else
      {
        unint64_t v16 = 0xE500000000000000;
        uint64_t v2 = 0x6465646E65;
      }
    }
    else
    {
      unint64_t v16 = 0xE700000000000000;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v16, (uint64_t *)&v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v11, v12, "TaskService - Task %s has state %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v30, -1, -1);
    MEMORY[0x1BA9E48C0](v13, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  if ((TaskService.hasLastXPCTaskEnded(flowTaskXPC:)(a1) & 1) == 0)
  {
    uint64_t v17 = a1;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 138412290;
      uint64_t v32 = v17;
      os_log_type_t v21 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v31 = v17;

      _os_log_impl(&dword_1B9C64000, v18, v19, "TaskService - begin adopting existing task from XPC: %@", v20, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v31, -1, -1);
      MEMORY[0x1BA9E48C0](v20, -1, -1);
    }
    else
    {

      uint64_t v18 = v17;
    }

    TaskService.addNewTask(id:state:isClientInitiated:creationTime:)(*(uint64_t *)((char *)&v17->isa + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_id), *(uint64_t *)((char *)&v17[1].isa + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_id), *((unsigned __int8 *)&v17->isa + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_state), *((unsigned __int8 *)&v17->isa + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_isClientInitiated), (uint64_t)v17 + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_creationTime);
  }
  swift_release();
}

uint64_t TaskService.update(task:state:)(uint64_t a1, char a2)
{
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v9)
  {
LABEL_25:
    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.instrumentation);
    swift_retain_n();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      v52[0] = v21;
      *(_DWORD *)uint64_t v20 = 136315138;
      swift_retain();
      uint64_t v22 = FlowTask.description.getter();
      unint64_t v24 = v23;
      swift_release();
      v50[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v18, v19, "TaskService - Illegal attempt to update task: %s as created", v20, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v21, -1, -1);
      MEMORY[0x1BA9E48C0](v20, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    goto LABEL_31;
  }
  int v10 = *(unsigned __int8 *)(a1 + 32);
  if (v10 == 1) {
    uint64_t v11 = 0x676E696F676E6FLL;
  }
  else {
    uint64_t v11 = 0x6465646E65;
  }
  if (v10 == 1) {
    unint64_t v12 = 0xE700000000000000;
  }
  else {
    unint64_t v12 = 0xE500000000000000;
  }
  if (*(unsigned char *)(a1 + 32)) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = 0x64657461657263;
  }
  if (*(unsigned char *)(a1 + 32)) {
    unint64_t v14 = v12;
  }
  else {
    unint64_t v14 = 0xE700000000000000;
  }
  if (a2 == 2) {
    uint64_t v15 = 0x6465646E65;
  }
  else {
    uint64_t v15 = 0x676E696F676E6FLL;
  }
  if (a2 == 2) {
    unint64_t v16 = 0xE500000000000000;
  }
  else {
    unint64_t v16 = 0xE700000000000000;
  }
  if (v13 != v15 || v14 != v16)
  {
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v25) {
      goto LABEL_31;
    }
    uint64_t v28 = *(void *)(a1 + 16);
    uint64_t v27 = *(void *)(a1 + 24);
    char v29 = *(unsigned char *)(a1 + 33);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime, v5);
    type metadata accessor for FlowTask(0);
    a1 = swift_allocObject();
    *(void *)(a1 + 16) = v28;
    *(void *)(a1 + 24) = v27;
    *(unsigned char *)(a1 + 32) = a2;
    *(unsigned char *)(a1 + 33) = v29;
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a1 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime, v8, v5);
    uint64_t v30 = (uint64_t *)(v2 + 32);
    swift_beginAccess();
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t v31 = swift_bridgeObjectRetain();
    unint64_t v32 = specialized Collection.firstIndex(where:)(v31, a1);
    char v34 = v33;
    swift_bridgeObjectRelease();
    swift_release();
    if (v34)
    {
      if (one-time initialization token for instrumentation != -1) {
        swift_once();
      }
      uint64_t v46 = type metadata accessor for Logger();
      __swift_project_value_buffer(v46, (uint64_t)static Logger.instrumentation);
      swift_retain_n();
      unint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v38, v39))
      {
        unint64_t v40 = (uint8_t *)swift_slowAlloc();
        uint64_t v41 = swift_slowAlloc();
        v50[0] = v41;
        *(_DWORD *)unint64_t v40 = 136315138;
        swift_retain();
        uint64_t v47 = FlowTask.description.getter();
        unint64_t v49 = v48;
        swift_release();
        uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        uint64_t v45 = "TaskService - Returning unmanaged task: %s";
        goto LABEL_47;
      }
LABEL_48:

      swift_release_n();
      return a1;
    }
    swift_beginAccess();
    uint64_t v35 = *v30;
    swift_retain();
    int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
    *uint64_t v30 = v35;
    if (!isUniquelyReferenced_nonNull_bridgeObject || v35 < 0 || (v35 & 0x4000000000000000) != 0)
    {
      uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew()(v35);
      *uint64_t v30 = v35;
    }
    if ((v32 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (v32 < *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 8 * v32 + 0x20) = a1;
      swift_release();
      specialized Array._endMutation()();
      swift_endAccess();
      if (one-time initialization token for instrumentation == -1) {
        goto LABEL_41;
      }
      goto LABEL_51;
    }
    __break(1u);
LABEL_51:
    swift_once();
LABEL_41:
    uint64_t v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.instrumentation);
    swift_retain_n();
    unint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      unint64_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v41 = swift_slowAlloc();
      v50[0] = v41;
      *(_DWORD *)unint64_t v40 = 136315138;
      swift_retain();
      uint64_t v42 = FlowTask.description.getter();
      unint64_t v44 = v43;
      swift_release();
      uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v44, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      uint64_t v45 = "TaskService - Updated managed task: %s";
LABEL_47:
      _os_log_impl(&dword_1B9C64000, v38, v39, v45, v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v41, -1, -1);
      MEMORY[0x1BA9E48C0](v40, -1, -1);

      return a1;
    }
    goto LABEL_48;
  }
  swift_bridgeObjectRelease_n();
LABEL_31:
  swift_retain();
  return a1;
}

uint64_t FlowTask.__allocating_init(id:state:isClientInitiated:creationTime:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(unsigned char *)(v10 + 32) = a3;
  *(unsigned char *)(v10 + 33) = a4;
  uint64_t v11 = v10 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime;
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v11, a5, v12);
  return v10;
}

uint64_t FlowTask.State.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x64657461657263;
  }
  if (a1 == 1) {
    return 0x676E696F676E6FLL;
  }
  return 0x6465646E65;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FlowTask.State(unsigned char *a1, unsigned char *a2)
{
  int v2 = *a1;
  unint64_t v3 = 0xE700000000000000;
  unint64_t v4 = 0xE700000000000000;
  uint64_t v5 = 0x676E696F676E6FLL;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6465646E65;
    unint64_t v4 = 0xE500000000000000;
  }
  if (*a1) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0x64657461657263;
  }
  if (v2) {
    unint64_t v7 = v4;
  }
  else {
    unint64_t v7 = 0xE700000000000000;
  }
  uint64_t v8 = 0x676E696F676E6FLL;
  if (*a2 != 1)
  {
    uint64_t v8 = 0x6465646E65;
    unint64_t v3 = 0xE500000000000000;
  }
  if (*a2) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0x64657461657263;
  }
  if (*a2) {
    unint64_t v10 = v3;
  }
  else {
    unint64_t v10 = 0xE700000000000000;
  }
  if (v6 == v9 && v7 == v10) {
    char v11 = 1;
  }
  else {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FlowTask.State()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FlowTask.State()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FlowTask.State()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FlowTask.State@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized FlowTask.State.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance FlowTask.State(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE700000000000000;
  unint64_t v4 = 0xE700000000000000;
  uint64_t v5 = 0x676E696F676E6FLL;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6465646E65;
    unint64_t v4 = 0xE500000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x64657461657263;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t FlowTask.id.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FlowTask.state.getter()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t FlowTask.isClientInitiated.getter()
{
  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t FlowTask.creationTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t FlowTask.init(id:state:isClientInitiated:creationTime:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  *(unsigned char *)(v5 + 32) = a3;
  *(unsigned char *)(v5 + 33) = a4;
  uint64_t v7 = v5 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime;
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7, a5, v8);
  return v5;
}

id FlowTaskXPC.__allocating_init(id:state:isClientInitiated:creationTime:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5)
{
  char v11 = objc_allocWithZone(v5);
  uint64_t v12 = &v11[OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_id];
  *uint64_t v12 = a1;
  v12[1] = a2;
  v11[OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_state] = a3;
  v11[OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_isClientInitiated] = a4;
  uint64_t v13 = &v11[OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_creationTime];
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v13, a5, v14);
  v18.receiver = v11;
  v18.super_class = v5;
  id v16 = objc_msgSendSuper2(&v18, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a5, v14);
  return v16;
}

uint64_t FlowTask.deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime;
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t FlowTask.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime;
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FlowTask()
{
  return FlowTask.description.getter();
}

id protocol witness for XPCConvertible.xpcRepresentation.getter in conformance FlowTask()
{
  return FlowTask.xpcRepresentation.getter();
}

uint64_t FlowTaskXPC.id.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_id);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FlowTaskXPC.state.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_state);
}

uint64_t FlowTaskXPC.isClientInitiated.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_isClientInitiated);
}

uint64_t FlowTaskXPC.creationTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_creationTime;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

void *FlowTaskXPC.supportsSecureCoding.unsafeMutableAddressor()
{
  return &static FlowTaskXPC.supportsSecureCoding;
}

uint64_t static FlowTaskXPC.supportsSecureCoding.getter()
{
  return 1;
}

id FlowTaskXPC.init(id:state:isClientInitiated:creationTime:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5)
{
  uint64_t v7 = &v5[OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_id];
  *uint64_t v7 = a1;
  v7[1] = a2;
  v5[OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_state] = a3;
  v5[OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_isClientInitiated] = a4;
  uint64_t v8 = &v5[OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_creationTime];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v8, a5, v9);
  v13.receiver = v5;
  v13.super_class = (Class)type metadata accessor for FlowTaskXPC(0);
  id v11 = objc_msgSendSuper2(&v13, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a5, v9);
  return v11;
}

uint64_t FlowTaskXPC.swiftRepresentation()()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_id);
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_id + 8);
  char v7 = *(unsigned char *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_state);
  char v8 = *(unsigned char *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_isClientInitiated);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0 + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_creationTime, v1);
  type metadata accessor for FlowTask(0);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v6;
  *(void *)(v9 + 24) = v5;
  *(unsigned char *)(v9 + 32) = v7;
  *(unsigned char *)(v9 + 33) = v8;
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v9 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime, v4, v1);
  swift_bridgeObjectRetain();
  return v9;
}

unint64_t FlowTaskXPC.CodingKeys.rawValue.getter(char a1)
{
  unint64_t result = 25705;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6574617473;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0x6E6F697461657263;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t FlowTaskXPC.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return FlowTaskXPC.init(coder:)(a1);
}

uint64_t FlowTaskXPC.init(coder:)(void *a1)
{
  uint64_t v3 = type metadata accessor for Date();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  id v6 = v1;
  uint64_t v7 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v7)
  {

    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.instrumentation);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      unint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v32 = 0;
      _os_log_impl(&dword_1B9C64000, v30, v31, "Error decoding FlowTaskXPC: Missing id", v32, 2u);
      MEMORY[0x1BA9E48C0](v32, -1, -1);
    }
    goto LABEL_31;
  }
  char v8 = (void *)v7;
  uint64_t v9 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v9)
  {

    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.instrumentation);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v34))
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl(&dword_1B9C64000, v30, v34, "Error decoding FlowTaskXPC: Missing state", v35, 2u);
      MEMORY[0x1BA9E48C0](v35, -1, -1);
LABEL_30:

      goto LABEL_31;
    }

LABEL_32:
    swift_getObjectType();
    swift_deallocPartialClassInstance();
    return 0;
  }
  uint64_t v10 = (void *)v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  objc_super v13 = v12;
  v14._uint64_t countAndFlagsBits = v11;
  v14._object = v13;
  unint64_t v15 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of FlowTask.State.init(rawValue:), v14);
  swift_bridgeObjectRelease();
  if (v15 >= 3)
  {

    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.instrumentation);
    id v37 = v10;
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v38))
    {
      os_log_type_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      uint64_t v52 = v40;
      id v50 = v8;
      *(_DWORD *)os_log_type_t v39 = 136315138;
      uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v30, v38, "Error decoding FlowTaskXPC: Invalid value for state: %s", v39, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v40, -1, -1);
      MEMORY[0x1BA9E48C0](v39, -1, -1);

LABEL_31:
      goto LABEL_32;
    }

    goto LABEL_32;
  }
  id v16 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000011, 0x80000001BA0615C0);
  unsigned int v17 = objc_msgSend(a1, sel_containsValueForKey_, v16);

  if (!v17)
  {

    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)static Logger.instrumentation);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      uint64_t v46 = "Error decoding FlowTaskXPC: Missing isClientInitiated";
LABEL_29:
      _os_log_impl(&dword_1B9C64000, v30, v44, v46, v45, 2u);
      MEMORY[0x1BA9E48C0](v45, -1, -1);

      goto LABEL_30;
    }
LABEL_34:

    goto LABEL_32;
  }
  objc_super v18 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000011, 0x80000001BA0615C0);
  unsigned int v19 = objc_msgSend(a1, sel_decodeBoolForKey_, v18);

  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSDate);
  uint64_t v20 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v20)
  {

    if (one-time initialization token for instrumentation != -1) {
      swift_once();
    }
    uint64_t v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static Logger.instrumentation);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      uint64_t v46 = "Error decoding FlowTaskXPC: Missing creationTime";
      goto LABEL_29;
    }
    goto LABEL_34;
  }
  uint64_t v21 = (void *)v20;
  uint64_t ObjectType = swift_getObjectType();
  LODWORD(v50) = v19;
  unint64_t v23 = v8;
  uint64_t v24 = ObjectType;

  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, void, char *))(v24 + 112))(v25, v27, v15, v50, v5);

  swift_deallocPartialClassInstance();
  return v28;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FlowTaskXPC.CodingKeys(unsigned __int8 *a1, unsigned char *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xE200000000000000;
  unint64_t v4 = 25705;
  switch(v2)
  {
    case 1:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v4 = 0x6574617473;
      break;
    case 2:
      unint64_t v3 = 0x80000001BA0615C0;
      unint64_t v4 = 0xD000000000000011;
      break;
    case 3:
      unint64_t v4 = 0x6E6F697461657263;
      unint64_t v3 = 0xEC000000656D6954;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE200000000000000;
  unint64_t v6 = 25705;
  switch(*a2)
  {
    case 1:
      unint64_t v5 = 0xE500000000000000;
      if (v4 == 0x6574617473) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v5 = 0x80000001BA0615C0;
      unint64_t v6 = 0xD000000000000011;
      goto LABEL_9;
    case 3:
      unint64_t v5 = 0xEC000000656D6954;
      if (v4 == 0x6E6F697461657263) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v4 != v6) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FlowTaskXPC.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FlowTaskXPC.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FlowTaskXPC.CodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FlowTaskXPC.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized FlowTaskXPC.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance FlowTaskXPC.CodingKeys(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE200000000000000;
  uint64_t v3 = 25705;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x6574617473;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0xD000000000000011;
      *(void *)(a1 + 8) = 0x80000001BA0615C0;
      break;
    case 3:
      strcpy((char *)a1, "creationTime");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t FlowTaskXPC.description.getter()
{
  v14[8] = 0;
  _StringGuts.grow(_:)(71);
  v1._object = (void *)0x80000001BA0713A0;
  v1._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v1);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_id);
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_id + 8);
  swift_bridgeObjectRetain();
  v4._uint64_t countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = 0x3A6574617473202CLL;
  v5._object = (void *)0xE900000000000020;
  String.append(_:)(v5);
  *(void *)Swift::String v14 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_state);
  _print_unlocked<A, B>(_:_:)();
  v6._uint64_t countAndFlagsBits = 0xD000000000000015;
  v6._object = (void *)0x80000001BA071360;
  String.append(_:)(v6);
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_isClientInitiated)) {
    uint64_t v7 = 1702195828;
  }
  else {
    uint64_t v7 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_isClientInitiated)) {
    unint64_t v8 = 0xE400000000000000;
  }
  else {
    unint64_t v8 = 0xE500000000000000;
  }
  unint64_t v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x80000001BA071380;
  v10._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v10);
  type metadata accessor for Date();
  lazy protocol witness table accessor for type Date and conformance Date();
  v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 125;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return *(void *)&v14[1];
}

id FlowTaskXPC.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void FlowTaskXPC.init()()
{
}

id FlowTaskXPC.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FlowTaskXPC(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for XPCRepresentation.swiftRepresentation() in conformance FlowTaskXPC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x78))();
  if (!v2) {
    *a1 = result;
  }
  return result;
}

void *TaskService.maxTasksCount.unsafeMutableAddressor()
{
  return &static TaskService.maxTasksCount;
}

uint64_t static TaskService.maxTasksCount.getter()
{
  return 16;
}

void *TaskService.currentTaskIndex.unsafeMutableAddressor()
{
  return &static TaskService.currentTaskIndex;
}

uint64_t static TaskService.currentTaskIndex.getter()
{
  return 0;
}

void *TaskService.lastTaskIndex.unsafeMutableAddressor()
{
  return &static TaskService.lastTaskIndex;
}

uint64_t static TaskService.lastTaskIndex.getter()
{
  return 1;
}

uint64_t TaskService.tasksCount.getter()
{
  swift_beginAccess();
  unint64_t v1 = *(void *)(v0 + 32);
  if (!(v1 >> 62)) {
    return *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t TaskService.taskQueue.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t closure #1 in default argument 1 of TaskService.init(initialTask:taskIdGenerator:)()
{
  uint64_t v0 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v4 = UUID.uuidString.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t TaskService.init(initialTask:taskIdGenerator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  *(void *)(v3 + 16) = a2;
  *(void *)(v3 + 24) = a3;
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_1BA0578E0;
    *(void *)(v6 + 32) = a1;
    uint64_t v9 = v6;
    specialized Array._endMutation()();
    uint64_t v7 = v9;
  }
  else
  {
    uint64_t v7 = MEMORY[0x1E4FBC860];
  }
  *(void *)(v4 + 32) = v7;
  return v4;
}

void TaskService.addNewTask(id:state:isClientInitiated:creationTime:)(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v6 = v5;
  int v34 = a3;
  int v35 = a4;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  objc_super v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v14 = (void *)(v5 + 32);
  uint64_t v15 = swift_beginAccess();
  unint64_t v16 = *(void *)(v5 + 32);
  if (!(v16 >> 62))
  {
    if (*(uint64_t *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) < 16) {
      goto LABEL_10;
    }
LABEL_3:
    swift_beginAccess();
    if (*v14 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v32)
      {
LABEL_5:
        if (specialized Array._customRemoveLast()())
        {
LABEL_9:
          swift_endAccess();
          uint64_t v15 = swift_release();
          goto LABEL_10;
        }
        if (!(*v14 >> 62))
        {
          uint64_t v17 = *(void *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
          unint64_t v18 = v17 - 1;
          if (!__OFSUB__(v17, 1))
          {
LABEL_8:
            specialized Array.remove(at:)(v18);
            goto LABEL_9;
          }
LABEL_28:
          __break(1u);
          return;
        }
LABEL_26:
        swift_bridgeObjectRetain();
        uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        unint64_t v18 = v33 - 1;
        if (!__OFSUB__(v33, 1)) {
          goto LABEL_8;
        }
        goto LABEL_28;
      }
    }
    else if (*(void *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v15 = swift_bridgeObjectRelease();
  if (v30 >= 16) {
    goto LABEL_3;
  }
LABEL_10:
  if (a2)
  {
    uint64_t v19 = a2;
  }
  else
  {
    a1 = (*(uint64_t (**)(uint64_t))(v6 + 16))(v15);
    uint64_t v19 = v20;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a5, v10);
  type metadata accessor for FlowTask(0);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a1;
  *(void *)(v21 + 24) = v19;
  *(unsigned char *)(v21 + 32) = v34;
  *(unsigned char *)(v21 + 33) = v35 & 1;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v21 + OBJC_IVAR____TtC14SiriKitRuntime8FlowTask_creationTime, v13, v10);
  swift_beginAccess();
  if (!(*v14 >> 62))
  {
    swift_bridgeObjectRetain();
    swift_retain();
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if ((v31 & 0x8000000000000000) == 0)
  {
LABEL_15:
    specialized Array.replaceSubrange<A>(_:with:)(0, 0, v21);
    swift_endAccess();
    if (one-time initialization token for instrumentation == -1) {
      goto LABEL_16;
    }
    goto LABEL_23;
  }
  __break(1u);
LABEL_23:
  swift_once();
LABEL_16:
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.instrumentation);
  swift_retain_n();
  unint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    v37[0] = v26;
    *(_DWORD *)uint64_t v25 = 136315138;
    swift_retain();
    uint64_t v27 = FlowTask.description.getter();
    unint64_t v29 = v28;
    swift_release();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v23, v24, "TaskService - Added new task: %s", v25, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v26, -1, -1);
    MEMORY[0x1BA9E48C0](v25, -1, -1);
    swift_release();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t TaskService.hasLastXPCTaskEnded(flowTaskXPC:)(void *a1)
{
  uint64_t v2 = v1;
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.instrumentation);
  uint64_t v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    unint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v8 = 138412290;
    uint64_t v43 = v5;
    uint64_t v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v9 = v5;

    _os_log_impl(&dword_1B9C64000, v6, v7, "TaskService - handling XPC task ending for flowTaskXPC: %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v9, -1, -1);
    MEMORY[0x1BA9E48C0](v8, -1, -1);
  }
  else
  {
  }
  uint64_t v11 = (uint64_t *)(v2 + 32);
  swift_beginAccess();
  unint64_t v12 = *(void *)(v2 + 32);
  if (!(v12 >> 62))
  {
    if (*(uint64_t *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2) {
      goto LABEL_8;
    }
LABEL_14:
    swift_retain_n();
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      v41[0] = v19;
      *(_DWORD *)unint64_t v18 = 136315138;
      uint64_t v20 = type metadata accessor for FlowTask(0);
      uint64_t v21 = swift_bridgeObjectRetain();
      uint64_t v22 = MEMORY[0x1BA9E3080](v21, v20);
      unint64_t v24 = v23;
      swift_bridgeObjectRelease();
      uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1B9C64000, v16, v17, "TaskService - not able to identify previous task for end/terminal state for managed tasks: %s", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v19, -1, -1);
      MEMORY[0x1BA9E48C0](v18, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    char v25 = 0;
    return v25 & 1;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v15 < 2) {
    goto LABEL_14;
  }
LABEL_8:
  swift_beginAccess();
  uint64_t v13 = *v11;
  if ((*v11 & 0xC000000000000001) != 0)
  {
    LOBYTE(v2) = 1;
    uint64_t v26 = MEMORY[0x1BA9E3990](1);
    swift_endAccess();
    unsigned int v27 = *(unsigned __int8 *)(v26 + 32);
    swift_unknownObjectRelease();
    if (v27 >= 2) {
      goto LABEL_20;
    }
  }
  else
  {
    if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) < 2uLL)
    {
      __break(1u);
      goto LABEL_35;
    }
    uint64_t v14 = *(void *)(v13 + 40);
    swift_endAccess();
    if (*(unsigned char *)(v14 + 32) && *(unsigned char *)(v14 + 32) != 1)
    {
      LOBYTE(v2) = 1;
      goto LABEL_20;
    }
  }
  LOBYTE(v2) = _stringCompareWithSmolCheck(_:_:expecting:)();
LABEL_20:
  swift_bridgeObjectRelease();
  uint64_t result = swift_beginAccess();
  uint64_t v29 = *v11;
  if ((*v11 & 0xC000000000000001) != 0)
  {
LABEL_35:
    uint64_t v30 = MEMORY[0x1BA9E3990](1);
    goto LABEL_23;
  }
  if (*(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
  {
    uint64_t v30 = *(void *)(v29 + 40);
    swift_retain();
LABEL_23:
    swift_endAccess();
    uint64_t v32 = *(void *)(v30 + 16);
    unint64_t v31 = *(void *)(v30 + 24);
    swift_bridgeObjectRetain_n();
    swift_release();
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      v41[0] = v36;
      *(_DWORD *)uint64_t v35 = 67109378;
      LODWORD(v42) = v2 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v35 + 8) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v31, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1B9C64000, v33, v34, "TaskService - previous task .ended state is %{BOOL}d; previous taskId %s",
        (uint8_t *)v35,
        0x12u);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v36, -1, -1);
      MEMORY[0x1BA9E48C0](v35, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    if (v32 == *(void *)&v5[OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_id]
      && v31 == *(void *)&v5[OBJC_IVAR____TtC14SiriKitRuntime11FlowTaskXPC_id + 8])
    {
      char v37 = 1;
    }
    else
    {
      char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    os_log_type_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 67109120;
      LODWORD(v41[0]) = v37 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v38, v39, "TaskService - previous task same taskId as xpc one - %{BOOL}d", v40, 8u);
      MEMORY[0x1BA9E48C0](v40, -1, -1);
    }

    char v25 = v2 & v37;
    return v25 & 1;
  }
  __break(1u);
  return result;
}

uint64_t TaskService.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TaskService.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FlowTask(uint64_t a1)
{
  return type metadata accessor for CombiningAffinityScorer(a1, (uint64_t *)&type metadata singleton initialization cache for FlowTask);
}

uint64_t specialized Array._customRemoveLast()()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v0 = v1;
  if (!result || v1 < 0 || (v1 & 0x4000000000000000) != 0)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    uint64_t v1 = result;
    uint64_t *v0 = result;
  }
  uint64_t v3 = v1 & 0xFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    uint64_t v5 = v4 - 1;
    uint64_t v6 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x20);
    *(void *)(v3 + 16) = v5;
    specialized Array._endMutation()();
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t specialized FlowTask.State.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of FlowTask.State.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

unint64_t specialized FlowTaskXPC.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of FlowTaskXPC.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type FlowTask.State and conformance FlowTask.State()
{
  unint64_t result = lazy protocol witness table cache variable for type FlowTask.State and conformance FlowTask.State;
  if (!lazy protocol witness table cache variable for type FlowTask.State and conformance FlowTask.State)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlowTask.State and conformance FlowTask.State);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FlowTaskXPC.CodingKeys and conformance FlowTaskXPC.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type FlowTaskXPC.CodingKeys and conformance FlowTaskXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type FlowTaskXPC.CodingKeys and conformance FlowTaskXPC.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlowTaskXPC.CodingKeys and conformance FlowTaskXPC.CodingKeys);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for XPCRepresentation.SwiftRepresentation : XPCConvertible in FlowTaskXPC()
{
  return &protocol witness table for FlowTask;
}

uint64_t ObjC metadata update function for FlowTask()
{
  return type metadata accessor for FlowTask(0);
}

uint64_t method lookup function for FlowTask(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for FlowTask);
}

uint64_t dispatch thunk of FlowTask.__allocating_init(id:state:isClientInitiated:creationTime:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

unsigned char *storeEnumTagSinglePayload for FlowTask.State(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1BA035BF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FlowTask.State()
{
  return &type metadata for FlowTask.State;
}

uint64_t ObjC metadata update function for FlowTaskXPC()
{
  return type metadata accessor for FlowTaskXPC(0);
}

uint64_t type metadata completion function for FlowTask()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for FlowTaskXPC(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for FlowTaskXPC);
}

uint64_t dispatch thunk of FlowTaskXPC.__allocating_init(id:state:isClientInitiated:creationTime:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of FlowTaskXPC.swiftRepresentation()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of FlowTaskXPC.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of FlowTaskXPC.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

unsigned char *storeEnumTagSinglePayload for FlowTaskXPC.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1BA035E70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FlowTaskXPC.CodingKeys()
{
  return &type metadata for FlowTaskXPC.CodingKeys;
}

uint64_t type metadata accessor for TaskService()
{
  return self;
}

uint64_t method lookup function for TaskService(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TaskService);
}

uint64_t dispatch thunk of TaskService.__allocating_init(initialTask:taskIdGenerator:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

SiriKitRuntime::TimerAffinityScorer __swiftcall TimerAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA062BE0;
  uint64_t v1 = 0xD000000000000026;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

uint64_t *TimerAffinityScorer.kAppBundleIdMatches.unsafeMutableAddressor()
{
  if (one-time initialization token for kAppBundleIdMatches != -1) {
    swift_once();
  }
  return &static TimerAffinityScorer.kAppBundleIdMatches;
}

uint64_t static TimerAffinityScorer.kAppBundleIdMatches.getter()
{
  if (one-time initialization token for kAppBundleIdMatches != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t TimerAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t specialized TimerAffinityScorer.supportedAppIsOnScreen(with:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRDataSourceMetadataValue?);
  MEMORY[0x1F4188790](v2 - 8);
  unsigned int v4 = (char *)v161 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for RRMetadata();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v161 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  char v215 = (char *)v161 - v10;
  uint64_t v213 = type metadata accessor for RRDataSourceMetadataValue();
  uint64_t v11 = *(void *)(v213 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v213);
  uint64_t v165 = (char *)v161 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v176 = (char *)v161 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  v206 = (char *)v161 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v190 = (char *)v161 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v189 = (char *)v161 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v178 = (char *)v161 - v23;
  MEMORY[0x1F4188790](v22);
  v185 = (char *)v161 - v24;
  uint64_t v211 = type metadata accessor for UsoIdentifier();
  uint64_t v25 = *(void *)(v211 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v211);
  v199 = (char *)v161 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v208 = (char *)v161 - v29;
  MEMORY[0x1F4188790](v28);
  uint64_t v214 = (char *)v161 - v30;
  uint64_t v183 = type metadata accessor for RREntity();
  uint64_t v31 = *(void *)(v183 - 8);
  uint64_t v32 = MEMORY[0x1F4188790](v183);
  uint64_t v174 = (char *)v161 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  long long v175 = (char *)v161 - v34;
  uint64_t v180 = type metadata accessor for RRCandidate();
  MEMORY[0x1F4188790](v180);
  uint64_t v187 = (char *)v161 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v173 = *(void *)(a1 + 16);
  if (!v173) {
    return 0;
  }
  uint64_t v37 = v35;
  uint64_t v171 = type metadata accessor for UsoEntity_common_App();
  os_log_type_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 16);
  v37 += 16;
  uint64_t v170 = v38;
  uint64_t v169 = a1 + ((*(unsigned __int8 *)(v37 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 64));
  uint64_t v182 = (void (**)(char *, uint64_t))(v31 + 8);
  uint64_t v210 = v25 + 16;
  v192 = (void (**)(char *, uint64_t))(v25 + 8);
  uint64_t v194 = v25;
  uint64_t v198 = (uint64_t (**)(char *, char *, uint64_t))(v25 + 32);
  uint64_t v205 = v6 + 16;
  v204 = (uint64_t (**)(char *, uint64_t))(v6 + 88);
  int v203 = *MEMORY[0x1E4FA3DB0];
  char v201 = (void (**)(char *, uint64_t))(v6 + 8);
  char v200 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v188 = (void (**)(char *, uint64_t))(v6 + 96);
  os_log_type_t v212 = (void (**)(char *, char *, uint64_t))(v11 + 32);
  v202 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  unsigned int v166 = *MEMORY[0x1E4FA3DE0];
  uint64_t v177 = (void (**)(char *, void, uint64_t))(v11 + 104);
  uint64_t v184 = v11 + 16;
  uint64_t v191 = v11;
  v186 = (void (**)(char *, uint64_t))(v11 + 8);
  unsigned int v162 = *MEMORY[0x1E4FA3DD0];
  uint64_t v167 = (void (**)(char *, uint64_t))(v37 - 8);
  uint64_t v172 = v37;
  uint64_t v168 = *(void *)(v37 + 56);
  v161[1] = a1;
  swift_bridgeObjectRetain();
  uint64_t v39 = 0;
  v216 = v4;
  uint64_t v197 = v5;
  uint64_t v196 = v6;
  v209 = v9;
  uint64_t v40 = v211;
  while (1)
  {
    uint64_t v179 = v39;
    v170(v187, v169 + v168 * v39, v180);
    uint64_t v41 = v175;
    RRCandidate.entity.getter();
    RREntity.usoEntity.getter();
    uint64_t v181 = *v182;
    v181(v41, v183);
    static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)();
    swift_release();
    uint64_t v42 = v217;
    if (!v217)
    {
      uint64_t v102 = (uint64_t)v216;
      goto LABEL_67;
    }
    swift_retain();
    uint64_t v43 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
    uint64_t result = swift_release();
    uint64_t v45 = MEMORY[0x1E4FBC860];
    uint64_t v218 = MEMORY[0x1E4FBC860];
    unint64_t v195 = *(void *)(v43 + 16);
    if (v195)
    {
      uint64_t v164 = v42;
      unint64_t v46 = 0;
      uint64_t v47 = v194;
      unint64_t v193 = v43;
      while (1)
      {
        if (v46 >= *(void *)(v43 + 16))
        {
          __break(1u);
          goto LABEL_121;
        }
        uint64_t v50 = *(void *)(v47 + 72);
        unint64_t v207 = (*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
        unint64_t v51 = v43 + v207 + v50 * v46;
        uint64_t v52 = *(void (**)(char *, unint64_t, uint64_t))(v47 + 16);
        v52(v214, v51, v40);
        if (one-time initialization token for kAppBundleIdMatches != -1) {
          swift_once();
        }
        uint64_t v53 = static TimerAffinityScorer.kAppBundleIdMatches;
        uint64_t v54 = UsoIdentifier.appBundleId.getter();
        uint64_t v56 = v55;
        if (*(void *)(v53 + 16))
        {
          uint64_t v57 = v54;
          Hasher.init(_seed:)();
          String.hash(into:)();
          Swift::Int v58 = Hasher._finalize()();
          uint64_t v59 = -1 << *(unsigned char *)(v53 + 32);
          unint64_t v60 = v58 & ~v59;
          uint64_t v61 = v53 + 56;
          if ((*(void *)(v53 + 56 + ((v60 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v60))
          {
            uint64_t v62 = *(void *)(v53 + 48);
            uint64_t v63 = (void *)(v62 + 16 * v60);
            BOOL v64 = *v63 == v57 && v63[1] == v56;
            if (v64 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
LABEL_27:
              swift_bridgeObjectRelease();
              uint64_t v70 = v208;
              uint64_t v71 = v214;
              uint64_t v72 = v211;
              v52(v208, (unint64_t)v214, v211);
              uint64_t v5 = v197;
LABEL_50:
              (*v192)(v70, v72);
              unint64_t v93 = *v198;
              (*v198)(v199, v71, v72);
              uint64_t v94 = v218;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v94 + 16) + 1, 1);
                uint64_t v94 = v218;
              }
              uint64_t v49 = (uint64_t)v216;
              uint64_t v6 = v196;
              uint64_t v43 = v193;
              unint64_t v96 = *(void *)(v94 + 16);
              unint64_t v95 = *(void *)(v94 + 24);
              if (v96 >= v95 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v95 > 1, v96 + 1, 1);
                uint64_t v94 = v218;
              }
              *(void *)(v94 + 16) = v96 + 1;
              unint64_t v97 = v94 + v207 + v96 * v50;
              uint64_t v40 = v211;
              uint64_t result = v93((char *)v97, v199, v211);
              uint64_t v218 = v94;
              goto LABEL_10;
            }
            uint64_t v65 = ~v59;
            unint64_t v66 = (v60 + 1) & ~v59;
            if ((*(void *)(v61 + ((v66 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v66))
            {
              uint64_t v67 = (void *)(v62 + 16 * v66);
              if (*v67 == v57 && v67[1] == v56) {
                goto LABEL_27;
              }
              uint64_t v69 = v65;
              if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                goto LABEL_27;
              }
              for (unint64_t i = v66 + 1; ; unint64_t i = v74 + 1)
              {
                unint64_t v74 = i & v69;
                if (((*(void *)(v61 + (((i & v69) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v69)) & 1) == 0) {
                  break;
                }
                uint64_t v75 = (void *)(v62 + 16 * v74);
                BOOL v76 = *v75 == v57 && v75[1] == v56;
                if (v76 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                  goto LABEL_27;
                }
              }
            }
          }
        }
        swift_bridgeObjectRelease();
        v52(v208, (unint64_t)v214, v211);
        uint64_t v77 = static TimerAffinityScorer.kAppBundleIdMatches;
        uint64_t v78 = UsoIdentifier.value.getter();
        uint64_t v80 = v79;
        if (*(void *)(v77 + 16))
        {
          uint64_t v81 = v78;
          Hasher.init(_seed:)();
          String.hash(into:)();
          Swift::Int v82 = Hasher._finalize()();
          uint64_t v83 = -1 << *(unsigned char *)(v77 + 32);
          unint64_t v84 = v82 & ~v83;
          uint64_t v85 = v77 + 56;
          if ((*(void *)(v77 + 56 + ((v84 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v84))
          {
            uint64_t v86 = *(void *)(v77 + 48);
            uint64_t v87 = (void *)(v86 + 16 * v84);
            BOOL v88 = *v87 == v81 && v87[1] == v80;
            if (v88 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
LABEL_49:
              swift_bridgeObjectRelease();
              uint64_t v5 = v197;
              uint64_t v72 = v211;
              uint64_t v70 = v208;
              uint64_t v71 = v214;
              goto LABEL_50;
            }
            uint64_t v89 = ~v83;
            unint64_t v90 = (v84 + 1) & ~v83;
            if ((*(void *)(v85 + ((v90 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v90))
            {
              uint64_t v91 = (void *)(v86 + 16 * v90);
              BOOL v92 = *v91 == v81 && v91[1] == v80;
              if (v92 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                goto LABEL_49;
              }
              for (unint64_t j = v90 + 1; ; unint64_t j = v99 + 1)
              {
                unint64_t v99 = j & v89;
                if (((*(void *)(v85 + (((j & v89) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (j & v89)) & 1) == 0) {
                  break;
                }
                uint64_t v100 = (void *)(v86 + 16 * v99);
                BOOL v101 = *v100 == v81 && v100[1] == v80;
                if (v101 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                  goto LABEL_49;
                }
              }
            }
          }
        }
        swift_bridgeObjectRelease();
        unint64_t v48 = *v192;
        uint64_t v40 = v211;
        (*v192)(v208, v211);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v48)(v214, v40);
        uint64_t v49 = (uint64_t)v216;
        uint64_t v5 = v197;
        uint64_t v6 = v196;
        uint64_t v43 = v193;
LABEL_10:
        ++v46;
        uint64_t v9 = v209;
        uint64_t v47 = v194;
        if (v46 == v195)
        {
          uint64_t v45 = v218;
          uint64_t v102 = v49;
          goto LABEL_66;
        }
      }
    }
    uint64_t v102 = (uint64_t)v216;
LABEL_66:
    swift_bridgeObjectRelease();
    uint64_t v103 = *(void *)(v45 + 16);
    swift_release();
    swift_release();
    if (v103) {
      break;
    }
LABEL_67:
    uint64_t v104 = v174;
    RRCandidate.entity.getter();
    uint64_t v105 = RREntity.metadata.getter();
    v181(v104, v183);
    uint64_t v106 = *(void *)(v105 + 16);
    if (v106)
    {
      unint64_t v107 = v105 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
      unint64_t v207 = *(void *)(v6 + 72);
      uint64_t v108 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
      unint64_t v195 = v105;
      swift_bridgeObjectRetain();
      unint64_t v109 = MEMORY[0x1E4FBC860];
      do
      {
        BOOL v110 = v215;
        v108(v215, v107, v5);
        v108(v9, (unint64_t)v110, v5);
        int v111 = (*v204)(v9, v5);
        if (v111 == v203)
        {
          (*v188)(v9, v5);
          uint64_t v112 = v213;
          uint64_t v113 = *v212;
          os_log_type_t v114 = v190;
          (*v212)(v190, v9, v213);
          v113(v216, v114, v112);
          uint64_t v102 = (uint64_t)v216;
          (*v200)(v216, 0, 1, v112);
          (*v201)(v215, v5);
        }
        else
        {
          os_log_type_t v115 = *v201;
          (*v201)(v9, v5);
          uint64_t v112 = v213;
          (*v200)((char *)v102, 1, 1, v213);
          v115(v215, v5);
        }
        if ((*v202)(v102, 1, v112) == 1)
        {
          outlined destroy of ReferenceResolutionClientProtocol?(v102, &demangling cache variable for type metadata for RRDataSourceMetadataValue?);
        }
        else
        {
          uint64_t v116 = *v212;
          uint64_t v117 = v189;
          (*v212)(v189, (char *)v102, v112);
          v116(v206, v117, v112);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v109 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v109 + 16) + 1, 1, v109);
          }
          unint64_t v119 = *(void *)(v109 + 16);
          unint64_t v118 = *(void *)(v109 + 24);
          uint64_t v120 = v191;
          uint64_t v102 = (uint64_t)v216;
          if (v119 >= v118 >> 1)
          {
            uint64_t v121 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v118 > 1, v119 + 1, 1, v109);
            uint64_t v120 = v191;
            unint64_t v109 = v121;
          }
          *(void *)(v109 + 16) = v119 + 1;
          v116((char *)(v109+ ((*(unsigned __int8 *)(v120 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80))+ *(void *)(v120 + 72) * v119), v206, v213);
          uint64_t v9 = v209;
        }
        v107 += v207;
        --v106;
      }
      while (v106);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v109 = MEMORY[0x1E4FBC860];
    }
    uint64_t v122 = v213;
    uint64_t v123 = v185;
    uint64_t v124 = *v177;
    (*v177)(v185, v166, v213);
    uint64_t v125 = *(void *)(v109 + 16);
    if (!v125)
    {
      unint64_t v131 = *v186;
      uint64_t v5 = v197;
      goto LABEL_98;
    }
    uint64_t v126 = v191;
    unint64_t v163 = (*(unsigned __int8 *)(v126 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80);
    uint64_t v127 = *(void (**)(char *))(v191 + 16);
    os_log_type_t v128 = v178;
    unint64_t v193 = v109 + v163;
    unint64_t v207 = (unint64_t)v127;
    v127(v178);
    unint64_t v129 = lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue();
    swift_bridgeObjectRetain();
    unint64_t v195 = v129;
    char v130 = dispatch thunk of static Equatable.== infix(_:_:)();
    unint64_t v131 = *(void (**)(char *, uint64_t))(v126 + 8);
    v131(v128, v122);
    if (v130)
    {
      swift_bridgeObjectRelease();
      uint64_t v132 = v165;
      uint64_t v133 = v185;
      goto LABEL_101;
    }
    if (v125 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v5 = v197;
      goto LABEL_97;
    }
    uint64_t v164 = *(void *)(v191 + 72);
    uint64_t v134 = v178;
    ((void (*)(char *, unint64_t, uint64_t))v207)(v178, v193 + v164, v122);
    char v135 = dispatch thunk of static Equatable.== infix(_:_:)();
    v131(v134, v122);
    if ((v135 & 1) == 0)
    {
      if (v125 != 2)
      {
        unint64_t v136 = v109 + v163 + 2 * v164;
        uint64_t v137 = 2;
        while (1)
        {
          uint64_t v138 = v213;
          uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v207)(v134, v136, v213);
          uint64_t v139 = v137 + 1;
          if (__OFADD__(v137, 1)) {
            break;
          }
          char v140 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v141 = v134;
          char v142 = v140;
          v131(v141, v138);
          if (v142)
          {
            swift_bridgeObjectRelease();
            uint64_t v122 = v213;
            goto LABEL_100;
          }
          ++v137;
          v136 += v164;
          uint64_t v134 = v178;
          if (v139 == v125)
          {
            swift_bridgeObjectRelease();
            uint64_t v5 = v197;
            uint64_t v9 = v209;
            uint64_t v122 = v213;
            goto LABEL_97;
          }
        }
LABEL_121:
        __break(1u);
        goto LABEL_122;
      }
      swift_bridgeObjectRelease();
      uint64_t v5 = v197;
      uint64_t v9 = v209;
LABEL_97:
      uint64_t v123 = v185;
LABEL_98:
      uint64_t v40 = v211;
      v131(v123, v122);
      goto LABEL_4;
    }
    swift_bridgeObjectRelease();
LABEL_100:
    uint64_t v132 = v165;
    uint64_t v133 = v185;
LABEL_101:
    unint64_t v143 = v193;
    v131(v133, v122);
    v124(v176, v162, v122);
    ((void (*)(char *, unint64_t, uint64_t))v207)(v132, v143, v122);
    swift_bridgeObjectRetain();
    char v144 = dispatch thunk of static Equatable.== infix(_:_:)();
    v131(v132, v122);
    uint64_t v5 = v197;
    if ((v144 & 1) == 0)
    {
      if (v125 == 1) {
        goto LABEL_103;
      }
      unint64_t v193 = *(void *)(v191 + 72);
      uint64_t v151 = v165;
      uint64_t v152 = v213;
      ((void (*)(char *, unint64_t, uint64_t))v207)(v165, v143 + v193, v213);
      char v153 = dispatch thunk of static Equatable.== infix(_:_:)();
      v131(v151, v152);
      if ((v153 & 1) == 0)
      {
        if (v125 == 2)
        {
LABEL_103:
          swift_bridgeObjectRelease();
          v131(v176, v213);
          swift_bridgeObjectRelease();
          if (one-time initialization token for kAppBundleIdMatches != -1) {
            swift_once();
          }
          uint64_t v145 = static TimerAffinityScorer.kAppBundleIdMatches;
          os_log_type_t v146 = v175;
          uint64_t v147 = v187;
          RRCandidate.entity.getter();
          uint64_t v148 = RREntity.appBundleId.getter();
          uint64_t v150 = v149;
          v181(v146, v183);
          LOBYTE(v148) = specialized Set.contains(_:)(v148, v150, v145);
          swift_bridgeObjectRelease();
          (*v167)(v147, v180);
          uint64_t v5 = v197;
          uint64_t v6 = v196;
          uint64_t v9 = v209;
          uint64_t v40 = v211;
          if (v148) {
            goto LABEL_117;
          }
          goto LABEL_5;
        }
        unint64_t v154 = v109 + v163 + 2 * v193;
        uint64_t v155 = 2;
        while (1)
        {
          os_log_type_t v156 = v165;
          uint64_t v157 = v213;
          uint64_t result = ((uint64_t (*)(char *, unint64_t, uint64_t))v207)(v165, v154, v213);
          uint64_t v158 = v155 + 1;
          if (__OFADD__(v155, 1)) {
            break;
          }
          char v159 = dispatch thunk of static Equatable.== infix(_:_:)();
          v131(v156, v157);
          if (v159) {
            goto LABEL_3;
          }
          ++v155;
          v154 += v193;
          if (v158 == v125) {
            goto LABEL_103;
          }
        }
LABEL_122:
        __break(1u);
        return result;
      }
    }
LABEL_3:
    swift_bridgeObjectRelease();
    v131(v176, v213);
    uint64_t v9 = v209;
    uint64_t v40 = v211;
LABEL_4:
    swift_bridgeObjectRelease();
    (*v167)(v187, v180);
    uint64_t v6 = v196;
LABEL_5:
    uint64_t v39 = v179 + 1;
    if (v179 + 1 == v173)
    {
      uint64_t v160 = 0;
      goto LABEL_118;
    }
  }
  (*v167)(v187, v180);
LABEL_117:
  uint64_t v160 = 1;
LABEL_118:
  swift_bridgeObjectRelease();
  return v160;
}

uint64_t specialized TimerAffinityScorer.priorityForSharedTask(_:environment:)()
{
  uint64_t v55 = type metadata accessor for RREntity();
  uint64_t v0 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55);
  uint64_t v54 = (char *)&v45 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for RRCandidate();
  uint64_t v56 = *(void *)(v2 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v53 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v45 - v5;
  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of Any?((uint64_t)v63, (uint64_t)v61);
  if (v62)
  {
    outlined init with copy of Any?((uint64_t)v61, (uint64_t)&v57);
    type metadata accessor for UsoTask_noVerb_uso_NoEntity();
    if (swift_dynamicCast())
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v63, (uint64_t *)&demangling cache variable for type metadata for Any?);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v57);
LABEL_44:
      uint64_t v8 = 2;
      goto LABEL_45;
    }
    type metadata accessor for UsoTask_stop_common_MediaItem();
    if (swift_dynamicCast())
    {
      swift_retain();
      uint64_t v7 = dispatch thunk of Uso_VerbTemplate_ReferenceControl.trigger.getter();
      swift_release_n();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v63, (uint64_t *)&demangling cache variable for type metadata for Any?);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v57);
      if (v7) {
        uint64_t v8 = 3;
      }
      else {
        uint64_t v8 = 0;
      }
      goto LABEL_45;
    }
    type metadata accessor for UsoTask_stop_uso_NoEntity();
    if (swift_dynamicCast())
    {
      swift_retain();
      uint64_t v9 = dispatch thunk of Uso_VerbTemplate_ReferenceControl.trigger.getter();
      swift_release_n();
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v63, (uint64_t *)&demangling cache variable for type metadata for Any?);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v57);
      if (v9) {
        uint64_t v8 = 3;
      }
      else {
        uint64_t v8 = 1;
      }
      goto LABEL_45;
    }
    type metadata accessor for UsoTask_enable_common_Setting();
    if (swift_dynamicCast()
      || (type metadata accessor for UsoTask_disable_common_Setting(), swift_dynamicCast()))
    {
      if (MSVDeviceIsAppleTV())
      {
        swift_retain();
        uint64_t v10 = dispatch thunk of Uso_VerbTemplate_ReferenceTrigger.trigger.getter();
        swift_release_n();
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v63, (uint64_t *)&demangling cache variable for type metadata for Any?);
        swift_release();
        if (v10)
        {
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v57);
          uint64_t v8 = 3;
          goto LABEL_45;
        }
      }
      else
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v63, (uint64_t *)&demangling cache variable for type metadata for Any?);
        swift_release();
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v57);
      uint64_t v8 = 0;
      goto LABEL_45;
    }
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v57);
  }
  uint64_t v57 = UsoTask.baseEntityAsString.getter();
  uint64_t v58 = v11;
  strcpy((char *)v60, "uso_NoEntity");
  BYTE5(v60[1]) = 0;
  HIWORD(v60[1]) = -5120;
  unint64_t v52 = lazy protocol witness table accessor for type String and conformance String();
  char v12 = StringProtocol.contains<A>(_:)();
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
  {
LABEL_43:
    outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v63, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_44;
  }
  SiriEnvironment.salientEntitiesProvider.getter();
  uint64_t v13 = dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
  swift_release();
  uint64_t v14 = MEMORY[0x1E4FBC860];
  uint64_t v59 = MEMORY[0x1E4FBC860];
  uint64_t v15 = *(void *)(v13 + 16);
  swift_bridgeObjectRetain();
  if (v15)
  {
    unint64_t v16 = 0;
    uint64_t v51 = v56 + 16;
    uint64_t v50 = (void (**)(char *, uint64_t))(v0 + 8);
    unint64_t v46 = (void (**)(char *, uint64_t))(v56 + 8);
    uint64_t v49 = (void (**)(char *, char *, uint64_t))(v56 + 32);
    uint64_t v48 = v2;
    uint64_t v47 = v15;
    while (v16 < *(void *)(v13 + 16))
    {
      unint64_t v17 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
      uint64_t v18 = *(void *)(v56 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v56 + 16))(v6, v13 + v17 + v18 * v16, v2);
      uint64_t v19 = v54;
      RRCandidate.entity.getter();
      RREntity.usoEntity.getter();
      (*v50)(v19, v55);
      uint64_t v20 = UsoTask.verbString.getter();
      uint64_t v22 = v21;
      swift_release();
      uint64_t v57 = v20;
      uint64_t v58 = v22;
      strcpy((char *)v60, "common_Timer");
      BYTE5(v60[1]) = 0;
      HIWORD(v60[1]) = -5120;
      char v23 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      if (v23)
      {
        uint64_t v24 = v13;
        uint64_t v25 = *v49;
        uint64_t v26 = v6;
        (*v49)(v53, v6, v2);
        uint64_t v27 = v59;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v27 + 16) + 1, 1);
          uint64_t v27 = v59;
        }
        unint64_t v29 = *(void *)(v27 + 16);
        unint64_t v28 = *(void *)(v27 + 24);
        if (v29 >= v28 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
          uint64_t v27 = v59;
        }
        *(void *)(v27 + 16) = v29 + 1;
        uint64_t v2 = v48;
        v25((char *)(v27 + v17 + v29 * v18), v53, v48);
        uint64_t v59 = v27;
        uint64_t v6 = v26;
        uint64_t v13 = v24;
        uint64_t v15 = v47;
      }
      else
      {
        (*v46)(v6, v2);
      }
      if (v15 == ++v16)
      {
        uint64_t v14 = v59;
        goto LABEL_33;
      }
    }
    __break(1u);
    goto LABEL_50;
  }
LABEL_33:
  swift_bridgeObjectRelease();
  if (!*(void *)(v14 + 16))
  {
    swift_release();
    char v39 = specialized TimerAffinityScorer.supportedAppIsOnScreen(with:)(v13);
    swift_bridgeObjectRelease();
    if ((v39 & 1) == 0)
    {
      outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v63, (uint64_t *)&demangling cache variable for type metadata for Any?);
      uint64_t v8 = 0;
      goto LABEL_45;
    }
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.executor);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl(&dword_1B9C64000, v41, v42, "TimerAffinityScorer found commonApp entity with Clock/NanoTimer bundle ID", v43, 2u);
      MEMORY[0x1BA9E48C0](v43, -1, -1);
    }

    goto LABEL_43;
  }
  swift_bridgeObjectRelease();
  if (one-time initialization token for executor != -1) {
LABEL_50:
  }
    swift_once();
  uint64_t v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.executor);
  swift_retain();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    uint64_t v57 = v34;
    *(_DWORD *)uint64_t v33 = 136315138;
    uint64_t v35 = swift_retain();
    uint64_t v36 = MEMORY[0x1BA9E3080](v35, v2);
    unint64_t v38 = v37;
    swift_release();
    v60[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v31, v32, "TimerAffinityScorer found salient timer entity %s", v33, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v34, -1, -1);
    MEMORY[0x1BA9E48C0](v33, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v63, (uint64_t *)&demangling cache variable for type metadata for Any?);
  uint64_t v8 = 3;
LABEL_45:
  outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v61, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v8;
}

uint64_t specialized TimerAffinityScorer.score(input:environment:)()
{
  uint64_t v0 = type metadata accessor for Parse();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for USOParse();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v1 + 88))(v3, v0) == *MEMORY[0x1E4FA1F48])
  {
    (*(void (**)(char *, uint64_t))(v1 + 96))(v3, v0);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    if (specialized static AffinityScorerUtils.getTask(_:)())
    {
      uint64_t v32 = UsoTask.baseEntityAsString.getter();
      uint64_t v33 = v8;
      uint64_t v30 = 0x72656D6954;
      unint64_t v31 = 0xE500000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      char v9 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      if (v9)
      {
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v10 = type metadata accessor for Logger();
        __swift_project_value_buffer(v10, (uint64_t)static Logger.executor);
        uint64_t v11 = Logger.logObject.getter();
        os_log_type_t v12 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v11, v12))
        {
          uint64_t v13 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v13 = 0;
          _os_log_impl(&dword_1B9C64000, v11, v12, "TimerAffinityScorer Task contains \"Timer\" – using .default affinity", v13, 2u);
          MEMORY[0x1BA9E48C0](v13, -1, -1);
        }

        swift_release();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        return 2;
      }
      uint64_t v32 = UsoTask.baseEntityAsString.getter();
      uint64_t v33 = v23;
      uint64_t v30 = 0x6D72616C41;
      unint64_t v31 = 0xE500000000000000;
      char v24 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      if ((v24 & 1) == 0)
      {
        uint64_t v17 = specialized TimerAffinityScorer.priorityForSharedTask(_:environment:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        return v17;
      }
      if (specialized static AlarmAffinityScorer.isCreateAlarmTaskWithRelativeOffset(task:)())
      {
        if (one-time initialization token for executor != -1) {
          swift_once();
        }
        uint64_t v25 = type metadata accessor for Logger();
        __swift_project_value_buffer(v25, (uint64_t)static Logger.executor);
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v26, v27))
        {
          unint64_t v28 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v28 = 0;
          _os_log_impl(&dword_1B9C64000, v26, v27, "TimerAffinityScorer Task is Create Alarm with relative offset duration – timer should take a first pass", v28, 2u);
          MEMORY[0x1BA9E48C0](v28, -1, -1);
        }

        swift_release();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        return 3;
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      swift_release();
    }
    else
    {
      if (one-time initialization token for executor != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      __swift_project_value_buffer(v19, (uint64_t)static Logger.executor);
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl(&dword_1B9C64000, v20, v21, "TimerAffinityScorer Could not extract usoTask from parse", v22, 2u);
        MEMORY[0x1BA9E48C0](v22, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    return 0;
  }
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.executor);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v15, v16))
  {

    return 2;
  }
  uint64_t v17 = 2;
  uint64_t v18 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v18 = 0;
  _os_log_impl(&dword_1B9C64000, v15, v16, "TimerAffinityScorer Not a USO parse – .default", v18, 2u);
  MEMORY[0x1BA9E48C0](v18, -1, -1);

  return v17;
}

ValueMetadata *type metadata accessor for TimerAffinityScorer()
{
  return &type metadata for TimerAffinityScorer;
}

SiriKitRuntime::TranslationAffinityScorer __swiftcall TranslationAffinityScorer.init()()
{
  uint64_t v0 = (void *)0x80000001BA062C10;
  uint64_t v1 = 0xD00000000000002CLL;
  result.bundleIdentifier._object = v0;
  result.bundleIdentifier._uint64_t countAndFlagsBits = v1;
  return result;
}

void *TranslationAffinityScorer.translationSrrAppBundleId.unsafeMutableAddressor()
{
  return &static TranslationAffinityScorer.translationSrrAppBundleId;
}

unint64_t static TranslationAffinityScorer.translationSrrAppBundleId.getter()
{
  return 0xD000000000000025;
}

uint64_t TranslationAffinityScorer.bundleIdentifier.getter(uint64_t a1)
{
  return a1;
}

uint64_t specialized TranslationAffinityScorer.scoreRepeat(environment:)()
{
  uint64_t v55 = type metadata accessor for RREntity();
  uint64_t v0 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55);
  uint64_t v2 = (char *)v46 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for RRCandidate();
  uint64_t v3 = *(void *)(v56 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v56);
  uint64_t v6 = (char *)v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v4);
  char v9 = (char *)v46 - v8;
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v46 - v10;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v15 = (char *)v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)v46 - v16;
  SiriEnvironment.salientEntitiesProvider.getter();
  uint64_t v18 = dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter();
  swift_release();
  uint64_t v19 = *(void *)(v18 + 16);
  if (v19)
  {
    uint64_t v47 = v15;
    uint64_t v48 = v6;
    uint64_t v50 = v17;
    uint64_t v51 = v11;
    uint64_t v49 = v3;
    uint64_t v21 = v3 + 16;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    unint64_t v22 = v18 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v23 = (void (**)(char *, uint64_t))(v0 + 8);
    char v24 = (void (**)(char *, uint64_t))(v3 + 8);
    uint64_t v53 = *(void *)(v21 + 56);
    uint64_t v54 = v20;
    v46[1] = v18;
    swift_bridgeObjectRetain();
    unint64_t v52 = 0x80000001BA071490;
    uint64_t v25 = v56;
    while (1)
    {
      v54(v9, v22, v25);
      RRCandidate.entity.getter();
      uint64_t v26 = RREntity.appBundleId.getter();
      uint64_t v28 = v27;
      (*v23)(v2, v55);
      if (v26 == 0xD000000000000025 && v28 == v52) {
        break;
      }
      char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v29) {
        goto LABEL_10;
      }
      uint64_t v25 = v56;
      (*v24)(v9, v56);
      v22 += v53;
      if (!--v19)
      {
        swift_bridgeObjectRelease();
        uint64_t v30 = 1;
        uint64_t v3 = v49;
        uint64_t v17 = v50;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
LABEL_10:
    swift_bridgeObjectRelease();
    uint64_t v3 = v49;
    uint64_t v17 = v50;
    uint64_t v25 = v56;
    (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v50, v9, v56);
    uint64_t v30 = 0;
LABEL_11:
    uint64_t v11 = v51;
    uint64_t v15 = v47;
    uint64_t v6 = v48;
  }
  else
  {
    uint64_t v30 = 1;
    uint64_t v25 = v56;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v17, v30, 1, v25);
  swift_bridgeObjectRelease();
  outlined init with copy of RRCandidate?((uint64_t)v17, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v15, 1, v25) == 1)
  {
    outlined destroy of RRCandidate?((uint64_t)v15);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Logger.executor);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl(&dword_1B9C64000, v32, v33, "TranslationAffinityScorer Found no salient entity", v34, 2u);
      MEMORY[0x1BA9E48C0](v34, -1, -1);
    }

    outlined destroy of RRCandidate?((uint64_t)v17);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v11, v15, v25);
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.executor);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v11, v25);
    unint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v38))
    {
      char v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      uint64_t v51 = v11;
      uint64_t v41 = v40;
      uint64_t v58 = v40;
      *(_DWORD *)char v39 = 136315138;
      uint64_t v56 = (uint64_t)(v39 + 4);
      lazy protocol witness table accessor for type RRCandidate and conformance RRCandidate();
      uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_type_t v44 = *(void (**)(char *, uint64_t))(v3 + 8);
      v44(v6, v25);
      _os_log_impl(&dword_1B9C64000, v37, v38, "TranslationAffinityScorer Found salient entity %s", v39, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v41, -1, -1);
      MEMORY[0x1BA9E48C0](v39, -1, -1);

      v44(v51, v25);
    }
    else
    {

      uint64_t v45 = *(void (**)(char *, uint64_t))(v3 + 8);
      v45(v6, v25);
      v45(v11, v25);
    }
    outlined destroy of RRCandidate?((uint64_t)v17);
    return 3;
  }
}

uint64_t specialized TranslationAffinityScorer.score(input:environment:)()
{
  uint64_t v0 = type metadata accessor for Parse();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for USOParse();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Input.parse.getter();
  if ((*(unsigned int (**)(char *, uint64_t))(v1 + 88))(v3, v0) == *MEMORY[0x1E4FA1F48])
  {
    (*(void (**)(char *, uint64_t))(v1 + 96))(v3, v0);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
    if (specialized static AffinityScorerUtils.getTask(_:)())
    {
      if (UsoTask.verbString.getter() == 0x746165706572 && v8 == 0xE600000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v10 & 1) == 0) {
          goto LABEL_22;
        }
      }
      if (UsoTask.baseEntityAsString.getter() == 0x6E456F4E5F6F7375 && v16 == 0xEC00000079746974)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v18 & 1) == 0)
        {
LABEL_22:
          (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
          swift_release();
          return 2;
        }
      }
      uint64_t v14 = specialized TranslationAffinityScorer.scoreRepeat(environment:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return v14;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.executor);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v12, v13))
  {

    return 2;
  }
  uint64_t v14 = 2;
  uint64_t v15 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v15 = 0;
  _os_log_impl(&dword_1B9C64000, v12, v13, "TranslationAffinityScorer Not a USO parse – .default", v15, 2u);
  MEMORY[0x1BA9E48C0](v15, -1, -1);

  return v14;
}

ValueMetadata *type metadata accessor for TranslationAffinityScorer()
{
  return &type metadata for TranslationAffinityScorer;
}

uint64_t outlined init with copy of RRCandidate?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of RRCandidate?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRCandidate?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t TrialExperimentationAssetManager.__allocating_init(trialClient:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  id v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  return v2;
}

void *CAMAskRepeatTreatment.codePathId.unsafeMutableAddressor()
{
  return &static CAMAskRepeatTreatment.codePathId;
}

Swift::Void __swiftcall TrialExperimentationAssetManaging.emitTriggerLogging(codepathId:requestId:)(Swift::String codepathId, Swift::String_optional requestId)
{
  uint64_t v32 = v2;
  object = requestId.value._object;
  uint64_t countAndFlagsBits = requestId.value._countAndFlagsBits;
  uint64_t v4 = codepathId._object;
  uint64_t v5 = codepathId._countAndFlagsBits;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  char v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v29 - v10;
  uint64_t v12 = type metadata accessor for UUID();
  os_log_type_t v13 = *(void **)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  char v18 = (char *)&v29 - v17;
  uint64_t v34 = v5;
  UUID.init(uuidString:)();
  uint64_t v19 = (unsigned int (*)(char *, uint64_t, uint64_t))v13[6];
  if (v19(v11, 1, v12) == 1)
  {
    outlined destroy of UUID?((uint64_t)v11);
  }
  else
  {
    uint64_t v31 = v4;
    uint64_t v20 = v11;
    uint64_t v21 = (void (*)(char *, char *, uint64_t))v13[4];
    v21(v18, v20, v12);
    if (object)
    {
      uint64_t v30 = object;
      UUID.init(uuidString:)();
      if (v19(v9, 1, v12) != 1)
      {
        v21(v16, v9, v12);
        (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v18, v16, v32);
        uint64_t v28 = (void (*)(char *, uint64_t))v13[1];
        v28(v16, v12);
        v28(v18, v12);
        return;
      }
      ((void (*)(char *, uint64_t))v13[1])(v18, v12);
      outlined destroy of UUID?((uint64_t)v9);
      object = v30;
    }
    else
    {
      ((void (*)(char *, uint64_t))v13[1])(v18, v12);
    }
    uint64_t v4 = v31;
  }
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.conversationBridge);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v37 = v26;
    *(_DWORD *)uint64_t v25 = 136315650;
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000029, 0x80000001BA071520, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, (unint64_t)v4, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v25 + 22) = 2080;
    if (object) {
      uint64_t v27 = countAndFlagsBits;
    }
    else {
      uint64_t v27 = 7104878;
    }
    if (!object) {
      object = (void *)0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, (unint64_t)object, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v23, v24, "TrialExperimentationAssetManager.%s Unable to emit trigger logging due to invalid IDs. codepathId: %s requestId: %s", (uint8_t *)v25, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v26, -1, -1);
    MEMORY[0x1BA9E48C0](v25, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

void *AskToRepeatTreatment.codePathId.unsafeMutableAddressor()
{
  return &static AskToRepeatTreatment.codePathId;
}

void *Tap2EditTreatment.codePathId.unsafeMutableAddressor()
{
  return &static Tap2EditTreatment.codePathId;
}

BOOL TrialExperimentationNamespace.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of TrialExperimentationNamespace.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  return v3 != 0;
}

void *static TrialExperimentationNamespace.allCases.getter()
{
  return &outlined read-only object #0 of static TrialExperimentationNamespace.allCases.getter;
}

unint64_t TrialExperimentationNamespace.rawValue.getter()
{
  return 0xD00000000000001FLL;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TrialExperimentationNamespace()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance TrialExperimentationNamespace()
{
  return String.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TrialExperimentationNamespace()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance TrialExperimentationNamespace@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of protocol witness for RawRepresentable.init(rawValue:) in conformance TrialExperimentationNamespace, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance TrialExperimentationNamespace(void *a1@<X8>)
{
  *a1 = 0xD00000000000001FLL;
  a1[1] = 0x80000001BA0615E0;
}

void protocol witness for static CaseIterable.allCases.getter in conformance TrialExperimentationNamespace(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance TrialExperimentationNamespace;
}

void *CAMAskRepeatTreatment.camAskRepeatFeatureDeprecatedFactor.unsafeMutableAddressor()
{
  return &static CAMAskRepeatTreatment.camAskRepeatFeatureDeprecatedFactor;
}

unint64_t static CAMAskRepeatTreatment.camAskRepeatFeatureDeprecatedFactor.getter()
{
  return 0xD00000000000001BLL;
}

unint64_t static CAMAskRepeatTreatment.codePathId.getter()
{
  return 0xD000000000000024;
}

void *AskToRepeatTreatment.askToRepeatFeatureFactor.unsafeMutableAddressor()
{
  return &static AskToRepeatTreatment.askToRepeatFeatureFactor;
}

unint64_t static AskToRepeatTreatment.askToRepeatFeatureFactor.getter()
{
  return 0xD000000000000011;
}

unint64_t static AskToRepeatTreatment.codePathId.getter()
{
  return 0xD000000000000024;
}

void *Tap2EditTreatment.askToRepeatFeatureFactor.unsafeMutableAddressor()
{
  return &static Tap2EditTreatment.askToRepeatFeatureFactor;
}

unint64_t static Tap2EditTreatment.askToRepeatFeatureFactor.getter()
{
  return 0xD000000000000010;
}

unint64_t static Tap2EditTreatment.codePathId.getter()
{
  return 0xD000000000000024;
}

BOOL static Tap2EditTreatment.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void Tap2EditTreatment.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int CAMAskRepeatTreatment.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

id TrialExperimentationAssetManager.trialClient.getter()
{
  return *(id *)(v0 + 16);
}

uint64_t TrialExperimentationAssetManager.init(trialClient:)(uint64_t a1)
{
  id v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  *(void *)(v1 + 16) = a1;
  *(void *)(v1 + 24) = v3;
  return v1;
}

SiriKitRuntime::CAMAskRepeatTreatment __swiftcall TrialExperimentationAssetManager.activeCAMAskRepeatTreatment()()
{
  return TrialExperimentationAssetManager.activeCAMAskRepeatTreatment()(0xD00000000000001BLL, 0x80000001BA0714C0);
}

SiriKitRuntime::AskToRepeatTreatment __swiftcall TrialExperimentationAssetManager.askToRepeatTreatment()()
{
  return TrialExperimentationAssetManager.activeCAMAskRepeatTreatment()(0xD000000000000011, 0x80000001BA0714E0);
}

SiriKitRuntime::Tap2EditTreatment __swiftcall TrialExperimentationAssetManager.tap2EditTreatment()()
{
  return TrialExperimentationAssetManager.activeCAMAskRepeatTreatment()(0xD000000000000010, 0x80000001BA071500);
}

uint64_t TrialExperimentationAssetManager.activeCAMAskRepeatTreatment()(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void **)(v2 + 16);
  uint64_t v6 = (void *)MEMORY[0x1BA9E2DD0]();
  uint64_t v7 = (void *)MEMORY[0x1BA9E2DD0](0xD00000000000001FLL, 0x80000001BA0615E0);
  id v8 = objc_msgSend(v5, sel_levelForFactor_withNamespaceName_, v6, v7);

  if (v8)
  {
    unsigned int v9 = objc_msgSend(v8, sel_BOOLeanValue);

    return v9 ^ 1;
  }
  else
  {
    if (one-time initialization token for conversationBridge != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.conversationBridge);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      uint64_t v17 = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1B9C64000, v12, v13, "Trial: Failed to get the level value for %s, default to disabled", v14, 0xCu);
      uint64_t v10 = 1;
      swift_arrayDestroy();
      MEMORY[0x1BA9E48C0](v15, -1, -1);
      MEMORY[0x1BA9E48C0](v14, -1, -1);
    }
    else
    {

      return 1;
    }
  }
  return v10;
}

uint64_t TrialExperimentationAssetManager.emitTriggerLogging(codepathId:requestId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = &v45[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v56 = &v45[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v54 = &v45[-v12];
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = &v45[-v14];
  uint64_t v53 = v16;
  MEMORY[0x1F4188790](v13);
  char v18 = &v45[-v17];
  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.conversationBridge);
  uint64_t v20 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v55 = a1;
  v20(v18, a1, v7);
  unint64_t v52 = v20;
  v20(v15, a2, v7);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  int v23 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v51 = v6;
    os_log_t v47 = v21;
    uint64_t v25 = v24;
    uint64_t v48 = swift_slowAlloc();
    uint64_t v58 = v48;
    *(_DWORD *)uint64_t v25 = 136315650;
    uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000029, 0x80000001BA071520, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 12) = 2080;
    uint64_t v49 = a2;
    lazy protocol witness table accessor for type UUID and conformance UUID();
    int v46 = v23;
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v50 = v8;
    uint64_t v28 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
    v28(v18, v7);
    *(_WORD *)(v25 + 22) = 2080;
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v57 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v28(v15, v7);
    a2 = v49;
    uint64_t v8 = v50;
    os_log_t v31 = v47;
    _os_log_impl(&dword_1B9C64000, v47, (os_log_type_t)v46, "TrialExperimentationAssetManager.%s codepathId: %s requestId: %s", (uint8_t *)v25, 0x20u);
    uint64_t v32 = v48;
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v32, -1, -1);
    uint64_t v6 = v51;
    MEMORY[0x1BA9E48C0](v25, -1, -1);
  }
  else
  {
    uint64_t v33 = *(void (**)(unsigned char *, uint64_t))(v8 + 8);
    v33(v18, v7);
    v33(v15, v7);
  }
  uint64_t v34 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v6, 1, 1, v34);
  uint64_t v35 = swift_allocObject();
  swift_weakInit();
  uint64_t v36 = v54;
  uint64_t v37 = v52;
  v52(v54, v55, v7);
  os_log_type_t v38 = v56;
  v37(v56, a2, v7);
  uint64_t v39 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v40 = (v39 + 40) & ~v39;
  uint64_t v41 = (v53 + v39 + v40) & ~v39;
  uint64_t v42 = (char *)swift_allocObject();
  *((void *)v42 + 2) = 0;
  *((void *)v42 + 3) = 0;
  *((void *)v42 + 4) = v35;
  unint64_t v43 = *(void (**)(char *, unsigned char *, uint64_t))(v8 + 32);
  v43(&v42[v40], v36, v7);
  v43(&v42[v41], v38, v7);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in TrialExperimentationAssetManager.emitTriggerLogging(codepathId:requestId:), (uint64_t)v42);
  return swift_release();
}

uint64_t closure #1 in TrialExperimentationAssetManager.emitTriggerLogging(codepathId:requestId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[10] = a5;
  v6[11] = a6;
  v6[9] = a4;
  uint64_t v7 = type metadata accessor for UUID();
  v6[12] = v7;
  v6[13] = *(void *)(v7 - 8);
  v6[14] = swift_task_alloc();
  v6[15] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in TrialExperimentationAssetManager.emitTriggerLogging(codepathId:requestId:), 0, 0);
}

uint64_t closure #1 in TrialExperimentationAssetManager.emitTriggerLogging(codepathId:requestId:)()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = *(objc_class **)(Strong + 24);
    v0[16].super.Class isa = v2;
    v2;
    swift_release();
    v3.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
    v0[17].super.Class isa = v3.super.isa;
    v4.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
    v0[18].super.Class isa = v4.super.isa;
    uint64_t v8 = (uint64_t (*)(Class, unint64_t, unint64_t, Class))((int)*MEMORY[0x1E4F472B0]
                                                                                  + MEMORY[0x1E4F472B0]);
    uint64_t v5 = (objc_class *)swift_task_alloc();
    v0[19].super.Class isa = v5;
    *(void *)uint64_t v5 = v0;
    *((void *)v5 + 1) = closure #1 in TrialExperimentationAssetManager.emitTriggerLogging(codepathId:requestId:);
    return v8(v3.super.isa, 0xD00000000000001FLL, 0x80000001BA0615E0, v4.super.isa);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    Class isa = (uint64_t (*)(void))v0[1].super.isa;
    return isa();
  }
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t (*v5)(void);
  uint64_t v7;

  uint64_t v2 = *v1;
  *(void *)(v2 + 160) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x1F4188298](closure #1 in TrialExperimentationAssetManager.emitTriggerLogging(codepathId:requestId:), 0, 0);
  }
  else
  {
    NSUUID v3 = *(void **)(v2 + 136);
    NSUUID v4 = *(void **)(v2 + 128);

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v2 + 8);
    return v5();
  }
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  BOOL v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  unint64_t v27;
  id v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t (*v31)(void);
  os_log_type_t type;
  void *v34;
  NSObject *log;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  os_log_type_t v38 = v0;
  uint64_t v1 = *(void **)(v0 + 136);
  uint64_t v2 = *(void **)(v0 + 128);

  if (one-time initialization token for conversationBridge != -1) {
    swift_once();
  }
  NSUUID v3 = *(void **)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 112);
  NSUUID v4 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 104);
  uint64_t v9 = *(void *)(v0 + 80);
  uint64_t v8 = *(void *)(v0 + 88);
  uint64_t v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.conversationBridge);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v11(v4, v9, v6);
  v11(v5, v8, v6);
  uint64_t v12 = v3;
  uint64_t v13 = v3;
  uint64_t v14 = Logger.logObject.getter();
  uint64_t v15 = static os_log_type_t.debug.getter();
  uint64_t v16 = os_log_type_enabled(v14, v15);
  uint64_t v17 = *(void **)(v0 + 160);
  uint64_t v19 = *(void *)(v0 + 112);
  char v18 = *(void *)(v0 + 120);
  uint64_t v21 = *(void *)(v0 + 96);
  uint64_t v20 = *(void *)(v0 + 104);
  if (v16)
  {
    os_log_t log = v14;
    os_log_type_t v22 = swift_slowAlloc();
    uint64_t v34 = (void *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    uint64_t v37 = v36;
    *(_DWORD *)os_log_type_t v22 = 136315906;
    *(void *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000029, 0x80000001BA071520, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 12) = 2080;
    lazy protocol witness table accessor for type UUID and conformance UUID();
    int v23 = dispatch thunk of CustomStringConvertible.description.getter();
    os_log_type_t type = v15;
    *(void *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v25(v18, v21);
    *(_WORD *)(v22 + 22) = 2080;
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v25(v19, v21);
    *(_WORD *)(v22 + 32) = 2112;
    uint64_t v28 = v17;
    uint64_t v29 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 64) = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v34 = v29;

    _os_log_impl(&dword_1B9C64000, log, type, "TrialExperimentationAssetManager.%s Unable to emit trigger logging for codePathID: %s, request: %s, error: %@", (uint8_t *)v22, 0x2Au);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v34, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v36, -1, -1);
    MEMORY[0x1BA9E48C0](v22, -1, -1);
  }
  else
  {

    unint64_t v30 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v30(v18, v21);
    v30(v19, v21);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_t v31 = *(uint64_t (**)(void))(v0 + 8);
  return v31();
}

uint64_t TrialExperimentationAssetManager.deinit()
{
  return v0;
}

uint64_t TrialExperimentationAssetManager.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for TrialExperimentationAssetManaging.activeCAMAskRepeatTreatment() in conformance TrialExperimentationAssetManager()
{
  return TrialExperimentationAssetManager.activeCAMAskRepeatTreatment()();
}

uint64_t protocol witness for TrialExperimentationAssetManaging.askToRepeatTreatment() in conformance TrialExperimentationAssetManager()
{
  return TrialExperimentationAssetManager.askToRepeatTreatment()();
}

uint64_t protocol witness for TrialExperimentationAssetManaging.tap2EditTreatment() in conformance TrialExperimentationAssetManager()
{
  return TrialExperimentationAssetManager.tap2EditTreatment()();
}

uint64_t protocol witness for TrialExperimentationAssetManaging.emitTriggerLogging(codepathId:requestId:) in conformance TrialExperimentationAssetManager(uint64_t a1, uint64_t a2)
{
  return TrialExperimentationAssetManager.emitTriggerLogging(codepathId:requestId:)(a1, a2);
}

uint64_t sub_1BA03AB20()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1BA03AB58()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  uint64_t v8 = v7 + v5;
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v9 = v0 + v4;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v9, v1);
  v10(v0 + v7, v1);

  return MEMORY[0x1F4186498](v0, v8, v6);
}

uint64_t partial apply for closure #1 in TrialExperimentationAssetManager.emitTriggerLogging(codepathId:requestId:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 40) & ~v5;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = (uint64_t)v1 + v6;
  uint64_t v11 = (uint64_t)v1 + ((*(void *)(v4 + 64) + v5 + v6) & ~v5);
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = protocol witness for FlowContextPublishing.publish(nlContext:) in conformance AceServiceInvokerImpl;
  return closure #1 in TrialExperimentationAssetManager.emitTriggerLogging(codepathId:requestId:)(a1, v7, v8, v9, v10, v11);
}

unint64_t lazy protocol witness table accessor for type TrialExperimentationNamespace and conformance TrialExperimentationNamespace()
{
  unint64_t result = lazy protocol witness table cache variable for type TrialExperimentationNamespace and conformance TrialExperimentationNamespace;
  if (!lazy protocol witness table cache variable for type TrialExperimentationNamespace and conformance TrialExperimentationNamespace)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialExperimentationNamespace and conformance TrialExperimentationNamespace);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [TrialExperimentationNamespace] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [TrialExperimentationNamespace] and conformance [A];
  if (!lazy protocol witness table cache variable for type [TrialExperimentationNamespace] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [TrialExperimentationNamespace]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [TrialExperimentationNamespace] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CAMAskRepeatTreatment and conformance CAMAskRepeatTreatment()
{
  unint64_t result = lazy protocol witness table cache variable for type CAMAskRepeatTreatment and conformance CAMAskRepeatTreatment;
  if (!lazy protocol witness table cache variable for type CAMAskRepeatTreatment and conformance CAMAskRepeatTreatment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAMAskRepeatTreatment and conformance CAMAskRepeatTreatment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AskToRepeatTreatment and conformance AskToRepeatTreatment()
{
  unint64_t result = lazy protocol witness table cache variable for type AskToRepeatTreatment and conformance AskToRepeatTreatment;
  if (!lazy protocol witness table cache variable for type AskToRepeatTreatment and conformance AskToRepeatTreatment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AskToRepeatTreatment and conformance AskToRepeatTreatment);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Tap2EditTreatment and conformance Tap2EditTreatment()
{
  unint64_t result = lazy protocol witness table cache variable for type Tap2EditTreatment and conformance Tap2EditTreatment;
  if (!lazy protocol witness table cache variable for type Tap2EditTreatment and conformance Tap2EditTreatment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Tap2EditTreatment and conformance Tap2EditTreatment);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TrialExperimentationNamespace(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1BA03AFDCLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TrialExperimentationNamespace()
{
  return &type metadata for TrialExperimentationNamespace;
}

ValueMetadata *type metadata accessor for CAMAskRepeatTreatment()
{
  return &type metadata for CAMAskRepeatTreatment;
}

ValueMetadata *type metadata accessor for AskToRepeatTreatment()
{
  return &type metadata for AskToRepeatTreatment;
}

unsigned char *storeEnumTagSinglePayload for CAMAskRepeatTreatment(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1BA03B108);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Tap2EditTreatment()
{
  return &type metadata for Tap2EditTreatment;
}

uint64_t dispatch thunk of TrialExperimentationAssetManaging.activeCAMAskRepeatTreatment()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))() & 1;
}

uint64_t dispatch thunk of TrialExperimentationAssetManaging.askToRepeatTreatment()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))() & 1;
}

uint64_t dispatch thunk of TrialExperimentationAssetManaging.tap2EditTreatment()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))() & 1;
}

uint64_t dispatch thunk of TrialExperimentationAssetManaging.emitTriggerLogging(codepathId:requestId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t type metadata accessor for TrialExperimentationAssetManager()
{
  return self;
}

uint64_t method lookup function for TrialExperimentationAssetManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for TrialExperimentationAssetManager);
}

uint64_t dispatch thunk of TrialExperimentationAssetManager.__allocating_init(trialClient:)()
{
  return (*(uint64_t (**)(void))(v0 + 96))();
}

BOOL UserInputResult.isSupported.getter()
{
  uint64_t v1 = type metadata accessor for UserInputResult();
  MEMORY[0x1F4188790](v1);
  int v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UserInputResult(v0, (uint64_t)v3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 2) {
    outlined destroy of UserInputResult((uint64_t)v3);
  }
  return EnumCaseMultiPayload == 2;
}

id static FlowExtensionUserInputResultXPC.unsupportedInput(exclude:)(char a1)
{
  uint64_t v2 = (objc_class *)type metadata accessor for FlowExtensionUserInputResultXPC();
  int v3 = objc_allocWithZone(v2);
  *(void *)&v3[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_type] = 1;
  *(void *)&v3[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_error] = 0;
  *(_OWORD *)&v3[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_reformedInputData] = xmmword_1BA058F60;
  v3[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_exclude] = a1;
  v5.receiver = v3;
  v5.super_class = v2;
  return objc_msgSendSuper2(&v5, sel_init);
}

id UserInputResult.xpcRepresentation.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Input();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  objc_super v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UserInputResult();
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UserInputResult(v1, (uint64_t)v8);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    char v11 = *v8;
    uint64_t v12 = (objc_class *)type metadata accessor for FlowExtensionUserInputResultXPC();
    uint64_t v13 = objc_allocWithZone(v12);
    *(void *)&v13[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_type] = 1;
    *(void *)&v13[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_error] = 0;
    *(_OWORD *)&v13[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_reformedInputData] = xmmword_1BA058F60;
    v13[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_exclude] = v11;
    return objc_msgSendSuper2(&v19, sel_init, v18.receiver, v18.super_class, v13, v12);
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v15 = (objc_class *)type metadata accessor for FlowExtensionUserInputResultXPC();
    uint64_t v16 = objc_allocWithZone(v15);
    *(void *)&v16[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_type] = 0;
    *(void *)&v16[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_error] = 0;
    *(_OWORD *)&v16[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_reformedInputData] = xmmword_1BA058F60;
    v16[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_exclude] = 0;
    return objc_msgSendSuper2(&v18, sel_init, v16, v15, v19.receiver, v19.super_class);
  }
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
  id v10 = specialized static FlowExtensionUserInputResultXPC.reformedInput(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v10;
}

id static FlowExtensionUserInputResultXPC.supportedInput.getter()
{
  uint64_t v0 = (objc_class *)type metadata accessor for FlowExtensionUserInputResultXPC();
  uint64_t v1 = objc_allocWithZone(v0);
  *(void *)&v1[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_type] = 0;
  *(void *)&v1[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_error] = 0;
  *(_OWORD *)&v1[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_reformedInputData] = xmmword_1BA058F60;
  v1[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_exclude] = 0;
  v3.receiver = v1;
  v3.super_class = v0;
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t FlowExtensionUserInputResultXPC.type.getter()
{
  return *(void *)(v0 + OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_type);
}

uint64_t FlowExtensionUserInputResultXPC.reformedInputData.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_reformedInputData);
  outlined copy of Data?(v1, *(void *)(v0 + OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_reformedInputData + 8));
  return v1;
}

uint64_t FlowExtensionUserInputResultXPC.exclude.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_exclude);
}

void *FlowExtensionUserInputResultXPC.error.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_error);
  id v2 = v1;
  return v1;
}

id FlowExtensionUserInputResultXPC.__allocating_init(type:error:reformedInputData:exclude:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  char v11 = objc_allocWithZone(v5);
  *(void *)&v11[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_type] = a1;
  *(void *)&v11[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_error] = a2;
  uint64_t v12 = &v11[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_reformedInputData];
  *uint64_t v12 = a3;
  v12[1] = a4;
  v11[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_exclude] = a5;
  v14.receiver = v11;
  v14.super_class = v5;
  return objc_msgSendSuper2(&v14, sel_init);
}

id FlowExtensionUserInputResultXPC.init(type:error:reformedInputData:exclude:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)&v5[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_type] = a1;
  *(void *)&v5[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_error] = a2;
  uint64_t v6 = &v5[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_reformedInputData];
  *uint64_t v6 = a3;
  v6[1] = a4;
  v5[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_exclude] = a5;
  v8.receiver = v5;
  v8.super_class = (Class)type metadata accessor for FlowExtensionUserInputResultXPC();
  return objc_msgSendSuper2(&v8, sel_init);
}

uint64_t static FlowExtensionUserInputResultXPC.supportsSecureCoding.getter()
{
  return 1;
}

Swift::Void __swiftcall FlowExtensionUserInputResultXPC.encode(with:)(NSCoder with)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_type);
  uint64_t v4 = (void *)MEMORY[0x1BA9E2DD0](1701869940, 0xE400000000000000);
  [(objc_class *)with.super.isa encodeInteger:v3 forKey:v4];

  objc_super v5 = (uint64_t *)(v1 + OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_reformedInputData);
  unint64_t v6 = *(void *)(v1 + OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_reformedInputData + 8);
  if (v6 >> 60 != 15)
  {
    uint64_t v7 = *v5;
    outlined copy of Data._Representation(*v5, *(void *)(v1 + OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_reformedInputData + 8));
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v9 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000011, 0x80000001BA0605A0);
    [(objc_class *)with.super.isa encodeObject:isa forKey:v9];

    outlined consume of Data?(v7, v6);
  }
  id v10 = *(void **)(v1 + OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_error);
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = (void *)MEMORY[0x1BA9E2DD0](0x726F727265, 0xE500000000000000);
    [(objc_class *)with.super.isa encodeObject:v11 forKey:v12];
  }
  uint64_t v13 = *(unsigned __int8 *)(v1 + OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_exclude);
  id v14 = (id)MEMORY[0x1BA9E2DD0](0x6564756C637865, 0xE700000000000000);
  [(objc_class *)with.super.isa encodeBool:v13 forKey:v14];
}

unint64_t FlowExtensionUserInputResultXPC.CodingKeys.rawValue.getter(char a1)
{
  unint64_t result = 1701869940;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x726F727265;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0x6564756C637865;
      break;
    default:
      return result;
  }
  return result;
}

id FlowExtensionUserInputResultXPC.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return FlowExtensionUserInputResultXPC.init(coder:)(a1);
}

unint64_t FlowExtensionUserInputResultTypeXPC.init(rawValue:)(unint64_t a1)
{
  return specialized FlowExtensionUserInputResultTypeXPC.init(rawValue:)(a1);
}

SiriKitRuntime::FlowExtensionUserInputResultXPC::CodingKeys_optional __swiftcall FlowExtensionUserInputResultXPC.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  object = stringValue._object;
  v2._uint64_t countAndFlagsBits = stringValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of FlowExtensionUserInputResultXPC.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return (SiriKitRuntime::FlowExtensionUserInputResultXPC::CodingKeys_optional)4;
  }
  else {
    return (SiriKitRuntime::FlowExtensionUserInputResultXPC::CodingKeys_optional)v3;
  }
}

SiriKitRuntime::FlowExtensionUserInputResultXPC::CodingKeys_optional __swiftcall FlowExtensionUserInputResultXPC.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  return (SiriKitRuntime::FlowExtensionUserInputResultXPC::CodingKeys_optional)4;
}

uint64_t FlowExtensionUserInputResultXPC.CodingKeys.intValue.getter()
{
  return 0;
}

unint64_t FlowExtensionUserInputResultXPC.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 1701869940;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x726F727265;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0x6564756C637865;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FlowExtensionUserInputResultXPC.CodingKeys(unsigned __int8 *a1, unsigned char *a2)
{
  unint64_t v2 = 1701869940;
  uint64_t v3 = *a1;
  unint64_t v4 = 0xE400000000000000;
  unint64_t v5 = 1701869940;
  switch(v3)
  {
    case 1:
      unint64_t v4 = 0xE500000000000000;
      unint64_t v5 = 0x726F727265;
      break;
    case 2:
      unint64_t v4 = 0x80000001BA0605A0;
      unint64_t v5 = 0xD000000000000011;
      break;
    case 3:
      unint64_t v4 = 0xE700000000000000;
      unint64_t v5 = 0x6564756C637865;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(*a2)
  {
    case 1:
      unint64_t v6 = 0xE500000000000000;
      if (v5 == 0x726F727265) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0x80000001BA0605A0;
      unint64_t v2 = 0xD000000000000011;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xE700000000000000;
      if (v5 == 0x6564756C637865) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v4 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FlowExtensionUserInputResultXPC.CodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FlowExtensionUserInputResultXPC.CodingKeys()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FlowExtensionUserInputResultXPC.CodingKeys()
{
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FlowExtensionUserInputResultXPC.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized FlowExtensionUserInputResultXPC.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance FlowExtensionUserInputResultXPC.CodingKeys(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE400000000000000;
  uint64_t v3 = 1701869940;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x726F727265;
      goto LABEL_3;
    case 2:
      *a1 = 0xD000000000000011;
      a1[1] = 0x80000001BA0605A0;
      break;
    case 3:
      *a1 = 0x6564756C637865;
      a1[1] = 0xE700000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance FlowExtensionUserInputResultXPC.CodingKeys()
{
  unint64_t result = 1701869940;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x726F727265;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0x6564756C637865;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance FlowExtensionUserInputResultXPC.CodingKeys@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized FlowExtensionUserInputResultXPC.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FlowExtensionUserInputResultXPC.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FlowExtensionUserInputResultXPC.CodingKeys and conformance FlowExtensionUserInputResultXPC.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FlowExtensionUserInputResultXPC.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type FlowExtensionUserInputResultXPC.CodingKeys and conformance FlowExtensionUserInputResultXPC.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

id FlowExtensionUserInputResultXPC.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void FlowExtensionUserInputResultXPC.init()()
{
}

id FlowExtensionUserInputResultXPC.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FlowExtensionUserInputResultXPC();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for XPCRepresentation.swiftRepresentation() in conformance FlowExtensionUserInputResultXPC()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FlowExtensionUserInputResultTypeXPC@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = specialized FlowExtensionUserInputResultTypeXPC.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

id specialized static FlowExtensionUserInputResultXPC.error(_:)()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BA04FD90;
  *(void *)(inited + 32) = 0x7470697263736564;
  *(void *)(inited + 40) = 0xEB000000006E6F69;
  swift_getErrorValue();
  uint64_t v1 = Error.localizedDescription.getter();
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(void *)(inited + 48) = v1;
  *(void *)(inited + 56) = v2;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  id v3 = objc_allocWithZone(MEMORY[0x1E4F28C58]);
  char v4 = (void *)MEMORY[0x1BA9E2DD0](0xD00000000000001DLL, 0x80000001BA065500);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v3, sel_initWithDomain_code_userInfo_, v4, -1, isa);

  char v7 = (objc_class *)type metadata accessor for FlowExtensionUserInputResultXPC();
  objc_super v8 = objc_allocWithZone(v7);
  *(void *)&v8[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_type] = 3;
  *(void *)&v8[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_error] = v6;
  *(_OWORD *)&v8[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_reformedInputData] = xmmword_1BA058F60;
  v8[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_exclude] = 0;
  v10.receiver = v8;
  v10.super_class = v7;
  return objc_msgSendSuper2(&v10, sel_init);
}

id specialized static FlowExtensionUserInputResultXPC.reformedInput(_:)()
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  type metadata accessor for Input();
  lazy protocol witness table accessor for type Input and conformance Input((unint64_t *)&lazy protocol witness table cache variable for type Input and conformance Input);
  uint64_t v0 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v2 = v1;
  swift_release();
  id v3 = (objc_class *)type metadata accessor for FlowExtensionUserInputResultXPC();
  char v4 = objc_allocWithZone(v3);
  *(void *)&v4[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_type] = 2;
  *(void *)&v4[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_error] = 0;
  unint64_t v5 = (uint64_t *)&v4[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_reformedInputData];
  uint64_t *v5 = v0;
  v5[1] = v2;
  v4[OBJC_IVAR___SKRFlowExtensionUserInputResultXPC_exclude] = 0;
  v7.receiver = v4;
  v7.super_class = v3;
  return objc_msgSendSuper2(&v7, sel_init);
}

unint64_t specialized FlowExtensionUserInputResultTypeXPC.init(rawValue:)(unint64_t result)
{
  if (result > 3) {
    return 0;
  }
  return result;
}

unint64_t specialized FlowExtensionUserInputResultXPC.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of FlowExtensionUserInputResultXPC.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

unint64_t lazy protocol witness table accessor for type FlowExtensionUserInputResultXPC.CodingKeys and conformance FlowExtensionUserInputResultXPC.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type FlowExtensionUserInputResultXPC.CodingKeys and conformance FlowExtensionUserInputResultXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type FlowExtensionUserInputResultXPC.CodingKeys and conformance FlowExtensionUserInputResultXPC.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlowExtensionUserInputResultXPC.CodingKeys and conformance FlowExtensionUserInputResultXPC.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FlowExtensionUserInputResultXPC.CodingKeys and conformance FlowExtensionUserInputResultXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type FlowExtensionUserInputResultXPC.CodingKeys and conformance FlowExtensionUserInputResultXPC.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlowExtensionUserInputResultXPC.CodingKeys and conformance FlowExtensionUserInputResultXPC.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FlowExtensionUserInputResultXPC.CodingKeys and conformance FlowExtensionUserInputResultXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type FlowExtensionUserInputResultXPC.CodingKeys and conformance FlowExtensionUserInputResultXPC.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlowExtensionUserInputResultXPC.CodingKeys and conformance FlowExtensionUserInputResultXPC.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FlowExtensionUserInputResultXPC.CodingKeys and conformance FlowExtensionUserInputResultXPC.CodingKeys;
  if (!lazy protocol witness table cache variable for type FlowExtensionUserInputResultXPC.CodingKeys and conformance FlowExtensionUserInputResultXPC.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlowExtensionUserInputResultXPC.CodingKeys and conformance FlowExtensionUserInputResultXPC.CodingKeys);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for XPCRepresentation.SwiftRepresentation : XPCConvertible in FlowExtensionUserInputResultXPC()
{
  return &protocol witness table for UserInputResult;
}

unint64_t lazy protocol witness table accessor for type FlowExtensionUserInputResultTypeXPC and conformance FlowExtensionUserInputResultTypeXPC()
{
  unint64_t result = lazy protocol witness table cache variable for type FlowExtensionUserInputResultTypeXPC and conformance FlowExtensionUserInputResultTypeXPC;
  if (!lazy protocol witness table cache variable for type FlowExtensionUserInputResultTypeXPC and conformance FlowExtensionUserInputResultTypeXPC)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FlowExtensionUserInputResultTypeXPC and conformance FlowExtensionUserInputResultTypeXPC);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for UserInputResult(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for Input();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
  }
  return a1;
}

void *assignWithCopy for UserInputResult(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of UserInputResult((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Input();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void *assignWithTake for UserInputResult(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of UserInputResult((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Input();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata completion function for UserInputResult()
{
  uint64_t result = type metadata accessor for Input();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t method lookup function for FlowExtensionUserInputResultXPC(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for FlowExtensionUserInputResultXPC);
}

uint64_t dispatch thunk of FlowExtensionUserInputResultXPC.__allocating_init(type:error:reformedInputData:exclude:)()
{
  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of FlowExtensionUserInputResultXPC.swiftRepresentation()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of FlowExtensionUserInputResultXPC.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of FlowExtensionUserInputResultXPC.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

unsigned char *storeEnumTagSinglePayload for FlowExtensionUserInputResultXPC.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1BA03CDA4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FlowExtensionUserInputResultXPC.CodingKeys()
{
  return &type metadata for FlowExtensionUserInputResultXPC.CodingKeys;
}

ValueMetadata *type metadata accessor for FlowExtensionUserInputResultTypeXPC()
{
  return &type metadata for FlowExtensionUserInputResultTypeXPC;
}

uint64_t SIRINLUUserParse.toProtoUserParse()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1F4188790](v4 - 8);
  unsigned int v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v7 = objc_msgSend(self, sel_convertFromUserParse_, v1);
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = objc_msgSend(v7, sel_data);
    if (v9)
    {
      objc_super v10 = v9;
      uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v13 = v12;

      uint64_t v14 = type metadata accessor for Siri_Nlu_External_UserParse();
      uint64_t v21 = v11;
      unint64_t v22 = v13;
      uint64_t v20 = 0;
      memset(&v19[16], 0, 32);
      outlined copy of Data._Representation(v11, v13);
      BinaryDecodingOptions.init()();
      lazy protocol witness table accessor for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse();
      Message.init<A>(contiguousBytes:extensions:partial:options:)();

      outlined consume of Data._Representation(v11, v13);
      uint64_t v16 = *(void *)(v14 - 8);
      uint64_t v17 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56);
      v17((uint64_t)v6, 0, 1, v14);
      (*(void (**)(uint64_t, unsigned char *, uint64_t))(v16 + 32))(a1, v6, v14);
      return v17(a1, 0, 1, v14);
    }
  }
  uint64_t v15 = type metadata accessor for Siri_Nlu_External_UserParse();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a1, 1, 1, v15);
}

unint64_t lazy protocol witness table accessor for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse()
{
  unint64_t result = lazy protocol witness table cache variable for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse;
  if (!lazy protocol witness table cache variable for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse)
  {
    type metadata accessor for Siri_Nlu_External_UserParse();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse);
  }
  return result;
}

id Siri_Nlu_External_UserParse.toLegacyUserParse()()
{
  type metadata accessor for Siri_Nlu_External_UserParse();
  lazy protocol witness table accessor for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse();
  uint64_t v1 = Message.serializedData(partial:)();
  unint64_t v3 = v2;
  id v4 = objc_allocWithZone(MEMORY[0x1E4FA29D8]);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v1, v3);
  id v6 = objc_msgSend(v4, sel_initWithData_, isa);

  if (!v6) {
    return 0;
  }
  id v0 = objc_msgSend(self, sel_convertUserParse_, v6);

  return v0;
}

void SIRINLUUserParse.preferredUserDialogAct.getter()
{
  id v1 = objc_msgSend(v0, sel_userDialogActs);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserDialogAct);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62) {
    goto LABEL_29;
  }
  uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v4 = 4;
    while (1)
    {
      uint64_t v5 = v4 - 4;
      if ((v2 & 0xC000000000000001) == 0) {
        break;
      }
      MEMORY[0x1BA9E3990](v4 - 4, v2);
      BOOL v6 = __OFADD__(v5, 1);
      uint64_t v7 = v4 - 3;
      if (v6) {
        goto LABEL_27;
      }
LABEL_9:
      self;
      if (swift_dynamicCastObjCClass()) {
        goto LABEL_26;
      }
      swift_unknownObjectRelease();
      ++v4;
      if (v7 == v3) {
        goto LABEL_11;
      }
    }
    swift_unknownObjectRetain();
    BOOL v6 = __OFADD__(v5, 1);
    uint64_t v7 = v4 - 3;
    if (!v6) {
      goto LABEL_9;
    }
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease_n();
  id v8 = objc_msgSend(v0, sel_userDialogActs);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    if (v9) {
      goto LABEL_13;
    }
LABEL_21:
    swift_bridgeObjectRelease_n();
    id v13 = objc_msgSend(v0, sel_userDialogActs);
    unint64_t v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v14 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v15) {
        goto LABEL_34;
      }
    }
    else if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_34;
    }
    if ((v14 & 0xC000000000000001) != 0)
    {
      MEMORY[0x1BA9E3990](0, v14);
    }
    else
    {
      if (!*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return;
      }
      swift_unknownObjectRetain();
    }
LABEL_34:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v9 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v9) {
    goto LABEL_21;
  }
LABEL_13:
  uint64_t v10 = 4;
  while (1)
  {
    uint64_t v11 = v10 - 4;
    if ((v2 & 0xC000000000000001) != 0)
    {
      MEMORY[0x1BA9E3990](v10 - 4, v2);
      BOOL v6 = __OFADD__(v11, 1);
      uint64_t v12 = v10 - 3;
      if (v6) {
        goto LABEL_28;
      }
    }
    else
    {
      swift_unknownObjectRetain();
      BOOL v6 = __OFADD__(v11, 1);
      uint64_t v12 = v10 - 3;
      if (v6) {
        goto LABEL_28;
      }
    }
    self;
    if (swift_dynamicCastObjCClass()) {
      break;
    }
    swift_unknownObjectRelease();
    ++v10;
    if (v12 == v9) {
      goto LABEL_21;
    }
  }
LABEL_26:
  swift_bridgeObjectRelease_n();
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v46 = a4;
  uint64_t v50 = a3;
  uint64_t v48 = a2;
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
  uint64_t v45 = *(void *)(v54 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v54);
  unint64_t v52 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v57 = (uint64_t)&v44 - v8;
  MEMORY[0x1F4188790](v7);
  uint64_t v51 = (char *)&v44 - v9;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v47 = a1 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v49 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v53 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v15 = 0;
  uint64_t v16 = v57;
  while (1)
  {
    if (v13)
    {
      uint64_t v55 = (v13 - 1) & v13;
      int64_t v56 = v15;
      unint64_t v17 = __clz(__rbit64(v13)) | (v15 << 6);
      goto LABEL_23;
    }
    int64_t v18 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v18 >= v49) {
      goto LABEL_30;
    }
    unint64_t v19 = *(void *)(v47 + 8 * v18);
    int64_t v20 = v15 + 1;
    if (!v19)
    {
      int64_t v20 = v15 + 2;
      if (v15 + 2 >= v49) {
        goto LABEL_30;
      }
      unint64_t v19 = *(void *)(v47 + 8 * v20);
      if (!v19)
      {
        int64_t v20 = v15 + 3;
        if (v15 + 3 >= v49) {
          goto LABEL_30;
        }
        unint64_t v19 = *(void *)(v47 + 8 * v20);
        if (!v19)
        {
          int64_t v20 = v15 + 4;
          if (v15 + 4 >= v49) {
            goto LABEL_30;
          }
          unint64_t v19 = *(void *)(v47 + 8 * v20);
          if (!v19)
          {
            uint64_t v21 = v15 + 5;
            if (v15 + 5 >= v49)
            {
LABEL_30:
              swift_release();
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56))(v46, 1, 1, v54);
              return swift_bridgeObjectRelease();
            }
            unint64_t v19 = *(void *)(v47 + 8 * v21);
            int64_t v20 = v15 + 5;
            if (!v19) {
              break;
            }
          }
        }
      }
    }
LABEL_22:
    uint64_t v55 = (v19 - 1) & v19;
    int64_t v56 = v20;
    unint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
LABEL_23:
    uint64_t v22 = v53;
    uint64_t v23 = *(void *)(v53 + 48);
    uint64_t v24 = type metadata accessor for UserID();
    uint64_t v25 = *(void *)(v24 - 8);
    uint64_t v26 = v25;
    uint64_t v27 = v23 + *(void *)(v25 + 72) * v17;
    uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
    uint64_t v29 = (uint64_t)v51;
    v28(v51, v27, v24);
    unint64_t v30 = *(void **)(*(void *)(v22 + 56) + 8 * v17);
    uint64_t v31 = v54;
    *(void *)(v29 + *(int *)(v54 + 48)) = v30;
    outlined init with take of (key: UserID, value: SAHomeMemberInfo)(v29, v16);
    uint64_t v32 = *(int *)(v31 + 48);
    uint64_t v33 = v52;
    v28(v52, v16, v24);
    uint64_t v34 = *(void **)(v16 + v32);
    *(void *)&v33[v32] = v34;
    id v35 = v30;
    id v36 = objc_msgSend(v34, sel_personaIdentifier);
    if (v36)
    {
      uint64_t v37 = v36;
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v40 = v39;

      if (v38 == v48 && v40 == v50)
      {
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v26 + 8))(v33, v24);
LABEL_32:
        swift_release();
        uint64_t v43 = v46;
        outlined init with take of (key: UserID, value: SAHomeMemberInfo)(v57, v46);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v45 + 56))(v43, 0, 1, v54);
        return swift_bridgeObjectRelease();
      }
      char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v33, v24);
      if (v42) {
        goto LABEL_32;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v26 + 8))(v33, v24);
    }
    uint64_t result = outlined destroy of ReferenceResolutionClientProtocol?(v57, &demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
    unint64_t v13 = v55;
    int64_t v15 = v56;
  }
  while (1)
  {
    int64_t v20 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v20 >= v49) {
      goto LABEL_30;
    }
    unint64_t v19 = *(void *)(v47 + 8 * v20);
    ++v21;
    if (v19) {
      goto LABEL_22;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
  uint64_t v43 = *(void *)(v49 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v49);
  uint64_t v53 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v52 = (uint64_t)&v42 - v6;
  MEMORY[0x1F4188790](v5);
  uint64_t v47 = (char *)&v42 - v7;
  uint64_t v48 = a1;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v45 = a1 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v8;
  int64_t v46 = (unint64_t)(v9 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v13 = 0;
  unint64_t v14 = v53;
  while (1)
  {
    if (v11)
    {
      uint64_t v50 = (v11 - 1) & v11;
      int64_t v51 = v13;
      unint64_t v16 = __clz(__rbit64(v11)) | (v13 << 6);
    }
    else
    {
      int64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1))
      {
        __break(1u);
LABEL_37:
        __break(1u);
        return result;
      }
      if (v17 >= v46) {
        goto LABEL_33;
      }
      unint64_t v18 = *(void *)(v45 + 8 * v17);
      int64_t i = v13 + 1;
      if (!v18)
      {
        int64_t i = v13 + 2;
        if (v13 + 2 >= v46) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v45 + 8 * i);
        if (!v18)
        {
          int64_t i = v13 + 3;
          if (v13 + 3 >= v46) {
            goto LABEL_33;
          }
          unint64_t v18 = *(void *)(v45 + 8 * i);
          if (!v18)
          {
            int64_t i = v13 + 4;
            if (v13 + 4 >= v46) {
              goto LABEL_33;
            }
            unint64_t v18 = *(void *)(v45 + 8 * i);
            if (!v18)
            {
              uint64_t v20 = v13 + 5;
              if (v13 + 5 >= v46)
              {
LABEL_33:
                swift_release();
                return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v44, 1, 1, v49);
              }
              unint64_t v18 = *(void *)(v45 + 8 * v20);
              for (int64_t i = v13 + 5; !v18; ++v20)
              {
                int64_t i = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_37;
                }
                if (i >= v46) {
                  goto LABEL_33;
                }
                unint64_t v18 = *(void *)(v45 + 8 * i);
              }
            }
          }
        }
      }
      uint64_t v50 = (v18 - 1) & v18;
      int64_t v51 = i;
      unint64_t v16 = __clz(__rbit64(v18)) + (i << 6);
    }
    uint64_t v21 = v48;
    uint64_t v22 = *(void *)(v48 + 48);
    uint64_t v23 = type metadata accessor for UserID();
    uint64_t v24 = *(void *)(v23 - 8);
    uint64_t v25 = v24;
    uint64_t v26 = v22 + *(void *)(v24 + 72) * v16;
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
    uint64_t v28 = v47;
    v27(v47, v26, v23);
    uint64_t v29 = *(void **)(*(void *)(v21 + 56) + 8 * v16);
    uint64_t v30 = v49;
    *(void *)&v28[*(int *)(v49 + 48)] = v29;
    uint64_t v31 = (uint64_t)v28;
    uint64_t v32 = v52;
    outlined init with take of (key: UserID, value: SAHomeMemberInfo)(v31, v52);
    uint64_t v33 = *(int *)(v30 + 48);
    v27(v14, v32, v23);
    uint64_t v34 = *(void **)(v32 + v33);
    *(void *)&v14[v33] = v34;
    id v35 = v29;
    id v36 = objc_msgSend(v34, sel_personaIdentifier);
    if (v36)
    {
      uint64_t v37 = v36;
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v40 = v39;
    }
    else
    {
      uint64_t v38 = 0;
      uint64_t v40 = 0;
    }
    if (one-time initialization token for guestPersonaId == -1)
    {
      if (!v40) {
        goto LABEL_32;
      }
    }
    else
    {
      swift_once();
      if (!v40)
      {
LABEL_32:
        (*(void (**)(char *, uint64_t))(v25 + 8))(v53, v23);
        goto LABEL_5;
      }
    }
    if (v38 == static UserSessionState.guestPersonaId && v40 == *(void *)algn_1E9F3D6D8) {
      break;
    }
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v53, v23);
    if (v15) {
      goto LABEL_34;
    }
LABEL_5:
    uint64_t result = outlined destroy of ReferenceResolutionClientProtocol?(v52, &demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
    unint64_t v11 = v50;
    int64_t v13 = v51;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v53, v23);
LABEL_34:
  swift_release();
  uint64_t v41 = v44;
  outlined init with take of (key: UserID, value: SAHomeMemberInfo)(v52, v44);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v41, 0, 1, v49);
}

uint64_t UserSessionState.init(withPersonaId:)(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (one-time initialization token for guestPersonaId != -1) {
    swift_once();
  }
  BOOL v4 = static UserSessionState.guestPersonaId == a1 && *(void *)algn_1E9F3D6D8 == a2;
  if (v4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return a1;
}

uint64_t UserSessionState.getActiveUserSharedUserId(fromHomeMemberInfoDict:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v48 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo)?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v46 - v11;
  uint64_t v13 = type metadata accessor for UserID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  int64_t v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v46 - v19;
  uint64_t v21 = MEMORY[0x1F4188790](v18);
  uint64_t v23 = (char *)&v46 - v22;
  MEMORY[0x1F4188790](v21);
  uint64_t v26 = (char *)&v46 - v25;
  if (a3)
  {
    uint64_t v47 = v24;
    if (a3 == 1)
    {
      specialized Sequence.first(where:)(a1, (uint64_t)v10);
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v10, 1, v27) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, &demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo)?);
        uint64_t v28 = v48;
        if (one-time initialization token for conversationBridge != -1) {
          swift_once();
        }
        uint64_t v29 = type metadata accessor for Logger();
        __swift_project_value_buffer(v29, (uint64_t)static Logger.conversationBridge);
        uint64_t v30 = Logger.logObject.getter();
        os_log_type_t v31 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v30, v31))
        {
          uint64_t v32 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v32 = 0;
          _os_log_impl(&dword_1B9C64000, v30, v31, "#user-session: unable to find shareduserid for guest in homememberInfo", v32, 2u);
          MEMORY[0x1BA9E48C0](v32, -1, -1);
        }

        if (one-time initialization token for guestSharedUserId != -1) {
          swift_once();
        }
        swift_bridgeObjectRetain();
        UserID.init(sharedUserId:)();
        uint64_t v33 = 0;
LABEL_21:
        uint64_t v24 = v47;
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v28, v33, 1, v24);
      }

      uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
      uint64_t v41 = v47;
      v40(v17, v10, v47);
      v40(v20, v17, v41);
      uint64_t v28 = v48;
      v40(v48, v20, v41);
      uint64_t v24 = v41;
      uint64_t v33 = 0;
    }
    else
    {
      outlined copy of UserSessionState(a2, a3);
      swift_bridgeObjectRetain();
      specialized Sequence.first(where:)(a1, a2, a3, (uint64_t)v12);
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48))(v12, 1, v34) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v12, &demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo)?);
        if (one-time initialization token for conversationBridge != -1) {
          swift_once();
        }
        uint64_t v35 = type metadata accessor for Logger();
        __swift_project_value_buffer(v35, (uint64_t)static Logger.conversationBridge);
        swift_bridgeObjectRetain();
        id v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v36, v37))
        {
          uint64_t v38 = (uint8_t *)swift_slowAlloc();
          uint64_t v39 = swift_slowAlloc();
          uint64_t v50 = v39;
          *(_DWORD *)uint64_t v38 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v50);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          outlined consume of UserSessionState(a2, a3);
          outlined consume of UserSessionState(a2, a3);
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v36, v37, "#user-session: unable to find shareduserid for personaId=%s", v38, 0xCu);
          uint64_t v33 = 1;
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v39, -1, -1);
          MEMORY[0x1BA9E48C0](v38, -1, -1);
        }
        else
        {
          outlined consume of UserSessionState(a2, a3);
          outlined consume of UserSessionState(a2, a3);

          uint64_t v33 = 1;
        }
        uint64_t v28 = v48;
        goto LABEL_21;
      }

      uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
      uint64_t v43 = v12;
      uint64_t v44 = v47;
      v42(v23, v43, v47);
      outlined consume of UserSessionState(a2, a3);
      v42(v26, v23, v44);
      uint64_t v28 = v48;
      v42(v48, v26, v44);
      uint64_t v24 = v44;
      uint64_t v33 = 0;
    }
  }
  else
  {
    uint64_t v33 = 1;
    uint64_t v28 = v48;
  }
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v28, v33, 1, v24);
}

uint64_t one-time initialization function for guestSharedUserId(uint64_t a1)
{
  return one-time initialization function for guestSharedUserId(a1, &static UserSessionState.guestSharedUserId, algn_1E9F3D6C8);
}

uint64_t *UserSessionState.guestSharedUserId.unsafeMutableAddressor()
{
  if (one-time initialization token for guestSharedUserId != -1) {
    swift_once();
  }
  return &static UserSessionState.guestSharedUserId;
}

uint64_t static UserSessionState.guestSharedUserId.getter()
{
  return static UserSessionState.guestSharedUserId.getter(&one-time initialization token for guestSharedUserId, &static UserSessionState.guestSharedUserId);
}

uint64_t one-time initialization function for guestPersonaId(uint64_t a1)
{
  return one-time initialization function for guestSharedUserId(a1, &static UserSessionState.guestPersonaId, algn_1E9F3D6D8);
}

uint64_t one-time initialization function for guestSharedUserId(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = type metadata accessor for UserID();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UserID.defaultUserId.getter();
  uint64_t v9 = UserID.sharedUserId.getter();
  uint64_t v11 = v10;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *a2 = v9;
  *a3 = v11;
  return result;
}

uint64_t *UserSessionState.guestPersonaId.unsafeMutableAddressor()
{
  if (one-time initialization token for guestPersonaId != -1) {
    swift_once();
  }
  return &static UserSessionState.guestPersonaId;
}

uint64_t static UserSessionState.guestPersonaId.getter()
{
  return static UserSessionState.guestSharedUserId.getter(&one-time initialization token for guestPersonaId, &static UserSessionState.guestPersonaId);
}

uint64_t static UserSessionState.guestSharedUserId.getter(void *a1, uint64_t *a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = *a2;
  swift_bridgeObjectRetain();
  return v3;
}

BOOL UserSessionState.isSessionActive.getter(uint64_t a1, uint64_t a2)
{
  return a2 != 0;
}

BOOL UserSessionState.isAmbient.getter(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

uint64_t static UserSessionState.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!a2) {
    return !a4;
  }
  if (a2 == 1) {
    return a4 == 1;
  }
  if (a4 < 2) {
    return 0;
  }
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t UserSessionState.activePersonaId.getter(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (a2 == 1)
    {
      if (one-time initialization token for guestPersonaId != -1) {
        swift_once();
      }
      uint64_t v2 = static UserSessionState.guestPersonaId;
    }
    else
    {
      uint64_t v2 = a1;
    }
    swift_bridgeObjectRetain();
    return v2;
  }
  return a2;
}

id UserSessionState.getActiveUserSpecificInfo(from:)(uint64_t a1, uint64_t a2, id a3)
{
  uint64_t v86 = (uint8_t *)a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserID?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v83 - v9;
  uint64_t v11 = type metadata accessor for UserID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  uint64_t v18 = (char *)&v83 - v17;
  uint64_t v19 = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v83 - v20;
  MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v83 - v22;
  if (a3)
  {
    if (a3 == (id)1)
    {
      uint64_t v24 = MUXContextMessage.userIdToHomeMember.getter();
      UserSessionState.getActiveUserSharedUserId(fromHomeMemberInfoDict:)(v24, (uint64_t)v86, 1uLL, v8);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v11) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for UserID?);
        if (one-time initialization token for conversationBridge != -1) {
          swift_once();
        }
        uint64_t v25 = type metadata accessor for Logger();
        __swift_project_value_buffer(v25, (uint64_t)static Logger.conversationBridge);
        uint64_t v26 = Logger.logObject.getter();
        os_log_type_t v27 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v28 = 0;
          _os_log_impl(&dword_1B9C64000, v26, v27, "#user-session: unable to find shareduserid for guest in muxContext", v28, 2u);
          MEMORY[0x1BA9E48C0](v28, -1, -1);
        }

        if (one-time initialization token for guestSharedUserId != -1) {
          swift_once();
        }
        uint64_t v29 = static UserSessionState.guestSharedUserId;
        uint64_t v30 = *(void *)algn_1E9F3D6C8;
        if (one-time initialization token for guestPersonaId != -1) {
          swift_once();
        }
        uint64_t v31 = static UserSessionState.guestPersonaId;
        uint64_t v32 = *(void *)algn_1E9F3D6D8;
        id v33 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F966C8]), sel_init);
        a3 = closure #1 in UserSessionState.getActiveUserSpecificInfo(from:)(v29, v30, v31, v32, v33);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v18, v8, v11);
        uint64_t v41 = specialized static ConversationMUXUtils.homeMember(withUserId:from:)((uint64_t)v18);
        if (v41)
        {
          uint64_t v42 = v41;
          uint64_t v43 = UserID.sharedUserId.getter();
          uint64_t v45 = v44;
          if (one-time initialization token for guestPersonaId != -1) {
            swift_once();
          }
          a3 = closure #1 in UserSessionState.getActiveUserSpecificInfo(from:)(v43, v45, static UserSessionState.guestPersonaId, *(uint64_t *)algn_1E9F3D6D8, v42);

          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v12 + 8))(v18, v11);
        }
        else
        {
          uint64_t v85 = a1;
          if (one-time initialization token for conversationBridge != -1) {
            swift_once();
          }
          uint64_t v51 = type metadata accessor for Logger();
          __swift_project_value_buffer(v51, (uint64_t)static Logger.conversationBridge);
          (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v18, v11);
          uint64_t v52 = Logger.logObject.getter();
          os_log_type_t v53 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v52, v53))
          {
            uint64_t v54 = (uint8_t *)swift_slowAlloc();
            uint64_t v55 = swift_slowAlloc();
            uint64_t v88 = v55;
            *(_DWORD *)uint64_t v54 = 136315138;
            uint64_t v86 = v54 + 4;
            lazy protocol witness table accessor for type UserID and conformance UserID();
            uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v88);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            uint64_t v58 = *(void (**)(char *, uint64_t))(v12 + 8);
            v58(v15, v11);
            _os_log_impl(&dword_1B9C64000, v52, v53, "#user-session: couldn't find home member information for %s. Using a default value", v54, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1BA9E48C0](v55, -1, -1);
            MEMORY[0x1BA9E48C0](v54, -1, -1);
          }
          else
          {
            uint64_t v58 = *(void (**)(char *, uint64_t))(v12 + 8);
            v58(v15, v11);
          }

          uint64_t v70 = UserID.sharedUserId.getter();
          uint64_t v72 = v71;
          if (one-time initialization token for guestPersonaId != -1) {
            swift_once();
          }
          uint64_t v73 = static UserSessionState.guestPersonaId;
          uint64_t v74 = *(void *)algn_1E9F3D6D8;
          id v75 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F966C8]), sel_init);
          a3 = closure #1 in UserSessionState.getActiveUserSpecificInfo(from:)(v70, v72, v73, v74, v75);
          swift_bridgeObjectRelease();

          v58(v18, v11);
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v34 = MUXContextMessage.userIdToHomeMember.getter();
      uint64_t v35 = (uint64_t)v86;
      UserSessionState.getActiveUserSharedUserId(fromHomeMemberInfoDict:)(v34, (uint64_t)v86, (unint64_t)a3, v10);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
      {
        outlined destroy of ReferenceResolutionClientProtocol?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for UserID?);
        if (one-time initialization token for conversationBridge != -1) {
          swift_once();
        }
        uint64_t v36 = type metadata accessor for Logger();
        __swift_project_value_buffer(v36, (uint64_t)static Logger.conversationBridge);
        swift_bridgeObjectRetain();
        os_log_type_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v37, v38))
        {
          uint64_t v39 = (uint8_t *)swift_slowAlloc();
          uint64_t v40 = swift_slowAlloc();
          uint64_t v88 = v40;
          *(_DWORD *)uint64_t v39 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, (unint64_t)a3, &v88);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          outlined consume of UserSessionState(v35, (unint64_t)a3);
          outlined consume of UserSessionState(v35, (unint64_t)a3);
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1B9C64000, v37, v38, "#user-session: unable to find shareduserid for personaId=%s", v39, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BA9E48C0](v40, -1, -1);
          MEMORY[0x1BA9E48C0](v39, -1, -1);
        }
        else
        {
          outlined consume of UserSessionState(v35, (unint64_t)a3);
          outlined consume of UserSessionState(v35, (unint64_t)a3);
        }

        return 0;
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v23, v10, v11);
        uint64_t v46 = specialized static ConversationMUXUtils.homeMember(withUserId:from:)((uint64_t)v23);
        if (v46)
        {
          uint64_t v47 = v46;
          uint64_t v48 = UserID.sharedUserId.getter();
          id v50 = closure #1 in UserSessionState.getActiveUserSpecificInfo(from:)(v48, v49, v35, (uint64_t)a3, v47);

          swift_bridgeObjectRelease();
          outlined consume of UserSessionState(v35, (unint64_t)a3);
          (*(void (**)(char *, uint64_t))(v12 + 8))(v23, v11);
          return v50;
        }
        else
        {
          uint64_t v85 = a1;
          if (one-time initialization token for conversationBridge != -1) {
            swift_once();
          }
          uint64_t v59 = type metadata accessor for Logger();
          __swift_project_value_buffer(v59, (uint64_t)static Logger.conversationBridge);
          (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v21, v23, v11);
          unint64_t v60 = Logger.logObject.getter();
          os_log_type_t v61 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v60, v61))
          {
            uint64_t v62 = (uint8_t *)swift_slowAlloc();
            uint64_t v84 = swift_slowAlloc();
            uint64_t v88 = v84;
            uint64_t v83 = v62;
            *(_DWORD *)uint64_t v62 = 136315138;
            lazy protocol witness table accessor for type UserID and conformance UserID();
            uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v64, &v88);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            uint64_t v65 = *(void (**)(char *, uint64_t))(v12 + 8);
            v65(v21, v11);
            os_log_type_t v66 = v61;
            uint64_t v67 = v65;
            uint64_t v68 = v83;
            _os_log_impl(&dword_1B9C64000, v60, v66, "#user-session: couldn't find home member information for %s. Using a default value", v83, 0xCu);
            uint64_t v69 = v84;
            swift_arrayDestroy();
            MEMORY[0x1BA9E48C0](v69, -1, -1);
            MEMORY[0x1BA9E48C0](v68, -1, -1);
          }
          else
          {
            uint64_t v67 = *(void (**)(char *, uint64_t))(v12 + 8);
            v67(v21, v11);
          }

          uint64_t v76 = UserID.sharedUserId.getter();
          uint64_t v78 = v77;
          id v79 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F966C8]), sel_init);
          uint64_t v80 = (uint64_t)v86;
          id v81 = closure #1 in UserSessionState.getActiveUserSpecificInfo(from:)(v76, v78, (uint64_t)v86, (uint64_t)a3, v79);
          swift_bridgeObjectRelease();

          outlined consume of UserSessionState(v80, (unint64_t)a3);
          v67(v23, v11);
          return v81;
        }
      }
    }
  }
  return a3;
}

id closure #1 in UserSessionState.getActiveUserSpecificInfo(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (specialized static ConversationMUXUtils.isOwner(_:)(a5))
  {
    char v10 = 0;
  }
  else if (specialized static ConversationMUXUtils.isUnknownUser(_:)(a5))
  {
    char v10 = 1;
  }
  else
  {
    char v10 = 2;
  }
  v59[0] = v10;
  char v11 = specialized static ConversationMUXUtils.singleKnownUserInHome(muxContextMessage:)();
  char v54 = MUXContextMessage.voiceProfilesAreInFlight.getter();
  id v12 = objc_msgSend(a5, sel_homeMemberSettings);
  if (!v12
    || (uint64_t v13 = v12,
        Class isa = (Class)objc_msgSend(v12, sel_twentyFourHourTimeDisplay),
        v13,
        !isa))
  {
    type metadata accessor for NSNumber();
    Class isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
  }
  type metadata accessor for NSNumber();
  Class v15 = NSNumber.init(integerLiteral:)(0).super.super.isa;
  char v16 = static NSObject.== infix(_:_:)();

  id v17 = objc_msgSend(a5, sel_homeMemberSettings);
  char v53 = v16;
  if (v17)
  {
    uint64_t v18 = v17;
    unsigned __int8 v19 = objc_msgSend(v17, sel_mediaPlayerExplicitContentDisallowed);

    char v20 = v19 ^ 1;
  }
  else
  {
    char v20 = 1;
  }
  char v52 = v20;
  id v21 = objc_msgSend(a5, sel_homeMemberSettings);
  if (v21)
  {
    uint64_t v22 = v21;
    char v51 = objc_msgSend(v21, sel_mediaPlayerExplicitContentDisallowed);
  }
  else
  {
    char v51 = 0;
  }
  id v23 = objc_msgSend(a5, sel_companionAssistantId);
  uint64_t v57 = a2;
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v49 = v26;
    uint64_t v50 = v25;
  }
  else
  {
    uint64_t v49 = 0;
    uint64_t v50 = 0;
  }
  id v27 = objc_msgSend(a5, sel_homeMemberSettings);
  id v28 = objc_msgSend(v27, sel_meCard);

  id v29 = objc_msgSend(a5, sel_homeMemberSettings);
  uint64_t v55 = a3;
  uint64_t v56 = a1;
  if (v29)
  {
    uint64_t v30 = v29;
    uint64_t v31 = a4;
    id v32 = objc_msgSend(v29, sel_preferredLanguage);

    if (v32)
    {
      uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v34 = v33;

      goto LABEL_23;
    }
  }
  else
  {
    uint64_t v31 = a4;
  }
  uint64_t v48 = 0;
  uint64_t v34 = 0;
LABEL_23:
  id v35 = objc_msgSend(a5, sel_homeMemberSettings);
  if (v35)
  {
    uint64_t v36 = v35;
    char v37 = v11;
    id v38 = objc_msgSend(v35, sel_countryCode);

    if (v38)
    {
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v41 = v40;

      goto LABEL_28;
    }
  }
  else
  {
    char v37 = v11;
  }
  uint64_t v39 = 0;
  uint64_t v41 = 0;
LABEL_28:
  id v42 = objc_msgSend(a5, sel_homeMemberSettings);
  uint64_t v43 = v42;
  if (v42)
  {
    id v44 = objc_msgSend(v42, sel_temperatureUnit);

    if (v44)
    {
      uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v43 = v46;
    }
    else
    {
      uint64_t v45 = 0;
      uint64_t v43 = 0;
    }
  }
  else
  {
    uint64_t v45 = 0;
  }
  char v58 = 0;
  objc_allocWithZone((Class)type metadata accessor for UserSpecificInfo());
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return UserSpecificInfo.init(userId:userIdentityClassification:rawVoiceIDScore:userAttribute:isFirstInteractionForUser:didSpeakerChange:isOnlyUserInHome:voiceProfilesInFlight:twentyFourHourTimeDisplay:explicitContentAllowed:censorSpeech:wasSpeechProfileUsedByASR:companionAssistantId:meCard:preferredLanguage:countryCode:temperatureUnit:lowScoreThreshold:isUserSessionActive:personaId:meetsUserSessionThreshold:meetsPersonalRequestThreshold:hasActiveUserSession:)(v56, v57, &v58, 100, v59, 1, 1, v37 & 1, v54 & 1, (v53 & 1) == 0, v52, v51, 1, v50, v49, (uint64_t)v28, v48, v34, v39,
           v41,
           v45,
           (uint64_t)v43,
           0,
           1,
           0,
           1,
           v55,
           v31,
           1,
           0,
           1);
}

uint64_t UserSessionState.description.getter(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0x746E6569626D61;
  }
  if (a2 == 1) {
    return 0x7473657567;
  }
  String.append(_:)(*(Swift::String *)&a1);
  v3._uint64_t countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0x64656C6C6F726E65;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UserSessionState(void *a1, void *a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = a2[1];
  if (!v3) {
    return !v4;
  }
  if (v3 == 1) {
    return v4 == 1;
  }
  if (v4 < 2) {
    return 0;
  }
  if (*a1 != *a2 || v3 != v4) {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  return 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance UserSessionState()
{
  uint64_t v1 = v0[1];
  if (!v1) {
    return 0x746E6569626D61;
  }
  if (v1 == 1) {
    return 0x7473657567;
  }
  uint64_t v3 = *v0;
  String.append(_:)(*(Swift::String *)(&v1 - 1));
  v4._uint64_t countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0x64656C6C6F726E65;
}

unint64_t destroy for UserSessionState(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for UserSessionState(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for UserSessionState(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for UserSessionState(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UserSessionState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for UserSessionState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UserSessionState()
{
  return &type metadata for UserSessionState;
}

uint64_t outlined init with take of (key: UserID, value: SAHomeMemberInfo)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id UserSpecificInfo.__allocating_init(userId:userIdentityClassification:rawVoiceIDScore:userAttribute:isFirstInteractionForUser:didSpeakerChange:isOnlyUserInHome:voiceProfilesInFlight:twentyFourHourTimeDisplay:explicitContentAllowed:censorSpeech:wasSpeechProfileUsedByASR:companionAssistantId:meCard:preferredLanguage:countryCode:temperatureUnit:lowScoreThreshold:isUserSessionActive:personaId:meetsUserSessionThreshold:meetsPersonalRequestThreshold:hasActiveUserSession:)(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, unsigned char *a5, char a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13, long long a14, long long a15, long long a16, long long a17, uint64_t a18, unint64_t a19, char a20,uint64_t a21,uint64_t a22,char a23,char a24,char a25)
{
  id v26 = objc_allocWithZone(v25);
  unint64_t v28 = a19 | ((HIDWORD(a19) & 1) << 32);
  return UserSpecificInfo.init(userId:userIdentityClassification:rawVoiceIDScore:userAttribute:isFirstInteractionForUser:didSpeakerChange:isOnlyUserInHome:voiceProfilesInFlight:twentyFourHourTimeDisplay:explicitContentAllowed:censorSpeech:wasSpeechProfileUsedByASR:companionAssistantId:meCard:preferredLanguage:countryCode:temperatureUnit:lowScoreThreshold:isUserSessionActive:personaId:meetsUserSessionThreshold:meetsPersonalRequestThreshold:hasActiveUserSession:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, *((uint64_t *)&a14 + 1), a15, *((uint64_t *)&a15 + 1), a16, *((uint64_t *)&a16 + 1),
           a17,
           *((uint64_t *)&a17 + 1),
           a18,
           v28,
           SBYTE4(v28),
           SHIWORD(v28),
           a20,
           a21,
           a22,
           a23,
           a24,
           a25);
}

SiriKitRuntime::UserIdentityClassification_optional __swiftcall UserIdentityClassification.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of UserIdentityClassification.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 5;
  if (v5 < 5) {
    char v7 = v5;
  }
  *uint64_t v4 = v7;
  return result;
}

uint64_t UserIdentityClassification.rawValue.getter()
{
  uint64_t result = 0x6E656469666E6F63;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6E776F6E6BLL;
      break;
    case 2:
      uint64_t result = 0x31657275736E75;
      break;
    case 3:
      uint64_t result = 0x4E657275736E75;
      break;
    case 4:
      uint64_t result = 0x6E776F6E6B6E75;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UserIdentityClassification(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UserIdentityClassification()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UserIdentityClassification()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UserIdentityClassification()
{
  return Hasher._finalize()();
}

SiriKitRuntime::UserIdentityClassification_optional protocol witness for RawRepresentable.init(rawValue:) in conformance UserIdentityClassification(Swift::String *a1)
{
  return UserIdentityClassification.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance UserIdentityClassification(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE900000000000074;
  uint64_t v3 = 0x6E656469666E6F63;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x6E776F6E6BLL;
      goto LABEL_3;
    case 2:
      *a1 = 0x31657275736E75;
      a1[1] = 0xE700000000000000;
      break;
    case 3:
      *a1 = 0x4E657275736E75;
      a1[1] = 0xE700000000000000;
      break;
    case 4:
      *a1 = 0x6E776F6E6B6E75;
      a1[1] = 0xE700000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

SiriKitRuntime::UserAttribute_optional __swiftcall UserAttribute.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of UserAttribute.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *uint64_t v4 = v7;
  return result;
}

uint64_t UserAttribute.rawValue.getter()
{
  if (*v0) {
    return 0x726564697374756FLL;
  }
  else {
    return 0x72656E776FLL;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UserAttribute(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UserAttribute()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance UserAttribute()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UserAttribute()
{
  return Hasher._finalize()();
}

SiriKitRuntime::UserAttribute_optional protocol witness for RawRepresentable.init(rawValue:) in conformance UserAttribute(Swift::String *a1)
{
  return UserAttribute.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance UserAttribute(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x72656E776FLL;
  if (*v1) {
    uint64_t v2 = 0x726564697374756FLL;
  }
  unint64_t v3 = 0xE500000000000000;
  if (*v1) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t static UserSpecificInfo.supportsSecureCoding.getter()
{
  return static UserSpecificInfo.supportsSecureCoding;
}

uint64_t static UserSpecificInfo.supportsSecureCoding.setter(char a1)
{
  uint64_t result = swift_beginAccess();
  static UserSpecificInfo.supportsSecureCoding = a1;
  return result;
}

uint64_t (*static UserSpecificInfo.supportsSecureCoding.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t UserSpecificInfo.userId.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___SKEUserSpecificInfo_userId);
  swift_bridgeObjectRetain();
  return v1;
}

void UserSpecificInfo.userIdentityClassification.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_userIdentityClassification);
}

uint64_t UserSpecificInfo.rawVoiceIDScore.getter()
{
  return *(unsigned int *)(v0 + OBJC_IVAR___SKEUserSpecificInfo_rawVoiceIDScore);
}

void UserSpecificInfo.userAttribute.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_userAttribute);
}

uint64_t UserSpecificInfo.isFirstInteractionForUser.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SKEUserSpecificInfo_isFirstInteractionForUser);
}

uint64_t UserSpecificInfo.didSpeakerChange.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SKEUserSpecificInfo_didSpeakerChange);
}

uint64_t UserSpecificInfo.isOnlyUserInHome.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SKEUserSpecificInfo_isOnlyUserInHome);
}

uint64_t UserSpecificInfo.voiceProfilesInFlight.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SKEUserSpecificInfo_voiceProfilesInFlight);
}

uint64_t UserSpecificInfo.twentyFourHourTimeDisplay.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SKEUserSpecificInfo_twentyFourHourTimeDisplay);
}

uint64_t UserSpecificInfo.explicitContentAllowed.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SKEUserSpecificInfo_explicitContentAllowed);
}

uint64_t UserSpecificInfo.censorSpeech.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SKEUserSpecificInfo_censorSpeech);
}

uint64_t UserSpecificInfo.isUserSessionActive.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SKEUserSpecificInfo_isUserSessionActive);
}

uint64_t UserSpecificInfo.meetsUserSessionThreshold.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SKEUserSpecificInfo_meetsUserSessionThreshold);
}

uint64_t UserSpecificInfo.meetsPersonalRequestThreshold.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SKEUserSpecificInfo_meetsPersonalRequestThreshold);
}

uint64_t UserSpecificInfo.hasActiveUserSession.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SKEUserSpecificInfo_hasActiveUserSession);
}

uint64_t UserSpecificInfo.companionAssistantId.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR___SKEUserSpecificInfo_companionAssistantId);
}

void *UserSpecificInfo.meCard.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR___SKEUserSpecificInfo_meCard);
  id v2 = v1;
  return v1;
}

uint64_t UserSpecificInfo.preferredLanguage.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR___SKEUserSpecificInfo_preferredLanguage);
}

uint64_t UserSpecificInfo.countryCode.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR___SKEUserSpecificInfo_countryCode);
}

uint64_t UserSpecificInfo.temperatureUnit.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR___SKEUserSpecificInfo_temperatureUnit);
}

uint64_t UserSpecificInfo.wasSpeechProfileUsedByASR.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR___SKEUserSpecificInfo_wasSpeechProfileUsedByASR);
}

unint64_t UserSpecificInfo.lowScoreThreshold.getter()
{
  return *(unsigned int *)(v0 + OBJC_IVAR___SKEUserSpecificInfo_lowScoreThreshold) | ((unint64_t)*(unsigned __int8 *)(v0 + OBJC_IVAR___SKEUserSpecificInfo_lowScoreThreshold + 4) << 32);
}

uint64_t UserSpecificInfo.personaId.getter()
{
  return ConversationCommitResultXPC.reparseExecutionRequestID.getter(&OBJC_IVAR___SKEUserSpecificInfo_personaId);
}

id UserSpecificInfo.init(userId:userIdentityClassification:rawVoiceIDScore:userAttribute:isFirstInteractionForUser:didSpeakerChange:isOnlyUserInHome:voiceProfilesInFlight:twentyFourHourTimeDisplay:explicitContentAllowed:censorSpeech:wasSpeechProfileUsedByASR:companionAssistantId:meCard:preferredLanguage:countryCode:temperatureUnit:lowScoreThreshold:isUserSessionActive:personaId:meetsUserSessionThreshold:meetsPersonalRequestThreshold:hasActiveUserSession:)(uint64_t a1, uint64_t a2, unsigned char *a3, int a4, unsigned char *a5, char a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,char a24,__int16 a25,char a26,uint64_t a27,uint64_t a28,char a29,char a30,char a31)
{
  v31[OBJC_IVAR___SKEUserSpecificInfo____lazy_storage___isGroundingConditionallyNeeded] = 2;
  id v32 = &v31[OBJC_IVAR___SKEUserSpecificInfo_userId];
  *id v32 = a1;
  v32[1] = a2;
  v31[OBJC_IVAR___SKEUserSpecificInfo_userIdentityClassification] = *a3;
  *(_DWORD *)&v31[OBJC_IVAR___SKEUserSpecificInfo_rawVoiceIDScore] = a4;
  v31[OBJC_IVAR___SKEUserSpecificInfo_userAttribute] = *a5 & 1;
  v31[OBJC_IVAR___SKEUserSpecificInfo_isFirstInteractionForUser] = a6;
  v31[OBJC_IVAR___SKEUserSpecificInfo_didSpeakerChange] = a7;
  v31[OBJC_IVAR___SKEUserSpecificInfo_isOnlyUserInHome] = a8;
  v31[OBJC_IVAR___SKEUserSpecificInfo_explicitContentAllowed] = a11;
  v31[OBJC_IVAR___SKEUserSpecificInfo_censorSpeech] = a12;
  v31[OBJC_IVAR___SKEUserSpecificInfo_wasSpeechProfileUsedByASR] = a13;
  uint64_t v33 = &v31[OBJC_IVAR___SKEUserSpecificInfo_companionAssistantId];
  void *v33 = a14;
  v33[1] = a15;
  *(void *)&v31[OBJC_IVAR___SKEUserSpecificInfo_meCard] = a16;
  v31[OBJC_IVAR___SKEUserSpecificInfo_voiceProfilesInFlight] = a9;
  v31[OBJC_IVAR___SKEUserSpecificInfo_twentyFourHourTimeDisplay] = a10;
  uint64_t v34 = &v31[OBJC_IVAR___SKEUserSpecificInfo_preferredLanguage];
  *uint64_t v34 = a17;
  v34[1] = a18;
  id v35 = &v31[OBJC_IVAR___SKEUserSpecificInfo_countryCode];
  *id v35 = a19;
  v35[1] = a20;
  uint64_t v36 = &v31[OBJC_IVAR___SKEUserSpecificInfo_temperatureUnit];
  *uint64_t v36 = a21;
  v36[1] = a22;
  char v37 = &v31[OBJC_IVAR___SKEUserSpecificInfo_lowScoreThreshold];
  *(_DWORD *)char v37 = a23;
  v37[4] = a24 & 1;
  v31[OBJC_IVAR___SKEUserSpecificInfo_isUserSessionActive] = a26;
  id v38 = &v31[OBJC_IVAR___SKEUserSpecificInfo_personaId];
  *id v38 = a27;
  v38[1] = a28;
  v31[OBJC_IVAR___SKEUserSpecificInfo_meetsUserSessionThreshold] = a29;
  v31[OBJC_IVAR___SKEUserSpecificInfo_meetsPersonalRequestThreshold] = a30;
  v31[OBJC_IVAR___SKEUserSpecificInfo_hasActiveUserSession] = a31;
  v40.receiver = v31;
  v40.super_class = (Class)type metadata accessor for UserSpecificInfo();
  return objc_msgSendSuper2(&v40, sel_init);
}

uint64_t type metadata accessor for UserSpecificInfo()
{
  return self;
}

id UserSpecificInfo.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return UserSpecificInfo.init(coder:)(a1);
}

id UserSpecificInfo.init(coder:)(void *a1)
{
  v1[OBJC_IVAR___SKEUserSpecificInfo____lazy_storage___isGroundingConditionallyNeeded] = 2;
  type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSString);
  id v3 = v1;
  uint64_t v4 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v4)
  {

LABEL_14:
    type metadata accessor for UserSpecificInfo();
    swift_deallocPartialClassInstance();
    return 0;
  }
  Swift::Int v5 = (void *)v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v7 = (uint64_t *)&v3[OBJC_IVAR___SKEUserSpecificInfo_userId];
  *char v7 = v6;
  v7[1] = v8;
  uint64_t v9 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v9)
  {

LABEL_12:
    goto LABEL_13;
  }
  char v10 = (void *)v9;
  v11._uint64_t countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  UserIdentityClassification.init(rawValue:)(v11);
  if (v98 == 5)
  {

LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v3[OBJC_IVAR___SKEUserSpecificInfo_userIdentityClassification] = v98;
  id v12 = (void *)MEMORY[0x1BA9E2DD0](0x6563696F56776172, 0xEF65726F63534449);
  unsigned int v13 = objc_msgSend(a1, sel_decodeInt32ForKey_, v12);

  *(_DWORD *)&v3[OBJC_IVAR___SKEUserSpecificInfo_rawVoiceIDScore] = v13;
  uint64_t v14 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000019, 0x80000001BA071770);
  LOBYTE(v13) = objc_msgSend(a1, sel_decodeBoolForKey_, v14);

  v3[OBJC_IVAR___SKEUserSpecificInfo_isFirstInteractionForUser] = v13;
  uint64_t v15 = NSCoder.decodeObject<A>(of:forKey:)();
  if (!v15)
  {

    goto LABEL_12;
  }
  unint64_t v96 = (void *)v15;
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;
  v19._uint64_t countAndFlagsBits = v16;
  v19._object = v18;
  Swift::Int v20 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of UserSpecificInfo.init(coder:), v19);
  swift_bridgeObjectRelease();
  if (v20)
  {
    if (v20 != 1)
    {

      goto LABEL_13;
    }
    char v21 = 1;
  }
  else
  {
    char v21 = 0;
  }
  v3[OBJC_IVAR___SKEUserSpecificInfo_userAttribute] = v21;
  uint64_t v24 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000010, 0x80000001BA071790);
  unsigned __int8 v25 = objc_msgSend(a1, (SEL)&selRef_setSiriEnabled_ + 2, v24);

  v3[OBJC_IVAR___SKEUserSpecificInfo_didSpeakerChange] = v25;
  id v26 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000010, 0x80000001BA0717B0);
  LOBYTE(v24) = objc_msgSend(a1, (SEL)&selRef_setSiriEnabled_ + 2, v26);

  v3[OBJC_IVAR___SKEUserSpecificInfo_isOnlyUserInHome] = (char)v24;
  id v27 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000015, 0x80000001BA0717D0);
  LOBYTE(v24) = objc_msgSend(a1, (SEL)&selRef_setSiriEnabled_ + 2, v27);

  v3[OBJC_IVAR___SKEUserSpecificInfo_voiceProfilesInFlight] = (char)v24;
  unint64_t v28 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000019, 0x80000001BA0717F0);
  unsigned __int8 v29 = objc_msgSend(a1, (SEL)&selRef_setSiriEnabled_ + 2, v28);

  v3[OBJC_IVAR___SKEUserSpecificInfo_twentyFourHourTimeDisplay] = v29;
  uint64_t v30 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000016, 0x80000001BA071810);
  unsigned __int8 v31 = objc_msgSend(a1, (SEL)&selRef_setSiriEnabled_ + 2, v30);

  v3[OBJC_IVAR___SKEUserSpecificInfo_explicitContentAllowed] = v31;
  id v32 = (void *)MEMORY[0x1BA9E2DD0](0x7053726F736E6563, 0xEC00000068636565);
  unsigned __int8 v33 = objc_msgSend(a1, (SEL)&selRef_setSiriEnabled_ + 2, v32);

  v3[OBJC_IVAR___SKEUserSpecificInfo_censorSpeech] = v33;
  uint64_t v34 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000019, 0x80000001BA071830);
  unsigned __int8 v35 = objc_msgSend(a1, (SEL)&selRef_setSiriEnabled_ + 2, v34);

  v3[OBJC_IVAR___SKEUserSpecificInfo_wasSpeechProfileUsedByASR] = v35;
  uint64_t v36 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000013, 0x80000001BA071850);
  unsigned __int8 v37 = objc_msgSend(a1, (SEL)&selRef_setSiriEnabled_ + 2, v36);

  v3[OBJC_IVAR___SKEUserSpecificInfo_isUserSessionActive] = v37;
  id v38 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000019, 0x80000001BA065690);
  LOBYTE(v24) = objc_msgSend(a1, (SEL)&selRef_setSiriEnabled_ + 2, v38);

  v3[OBJC_IVAR___SKEUserSpecificInfo_meetsUserSessionThreshold] = (char)v24;
  uint64_t v39 = (void *)MEMORY[0x1BA9E2DD0](0xD00000000000001DLL, 0x80000001BA071870);
  LOBYTE(v24) = objc_msgSend(a1, (SEL)&selRef_setSiriEnabled_ + 2, v39);

  v3[OBJC_IVAR___SKEUserSpecificInfo_meetsPersonalRequestThreshold] = (char)v24;
  objc_super v40 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000014, 0x80000001BA071890);
  unsigned __int8 v41 = objc_msgSend(a1, (SEL)&selRef_setSiriEnabled_ + 2, v40);

  v3[OBJC_IVAR___SKEUserSpecificInfo_hasActiveUserSession] = v41;
  id v42 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000014, 0x80000001BA0718B0);
  unsigned int v43 = objc_msgSend(a1, sel_containsValueForKey_, v42);

  if (v43)
  {
    uint64_t v44 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v44)
    {
      uint64_t v45 = (void *)v44;
      uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v48 = v47;
    }
    else
    {
      uint64_t v46 = 0;
      uint64_t v48 = 0;
    }
    uint64_t v50 = &off_1E61F1000;
    char v51 = (uint64_t *)&v3[OBJC_IVAR___SKEUserSpecificInfo_companionAssistantId];
    *char v51 = v46;
    v51[1] = v48;
  }
  else
  {
    uint64_t v49 = &v3[OBJC_IVAR___SKEUserSpecificInfo_companionAssistantId];
    *(void *)uint64_t v49 = 0;
    *((void *)v49 + 1) = 0;
    uint64_t v50 = &off_1E61F1000;
  }
  char v52 = (void *)MEMORY[0x1BA9E2DD0](0x64726143656DLL, 0xE600000000000000);
  unsigned int v53 = objc_msgSend(a1, (SEL)v50[280], v52);

  if (v53)
  {
    type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAPerson);
    uint64_t v54 = NSCoder.decodeObject<A>(of:forKey:)();
  }
  else
  {
    uint64_t v54 = 0;
  }
  *(void *)&v3[OBJC_IVAR___SKEUserSpecificInfo_meCard] = v54;
  uint64_t v55 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000011, 0x80000001BA0718D0);
  unsigned int v56 = objc_msgSend(a1, (SEL)v50[280], v55);

  if (v56)
  {
    uint64_t v57 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v57)
    {
      char v58 = (void *)v57;
      uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v61 = v60;
    }
    else
    {
      uint64_t v59 = 0;
      uint64_t v61 = 0;
    }
    uint64_t v63 = (uint64_t *)&v3[OBJC_IVAR___SKEUserSpecificInfo_preferredLanguage];
    *uint64_t v63 = v59;
    v63[1] = v61;
    uint64_t v50 = &off_1E61F1000;
  }
  else
  {
    uint64_t v62 = &v3[OBJC_IVAR___SKEUserSpecificInfo_preferredLanguage];
    *(void *)uint64_t v62 = 0;
    *((void *)v62 + 1) = 0;
  }
  unint64_t v64 = (void *)MEMORY[0x1BA9E2DD0](0x437972746E756F63, 0xEB0000000065646FLL);
  unsigned int v65 = objc_msgSend(a1, (SEL)v50[280], v64);

  if (v65)
  {
    uint64_t v66 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v66)
    {
      uint64_t v67 = (void *)v66;
      uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v70 = v69;
    }
    else
    {
      uint64_t v68 = 0;
      uint64_t v70 = 0;
    }
    uint64_t v72 = (uint64_t *)&v3[OBJC_IVAR___SKEUserSpecificInfo_countryCode];
    uint64_t *v72 = v68;
    v72[1] = v70;
    uint64_t v50 = &off_1E61F1000;
  }
  else
  {
    uint64_t v71 = &v3[OBJC_IVAR___SKEUserSpecificInfo_countryCode];
    *(void *)uint64_t v71 = 0;
    *((void *)v71 + 1) = 0;
  }
  uint64_t v73 = (void *)MEMORY[0x1BA9E2DD0](0x74617265706D6574, 0xEF74696E55657275);
  unsigned int v74 = objc_msgSend(a1, (SEL)v50[280], v73);

  if (v74)
  {
    uint64_t v75 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v75)
    {
      uint64_t v76 = (void *)v75;
      uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v79 = v78;
    }
    else
    {
      uint64_t v77 = 0;
      uint64_t v79 = 0;
    }
    id v81 = (uint64_t *)&v3[OBJC_IVAR___SKEUserSpecificInfo_temperatureUnit];
    *id v81 = v77;
    v81[1] = v79;
    uint64_t v50 = &off_1E61F1000;
  }
  else
  {
    uint64_t v80 = &v3[OBJC_IVAR___SKEUserSpecificInfo_temperatureUnit];
    *(void *)uint64_t v80 = 0;
    *((void *)v80 + 1) = 0;
  }
  Swift::Int v82 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000011, 0x80000001BA0718F0);
  unsigned int v83 = objc_msgSend(a1, (SEL)v50[280], v82);

  if (v83)
  {
    uint64_t v84 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000011, 0x80000001BA0718F0);
    unsigned int v85 = objc_msgSend(a1, sel_decodeInt32ForKey_, v84, v96);
  }
  else
  {
    unsigned int v85 = 0;
  }
  uint64_t v86 = &v3[OBJC_IVAR___SKEUserSpecificInfo_lowScoreThreshold];
  *(_DWORD *)uint64_t v86 = v85;
  v86[4] = v83 ^ 1;
  uint64_t v87 = (void *)MEMORY[0x1BA9E2DD0](0x49616E6F73726570, 0xE900000000000064);
  unsigned int v88 = objc_msgSend(a1, (SEL)v50[280], v87);

  if (v88)
  {
    uint64_t v89 = NSCoder.decodeObject<A>(of:forKey:)();
    if (v89)
    {
      unint64_t v90 = (void *)v89;
      uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v93 = v92;
    }
    else
    {

      uint64_t v91 = 0;
      uint64_t v93 = 0;
    }
    unint64_t v95 = (uint64_t *)&v3[OBJC_IVAR___SKEUserSpecificInfo_personaId];
    *unint64_t v95 = v91;
    v95[1] = v93;
  }
  else
  {

    uint64_t v94 = &v3[OBJC_IVAR___SKEUserSpecificInfo_personaId];
    *(void *)uint64_t v94 = 0;
    *((void *)v94 + 1) = 0;
  }

  v97.receiver = v3;
  v97.super_class = (Class)type metadata accessor for UserSpecificInfo();
  id v22 = objc_msgSendSuper2(&v97, sel_init);

  return v22;
}

Swift::Void __swiftcall UserSpecificInfo.encode(with:)(NSCoder with)
{
  id v3 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_userId), *(void *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_userId + 8));
  uint64_t v4 = (void *)MEMORY[0x1BA9E2DD0](0x644972657375, 0xE600000000000000);
  [(objc_class *)with.super.isa encodeObject:v3 forKey:v4];

  unint64_t v5 = 0xE900000000000074;
  uint64_t v6 = 0x6E656469666E6F63;
  switch(*(unsigned char *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_userIdentityClassification))
  {
    case 1:
      unint64_t v5 = 0xE500000000000000;
      uint64_t v6 = 0x6E776F6E6BLL;
      break;
    case 2:
      unint64_t v5 = 0xE700000000000000;
      uint64_t v6 = 0x31657275736E75;
      break;
    case 3:
      unint64_t v5 = 0xE700000000000000;
      uint64_t v6 = 0x4E657275736E75;
      break;
    case 4:
      unint64_t v5 = 0xE700000000000000;
      uint64_t v6 = 0x6E776F6E6B6E75;
      break;
    default:
      break;
  }
  char v7 = (void *)MEMORY[0x1BA9E2DD0](v6, v5);
  swift_bridgeObjectRelease();
  uint64_t v8 = (void *)MEMORY[0x1BA9E2DD0](0xD00000000000001ALL, 0x80000001BA071750);
  [(objc_class *)with.super.isa encodeObject:v7 forKey:v8];

  uint64_t v9 = *(unsigned int *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_rawVoiceIDScore);
  char v10 = (void *)MEMORY[0x1BA9E2DD0](0x6563696F56776172, 0xEF65726F63534449);
  [(objc_class *)with.super.isa encodeInt32:v9 forKey:v10];

  uint64_t v11 = *(unsigned __int8 *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_isFirstInteractionForUser);
  id v12 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000019, 0x80000001BA071770);
  [(objc_class *)with.super.isa encodeBool:v11 forKey:v12];

  if (*(unsigned char *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_userAttribute)) {
    uint64_t v13 = 0x726564697374756FLL;
  }
  else {
    uint64_t v13 = 0x72656E776FLL;
  }
  if (*(unsigned char *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_userAttribute)) {
    unint64_t v14 = 0xE800000000000000;
  }
  else {
    unint64_t v14 = 0xE500000000000000;
  }
  uint64_t v15 = (void *)MEMORY[0x1BA9E2DD0](v13, v14);
  swift_bridgeObjectRelease();
  uint64_t v16 = (void *)MEMORY[0x1BA9E2DD0](0x7274744172657375, 0xED00006574756269);
  [(objc_class *)with.super.isa encodeObject:v15 forKey:v16];

  uint64_t v17 = *(unsigned __int8 *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_didSpeakerChange);
  uint64_t v18 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000010, 0x80000001BA071790);
  [(objc_class *)with.super.isa encodeBool:v17 forKey:v18];

  uint64_t v19 = *(unsigned __int8 *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_isOnlyUserInHome);
  Swift::Int v20 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000010, 0x80000001BA0717B0);
  [(objc_class *)with.super.isa encodeBool:v19 forKey:v20];

  uint64_t v21 = *(unsigned __int8 *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_voiceProfilesInFlight);
  id v22 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000015, 0x80000001BA0717D0);
  [(objc_class *)with.super.isa encodeBool:v21 forKey:v22];

  uint64_t v23 = *(unsigned __int8 *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_twentyFourHourTimeDisplay);
  uint64_t v24 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000019, 0x80000001BA0717F0);
  [(objc_class *)with.super.isa encodeBool:v23 forKey:v24];

  uint64_t v25 = *(unsigned __int8 *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_explicitContentAllowed);
  id v26 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000016, 0x80000001BA071810);
  [(objc_class *)with.super.isa encodeBool:v25 forKey:v26];

  uint64_t v27 = *(unsigned __int8 *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_censorSpeech);
  unint64_t v28 = (void *)MEMORY[0x1BA9E2DD0](0x7053726F736E6563, 0xEC00000068636565);
  [(objc_class *)with.super.isa encodeBool:v27 forKey:v28];

  uint64_t v29 = *(unsigned __int8 *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_wasSpeechProfileUsedByASR);
  uint64_t v30 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000019, 0x80000001BA071830);
  [(objc_class *)with.super.isa encodeBool:v29 forKey:v30];

  uint64_t v31 = *(unsigned __int8 *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_isUserSessionActive);
  id v32 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000013, 0x80000001BA071850);
  [(objc_class *)with.super.isa encodeBool:v31 forKey:v32];

  uint64_t v33 = *(unsigned __int8 *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_meetsUserSessionThreshold);
  uint64_t v34 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000019, 0x80000001BA065690);
  [(objc_class *)with.super.isa encodeBool:v33 forKey:v34];

  uint64_t v35 = *(unsigned __int8 *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_meetsPersonalRequestThreshold);
  uint64_t v36 = (void *)MEMORY[0x1BA9E2DD0](0xD00000000000001DLL, 0x80000001BA071870);
  [(objc_class *)with.super.isa encodeBool:v35 forKey:v36];

  uint64_t v37 = *(unsigned __int8 *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_hasActiveUserSession);
  id v38 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000014, 0x80000001BA071890);
  [(objc_class *)with.super.isa encodeBool:v37 forKey:v38];

  if (*(void *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_companionAssistantId + 8))
  {
    uint64_t v39 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_companionAssistantId));
    objc_super v40 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000014, 0x80000001BA0718B0);
    [(objc_class *)with.super.isa encodeObject:v39 forKey:v40];
  }
  unsigned __int8 v41 = *(void **)(v1 + OBJC_IVAR___SKEUserSpecificInfo_meCard);
  if (v41)
  {
    id v42 = v41;
    unsigned int v43 = (void *)MEMORY[0x1BA9E2DD0](0x64726143656DLL, 0xE600000000000000);
    [(objc_class *)with.super.isa encodeObject:v42 forKey:v43];
  }
  if (*(void *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_preferredLanguage + 8))
  {
    uint64_t v44 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_preferredLanguage));
    uint64_t v45 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000011, 0x80000001BA0718D0);
    [(objc_class *)with.super.isa encodeObject:v44 forKey:v45];
  }
  if (*(void *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_countryCode + 8))
  {
    uint64_t v46 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_countryCode));
    uint64_t v47 = (void *)MEMORY[0x1BA9E2DD0](0x437972746E756F63, 0xEB0000000065646FLL);
    [(objc_class *)with.super.isa encodeObject:v46 forKey:v47];
  }
  if (*(void *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_temperatureUnit + 8))
  {
    uint64_t v48 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_temperatureUnit));
    uint64_t v49 = (void *)MEMORY[0x1BA9E2DD0](0x74617265706D6574, 0xEF74696E55657275);
    [(objc_class *)with.super.isa encodeObject:v48 forKey:v49];
  }
  if ((*(unsigned char *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_lowScoreThreshold + 4) & 1) == 0)
  {
    uint64_t v50 = *(unsigned int *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_lowScoreThreshold);
    char v51 = (void *)MEMORY[0x1BA9E2DD0](0xD000000000000011, 0x80000001BA0718F0);
    [(objc_class *)with.super.isa encodeInt32:v50 forKey:v51];
  }
  if (*(void *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_personaId + 8))
  {
    char v52 = (void *)MEMORY[0x1BA9E2DD0](*(void *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_personaId));
    id v53 = (id)MEMORY[0x1BA9E2DD0](0x49616E6F73726570, 0xE900000000000064);
    [(objc_class *)with.super.isa encodeObject:v52 forKey:v53];
  }
}

uint64_t UserSpecificInfo.isGroundingConditionallyNeeded.getter()
{
  uint64_t v1 = OBJC_IVAR___SKEUserSpecificInfo____lazy_storage___isGroundingConditionallyNeeded;
  int v2 = *(unsigned __int8 *)(v0 + OBJC_IVAR___SKEUserSpecificInfo____lazy_storage___isGroundingConditionallyNeeded);
  if (v2 == 2)
  {
    char v3 = closure #1 in UserSpecificInfo.isGroundingConditionallyNeeded.getter(v0);
    *(unsigned char *)(v0 + v1) = v3 & 1;
  }
  else
  {
    char v3 = v2 & 1;
  }
  return v3 & 1;
}

uint64_t closure #1 in UserSpecificInfo.isGroundingConditionallyNeeded.getter(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + OBJC_IVAR___SKEUserSpecificInfo_isOnlyUserInHome);
  if (v1 == 1)
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.executor);
    char v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      unint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v5 = 0;
      uint64_t v6 = "isGroundingConditionallyNeeded: false: Only user in home";
LABEL_10:
      _os_log_impl(&dword_1B9C64000, v3, v4, v6, v5, 2u);
      MEMORY[0x1BA9E48C0](v5, -1, -1);
    }
  }
  else
  {
    if (one-time initialization token for executor != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.executor);
    char v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      unint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v5 = 0;
      uint64_t v6 = "isGroundingConditionallyNeeded: true, DialogEngine will determine if grounding is needed";
      goto LABEL_10;
    }
  }

  return v1 ^ 1u;
}

uint64_t UserSpecificInfo.isGroundingConditionallyNeeded.setter(uint64_t result)
{
  *(unsigned char *)(v1 + OBJC_IVAR___SKEUserSpecificInfo____lazy_storage___isGroundingConditionallyNeeded) = result;
  return result;
}

uint64_t (*UserSpecificInfo.isGroundingConditionallyNeeded.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = UserSpecificInfo.isGroundingConditionallyNeeded.getter() & 1;
  return UserSpecificInfo.isGroundingConditionallyNeeded.modify;
}

uint64_t UserSpecificInfo.isGroundingConditionallyNeeded.modify(uint64_t result)
{
  *(unsigned char *)(*(void *)result + OBJC_IVAR___SKEUserSpecificInfo____lazy_storage___isGroundingConditionallyNeeded) = *(unsigned char *)(result + 8);
  return result;
}

uint64_t UserSpecificInfo.isEqual(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  outlined init with copy of Any?(a1, (uint64_t)v29);
  if (v30)
  {
    type metadata accessor for UserSpecificInfo();
    if (swift_dynamicCast())
    {
      BOOL v3 = *(void *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_userId) == *(void *)&v28[OBJC_IVAR___SKEUserSpecificInfo_userId]
        && *(void *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_userId + 8) == *(void *)&v28[OBJC_IVAR___SKEUserSpecificInfo_userId
                                                                                         + 8];
      if (!v3 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
        || (specialized == infix<A>(_:_:)(*(unsigned char *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_userIdentityClassification), v28[OBJC_IVAR___SKEUserSpecificInfo_userIdentityClassification]) & 1) == 0|| *(_DWORD *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_rawVoiceIDScore) != *(_DWORD *)&v28[OBJC_IVAR___SKEUserSpecificInfo_rawVoiceIDScore]|| *(unsigned __int8 *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_isFirstInteractionForUser) != v28[OBJC_IVAR___SKEUserSpecificInfo_isFirstInteractionForUser])
      {
        goto LABEL_35;
      }
      if (*(unsigned char *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_userAttribute)) {
        uint64_t v4 = 0x726564697374756FLL;
      }
      else {
        uint64_t v4 = 0x72656E776FLL;
      }
      if (*(unsigned char *)(v1 + OBJC_IVAR___SKEUserSpecificInfo_userAttribute)) {
        unint64_t v5 = 0xE800000000000000;
      }
      else {
        unint64_t v5 = 0xE500000000000000;
      }
      if (v28[OBJC_IVAR___SKEUserSpecificInfo_userAttribute]) {
        uint64_t v6 = 0x726564697374756FLL;
      }
      else {
        uint64_t v6 = 0x72656E776FLL;
      }
      if (v28[OBJC_IVAR___SKEUserSpecificInfo_userAttribute]) {
        unint64_t v7 = 0xE800000000000000;
      }
      else {
        unint64_t v7 = 0xE500000000000000;
      }
      if (v4 == v6 && v5 == v7)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v8 & 1) == 0) {
          goto LABEL_35;
        }
      }
      if (*(unsigned __int8 *)(v2 + OBJC_IVAR___SKEUserSpecificInfo_didSpeakerChange) != v28[OBJC_IVAR___SKEUserSpecificInfo_didSpeakerChange]
        || *(unsigned __int8 *)(v2 + OBJC_IVAR___SKEUserSpecificInfo_isOnlyUserInHome) != v28[OBJC_IVAR___SKEUserSpecificInfo_isOnlyUserInHome]
        || *(unsigned __int8 *)(v2 + OBJC_IVAR___SKEUserSpecificInfo_voiceProfilesInFlight) != v28[OBJC_IVAR___SKEUserSpecificInfo_voiceProfilesInFlight]
        || *(unsigned __int8 *)(v2 + OBJC_IVAR___SKEUserSpecificInfo_twentyFourHourTimeDisplay) != v28[OBJC_IVAR___SKEUserSpecificInfo_twentyFourHourTimeDisplay]
        || *(unsigned __int8 *)(v2 + OBJC_IVAR___SKEUserSpecificInfo_explicitContentAllowed) != v28[OBJC_IVAR___SKEUserSpecificInfo_explicitContentAllowed]
        || *(unsigned __int8 *)(v2 + OBJC_IVAR___SKEUserSpecificInfo_censorSpeech) != v28[OBJC_IVAR___SKEUserSpecificInfo_censorSpeech]
        || *(unsigned __int8 *)(v2 + OBJC_IVAR___SKEUserSpecificInfo_wasSpeechProfileUsedByASR) != v28[OBJC_IVAR___SKEUserSpecificInfo_wasSpeechProfileUsedByASR])
      {
        goto LABEL_35;
      }
      uint64_t v11 = *(void *)(v2 + OBJC_IVAR___SKEUserSpecificInfo_companionAssistantId + 8);
      uint64_t v12 = *(void *)&v28[OBJC_IVAR___SKEUserSpecificInfo_companionAssistantId + 8];
      if (v11)
      {
        if (!v12
          || (*(void *)(v2 + OBJC_IVAR___SKEUserSpecificInfo_companionAssistantId) != *(void *)&v28[OBJC_IVAR___SKEUserSpecificInfo_companionAssistantId]
           || v11 != v12)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_35;
        }
      }
      else if (v12)
      {
        goto LABEL_35;
      }
      uint64_t v13 = *(void **)(v2 + OBJC_IVAR___SKEUserSpecificInfo_meCard);
      unint64_t v14 = *(void **)&v28[OBJC_IVAR___SKEUserSpecificInfo_meCard];
      if (v13)
      {
        if (!v14) {
          goto LABEL_35;
        }
        type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAPerson);
        id v15 = v14;
        id v16 = v13;
        char v17 = static NSObject.== infix(_:_:)();

        if ((v17 & 1) == 0) {
          goto LABEL_35;
        }
      }
      else if (v14)
      {
        goto LABEL_35;
      }
      uint64_t v18 = *(void *)(v2 + OBJC_IVAR___SKEUserSpecificInfo_preferredLanguage + 8);
      uint64_t v19 = *(void *)&v28[OBJC_IVAR___SKEUserSpecificInfo_preferredLanguage + 8];
      if (v18)
      {
        if (!v19
          || (*(void *)(v2 + OBJC_IVAR___SKEUserSpecificInfo_preferredLanguage) != *(void *)&v28[OBJC_IVAR___SKEUserSpecificInfo_preferredLanguage]
           || v18 != v19)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_35;
        }
      }
      else if (v19)
      {
        goto LABEL_35;
      }
      uint64_t v20 = *(void *)(v2 + OBJC_IVAR___SKEUserSpecificInfo_countryCode + 8);
      uint64_t v21 = *(void *)&v28[OBJC_IVAR___SKEUserSpecificInfo_countryCode + 8];
      if (v20)
      {
        if (!v21
          || (*(void *)(v2 + OBJC_IVAR___SKEUserSpecificInfo_countryCode) != *(void *)&v28[OBJC_IVAR___SKEUserSpecificInfo_countryCode]
           || v20 != v21)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_35;
        }
      }
      else if (v21)
      {
        goto LABEL_35;
      }
      uint64_t v22 = *(void *)(v2 + OBJC_IVAR___SKEUserSpecificInfo_temperatureUnit + 8);
      uint64_t v23 = *(void *)&v28[OBJC_IVAR___SKEUserSpecificInfo_temperatureUnit + 8];
      if (v22)
      {
        if (!v23
          || (*(void *)(v2 + OBJC_IVAR___SKEUserSpecificInfo_temperatureUnit) != *(void *)&v28[OBJC_IVAR___SKEUserSpecificInfo_temperatureUnit]
           || v22 != v23)
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_35;
        }
      }
      else if (v23)
      {
        goto LABEL_35;
      }
      if (*(unsigned char *)(v2 + OBJC_IVAR___SKEUserSpecificInfo_lowScoreThreshold + 4))
      {
        if ((v28[OBJC_IVAR___SKEUserSpecificInfo_lowScoreThreshold + 4] & 1) == 0) {
          goto LABEL_35;
        }
      }
      else if ((v28[OBJC_IVAR___SKEUserSpecificInfo_lowScoreThreshold + 4] & 1) != 0 {
             || *(_DWORD *)(v2 + OBJC_IVAR___SKEUserSpecificInfo_lowScoreThreshold) != *(_DWORD *)&v28[OBJC_IVAR___SKEUserSpecificInfo_lowScoreThreshold])
      }
      {
        goto LABEL_35;
      }
      if (*(unsigned __int8 *)(v2 + OBJC_IVAR___SKEUserSpecificInfo_isUserSessionActive) == v28[OBJC_IVAR___SKEUserSpecificInfo_isUserSessionActive])
      {
        uint64_t v24 = *(void *)(v2 + OBJC_IVAR___SKEUserSpecificInfo_personaId + 8);
        uint64_t v25 = *(void *)&v28[OBJC_IVAR___SKEUserSpecificInfo_personaId + 8];
        if (v24)
        {
          if (!v25
            || (*(void *)(v2 + OBJC_IVAR___SKEUserSpecificInfo_personaId) != *(void *)&v28[OBJC_IVAR___SKEUserSpecificInfo_personaId]
             || v24 != v25)
            && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
          {
            goto LABEL_35;
          }
LABEL_84:
          if (*(unsigned __int8 *)(v2 + OBJC_IVAR___SKEUserSpecificInfo_meetsUserSessionThreshold) == v28[OBJC_IVAR___SKEUserSpecificInfo_meetsUserSessionThreshold]
            && *(unsigned __int8 *)(v2 + OBJC_IVAR___SKEUserSpecificInfo_meetsPersonalRequestThreshold) == v28[OBJC_IVAR___SKEUserSpecificInfo_meetsPersonalRequestThreshold])
          {
            char v26 = *(unsigned char *)(v2 + OBJC_IVAR___SKEUserSpecificInfo_hasActiveUserSession);
            char v27 = v28[OBJC_IVAR___SKEUserSpecificInfo_hasActiveUserSession];

            char v9 = v26 ^ v27 ^ 1;
            return v9 & 1;
          }
          goto LABEL_35;
        }
        if (!v25) {
          goto LABEL_84;
        }
      }
LABEL_35:
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v29);
  }
  char v9 = 0;
  return v9 & 1;
}

uint64_t UserSpecificInfo.debugDescription.getter()
{
  uint64_t v1 = v0;
  v213.receiver = v0;
  v213.super_class = (Class)type metadata accessor for UserSpecificInfo();
  id v2 = objc_msgSendSuper2(&v213, sel_debugDescription);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;

  v214[0] = v3;
  v214[1] = v5;
  v6._uint64_t countAndFlagsBits = 31520;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  uint64_t v8 = v214[0];
  uint64_t v7 = v214[1];
  strcpy((char *)v214, "userId: ");
  BYTE1(v214[1]) = 0;
  WORD1(v214[1]) = 0;
  HIDWORD(v214[1]) = -402653184;
  uint64_t v9 = *(void *)&v1[OBJC_IVAR___SKEUserSpecificInfo_userId];
  char v10 = *(void **)&v1[OBJC_IVAR___SKEUserSpecificInfo_userId + 8];
  swift_bridgeObjectRetain();
  v11._uint64_t countAndFlagsBits = v9;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._uint64_t countAndFlagsBits = 8236;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  uint64_t v13 = v214[0];
  unint64_t v14 = (void *)v214[1];
  v214[0] = v8;
  v214[1] = v7;
  swift_bridgeObjectRetain();
  v15._uint64_t countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = v214[0];
  uint64_t v17 = v214[1];
  v214[0] = 0xD00000000000001CLL;
  v214[1] = 0x80000001BA071910;
  unint64_t v18 = 0xE900000000000074;
  uint64_t v19 = 0x6E656469666E6F63;
  switch(v1[OBJC_IVAR___SKEUserSpecificInfo_userIdentityClassification])
  {
    case 1:
      unint64_t v18 = 0xE500000000000000;
      uint64_t v19 = 0x6E776F6E6BLL;
      break;
    case 2:
      unint64_t v18 = 0xE700000000000000;
      uint64_t v19 = 0x31657275736E75;
      break;
    case 3:
      unint64_t v18 = 0xE700000000000000;
      uint64_t v19 = 0x4E657275736E75;
      break;
    case 4:
      unint64_t v18 = 0xE700000000000000;
      uint64_t v19 = 0x6E776F6E6B6E75;
      break;
    default:
      break;
  }
  unint64_t v20 = v18;
  String.append(_:)(*(Swift::String *)&v19);
  swift_bridgeObjectRelease();
  v21._uint64_t countAndFlagsBits = 8236;
  v21._object = (void *)0xE200000000000000;
  String.append(_:)(v21);
  uint64_t v22 = v214[0];
  uint64_t v23 = (void *)v214[1];
  v214[0] = v16;
  v214[1] = v17;
  swift_bridgeObjectRetain();
  v24._uint64_t countAndFlagsBits = v22;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v25 = v214[0];
  uint64_t v26 = v214[1];
  v214[0] = 0xD000000000000011;
  v214[1] = 0x80000001BA071930;
  v27._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = 8236;
  v28._object = (void *)0xE200000000000000;
  String.append(_:)(v28);
  uint64_t v29 = v214[0];
  uint64_t v30 = (void *)v214[1];
  v214[0] = v25;
  v214[1] = v26;
  swift_bridgeObjectRetain();
  v31._uint64_t countAndFlagsBits = v29;
  v31._object = v30;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v33 = v214[0];
  uint64_t v32 = v214[1];
  int v34 = v1[OBJC_IVAR___SKEUserSpecificInfo_isFirstInteractionForUser];
  v214[0] = 0xD00000000000001BLL;
  v214[1] = 0x80000001BA071950;
  if (v34) {
    uint64_t v35 = 1702195828;
  }
  else {
    uint64_t v35 = 0x65736C6166;
  }
  if (v34) {
    unint64_t v36 = 0xE400000000000000;
  }
  else {
    unint64_t v36 = 0xE500000000000000;
  }
  unint64_t v37 = v36;
  String.append(_:)(*(Swift::String *)&v35);
  swift_bridgeObjectRelease();
  v38._uint64_t countAndFlagsBits = 8236;
  v38._object = (void *)0xE200000000000000;
  String.append(_:)(v38);
  uint64_t v39 = v214[0];
  objc_super v40 = (void *)v214[1];
  v214[0] = v33;
  v214[1] = v32;
  swift_bridgeObjectRetain();
  v41._uint64_t countAndFlagsBits = v39;
  v41._object = v40;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v43 = v214[0];
  uint64_t v42 = v214[1];
  v214[0] = 0x7274744172657375;
  v214[1] = 0xEF203A6574756269;
  if (v1[OBJC_IVAR___SKEUserSpecificInfo_userAttribute]) {
    uint64_t v44 = 0x726564697374756FLL;
  }
  else {
    uint64_t v44 = 0x72656E776FLL;
  }
  if (v1[OBJC_IVAR___SKEUserSpecificInfo_userAttribute]) {
    unint64_t v45 = 0xE800000000000000;
  }
  else {
    unint64_t v45 = 0xE500000000000000;
  }
  unint64_t v46 = v45;
  String.append(_:)(*(Swift::String *)&v44);
  swift_bridgeObjectRelease();
  v47._uint64_t countAndFlagsBits = 8236;
  v47._object = (void *)0xE200000000000000;
  String.append(_:)(v47);
  uint64_t v48 = v214[0];
  uint64_t v49 = (void *)v214[1];
  v214[0] = v43;
  v214[1] = v42;
  swift_bridgeObjectRetain();
  v50._uint64_t countAndFlagsBits = v48;
  v50._object = v49;
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v52 = v214[0];
  uint64_t v51 = v214[1];
  v214[0] = 0xD000000000000012;
  v214[1] = 0x80000001BA071970;
  if (v1[OBJC_IVAR___SKEUserSpecificInfo_didSpeakerChange]) {
    uint64_t v53 = 1702195828;
  }
  else {
    uint64_t v53 = 0x65736C6166;
  }
  if (v1[OBJC_IVAR___SKEUserSpecificInfo_didSpeakerChange]) {
    unint64_t v54 = 0xE400000000000000;
  }
  else {
    unint64_t v54 = 0xE500000000000000;
  }
  unint64_t v55 = v54;
  String.append(_:)(*(Swift::String *)&v53);
  swift_bridgeObjectRelease();
  v56._uint64_t countAndFlagsBits = 8236;
  v56._object = (void *)0xE200000000000000;
  String.append(_:)(v56);
  uint64_t v57 = v214[0];
  char v58 = (void *)v214[1];
  v214[0] = v52;
  v214[1] = v51;
  swift_bridgeObjectRetain();
  v59._uint64_t countAndFlagsBits = v57;
  v59._object = v58;
  String.append(_:)(v59);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v61 = v214[0];
  uint64_t v60 = v214[1];
  v214[0] = 0xD000000000000012;
  v214[1] = 0x80000001BA071990;
  if (v1[OBJC_IVAR___SKEUserSpecificInfo_isOnlyUserInHome]) {
    uint64_t v62 = 1702195828;
  }
  else {
    uint64_t v62 = 0x65736C6166;
  }
  if (v1[OBJC_IVAR___SKEUserSpecificInfo_isOnlyUserInHome]) {
    unint64_t v63 = 0xE400000000000000;
  }
  else {
    unint64_t v63 = 0xE500000000000000;
  }
  unint64_t v64 = v63;
  String.append(_:)(*(Swift::String *)&v62);
  swift_bridgeObjectRelease();
  v65._uint64_t countAndFlagsBits = 8236;
  v65._object = (void *)0xE200000000000000;
  String.append(_:)(v65);
  uint64_t v66 = v214[0];
  uint64_t v67 = (void *)v214[1];
  v214[0] = v61;
  v214[1] = v60;
  swift_bridgeObjectRetain();
  v68._uint64_t countAndFlagsBits = v66;
  v68._object = v67;
  String.append(_:)(v68);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v70 = v214[0];
  uint64_t v69 = v214[1];
  v214[0] = 0xD000000000000017;
  v214[1] = 0x80000001BA0719B0;
  if (v1[OBJC_IVAR___SKEUserSpecificInfo_voiceProfilesInFlight]) {
    uint64_t v71 = 1702195828;
  }
  else {
    uint64_t v71 = 0x65736C6166;
  }
  if (v1[OBJC_IVAR___SKEUserSpecificInfo_voiceProfilesInFlight]) {
    unint64_t v72 = 0xE400000000000000;
  }
  else {
    unint64_t v72 = 0xE500000000000000;
  }
  unint64_t v73 = v72;
  String.append(_:)(*(Swift::String *)&v71);
  swift_bridgeObjectRelease();
  v74._uint64_t countAndFlagsBits = 8236;
  v74._object = (void *)0xE200000000000000;
  String.append(_:)(v74);
  uint64_t v75 = v214[0];
  uint64_t v76 = (void *)v214[1];
  v214[0] = v70;
  v214[1] = v69;
  swift_bridgeObjectRetain();
  v77._uint64_t countAndFlagsBits = v75;
  v77._object = v76;
  String.append(_:)(v77);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v79 = v214[0];
  uint64_t v78 = v214[1];
  v214[0] = 0xD00000000000001BLL;
  v214[1] = 0x80000001BA0719D0;
  if (v1[OBJC_IVAR___SKEUserSpecificInfo_twentyFourHourTimeDisplay]) {
    uint64_t v80 = 1702195828;
  }
  else {
    uint64_t v80 = 0x65736C6166;
  }
  if (v1[OBJC_IVAR___SKEUserSpecificInfo_twentyFourHourTimeDisplay]) {
    unint64_t v81 = 0xE400000000000000;
  }
  else {
    unint64_t v81 = 0xE500000000000000;
  }
  unint64_t v82 = v81;
  String.append(_:)(*(Swift::String *)&v80);
  swift_bridgeObjectRelease();
  v83._uint64_t countAndFlagsBits = 8236;
  v83._object = (void *)0xE200000000000000;
  String.append(_:)(v83);
  uint64_t v84 = v214[0];
  unsigned int v85 = (void *)v214[1];
  v214[0] = v79;
  v214[1] = v78;
  swift_bridgeObjectRetain();
  v86._uint64_t countAndFlagsBits = v84;
  v86._object = v85;
  String.append(_:)(v86);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v88 = v214[0];
  uint64_t v87 = v214[1];
  v214[0] = 0xD000000000000018;
  v214[1] = 0x80000001BA0719F0;
  if (v1[OBJC_IVAR___SKEUserSpecificInfo_explicitContentAllowed]) {
    uint64_t v89 = 1702195828;
  }
  else {
    uint64_t v89 = 0x65736C6166;
  }
  if (v1[OBJC_IVAR___SKEUserSpecificInfo_explicitContentAllowed]) {
    unint64_t v90 = 0xE400000000000000;
  }
  else {
    unint64_t v90 = 0xE500000000000000;
  }
  unint64_t v91 = v90;
  String.append(_:)(*(Swift::String *)&v89);
  swift_bridgeObjectRelease();
  v92._uint64_t countAndFlagsBits = 8236;
  v92._object = (void *)0xE200000000000000;
  String.append(_:)(v92);
  uint64_t v93 = v214[0];
  uint64_t v94 = (void *)v214[1];
  v214[0] = v88;
  v214[1] = v87;
  swift_bridgeObjectRetain();
  v95._uint64_t countAndFlagsBits = v93;
  v95._object = v94;
  String.append(_:)(v95);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v97 = v214[0];
  uint64_t v96 = v214[1];
  strcpy((char *)v214, "censorSpeech: ");
  HIBYTE(v214[1]) = -18;
  if (v1[OBJC_IVAR___SKEUserSpecificInfo_censorSpeech]) {
    uint64_t v98 = 1702195828;
  }
  else {
    uint64_t v98 = 0x65736C6166;
  }
  if (v1[OBJC_IVAR___SKEUserSpecificInfo_censorSpeech]) {
    unint64_t v99 = 0xE400000000000000;
  }
  else {
    unint64_t v99 = 0xE500000000000000;
  }
  unint64_t v100 = v99;
  String.append(_:)(*(Swift::String *)&v98);
  swift_bridgeObjectRelease();
  v101._uint64_t countAndFlagsBits = 8236;
  v101._object = (void *)0xE200000000000000;
  String.append(_:)(v101);
  uint64_t v102 = v214[0];
  uint64_t v103 = (void *)v214[1];
  v214[0] = v97;
  v214[1] = v96;
  swift_bridgeObjectRetain();
  v104._uint64_t countAndFlagsBits = v102;
  v104._object = v103;
  String.append(_:)(v104);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v106 = v214[0];
  uint64_t v105 = v214[1];
  v214[0] = 0xD00000000000001BLL;
  v214[1] = 0x80000001BA071A10;
  if (v1[OBJC_IVAR___SKEUserSpecificInfo_wasSpeechProfileUsedByASR]) {
    uint64_t v107 = 1702195828;
  }
  else {
    uint64_t v107 = 0x65736C6166;
  }
  if (v1[OBJC_IVAR___SKEUserSpecificInfo_wasSpeechProfileUsedByASR]) {
    unint64_t v108 = 0xE400000000000000;
  }
  else {
    unint64_t v108 = 0xE500000000000000;
  }
  unint64_t v109 = v108;
  String.append(_:)(*(Swift::String *)&v107);
  swift_bridgeObjectRelease();
  v110._uint64_t countAndFlagsBits = 8236;
  v110._object = (void *)0xE200000000000000;
  String.append(_:)(v110);
  uint64_t v111 = v214[0];
  uint64_t v112 = (void *)v214[1];
  v214[0] = v106;
  v214[1] = v105;
  swift_bridgeObjectRetain();
  v113._uint64_t countAndFlagsBits = v111;
  v113._object = v112;
  String.append(_:)(v113);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v114 = v214[0];
  uint64_t v115 = v214[1];
  v214[0] = 0xD000000000000016;
  v214[1] = 0x80000001BA071A30;
  if (*(void *)&v1[OBJC_IVAR___SKEUserSpecificInfo_companionAssistantId + 8])
  {
    uint64_t v116 = *(void *)&v1[OBJC_IVAR___SKEUserSpecificInfo_companionAssistantId];
    uint64_t v117 = *(void **)&v1[OBJC_IVAR___SKEUserSpecificInfo_companionAssistantId + 8];
  }
  else
  {
    uint64_t v117 = (void *)0xE300000000000000;
    uint64_t v116 = 7104878;
  }
  swift_bridgeObjectRetain();
  v118._uint64_t countAndFlagsBits = v116;
  v118._object = v117;
  String.append(_:)(v118);
  swift_bridgeObjectRelease();
  v119._uint64_t countAndFlagsBits = 8236;
  v119._object = (void *)0xE200000000000000;
  String.append(_:)(v119);
  uint64_t v120 = v214[0];
  uint64_t v121 = (void *)v214[1];
  v214[0] = v114;
  v214[1] = v115;
  swift_bridgeObjectRetain();
  v122._uint64_t countAndFlagsBits = v120;
  v122._object = v121;
  String.append(_:)(v122);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v123 = v214[0];
  uint64_t v124 = v214[1];
  strcpy((char *)v214, "meCard: ");
  BYTE1(v214[1]) = 0;
  WORD1(v214[1]) = 0;
  HIDWORD(v214[1]) = -402653184;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SAPerson?);
  v125._uint64_t countAndFlagsBits = Optional.debugDescription.getter();
  String.append(_:)(v125);
  swift_bridgeObjectRelease();
  v126._uint64_t countAndFlagsBits = 8236;
  v126._object = (void *)0xE200000000000000;
  String.append(_:)(v126);
  uint64_t v127 = v214[0];
  os_log_type_t v128 = (void *)v214[1];
  v214[0] = v123;
  v214[1] = v124;
  swift_bridgeObjectRetain();
  v129._uint64_t countAndFlagsBits = v127;
  v129._object = v128;
  String.append(_:)(v129);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v131 = v214[0];
  uint64_t v130 = v214[1];
  v214[0] = 0xD000000000000013;
  v214[1] = 0x80000001BA071A50;
  if (*(void *)&v1[OBJC_IVAR___SKEUserSpecificInfo_preferredLanguage + 8])
  {
    uint64_t v132 = *(void *)&v1[OBJC_IVAR___SKEUserSpecificInfo_preferredLanguage];
    uint64_t v133 = *(void **)&v1[OBJC_IVAR___SKEUserSpecificInfo_preferredLanguage + 8];
  }
  else
  {
    uint64_t v133 = (void *)0xE300000000000000;
    uint64_t v132 = 7104878;
  }
  swift_bridgeObjectRetain();
  v134._uint64_t countAndFlagsBits = v132;
  v134._object = v133;
  String.append(_:)(v134);
  swift_bridgeObjectRelease();
  v135._uint64_t countAndFlagsBits = 8236;
  v135._object = (void *)0xE200000000000000;
  String.append(_:)(v135);
  uint64_t v136 = v214[0];
  uint64_t v137 = (void *)v214[1];
  v214[0] = v131;
  v214[1] = v130;
  swift_bridgeObjectRetain();
  v138._uint64_t countAndFlagsBits = v136;
  v138._object = v137;
  String.append(_:)(v138);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v140 = v214[0];
  uint64_t v139 = v214[1];
  strcpy((char *)v214, "countryCode: ");
  HIWORD(v214[1]) = -4864;
  if (*(void *)&v1[OBJC_IVAR___SKEUserSpecificInfo_countryCode + 8])
  {
    uint64_t v141 = *(void *)&v1[OBJC_IVAR___SKEUserSpecificInfo_countryCode];
    char v142 = *(void **)&v1[OBJC_IVAR___SKEUserSpecificInfo_countryCode + 8];
  }
  else
  {
    char v142 = (void *)0xE300000000000000;
    uint64_t v141 = 7104878;
  }
  swift_bridgeObjectRetain();
  v143._uint64_t countAndFlagsBits = v141;
  v143._object = v142;
  String.append(_:)(v143);
  swift_bridgeObjectRelease();
  v144._uint64_t countAndFlagsBits = 8236;
  v144._object = (void *)0xE200000000000000;
  String.append(_:)(v144);
  uint64_t v145 = v214[0];
  os_log_type_t v146 = (void *)v214[1];
  v214[0] = v140;
  v214[1] = v139;
  swift_bridgeObjectRetain();
  v147._uint64_t countAndFlagsBits = v145;
  v147._object = v146;
  String.append(_:)(v147);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v149 = v214[0];
  uint64_t v148 = v214[1];
  v214[0] = 0xD000000000000011;
  v214[1] = 0x80000001BA071A70;
  if (*(void *)&v1[OBJC_IVAR___SKEUserSpecificInfo_temperatureUnit + 8])
  {
    uint64_t v150 = *(void *)&v1[OBJC_IVAR___SKEUserSpecificInfo_temperatureUnit];
    uint64_t v151 = *(void **)&v1[OBJC_IVAR___SKEUserSpecificInfo_temperatureUnit + 8];
  }
  else
  {
    uint64_t v151 = (void *)0xE300000000000000;
    uint64_t v150 = 7104878;
  }
  swift_bridgeObjectRetain();
  v152._uint64_t countAndFlagsBits = v150;
  v152._object = v151;
  String.append(_:)(v152);
  swift_bridgeObjectRelease();
  v153._uint64_t countAndFlagsBits = 8236;
  v153._object = (void *)0xE200000000000000;
  String.append(_:)(v153);
  uint64_t v154 = v214[0];
  uint64_t v155 = (void *)v214[1];
  v214[0] = v149;
  v214[1] = v148;
  swift_bridgeObjectRetain();
  v156._uint64_t countAndFlagsBits = v154;
  v156._object = v155;
  String.append(_:)(v156);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v158 = v214[0];
  uint64_t v157 = v214[1];
  v214[0] = 0xD000000000000013;
  v214[1] = 0x80000001BA071A90;
  if (v1[OBJC_IVAR___SKEUserSpecificInfo_lowScoreThreshold + 4])
  {
    unint64_t v159 = 0xE300000000000000;
    uint64_t v160 = 7104878;
  }
  else
  {
    lazy protocol witness table accessor for type Int32 and conformance Int32();
    uint64_t v160 = BinaryInteger.description.getter();
    unint64_t v159 = v161;
  }
  unint64_t v162 = v159;
  String.append(_:)(*(Swift::String *)&v160);
  swift_bridgeObjectRelease();
  v163._uint64_t countAndFlagsBits = 8236;
  v163._object = (void *)0xE200000000000000;
  String.append(_:)(v163);
  uint64_t v164 = v214[0];
  uint64_t v165 = (void *)v214[1];
  v214[0] = v158;
  v214[1] = v157;
  swift_bridgeObjectRetain();
  v166._uint64_t countAndFlagsBits = v164;
  v166._object = v165;
  String.append(_:)(v166);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v168 = v214[0];
  uint64_t v167 = v214[1];
  int v169 = v1[OBJC_IVAR___SKEUserSpecificInfo_isUserSessionActive];
  v214[0] = 0xD000000000000015;
  v214[1] = 0x80000001BA071AB0;
  if (v169) {
    uint64_t v170 = 1702195828;
  }
  else {
    uint64_t v170 = 0x65736C6166;
  }
  if (v169) {
    unint64_t v171 = 0xE400000000000000;
  }
  else {
    unint64_t v171 = 0xE500000000000000;
  }
  unint64_t v172 = v171;
  String.append(_:)(*(Swift::String *)&v170);
  swift_bridgeObjectRelease();
  v173._uint64_t countAndFlagsBits = 8236;
  v173._object = (void *)0xE200000000000000;
  String.append(_:)(v173);
  uint64_t v174 = v214[0];
  long long v175 = (void *)v214[1];
  v214[0] = v168;
  v214[1] = v167;
  swift_bridgeObjectRetain();
  v176._uint64_t countAndFlagsBits = v174;
  v176._object = v175;
  String.append(_:)(v176);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v178 = v214[0];
  uint64_t v177 = v214[1];
  strcpy((char *)v214, "personaId: ");
  HIDWORD(v214[1]) = -352321536;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  v179._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v179);
  swift_bridgeObjectRelease();
  v180._uint64_t countAndFlagsBits = 32;
  v180._object = (void *)0xE100000000000000;
  String.append(_:)(v180);
  uint64_t v181 = v214[0];
  uint64_t v182 = (void *)v214[1];
  v214[0] = v178;
  v214[1] = v177;
  swift_bridgeObjectRetain();
  v183._uint64_t countAndFlagsBits = v181;
  v183._object = v182;
  String.append(_:)(v183);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v185 = v214[0];
  uint64_t v184 = v214[1];
  v214[0] = 0xD00000000000001BLL;
  v214[1] = 0x80000001BA071AD0;
  if (v1[OBJC_IVAR___SKEUserSpecificInfo_meetsUserSessionThreshold]) {
    uint64_t v186 = 1702195828;
  }
  else {
    uint64_t v186 = 0x65736C6166;
  }
  if (v1[OBJC_IVAR___SKEUserSpecificInfo_meetsUserSessionThreshold]) {
    unint64_t v187 = 0xE400000000000000;
  }
  else {
    unint64_t v187 = 0xE500000000000000;
  }
  unint64_t v188 = v187;
  String.append(_:)(*(Swift::String *)&v186);
  swift_bridgeObjectRelease();
  v189._uint64_t countAndFlagsBits = 32;
  v189._object = (void *)0xE100000000000000;
  String.append(_:)(v189);
  uint64_t v190 = v214[0];
  uint64_t v191 = (void *)v214[1];
  v214[0] = v185;
  v214[1] = v184;
  swift_bridgeObjectRetain();
  v192._uint64_t countAndFlagsBits = v190;
  v192._object = v191;
  String.append(_:)(v192);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v194 = v214[0];
  uint64_t v193 = v214[1];
  v214[0] = 0xD00000000000001FLL;
  v214[1] = 0x80000001BA071AF0;
  if (v1[OBJC_IVAR___SKEUserSpecificInfo_meetsPersonalRequestThreshold]) {
    uint64_t v195 = 1702195828;
  }
  else {
    uint64_t v195 = 0x65736C6166;
  }
  if (v1[OBJC_IVAR___SKEUserSpecificInfo_meetsPersonalRequestThreshold]) {
    unint64_t v196 = 0xE400000000000000;
  }
  else {
    unint64_t v196 = 0xE500000000000000;
  }
  unint64_t v197 = v196;
  String.append(_:)(*(Swift::String *)&v195);
  swift_bridgeObjectRelease();
  v198._uint64_t countAndFlagsBits = 32;
  v198._object = (void *)0xE100000000000000;
  String.append(_:)(v198);
  uint64_t v199 = v214[0];
  char v200 = (void *)v214[1];
  v214[0] = v194;
  v214[1] = v193;
  swift_bridgeObjectRetain();
  v201._uint64_t countAndFlagsBits = v199;
  v201._object = v200;
  String.append(_:)(v201);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v203 = v214[0];
  uint64_t v202 = v214[1];
  v214[0] = 0xD000000000000016;
  v214[1] = 0x80000001BA071B10;
  if (v1[OBJC_IVAR___SKEUserSpecificInfo_hasActiveUserSession]) {
    uint64_t v204 = 1702195828;
  }
  else {
    uint64_t v204 = 0x65736C6166;
  }
  if (v1[OBJC_IVAR___SKEUserSpecificInfo_hasActiveUserSession]) {
    unint64_t v205 = 0xE400000000000000;
  }
  else {
    unint64_t v205 = 0xE500000000000000;
  }
  unint64_t v206 = v205;
  String.append(_:)(*(Swift::String *)&v204);
  swift_bridgeObjectRelease();
  v207._uint64_t countAndFlagsBits = 32;
  v207._object = (void *)0xE100000000000000;
  String.append(_:)(v207);
  uint64_t v208 = v214[0];
  v209 = (void *)v214[1];
  v214[0] = v203;
  v214[1] = v202;
  swift_bridgeObjectRetain();
  v210._uint64_t countAndFlagsBits = v208;
  v210._object = v209;
  String.append(_:)(v210);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v211._uint64_t countAndFlagsBits = 125;
  v211._object = (void *)0xE100000000000000;
  String.append(_:)(v211);
  swift_bridgeObjectRelease();
  return v214[0];
}

unint64_t lazy protocol witness table accessor for type Int32 and conformance Int32()
{
  unint64_t result = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
  }
  return result;
}

id UserSpecificInfo.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void UserSpecificInfo.init()()
{
}

id UserSpecificInfo.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UserSpecificInfo();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t lazy protocol witness table accessor for type UserIdentityClassification and conformance UserIdentityClassification()
{
  unint64_t result = lazy protocol witness table cache variable for type UserIdentityClassification and conformance UserIdentityClassification;
  if (!lazy protocol witness table cache variable for type UserIdentityClassification and conformance UserIdentityClassification)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UserIdentityClassification and conformance UserIdentityClassification);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UserAttribute and conformance UserAttribute()
{
  unint64_t result = lazy protocol witness table cache variable for type UserAttribute and conformance UserAttribute;
  if (!lazy protocol witness table cache variable for type UserAttribute and conformance UserAttribute)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UserAttribute and conformance UserAttribute);
  }
  return result;
}

uint64_t sub_1BA04368C@<X0>(void **a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a1) + 0x128))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1BA0436F4(unsigned __int8 *a1, void **a2)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & **a2) + 0x130))(*a1);
}

unsigned char *storeEnumTagSinglePayload for UserIdentityClassification(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1BA043820);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UserIdentityClassification()
{
  return &type metadata for UserIdentityClassification;
}

unsigned char *storeEnumTagSinglePayload for UserAttribute(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1BA043924);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UserAttribute()
{
  return &type metadata for UserAttribute;
}

uint64_t method lookup function for UserSpecificInfo(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UserSpecificInfo);
}

uint64_t dispatch thunk of UserSpecificInfo.__allocating_init(userId:userIdentityClassification:rawVoiceIDScore:userAttribute:isFirstInteractionForUser:didSpeakerChange:isOnlyUserInHome:voiceProfilesInFlight:twentyFourHourTimeDisplay:explicitContentAllowed:censorSpeech:wasSpeechProfileUsedByASR:companionAssistantId:meCard:preferredLanguage:countryCode:temperatureUnit:lowScoreThreshold:isUserSessionActive:personaId:meetsUserSessionThreshold:meetsPersonalRequestThreshold:hasActiveUserSession:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 272);
  return v13(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t dispatch thunk of UserSpecificInfo.__allocating_init(coder:)()
{
  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t dispatch thunk of UserSpecificInfo.encode(with:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of UserSpecificInfo.isGroundingConditionallyNeeded.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of UserSpecificInfo.isGroundingConditionallyNeeded.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of UserSpecificInfo.isGroundingConditionallyNeeded.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x138))();
}

uint64_t *ViewMetricsLogger.blockListDialogID.unsafeMutableAddressor()
{
  if (one-time initialization token for blockListDialogID != -1) {
    swift_once();
  }
  return &static ViewMetricsLogger.blockListDialogID;
}

uint64_t static ViewMetricsLogger.blockListDialogID.getter()
{
  if (one-time initialization token for blockListDialogID != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

id specialized static ViewMetricsLogger.getSparseAssistantUtteranceView(assistantUtteranceView:)(void *a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96AD0]), sel_init);
  id v3 = objc_msgSend(a1, sel_dialogIdentifier);
  objc_msgSend(v2, sel_setDialogIdentifier_, v3);

  id v4 = objc_msgSend(a1, sel_dialogIdentifier);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = v4;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  if (one-time initialization token for blockListDialogID != -1) {
    swift_once();
  }
  uint64_t v6 = static ViewMetricsLogger.blockListDialogID;
  uint64_t v7 = *(void *)(static ViewMetricsLogger.blockListDialogID + 16);
  if (!v7)
  {
LABEL_9:
    swift_bridgeObjectRelease();
LABEL_10:
    id v9 = v2;
    id v10 = objc_msgSend(a1, sel_speakableText);
    objc_msgSend(v9, sel_setSpeakableText_, v10);

    id v11 = objc_msgSend(a1, sel_text);
    objc_msgSend(v9, sel_setText_, v11);

    goto LABEL_11;
  }
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t v8 = v6 + 40;
  while ((StringProtocol.contains<A>(_:)() & 1) == 0)
  {
    v8 += 16;
    if (!--v7)
    {
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_11:
  id v12 = v2;
  id v13 = objc_msgSend(a1, sel_dialog);
  id v14 = specialized static DialogMetricsLogger.getSparseDialog(_:)(v13);

  objc_msgSend(v12, sel_setDialog_, v14);
  return v12;
}

uint64_t specialized static ViewMetricsLogger.getSparseDisambiguationList(disambiguationList:)(void *a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96B20]), sel_init);
  id v3 = objc_msgSend(a1, sel_items);
  if (v3)
  {
    id v4 = v3;
    type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAUIListItem);
    unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (!(v5 >> 62)) {
      goto LABEL_3;
    }
  }
  else
  {
    unint64_t v5 = MEMORY[0x1E4FBC860];
    if (!(MEMORY[0x1E4FBC860] >> 62))
    {
LABEL_3:
      uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v6) {
        goto LABEL_4;
      }
LABEL_17:
      swift_bridgeObjectRelease();
LABEL_18:
      type metadata accessor for OS_dispatch_queue(0, &lazy cache variable for type metadata for SAUIListItem);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v2, sel_setItems_, isa);

      objc_msgSend(v2, sel_setAutoDisambiguationDisabled_, objc_msgSend(a1, sel_autoDisambiguationDisabled));
      id v22 = objc_msgSend(a1, sel_title);
      objc_msgSend(v2, sel_setTitle_, v22);

      id v23 = v2;
      id v24 = objc_msgSend(a1, sel_speakableText);
      objc_msgSend(v23, sel_setSpeakableText_, v24);

      return (uint64_t)v23;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v6) {
    goto LABEL_17;
  }
LABEL_4:
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v6 & 0x8000000000000000) == 0)
  {
    id v25 = v2;
    uint64_t v8 = 0;
    do
    {
      if ((v5 & 0xC000000000000001) != 0) {
        id v9 = (id)MEMORY[0x1BA9E3990](v8, v5);
      }
      else {
        id v9 = *(id *)(v5 + 8 * v8 + 32);
      }
      id v10 = v9;
      id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96B28]), sel_init);
      id v12 = objc_msgSend(v10, sel_title);
      if (v12)
      {
        uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v15 = v14;

        id v12 = (id)MEMORY[0x1BA9E2DD0](v13, v15);
        swift_bridgeObjectRelease();
      }
      objc_msgSend(v11, sel_setTitle_, v12);

      id v16 = v11;
      id v17 = objc_msgSend(v10, sel_speakableText);
      if (v17)
      {
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v20 = v19;

        id v17 = (id)MEMORY[0x1BA9E2DD0](v18, v20);
        swift_bridgeObjectRelease();
      }
      ++v8;
      objc_msgSend(v16, sel_setSpeakableText_, v17);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v6 != v8);
    swift_bridgeObjectRelease();
    id v2 = v25;
    goto LABEL_18;
  }
  __break(1u);
  return result;
}

id specialized static ViewMetricsLogger.getSparseCardSnippet(cardSnippet:)(void *a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F965A0]), sel_init);
  id v3 = objc_msgSend(a1, sel_dialog);
  id v4 = specialized static DialogMetricsLogger.getSparseDialog(_:)(v3);

  objc_msgSend(v2, sel_setDialog_, v4);
  id v5 = objc_msgSend(a1, sel_sash);
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96B60]), sel_init);
    id v8 = objc_msgSend(v6, sel_applicationBundleIdentifier);
    objc_msgSend(v7, sel_setApplicationBundleIdentifier_, v8);

    id v9 = objc_msgSend(v6, sel_title);
    objc_msgSend(v7, sel_setTitle_, v9);

    objc_msgSend(v2, sel_setSash_, v7);
  }
  id v10 = objc_msgSend(a1, sel_cardData);
  if (!v10) {
    return v2;
  }
  id v11 = v10;
  uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v14 = v13;

  id v15 = objc_allocWithZone(MEMORY[0x1E4F9A598]);
  outlined copy of Data._Representation(v12, v14);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v12, v14);
  id v17 = objc_msgSend(v15, sel_initWithData_, isa);

  if (!v17
    || (id v18 = objc_msgSend(v17, sel_dictionaryRepresentation),
        v17,
        !v18))
  {
    outlined consume of Data._Representation(v12, v14);
    return v2;
  }
  static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  id result = objc_msgSend(v2, sel_dictionary);
  if (result)
  {
    uint64_t v20 = result;
    Class v21 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v20, sel___swift_setObject_forKeyedSubscript_, v21, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), 0x647261635FLL, 0xE500000000000000);
    outlined consume of Data._Representation(v12, v14);

    swift_unknownObjectRelease();
    return v2;
  }
  __break(1u);
  return result;
}

id specialized static ViewMetricsLogger.getSparseSettingSnippet(snippet:)(void *a1)
{
  self;
  uint64_t v2 = swift_dynamicCastObjCClass();
  if (v2)
  {
    id v3 = (void *)v2;
    id v4 = objc_allocWithZone(MEMORY[0x1E4F96A20]);
    id v5 = a1;
    id v6 = objc_msgSend(v4, sel_init);
    objc_msgSend(v6, sel_setToggle_, objc_msgSend(v3, sel_toggle));
    id v7 = objc_msgSend(v3, sel_value);
    objc_msgSend(v6, sel_setValue_, v7);
  }
  else
  {
    self;
    uint64_t v8 = swift_dynamicCastObjCClass();
    if (v8)
    {
      id v9 = (void *)v8;
      id v10 = objc_allocWithZone(MEMORY[0x1E4F96A30]);
      id v11 = a1;
      id v12 = objc_msgSend(v10, sel_init);
      id v13 = objc_msgSend(v9, sel_value);
      objc_msgSend(v12, sel_setValue_, v13);

      id v6 = v12;
      objc_msgSend(v6, sel_setIncrement_, objc_msgSend(v9, sel_increment));
    }
    else
    {
      id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96A50]), sel_init);
    }
  }
  id v14 = objc_msgSend(a1, sel_settingKeys);
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    int64_t v17 = *(void *)(v16 + 16);
    if (v17)
    {
      uint64_t v32 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
      uint64_t v18 = v16 + 32;
      uint64_t v19 = MEMORY[0x1E4FBB1A0];
      do
      {
        outlined init with copy of Any(v18, (uint64_t)v29);
        outlined init with copy of Any((uint64_t)v29, (uint64_t)&v30);
        if (swift_dynamicCast())
        {
          uint64_t v20 = v27;
          unint64_t v21 = v28;
        }
        else
        {
          uint64_t v20 = 0;
          unint64_t v21 = 0xE000000000000000;
        }
        uint64_t v31 = v19;
        *(void *)&long long v30 = v20;
        *((void *)&v30 + 1) = v21;
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
        uint64_t v22 = v32;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v22 + 16) + 1, 1);
          uint64_t v22 = v32;
        }
        unint64_t v24 = *(void *)(v22 + 16);
        unint64_t v23 = *(void *)(v22 + 24);
        if (v24 >= v23 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
          uint64_t v22 = v32;
        }
        *(void *)(v22 + 16) = v24 + 1;
        outlined init with take of Any(&v30, (_OWORD *)(v22 + 32 * v24 + 32));
        v18 += 32;
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    Class isa = 0;
  }
  objc_msgSend(v6, sel_setSettingKeys_, isa);

  return v6;
}

id specialized static ViewMetricsLogger.getSparseIntentGroupSnippet(snippet:)(void *a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96768]), sel_init);
  id v3 = objc_msgSend(a1, sel_appId);
  objc_msgSend(v2, sel_setAppId_, v3);

  id v4 = v2;
  id v5 = objc_msgSend(a1, sel_dialog);
  id v6 = specialized static DialogMetricsLogger.getSparseDialog(_:)(v5);

  objc_msgSend(v4, sel_setDialog_, v6);
  id v7 = objc_msgSend(a1, sel_sash);
  if (v7)
  {
    uint64_t v8 = v7;
    id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96B60]), sel_init);
    id v10 = objc_msgSend(v8, sel_applicationBundleIdentifier);
    objc_msgSend(v9, sel_setApplicationBundleIdentifier_, v10);

    id v11 = objc_msgSend(v8, sel_title);
    objc_msgSend(v9, sel_setTitle_, v11);

    objc_msgSend(v4, sel_setSash_, v9);
  }
  return v4;
}

id specialized static ViewMetricsLogger.getSparseView(view:)(void *a1)
{
  self;
  uint64_t v2 = swift_dynamicCastObjCClass();
  if (v2)
  {
    id v3 = (void *)v2;
    id v4 = a1;
    uint64_t v5 = (uint64_t)specialized static ViewMetricsLogger.getSparseAssistantUtteranceView(assistantUtteranceView:)(v3);
LABEL_3:
    uint64_t v6 = v5;

    return (id)v6;
  }
  self;
  uint64_t v8 = swift_dynamicCastObjCClass();
  if (v8)
  {
    id v9 = (void *)v8;
    id v10 = objc_allocWithZone(MEMORY[0x1E4F96AF8]);
    id v11 = a1;
    id v12 = objc_msgSend(v10, sel_init);
    id v13 = objc_msgSend(v9, sel_confirmText);
    objc_msgSend(v12, sel_setConfirmText_, v13);

    id v14 = objc_msgSend(v9, sel_denyText);
    objc_msgSend(v12, sel_setDenyText_, v14);

    id v15 = v12;
    id v16 = objc_msgSend(v9, sel_speakableText);
LABEL_8:
    id v23 = v16;
    objc_msgSend(v15, sel_setSpeakableText_, v23);

    return v15;
  }
  self;
  uint64_t v17 = swift_dynamicCastObjCClass();
  if (v17)
  {
    uint64_t v18 = (void *)v17;
    id v19 = objc_allocWithZone(MEMORY[0x1E4F96AD8]);
    id v11 = a1;
    id v20 = objc_msgSend(v19, sel_init);
    id v21 = objc_msgSend(v18, sel_text);
    objc_msgSend(v20, sel_setText_, v21);

    id v22 = objc_msgSend(v18, sel_secondaryText);
    objc_msgSend(v20, sel_setSecondaryText_, v22);

    id v15 = v20;
    id v16 = objc_msgSend(v18, sel_speakableText);
    goto LABEL_8;
  }
  self;
  uint64_t v24 = swift_dynamicCastObjCClass();
  if (v24)
  {
    id v25 = (void *)v24;
    id v4 = a1;
    uint64_t v5 = specialized static ViewMetricsLogger.getSparseDisambiguationList(disambiguationList:)(v25);
    goto LABEL_3;
  }
  self;
  uint64_t v26 = swift_dynamicCastObjCClass();
  if (v26)
  {
    uint64_t v27 = (void *)v26;
    id v4 = a1;
    uint64_t v5 = (uint64_t)specialized static ViewMetricsLogger.getSparseCardSnippet(cardSnippet:)(v27);
    goto LABEL_3;
  }
  self;
  uint64_t v28 = swift_dynamicCastObjCClass();
  if (v28)
  {
    uint64_t v29 = (void *)v28;
    id v4 = a1;
    uint64_t v5 = (uint64_t)specialized static ViewMetricsLogger.getSparseSettingSnippet(snippet:)(v29);
    goto LABEL_3;
  }
  self;
  uint64_t v30 = swift_dynamicCastObjCClass();
  if (v30)
  {
    uint64_t v31 = (void *)v30;
    id v4 = a1;
    uint64_t v5 = (uint64_t)specialized static ViewMetricsLogger.getSparseIntentGroupSnippet(snippet:)(v31);
    goto LABEL_3;
  }
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Logger.instrumentation);
  id v33 = a1;
  int v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v34, v35))
  {
    unint64_t v36 = (uint8_t *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    uint64_t v40 = v37;
    *(_DWORD *)unint64_t v36 = 136315138;
    swift_getObjectType();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SAAceView.Type);
    uint64_t v38 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1B9C64000, v34, v35, "Logging SAAceView skipped : %s", v36, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BA9E48C0](v37, -1, -1);
    MEMORY[0x1BA9E48C0](v36, -1, -1);
  }
  else
  {
  }
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96538]), sel_init);
}

uint64_t specialized static ViewMetricsLogger.getSparseAddViews(addViews:)(void *a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  id v6 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F96AC0]), sel_init);
  id v8 = objc_msgSend(a1, sel_dialogPhase);
  if (v8)
  {
    id v9 = v8;
    objc_msgSend(v7, sel_setDialogPhase_, v8);
  }
  Class isa = (Class)objc_msgSend(a1, sel_views);
  if (!isa) {
    goto LABEL_18;
  }
  uint64_t v11 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for SAAceView);
  unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v12 >> 62))
  {
    uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v13) {
      goto LABEL_8;
    }
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_17:
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
LABEL_18:
    objc_msgSend(v7, sel_setViews_, isa);

    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return (uint64_t)v7;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v13) {
    goto LABEL_16;
  }
LABEL_8:
  uint64_t v20 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v13 & 0x8000000000000000) == 0)
  {
    v18[1] = v11;
    uint64_t v19 = v2;
    uint64_t v15 = 0;
    do
    {
      if ((v12 & 0xC000000000000001) != 0) {
        id v16 = (id)MEMORY[0x1BA9E3990](v15, v12);
      }
      else {
        id v16 = *(id *)(v12 + 8 * v15 + 32);
      }
      uint64_t v17 = v16;
      ++v15;
      specialized static ViewMetricsLogger.getSparseView(view:)(v16);

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
    while (v13 != v15);
    swift_bridgeObjectRelease();
    uint64_t v2 = v19;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t specialized static ViewMetricsLogger.logAnalytics(view:)(void *a1)
{
  uint64_t v2 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for executor != -1) {
    swift_once();
  }
  id v6 = (id)static Log.executor;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  if (one-time initialization token for instrumentation != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.instrumentation);
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    id v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v10 = 0;
    _os_log_impl(&dword_1B9C64000, v8, v9, "Logging AddViews to AFAnalytics", v10, 2u);
    MEMORY[0x1BA9E48C0](v10, -1, -1);
  }

  unint64_t v11 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v25 = v11;
  unint64_t v12 = (void *)specialized static ViewMetricsLogger.getSparseAddViews(addViews:)(a1);
  id v13 = objc_msgSend(v12, sel_dictionary);
  if (v13)
  {
    id v14 = v13;
    uint64_t v24 = type metadata accessor for OS_dispatch_queue(0, (unint64_t *)&lazy cache variable for type metadata for NSMutableDictionary);
    *(void *)&long long v23 = v14;
    outlined init with take of Any(&v23, v22);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v21 = v11;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v22, 0x6C46746E65696C43, 0xEE0077656956776FLL, isUniquelyReferenced_nonNull_native);
    uint64_t v16 = v21;
    unint64_t v25 = v21;
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)(0x6C46746E65696C43, 0xEE0077656956776FLL, &v23);
    outlined destroy of Any?((uint64_t)&v23);
    uint64_t v16 = v25;
  }
  id v17 = objc_msgSend(self, sel_sharedAnalytics);
  if (v17)
  {
    uint64_t v18 = v17;
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v16);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v18, sel_logEventWithType_context_, 3700, isa);

    swift_bridgeObjectRelease();
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

ValueMetadata *type metadata accessor for ViewMetricsLogger()
{
  return &type metadata for ViewMetricsLogger;
}

uint64_t WaitUniversalActionOverride.__allocating_init(input:aceInputOrigin:isFirstRequestInSession:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = swift_allocObject();
  *(unsigned char *)(v8 + 16) = 7;
  outlined init with take of Input?(a1, v8 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_input);
  *(unsigned char *)(v8 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_isFirstRequestInSession) = a4;
  os_log_type_t v9 = (void *)(v8 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_aceInputOrigin);
  void *v9 = a2;
  v9[1] = a3;
  return v8;
}

uint64_t WaitUniversalActionOverride.overrideType.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 16) = v2;
  return result;
}

uint64_t (*WaitUniversalActionOverride.overrideType.modify())()
{
  return static AmbiguityFeatureFlags.forceEnabled.modify;
}

uint64_t WaitUniversalActionOverride.input.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of Input?(v1 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_input, a1);
}

uint64_t WaitUniversalActionOverride.isFirstRequestInSession.getter()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_isFirstRequestInSession);
}

uint64_t WaitUniversalActionOverride.aceInputOrigin.getter()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_aceInputOrigin);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WaitUniversalActionOverride.init(input:aceInputOrigin:isFirstRequestInSession:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v4 + 16) = 7;
  outlined init with take of Input?(a1, v4 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_input);
  *(unsigned char *)(v4 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_isFirstRequestInSession) = a4;
  uint64_t v8 = (void *)(v4 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_aceInputOrigin);
  *uint64_t v8 = a2;
  v8[1] = a3;
  return v4;
}

uint64_t WaitUniversalActionOverride.deinit()
{
  outlined destroy of ReferenceResolutionClientProtocol?(v0 + OBJC_IVAR____TtC14SiriKitRuntime27WaitUniversalActionOverride_input, &demangling cache variable for type metadata for Input?);
  swift_bridgeObjectRelease();
  return v0;
}

void *sub_1BA04586C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(**(void **)a1 + 112))(&v4);
  *a2 = v4;
  return result;
}

uint64_t sub_1BA0458C8(char *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v4 = *a1;
  return (*(uint64_t (**)(char *))(*(void *)v2 + 120))(&v4);
}

uint64_t ObjC metadata update function for WaitUniversalActionOverride()
{
  return type metadata accessor for WaitUniversalActionOverride();
}

void type metadata completion function for WaitUniversalActionOverride()
{
  type metadata accessor for Input?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for WaitUniversalActionOverride(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for WaitUniversalActionOverride);
}

uint64_t dispatch thunk of WaitUniversalActionOverride.overrideType.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of WaitUniversalActionOverride.overrideType.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of WaitUniversalActionOverride.overrideType.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of WaitUniversalActionOverride.__allocating_init(input:aceInputOrigin:isFirstRequestInSession:)()
{
  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of WaitUniversalActionOverride.evaluate()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of XPCConvertible.xpcRepresentation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of XPCRepresentation.swiftRepresentation()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x1F40E3038]();
}

uint64_t JSONDecoder.init()()
{
  return MEMORY[0x1F40E3060]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x1F40E3070]();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return MEMORY[0x1F40E3128]();
}

uint64_t JSONEncoder.init()()
{
  return MEMORY[0x1F40E3150]();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return MEMORY[0x1F40E3160]();
}

uint64_t static CharacterSet.whitespacesAndNewlines.getter()
{
  return MEMORY[0x1F40E3368]();
}

uint64_t type metadata accessor for CharacterSet()
{
  return MEMORY[0x1F40E3420]();
}

uint64_t DateInterval.debugDescription.getter()
{
  return MEMORY[0x1F40E3498]();
}

NSDateInterval __swiftcall DateInterval._bridgeToObjectiveC()()
{
  return (NSDateInterval)MEMORY[0x1F40E34A0]();
}

uint64_t static DateInterval._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E34C0]();
}

uint64_t DateInterval.init(start:duration:)()
{
  return MEMORY[0x1F40E34F0]();
}

uint64_t type metadata accessor for DateInterval()
{
  return MEMORY[0x1F40E3530]();
}

uint64_t static DateComponents._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E38E8]();
}

uint64_t DateComponents.day.setter()
{
  return MEMORY[0x1F40E3908]();
}

uint64_t DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)()
{
  return MEMORY[0x1F40E3A10]();
}

uint64_t type metadata accessor for DateComponents()
{
  return MEMORY[0x1F40E3A58]();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x1F40E41E0]();
}

uint64_t dispatch thunk of PropertyListDecoder.userInfo.modify()
{
  return MEMORY[0x1F40E41E8]();
}

uint64_t PropertyListDecoder.init()()
{
  return MEMORY[0x1F40E4210]();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return MEMORY[0x1F40E4220]();
}

uint64_t dispatch thunk of PropertyListEncoder.outputFormat.setter()
{
  return MEMORY[0x1F40E4228]();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return MEMORY[0x1F40E4240]();
}

uint64_t PropertyListEncoder.init()()
{
  return MEMORY[0x1F40E4260]();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return MEMORY[0x1F40E4270]();
}

uint64_t _convertErrorToNSError(_:)()
{
  return MEMORY[0x1F40E4540]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x1F40E4550]();
}

uint64_t NSFastEnumerationIterator.next()()
{
  return MEMORY[0x1F40E46B8]();
}

uint64_t type metadata accessor for NSFastEnumerationIterator()
{
  return MEMORY[0x1F40E46D0]();
}

uint64_t URL.init(fileURLWithPath:isDirectory:)()
{
  return MEMORY[0x1F40E4930]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.appendingPathComponent(_:isDirectory:)()
{
  return MEMORY[0x1F40E49E0]();
}

uint64_t URL.appendingPathComponent(_:)()
{
  return MEMORY[0x1F40E49E8]();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E4A70]();
}

uint64_t URL.path.getter()
{
  return MEMORY[0x1F40E4AC0]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x1F40E4B80]();
}

uint64_t Data.init(contentsOf:options:)()
{
  return MEMORY[0x1F40E4BE0]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x1F40E4D48]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E4DA8]();
}

uint64_t Date.timeIntervalSinceReferenceDate.getter()
{
  return MEMORY[0x1F40E4EE0]();
}

uint64_t Date.addingTimeInterval(_:)()
{
  return MEMORY[0x1F40E5158]();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)MEMORY[0x1F40E5188]();
}

uint64_t static Date.> infix(_:_:)()
{
  return MEMORY[0x1F40E5198]();
}

uint64_t static Date.+ infix(_:_:)()
{
  return MEMORY[0x1F40E51C0]();
}

uint64_t Date.timeIntervalSince1970.getter()
{
  return MEMORY[0x1F40E52B0]();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E52E0]();
}

uint64_t static Date.now.getter()
{
  return MEMORY[0x1F40E52F0]();
}

uint64_t Date.init()()
{
  return MEMORY[0x1F40E5378]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x1F40E5388]();
}

uint64_t UUID.init(uuidString:)()
{
  return MEMORY[0x1F40E53A0]();
}

uint64_t UUID.uuidString.getter()
{
  return MEMORY[0x1F40E53B0]();
}

uint64_t UUID.description.getter()
{
  return MEMORY[0x1F40E53B8]();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)MEMORY[0x1F40E53C8]();
}

uint64_t static UUID.== infix(_:_:)()
{
  return MEMORY[0x1F40E53E8]();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E53F8]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x1F40E5438]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x1F40E5448]();
}

uint64_t Locale.Components.languageComponents.setter()
{
  return MEMORY[0x1F40E5480]();
}

uint64_t Locale.Components.init(languageCode:script:languageRegion:)()
{
  return MEMORY[0x1F40E5498]();
}

uint64_t Locale.Components.hourCycle.setter()
{
  return MEMORY[0x1F40E54C8]();
}

uint64_t type metadata accessor for Locale.Components()
{
  return MEMORY[0x1F40E54D8]();
}

uint64_t Locale.init(components:)()
{
  return MEMORY[0x1F40E54E8]();
}

uint64_t Locale.identifier.getter()
{
  return MEMORY[0x1F40E5510]();
}

uint64_t type metadata accessor for Locale.LanguageCode()
{
  return MEMORY[0x1F40E5578]();
}

uint64_t Locale.LanguageCode.init(_:)()
{
  return MEMORY[0x1F40E5590]();
}

uint64_t static Locale.autoupdatingCurrent.getter()
{
  return MEMORY[0x1F40E5658]();
}

uint64_t type metadata accessor for Locale.Region()
{
  return MEMORY[0x1F40E56C8]();
}

uint64_t Locale.Region.init(_:)()
{
  return MEMORY[0x1F40E56D8]();
}

uint64_t type metadata accessor for Locale.Script()
{
  return MEMORY[0x1F40E5700]();
}

uint64_t Locale.Language.Components.init(languageCode:script:region:)()
{
  return MEMORY[0x1F40E5770]();
}

uint64_t type metadata accessor for Locale.Language.Components()
{
  return MEMORY[0x1F40E57C8]();
}

uint64_t type metadata accessor for Locale.HourCycle()
{
  return MEMORY[0x1F40E5878]();
}

uint64_t type metadata accessor for Locale()
{
  return MEMORY[0x1F40E5890]();
}

uint64_t static Calendar.autoupdatingCurrent.getter()
{
  return MEMORY[0x1F40E59F8]();
}

uint64_t static Calendar.current.getter()
{
  return MEMORY[0x1F40E5AB8]();
}

uint64_t type metadata accessor for Calendar()
{
  return MEMORY[0x1F40E5B18]();
}

uint64_t static TimeZone.autoupdatingCurrent.getter()
{
  return MEMORY[0x1F40E5D38]();
}

uint64_t static TimeZone.current.getter()
{
  return MEMORY[0x1F40E5D60]();
}

uint64_t type metadata accessor for TimeZone()
{
  return MEMORY[0x1F40E5D70]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse()
{
  return MEMORY[0x1F413CC78]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerSuggestion.alternateQuerySuggestion.getter()
{
  return MEMORY[0x1F413E1B8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerSuggestion.hasAlternateQuerySuggestion.getter()
{
  return MEMORY[0x1F413E1C0]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion()
{
  return MEMORY[0x1F413E1C8]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestion.candidates.getter()
{
  return MEMORY[0x1F413EBA8]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestion()
{
  return MEMORY[0x1F413EBB0]();
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerSuggestionUtterance.print.getter()
{
  return MEMORY[0x1F413EC80]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestionUtterance()
{
  return MEMORY[0x1F413EC88]();
}

uint64_t Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestionCandidate.utterance.getter()
{
  return MEMORY[0x1F413EF10]();
}

uint64_t type metadata accessor for Apple_Parsec_Siri_V2alpha_AlternateQuerySuggestionCandidate()
{
  return MEMORY[0x1F413EF18]();
}

uint64_t SiriInCallFeatureFlag.isEnabled.getter()
{
  return MEMORY[0x1F4150AD8]();
}

uint64_t type metadata accessor for SiriInCallFeatureFlag()
{
  return MEMORY[0x1F4150AE0]();
}

uint64_t dispatch thunk of CorrectingFlow.correctionsExitValue.getter()
{
  return MEMORY[0x1F4151750]();
}

uint64_t dispatch thunk of CorrectingFlow.on(correction:)()
{
  return MEMORY[0x1F4151758]();
}

uint64_t dispatch thunk of PreparableFlow.prepare(completion:)()
{
  return MEMORY[0x1F4151760]();
}

uint64_t type metadata accessor for UserIdentityCheckFlow()
{
  return MEMORY[0x1F4151828]();
}

uint64_t AnyFlow.description.getter()
{
  return MEMORY[0x1F41518B8]();
}

uint64_t dispatch thunk of AnyFlow.siriEnvironment.getter()
{
  return MEMORY[0x1F41518C0]();
}

uint64_t dispatch thunk of AnyFlow.siriEnvironment.setter()
{
  return MEMORY[0x1F41518C8]();
}

uint64_t dispatch thunk of AnyFlow.flexibleExecutionSupport.getter()
{
  return MEMORY[0x1F41518D0]();
}

uint64_t dispatch thunk of AnyFlow.unbox<A>(as:)()
{
  return MEMORY[0x1F41518E0]();
}

uint64_t dispatch thunk of AnyFlow.exitValue.getter()
{
  return MEMORY[0x1F41518E8]();
}

uint64_t type metadata accessor for AnyFlow()
{
  return MEMORY[0x1F41518F0]();
}

uint64_t TaskFlowConfiguration.debugDescription.getter()
{
  return MEMORY[0x1F41518F8]();
}

uint64_t TaskFlowConfiguration.taskName.getter()
{
  return MEMORY[0x1F4151900]();
}

uint64_t TaskFlowConfiguration.taskType.getter()
{
  return MEMORY[0x1F4151908]();
}

uint64_t type metadata accessor for TaskFlowConfiguration()
{
  return MEMORY[0x1F4151910]();
}

uint64_t type metadata accessor for TaskFlowType()
{
  return MEMORY[0x1F4151918]();
}

uint64_t dispatch thunk of ActingFlow.action.getter()
{
  return MEMORY[0x1F4151930]();
}

uint64_t ActingFlow.isAdaptedFlow.getter()
{
  return MEMORY[0x1F4151938]();
}

uint64_t ActingFlow.unwrap.getter()
{
  return MEMORY[0x1F4151940]();
}

uint64_t LoadedFlowInfo.fromBundle.getter()
{
  return MEMORY[0x1F4151970]();
}

uint64_t LoadedFlowInfo.activeTasks.getter()
{
  return MEMORY[0x1F4151978]();
}

uint64_t LoadedFlowInfo.flow.getter()
{
  return MEMORY[0x1F4151980]();
}

uint64_t type metadata accessor for LoadedFlowInfo()
{
  return MEMORY[0x1F4151988]();
}

uint64_t type metadata accessor for UnsafeFlowOperationQueueError()
{
  return MEMORY[0x1F4151990]();
}

uint64_t DefaultFlowActivity.init(activityName:activityType:activityStartTime:)()
{
  return MEMORY[0x1F4151998]();
}

uint64_t dispatch thunk of DefaultFlowActivity.message.setter()
{
  return MEMORY[0x1F41519A0]();
}

uint64_t dispatch thunk of DefaultFlowActivity.timestamp.setter()
{
  return MEMORY[0x1F41519A8]();
}

uint64_t type metadata accessor for DefaultFlowActivity()
{
  return MEMORY[0x1F41519B0]();
}

uint64_t method lookup function for DefaultFlowActivity()
{
  return MEMORY[0x1F41519B8]();
}

uint64_t DefaultFlowActivity.deinit()
{
  return MEMORY[0x1F41519C0]();
}

uint64_t dispatch thunk of static SiriSuggestionsBroker.getInstance()()
{
  return MEMORY[0x1F4151A40]();
}

uint64_t dispatch thunk of SiriCorrectionsClientProvider.correctionsClient.setter()
{
  return MEMORY[0x1F4151A48]();
}

uint64_t SiriCorrectionsClientProvider.init()()
{
  return MEMORY[0x1F4151A50]();
}

uint64_t type metadata accessor for SiriCorrectionsClientProvider()
{
  return MEMORY[0x1F4151A58]();
}

uint64_t dispatch thunk of SiriSuggestionsBrokerProvider.initialize(initialize:postInit:)()
{
  return MEMORY[0x1F4151A60]();
}

uint64_t static SiriSuggestionsBrokerProvider.instance.getter()
{
  return MEMORY[0x1F4151A68]();
}

uint64_t type metadata accessor for SiriSuggestionsBrokerProvider()
{
  return MEMORY[0x1F4151A70]();
}

uint64_t Flow.eraseToAnyFlow()()
{
  return MEMORY[0x1F4151A78]();
}

uint64_t Flow.toActingFlow()()
{
  return MEMORY[0x1F4151A88]();
}

uint64_t Flow.deferToExecuteAsync(_:)()
{
  return MEMORY[0x1F4151A90]();
}

uint64_t type metadata accessor for FlowActionType()
{
  return MEMORY[0x1F4151AC0]();
}

uint64_t type metadata accessor for FlowTraceEvent()
{
  return MEMORY[0x1F4151AC8]();
}

uint64_t dispatch thunk of FlowPluginBundle.bundlePath.getter()
{
  return MEMORY[0x1F4151AD0]();
}

uint64_t dispatch thunk of FlowPluginBundle.supportedTopics.getter()
{
  return MEMORY[0x1F4151AD8]();
}

uint64_t FlowSearchResult.actingFlow.getter()
{
  return MEMORY[0x1F4151AE0]();
}

uint64_t FlowSearchResult.transformer.getter()
{
  return MEMORY[0x1F4151AE8]();
}

uint64_t FlowSearchResult.flow.getter()
{
  return MEMORY[0x1F4151AF0]();
}

uint64_t static FlowSearchResult.flow(_:)()
{
  return MEMORY[0x1F4151AF8]();
}

uint64_t FlowSearchResult.exclude.getter()
{
  return MEMORY[0x1F4151B00]();
}

uint64_t type metadata accessor for FlowSearchResult()
{
  return MEMORY[0x1F4151B08]();
}

uint64_t dispatch thunk of FlowTaskProvider.__allocating_init(id:isClientInitiated:creationTime:)()
{
  return MEMORY[0x1F4151B10]();
}

uint64_t type metadata accessor for FlowTaskProvider()
{
  return MEMORY[0x1F4151B18]();
}

uint64_t dispatch thunk of FlowPluginExtended.findFlowForX(parse:)()
{
  return MEMORY[0x1F4151B20]();
}

uint64_t type metadata accessor for FlowUnhandledReason()
{
  return MEMORY[0x1F4151B28]();
}

uint64_t type metadata accessor for FlowOperationIgnored()
{
  return MEMORY[0x1F4151B30]();
}

uint64_t FlowOperationIgnored.init(_:)()
{
  return MEMORY[0x1F4151B38]();
}

uint64_t FlowPluginBundleImpl.init(bundlePath:supportedTopics:)()
{
  return MEMORY[0x1F4151B40]();
}

uint64_t type metadata accessor for FlowPluginBundleImpl()
{
  return MEMORY[0x1F4151B48]();
}

uint64_t FlowPluginLoadResult.init(success:wasInCache:)()
{
  return MEMORY[0x1F4151B50]();
}

uint64_t type metadata accessor for FlowPluginLoadResult()
{
  return MEMORY[0x1F4151B58]();
}

uint64_t dispatch thunk of FlowDelegatePluginLoader.loadFlow(rcId:parse:)()
{
  return MEMORY[0x1F4151B60]();
}

uint64_t dispatch thunk of FlowDelegatePluginLoader.loadFlowPlugin(bundleIdentifier:)()
{
  return MEMORY[0x1F4151B68]();
}

uint64_t static FlowDelegatePluginLoader.sharedInstance.getter()
{
  return MEMORY[0x1F4151B70]();
}

uint64_t dispatch thunk of FlowDelegatePluginLoader.loadAndWarmBundle(bundleIdentifier:refId:)()
{
  return MEMORY[0x1F4151B78]();
}

uint64_t type metadata accessor for FlowDelegatePluginLoader()
{
  return MEMORY[0x1F4151B80]();
}

uint64_t type metadata accessor for FlowAbort()
{
  return MEMORY[0x1F4151B88]();
}

uint64_t FlowAbort.init(_:)()
{
  return MEMORY[0x1F4151B90]();
}

uint64_t static FlowTrace.trace(event:)()
{
  return MEMORY[0x1F4151B98]();
}

uint64_t dispatch thunk of FlowAction.type.getter()
{
  return MEMORY[0x1F4151BA0]();
}

uint64_t dispatch thunk of FlowPlugin.makeFlowFor(parse:)()
{
  return MEMORY[0x1F4151BA8]();
}

uint64_t dispatch thunk of FlowPlugin.warmup(refId:)()
{
  return MEMORY[0x1F4151BB0]();
}

uint64_t dispatch thunk of FlowPlugin.init()()
{
  return MEMORY[0x1F4151BB8]();
}

uint64_t static SiriKitEventSender.current.getter()
{
  return MEMORY[0x1F4151BC0]();
}

uint64_t SiriKitEventPayload.description.getter()
{
  return MEMORY[0x1F4151BC8]();
}

uint64_t type metadata accessor for SiriKitEventPayload()
{
  return MEMORY[0x1F4151BD0]();
}

uint64_t dispatch thunk of SiriKitEventSending.send(_:)()
{
  return MEMORY[0x1F4151BD8]();
}

uint64_t SiriKitCommandHandler.notifyBegin(peerInfo:)()
{
  return MEMORY[0x1F4151C00]();
}

uint64_t SiriKitEventOverrides.interactionId.getter()
{
  return MEMORY[0x1F4151C08]();
}

uint64_t SiriKitEventOverrides.resultCandidateId.getter()
{
  return MEMORY[0x1F4151C10]();
}

uint64_t SiriKitEventOverrides.taskId.getter()
{
  return MEMORY[0x1F4151C18]();
}

uint64_t type metadata accessor for SiriKitEventOverrides()
{
  return MEMORY[0x1F4151C20]();
}

uint64_t SiriKitReliabilityCodes.flowStatusReason.getter()
{
  return MEMORY[0x1F4151C28]();
}

uint64_t SiriKitReliabilityCodes.rawValue.getter()
{
  return MEMORY[0x1F4151C30]();
}

uint64_t type metadata accessor for SiriKitReliabilityCodes()
{
  return MEMORY[0x1F4151C38]();
}

uint64_t type metadata accessor for SiriKitReliabilityEvent()
{
  return MEMORY[0x1F4151C40]();
}

uint64_t SiriKitConfirmationState.init(rawValue:)()
{
  return MEMORY[0x1F4151C48]();
}

uint64_t type metadata accessor for SiriKitConfirmationState()
{
  return MEMORY[0x1F4151C50]();
}

uint64_t SiriKitParameterMetadata.init(parameterName:shouldResolve:confirmationStates:)()
{
  return MEMORY[0x1F4151C58]();
}

uint64_t type metadata accessor for SiriKitParameterMetadata()
{
  return MEMORY[0x1F4151C60]();
}

uint64_t SiriKitPlatformErrorCase.makePluginActionToRenderError()()
{
  return MEMORY[0x1F4151C68]();
}

uint64_t type metadata accessor for SiriKitPlatformErrorCase()
{
  return MEMORY[0x1F4151C70]();
}

uint64_t static SiriKitDirectInvocationPayloads.headGestureIdentifier.getter()
{
  return MEMORY[0x1F4151C88]();
}

uint64_t dispatch thunk of SiriKitEvent.SiriKitEventBuilder.statusReasonDescription.setter()
{
  return MEMORY[0x1F4151C90]();
}

uint64_t dispatch thunk of SiriKitEvent.SiriKitEventBuilder.attribute.setter()
{
  return MEMORY[0x1F4151C98]();
}

uint64_t SiriKitEvent.withPayload(_:)()
{
  return MEMORY[0x1F4151CA0]();
}

uint64_t SiriKitEvent.__allocating_init(activityType:taskType:statusReason:_:)()
{
  return MEMORY[0x1F4151CA8]();
}

uint64_t SiriKitEvent.flowStateType.getter()
{
  return MEMORY[0x1F4151CB0]();
}

uint64_t SiriKitEvent.debugDescription.getter()
{
  return MEMORY[0x1F4151CB8]();
}

uint64_t SiriKitEvent.machAbsoluteTime.getter()
{
  return MEMORY[0x1F4151CC0]();
}

uint64_t SiriKitEvent.payload.getter()
{
  return MEMORY[0x1F4151CC8]();
}

uint64_t SiriKitEvent.overrides.getter()
{
  return MEMORY[0x1F4151CD0]();
}

uint64_t SiriKitEvent.timestamp.getter()
{
  return MEMORY[0x1F4151CD8]();
}

uint64_t type metadata accessor for SiriKitEvent()
{
  return MEMORY[0x1F4151CE0]();
}

uint64_t SiriKitEvent.__allocating_init(_:builder:)()
{
  return MEMORY[0x1F4151CE8]();
}

uint64_t static SiriKitLifecycle._logCrashToEventBus(_:)()
{
  return MEMORY[0x1F4151CF0]();
}

uint64_t Acceptance.type.getter()
{
  return MEMORY[0x1F4151CF8]();
}

uint64_t type metadata accessor for Acceptance()
{
  return MEMORY[0x1F4151D00]();
}

uint64_t static AceService.currentAsync.getter()
{
  return MEMORY[0x1F4151D08]();
}

uint64_t dispatch thunk of Executable.interruptionPolicy.getter()
{
  return MEMORY[0x1F4151D10]();
}

uint64_t dispatch thunk of Executable.cancel(error:)()
{
  return MEMORY[0x1F4151D18]();
}

uint64_t dispatch thunk of DeviceState.isHomePod.getter()
{
  return MEMORY[0x1F4151DD0]();
}

uint64_t static DialogPhase.completion.getter()
{
  return MEMORY[0x1F4151DF8]();
}

uint64_t static DialogPhase.reflection.getter()
{
  return MEMORY[0x1F4151E00]();
}

uint64_t static DialogPhase.summary.getter()
{
  return MEMORY[0x1F4151E10]();
}

uint64_t DialogPhase.init(aceValue:)()
{
  return MEMORY[0x1F4151E18]();
}

uint64_t type metadata accessor for DialogPhase()
{
  return MEMORY[0x1F4151E28]();
}

uint64_t type metadata accessor for IntentTopic.IntentTopicType()
{
  return MEMORY[0x1F4151E50]();
}

uint64_t IntentTopic.makeWildcardFallbacks()()
{
  return MEMORY[0x1F4151E58]();
}

uint64_t static IntentTopic.makeFromBundleInfoPlist(dictionary:)()
{
  return MEMORY[0x1F4151E60]();
}

uint64_t IntentTopic.makeCacheKeyAndWildcardFallbacks()()
{
  return MEMORY[0x1F4151E68]();
}

uint64_t static IntentTopic.make(from:)()
{
  return MEMORY[0x1F4151E70]();
}

uint64_t IntentTopic.type.getter()
{
  return MEMORY[0x1F4151E78]();
}

uint64_t IntentTopic.cacheKey.getter()
{
  return MEMORY[0x1F4151E80]();
}

uint64_t type metadata accessor for IntentTopic()
{
  return MEMORY[0x1F4151E88]();
}

uint64_t ActivityType.executionTaskStepType.getter()
{
  return MEMORY[0x1F4151E90]();
}

uint64_t ActivityType.flowStateType.getter()
{
  return MEMORY[0x1F4151E98]();
}

uint64_t ActivityType.rawValue.getter()
{
  return MEMORY[0x1F4151EA0]();
}

uint64_t type metadata accessor for ActivityType()
{
  return MEMORY[0x1F4151EA8]();
}

uint64_t BargeInError.init(rawError:)()
{
  return MEMORY[0x1F4151EB0]();
}

uint64_t type metadata accessor for BargeInError()
{
  return MEMORY[0x1F4151EB8]();
}

uint64_t MetricsState.turnId.getter()
{
  return MEMORY[0x1F4151EC0]();
}

uint64_t PluginAction.init(flowHandlerId:input:speechPackage:actionParaphrase:loggingId:)()
{
  return MEMORY[0x1F4151EC8]();
}

uint64_t PluginAction.init(flowHandlerId:input:speechPackage:utterance:actionParaphrase:userData:loggingId:)()
{
  return MEMORY[0x1F4151ED0]();
}

uint64_t PluginAction.init(flowHandlerId:input:)()
{
  return MEMORY[0x1F4151ED8]();
}

uint64_t PluginAction.flowHandlerId.getter()
{
  return MEMORY[0x1F4151EE0]();
}

uint64_t PluginAction.speechPackage.getter()
{
  return MEMORY[0x1F4151EE8]();
}

uint64_t PluginAction.preventCircularRedirect.getter()
{
  return MEMORY[0x1F4151EF0]();
}

uint64_t PluginAction.init(data:)()
{
  return MEMORY[0x1F4151EF8]();
}

uint64_t PluginAction.input.getter()
{
  return MEMORY[0x1F4151F00]();
}

uint64_t PluginAction.serialize()()
{
  return MEMORY[0x1F4151F08]();
}

uint64_t PluginAction.utterance.getter()
{
  return MEMORY[0x1F4151F10]();
}

uint64_t type metadata accessor for PluginAction()
{
  return MEMORY[0x1F4151F18]();
}

uint64_t RecentDialog.init(addViews:expiresAt:requestId:)()
{
  return MEMORY[0x1F4151F28]();
}

uint64_t RecentDialog.addViews.getter()
{
  return MEMORY[0x1F4151F30]();
}

uint64_t RecentDialog.expiresAt.getter()
{
  return MEMORY[0x1F4151F38]();
}

uint64_t type metadata accessor for RecentDialog()
{
  return MEMORY[0x1F4151F40]();
}

uint64_t type metadata accessor for NLRouterParse.InputCandidate()
{
  return MEMORY[0x1F4151F50]();
}

uint64_t NLRouterParse.init(nlRoutingDecision:input:usoParse:pommesResponse:)()
{
  return MEMORY[0x1F4151F58]();
}

uint64_t type metadata accessor for NLRouterParse()
{
  return MEMORY[0x1F4151F60]();
}

uint64_t type metadata accessor for AcceptanceType()
{
  return MEMORY[0x1F4151F78]();
}

uint64_t CommandFailure.init(errorCode:reason:)()
{
  return MEMORY[0x1F4151F98]();
}

uint64_t type metadata accessor for CommandFailure()
{
  return MEMORY[0x1F4151FA0]();
}

uint64_t IdentifiedUser.isUserSessionActive.setter()
{
  return MEMORY[0x1F4151FB0]();
}

uint64_t IdentifiedUser.homeUserID.setter()
{
  return MEMORY[0x1F4151FB8]();
}

uint64_t IdentifiedUser.meetsUserSessionThreshold.setter()
{
  return MEMORY[0x1F4151FC0]();
}

uint64_t IdentifiedUser.sharedUserId.getter()
{
  return MEMORY[0x1F4151FC8]();
}

uint64_t IdentifiedUser.sharedUserId.setter()
{
  return MEMORY[0x1F4151FD0]();
}

uint64_t IdentifiedUser.sharedUserInfo.setter()
{
  return MEMORY[0x1F4151FD8]();
}

uint64_t IdentifiedUser.hasActiveUserSession.setter()
{
  return MEMORY[0x1F4151FE0]();
}

uint64_t IdentifiedUser.voiceIDScore.setter()
{
  return MEMORY[0x1F4151FE8]();
}

uint64_t IdentifiedUser.belongsToHome.setter()
{
  return MEMORY[0x1F4151FF0]();
}

uint64_t IdentifiedUser.iCloudAltDSID.setter()
{
  return MEMORY[0x1F4151FF8]();
}

uint64_t static IdentifiedUser.Classification.known.getter()
{
  return MEMORY[0x1F4152000]();
}

uint64_t static IdentifiedUser.Classification.unknown.getter()
{
  return MEMORY[0x1F4152008]();
}

uint64_t static IdentifiedUser.Classification.unsure1.getter()
{
  return MEMORY[0x1F4152010]();
}

uint64_t static IdentifiedUser.Classification.unsureN.getter()
{
  return MEMORY[0x1F4152018]();
}

uint64_t static IdentifiedUser.Classification.confident.getter()
{
  return MEMORY[0x1F4152020]();
}

uint64_t type metadata accessor for IdentifiedUser.Classification()
{
  return MEMORY[0x1F4152028]();
}

uint64_t IdentifiedUser.lowConfidenceThreshold.setter()
{
  return MEMORY[0x1F4152030]();
}

uint64_t IdentifiedUser.wasSpeechProfileUsedByASR.setter()
{
  return MEMORY[0x1F4152038]();
}

uint64_t IdentifiedUser.preferredTemperatureUnitName.setter()
{
  return MEMORY[0x1F4152040]();
}

uint64_t IdentifiedUser.meetsPersonalRequestThreshold.setter()
{
  return MEMORY[0x1F4152048]();
}

uint64_t IdentifiedUser.voiceConfidenceClassification.setter()
{
  return MEMORY[0x1F4152050]();
}

uint64_t IdentifiedUser.locale.setter()
{
  return MEMORY[0x1F4152060]();
}

uint64_t IdentifiedUser.person.setter()
{
  return MEMORY[0x1F4152070]();
}

uint64_t IdentifiedUser.personaId.setter()
{
  return MEMORY[0x1F4152078]();
}

uint64_t IdentifiedUser.init()()
{
  return MEMORY[0x1F4152080]();
}

uint64_t type metadata accessor for IdentifiedUser()
{
  return MEMORY[0x1F4152088]();
}

uint64_t dispatch thunk of InputAccepting.accept(input:)()
{
  return MEMORY[0x1F4152090]();
}

uint64_t static PrescribedTool.generateKnowledgeResponseIntentTool.getter()
{
  return MEMORY[0x1F4152098]();
}

uint64_t static PrescribedTool.searchTool.getter()
{
  return MEMORY[0x1F41520A0]();
}

uint64_t type metadata accessor for PrescribedTool()
{
  return MEMORY[0x1F41520A8]();
}

uint64_t dispatch thunk of SnippetManager.flowIdentifierOfCurrentSnippet.getter()
{
  return MEMORY[0x1F41520C0]();
}

uint64_t dispatch thunk of SnippetManager.positionLookup.setter()
{
  return MEMORY[0x1F41520C8]();
}

uint64_t static SnippetManager.sharedInstance.getter()
{
  return MEMORY[0x1F41520D0]();
}

uint64_t dispatch thunk of SnippetManager.canSendAddViews.setter()
{
  return MEMORY[0x1F41520D8]();
}

uint64_t dispatch thunk of SnippetManager.canSendXPCUpdates.setter()
{
  return MEMORY[0x1F41520E0]();
}

uint64_t dispatch thunk of SnippetManager.snippetDisappeared()()
{
  return MEMORY[0x1F41520E8]();
}

uint64_t type metadata accessor for SnippetManager()
{
  return MEMORY[0x1F41520F0]();
}

uint64_t TemplatingText.text.getter()
{
  return MEMORY[0x1F4152108]();
}

uint64_t type metadata accessor for TemplatingText()
{
  return MEMORY[0x1F4152110]();
}

uint64_t ExecuteResponse.onChildFlowCompletion.getter()
{
  return MEMORY[0x1F4152120]();
}

uint64_t ExecuteResponse.retriggerNL.getter()
{
  return MEMORY[0x1F4152128]();
}

uint64_t ExecuteResponse.requireInput.getter()
{
  return MEMORY[0x1F4152130]();
}

uint64_t ExecuteResponse.unhandledReason.getter()
{
  return MEMORY[0x1F4152138]();
}

uint64_t ExecuteResponse.nextPluginAction.getter()
{
  return MEMORY[0x1F4152140]();
}

uint64_t ExecuteResponse.next.getter()
{
  return MEMORY[0x1F4152148]();
}

uint64_t ExecuteResponse.type.getter()
{
  return MEMORY[0x1F4152150]();
}

uint64_t static ExecuteResponse.ongoing<A>(next:)()
{
  return MEMORY[0x1F4152170]();
}

uint64_t static ExecuteResponse.complete()()
{
  return MEMORY[0x1F4152190]();
}

uint64_t static ExecuteResponse.redirect(nextPluginAction:)()
{
  return MEMORY[0x1F4152198]();
}

uint64_t type metadata accessor for ExecuteResponse()
{
  return MEMORY[0x1F41521A8]();
}

uint64_t NLContextUpdate.shouldResetFlowTaskState.setter()
{
  return MEMORY[0x1F41521B0]();
}

uint64_t NLContextUpdate.toAceContextUpdate()()
{
  return MEMORY[0x1F41521B8]();
}

uint64_t NLContextUpdate.doConvertToAceContextUpdate(options:)()
{
  return MEMORY[0x1F41521C0]();
}

uint64_t NLContextUpdate.doConvertToServerContextUpdate()()
{
  return MEMORY[0x1F41521C8]();
}

uint64_t NLContextUpdate.siriKitMetrics.setter()
{
  return MEMORY[0x1F41521D0]();
}

uint64_t NLContextUpdate.contextUpdateScope.getter()
{
  return MEMORY[0x1F41521D8]();
}

uint64_t NLContextUpdate.rrEntities.getter()
{
  return MEMORY[0x1F41521E0]();
}

uint64_t NLContextUpdate.isClientOnly.getter()
{
  return MEMORY[0x1F41521F8]();
}

uint64_t NLContextUpdate.pommesContext.getter()
{
  return MEMORY[0x1F4152200]();
}

uint64_t NLContextUpdate.nluSystemDialogActs.getter()
{
  return MEMORY[0x1F4152210]();
}

uint64_t NLContextUpdate.nluSystemDialogActs.setter()
{
  return MEMORY[0x1F4152218]();
}

uint64_t NLContextUpdate.undoDirectInvocation.getter()
{
  return MEMORY[0x1F4152228]();
}

uint64_t NLContextUpdate.restoreSessionForRequestId.getter()
{
  return MEMORY[0x1F4152240]();
}

uint64_t NLContextUpdate.init()()
{
  return MEMORY[0x1F4152260]();
}

uint64_t type metadata accessor for NLContextUpdate()
{
  return MEMORY[0x1F4152268]();
}

uint64_t PrepareResponse.onChildFlowCompletion.getter()
{
  return MEMORY[0x1F4152270]();
}

uint64_t PrepareResponse.needsExecute.getter()
{
  return MEMORY[0x1F4152278]();
}

uint64_t PrepareResponse.next.getter()
{
  return MEMORY[0x1F4152280]();
}

uint64_t PrepareResponse.type.getter()
{
  return MEMORY[0x1F4152288]();
}

uint64_t static PrepareResponse.ongoing(needsExecute:)()
{
  return MEMORY[0x1F4152290]();
}

uint64_t static PrepareResponse.complete()()
{
  return MEMORY[0x1F4152298]();
}

uint64_t type metadata accessor for PrepareResponse()
{
  return MEMORY[0x1F41522A0]();
}

uint64_t ResponseFactory.init()()
{
  return MEMORY[0x1F41522A8]();
}

uint64_t type metadata accessor for ResponseFactory()
{
  return MEMORY[0x1F41522B0]();
}

uint64_t static ActionParaphrase.noParaphrase()()
{
  return MEMORY[0x1F41522B8]();
}

uint64_t type metadata accessor for ActionParaphrase()
{
  return MEMORY[0x1F41522C0]();
}

uint64_t static AttachmentOption.Default.getter()
{
  return MEMORY[0x1F41522C8]();
}

uint64_t type metadata accessor for AttachmentOption()
{
  return MEMORY[0x1F41522D0]();
}

uint64_t ExecutionContext.init(outputPublisher:aceServiceInvoker:)()
{
  return MEMORY[0x1F41522D8]();
}

uint64_t type metadata accessor for ExecutionContext()
{
  return MEMORY[0x1F41522E0]();
}

uint64_t TemplatingResult.sections.getter()
{
  return MEMORY[0x1F4152320]();
}

uint64_t type metadata accessor for TemplatingResult()
{
  return MEMORY[0x1F4152328]();
}

uint64_t type metadata accessor for LaunchAppBehavior()
{
  return MEMORY[0x1F4152330]();
}

uint64_t dispatch thunk of LifeCycleModifier.onAttached()()
{
  return MEMORY[0x1F4152338]();
}

uint64_t dispatch thunk of LifeCycleModifier.onDetached(value:)()
{
  return MEMORY[0x1F4152340]();
}

uint64_t dispatch thunk of LifeCycleModifier.attachmentOption.getter()
{
  return MEMORY[0x1F4152348]();
}

uint64_t dispatch thunk of LifeCycleModifier.id.getter()
{
  return MEMORY[0x1F4152350]();
}

uint64_t dispatch thunk of PeerInfoProviding.getPeerName()()
{
  return MEMORY[0x1F4152358]();
}

uint64_t dispatch thunk of PeerInfoProviding.getDeviceIdiom()()
{
  return MEMORY[0x1F4152360]();
}

uint64_t dispatch thunk of PeerInfoProviding.getIdsIdentifier()()
{
  return MEMORY[0x1F4152368]();
}

uint64_t dispatch thunk of PeerInfoProviding.isOwnedByCurrentUser()()
{
  return MEMORY[0x1F4152370]();
}

uint64_t dispatch thunk of PeerInfoProviding.getMediaRouteIdentifier()()
{
  return MEMORY[0x1F4152378]();
}

uint64_t dispatch thunk of PeerInfoProviding.getMediaSystemIdentifier()()
{
  return MEMORY[0x1F4152380]();
}

uint64_t dispatch thunk of PeerInfoProviding.getRapportEffectiveIdentifier()()
{
  return MEMORY[0x1F4152388]();
}

uint64_t TemplatingSection.spokenOnly.getter()
{
  return MEMORY[0x1F4152390]();
}

uint64_t TemplatingSection.redactedContent.getter()
{
  return MEMORY[0x1F4152398]();
}

uint64_t TemplatingSection.content.getter()
{
  return MEMORY[0x1F41523B0]();
}

uint64_t type metadata accessor for TemplatingSection()
{
  return MEMORY[0x1F41523B8]();
}

uint64_t dispatch thunk of AnyChildCompletion.completion(exitValue:)()
{
  return MEMORY[0x1F41523C0]();
}

uint64_t type metadata accessor for AnyChildCompletion()
{
  return MEMORY[0x1F41523C8]();
}

uint64_t AnyChildCompletion.init<A>(_:)()
{
  return MEMORY[0x1F41523D0]();
}

uint64_t ContextUpdateScope.init(rawValue:)()
{
  return MEMORY[0x1F41523D8]();
}

uint64_t ContextUpdateScope.rawValue.getter()
{
  return MEMORY[0x1F41523E0]();
}

uint64_t type metadata accessor for ContextUpdateScope()
{
  return MEMORY[0x1F41523E8]();
}

uint64_t type metadata accessor for DialogEngineOutput()
{
  return MEMORY[0x1F41523F0]();
}

uint64_t type metadata accessor for InterruptionPolicy()
{
  return MEMORY[0x1F4152408]();
}

uint64_t type metadata accessor for SubmitCommandError()
{
  return MEMORY[0x1F4152430]();
}

uint64_t AppShortcutProvider.init()()
{
  return MEMORY[0x1F4152448]();
}

uint64_t type metadata accessor for AppShortcutProvider()
{
  return MEMORY[0x1F4152450]();
}

uint64_t ConversationContext.executionContext.getter()
{
  return MEMORY[0x1F4152468]();
}

uint64_t ConversationContext.init(executionContext:)()
{
  return MEMORY[0x1F4152470]();
}

uint64_t type metadata accessor for ConversationContext()
{
  return MEMORY[0x1F4152478]();
}

uint64_t type metadata accessor for ExecuteResponseType()
{
  return MEMORY[0x1F4152488]();
}

uint64_t type metadata accessor for PrepareResponseType()
{
  return MEMORY[0x1F41524A0]();
}

uint64_t CoreAnalyticsService.sendReliabilityEvent(event:file:line:function:)()
{
  return MEMORY[0x1F41524B0]();
}

Swift::Void __swiftcall CoreAnalyticsService.sendHandleRequestEvent(intentTypeName:)(Swift::String intentTypeName)
{
}

uint64_t static CoreAnalyticsService.instance.getter()
{
  return MEMORY[0x1F41524C0]();
}

uint64_t type metadata accessor for CoreAnalyticsService()
{
  return MEMORY[0x1F41524C8]();
}

uint64_t type metadata accessor for CorrectionsExitValue()
{
  return MEMORY[0x1F41524D0]();
}

uint64_t SnippetEventHandling.handler(for:)()
{
  return MEMORY[0x1F41524F8]();
}

uint64_t dispatch thunk of UserIdentityProvider.identityMeetingUserSessionThreshold.setter()
{
  return MEMORY[0x1F4152508]();
}

uint64_t dispatch thunk of UserIdentityProvider.knownHomeMembers.setter()
{
  return MEMORY[0x1F4152510]();
}

uint64_t dispatch thunk of UserIdentityProvider.identityForCurrentRequest.setter()
{
  return MEMORY[0x1F4152518]();
}

uint64_t type metadata accessor for UserIdentityProvider()
{
  return MEMORY[0x1F4152520]();
}

uint64_t AppShortcutInvocation.actionIdentifier.getter()
{
  return MEMORY[0x1F4152528]();
}

uint64_t AppShortcutInvocation.bundleId.getter()
{
  return MEMORY[0x1F4152530]();
}

uint64_t type metadata accessor for AppShortcutInvocation()
{
  return MEMORY[0x1F4152538]();
}

uint64_t dispatch thunk of EndpointInfoProviding.getIdentifier()()
{
  return MEMORY[0x1F4152548]();
}

uint64_t dispatch thunk of EndpointInfoProviding.getMediaRouteIdentifier()()
{
  return MEMORY[0x1F4152550]();
}

uint64_t NamedParseTransformer.resolve()()
{
  return MEMORY[0x1F4152558]();
}

uint64_t type metadata accessor for NamedParseTransformer()
{
  return MEMORY[0x1F4152560]();
}

uint64_t static SystemDialogActHelper.systemAskedUserToRepeat()()
{
  return MEMORY[0x1F4152568]();
}

uint64_t dispatch thunk of AceServiceInvokerAsync.submitAndForget(_:setRefId:)()
{
  return MEMORY[0x1F4152578]();
}

uint64_t AceServiceInvokerAsync.submitAndForget(_:)()
{
  return MEMORY[0x1F4152580]();
}

uint64_t dispatch thunk of AppInformationResolver.isSiriKitSupportedApp.getter()
{
  return MEMORY[0x1F4152590]();
}

uint64_t dispatch thunk of AppInformationResolver.resolveAppName.getter()
{
  return MEMORY[0x1F4152598]();
}

uint64_t dispatch thunk of AppInformationResolver.resolveAppVersion.getter()
{
  return MEMORY[0x1F41525A0]();
}

uint64_t dispatch thunk of AppInformationResolver.resolveAppBundleId.getter()
{
  return MEMORY[0x1F41525A8]();
}

uint64_t dispatch thunk of AppInformationResolver.resolveBuild.getter()
{
  return MEMORY[0x1F41525B0]();
}

uint64_t AppInformationResolver.init(app:)()
{
  return MEMORY[0x1F41525B8]();
}

uint64_t type metadata accessor for AppInformationResolver()
{
  return MEMORY[0x1F41525C0]();
}

uint64_t dispatch thunk of ConversationSELFHelper.makeAndSetConversationId(fromExecutionRequestId:)()
{
  return MEMORY[0x1F41525C8]();
}

uint64_t dispatch thunk of ConversationSELFHelper.withExecutionFlowPluginLoadTime<A>(rcId:pluginId:hypothesisId:_:)()
{
  return MEMORY[0x1F41525D0]();
}

uint64_t dispatch thunk of ConversationSELFHelper.withExecutionFlowPluginFindFlowTime<A>(rcId:hypothesisId:_:)()
{
  return MEMORY[0x1F41525D8]();
}

uint64_t dispatch thunk of ConversationSELFHelper.emitDecisionEngineDecision(flowHandlerId:parseHypothesisId:isInterpretableAsUniversalAction:isExistingFlowSelected:)()
{
  return MEMORY[0x1F41525E0]();
}

uint64_t dispatch thunk of ConversationSELFHelper.makeConversationIdAndEmitRequestLink(executionUUID:)()
{
  return MEMORY[0x1F41525E8]();
}

uint64_t dispatch thunk of ConversationSELFHelper.makeClientEvent(rcId:_:)()
{
  return MEMORY[0x1F41525F0]();
}

uint64_t dispatch thunk of ConversationSELFHelper.setExecutionRequestId(fromExecutionRequestId:)()
{
  return MEMORY[0x1F41525F8]();
}

uint64_t dispatch thunk of ConversationSELFHelper.emitExecutionOverrideInfo(rcId:executionOverrideDecision:)()
{
  return MEMORY[0x1F4152600]();
}

uint64_t dispatch thunk of ConversationSELFHelper.emitExecutionPrepareTimeEnd(rcId:)()
{
  return MEMORY[0x1F4152608]();
}

uint64_t dispatch thunk of ConversationSELFHelper.makeCamIdAndEmitRequestLink(executionUUID:)()
{
  return MEMORY[0x1F4152610]();
}

uint64_t dispatch thunk of ConversationSELFHelper.emitActionCandidatesCollated(rcId:collatedActions:)()
{
  return MEMORY[0x1F4152618]();
}

uint64_t dispatch thunk of ConversationSELFHelper.makeCaarIdAndEmitRequestLink(executionUUID:)()
{
  return MEMORY[0x1F4152620]();
}

uint64_t dispatch thunk of ConversationSELFHelper.emitExecutionPrepareTimeBegin(rcId:)()
{
  return MEMORY[0x1F4152628]();
}

uint64_t dispatch thunk of ConversationSELFHelper.emitEagerExecutionContextEnded(rcId:)()
{
  return MEMORY[0x1F4152630]();
}

uint64_t dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextEnded(rcId:hypothesisId:)()
{
  return MEMORY[0x1F4152638]();
}

uint64_t dispatch thunk of ConversationSELFHelper.emitEagerExecutionContextFailed(rcId:reason:)()
{
  return MEMORY[0x1F4152640]();
}

uint64_t dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextFailed(rcId:hypothesisId:reason:)()
{
  return MEMORY[0x1F4152648]();
}

uint64_t dispatch thunk of ConversationSELFHelper.emitEagerExecutionContextStarted(rcId:fromPlugin:)()
{
  return MEMORY[0x1F4152650]();
}

uint64_t dispatch thunk of ConversationSELFHelper.emitFinalExecutionContextStarted(rcId:hypothesisId:fromPlugin:stackDepth:)()
{
  return MEMORY[0x1F4152658]();
}

uint64_t dispatch thunk of ConversationSELFHelper.emit(_:)()
{
  return MEMORY[0x1F4152660]();
}

uint64_t static ConversationSELFHelper.shared.getter()
{
  return MEMORY[0x1F4152668]();
}

uint64_t static ConversationSELFHelper.convert(fromPlugin:)()
{
  return MEMORY[0x1F4152670]();
}

uint64_t static ConversationSELFHelper.makeUUID(fromExecutionRequestId:)()
{
  return MEMORY[0x1F4152678]();
}

uint64_t type metadata accessor for ConversationSELFHelper()
{
  return MEMORY[0x1F4152680]();
}

uint64_t ExecuteOnRemotePayload.input.getter()
{
  return MEMORY[0x1F4152688]();
}

uint64_t ExecuteOnRemotePayload.rrData.getter()
{
  return MEMORY[0x1F4152690]();
}

uint64_t type metadata accessor for ExecuteOnRemotePayload()
{
  return MEMORY[0x1F4152698]();
}

uint64_t type metadata accessor for InputContinuationState()
{
  return MEMORY[0x1F41526A0]();
}

uint64_t static OutputPublisherFactory.makeOutputPublisherAsync()()
{
  return MEMORY[0x1F41526C0]();
}

uint64_t static DeviceEnvironmentHelper.startUpdating()()
{
  return MEMORY[0x1F41526D0]();
}

uint64_t type metadata accessor for DeviceEnvironmentHelper()
{
  return MEMORY[0x1F41526D8]();
}

uint64_t type metadata accessor for CorrectionsActionOutcome()
{
  return MEMORY[0x1F41526E0]();
}

uint64_t OutputGenerationManifest.init(dialogPhase:_:)()
{
  return MEMORY[0x1F41526E8]();
}

uint64_t type metadata accessor for OutputGenerationManifest()
{
  return MEMORY[0x1F4152738]();
}

uint64_t dispatch thunk of AceServiceContextProvider.shouldFallbacktoAWDL.getter()
{
  return MEMORY[0x1F4152740]();
}

uint64_t type metadata accessor for AceServiceContextProvider()
{
  return MEMORY[0x1F4152748]();
}

uint64_t dispatch thunk of NLRoutingDecisionProvider.genAIFallbackSuppressReason.getter()
{
  return MEMORY[0x1F4152750]();
}

uint64_t NLRoutingDecisionProvider.init(genAIFallbackSuppressReason:)()
{
  return MEMORY[0x1F4152758]();
}

uint64_t type metadata accessor for NLRoutingDecisionProvider()
{
  return MEMORY[0x1F4152760]();
}

uint64_t AppShortcutExactInvocation.actionIdentifier.getter()
{
  return MEMORY[0x1F4152790]();
}

uint64_t AppShortcutExactInvocation.bundleId.getter()
{
  return MEMORY[0x1F4152798]();
}

uint64_t type metadata accessor for AppShortcutExactInvocation()
{
  return MEMORY[0x1F41527A0]();
}

uint64_t type metadata accessor for MetricsEnvironmentProvider()
{
  return MEMORY[0x1F41527A8]();
}

uint64_t UniversalActionFeatureFlags.isEnabled.getter()
{
  return MEMORY[0x1F41527C8]();
}

uint64_t type metadata accessor for UniversalActionFeatureFlags()
{
  return MEMORY[0x1F41527D0]();
}

uint64_t dispatch thunk of CallStateEnvironmentProvider.callState.getter()
{
  return MEMORY[0x1F41527D8]();
}

uint64_t dispatch thunk of CallStateEnvironmentProvider.isDropInCall.getter()
{
  return MEMORY[0x1F41527E0]();
}

uint64_t dispatch thunk of CallStateEnvironmentProvider.onSpeaker.getter()
{
  return MEMORY[0x1F41527E8]();
}

uint64_t type metadata accessor for CallStateEnvironmentProvider()
{
  return MEMORY[0x1F41527F0]();
}

uint64_t static CamDirectInvocationIdentifiers.giveUpRepeat.getter()
{
  return MEMORY[0x1F41527F8]();
}

uint64_t static CamDirectInvocationIdentifiers.disambiguateTopTwo.getter()
{
  return MEMORY[0x1F4152800]();
}

uint64_t static CamDirectInvocationIdentifiers.fallback.getter()
{
  return MEMORY[0x1F4152808]();
}

uint64_t static CamDirectInvocationIdentifiers.askRepeat.getter()
{
  return MEMORY[0x1F4152810]();
}

uint64_t static HandcraftedPluginManifestEntry.fromPluginBundleIdOrPath(_:)()
{
  return MEMORY[0x1F4152818]();
}

uint64_t HandcraftedPluginManifestEntry.isPersonalDomain.getter()
{
  return MEMORY[0x1F4152820]();
}

uint64_t HandcraftedPluginManifestEntry.sensitivityPolicy.getter()
{
  return MEMORY[0x1F4152828]();
}

uint64_t HandcraftedPluginManifestEntry.rawValue.getter()
{
  return MEMORY[0x1F4152830]();
}

uint64_t type metadata accessor for HandcraftedPluginManifestEntry()
{
  return MEMORY[0x1F4152838]();
}

uint64_t static FlexibleExecutionSupportOptions.inputContinuation.getter()
{
  return MEMORY[0x1F4152840]();
}

uint64_t static FlexibleExecutionSupportOptions.executeBeforeEndpoint.getter()
{
  return MEMORY[0x1F4152848]();
}

uint64_t FlexibleExecutionSupportOptions.init(rawValue:)()
{
  return MEMORY[0x1F4152850]();
}

uint64_t FlexibleExecutionSupportOptions.rawValue.getter()
{
  return MEMORY[0x1F4152858]();
}

uint64_t type metadata accessor for FlexibleExecutionSupportOptions()
{
  return MEMORY[0x1F4152860]();
}

uint64_t AppShortcutGeneralizedInvocation.extractedActionIdentifier.getter()
{
  return MEMORY[0x1F4152868]();
}

uint64_t AppShortcutGeneralizedInvocation.bundleId.getter()
{
  return MEMORY[0x1F4152870]();
}

uint64_t type metadata accessor for AppShortcutGeneralizedInvocation()
{
  return MEMORY[0x1F4152878]();
}

uint64_t dispatch thunk of ReferenceResolutionClientProtocol.siriMentioned(entities:configuration:completion:)()
{
  return MEMORY[0x1F4152898]();
}

uint64_t dispatch thunk of ReferenceResolutionClientProtocol.retrieveSalientEntities()()
{
  return MEMORY[0x1F41528A0]();
}

uint64_t dispatch thunk of ReferenceResolutionClientProtocol.inRequest(requestId:)()
{
  return MEMORY[0x1F41528A8]();
}

uint64_t static UserIdentityCheckResponseProvider.activeSessionUserNotRecognizedCatInfo(activeSessionUser:deviceName:)()
{
  return MEMORY[0x1F41528B8]();
}

uint64_t type metadata accessor for NLContextUpdateSerializationOptions()
{
  return MEMORY[0x1F41528C0]();
}

uint64_t Input.identifier.getter()
{
  return MEMORY[0x1F41528C8]();
}

uint64_t Input.description.getter()
{
  return MEMORY[0x1F41528D0]();
}

uint64_t Input.alternatives.getter()
{
  return MEMORY[0x1F41528D8]();
}

uint64_t Input.continuationState.getter()
{
  return MEMORY[0x1F41528E0]();
}

uint64_t Input.withReformedParse(_:)()
{
  return MEMORY[0x1F41528E8]();
}

uint64_t Input.inputOrAlternativesDirectDismissal.getter()
{
  return MEMORY[0x1F41528F0]();
}

uint64_t Input.inputOrAlternativesHasWantedToPause.getter()
{
  return MEMORY[0x1F41528F8]();
}

uint64_t Input.inputOrAlternativesInterpretableAsUniversalAction.getter()
{
  return MEMORY[0x1F4152900]();
}

uint64_t Input.init(parse:alternatives:continuationState:)()
{
  return MEMORY[0x1F4152908]();
}

uint64_t Input.init(parse:alternatives:)()
{
  return MEMORY[0x1F4152910]();
}

uint64_t Input.parse.getter()
{
  return MEMORY[0x1F4152918]();
}

uint64_t Input.init(parse:)()
{
  return MEMORY[0x1F4152920]();
}

uint64_t type metadata accessor for Input()
{
  return MEMORY[0x1F4152928]();
}

uint64_t Parse.nlLocation.getter()
{
  return MEMORY[0x1F4152930]();
}

uint64_t Parse.hasRejected.getter()
{
  return MEMORY[0x1F4152938]();
}

uint64_t Parse.hasThankYou.getter()
{
  return MEMORY[0x1F4152940]();
}

uint64_t Parse.hasCancelled.getter()
{
  return MEMORY[0x1F4152948]();
}

uint64_t Parse.PegasusResult.init(pegasusResponse:)()
{
  return MEMORY[0x1F4152950]();
}

uint64_t type metadata accessor for Parse.PegasusResult()
{
  return MEMORY[0x1F4152958]();
}

uint64_t Parse.DirectInvocation.init(identifier:userData:)()
{
  return MEMORY[0x1F4152960]();
}

uint64_t Parse.DirectInvocation.identifier.getter()
{
  return MEMORY[0x1F4152968]();
}

uint64_t Parse.DirectInvocation.userData.getter()
{
  return MEMORY[0x1F4152970]();
}

uint64_t type metadata accessor for Parse.DirectInvocation()
{
  return MEMORY[0x1F4152978]();
}

uint64_t Parse.ServerConversion.init(siriKitIntent:confirmationState:parameterMetadata:appResolutionStateProviding:)()
{
  return MEMORY[0x1F4152980]();
}

uint64_t Parse.ServerConversion.siriKitIntent.getter()
{
  return MEMORY[0x1F4152988]();
}

uint64_t type metadata accessor for Parse.ServerConversion()
{
  return MEMORY[0x1F4152990]();
}

uint64_t Parse.hasDirectDismissal.getter()
{
  return MEMORY[0x1F4152998]();
}

uint64_t Parse.interpretableAsUniversalAction.getter()
{
  return MEMORY[0x1F41529A0]();
}

uint64_t Parse.usoTasks.getter()
{
  return MEMORY[0x1F41529A8]();
}

uint64_t Parse.parseType.getter()
{
  return MEMORY[0x1F41529B0]();
}

uint64_t type metadata accessor for Parse()
{
  return MEMORY[0x1F41529B8]();
}

uint64_t static Metrics.setMetricsState(_:)()
{
  return MEMORY[0x1F41529C8]();
}

uint64_t USOParse.groupIndex.getter()
{
  return MEMORY[0x1F41529D0]();
}

uint64_t USOParse.appBundleId.getter()
{
  return MEMORY[0x1F41529D8]();
}

uint64_t USOParse.parserIdentifier.getter()
{
  return MEMORY[0x1F41529E0]();
}

uint64_t USOParse.userParse.getter()
{
  return MEMORY[0x1F41529F0]();
}

uint64_t USOParse.init(userParse:parserIdentifier:appBundleId:groupIndex:)()
{
  return MEMORY[0x1F41529F8]();
}

uint64_t USOParse.init(userParse:parserIdentifier:appBundleId:)()
{
  return MEMORY[0x1F4152A00]();
}

uint64_t type metadata accessor for USOParse()
{
  return MEMORY[0x1F4152A08]();
}

uint64_t LinkParse.init(usoParse:actionId:entityId:entityDisplayName:)()
{
  return MEMORY[0x1F4152A28]();
}

uint64_t LinkParse.usoParse.getter()
{
  return MEMORY[0x1F4152A30]();
}

uint64_t type metadata accessor for LinkParse()
{
  return MEMORY[0x1F4152A38]();
}

uint64_t isFeatureEnabled(_:)()
{
  return MEMORY[0x1F4119150]();
}

uint64_t Siri_Nlu_External_Task.task.getter()
{
  return MEMORY[0x1F4154E20]();
}

uint64_t type metadata accessor for Siri_Nlu_External_Task()
{
  return MEMORY[0x1F4154E40]();
}

uint64_t Siri_Nlu_External_UUID.init()()
{
  return MEMORY[0x1F4154E48]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UUID()
{
  return MEMORY[0x1F4154E50]();
}

uint64_t Siri_Nlu_External_Parser.hasParserID.getter()
{
  return MEMORY[0x1F4154E58]();
}

uint64_t type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier()
{
  return MEMORY[0x1F4154E70]();
}

uint64_t Siri_Nlu_External_Parser.parserID.getter()
{
  return MEMORY[0x1F4154E88]();
}

uint64_t type metadata accessor for Siri_Nlu_External_Parser()
{
  return MEMORY[0x1F4154E98]();
}

uint64_t Siri_Nlu_External_UsoGraph.identifiers.getter()
{
  return MEMORY[0x1F4154F20]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UsoGraph()
{
  return MEMORY[0x1F4154F60]();
}

uint64_t Siri_Nlu_External_UserParse.hasParserID.getter()
{
  return MEMORY[0x1F4154F70]();
}

uint64_t Siri_Nlu_External_UserParse.userDialogActs.modify()
{
  return MEMORY[0x1F4154F88]();
}

uint64_t Siri_Nlu_External_UserParse.userDialogActs.getter()
{
  return MEMORY[0x1F4154FA0]();
}

uint64_t Siri_Nlu_External_UserParse.userDialogActs.setter()
{
  return MEMORY[0x1F4154FA8]();
}

uint64_t Siri_Nlu_External_UserParse.repetitionResult.getter()
{
  return MEMORY[0x1F4154FB0]();
}

uint64_t Siri_Nlu_External_UserParse.comparableProbability.getter()
{
  return MEMORY[0x1F4154FC0]();
}

uint64_t Siri_Nlu_External_UserParse.id.getter()
{
  return MEMORY[0x1F4154FE0]();
}

uint64_t Siri_Nlu_External_UserParse.parser.getter()
{
  return MEMORY[0x1F4154FF0]();
}

uint64_t Siri_Nlu_External_UserParse.parserID.getter()
{
  return MEMORY[0x1F4155000]();
}

uint64_t Siri_Nlu_External_UserParse.hasParser.getter()
{
  return MEMORY[0x1F4155008]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserParse()
{
  return MEMORY[0x1F4155020]();
}

uint64_t Siri_Nlu_External_AsrHypothesis.probability.setter()
{
  return MEMORY[0x1F4155050]();
}

uint64_t Siri_Nlu_External_AsrHypothesis.id.setter()
{
  return MEMORY[0x1F4155058]();
}

uint64_t Siri_Nlu_External_AsrHypothesis.asrTokens.setter()
{
  return MEMORY[0x1F4155060]();
}

uint64_t Siri_Nlu_External_AsrHypothesis.utterance.getter()
{
  return MEMORY[0x1F4155068]();
}

uint64_t Siri_Nlu_External_AsrHypothesis.utterance.setter()
{
  return MEMORY[0x1F4155070]();
}

uint64_t Siri_Nlu_External_AsrHypothesis.init()()
{
  return MEMORY[0x1F4155078]();
}

uint64_t type metadata accessor for Siri_Nlu_External_AsrHypothesis()
{
  return MEMORY[0x1F4155080]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter()
{
  return MEMORY[0x1F41550A8]();
}

uint64_t Siri_Nlu_External_UserDialogAct.extractAppShortcutInvocation(groupIndex:)()
{
  return MEMORY[0x1F4152A40]();
}

uint64_t Siri_Nlu_External_UserDialogAct.extractGeneralizedAppShortcutInvocation(groupIndex:)()
{
  return MEMORY[0x1F4152A48]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasAccepted.getter()
{
  return MEMORY[0x1F41550B0]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasCancelled.getter()
{
  return MEMORY[0x1F41550D0]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasDelegated.getter()
{
  return MEMORY[0x1F41550E0]();
}

Swift::String_optional __swiftcall Siri_Nlu_External_UserDialogAct.typeAsString()()
{
  uint64_t v0 = MEMORY[0x1F41550E8]();
  result.value._object = v1;
  result.value._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t Siri_Nlu_External_UserDialogAct.userStatedTask.getter()
{
  return MEMORY[0x1F41550F8]();
}

uint64_t Siri_Nlu_External_UserDialogAct.hasWantedToRepeat.getter()
{
  return MEMORY[0x1F4155120]();
}

uint64_t Siri_Nlu_External_UserDialogAct.delegated.getter()
{
  return MEMORY[0x1F4155138]();
}

uint64_t Siri_Nlu_External_UserDialogAct.delegated.setter()
{
  return MEMORY[0x1F4155140]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserDialogAct()
{
  return MEMORY[0x1F4155158]();
}

uint64_t type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode()
{
  return MEMORY[0x1F4155190]();
}

uint64_t type metadata accessor for Siri_Nlu_External_RewriteMessage.RewriteType()
{
  return MEMORY[0x1F4155198]();
}

uint64_t Siri_Nlu_External_RewriteMessage.rewriteType.getter()
{
  return MEMORY[0x1F41551A0]();
}

uint64_t Siri_Nlu_External_RewriteMessage.rewrittenUtterance.getter()
{
  return MEMORY[0x1F41551A8]();
}

uint64_t type metadata accessor for Siri_Nlu_External_RewriteMessage()
{
  return MEMORY[0x1F41551B0]();
}

uint64_t Siri_Nlu_External_UserStatedTask.task.getter()
{
  return MEMORY[0x1F41551F0]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UserStatedTask()
{
  return MEMORY[0x1F4155218]();
}

uint64_t type metadata accessor for Siri_Nlu_External_LegacyNLContext.LegacyContextSource()
{
  return MEMORY[0x1F4155220]();
}

uint64_t Siri_Nlu_External_LegacyNLContext.strictPrompt.setter()
{
  return MEMORY[0x1F4155228]();
}

uint64_t Siri_Nlu_External_LegacyNLContext.renderedTexts.setter()
{
  return MEMORY[0x1F4155230]();
}

uint64_t Siri_Nlu_External_LegacyNLContext.dictationPrompt.setter()
{
  return MEMORY[0x1F4155238]();
}

uint64_t Siri_Nlu_External_LegacyNLContext.previousDomainName.setter()
{
  return MEMORY[0x1F4155240]();
}

uint64_t Siri_Nlu_External_LegacyNLContext.legacyContextSource.setter()
{
  return MEMORY[0x1F4155248]();
}

uint64_t Siri_Nlu_External_LegacyNLContext.listenAfterSpeaking.setter()
{
  return MEMORY[0x1F4155250]();
}

uint64_t Siri_Nlu_External_LegacyNLContext.responseSemanticValues.getter()
{
  return MEMORY[0x1F4155258]();
}

uint64_t Siri_Nlu_External_LegacyNLContext.responseSemanticValues.setter()
{
  return MEMORY[0x1F4155260]();
}

uint64_t Siri_Nlu_External_LegacyNLContext.init()()
{
  return MEMORY[0x1F4155268]();
}

uint64_t type metadata accessor for Siri_Nlu_External_LegacyNLContext()
{
  return MEMORY[0x1F4155270]();
}

uint64_t type metadata accessor for Siri_Nlu_External_SystemDialogAct()
{
  return MEMORY[0x1F41552B0]();
}

uint64_t type metadata accessor for Siri_Nlu_External_RepetitionResult.RepetitionType()
{
  return MEMORY[0x1F41552B8]();
}

uint64_t Siri_Nlu_External_RepetitionResult.repetitionType.getter()
{
  return MEMORY[0x1F41552C0]();
}

uint64_t type metadata accessor for Siri_Nlu_External_RepetitionResult()
{
  return MEMORY[0x1F41552C8]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.beginIndex.getter()
{
  return MEMORY[0x1F4155318]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.beginIndex.setter()
{
  return MEMORY[0x1F4155320]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.postItnText.getter()
{
  return MEMORY[0x1F4155328]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.postItnText.setter()
{
  return MEMORY[0x1F4155330]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.addSpaceAfter.getter()
{
  return MEMORY[0x1F4155338]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.addSpaceAfter.setter()
{
  return MEMORY[0x1F4155340]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.phoneSequence.setter()
{
  return MEMORY[0x1F4155348]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.confidenceScore.setter()
{
  return MEMORY[0x1F4155350]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.endMilliSeconds.setter()
{
  return MEMORY[0x1F4155358]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.ipaPhoneSequence.setter()
{
  return MEMORY[0x1F4155360]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.removeSpaceAfter.getter()
{
  return MEMORY[0x1F4155368]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.removeSpaceAfter.setter()
{
  return MEMORY[0x1F4155370]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.removeSpaceBefore.getter()
{
  return MEMORY[0x1F4155378]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.removeSpaceBefore.setter()
{
  return MEMORY[0x1F4155380]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.startMilliSeconds.setter()
{
  return MEMORY[0x1F4155388]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.endIndex.getter()
{
  return MEMORY[0x1F4155390]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.endIndex.setter()
{
  return MEMORY[0x1F4155398]();
}

uint64_t Siri_Nlu_External_AsrTokenInformation.init()()
{
  return MEMORY[0x1F41553A0]();
}

uint64_t type metadata accessor for Siri_Nlu_External_AsrTokenInformation()
{
  return MEMORY[0x1F41553A8]();
}

uint64_t Siri_Nlu_External_MultilingualVariant.languageVariantName.getter()
{
  return MEMORY[0x1F41553B0]();
}

uint64_t type metadata accessor for Siri_Nlu_External_MultilingualVariant()
{
  return MEMORY[0x1F41553C0]();
}

uint64_t Siri_Nlu_External_UsoEntityIdentifier.hasNamespace.getter()
{
  return MEMORY[0x1F41553E8]();
}

uint64_t Siri_Nlu_External_UsoEntityIdentifier.backingAppBundleID.getter()
{
  return MEMORY[0x1F41553F8]();
}

uint64_t Siri_Nlu_External_UsoEntityIdentifier.hasBackingAppBundleID.getter()
{
  return MEMORY[0x1F4155400]();
}

uint64_t Siri_Nlu_External_UsoEntityIdentifier.value.getter()
{
  return MEMORY[0x1F4155408]();
}

uint64_t Siri_Nlu_External_UsoEntityIdentifier.namespace.getter()
{
  return MEMORY[0x1F4155410]();
}

uint64_t type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier()
{
  return MEMORY[0x1F4155418]();
}

uint64_t Siri_Nlu_External_LanguageVariantResult.multilingualVariant.getter()
{
  return MEMORY[0x1F4155420]();
}

uint64_t type metadata accessor for Siri_Nlu_External_LanguageVariantResult()
{
  return MEMORY[0x1F4155430]();
}

uint64_t Siri_Nlu_External_DelegatedUserDialogAct.hasRewrite.getter()
{
  return MEMORY[0x1F4155438]();
}

uint64_t Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter()
{
  return MEMORY[0x1F4155448]();
}

uint64_t Siri_Nlu_External_DelegatedUserDialogAct.asrHypothesisIndex.getter()
{
  return MEMORY[0x1F4155458]();
}

uint64_t Siri_Nlu_External_DelegatedUserDialogAct.rewrittenUtterance.getter()
{
  return MEMORY[0x1F4155460]();
}

uint64_t Siri_Nlu_External_DelegatedUserDialogAct.rewrite.getter()
{
  return MEMORY[0x1F4155470]();
}

uint64_t type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct()
{
  return MEMORY[0x1F4155480]();
}

uint64_t static SiriNLUTypesPrintUtils.printableProtoObject(object:)()
{
  return MEMORY[0x1F4155488]();
}

uint64_t type metadata accessor for SiriNLUTypesPrintUtils()
{
  return MEMORY[0x1F4155490]();
}

uint64_t static ConversionUtils.toUserParse(from:)()
{
  return MEMORY[0x1F4155498]();
}

uint64_t static ConversionUtils.toLegacyUserParse(from:)()
{
  return MEMORY[0x1F41554A0]();
}

uint64_t static ConversionUtils.convertProtoToUuid(protoUuid:)()
{
  return MEMORY[0x1F41554A8]();
}

uint64_t static ConversionUtils.convertUuidToProto(uuid:)()
{
  return MEMORY[0x1F41554B0]();
}

uint64_t static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)()
{
  return MEMORY[0x1F41554B8]();
}

uint64_t static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)()
{
  return MEMORY[0x1F41554C8]();
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.strictPrompt.getter()
{
  return MEMORY[0x1F4155A08]();
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.dictationPrompt.getter()
{
  return MEMORY[0x1F4155A18]();
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.domainHints.getter()
{
  return MEMORY[0x1F4155A28]();
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.responseOptions.getter()
{
  return MEMORY[0x1F4155A58]();
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.previousDomainName.getter()
{
  return MEMORY[0x1F4155A80]();
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.listenAfterSpeaking.getter()
{
  return MEMORY[0x1F4155A90]();
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext()
{
  return MEMORY[0x1F4155AC0]();
}

uint64_t Com_Apple_Siri_Product_Proto_SemanticValue.serializedValue.getter()
{
  return MEMORY[0x1F4155AC8]();
}

uint64_t type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue()
{
  return MEMORY[0x1F4155AF8]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter()
{
  return MEMORY[0x1F4155B28]();
}

uint64_t type metadata accessor for UsoEntity_common_AppEntity()
{
  return MEMORY[0x1F4155B30]();
}

uint64_t dispatch thunk of UsoEntity_common_UserEntity.associatedUserEntities.getter()
{
  return MEMORY[0x1F4155B38]();
}

uint64_t dispatch thunk of UsoEntity_common_UserEntity.definedValue.getter()
{
  return MEMORY[0x1F4155B40]();
}

uint64_t type metadata accessor for UsoEntity_common_UserEntity.DefinedValues()
{
  return MEMORY[0x1F4155B48]();
}

uint64_t type metadata accessor for UsoEntity_common_UserEntity()
{
  return MEMORY[0x1F4155B60]();
}

uint64_t type metadata accessor for UsoTask_requestLog_common_HealthLog()
{
  return MEMORY[0x1F4155BA8]();
}

uint64_t type metadata accessor for Siri_Nl_Core_Protocol_UsoGraph()
{
  return MEMORY[0x1F4155C90]();
}

uint64_t dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)()
{
  return MEMORY[0x1F4155CC0]();
}

uint64_t dispatch thunk of CodeGenBase.usoIdentifiers.getter()
{
  return MEMORY[0x1F4155CC8]();
}

uint64_t SpanProperty.valueString.getter()
{
  return MEMORY[0x1F4155D30]();
}

uint64_t SpanProperty.key.getter()
{
  return MEMORY[0x1F4155D48]();
}

uint64_t type metadata accessor for SpanProperty()
{
  return MEMORY[0x1F4155D58]();
}

uint64_t UsoEntitySpan.properties.getter()
{
  return MEMORY[0x1F4155D90]();
}

uint64_t UsoEntitySpan.originAppId.getter()
{
  return MEMORY[0x1F4155DA8]();
}

uint64_t UsoEntitySpan.indexesMatch(_:)()
{
  return MEMORY[0x1F4155DB8]();
}

uint64_t UsoEntitySpan.appBundleSemantic.getter()
{
  return MEMORY[0x1F4155DC8]();
}

uint64_t UsoEntitySpan.payloadAttachmentInfo.getter()
{
  return MEMORY[0x1F4155DD0]();
}

uint64_t static UsoEntitySpan.== infix(_:_:)()
{
  return MEMORY[0x1F4155DD8]();
}

uint64_t UsoEntitySpan.matchInfo.getter()
{
  return MEMORY[0x1F4155DF0]();
}

uint64_t type metadata accessor for UsoEntitySpan()
{
  return MEMORY[0x1F4155DF8]();
}

uint64_t UsoIdentifier.groupIndex.getter()
{
  return MEMORY[0x1F4155E10]();
}

uint64_t UsoIdentifier.appBundleId.getter()
{
  return MEMORY[0x1F4155E18]();
}

uint64_t type metadata accessor for UsoIdentifier.NluComponent()
{
  return MEMORY[0x1F4155E38]();
}

uint64_t UsoIdentifier.sourceComponent.getter()
{
  return MEMORY[0x1F4155E40]();
}

uint64_t UsoIdentifier.appBundleSemantic.getter()
{
  return MEMORY[0x1F4155E48]();
}

uint64_t UsoIdentifier.namespaceSemantic.getter()
{
  return MEMORY[0x1F4155E50]();
}

uint64_t UsoIdentifier.init(value:appBundleId:namespace:)()
{
  return MEMORY[0x1F4155E78]();
}

uint64_t UsoIdentifier.value.getter()
{
  return MEMORY[0x1F4155E80]();
}

uint64_t UsoIdentifier.namespace.getter()
{
  return MEMORY[0x1F4155E88]();
}

uint64_t type metadata accessor for UsoIdentifier()
{
  return MEMORY[0x1F4155E90]();
}

uint64_t dispatch thunk of CodeGenListEntry.entry.getter()
{
  return MEMORY[0x1F4156120]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter()
{
  return MEMORY[0x1F41561F8]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter()
{
  return MEMORY[0x1F4156200]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter()
{
  return MEMORY[0x1F4156208]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.getEntitySpansFor(attributeName:)()
{
  return MEMORY[0x1F4156210]();
}

uint64_t dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)()
{
  return MEMORY[0x1F4156220]();
}

uint64_t static UsoGraphUnitIndex.inferQualifiedVerbData(taskName:)()
{
  return MEMORY[0x1F4156238]();
}

uint64_t static UsoConversionUtils.convertGraphToTasks(graph:)()
{
  return MEMORY[0x1F41562E0]();
}

uint64_t static UsoConversionUtils.extractFirstEntityFromGraph(graph:)()
{
  return MEMORY[0x1F41562F0]();
}

uint64_t static IdentifierAppBundle.== infix(_:_:)()
{
  return MEMORY[0x1F4156330]();
}

uint64_t IdentifierAppBundle.rawValue.getter()
{
  return MEMORY[0x1F4156338]();
}

uint64_t type metadata accessor for IdentifierAppBundle()
{
  return MEMORY[0x1F4156340]();
}

uint64_t IdentifierNamespace.rawValue.getter()
{
  return MEMORY[0x1F4156348]();
}

uint64_t type metadata accessor for IdentifierNamespace()
{
  return MEMORY[0x1F4156350]();
}

uint64_t dispatch thunk of UsoEntity_common_App.name.getter()
{
  return MEMORY[0x1F4156360]();
}

uint64_t type metadata accessor for UsoEntity_common_App()
{
  return MEMORY[0x1F4156368]();
}

uint64_t NonTerminalIntentNode.ontologyNodeName.getter()
{
  return MEMORY[0x1F41563C8]();
}

uint64_t type metadata accessor for NonTerminalIntentNode()
{
  return MEMORY[0x1F41563D8]();
}

uint64_t type metadata accessor for PayloadAttachmentInfo.AttachmentType()
{
  return MEMORY[0x1F41563F0]();
}

uint64_t PayloadAttachmentInfo.attachmentType.getter()
{
  return MEMORY[0x1F4156400]();
}

uint64_t type metadata accessor for PayloadAttachmentInfo()
{
  return MEMORY[0x1F4156408]();
}

uint64_t UsoEntity_common_Date.toDate()()
{
  return MEMORY[0x1F4150AF0]();
}

uint64_t dispatch thunk of UsoEntity_common_Date.weekOfYear.getter()
{
  return MEMORY[0x1F4156440]();
}

uint64_t dispatch thunk of UsoEntity_common_Date.monthOfYear.getter()
{
  return MEMORY[0x1F4156450]();
}

uint64_t dispatch thunk of UsoEntity_common_Date.definedValue.getter()
{
  return MEMORY[0x1F4156460]();
}

uint64_t type metadata accessor for UsoEntity_common_Date.DefinedValues()
{
  return MEMORY[0x1F4156468]();
}

uint64_t dispatch thunk of UsoEntity_common_Alarm.endDateTime.getter()
{
  return MEMORY[0x1F41564E0]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.definedValue.getter()
{
  return MEMORY[0x1F4156528]();
}

uint64_t type metadata accessor for UsoEntity_common_Person.DefinedValues()
{
  return MEMORY[0x1F4156530]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.associatedDate.getter()
{
  return MEMORY[0x1F4156538]();
}

uint64_t dispatch thunk of UsoEntity_common_Person.age.getter()
{
  return MEMORY[0x1F4156568]();
}

uint64_t type metadata accessor for UsoEntity_common_Window()
{
  return MEMORY[0x1F4156580]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_Target.target.getter()
{
  return MEMORY[0x1F4156590]();
}

uint64_t dispatch thunk of UsoEntity_common_Message.mode.getter()
{
  return MEMORY[0x1F41565A8]();
}

uint64_t dispatch thunk of UsoEntity_common_Message.subject.getter()
{
  return MEMORY[0x1F41565B0]();
}

uint64_t dispatch thunk of UsoEntity_common_Setting.associatedSetting.getter()
{
  return MEMORY[0x1F41565B8]();
}

uint64_t dispatch thunk of UsoEntity_common_Setting.name.getter()
{
  return MEMORY[0x1F41565C0]();
}

uint64_t dispatch thunk of UsoEntity_common_Setting.value.getter()
{
  return MEMORY[0x1F41565C8]();
}

uint64_t type metadata accessor for UsoEntity_common_Setting()
{
  return MEMORY[0x1F41565D0]();
}

uint64_t static UsoTask_CodegenConverter.convert(task:)()
{
  return MEMORY[0x1F41565D8]();
}

uint64_t type metadata accessor for UsoTask_close_common_App()
{
  return MEMORY[0x1F41565E0]();
}

uint64_t type metadata accessor for UsoTask_read_common_Note()
{
  return MEMORY[0x1F41565E8]();
}

uint64_t type metadata accessor for UsoTask_undo_common_Note()
{
  return MEMORY[0x1F41565F0]();
}

uint64_t static UsoBuilderConversionUtils.convertEntityBuilderToEntity(entityBuilder:)()
{
  return MEMORY[0x1F41565F8]();
}

uint64_t static UsoBuilderConversionUtils.convertEntityToGraph(entity:)()
{
  return MEMORY[0x1F4156610]();
}

uint64_t dispatch thunk of UsoEntity_common_DateTime.offsetValue.getter()
{
  return MEMORY[0x1F4156620]();
}

uint64_t dispatch thunk of UsoEntity_common_DateTime.definedValue.getter()
{
  return MEMORY[0x1F4156628]();
}

uint64_t type metadata accessor for UsoEntity_common_DateTime.DefinedValues()
{
  return MEMORY[0x1F4156630]();
}

uint64_t dispatch thunk of UsoEntity_common_DateTime.offsetReference.getter()
{
  return MEMORY[0x1F4156638]();
}

uint64_t dispatch thunk of UsoEntity_common_DateTime.date.getter()
{
  return MEMORY[0x1F4156640]();
}

uint64_t dispatch thunk of UsoEntity_common_DateTime.time.getter()
{
  return MEMORY[0x1F4156650]();
}

uint64_t type metadata accessor for UsoTask_open_uso_NoEntity()
{
  return MEMORY[0x1F41566A8]();
}

uint64_t type metadata accessor for UsoTask_play_uso_NoEntity()
{
  return MEMORY[0x1F41566B0]();
}

uint64_t type metadata accessor for UsoTask_read_uso_NoEntity()
{
  return MEMORY[0x1F41566B8]();
}

uint64_t type metadata accessor for UsoTask_stop_uso_NoEntity()
{
  return MEMORY[0x1F41566C0]();
}

uint64_t static UsoEntity_CodeGenConverter.convert(entity:)()
{
  return MEMORY[0x1F4156720]();
}

uint64_t static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)()
{
  return MEMORY[0x1F4156730]();
}

uint64_t dispatch thunk of UsoEntity_common_HealthLog.value.getter()
{
  return MEMORY[0x1F4156748]();
}

uint64_t dispatch thunk of UsoEntity_common_MediaItem.playbackState.getter()
{
  return MEMORY[0x1F4156760]();
}

uint64_t type metadata accessor for UsoTask_close_uso_NoEntity()
{
  return MEMORY[0x1F41567A0]();
}

uint64_t type metadata accessor for UsoTask_create_common_Note()
{
  return MEMORY[0x1F41567A8]();
}

uint64_t type metadata accessor for UsoTask_delete_common_Note()
{
  return MEMORY[0x1F41567B0]();
}

uint64_t type metadata accessor for UsoTask_noVerb_common_Note()
{
  return MEMORY[0x1F41567B8]();
}

uint64_t type metadata accessor for UsoTask_pause_uso_NoEntity()
{
  return MEMORY[0x1F41567C0]();
}

uint64_t type metadata accessor for UsoTask_read_common_Person()
{
  return MEMORY[0x1F41567C8]();
}

uint64_t type metadata accessor for UsoTask_reply_uso_NoEntity()
{
  return MEMORY[0x1F41567D0]();
}

uint64_t type metadata accessor for UsoTask_set_common_Setting()
{
  return MEMORY[0x1F41567D8]();
}

uint64_t type metadata accessor for UsoTask_update_common_Note()
{
  return MEMORY[0x1F41567E8]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_Reference.userEntities.getter()
{
  return MEMORY[0x1F41567F0]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_Reference.reference.getter()
{
  return MEMORY[0x1F41567F8]();
}

uint64_t type metadata accessor for UsoTask_create_common_Alarm()
{
  return MEMORY[0x1F41568A0]();
}

uint64_t type metadata accessor for UsoTask_noVerb_common_Alarm()
{
  return MEMORY[0x1F41568A8]();
}

uint64_t type metadata accessor for UsoTask_noVerb_uso_NoEntity()
{
  return MEMORY[0x1F41568B0]();
}

uint64_t type metadata accessor for UsoTask_open_common_Setting()
{
  return MEMORY[0x1F41568B8]();
}

uint64_t type metadata accessor for UsoTask_read_common_Message()
{
  return MEMORY[0x1F41568C0]();
}

uint64_t type metadata accessor for UsoTask_repeat_uso_NoEntity()
{
  return MEMORY[0x1F41568C8]();
}

uint64_t type metadata accessor for UsoTask_request_common_Note()
{
  return MEMORY[0x1F41568D0]();
}

uint64_t type metadata accessor for UsoTask_resume_uso_NoEntity()
{
  return MEMORY[0x1F41568D8]();
}

uint64_t type metadata accessor for UsoTask_send_common_Message()
{
  return MEMORY[0x1F41568E0]();
}

uint64_t dispatch thunk of UsoEntity_common_Measurement.components.getter()
{
  return MEMORY[0x1F4156978]();
}

uint64_t dispatch thunk of UsoEntity_common_MessageMode.definedValue.getter()
{
  return MEMORY[0x1F4156980]();
}

uint64_t type metadata accessor for UsoEntity_common_MessageMode.DefinedValues()
{
  return MEMORY[0x1F4156988]();
}

uint64_t type metadata accessor for UsoTask_create_common_Person()
{
  return MEMORY[0x1F41569B0]();
}

uint64_t type metadata accessor for UsoTask_delete_common_Person()
{
  return MEMORY[0x1F41569B8]();
}

uint64_t type metadata accessor for UsoTask_noVerb_common_Person()
{
  return MEMORY[0x1F41569C0]();
}

uint64_t type metadata accessor for UsoTask_read_common_Reminder()
{
  return MEMORY[0x1F41569C8]();
}

uint64_t type metadata accessor for UsoTask_reply_common_Message()
{
  return MEMORY[0x1F41569D0]();
}

uint64_t type metadata accessor for UsoTask_restart_uso_NoEntity()
{
  return MEMORY[0x1F41569D8]();
}

uint64_t type metadata accessor for UsoTask_share_common_Message()
{
  return MEMORY[0x1F41569E0]();
}

uint64_t type metadata accessor for UsoTask_update_common_Person()
{
  return MEMORY[0x1F41569E8]();
}

uint64_t dispatch thunk of UsoEntity_common_Interjection.definedValue.getter()
{
  return MEMORY[0x1F4156A38]();
}

uint64_t type metadata accessor for UsoEntity_common_Interjection.DefinedValues()
{
  return MEMORY[0x1F4156A40]();
}

uint64_t dispatch thunk of UsoEntity_common_ListPosition.definedValue.getter()
{
  return MEMORY[0x1F4156A48]();
}

uint64_t UsoEntity_common_ListPosition.DefinedValues.rawValue.getter()
{
  return MEMORY[0x1F4156A50]();
}

uint64_t type metadata accessor for UsoEntity_common_ListPosition.DefinedValues()
{
  return MEMORY[0x1F4156A58]();
}

uint64_t type metadata accessor for UsoEntity_common_Notification()
{
  return MEMORY[0x1F4156A60]();
}

uint64_t type metadata accessor for UsoEntity_common_RadioStation()
{
  return MEMORY[0x1F4156A80]();
}

uint64_t type metadata accessor for UsoTask_delete_common_Message()
{
  return MEMORY[0x1F4156A98]();
}

uint64_t type metadata accessor for UsoTask_enable_common_Setting()
{
  return MEMORY[0x1F4156AA0]();
}

uint64_t type metadata accessor for UsoTask_noVerb_common_Message()
{
  return MEMORY[0x1F4156AB0]();
}

uint64_t type metadata accessor for UsoTask_noVerb_common_Setting()
{
  return MEMORY[0x1F4156AB8]();
}

uint64_t type metadata accessor for UsoTask_noVerb_common_Workout()
{
  return MEMORY[0x1F4156AC0]();
}

uint64_t type metadata accessor for UsoTask_open_common_HealthLog()
{
  return MEMORY[0x1F4156AC8]();
}

uint64_t type metadata accessor for UsoTask_play_common_MediaItem()
{
  return MEMORY[0x1F4156AD0]();
}

uint64_t type metadata accessor for UsoTask_request_common_Person()
{
  return MEMORY[0x1F4156AD8]();
}

uint64_t type metadata accessor for UsoTask_stop_common_MediaItem()
{
  return MEMORY[0x1F4156AE0]();
}

uint64_t type metadata accessor for UsoTask_summarise_common_Note()
{
  return MEMORY[0x1F4156AE8]();
}

uint64_t type metadata accessor for UsoTask_toggle_common_Setting()
{
  return MEMORY[0x1F4156AF0]();
}

uint64_t type metadata accessor for UsoTask_unsend_common_Message()
{
  return MEMORY[0x1F4156AF8]();
}

uint64_t type metadata accessor for UsoTask_update_common_Message()
{
  return MEMORY[0x1F4156B00]();
}

uint64_t dispatch thunk of UsoEntity_common_PlaybackState.definedValue.getter()
{
  return MEMORY[0x1F4156BC0]();
}

uint64_t type metadata accessor for UsoEntity_common_PlaybackState.DefinedValues()
{
  return MEMORY[0x1F4156BC8]();
}

uint64_t dispatch thunk of UsoEntity_common_ReferenceType.definedValue.getter()
{
  return MEMORY[0x1F4156BD8]();
}

uint64_t type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues()
{
  return MEMORY[0x1F4156BE0]();
}

uint64_t type metadata accessor for UsoTask_create_common_Reminder()
{
  return MEMORY[0x1F4156BF8]();
}

uint64_t type metadata accessor for UsoTask_delete_common_Reminder()
{
  return MEMORY[0x1F4156C00]();
}

uint64_t type metadata accessor for UsoTask_disable_common_Setting()
{
  return MEMORY[0x1F4156C08]();
}

uint64_t type metadata accessor for UsoTask_noVerb_common_Reminder()
{
  return MEMORY[0x1F4156C10]();
}

uint64_t type metadata accessor for UsoTask_ping_common_UserEntity()
{
  return MEMORY[0x1F4156C18]();
}

uint64_t type metadata accessor for UsoTask_request_common_Message()
{
  return MEMORY[0x1F4156C20]();
}

uint64_t type metadata accessor for UsoTask_snooze_common_Reminder()
{
  return MEMORY[0x1F4156C28]();
}

uint64_t type metadata accessor for UsoTask_unshare_common_Message()
{
  return MEMORY[0x1F4156C38]();
}

uint64_t type metadata accessor for UsoTask_update_common_Reminder()
{
  return MEMORY[0x1F4156C40]();
}

uint64_t type metadata accessor for UsoTask_create_common_HealthLog()
{
  return MEMORY[0x1F4156C88]();
}

uint64_t type metadata accessor for UsoTask_delete_common_HealthLog()
{
  return MEMORY[0x1F4156C90]();
}

uint64_t type metadata accessor for UsoTask_disable_common_Reminder()
{
  return MEMORY[0x1F4156C98]();
}

uint64_t type metadata accessor for UsoTask_hangup_common_PhoneCall()
{
  return MEMORY[0x1F4156CA8]();
}

uint64_t type metadata accessor for UsoTask_noVerb_common_HealthLog()
{
  return MEMORY[0x1F4156CB0]();
}

uint64_t type metadata accessor for UsoTask_noVerb_common_MediaItem()
{
  return MEMORY[0x1F4156CB8]();
}

uint64_t type metadata accessor for UsoTask_request_common_DateTime()
{
  return MEMORY[0x1F4156CC8]();
}

uint64_t type metadata accessor for UsoTask_request_common_Reminder()
{
  return MEMORY[0x1F4156CD0]();
}

uint64_t type metadata accessor for UsoTask_resume_common_MediaItem()
{
  return MEMORY[0x1F4156CD8]();
}

uint64_t type metadata accessor for UsoTask_run_common_VoiceCommand()
{
  return MEMORY[0x1F4156CE0]();
}

uint64_t type metadata accessor for UsoTask_summarise_common_Person()
{
  return MEMORY[0x1F4156CE8]();
}

uint64_t type metadata accessor for UsoTask_update_common_HealthLog()
{
  return MEMORY[0x1F4156CF8]();
}

uint64_t type metadata accessor for UsoTask_update_common_PhoneCall()
{
  return MEMORY[0x1F4156D08]();
}

uint64_t type metadata accessor for UsoTask_create_common_NoteFolder()
{
  return MEMORY[0x1F4156DE0]();
}

uint64_t type metadata accessor for UsoTask_delete_common_NoteFolder()
{
  return MEMORY[0x1F4156DE8]();
}

uint64_t type metadata accessor for UsoTask_noVerb_common_NoteFolder()
{
  return MEMORY[0x1F4156DF8]();
}

uint64_t type metadata accessor for UsoTask_noVerb_common_UserEntity()
{
  return MEMORY[0x1F4156E00]();
}

uint64_t type metadata accessor for UsoTask_play_common_Announcement()
{
  return MEMORY[0x1F4156E08]();
}

uint64_t type metadata accessor for UsoTask_read_common_Notification()
{
  return MEMORY[0x1F4156E18]();
}

uint64_t type metadata accessor for UsoTask_read_common_ReminderList()
{
  return MEMORY[0x1F4156E20]();
}

uint64_t type metadata accessor for UsoTask_send_common_Announcement()
{
  return MEMORY[0x1F4156E30]();
}

uint64_t type metadata accessor for UsoTask_setNumber_common_Setting()
{
  return MEMORY[0x1F4156E38]();
}

uint64_t type metadata accessor for UsoTask_stop_common_Announcement()
{
  return MEMORY[0x1F4156E48]();
}

uint64_t type metadata accessor for UsoTask_summarise_common_Message()
{
  return MEMORY[0x1F4156E50]();
}

uint64_t type metadata accessor for UsoTask_summarise_common_Setting()
{
  return MEMORY[0x1F4156E58]();
}

uint64_t type metadata accessor for UsoTask_update_common_NoteFolder()
{
  return MEMORY[0x1F4156E60]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceSelect.select.getter()
{
  return MEMORY[0x1F4156E70]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceSelect.reference.getter()
{
  return MEMORY[0x1F4156E78]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceTarget.userEntities.getter()
{
  return MEMORY[0x1F4156E80]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceTarget.target.getter()
{
  return MEMORY[0x1F4156E88]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceTarget.reference.getter()
{
  return MEMORY[0x1F4156E90]();
}

uint64_t type metadata accessor for UsoTask_decreaseBy_common_Setting()
{
  return MEMORY[0x1F4156EA8]();
}

uint64_t type metadata accessor for UsoTask_enableSetting_common_Note()
{
  return MEMORY[0x1F4156EB0]();
}

uint64_t type metadata accessor for UsoTask_increaseBy_common_Setting()
{
  return MEMORY[0x1F4156EC0]();
}

uint64_t type metadata accessor for UsoTask_reply_common_Announcement()
{
  return MEMORY[0x1F4156EC8]();
}

uint64_t type metadata accessor for UsoTask_request_common_NoteFolder()
{
  return MEMORY[0x1F4156ED0]();
}

uint64_t type metadata accessor for UsoTask_request_common_UserEntity()
{
  return MEMORY[0x1F4156ED8]();
}

uint64_t type metadata accessor for UsoTask_setIdentity_common_Person()
{
  return MEMORY[0x1F4156EE0]();
}

uint64_t type metadata accessor for UsoTask_skipBackward_uso_NoEntity()
{
  return MEMORY[0x1F4156EE8]();
}

uint64_t type metadata accessor for UsoTask_summarise_common_Reminder()
{
  return MEMORY[0x1F4156EF0]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceControl.trigger.getter()
{
  return MEMORY[0x1F4156F08]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceControl.reference.getter()
{
  return MEMORY[0x1F4156F10]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceTrigger.userEntities.getter()
{
  return MEMORY[0x1F4156F18]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceTrigger.trigger.getter()
{
  return MEMORY[0x1F4156F20]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceTrigger.reference.getter()
{
  return MEMORY[0x1F4156F28]();
}

uint64_t type metadata accessor for UsoTask_checkExistence_common_Note()
{
  return MEMORY[0x1F4156FB8]();
}

uint64_t type metadata accessor for UsoTask_create_common_ReminderList()
{
  return MEMORY[0x1F4156FC0]();
}

uint64_t type metadata accessor for UsoTask_delete_common_ReminderList()
{
  return MEMORY[0x1F4156FC8]();
}

uint64_t type metadata accessor for UsoTask_disableSetting_common_Note()
{
  return MEMORY[0x1F4156FD0]();
}

uint64_t type metadata accessor for UsoTask_noVerb_common_Interjection()
{
  return MEMORY[0x1F4156FD8]();
}

uint64_t type metadata accessor for UsoTask_noVerb_common_ReminderList()
{
  return MEMORY[0x1F4156FE0]();
}

uint64_t type metadata accessor for UsoTask_summarise_common_PhoneCall()
{
  return MEMORY[0x1F4156FF8]();
}

uint64_t type metadata accessor for UsoTask_summarise_common_Voicemail()
{
  return MEMORY[0x1F4157000]();
}

uint64_t type metadata accessor for UsoTask_update_common_ReminderList()
{
  return MEMORY[0x1F4157010]();
}

uint64_t type metadata accessor for UsoTask_execute_common_VoiceCommand()
{
  return MEMORY[0x1F4157078]();
}

uint64_t type metadata accessor for UsoTask_request_common_ReminderList()
{
  return MEMORY[0x1F4157080]();
}

uint64_t type metadata accessor for UsoTask_summarise_common_NoteFolder()
{
  return MEMORY[0x1F4157088]();
}

uint64_t type metadata accessor for UsoTask_update_common_Communication()
{
  return MEMORY[0x1F4157098]();
}

uint64_t type metadata accessor for UsoTask_checkExistence_common_Person()
{
  return MEMORY[0x1F4157118]();
}

uint64_t dispatch thunk of UsoEntity_common_MeasurementComponent.unit.getter()
{
  return MEMORY[0x1F4157150]();
}

uint64_t type metadata accessor for UsoTask_checkExistence_common_Message()
{
  return MEMORY[0x1F4157158]();
}

uint64_t type metadata accessor for UsoTask_checkExistence_common_Setting()
{
  return MEMORY[0x1F4157160]();
}

uint64_t type metadata accessor for UsoTask_create_common_MedicationEvent()
{
  return MEMORY[0x1F4157168]();
}

uint64_t type metadata accessor for UsoTask_enableSetting_common_Reminder()
{
  return MEMORY[0x1F4157170]();
}

uint64_t type metadata accessor for UsoTask_getLocation_common_UserEntity()
{
  return MEMORY[0x1F4157178]();
}

uint64_t type metadata accessor for UsoTask_snooze_common_MedicationEvent()
{
  return MEMORY[0x1F4157188]();
}

uint64_t type metadata accessor for UsoTask_summarise_common_NotebookList()
{
  return MEMORY[0x1F4157190]();
}

uint64_t type metadata accessor for UsoTask_summarise_common_ReminderList()
{
  return MEMORY[0x1F4157198]();
}

uint64_t type metadata accessor for UsoTask_checkExistence_common_Reminder()
{
  return MEMORY[0x1F41571C0]();
}

uint64_t type metadata accessor for UsoTask_disableSetting_common_Reminder()
{
  return MEMORY[0x1F41571C8]();
}

uint64_t dispatch thunk of UsoEntityBuilder_common_LocalisedString.setStringValue(value:)()
{
  return MEMORY[0x1F41571D0]();
}

uint64_t UsoEntityBuilder_common_LocalisedString.init()()
{
  return MEMORY[0x1F41571D8]();
}

uint64_t type metadata accessor for UsoEntityBuilder_common_LocalisedString()
{
  return MEMORY[0x1F41571E0]();
}

uint64_t type metadata accessor for UsoTask_checkExistence_common_HealthLog()
{
  return MEMORY[0x1F41571F8]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceNumberTrigger.userEntities.getter()
{
  return MEMORY[0x1F4157228]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceNumberTrigger.trigger.getter()
{
  return MEMORY[0x1F4157230]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceNumberTrigger.reference.getter()
{
  return MEMORY[0x1F4157238]();
}

uint64_t type metadata accessor for UsoTask_action_common_SocialConversation()
{
  return MEMORY[0x1F4157260]();
}

uint64_t type metadata accessor for UsoTask_checkExistence_common_NoteFolder()
{
  return MEMORY[0x1F4157268]();
}

uint64_t type metadata accessor for UsoTask_create_common_MedicationSchedule()
{
  return MEMORY[0x1F4157278]();
}

uint64_t type metadata accessor for UsoTask_delete_common_MedicationSchedule()
{
  return MEMORY[0x1F4157280]();
}

uint64_t type metadata accessor for UsoTask_update_common_MedicationSchedule()
{
  return MEMORY[0x1F4157288]();
}

uint64_t type metadata accessor for UsoTask_request_common_MedicationSchedule()
{
  return MEMORY[0x1F41572A0]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceMeasurementUnit.reference.getter()
{
  return MEMORY[0x1F41572A8]();
}

uint64_t type metadata accessor for UsoTask_checkExistence_common_ReminderList()
{
  return MEMORY[0x1F41572D0]();
}

uint64_t type metadata accessor for UsoTask_summarise_common_MedicationSchedule()
{
  return MEMORY[0x1F41572D8]();
}

uint64_t type metadata accessor for UsoTask_checkExistence_common_MedicationEvent()
{
  return MEMORY[0x1F4157308]();
}

uint64_t dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.reference.getter()
{
  return MEMORY[0x1F4157318]();
}

uint64_t type metadata accessor for UsoTask_checkExistence_common_MedicationSchedule()
{
  return MEMORY[0x1F4157330]();
}

uint64_t Node.entitySpans.getter()
{
  return MEMORY[0x1F41573E8]();
}

uint64_t dispatch thunk of Graph.description.getter()
{
  return MEMORY[0x1F4157480]();
}

uint64_t dispatch thunk of Graph.nodes.getter()
{
  return MEMORY[0x1F41574B8]();
}

uint64_t UsoTask.verbString.getter()
{
  return MEMORY[0x1F4157550]();
}

uint64_t UsoTask.baseEntityAsString.getter()
{
  return MEMORY[0x1F4157558]();
}

uint64_t UsoTask.arguments.getter()
{
  return MEMORY[0x1F4157560]();
}

uint64_t NLIntent.domainNode.getter()
{
  return MEMORY[0x1F4157570]();
}

uint64_t NLIntent.init(protobufData:)()
{
  return MEMORY[0x1F4157580]();
}

uint64_t type metadata accessor for NLIntent()
{
  return MEMORY[0x1F4157590]();
}

uint64_t dispatch thunk of UsoValue.getAsPrimitiveValueString()()
{
  return MEMORY[0x1F4157598]();
}

uint64_t dispatch thunk of UsoValue.getUsoIdentifiers()()
{
  return MEMORY[0x1F41575A0]();
}

uint64_t dispatch thunk of UsoValue.getAsEntity()()
{
  return MEMORY[0x1F41575A8]();
}

uint64_t dispatch thunk of UsoValue.getEntitySpans()()
{
  return MEMORY[0x1F41575B0]();
}

uint64_t MatchInfo.hasMatchSignals(_:)()
{
  return MEMORY[0x1F41575D8]();
}

uint64_t static MatchInfo.MatchSignals.approximateMatch.getter()
{
  return MEMORY[0x1F41575E0]();
}

uint64_t static MatchInfo.MatchSignals.aliasMatch.getter()
{
  return MEMORY[0x1F41575E8]();
}

uint64_t static MatchInfo.MatchSignals.exactMatch.getter()
{
  return MEMORY[0x1F41575F0]();
}

uint64_t static MatchInfo.MatchSignals.partialMatch.getter()
{
  return MEMORY[0x1F41575F8]();
}

uint64_t type metadata accessor for MatchInfo.MatchSignals()
{
  return MEMORY[0x1F4157600]();
}

uint64_t type metadata accessor for MatchInfo()
{
  return MEMORY[0x1F4157678]();
}

uint64_t UsoEntity.attributes.getter()
{
  return MEMORY[0x1F4157680]();
}

uint64_t UsoEntity.entitySpans.getter()
{
  return MEMORY[0x1F4157688]();
}

uint64_t UsoEntity.usoIdentifiers.getter()
{
  return MEMORY[0x1F4157690]();
}

uint64_t UsoEntity.valueTypeString.getter()
{
  return MEMORY[0x1F4157698]();
}

uint64_t TaggingService.init()()
{
  return MEMORY[0x1F4150350]();
}

uint64_t type metadata accessor for TaggingService()
{
  return MEMORY[0x1F4150358]();
}

uint64_t static DataClassificationTag.searchRequest(requestIdentifier:optedInToSearchSharing:)()
{
  return MEMORY[0x1F4150360]();
}

uint64_t type metadata accessor for DataClassificationTag()
{
  return MEMORY[0x1F4150368]();
}

uint64_t DateTimeResolver.makeRecommendation(value:context:spec:)()
{
  return MEMORY[0x1F4150C30]();
}

uint64_t DateTimeResolver.init()()
{
  return MEMORY[0x1F4150C38]();
}

uint64_t type metadata accessor for DateTimeResolver()
{
  return MEMORY[0x1F4150C40]();
}

uint64_t type metadata accessor for DateTimeResolutionSpec.DateTimeConvergenceStrategy()
{
  return MEMORY[0x1F4150CC0]();
}

uint64_t type metadata accessor for DateTimeResolutionSpec.ExpandToType()
{
  return MEMORY[0x1F4150CC8]();
}

uint64_t DateTimeResolutionSpec.init(expandToType:dateTimeConvergenceStrategy:overridesForDefinedDateTimeRanges:inferDurationAsInterval:witchingHourRoundOffEnabled:convergeToOperatingHours:)()
{
  return MEMORY[0x1F4150CD0]();
}

uint64_t type metadata accessor for DateTimeResolutionSpec()
{
  return MEMORY[0x1F4150CE0]();
}

uint64_t type metadata accessor for DateTimeResolutionContext.Hemisphere()
{
  return MEMORY[0x1F4150D00]();
}

uint64_t DateTimeResolutionContext.init(with:regionFormat:regionAwareLanguage:timeZone:hemisphere:calendar:date:)()
{
  return MEMORY[0x1F4150D08]();
}

uint64_t type metadata accessor for DateTimeResolutionContext()
{
  return MEMORY[0x1F4150D10]();
}

uint64_t DateTime.init(withDate:time:)()
{
  return MEMORY[0x1F4150D70]();
}

uint64_t DateTime.Time.init(withHour:)()
{
  return MEMORY[0x1F4150D78]();
}

uint64_t type metadata accessor for DateTime.Time()
{
  return MEMORY[0x1F4150D80]();
}

uint64_t type metadata accessor for DateTime.DateTimeRange.DefinedDateTimeRange()
{
  return MEMORY[0x1F4150D88]();
}

uint64_t DateTime.toINDateComponentsRange(calendar:timeZone:)()
{
  return MEMORY[0x1F4150D90]();
}

uint64_t type metadata accessor for DateTime()
{
  return MEMORY[0x1F4150DA0]();
}

Swift::Void __swiftcall flushProcessWideSiriEnvironmentCache()()
{
}

uint64_t static SiriEnvironment.withTaskLocalEnvironment<A, B>(for:_:)()
{
  return MEMORY[0x1F415AA90]();
}

uint64_t static SiriEnvironment.withTaskLocalEnvironment<A>(_:_:)()
{
  return MEMORY[0x1F415AAA0]();
}

uint64_t SiriEnvironment.scopedReferenceResolutionData.getter()
{
  return MEMORY[0x1F4158208]();
}

uint64_t SiriEnvironment.salientEntitiesProvider.getter()
{
  return MEMORY[0x1F4158210]();
}

uint64_t SiriEnvironment.currentTCU.setter()
{
  return MEMORY[0x1F4152A50]();
}

uint64_t SiriEnvironment.userIdentity.getter()
{
  return MEMORY[0x1F4152A58]();
}

uint64_t SiriEnvironment.aceServiceContext.getter()
{
  return MEMORY[0x1F4152A60]();
}

uint64_t SiriEnvironment.nlRoutingDecision.getter()
{
  return MEMORY[0x1F4152A68]();
}

uint64_t SiriEnvironment.nlRoutingDecision.setter()
{
  return MEMORY[0x1F4152A70]();
}

uint64_t SiriEnvironment.correctionsClientProvider.getter()
{
  return MEMORY[0x1F4152A78]();
}

uint64_t SiriEnvironment.correctionsClientProvider.setter()
{
  return MEMORY[0x1F4152A80]();
}

uint64_t SiriEnvironment.flowTask.setter()
{
  return MEMORY[0x1F4152A88]();
}

uint64_t SiriEnvironment.callState.getter()
{
  return MEMORY[0x1F4152A90]();
}

uint64_t SiriEnvironment.currentRequest.getter()
{
  return MEMORY[0x1F41508C8]();
}

uint64_t SiriEnvironment.currentRequest.setter()
{
  return MEMORY[0x1F41508D0]();
}

uint64_t SiriEnvironment.homeKitProvider.getter()
{
  return MEMORY[0x1F41508D8]();
}

uint64_t SiriEnvironment.currentDevice.getter()
{
  return MEMORY[0x1F415AAB0]();
}

uint64_t SiriEnvironment.currentProcess.getter()
{
  return MEMORY[0x1F415AAB8]();
}

uint64_t static SiriEnvironment.forCurrentTask.getter()
{
  return MEMORY[0x1F415AAC0]();
}

uint64_t dispatch thunk of SiriEnvironment.requireProvider<A>(of:)()
{
  return MEMORY[0x1F415AAC8]();
}

uint64_t SiriEnvironment.networkAvailability.getter()
{
  return MEMORY[0x1F415AAD0]();
}

uint64_t static SiriEnvironment.root.getter()
{
  return MEMORY[0x1F415AAD8]();
}

uint64_t SiriEnvironment.init(parent:)()
{
  return MEMORY[0x1F415AAE0]();
}

uint64_t static SiriEnvironment.default.getter()
{
  return MEMORY[0x1F415AAE8]();
}

uint64_t dispatch thunk of SiriEnvironment.providers.getter()
{
  return MEMORY[0x1F415AAF0]();
}

uint64_t type metadata accessor for SiriEnvironment()
{
  return MEMORY[0x1F415AAF8]();
}

uint64_t dispatch thunk of SiriEnvironment.subscript.getter()
{
  return MEMORY[0x1F415AB00]();
}

uint64_t type metadata accessor for SiriVoiceGender()
{
  return MEMORY[0x1F415AB08]();
}

uint64_t dispatch thunk of SiriEnvironmentLocating.siriEnvironment.getter()
{
  return MEMORY[0x1F415AB10]();
}

uint64_t dispatch thunk of SiriEnvironmentLocating.siriEnvironment.setter()
{
  return MEMORY[0x1F415AB18]();
}

uint64_t SiriEnvironmentLocating<>.siriEnvironment.modify()
{
  return MEMORY[0x1F415AB20]();
}

uint64_t SiriEnvironmentLocating<>.siriEnvironment.getter()
{
  return MEMORY[0x1F415AB28]();
}

uint64_t SiriEnvironmentLocating<>.siriEnvironment.setter()
{
  return MEMORY[0x1F415AB30]();
}

uint64_t AudioSource.init(aceValue:)()
{
  return MEMORY[0x1F415AB40]();
}

uint64_t AudioSource.aceValue.getter()
{
  return MEMORY[0x1F415AB48]();
}

uint64_t type metadata accessor for AudioSource()
{
  return MEMORY[0x1F415AB50]();
}

uint64_t static BargeInMode.overSiri.getter()
{
  return MEMORY[0x1F415AB58]();
}

uint64_t static BargeInMode.none.getter()
{
  return MEMORY[0x1F415AB60]();
}

uint64_t BargeInMode.init(rawValue:)()
{
  return MEMORY[0x1F415AB68]();
}

uint64_t BargeInMode.rawValue.getter()
{
  return MEMORY[0x1F415AB70]();
}

uint64_t static BargeInMode.overAlarm.getter()
{
  return MEMORY[0x1F415AB78]();
}

uint64_t static BargeInMode.overMedia.getter()
{
  return MEMORY[0x1F415AB80]();
}

uint64_t static BargeInMode.overTimer.getter()
{
  return MEMORY[0x1F415AB88]();
}

uint64_t type metadata accessor for BargeInMode()
{
  return MEMORY[0x1F415AB90]();
}

uint64_t static DeviceIdiom.== infix(_:_:)()
{
  return MEMORY[0x1F415ABA8]();
}

uint64_t DeviceIdiom.init(aceValue:)()
{
  return MEMORY[0x1F415ABB0]();
}

uint64_t type metadata accessor for DeviceIdiom()
{
  return MEMORY[0x1F415ABB8]();
}

uint64_t dispatch thunk of IdleTracker.track(name:)()
{
  return MEMORY[0x1F415ABC0]();
}

uint64_t InputOrigin.init(aceValue:)()
{
  return MEMORY[0x1F415ABC8]();
}

uint64_t InputOrigin.init(rawValue:)()
{
  return MEMORY[0x1F415ABD0]();
}

uint64_t InputOrigin.rawValue.getter()
{
  return MEMORY[0x1F415ABD8]();
}

uint64_t type metadata accessor for InputOrigin()
{
  return MEMORY[0x1F415ABE0]();
}

{
  return MEMORY[0x1F4154900]();
}

uint64_t Transformer.transform.getter()
{
  return MEMORY[0x1F415ABF8]();
}

uint64_t dispatch thunk of PluginFinder.findAllPackages()()
{
  return MEMORY[0x1F415AC10]();
}

uint64_t static ResponseMode.displayOnly.getter()
{
  return MEMORY[0x1F415AC18]();
}

uint64_t static ResponseMode.displayForward.getter()
{
  return MEMORY[0x1F415AC28]();
}

uint64_t static ResponseMode.== infix(_:_:)()
{
  return MEMORY[0x1F415AC30]();
}

uint64_t ResponseMode.init(aceValue:)()
{
  return MEMORY[0x1F415AC38]();
}

uint64_t ResponseMode.aceValue.getter()
{
  return MEMORY[0x1F415AC40]();
}

uint64_t static ResponseMode.voiceOnly.getter()
{
  return MEMORY[0x1F415AC48]();
}

uint64_t type metadata accessor for ResponseMode()
{
  return MEMORY[0x1F415AC50]();
}

uint64_t Restrictions.deviceRestrictions.getter()
{
  return MEMORY[0x1F415AC58]();
}

uint64_t Restrictions.init(deviceRestrictions:)()
{
  return MEMORY[0x1F415AC60]();
}

uint64_t Restrictions.init(restrictedCommands:)()
{
  return MEMORY[0x1F415AC68]();
}

uint64_t Restrictions.restrictedCommands.getter()
{
  return MEMORY[0x1F415AC70]();
}

uint64_t Restrictions.init(aceValue:)()
{
  return MEMORY[0x1F415AC78]();
}

uint64_t type metadata accessor for Restrictions()
{
  return MEMORY[0x1F415AC80]();
}

uint64_t type metadata accessor for TimeoutError()
{
  return MEMORY[0x1F415AC88]();
}

uint64_t CurrentDevice.localDeviceIdiom.getter()
{
  return MEMORY[0x1F4152AA0]();
}

uint64_t dispatch thunk of CurrentDevice.siriLocale.getter()
{
  return MEMORY[0x1F415AC90]();
}

uint64_t dispatch thunk of CurrentDevice.deviceClass.getter()
{
  return MEMORY[0x1F415AC98]();
}

uint64_t dispatch thunk of CurrentDevice.deviceIdiom.getter()
{
  return MEMORY[0x1F415ACA0]();
}

uint64_t dispatch thunk of CurrentDevice.siriVoiceGender.getter()
{
  return MEMORY[0x1F415ACB0]();
}

uint64_t dispatch thunk of CurrentDevice.deviceRegionCode.getter()
{
  return MEMORY[0x1F415ACB8]();
}

uint64_t dispatch thunk of CurrentDevice.restrictedCommands.getter()
{
  return MEMORY[0x1F415ACC0]();
}

uint64_t dispatch thunk of CurrentDevice.supportsVehicleData.getter()
{
  return MEMORY[0x1F415ACC8]();
}

uint64_t dispatch thunk of CurrentDevice.isLockedWithPasscode.getter()
{
  return MEMORY[0x1F415ACD8]();
}

uint64_t dispatch thunk of CurrentDevice.isTextToSpeechEnabled.getter()
{
  return MEMORY[0x1F415ACE0]();
}

uint64_t dispatch thunk of CurrentDevice.isVoiceTriggerEnabled.getter()
{
  return MEMORY[0x1F415ACE8]();
}

uint64_t CurrentDevice.setRestrictedCommands(_:)()
{
  return MEMORY[0x1F415ACF0]();
}

uint64_t dispatch thunk of CurrentDevice.preferencesLanguageCode.getter()
{
  return MEMORY[0x1F415ACF8]();
}

uint64_t dispatch thunk of CurrentDevice.personalDomainsAuthenticationMode.getter()
{
  return MEMORY[0x1F415AD00]();
}

uint64_t dispatch thunk of CurrentDevice.isAppleTV.getter()
{
  return MEMORY[0x1F415AD20]();
}

uint64_t dispatch thunk of PluginCatalog.getPlugin(id:)()
{
  return MEMORY[0x1F415AD38]();
}

uint64_t BargeInContext.approximatePreviousTTSInterval.getter()
{
  return MEMORY[0x1F415AD40]();
}

uint64_t BargeInContext.init(mode:approximatePreviousTTSInterval:)()
{
  return MEMORY[0x1F415AD48]();
}

uint64_t BargeInContext.mode.getter()
{
  return MEMORY[0x1F415AD50]();
}

uint64_t type metadata accessor for BargeInContext()
{
  return MEMORY[0x1F415AD58]();
}

uint64_t dispatch thunk of CurrentProcess.idleTracker.getter()
{
  return MEMORY[0x1F415AD60]();
}

uint64_t static Transformation.defaultLengthLimit.getter()
{
  return MEMORY[0x1F415AD68]();
}

uint64_t static Transformation.transform<A>(_:to:lengthLimit:)()
{
  return MEMORY[0x1F415AD70]();
}

uint64_t TypeIdentifier.init(for:)()
{
  return MEMORY[0x1F415AD80]();
}

uint64_t type metadata accessor for TypeIdentifier()
{
  return MEMORY[0x1F415AD98]();
}

uint64_t InteractionType.init(aceValue:)()
{
  return MEMORY[0x1F415ADA0]();
}

uint64_t InteractionType.init(rawValue:)()
{
  return MEMORY[0x1F415ADA8]();
}

uint64_t InteractionType.rawValue.getter()
{
  return MEMORY[0x1F415ADB0]();
}

uint64_t type metadata accessor for InteractionType()
{
  return MEMORY[0x1F415ADB8]();
}

uint64_t TypeInformation.isOptional.getter()
{
  return MEMORY[0x1F415ADC0]();
}

uint64_t TypeInformation.init(for:)()
{
  return MEMORY[0x1F415ADC8]();
}

uint64_t type metadata accessor for TypeInformation()
{
  return MEMORY[0x1F415ADD0]();
}

uint64_t AudioDestination.init(aceValue:)()
{
  return MEMORY[0x1F415ADD8]();
}

uint64_t AudioDestination.aceValue.getter()
{
  return MEMORY[0x1F415ADE0]();
}

uint64_t type metadata accessor for AudioDestination()
{
  return MEMORY[0x1F415ADE8]();
}

uint64_t ExecutionLocation.description.getter()
{
  return MEMORY[0x1F415ADF0]();
}

uint64_t static ExecutionLocation.device.getter()
{
  return MEMORY[0x1F415ADF8]();
}

uint64_t static ExecutionLocation.server.getter()
{
  return MEMORY[0x1F415AE00]();
}

uint64_t static ExecutionLocation.unknown.getter()
{
  return MEMORY[0x1F415AE08]();
}

uint64_t type metadata accessor for ExecutionLocation()
{
  return MEMORY[0x1F415AE10]();
}

uint64_t static DeviceRestrictions.unauthenticatedByWatchProximity.getter()
{
  return MEMORY[0x1F415AE20]();
}

uint64_t static DeviceRestrictions.unauthenticatedByHeadphonesState.getter()
{
  return MEMORY[0x1F415AE28]();
}

uint64_t DeviceRestrictions.aceSet.getter()
{
  return MEMORY[0x1F415AE30]();
}

uint64_t DeviceRestrictions.init(rawValue:)()
{
  return MEMORY[0x1F415AE40]();
}

uint64_t DeviceRestrictions.rawValue.getter()
{
  return MEMORY[0x1F415AE48]();
}

uint64_t static DeviceRestrictions.starkMode.getter()
{
  return MEMORY[0x1F415AE50]();
}

uint64_t type metadata accessor for DeviceRestrictions()
{
  return MEMORY[0x1F415AE58]();
}

uint64_t ManagedContinuation.resume(with:)()
{
  return MEMORY[0x1F415AE60]();
}

uint64_t ManagedContinuation.resume(throwing:)()
{
  return MEMORY[0x1F415AE68]();
}

uint64_t ManagedContinuation.resume(returning:)()
{
  return MEMORY[0x1F415AE70]();
}

uint64_t dispatch thunk of NetworkAvailability.isAvailable.getter()
{
  return MEMORY[0x1F415AE78]();
}

uint64_t dispatch thunk of NetworkAvailability.isExpensive.getter()
{
  return MEMORY[0x1F415AE80]();
}

uint64_t dispatch thunk of NetworkAvailability.isConstrained.getter()
{
  return MEMORY[0x1F415AE88]();
}

uint64_t dispatch thunk of NetworkAvailability.isInAirplaneMode.getter()
{
  return MEMORY[0x1F415AE90]();
}

uint64_t static NetworkAvailability.Status.== infix(_:_:)()
{
  return MEMORY[0x1F415AE98]();
}

uint64_t type metadata accessor for NetworkAvailability.Status()
{
  return MEMORY[0x1F415AEA0]();
}

uint64_t dispatch thunk of NetworkAvailability.status.getter()
{
  return MEMORY[0x1F415AEA8]();
}

uint64_t dispatch thunk of AutoBugCaptureManager.generateSnapshot(errorType:errorSubType:subTypeContext:completion:)()
{
  return MEMORY[0x1F415AEB0]();
}

uint64_t AutoBugCaptureManager.init(domain:sessionDuration:)()
{
  return MEMORY[0x1F415AEB8]();
}

uint64_t type metadata accessor for AutoBugCaptureManager()
{
  return MEMORY[0x1F415AEC0]();
}

uint64_t dispatch thunk of PluginCapabilityCatalog.getPackages(capability:)()
{
  return MEMORY[0x1F415AEC8]();
}

uint64_t static PluginCapabilityCatalog.load<A>(finder:cache:)()
{
  return MEMORY[0x1F415AED0]();
}

uint64_t PersonalDomainsAuthenticationMode.init(aceValue:)()
{
  return MEMORY[0x1F415AEE0]();
}

uint64_t type metadata accessor for PersonalDomainsAuthenticationMode()
{
  return MEMORY[0x1F415AEE8]();
}

uint64_t <+> infix(_:_:)()
{
  return MEMORY[0x1F415AEF0]();
}

uint64_t Builder.subscript.setter()
{
  return MEMORY[0x1F415AEF8]();
}

{
  return MEMORY[0x1F415AF00]();
}

uint64_t HomeInfo.homeIdentifier.setter()
{
  return MEMORY[0x1F415AF08]();
}

uint64_t HomeInfo.init()()
{
  return MEMORY[0x1F415AF10]();
}

uint64_t type metadata accessor for HomeInfo()
{
  return MEMORY[0x1F415AF18]();
}

uint64_t static Buildable.withBuilder(_:)()
{
  return MEMORY[0x1F415AF20]();
}

uint64_t dispatch thunk of CorrectionsPlatformClient.setupNewTurn(executionUUID:)()
{
  return MEMORY[0x1F4150578]();
}

uint64_t dispatch thunk of CorrectionsPlatformClient.setUndoInvocation(directInvocation:context:)()
{
  return MEMORY[0x1F4150580]();
}

uint64_t dispatch thunk of CorrectionsPlatformClient.isCorrectionPossible(context:)()
{
  return MEMORY[0x1F4150588]();
}

uint64_t CorrectionsPlatformClient.undoFollowUpPluginActionUserDataKey.getter()
{
  return MEMORY[0x1F4150590]();
}

uint64_t dispatch thunk of CorrectionsPlatformClient.commit()()
{
  return MEMORY[0x1F4150598]();
}

uint64_t dispatch thunk of CorrectionsPlatformClient.checkUndo(input:context:)()
{
  return MEMORY[0x1F41505A0]();
}

uint64_t CorrectionsPlatformClient.init()()
{
  return MEMORY[0x1F41505A8]();
}

uint64_t type metadata accessor for CorrectionsPlatformClient()
{
  return MEMORY[0x1F41505B0]();
}

uint64_t CorrectionsDirectInvocation.init(identifier:userData:)()
{
  return MEMORY[0x1F41505B8]();
}

uint64_t CorrectionsDirectInvocation.identifier.getter()
{
  return MEMORY[0x1F41505C0]();
}

uint64_t CorrectionsDirectInvocation.userData.getter()
{
  return MEMORY[0x1F41505C8]();
}

uint64_t type metadata accessor for CorrectionsDirectInvocation()
{
  return MEMORY[0x1F41505D0]();
}

uint64_t type metadata accessor for CorrectionsParse()
{
  return MEMORY[0x1F41505D8]();
}

uint64_t CorrectionsContext.init(userId:assistantId:)()
{
  return MEMORY[0x1F41505E0]();
}

uint64_t dispatch thunk of CorrectionsContext.Builder.assistantId(_:)()
{
  return MEMORY[0x1F41505E8]();
}

uint64_t dispatch thunk of CorrectionsContext.Builder.resultCandidateId(_:)()
{
  return MEMORY[0x1F41505F0]();
}

uint64_t dispatch thunk of CorrectionsContext.Builder.executionRequestId(_:)()
{
  return MEMORY[0x1F41505F8]();
}

uint64_t dispatch thunk of CorrectionsContext.Builder.build()()
{
  return MEMORY[0x1F4150600]();
}

uint64_t dispatch thunk of CorrectionsContext.Builder.userId(_:)()
{
  return MEMORY[0x1F4150608]();
}

uint64_t static CorrectionsContext.builder.getter()
{
  return MEMORY[0x1F4150610]();
}

uint64_t type metadata accessor for CorrectionsContext()
{
  return MEMORY[0x1F4150618]();
}

uint64_t CorrectionsUSOParse.init(userParse:parserIdentifier:appBundleId:)()
{
  return MEMORY[0x1F4150620]();
}

uint64_t UndoAction.parseExludingUndoUserDialogActs.getter()
{
  return MEMORY[0x1F4150628]();
}

uint64_t UndoAction.isExclusive.getter()
{
  return MEMORY[0x1F4150630]();
}

uint64_t UndoAction.directInvocation.getter()
{
  return MEMORY[0x1F4150638]();
}

uint64_t type metadata accessor for UndoAction()
{
  return MEMORY[0x1F4150640]();
}

uint64_t EncoreEvent.serviceName.getter()
{
  return MEMORY[0x1F4117C08]();
}

uint64_t dispatch thunk of EncoreEvent.getValue<A>()()
{
  return MEMORY[0x1F4117C10]();
}

uint64_t type metadata accessor for EncoreEvent()
{
  return MEMORY[0x1F4117C18]();
}

uint64_t dispatch thunk of static EncoreService.service.getter()
{
  return MEMORY[0x1F4117C20]();
}

uint64_t type metadata accessor for EncoreService()
{
  return MEMORY[0x1F4117C30]();
}

uint64_t ServiceName.rawValue.getter()
{
  return MEMORY[0x1F4117C38]();
}

uint64_t type metadata accessor for ServiceName()
{
  return MEMORY[0x1F4117C40]();
}

uint64_t dispatch thunk of AsyncService.events.getter()
{
  return MEMORY[0x1F4117C48]();
}

uint64_t type metadata accessor for SystemEvents()
{
  return MEMORY[0x1F4117C50]();
}

uint64_t static SnippetService.EventDataKey.getter()
{
  return MEMORY[0x1F4117C58]();
}

uint64_t static SnippetService.DirectInvocationIdentifier.getter()
{
  return MEMORY[0x1F4117C60]();
}

uint64_t type metadata accessor for SnippetService()
{
  return MEMORY[0x1F4117C68]();
}

uint64_t IntentEventStore.log(event:)()
{
  return MEMORY[0x1F4151568]();
}

uint64_t IntentEventStore.init()()
{
  return MEMORY[0x1F4151570]();
}

uint64_t type metadata accessor for IntentEventStore()
{
  return MEMORY[0x1F4151578]();
}

uint64_t type metadata accessor for IntentResultType()
{
  return MEMORY[0x1F4151580]();
}

uint64_t IntentEvent.init(intentId:intentStart:createdAt:)()
{
  return MEMORY[0x1F4151598]();
}

uint64_t IntentEvent.init(intentId:intentResult:createdAt:)()
{
  return MEMORY[0x1F41515A0]();
}

uint64_t IntentEvent.init(intentId:confirmationOffer:createdAt:)()
{
  return MEMORY[0x1F41515B0]();
}

uint64_t IntentEvent.init(intentId:confirmationResult:createdAt:)()
{
  return MEMORY[0x1F41515B8]();
}

uint64_t IntentEvent.init(intentId:disambiguationOffer:createdAt:)()
{
  return MEMORY[0x1F41515C0]();
}

uint64_t IntentEvent.init(intentId:disambiguationResult:createdAt:)()
{
  return MEMORY[0x1F41515C8]();
}

uint64_t type metadata accessor for IntentEvent()
{
  return MEMORY[0x1F41515E8]();
}

uint64_t IntentStart.init(intent:timestamp:)()
{
  return MEMORY[0x1F41515F8]();
}

uint64_t type metadata accessor for IntentStart()
{
  return MEMORY[0x1F4151600]();
}

uint64_t IntentResult.init(intentType:type:intent:timestamp:)()
{
  return MEMORY[0x1F4151610]();
}

uint64_t type metadata accessor for IntentResult()
{
  return MEMORY[0x1F4151620]();
}

uint64_t ConfirmationOffer.init(parameterName:intentType:multicardinalIndexValue:item:timestamp:)()
{
  return MEMORY[0x1F41516C0]();
}

uint64_t type metadata accessor for ConfirmationOffer()
{
  return MEMORY[0x1F41516D0]();
}

uint64_t ConfirmationResult.init(parameterName:intentType:multicardinalIndexValue:confirmedValue:timestamp:)()
{
  return MEMORY[0x1F41516F0]();
}

uint64_t ConfirmationResult.init(parameterName:intentType:multicardinalIndexValue:resolution:timestamp:)()
{
  return MEMORY[0x1F41516F8]();
}

uint64_t type metadata accessor for ConfirmationResult()
{
  return MEMORY[0x1F4151700]();
}

uint64_t DisambiguationOffer.init(parameterName:intentType:multicardinalIndexValue:disambiguationItems:timestamp:)()
{
  return MEMORY[0x1F4151710]();
}

uint64_t type metadata accessor for DisambiguationOffer()
{
  return MEMORY[0x1F4151720]();
}

uint64_t DisambiguationResult.init(parameterName:intentType:multicardinalIndexValue:resolvedValue:timestamp:)()
{
  return MEMORY[0x1F4151730]();
}

uint64_t type metadata accessor for DisambiguationResult()
{
  return MEMORY[0x1F4151738]();
}

uint64_t type metadata accessor for ConfirmationResolution()
{
  return MEMORY[0x1F4151740]();
}

uint64_t type metadata accessor for EndRequestMessageBase()
{
  return MEMORY[0x1F4152AF0]();
}

uint64_t FlowOutputMessage.InAppResponse.bundleId.getter()
{
  return MEMORY[0x1F4152B08]();
}

uint64_t type metadata accessor for FlowOutputMessage.InAppResponse()
{
  return MEMORY[0x1F4152B10]();
}

uint64_t FlowOutputMessage.init(build:)()
{
  return MEMORY[0x1F4152B20]();
}

uint64_t FlowOutputMessage.Builder.assistantId.setter()
{
  return MEMORY[0x1F4152B28]();
}

uint64_t FlowOutputMessage.Builder.invocationId.setter()
{
  return MEMORY[0x1F4152B30]();
}

uint64_t FlowOutputMessage.Builder.inAppResponse.setter()
{
  return MEMORY[0x1F4152B38]();
}

uint64_t FlowOutputMessage.Builder.executionSource.setter()
{
  return MEMORY[0x1F4152B40]();
}

uint64_t FlowOutputMessage.Builder.listenAfterSpeaking.setter()
{
  return MEMORY[0x1F4152B48]();
}

uint64_t FlowOutputMessage.Builder.commandExecutionInfo.setter()
{
  return MEMORY[0x1F4152B50]();
}

uint64_t FlowOutputMessage.Builder.source.setter()
{
  return MEMORY[0x1F4152B58]();
}

uint64_t FlowOutputMessage.Builder.command.setter()
{
  return MEMORY[0x1F4152B60]();
}

uint64_t FlowOutputMessage.Builder.requestId.setter()
{
  return MEMORY[0x1F4152B68]();
}

uint64_t FlowOutputMessage.Builder.sessionId.setter()
{
  return MEMORY[0x1F4152B70]();
}

uint64_t type metadata accessor for FlowOutputMessage()
{
  return MEMORY[0x1F4152B80]();
}

uint64_t MUXContextMessage.isRMVEnabled.getter()
{
  return MEMORY[0x1F4152B88]();
}

uint64_t MUXContextMessage.userIdToHomeMember.getter()
{
  return MEMORY[0x1F4152B90]();
}

uint64_t MUXContextMessage.voiceProfilesAreInFlight.getter()
{
  return MEMORY[0x1F4152B98]();
}

uint64_t type metadata accessor for MUXContextMessage()
{
  return MEMORY[0x1F4152BA0]();
}

uint64_t TTResponseMessage.MitigationDecision.rawValue.getter()
{
  return MEMORY[0x1F4152BB0]();
}

uint64_t type metadata accessor for TTResponseMessage.MitigationDecision()
{
  return MEMORY[0x1F4152BB8]();
}

uint64_t TTResponseMessage.mitigationDecision.getter()
{
  return MEMORY[0x1F4152BC0]();
}

uint64_t TTResponseMessage.tcuMappedNLResponse.getter()
{
  return MEMORY[0x1F4152BC8]();
}

uint64_t TTResponseMessage.selectedUserAttributes.getter()
{
  return MEMORY[0x1F4152BD0]();
}

uint64_t TTResponseMessage.init(build:)()
{
  return MEMORY[0x1F4152BD8]();
}

uint64_t TTResponseMessage.Builder.assistantId.setter()
{
  return MEMORY[0x1F4152BE0]();
}

uint64_t TTResponseMessage.Builder.tcuStateDict.setter()
{
  return MEMORY[0x1F4152BE8]();
}

uint64_t TTResponseMessage.Builder.trpCandidateId.setter()
{
  return MEMORY[0x1F4152BF0]();
}

uint64_t TTResponseMessage.Builder.mitigationDecision.setter()
{
  return MEMORY[0x1F4152BF8]();
}

uint64_t TTResponseMessage.Builder.tcuMappedNLResponse.setter()
{
  return MEMORY[0x1F4152C00]();
}

uint64_t TTResponseMessage.Builder.source.setter()
{
  return MEMORY[0x1F4152C10]();
}

uint64_t TTResponseMessage.Builder.userId.setter()
{
  return MEMORY[0x1F4152C18]();
}

uint64_t TTResponseMessage.Builder.requestId.setter()
{
  return MEMORY[0x1F4152C20]();
}

uint64_t TTResponseMessage.Builder.sessionId.setter()
{
  return MEMORY[0x1F4152C28]();
}

uint64_t type metadata accessor for TTResponseMessage()
{
  return MEMORY[0x1F4152C30]();
}

uint64_t NLRepetitionMessage.repetitionResults.getter()
{
  return MEMORY[0x1F4152C38]();
}

uint64_t type metadata accessor for NLRepetitionMessage()
{
  return MEMORY[0x1F4152C40]();
}

uint64_t type metadata accessor for SessionEndedMessage()
{
  return MEMORY[0x1F4152C50]();
}

uint64_t StartRequestMessageBase.optionalRequestContextData.getter()
{
  return MEMORY[0x1F4152C58]();
}

uint64_t StartRequestMessageBase.inputOrigin.getter()
{
  return MEMORY[0x1F4152C60]();
}

uint64_t type metadata accessor for StartRequestMessageBase()
{
  return MEMORY[0x1F4152C98]();
}

uint64_t type metadata accessor for CancelRequestMessage()
{
  return MEMORY[0x1F4152D28]();
}

uint64_t FlowCompletedMessage.init(build:)()
{
  return MEMORY[0x1F4152D78]();
}

uint64_t FlowCompletedMessage.Builder.assistantId.setter()
{
  return MEMORY[0x1F4152D80]();
}

uint64_t FlowCompletedMessage.Builder.source.setter()
{
  return MEMORY[0x1F4152D90]();
}

uint64_t FlowCompletedMessage.Builder.requestId.setter()
{
  return MEMORY[0x1F4152D98]();
}

uint64_t FlowCompletedMessage.Builder.sessionId.setter()
{
  return MEMORY[0x1F4152DA0]();
}

uint64_t type metadata accessor for FlowCompletedMessage()
{
  return MEMORY[0x1F4152DA8]();
}

uint64_t FlowPluginInfoMessage.init(build:)()
{
  return MEMORY[0x1F4152DB8]();
}

uint64_t FlowPluginInfoMessage.Builder.assistantId.setter()
{
  return MEMORY[0x1F4152DC0]();
}

uint64_t FlowPluginInfoMessage.Builder.isPersonalRequest.setter()
{
  return MEMORY[0x1F4152DC8]();
}

uint64_t FlowPluginInfoMessage.Builder.resultCandidateId.setter()
{
  return MEMORY[0x1F4152DD0]();
}

uint64_t FlowPluginInfoMessage.Builder.supportsOnDeviceNL.setter()
{
  return MEMORY[0x1F4152DD8]();
}

uint64_t FlowPluginInfoMessage.Builder.source.setter()
{
  return MEMORY[0x1F4152DE0]();
}

uint64_t FlowPluginInfoMessage.Builder.requestId.setter()
{
  return MEMORY[0x1F4152DE8]();
}

uint64_t FlowPluginInfoMessage.Builder.sessionId.setter()
{
  return MEMORY[0x1F4152DF0]();
}

uint64_t type metadata accessor for FlowPluginInfoMessage()
{
  return MEMORY[0x1F4152DF8]();
}

uint64_t RequestContextMessage.isEyesFree.getter()
{
  return MEMORY[0x1F4152E70]();
}

uint64_t RequestContextMessage.audioSource.getter()
{
  return MEMORY[0x1F4152E78]();
}

uint64_t RequestContextMessage.isInAmbient.getter()
{
  return MEMORY[0x1F4152E80]();
}

uint64_t RequestContextMessage.bargeInModes.getter()
{
  return MEMORY[0x1F4152E88]();
}

uint64_t RequestContextMessage.responseMode.getter()
{
  return MEMORY[0x1F4152E90]();
}

uint64_t RequestContextMessage.audioDestination.getter()
{
  return MEMORY[0x1F4152E98]();
}

uint64_t RequestContextMessage.deviceRestrictions.getter()
{
  return MEMORY[0x1F4152EA0]();
}

uint64_t RequestContextMessage.voiceAudioSessionId.getter()
{
  return MEMORY[0x1F4152EA8]();
}

uint64_t RequestContextMessage.isTextToSpeechEnabled.getter()
{
  return MEMORY[0x1F4152EB0]();
}

uint64_t RequestContextMessage.isTriggerlessFollowup.getter()
{
  return MEMORY[0x1F4152EB8]();
}

uint64_t RequestContextMessage.isVoiceTriggerEnabled.getter()
{
  return MEMORY[0x1F4152EC0]();
}

uint64_t RequestContextMessage.voiceTriggerEventInfo.getter()
{
  return MEMORY[0x1F4152EC8]();
}

uint64_t RequestContextMessage.isSystemApertureEnabled.getter()
{
  return MEMORY[0x1F4152ED0]();
}

uint64_t RequestContextMessage.isLiveActivitiesSupported.getter()
{
  return MEMORY[0x1F4152ED8]();
}

uint64_t RequestContextMessage.approximatePreviousTTSInterval.getter()
{
  return MEMORY[0x1F4152EE0]();
}

uint64_t type metadata accessor for RequestContextMessage()
{
  return MEMORY[0x1F4152EE8]();
}

uint64_t ResultSelectedMessage.init(build:)()
{
  return MEMORY[0x1F4152EF0]();
}

uint64_t type metadata accessor for ResultSelectedMessage()
{
  return MEMORY[0x1F4152EF8]();
}

uint64_t ResultSelectedMessageBase.isMitigated.getter()
{
  return MEMORY[0x1F4152F00]();
}

uint64_t ResultSelectedMessageBase.endpointMode.getter()
{
  return MEMORY[0x1F4152F08]();
}

uint64_t ResultSelectedMessageBase.Builder.assistantId.setter()
{
  return MEMORY[0x1F4152F10]();
}

uint64_t ResultSelectedMessageBase.Builder.isMitigated.setter()
{
  return MEMORY[0x1F4152F18]();
}

uint64_t ResultSelectedMessageBase.Builder.endpointMode.setter()
{
  return MEMORY[0x1F4152F20]();
}

uint64_t ResultSelectedMessageBase.Builder.resultCandidateId.setter()
{
  return MEMORY[0x1F4152F28]();
}

uint64_t ResultSelectedMessageBase.Builder.source.setter()
{
  return MEMORY[0x1F4152F30]();
}

uint64_t ResultSelectedMessageBase.Builder.requestId.setter()
{
  return MEMORY[0x1F4152F38]();
}

uint64_t ResultSelectedMessageBase.Builder.sessionId.setter()
{
  return MEMORY[0x1F4152F40]();
}

uint64_t SessionStartedMessage.understandingOnDevice.getter()
{
  return MEMORY[0x1F4152F58]();
}

uint64_t SessionStartedMessage.userId.getter()
{
  return MEMORY[0x1F4152F68]();
}

uint64_t type metadata accessor for SessionStartedMessage()
{
  return MEMORY[0x1F4152FA8]();
}

uint64_t StartIFRequestMessage.inputOrigin.getter()
{
  return MEMORY[0x1F4152FB0]();
}

uint64_t StartIFRequestMessage.requestContextData.getter()
{
  return MEMORY[0x1F4152FC0]();
}

uint64_t type metadata accessor for StartIFRequestMessage()
{
  return MEMORY[0x1F4153010]();
}

uint64_t FallbackToPommesMessage.init(build:)()
{
  return MEMORY[0x1F4153070]();
}

uint64_t FallbackToPommesMessage.Builder.assistantId.setter()
{
  return MEMORY[0x1F4153080]();
}

uint64_t FallbackToPommesMessage.Builder.fallbackReason.setter()
{
  return MEMORY[0x1F4153088]();
}

uint64_t FallbackToPommesMessage.Builder.pommesCandidateId.setter()
{
  return MEMORY[0x1F4153090]();
}

uint64_t FallbackToPommesMessage.Builder.delegatedUserDialogActs.setter()
{
  return MEMORY[0x1F4153098]();
}

uint64_t FallbackToPommesMessage.Builder.source.setter()
{
  return MEMORY[0x1F41530A0]();
}

uint64_t FallbackToPommesMessage.Builder.userId.setter()
{
  return MEMORY[0x1F41530A8]();
}

uint64_t FallbackToPommesMessage.Builder.requestId.setter()
{
  return MEMORY[0x1F41530B0]();
}

uint64_t FallbackToPommesMessage.Builder.sessionId.setter()
{
  return MEMORY[0x1F41530B8]();
}

uint64_t type metadata accessor for FallbackToPommesMessage()
{
  return MEMORY[0x1F41530C0]();
}

uint64_t type metadata accessor for RequestCompletedMessage()
{
  return MEMORY[0x1F4153130]();
}

uint64_t type metadata accessor for StartTextRequestMessage()
{
  return MEMORY[0x1F4153140]();
}

uint64_t ExecuteNLOnServerMessage.isMuxStateRollback.getter()
{
  return MEMORY[0x1F4153148]();
}

uint64_t ExecuteNLOnServerMessage.mostRecentVoiceIdScoreCard.getter()
{
  return MEMORY[0x1F4153150]();
}

uint64_t ExecuteNLOnServerMessage.sharedUserIdToSpeechPackage.getter()
{
  return MEMORY[0x1F4153158]();
}

uint64_t ExecuteNLOnServerMessage.init(build:)()
{
  return MEMORY[0x1F4153160]();
}

uint64_t ExecuteNLOnServerMessage.Builder.assistantId.setter()
{
  return MEMORY[0x1F4153168]();
}

uint64_t ExecuteNLOnServerMessage.Builder.fallbackReason.setter()
{
  return MEMORY[0x1F4153170]();
}

uint64_t ExecuteNLOnServerMessage.Builder.resultCandidateId.setter()
{
  return MEMORY[0x1F4153178]();
}

uint64_t ExecuteNLOnServerMessage.Builder.delegatedUserDialogActs.setter()
{
  return MEMORY[0x1F4153188]();
}

uint64_t ExecuteNLOnServerMessage.Builder.sharedUserIdToSpeechPackage.setter()
{
  return MEMORY[0x1F4153198]();
}

uint64_t ExecuteNLOnServerMessage.Builder.source.setter()
{
  return MEMORY[0x1F41531A0]();
}

uint64_t ExecuteNLOnServerMessage.Builder.requestId.setter()
{
  return MEMORY[0x1F41531A8]();
}

uint64_t ExecuteNLOnServerMessage.Builder.sessionId.setter()
{
  return MEMORY[0x1F41531B0]();
}

uint64_t type metadata accessor for ExecuteNLOnServerMessage()
{
  return MEMORY[0x1F41531B8]();
}

uint64_t ExecuteNLOnServerMessageBase.fallbackReason.getter()
{
  return MEMORY[0x1F41531C0]();
}

uint64_t ExecuteNLOnServerMessageBase.delegatedUserDialogActs.getter()
{
  return MEMORY[0x1F41531C8]();
}

uint64_t ExecuteNLOnServerMessageBase.Builder.assistantId.setter()
{
  return MEMORY[0x1F41531D0]();
}

uint64_t ExecuteNLOnServerMessageBase.Builder.fallbackReason.setter()
{
  return MEMORY[0x1F41531D8]();
}

uint64_t ExecuteNLOnServerMessageBase.Builder.resultCandidateId.setter()
{
  return MEMORY[0x1F41531E0]();
}

uint64_t ExecuteNLOnServerMessageBase.Builder.delegatedUserDialogActs.setter()
{
  return MEMORY[0x1F41531E8]();
}

uint64_t ExecuteNLOnServerMessageBase.Builder.source.setter()
{
  return MEMORY[0x1F41531F0]();
}

uint64_t ExecuteNLOnServerMessageBase.Builder.requestId.setter()
{
  return MEMORY[0x1F41531F8]();
}

uint64_t ExecuteNLOnServerMessageBase.Builder.sessionId.setter()
{
  return MEMORY[0x1F4153200]();
}

uint64_t MUXServerFallbackMessage.init(build:)()
{
  return MEMORY[0x1F4153230]();
}

uint64_t type metadata accessor for MUXServerFallbackMessage()
{
  return MEMORY[0x1F4153238]();
}

uint64_t NLResultCandidateMessage.voiceIdScore.getter()
{
  return MEMORY[0x1F4153240]();
}

uint64_t NLResultCandidateMessage.voiceIdClassification.getter()
{
  return MEMORY[0x1F4153248]();
}

uint64_t NLResultCandidateMessage.init(build:)()
{
  return MEMORY[0x1F4153250]();
}

uint64_t NLResultCandidateMessage.Builder.resultCandidateId.setter()
{
  return MEMORY[0x1F4153258]();
}

uint64_t NLResultCandidateMessage.Builder.userParses.setter()
{
  return MEMORY[0x1F4153260]();
}

uint64_t NLResultCandidateMessage.Builder.assistantId.setter()
{
  return MEMORY[0x1F4153268]();
}

uint64_t NLResultCandidateMessage.Builder.fallbackParse.setter()
{
  return MEMORY[0x1F4153278]();
}

uint64_t NLResultCandidateMessage.Builder.responseStatusCode.setter()
{
  return MEMORY[0x1F4153280]();
}

uint64_t NLResultCandidateMessage.Builder.languageVariantResult.setter()
{
  return MEMORY[0x1F4153288]();
}

uint64_t NLResultCandidateMessage.Builder.responseVariantResult.setter()
{
  return MEMORY[0x1F4153290]();
}

uint64_t NLResultCandidateMessage.Builder.source.setter()
{
  return MEMORY[0x1F41532A0]();
}

uint64_t NLResultCandidateMessage.Builder.userId.setter()
{
  return MEMORY[0x1F41532A8]();
}

uint64_t NLResultCandidateMessage.Builder.requestId.setter()
{
  return MEMORY[0x1F41532B0]();
}

uint64_t NLResultCandidateMessage.Builder.sessionId.setter()
{
  return MEMORY[0x1F41532B8]();
}

uint64_t type metadata accessor for NLResultCandidateMessage()
{
  return MEMORY[0x1F41532C0]();
}

uint64_t NLResultCandidateMessageBase.userParses.getter()
{
  return MEMORY[0x1F41532C8]();
}

uint64_t NLResultCandidateMessageBase.fallbackParse.getter()
{
  return MEMORY[0x1F41532D0]();
}

uint64_t NLResultCandidateMessageBase.responseStatusCode.getter()
{
  return MEMORY[0x1F41532D8]();
}

uint64_t NLResultCandidateMessageBase.languageVariantResult.getter()
{
  return MEMORY[0x1F41532E0]();
}

uint64_t NLResultCandidateMessageBase.responseVariantResult.getter()
{
  return MEMORY[0x1F41532E8]();
}

uint64_t NLRoutingDecisionMessage.RoutingDecision.shouldBeHandledBySiriX.getter()
{
  return MEMORY[0x1F41532F0]();
}

uint64_t NLRoutingDecisionMessage.RoutingDecision.SiriXRoute.genAIFallbackSuppressReason.getter()
{
  return MEMORY[0x1F4153310]();
}

uint64_t type metadata accessor for NLRoutingDecisionMessage.RoutingDecision.SiriXRoute()
{
  return MEMORY[0x1F4153318]();
}

uint64_t static NLRoutingDecisionMessage.RoutingDecision.== infix(_:_:)()
{
  return MEMORY[0x1F4153320]();
}

uint64_t type metadata accessor for NLRoutingDecisionMessage.RoutingDecision()
{
  return MEMORY[0x1F4153328]();
}

uint64_t NLRoutingDecisionMessage.routingDecision.getter()
{
  return MEMORY[0x1F4153330]();
}

uint64_t NLRoutingDecisionMessage.trpCandidateId.getter()
{
  return MEMORY[0x1F4153368]();
}

uint64_t type metadata accessor for NLRoutingDecisionMessage.GenAIFallbackSuppressReason()
{
  return MEMORY[0x1F4153398]();
}

uint64_t type metadata accessor for NLRoutingDecisionMessage()
{
  return MEMORY[0x1F41533D8]();
}

uint64_t RunPommesResponseMessage.nlResponse.getter()
{
  return MEMORY[0x1F41533E0]();
}

uint64_t RunPommesResponseMessage.pommesResult.getter()
{
  return MEMORY[0x1F41533E8]();
}

uint64_t RunPommesResponseMessage.pommesSearchReason.getter()
{
  return MEMORY[0x1F41533F0]();
}

uint64_t RunPommesResponseMessage.userId.getter()
{
  return MEMORY[0x1F4153400]();
}

uint64_t type metadata accessor for RunPommesResponseMessage.UserInput()
{
  return MEMORY[0x1F4153448]();
}

uint64_t RunPommesResponseMessage.userInput.getter()
{
  return MEMORY[0x1F4153450]();
}

uint64_t type metadata accessor for RunPommesResponseMessage()
{
  return MEMORY[0x1F4153458]();
}

uint64_t type metadata accessor for StartLocalRequestMessage()
{
  return MEMORY[0x1F4153468]();
}

uint64_t AsrResultCandidateMessage.voiceIdScore.getter()
{
  return MEMORY[0x1F4153490]();
}

uint64_t AsrResultCandidateMessage.speechPackage.getter()
{
  return MEMORY[0x1F4153498]();
}

uint64_t AsrResultCandidateMessage.voiceIdClassification.getter()
{
  return MEMORY[0x1F41534A0]();
}

uint64_t type metadata accessor for AsrResultCandidateMessage()
{
  return MEMORY[0x1F41534F8]();
}

uint64_t DialogEngineOutputMessage.init(build:)()
{
  return MEMORY[0x1F4153518]();
}

uint64_t DialogEngineOutputMessage.Builder.assistantId.setter()
{
  return MEMORY[0x1F4153520]();
}

uint64_t DialogEngineOutputMessage.Builder.executionSource.setter()
{
  return MEMORY[0x1F4153528]();
}

uint64_t DialogEngineOutputMessage.Builder.redactedFullPrint.setter()
{
  return MEMORY[0x1F4153530]();
}

uint64_t DialogEngineOutputMessage.Builder.redactedFullSpeak.setter()
{
  return MEMORY[0x1F4153538]();
}

uint64_t DialogEngineOutputMessage.Builder.source.setter()
{
  return MEMORY[0x1F4153540]();
}

uint64_t DialogEngineOutputMessage.Builder.fullPrint.setter()
{
  return MEMORY[0x1F4153548]();
}

uint64_t DialogEngineOutputMessage.Builder.fullSpeak.setter()
{
  return MEMORY[0x1F4153550]();
}

uint64_t DialogEngineOutputMessage.Builder.requestId.setter()
{
  return MEMORY[0x1F4153558]();
}

uint64_t DialogEngineOutputMessage.Builder.sessionId.setter()
{
  return MEMORY[0x1F4153560]();
}

uint64_t type metadata accessor for DialogEngineOutputMessage()
{
  return MEMORY[0x1F4153578]();
}

uint64_t ExecutionFinalizedMessage.init(build:)()
{
  return MEMORY[0x1F4153588]();
}

uint64_t ExecutionFinalizedMessage.Builder.assistantId.setter()
{
  return MEMORY[0x1F4153598]();
}

uint64_t ExecutionFinalizedMessage.Builder.flowPluginId.setter()
{
  return MEMORY[0x1F41535A0]();
}

uint64_t ExecutionFinalizedMessage.Builder.trpCandidateId.setter()
{
  return MEMORY[0x1F41535A8]();
}

uint64_t ExecutionFinalizedMessage.Builder.tcuId.setter()
{
  return MEMORY[0x1F41535B0]();
}

uint64_t ExecutionFinalizedMessage.Builder.source.setter()
{
  return MEMORY[0x1F41535B8]();
}

uint64_t ExecutionFinalizedMessage.Builder.userId.setter()
{
  return MEMORY[0x1F41535C0]();
}

uint64_t ExecutionFinalizedMessage.Builder.requestId.setter()
{
  return MEMORY[0x1F41535C8]();
}

uint64_t ExecutionFinalizedMessage.Builder.sessionId.setter()
{
  return MEMORY[0x1F41535D0]();
}

uint64_t type metadata accessor for ExecutionFinalizedMessage()
{
  return MEMORY[0x1F41535D8]();
}

uint64_t FlowOutputResponseMessage.commandResult.getter()
{
  return MEMORY[0x1F41535E0]();
}

uint64_t FlowOutputResponseMessage.outputId.getter()
{
  return MEMORY[0x1F4153620]();
}

uint64_t type metadata accessor for FlowOutputResponseMessage()
{
  return MEMORY[0x1F4153628]();
}

uint64_t PommesTRPCandidateMessage.pommesResult.getter()
{
  return MEMORY[0x1F4153630]();
}

uint64_t PommesTRPCandidateMessage.searchReason.getter()
{
  return MEMORY[0x1F4153638]();
}

uint64_t PommesTRPCandidateMessage.init(build:)()
{
  return MEMORY[0x1F4153640]();
}

uint64_t PommesTRPCandidateMessage.tcuId.getter()
{
  return MEMORY[0x1F4153648]();
}

uint64_t PommesTRPCandidateMessage.Builder.assistantId.setter()
{
  return MEMORY[0x1F4153650]();
}

uint64_t PommesTRPCandidateMessage.Builder.pommesResult.setter()
{
  return MEMORY[0x1F4153658]();
}

uint64_t PommesTRPCandidateMessage.Builder.searchReason.setter()
{
  return MEMORY[0x1F4153660]();
}

uint64_t PommesTRPCandidateMessage.Builder.trpCandidateId.setter()
{
  return MEMORY[0x1F4153668]();
}

uint64_t PommesTRPCandidateMessage.Builder.tcuId.setter()
{
  return MEMORY[0x1F4153670]();
}

uint64_t PommesTRPCandidateMessage.Builder.source.setter()
{
  return MEMORY[0x1F4153678]();
}

uint64_t PommesTRPCandidateMessage.Builder.requestId.setter()
{
  return MEMORY[0x1F4153688]();
}

uint64_t PommesTRPCandidateMessage.Builder.sessionId.setter()
{
  return MEMORY[0x1F4153690]();
}

uint64_t type metadata accessor for PommesTRPCandidateMessage()
{
  return MEMORY[0x1F4153698]();
}

uint64_t SpeechStopDetectedMessage.lastTRPId.getter()
{
  return MEMORY[0x1F41536A0]();
}

uint64_t type metadata accessor for SpeechStopDetectedMessage()
{
  return MEMORY[0x1F41536A8]();
}

uint64_t StartSpeechRequestMessage.asrOnServer.getter()
{
  return MEMORY[0x1F41536B0]();
}

uint64_t type metadata accessor for StartSpeechRequestMessage()
{
  return MEMORY[0x1F4153708]();
}

uint64_t TRPCandidateRequestMessage.tcuToContextList.getter()
{
  return MEMORY[0x1F4153738]();
}

uint64_t TRPCandidateRequestMessage.init(build:)()
{
  return MEMORY[0x1F4153740]();
}

uint64_t TRPCandidateRequestMessage.Builder.assistantId.setter()
{
  return MEMORY[0x1F4153748]();
}

uint64_t TRPCandidateRequestMessage.Builder.trpCandidateId.setter()
{
  return MEMORY[0x1F4153750]();
}

uint64_t TRPCandidateRequestMessage.Builder.tcuToContextList.setter()
{
  return MEMORY[0x1F4153758]();
}

uint64_t TRPCandidateRequestMessage.Builder.source.setter()
{
  return MEMORY[0x1F4153760]();
}

uint64_t TRPCandidateRequestMessage.Builder.userId.setter()
{
  return MEMORY[0x1F4153768]();
}

uint64_t TRPCandidateRequestMessage.Builder.requestId.setter()
{
  return MEMORY[0x1F4153770]();
}

uint64_t TRPCandidateRequestMessage.Builder.sessionId.setter()
{
  return MEMORY[0x1F4153778]();
}

uint64_t type metadata accessor for TRPCandidateRequestMessage()
{
  return MEMORY[0x1F4153780]();
}

uint64_t TRPCandidateRequestMessageBase.trpCandidateId.getter()
{
  return MEMORY[0x1F4153788]();
}

uint64_t TRPCandidateRequestMessageBase.userId.getter()
{
  return MEMORY[0x1F4153790]();
}

uint64_t type metadata accessor for FallbackToIFRequestedMessage.PrescribedTool()
{
  return MEMORY[0x1F41538D0]();
}

uint64_t FallbackToIFRequestedMessage.init(build:)()
{
  return MEMORY[0x1F41538E0]();
}

uint64_t FallbackToIFRequestedMessage.Builder.assistantId.setter()
{
  return MEMORY[0x1F41538E8]();
}

uint64_t FallbackToIFRequestedMessage.Builder.prescribedTool.setter()
{
  return MEMORY[0x1F41538F0]();
}

uint64_t FallbackToIFRequestedMessage.Builder.source.setter()
{
  return MEMORY[0x1F41538F8]();
}

uint64_t FallbackToIFRequestedMessage.Builder.requestId.setter()
{
  return MEMORY[0x1F4153900]();
}

uint64_t FallbackToIFRequestedMessage.Builder.sessionId.setter()
{
  return MEMORY[0x1F4153908]();
}

uint64_t type metadata accessor for FallbackToIFRequestedMessage()
{
  return MEMORY[0x1F4153910]();
}

uint64_t MUXAsrResultCandidateMessage.voiceIdScoreCard.getter()
{
  return MEMORY[0x1F4153918]();
}

uint64_t MUXAsrResultCandidateMessage.speechPackageDict.getter()
{
  return MEMORY[0x1F4153920]();
}

uint64_t type metadata accessor for MUXAsrResultCandidateMessage()
{
  return MEMORY[0x1F4153928]();
}

uint64_t PommesResultCandidateMessage.searchReason.getter()
{
  return MEMORY[0x1F4153940]();
}

uint64_t PommesResultCandidateMessage.pommesResponse.getter()
{
  return MEMORY[0x1F4153948]();
}

uint64_t PommesResultCandidateMessage.init(build:)()
{
  return MEMORY[0x1F4153950]();
}

uint64_t PommesResultCandidateMessage.error.getter()
{
  return MEMORY[0x1F4153958]();
}

uint64_t PommesResultCandidateMessage.Builder.resultCandidateId.setter()
{
  return MEMORY[0x1F4153960]();
}

uint64_t PommesResultCandidateMessage.Builder.assistantId.setter()
{
  return MEMORY[0x1F4153968]();
}

uint64_t PommesResultCandidateMessage.Builder.searchReason.setter()
{
  return MEMORY[0x1F4153970]();
}

uint64_t PommesResultCandidateMessage.Builder.pommesResponse.setter()
{
  return MEMORY[0x1F4153978]();
}

uint64_t PommesResultCandidateMessage.Builder.error.setter()
{
  return MEMORY[0x1F4153980]();
}

uint64_t PommesResultCandidateMessage.Builder.source.setter()
{
  return MEMORY[0x1F4153988]();
}

uint64_t PommesResultCandidateMessage.Builder.requestId.setter()
{
  return MEMORY[0x1F4153990]();
}

uint64_t PommesResultCandidateMessage.Builder.sessionId.setter()
{
  return MEMORY[0x1F4153998]();
}

uint64_t type metadata accessor for PommesResultCandidateMessage()
{
  return MEMORY[0x1F41539A0]();
}

uint64_t type metadata accessor for StartCandidateRequestMessage()
{
  return MEMORY[0x1F41539E0]();
}

uint64_t StartChildTextRequestMessage.textRequestType.getter()
{
  return MEMORY[0x1F41539F0]();
}

uint64_t type metadata accessor for StartChildTextRequestMessage()
{
  return MEMORY[0x1F4153A50]();
}

uint64_t TextBasedTRPCandidateMessage.tcuId.getter()
{
  return MEMORY[0x1F4153A60]();
}

uint64_t TextBasedTRPCandidateMessage.utterance.getter()
{
  return MEMORY[0x1F4153AB8]();
}

uint64_t type metadata accessor for TextBasedTRPCandidateMessage()
{
  return MEMORY[0x1F4153AC0]();
}

uint64_t ConversationMitigationMessage.init(build:)()
{
  return MEMORY[0x1F4153AC8]();
}

uint64_t ConversationMitigationMessage.Builder.assistantId.setter()
{
  return MEMORY[0x1F4153AD0]();
}

uint64_t ConversationMitigationMessage.Builder.isMitigated.setter()
{
  return MEMORY[0x1F4153AD8]();
}

uint64_t ConversationMitigationMessage.Builder.source.setter()
{
  return MEMORY[0x1F4153AE0]();
}

uint64_t ConversationMitigationMessage.Builder.requestId.setter()
{
  return MEMORY[0x1F4153AE8]();
}

uint64_t ConversationMitigationMessage.Builder.sessionId.setter()
{
  return MEMORY[0x1F4153AF0]();
}

uint64_t type metadata accessor for ConversationMitigationMessage()
{
  return MEMORY[0x1F4153AF8]();
}

uint64_t MUXFlowOutputCandidateMessage.init(build:)()
{
  return MEMORY[0x1F4153B68]();
}

uint64_t MUXFlowOutputCandidateMessage.Builder.resultCandidateId.setter()
{
  return MEMORY[0x1F4153B70]();
}

uint64_t MUXFlowOutputCandidateMessage.Builder.assistantId.setter()
{
  return MEMORY[0x1F4153B78]();
}

uint64_t MUXFlowOutputCandidateMessage.Builder.source.setter()
{
  return MEMORY[0x1F4153B80]();
}

uint64_t MUXFlowOutputCandidateMessage.Builder.requestId.setter()
{
  return MEMORY[0x1F4153B88]();
}

uint64_t MUXFlowOutputCandidateMessage.Builder.sessionId.setter()
{
  return MEMORY[0x1F4153B90]();
}

uint64_t type metadata accessor for MUXFlowOutputCandidateMessage()
{
  return MEMORY[0x1F4153B98]();
}

uint64_t ResultCandidateRequestMessageBase.resultCandidateId.getter()
{
  return MEMORY[0x1F4153BA0]();
}

uint64_t type metadata accessor for ExecutionSystemSwitchedMessage.SwitchType()
{
  return MEMORY[0x1F4153D10]();
}

uint64_t ExecutionSystemSwitchedMessage.switchType.getter()
{
  return MEMORY[0x1F4153D18]();
}

uint64_t ExecutionSystemSwitchedMessage.userId.getter()
{
  return MEMORY[0x1F4153D28]();
}

uint64_t type metadata accessor for ExecutionSystemSwitchedMessage()
{
  return MEMORY[0x1F4153D58]();
}

uint64_t type metadata accessor for StartChildSpeechRequestMessage()
{
  return MEMORY[0x1F4153DC8]();
}

uint64_t InitiateMUXStateRollbackMessage.init(build:)()
{
  return MEMORY[0x1F4153DE0]();
}

uint64_t InitiateMUXStateRollbackMessage.Builder.assistantId.setter()
{
  return MEMORY[0x1F4153DF0]();
}

uint64_t InitiateMUXStateRollbackMessage.Builder.originalRequestId.setter()
{
  return MEMORY[0x1F4153DF8]();
}

uint64_t InitiateMUXStateRollbackMessage.Builder.rollbackRequestId.setter()
{
  return MEMORY[0x1F4153E00]();
}

uint64_t InitiateMUXStateRollbackMessage.Builder.source.setter()
{
  return MEMORY[0x1F4153E08]();
}

uint64_t InitiateMUXStateRollbackMessage.Builder.userId.setter()
{
  return MEMORY[0x1F4153E10]();
}

uint64_t InitiateMUXStateRollbackMessage.Builder.sessionId.setter()
{
  return MEMORY[0x1F4153E18]();
}

uint64_t type metadata accessor for InitiateMUXStateRollbackMessage()
{
  return MEMORY[0x1F4153E20]();
}

uint64_t type metadata accessor for StartDirectActionRequestMessage()
{
  return MEMORY[0x1F4153E30]();
}

uint64_t TextBasedResultCandidateMessage.init(build:)()
{
  return MEMORY[0x1F4153E38]();
}

uint64_t TextBasedResultCandidateMessage.Builder.resultCandidateId.setter()
{
  return MEMORY[0x1F4153E40]();
}

uint64_t TextBasedResultCandidateMessage.Builder.assistantId.setter()
{
  return MEMORY[0x1F4153E48]();
}

uint64_t TextBasedResultCandidateMessage.Builder.source.setter()
{
  return MEMORY[0x1F4153E50]();
}

uint64_t TextBasedResultCandidateMessage.Builder.userId.setter()
{
  return MEMORY[0x1F4153E58]();
}

uint64_t TextBasedResultCandidateMessage.Builder.requestId.setter()
{
  return MEMORY[0x1F4153E60]();
}

uint64_t TextBasedResultCandidateMessage.Builder.sessionId.setter()
{
  return MEMORY[0x1F4153E68]();
}

uint64_t TextBasedResultCandidateMessage.Builder.utterance.setter()
{
  return MEMORY[0x1F4153E70]();
}

uint64_t TextBasedResultCandidateMessage.utterance.getter()
{
  return MEMORY[0x1F4153E78]();
}

uint64_t type metadata accessor for TextBasedResultCandidateMessage()
{
  return MEMORY[0x1F4153E80]();
}

uint64_t ActiveUserSessionDetectedMessage.activeUserPersonaId.getter()
{
  return MEMORY[0x1F4153E88]();
}

uint64_t type metadata accessor for ActiveUserSessionDetectedMessage()
{
  return MEMORY[0x1F4153EB8]();
}

uint64_t UserIdAwareResultCandidateMessageBase.userId.getter()
{
  return MEMORY[0x1F4154010]();
}

uint64_t DirectActionResultCandidateMessage.directAction.getter()
{
  return MEMORY[0x1F4154018]();
}

uint64_t DirectActionResultCandidateMessage.requestExecutionParameters.getter()
{
  return MEMORY[0x1F4154020]();
}

uint64_t type metadata accessor for DirectActionResultCandidateMessage()
{
  return MEMORY[0x1F4154070]();
}

uint64_t GestureBasedResultCandidateMessage.gesture.getter()
{
  return MEMORY[0x1F4154078]();
}

uint64_t type metadata accessor for GestureBasedResultCandidateMessage()
{
  return MEMORY[0x1F4154080]();
}

uint64_t type metadata accessor for StartCorrectedSpeechRequestMessage()
{
  return MEMORY[0x1F41541E0]();
}

uint64_t type metadata accessor for StartSpeechDictationRequestMessage()
{
  return MEMORY[0x1F4154220]();
}

uint64_t type metadata accessor for StartUnderstandingOnServerRequestMessage()
{
  return MEMORY[0x1F4154420]();
}

uint64_t StoppedListeningForTextContinuationMessage.lastTRPId.getter()
{
  return MEMORY[0x1F41544D0]();
}

uint64_t type metadata accessor for StoppedListeningForTextContinuationMessage()
{
  return MEMORY[0x1F41544D8]();
}

uint64_t type metadata accessor for StartUnderstandingOnServerTextRequestMessage()
{
  return MEMORY[0x1F4154528]();
}

uint64_t StoppedListeningForSpeechContinuationMessage.init(build:)()
{
  return MEMORY[0x1F4154530]();
}

uint64_t StoppedListeningForSpeechContinuationMessage.Builder.assistantId.setter()
{
  return MEMORY[0x1F4154538]();
}

uint64_t StoppedListeningForSpeechContinuationMessage.Builder.source.setter()
{
  return MEMORY[0x1F4154548]();
}

uint64_t StoppedListeningForSpeechContinuationMessage.Builder.lastTRPId.setter()
{
  return MEMORY[0x1F4154550]();
}

uint64_t StoppedListeningForSpeechContinuationMessage.Builder.requestId.setter()
{
  return MEMORY[0x1F4154558]();
}

uint64_t StoppedListeningForSpeechContinuationMessage.Builder.sessionId.setter()
{
  return MEMORY[0x1F4154560]();
}

uint64_t StoppedListeningForSpeechContinuationMessage.lastTRPId.getter()
{
  return MEMORY[0x1F4154568]();
}

uint64_t type metadata accessor for StoppedListeningForSpeechContinuationMessage()
{
  return MEMORY[0x1F4154570]();
}

uint64_t RunSiriKitExecutorMessage.invocationId.getter()
{
  return MEMORY[0x1F41545C8]();
}

uint64_t RunSiriKitExecutorMessage.commandExecutionInfo.getter()
{
  return MEMORY[0x1F41545D0]();
}

uint64_t RunSiriKitExecutorMessage.command.getter()
{
  return MEMORY[0x1F4154618]();
}

uint64_t type metadata accessor for RunSiriKitExecutorMessage()
{
  return MEMORY[0x1F4154620]();
}

uint64_t RunSiriKitExecutorResponseMessage.init(build:)()
{
  return MEMORY[0x1F4154628]();
}

uint64_t RunSiriKitExecutorResponseMessage.Builder.assistantId.setter()
{
  return MEMORY[0x1F4154638]();
}

uint64_t RunSiriKitExecutorResponseMessage.Builder.invocationId.setter()
{
  return MEMORY[0x1F4154640]();
}

uint64_t RunSiriKitExecutorResponseMessage.Builder.error.setter()
{
  return MEMORY[0x1F4154648]();
}

uint64_t RunSiriKitExecutorResponseMessage.Builder.source.setter()
{
  return MEMORY[0x1F4154650]();
}

uint64_t RunSiriKitExecutorResponseMessage.Builder.response.setter()
{
  return MEMORY[0x1F4154658]();
}

uint64_t RunSiriKitExecutorResponseMessage.Builder.requestId.setter()
{
  return MEMORY[0x1F4154660]();
}

uint64_t RunSiriKitExecutorResponseMessage.Builder.sessionId.setter()
{
  return MEMORY[0x1F4154668]();
}

uint64_t type metadata accessor for RunSiriKitExecutorResponseMessage()
{
  return MEMORY[0x1F4154678]();
}

uint64_t type metadata accessor for MultiUserStoppedListeningForSpeechContinuationMessage()
{
  return MEMORY[0x1F41546F8]();
}

uint64_t RequestMessageBase.requestId.getter()
{
  return MEMORY[0x1F4154720]();
}

uint64_t type metadata accessor for RequestMessageBase()
{
  return MEMORY[0x1F4154728]();
}

uint64_t SessionMessageBase.sessionId.getter()
{
  return MEMORY[0x1F4154748]();
}

uint64_t SiriXActionCandidate.init(build:)()
{
  return MEMORY[0x1F4154750]();
}

uint64_t SiriXActionCandidate.Builder.affinityScore.setter()
{
  return MEMORY[0x1F4154758]();
}

uint64_t SiriXActionCandidate.Builder.flowHandlerId.setter()
{
  return MEMORY[0x1F4154760]();
}

uint64_t SiriXActionCandidate.Builder.parse.setter()
{
  return MEMORY[0x1F4154768]();
}

uint64_t SiriXActionCandidate.Builder.loggingId.setter()
{
  return MEMORY[0x1F4154770]();
}

uint64_t type metadata accessor for SiriXActionCandidate()
{
  return MEMORY[0x1F4154778]();
}

uint64_t type metadata accessor for SiriXParse()
{
  return MEMORY[0x1F4154780]();
}

uint64_t SiriXUSOParse.init(build:)()
{
  return MEMORY[0x1F4154790]();
}

uint64_t SiriXUSOParse.Builder.groupIndex.setter()
{
  return MEMORY[0x1F4154798]();
}

uint64_t SiriXUSOParse.Builder.appBundleId.setter()
{
  return MEMORY[0x1F41547A0]();
}

uint64_t SiriXUSOParse.Builder.parserIdentifier.setter()
{
  return MEMORY[0x1F41547A8]();
}

uint64_t SiriXUSOParse.Builder.userParse.setter()
{
  return MEMORY[0x1F41547B0]();
}

uint64_t type metadata accessor for SiriXUSOParse()
{
  return MEMORY[0x1F41547B8]();
}

uint64_t dispatch thunk of MessagePublishing.postMessage(_:)()
{
  return MEMORY[0x1F41547C0]();
}

uint64_t MessageXPCTransporter.toMessageBase()()
{
  return MEMORY[0x1F41547C8]();
}

uint64_t type metadata accessor for MessageXPCTransporter()
{
  return MEMORY[0x1F41547D0]();
}

uint64_t dispatch thunk of MessageXPCTransportable.toMessageXPCTransporter()()
{
  return MEMORY[0x1F41547D8]();
}

uint64_t MessageBase.assistantId.getter()
{
  return MEMORY[0x1F41547E0]();
}

uint64_t MessageBase.source.getter()
{
  return MEMORY[0x1F41547F8]();
}

uint64_t MessageBase.messageId.getter()
{
  return MEMORY[0x1F4154800]();
}

uint64_t type metadata accessor for MessageBase()
{
  return MEMORY[0x1F4154808]();
}

uint64_t MessageSource.rawValue.getter()
{
  return MEMORY[0x1F4154810]();
}

uint64_t type metadata accessor for MessageSource()
{
  return MEMORY[0x1F4154818]();
}

uint64_t SiriWillPromptMessage.init(build:)()
{
  return MEMORY[0x1F4154820]();
}

uint64_t type metadata accessor for SiriWillPromptMessage()
{
  return MEMORY[0x1F4154850]();
}

uint64_t SiriWillAskForConfirmationMessage.init(build:)()
{
  return MEMORY[0x1F4154858]();
}

uint64_t type metadata accessor for SiriWillAskForConfirmationMessage()
{
  return MEMORY[0x1F4154860]();
}

uint64_t SiriXActionCandidatesGeneratedMessage.init(build:)()
{
  return MEMORY[0x1F4154878]();
}

uint64_t SiriXActionCandidatesGeneratedMessage.Builder.actionCandidates.setter()
{
  return MEMORY[0x1F4154880]();
}

uint64_t SiriXActionCandidatesGeneratedMessage.Builder.assistantId.setter()
{
  return MEMORY[0x1F4154888]();
}

uint64_t SiriXActionCandidatesGeneratedMessage.Builder.rcId.setter()
{
  return MEMORY[0x1F4154890]();
}

uint64_t SiriXActionCandidatesGeneratedMessage.Builder.source.setter()
{
  return MEMORY[0x1F4154898]();
}

uint64_t SiriXActionCandidatesGeneratedMessage.Builder.requestId.setter()
{
  return MEMORY[0x1F41548A0]();
}

uint64_t SiriXActionCandidatesGeneratedMessage.Builder.sessionId.setter()
{
  return MEMORY[0x1F41548A8]();
}

uint64_t type metadata accessor for SiriXActionCandidatesGeneratedMessage()
{
  return MEMORY[0x1F41548B0]();
}

uint64_t InputOrigin.aceInputOrigin.getter()
{
  return MEMORY[0x1F41548F0]();
}

uint64_t PommesError.rawValue.getter()
{
  return MEMORY[0x1F4154908]();
}

uint64_t type metadata accessor for PommesError()
{
  return MEMORY[0x1F4154910]();
}

uint64_t RequestType.rawValue.getter()
{
  return MEMORY[0x1F4154918]();
}

uint64_t type metadata accessor for RequestType()
{
  return MEMORY[0x1F4154920]();
}

uint64_t GestureInput.utterance.getter()
{
  return MEMORY[0x1F4154980]();
}

uint64_t type metadata accessor for GestureInput()
{
  return MEMORY[0x1F4154988]();
}

uint64_t type metadata accessor for RequestSummary.ExecutionSource()
{
  return MEMORY[0x1F41549F0]();
}

uint64_t NLParseResponse.userParses.getter()
{
  return MEMORY[0x1F4154A90]();
}

uint64_t NLParseResponse.fallbackParse.getter()
{
  return MEMORY[0x1F4154A98]();
}

uint64_t NLParseResponse.responseStatusCode.getter()
{
  return MEMORY[0x1F4154AA0]();
}

uint64_t NLParseResponse.serverFallbackReason.getter()
{
  return MEMORY[0x1F4154AA8]();
}

uint64_t NLParseResponse.languageVariantResult.getter()
{
  return MEMORY[0x1F4154AB0]();
}

uint64_t NLParseResponse.responseVariantResult.getter()
{
  return MEMORY[0x1F4154AB8]();
}

uint64_t type metadata accessor for TextRequestType()
{
  return MEMORY[0x1F4154B00]();
}

uint64_t dispatch thunk of RootRequestAware.rootRequestId.getter()
{
  return MEMORY[0x1F4154B38]();
}

uint64_t RequestContextData.audioSource.getter()
{
  return MEMORY[0x1F4154B68]();
}

uint64_t RequestContextData.responseMode.getter()
{
  return MEMORY[0x1F4154B80]();
}

uint64_t RequestContextData.conjunctionInfo.getter()
{
  return MEMORY[0x1F4154B90]();
}

uint64_t RequestContextData.audioDestination.getter()
{
  return MEMORY[0x1F4154B98]();
}

uint64_t RequestContextData.approximatePreviousTTSInterval.getter()
{
  return MEMORY[0x1F4154BE8]();
}

uint64_t TCUMappedNLResponse.nlResponse.getter()
{
  return MEMORY[0x1F4154C38]();
}

uint64_t TCUMappedNLResponse.init(tcuId:nlResponse:)()
{
  return MEMORY[0x1F4154C40]();
}

uint64_t TCUMappedNLResponse.tcuId.getter()
{
  return MEMORY[0x1F4154C48]();
}

uint64_t type metadata accessor for TCUMappedNLResponse()
{
  return MEMORY[0x1F4154C50]();
}

uint64_t dispatch thunk of RoutingDecisionAware.routingDecision.getter()
{
  return MEMORY[0x1F4154C58]();
}

uint64_t ServerFallbackReason.rawValue.getter()
{
  return MEMORY[0x1F4154C60]();
}

uint64_t type metadata accessor for ServerFallbackReason()
{
  return MEMORY[0x1F4154C68]();
}

uint64_t ConversationSessionKey.rawValue.getter()
{
  return MEMORY[0x1F4154C98]();
}

uint64_t type metadata accessor for ConversationSessionKey()
{
  return MEMORY[0x1F4154CA0]();
}

uint64_t type metadata accessor for RequestConjunctionInfo()
{
  return MEMORY[0x1F4154CC0]();
}

uint64_t SelectedUserAttributes.meetsUserSessionThreshold.getter()
{
  return MEMORY[0x1F4154CC8]();
}

uint64_t SelectedUserAttributes.classification.getter()
{
  return MEMORY[0x1F4154CD0]();
}

uint64_t static SelectedUserAttributes.defaultLowVoiceIdThreshold.getter()
{
  return MEMORY[0x1F4154CD8]();
}

uint64_t SelectedUserAttributes.init(score:classification:lowScoreThreshold:meetsUserSessionThreshold:meetsPersonalRequestThreshold:)()
{
  return MEMORY[0x1F4154CE0]();
}

uint64_t type metadata accessor for SelectedUserAttributes()
{
  return MEMORY[0x1F4154CE8]();
}

uint64_t dispatch thunk of ConversationSessionState.sharedValue(forKey:)()
{
  return MEMORY[0x1F4154D08]();
}

uint64_t dispatch thunk of ConversationSessionState.updateValue(_:forKey:userId:)()
{
  return MEMORY[0x1F4154D10]();
}

uint64_t dispatch thunk of ConversationSessionState.updateValues(data:userId:)()
{
  return MEMORY[0x1F4154D18]();
}

uint64_t dispatch thunk of ConversationSessionState.createSnapshot(requestId:)()
{
  return MEMORY[0x1F4154D20]();
}

uint64_t dispatch thunk of ConversationSessionState.restoreSnapshot(requestId:)()
{
  return MEMORY[0x1F4154D28]();
}

uint64_t dispatch thunk of ConversationSessionState.immutableSnapshot()()
{
  return MEMORY[0x1F4154D30]();
}

uint64_t dispatch thunk of ConversationSessionState.updateSharedValue(_:forKey:)()
{
  return MEMORY[0x1F4154D38]();
}

uint64_t dispatch thunk of ConversationSessionState.updateSharedValues(data:)()
{
  return MEMORY[0x1F4154D40]();
}

uint64_t dispatch thunk of ConversationSessionState.value(forKey:userId:)()
{
  return MEMORY[0x1F4154D48]();
}

uint64_t dispatch thunk of ConversationSessionsManaging.conversationSessionState(forConversationSessionId:)()
{
  return MEMORY[0x1F4154D58]();
}

uint64_t UserID.init(sharedUserId:)()
{
  return MEMORY[0x1F4154D98]();
}

uint64_t UserID.sharedUserId.getter()
{
  return MEMORY[0x1F4154DA0]();
}

uint64_t static UserID.defaultUserId.getter()
{
  return MEMORY[0x1F4154DA8]();
}

uint64_t type metadata accessor for UserID()
{
  return MEMORY[0x1F4154DB8]();
}

uint64_t App.__allocating_init(appIdentifier:)()
{
  return MEMORY[0x1F4150380]();
}

uint64_t App.appIdentifier.getter()
{
  return MEMORY[0x1F4150388]();
}

uint64_t type metadata accessor for App()
{
  return MEMORY[0x1F41503A8]();
}

uint64_t AppResolutionStateProvider.init(appSelectionState:)()
{
  return MEMORY[0x1F41503E8]();
}

uint64_t type metadata accessor for AppResolutionStateProvider()
{
  return MEMORY[0x1F41503F0]();
}

uint64_t type metadata accessor for AppResolutionResult()
{
  return MEMORY[0x1F4150428]();
}

uint64_t FlowTaskMetadata.init(id:isClientInitiated:creationTime:)()
{
  return MEMORY[0x1F41508E0]();
}

uint64_t type metadata accessor for FlowTaskMetadata()
{
  return MEMORY[0x1F41508F0]();
}

uint64_t static MeCardOptions.ignoreLocalMeCard.getter()
{
  return MEMORY[0x1F4150900]();
}

uint64_t static MeCardOptions.ignoreCachedMeCard.getter()
{
  return MEMORY[0x1F4150908]();
}

uint64_t type metadata accessor for MeCardOptions()
{
  return MEMORY[0x1F4150910]();
}

uint64_t static SharedContext.internalSharedContext.getter()
{
  return MEMORY[0x1F4150918]();
}

uint64_t CurrentRequest.rootRequestId.getter()
{
  return MEMORY[0x1F4150920]();
}

uint64_t CurrentRequest.executionRequestId.getter()
{
  return MEMORY[0x1F4150928]();
}

uint64_t CurrentRequest.asrOnDevice.getter()
{
  return MEMORY[0x1F4150930]();
}

uint64_t CurrentRequest.audioSource.getter()
{
  return MEMORY[0x1F4150938]();
}

uint64_t CurrentRequest.inputOrigin.getter()
{
  return MEMORY[0x1F4150940]();
}

uint64_t CurrentRequest.isInAmbient.getter()
{
  return MEMORY[0x1F4150948]();
}

uint64_t CurrentRequest.responseMode.getter()
{
  return MEMORY[0x1F4150950]();
}

uint64_t CurrentRequest.companionName.getter()
{
  return MEMORY[0x1F4150958]();
}

uint64_t CurrentRequest.interactionId.getter()
{
  return MEMORY[0x1F4150960]();
}

uint64_t CurrentRequest.speechPackage.getter()
{
  return MEMORY[0x1F4150968]();
}

uint64_t CurrentRequest.bargeInContext.getter()
{
  return MEMORY[0x1F4150970]();
}

uint64_t CurrentRequest.multiUserState.getter()
{
  return MEMORY[0x1F4150978]();
}

uint64_t CurrentRequest.interactionType.getter()
{
  return MEMORY[0x1F4150980]();
}

uint64_t CurrentRequest.originatingHome.getter()
{
  return MEMORY[0x1F4150988]();
}

uint64_t CurrentRequest.audioDestination.getter()
{
  return MEMORY[0x1F4150990]();
}

uint64_t CurrentRequest.flowTaskMetadata.getter()
{
  return MEMORY[0x1F4150998]();
}

uint64_t CurrentRequest.flowTaskMetadata.setter()
{
  return MEMORY[0x1F41509A0]();
}

uint64_t CurrentRequest.locationProvider.getter()
{
  return MEMORY[0x1F41509A8]();
}

uint64_t CurrentRequest.locationProvider.setter()
{
  return MEMORY[0x1F41509B0]();
}

uint64_t CurrentRequest.positionInSession.getter()
{
  return MEMORY[0x1F41509B8]();
}

uint64_t CurrentRequest.resultCandidateId.getter()
{
  return MEMORY[0x1F41509C0]();
}

uint64_t CurrentRequest.nlExecutionLocation.getter()
{
  return MEMORY[0x1F41509C8]();
}

uint64_t CurrentRequest.voiceAudioSessionId.getter()
{
  return MEMORY[0x1F41509D0]();
}

uint64_t CurrentRequest.asrExecutionLocation.getter()
{
  return MEMORY[0x1F41509D8]();
}

uint64_t CurrentRequest.sharedContextService.getter()
{
  return MEMORY[0x1F41509E0]();
}

uint64_t CurrentRequest.voiceTriggerEventInfo.getter()
{
  return MEMORY[0x1F41509E8]();
}

uint64_t CurrentRequest.requestLanguageVariant.getter()
{
  return MEMORY[0x1F41509F0]();
}

uint64_t CurrentRequest.isSystemApertureEnabled.getter()
{
  return MEMORY[0x1F41509F8]();
}

uint64_t CurrentRequest.responseLanguageVariant.getter()
{
  return MEMORY[0x1F4150A00]();
}

uint64_t CurrentRequest.currentDeviceAssistantId.getter()
{
  return MEMORY[0x1F4150A08]();
}

uint64_t CurrentRequest.isLiveActivitiesSupported.getter()
{
  return MEMORY[0x1F4150A10]();
}

uint64_t CurrentRequest.isRecognizeMyVoiceEnabled.getter()
{
  return MEMORY[0x1F4150A18]();
}

uint64_t CurrentRequest.sessionHandoffContinuityID.getter()
{
  return MEMORY[0x1F4150A20]();
}

uint64_t CurrentRequest.aceId.getter()
{
  return MEMORY[0x1F4150A28]();
}

uint64_t CurrentRequest.refId.getter()
{
  return MEMORY[0x1F4150A30]();
}

uint64_t CurrentRequest.peerName.getter()
{
  return MEMORY[0x1F4150A38]();
}

uint64_t CurrentRequest.sessionId.getter()
{
  return MEMORY[0x1F4150A40]();
}

uint64_t CurrentRequest.utterance.getter()
{
  return MEMORY[0x1F4150A48]();
}

uint64_t type metadata accessor for CurrentRequest()
{
  return MEMORY[0x1F4150A50]();
}

uint64_t type metadata accessor for MultiUserState()
{
  return MEMORY[0x1F4150A68]();
}

uint64_t dispatch thunk of HomeKitProvider.areHomesConfigured(refresh:)()
{
  return MEMORY[0x1F4150A70]();
}

uint64_t dispatch thunk of HomeKitProvider.debugInfo.getter()
{
  return MEMORY[0x1F4150A78]();
}

uint64_t MultiUserContext.init(requiresUserGrounding:meCardProxy:handoffTargetDeviceID:)()
{
  return MEMORY[0x1F4150A80]();
}

uint64_t type metadata accessor for MultiUserContext()
{
  return MEMORY[0x1F4150A90]();
}

uint64_t InteractionTypeHelper.mapInteractionType(inputOrigin:isEyesFree:isDeviceInStarkMode:isDeviceInCarDND:audioSource:audioDestination:previousInteractionType:)()
{
  return MEMORY[0x1F4150A98]();
}

uint64_t static InteractionTypeHelper.shared.getter()
{
  return MEMORY[0x1F4150AA0]();
}

uint64_t type metadata accessor for InteractionTypeHelper()
{
  return MEMORY[0x1F4150AA8]();
}

uint64_t dispatch thunk of RefreshableSharedContext.sharedContext.setter()
{
  return MEMORY[0x1F4150AB0]();
}

uint64_t RequestPositionInSession.init(rawValue:)()
{
  return MEMORY[0x1F4150AB8]();
}

uint64_t RequestPositionInSession.rawValue.getter()
{
  return MEMORY[0x1F4150AC0]();
}

uint64_t type metadata accessor for RequestPositionInSession()
{
  return MEMORY[0x1F4150AC8]();
}

uint64_t type metadata accessor for PommesCandidateId()
{
  return MEMORY[0x1F4150DC8]();
}

uint64_t PommesSearchReason.rawValue.getter()
{
  return MEMORY[0x1F4150DD8]();
}

uint64_t type metadata accessor for PommesSearchReason()
{
  return MEMORY[0x1F4150DE0]();
}

uint64_t type metadata accessor for DeviceExpertExperience()
{
  return MEMORY[0x1F4150E00]();
}

uint64_t BinaryDecodingOptions.init()()
{
  return MEMORY[0x1F4157F20]();
}

{
  return MEMORY[0x1F4127110]();
}

uint64_t type metadata accessor for BinaryDecodingOptions()
{
  return MEMORY[0x1F4157F28]();
}

{
  return MEMORY[0x1F4127118]();
}

uint64_t Message.init(serializedData:extensions:partial:options:)()
{
  return MEMORY[0x1F4158008]();
}

{
  return MEMORY[0x1F4127340]();
}

uint64_t Message.debugDescription.getter()
{
  return MEMORY[0x1F4158018]();
}

{
  return MEMORY[0x1F4127378]();
}

Swift::String __swiftcall Message.textFormatString()()
{
  uint64_t v0 = MEMORY[0x1F4158020]();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t Google_Protobuf_StringValue.init(stringLiteral:)()
{
  return MEMORY[0x1F4126F28]();
}

uint64_t static Google_Protobuf_StringValue.== infix(_:_:)()
{
  return MEMORY[0x1F4126F30]();
}

uint64_t Google_Protobuf_StringValue.value.getter()
{
  return MEMORY[0x1F4126F38]();
}

uint64_t type metadata accessor for Google_Protobuf_StringValue()
{
  return MEMORY[0x1F4126F50]();
}

uint64_t Message.serializedData(partial:)()
{
  return MEMORY[0x1F4127348]();
}

uint64_t Message.init<A>(contiguousBytes:extensions:partial:options:)()
{
  return MEMORY[0x1F4127358]();
}

uint64_t PommesContext.exportPromptContextData()()
{
  return MEMORY[0x1F4150E80]();
}

uint64_t PommesContext.exportPegasusConversationContext()()
{
  return MEMORY[0x1F4150E90]();
}

Swift::Int __swiftcall PommesContext.contextSize()()
{
  return MEMORY[0x1F4150EA0]();
}

uint64_t PommesContext.description.getter()
{
  return MEMORY[0x1F4150EA8]();
}

uint64_t PommesContext.renderedTexts.getter()
{
  return MEMORY[0x1F4150EB0]();
}

Swift::Bool __swiftcall PommesContext.isWithinMaxSize()()
{
  return MEMORY[0x1F4150EC0]();
}

uint64_t PommesContext.exportLegacyNLContext()()
{
  return MEMORY[0x1F4150ED8]();
}

uint64_t PommesContext.redactedRenderedTexts.getter()
{
  return MEMORY[0x1F4150EE0]();
}

uint64_t type metadata accessor for PommesContext.Source()
{
  return MEMORY[0x1F4150EF0]();
}

uint64_t PommesContext.init(source:domain:listenAfterSpeaking:)()
{
  return MEMORY[0x1F4150F00]();
}

uint64_t PommesContext.update(with:)()
{
  return MEMORY[0x1F4150F10]();
}

uint64_t type metadata accessor for PommesContext()
{
  return MEMORY[0x1F4150F18]();
}

uint64_t dispatch thunk of PommesResponse.experiences.getter()
{
  return MEMORY[0x1F4150F30]();
}

uint64_t dispatch thunk of PommesResponse.searchReason.getter()
{
  return MEMORY[0x1F4150F40]();
}

uint64_t PommesResponse.metadataDomainName.getter()
{
  return MEMORY[0x1F4150F78]();
}

uint64_t dispatch thunk of PommesResponse.primaryQueryConfidence()()
{
  return MEMORY[0x1F4150FA0]();
}

uint64_t PommesResponse.metadataFallbackTriggered.getter()
{
  return MEMORY[0x1F4150FD8]();
}

uint64_t PommesResponse.requestId.getter()
{
  return MEMORY[0x1F41510D8]();
}

uint64_t dispatch thunk of GenericExperience.serverSuggestions.getter()
{
  return MEMORY[0x1F4151288]();
}

uint64_t type metadata accessor for GenericExperience()
{
  return MEMORY[0x1F4151298]();
}

uint64_t dispatch thunk of ScopedReferenceResolutionDataProvider.dataForCurrentRequest.setter()
{
  return MEMORY[0x1F4158218]();
}

uint64_t type metadata accessor for ScopedReferenceResolutionDataProvider()
{
  return MEMORY[0x1F4158220]();
}

uint64_t ReferenceResolutionClient.__allocating_init()()
{
  return MEMORY[0x1F4158268]();
}

uint64_t type metadata accessor for ReferenceResolutionClient()
{
  return MEMORY[0x1F4158270]();
}

uint64_t dispatch thunk of SalientEntitiesDataProvider.salientEntities.getter()
{
  return MEMORY[0x1F41582A0]();
}

uint64_t dispatch thunk of SalientEntitiesDataProvider.salientEntities.setter()
{
  return MEMORY[0x1F41582A8]();
}

uint64_t type metadata accessor for ExperimentationAnalyticsManager()
{
  return MEMORY[0x1F4104ED0]();
}

uint64_t os_log(_:dso:log:type:_:)()
{
  return MEMORY[0x1F41884F0]();
}

uint64_t os_signpost(_:dso:log:name:signpostID:_:_:)()
{
  return MEMORY[0x1F4188508]();
}

uint64_t os_signpost(_:dso:log:name:signpostID:)()
{
  return MEMORY[0x1F4188510]();
}

uint64_t OSSignpostID.init(log:)()
{
  return MEMORY[0x1F4188568]();
}

uint64_t OSSignpostID.rawValue.getter()
{
  return MEMORY[0x1F4188570]();
}

uint64_t static OSSignpostID.exclusive.getter()
{
  return MEMORY[0x1F4188578]();
}

uint64_t type metadata accessor for OSSignpostID()
{
  return MEMORY[0x1F4188580]();
}

uint64_t OSSignposter.init(logger:)()
{
  return MEMORY[0x1F4188590]();
}

uint64_t OSSignposter.logHandle.getter()
{
  return MEMORY[0x1F41885B0]();
}

uint64_t type metadata accessor for OSSignposter()
{
  return MEMORY[0x1F41885D0]();
}

uint64_t type metadata accessor for OSSignpostError()
{
  return MEMORY[0x1F41885E0]();
}

uint64_t OSSignpostIntervalState.signpostID.getter()
{
  return MEMORY[0x1F4188650]();
}

uint64_t OSSignpostIntervalState.init(id:isOpen:)()
{
  return MEMORY[0x1F4188658]();
}

uint64_t type metadata accessor for OSSignpostIntervalState()
{
  return MEMORY[0x1F4188660]();
}

uint64_t checkForErrorAndConsumeState(state:)()
{
  return MEMORY[0x1F4188668]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x1F4188670]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x1F41886A0]();
}

uint64_t Logger.init(_:)()
{
  return MEMORY[0x1F41886B0]();
}

uint64_t static RRMetadata.== infix(_:_:)()
{
  return MEMORY[0x1F41582C0]();
}

uint64_t type metadata accessor for RRMetadata()
{
  return MEMORY[0x1F41582C8]();
}

uint64_t RRCandidate.score.getter()
{
  return MEMORY[0x1F41582D0]();
}

uint64_t RRCandidate.entity.getter()
{
  return MEMORY[0x1F41582D8]();
}

uint64_t type metadata accessor for RRCandidate()
{
  return MEMORY[0x1F41582E0]();
}

uint64_t GroupIdentifier.init(id:seq:)()
{
  return MEMORY[0x1F41582F8]();
}

uint64_t type metadata accessor for GroupIdentifier()
{
  return MEMORY[0x1F4158300]();
}

uint64_t type metadata accessor for RRDataSourceMetadataValue()
{
  return MEMORY[0x1F4158308]();
}

uint64_t RREntity.appBundleId.getter()
{
  return MEMORY[0x1F4158328]();
}

uint64_t RREntity.init(id:appBundleId:usoEntity:dataType:data:group:)()
{
  return MEMORY[0x1F4158338]();
}

uint64_t RREntity.id.getter()
{
  return MEMORY[0x1F4158340]();
}

uint64_t RREntity.group.setter()
{
  return MEMORY[0x1F4158350]();
}

uint64_t RREntity.dataType.getter()
{
  return MEMORY[0x1F4158358]();
}

uint64_t RREntity.metadata.getter()
{
  return MEMORY[0x1F4158360]();
}

uint64_t RREntity.usoEntity.getter()
{
  return MEMORY[0x1F4158368]();
}

uint64_t type metadata accessor for RREntity()
{
  return MEMORY[0x1F4158370]();
}

uint64_t type metadata accessor for RRFilter()
{
  return MEMORY[0x1F4158378]();
}

uint64_t ObservableObject<>.objectWillChange.getter()
{
  return MEMORY[0x1F40D69E0]();
}

uint64_t dispatch thunk of Cam.action(request:)()
{
  return MEMORY[0x1F4150450]();
}

uint64_t static CamSingletonProvider.cam(camEnabledFeatures:)()
{
  return MEMORY[0x1F4150458]();
}

uint64_t type metadata accessor for CamSingletonProvider()
{
  return MEMORY[0x1F4150460]();
}

uint64_t type metadata accessor for CamParse()
{
  return MEMORY[0x1F4150468]();
}

uint64_t type metadata accessor for CamAction()
{
  return MEMORY[0x1F4150470]();
}

uint64_t type metadata accessor for CamFeature()
{
  return MEMORY[0x1F4150478]();
}

uint64_t CamRequest.init(requestId:camId:rcId:maybeSpeechPackage:rankedActions:camEnabledFeatures:previousCamAction:)()
{
  return MEMORY[0x1F4150480]();
}

uint64_t type metadata accessor for CamRequest()
{
  return MEMORY[0x1F4150488]();
}

uint64_t CamResponse.camAction.getter()
{
  return MEMORY[0x1F4150490]();
}

uint64_t type metadata accessor for CamResponse()
{
  return MEMORY[0x1F4150498]();
}

uint64_t CamUSOParse.groupIndex.getter()
{
  return MEMORY[0x1F41504A0]();
}

uint64_t CamUSOParse.appBundleId.getter()
{
  return MEMORY[0x1F41504A8]();
}

uint64_t CamUSOParse.parserIdentifier.getter()
{
  return MEMORY[0x1F41504B0]();
}

uint64_t CamUSOParse.userParse.getter()
{
  return MEMORY[0x1F41504B8]();
}

uint64_t CamUSOParse.init(userParse:parserIdentifier:appBundleId:groupIndex:)()
{
  return MEMORY[0x1F41504C0]();
}

uint64_t type metadata accessor for CamUSOParse()
{
  return MEMORY[0x1F41504C8]();
}

uint64_t static CaarProvider.caar()()
{
  return MEMORY[0x1F41504D0]();
}

uint64_t type metadata accessor for CaarProvider()
{
  return MEMORY[0x1F41504D8]();
}

uint64_t RankedAction.alternatives.getter()
{
  return MEMORY[0x1F41504E0]();
}

uint64_t RankedAction.init(flowHandlerId:parse:score:loggingId:alternatives:userData:)()
{
  return MEMORY[0x1F41504E8]();
}

uint64_t RankedAction.init(flowHandlerId:parse:score:alternatives:userData:)()
{
  return MEMORY[0x1F41504F0]();
}

uint64_t RankedAction.flowHandlerId.getter()
{
  return MEMORY[0x1F41504F8]();
}

uint64_t RankedAction.parse.getter()
{
  return MEMORY[0x1F4150500]();
}

uint64_t RankedAction.score.getter()
{
  return MEMORY[0x1F4150508]();
}

uint64_t RankedAction.userData.getter()
{
  return MEMORY[0x1F4150510]();
}

uint64_t RankedAction.loggingId.getter()
{
  return MEMORY[0x1F4150518]();
}

uint64_t type metadata accessor for RankedAction()
{
  return MEMORY[0x1F4150520]();
}

uint64_t RankerContext.init(rrCandidates:responseMode:previousConversationHandlerId:maxNLProba:)()
{
  return MEMORY[0x1F4150528]();
}

uint64_t type metadata accessor for RankerContext()
{
  return MEMORY[0x1F4150530]();
}

uint64_t ActionCandidate.affinityScore.getter()
{
  return MEMORY[0x1F4150538]();
}

uint64_t ActionCandidate.init(flowHandlerId:parse:affinityScore:loggingId:userData:)()
{
  return MEMORY[0x1F4150540]();
}

uint64_t ActionCandidate.flowHandlerId.getter()
{
  return MEMORY[0x1F4150548]();
}

uint64_t ActionCandidate.parse.getter()
{
  return MEMORY[0x1F4150550]();
}

uint64_t ActionCandidate.userData.getter()
{
  return MEMORY[0x1F4150558]();
}

uint64_t ActionCandidate.loggingId.getter()
{
  return MEMORY[0x1F4150560]();
}

uint64_t type metadata accessor for ActionCandidate()
{
  return MEMORY[0x1F4150568]();
}

uint64_t dispatch thunk of Caar.rank(requestId:caarId:rcId:actions:rankerContext:)()
{
  return MEMORY[0x1F4150570]();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return MEMORY[0x1F4186C60]();
}

uint64_t static DispatchTimeoutResult.== infix(_:_:)()
{
  return MEMORY[0x1F4186C78]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x1F4186CB0]();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return MEMORY[0x1F4186CE0]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x1F4186CF8]();
}

uint64_t static DispatchQoS.userInitiated.getter()
{
  return MEMORY[0x1F4186D08]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x1F4186D60]();
}

uint64_t static DispatchTime.now()()
{
  return MEMORY[0x1F4186E28]();
}

uint64_t DispatchTime.advanced(by:)()
{
  return MEMORY[0x1F4186E38]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x1F4186E60]();
}

uint64_t + infix(_:_:)()
{
  return MEMORY[0x1F4186F08]();
}

uint64_t Dictionary.init()()
{
  return MEMORY[0x1F4183270]();
}

uint64_t Array.init()()
{
  return MEMORY[0x1F4183280]();
}

uint64_t CancellationError.init()()
{
  return MEMORY[0x1F4187BE8]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x1F40E6000]();
}

uint64_t static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1F40E6018]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E6030]();
}

uint64_t Dictionary.description.getter()
{
  return MEMORY[0x1F4183318]();
}

uint64_t Dictionary.removeValue(forKey:)()
{
  return MEMORY[0x1F4183320]();
}

uint64_t Dictionary.updateValue(_:forKey:)()
{
  return MEMORY[0x1F4183328]();
}

uint64_t Dictionary.init(minimumCapacity:)()
{
  return MEMORY[0x1F4183338]();
}

uint64_t Dictionary.debugDescription.getter()
{
  return MEMORY[0x1F4183350]();
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x1F4183358]();
}

uint64_t Dictionary.Keys.description.getter()
{
  return MEMORY[0x1F4183370]();
}

uint64_t type metadata accessor for Dictionary.Keys()
{
  return MEMORY[0x1F4183398]();
}

uint64_t type metadata accessor for Dictionary.Values()
{
  return MEMORY[0x1F4183408]();
}

Swift::Void __swiftcall Dictionary.removeAll(keepingCapacity:)(Swift::Bool keepingCapacity)
{
}

uint64_t type metadata accessor for Dictionary()
{
  return MEMORY[0x1F41834A8]();
}

uint64_t Dictionary.subscript.getter()
{
  return MEMORY[0x1F41834F8]();
}

uint64_t Dictionary.subscript.setter()
{
  return MEMORY[0x1F4183500]();
}

uint64_t dispatch thunk of Encodable.encode(to:)()
{
  return MEMORY[0x1F4183510]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x1F41835C0]();
}

uint64_t BidirectionalCollection<>.starts<A>(with:)()
{
  return MEMORY[0x1F4188420]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x1F4183730]();
}

uint64_t ObjectIdentifier.debugDescription.getter()
{
  return MEMORY[0x1F4183818]();
}

uint64_t ObjectIdentifier.hashValue.getter()
{
  return MEMORY[0x1F4183820]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x1F4183838]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x1F40E6190]();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1F40E61B8]();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1F40E61C8]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t String.data(using:allowLossyConversion:)()
{
  return MEMORY[0x1F40E61E8]();
}

uint64_t String.init(data:encoding:)()
{
  return MEMORY[0x1F40E61F8]();
}

uint64_t String.init<A>(bytes:encoding:)()
{
  return MEMORY[0x1F40E6200]();
}

uint64_t String.init(format:_:)()
{
  return MEMORY[0x1F40E6238]();
}

uint64_t static String.Encoding.utf8.getter()
{
  return MEMORY[0x1F40E6268]();
}

uint64_t type metadata accessor for String.Encoding()
{
  return MEMORY[0x1F40E62A0]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x1F4183880]();
}

Swift::String __swiftcall String.lowercased()()
{
  uint64_t v0 = MEMORY[0x1F4183898]();
  result._object = v1;
  result._uint64_t countAndFlagsBits = v0;
  return result;
}

uint64_t String.init<A>(reflecting:)()
{
  return MEMORY[0x1F41838A0]();
}

uint64_t String.utf8CString.getter()
{
  return MEMORY[0x1F41838B8]();
}

uint64_t String.toProtobufStringValue()()
{
  return MEMORY[0x1F41554E8]();
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x1F41838D8]();
}

uint64_t String.debugDescription.getter()
{
  return MEMORY[0x1F4183918]();
}

uint64_t String.md5String.getter()
{
  return MEMORY[0x1F41582B0]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x1F41839B0]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x1F41839F0]();
}

uint64_t String.index(before:)()
{
  return MEMORY[0x1F4183A00]();
}

uint64_t String.index(_:offsetBy:)()
{
  return MEMORY[0x1F4183A10]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x1F4183A80]();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return MEMORY[0x1F4183B30](a1._countAndFlagsBits, a1._object);
}

uint64_t String.hashValue.getter()
{
  return MEMORY[0x1F4183B40]();
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x1F4183B58]();
}

{
  return MEMORY[0x1F4183BA0]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x1F4183B90]();
}

uint64_t Sequence.compactMap<A>(_:)()
{
  return MEMORY[0x1F4183BE8]();
}

uint64_t Sequence._copyContents(initializing:)()
{
  return MEMORY[0x1F4183BF8]();
}

uint64_t Sequence.withContiguousStorageIfAvailable<A>(_:)()
{
  return MEMORY[0x1F4183C18]();
}

uint64_t Sequence.contains(where:)()
{
  return MEMORY[0x1F4183C88]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x1F4183D70]();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return MEMORY[0x1F4183D80]();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return MEMORY[0x1F4183DF8]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x1F4183E80]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x1F40E6338]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E6370]();
}

uint64_t Array<A>.hasWantedToUndo.getter()
{
  return MEMORY[0x1F4152AA8]();
}

uint64_t Array<A>.hasWantedToPause.getter()
{
  return MEMORY[0x1F4152AB0]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x1F4183E90]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x1F4183E98]();
}

uint64_t Array._checkSubscript(_:wasNativeTypeChecked:)()
{
  return MEMORY[0x1F4183EA8]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1F4183EC8]();
}

uint64_t Array.debugDescription.getter()
{
  return MEMORY[0x1F4183ED0]();
}

uint64_t static Array._allocateUninitialized(_:)()
{
  return MEMORY[0x1F4183EF0]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x1F4183F08]();
}

Swift::Bool __swiftcall Array._hoistableIsNativeTypeChecked()()
{
  return MEMORY[0x1F4183F18]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1F4183F38]();
}

uint64_t Array.count.getter()
{
  return MEMORY[0x1F4183F40]();
}

uint64_t Array.append(_:)()
{
  return MEMORY[0x1F4183F60]();
}

uint64_t Array.endIndex.getter()
{
  return MEMORY[0x1F4183F78]();
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x1F4183FA8]();
}

uint64_t Array.init<A>(_:)()
{
  return MEMORY[0x1F4183FD8]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x1F4187BF0]();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return MEMORY[0x1F4187C00]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x1F4187C08]();
}

uint64_t type metadata accessor for CheckedContinuation()
{
  return MEMORY[0x1F4187C10]();
}

uint64_t type metadata accessor for CancellationError()
{
  return MEMORY[0x1F4187C18]();
}

uint64_t TaskGroup.makeAsyncIterator()()
{
  return MEMORY[0x1F4187C38]();
}

uint64_t static TaskPriority.background.getter()
{
  return MEMORY[0x1F4187CA8]();
}

uint64_t static TaskPriority.userInitiated.getter()
{
  return MEMORY[0x1F4187CB0]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x1F4187CF8]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x1F4187D00]();
}

uint64_t static AsyncStream.makeStream(of:bufferingPolicy:)()
{
  return MEMORY[0x1F4187D08]();
}

uint64_t type metadata accessor for AsyncStream.Continuation.YieldResult()
{
  return MEMORY[0x1F4187D10]();
}

uint64_t type metadata accessor for AsyncStream.Continuation.BufferingPolicy()
{
  return MEMORY[0x1F4187D20]();
}

uint64_t AsyncStream.Continuation.yield(_:)()
{
  return MEMORY[0x1F4187D38]();
}

Swift::Void __swiftcall AsyncStream.Continuation.finish()()
{
}

uint64_t type metadata accessor for AsyncStream.Continuation()
{
  return MEMORY[0x1F4187D48]();
}

uint64_t AsyncStream.makeAsyncIterator()()
{
  return MEMORY[0x1F4187D50]();
}

uint64_t type metadata accessor for AsyncStream()
{
  return MEMORY[0x1F4187D70]();
}

uint64_t AsyncStream.init(_:bufferingPolicy:_:)()
{
  return MEMORY[0x1F4187D78]();
}

uint64_t static Task.== infix(_:_:)()
{
  return MEMORY[0x1F4187D80]();
}

uint64_t Task.hash(into:)()
{
  return MEMORY[0x1F4187D88]();
}

Swift::Void __swiftcall Task.cancel()()
{
}

uint64_t static Task<>.isCancelled.getter()
{
  return MEMORY[0x1F4187DC8]();
}

uint64_t static Task<>.checkCancellation()()
{
  return MEMORY[0x1F4187DD8]();
}

uint64_t Double.write<A>(to:)()
{
  return MEMORY[0x1F4184048]();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)MEMORY[0x1F40E6430]();
}

uint64_t static Set._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x1F40E6440]();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x1F40E6458]();
}

uint64_t Set.description.getter()
{
  return MEMORY[0x1F4184100]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x1F4184138]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x1F41841D0]();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x1F40E6478]();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return MEMORY[0x1F41842D0]();
}

uint64_t dispatch thunk of Collection.count.getter()
{
  return MEMORY[0x1F41842F8]();
}

uint64_t dispatch thunk of Collection.formIndex(after:)()
{
  return MEMORY[0x1F4184338]();
}

uint64_t Collection.isEmpty.getter()
{
  return MEMORY[0x1F41843D0]();
}

uint64_t dispatch thunk of Collection.subscript.read()
{
  return MEMORY[0x1F4184440]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x1F41886C0]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x1F41886D0]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x1F41886E0]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x1F41886E8]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x1F4188700]();
}

uint64_t static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)()
{
  return MEMORY[0x1F40E66C8]();
}

uint64_t static NSKeyedUnarchiver.unarchiveTopLevelObjectWithData(_:)()
{
  return MEMORY[0x1F40E6700]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x1F4186FD8]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x1F41870A0]();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return MEMORY[0x1F41870B8]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x1F4187100]();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return MEMORY[0x1F4187110]();
}

uint64_t type metadata accessor for OS_dispatch_source.TimerFlags()
{
  return MEMORY[0x1F4187130]();
}

uint64_t static OS_dispatch_source.makeTimerSource(flags:queue:)()
{
  return MEMORY[0x1F4187168]();
}

uint64_t OS_dispatch_source.setEventHandler(qos:flags:handler:)()
{
  return MEMORY[0x1F41871D0]();
}

Swift::Void __swiftcall OS_dispatch_source.resume()()
{
}

uint64_t USOSerializedGraph.usoSerializedGraphToUsoGraphSiriNl()()
{
  return MEMORY[0x1F41576B8]();
}

uint64_t static USOSerializedGraph.fromProto(protoGraph:)()
{
  return MEMORY[0x1F41576C0]();
}

uint64_t static os_signpost_type_t.end.getter()
{
  return MEMORY[0x1F4188708]();
}

uint64_t static os_signpost_type_t.begin.getter()
{
  return MEMORY[0x1F4188710]();
}

uint64_t static os_signpost_type_t.event.getter()
{
  return MEMORY[0x1F4188718]();
}

uint64_t OS_dispatch_semaphore.wait(timeout:)()
{
  return MEMORY[0x1F4187268]();
}

Swift::Void __swiftcall OS_dispatch_semaphore.wait()()
{
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return MEMORY[0x1F4187288]();
}

uint64_t SISchemaComponentName.description.getter()
{
  return MEMORY[0x1F41514D8]();
}

uint64_t SIRINLUSystemDialogAct.toNluSystemDialogAct()()
{
  return MEMORY[0x1F4152AC0]();
}

uint64_t OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)()
{
  return MEMORY[0x1F41872D0]();
}

uint64_t SISchemaDeviceSensitivityState.description.getter()
{
  return MEMORY[0x1F4151500]();
}

uint64_t SAIntentGroupRunSiriKitExecutor.executeOnRemotePayload()()
{
  return MEMORY[0x1F4152AC8]();
}

uint64_t SAIntentGroupRunSiriKitExecutor.hasExecuteOnRemotePayload.getter()
{
  return MEMORY[0x1F4152AD0]();
}

uint64_t CNVSchemaCNVExecutionOverrideDecision.description.getter()
{
  return MEMORY[0x1F4151510]();
}

uint64_t POMMESSchemaPOMMESSelfReflectionAgentDecision.description.getter()
{
  return MEMORY[0x1F4151528]();
}

uint64_t NSSet.init(objects:)()
{
  return MEMORY[0x1F40E67F0]();
}

uint64_t NSArray.init(arrayLiteral:)()
{
  return MEMORY[0x1F40E6828]();
}

uint64_t NSArray.makeIterator()()
{
  return MEMORY[0x1F40E6840]();
}

uint64_t NSCoder.decodeObject<A>(of:forKey:)()
{
  return MEMORY[0x1F40E6858]();
}

uint64_t NSCoder.decodeObject(of:forKey:)()
{
  return MEMORY[0x1F40E6860]();
}

uint64_t NSCoder.decodeDictionary<A, B>(withKeyClass:objectClass:forKey:)()
{
  return MEMORY[0x1F40E6868]();
}

uint64_t INIntent.debugDescriptionLite.getter()
{
  return MEMORY[0x1F4152AD8]();
}

uint64_t NSBundle.packageId.getter()
{
  return MEMORY[0x1F415AF28]();
}

NSNumber __swiftcall NSNumber.init(BOOLeanLiteral:)(Swift::Bool BOOLeanLiteral)
{
  return (NSNumber)MEMORY[0x1F40E68F8](BOOLeanLiteral);
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)MEMORY[0x1F40E6910](integerLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x1F41874A8](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x1F41874C0]();
}

uint64_t OS_os_log.signpostsEnabled.getter()
{
  return MEMORY[0x1F4188720]();
}

uint64_t OS_os_log.init(subsystem:category:)()
{
  return MEMORY[0x1F4188758]();
}

uint64_t Optional.debugDescription.getter()
{
  return MEMORY[0x1F4184628]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x1F4184640]();
}

uint64_t Optional<A>.encode(to:)()
{
  return MEMORY[0x1F4184648]();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return MEMORY[0x1F41847A0]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x1F41847C0]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x1F4184820]();
}

uint64_t StringProtocol.components<A>(separatedBy:)()
{
  return MEMORY[0x1F40E6BB0]();
}

uint64_t StringProtocol.trimmingCharacters(in:)()
{
  return MEMORY[0x1F40E6C68]();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return MEMORY[0x1F40E6C80]();
}

uint64_t StringProtocol.range<A>(of:options:range:locale:)()
{
  return MEMORY[0x1F40E6D38]();
}

uint64_t StringProtocol.compare<A>(_:options:range:locale:)()
{
  return MEMORY[0x1F40E6D58]();
}

uint64_t StringProtocol.contains<A>(_:)()
{
  return MEMORY[0x1F40E6D88]();
}

uint64_t StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)()
{
  return MEMORY[0x1F41876A8]();
}

uint64_t BinaryInteger.description.getter()
{
  return MEMORY[0x1F4184958]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x1F4184978]();
}

uint64_t dispatch thunk of SetAlgebra.isSuperset(of:)()
{
  return MEMORY[0x1F4184A78]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x1F4184B18]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x1F4184B20]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x1F4184B30]();
}

Swift::Void __swiftcall _NativeSet.removeAll(isUnique:)(Swift::Bool isUnique)
{
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x1F4184B60]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x1F4184B90]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x1F4184BA8]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x1F4184BC0]();
}

uint64_t __CocoaSet.contains(_:)()
{
  return MEMORY[0x1F4184BC8]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x1F4184C18](seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return MEMORY[0x1F4184C20]();
}

uint64_t AnyHashable.init<A>(_:)()
{
  return MEMORY[0x1F4184C38]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x1F4184C90]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1F4184C98]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x1F4184CA0]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x1F4184CA8]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x1F4184CF0]();
}

uint64_t dispatch thunk of Identifiable.id.getter()
{
  return MEMORY[0x1F4184D08]();
}

uint64_t StaticString.description.getter()
{
  return MEMORY[0x1F4184D20]();
}

Swift::Void __swiftcall _ArrayBuffer._typeCheckSlowPath(_:)(Swift::Int a1)
{
}

uint64_t _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1F4184D78]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x1F4184D80]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x1F4184D88]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t _ArrayProtocol.filter(_:)()
{
  return MEMORY[0x1F4184EA8]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x1F4184EC8]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x1F4184ED8]();
}

Swift::Void __swiftcall ContiguousArray.reserveCapacity(_:)(Swift::Int a1)
{
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x1F4184EF0]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x1F4184F28]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x1F4184F30]();
}

uint64_t ContiguousArray.append(_:)()
{
  return MEMORY[0x1F4184F48]();
}

uint64_t ContiguousArray.init()()
{
  return MEMORY[0x1F4184F68]();
}

uint64_t type metadata accessor for ContiguousArray()
{
  return MEMORY[0x1F4184F70]();
}

uint64_t dispatch thunk of _AnySequenceBox._makeIterator()()
{
  return MEMORY[0x1F4184FF8]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x1F4185050]();
}

uint64_t CodingUserInfoKey.init(rawValue:)()
{
  return MEMORY[0x1F41850B0]();
}

uint64_t type metadata accessor for CodingUserInfoKey()
{
  return MEMORY[0x1F41850C0]();
}

Swift::Void __swiftcall _NativeDictionary.removeAll(isUnique:)(Swift::Bool isUnique)
{
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x1F4185298]();
}

{
  return MEMORY[0x1F41852A0]();
}

uint64_t _assertionFailure(_:_:flags:)()
{
  return MEMORY[0x1F41852A8]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x1F4185350]();
}

uint64_t _CocoaArrayWrapper.subscript.getter()
{
  return MEMORY[0x1F4185358]();
}

{
  return MEMORY[0x1F4185360]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x1F4185368]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x1F4185370]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x1F4185380]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x1F4185398]();
}

uint64_t dispatch thunk of _AnyIteratorBoxBase.next()()
{
  return MEMORY[0x1F41853A8]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x1F41854C8](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x1F4185568]();
}

{
  return MEMORY[0x1F4185588]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x1F4185598]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x1F4185608]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x1F4185690]();
}

{
  return MEMORY[0x1F4185698]();
}

{
  return MEMORY[0x1F41856A0]();
}

{
  return MEMORY[0x1F41856B0]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x1F41856C0]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x1F4185740](a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x1F4185758]();
}

uint64_t _getErrorEmbeddedNSError<A>(_:)()
{
  return MEMORY[0x1F41859A8]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x1F4185A30]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t dispatch thunk of CustomDebugStringConvertible.debugDescription.getter()
{
  return MEMORY[0x1F4185A48]();
}

uint64_t type metadata accessor for __ContiguousArrayStorageBase()
{
  return MEMORY[0x1F4185B98]();
}

uint64_t _findStringSwitchCaseWithCache(cases:string:cache:)()
{
  return MEMORY[0x1F4185D10]();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return MEMORY[0x1F4185D40]();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return MEMORY[0x1F4185D68]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1F4185DD8]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x1F4185DE0]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x1F40E6E30]();
}

uint64_t static Hasher._hash(seed:_:)()
{
  return MEMORY[0x1F4185EA8]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x1F4185EB0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt32 a1)
{
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t Mirror.superclassMirror.getter()
{
  return MEMORY[0x1F4185F08]();
}

uint64_t Mirror.init(reflecting:)()
{
  return MEMORY[0x1F4185F10]();
}

uint64_t Mirror.subjectType.getter()
{
  return MEMORY[0x1F4185F20]();
}

uint64_t type metadata accessor for Mirror()
{
  return MEMORY[0x1F4185F48]();
}

uint64_t type metadata accessor for Result()
{
  return MEMORY[0x1F4185F68]();
}

uint64_t dispatch thunk of Decoder.userInfo.getter()
{
  return MEMORY[0x1F4185FC0]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1F4185FC8]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x1F4185FF0]();
}

uint64_t dispatch thunk of OptionSet.init(rawValue:)()
{
  return MEMORY[0x1F41862B8]();
}

uint64_t TaskLocal.init(wrappedValue:)()
{
  return MEMORY[0x1F4188198]();
}

uint64_t TaskLocal.get()()
{
  return MEMORY[0x1F41881A8]();
}

uint64_t TaskLocal.withValue<A>(_:operation:file:line:)()
{
  return MEMORY[0x1F41881B0]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x1F4186318]();
}

uint64_t AFCurrentUserInterfaceIdiom()
{
  return MEMORY[0x1F410AC48]();
}

uint64_t AFDeviceSupportsSAE()
{
  return MEMORY[0x1F410ACB8]();
}

uint64_t AFDeviceSupportsSAEByDeviceCapabilityAndFeatureFlags()
{
  return MEMORY[0x1F410ACC0]();
}

uint64_t AFDeviceSupportsSiriMUX()
{
  return MEMORY[0x1F410ACD0]();
}

uint64_t AFIsInternalInstall()
{
  return MEMORY[0x1F410AD50]();
}

uint64_t AFSupportsASROnDevice()
{
  return MEMORY[0x1F410AF18]();
}

uint64_t AFSupportsCallHangUp()
{
  return MEMORY[0x1F410AF28]();
}

uint64_t AFSupportsMultiUser()
{
  return MEMORY[0x1F410AF30]();
}

uint64_t AFSupportsSiriInCall()
{
  return MEMORY[0x1F410AF38]();
}

uint64_t AFSystemRootDirectory()
{
  return MEMORY[0x1F410AF58]();
}

uint64_t INIntentCreate()
{
  return MEMORY[0x1F40E9AD0]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x1F417CE28]();
}

uint64_t MGGetStringAnswer()
{
  return MEMORY[0x1F417CE38]();
}

uint64_t MKBGetDeviceLockState()
{
  return MEMORY[0x1F412F980]();
}

uint64_t MSVDeviceIsAppleTV()
{
  return MEMORY[0x1F412EBB0]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_release(const void *aBlock)
{
}

double __exp10(double a1)
{
  MEMORY[0x1F40C9B90](a1);
  return result;
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x1F4186370]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1F4186388]();
}

void bzero(void *a1, size_t a2)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

void free(void *a1)
{
}

int getrusage(int a1, rusage *a2)
{
  return MEMORY[0x1F40CC508](*(void *)&a1, a2);
}

long double log10(long double __x)
{
  MEMORY[0x1F40CC880](__x);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1F40CD5A0]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1F41863D0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1F41863E0]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1F4186410]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x1F4186420]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x1F4186428]();
}

uint64_t swift_asyncLet_begin()
{
  return MEMORY[0x1F41881C8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1F4186430]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1F4186458]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1F4186460]();
}

uint64_t swift_conformsToProtocol2()
{
  return MEMORY[0x1F4186478]();
}

uint64_t swift_continuation_init()
{
  return MEMORY[0x1F41881F0]();
}

uint64_t swift_continuation_resume()
{
  return MEMORY[0x1F41881F8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1F4186488]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1F41864A0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x1F4188218]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x1F4188220]();
}

uint64_t swift_deletedMethodError()
{
  return MEMORY[0x1F41864B0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1F41864C0]();
}

uint64_t swift_dynamicCastMetatype()
{
  return MEMORY[0x1F41864D0]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x1F41864E0]();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return MEMORY[0x1F41864F0]();
}

uint64_t swift_dynamicCastUnknownClass()
{
  return MEMORY[0x1F4186508]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1F4186518]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1F4186540]();
}

uint64_t swift_getAtAnyKeyPath()
{
  return MEMORY[0x1F4186548]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x1F4186550]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x1F4186568]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1F4186570]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x1F4186580]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1F41865E0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1F41865E8]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x1F41865F0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x1F41865F8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x1F4186610]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x1F4186618]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTupleTypeLayout()
{
  return MEMORY[0x1F4186630]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x1F4186638]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x1F4186640]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1F4186650]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x1F4186688]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1F4186690]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x1F41866A0]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1F41866A8]();
}

uint64_t swift_initStaticObject()
{
  return MEMORY[0x1F41866B0]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1F41866B8]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x1F41866C0]();
}

uint64_t swift_isUniquelyReferenced_native()
{
  return MEMORY[0x1F41866E8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x1F41866F8]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1F4186710]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1F4186760]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1F4186778]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1F4186790]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x1F41867A8]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1F41867B8]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x1F4188250]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x1F4188258]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x1F4188260]();
}

uint64_t swift_task_isCancelled()
{
  return MEMORY[0x1F4188270]();
}

uint64_t swift_task_localValuePop()
{
  return MEMORY[0x1F4188280]();
}

uint64_t swift_task_localValuePush()
{
  return MEMORY[0x1F4188288]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1F41867D8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x1F41867E8]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1F41867F8]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x1F4186840]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x1F4186858]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x1F4186860]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x1F4186868]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x1F4186898]();
}

uint64_t swift_weakAssign()
{
  return MEMORY[0x1F41868A0]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x1F41868B8]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x1F41868C0]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x1F41868C8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1F41868E0]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x1F41868E8]();
}